using System;
using System.Collections.Generic;
using System.Web.UI.WebControls;
using System.Data;
using System.Collections;
using System.Drawing;
using System.Text;
using InsproDataAccess;
using System.Web.UI;
using System.Net;

public partial class journal : System.Web.UI.Page
{
    static ArrayList ItemList = new ArrayList();
    static ArrayList Itemindex = new ArrayList();
    Hashtable ht = new Hashtable();
    int count = 0;
    bool spreadstud_click = false;
    bool spreadstud2_click = false;
    bool spreadstud3_click = false;
    static byte roll = 0;
    string usercode = string.Empty;
    static string collegecode1 = string.Empty;
    string collegecode = string.Empty;
    string singleuser = string.Empty;
    string group_user = string.Empty;
    string sessstream = string.Empty;
    DataSet ds = new DataSet();
    DAccess2 d2 = new DAccess2();
    static Hashtable ledgertotal = new Hashtable();
    static Hashtable headertotal = new Hashtable();
    static Hashtable Grandtotal = new Hashtable();
    static Hashtable hsgetpay = new Hashtable();
    static ArrayList columnind = new ArrayList();
    ReuasableMethods reuse = new ReuasableMethods();
    InsproDirectAccess dirAccess = new InsproDirectAccess();
    string columnname = "";
    static int personmode = 0;
    static int chosedmode = 0;
    static int applied = 0;
    static int distcon = 0;
    static int compl = 0;

    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["collegecode"] == null)
        {
            Response.Redirect("Default.aspx");
        }
        usercode = Session["usercode"].ToString();
        // collegecode1 = Session["collegecode"].ToString();
        singleuser = Session["single_user"].ToString();
        group_user = Session["group_code"].ToString();

        sessstream = Convert.ToString(Session["streamcode"]);
        lbl_stream.Text = sessstream;

        plusdiv.Visible = false;
        lbl_norec.Visible = false;
        //this.Form.DefaultButton = "btn_go";
        string grouporusercode = "";
        if ((Session["group_code"].ToString().Trim() != "") && (Session["group_code"].ToString().Trim() != "0") && (Session["group_code"].ToString().Trim() != "-1"))
        {
            grouporusercode = " group_code=" + Session["group_code"].ToString().Trim() + "";
            usercode = Session["group_code"].ToString();
        }
        else
        {
            grouporusercode = " usercode=" + Session["usercode"].ToString().Trim() + "";
            usercode = Session["usercode"].ToString();
        }
        if (!IsPostBack)
        {
            setLabelText();
            bindcollege();
            if (ddl_college.Items.Count > 0)
            {
                collegecode1 = Convert.ToString(ddl_college.SelectedItem.Value);
                collegecode = Convert.ToString(ddl_college.SelectedItem.Value);
            }
            loadColumns();
            loadstream();
            loadedulevel();
            BindBatch();
            Bindcourse();
            binddept();
            loadseat();
            //loadtype();
            // loadstutype();
            loadType();
            loadsem();
            headerbind();
            loadledger();
            loadquota();//added  by abarna

            bindaddreason();
            //batchyear();
            loadreligion();
            loadcommunity();
            loaddesc1();
            //  ItemList.Add("Mode");
            // ItemList.Add("Fee Amount");
            // ItemList.Add("Total");
            loadcolumns();
            // btn_go_click(sender, e);

            ledgertotal.Clear();
            headertotal.Clear();
            Grandtotal.Clear();
            hsgetpay.Clear();
            lnkview.Visible = false;
            txt_roll.Visible = false;
            rbl_rollno.Visible = false;
            lblNameSrc.Visible = false;
            txt_name.Visible = false;
            tborder.Visible = false;
            txt_due.Text = DateTime.Now.ToString("dd/MM/yyyy");
            txt_due.Attributes.Add("readonly", "readonly");
            txtreeadddt.Text = DateTime.Now.ToString("dd/MM/yyyy");
            txtreeadddt.Attributes.Add("readonly", "readonly");
            getDiscontinue();
            loadDisable();
            lblfyear.Visible = false;
            ddlfinyear.Visible = false;
            if (checkSchoolSetting() == 0)
            {
                loadfinanceyear();
                lblfyear.Visible = true;
                ddlfinyear.Visible = true;
            }
            ddl_type.SelectedIndex = 2;
            ddl_type_SelectedIndexChanged(sender, e);
            loadState();
            loadscholarship();//added by abarna 22.02.2018
        }

        if (ddl_college.Items.Count > 0)
        {
            collegecode1 = Convert.ToString(ddl_college.SelectedItem.Value);
            collegecode = Convert.ToString(ddl_college.SelectedItem.Value);
        }
        if (isStreamEnabled())
        {
            txt_stream.Enabled = true;
        }
        else
        {
            txt_stream.Enabled = false;
        }
    }
    protected void ddl_college_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            ddl_college.SelectedIndex = ddl_college.Items.IndexOf(ddl_college.Items.FindByValue(ddl_college.SelectedItem.Value));
            if (ddl_type.SelectedItem.Text == "General")
            {
                lnkview.Visible = false;
            }
            if (ddl_type.SelectedItem.Text == "Individual(Admitted)")
            {
                lnkview.Visible = true;
            }
            loadstream();
            loadedulevel();
            BindBatch();
            Bindcourse();
            binddept();
            loadseat();
            //loadtype();
            loadstutype();
            loadsem();
            headerbind();
            loadledger();
            loadquota();
            bindaddreason();
            loaddesc1();
            loadcommunity();
            loadreligion();
            getConcessionSet();//added by abarna 15.02.2018
            loadColumns();//added by abarna 15.02.2018
            //loadscholarship();//added by abarna 22.02.2018
            //batchyear();
            // ItemList.Clear();
            // ItemList.Add("Mode");
            //  ItemList.Add("Fee Amount");
            // ItemList.Add("Total");
            loadcolumns();
            if (checkSchoolSetting() == 0)
            {

                loadfinanceyear();//added by abarna
            }
            ledgertotal.Clear();
            headertotal.Clear();
            Grandtotal.Clear();
            loadDisable();
            loadState();
        }
        catch { }
    }
    protected void lb2_Click(object sender, EventArgs e)
    {
        try
        {
            Session.Abandon();
            Session.Clear();
            Session.RemoveAll();
            System.Web.Security.FormsAuthentication.SignOut();
            Response.Redirect("default.aspx", false);
        }
        catch
        {

        }
    }
    protected void bindcollege()
    {
        try
        {
            string strUser = d2.getUserCode(Convert.ToString(Session["group_code"]), Convert.ToString(Session["usercode"]), 1);
            ds.Clear();
            ddl_college.Items.Clear();
            string query = "select cp.college_code,cf.collname from collegeprivilages cp,collinfo cf where " + strUser + " and cp.college_code=cf.college_code";
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddl_college.DataSource = ds;
                ddl_college.DataTextField = "collname";
                ddl_college.DataValueField = "college_code";
                ddl_college.DataBind();
            }
        }
        catch
        {
        }
    }
    //[System.Web.Services.WebMethod]
    //[System.Web.Script.Services.ScriptMethod()]
    //public static List<string> Getroll(string prefixText)
    //{
    //    WebService ws = new WebService();
    //    List<string> roll = new List<string>();
    //    // if (Hostelcode.Trim() != "")
    //    //{
    //    //  query = "select R.Roll_No from Registration r,Hostel_StudentDetails h where r.Roll_Admit =h.Roll_Admit and CC=0 and DelFlag =0 and Exam_Flag <>'DEBAR' and Hostel_Code in ('" + Hostelcode + "') and R.roll_no like '" + prefixText + "%' ";
    //    string query = "select distinct top (10) Reg_No from Registration where college_code ='" + collegecode1 + "' and Reg_No like '" + prefixText + "%'";
    //    //}

    //    // string query = "select distinct Store_Name from StoreMaster WHERE Store_Name like '" + prefixText + "%'";
    //    roll = ws.Getname(query);
    //    return roll;
    //}
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> Getroll(string prefixText)
    {
        List<string> name = new List<string>();
        try
        {
            string query = "";
            WebService ws = new WebService();
            if (personmode == 0)
            {
                //student query
                if (chosedmode == 0)
                {
                    query = "select top 100 Roll_No from Registration where college_code ='" + collegecode1 + "' and Roll_No like '" + prefixText + "%' order by Roll_No asc";
                }
                else if (chosedmode == 1)
                {
                    query = "select  top 100 Reg_No from Registration where college_code ='" + collegecode1 + "' and Reg_No like '" + prefixText + "%' order by Reg_No asc";
                }
                else if (chosedmode == 2)
                {
                    query = "select  top 100 Roll_admit from Registration where college_code ='" + collegecode1 + "' and Roll_admit like '" + prefixText + "%' order by Roll_admit asc ";
                }
                else
                {
                    query = "  select  top 100 app_formno from applyn where admission_status =0 and isconfirm ='1' and app_formno like '" + prefixText + "%' order by app_formno asc";
                }
            }


            name = ws.Getname(query);
            return name;
        }
        catch { return name; }
    }
    //public void batchyear()
    //{
    //    ddlyear1.Items.Clear();
    //    ds.Clear();
    //    ds = d2.BindBatch();
    //    if (ds.Tables.Count > 0)
    //    {
    //        if (ds.Tables[0].Rows.Count > 0)
    //        {
    //            ddlyear1.DataSource = ds;
    //            ddlyear1.DataTextField = "batch_year";
    //            ddlyear1.DataValueField = "batch_year";
    //            ddlyear1.DataBind();
    //        }
    //    }
    //}
    public void monthwise(string actcol, string actrow)
    {
        try
        {
            #region Montwise Retrieve
            string[] prevYear = new string[13];
            string[] prevAmt = new string[13];
            double totamt = 0;
            try
            {
                string monvwiseDet = Convert.ToString(FpSpread1.Sheets[0].Cells[Convert.ToInt32(actrow), Convert.ToInt32(actcol) + 1].Tag);
                string[] monsplit = monvwiseDet.Split(',');

                if (monsplit.Length > 0)
                {
                    foreach (string mondet in monsplit)
                    {
                        string[] detSplit = mondet.Split(':');
                        if (detSplit.Length == 3)
                        {
                            prevYear[Convert.ToInt32(detSplit[0])] = detSplit[1];
                            prevAmt[Convert.ToInt32(detSplit[0])] = detSplit[2];
                            double totTempamt = 0;
                            double.TryParse(detSplit[2], out totTempamt);
                            totamt += totTempamt;
                        }
                    }
                }
            }
            catch { }
            #endregion

            FpSpread3.Sheets[0].RowCount = 0;
            FpSpread3.Sheets[0].ColumnCount = 0;
            FpSpread3.SaveChanges();
            FpSpread3.Sheets[0].RowHeader.Visible = false;
            FpSpread3.CommandBar.Visible = false;
            FpSpread3.Sheets[0].AutoPostBack = false;
            FpSpread3.Sheets[0].RowCount = 14;
            FpSpread3.Sheets[0].ColumnCount = 4;
            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 0].Column.Width = 50;
            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;

            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Month";
            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 1].Column.Width = 100;
            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;

            ArrayList array = new ArrayList();
            for (int s = Convert.ToInt32(DateTime.Now.Date.Year); s > 2000; s--)
            {
                array.Add(s);
            }
            string[] droparray = new string[array.Count];
            for (int yea = 0; yea < array.Count; yea++)
            {
                droparray[yea] = array[yea].ToString();
            }
            FarPoint.Web.Spread.ComboBoxCellType cbYear = new FarPoint.Web.Spread.ComboBoxCellType(droparray);
            cbYear.UseValue = true;
            cbYear.ShowButton = true;



            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Year";
            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 2].Column.Width = 80;
            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;

            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Amount";
            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 3].Column.Width = 80;
            FpSpread3.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
            FarPoint.Web.Spread.DoubleCellType intgrcell = new FarPoint.Web.Spread.DoubleCellType();
            intgrcell.FormatString = System.Windows.Forms.MaskFormat.ExcludePromptAndLiterals.ToString();
            //  intgrcell.MaximumValue = Convert.ToInt32(100);
            intgrcell.MinimumValue = 0;
            intgrcell.ErrorMessage = "Enter valid Number";
            FpSpread3.Sheets[0].Columns[2].CellType = intgrcell;
            FpSpread3.Sheets[0].Columns[2].Font.Bold = false;
            FpSpread3.Sheets[0].Columns[2].Font.Name = "Book Antiqua";

            FpSpread3.Sheets[0].Cells[0, 0].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[0, 0].Text = "1";
            FpSpread3.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[0, 0].Font.Name = "Book Antiqua";

            FpSpread3.Sheets[0].Cells[0, 1].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[0, 1].Text = "January";
            FpSpread3.Sheets[0].Cells[0, 1].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[0, 1].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[0, 1].Font.Size = FontUnit.Medium;

            FpSpread3.Sheets[0].Cells[0, 2].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[0, 2].CellType = cbYear;
            FpSpread3.Sheets[0].Cells[0, 2].Text = Convert.ToString(prevYear[1]);
            FpSpread3.Sheets[0].Cells[0, 2].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[0, 2].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[0, 2].Font.Size = FontUnit.Medium;

            FpSpread3.Sheets[0].Cells[1, 0].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[1, 0].Text = "2";
            FpSpread3.Sheets[0].Cells[1, 0].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[1, 0].Font.Name = "Book Antiqua";

            FpSpread3.Sheets[0].Cells[1, 1].Font.Size = FontUnit.Medium;
            FpSpread3.Sheets[0].Cells[1, 1].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[1, 1].Text = "Febraury";
            FpSpread3.Sheets[0].Cells[1, 1].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[1, 1].Font.Name = "Book Antiqua";

            FpSpread3.Sheets[0].Cells[1, 2].Font.Size = FontUnit.Medium;
            FpSpread3.Sheets[0].Cells[1, 2].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[1, 2].CellType = cbYear;
            FpSpread3.Sheets[0].Cells[1, 2].Text = Convert.ToString(prevYear[2]);
            FpSpread3.Sheets[0].Cells[1, 2].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[1, 2].Font.Name = "Book Antiqua";

            FpSpread3.Sheets[0].Cells[1, 0].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[2, 0].Text = "3";
            FpSpread3.Sheets[0].Cells[2, 0].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[2, 0].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[2, 1].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[2, 1].Text = "March";
            FpSpread3.Sheets[0].Cells[2, 1].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[2, 1].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[2, 1].Font.Size = FontUnit.Medium;
            FpSpread3.Sheets[0].Cells[2, 0].Font.Bold = false;

            FpSpread3.Sheets[0].Cells[2, 2].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[2, 2].CellType = cbYear;
            FpSpread3.Sheets[0].Cells[2, 2].Text = Convert.ToString(prevYear[3]);
            FpSpread3.Sheets[0].Cells[2, 2].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[2, 2].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[2, 2].Font.Size = FontUnit.Medium;

            FpSpread3.Sheets[0].Cells[3, 0].Text = "4";
            FpSpread3.Sheets[0].Cells[3, 0].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[3, 0].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[3, 1].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[3, 1].Text = "April";
            FpSpread3.Sheets[0].Cells[3, 1].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[3, 1].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[3, 1].Font.Size = FontUnit.Medium;
            FpSpread3.Sheets[0].Cells[3, 0].Font.Bold = false;

            FpSpread3.Sheets[0].Cells[3, 2].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[3, 2].CellType = cbYear;
            FpSpread3.Sheets[0].Cells[3, 2].Text = Convert.ToString(prevYear[4]);
            FpSpread3.Sheets[0].Cells[3, 2].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[3, 2].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[3, 2].Font.Size = FontUnit.Medium;

            FpSpread3.Sheets[0].Cells[4, 0].Text = "5";
            FpSpread3.Sheets[0].Cells[4, 0].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[4, 0].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[4, 1].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[4, 1].Text = "May";
            FpSpread3.Sheets[0].Cells[4, 1].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[4, 1].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[4, 1].Font.Size = FontUnit.Medium;
            FpSpread3.Sheets[0].Cells[4, 0].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[4, 2].CellType = cbYear;
            FpSpread3.Sheets[0].Cells[4, 2].Text = Convert.ToString(prevYear[5]);
            FpSpread3.Sheets[0].Cells[4, 2].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[4, 2].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[4, 2].Font.Size = FontUnit.Medium;

            FpSpread3.Sheets[0].Cells[5, 0].Text = "6";
            FpSpread3.Sheets[0].Cells[5, 0].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[5, 0].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[5, 1].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[5, 1].Text = "June";
            FpSpread3.Sheets[0].Cells[5, 1].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[5, 1].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[5, 1].Font.Size = FontUnit.Medium;
            FpSpread3.Sheets[0].Cells[5, 0].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[5, 2].CellType = cbYear;
            FpSpread3.Sheets[0].Cells[5, 2].Text = Convert.ToString(prevYear[6]);
            FpSpread3.Sheets[0].Cells[5, 2].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[5, 2].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[5, 2].Font.Size = FontUnit.Medium;


            FpSpread3.Sheets[0].Cells[6, 0].Text = "7";
            FpSpread3.Sheets[0].Cells[6, 0].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[6, 0].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[6, 1].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[6, 1].Text = "July";
            FpSpread3.Sheets[0].Cells[6, 1].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[6, 1].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[6, 1].Font.Size = FontUnit.Medium;
            FpSpread3.Sheets[0].Cells[6, 0].Font.Bold = false;

            FpSpread3.Sheets[0].Cells[6, 2].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[6, 2].CellType = cbYear;
            FpSpread3.Sheets[0].Cells[6, 2].Text = Convert.ToString(prevYear[7]);
            FpSpread3.Sheets[0].Cells[6, 2].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[6, 2].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[6, 2].Font.Size = FontUnit.Medium;
            FpSpread3.Sheets[0].Cells[7, 0].Text = "8";
            FpSpread3.Sheets[0].Cells[7, 0].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[7, 0].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[7, 1].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[7, 1].Text = "August";
            FpSpread3.Sheets[0].Cells[7, 1].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[7, 1].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[7, 1].Font.Size = FontUnit.Medium;
            FpSpread3.Sheets[0].Cells[7, 2].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[7, 2].CellType = cbYear;
            FpSpread3.Sheets[0].Cells[7, 2].Text = Convert.ToString(prevYear[8]);
            FpSpread3.Sheets[0].Cells[7, 2].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[7, 2].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[7, 2].Font.Size = FontUnit.Medium;
            FpSpread3.Sheets[0].Cells[7, 0].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[8, 0].Text = "9";
            FpSpread3.Sheets[0].Cells[8, 0].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[8, 0].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[8, 1].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[8, 1].Text = "September";
            FpSpread3.Sheets[0].Cells[8, 1].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[8, 1].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[8, 1].Font.Size = FontUnit.Medium;
            FpSpread3.Sheets[0].Cells[8, 2].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[8, 2].CellType = cbYear;
            FpSpread3.Sheets[0].Cells[8, 2].Text = Convert.ToString(prevYear[9]);
            FpSpread3.Sheets[0].Cells[8, 2].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[8, 2].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[8, 2].Font.Size = FontUnit.Medium;
            FpSpread3.Sheets[0].Cells[9, 0].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[9, 0].Text = "10";
            FpSpread3.Sheets[0].Cells[9, 0].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[9, 0].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[9, 1].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[9, 1].Text = "October";
            FpSpread3.Sheets[0].Cells[9, 1].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[9, 1].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[9, 1].Font.Size = FontUnit.Medium;
            FpSpread3.Sheets[0].Cells[9, 2].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[9, 2].CellType = cbYear;
            FpSpread3.Sheets[0].Cells[9, 2].Text = Convert.ToString(prevYear[10]);
            FpSpread3.Sheets[0].Cells[9, 2].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[9, 2].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[9, 2].Font.Size = FontUnit.Medium;
            FpSpread3.Sheets[0].Cells[10, 0].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[10, 0].Text = "11";
            FpSpread3.Sheets[0].Cells[10, 0].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[10, 0].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[10, 1].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[10, 1].Text = "November";
            FpSpread3.Sheets[0].Cells[10, 1].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[10, 1].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[10, 1].Font.Size = FontUnit.Medium;
            FpSpread3.Sheets[0].Cells[10, 2].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[10, 2].CellType = cbYear;
            FpSpread3.Sheets[0].Cells[10, 2].Text = Convert.ToString(prevYear[11]);
            FpSpread3.Sheets[0].Cells[10, 2].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[10, 2].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[10, 2].Font.Size = FontUnit.Medium;
            FpSpread3.Sheets[0].Cells[11, 0].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[11, 0].Text = "12";
            FpSpread3.Sheets[0].Cells[11, 0].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[11, 0].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[11, 1].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[11, 1].Text = "December";
            FpSpread3.Sheets[0].Cells[11, 1].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[11, 1].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[11, 1].Font.Size = FontUnit.Medium;
            FpSpread3.Sheets[0].Cells[11, 2].Font.Bold = false;
            FpSpread3.Sheets[0].Cells[11, 2].CellType = cbYear;
            FpSpread3.Sheets[0].Cells[11, 2].Text = Convert.ToString(prevYear[12]);
            FpSpread3.Sheets[0].Cells[11, 2].HorizontalAlign = HorizontalAlign.Left;
            FpSpread3.Sheets[0].Cells[11, 2].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[11, 2].Font.Size = FontUnit.Medium;
            FpSpread3.Columns[0].Locked = true;
            FpSpread3.Columns[1].Locked = true;

            FarPoint.Web.Spread.IntegerCellType integer = new FarPoint.Web.Spread.IntegerCellType();
            FpSpread3.Sheets[0].Columns[3].CellType = integer;
            FpSpread3.Sheets[0].Cells[0, 3].Text = Convert.ToString(prevAmt[1]);
            FpSpread3.Sheets[0].Cells[1, 3].Text = Convert.ToString(prevAmt[2]);
            FpSpread3.Sheets[0].Cells[2, 3].Text = Convert.ToString(prevAmt[3]);
            FpSpread3.Sheets[0].Cells[3, 3].Text = Convert.ToString(prevAmt[4]);
            FpSpread3.Sheets[0].Cells[4, 3].Text = Convert.ToString(prevAmt[5]);
            FpSpread3.Sheets[0].Cells[5, 3].Text = Convert.ToString(prevAmt[6]);
            FpSpread3.Sheets[0].Cells[6, 3].Text = Convert.ToString(prevAmt[7]);
            FpSpread3.Sheets[0].Cells[7, 3].Text = Convert.ToString(prevAmt[8]);
            FpSpread3.Sheets[0].Cells[8, 3].Text = Convert.ToString(prevAmt[9]);
            FpSpread3.Sheets[0].Cells[9, 3].Text = Convert.ToString(prevAmt[10]);
            FpSpread3.Sheets[0].Cells[10, 3].Text = Convert.ToString(prevAmt[11]);
            FpSpread3.Sheets[0].Cells[11, 3].Text = Convert.ToString(prevAmt[12]);
            FpSpread3.Sheets[0].Cells[13, 3].Text = Convert.ToString(totamt);
            FpSpread3.Sheets[0].SpanModel.Add(12, 0, 1, 3);
            FpSpread3.Sheets[0].SpanModel.Add(13, 0, 1, 2);
            FpSpread3.Sheets[0].Cells[13, 0].Font.Name = "Book Antiqua";
            FpSpread3.Sheets[0].Cells[13, 0].Font.Size = FontUnit.Medium;
            FpSpread3.Sheets[0].Cells[13, 0].HorizontalAlign = HorizontalAlign.Center;
            FpSpread3.Sheets[0].Cells[13, 0].Text = "Total Amount";
            FpSpread3.Sheets[0].Cells[13, 2].Locked = true;
            FpSpread3.Sheets[0].Cells[13, 3].Locked = true;

            FpSpread3.Height = 350;
            FpSpread3.SaveChanges();
            FpSpread3.Sheets[0].PageSize = 14;
        }
        catch (Exception ex)
        {

        }
    }
    protected void FpSpread3_Command(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        try
        {
            int a1 = (FpSpread3.Sheets[0].RowCount) - 2;
            FpSpread3.Sheets[0].Cells[FpSpread3.Sheets[0].RowCount - 1, 3].Formula = "SUM(D1:D" + a1 + ")";
        }
        catch (Exception ex)
        {

        }
    }
    protected void btndelete_Click(object sender, EventArgs e)
    {
        try
        {

        }
        catch
        {

        }
    }
    protected void btnExcel_Click(object sender, EventArgs e)
    {
        try
        {
            try
            {
                string reportname = txtexcelname.Text;
                if (reportname.ToString().Trim() != "")
                {
                    d2.printexcelreport(FpSpread1, reportname);
                    lbl_norec.Visible = false;
                }
                else
                {
                    lbl_norec.Text = "Please Enter Your Report Name";
                    lbl_norec.Visible = true;
                    txtexcelname.Focus();
                }
            }
            catch
            {

            }
        }
        catch
        {

        }
    }
    protected void btnreport_Click(object sender, EventArgs e)
    {
        try
        {
            string journaldetails = "Journal Report";
            string pagename = "Journal.aspx";
            Printcontrol.loadspreaddetails(FpSpread1, pagename, journaldetails);
            Printcontrol.Visible = true;
            lbl_norec.Visible = false;
        }
        catch
        {

        }
    }
    protected void btnexit_Click(object sender, EventArgs e)
    {
        Response.Redirect("Default_login.aspx");
    }
    protected void imagebtnpopclose2_Click(object sender, EventArgs e)
    {
        //  popper1.Visible = false;
    }
    protected void ddl_type_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            loadseat();
            trhostel.Visible = false;
            cbhostel.Checked = false;
            tdComm.Visible = false;
            cbIncCommunity.Checked = false;
            if (ddl_type.SelectedItem.Text.Trim() == "Individual(Admitted)")
            {
                applied = 0;
                Feedetails.Visible = false;
                getDiscontinue();
            }
            else if (ddl_type.SelectedItem.Text.Trim() == "Individual(Applied)")
            {
                applied = 1;
                Feedetails.Visible = false;
            }
            if (ddl_type.SelectedItem.Text == "General")
            {
                trhostel.Visible = true;
                loadHostel();
                loadRoomType();
                lnkview.Visible = false;
                FpSpreadstud.Visible = false;
                Div3.Visible = false;
                FpSpread1.Width = 1000;
                txt_roll.Visible = false;
                rbl_rollno.Visible = false;
                lblNameSrc.Visible = false;
                txt_name.Visible = false;
                int indexvalue = 1;
                tdComm.Visible = true;
                cbIncCommunity.Checked = false;
                Hashtable check = (Hashtable)ViewState["colcountnew"];

                for (int l = 0; l < cbl_sem.Items.Count; l++)
                {
                    for (int rowval = 1; rowval < FpSpread1.Sheets[0].RowCount; rowval++)
                    {
                        indexvalue = Convert.ToInt32(check[Convert.ToString(cbl_sem.Items[l].Value)]);
                        string headercode = Convert.ToString(FpSpread1.Sheets[0].Cells[rowval, 0].Tag);
                        string ledgercode = Convert.ToString(FpSpread1.Sheets[0].Cells[rowval, 1].Tag);
                        indexvalue++;
                        for (int colval = indexvalue; colval < FpSpread1.Sheets[0].ColumnCount; colval++)
                        {
                            FpSpread1.Sheets[0].Cells[rowval, colval].Text = "";
                        }
                    }
                }
                //btn_go_click(sender, e);

            }
            else
            {
                lnkview.Visible = true;
                lnkview.Text = "View Details";
                loadsetting();
                txt_roll.Visible = true;
                rbl_rollno.Visible = true;
                lblNameSrc.Visible = true;
                txt_name.Visible = true;
                txt_roll.Text = "";
                txt_name.Text = "";

                int indexvalue = 1;
                Hashtable check = (Hashtable)ViewState["colcountnew"];

                for (int l = 0; l < cbl_sem.Items.Count; l++)
                {
                    for (int rowval = 1; rowval < FpSpread1.Sheets[0].RowCount; rowval++)
                    {
                        indexvalue = Convert.ToInt32(check[Convert.ToString(cbl_sem.Items[l].Value)]);
                        string headercode = Convert.ToString(FpSpread1.Sheets[0].Cells[rowval, 0].Tag);
                        string ledgercode = Convert.ToString(FpSpread1.Sheets[0].Cells[rowval, 1].Tag);
                        indexvalue++;
                        for (int colval = indexvalue; colval < FpSpread1.Sheets[0].ColumnCount; colval++)
                        {
                            FpSpread1.Sheets[0].Cells[rowval, colval].Text = "";
                        }
                    }
                }
                //btn_go_click(sender, e);
            }

        }
        catch
        {

        }
    }
    protected void Fpspreadfine_Command(object sender, EventArgs e)
    {

    }
    protected void Fpspreadfine_render(object sender, EventArgs e)
    {
        try
        {
            string actrow = Convert.ToString(Fpspreadfine.ActiveSheetView.ActiveRow);
            string actcol = Convert.ToString(Fpspreadfine.ActiveSheetView.ActiveColumn);
        }
        catch
        {

        }
    }
    protected void lnkfine_click(object sender, EventArgs e)
    {
        try
        {
            popfine.Visible = true;
            rb_common.Checked = true;
            rb_common_OnCheckedChanged(sender, e);
            bindheader();
            bindledger();
            rbfine.Checked = true;
            rbreadd.Checked = false;
            rbfine_Changed(sender, e);
            tdlblfine.Visible = false;
            tdfine.Visible = false;
            tdconcession.Visible = false;
            if (checkSchoolSetting() == 0)
            {
                tdlblfine.Visible = true;
                tdfine.Visible = true;
                tdconcession.Visible = true;
                loadStudentSetting();
            }
        }
        catch { }
    }



    protected void rb_common_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            Individualcheck.Visible = false;//abarna
            btnWeekFindDel.Visible = false;
            txt_fine.Visible = true;
            int headcount = 0;
            int ledgercount = 0;

            string selhead = "select distinct HeaderFK,LedgerFK from FM_FineMaster where FineType='1' and CollegeCode='" + collegecode1 + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selhead, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cbheadfine.Checked = false;
                    cblheadfine.ClearSelection();
                    for (int j = 0; j < ds.Tables[0].Rows.Count; j++)
                    {
                        for (int i = 0; i < cblheadfine.Items.Count; i++)
                        {
                            if (Convert.ToString(cblheadfine.Items[i].Value) == Convert.ToString(ds.Tables[0].Rows[j]["HeaderFK"]))
                            {
                                cblheadfine.Items[i].Selected = true;
                                headcount = headcount + 1;
                            }
                        }
                    }
                    txtheadfine.Text = "Header(" + headcount + ")";

                    cbledgefine.Checked = false;
                    cblledgefine.ClearSelection();
                    for (int l = 0; l < ds.Tables[0].Rows.Count; l++)
                    {
                        for (int k = 0; k < cblledgefine.Items.Count; k++)
                        {
                            if (Convert.ToString(cblledgefine.Items[k].Value) == Convert.ToString(ds.Tables[0].Rows[l]["LedgerFK"]))
                            {
                                cblledgefine.Items[k].Selected = true;
                                ledgercount = ledgercount + 1;
                            }
                        }
                    }
                    txtledgerfine.Text = "Ledger(" + ledgercount + ")";
                }
            }

            string selcom = "select distinct FineAmount,convert(varchar(10),DueDate,103) as DueDate,HeaderFK,LedgerFK from FM_FineMaster where FineType='1' and CollegeCode='" + collegecode1 + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selcom, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    txt_fine.Text = Convert.ToString(ds.Tables[0].Rows[0]["FineAmount"]);
                    txt_due.Text = Convert.ToString(ds.Tables[0].Rows[0]["DueDate"]);
                }
                else
                {
                    txt_fine.Text = "";
                    txt_due.Text = DateTime.Now.ToString("dd/MM/yyyy");
                    bindheader();
                    bindledger();
                }
            }
            else
            {
                txt_fine.Text = "";
                txt_due.Text = DateTime.Now.ToString("dd/MM/yyyy");
                bindheader();
                bindledger();
            }
            Fpspreadfine.Visible = false;
            field.Visible = false;
        }
        catch
        {

        }
    }
    protected void rb_perday_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            Individualcheck.Visible = true;//abarna
            btnWeekFindDel.Visible = false;
            txt_fine.Visible = true;
            int headcount = 0;
            int ledgercount = 0;

            string selhead = "select distinct HeaderFK,LedgerFK from FM_FineMaster where FineType='2' and CollegeCode='" + collegecode1 + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selhead, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cbheadfine.Checked = false;
                    cblheadfine.ClearSelection();
                    for (int j = 0; j < ds.Tables[0].Rows.Count; j++)
                    {
                        for (int i = 0; i < cblheadfine.Items.Count; i++)
                        {
                            if (Convert.ToString(cblheadfine.Items[i].Value) == Convert.ToString(ds.Tables[0].Rows[j]["HeaderFK"]))
                            {
                                cblheadfine.Items[i].Selected = true;
                                headcount = headcount + 1;
                            }
                        }
                    }
                    txtheadfine.Text = "Header(" + headcount + ")";

                    cbledgefine.Checked = false;
                    cblledgefine.ClearSelection();
                    for (int l = 0; l < ds.Tables[0].Rows.Count; l++)
                    {
                        for (int k = 0; k < cblledgefine.Items.Count; k++)
                        {
                            if (Convert.ToString(cblledgefine.Items[k].Value) == Convert.ToString(ds.Tables[0].Rows[l]["LedgerFK"]))
                            {
                                cblledgefine.Items[k].Selected = true;
                                ledgercount = ledgercount + 1;
                            }
                        }
                    }
                    txtledgerfine.Text = "Ledger(" + ledgercount + ")";
                }
            }

            string selperday = "select distinct FineAmount,convert(varchar(10),DueDate,103) as DueDate,HeaderFK,LedgerFK from FM_FineMaster where FineType='2' and CollegeCode='" + collegecode1 + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selperday, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    txt_fine.Text = Convert.ToString(ds.Tables[0].Rows[0]["FineAmount"]);
                    txt_due.Text = Convert.ToString(ds.Tables[0].Rows[0]["DueDate"]);
                }
                else
                {
                    txt_fine.Text = "";
                    txt_due.Text = DateTime.Now.ToString("dd/MM/yyyy");
                    bindheader();
                    bindledger();
                }
            }
            else
            {
                txt_fine.Text = "";
                txt_due.Text = DateTime.Now.ToString("dd/MM/yyyy");
                bindheader();
                bindledger();
            }
            Fpspreadfine.Visible = false;
            field.Visible = false;
        }
        catch
        {

        }
    }
    protected void Individualcheck_OnCheckedChanged(object sender, EventArgs e)
    {
        if (Individualcheck.Checked == true)
        {

            popfinefeeswise.Visible = true;
            PerdaySetting.Visible = true;
            grid1btn.Visible = true;
            bindGrid();
            feesshow();
        }
        else
        {
            popfinefeeswise.Visible = false;
            grid1btn.Visible = false;
            PerdaySetting.Visible = false;
        }
        //loadheadername();
        //loadledgername();
    }
    protected void rb_perweek_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            Individualcheck.Visible = false;
            ds.Clear();
            txt_fine.Visible = false;
            field.Visible = true;
            FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
            darkstyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#0CA6CA");
            darkstyle.ForeColor = System.Drawing.Color.Black;
            darkstyle.HorizontalAlign = HorizontalAlign.Center;
            darkstyle.Font.Size = 13;
            darkstyle.Font.Name = "Book Antiqua";
            darkstyle.Font.Bold = true;
            Fpspreadfine.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
            Fpspreadfine.Sheets[0].RowHeader.Visible = false;
            Fpspreadfine.CommandBar.Visible = false;
            Fpspreadfine.Sheets[0].AutoPostBack = false;

            Fpspreadfine.Sheets[0].ColumnCount = 4;
            FarPoint.Web.Spread.DoubleCellType doubl = new FarPoint.Web.Spread.DoubleCellType();
            doubl.ErrorMessage = "Allow only Numerics";

            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            Fpspreadfine.Columns[0].Width = 50;
            //Fpspreadfine.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Locked = true;

            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Days From";
            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
            Fpspreadfine.Columns[1].Width = 125;

            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Days To";
            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
            Fpspreadfine.Columns[2].Width = 125;

            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Fine Amount(Rs.)";
            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
            Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
            Fpspreadfine.Columns[3].Width = 200;

            Fpspreadfine.Sheets[0].RemoveRows(0, Fpspreadfine.Sheets[0].RowCount);

            string batch = Convert.ToString(getCblSelectedValue(cbl_batch));
            string feecat = Convert.ToString(getCblSelectedValue(cbl_sem));
            string degree = Convert.ToString(getCblSelectedValue(cbl_dept));
            string hdFK = Convert.ToString(getCblSelectedValue(cblheadfine));
            string ldFK = Convert.ToString(getCblSelectedValue(cblledgefine));
            int headcount = 0;
            int ledgercount = 0;
            string selhead = "select distinct HeaderFK,LedgerFK from FM_FineMaster where FineType='3' and CollegeCode='" + collegecode1 + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selhead, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cbheadfine.Checked = false;
                    cblheadfine.ClearSelection();
                    for (int j = 0; j < ds.Tables[0].Rows.Count; j++)
                    {
                        for (int i = 0; i < cblheadfine.Items.Count; i++)
                        {
                            if (Convert.ToString(cblheadfine.Items[i].Value) == Convert.ToString(ds.Tables[0].Rows[j]["HeaderFK"]))
                            {
                                cblheadfine.Items[i].Selected = true;
                                headcount = headcount + 1;
                            }
                        }
                    }
                    txtheadfine.Text = "Header(" + headcount + ")";

                    cbledgefine.Checked = false;
                    cblledgefine.ClearSelection();
                    for (int l = 0; l < ds.Tables[0].Rows.Count; l++)
                    {
                        for (int k = 0; k < cblledgefine.Items.Count; k++)
                        {
                            if (Convert.ToString(cblledgefine.Items[k].Value) == Convert.ToString(ds.Tables[0].Rows[l]["LedgerFK"]))
                            {
                                cblledgefine.Items[k].Selected = true;
                                ledgercount = ledgercount + 1;
                            }
                        }
                    }
                    txtledgerfine.Text = "Ledger(" + ledgercount + ")";
                }
            }
            string selq = "select distinct FromDay,ToDay,FineAmount,DueDate from FM_FineMaster where FineType='3' and CollegeCode='" + collegecode1 + "' and headerfk in('" + hdFK + "') and ledgerfk in('" + ldFK + "') and feecatgory in('" + feecat + "') and degreecode in('" + degree + "') and batchyear in('" + batch + "')";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selq, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    string date = Convert.ToString(ds.Tables[0].Rows[0]["DueDate"]);
                    string[] spldt = date.Split('/');
                    DateTime dtad = Convert.ToDateTime(spldt[0] + "/" + spldt[1] + "/" + spldt[2]);
                    txt_due.Text = dtad.ToString("dd/MM/yyyy");

                    for (int row = 0; row < ds.Tables[0].Rows.Count; row++)
                    {
                        Fpspreadfine.Sheets[0].RowCount++;
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(row + 1);
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 0].Font.Bold = true;
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;

                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 1].CellType = doubl;
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 1].Text = Convert.ToString(ds.Tables[0].Rows[row]["FromDay"]);
                        //Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 1].Tag = Convert.ToString(ds.Tables[0].Rows[row]["FineMasterPK"]);
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 1].Font.Bold = true;
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;

                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 2].CellType = doubl;
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(ds.Tables[0].Rows[row]["ToDay"]);
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 2].Font.Bold = true;
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;

                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 3].CellType = doubl;
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(ds.Tables[0].Rows[row]["FineAmount"]);
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 3].Font.Bold = true;
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Medium;
                        Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Center;
                    }
                    Fpspreadfine.Visible = true;
                    Fpspreadfine.Sheets[0].PageSize = Fpspreadfine.Sheets[0].RowCount;
                    Fpspreadfine.Width = 500;
                    Fpspreadfine.Height = 300;
                    ds.Clear();
                    tblperweek.Visible = true;
                    btnWeekFindDel.Visible = true;
                }
                else
                {
                    Fpspreadfine.Sheets[0].RowCount = 1;
                    Fpspreadfine.Sheets[0].Cells[0, 0].Text = "1";
                    txt_due.Text = DateTime.Now.ToString("dd/MM/yyyy");
                    Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                    Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                    Fpspreadfine.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
                    Fpspreadfine.Sheets[0].Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;

                    Fpspreadfine.Sheets[0].PageSize = Fpspreadfine.Sheets[0].RowCount;
                    Fpspreadfine.Visible = true;
                    Fpspreadfine.Width = 500;
                    Fpspreadfine.Height = 300;
                    tblperweek.Visible = true;
                    btnWeekFindDel.Visible = false;
                }
            }
        }
        catch
        {

        }
    }
    protected void btnaddrow_click(object sender, EventArgs e)
    {
        try
        {
            int no = Fpspreadfine.Sheets[0].RowCount;
            Fpspreadfine.Sheets[0].RowCount++;
            Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(no + 1);
            Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 0].Font.Bold = true;
            Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
            Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
            Fpspreadfine.Sheets[0].Cells[Fpspreadfine.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;

            Fpspreadfine.Sheets[0].PageSize = Fpspreadfine.Sheets[0].RowCount;
            Fpspreadfine.Visible = true;
            Fpspreadfine.Width = 500;
            Fpspreadfine.Height = 300;
        }
        catch
        {

        }
    }

    //fine settings 
    protected void btnsavefine_click(object sender, EventArgs e)
    {
        try
        {
            string finetype = "";
            string frmday = "";
            string today = "";
            string fneweek = "";

            if (rbfine.Checked == true)
            {
                if (rb_common.Checked == true)
                    finetype = "1";

                if (rb_perday.Checked == true)
                    finetype = "2";

                if (rb_perweek.Checked == true)
                    finetype = "3";
            }
            else
                finetype = "1";


            string fineamnt = Convert.ToString(txt_fine.Text);
            string duedate = Convert.ToString(txt_due.Text);
            string[] split = new string[2];
            split = duedate.Split('/');
            DateTime dut = Convert.ToDateTime(split[1] + "/" + split[0] + "/" + split[2]);

            //readmission
            string refineamt = Convert.ToString(txtreeaddAmt.Text);
            string reduedate = Convert.ToString(txtreeadddt.Text);
            string[] splits = new string[2];
            splits = reduedate.Split('/');
            DateTime dutreadd = Convert.ToDateTime(splits[1] + "/" + splits[0] + "/" + splits[2]);

            Fpspreadfine.SaveChanges();
            string actrow = Convert.ToString(Fpspreadfine.ActiveSheetView.ActiveRow);
            string actcol = Convert.ToString(Fpspreadfine.ActiveSheetView.ActiveColumn);

            if (actrow.Trim() != "" && actrow.Trim() != "-1")
            {
                frmday = Convert.ToString(Fpspreadfine.Sheets[0].Cells[Convert.ToInt32(actrow), 1].Text);
                today = Convert.ToString(Fpspreadfine.Sheets[0].Cells[Convert.ToInt32(actrow), 2].Text);
                fneweek = Convert.ToString(Fpspreadfine.Sheets[0].Cells[Convert.ToInt32(actrow), 3].Text);
            }

            string insquery = "";
            int inscount = 0;
            string strFinYrFk = string.Empty;
            string tempfincol = string.Empty;
            string tempfinval = string.Empty;
            string studentFineSett = string.Empty;
            string studFineInsert = string.Empty;
            string tempSettVal = string.Empty;
            if (checkSchoolSetting() == 0)
            {
                string getfinfk = Convert.ToString(ddlfinyear.SelectedValue);
                strFinYrFk = " and finyearfk in('" + getfinfk + "')";
                tempfincol = " ,finyearfk";
                tempfinval = ",'" + getfinfk + "'";
                StringBuilder sbFine = new StringBuilder();
                for (int row = 0; row < cblfine.Items.Count; row++)
                {
                    if (cblfine.Items[row].Selected)
                        sbFine.Append(cblfine.Items[row].Value + ",");
                }
                if (sbFine.Length > 0)
                {
                    if (cbConcession.Checked)
                        sbFine.Append("0" + ",");
                    sbFine.Remove(sbFine.Length - 1, 1);
                }
                string tempSett = Convert.ToString(sbFine);

                studentFineSett = " ,Stud_FineSettingType ='" + tempSett + "'";
                studFineInsert = " ,Stud_FineSettingType";
                tempSettVal = ",'" + tempSett + "'";
                // getfinid = Convert.ToString(ddlfinyear.SelectedValue);
            }
            bool boolbtn = false;
            btnWeekFindDel.Visible = false;
            for (int j = 0; j < cblledgefine.Items.Count; j++)
            {
                if (cblledgefine.Items[j].Selected == true)
                {
                    for (int bt = 0; bt < cbl_batch.Items.Count; bt++)
                    {
                        if (cbl_batch.Items[bt].Selected)
                        {
                            for (int k = 0; k < cbl_dept.Items.Count; k++)
                            {
                                if (cbl_dept.Items[k].Selected == true)
                                {
                                    for (int l = 0; l < cbl_sem.Items.Count; l++)
                                    {
                                        if (cbl_sem.Items[l].Selected == true)
                                        {
                                            string getheaderid = d2.GetFunction("select headerfk from fm_ledgermaster where ledgerpk='" + Convert.ToString(cblledgefine.Items[j].Value) + "'");
                                            if (rbfine.Checked == true)
                                            {
                                                //normal fine settings
                                                #region
                                                if (rb_common.Checked == true)
                                                {

                                                    if (fineamnt != "")
                                                    {
                                                        insquery = "if exists (select * from FM_FineMaster where BatchYear='" + cbl_batch.Items[bt].Value + "' and FeeCatgory ='" + cbl_sem.Items[l].Value + "' and DegreeCode='" + cbl_dept.Items[k].Value + "' and CollegeCode='" + collegecode1 + "' and HeaderFK='" + getheaderid + "' and LedgerFK='" + cblledgefine.Items[j].Value + "' and FineType='" + finetype + "' and FineSettingType='0' " + strFinYrFk + ") update FM_FineMaster set FineType='" + finetype + "',FineAmount='" + fineamnt + "',DueDate='" + dut.ToString("MM/dd/yyyy") + "'" + studentFineSett + " where BatchYear='" + cbl_batch.Items[bt].Value + "' and FeeCatgory ='" + cbl_sem.Items[l].Value + "' and DegreeCode='" + cbl_dept.Items[k].Value + "' and CollegeCode='" + collegecode1 + "' and HeaderFK='" + getheaderid + "' and LedgerFK='" + cblledgefine.Items[j].Value + "' and FineType='" + finetype + "' and FineSettingType='0' " + strFinYrFk + "  else Insert into FM_FineMaster (FineType,FineAmount,DueDate,HeaderFK,LedgerFK,FeeCatgory,DegreeCode,CollegeCode,FineSettingType,BatchYear" + tempfincol + "" + studFineInsert + ") values ('" + finetype + "','" + fineamnt + "','" + dut.ToString("MM/dd/yyyy") + "','" + getheaderid + "','" + cblledgefine.Items[j].Value + "','" + cbl_sem.Items[l].Value + "','" + cbl_dept.Items[k].Value + "','" + collegecode1 + "','0','" + cbl_batch.Items[bt].Value + "'" + tempfinval + "" + tempSettVal + ")";
                                                        inscount = d2.update_method_wo_parameter(insquery, "Text");
                                                    }
                                                }
                                                if (rb_perday.Checked == true)
                                                {
                                                    if (Individualcheck.Checked == false)
                                                    {
                                                        if (fineamnt != "")
                                                        {
                                                            insquery = "if exists (select * from FM_FineMaster where BatchYear='" + cbl_batch.Items[bt].Value + "' and FeeCatgory ='" + cbl_sem.Items[l].Value + "' and DegreeCode='" + cbl_dept.Items[k].Value + "' and CollegeCode='" + collegecode1 + "' and HeaderFK='" + getheaderid + "' and LedgerFK='" + cblledgefine.Items[j].Value + "' and FineType='" + finetype + "' and FineSettingType='0' " + strFinYrFk + " ) update FM_FineMaster set FineType='" + finetype + "',FineAmount='" + fineamnt + "',DueDate='" + dut.ToString("MM/dd/yyyy") + "'" + studentFineSett + " where BatchYear='" + cbl_batch.Items[bt].Value + "' and FeeCatgory ='" + cbl_sem.Items[l].Value + "' and DegreeCode='" + cbl_dept.Items[k].Value + "' and CollegeCode='" + collegecode1 + "' and HeaderFK='" + getheaderid + "' and LedgerFK='" + cblledgefine.Items[j].Value + "' and FineType='" + finetype + "' and FineSettingType='0'  " + strFinYrFk + " else Insert into FM_FineMaster (FineType,FineAmount,DueDate,HeaderFK,LedgerFK,FeeCatgory,DegreeCode,CollegeCode,FineSettingType,BatchYear" + tempfincol + "" + studFineInsert + ") values ('" + finetype + "','" + fineamnt + "','" + dut.ToString("MM/dd/yyyy") + "','" + getheaderid + "','" + cblledgefine.Items[j].Value + "','" + cbl_sem.Items[l].Value + "','" + cbl_dept.Items[k].Value + "','" + collegecode1 + "','0','" + cbl_batch.Items[bt].Value + "'" + tempfinval + "" + tempSettVal + ")";
                                                            inscount = d2.update_method_wo_parameter(insquery, "Text");
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (fineamnt != "")
                                                        {
                                                            insquery = "if exists (select * from FM_FineMaster where BatchYear='" + cbl_batch.Items[bt].Value + "' and FeeCatgory ='" + cbl_sem.Items[l].Value + "' and DegreeCode='" + cbl_dept.Items[k].Value + "' and CollegeCode='" + collegecode1 + "' and HeaderFK='" + getheaderid + "' and LedgerFK='" + cblledgefine.Items[j].Value + "' and FineType='" + finetype + "' and FineSettingType='3' " + strFinYrFk + " ) update FM_FineMaster set FineType='" + finetype + "',FineAmount='" + fineamnt + "',DueDate='" + dut.ToString("MM/dd/yyyy") + "'" + studentFineSett + " where BatchYear='" + cbl_batch.Items[bt].Value + "' and FeeCatgory ='" + cbl_sem.Items[l].Value + "' and DegreeCode='" + cbl_dept.Items[k].Value + "' and CollegeCode='" + collegecode1 + "' and HeaderFK='" + getheaderid + "' and LedgerFK='" + cblledgefine.Items[j].Value + "' and FineType='" + finetype + "' and FineSettingType='3'  " + strFinYrFk + " else Insert into FM_FineMaster (FineType,FineAmount,DueDate,HeaderFK,LedgerFK,FeeCatgory,DegreeCode,CollegeCode,FineSettingType,BatchYear" + tempfincol + "" + studFineInsert + ") values ('" + finetype + "','" + fineamnt + "','" + dut.ToString("MM/dd/yyyy") + "','" + getheaderid + "','" + cblledgefine.Items[j].Value + "','" + cbl_sem.Items[l].Value + "','" + cbl_dept.Items[k].Value + "','" + collegecode1 + "','3','" + cbl_batch.Items[bt].Value + "'" + tempfinval + "" + tempSettVal + ")";
                                                            inscount = d2.update_method_wo_parameter(insquery, "Text");
                                                        }
                                                    }
                                                }
                                                if (rb_perweek.Checked == true)
                                                {
                                                    for (int fp = 0; fp < Fpspreadfine.Sheets[0].Rows.Count; fp++)
                                                    {
                                                        frmday = Convert.ToString(Fpspreadfine.Sheets[0].Cells[fp, 1].Text);
                                                        today = Convert.ToString(Fpspreadfine.Sheets[0].Cells[fp, 2].Text);
                                                        fneweek = Convert.ToString(Fpspreadfine.Sheets[0].Cells[fp, 3].Text);

                                                        if (!string.IsNullOrEmpty(frmday) && !string.IsNullOrEmpty(today) && !string.IsNullOrEmpty(fneweek))
                                                        {
                                                            insquery = "if exists (select * from FM_FineMaster where BatchYear='" + cbl_batch.Items[bt].Value + "' and FeeCatgory='" + cbl_sem.Items[l].Value + "' and DegreeCode='" + cbl_dept.Items[k].Value + "' and CollegeCode='" + collegecode1 + "' and HeaderFK='" + getheaderid + "' and LedgerFK='" + cblledgefine.Items[j].Value + "' and FromDay='" + frmday + "' and ToDay='" + today + "' and FineType='" + finetype + "' and FineSettingType='0' " + strFinYrFk + ") update FM_FineMaster set FineType='" + finetype + "',FineAmount='" + fneweek + "',DueDate='" + dut.ToString("MM/dd/yyyy") + "' " + studentFineSett + " where BatchYear='" + cbl_batch.Items[bt].Value + "' and FeeCatgory='" + cbl_sem.Items[l].Value + "' and DegreeCode='" + cbl_dept.Items[k].Value + "' and CollegeCode='" + collegecode1 + "' and HeaderFK='" + getheaderid + "' and LedgerFK='" + cblledgefine.Items[j].Value + "' and FromDay='" + frmday + "' and ToDay='" + today + "' and FineType='" + finetype + "' and FineSettingType='0' " + strFinYrFk + " else Insert into FM_FineMaster (FineType,FromDay,ToDay,FineAmount,DueDate,HeaderFK,LedgerFK,FeeCatgory,DegreeCode,CollegeCode,FineSettingType,BatchYear" + tempfincol + "" + studFineInsert + ") values ('" + finetype + "','" + frmday + "','" + today + "','" + fneweek + "','" + dut.ToString("MM/dd/yyyy") + "','" + getheaderid + "','" + cblledgefine.Items[j].Value + "','" + cbl_sem.Items[l].Value + "','" + cbl_dept.Items[k].Value + "','" + collegecode1 + "','0','" + cbl_batch.Items[bt].Value + "'" + tempfinval + "" + tempSettVal + ")";
                                                            inscount = d2.update_method_wo_parameter(insquery, "Text");
                                                            boolbtn = true;
                                                        }
                                                    }
                                                }
                                                #endregion
                                                //==========================Added by Saranya on 10/04/2018=============================//
                                                int savevalue = 1;
                                                string entrycode = Session["Entry_Code"].ToString();
                                                string formname = "FineSetting";
                                                string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                IPHostEntry host;
                                                string localip = "";
                                                host = Dns.GetHostEntry(Dns.GetHostName());
                                                foreach (IPAddress ip in host.AddressList)
                                                {
                                                    if (ip.AddressFamily.ToString() == "InterNetwork")
                                                    {
                                                        localip = ip.ToString();
                                                    }
                                                }
                                                string details = "Batch Year - " + cbl_batch.Items[bt].Value + " : Degree - " + cbl_dept.Items[k].Text + " : Semester - " + cbl_sem.Items[l].Text + " : Date - " + toa + " : FineAmount - " + fineamnt + " ";
                                                string ctsname = "";
                                                if (savevalue == 1)
                                                {
                                                    ctsname = "Fine Alloted";
                                                }
                                                string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                d2.insertEinanceUserActionLog(entrycode, formname, 1, toa, doa, details, ctsname, localip);
                                                //============================================================================//
                                            }

                                            else if (rbMonthlyFine.Checked == true)//abarna
                                            {
                                                //normal fine settings
                                                int fine = Convert.ToInt16(rbl_Month.SelectedIndex + 1);
                                                #region
                                                if (rb_common.Checked == true)
                                                {

                                                    if (fineamnt != "")
                                                    {
                                                        insquery = "if exists (select * from FM_FineMaster where BatchYear='" + cbl_batch.Items[bt].Value + "' and FeeCatgory ='" + cbl_sem.Items[l].Value + "' and DegreeCode='" + cbl_dept.Items[k].Value + "' and CollegeCode='" + collegecode1 + "' and HeaderFK='" + getheaderid + "' and LedgerFK='" + cblledgefine.Items[j].Value + "' and FineType='" + finetype + "' and FineSettingType='2' " + strFinYrFk + " and finemonth='" + fine + "') update FM_FineMaster set FineType='" + finetype + "',FineAmount='" + fineamnt + "',DueDate='" + dut.ToString("MM/dd/yyyy") + "'" + studentFineSett + " where BatchYear='" + cbl_batch.Items[bt].Value + "' and FeeCatgory ='" + cbl_sem.Items[l].Value + "' and DegreeCode='" + cbl_dept.Items[k].Value + "' and CollegeCode='" + collegecode1 + "' and HeaderFK='" + getheaderid + "' and LedgerFK='" + cblledgefine.Items[j].Value + "' and FineType='" + finetype + "' and FineSettingType='2' " + strFinYrFk + " and finemonth='" + fine + "' else Insert into FM_FineMaster (FineType,FineAmount,DueDate,HeaderFK,LedgerFK,FeeCatgory,DegreeCode,CollegeCode,FineSettingType,BatchYear" + tempfincol + "" + studFineInsert + ",finemonth) values ('" + finetype + "','" + fineamnt + "','" + dut.ToString("MM/dd/yyyy") + "','" + getheaderid + "','" + cblledgefine.Items[j].Value + "','" + cbl_sem.Items[l].Value + "','" + cbl_dept.Items[k].Value + "','" + collegecode1 + "','2','" + cbl_batch.Items[bt].Value + "'" + tempfinval + "" + tempSettVal + ",'" + fine + "')";
                                                        inscount = d2.update_method_wo_parameter(insquery, "Text");
                                                    }
                                                }
                                                if (rb_perday.Checked == true)
                                                {
                                                    if (fineamnt != "")
                                                    {
                                                        insquery = "if exists (select * from FM_FineMaster where BatchYear='" + cbl_batch.Items[bt].Value + "' and FeeCatgory ='" + cbl_sem.Items[l].Value + "' and DegreeCode='" + cbl_dept.Items[k].Value + "' and CollegeCode='" + collegecode1 + "' and HeaderFK='" + getheaderid + "' and LedgerFK='" + cblledgefine.Items[j].Value + "' and FineType='" + finetype + "' and FineSettingType='2' " + strFinYrFk + " and finemonth='" + fine + "') update FM_FineMaster set FineType='" + finetype + "',FineAmount='" + fineamnt + "',DueDate='" + dut.ToString("MM/dd/yyyy") + "'" + studentFineSett + " where BatchYear='" + cbl_batch.Items[bt].Value + "' and FeeCatgory ='" + cbl_sem.Items[l].Value + "' and DegreeCode='" + cbl_dept.Items[k].Value + "' and CollegeCode='" + collegecode1 + "' and HeaderFK='" + getheaderid + "' and LedgerFK='" + cblledgefine.Items[j].Value + "' and FineType='" + finetype + "' and FineSettingType='2'  " + strFinYrFk + " and finemonth='" + fine + "' else Insert into FM_FineMaster (FineType,FineAmount,DueDate,HeaderFK,LedgerFK,FeeCatgory,DegreeCode,CollegeCode,FineSettingType,BatchYear" + tempfincol + "" + studFineInsert + ",finemonth) values ('" + finetype + "','" + fineamnt + "','" + dut.ToString("MM/dd/yyyy") + "','" + getheaderid + "','" + cblledgefine.Items[j].Value + "','" + cbl_sem.Items[l].Value + "','" + cbl_dept.Items[k].Value + "','" + collegecode1 + "','2','" + cbl_batch.Items[bt].Value + "'" + tempfinval + "" + tempSettVal + ",'" + fine + "')";
                                                        inscount = d2.update_method_wo_parameter(insquery, "Text");
                                                    }
                                                }
                                                if (rb_perweek.Checked == true)
                                                {
                                                    for (int fp = 0; fp < Fpspreadfine.Sheets[0].Rows.Count; fp++)
                                                    {
                                                        frmday = Convert.ToString(Fpspreadfine.Sheets[0].Cells[fp, 1].Text);
                                                        today = Convert.ToString(Fpspreadfine.Sheets[0].Cells[fp, 2].Text);
                                                        fneweek = Convert.ToString(Fpspreadfine.Sheets[0].Cells[fp, 3].Text);

                                                        if (!string.IsNullOrEmpty(frmday) && !string.IsNullOrEmpty(today) && !string.IsNullOrEmpty(fneweek))
                                                        {
                                                            insquery = "if exists (select * from FM_FineMaster where BatchYear='" + cbl_batch.Items[bt].Value + "' and FeeCatgory='" + cbl_sem.Items[l].Value + "' and DegreeCode='" + cbl_dept.Items[k].Value + "' and CollegeCode='" + collegecode1 + "' and HeaderFK='" + getheaderid + "' and LedgerFK='" + cblledgefine.Items[j].Value + "' and FromDay='" + frmday + "' and ToDay='" + today + "' and FineType='" + finetype + "' and FineSettingType='2' " + strFinYrFk + "  and finemonth='" + fine + "') update FM_FineMaster set FineType='" + finetype + "',FineAmount='" + fneweek + "',DueDate='" + dut.ToString("MM/dd/yyyy") + "' " + studentFineSett + " where BatchYear='" + cbl_batch.Items[bt].Value + "' and FeeCatgory='" + cbl_sem.Items[l].Value + "' and DegreeCode='" + cbl_dept.Items[k].Value + "' and CollegeCode='" + collegecode1 + "' and HeaderFK='" + getheaderid + "' and LedgerFK='" + cblledgefine.Items[j].Value + "' and FromDay='" + frmday + "' and ToDay='" + today + "' and FineType='" + finetype + "' and FineSettingType='2' " + strFinYrFk + "  and finemonth='" + fine + "' else Insert into FM_FineMaster (FineType,FromDay,ToDay,FineAmount,DueDate,HeaderFK,LedgerFK,FeeCatgory,DegreeCode,CollegeCode,FineSettingType,BatchYear" + tempfincol + "" + studFineInsert + ",finemonth) values ('" + finetype + "','" + frmday + "','" + today + "','" + fneweek + "','" + dut.ToString("MM/dd/yyyy") + "','" + getheaderid + "','" + cblledgefine.Items[j].Value + "','" + cbl_sem.Items[l].Value + "','" + cbl_dept.Items[k].Value + "','" + collegecode1 + "','2','" + cbl_batch.Items[bt].Value + "'" + tempfinval + "" + tempSettVal + ",'" + fine + "')";
                                                            inscount = d2.update_method_wo_parameter(insquery, "Text");
                                                            boolbtn = true;
                                                        }
                                                    }
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                //re admission fees settings
                                                if (refineamt != "")
                                                {
                                                    insquery = "if exists (select * from FM_FineMaster where BatchYear='" + cbl_batch.Items[bt].Value + "' and FeeCatgory ='" + cbl_sem.Items[l].Value + "' and DegreeCode='" + cbl_dept.Items[k].Value + "' and CollegeCode='" + collegecode1 + "' and HeaderFK='" + getheaderid + "' and LedgerFK='" + cblledgefine.Items[j].Value + "' and FineType='" + finetype + "' and FineSettingType='1' " + strFinYrFk + ") update FM_FineMaster set FineType='" + finetype + "',FineAmount='" + refineamt + "',DueDate='" + dutreadd.ToString("MM/dd/yyyy") + "' " + studentFineSett + " where BatchYear='" + cbl_batch.Items[bt].Value + "' and FeeCatgory ='" + cbl_sem.Items[l].Value + "' and DegreeCode='" + cbl_dept.Items[k].Value + "' and CollegeCode='" + collegecode1 + "' and HeaderFK='" + getheaderid + "' and LedgerFK='" + cblledgefine.Items[j].Value + "' and FineType='" + finetype + "' and FineSettingType='1'  " + strFinYrFk + " else Insert into FM_FineMaster (FineType,FineAmount,DueDate,HeaderFK,LedgerFK,FeeCatgory,DegreeCode,CollegeCode,FineSettingType,BatchYear" + tempfincol + "" + studFineInsert + ") values ('" + finetype + "','" + refineamt + "','" + dutreadd.ToString("MM/dd/yyyy") + "','" + getheaderid + "','" + cblledgefine.Items[j].Value + "','" + cbl_sem.Items[l].Value + "','" + cbl_dept.Items[k].Value + "','" + collegecode1 + "','1','" + cbl_batch.Items[bt].Value + "'" + tempfinval + "" + tempSettVal + ")";
                                                    inscount = d2.update_method_wo_parameter(insquery, "Text");
                                                }
                                                //==========================Added by Saranya on 10/04/2018=============================//
                                                int savevalue = 1;
                                                string entrycode = Session["Entry_Code"].ToString();
                                                string formname = "FineSetting";
                                                string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                IPHostEntry host;
                                                string localip = "";
                                                host = Dns.GetHostEntry(Dns.GetHostName());
                                                foreach (IPAddress ip in host.AddressList)
                                                {
                                                    if (ip.AddressFamily.ToString() == "InterNetwork")
                                                    {
                                                        localip = ip.ToString();
                                                    }
                                                }
                                                string details = "Batch Year - " + cbl_batch.Items[bt].Value + " : Degree - " + cbl_dept.Items[k].Text + " : Semester - " + cbl_sem.Items[l].Text + "";
                                                string ctsname = "";
                                                if (savevalue == 1)
                                                {
                                                    ctsname = "ReAdmission";
                                                }
                                                string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                d2.insertEinanceUserActionLog(entrycode, formname, 1, toa, doa, details, ctsname, localip);
                                                //============================================================================//
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (inscount > 0)
            {
                if (boolbtn)
                    btnWeekFindDel.Visible = true;
                alertfine.Visible = true;
                lblfine.Visible = true;
                lblfine.Text = "Saved Successfully";


            }
        }
        catch
        {

        }
    }
    protected void btnfineclose_click(object sender, EventArgs e)
    {
        alertfine.Visible = false;
    }
    protected void btnexitfine_click(object sender, EventArgs e)
    {
        popfine.Visible = false;
    }
    protected void btnWeekFindDel_click(object sender, EventArgs e)
    {
        try
        {
            if (rb_perweek.Checked)
            {
                bool boolUpd = false;
                for (int hd = 0; hd < cblheadfine.Items.Count; hd++)
                {
                    if (cblheadfine.Items[hd].Selected)
                    {
                        for (int ld = 0; ld < cblledgefine.Items.Count; ld++)
                        {
                            if (cblledgefine.Items[ld].Selected)
                            {
                                for (int bt = 0; bt < cbl_batch.Items.Count; bt++)
                                {
                                    if (cbl_batch.Items[bt].Selected)
                                    {
                                        for (int dpt = 0; dpt < cbl_dept.Items.Count; dpt++)
                                        {
                                            if (cbl_dept.Items[dpt].Selected)
                                            {
                                                for (int sem = 0; sem < cbl_sem.Items.Count; sem++)
                                                {
                                                    if (cbl_sem.Items[sem].Selected)
                                                    {
                                                        string hdFK = Convert.ToString(cblheadfine.Items[hd].Value);
                                                        string delQ = "    delete from FM_FineMaster where BatchYear='" + cbl_batch.Items[bt].Value + "' and FeeCatgory='" + cbl_sem.Items[sem].Value + "' and DegreeCode='" + cbl_dept.Items[dpt].Value + "' and CollegeCode='" + collegecode1 + "' and HeaderFK='" + hdFK + "' and LedgerFK='" + cblledgefine.Items[ld].Value + "'  and FineType='3' and FineSettingType='0' ";
                                                        int inscount = d2.update_method_wo_parameter(delQ, "Text");
                                                        if (inscount > 0)
                                                            boolUpd = true;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (boolUpd)
                {
                    ScriptManager.RegisterClientScriptBlock(this, typeof(Page), UniqueID, "alert('Deleted Successfully')", true);
                    rb_perweek_OnCheckedChanged(sender, e);
                    btnWeekFindDel.Visible = false;
                }
            }
        }
        catch { }
    }

    protected void imagepopclose_click(object sender, EventArgs e)
    {
        popfine.Visible = false;
    }
    protected void imagepopclosefine_click(object sender, EventArgs e)
    {
        popfinefeeswise.Visible = false;
    }
    protected void cbheadfine_CheckedChanged(object sender, EventArgs e)
    {
        if (cbheadfine.Checked == true)
        {
            for (int i = 0; i < cblheadfine.Items.Count; i++)
            {
                cblheadfine.Items[i].Selected = true;
            }
            txtheadfine.Text = "Header (" + (cblheadfine.Items.Count) + ")";
        }
        else
        {
            for (int i = 0; i < cblheadfine.Items.Count; i++)
            {
                cblheadfine.Items[i].Selected = false;
            }
            txtheadfine.Text = "--Select--";
        }
        bindledger();
    }
    protected void cblheadfine_SelectedIndexChanged(object sender, EventArgs e)
    {
        txtheadfine.Text = "--Select--";
        cbheadfine.Checked = false;
        int commcount = 0;
        for (int i = 0; i < cblheadfine.Items.Count; i++)
        {
            if (cblheadfine.Items[i].Selected == true)
            {
                commcount = commcount + 1;
            }
        }
        if (commcount > 0)
        {
            txtheadfine.Text = "Header(" + commcount.ToString() + ")";
            if (commcount == cblheadfine.Items.Count)
            {
                cbheadfine.Checked = true;
            }
        }
        bindledger();
    }
    protected void cbledgefine_CheckedChanged(object sender, EventArgs e)
    {
        if (cbledgefine.Checked == true)
        {
            for (int i = 0; i < cblledgefine.Items.Count; i++)
            {
                cblledgefine.Items[i].Selected = true;
            }
            txtledgerfine.Text = "Ledger(" + (cblledgefine.Items.Count) + ")";
        }
        else
        {
            for (int i = 0; i < cblledgefine.Items.Count; i++)
            {
                cblledgefine.Items[i].Selected = false;
            }
            txtledgerfine.Text = "--Select--";
        }
    }
    protected void cblledgefine_SelectedIndexChanged(object sender, EventArgs e)
    {
        txtledgerfine.Text = "--Select--";
        cbledgefine.Checked = false;
        int commcount = 0;
        for (int i = 0; i < cblledgefine.Items.Count; i++)
        {
            if (cblledgefine.Items[i].Selected == true)
            {
                commcount = commcount + 1;
            }
        }
        if (commcount > 0)
        {
            txtledgerfine.Text = "Ledger(" + commcount.ToString() + ")";
            if (commcount == cblledgefine.Items.Count)
            {
                cbledgefine.Checked = true;
            }
        }
    }
    public void bindheader()
    {
        try
        {
            ds.Clear();
            cblheadfine.Items.Clear();
            //  string query = "select distinct HeaderName,HeaderPK from FM_HeaderMaster where CollegeCode='" + collegecode1 + "'";
            string query = " SELECT HeaderPK,HeaderName,hd_priority FROM FM_HeaderMaster H,FS_HeaderPrivilage P WHERE H.HeaderPK = P.HeaderFK AND P.CollegeCode = H.CollegeCode AND P. UserCode = " + usercode + " AND H.CollegeCode = " + collegecode1 + "  order by len(isnull(hd_priority,10000)),hd_priority asc";
            ds = d2.select_method_wo_parameter(query, "Text");

            if (ds.Tables[0].Rows.Count > 0)
            {
                cblheadfine.DataSource = ds;
                cblheadfine.DataTextField = "HeaderName";
                cblheadfine.DataValueField = "HeaderPK";
                cblheadfine.DataBind();


                if (cblheadfine.Items.Count > 0)
                {
                    for (int i = 0; i < cblheadfine.Items.Count; i++)
                    {
                        cblheadfine.Items[i].Selected = true;
                    }
                    txtheadfine.Text = "Header(" + cblheadfine.Items.Count + ")";
                    cbheadfine.Checked = true;
                }
            }
            else
            {
                txtheadfine.Text = "--Select--";

            }
        }

        catch
        {
        }
    }
    public void bindledger()
    {
        try
        {
            ds.Clear();
            cblledgefine.Items.Clear();

            string itemheader = "";
            for (int i = 0; i < cblheadfine.Items.Count; i++)
            {
                if (cblheadfine.Items[i].Selected == true)
                {
                    if (itemheader == "")
                    {
                        itemheader = "" + cblheadfine.Items[i].Value.ToString() + "";
                    }
                    else
                    {
                        itemheader = itemheader + "'" + "," + "" + "'" + cblheadfine.Items[i].Value.ToString() + "";
                    }
                }
            }

            if (itemheader.Trim() != "")
            {
                //string deptquery = "select distinct LedgerName,LedgerPK,isnull(f.priority,1000) from FM_LedgerMaster f,FM_HeaderMaster h where h.HeaderPK=f.HeaderFK and f.HeaderFK in('" + itemheader + "') and f.LedgerMode='0' and f.CollegeCode =" + collegecode1 + "  order by isnull(f.priority,1000), f.ledgerName asc ";

                string deptquery = "   SELECT LedgerPK,LedgerName FROM FM_LedgerMaster L,FS_LedgerPrivilage P WHERE L.LedgerPK = P.LedgerFK   AND P.CollegeCode = L.CollegeCode AND P. UserCode = " + usercode + " AND  Ledgermode='0' and L.CollegeCode = " + collegecode1 + "  and L.HeaderFK in('" + itemheader + "')  order by len(isnull(l.priority,1000)) , l.priority asc ";
                ds = d2.select_method_wo_parameter(deptquery, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cblledgefine.DataSource = ds;
                    cblledgefine.DataTextField = "LedgerName";
                    cblledgefine.DataValueField = "LedgerPK";
                    cblledgefine.DataBind();
                    if (cblledgefine.Items.Count > 0)
                    {
                        for (int i = 0; i < cblledgefine.Items.Count; i++)
                        {
                            cblledgefine.Items[i].Selected = true;
                        }
                        txtledgerfine.Text = "Ledger(" + cblledgefine.Items.Count + ")";
                        cbledgefine.Checked = true;
                    }
                }
                else
                {
                    txtledgerfine.Text = "--Select--";
                    cbledgefine.Checked = false;
                }
            }
            else
            {
                txtledgerfine.Text = "--Select--";
                cbledgefine.Checked = false;
            }
        }
        catch
        {
        }
    }

    //addd by sudhagar 28-09-2016
    #region readmission fees settings
    protected void rbfine_Changed(object sender, EventArgs e)
    {
        tblfine.Visible = true;
        tblreadd.Visible = false;
        rb_perday.Checked = false;
        rb_perweek.Checked = false;
        rb_common.Checked = true;
        btnWeekFindDel.Visible = false;
        lbl_month.Visible = false;
        rbl_Month.Visible = false;//abarna

    }
    protected void rb_monthlyfine_changed(object sender, EventArgs e)//abarna
    {
        tblfine.Visible = true;
        tblreadd.Visible = false;
        rb_perday.Checked = false;
        rb_perweek.Checked = false;
        rb_common.Checked = true;
        btnWeekFindDel.Visible = false;
        lbl_month.Visible = true;
        rbl_Month.Visible = true;//abarna
    }
    protected void rbreadd_Changed(object sender, EventArgs e)
    {
        tblfine.Visible = false;
        tblperweek.Visible = false;
        tblreadd.Visible = true;
        btnWeekFindDel.Visible = false;
        lbl_month.Visible = false;
        rbl_Month.Visible = false;//abarna
    }
    #endregion


    protected void view_click(object sender, EventArgs e)
    {
        try
        {
            //  btn_go_click(sender, e);
            //popper1.Visible = true;
            if (ddl_type.SelectedItem.Text == "Individual(Admitted)")
            {
                if (lnkview.Text == "Hide Details")
                {
                    lnkview.Text = "View Details";
                    FpSpreadstud.Visible = false;
                    FpSpread1.Width = 1000;
                    Div3.Visible = false;
                    lblerr1.Visible = false;
                }
                else
                {
                    if (FpSpreadstud.Sheets[0].RowCount >= 2)
                    {
                        Div3.Visible = true;
                        // lnkview.Text = "Hide Details";
                        FpSpreadstud.Visible = true;
                        FpSpreadstud.Width = 800;
                        FpSpreadstud.Height = 400;
                        divview.Visible = true;

                        if (dirAccess.selectScalarInt("select LinkValue from New_InsSettings where LinkName='StudentsDisplayPositioninJournal' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ") == 1)
                        {
                            //New Position
                            divview.Attributes.Add("style", "height: 400px; z-index: 1000;width: 320px; background-color: rgba(54, 25, 25, .2); position: absolute; top: 300; left: 700px;");
                            div1.Attributes.Add("style", "height: 380px;width: 290px; overflow:auto; position:relative;");
                            studentdetail.Attributes.Add("style", "width: 270px; height: 350px;");
                            //imgbtn3.Attributes.Add("style", "height: 30px; width: 30px; position: absolute; margin-top: -22px; margin-left: 130px; z-index:100;");
                            imgbtn3.Visible = false;
                            FpSpread1.Width = 650;
                            FpSpreadstud.Width = 250;
                            //New Position end
                        }

                        studentdetail.Visible = true;
                        //  FpSpread1.Width = 600;
                        FpSpreadstud2.Visible = false;
                        FpSpreadstud3.Visible = false;
                    }
                    else if (FpSpreadstud.Sheets[0].RowCount == 1)
                    {
                        Div3.Visible = false;
                        lnkview.Text = "View Details";
                        lblerr1.Visible = true;
                        lblerr1.Text = "There are no students available!";
                    }
                    else
                    {
                        Div3.Visible = false;
                        lnkview.Text = "View Details";
                        alertpopwindow.Visible = true;
                        lblalerterr.Visible = true;
                        lblalerterr.Text = "Click the go Button & then Proceed!";
                    }
                }
            }
            else if (ddl_type.SelectedItem.Text == "Individual(Applied)")
            {
                //FpSpreadstud2.Visible = true;
                //FpSpreadstud.Visible = false;
                //FpSpreadstud3.Visible = false;
                Div3.Visible = true;
                // lnkview.Text = "Hide Details";
                FpSpreadstud.Visible = true;
                FpSpreadstud.Width = 800;
                FpSpreadstud.Height = 400;
                divview.Visible = true;
                studentdetail.Visible = true;
                //  FpSpread1.Width = 600;
                FpSpreadstud2.Visible = false;
                FpSpreadstud3.Visible = false;
            }
            else if (ddl_type.SelectedItem.Text == "Individual(Both)")
            {
                FpSpreadstud3.Visible = true;
                FpSpreadstud.Visible = false;
                FpSpreadstud2.Visible = false;
            }

        }
        catch
        {

        }
    }

    public bool columncount()
    {
        bool colorder = false;
        try
        {
            for (int i = 0; i < cblcolumnorder.Items.Count; i++)
            {
                if (cblcolumnorder.Items[i].Selected == true)
                {
                    colorder = true;
                }
            }
        }
        catch { }
        return colorder;
    }
    public void loadcolumns()
    {
        try
        {
            Dictionary<string, string> dict = new Dictionary<string, string>();
            string linkname = "journal column order settings";
            string columnvalue = "";
            int clsupdate = 0;
            DataSet dscol = new DataSet();
            string selcol = "select LinkValue from New_InsSettings where LinkName='" + linkname + "' and  user_code='" + usercode + "' and college_code='" + collegecode1 + "' ";
            dscol.Clear();
            dscol = d2.select_method_wo_parameter(selcol, "Text");
            if (columncount() == true)
            {
                if (cblcolumnorder.Items.Count > 0)
                {
                    // colord.Clear();
                    for (int i = 0; i < cblcolumnorder.Items.Count; i++)
                    {
                        if (cblcolumnorder.Items[i].Selected == true)
                        {
                            // colord.Add(Convert.ToString(cblcolumnorder.Items[i].Value));
                            if (columnvalue == "")
                            {
                                columnvalue = Convert.ToString(cblcolumnorder.Items[i].Value);
                            }
                            else
                            {
                                columnvalue = columnvalue + ',' + Convert.ToString(cblcolumnorder.Items[i].Value);
                            }
                        }
                    }
                }
            }
            else if (dscol.Tables.Count > 0)
            {
                if (dscol.Tables[0].Rows.Count > 0)
                {
                    // colord.Clear();
                    for (int col = 0; col < dscol.Tables[0].Rows.Count; col++)
                    {
                        string value = Convert.ToString(dscol.Tables[0].Rows[col]["LinkValue"]);
                        string[] valuesplit = value.Split(',');
                        if (valuesplit.Length > 0)
                        {
                            for (int k = 0; k < valuesplit.Length; k++)
                            {
                                //  colord.Add(Convert.ToString(valuesplit[k]));
                                if (columnvalue == "")
                                {
                                    columnvalue = Convert.ToString(valuesplit[k]);
                                }
                                else
                                {
                                    columnvalue = columnvalue + ',' + Convert.ToString(valuesplit[k]);
                                }
                            }
                        }
                    }
                }

            }
            else
            {
                if (columnvalue == "")
                {
                    columnvalue = Convert.ToString(cblcolumnorder.Items[0].Value);
                }
                else
                {
                    columnvalue = columnvalue + ',' + Convert.ToString(cblcolumnorder.Items[1].Value);
                }
            }
            if (columnvalue != "" && columnvalue != null)
            {
                string clsinsert = " if exists(select * from New_InsSettings where LinkName='" + linkname + "' and college_code ='" + collegecode1 + "' and user_code='" + usercode + "') update New_InsSettings set LinkValue='" + columnvalue + "' where LinkName='" + linkname + "' and user_code='" + usercode + "' and college_code='" + collegecode1 + "' else insert into New_InsSettings (LinkName,LinkValue,user_code,college_code)values('" + linkname + "','" + columnvalue + "','" + usercode + "','" + collegecode1 + "')";
                clsupdate = d2.update_method_wo_parameter(clsinsert, "Text");
            }
            if (clsupdate == 1)
            {
                string sel = "select LinkValue from New_InsSettings where LinkName='" + linkname + "' and  user_code='" + usercode + "' and college_code='" + collegecode1 + "' ";
                DataSet dscolor = new DataSet();
                dscolor.Clear();
                dscolor = d2.select_method_wo_parameter(sel, "Text");
                //  ItemList.Clear();
                if (dscolor.Tables.Count > 0)
                {
                    int count = 0;
                    if (dscolor.Tables[0].Rows.Count > 0)
                    {
                        string value = Convert.ToString(dscolor.Tables[0].Rows[0]["LinkValue"]);
                        string[] value1 = value.Split(',');
                        if (value1.Length > 0)
                        {
                            for (int i = 0; i < value1.Length; i++)
                            {
                                string val = value1[i].ToString();
                                for (int k = 0; k < cblcolumnorder.Items.Count; k++)
                                {
                                    if (val == cblcolumnorder.Items[k].Value)
                                    {
                                        cblcolumnorder.Items[k].Selected = true;
                                        if (!ItemList.Contains(cblcolumnorder.Items[k].Text))
                                        {
                                            ItemList.Add(cblcolumnorder.Items[k].Text);
                                        }
                                        count++;
                                    }
                                    if (count == cblcolumnorder.Items.Count)
                                    {
                                        CheckBox_column.Checked = true;
                                    }
                                    else
                                    {
                                        CheckBox_column.Checked = false;
                                    }
                                }
                            }
                        }

                    }
                }
            }
        }
        catch { }
    }
    protected double getConcessionSet()
    {
        double getVal = 0;
        try
        {
            double.TryParse(Convert.ToString(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='IncludeConcession' and user_code ='" + usercode + "' and college_code ='" + Convert.ToString(ddl_college.SelectedItem.Value) + "'")), out getVal);
        }
        catch { }
        return getVal;
    }

    protected void loadColumns()
    {
        try
        {
            cblcolumnorder.Items.Clear();
            cblcolumnorder.Items.Add(new ListItem("Mode", "Mode"));
            cblcolumnorder.Items.Add(new ListItem("Fee Amount", "FeeAmount"));
            if (getConcessionSet() == 1)
            {
                cblcolumnorder.Items.Add(new ListItem("Concession", "DeductAmout"));
                cblcolumnorder.Items.Add(new ListItem("Concession Reason", "DeductReason"));
            }
            cblcolumnorder.Items.Add(new ListItem("Total", "TotalAmount"));
            cblcolumnorder.Items.Add(new ListItem("Refund", "RefundAmount"));
            cblcolumnorder.Items.Add(new ListItem("Pay Start Date", "DueDate"));
            cblcolumnorder.Items.Add(new ListItem("Scholarship", "Scholarship"));
            for (int row = 0; row < cblcolumnorder.Items.Count; row++)
            {
                if (cblcolumnorder.Items[row].Text == "Mode")
                {
                    cblcolumnorder.Items[row].Selected = true;
                    cblcolumnorder.Items[row].Enabled = false;
                }

            }
            string linkname = "journal column order settings";
            string selcol = "select LinkValue from New_InsSettings where LinkName='" + linkname + "' and  user_code='" + usercode + "' and college_code='" + collegecode1 + "' ";
            DataSet dscol = d2.select_method_wo_parameter(selcol, "Text");
            if (dscol.Tables.Count > 0 && dscol.Tables[0].Rows.Count > 0)
            {                // colord.Clear();
                for (int col = 0; col < dscol.Tables[0].Rows.Count; col++)
                {
                    string value = Convert.ToString(dscol.Tables[0].Rows[col]["LinkValue"]);
                    string[] valuesplit = value.Split(',');
                    if (valuesplit.Length > 0)
                    {
                        for (int k = 0; k < valuesplit.Length; k++)
                        {
                            for (int row = 0; row < cblcolumnorder.Items.Count; row++)
                            {
                                if (cblcolumnorder.Items[row].Value == Convert.ToString(valuesplit[k]))
                                {
                                    cblcolumnorder.Items[row].Selected = true;
                                }
                            }

                        }
                    }
                }
            }
        }
        catch { }
    }

    protected void cbDeuction_Changed(object sender, EventArgs e)
    {
        loadColumns();
    }


    protected void btn_go_click(object sender, EventArgs e)
    {
        try
        {
            txtNoCon_OnTextChanged(sender, e);
            int concession = 0;
            concession = Convert.ToInt32(txtNoConcession.Text);
            if (concession <= 3)
            {

                #region Common Details
                FpSpread1.SaveChanges();
                divBtns.Visible = false;
                lnkview.Text = "View Details";
                ledgertotal.Clear();
                headertotal.Clear();
                Grandtotal.Clear();
                hsgetpay.Clear();
                lblerr.Visible = false;
                FarPoint.Web.Spread.StyleInfo darkstyle = new FarPoint.Web.Spread.StyleInfo();
                darkstyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#0CA6CA");
                darkstyle.ForeColor = System.Drawing.Color.Black;
                darkstyle.HorizontalAlign = HorizontalAlign.Center;
                FpSpread1.ActiveSheetView.ColumnHeader.DefaultStyle = darkstyle;
                FpSpread1.Sheets[0].RowHeader.Visible = false;
                FpSpread1.CommandBar.Visible = false;
                FpSpread1.Sheets[0].AutoPostBack = false;
                ViewState["colcountnew"] = null;
                Session["appform_no"] = null;
                Session["app_no"] = null;
                Session["appformnew_no"] = null;

                string[] dtday = new string[31];
                for (int id = 1; id <= 31; id++)
                {
                    if (Convert.ToString(id).Length == 1)
                    {
                        dtday[id - 1] = Convert.ToString("0" + id);
                    }
                    else
                    {
                        dtday[id - 1] = Convert.ToString(id);
                    }
                }
                string[] dtmon = new string[12] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" };
                string[] droparray = new string[2];
                string[] droparray1 = new string[ddl_detre.Items.Count];
                string[] droparray2 = new string[ddl_detre.Items.Count];
                droparray[0] = "Regular";
                droparray[1] = "Monthwise";
                string[] loadyear = new string[10];

                DateTime currdt = DateTime.Now;
                int curryear = currdt.Year;

                for (int ij = 0; ij < 10; ij++)
                {
                    loadyear[ij] = Convert.ToString(curryear - ij);
                }

                if (ddl_detre.Items.Count > 0)
                {
                    for (int re = 0; re < ddl_detre.Items.Count; re++)
                    {
                        if (re == 0)
                        {
                            droparray1[re] = "Select";
                        }
                        else
                        {
                            droparray1[re] = Convert.ToString(ddl_detre.Items[re].Text);
                        }
                    }
                }

                if (ddl_detre.Items.Count > 0)
                {
                    for (int re = 0; re < ddl_detre.Items.Count; re++)
                    {
                        if (re == 0)
                        {
                            droparray2[re] = " ";
                        }
                        else
                        {
                            droparray2[re] = Convert.ToString(ddl_detre.Items[re].Value);
                        }
                    }
                }

                //if (ddlyear1.Items.Count > 0)
                //{
                //    for (int yr = 0; yr < ddlyear1.Items.Count; yr++)
                //    {
                //        loadyear[yr] = Convert.ToString(ddlyear1.Items[yr].Text);
                //    }
                //}


                string ledger = "";
                string header = "";
                string degreecode = "";
                string batchyear = "";
                string seattype = "";
                string feecategory = "";
                string type = "";
                string edulevel = "";
                string mode = "";
                string stutype = "";
                string course = "";
                string community = "";
                string religion = "";
                string reasoncode = "";
                string Quota = string.Empty;
                int col = 1;
                int paycol = 0;

                FarPoint.Web.Spread.ComboBoxCellType cb = new FarPoint.Web.Spread.ComboBoxCellType(droparray);
                cb.UseValue = true;
                cb.AutoPostBack = true;
                cb.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cb1 = new FarPoint.Web.Spread.ComboBoxCellType(droparray1, droparray2);
                //string sql = "select TextCode,TextVal from TextValTable where TextCriteria ='DedRe' and college_code ='" + collegecode1 + "'";
                //ds.Clear();
                //ds = d2.select_method_wo_parameter(sql, "Text");
                //if (ds.Tables.Count > 0)
                //{
                //    if (ds.Tables[0].Rows.Count > 0)
                //    {
                //        cb1.DataSource = ds;
                //        cb1.DataTextField = "TextVal";
                //        cb1.DataValueField = "TextCode";
                //    }
                //}
                cb1.UseValue = true;
                cb1.ShowButton = true;
                cb1.AutoPostBack = true;

                FarPoint.Web.Spread.ComboBoxCellType cbcomday = new FarPoint.Web.Spread.ComboBoxCellType(dtday);
                cbcomday.UseValue = true;
                cbcomday.ShowButton = true;
                cbcomday.AutoPostBack = true;

                FarPoint.Web.Spread.ComboBoxCellType cbcommon = new FarPoint.Web.Spread.ComboBoxCellType(dtmon);
                cbcommon.UseValue = true;
                cbcommon.ShowButton = true;
                cbcommon.AutoPostBack = true;

                FarPoint.Web.Spread.ComboBoxCellType cbcomyear = new FarPoint.Web.Spread.ComboBoxCellType(loadyear);
                cbcomyear.UseValue = true;
                cbcomyear.ShowButton = true;
                cbcomyear.AutoPostBack = true;

                FarPoint.Web.Spread.ComboBoxCellType cbday1 = new FarPoint.Web.Spread.ComboBoxCellType(dtday);
                cbday1.UseValue = true;
                cbday1.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cbmon1 = new FarPoint.Web.Spread.ComboBoxCellType(dtmon);
                cbmon1.UseValue = true;
                cbmon1.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cbyear1 = new FarPoint.Web.Spread.ComboBoxCellType(loadyear);
                cbyear1.UseValue = true;
                cbyear1.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cbday2 = new FarPoint.Web.Spread.ComboBoxCellType(dtday);
                cbday2.UseValue = true;
                cbday2.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cbmon2 = new FarPoint.Web.Spread.ComboBoxCellType(dtmon);
                cbmon2.UseValue = true;
                cbmon2.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cbyear2 = new FarPoint.Web.Spread.ComboBoxCellType(loadyear);
                cbyear2.UseValue = true;
                cbyear2.ShowButton = true;

                string[] schlType = { " ", "Type" };
                FarPoint.Web.Spread.ComboBoxCellType cbSchType = new FarPoint.Web.Spread.ComboBoxCellType(schlType);
                cbSchType.UseValue = true;
                cbSchType.ShowButton = true;
                cbSchType.AutoPostBack = true;

                FarPoint.Web.Spread.DoubleCellType doubl = new FarPoint.Web.Spread.DoubleCellType();
                doubl.ErrorMessage = "Allow Numerics";
                int i = 0;

                #region Added by Idhris -- 08-03-2016

                ledger = GetSelectedItemsValueAsString(cbl_ledger);

                header = GetSelectedItemsValueAsString(cbl_header);

                degreecode = GetSelectedItemsValueAsString(cbl_dept);

                course = GetSelectedItemsValueAsString(cbl_course);

                batchyear = GetSelectedItemsValueAsString(cbl_batch);

                seattype = GetSelectedItemsValueAsString(cbl_seat);

                feecategory = GetSelectedItemsValueAsString(cbl_sem);

                type = GetSelectedItemsValueAsString(cbl_stream);

                edulevel = GetSelectedItemsValueAsString(cbl_edulevel);

                mode = GetSelectedItemsValueAsString(cbl_type);

                stutype = GetSelectedItemsValueAsString(cbl_stutype);

                community = GetSelectedItemsValueAsString(cbl_community);

                religion = GetSelectedItemsValueAsString(cbl_religion);

                Quota = GetSelectedItemsValueAsString(cblQuota);//added by abarna 12.03.2018

                string scholar = Convert.ToString(ddlsearch.SelectedItem.Value);
                #endregion

                string strorderby = d2.GetFunction("select value from Master_Settings where settings='order_by'");
                if (strorderby == "")
                {
                    strorderby = "";
                }
                else
                {
                    if (strorderby == "0")
                    {
                        strorderby = "ORDER BY r.Roll_No";
                    }
                    else if (strorderby == "1")
                    {
                        strorderby = "ORDER BY r.Reg_No";
                    }
                    else if (strorderby == "2")
                    {
                        strorderby = "ORDER BY r.Stud_Name";
                    }
                    else if (strorderby == "0,2")
                    {
                        strorderby = "ORDER BY r.Roll_No,r.Stud_Name";
                    }
                    else if (strorderby == "0,1")
                    {
                        strorderby = "ORDER BY r.Roll_No,r.Reg_No";
                    }
                    else if (strorderby == "0,1,2")
                    {
                        strorderby = "ORDER BY r.Roll_No,r.Reg_No,r.Stud_Name";
                    }
                    else
                    {
                        strorderby = "";
                    }
                }

                //if (ItemList.Count == 0)
                //{
                //    ItemList.Add("Mode");
                //    ItemList.Add("Fee Amount");
                //    ItemList.Add("Total");
                //}
                //else
                //{
                loadcolumns();
                //  }
                List<string> ls = new List<string>();

                FpSpread1.Sheets[0].ColumnHeader.RowCount = 3;
                FpSpread1.Sheets[0].RowCount = 0;
                FpSpread1.Sheets[0].ColumnCount = 0;

                FarPoint.Web.Spread.StyleInfo style2 = new FarPoint.Web.Spread.StyleInfo();
                style2.Font.Size = 13;
                style2.Font.Name = "Book Antiqua";
                style2.Font.Bold = true;
                style2.HorizontalAlign = HorizontalAlign.Center;
                style2.ForeColor = System.Drawing.Color.Black;
                style2.BackColor = System.Drawing.Color.AliceBlue;
                Hashtable hatnew = new Hashtable();

                DataView dv1 = new DataView();
                DataView dv = new DataView();
                DataTable dt = new DataTable();
                DataTable dt1 = new DataTable();

                FpSpread1.Sheets[0].ColumnCount++;
                FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Text = "S.No";
                FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Locked = true;
                FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Width = 50;

                FpSpread1.Sheets[0].ColumnCount++;
                FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Fee Type";
                FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Locked = true;
                FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Width = 150;
                int count = 0;
                int semcount = 0;
                for (i = 0; i < cbl_sem.Items.Count; i++)
                {
                    if (cbl_sem.Items[i].Selected)
                    {
                        count = 0;
                        semcount++;
                        FpSpread1.Sheets[0].ColumnCount++;
                        hatnew.Add(Convert.ToString(cbl_sem.Items[i].Value), FpSpread1.Sheets[0].ColumnCount - 1);
                        count++;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Mode";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(1, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                        if (!ItemList.Contains("Mode"))
                        {
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                        }

                        FpSpread1.Sheets[0].ColumnCount++;
                        count++;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Fee Amount";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(1, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Right;
                        if (!ItemList.Contains("Fee Amount"))
                        {
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                        }

                        int noOfConcession = 0;
                        noOfConcession = Convert.ToInt32(txtNoConcession.Text);

                        if (noOfConcession == 0 || noOfConcession == 1)
                        {
                            FpSpread1.Sheets[0].ColumnCount++;
                            count++;
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Concession";
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(1, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Right;
                            columnind.Add(FpSpread1.Sheets[0].ColumnCount - 1);
                            if (!ItemList.Contains("Concession"))
                            {
                                FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                            }

                            FpSpread1.Sheets[0].ColumnCount++;
                            count++;
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Concession Reason";
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(1, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                            if (!ItemList.Contains("Concession Reason"))
                            {
                                FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                            }

                        }
                        else
                        {
                            for (int con = 0; con < noOfConcession; con++)
                            {
                                FpSpread1.Sheets[0].ColumnCount++;
                                count++;
                                FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Concession";
                                FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                                FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                                FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                                FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                                FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(1, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);
                                FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                                FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Right;
                                columnind.Add(FpSpread1.Sheets[0].ColumnCount - 1);
                                if (!ItemList.Contains("Concession"))
                                {
                                    FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                                }

                                FpSpread1.Sheets[0].ColumnCount++;
                                count++;
                                FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Concession Reason";
                                FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                                FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                                FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                                FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                                FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(1, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);
                                FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                                if (!ItemList.Contains("Concession Reason"))
                                {
                                    FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                                }

                            }

                            FpSpread1.Sheets[0].ColumnCount++;
                            count++;
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Total Concession";
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(1, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Right;
                            columnind.Add(FpSpread1.Sheets[0].ColumnCount - 1);
                            if (!ItemList.Contains("Concession"))
                            {
                                FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                            }

                            FpSpread1.Sheets[0].ColumnCount++;
                            count++;
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Concession Reason";
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                            FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(1, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                            if (!ItemList.Contains("Concession Reason"))
                            {
                                FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                            }
                            //FpSpread1.Sheets[0].ColumnCount--;
                        }

                        FpSpread1.Sheets[0].ColumnCount++;
                        count++;
                        if (noOfConcession == 0 || noOfConcession == 1)
                        {
                            ledgertotal.Add(Convert.ToString(cbl_sem.Items[i].Value), FpSpread1.Sheets[0].ColumnCount - 3);
                            ViewState["ledgertotal"] = ledgertotal;
                        }
                        else
                        {
                            int MulConcession = ((noOfConcession + 1) * 2) + 1;
                            ledgertotal.Add(Convert.ToString(cbl_sem.Items[i].Value), FpSpread1.Sheets[0].ColumnCount - MulConcession);
                            ViewState["ledgertotal"] = ledgertotal;
                        }
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Total";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(1, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Locked = true;
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Right;
                        if (!ItemList.Contains("Total"))
                        {
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                        }

                        FpSpread1.Sheets[0].ColumnCount++;
                        count++;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Refund";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(1, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Right;
                        columnind.Add(FpSpread1.Sheets[0].ColumnCount - 1);
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                        if (!ItemList.Contains("Refund"))
                        {
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                        }

                        FpSpread1.Sheets[0].ColumnCount++;
                        count++;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Scholarship Type";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(1, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Right;
                        columnind.Add(FpSpread1.Sheets[0].ColumnCount - 1);
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                        FpSpread1.Sheets[0].ColumnCount++;
                        count++;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Scholarship";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(1, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Right;
                        columnind.Add(FpSpread1.Sheets[0].ColumnCount - 1);
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                        if (!ItemList.Contains("Scholarship"))
                        {
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 2].Visible = false;
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                        }

                        FpSpread1.Sheets[0].ColumnCount++;
                        count++;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Pay Start Date";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                        if (!hsgetpay.ContainsKey(Convert.ToString(cbl_sem.Items[i].Value)))
                        {
                            hsgetpay.Add(Convert.ToString(cbl_sem.Items[i].Value), FpSpread1.Sheets[0].ColumnCount - 1);
                            ViewState["hsgetcol"] = hsgetpay;
                        }
                        if (!ItemList.Contains("Pay Start Date"))
                        {
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                        }

                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Date";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Width = 50;
                        if (!ItemList.Contains("Pay Start Date"))
                        {
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                        }

                        FpSpread1.Sheets[0].ColumnCount++;
                        count++;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Month";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Width = 50;
                        if (!ItemList.Contains("Pay Start Date"))
                        {
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                        }

                        FpSpread1.Sheets[0].ColumnCount++;
                        count++;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Year";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Width = 50;
                        if (!ItemList.Contains("Pay Start Date"))
                        {
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                        }

                        FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(1, FpSpread1.Sheets[0].ColumnCount - 3, 1, 3);

                        FpSpread1.Sheets[0].ColumnCount++;
                        count++;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Fine";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(1, FpSpread1.Sheets[0].ColumnCount - 1, 2, 1);
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Right;
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                        columnind.Add(FpSpread1.Sheets[0].ColumnCount - 1);
                        if (!ItemList.Contains("Fine"))
                        {
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                        }

                        FpSpread1.Sheets[0].ColumnCount++;
                        count++;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Due Date";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[1, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;

                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                        if (!ItemList.Contains("Due Date"))
                        {
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                        }

                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Date";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Width = 50;
                        if (!ItemList.Contains("Due Date"))
                        {
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                        }

                        FpSpread1.Sheets[0].ColumnCount++;
                        count++;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Month";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Width = 50;
                        if (!ItemList.Contains("Due Date"))
                        {
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                        }

                        FpSpread1.Sheets[0].ColumnCount++;
                        count++;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Text = "Year";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Font.Bold = true;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].Font.Size = FontUnit.Medium;
                        FpSpread1.Sheets[0].ColumnHeader.Cells[2, FpSpread1.Sheets[0].ColumnCount - 1].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = true;
                        FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Width = 50;

                        if (!ItemList.Contains("Due Date"))
                        {
                            FpSpread1.Sheets[0].Columns[FpSpread1.Sheets[0].ColumnCount - 1].Visible = false;
                        }
                        FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(1, FpSpread1.Sheets[0].ColumnCount - 3, 1, 3);
                        FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, 0, 3, 1);
                        FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, 1, 3, 1);

                        FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - count].Text = Convert.ToString(cbl_sem.Items[i].Text);
                        FpSpread1.Sheets[0].ColumnHeader.Cells[0, FpSpread1.Sheets[0].ColumnCount - count].Tag = Convert.ToString(cbl_sem.Items[i].Value);
                        FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(0, FpSpread1.Sheets[0].ColumnCount - count, 1, count);
                    }
                }
                if (semcount == 0)
                {
                    FpSpread1.Visible = false;
                    upd.Visible = false;
                    alertpopwindow.Visible = true;
                    lblalerterr.Visible = true;
                    if (lbl_sem.Text == "Semester")
                    {
                        lblalerterr.Text = "Please select any one semester!";
                    }
                    if (lbl_sem.Text == "Year")
                    {
                        lblalerterr.Text = "Please select any one year!";
                    }
                }
                else
                {
                    upd.Visible = true;
                    FpSpread1.Visible = true;
                }
                ViewState["colcountnew"] = hatnew;
                ds.Clear();
                string selquery = "";
                string strFinYrFk = string.Empty;
                string finyearid = string.Empty;
                if (checkSchoolSetting() == 0)
                {
                    string getfinfk = Convert.ToString(ddlfinyear.SelectedValue);
                    strFinYrFk = " and finyearfk in('" + getfinfk + "')";
                    finyearid = Convert.ToString(ddlfinyear.SelectedValue);
                }
                else
                    finyearid = d2.getCurrentFinanceYear(usercode, collegecode1);
                //   string finyearid = d2.getCurrentFinanceYear(usercode, collegecode1);
                string stateCode = string.Empty;
                if (cbIncState.Checked)
                {
                    stateCode = Convert.ToString(getCblSelectedValue(cblstate));
                }
                #endregion

                #region General
                string hostelFK = string.Empty;
                string roomType = string.Empty;
                string communitY = string.Empty;
                roomType = Convert.ToString(getCblSelectedValue(cblroomtype));
                hostelFK = Convert.ToString(getCblSelectedValue(cblhstlname));

                if (cbIncCommunity.Checked)
                {
                    string comms = Convert.ToString(getCblSelectedValue(cbl_community));
                    if (!string.IsNullOrEmpty(comms))
                    {
                        communitY = "  and CommunityCode in('" + comms + "') and isnull(IsCommunity,'0')='1'";
                    }
                }

                if (cbhostel.Checked && (string.IsNullOrEmpty(hostelFK) || string.IsNullOrEmpty(roomType)))
                {
                    FpSpread1.Visible = false;
                    ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Please Select Hostel and room Type')", true);
                    return;

                }
                if (ddl_type.SelectedItem.Text == "General")
                {
                    selquery = "select headerpk,headername,ledgerpk,ledgername from FM_HeaderMaster m,FM_LedgerMaster l where m.HeaderPK = l.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure')  and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "') order by len(isnull(l.priority,1000)) , l.priority asc ";

                    //selquery = selquery + "select FeeCategory,FeeAmount,LedgerFK,HeaderFK,DeductAmout,PayMode,(SELECT TextVal FROM TextVAlTAble T WHERE T.TextCode = A.DeductReason)DeductReason,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,convert(varchar(10),PayStartDate,103) as PayStartDate,convert(varchar(10),DueDate,103) as DueDate,FineAmount from FT_FeeAllotDegree A where HeaderFK in('" + header + "') and LedgerFK in('" + ledger + "') and DegreeCode in ('" + degreecode + "') and batchyear in ('" + batchyear + "') and SeatType in ('" + seattype + "') and  FinYearFK ='" + finyearid + "' and FeeCategory in('" + feecategory + "') and DeductReason='" + reasoncode + "'";
                    if (!cbhostel.Checked)
                    {
                        if (cblQuota.Items.Count > 0)
                        {
                            selquery = selquery + "select FeeCategory,FeeAmount,LedgerFK,HeaderFK,DeductAmout,PayMode,DeductReason,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,convert(varchar(10),PayStartDate,103) as PayStartDate,convert(varchar(10),DueDate,103) as DueDate,FineAmount,DeductAmount1,DeductReason1,DeductAmount2,DeductReason2,DeductAmount3,DeductReason3 from FT_FeeAllotDegree A where HeaderFK in('" + header + "') and LedgerFK in('" + ledger + "') and DegreeCode in ('" + degreecode + "') and batchyear in ('" + batchyear + "') and SeatType in ('" + seattype + "')  and  FinYearFK ='" + finyearid + "' and FeeCategory in('" + feecategory + "') " + communitY + "";
                        }
                        else
                        {
                            selquery = selquery + "select FeeCategory,FeeAmount,LedgerFK,HeaderFK,DeductAmout,PayMode,DeductReason,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,convert(varchar(10),PayStartDate,103) as PayStartDate,convert(varchar(10),DueDate,103) as DueDate,FineAmount,DeductAmount1,DeductReason1,DeductAmount2,DeductReason2,DeductAmount3,DeductReason3 from FT_FeeAllotDegree A where HeaderFK in('" + header + "') and LedgerFK in('" + ledger + "') and DegreeCode in ('" + degreecode + "') and batchyear in ('" + batchyear + "') and SeatType in ('" + seattype + "')  and  FinYearFK ='" + finyearid + "' and FeeCategory in('" + feecategory + "') " + communitY + "";
                        }
                    }
                    else
                    {
                        if (cblQuota.Items.Count > 0)
                        {
                            selquery = selquery + "select FeeCategory,FeeAmount,LedgerFK,HeaderFK,DeductAmout,PayMode,DeductReason,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,convert(varchar(10),PayStartDate,103) as PayStartDate,convert(varchar(10),DueDate,103) as DueDate,FineAmount,DeductAmount1,DeductReason1,DeductAmount2,DeductReason2,DeductAmount3,DeductReason3 from FT_FeeAllotDegree A where HeaderFK in('" + header + "') and LedgerFK in('" + ledger + "') and DegreeCode in ('" + degreecode + "') and batchyear in ('" + batchyear + "') and SeatType in ('" + seattype + "')  and  FinYearFK ='" + finyearid + "' and FeeCategory in('" + feecategory + "') and HostelMasterFK in('" + hostelFK + "') and RoomType in('" + roomType + "') and isHostelFees='1'";
                        }
                        else
                        {
                            selquery = selquery + "select FeeCategory,FeeAmount,LedgerFK,HeaderFK,DeductAmout,PayMode,DeductReason,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,convert(varchar(10),PayStartDate,103) as PayStartDate,convert(varchar(10),DueDate,103) as DueDate,FineAmount,DeductAmount1,DeductReason1,DeductAmount2,DeductReason2,DeductAmount3,DeductReason3 from FT_FeeAllotDegree A where HeaderFK in('" + header + "') and LedgerFK in('" + ledger + "') and DegreeCode in ('" + degreecode + "') and batchyear in ('" + batchyear + "') and SeatType in ('" + seattype + "') and  FinYearFK ='" + finyearid + "' and FeeCategory in('" + feecategory + "') and HostelMasterFK in('" + hostelFK + "') and RoomType in('" + roomType + "') and isHostelFees='1'";
                        }
                    }

                    selquery = selquery + " select distinct headerpk,headername from FM_HeaderMaster m,FM_LedgerMaster l where m.HeaderPK = l.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure') and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "') ";
                    //order by len(isnull(l.priority,1000)) , l.priority asc 
                    double divheight = 0;
                    ds = d2.select_method_wo_parameter(selquery, "Text");
                    // loadcolumns();
                    if (ds.Tables[0].Rows.Count > 0 && ds.Tables[2].Rows.Count > 0)
                    {
                        int sno = 0;
                        string startdate = "";
                        string duedate = "";
                        string day1 = "";
                        string mon1 = "";
                        string year1 = "";
                        string day2 = "";
                        string mon2 = "";
                        string year2 = "";


                        Hashtable tothash = new Hashtable();
                        Hashtable dedhash = new Hashtable();
                        Hashtable coltothash = new Hashtable();
                        Hashtable refhash = new Hashtable();
                        Hashtable frmhash = new Hashtable();
                        Hashtable finehash = new Hashtable();

                        Hashtable Grandtothash = new Hashtable();
                        Hashtable Granddedhash = new Hashtable();
                        Hashtable Grandcoltothash = new Hashtable();
                        Hashtable Grandrefhash = new Hashtable();
                        Hashtable Grandfrmhash = new Hashtable();
                        Hashtable Grandfinehash = new Hashtable();

                        int colindex;
                        int dedindex;
                        int coltotindex;
                        int refindex;
                        int frmindex;
                        int fineindex;
                        double totgrand = 0;
                        double dedgrand = 0;
                        double grandtot = 0;
                        double refundtot = 0;
                        double frmgovttot = 0;
                        double finetotal = 0;
                        string[] split;
                        for (int ik = 0; ik < ds.Tables[2].Rows.Count; ik++)
                        {
                            tothash.Clear();
                            dedhash.Clear();
                            coltothash.Clear();
                            refhash.Clear();
                            frmhash.Clear();
                            finehash.Clear();

                            double total = 0;
                            double dedtot = 0;
                            double coltot = 0;
                            double reftot = 0;
                            double frmtot = 0;
                            double finetot = 0;

                            FpSpread1.Sheets[0].RowCount++;
                            divheight += 30;
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(ds.Tables[2].Rows[ik]["HeaderName"]);
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);
                            if (ik == 0)
                            {
                                if (hsgetpay.Count > 0)
                                {
                                    foreach (DictionaryEntry p in hsgetpay)
                                    {
                                        int indexvaluenew = Convert.ToInt32(p.Value);
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, indexvaluenew].CellType = cbcomday;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, indexvaluenew + 1].CellType = cbcommon;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, indexvaluenew + 2].CellType = cbcomyear;
                                    }
                                }
                            }

                            ds.Tables[0].DefaultView.RowFilter = "HeaderPK='" + Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"]) + "'";
                            dv = ds.Tables[0].DefaultView;

                            for (i = 0; i < dv.Count; i++)
                            {
                                FpSpread1.Sheets[0].RowCount++;
                                divheight += 30;
                                sno++;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(sno);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;

                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = Convert.ToString(dv[i]["LedgerName"]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Tag = Convert.ToString(dv[i]["LedgerPK"]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Left;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                                for (int cn = 0; cn < cbl_sem.Items.Count; cn++)
                                {
                                    col = 1;
                                    if (cbl_sem.Items[cn].Selected == true)
                                    {
                                        semcount++;
                                        col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                        //dt = dv.ToTable();
                                        //dt1 = dv1.ToTable();
                                        //dv1 = new DataView(dt1);
                                        ds.Tables[1].DefaultView.RowFilter = "FeeCategory='" + cbl_sem.Items[cn].Value + "' and HeaderFK ='" + Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"]) + "' and LedgerFK='" + Convert.ToString(dv[i]["LedgerPK"]) + "'";
                                        dv1 = ds.Tables[1].DefaultView;
                                        if (dv1.Count > 0)
                                        {
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb;
                                            if (Convert.ToString(dv1[0]["PayMode"]) == "1")
                                            {
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = "Regular";
                                            }
                                            if (Convert.ToString(dv1[0]["PayMode"]) == "2")
                                            {
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = "Monthwise";
                                            }
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Tag = Convert.ToString(dv1[0]["LedgerFK"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["FeeAmount"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag = Convert.ToString(dv1[0]["FeeAmountMonthly"]);
                                            if (Convert.ToString(dv1[0]["FeeAmount"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["FeeAmount"]);
                                                if (tothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                {
                                                    total = Convert.ToInt32(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                    total += getvalue;
                                                    tothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                    tothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(total));
                                                }
                                                else
                                                {
                                                    tothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                                }
                                            }
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                            if (Convert.ToString(dv1[0]["PayMode"]) == "1")
                                            {
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Locked = false;
                                            }
                                            if (Convert.ToString(dv1[0]["PayMode"]) == "2")
                                            {
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Locked = true;
                                            }

                                            # region Added by saranya on 19/03/2018 For Multiple Concession

                                            int noOfConcession = 0;
                                            noOfConcession = Convert.ToInt32(txtNoConcession.Text);

                                            if (noOfConcession == 0 || noOfConcession == 1)
                                            {

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductAmout"]);
                                                if (Convert.ToString(dv1[0]["DeductAmout"]).Trim() != "")
                                                {
                                                    double getvalue = Convert.ToDouble(dv1[0]["DeductAmout"]);
                                                    if (dedhash.ContainsKey(col))
                                                    {
                                                        dedtot = Convert.ToInt32(dedhash[col]);
                                                        dedtot += getvalue;
                                                        dedhash.Remove(col);
                                                        dedhash.Add(col, Convert.ToString(dedtot));
                                                    }
                                                    else
                                                    {
                                                        dedhash.Add(col, Convert.ToString(getvalue));
                                                    }
                                                }
                                                //dedtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                                //if (dedhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                //{
                                                //    dedhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                //}
                                                //dedhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(dedtot));
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                                string deductcode = Convert.ToString(dv1[0]["DeductReason"]);
                                                //string getreason = "";
                                                //if (deductcode.Trim() != "")
                                                //{
                                                //    getreason = d2.GetFunction("select TextVal from TextValTable where TextCriteria ='DedRe' and TextCode='" + deductcode + "' and college_code ='" + collegecode1 + "'");
                                                //}
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Value = deductcode;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            }
                                            if (noOfConcession == 2)
                                            {
                                                string deductcode = string.Empty;
                                                col++;
                                                //string colValueHash=Convert.ToString(col);

                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductAmount1"]);
                                                if (Convert.ToString(dv1[0]["DeductAmount1"]).Trim() != "")
                                                {
                                                    double getvalue = Convert.ToDouble(dv1[0]["DeductAmount1"]);
                                                    if (dedhash.ContainsKey(col))
                                                    {
                                                        dedtot = Convert.ToInt32(dedhash[col]);
                                                        dedtot += getvalue;
                                                        dedhash.Remove(col);
                                                        dedhash.Add(col, Convert.ToString(dedtot));
                                                    }
                                                    else
                                                    {
                                                        dedhash.Add(col, Convert.ToString(getvalue));
                                                    }
                                                }
                                                //dedtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                                //if (dedhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                //{
                                                //    dedhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                //}
                                                //dedhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(dedtot));
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                                deductcode = Convert.ToString(dv1[0]["DeductReason1"]);
                                                //string getreason = "";
                                                //if (deductcode.Trim() != "")
                                                //{
                                                //    getreason = d2.GetFunction("select TextVal from TextValTable where TextCriteria ='DedRe' and TextCode='" + deductcode + "' and college_code ='" + collegecode1 + "'");
                                                //}
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Value = deductcode;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductAmount2"]);
                                                if (Convert.ToString(dv1[0]["DeductAmount2"]).Trim() != "")
                                                {
                                                    double getvalue = Convert.ToDouble(dv1[0]["DeductAmount2"]);
                                                    if (dedhash.ContainsKey(col))
                                                    {
                                                        dedtot = Convert.ToInt32(dedhash[col]);
                                                        dedtot += getvalue;
                                                        dedhash.Remove(col);
                                                        dedhash.Add(col, Convert.ToString(dedtot));
                                                    }
                                                    else
                                                    {
                                                        dedhash.Add(col, Convert.ToString(getvalue));
                                                    }
                                                }
                                                //dedtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                                //if (dedhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                //{
                                                //    dedhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                //}
                                                //dedhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(dedtot));
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                                deductcode = Convert.ToString(dv1[0]["DeductReason2"]);
                                                //string getreason = "";
                                                //if (deductcode.Trim() != "")
                                                //{
                                                //    getreason = d2.GetFunction("select TextVal from TextValTable where TextCriteria ='DedRe' and TextCode='" + deductcode + "' and college_code ='" + collegecode1 + "'");
                                                //}
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Value = deductcode;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductAmout"]);
                                                if (Convert.ToString(dv1[0]["DeductAmout"]).Trim() != "")
                                                {
                                                    double getvalue = Convert.ToDouble(dv1[0]["DeductAmout"]);
                                                    if (dedhash.ContainsKey(col))
                                                    {
                                                        dedtot = Convert.ToInt32(dedhash[col]);
                                                        dedtot += getvalue;
                                                        dedhash.Remove(col);
                                                        dedhash.Add(col, Convert.ToString(dedtot));
                                                    }
                                                    else
                                                    {
                                                        dedhash.Add(col, Convert.ToString(getvalue));
                                                    }
                                                }
                                                //dedtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                                //if (dedhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                //{
                                                //    dedhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                //}
                                                //dedhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(dedtot));
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                                deductcode = Convert.ToString(dv1[0]["DeductReason"]);
                                                //string getreason = "";
                                                //if (deductcode.Trim() != "")
                                                //{
                                                //    getreason = d2.GetFunction("select TextVal from TextValTable where TextCriteria ='DedRe' and TextCode='" + deductcode + "' and college_code ='" + collegecode1 + "'");
                                                //}
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Value = deductcode;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                            }

                                            if (noOfConcession == 3)
                                            {
                                                string deductcode = string.Empty;
                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductAmount1"]);
                                                if (Convert.ToString(dv1[0]["DeductAmount1"]).Trim() != "")
                                                {
                                                    double getvalue = Convert.ToDouble(dv1[0]["DeductAmount1"]);
                                                    if (dedhash.ContainsKey(col))
                                                    {
                                                        dedtot = Convert.ToInt32(dedhash[col]);
                                                        dedtot += getvalue;
                                                        dedhash.Remove(col);
                                                        dedhash.Add(col, Convert.ToString(dedtot));
                                                    }
                                                    else
                                                    {
                                                        dedhash.Add(col, Convert.ToString(getvalue));
                                                    }
                                                }
                                                //dedtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                                //if (dedhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                //{
                                                //    dedhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                //}
                                                //dedhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(dedtot));
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                                deductcode = Convert.ToString(dv1[0]["DeductReason1"]);
                                                //string getreason = "";
                                                //if (deductcode.Trim() != "")
                                                //{
                                                //    getreason = d2.GetFunction("select TextVal from TextValTable where TextCriteria ='DedRe' and TextCode='" + deductcode + "' and college_code ='" + collegecode1 + "'");
                                                //}
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Value = deductcode;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductAmount2"]);
                                                if (Convert.ToString(dv1[0]["DeductAmount2"]).Trim() != "")
                                                {
                                                    double getvalue = Convert.ToDouble(dv1[0]["DeductAmount2"]);
                                                    if (dedhash.ContainsKey(col))
                                                    {
                                                        dedtot = Convert.ToInt32(dedhash[col]);
                                                        dedtot += getvalue;
                                                        dedhash.Remove(col);
                                                        dedhash.Add(col, Convert.ToString(dedtot));
                                                    }
                                                    else
                                                    {
                                                        dedhash.Add(col, Convert.ToString(getvalue));
                                                    }
                                                }
                                                //dedtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                                //if (dedhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                //{
                                                //    dedhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                //}
                                                //dedhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(dedtot));
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                                deductcode = Convert.ToString(dv1[0]["DeductReason2"]);
                                                //string getreason = "";
                                                //if (deductcode.Trim() != "")
                                                //{
                                                //    getreason = d2.GetFunction("select TextVal from TextValTable where TextCriteria ='DedRe' and TextCode='" + deductcode + "' and college_code ='" + collegecode1 + "'");
                                                //}
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Value = deductcode;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductAmount3"]);
                                                if (Convert.ToString(dv1[0]["DeductAmount3"]).Trim() != "")
                                                {
                                                    double getvalue = Convert.ToDouble(dv1[0]["DeductAmount3"]);
                                                    if (dedhash.ContainsKey(col))
                                                    {
                                                        dedtot = Convert.ToInt32(dedhash[col]);
                                                        dedtot += getvalue;
                                                        dedhash.Remove(col);
                                                        dedhash.Add(col, Convert.ToString(dedtot));
                                                    }
                                                    else
                                                    {
                                                        dedhash.Add(col, Convert.ToString(getvalue));
                                                    }
                                                }
                                                //dedtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                                //if (dedhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                //{
                                                //    dedhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                //}
                                                //dedhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(dedtot));
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                                deductcode = Convert.ToString(dv1[0]["DeductReason3"]);
                                                //string getreason = "";
                                                //if (deductcode.Trim() != "")
                                                //{
                                                //    getreason = d2.GetFunction("select TextVal from TextValTable where TextCriteria ='DedRe' and TextCode='" + deductcode + "' and college_code ='" + collegecode1 + "'");
                                                //}
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Value = deductcode;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductAmout"]);
                                                if (Convert.ToString(dv1[0]["DeductAmout"]).Trim() != "")
                                                {
                                                    double getvalue = Convert.ToDouble(dv1[0]["DeductAmout"]);
                                                    if (dedhash.ContainsKey(col))
                                                    {
                                                        dedtot = Convert.ToInt32(dedhash[col]);
                                                        dedtot += getvalue;
                                                        dedhash.Remove(col);
                                                        dedhash.Add(col, Convert.ToString(dedtot));
                                                    }
                                                    else
                                                    {
                                                        dedhash.Add(col, Convert.ToString(getvalue));
                                                    }
                                                }
                                                //dedtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                                //if (dedhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                //{
                                                //    dedhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                //}
                                                //dedhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(dedtot));
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                                deductcode = Convert.ToString(dv1[0]["DeductReason"]);
                                                //string getreason = "";
                                                //if (deductcode.Trim() != "")
                                                //{
                                                //    getreason = d2.GetFunction("select TextVal from TextValTable where TextCriteria ='DedRe' and TextCode='" + deductcode + "' and college_code ='" + collegecode1 + "'");
                                                //}
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Value = deductcode;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                            }
                                            #endregion

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["TotalAmount"]);
                                            if (Convert.ToString(dv1[0]["TotalAmount"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["TotalAmount"]);
                                                if (coltothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                {
                                                    coltot = Convert.ToInt32(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                    coltot += getvalue;
                                                    coltothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                    coltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(coltot));
                                                }
                                                else
                                                {
                                                    coltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                                }
                                            }
                                            //coltot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (coltothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            //{
                                            //    coltothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            //}
                                            //coltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(coltot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightgreen");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;



                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["RefundAmount"]);
                                            if (Convert.ToString(dv1[0]["RefundAmount"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["RefundAmount"]);
                                                if (refhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                {
                                                    reftot = Convert.ToInt32(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                    reftot += getvalue;
                                                    refhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                    refhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(reftot));
                                                }
                                                else
                                                {
                                                    refhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                                }
                                            }
                                            //reftot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (refhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            //{
                                            //    refhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            //}
                                            //refhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(reftot));

                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbSchType;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = "0";
                                            if (Convert.ToString("0").Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble("0");
                                                if (frmhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                {
                                                    frmtot = Convert.ToInt32(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                    frmtot += getvalue;
                                                    frmhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                    frmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(frmtot));
                                                }
                                                else
                                                {
                                                    frmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                                }
                                            }
                                            //frmtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (frmhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            //{
                                            //    frmhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            //}
                                            //frmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(frmtot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag = Convert.ToString(dv1[0]["PayStartDate"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            startdate = Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag);
                                            if (startdate.Trim() != "01/01/1900" && startdate.Trim() != "")
                                            {
                                                split = startdate.Split('/');
                                                day2 = split[0];
                                                mon2 = split[1];
                                                year2 = split[2];
                                            }
                                            else
                                            {
                                                day2 = "";
                                                mon2 = "";
                                                year2 = "";
                                            }

                                            col++;
                                            if (hsgetpay.ContainsValue(col))
                                            {
                                                FpSpread1.Sheets[0].Cells[0, col].CellType = cbday2;
                                                //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = day2;
                                                FpSpread1.Sheets[0].Cells[0, col].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[0, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[0, col].Font.Size = FontUnit.Medium;

                                                FpSpread1.Sheets[0].Cells[0, col + 1].CellType = cbmon2;
                                                FpSpread1.Sheets[0].Cells[0, col + 1].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[0, col + 1].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[0, col + 1].Font.Size = FontUnit.Medium;

                                                FpSpread1.Sheets[0].Cells[0, col + 2].CellType = cbyear2;
                                                FpSpread1.Sheets[0].Cells[0, col + 1].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[0, col + 1].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[0, col + 1].Font.Size = FontUnit.Medium;
                                            }

                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = day2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = mon2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = year2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["FineAmount"]);
                                            if (Convert.ToString(dv1[0]["FineAmount"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["FineAmount"]);
                                                if (finehash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                {
                                                    finetot = Convert.ToInt32(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                    finetot += getvalue;
                                                    finehash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                    finehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(finetot));
                                                }
                                                else
                                                {
                                                    finehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                                }
                                            }
                                            //finetot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (finehash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            //{
                                            //    finehash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            //}
                                            //finehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(finetot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag = Convert.ToString(dv1[0]["DueDate"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            duedate = Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag);
                                            if (duedate.Trim() != "01/01/1900" && duedate.Trim() != "")
                                            {
                                                split = duedate.Split('/');
                                                day1 = split[0];
                                                mon1 = split[1];
                                                year1 = split[2];
                                            }
                                            else
                                            {
                                                day1 = "";
                                                mon1 = "";
                                                year1 = "";
                                            }
                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = day1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = mon1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = year1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                        }
                                        else
                                        {
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            //=========Added by saranya on 19/03/2018==============//
                                            int noOfConcession = 0;
                                            noOfConcession = Convert.ToInt32(txtNoConcession.Text);

                                            if (noOfConcession == 0 || noOfConcession == 1)
                                            {

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                            }
                                            else
                                            {
                                                for (int con = 0; con < noOfConcession; con++)
                                                {
                                                    col++;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                    col++;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                                }
                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                            }
                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightgreen");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbSchType;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                            //col++;
                                            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbSchType;
                                            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            if (hsgetpay.ContainsValue(col))
                                            {
                                                FpSpread1.Sheets[0].Cells[0, col].CellType = cbcomday;
                                                //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = day2;
                                                FpSpread1.Sheets[0].Cells[0, col].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[0, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[0, col].Font.Size = FontUnit.Medium;
                                                FpSpread1.Sheets[0].Cells[0, col].Locked = false;

                                                FpSpread1.Sheets[0].Cells[0, col + 1].CellType = cbcommon;
                                                FpSpread1.Sheets[0].Cells[0, col + 1].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[0, col + 1].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[0, col + 1].Font.Size = FontUnit.Medium;
                                                FpSpread1.Sheets[0].Cells[0, col + 1].Locked = false;

                                                FpSpread1.Sheets[0].Cells[0, col + 2].CellType = cbcomyear;
                                                FpSpread1.Sheets[0].Cells[0, col + 2].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[0, col + 2].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[0, col + 2].Font.Size = FontUnit.Medium;
                                                FpSpread1.Sheets[0].Cells[0, col + 2].Locked = false;
                                            }
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                        }
                                    }
                                }
                            }
                            FpSpread1.Sheets[0].RowCount++;
                            divheight += 30;
                            if (!headertotal.ContainsKey(Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"])))
                            {
                                headertotal.Add(Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"]), FpSpread1.Sheets[0].RowCount - 1);
                                ViewState["headertotal"] = headertotal;
                            }
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Total";
                            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                            for (int cn = 0; cn < cbl_sem.Items.Count; cn++)
                            {
                                col = 1;
                                if (cbl_sem.Items[cn].Selected == true)
                                {
                                    //Addded by saranya on 21/03/2018 for multiple concession//
                                    int noOfconcession = 0;
                                    noOfconcession = Convert.ToInt32(txtNoConcession.Text);

                                    if (noOfconcession == 0 || noOfconcession == 1)
                                    {
                                        col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        col++;
                                        colindex = col;
                                        dedindex = col + 1;
                                        coltotindex = col + 3;
                                        refindex = col + 4;
                                        frmindex = col + 5;
                                        fineindex = col + 9;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, colindex].Text = Convert.ToString(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        string headertotalGrand = Convert.ToString(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        if (Convert.ToString(headertotalGrand).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(headertotalGrand);
                                            if (Grandtothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                totgrand = Convert.ToInt32(Grandtothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                totgrand += getvalue;
                                                Grandtothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                Grandtothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(totgrand));
                                            }
                                            else
                                            {
                                                Grandtothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }


                                        //totgrand += Convert.ToInt32(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, dedindex].Text = Convert.ToString(dedhash[dedindex]);

                                        string dedtotalgrand = Convert.ToString(dedhash[dedindex]);
                                        if (Convert.ToString(dedtotalgrand).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(dedtotalgrand);
                                            if (Granddedhash.ContainsKey(dedindex))
                                            {
                                                dedgrand = Convert.ToInt32(Granddedhash[dedindex]);
                                                dedgrand += getvalue;
                                                Granddedhash.Remove(dedindex);
                                                Granddedhash.Add(dedindex, Convert.ToString(dedgrand));
                                            }
                                            else
                                            {
                                                Granddedhash.Add(dedindex, Convert.ToString(getvalue));
                                            }
                                        }
                                        //dedgrand += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text));

                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, coltotindex].Text = Convert.ToString(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                        string tottotalgrand = Convert.ToString(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        if (Convert.ToString(tottotalgrand).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(tottotalgrand);
                                            if (Grandcoltothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                grandtot = Convert.ToInt32(Grandcoltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                grandtot += getvalue;
                                                Grandcoltothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                Grandcoltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(grandtot));
                                            }
                                            else
                                            {
                                                Grandcoltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }
                                        //grandtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 6].Text));

                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, refindex].Text = Convert.ToString(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                        string reftotalgrand = Convert.ToString(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        if (Convert.ToString(reftotalgrand).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(reftotalgrand);
                                            if (Grandrefhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                refundtot = Convert.ToInt32(Grandrefhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                refundtot += getvalue;
                                                Grandrefhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                Grandrefhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(refundtot));
                                            }
                                            else
                                            {
                                                Grandrefhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }
                                        // refundtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 7].Text));

                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, frmindex].Text = Convert.ToString(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                        string frmtotalgrand = Convert.ToString(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        if (Convert.ToString(frmtotalgrand).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(frmtotalgrand);
                                            if (Grandfrmhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                frmgovttot = Convert.ToInt32(Grandfrmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                frmgovttot += getvalue;
                                                Grandfrmhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                Grandfrmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(frmgovttot));
                                            }
                                            else
                                            {
                                                Grandfrmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }
                                        // frmgovttot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 8].Text));

                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, fineindex].Text = Convert.ToString(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                        string finetotalgrand = Convert.ToString(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        if (Convert.ToString(finetotalgrand).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(finetotalgrand);
                                            if (Grandfinehash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                finetotal = Convert.ToInt32(Grandfinehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                finetotal += getvalue;
                                                Grandfinehash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                Grandfinehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(finetotal));
                                            }
                                            else
                                            {
                                                Grandfinehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }
                                        //finetotal += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 12].Text));
                                    }
                                    if (noOfconcession == 2)
                                    {
                                        col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        col++;
                                        colindex = col;
                                        dedindex = col + 1;
                                        coltotindex = col + 7;
                                        refindex = col + 8;
                                        frmindex = col + 9;
                                        fineindex = col + 13;

                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, colindex].Text = Convert.ToString(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        string headertotalGrand = Convert.ToString(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        if (Convert.ToString(headertotalGrand).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(headertotalGrand);
                                            if (Grandtothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                totgrand = Convert.ToInt32(Grandtothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                totgrand += getvalue;
                                                Grandtothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                Grandtothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(totgrand));
                                            }
                                            else
                                            {
                                                Grandtothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }


                                        //totgrand += Convert.ToInt32(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                        for (int con = 0; con <= noOfconcession; con++)
                                        {
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, dedindex].Text = Convert.ToString(dedhash[dedindex]);

                                            string dedtotalgrand = Convert.ToString(dedhash[dedindex]);
                                            if (Convert.ToString(dedtotalgrand).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dedtotalgrand);
                                                if (Granddedhash.ContainsKey(dedindex))
                                                {
                                                    dedgrand = Convert.ToInt32(Granddedhash[dedindex]);
                                                    dedgrand += getvalue;
                                                    Granddedhash.Remove(dedindex);
                                                    Granddedhash.Add(dedindex, Convert.ToString(dedgrand));
                                                }
                                                else
                                                {
                                                    Granddedhash.Add(dedindex, Convert.ToString(getvalue));
                                                }
                                            }
                                            dedindex = dedindex + 2;
                                        }
                                        //dedgrand += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text));

                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, coltotindex].Text = Convert.ToString(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                        string tottotalgrand = Convert.ToString(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        if (Convert.ToString(tottotalgrand).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(tottotalgrand);
                                            if (Grandcoltothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                grandtot = Convert.ToInt32(Grandcoltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                grandtot += getvalue;
                                                Grandcoltothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                Grandcoltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(grandtot));
                                            }
                                            else
                                            {
                                                Grandcoltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }
                                        //grandtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 6].Text));

                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, refindex].Text = Convert.ToString(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                        string reftotalgrand = Convert.ToString(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        if (Convert.ToString(reftotalgrand).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(reftotalgrand);
                                            if (Grandrefhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                refundtot = Convert.ToInt32(Grandrefhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                refundtot += getvalue;
                                                Grandrefhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                Grandrefhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(refundtot));
                                            }
                                            else
                                            {
                                                Grandrefhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }
                                        // refundtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 7].Text));

                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, frmindex].Text = Convert.ToString(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                        string frmtotalgrand = Convert.ToString(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        if (Convert.ToString(frmtotalgrand).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(frmtotalgrand);
                                            if (Grandfrmhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                frmgovttot = Convert.ToInt32(Grandfrmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                frmgovttot += getvalue;
                                                Grandfrmhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                Grandfrmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(frmgovttot));
                                            }
                                            else
                                            {
                                                Grandfrmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }
                                        // frmgovttot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 8].Text));

                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, fineindex].Text = Convert.ToString(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                        string finetotalgrand = Convert.ToString(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        if (Convert.ToString(finetotalgrand).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(finetotalgrand);
                                            if (Grandfinehash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                finetotal = Convert.ToInt32(Grandfinehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                finetotal += getvalue;
                                                Grandfinehash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                Grandfinehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(finetotal));
                                            }
                                            else
                                            {
                                                Grandfinehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }
                                        //finetotal += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 12].Text));
                                    }
                                    if (noOfconcession == 3)
                                    {
                                        col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                        col++;
                                        colindex = col;
                                        dedindex = col + 1;
                                        coltotindex = col + 9;
                                        refindex = col + 10;
                                        frmindex = col + 11;
                                        fineindex = col + 15;

                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, colindex].Text = Convert.ToString(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        string headertotalGrand = Convert.ToString(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        if (Convert.ToString(headertotalGrand).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(headertotalGrand);
                                            if (Grandtothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                totgrand = Convert.ToInt32(Grandtothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                totgrand += getvalue;
                                                Grandtothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                Grandtothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(totgrand));
                                            }
                                            else
                                            {
                                                Grandtothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }

                                        for (int con = 0; con <= noOfconcession; con++)
                                        {
                                            //totgrand += Convert.ToInt32(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, dedindex].Text = Convert.ToString(dedhash[dedindex]);

                                            string dedtotalgrand = Convert.ToString(dedhash[dedindex]);
                                            if (Convert.ToString(dedtotalgrand).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dedtotalgrand);
                                                if (Granddedhash.ContainsKey(dedindex))
                                                {
                                                    dedgrand = Convert.ToInt32(Granddedhash[dedindex]);
                                                    dedgrand += getvalue;
                                                    Granddedhash.Remove(dedindex);
                                                    Granddedhash.Add(dedindex, Convert.ToString(dedgrand));
                                                }
                                                else
                                                {
                                                    Granddedhash.Add(dedindex, Convert.ToString(getvalue));
                                                }
                                            }
                                            dedindex = dedindex + 2;
                                            //dedgrand += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text));
                                        }
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, coltotindex].Text = Convert.ToString(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                        string tottotalgrand = Convert.ToString(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        if (Convert.ToString(tottotalgrand).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(tottotalgrand);
                                            if (Grandcoltothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                grandtot = Convert.ToInt32(Grandcoltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                grandtot += getvalue;
                                                Grandcoltothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                Grandcoltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(grandtot));
                                            }
                                            else
                                            {
                                                Grandcoltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }
                                        //grandtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 6].Text));

                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, refindex].Text = Convert.ToString(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                        string reftotalgrand = Convert.ToString(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        if (Convert.ToString(reftotalgrand).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(reftotalgrand);
                                            if (Grandrefhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                refundtot = Convert.ToInt32(Grandrefhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                refundtot += getvalue;
                                                Grandrefhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                Grandrefhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(refundtot));
                                            }
                                            else
                                            {
                                                Grandrefhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }
                                        // refundtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 7].Text));

                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, frmindex].Text = Convert.ToString(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                        string frmtotalgrand = Convert.ToString(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        if (Convert.ToString(frmtotalgrand).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(frmtotalgrand);
                                            if (Grandfrmhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                frmgovttot = Convert.ToInt32(Grandfrmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                frmgovttot += getvalue;
                                                Grandfrmhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                Grandfrmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(frmgovttot));
                                            }
                                            else
                                            {
                                                Grandfrmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }
                                        // frmgovttot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 8].Text));

                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, fineindex].Text = Convert.ToString(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                        string finetotalgrand = Convert.ToString(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        if (Convert.ToString(finetotalgrand).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(finetotalgrand);
                                            if (Grandfinehash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                finetotal = Convert.ToInt32(Grandfinehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                finetotal += getvalue;
                                                Grandfinehash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                Grandfinehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(finetotal));
                                            }
                                            else
                                            {
                                                Grandfinehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }
                                        //finetotal += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 12].Text));
                                    }

                                }
                            }
                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Right;
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;

                        }
                        FpSpread1.Sheets[0].RowCount++;
                        divheight += 30;
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Grand Total";
                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                        for (int cn = 0; cn < cbl_sem.Items.Count; cn++)
                        {
                            col = 1;
                            if (cbl_sem.Items[cn].Selected == true)
                            {
                                int noOfConcession = 0;
                                noOfConcession = Convert.ToInt32(txtNoConcession.Text);
                                if (noOfConcession == 0 | noOfConcession == 1)
                                {
                                    col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    col++;
                                    colindex = col;
                                    dedindex = col + 1;
                                    coltotindex = col + 3;
                                    refindex = col + 4;
                                    frmindex = col + 5;
                                    fineindex = col + 9;
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, colindex].Text = Convert.ToString(Grandtothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, dedindex].Text = Convert.ToString(Granddedhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, coltotindex].Text = Convert.ToString(Grandcoltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, refindex].Text = Convert.ToString(Grandrefhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, frmindex].Text = Convert.ToString(Grandfrmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, fineindex].Text = Convert.ToString(Grandfinehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                }
                                if (noOfConcession == 2)
                                {
                                    col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    col++;
                                    colindex = col;
                                    dedindex = col + 1;
                                    coltotindex = col + 7;
                                    refindex = col + 8;
                                    frmindex = col + 9;
                                    fineindex = col + 13;

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, colindex].Text = Convert.ToString(Grandtothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    for (int con = 0; con <= noOfConcession; con++)
                                    {
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, dedindex].Text = Convert.ToString(Granddedhash[dedindex]);
                                        dedindex = dedindex + 2;
                                    }
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, coltotindex].Text = Convert.ToString(Grandcoltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, refindex].Text = Convert.ToString(Grandrefhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, frmindex].Text = Convert.ToString(Grandfrmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, fineindex].Text = Convert.ToString(Grandfinehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                }
                                if (noOfConcession == 3)
                                {
                                    col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    col++;
                                    colindex = col;
                                    dedindex = col + 1;
                                    coltotindex = col + 9;
                                    refindex = col + 10;
                                    frmindex = col + 11;
                                    fineindex = col + 15;
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, colindex].Text = Convert.ToString(Grandtothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    for (int con = 0; con <= noOfConcession; con++)
                                    {
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, dedindex].Text = Convert.ToString(Granddedhash[dedindex]);
                                        dedindex = dedindex + 2;
                                    }
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, coltotindex].Text = Convert.ToString(Grandcoltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, refindex].Text = Convert.ToString(Grandrefhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, frmindex].Text = Convert.ToString(Grandfrmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, fineindex].Text = Convert.ToString(Grandfinehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                }

                            }
                        }
                        if (semcount == 0)
                        {
                            FpSpread1.Visible = false;
                            upd.Visible = false;
                            alertpopwindow.Visible = true;
                            lblalerterr.Visible = true;
                            if (lbl_sem.Text == "Semester")
                            {
                                lblalerterr.Text = "Please select any one semester!";
                            }
                            if (lbl_sem.Text == "Year")
                            {
                                lblalerterr.Text = "Please select any one Year!";
                            }
                        }
                        else
                        {
                            upd.Visible = true;
                            FpSpread1.Visible = true;
                        }
                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                        Grandtotal.Add(Convert.ToString("GrandTotal"), FpSpread1.Sheets[0].RowCount - 1);
                        ViewState["Grandtotal"] = Grandtotal;
                    }
                    FpSpread1.Sheets[0].PageSize = FpSpread1.Sheets[0].RowCount;
                    Feedetails.Visible = true;
                    FpSpread1.Visible = true;
                    //div2.Visible = true;
                    Div3.Visible = true;
                    btnok1.Visible = true;
                    FpSpread1.Width = 1000;
                    FpSpread1.Height = Convert.ToInt32(divheight + 100);
                    Feedetails.Visible = true;
                    studentdetail.Visible = false;
                    lblerr1.Visible = false;
                }
                #endregion

                #region Individual Admitted
                if (ddl_type.SelectedItem.Text == "Individual(Admitted)")
                {
                    // loadcolumns();
                    FarPoint.Web.Spread.StyleInfo darknewstyle = new FarPoint.Web.Spread.StyleInfo();
                    darknewstyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#0CA6CA");
                    darknewstyle.ForeColor = System.Drawing.Color.Black;
                    darknewstyle.HorizontalAlign = HorizontalAlign.Center;
                    FpSpreadstud.ActiveSheetView.ColumnHeader.DefaultStyle = darknewstyle;
                    FpSpreadstud.Sheets[0].ColumnCount = 12;
                    FpSpreadstud.Sheets[0].RowCount = 1;
                    FpSpreadstud.Sheets[0].RowHeader.Visible = false;
                    FpSpreadstud.CommandBar.Visible = false;
                    FpSpreadstud.Sheets[0].AutoPostBack = false;

                    FarPoint.Web.Spread.CheckBoxCellType cball = new FarPoint.Web.Spread.CheckBoxCellType();
                    cball.AutoPostBack = true;

                    selquery = "select headerpk,headername,ledgerpk,ledgername from FM_HeaderMaster m,FM_LedgerMaster l where m.HeaderPK = l.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure') and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "') order by len(isnull(l.priority,1000)) , l.priority asc ";
                    selquery = selquery + " select distinct headerpk,headername from FM_HeaderMaster m,FM_LedgerMaster l where m.HeaderPK = l.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure') and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "')";

                    DataSet dnewset = new DataSet();
                    dnewset.Clear();
                    dnewset = d2.select_method_wo_parameter(selquery, "Text");

                    if (txt_roll.Text.Trim() != "")
                    {

                        lnkview.Visible = false;
                        loadstuenddetails();
                    }
                    else
                    {
                        loadcolumns();
                        RollAndRegSettings();
                        lnkview.Visible = true;
                        selquery = "SELECT r.App_NO,Roll_No,r.roll_admit,R.Stud_Name,(C.Course_Name+'-'+D.Dept_Name) as Department,Reg_no, A.parent_name, R.Current_Semester,(select TextVal from TextValTable where TextCode=A.seattype and TextCriteria='seat' ) as StType, R.Stud_Type,r.CC,r.DelFlag  FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE A.app_no = r.App_No and R.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code ";

                        if (type.Trim() != "" && txt_stream.Enabled)
                        {
                            selquery = selquery + " and type in('" + type + "')";
                        }

                        if (edulevel.Trim() != "")
                        {
                            selquery = selquery + " and Edu_Level in('" + edulevel + "')";
                        }

                        if (mode.Trim() != "")
                        {
                            selquery = selquery + " and R.mode in('" + mode + "')";
                        }

                        if (stutype.Trim() != "")
                        {
                            selquery = selquery + " and r.Stud_Type in('" + stutype + "')";
                        }

                        if (seattype.Trim() != "")
                        {
                            selquery = selquery + " and a.seattype in('" + seattype + "')";
                        }


                        if (Quota.Trim() != "")//added by abarna 
                        {
                            //string quotavalue = getCblSelectedText(cblQuota);

                            string quotavalue = getCblSelectedValue(cblQuota);
                            selquery = selquery + " and a.quota in('" + quotavalue + "')";
                        }


                        if (batchyear.Trim() != "")
                        {
                            selquery = selquery + " and r.batch_year in('" + batchyear + "')";
                        }

                        if (course.Trim() != "")
                        {
                            selquery = selquery + " and g.Course_Id in('" + course + "')";
                        }

                        if (degreecode.Trim() != "")
                        {
                            selquery = selquery + " and g.Degree_Code in('" + degreecode + "')";
                        }

                        selquery = selquery + " and isconfirm = 1";
                        if (ddlsearch.SelectedIndex == 1)
                        {
                            selquery = selquery + " and A.first_graduate=1 ";
                        }
                        if (ddlsearch.SelectedIndex == 2)
                        {
                            selquery = selquery + " and A.tutionfee_waiver=1";
                        }
                        if (ddlsearch.SelectedIndex == 3)
                        {
                            selquery = selquery + " and isnull(r.Post_Matric_Scholarship,'0')='1'";
                        }
                        if (ddlsearch.SelectedIndex > 0)//added by  abarna 22.02.2018
                        {

                            selquery = selquery + " and A.scholarship_category in('" + scholar + "')";
                        }
                        selquery = selquery + " and admission_status = 1and Exam_Flag <>'DEBAR' ";


                        if (dirAccess.selectScalarInt("select LinkValue from New_InsSettings where LinkName='IncludeDiscontinuedInJournal' and user_code ='" + usercode + "'  ") == 0)//and college_code ='" + collegecode1 + "'
                        {
                            selquery += "  and DelFlag =0 ";
                        }

                        if (dirAccess.selectScalarInt("select LinkValue from New_InsSettings where LinkName='IncludeCompletedInJournal' and user_code ='" + usercode + "'  ") == 0)//and college_code ='" + collegecode1 + "'
                        {
                            selquery += "  and CC=0 ";
                        }

                        if (community.Trim() != "")
                        {
                            selquery = selquery + "  and A.community in('" + community + "')";
                        }
                        if (religion.Trim() != "")
                        {
                            selquery = selquery + "  and A.religion in('" + religion + "')";
                        }
                        if (!string.IsNullOrEmpty(stateCode))
                        {
                            selquery += " and a.parent_statep in('" + stateCode + "')";
                        }

                        if (getDisable() != string.Empty)
                            selquery += getDisable();
                        selquery += strorderby;

                        ds.Clear();
                        ds = d2.select_method_wo_parameter(selquery, "Text");
                        double divheight = 0;
                        if (ds.Tables.Count > 0)
                        {
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                FarPoint.Web.Spread.StyleInfo style5 = new FarPoint.Web.Spread.StyleInfo();
                                style5.Font.Size = 13;
                                style5.Font.Name = "Book Antiqua";
                                style5.Font.Bold = true;
                                style5.HorizontalAlign = HorizontalAlign.Center;
                                style5.ForeColor = System.Drawing.Color.Black;
                                style5.BackColor = System.Drawing.Color.AliceBlue;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[0].Width = 50;
                                FpSpreadstud.Columns[0].Locked = true;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";

                                FpSpreadstud.Sheets[0].Cells[0, 1].CellType = cball;
                                FpSpreadstud.Sheets[0].Cells[0, 1].Value = 0;
                                FpSpreadstud.Sheets[0].Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[1].Width = 50;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Roll Number";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[2].Width = 100;
                                FpSpreadstud.Columns[2].Locked = true;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Reg Number";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[3].Width = 100;
                                FpSpreadstud.Columns[3].Locked = true;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Admission No";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 4].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[4].Width = 100;
                                FpSpreadstud.Columns[4].Locked = true;

                                //if (rbl_rollno.SelectedItem.Text == "Roll No" && rbl_rollno.SelectedIndex == 0)
                                //{
                                //    FpSpreadstud.Columns[2].Visible = true;
                                //    FpSpreadstud.Columns[3].Visible = false;
                                //}
                                //if (rbl_rollno.SelectedItem.Text == "Reg No" && rbl_rollno.SelectedIndex == 1)
                                //{
                                //    FpSpreadstud.Columns[2].Visible = false;
                                //    FpSpreadstud.Columns[3].Visible = true;
                                //}

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Student Name";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 5].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 5].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 5].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 5].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[5].Width = 150;
                                FpSpreadstud.Columns[5].Locked = true;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Department";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 6].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 6].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 6].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 6].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[6].Width = 200;
                                FpSpreadstud.Columns[6].Locked = true;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 7].Text = "Semester";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 7].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 7].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 7].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 7].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[7].Width = 80;
                                FpSpreadstud.Columns[7].Locked = true;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 8].Text = "Year";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 8].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 8].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 8].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 8].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[8].Width = 50;
                                FpSpreadstud.Columns[8].Locked = true;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 9].Text = "FatherName";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 9].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 9].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 9].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 9].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[9].Width = 200;
                                FpSpreadstud.Columns[9].Locked = true;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 10].Text = "SeatType";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 10].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 10].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 10].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 10].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[10].Width = 80;
                                FpSpreadstud.Columns[10].Locked = true;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 11].Text = "Belongs";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 11].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 11].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 11].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 11].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[11].Width = 100;
                                FpSpreadstud.Columns[11].Locked = true;

                                spreadColumnVisible();
                                FarPoint.Web.Spread.TextCellType txt = new FarPoint.Web.Spread.TextCellType();

                                for (int row = 0; row < ds.Tables[0].Rows.Count; row++)
                                {
                                    FpSpreadstud.Sheets[0].RowCount++;
                                    divheight += 7;

                                    string ccValue = Convert.ToString(ds.Tables[0].Rows[row]["CC"]).Trim();//Course Completed
                                    string delflagValue = Convert.ToString(ds.Tables[0].Rows[row]["DelFlag"]).Trim();//discontinue

                                    if (delflagValue == "1" || delflagValue.ToLower() == "true")
                                    {
                                        FpSpreadstud.Sheets[0].Rows[FpSpreadstud.Sheets[0].RowCount - 1].BackColor = Color.Pink;
                                    }
                                    else if (ccValue == "1" || ccValue.ToLower() == "true")
                                    {
                                        FpSpreadstud.Sheets[0].Rows[FpSpreadstud.Sheets[0].RowCount - 1].BackColor = Color.Wheat;
                                    }
                                    else
                                    {
                                        FpSpreadstud.Sheets[0].Rows[FpSpreadstud.Sheets[0].RowCount - 1].BackColor = Color.WhiteSmoke;
                                    }

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(row + 1);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(ds.Tables[0].Rows[row]["App_NO"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";

                                    FarPoint.Web.Spread.CheckBoxCellType check = new FarPoint.Web.Spread.CheckBoxCellType();
                                    check.AutoPostBack = false;

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 1].CellType = check;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(ds.Tables[0].Rows[row]["Roll_No"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 2].CellType = txt;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 2].Tag = Convert.ToString(ds.Tables[0].Rows[row]["App_NO"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Left;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(ds.Tables[0].Rows[row]["Reg_no"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 3].CellType = txt;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(ds.Tables[0].Rows[row]["roll_admit"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 4].CellType = txt;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Left;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 4].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 4].Font.Name = "Book Antiqua";



                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 5].Text = Convert.ToString(ds.Tables[0].Rows[row]["Stud_Name"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 5].HorizontalAlign = HorizontalAlign.Left;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 5].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 5].Font.Name = "Book Antiqua";

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 6].Text = Convert.ToString(ds.Tables[0].Rows[row]["Department"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 6].HorizontalAlign = HorizontalAlign.Left;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 6].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 6].Font.Name = "Book Antiqua";

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 7].Text = Convert.ToString(ds.Tables[0].Rows[row]["Current_Semester"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 7].HorizontalAlign = HorizontalAlign.Center;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 7].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 7].Font.Name = "Book Antiqua";

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 8].Text = reuse.returnYearforSem(Convert.ToString(ds.Tables[0].Rows[row]["Current_Semester"]));
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 8].HorizontalAlign = HorizontalAlign.Center;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 8].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 8].Font.Name = "Book Antiqua";

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 9].Text = Convert.ToString(ds.Tables[0].Rows[row]["parent_name"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 9].HorizontalAlign = HorizontalAlign.Left;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 9].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 9].Font.Name = "Book Antiqua";

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 10].Text = Convert.ToString(ds.Tables[0].Rows[row]["StType"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 10].HorizontalAlign = HorizontalAlign.Left;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 10].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 10].Font.Name = "Book Antiqua";

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 11].Text = Convert.ToString(ds.Tables[0].Rows[row]["stud_type"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 11].HorizontalAlign = HorizontalAlign.Left;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 11].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 11].Font.Name = "Book Antiqua";

                                }
                                FpSpread1.Visible = false;
                                //popper1.Visible = false;
                                //div2.Visible = true;
                                lblerr1.Visible = false;
                                Div3.Visible = true;
                                btnok1.Visible = true;
                                FpSpreadstud.Visible = true;
                                FpSpreadstud.Sheets[0].PageSize = FpSpreadstud.Sheets[0].RowCount;
                                FpSpreadstud.Width = 800;
                                FpSpreadstud.Height = 400;
                                FpSpreadstud.Sheets[0].SpanModel.Add(0, 2, 1, 4);
                                FpSpreadstud.Sheets[0].FrozenRowCount = 1;
                                FpSpreadstud.SaveChanges();
                                studentdetail.Visible = true;
                            }
                        }
                        if (dnewset.Tables[0].Rows.Count > 0)
                        {
                            int sno = 0;
                            for (int ik = 0; ik < dnewset.Tables[1].Rows.Count; ik++)
                            {
                                FpSpread1.Sheets[0].RowCount++;
                                divheight += 7;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(dnewset.Tables[1].Rows[ik]["HeaderName"]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);

                                dnewset.Tables[0].DefaultView.RowFilter = "HeaderPK='" + Convert.ToString(dnewset.Tables[1].Rows[ik]["HeaderPK"]) + "'";
                                dv = dnewset.Tables[0].DefaultView;
                                for (i = 0; i < dv.Count; i++)
                                {
                                    FpSpread1.Sheets[0].RowCount++;
                                    divheight += 7;
                                    sno++;
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(sno);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(dnewset.Tables[1].Rows[ik]["HeaderPK"]);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = Convert.ToString(dv[i]["LedgerName"]);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Tag = Convert.ToString(dv[i]["LedgerPK"]);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Left;
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                                    for (int cn = 0; cn < cbl_sem.Items.Count; cn++)
                                    {
                                        col = 1;
                                        if (cbl_sem.Items[cn].Selected == true)
                                        {
                                            col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            //=============Added By saranya on 21/03/2018==========//
                                            int noOfConcession = 0;
                                            noOfConcession = Convert.ToInt32(txtNoConcession.Text);
                                            if (noOfConcession == 0 || noOfConcession == 1)
                                            {
                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                            }
                                            if (noOfConcession == 2 || noOfConcession == 3)
                                            {
                                                for (int con = 0; con <= noOfConcession; con++)
                                                {
                                                    col++;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                    col++;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                                }
                                            }
                                            //=============================================================================//

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightgreen");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbSchType;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            if (hsgetpay.ContainsValue(col))
                                            {
                                                FpSpread1.Sheets[0].Cells[0, col].CellType = cbcomday;
                                                //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = day2;
                                                FpSpread1.Sheets[0].Cells[0, col].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[0, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[0, col].Font.Size = FontUnit.Medium;
                                                FpSpread1.Sheets[0].Cells[0, col].Locked = false;

                                                FpSpread1.Sheets[0].Cells[0, col + 1].CellType = cbcommon;
                                                FpSpread1.Sheets[0].Cells[0, col + 1].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[0, col + 1].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[0, col + 1].Font.Size = FontUnit.Medium;
                                                FpSpread1.Sheets[0].Cells[0, col + 1].Locked = false;

                                                FpSpread1.Sheets[0].Cells[0, col + 2].CellType = cbcomyear;
                                                FpSpread1.Sheets[0].Cells[0, col + 2].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[0, col + 2].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[0, col + 2].Font.Size = FontUnit.Medium;
                                                FpSpread1.Sheets[0].Cells[0, col + 2].Locked = false;
                                            }
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        }
                                    }
                                }
                                FpSpread1.Sheets[0].RowCount++;
                                divheight += 7;
                                if (!headertotal.ContainsKey(Convert.ToString(dnewset.Tables[1].Rows[ik]["HeaderPK"])))
                                {
                                    headertotal.Add(Convert.ToString(dnewset.Tables[1].Rows[ik]["HeaderPK"]), FpSpread1.Sheets[0].RowCount - 1);
                                    ViewState["headertotal"] = headertotal;
                                }
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Total";
                                FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                                FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;

                            }
                            if (semcount == 0)
                            {
                                FpSpread1.Visible = false;
                                //popper1.Visible = false;
                                upd.Visible = false;
                                alertpopwindow.Visible = true;
                                lblalerterr.Visible = true;
                                if (lbl_sem.Text == "Semester")
                                {
                                    lblalerterr.Text = "Please select any one semester!";
                                }
                                if (lbl_sem.Text == "Year")
                                {
                                    lblalerterr.Text = "Please select any one Year!";
                                }
                            }
                            else
                            {
                                upd.Visible = true;
                                FpSpread1.Visible = true;
                                //popper1.Visible = true;
                            }
                            FpSpread1.Sheets[0].RowCount++;
                            divheight += 7;
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Grand Total";
                            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                            Grandtotal.Add(Convert.ToString("GrandTotal"), FpSpread1.Sheets[0].RowCount - 1);
                            ViewState["Grandtotal"] = Grandtotal;
                            FpSpread1.Sheets[0].PageSize = FpSpread1.Sheets[0].RowCount;
                            if (dnewset.Tables[0].Rows.Count > 0) // jairam Modify 29-06-2016
                            {
                                FpSpread1.Visible = true;
                                FpSpread1.Width = 1000;
                                FpSpread1.Height = Convert.ToInt32(divheight + 300);
                                Feedetails.Visible = true;
                                studentdetail.Visible = false;
                                lblerr1.Visible = false;
                            }
                            else
                            {
                                FpSpreadstud.Visible = false;
                                Feedetails.Visible = true;
                                FpSpread1.Visible = true;
                                FpSpread1.Width = 600;
                                //  FpSpread1.Height = 400;
                                //div2.Visible = false;
                                lblerr1.Visible = true;
                                lblerr1.Text = "There are no students available!";
                                Div3.Visible = false;
                                btnok1.Visible = false;
                                studentdetail.Visible = true;
                            }
                        }
                    }
                }
                #endregion

                #region Individual Applied
                if (ddl_type.SelectedItem.Text == "Individual(Applied)")
                {
                    int divheight = 0;
                    FarPoint.Web.Spread.StyleInfo darknewstyle = new FarPoint.Web.Spread.StyleInfo();
                    darknewstyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#0CA6CA");
                    darknewstyle.ForeColor = System.Drawing.Color.Black;
                    darknewstyle.HorizontalAlign = HorizontalAlign.Center;
                    FpSpreadstud.ActiveSheetView.ColumnHeader.DefaultStyle = darknewstyle;
                    FpSpreadstud.Sheets[0].ColumnCount = 10;
                    FpSpreadstud.Sheets[0].RowCount = 1;
                    FpSpreadstud.Sheets[0].RowHeader.Visible = false;
                    FpSpreadstud.CommandBar.Visible = false;
                    FpSpreadstud.Sheets[0].AutoPostBack = false;



                    selquery = "select headerpk,headername,ledgerpk,ledgername from FM_HeaderMaster m,FM_LedgerMaster l where m.HeaderPK = l.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure') and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "') order by len(isnull(l.priority,1000)) , l.priority asc ";
                    selquery = selquery + " select distinct headerpk,headername from FM_HeaderMaster m,FM_LedgerMaster l where m.HeaderPK = l.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure') and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "')";

                    DataSet dnewset = new DataSet();
                    dnewset.Clear();
                    dnewset = d2.select_method_wo_parameter(selquery, "Text");

                    if (txt_roll.Text.Trim() != "")
                    {
                        loadcolumns();
                        lnkview.Visible = false;
                        loadstuenddetails();
                    }
                    else
                    {
                        loadcolumns();
                        //string quotavalue = getCblSelectedText(cblQuota);
                        string quotavalue = getCblSelectedValue(cblQuota);
                        byte studAppSHrtAdm = StudentAppliedShorlistAdmit();
                        string admStudFilter = "";
                        switch (studAppSHrtAdm)
                        {
                            case 0:
                                admStudFilter = " and a.isconfirm=1  and isnull(a.selection_status,'0')='0' and isnull(admission_status,'0')='0'  and a.app_no not in (select app_no from registration where Degree_Code in('" + degreecode + "')  and batch_year in('" + batchyear + "'))";
                                break;
                            case 1:
                                admStudFilter = " and a.isconfirm=1 and isnull(a.selection_status,'0')='1' and isnull(admission_status,'0')='0'  and a.app_no not in (select app_no from registration where Degree_Code in('" + degreecode + "')  and batch_year in('" + batchyear + "'))";
                                break;
                            case 2:
                                admStudFilter = " and a.isconfirm=1 and isnull(a.selection_status,'0')='1' and isnull(admission_status,'0')='1' and a.app_no not in (select app_no from registration where Degree_Code in('" + degreecode + "')  and batch_year in('" + batchyear + "'))";
                                break;
                        }
                        selquery = "SELECT a.App_NO,a.app_formno,a.Stud_Name,'' Roll_No,(C.Course_Name+'-'+D.Dept_Name) as Department,A.parent_name,a.current_semester,(select TextVal from TextValTable where TextCode=A.seattype and TextCriteria='seat' ) as StType, a.Stud_Type FROM Applyn A,Degree G,Course C,Department D WHERE A.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code " + admStudFilter + "";
                        if (txt_stream.Enabled && type.Trim() != "")
                        {
                            selquery += "  and type in('" + type + "') ";
                        }

                        if (edulevel.Trim() != "")
                        {
                            selquery = selquery + " and Edu_Level in('" + edulevel + "')";
                        }

                        if (mode.Trim() != "")
                        {
                            selquery = selquery + " and a.mode in('" + mode + "')";
                        }

                        if (stutype.Trim() != "")
                        {
                            selquery = selquery + " and a.Stud_Type in('" + stutype + "')";
                        }

                        if (seattype.Trim() != "")
                        {
                            selquery = selquery + " and a.seattype in('" + seattype + "')";
                        }
                        if (Quota.Trim() != "")//added by abarna 
                        {
                            selquery = selquery + " and a.quota in('" + quotavalue + "')";
                        }

                        if (batchyear.Trim() != "")
                        {
                            selquery = selquery + " and a.batch_year in('" + batchyear + "')";
                        }

                        if (course.Trim() != "")
                        {
                            selquery = selquery + " and g.Course_Id in('" + course + "')";
                        }

                        if (degreecode.Trim() != "")
                        {
                            selquery = selquery + " and g.Degree_Code in('" + degreecode + "')";
                        }

                        selquery = selquery + " and isconfirm = 1";
                        if (ddlsearch.SelectedIndex == 1)
                        {
                            selquery = selquery + " and A.first_graduate=1 ";
                        }
                        if (ddlsearch.SelectedIndex == 2)
                        {
                            selquery = selquery + " and A.tutionfee_waiver=1";
                        }
                        //if (ddlsearch.SelectedIndex == 3)
                        //{
                        //    selquery = selquery + " and R.isnull(Post_Matric_Scholarship,'0')='1'";
                        //}
                        if (community.Trim() != "")
                        {
                            selquery = selquery + "  and A.community in('" + community + "')";
                        }
                        if (religion.Trim() != "")
                        {
                            selquery = selquery + "  and A.religion in('" + religion + "')";
                        }
                        if (!string.IsNullOrEmpty(stateCode))
                        {
                            selquery += " and a.parent_statep in('" + stateCode + "')";
                        }
                        if (getDisable() != string.Empty)
                            selquery += getDisable();
                        selquery += " ORDER BY a.app_formno";
                        ds.Clear();
                        ds = d2.select_method_wo_parameter(selquery, "Text");
                        if (ds.Tables.Count > 0)
                        {
                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                FarPoint.Web.Spread.StyleInfo style5 = new FarPoint.Web.Spread.StyleInfo();
                                style5.Font.Size = 13;
                                style5.Font.Name = "Book Antiqua";
                                style5.Font.Bold = true;
                                style5.HorizontalAlign = HorizontalAlign.Center;
                                style5.ForeColor = System.Drawing.Color.Black;
                                style5.BackColor = System.Drawing.Color.AliceBlue;
                                FarPoint.Web.Spread.CheckBoxCellType cball = new FarPoint.Web.Spread.CheckBoxCellType();
                                cball.AutoPostBack = true;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[0].Width = 50;
                                FpSpreadstud.Columns[0].Locked = true;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";

                                FpSpreadstud.Sheets[0].Cells[0, 1].CellType = cball;
                                FpSpreadstud.Sheets[0].Cells[0, 1].Value = 0;
                                FpSpreadstud.Sheets[0].Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[1].Width = 50;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 2].Text = "AppForm No";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[2].Width = 100;
                                FpSpreadstud.Columns[2].Locked = true;

                                //FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Reg Number";
                                //FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
                                //FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
                                //FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
                                //FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
                                //FpSpreadstud.Columns[3].Width = 100;
                                //FpSpreadstud.Columns[3].Locked = true;

                                //if (rbl_rollno.SelectedItem.Text == "Roll No" && rbl_rollno.SelectedIndex == 0)
                                //{
                                //    FpSpreadstud.Columns[2].Visible = true;
                                //    FpSpreadstud.Columns[3].Visible = false;
                                //}
                                //if (rbl_rollno.SelectedItem.Text == "Reg No" && rbl_rollno.SelectedIndex == 1)
                                //{
                                //    FpSpreadstud.Columns[2].Visible = false;
                                //    FpSpreadstud.Columns[3].Visible = true;
                                //}

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Student Name";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[3].Width = 150;
                                FpSpreadstud.Columns[3].Locked = true;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Department";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 4].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 4].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 4].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 4].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[4].Width = 200;
                                FpSpreadstud.Columns[4].Locked = true;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 5].Text = "Semester";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 5].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 5].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 5].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 5].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[5].Width = 80;
                                FpSpreadstud.Columns[5].Locked = true;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 6].Text = "Year";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 6].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 6].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 6].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 6].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[6].Width = 50;
                                FpSpreadstud.Columns[6].Locked = true;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 7].Text = "FatherName";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 7].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 7].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 7].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 7].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[7].Width = 200;
                                FpSpreadstud.Columns[7].Locked = true;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 8].Text = "SeatType";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 8].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 8].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 8].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 8].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[8].Width = 80;
                                FpSpreadstud.Columns[8].Locked = true;

                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 9].Text = "Belongs";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 9].Font.Bold = true;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 9].Font.Name = "Book Antiqua";
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 9].Font.Size = FontUnit.Medium;
                                FpSpreadstud.Sheets[0].ColumnHeader.Cells[0, 9].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud.Columns[9].Width = 100;
                                FpSpreadstud.Columns[9].Locked = true;


                                FarPoint.Web.Spread.TextCellType txt = new FarPoint.Web.Spread.TextCellType();

                                for (int row = 0; row < ds.Tables[0].Rows.Count; row++)
                                {
                                    FpSpreadstud.Sheets[0].RowCount++;
                                    divheight += 7;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(row + 1);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(ds.Tables[0].Rows[row]["App_NO"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";

                                    FarPoint.Web.Spread.CheckBoxCellType check = new FarPoint.Web.Spread.CheckBoxCellType();
                                    check.AutoPostBack = false;

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 1].CellType = check;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(ds.Tables[0].Rows[row]["app_formno"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 2].CellType = txt;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 2].Tag = Convert.ToString(ds.Tables[0].Rows[row]["App_NO"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Left;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";

                                    //FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(ds.Tables[0].Rows[row]["Reg_no"]);
                                    //FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;
                                    //FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Small;
                                    //FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(ds.Tables[0].Rows[row]["Stud_Name"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(ds.Tables[0].Rows[row]["Department"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Left;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 4].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 4].Font.Name = "Book Antiqua";

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 5].Text = Convert.ToString(ds.Tables[0].Rows[row]["Current_Semester"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 5].HorizontalAlign = HorizontalAlign.Center;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 5].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 5].Font.Name = "Book Antiqua";

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 6].Text = reuse.returnYearforSem(Convert.ToString(ds.Tables[0].Rows[row]["Current_Semester"]));
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 6].HorizontalAlign = HorizontalAlign.Center;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 6].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 6].Font.Name = "Book Antiqua";

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 7].Text = Convert.ToString(ds.Tables[0].Rows[row]["parent_name"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 7].HorizontalAlign = HorizontalAlign.Left;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 7].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 7].Font.Name = "Book Antiqua";

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 8].Text = Convert.ToString(ds.Tables[0].Rows[row]["StType"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 8].HorizontalAlign = HorizontalAlign.Left;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 8].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 8].Font.Name = "Book Antiqua";

                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 9].Text = Convert.ToString(ds.Tables[0].Rows[row]["stud_type"]);
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 9].HorizontalAlign = HorizontalAlign.Left;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 9].Font.Size = FontUnit.Small;
                                    FpSpreadstud.Sheets[0].Cells[FpSpreadstud.Sheets[0].RowCount - 1, 9].Font.Name = "Book Antiqua";

                                }
                                FpSpread1.Visible = false;
                                //popper1.Visible = false;
                                //div2.Visible = true;
                                lblerr1.Visible = false;
                                Div3.Visible = true;
                                btnok1.Visible = true;
                                FpSpreadstud.Visible = true;
                                FpSpreadstud.Sheets[0].PageSize = FpSpreadstud.Sheets[0].RowCount;
                                FpSpreadstud.Width = 800;
                                FpSpreadstud.Height = 400;
                                FpSpreadstud.Sheets[0].SpanModel.Add(0, 2, 1, 4);
                                FpSpreadstud.Sheets[0].FrozenRowCount = 1;
                                studentdetail.Visible = true;
                            }
                        }
                        if (dnewset.Tables[0].Rows.Count > 0)
                        {
                            int sno = 0;
                            for (int ik = 0; ik < dnewset.Tables[1].Rows.Count; ik++)
                            {
                                FpSpread1.Sheets[0].RowCount++;
                                divheight += 7;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(dnewset.Tables[1].Rows[ik]["HeaderName"]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);

                                dnewset.Tables[0].DefaultView.RowFilter = "HeaderPK='" + Convert.ToString(dnewset.Tables[1].Rows[ik]["HeaderPK"]) + "'";
                                dv = dnewset.Tables[0].DefaultView;
                                for (i = 0; i < dv.Count; i++)
                                {
                                    FpSpread1.Sheets[0].RowCount++;
                                    divheight += 7;
                                    sno++;
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(sno);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(dnewset.Tables[1].Rows[ik]["HeaderPK"]);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = Convert.ToString(dv[i]["LedgerName"]);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Tag = Convert.ToString(dv[i]["LedgerPK"]);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Left;
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                                    for (int cn = 0; cn < cbl_sem.Items.Count; cn++)
                                    {
                                        col = 1;
                                        if (cbl_sem.Items[cn].Selected == true)
                                        {
                                            col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            //=============Added by saranya on 21/03/2018============//
                                            int NoOfConcession = 0;
                                            NoOfConcession = Convert.ToInt32(txtNoConcession.Text);
                                            if (NoOfConcession == 0 || NoOfConcession == 1)
                                            {
                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                            }
                                            if (NoOfConcession == 2 || NoOfConcession == 3)
                                            {
                                                for (int con = 0; con <= NoOfConcession; con++)
                                                {
                                                    col++;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                    col++;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                                }
                                            }
                                            //===============================================================================//

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightgreen");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbSchType;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            if (hsgetpay.ContainsValue(col))
                                            {
                                                FpSpread1.Sheets[0].Cells[0, col].CellType = cbcomday;
                                                //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = day2;
                                                FpSpread1.Sheets[0].Cells[0, col].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[0, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[0, col].Font.Size = FontUnit.Medium;
                                                FpSpread1.Sheets[0].Cells[0, col].Locked = false;

                                                FpSpread1.Sheets[0].Cells[0, col + 1].CellType = cbcommon;
                                                FpSpread1.Sheets[0].Cells[0, col + 1].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[0, col + 1].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[0, col + 1].Font.Size = FontUnit.Medium;
                                                FpSpread1.Sheets[0].Cells[0, col + 1].Locked = false;

                                                FpSpread1.Sheets[0].Cells[0, col + 2].CellType = cbcomyear;
                                                FpSpread1.Sheets[0].Cells[0, col + 2].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[0, col + 2].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[0, col + 2].Font.Size = FontUnit.Medium;
                                                FpSpread1.Sheets[0].Cells[0, col + 2].Locked = false;
                                            }
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        }
                                    }
                                }
                                FpSpread1.Sheets[0].RowCount++;
                                divheight += 7;
                                if (!headertotal.ContainsKey(Convert.ToString(dnewset.Tables[1].Rows[ik]["HeaderPK"])))
                                {
                                    headertotal.Add(Convert.ToString(dnewset.Tables[1].Rows[ik]["HeaderPK"]), FpSpread1.Sheets[0].RowCount - 1);
                                    ViewState["headertotal"] = headertotal;
                                }
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Total";
                                FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                                FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;

                            }
                            FpSpread1.Sheets[0].RowCount++;
                            divheight += 7;
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Grand Total";
                            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                            Grandtotal.Add(Convert.ToString("GrandTotal"), FpSpread1.Sheets[0].RowCount - 1);
                            ViewState["Grandtotal"] = Grandtotal;
                            FpSpread1.Sheets[0].PageSize = FpSpread1.Sheets[0].RowCount;
                            //FpSpread1.Visible = true;
                            //FpSpread1.Width = 600;
                            //FpSpread1.Height = 400;
                            //Feedetails.Visible = true;
                            if (dnewset.Tables[0].Rows.Count > 0)
                            {
                                FpSpread1.Visible = true;
                                FpSpread1.Width = 1000;
                                FpSpread1.Height = Convert.ToInt32(divheight + 300);
                                Feedetails.Visible = true;
                                studentdetail.Visible = false;
                                lblerr1.Visible = false;
                            }
                            else
                            {
                                FpSpreadstud.Visible = false;
                                Feedetails.Visible = true;
                                FpSpread1.Visible = true;
                                FpSpread1.Width = 600;
                                //  FpSpread1.Height = 400;
                                //div2.Visible = false;
                                lblerr1.Visible = true;
                                lblerr1.Text = "There are no students available!";
                                Div3.Visible = false;
                                btnok1.Visible = false;
                                studentdetail.Visible = true;
                            }


                        }

                    }


                }
                #endregion

                #region Individual Both
                if (ddl_type.SelectedItem.Text == "Individual(Both)")
                {
                    FarPoint.Web.Spread.StyleInfo darknewstyle = new FarPoint.Web.Spread.StyleInfo();
                    darknewstyle.BackColor = System.Drawing.ColorTranslator.FromHtml("#0CA6CA");
                    darknewstyle.ForeColor = System.Drawing.Color.Black;
                    darknewstyle.HorizontalAlign = HorizontalAlign.Center;
                    FpSpreadstud3.ActiveSheetView.ColumnHeader.DefaultStyle = darknewstyle;
                    FpSpreadstud3.Sheets[0].ColumnCount = 4;
                    FpSpreadstud3.Sheets[0].RowCount = 0;
                    FpSpreadstud3.Sheets[0].RowHeader.Visible = false;
                    FpSpreadstud3.CommandBar.Visible = false;
                    FpSpreadstud3.Sheets[0].AutoPostBack = true;
                    string quotavalue = getCblSelectedText(cblQuota);
                    selquery = "select headerpk,headername,ledgerpk,ledgername from FM_HeaderMaster m,FM_LedgerMaster l where m.HeaderPK = l.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure') and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "') order by len(isnull(l.priority,1000)) , l.priority asc ";
                    selquery = selquery + " select distinct headerpk,headername from FM_HeaderMaster m,FM_LedgerMaster l where m.HeaderPK = l.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure') and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "')";

                    DataSet dnewset = new DataSet();
                    dnewset.Clear();
                    dnewset = d2.select_method_wo_parameter(selquery, "Text");
                    //if (cblQuota.Items.Count > 0)
                    //{
                    //    selquery = "SELECT r.App_NO,Roll_No,R.Stud_Name,(C.Course_Name+'-'+D.Dept_Name) as Department,Reg_no  FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE A.app_no = r.App_No and R.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code   and Edu_Level in('" + edulevel + "') and R.mode in('" + mode + "') and r.Stud_Type in('" + stutype + "') and a.seattype in('" + seattype + "') and a.quota in('" + quotavalue + "') and r.batch_year in('" + batchyear + "') and g.Course_Id in('" + course + "')  and g.Degree_Code in('" + degreecode + "') and isconfirm = 1 and admission_status = 1 UNION SELECT a.App_NO,a.app_formno,a.Stud_Name,(C.Course_Name+'-'+D.Dept_Name) as Department FROM Applyn A,Degree G,Course C,Department D WHERE A.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code and type in('" + type + "') and Edu_Level in('" + edulevel + "') and a.seattype in('" + seattype + "') and a.batch_year in('" + batchyear + "') and g.Course_Id in('" + course + "') and g.Degree_Code in('" + degreecode + "') and isconfirm = 1 and admission_status = 0 and CC=0 and DelFlag =0 and Exam_Flag <>'DEBAR' ";
                    //}
                    //else
                    //{
                    selquery = "SELECT r.App_NO,Roll_No,R.Stud_Name,(C.Course_Name+'-'+D.Dept_Name) as Department,Reg_no  FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE A.app_no = r.App_No and R.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code   and Edu_Level in('" + edulevel + "') and R.mode in('" + mode + "') and r.Stud_Type in('" + stutype + "') and a.seattype in('" + seattype + "') and r.batch_year in('" + batchyear + "') and g.Course_Id in('" + course + "')  and g.Degree_Code in('" + degreecode + "') and isconfirm = 1 and admission_status = 1 UNION SELECT a.App_NO,a.app_formno,a.Stud_Name,(C.Course_Name+'-'+D.Dept_Name) as Department FROM Applyn A,Degree G,Course C,Department D WHERE A.degree_code = G.Degree_Code and g.Course_Id = c.Course_Id and g.college_code = c.college_code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code and type in('" + type + "') and Edu_Level in('" + edulevel + "') and a.seattype in('" + seattype + "') and a.batch_year in('" + batchyear + "') and g.Course_Id in('" + course + "') and g.Degree_Code in('" + degreecode + "') and isconfirm = 1 and admission_status = 0 and CC=0 and DelFlag =0 and Exam_Flag <>'DEBAR' ";
                    //}
                    if (txt_stream.Enabled)
                    {
                        selquery += " and type in('" + type + "') ";
                    }
                    selquery += strorderby;
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(selquery, "Text");
                    if (ds.Tables.Count > 0)
                    {
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            FarPoint.Web.Spread.StyleInfo style5 = new FarPoint.Web.Spread.StyleInfo();
                            style5.Font.Size = 13;
                            style5.Font.Name = "Book Antiqua";
                            style5.Font.Bold = true;
                            style5.HorizontalAlign = HorizontalAlign.Center;
                            style5.ForeColor = System.Drawing.Color.Black;
                            style5.BackColor = System.Drawing.Color.AliceBlue;

                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;
                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                            FpSpreadstud3.Columns[0].Width = 50;

                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Roll Number";
                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;
                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                            FpSpreadstud3.Columns[1].Width = 175;

                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Student Name";
                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
                            FpSpreadstud3.Columns[2].Width = 200;

                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Department";
                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = FontUnit.Medium;
                            FpSpreadstud3.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
                            FpSpreadstud3.Columns[3].Width = 150;

                            for (int row = 0; row < ds.Tables[0].Rows.Count; row++)
                            {
                                FpSpreadstud3.Sheets[0].RowCount++;
                                FpSpreadstud3.Sheets[0].Cells[FpSpreadstud3.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(row + 1);
                                FpSpreadstud3.Sheets[0].Cells[FpSpreadstud3.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                FpSpreadstud3.Sheets[0].Cells[FpSpreadstud3.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                                FpSpreadstud3.Sheets[0].Cells[FpSpreadstud3.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";

                                FpSpreadstud3.Sheets[0].Cells[FpSpreadstud3.Sheets[0].RowCount - 1, 1].Text = Convert.ToString(ds.Tables[0].Rows[row]["Roll_No"]);
                                FpSpreadstud3.Sheets[0].Cells[FpSpreadstud3.Sheets[0].RowCount - 1, 1].Tag = Convert.ToString(ds.Tables[0].Rows[row]["App_NO"]);
                                FpSpreadstud3.Sheets[0].Cells[FpSpreadstud3.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Left;
                                FpSpreadstud3.Sheets[0].Cells[FpSpreadstud3.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                                FpSpreadstud3.Sheets[0].Cells[FpSpreadstud3.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";

                                FpSpreadstud3.Sheets[0].Cells[FpSpreadstud3.Sheets[0].RowCount - 1, 2].Text = Convert.ToString(ds.Tables[0].Rows[row]["Stud_Name"]);
                                FpSpreadstud3.Sheets[0].Cells[FpSpreadstud3.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Left;
                                FpSpreadstud3.Sheets[0].Cells[FpSpreadstud3.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                                FpSpreadstud3.Sheets[0].Cells[FpSpreadstud3.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";

                                FpSpreadstud3.Sheets[0].Cells[FpSpreadstud3.Sheets[0].RowCount - 1, 3].Text = Convert.ToString(ds.Tables[0].Rows[row]["Department"]);
                                FpSpreadstud3.Sheets[0].Cells[FpSpreadstud3.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;
                                FpSpreadstud3.Sheets[0].Cells[FpSpreadstud3.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Medium;
                                FpSpreadstud3.Sheets[0].Cells[FpSpreadstud3.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";
                            }
                            FpSpread1.Visible = false;
                            //popper1.Visible = false;
                            FpSpreadstud3.Visible = true;
                            FpSpreadstud3.Sheets[0].PageSize = FpSpreadstud3.Sheets[0].RowCount;
                        }
                    }
                    if (dnewset.Tables[0].Rows.Count > 0)
                    {
                        int sno = 0;
                        for (int ik = 0; ik < dnewset.Tables[1].Rows.Count; ik++)
                        {
                            FpSpread1.Sheets[0].RowCount++;
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(dnewset.Tables[1].Rows[ik]["HeaderName"]);
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);

                            dnewset.Tables[0].DefaultView.RowFilter = "HeaderPK='" + Convert.ToString(dnewset.Tables[1].Rows[ik]["HeaderPK"]) + "'";
                            dv = dnewset.Tables[0].DefaultView;
                            for (i = 0; i < dv.Count; i++)
                            {
                                FpSpread1.Sheets[0].RowCount++;
                                sno++;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(sno);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(dnewset.Tables[1].Rows[ik]["HeaderPK"]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;

                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = Convert.ToString(dv[i]["LedgerName"]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Tag = Convert.ToString(dv[i]["LedgerPK"]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Left;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                                for (int cn = 0; cn < cbl_sem.Items.Count; cn++)
                                {
                                    col = 1;
                                    if (cbl_sem.Items[cn].Selected == true)
                                    {
                                        col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday1;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon1;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear1;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday2;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon2;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear2;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                    }
                                }
                            }
                            FpSpread1.Sheets[0].RowCount++;
                            if (!headertotal.ContainsKey(Convert.ToString(dnewset.Tables[1].Rows[ik]["HeaderPK"])))
                            {
                                headertotal.Add(Convert.ToString(dnewset.Tables[1].Rows[ik]["HeaderPK"]), FpSpread1.Sheets[0].RowCount - 1);
                                ViewState["headertotal"] = headertotal;
                            }
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Total";
                            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;

                        }
                        FpSpread1.Sheets[0].RowCount++;
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Grand Total";
                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                        Grandtotal.Add(Convert.ToString("GrandTotal"), FpSpread1.Sheets[0].RowCount - 1);
                        ViewState["Grandtotal"] = Grandtotal;
                        FpSpread1.Sheets[0].PageSize = FpSpread1.Sheets[0].RowCount;
                        Feedetails.Visible = true;
                        FpSpread1.Visible = true;
                        FpSpreadstud.Visible = false;
                        Div3.Visible = false;
                        FpSpread1.Width = 1000;
                        FpSpread1.Height = 400;
                    }
                }
                #endregion

                if (FpSpread1.Visible && FpSpread1.Rows.Count > 0)
                {
                    divBtns.Visible = true;
                }
                else
                {
                    divBtns.Visible = false;
                }
            }
            else
            {
                FpSpread1.Visible = false;
                imgdiv2.Visible = true;
                lbl_erroralert.Visible = true;
                lbl_erroralert.Text = "Maximum Concession range is 3";

            }
            //  cblcolumnorder.ClearSelection();
            // CheckBox_column.Checked = false;
            lnk_columnorder.Visible = false;
            ItemList.Clear();
            Itemindex.Clear();
            tborder.Text = "";
            tborder.Visible = false;
            // loadcolumns();
        }
        catch (Exception ex)
        {
            //d2.sendErrorMail(ex, collegecode1, "journal.aspx");
        }
    }


    protected void btnsave_Click(object sender, EventArgs e)
    {
        FpSpread1.SaveChanges();
        try
        {
            int row;
            int col;
            string frm = "";
            string isfeedeposit = "";

            string duedt = "";
            string startdt = "";
            int dtchk = 0;
            DateTime ddt = DateTime.Now;
            DateTime paydt = DateTime.Now;
            Hashtable check = (Hashtable)ViewState["colcountnew"];
            bool inscheck = false;
            int indexvalue = 1;
            double refundtot = 0;
            Dictionary<string, string> refund = new Dictionary<string, string>();
            Dictionary<string, int> Semflter = getSemester();
            //for (int l = 0; l < cbl_sem.Items.Count; l++)
            //{
            //    if (cbl_sem.Items[l].Selected == true)
            //    {
            foreach (KeyValuePair<string, int> feecatValue in Semflter)
            {
                string feestr = Convert.ToString(feecatValue.Key);
                string feeValue = Convert.ToString(feecatValue.Value);
                if (FpSpread1.Sheets[0].RowCount > 0)
                {
                    for (int ro = 1; ro < FpSpread1.Sheets[0].RowCount; ro++)
                    {
                        indexvalue = Convert.ToInt32(check[feeValue]);
                        string headerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 0].Tag);
                        string ledgerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 1].Tag);
                        string feeamountmonthly = "";
                        if (headerid.Trim() != "" && ledgerid.Trim() != "")
                        {
                            string paymode = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                            if (paymode.Trim() == "Regular")
                            {
                                paymode = "1";
                                feeamountmonthly = "";
                            }
                            else
                            {
                                paymode = "2";
                                feeamountmonthly = "";
                            }
                            indexvalue++;
                            string feeamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                            if (paymode.Trim() == "2")
                            {
                                feeamountmonthly = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                            }

                            //========================Added by saranya on 19March2018============================//
                            int noOfConcession = 0;
                            noOfConcession = Convert.ToInt32(txtNoConcession.Text);
                            string deductamnt = string.Empty;
                            if (noOfConcession == 0 || noOfConcession == 1)
                            {
                                indexvalue++;
                                deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                if (deductamnt.Trim() == "")
                                {
                                    deductamnt = "0";
                                }
                                indexvalue++;
                                string deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                if (deductreason.Trim() == "")
                                {
                                    deductreason = "0";
                                }
                                string deductamount1 = string.Empty;
                                deductamount1 = "0";
                                string deductreason1 = string.Empty;
                                deductreason1 = "0";
                                string deductamount2 = string.Empty;
                                deductamount1 = "0";
                                string deductreason2 = string.Empty;
                                deductreason2 = "0";
                                string deductamount3 = string.Empty;
                                deductamount3 = "0";
                                string deductreason3 = string.Empty;
                                deductreason3 = "0";
                            }

                            if (noOfConcession == 2)
                            {
                                indexvalue++;
                                string deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                if (deductamount1.Trim() == "")
                                {
                                    deductamount1 = "0";
                                }
                                indexvalue++;
                                string deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                if (deductreason1.Trim() == "")
                                {
                                    deductreason1 = "0";
                                }

                                indexvalue++;
                                string deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                if (deductamount2.Trim() == "")
                                {
                                    deductamount2 = "0";
                                }
                                indexvalue++;
                                string deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                if (deductreason2.Trim() == "")
                                {
                                    deductreason2 = "0";
                                }
                                string deductamount3 = string.Empty;
                                deductamount3 = "0";
                                string deductreason3 = string.Empty;
                                deductreason3 = "0";
                                indexvalue++;
                                deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                if (deductamnt.Trim() == "")
                                {
                                    deductamnt = "0";
                                }
                                indexvalue++;
                                string deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                if (deductreason.Trim() == "")
                                {
                                    deductreason = "0";
                                }
                            }

                            if (noOfConcession == 3)
                            {
                                indexvalue++;
                                string deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                if (deductamount1.Trim() == "")
                                {
                                    deductamount1 = "0";
                                }
                                indexvalue++;
                                string deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                if (deductreason1.Trim() == "")
                                {
                                    deductreason1 = "0";
                                }

                                indexvalue++;
                                string deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                if (deductamount2.Trim() == "")
                                {
                                    deductamount2 = "0";
                                }
                                indexvalue++;
                                string deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                if (deductreason2.Trim() == "")
                                {
                                    deductreason2 = "0";
                                }

                                indexvalue++;
                                string deductamount3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                if (deductamount3.Trim() == "")
                                {
                                    deductamount3 = "0";
                                }
                                indexvalue++;
                                string deductreason3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                if (deductreason3.Trim() == "")
                                {
                                    deductreason3 = "0";
                                }
                                indexvalue++;
                                deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                if (deductamnt.Trim() == "")
                                {
                                    deductamnt = "0";
                                }
                                indexvalue++;
                                string deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                if (deductreason.Trim() == "")
                                {
                                    deductreason = "0";
                                }
                            }
                            //==================================================================================//


                            indexvalue++;
                            string totalamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);

                            indexvalue++;
                            string refundamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                            if (refundamnt.Trim() == "")
                            {
                                refundamnt = "0";
                            }
                            if (refundamnt.Trim() != "")
                            {
                                isfeedeposit = "1";

                            }
                            else
                            {
                                isfeedeposit = "0";
                            }
                            if (ledgerid.Trim() != "")
                            {
                                indexvalue++;
                                indexvalue++;
                                string frmgovt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                if (frmgovt == null || frmgovt.Trim() == "")
                                {
                                    frm = "0";
                                }
                                else
                                {
                                    frm = frmgovt;
                                }
                                indexvalue++;
                                string day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                if (day1.Trim() != "")
                                {
                                    day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                }
                                else
                                {
                                    day1 = "";
                                }
                                indexvalue++;
                                string mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                if (mon1.Trim() != "")
                                {
                                    mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                }
                                else
                                {
                                    mon1 = "";
                                }
                                indexvalue++;
                                string year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                if (year1.Trim() != "")
                                {
                                    year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                }
                                else
                                {
                                    year1 = "";
                                }
                                if (day1.Trim() != "" && mon1.Trim() != "" && year1.Trim() != "")
                                {
                                    duedt = Convert.ToString(mon1 + "/" + day1 + "/" + year1);
                                    ddt = Convert.ToDateTime(duedt);
                                }
                            }
                            indexvalue++;
                            string fineamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                            if (fineamnt.Trim() == "")
                            {
                                fineamnt = "0";
                            }
                            if (ledgerid.Trim() != "")
                            {
                                indexvalue++;
                                string day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                if (day2.Trim() != "")
                                {
                                    day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                }
                                else
                                {
                                    day2 = "";
                                }
                                indexvalue++;
                                string mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                if (mon2.Trim() != "")
                                {
                                    mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                }
                                else
                                {
                                    mon2 = "";
                                }
                                indexvalue++;
                                string year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                if (year2.Trim() != "")
                                {
                                    year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                }
                                else
                                {
                                    year2 = "";
                                }
                                if (day2.Trim() != "" && mon2.Trim() != "" && year2.Trim() != "")
                                {
                                    startdt = Convert.ToString(mon2 + "/" + day2 + "/" + year2);
                                    paydt = Convert.ToDateTime(startdt);
                                }
                            }
                            double tot_amount = 0;
                            double tot_refund = 0;
                            double.TryParse(totalamnt, out tot_amount);
                            double.TryParse(refundamnt, out tot_refund);

                            if (feeamnt.Trim() != "0" && feeamnt.Trim() != "" && feeamnt.Trim() != null && totalamnt.Trim() != "" && totalamnt.Trim() != null && totalamnt.Trim() != "0")
                            {
                                if (Convert.ToDouble(feeamnt) < Convert.ToDouble(deductamnt))
                                {
                                    //  || Convert.ToDouble(totalamnt) <= Convert.ToDouble(refundamnt)
                                    for (int rowval = 1; rowval < FpSpread1.Sheets[0].RowCount; rowval++)
                                    {
                                        indexvalue = Convert.ToInt32(check[feeValue]);
                                        string headercode = Convert.ToString(FpSpread1.Sheets[0].Cells[rowval, 0].Tag);
                                        string ledgercode = Convert.ToString(FpSpread1.Sheets[0].Cells[rowval, 1].Tag);
                                        indexvalue++;
                                        for (int colval = indexvalue; colval < FpSpread1.Sheets[0].ColumnCount; colval++)
                                        {
                                            FpSpread1.Sheets[0].Cells[rowval, colval].Text = "";
                                        }
                                    }
                                    FpSpread1.SaveChanges();
                                    alertpopwindow.Visible = true;
                                    lblalerterr.Visible = true;
                                    lblalerterr.Text = "Fee Amount Should be greater than the other amount!";
                                    return;
                                }
                                //if (tot_amount < tot_refund)
                                //{
                                //    for (int rowval = 1; rowval < FpSpread1.Sheets[0].RowCount; rowval++)
                                //    {
                                //        indexvalue = Convert.ToInt32(check[feeValue]);
                                //        string headercode = Convert.ToString(FpSpread1.Sheets[0].Cells[rowval, 0].Tag);
                                //        string ledgercode = Convert.ToString(FpSpread1.Sheets[0].Cells[rowval, 1].Tag);
                                //        indexvalue++;
                                //        for (int colval = indexvalue; colval < FpSpread1.Sheets[0].ColumnCount; colval++)
                                //        {
                                //            FpSpread1.Sheets[0].Cells[rowval, colval].Text = "";
                                //        }
                                //    }
                                //    FpSpread1.SaveChanges();
                                //    alertpopwindow.Visible = true;
                                //    lblalerterr.Visible = true;
                                //    lblalerterr.Text = "Total Amount Should be greater than the Refund Amount!";
                                //    return;
                                //}
                            }
                        }
                    }
                }
                // }
                // }
            }
            Session["refundamt"] = refund;
            savedetails();
        }
        catch (Exception ex)
        {
            //d2.sendErrorMail(ex, collegecode1, "TransferRefund.aspx");
        }
    }

    protected Dictionary<string, int> getSemester()
    {
        Dictionary<string, int> Semflter = new Dictionary<string, int>();
        for (int row = 0; row < cbl_sem.Items.Count; row++)
        {
            if (cbl_sem.Items[row].Selected)
            {
                Semflter.Add(cbl_sem.Items[row].Text, Convert.ToInt32(cbl_sem.Items[row].Value));
            }
        }
        return Semflter;
    }

    public void savedetails()
    {
        try
        {
            int row;
            int col;
            string frm = "";
            string mulScholarVal = string.Empty;
            string isfeedeposit = "";

            string duedt = "";
            string startdt = "";
            int amntchk = 0;
            int dtchk = 0;
            DateTime ddt = DateTime.Now;
            DateTime paydt = DateTime.Now;
            Hashtable check = (Hashtable)ViewState["colcountnew"];
            bool inscheck = false;
            DateTime tme = new DateTime();
            string transtme = tme.ToString("HH:MM:SS");
            //Dictionary<string, string> RFht = new Dictionary<string, string>();
            //if (Session["refundamt"] != null)
            //{
            //    RFht = (Dictionary<string, string>)Session["refundamt"];
            //    Session["refundamt"] = null;
            //}

            //student App_no Get
            List<string> appnolist = new List<string>();
            if (ViewState["appnolist"] != null)
                appnolist = (List<string>)ViewState["appnolist"];
            Dictionary<string, int> Semflter = getSemester();

            string strFinYrFk = string.Empty;
            string getfinid = string.Empty;
            if (checkSchoolSetting() == 0)
            {
                string getfinfk = Convert.ToString(ddlfinyear.SelectedValue);
                strFinYrFk = " and finyearfk in('" + getfinfk + "')";
                getfinid = Convert.ToString(ddlfinyear.SelectedValue);
            }
            else
            {
                getfinid = d2.getCurrentFinanceYear(usercode, collegecode1);
                //getfinid = "";
            }

            if (getfinid != "0" && getfinid != "" && getfinid != null && Semflter.Count > 0)
            {
                #region General
                if (ddl_type.SelectedItem.Text == "General")
                {
                    bool hostelOK = false;
                    bool roomOK = false;
                    bool batchOk = false;
                    bool deptOk = false;
                    bool seatOk = false;
                    bool Quotaok = false;
                    if (!cbIncCommunity.Checked)
                    {
                        if (!cbhostel.Checked)//without hostel fees 
                        {
                            hostelOK = true;
                            roomOK = true;
                            #region
                            if (cblQuota.Items.Count > 0)
                            {
                                for (int i = 0; i < cbl_batch.Items.Count; i++)
                                {
                                    if (cbl_batch.Items[i].Selected == true)
                                    {
                                        batchOk = true;

                                        for (int j = 0; j < cbl_dept.Items.Count; j++)
                                        {

                                            if (cbl_dept.Items[j].Selected == true)
                                            {
                                                deptOk = true;
                                                for (int k = 0; k < cbl_seat.Items.Count; k++)
                                                {
                                                    if (cbl_seat.Items[k].Selected == true)
                                                    {
                                                        seatOk = true;
                                                        for (int m = 0; m < cblQuota.Items.Count; m++)//added by abarna 
                                                        {
                                                            if (cblQuota.Items[m].Selected == true)
                                                            {
                                                                Quotaok = true;

                                                                for (int l = 0; l < cbl_sem.Items.Count; l++)
                                                                {
                                                                    if (cbl_sem.Items[l].Selected == true)
                                                                    {
                                                                        int indexvalue = 1;
                                                                        if (FpSpread1.Sheets[0].RowCount > 0)
                                                                        {
                                                                            for (int ro = 1; ro < FpSpread1.Sheets[0].RowCount; ro++)
                                                                            {
                                                                                indexvalue = Convert.ToInt32(check[Convert.ToString(cbl_sem.Items[l].Value)]);
                                                                                string headerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 0].Tag);
                                                                                string ledgerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 1].Tag);
                                                                                string feeamountmonthly = "";
                                                                                if (headerid.Trim() != "" && ledgerid.Trim() != "")
                                                                                {
                                                                                    string paymode = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                    if (paymode.Trim() == "Regular")
                                                                                    {
                                                                                        paymode = "1";
                                                                                        feeamountmonthly = "";
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        paymode = "2";
                                                                                        feeamountmonthly = "";
                                                                                    }
                                                                                    indexvalue++;
                                                                                    string feeamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                    if (paymode.Trim() == "2")
                                                                                    {
                                                                                        feeamountmonthly = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                                                                    }

                                                                                    //============Added by saranya on 19March2018===============//
                                                                                    int noOfConcession = 0;
                                                                                    noOfConcession = Convert.ToInt32(txtNoConcession.Text);
                                                                                    string deductamount1 = string.Empty;
                                                                                    string deductreason1 = string.Empty;
                                                                                    string deductamount2 = string.Empty;
                                                                                    string deductreason2 = string.Empty;
                                                                                    string deductamount3 = string.Empty;
                                                                                    string deductreason3 = string.Empty;
                                                                                    string deductamnt = string.Empty;
                                                                                    string deductreason = string.Empty;
                                                                                    double tempDeductAmt = 0;

                                                                                    if (noOfConcession == 0 || noOfConcession == 1)
                                                                                    {
                                                                                        indexvalue++;
                                                                                        deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        if (deductamnt.Trim() == "")
                                                                                        {
                                                                                            deductamnt = "0";
                                                                                        }
                                                                                        indexvalue++;
                                                                                        tempDeductAmt = 0;
                                                                                        deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                        if (deductreason.Trim() == "")
                                                                                        {
                                                                                            deductreason = "0";
                                                                                            //double.TryParse(deductamnt, out tempDeductAmt);
                                                                                            //deductamnt = "0";
                                                                                        }
                                                                                        deductamount1 = "0";
                                                                                        deductamount2 = "0";
                                                                                        deductamount3 = "0";
                                                                                        deductreason1 = "0";
                                                                                        deductreason2 = "0";
                                                                                        deductreason3 = "0";
                                                                                    }
                                                                                    if (noOfConcession == 2)
                                                                                    {
                                                                                        indexvalue++;
                                                                                        deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        if (deductamount1.Trim() == "")
                                                                                        {
                                                                                            deductamount1 = "0";
                                                                                        }
                                                                                        indexvalue++;
                                                                                        double tempDeductAmt1 = 0;
                                                                                        deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                        if (deductreason1.Trim() == "")
                                                                                        {
                                                                                            deductreason1 = "0";
                                                                                            //double.TryParse(deductamount1, out tempDeductAmt1);
                                                                                            //deductamount1 = "0";
                                                                                        }

                                                                                        indexvalue++;
                                                                                        deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        if (deductamount2.Trim() == "")
                                                                                        {
                                                                                            deductamount2 = "0";
                                                                                        }
                                                                                        indexvalue++;
                                                                                        double tempDeductAmt2 = 0;
                                                                                        deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                        if (deductreason2.Trim() == "")
                                                                                        {
                                                                                            deductreason2 = "0";
                                                                                            //double.TryParse(deductamount2, out tempDeductAmt2);
                                                                                            //deductamount2 = "0";
                                                                                        }
                                                                                        indexvalue++;
                                                                                        deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        if (deductamnt.Trim() == "")
                                                                                        {
                                                                                            deductamnt = "0";
                                                                                        }
                                                                                        indexvalue++;
                                                                                        tempDeductAmt = 0;
                                                                                        deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                        if (deductreason.Trim() == "")
                                                                                        {
                                                                                            deductreason = "0";
                                                                                            //double.TryParse(deductamnt, out tempDeductAmt);
                                                                                            //deductamnt = "0";
                                                                                        }

                                                                                        deductamount3 = "0";
                                                                                        deductreason3 = "0";

                                                                                    }
                                                                                    if (noOfConcession == 3)
                                                                                    {
                                                                                        indexvalue++;
                                                                                        deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        if (deductamount1.Trim() == "")
                                                                                        {
                                                                                            deductamount1 = "0";
                                                                                        }
                                                                                        indexvalue++;
                                                                                        double tempDeductAmt1 = 0;
                                                                                        deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                        if (deductreason1.Trim() == "")
                                                                                        {
                                                                                            deductreason1 = "0";
                                                                                            //double.TryParse(deductamount1, out tempDeductAmt1);
                                                                                            //deductamount1 = "0";
                                                                                        }

                                                                                        indexvalue++;
                                                                                        deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        if (deductamount2.Trim() == "")
                                                                                        {
                                                                                            deductamount2 = "0";
                                                                                        }
                                                                                        indexvalue++;
                                                                                        double tempDeductAmt2 = 0;
                                                                                        deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                        if (deductreason2.Trim() == "")
                                                                                        {
                                                                                            deductreason2 = "0";
                                                                                            //double.TryParse(deductamount2, out tempDeductAmt2);
                                                                                            //deductamount2 = "0";
                                                                                        }

                                                                                        indexvalue++;
                                                                                        deductamount3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        if (deductamount3.Trim() == "")
                                                                                        {
                                                                                            deductamount3 = "0";
                                                                                        }
                                                                                        indexvalue++;
                                                                                        double tempDeductAmt3 = 0;
                                                                                        deductreason3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                        if (deductreason3.Trim() == "")
                                                                                        {
                                                                                            deductreason3 = "0";
                                                                                            //double.TryParse(deductamount3, out tempDeductAmt3);
                                                                                            //deductamount3 = "0";
                                                                                        }
                                                                                        indexvalue++;
                                                                                        deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        if (deductamnt.Trim() == "")
                                                                                        {
                                                                                            deductamnt = "0";
                                                                                        }
                                                                                        indexvalue++;
                                                                                        tempDeductAmt = 0;
                                                                                        deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                        if (deductreason.Trim() == "")
                                                                                        {
                                                                                            deductreason = "0";
                                                                                            //double.TryParse(deductamnt, out tempDeductAmt);
                                                                                            //deductamnt = "0";
                                                                                        }
                                                                                    }
                                                                                    //==========================================================//
                                                                                    indexvalue++;
                                                                                    string totalamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                    double tempTot = 0;
                                                                                    double.TryParse(totalamnt, out tempTot);
                                                                                    tempTot += tempDeductAmt;
                                                                                    totalamnt = Convert.ToString(tempTot);
                                                                                    indexvalue++;
                                                                                    string refundamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                    if (refundamnt.Trim() == "")
                                                                                    {
                                                                                        refundamnt = "0";
                                                                                    }
                                                                                    if (refundamnt.Trim() != "")
                                                                                    {
                                                                                        isfeedeposit = "1";
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        isfeedeposit = "0";
                                                                                    }
                                                                                    if (ledgerid.Trim() != "")
                                                                                    {
                                                                                        indexvalue++;
                                                                                        string schlSingMul = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);

                                                                                        indexvalue++;
                                                                                        string frmgovt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                        //string mulScholarVal = string.Empty;
                                                                                        if (frmgovt == null || frmgovt.Trim() == "")
                                                                                        {
                                                                                            frm = "0";
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            frm = frmgovt;
                                                                                            if (schlSingMul.Trim().ToUpper() == "TYPE")
                                                                                            {
                                                                                                mulScholarVal = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                                                                            }
                                                                                        }
                                                                                        indexvalue++;
                                                                                        string day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        if (day1.Trim() != "")
                                                                                        {
                                                                                            day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            day1 = "";
                                                                                        }
                                                                                        indexvalue++;
                                                                                        string mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        if (mon1.Trim() != "")
                                                                                        {
                                                                                            mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            mon1 = "";
                                                                                        }
                                                                                        indexvalue++;
                                                                                        string year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        if (year1.Trim() != "")
                                                                                        {
                                                                                            year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            year1 = "";
                                                                                        }
                                                                                        if (day1.Trim() != "" && mon1.Trim() != "" && year1.Trim() != "")
                                                                                        {
                                                                                            duedt = Convert.ToString(mon1 + "/" + day1 + "/" + year1);
                                                                                            ddt = Convert.ToDateTime(duedt);
                                                                                        }
                                                                                    }
                                                                                    indexvalue++;
                                                                                    string fineamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                    if (fineamnt.Trim() == "")
                                                                                    {
                                                                                        fineamnt = "0";
                                                                                    }
                                                                                    if (ledgerid.Trim() != "")
                                                                                    {
                                                                                        indexvalue++;
                                                                                        string day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        if (day2.Trim() != "")
                                                                                        {
                                                                                            day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            day2 = "";
                                                                                        }
                                                                                        indexvalue++;
                                                                                        string mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        if (mon2.Trim() != "")
                                                                                        {
                                                                                            mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            mon2 = "";
                                                                                        }
                                                                                        indexvalue++;
                                                                                        string year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        if (year2.Trim() != "")
                                                                                        {
                                                                                            year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            year2 = "";
                                                                                        }
                                                                                        if (day2.Trim() != "" && mon2.Trim() != "" && year2.Trim() != "")
                                                                                        {
                                                                                            startdt = Convert.ToString(mon2 + "/" + day2 + "/" + year2);
                                                                                            paydt = Convert.ToDateTime(startdt);
                                                                                        }
                                                                                    }
                                                                                    double fee_amt = 0;
                                                                                    double ref_amt = 0;
                                                                                    double tot_amount = 0;
                                                                                    double.TryParse(feeamnt, out fee_amt);
                                                                                    double.TryParse(refundamnt, out ref_amt);
                                                                                    double.TryParse(totalamnt, out tot_amount);
                                                                                    //fee_amt >= ref_amt 
                                                                                    if (feeamnt.Trim() != "" && feeamnt.Trim() != null && totalamnt.Trim() != "" && totalamnt.Trim() != null)
                                                                                    {
                                                                                        string insupdquery = "if exists (select * from FT_FeeAllotDegree where DegreeCode ='" + cbl_dept.Items[j].Value + "' and BatchYear ='" + cbl_batch.Items[i].Value + "' and FeeCategory ='" + cbl_sem.Items[l].Value + "' and SeatType='" + cbl_seat.Items[k].Value + "' and quota='" + cblQuota.Items[m].Value + "' and HeaderFK ='" + headerid + "' and LedgerFK ='" + ledgerid + "' and FinYearFK='" + getfinid + "') update FT_FeeAllotDegree set  AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',FeeAmount='" + feeamnt + "',DeductAmout='" + deductamnt + "',DeductReason='" + deductreason + "',TotalAmount='" + totalamnt + "',RefundAmount='" + refundamnt + "',IsFeeDeposit='" + isfeedeposit + "',FeeAmountMonthly='" + feeamountmonthly + "',PayMode='" + paymode + "',PayStartDate='" + ddt + "',DueDate='" + paydt + "',FineAmount='" + fineamnt + "',DeductAmount1='" + deductamount1 + "',DeductReason1='" + deductreason1 + "',DeductAmount2='" + deductamount2 + "',DeductReason2='" + deductreason2 + "',DeductAmount3='" + deductamount3 + "',DeductReason3='" + deductreason3 + "' where DegreeCode ='" + cbl_dept.Items[j].Value + "' and BatchYear ='" + cbl_batch.Items[i].Value + "' and FeeCategory ='" + cbl_sem.Items[l].Value + "' and SeatType='" + cbl_seat.Items[k].Value + "'  and quota='" + cblQuota.Items[m].Value + "'and HeaderFK ='" + headerid + "' and LedgerFK ='" + ledgerid + "' and FinYearFK='" + getfinid + "'  else INSERT INTO FT_FeeAllotDegree(AllotDate,BatchYear,DegreeCode,SeatType,LedgerFK,HeaderFK,FeeAmount,DeductAmout,DeductReason,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,DueDate,FineAmount,FinYearFK,quota,DeductAmount1,DeductReason1,DeductAmount2,DeductReason2,DeductAmount3,DeductReason3) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "','" + cbl_batch.Items[i].Value + "','" + cbl_dept.Items[j].Value + "','" + cbl_seat.Items[k].Value + "','" + ledgerid + "','" + headerid + "','" + feeamnt + "','" + deductamnt + "','" + deductreason + "','" + totalamnt + "','" + refundamnt + "','" + isfeedeposit + "','" + feeamountmonthly + "','" + paymode + "','" + cbl_sem.Items[l].Value + "','" + duedt.ToString() + "','" + startdt.ToString() + "','" + fineamnt + "','" + getfinid + "','" + cblQuota.Items[m].Value + "','" + deductamount1 + "','" + deductreason1 + "','" + deductamount2 + "','" + deductreason2 + "','" + deductamount3 + "','" + deductreason3 + "' )";//quota added by abarna

                                                                                        int inscount = d2.update_method_wo_parameter(insupdquery, "Text");
                                                                                        if (inscount > 0)
                                                                                        {
                                                                                            inscheck = true;
                                                                                        }
                                                                                        //==========================Added by Saranya on 10/04/2018=============================//
                                                                                        int savevalue = 1;
                                                                                        string entrycode = Session["Entry_Code"].ToString();
                                                                                        string formname = "FeeAllot";
                                                                                        string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                                                        string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                                                        IPHostEntry host;
                                                                                        string localip = "";
                                                                                        host = Dns.GetHostEntry(Dns.GetHostName());
                                                                                        foreach (IPAddress ip in host.AddressList)
                                                                                        {
                                                                                            if (ip.AddressFamily.ToString() == "InterNetwork")
                                                                                            {
                                                                                                localip = ip.ToString();
                                                                                            }
                                                                                        }
                                                                                        string details = "Batch Year - " + cbl_batch.Items[i].Value + " : Degree - " + cbl_dept.Items[j].Text + " : Semester - " + cbl_sem.Items[l].Text + " : Quota -" + cblQuota.Items[m].Text + " : SeatType - " + cbl_seat.Items[k].Text + " : Allot Amt -" + feeamnt + " : Date - " + toa + " ";//:Allot Ledger-" +ledgername + ":Allot Amt-" +allotamt +"";                                                                                      
                                                                                        string ctsname = "";
                                                                                        if (savevalue == 1)
                                                                                        {
                                                                                            ctsname = "Fee Alloted";
                                                                                        }
                                                                                        string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                                                        d2.insertEinanceUserActionLog(entrycode, formname, 1, toa, doa, details, ctsname, localip);
                                                                                        //============================================================================//

                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        string delquery = "delete FT_FeeAllotDegree where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + cbl_sem.Items[l].Value + "') and BatchYear ='" + cbl_batch.Items[i].Value + "' and DegreeCode ='" + cbl_dept.Items[j].Value + "' and SeatType='" + cbl_seat.Items[k].Value + "' and quota='" + cblQuota.Items[m].Value + "' and FinYearFK='" + getfinid + "' and isnull(isHostelFees,'0')<>'1'";//quota added by abarna
                                                                                        int delcount = d2.update_method_wo_parameter(delquery, "Text");
                                                                                        if (delcount > 0)
                                                                                        {
                                                                                            inscheck = true;
                                                                                        }
                                                                                        //==========================Added by Saranya on 10/04/2018=============================//
                                                                                        int savevalue = 3;
                                                                                        string entrycode = Session["Entry_Code"].ToString();
                                                                                        string formname = "FeeAllotDelete";
                                                                                        string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                                                        string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                                                        IPHostEntry host;
                                                                                        string localip = "";
                                                                                        host = Dns.GetHostEntry(Dns.GetHostName());
                                                                                        foreach (IPAddress ip in host.AddressList)
                                                                                        {
                                                                                            if (ip.AddressFamily.ToString() == "InterNetwork")
                                                                                            {
                                                                                                localip = ip.ToString();
                                                                                            }
                                                                                        }
                                                                                        string details = "Batch Year - " + cbl_batch.Items[i].Value + " : Degree - " + cbl_dept.Items[j].Text + " : Semester - " + cbl_sem.Items[l].Text + " : Quota -" + cblQuota.Items[m].Text + " : SeatType - " + cbl_seat.Items[k].Text + " : Allot Amt-" + feeamnt + " : Date - " + toa + " ";//:Allot Ledger-" +ledgername + ":Allot Amt-" +allotamt +"";

                                                                                        string ctsname = "";
                                                                                        if (savevalue == 3)
                                                                                        {
                                                                                            ctsname = "Fee Allot Deleted";
                                                                                        }
                                                                                        string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                                                        d2.insertEinanceUserActionLog(entrycode, formname, 3, toa, doa, details, ctsname, localip);
                                                                                        //============================================================================//
                                                                                    }
                                                                                }
                                                                                //else
                                                                                //{
                                                                                //    string delquery = "delete FT_FeeAllotDegree where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + cbl_sem.Items[l].Value + "')";
                                                                                //    int delcount = d2.update_method_wo_parameter(delquery, "Text");
                                                                                //    if (delcount > 0)
                                                                                //    {
                                                                                //        inscheck = true;
                                                                                //    }
                                                                                //}
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                for (int i = 0; i < cbl_batch.Items.Count; i++)
                                {
                                    if (cbl_batch.Items[i].Selected == true)
                                    {
                                        batchOk = true;

                                        for (int j = 0; j < cbl_dept.Items.Count; j++)
                                        {

                                            if (cbl_dept.Items[j].Selected == true)
                                            {
                                                deptOk = true;
                                                for (int k = 0; k < cbl_seat.Items.Count; k++)
                                                {
                                                    if (cbl_seat.Items[k].Selected == true)
                                                    {
                                                        seatOk = true;

                                                        for (int l = 0; l < cbl_sem.Items.Count; l++)
                                                        {
                                                            if (cbl_sem.Items[l].Selected == true)
                                                            {
                                                                int indexvalue = 1;
                                                                if (FpSpread1.Sheets[0].RowCount > 0)
                                                                {
                                                                    for (int ro = 1; ro < FpSpread1.Sheets[0].RowCount; ro++)
                                                                    {
                                                                        indexvalue = Convert.ToInt32(check[Convert.ToString(cbl_sem.Items[l].Value)]);
                                                                        string headerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 0].Tag);
                                                                        string ledgerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 1].Tag);
                                                                        string feeamountmonthly = "";
                                                                        if (headerid.Trim() != "" && ledgerid.Trim() != "")
                                                                        {
                                                                            string paymode = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                            if (paymode.Trim() == "Regular")
                                                                            {
                                                                                paymode = "1";
                                                                                feeamountmonthly = "";
                                                                            }
                                                                            else
                                                                            {
                                                                                paymode = "2";
                                                                                feeamountmonthly = "";
                                                                            }
                                                                            indexvalue++;
                                                                            string feeamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                            if (paymode.Trim() == "2")
                                                                            {
                                                                                feeamountmonthly = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                                                            }

                                                                            //============Added by saranya on 19March2018===============//
                                                                            int noOfConcession = 0;
                                                                            noOfConcession = Convert.ToInt32(txtNoConcession.Text);
                                                                            string deductamount1 = string.Empty;
                                                                            string deductreason1 = string.Empty;
                                                                            string deductamount2 = string.Empty;
                                                                            string deductreason2 = string.Empty;
                                                                            string deductamount3 = string.Empty;
                                                                            string deductreason3 = string.Empty;
                                                                            string deductamnt = string.Empty;
                                                                            string deductreason = string.Empty;
                                                                            double tempDeductAmt = 0;

                                                                            if (noOfConcession == 0 || noOfConcession == 1)
                                                                            {
                                                                                indexvalue++;
                                                                                deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                if (deductamnt.Trim() == "")
                                                                                {
                                                                                    deductamnt = "0";
                                                                                }
                                                                                indexvalue++;
                                                                                tempDeductAmt = 0;
                                                                                deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                if (deductreason.Trim() == "")
                                                                                {
                                                                                    deductreason = "0";
                                                                                    double.TryParse(deductamnt, out tempDeductAmt);
                                                                                    deductamnt = "0";
                                                                                }
                                                                                deductamount1 = "0";
                                                                                deductamount2 = "0";
                                                                                deductamount3 = "0";
                                                                                deductreason1 = "0";
                                                                                deductreason2 = "0";
                                                                                deductreason3 = "0";
                                                                            }
                                                                            if (noOfConcession == 2)
                                                                            {
                                                                                indexvalue++;
                                                                                deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                if (deductamount1.Trim() == "")
                                                                                {
                                                                                    deductamount1 = "0";
                                                                                }
                                                                                indexvalue++;
                                                                                double tempDeductAmt1 = 0;
                                                                                deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                if (deductreason1.Trim() == "")
                                                                                {
                                                                                    deductreason1 = "0";
                                                                                    double.TryParse(deductamount1, out tempDeductAmt1);
                                                                                    deductamount1 = "0";
                                                                                }

                                                                                indexvalue++;
                                                                                deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                if (deductamount2.Trim() == "")
                                                                                {
                                                                                    deductamount2 = "0";
                                                                                }
                                                                                indexvalue++;
                                                                                double tempDeductAmt2 = 0;
                                                                                deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                if (deductreason2.Trim() == "")
                                                                                {
                                                                                    deductreason2 = "0";
                                                                                    double.TryParse(deductamount2, out tempDeductAmt2);
                                                                                    deductamount2 = "0";
                                                                                }
                                                                                indexvalue++;
                                                                                deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                if (deductamnt.Trim() == "")
                                                                                {
                                                                                    deductamnt = "0";
                                                                                }
                                                                                indexvalue++;
                                                                                tempDeductAmt = 0;
                                                                                deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                if (deductreason.Trim() == "")
                                                                                {
                                                                                    deductreason = "0";
                                                                                    double.TryParse(deductamnt, out tempDeductAmt);
                                                                                    deductamnt = "0";
                                                                                }

                                                                                deductamount3 = "0";
                                                                                deductreason3 = "0";

                                                                            }
                                                                            if (noOfConcession == 3)
                                                                            {
                                                                                indexvalue++;
                                                                                deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                if (deductamount1.Trim() == "")
                                                                                {
                                                                                    deductamount1 = "0";
                                                                                }
                                                                                indexvalue++;
                                                                                double tempDeductAmt1 = 0;
                                                                                deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                if (deductreason1.Trim() == "")
                                                                                {
                                                                                    deductreason1 = "0";
                                                                                    double.TryParse(deductamount1, out tempDeductAmt1);
                                                                                    deductamount1 = "0";
                                                                                }

                                                                                indexvalue++;
                                                                                deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                if (deductamount2.Trim() == "")
                                                                                {
                                                                                    deductamount2 = "0";
                                                                                }
                                                                                indexvalue++;
                                                                                double tempDeductAmt2 = 0;
                                                                                deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                if (deductreason2.Trim() == "")
                                                                                {
                                                                                    deductreason2 = "0";
                                                                                    double.TryParse(deductamount2, out tempDeductAmt2);
                                                                                    deductamount2 = "0";
                                                                                }

                                                                                indexvalue++;
                                                                                deductamount3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                if (deductamount3.Trim() == "")
                                                                                {
                                                                                    deductamount3 = "0";
                                                                                }
                                                                                indexvalue++;
                                                                                double tempDeductAmt3 = 0;
                                                                                deductreason3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                if (deductreason3.Trim() == "")
                                                                                {
                                                                                    deductreason3 = "0";
                                                                                    double.TryParse(deductamount3, out tempDeductAmt3);
                                                                                    deductamount3 = "0";
                                                                                }
                                                                                indexvalue++;
                                                                                deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                if (deductamnt.Trim() == "")
                                                                                {
                                                                                    deductamnt = "0";
                                                                                }
                                                                                indexvalue++;
                                                                                tempDeductAmt = 0;
                                                                                deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                if (deductreason.Trim() == "")
                                                                                {
                                                                                    deductreason = "0";
                                                                                    double.TryParse(deductamnt, out tempDeductAmt);
                                                                                    deductamnt = "0";
                                                                                }
                                                                            }

                                                                            //==========================================================//

                                                                            indexvalue++;
                                                                            string totalamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                            double tempTot = 0;
                                                                            double.TryParse(totalamnt, out tempTot);
                                                                            tempTot += tempDeductAmt;
                                                                            totalamnt = Convert.ToString(tempTot);
                                                                            indexvalue++;
                                                                            string refundamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                            if (refundamnt.Trim() == "")
                                                                            {
                                                                                refundamnt = "0";
                                                                            }
                                                                            if (refundamnt.Trim() != "")
                                                                            {
                                                                                isfeedeposit = "1";
                                                                            }
                                                                            else
                                                                            {
                                                                                isfeedeposit = "0";
                                                                            }
                                                                            if (ledgerid.Trim() != "")
                                                                            {
                                                                                indexvalue++;
                                                                                string schlSingMul = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);

                                                                                indexvalue++;
                                                                                string frmgovt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                //string mulScholarVal = string.Empty;
                                                                                if (frmgovt == null || frmgovt.Trim() == "")
                                                                                {
                                                                                    frm = "0";
                                                                                }
                                                                                else
                                                                                {
                                                                                    frm = frmgovt;
                                                                                    if (schlSingMul.Trim().ToUpper() == "TYPE")
                                                                                    {
                                                                                        mulScholarVal = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                                                                    }
                                                                                }
                                                                                indexvalue++;
                                                                                string day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                if (day1.Trim() != "")
                                                                                {
                                                                                    day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                }
                                                                                else
                                                                                {
                                                                                    day1 = "";
                                                                                }
                                                                                indexvalue++;
                                                                                string mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                if (mon1.Trim() != "")
                                                                                {
                                                                                    mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                }
                                                                                else
                                                                                {
                                                                                    mon1 = "";
                                                                                }
                                                                                indexvalue++;
                                                                                string year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                if (year1.Trim() != "")
                                                                                {
                                                                                    year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                }
                                                                                else
                                                                                {
                                                                                    year1 = "";
                                                                                }
                                                                                if (day1.Trim() != "" && mon1.Trim() != "" && year1.Trim() != "")
                                                                                {
                                                                                    duedt = Convert.ToString(mon1 + "/" + day1 + "/" + year1);
                                                                                    ddt = Convert.ToDateTime(duedt);
                                                                                }
                                                                            }
                                                                            indexvalue++;
                                                                            string fineamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                            if (fineamnt.Trim() == "")
                                                                            {
                                                                                fineamnt = "0";
                                                                            }
                                                                            if (ledgerid.Trim() != "")
                                                                            {
                                                                                indexvalue++;
                                                                                string day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                if (day2.Trim() != "")
                                                                                {
                                                                                    day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                }
                                                                                else
                                                                                {
                                                                                    day2 = "";
                                                                                }
                                                                                indexvalue++;
                                                                                string mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                if (mon2.Trim() != "")
                                                                                {
                                                                                    mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                }
                                                                                else
                                                                                {
                                                                                    mon2 = "";
                                                                                }
                                                                                indexvalue++;
                                                                                string year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                if (year2.Trim() != "")
                                                                                {
                                                                                    year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                }
                                                                                else
                                                                                {
                                                                                    year2 = "";
                                                                                }
                                                                                if (day2.Trim() != "" && mon2.Trim() != "" && year2.Trim() != "")
                                                                                {
                                                                                    startdt = Convert.ToString(mon2 + "/" + day2 + "/" + year2);
                                                                                    paydt = Convert.ToDateTime(startdt);
                                                                                }
                                                                            }
                                                                            double fee_amt = 0;
                                                                            double ref_amt = 0;
                                                                            double tot_amount = 0;
                                                                            double.TryParse(feeamnt, out fee_amt);
                                                                            double.TryParse(refundamnt, out ref_amt);
                                                                            double.TryParse(totalamnt, out tot_amount);
                                                                            //fee_amt >= ref_amt 
                                                                            if (feeamnt.Trim() != "" && feeamnt.Trim() != null && totalamnt.Trim() != "" && totalamnt.Trim() != null)
                                                                            {
                                                                                string insupdquery = "if exists (select * from FT_FeeAllotDegree where DegreeCode ='" + cbl_dept.Items[j].Value + "' and BatchYear ='" + cbl_batch.Items[i].Value + "' and FeeCategory ='" + cbl_sem.Items[l].Value + "' and SeatType='" + cbl_seat.Items[k].Value + "' and HeaderFK ='" + headerid + "' and LedgerFK ='" + ledgerid + "' and FinYearFK='" + getfinid + "') update FT_FeeAllotDegree set  AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',FeeAmount='" + feeamnt + "',DeductAmout='" + deductamnt + "',DeductReason='" + deductreason + "',TotalAmount='" + totalamnt + "',RefundAmount='" + refundamnt + "',IsFeeDeposit='" + isfeedeposit + "',FeeAmountMonthly='" + feeamountmonthly + "',PayMode='" + paymode + "',PayStartDate='" + ddt + "',DueDate='" + paydt + "',FineAmount='" + fineamnt + "',DeductAmount1='" + deductamount1 + "',DeductReason1='" + deductreason1 + "',DeductAmount2='" + deductamount2 + "',DeductReason2='" + deductreason2 + "',DeductAmount3='" + deductamount3 + "',DeductReason3='" + deductreason3 + "' where DegreeCode ='" + cbl_dept.Items[j].Value + "' and BatchYear ='" + cbl_batch.Items[i].Value + "' and FeeCategory ='" + cbl_sem.Items[l].Value + "' and SeatType='" + cbl_seat.Items[k].Value + "'  and  HeaderFK ='" + headerid + "' and LedgerFK ='" + ledgerid + "' and FinYearFK='" + getfinid + "' else INSERT INTO FT_FeeAllotDegree(AllotDate,BatchYear,DegreeCode,SeatType,LedgerFK,HeaderFK,FeeAmount,DeductAmout,DeductReason,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,DueDate,FineAmount,FinYearFK,DeductAmount1,DeductReason1,DeductAmount2,DeductReason2,DeductAmount3,DeductReason3) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "','" + cbl_batch.Items[i].Value + "','" + cbl_dept.Items[j].Value + "','" + cbl_seat.Items[k].Value + "','" + ledgerid + "','" + headerid + "','" + feeamnt + "','" + deductamnt + "','" + deductreason + "','" + totalamnt + "','" + refundamnt + "','" + isfeedeposit + "','" + feeamountmonthly + "','" + paymode + "','" + cbl_sem.Items[l].Value + "','" + duedt.ToString() + "','" + startdt.ToString() + "','" + fineamnt + "','" + getfinid + "','" + deductamount1 + "','" + deductreason1 + "','" + deductamount2 + "','" + deductreason2 + "','" + deductamount3 + "','" + deductreason3 + "' )";//quota added by abarna

                                                                                int inscount = d2.update_method_wo_parameter(insupdquery, "Text");
                                                                                if (inscount > 0)
                                                                                {
                                                                                    inscheck = true;
                                                                                }
                                                                                //==========================Added by Saranya on 10/04/2018=============================//
                                                                                int savevalue = 1;
                                                                                string entrycode = Session["Entry_Code"].ToString();
                                                                                string formname = "FeeAllot";
                                                                                string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                                                string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                                                IPHostEntry host;
                                                                                string localip = "";
                                                                                host = Dns.GetHostEntry(Dns.GetHostName());
                                                                                foreach (IPAddress ip in host.AddressList)
                                                                                {
                                                                                    if (ip.AddressFamily.ToString() == "InterNetwork")
                                                                                    {
                                                                                        localip = ip.ToString();
                                                                                    }
                                                                                }
                                                                                string details = "Batch Year - " + cbl_batch.Items[i].Value + ":Degree - " + cbl_dept.Items[j].Text + ":Semester - " + cbl_sem.Items[l].Text + ":SeatType - " + cbl_seat.Items[k].Text + ":Allot Amt -" + feeamnt + " : Date -" + toa + "";//:Allot Ledger-" +ledgername + ":Allot Amt-" +allotamt +"";
                                                                                string ctsname = "";
                                                                                if (savevalue == 1)
                                                                                {
                                                                                    ctsname = "Fee Alloted";
                                                                                }
                                                                                string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                                                d2.insertEinanceUserActionLog(entrycode, formname, 1, toa, doa, details, ctsname, localip);
                                                                                //============================================================================//
                                                                            }
                                                                            else
                                                                            {
                                                                                string delquery = "delete FT_FeeAllotDegree where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + cbl_sem.Items[l].Value + "') and BatchYear ='" + cbl_batch.Items[i].Value + "' and DegreeCode ='" + cbl_dept.Items[j].Value + "' and SeatType='" + cbl_seat.Items[k].Value + "'  and FinYearFK='" + getfinid + "' and isnull(isHostelFees,'0')<>'1'";//quota added by abarna

                                                                                int delcount = d2.update_method_wo_parameter(delquery, "Text");
                                                                                if (delcount > 0)
                                                                                {
                                                                                    inscheck = true;
                                                                                }
                                                                                //==========================Added by Saranya on 10/04/2018=============================//
                                                                                int savevalue = 3;
                                                                                string entrycode = Session["Entry_Code"].ToString();
                                                                                string formname = "FeeAllotDelete";
                                                                                string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                                                string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                                                IPHostEntry host;
                                                                                string localip = "";
                                                                                host = Dns.GetHostEntry(Dns.GetHostName());
                                                                                foreach (IPAddress ip in host.AddressList)
                                                                                {
                                                                                    if (ip.AddressFamily.ToString() == "InterNetwork")
                                                                                    {
                                                                                        localip = ip.ToString();
                                                                                    }
                                                                                }
                                                                                string details = "Batch Year - " + cbl_batch.Items[i].Value + ":Degree - " + cbl_dept.Items[j].Text + ":Semester - " + cbl_sem.Items[l].Text + ":SeatType - " + cbl_seat.Items[k].Text + ":Allot Amt-" + feeamnt + " : Date - " + toa + " ";//:Allot Ledger-" +ledgername + ":Allot Amt-" +allotamt +"";
                                                                                string ctsname = "";
                                                                                if (savevalue == 3)
                                                                                {
                                                                                    ctsname = "Fee Allot Deleted";
                                                                                }
                                                                                string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                                                d2.insertEinanceUserActionLog(entrycode, formname, 3, toa, doa, details, ctsname, localip);
                                                                                //============================================================================//
                                                                            }
                                                                        }
                                                                        //else
                                                                        //{
                                                                        //    string delquery = "delete FT_FeeAllotDegree where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + cbl_sem.Items[l].Value + "')";
                                                                        //    int delcount = d2.update_method_wo_parameter(delquery, "Text");
                                                                        //    if (delcount > 0)
                                                                        //    {
                                                                        //        inscheck = true;
                                                                        //    }
                                                                        //}
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }

                                }
                            }
                            #endregion
                        }
                        else//with hostel and room type fees
                        {
                            #region
                            if (cblQuota.Items.Count > 0)
                            {
                                for (int hstl = 0; hstl < cblhstlname.Items.Count; hstl++)
                                {
                                    if (cblhstlname.Items[hstl].Selected == true)
                                    {
                                        hostelOK = true;
                                        for (int room = 0; room < cblroomtype.Items.Count; room++)
                                        {
                                            if (cblroomtype.Items[room].Selected == true)
                                            {
                                                roomOK = true;
                                                for (int i = 0; i < cbl_batch.Items.Count; i++)
                                                {
                                                    if (cbl_batch.Items[i].Selected == true)
                                                    {
                                                        batchOk = true;

                                                        for (int j = 0; j < cbl_dept.Items.Count; j++)
                                                        {

                                                            if (cbl_dept.Items[j].Selected == true)
                                                            {
                                                                deptOk = true;
                                                                for (int k = 0; k < cbl_seat.Items.Count; k++)
                                                                {
                                                                    if (cbl_seat.Items[k].Selected == true)
                                                                    {
                                                                        seatOk = true;
                                                                        for (int m = 0; m < cblQuota.Items.Count; m++)//added by abarna 
                                                                        {
                                                                            if (cblQuota.Items[m].Selected == true)
                                                                            {
                                                                                Quotaok = true;
                                                                                for (int l = 0; l < cbl_sem.Items.Count; l++)
                                                                                {
                                                                                    if (cbl_sem.Items[l].Selected == true)
                                                                                    {
                                                                                        int indexvalue = 1;
                                                                                        if (FpSpread1.Sheets[0].RowCount > 0)
                                                                                        {
                                                                                            for (int ro = 1; ro < FpSpread1.Sheets[0].RowCount; ro++)
                                                                                            {
                                                                                                indexvalue = Convert.ToInt32(check[Convert.ToString(cbl_sem.Items[l].Value)]);
                                                                                                string headerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 0].Tag);
                                                                                                string ledgerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 1].Tag);
                                                                                                string feeamountmonthly = "";
                                                                                                if (headerid.Trim() != "" && ledgerid.Trim() != "")
                                                                                                {
                                                                                                    string paymode = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                    if (paymode.Trim() == "Regular")
                                                                                                    {
                                                                                                        paymode = "1";
                                                                                                        feeamountmonthly = "";
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        paymode = "2";
                                                                                                        feeamountmonthly = "";
                                                                                                    }
                                                                                                    indexvalue++;
                                                                                                    string feeamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                    if (paymode.Trim() == "2")
                                                                                                    {
                                                                                                        feeamountmonthly = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                                                                                    }
                                                                                                    //============Added by saranya on 19March2018===============//
                                                                                                    int noOfConcession = 0;
                                                                                                    noOfConcession = Convert.ToInt32(txtNoConcession.Text);
                                                                                                    string deductamount1 = string.Empty;
                                                                                                    string deductreason1 = string.Empty;
                                                                                                    string deductamount2 = string.Empty;
                                                                                                    string deductreason2 = string.Empty;
                                                                                                    string deductamount3 = string.Empty;
                                                                                                    string deductreason3 = string.Empty;
                                                                                                    string deductamnt = string.Empty;
                                                                                                    string deductreason = string.Empty;
                                                                                                    double tempDeductAmt = 0;

                                                                                                    if (noOfConcession == 0 || noOfConcession == 1)
                                                                                                    {
                                                                                                        indexvalue++;
                                                                                                        deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        if (deductamnt.Trim() == "")
                                                                                                        {
                                                                                                            deductamnt = "0";
                                                                                                        }
                                                                                                        indexvalue++;
                                                                                                        tempDeductAmt = 0;
                                                                                                        deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                        if (deductreason.Trim() == "")
                                                                                                        {
                                                                                                            deductreason = "0";
                                                                                                            //double.TryParse(deductamnt, out tempDeductAmt);
                                                                                                            //deductamnt = "0";
                                                                                                        }
                                                                                                        deductamount1 = "0";
                                                                                                        deductamount2 = "0";
                                                                                                        deductamount3 = "0";
                                                                                                        deductreason1 = "0";
                                                                                                        deductreason2 = "0";
                                                                                                        deductreason3 = "0";
                                                                                                    }
                                                                                                    if (noOfConcession == 2)
                                                                                                    {
                                                                                                        indexvalue++;
                                                                                                        deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        if (deductamount1.Trim() == "")
                                                                                                        {
                                                                                                            deductamount1 = "0";
                                                                                                        }
                                                                                                        indexvalue++;
                                                                                                        double tempDeductAmt1 = 0;
                                                                                                        deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                        if (deductreason1.Trim() == "")
                                                                                                        {
                                                                                                            deductreason1 = "0";
                                                                                                            //double.TryParse(deductamount1, out tempDeductAmt1);
                                                                                                            //deductamount1 = "0";
                                                                                                        }

                                                                                                        indexvalue++;
                                                                                                        deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        if (deductamount2.Trim() == "")
                                                                                                        {
                                                                                                            deductamount2 = "0";
                                                                                                        }
                                                                                                        indexvalue++;
                                                                                                        double tempDeductAmt2 = 0;
                                                                                                        deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                        if (deductreason2.Trim() == "")
                                                                                                        {
                                                                                                            deductreason2 = "0";
                                                                                                            //double.TryParse(deductamount2, out tempDeductAmt2);
                                                                                                            //deductamount2 = "0";
                                                                                                        }
                                                                                                        indexvalue++;
                                                                                                        deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        if (deductamnt.Trim() == "")
                                                                                                        {
                                                                                                            deductamnt = "0";
                                                                                                        }
                                                                                                        indexvalue++;
                                                                                                        tempDeductAmt = 0;
                                                                                                        deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                        if (deductreason.Trim() == "")
                                                                                                        {
                                                                                                            deductreason = "0";
                                                                                                            //double.TryParse(deductamnt, out tempDeductAmt);
                                                                                                            //deductamnt = "0";
                                                                                                        }

                                                                                                        deductamount3 = "0";
                                                                                                        deductreason3 = "0";

                                                                                                    }
                                                                                                    if (noOfConcession == 3)
                                                                                                    {
                                                                                                        indexvalue++;
                                                                                                        deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        if (deductamount1.Trim() == "")
                                                                                                        {
                                                                                                            deductamount1 = "0";
                                                                                                        }
                                                                                                        indexvalue++;
                                                                                                        double tempDeductAmt1 = 0;
                                                                                                        deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                        if (deductreason1.Trim() == "")
                                                                                                        {
                                                                                                            deductreason1 = "0";
                                                                                                            //double.TryParse(deductamount1, out tempDeductAmt1);
                                                                                                            //deductamount1 = "0";
                                                                                                        }

                                                                                                        indexvalue++;
                                                                                                        deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        if (deductamount2.Trim() == "")
                                                                                                        {
                                                                                                            deductamount2 = "0";
                                                                                                        }
                                                                                                        indexvalue++;
                                                                                                        double tempDeductAmt2 = 0;
                                                                                                        deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                        if (deductreason2.Trim() == "")
                                                                                                        {
                                                                                                            deductreason2 = "0";
                                                                                                            //double.TryParse(deductamount2, out tempDeductAmt2);
                                                                                                            //deductamount2 = "0";
                                                                                                        }

                                                                                                        indexvalue++;
                                                                                                        deductamount3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        if (deductamount3.Trim() == "")
                                                                                                        {
                                                                                                            deductamount3 = "0";
                                                                                                        }
                                                                                                        indexvalue++;
                                                                                                        double tempDeductAmt3 = 0;
                                                                                                        deductreason3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                        if (deductreason3.Trim() == "")
                                                                                                        {
                                                                                                            deductreason3 = "0";
                                                                                                            //double.TryParse(deductamount3, out tempDeductAmt3);
                                                                                                            //deductamount3 = "0";
                                                                                                        }
                                                                                                        indexvalue++;
                                                                                                        deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        if (deductamnt.Trim() == "")
                                                                                                        {
                                                                                                            deductamnt = "0";
                                                                                                        }
                                                                                                        indexvalue++;
                                                                                                        tempDeductAmt = 0;
                                                                                                        deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                        if (deductreason.Trim() == "")
                                                                                                        {
                                                                                                            deductreason = "0";
                                                                                                            //double.TryParse(deductamnt, out tempDeductAmt);
                                                                                                            //deductamnt = "0";
                                                                                                        }
                                                                                                    }

                                                                                                    //==========================================================//


                                                                                                    indexvalue++;
                                                                                                    string totalamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                    double tempTot = 0;
                                                                                                    double.TryParse(totalamnt, out tempTot);
                                                                                                    tempTot += tempDeductAmt;
                                                                                                    totalamnt = Convert.ToString(tempTot);
                                                                                                    indexvalue++;
                                                                                                    string refundamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                    if (refundamnt.Trim() == "")
                                                                                                    {
                                                                                                        refundamnt = "0";
                                                                                                    }
                                                                                                    if (refundamnt.Trim() != "")
                                                                                                    {
                                                                                                        isfeedeposit = "1";
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        isfeedeposit = "0";
                                                                                                    }
                                                                                                    if (ledgerid.Trim() != "")
                                                                                                    {
                                                                                                        indexvalue++;
                                                                                                        string schlSingMul = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);

                                                                                                        indexvalue++;
                                                                                                        string frmgovt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                        //string mulScholarVal = string.Empty;
                                                                                                        if (frmgovt == null || frmgovt.Trim() == "")
                                                                                                        {
                                                                                                            frm = "0";
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            frm = frmgovt;
                                                                                                            if (schlSingMul.Trim().ToUpper() == "TYPE")
                                                                                                            {
                                                                                                                mulScholarVal = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                                                                                            }
                                                                                                        }
                                                                                                        indexvalue++;
                                                                                                        string day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        if (day1.Trim() != "")
                                                                                                        {
                                                                                                            day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            day1 = "";
                                                                                                        }
                                                                                                        indexvalue++;
                                                                                                        string mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        if (mon1.Trim() != "")
                                                                                                        {
                                                                                                            mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            mon1 = "";
                                                                                                        }
                                                                                                        indexvalue++;
                                                                                                        string year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        if (year1.Trim() != "")
                                                                                                        {
                                                                                                            year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            year1 = "";
                                                                                                        }
                                                                                                        if (day1.Trim() != "" && mon1.Trim() != "" && year1.Trim() != "")
                                                                                                        {
                                                                                                            duedt = Convert.ToString(mon1 + "/" + day1 + "/" + year1);
                                                                                                            ddt = Convert.ToDateTime(duedt);
                                                                                                        }
                                                                                                    }
                                                                                                    indexvalue++;
                                                                                                    string fineamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                    if (fineamnt.Trim() == "")
                                                                                                    {
                                                                                                        fineamnt = "0";
                                                                                                    }
                                                                                                    if (ledgerid.Trim() != "")
                                                                                                    {
                                                                                                        indexvalue++;
                                                                                                        string day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        if (day2.Trim() != "")
                                                                                                        {
                                                                                                            day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            day2 = "";
                                                                                                        }
                                                                                                        indexvalue++;
                                                                                                        string mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        if (mon2.Trim() != "")
                                                                                                        {
                                                                                                            mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            mon2 = "";
                                                                                                        }
                                                                                                        indexvalue++;
                                                                                                        string year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        if (year2.Trim() != "")
                                                                                                        {
                                                                                                            year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                        }
                                                                                                        else
                                                                                                        {
                                                                                                            year2 = "";
                                                                                                        }
                                                                                                        if (day2.Trim() != "" && mon2.Trim() != "" && year2.Trim() != "")
                                                                                                        {
                                                                                                            startdt = Convert.ToString(mon2 + "/" + day2 + "/" + year2);
                                                                                                            paydt = Convert.ToDateTime(startdt);
                                                                                                        }
                                                                                                    }
                                                                                                    double fee_amt = 0;
                                                                                                    double ref_amt = 0;
                                                                                                    double tot_amount = 0;
                                                                                                    double.TryParse(feeamnt, out fee_amt);
                                                                                                    double.TryParse(refundamnt, out ref_amt);
                                                                                                    double.TryParse(totalamnt, out tot_amount);
                                                                                                    //fee_amt >= ref_amt 
                                                                                                    if (feeamnt.Trim() != "" && feeamnt.Trim() != null && totalamnt.Trim() != "" && totalamnt.Trim() != null)
                                                                                                    {
                                                                                                        string insupdquery = "if exists (select * from FT_FeeAllotDegree where DegreeCode ='" + cbl_dept.Items[j].Value + "' and BatchYear ='" + cbl_batch.Items[i].Value + "' and FeeCategory ='" + cbl_sem.Items[l].Value + "' and SeatType='" + cbl_seat.Items[k].Value + "' and quota='" + cblQuota.Items[m].Value + "'  and HeaderFK ='" + headerid + "' and LedgerFK ='" + ledgerid + "' and FinYearFK='" + getfinid + "' and HostelMasterFK='" + cblhstlname.Items[hstl].Value + "' and roomtype='" + cblroomtype.Items[room].Text + "' and isHostelFees='1') update FT_FeeAllotDegree set  FeeAmount='" + feeamnt + "',DeductAmout='" + deductamnt + "',DeductReason='" + deductreason + "',TotalAmount='" + totalamnt + "',RefundAmount='" + refundamnt + "',IsFeeDeposit='" + isfeedeposit + "',FeeAmountMonthly='" + feeamountmonthly + "',PayMode='" + paymode + "',PayStartDate='" + ddt + "',DueDate='" + paydt + "',FineAmount='" + fineamnt + "' ,DeductAmount1='" + deductamount1 + "',DeductReason1='" + deductreason1 + "',DeductAmount2='" + deductamount2 + "',DeductReason2='" + deductreason2 + "',DeductAmount3='" + deductamount3 + "',DeductReason3='" + deductreason3 + "' where DegreeCode ='" + cbl_dept.Items[j].Value + "' and BatchYear ='" + cbl_batch.Items[i].Value + "' and FeeCategory ='" + cbl_sem.Items[l].Value + "' and SeatType='" + cbl_seat.Items[k].Value + "' and quota='" + cblQuota.Items[m].Value + "' and HeaderFK ='" + headerid + "' and LedgerFK ='" + ledgerid + "' and FinYearFK='" + getfinid + "' and HostelMasterFK='" + cblhstlname.Items[hstl].Value + "' and roomtype='" + cblroomtype.Items[room].Text + "' and isHostelFees='1' else INSERT INTO FT_FeeAllotDegree(AllotDate,BatchYear,DegreeCode,SeatType,LedgerFK, HeaderFK,FeeAmount,DeductAmout,DeductReason,TotalAmount,RefundAmount, IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,DueDate,FineAmount,FinYearFK,HostelMasterFK,roomtype,isHostelFees,quota,DeductAmount1,DeductReason1,DeductAmount2,DeductReason2,DeductAmount3,DeductReason3) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "','" + cbl_batch.Items[i].Value + "','" + cbl_dept.Items[j].Value + "','" + cbl_seat.Items[k].Value + "','" + ledgerid + "','" + headerid + "','" + feeamnt + "','" + deductamnt + "','" + deductreason + "','" + totalamnt + "','" + refundamnt + "','" + isfeedeposit + "','" + feeamountmonthly + "','" + paymode + "','" + cbl_sem.Items[l].Value + "','" + duedt.ToString() + "','" + startdt.ToString() + "','" + fineamnt + "','" + getfinid + "','" + cblhstlname.Items[hstl].Value + "','" + cblroomtype.Items[room].Text + "','1','" + cblQuota.Items[m].Value + "','" + deductamount1 + "','" + deductreason1 + "','" + deductamount2 + "','" + deductreason2 + "','" + deductamount3 + "','" + deductreason3 + "' )";

                                                                                                        int inscount = d2.update_method_wo_parameter(insupdquery, "Text");
                                                                                                        if (inscount > 0)
                                                                                                        {
                                                                                                            inscheck = true;
                                                                                                        }
                                                                                                        //===========Added by Saranya on 10/04/2018=================//
                                                                                                        int savevalue = 1;
                                                                                                        string entrycode = Session["Entry_Code"].ToString();
                                                                                                        string formname = "FeeAllot";
                                                                                                        string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                                                                        string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                                                                        IPHostEntry host;
                                                                                                        string localip = "";
                                                                                                        host = Dns.GetHostEntry(Dns.GetHostName());
                                                                                                        foreach (IPAddress ip in host.AddressList)
                                                                                                        {
                                                                                                            if (ip.AddressFamily.ToString() == "InterNetwork")
                                                                                                            {
                                                                                                                localip = ip.ToString();
                                                                                                            }
                                                                                                        }
                                                                                                        string details = "Batch Year - " + cbl_batch.Items[i].Value + " : Degree - " + cbl_dept.Items[j].Text + " : Semester - " + cbl_sem.Items[l].Text + " : HostelName -" + cblhstlname.Items[hstl].Text + " : SeatType - " + cbl_seat.Items[k].Text + " : Allot Amt -" + feeamnt + " : Date - " + toa + "";//:Allot Ledger-" +ledgername + ":Allot Amt-" +allotamt +"";

                                                                                                        string ctsname = "";
                                                                                                        if (savevalue == 1)
                                                                                                        {
                                                                                                            ctsname = "Fee Alloted";
                                                                                                        }
                                                                                                        string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                                                                        d2.insertEinanceUserActionLog(entrycode, formname, 1, toa, doa, details, ctsname, localip);
                                                                                                        //===========================================================//
                                                                                                    }
                                                                                                    else
                                                                                                    {
                                                                                                        string delquery = "delete FT_FeeAllotDegree where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + cbl_sem.Items[l].Value + "') and BatchYear ='" + cbl_batch.Items[i].Value + "' and DegreeCode ='" + cbl_dept.Items[j].Value + "' and SeatType='" + cbl_seat.Items[k].Value + "' and FinYearFK='" + getfinid + "' and HostelMasterFK='" + cblhstlname.Items[hstl].Value + "' and roomtype='" + cblroomtype.Items[room].Text + "' and isHostelFees='1' and quota='" + cblQuota.Items[m].Value + "'";
                                                                                                        int delcount = d2.update_method_wo_parameter(delquery, "Text");
                                                                                                        if (delcount > 0)
                                                                                                        {
                                                                                                            inscheck = true;
                                                                                                        }
                                                                                                        //===============Added by Saranya on 10/04/2018=====================//
                                                                                                        int savevalue = 3;
                                                                                                        string entrycode = Session["Entry_Code"].ToString();
                                                                                                        string formname = "FeeAllotDelete";
                                                                                                        string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                                                                        string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                                                                        IPHostEntry host;
                                                                                                        string localip = "";
                                                                                                        host = Dns.GetHostEntry(Dns.GetHostName());
                                                                                                        foreach (IPAddress ip in host.AddressList)
                                                                                                        {
                                                                                                            if (ip.AddressFamily.ToString() == "InterNetwork")
                                                                                                            {
                                                                                                                localip = ip.ToString();
                                                                                                            }
                                                                                                        }
                                                                                                        string details = "Batch Year - " + cbl_batch.Items[i].Value + " : Degree - " + cbl_dept.Items[j].Text + " : Semester - " + cbl_sem.Items[l].Text + " : HostelName -" + cblhstlname.Items[hstl].Text + " : SeatType - " + cbl_seat.Items[k].Text + " : Allot Amt-" + feeamnt + " : Date - " + toa + "";//:Allot Ledger-" +ledgername + ":Allot Amt-" +allotamt +"";

                                                                                                        string ctsname = "";
                                                                                                        if (savevalue == 3)
                                                                                                        {
                                                                                                            ctsname = "Fee Allot Deleted";
                                                                                                        }
                                                                                                        string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                                                                        d2.insertEinanceUserActionLog(entrycode, formname, 3, toa, doa, details, ctsname, localip);
                                                                                                        //==========================================================//
                                                                                                    }
                                                                                                }
                                                                                                //else
                                                                                                //{
                                                                                                //    string delquery = "delete FT_FeeAllotDegree where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + cbl_sem.Items[l].Value + "')";
                                                                                                //    int delcount = d2.update_method_wo_parameter(delquery, "Text");
                                                                                                //    if (delcount > 0)
                                                                                                //    {
                                                                                                //        inscheck = true;
                                                                                                //    }
                                                                                                //}
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            else
                            {
                                for (int hstl = 0; hstl < cblhstlname.Items.Count; hstl++)
                                {
                                    if (cblhstlname.Items[hstl].Selected == true)
                                    {
                                        hostelOK = true;
                                        for (int room = 0; room < cblroomtype.Items.Count; room++)
                                        {
                                            if (cblroomtype.Items[room].Selected == true)
                                            {
                                                roomOK = true;
                                                for (int i = 0; i < cbl_batch.Items.Count; i++)
                                                {
                                                    if (cbl_batch.Items[i].Selected == true)
                                                    {
                                                        batchOk = true;

                                                        for (int j = 0; j < cbl_dept.Items.Count; j++)
                                                        {

                                                            if (cbl_dept.Items[j].Selected == true)
                                                            {
                                                                deptOk = true;
                                                                for (int k = 0; k < cbl_seat.Items.Count; k++)
                                                                {
                                                                    if (cbl_seat.Items[k].Selected == true)
                                                                    {
                                                                        seatOk = true;

                                                                        for (int l = 0; l < cbl_sem.Items.Count; l++)
                                                                        {
                                                                            if (cbl_sem.Items[l].Selected == true)
                                                                            {
                                                                                int indexvalue = 1;
                                                                                if (FpSpread1.Sheets[0].RowCount > 0)
                                                                                {
                                                                                    for (int ro = 1; ro < FpSpread1.Sheets[0].RowCount; ro++)
                                                                                    {
                                                                                        indexvalue = Convert.ToInt32(check[Convert.ToString(cbl_sem.Items[l].Value)]);
                                                                                        string headerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 0].Tag);
                                                                                        string ledgerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 1].Tag);
                                                                                        string feeamountmonthly = "";
                                                                                        if (headerid.Trim() != "" && ledgerid.Trim() != "")
                                                                                        {
                                                                                            string paymode = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                            if (paymode.Trim() == "Regular")
                                                                                            {
                                                                                                paymode = "1";
                                                                                                feeamountmonthly = "";
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                paymode = "2";
                                                                                                feeamountmonthly = "";
                                                                                            }
                                                                                            indexvalue++;
                                                                                            string feeamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                            if (paymode.Trim() == "2")
                                                                                            {
                                                                                                feeamountmonthly = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                                                                            }

                                                                                            //============Added by saranya on 19March2018===============//
                                                                                            int noOfConcession = 0;
                                                                                            noOfConcession = Convert.ToInt32(txtNoConcession.Text);
                                                                                            string deductamount1 = string.Empty;
                                                                                            string deductreason1 = string.Empty;
                                                                                            string deductamount2 = string.Empty;
                                                                                            string deductreason2 = string.Empty;
                                                                                            string deductamount3 = string.Empty;
                                                                                            string deductreason3 = string.Empty;
                                                                                            string deductamnt = string.Empty;
                                                                                            string deductreason = string.Empty;
                                                                                            double tempDeductAmt = 0;

                                                                                            if (noOfConcession == 0 || noOfConcession == 1)
                                                                                            {
                                                                                                indexvalue++;
                                                                                                deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                if (deductamnt.Trim() == "")
                                                                                                {
                                                                                                    deductamnt = "0";
                                                                                                }
                                                                                                indexvalue++;
                                                                                                tempDeductAmt = 0;
                                                                                                deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                if (deductreason.Trim() == "")
                                                                                                {
                                                                                                    deductreason = "0";
                                                                                                    double.TryParse(deductamnt, out tempDeductAmt);
                                                                                                    deductamnt = "0";
                                                                                                }
                                                                                                deductamount1 = "0";
                                                                                                deductamount2 = "0";
                                                                                                deductamount3 = "0";
                                                                                                deductreason1 = "0";
                                                                                                deductreason2 = "0";
                                                                                                deductreason3 = "0";
                                                                                            }
                                                                                            if (noOfConcession == 2)
                                                                                            {
                                                                                                indexvalue++;
                                                                                                deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                if (deductamount1.Trim() == "")
                                                                                                {
                                                                                                    deductamount1 = "0";
                                                                                                }
                                                                                                indexvalue++;
                                                                                                double tempDeductAmt1 = 0;
                                                                                                deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                if (deductreason1.Trim() == "")
                                                                                                {
                                                                                                    deductreason1 = "0";
                                                                                                    double.TryParse(deductamount1, out tempDeductAmt1);
                                                                                                    deductamount1 = "0";
                                                                                                }

                                                                                                indexvalue++;
                                                                                                deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                if (deductamount2.Trim() == "")
                                                                                                {
                                                                                                    deductamount2 = "0";
                                                                                                }
                                                                                                indexvalue++;
                                                                                                double tempDeductAmt2 = 0;
                                                                                                deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                if (deductreason2.Trim() == "")
                                                                                                {
                                                                                                    deductreason2 = "0";
                                                                                                    double.TryParse(deductamount2, out tempDeductAmt2);
                                                                                                    deductamount2 = "0";
                                                                                                }
                                                                                                indexvalue++;
                                                                                                deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                if (deductamnt.Trim() == "")
                                                                                                {
                                                                                                    deductamnt = "0";
                                                                                                }
                                                                                                indexvalue++;
                                                                                                tempDeductAmt = 0;
                                                                                                deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                if (deductreason.Trim() == "")
                                                                                                {
                                                                                                    deductreason = "0";
                                                                                                    double.TryParse(deductamnt, out tempDeductAmt);
                                                                                                    deductamnt = "0";
                                                                                                }

                                                                                                deductamount3 = "0";
                                                                                                deductreason3 = "0";

                                                                                            }
                                                                                            if (noOfConcession == 3)
                                                                                            {
                                                                                                indexvalue++;
                                                                                                deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                if (deductamount1.Trim() == "")
                                                                                                {
                                                                                                    deductamount1 = "0";
                                                                                                }
                                                                                                indexvalue++;
                                                                                                double tempDeductAmt1 = 0;
                                                                                                deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                if (deductreason1.Trim() == "")
                                                                                                {
                                                                                                    deductreason1 = "0";
                                                                                                    double.TryParse(deductamount1, out tempDeductAmt1);
                                                                                                    deductamount1 = "0";
                                                                                                }

                                                                                                indexvalue++;
                                                                                                deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                if (deductamount2.Trim() == "")
                                                                                                {
                                                                                                    deductamount2 = "0";
                                                                                                }
                                                                                                indexvalue++;
                                                                                                double tempDeductAmt2 = 0;
                                                                                                deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                if (deductreason2.Trim() == "")
                                                                                                {
                                                                                                    deductreason2 = "0";
                                                                                                    double.TryParse(deductamount2, out tempDeductAmt2);
                                                                                                    deductamount2 = "0";
                                                                                                }

                                                                                                indexvalue++;
                                                                                                deductamount3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                if (deductamount3.Trim() == "")
                                                                                                {
                                                                                                    deductamount3 = "0";
                                                                                                }
                                                                                                indexvalue++;
                                                                                                double tempDeductAmt3 = 0;
                                                                                                deductreason3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                if (deductreason3.Trim() == "")
                                                                                                {
                                                                                                    deductreason3 = "0";
                                                                                                    double.TryParse(deductamount3, out tempDeductAmt3);
                                                                                                    deductamount3 = "0";
                                                                                                }
                                                                                                indexvalue++;
                                                                                                deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                if (deductamnt.Trim() == "")
                                                                                                {
                                                                                                    deductamnt = "0";
                                                                                                }
                                                                                                indexvalue++;
                                                                                                tempDeductAmt = 0;
                                                                                                deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                if (deductreason.Trim() == "")
                                                                                                {
                                                                                                    deductreason = "0";
                                                                                                    double.TryParse(deductamnt, out tempDeductAmt);
                                                                                                    deductamnt = "0";
                                                                                                }
                                                                                            }

                                                                                            //==========================================================//
                                                                                            indexvalue++;
                                                                                            string totalamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                            double tempTot = 0;
                                                                                            double.TryParse(totalamnt, out tempTot);
                                                                                            tempTot += tempDeductAmt;
                                                                                            totalamnt = Convert.ToString(tempTot);
                                                                                            indexvalue++;
                                                                                            string refundamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                            if (refundamnt.Trim() == "")
                                                                                            {
                                                                                                refundamnt = "0";
                                                                                            }
                                                                                            if (refundamnt.Trim() != "")
                                                                                            {
                                                                                                isfeedeposit = "1";
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                isfeedeposit = "0";
                                                                                            }
                                                                                            if (ledgerid.Trim() != "")
                                                                                            {
                                                                                                indexvalue++;
                                                                                                string schlSingMul = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);

                                                                                                indexvalue++;
                                                                                                string frmgovt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                                                //string mulScholarVal = string.Empty;
                                                                                                if (frmgovt == null || frmgovt.Trim() == "")
                                                                                                {
                                                                                                    frm = "0";
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    frm = frmgovt;
                                                                                                    if (schlSingMul.Trim().ToUpper() == "TYPE")
                                                                                                    {
                                                                                                        mulScholarVal = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                                                                                    }
                                                                                                }
                                                                                                indexvalue++;
                                                                                                string day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                if (day1.Trim() != "")
                                                                                                {
                                                                                                    day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    day1 = "";
                                                                                                }
                                                                                                indexvalue++;
                                                                                                string mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                if (mon1.Trim() != "")
                                                                                                {
                                                                                                    mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    mon1 = "";
                                                                                                }
                                                                                                indexvalue++;
                                                                                                string year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                if (year1.Trim() != "")
                                                                                                {
                                                                                                    year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    year1 = "";
                                                                                                }
                                                                                                if (day1.Trim() != "" && mon1.Trim() != "" && year1.Trim() != "")
                                                                                                {
                                                                                                    duedt = Convert.ToString(mon1 + "/" + day1 + "/" + year1);
                                                                                                    ddt = Convert.ToDateTime(duedt);
                                                                                                }
                                                                                            }
                                                                                            indexvalue++;
                                                                                            string fineamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                            if (fineamnt.Trim() == "")
                                                                                            {
                                                                                                fineamnt = "0";
                                                                                            }
                                                                                            if (ledgerid.Trim() != "")
                                                                                            {
                                                                                                indexvalue++;
                                                                                                string day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                if (day2.Trim() != "")
                                                                                                {
                                                                                                    day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    day2 = "";
                                                                                                }
                                                                                                indexvalue++;
                                                                                                string mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                if (mon2.Trim() != "")
                                                                                                {
                                                                                                    mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    mon2 = "";
                                                                                                }
                                                                                                indexvalue++;
                                                                                                string year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                if (year2.Trim() != "")
                                                                                                {
                                                                                                    year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                                                }
                                                                                                else
                                                                                                {
                                                                                                    year2 = "";
                                                                                                }
                                                                                                if (day2.Trim() != "" && mon2.Trim() != "" && year2.Trim() != "")
                                                                                                {
                                                                                                    startdt = Convert.ToString(mon2 + "/" + day2 + "/" + year2);
                                                                                                    paydt = Convert.ToDateTime(startdt);
                                                                                                }
                                                                                            }
                                                                                            double fee_amt = 0;
                                                                                            double ref_amt = 0;
                                                                                            double tot_amount = 0;
                                                                                            double.TryParse(feeamnt, out fee_amt);
                                                                                            double.TryParse(refundamnt, out ref_amt);
                                                                                            double.TryParse(totalamnt, out tot_amount);
                                                                                            //fee_amt >= ref_amt 
                                                                                            if (feeamnt.Trim() != "" && feeamnt.Trim() != null && totalamnt.Trim() != "" && totalamnt.Trim() != null)
                                                                                            {
                                                                                                string insupdquery = "if exists (select * from FT_FeeAllotDegree where DegreeCode ='" + cbl_dept.Items[j].Value + "' and BatchYear ='" + cbl_batch.Items[i].Value + "' and FeeCategory ='" + cbl_sem.Items[l].Value + "' and SeatType='" + cbl_seat.Items[k].Value + "' and   HeaderFK ='" + headerid + "' and LedgerFK ='" + ledgerid + "' and FinYearFK='" + getfinid + "' and HostelMasterFK='" + cblhstlname.Items[hstl].Value + "' and roomtype='" + cblroomtype.Items[room].Text + "' and isHostelFees='1' ) update FT_FeeAllotDegree set  FeeAmount='" + feeamnt + "',DeductAmout='" + deductamnt + "',DeductReason='" + deductreason + "',TotalAmount='" + totalamnt + "',RefundAmount='" + refundamnt + "',IsFeeDeposit='" + isfeedeposit + "',FeeAmountMonthly='" + feeamountmonthly + "',PayMode='" + paymode + "',PayStartDate='" + ddt + "',DueDate='" + paydt + "',FineAmount='" + fineamnt + "',DeductAmount1='" + deductamount1 + "',DeductReason1='" + deductreason1 + "',DeductAmount2='" + deductamount2 + "',DeductReason2='" + deductreason2 + "',DeductAmount3='" + deductamount3 + "',DeductReason3='" + deductreason3 + "' where DegreeCode ='" + cbl_dept.Items[j].Value + "' and BatchYear ='" + cbl_batch.Items[i].Value + "' and FeeCategory ='" + cbl_sem.Items[l].Value + "' and SeatType='" + cbl_seat.Items[k].Value + "'  and HeaderFK ='" + headerid + "' and LedgerFK ='" + ledgerid + "' and FinYearFK='" + getfinid + "' and HostelMasterFK='" + cblhstlname.Items[hstl].Value + "' and roomtype='" + cblroomtype.Items[room].Text + "' and isHostelFees='1' else INSERT INTO FT_FeeAllotDegree(AllotDate,BatchYear,DegreeCode,SeatType,LedgerFK,HeaderFK,FeeAmount,DeductAmout,DeductReason,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,DueDate,FineAmount,FinYearFK,HostelMasterFK,roomtype,isHostelFees,DeductAmount1,DeductReason1,DeductAmount2,DeductReason2,DeductAmount3,DeductReason3) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "','" + cbl_batch.Items[i].Value + "','" + cbl_dept.Items[j].Value + "','" + cbl_seat.Items[k].Value + "','" + ledgerid + "','" + headerid + "','" + feeamnt + "','" + deductamnt + "','" + deductreason + "','" + totalamnt + "','" + refundamnt + "','" + isfeedeposit + "','" + feeamountmonthly + "','" + paymode + "','" + cbl_sem.Items[l].Value + "','" + duedt.ToString() + "','" + startdt.ToString() + "','" + fineamnt + "','" + getfinid + "','" + cblhstlname.Items[hstl].Value + "','" + cblroomtype.Items[room].Text + "','1','" + deductamount1 + "','" + deductreason1 + "','" + deductamount2 + "','" + deductreason2 + "','" + deductamount3 + "','" + deductreason3 + "' )";

                                                                                                int inscount = d2.update_method_wo_parameter(insupdquery, "Text");
                                                                                                if (inscount > 0)
                                                                                                {
                                                                                                    inscheck = true;
                                                                                                }
                                                                                                //====================Added by Saranya on 10/04/2018==========================//
                                                                                                int savevalue = 1;
                                                                                                string entrycode = Session["Entry_Code"].ToString();
                                                                                                string formname = "FeeAllot";
                                                                                                string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                                                                string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                                                                IPHostEntry host;
                                                                                                string localip = "";
                                                                                                host = Dns.GetHostEntry(Dns.GetHostName());
                                                                                                foreach (IPAddress ip in host.AddressList)
                                                                                                {
                                                                                                    if (ip.AddressFamily.ToString() == "InterNetwork")
                                                                                                    {
                                                                                                        localip = ip.ToString();
                                                                                                    }
                                                                                                }
                                                                                                string details = "Batch Year - " + cbl_batch.Items[i].Value + " : Degree - " + cbl_dept.Items[j].Text + " : Semester - " + cbl_sem.Items[l].Text + " : HostelName -" + cblhstlname.Items[hstl].Text + " : SeatType - " + cbl_seat.Items[k].Text + " : Allot Amt -" + feeamnt + " : Date - " + toa + " ";
                                                                                                string ctsname = "";
                                                                                                if (savevalue == 1)
                                                                                                {
                                                                                                    ctsname = "Fee Alloted";
                                                                                                }
                                                                                                string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                                                                d2.insertEinanceUserActionLog(entrycode, formname, 1, toa, doa, details, ctsname, localip);
                                                                                                //============================================================================//
                                                                                            }
                                                                                            else
                                                                                            {
                                                                                                string delquery = "delete FT_FeeAllotDegree where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + cbl_sem.Items[l].Value + "') and BatchYear ='" + cbl_batch.Items[i].Value + "' and DegreeCode ='" + cbl_dept.Items[j].Value + "' and SeatType='" + cbl_seat.Items[k].Value + "' and FinYearFK='" + getfinid + "' and HostelMasterFK='" + cblhstlname.Items[hstl].Value + "' and roomtype='" + cblroomtype.Items[room].Text + "' and isHostelFees='1'";
                                                                                                int delcount = d2.update_method_wo_parameter(delquery, "Text");
                                                                                                if (delcount > 0)
                                                                                                {
                                                                                                    inscheck = true;
                                                                                                }
                                                                                                //====================Added by Saranya on 10/04/2018==========================//
                                                                                                int savevalue = 3;
                                                                                                string entrycode = Session["Entry_Code"].ToString();
                                                                                                string formname = "FeeAllotDelete";
                                                                                                string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                                                                string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                                                                IPHostEntry host;
                                                                                                string localip = "";
                                                                                                host = Dns.GetHostEntry(Dns.GetHostName());
                                                                                                foreach (IPAddress ip in host.AddressList)
                                                                                                {
                                                                                                    if (ip.AddressFamily.ToString() == "InterNetwork")
                                                                                                    {
                                                                                                        localip = ip.ToString();
                                                                                                    }
                                                                                                }
                                                                                                string details = "Batch Year - " + cbl_batch.Items[i].Value + " : Degree - " + cbl_dept.Items[j].Text + " : Semester - " + cbl_sem.Items[l].Text + " : HostelName -" + cblhstlname.Items[hstl].Text + " : SeatType - " + cbl_seat.Items[k].Text + " : Allot Amt-" + feeamnt + " : Date - " + toa + " ";//:Allot Ledger-" +ledgername + ":Allot Amt-" +allotamt +"";                                                                                     
                                                                                                string ctsname = "";
                                                                                                if (savevalue == 3)
                                                                                                {
                                                                                                    ctsname = "Fee Allot Deleted";
                                                                                                }
                                                                                                string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                                                                d2.insertEinanceUserActionLog(entrycode, formname, 3, toa, doa, details, ctsname, localip);
                                                                                                //============================================================================//
                                                                                            }
                                                                                        }
                                                                                        //else
                                                                                        //{
                                                                                        //    string delquery = "delete FT_FeeAllotDegree where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + cbl_sem.Items[l].Value + "')";
                                                                                        //    int delcount = d2.update_method_wo_parameter(delquery, "Text");
                                                                                        //    if (delcount > 0)
                                                                                        //    {
                                                                                        //        inscheck = true;
                                                                                        //    }
                                                                                        //}

                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                    }
                                }
                            }
                            #endregion
                        }
                    }
                    else
                    {
                        hostelOK = true;
                        roomOK = true;
                        #region
                        if (cblQuota.Items.Count > 0)
                        {
                            for (int i = 0; i < cbl_batch.Items.Count; i++)
                            {
                                if (!cbl_batch.Items[i].Selected == true)
                                    continue;
                                batchOk = true;
                                for (int j = 0; j < cbl_dept.Items.Count; j++)
                                {
                                    if (!cbl_dept.Items[j].Selected == true)
                                        continue;
                                    deptOk = true;
                                    for (int k = 0; k < cbl_seat.Items.Count; k++)
                                    {
                                        if (!cbl_seat.Items[k].Selected == true)
                                            continue;
                                        seatOk = true;
                                        for (int m = 0; m < cblQuota.Items.Count; m++)
                                        {
                                            if (!cblQuota.Items[m].Selected == true)
                                                continue;
                                            Quotaok = true;

                                            for (int comm = 0; comm < cbl_community.Items.Count; comm++)
                                            {
                                                if (!cbl_community.Items[comm].Selected)
                                                    continue;


                                                for (int l = 0; l < cbl_sem.Items.Count; l++)
                                                {
                                                    if (!cbl_sem.Items[l].Selected == true)
                                                        continue;
                                                    int indexvalue = 1;
                                                    if (FpSpread1.Sheets[0].RowCount > 0)
                                                    {
                                                        for (int ro = 1; ro < FpSpread1.Sheets[0].RowCount; ro++)
                                                        {
                                                            #region
                                                            indexvalue = Convert.ToInt32(check[Convert.ToString(cbl_sem.Items[l].Value)]);
                                                            string headerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 0].Tag);
                                                            string ledgerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 1].Tag);
                                                            string feeamountmonthly = "";
                                                            if (headerid.Trim() != "" && ledgerid.Trim() != "")
                                                            {
                                                                string paymode = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                if (paymode.Trim() == "Regular")
                                                                {
                                                                    paymode = "1";
                                                                    feeamountmonthly = "";
                                                                }
                                                                else
                                                                {
                                                                    paymode = "2";
                                                                    feeamountmonthly = "";
                                                                }
                                                                indexvalue++;
                                                                string feeamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                if (paymode.Trim() == "2")
                                                                {
                                                                    feeamountmonthly = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                                                }

                                                                //============Added by saranya on 19March2018===============//
                                                                int noOfConcession = 0;
                                                                noOfConcession = Convert.ToInt32(txtNoConcession.Text);
                                                                string deductamount1 = string.Empty;
                                                                string deductreason1 = string.Empty;
                                                                string deductamount2 = string.Empty;
                                                                string deductreason2 = string.Empty;
                                                                string deductamount3 = string.Empty;
                                                                string deductreason3 = string.Empty;
                                                                string deductamnt = string.Empty;
                                                                string deductreason = string.Empty;
                                                                double tempDeductAmt = 0;

                                                                if (noOfConcession == 0 || noOfConcession == 1)
                                                                {
                                                                    indexvalue++;
                                                                    deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    if (deductamnt.Trim() == "")
                                                                    {
                                                                        deductamnt = "0";
                                                                    }
                                                                    indexvalue++;
                                                                    tempDeductAmt = 0;
                                                                    deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                    if (deductreason.Trim() == "")
                                                                    {
                                                                        deductreason = "0";
                                                                        //double.TryParse(deductamnt, out tempDeductAmt);
                                                                        //deductamnt = "0";
                                                                    }
                                                                    deductamount1 = "0";
                                                                    deductamount2 = "0";
                                                                    deductamount3 = "0";
                                                                    deductreason1 = "0";
                                                                    deductreason2 = "0";
                                                                    deductreason3 = "0";
                                                                }
                                                                if (noOfConcession == 2)
                                                                {
                                                                    indexvalue++;
                                                                    deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    if (deductamount1.Trim() == "")
                                                                    {
                                                                        deductamount1 = "0";
                                                                    }
                                                                    indexvalue++;
                                                                    double tempDeductAmt1 = 0;
                                                                    deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                    if (deductreason1.Trim() == "")
                                                                    {
                                                                        deductreason1 = "0";
                                                                        //double.TryParse(deductamount1, out tempDeductAmt1);
                                                                        //deductamount1 = "0";
                                                                    }

                                                                    indexvalue++;
                                                                    deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    if (deductamount2.Trim() == "")
                                                                    {
                                                                        deductamount2 = "0";
                                                                    }
                                                                    indexvalue++;
                                                                    double tempDeductAmt2 = 0;
                                                                    deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                    if (deductreason2.Trim() == "")
                                                                    {
                                                                        deductreason2 = "0";
                                                                        //double.TryParse(deductamount2, out tempDeductAmt2);
                                                                        //deductamount2 = "0";
                                                                    }
                                                                    indexvalue++;
                                                                    deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    if (deductamnt.Trim() == "")
                                                                    {
                                                                        deductamnt = "0";
                                                                    }
                                                                    indexvalue++;
                                                                    tempDeductAmt = 0;
                                                                    deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                    if (deductreason.Trim() == "")
                                                                    {
                                                                        deductreason = "0";
                                                                        //double.TryParse(deductamnt, out tempDeductAmt);
                                                                        //deductamnt = "0";
                                                                    }

                                                                    deductamount3 = "0";
                                                                    deductreason3 = "0";

                                                                }
                                                                if (noOfConcession == 3)
                                                                {
                                                                    indexvalue++;
                                                                    deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    if (deductamount1.Trim() == "")
                                                                    {
                                                                        deductamount1 = "0";
                                                                    }
                                                                    indexvalue++;
                                                                    double tempDeductAmt1 = 0;
                                                                    deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                    if (deductreason1.Trim() == "")
                                                                    {
                                                                        deductreason1 = "0";
                                                                        //double.TryParse(deductamount1, out tempDeductAmt1);
                                                                        //deductamount1 = "0";
                                                                    }

                                                                    indexvalue++;
                                                                    deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    if (deductamount2.Trim() == "")
                                                                    {
                                                                        deductamount2 = "0";
                                                                    }
                                                                    indexvalue++;
                                                                    double tempDeductAmt2 = 0;
                                                                    deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                    if (deductreason2.Trim() == "")
                                                                    {
                                                                        deductreason2 = "0";
                                                                        //double.TryParse(deductamount2, out tempDeductAmt2);
                                                                        //deductamount2 = "0";
                                                                    }

                                                                    indexvalue++;
                                                                    deductamount3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    if (deductamount3.Trim() == "")
                                                                    {
                                                                        deductamount3 = "0";
                                                                    }
                                                                    indexvalue++;
                                                                    double tempDeductAmt3 = 0;
                                                                    deductreason3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                    if (deductreason3.Trim() == "")
                                                                    {
                                                                        deductreason3 = "0";
                                                                        //double.TryParse(deductamount3, out tempDeductAmt3);
                                                                        //deductamount3 = "0";
                                                                    }
                                                                    indexvalue++;
                                                                    deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    if (deductamnt.Trim() == "")
                                                                    {
                                                                        deductamnt = "0";
                                                                    }
                                                                    indexvalue++;
                                                                    tempDeductAmt = 0;
                                                                    deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                    if (deductreason.Trim() == "")
                                                                    {
                                                                        deductreason = "0";
                                                                        //double.TryParse(deductamnt, out tempDeductAmt);
                                                                        //deductamnt = "0";
                                                                    }
                                                                }

                                                                //==========================================================//

                                                                indexvalue++;
                                                                string totalamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                double tempTot = 0;
                                                                double.TryParse(totalamnt, out tempTot);
                                                                tempTot += tempDeductAmt;
                                                                totalamnt = Convert.ToString(tempTot);
                                                                indexvalue++;
                                                                string refundamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                if (refundamnt.Trim() == "")
                                                                {
                                                                    refundamnt = "0";
                                                                }
                                                                if (refundamnt.Trim() != "")
                                                                {
                                                                    isfeedeposit = "1";
                                                                }
                                                                else
                                                                {
                                                                    isfeedeposit = "0";
                                                                }
                                                                if (ledgerid.Trim() != "")
                                                                {
                                                                    indexvalue++;
                                                                    string schlSingMul = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);

                                                                    indexvalue++;
                                                                    string frmgovt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                    //string mulScholarVal = string.Empty;
                                                                    if (frmgovt == null || frmgovt.Trim() == "")
                                                                    {
                                                                        frm = "0";
                                                                    }
                                                                    else
                                                                    {
                                                                        frm = frmgovt;
                                                                        if (schlSingMul.Trim().ToUpper() == "TYPE")
                                                                        {
                                                                            mulScholarVal = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                                                        }
                                                                    }
                                                                    indexvalue++;
                                                                    string day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    if (day1.Trim() != "")
                                                                    {
                                                                        day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    }
                                                                    else
                                                                    {
                                                                        day1 = "";
                                                                    }
                                                                    indexvalue++;
                                                                    string mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    if (mon1.Trim() != "")
                                                                    {
                                                                        mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    }
                                                                    else
                                                                    {
                                                                        mon1 = "";
                                                                    }
                                                                    indexvalue++;
                                                                    string year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    if (year1.Trim() != "")
                                                                    {
                                                                        year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    }
                                                                    else
                                                                    {
                                                                        year1 = "";
                                                                    }
                                                                    if (day1.Trim() != "" && mon1.Trim() != "" && year1.Trim() != "")
                                                                    {
                                                                        duedt = Convert.ToString(mon1 + "/" + day1 + "/" + year1);
                                                                        ddt = Convert.ToDateTime(duedt);
                                                                    }
                                                                }
                                                                indexvalue++;
                                                                string fineamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                if (fineamnt.Trim() == "")
                                                                {
                                                                    fineamnt = "0";
                                                                }
                                                                if (ledgerid.Trim() != "")
                                                                {
                                                                    indexvalue++;
                                                                    string day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    if (day2.Trim() != "")
                                                                    {
                                                                        day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    }
                                                                    else
                                                                    {
                                                                        day2 = "";
                                                                    }
                                                                    indexvalue++;
                                                                    string mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    if (mon2.Trim() != "")
                                                                    {
                                                                        mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    }
                                                                    else
                                                                    {
                                                                        mon2 = "";
                                                                    }
                                                                    indexvalue++;
                                                                    string year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    if (year2.Trim() != "")
                                                                    {
                                                                        year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                    }
                                                                    else
                                                                    {
                                                                        year2 = "";
                                                                    }
                                                                    if (day2.Trim() != "" && mon2.Trim() != "" && year2.Trim() != "")
                                                                    {
                                                                        startdt = Convert.ToString(mon2 + "/" + day2 + "/" + year2);
                                                                        paydt = Convert.ToDateTime(startdt);
                                                                    }
                                                                }
                                                                double fee_amt = 0;
                                                                double ref_amt = 0;
                                                                double tot_amount = 0;
                                                                double.TryParse(feeamnt, out fee_amt);
                                                                double.TryParse(refundamnt, out ref_amt);
                                                                double.TryParse(totalamnt, out tot_amount);
                                                                //fee_amt >= ref_amt 
                                                                if (feeamnt.Trim() != "" && feeamnt.Trim() != null && totalamnt.Trim() != "" && totalamnt.Trim() != null)
                                                                {
                                                                    string insupdquery = "if exists (select * from FT_FeeAllotDegree where DegreeCode ='" + cbl_dept.Items[j].Value + "' and BatchYear ='" + cbl_batch.Items[i].Value + "' and FeeCategory ='" + cbl_sem.Items[l].Value + "' and SeatType='" + cbl_seat.Items[k].Value + "' and quota='" + cblQuota.Items[m].Value + "' and HeaderFK ='" + headerid + "' and LedgerFK ='" + ledgerid + "' and FinYearFK='" + getfinid + "' and CommunityCode='" + cbl_community.Items[comm].Value + "' and isnull(IsCommunity,'0')='1' ) update FT_FeeAllotDegree set FeeAmount='" + feeamnt + "',DeductAmout='" + deductamnt + "',DeductReason='" + deductreason + "',TotalAmount='" + totalamnt + "',RefundAmount='" + refundamnt + "',IsFeeDeposit='" + isfeedeposit + "',FeeAmountMonthly='" + feeamountmonthly + "',PayMode='" + paymode + "',PayStartDate='" + ddt + "',DueDate='" + paydt + "',FineAmount='" + fineamnt + "',DeductAmount1='" + deductamount1 + "',DeductReason1='" + deductreason1 + "',DeductAmount2='" + deductamount2 + "',DeductReason2='" + deductreason2 + "',DeductAmount3='" + deductamount3 + "',DeductReason3='" + deductreason3 + "' where DegreeCode ='" + cbl_dept.Items[j].Value + "' and BatchYear ='" + cbl_batch.Items[i].Value + "' and FeeCategory ='" + cbl_sem.Items[l].Value + "' and SeatType='" + cbl_seat.Items[k].Value + "'  and quota='" + cblQuota.Items[m].Value + "' and HeaderFK ='" + headerid + "' and LedgerFK ='" + ledgerid + "' and FinYearFK='" + getfinid + "' and CommunityCode='" + cbl_community.Items[comm].Value + "' and isnull(IsCommunity,'0')='1' else INSERT INTO FT_FeeAllotDegree(AllotDate,BatchYear,DegreeCode,SeatType,LedgerFK,HeaderFK,FeeAmount,DeductAmout,DeductReason,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,DueDate,FineAmount,FinYearFK,CommunityCode,IsCommunity,quota,DeductAmount1,DeductReason1,DeductAmount2,DeductReason2,DeductAmount3,DeductReason3) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "','" + cbl_batch.Items[i].Value + "','" + cbl_dept.Items[j].Value + "','" + cbl_seat.Items[k].Value + "','" + ledgerid + "','" + headerid + "','" + feeamnt + "','" + deductamnt + "','" + deductreason + "','" + totalamnt + "','" + refundamnt + "','" + isfeedeposit + "','" + feeamountmonthly + "','" + paymode + "','" + cbl_sem.Items[l].Value + "','" + duedt.ToString() + "','" + startdt.ToString() + "','" + fineamnt + "','" + getfinid + "','" + cbl_community.Items[comm].Value + "','1','" + cblQuota.Items[m].Value + "','" + deductamount1 + "','" + deductreason1 + "','" + deductamount2 + "','" + deductreason2 + "','" + deductamount3 + "','" + deductreason3 + "' )";//quota added by abarna

                                                                    int inscount = d2.update_method_wo_parameter(insupdquery, "Text");
                                                                    if (inscount > 0)
                                                                    {
                                                                        inscheck = true;
                                                                    }
                                                                    //==========================Added by Saranya on 10/04/2018=============================//
                                                                    int savevalue = 1;
                                                                    string entrycode = Session["Entry_Code"].ToString();
                                                                    string formname = "FeeAllot";
                                                                    string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                                    string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                                    IPHostEntry host;
                                                                    string localip = "";
                                                                    host = Dns.GetHostEntry(Dns.GetHostName());
                                                                    foreach (IPAddress ip in host.AddressList)
                                                                    {
                                                                        if (ip.AddressFamily.ToString() == "InterNetwork")
                                                                        {
                                                                            localip = ip.ToString();
                                                                        }
                                                                    }
                                                                    string details = "Batch Year - " + cbl_batch.Items[i].Value + " : Degree - " + cbl_dept.Items[j].Text + " : Semester - " + cbl_sem.Items[l].Text + " : SeatType - " + cbl_seat.Items[k].Text + " : Allot Amt -" + feeamnt + " : Date - " + toa + " ";
                                                                    string ctsname = "";
                                                                    if (savevalue == 1)
                                                                    {
                                                                        ctsname = "Fee Alloted";
                                                                    }
                                                                    string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                                    d2.insertEinanceUserActionLog(entrycode, formname, 1, toa, doa, details, ctsname, localip);
                                                                    //============================================================================//
                                                                }
                                                                else
                                                                {
                                                                    string delquery = "delete FT_FeeAllotDegree where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + cbl_sem.Items[l].Value + "') and BatchYear ='" + cbl_batch.Items[i].Value + "' and DegreeCode ='" + cbl_dept.Items[j].Value + "' and SeatType='" + cbl_seat.Items[k].Value + "' and quota='" + cblQuota.Items[m].Value + "'  and FinYearFK='" + getfinid + "' and isnull(isHostelFees,'0')<>'1' and CommunityCode='" + cbl_community.Items[comm].Value + "' and isnull(IsCommunity,'0')='1'";
                                                                    int delcount = d2.update_method_wo_parameter(delquery, "Text");
                                                                    if (delcount > 0)
                                                                    {
                                                                        inscheck = true;
                                                                    }
                                                                    //==========================Added by Saranya on 10/04/2018=============================//
                                                                    int savevalue = 3;
                                                                    string entrycode = Session["Entry_Code"].ToString();
                                                                    string formname = "FeeAllotDelete";
                                                                    string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                                    string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                                    IPHostEntry host;
                                                                    string localip = "";
                                                                    host = Dns.GetHostEntry(Dns.GetHostName());
                                                                    foreach (IPAddress ip in host.AddressList)
                                                                    {
                                                                        if (ip.AddressFamily.ToString() == "InterNetwork")
                                                                        {
                                                                            localip = ip.ToString();
                                                                        }
                                                                    }
                                                                    string details = "Batch Year - " + cbl_batch.Items[i].Value + " : Degree - " + cbl_dept.Items[j].Text + " : Semester - " + cbl_sem.Items[l].Text + " : SeatType - " + cbl_seat.Items[k].Text + " : Allot Amt-" + feeamnt + " : Date - " + toa + " ";//:Allot Ledger-" +ledgername + ":Allot Amt-" +allotamt +"";
                                                                    string ctsname = "";
                                                                    if (savevalue == 3)
                                                                    {
                                                                        ctsname = "Fee Allot Deleted";
                                                                    }
                                                                    string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                                    d2.insertEinanceUserActionLog(entrycode, formname, 3, toa, doa, details, ctsname, localip);
                                                                    //============================================================================//
                                                                }
                                                            }
                                                            //else
                                                            //{
                                                            //    string delquery = "delete FT_FeeAllotDegree where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + cbl_sem.Items[l].Value + "')";
                                                            //    int delcount = d2.update_method_wo_parameter(delquery, "Text");
                                                            //    if (delcount > 0)
                                                            //    {
                                                            //        inscheck = true;
                                                            //    }
                                                            //}
                                                            #endregion
                                                        }
                                                    }
                                                }

                                            }


                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            for (int i = 0; i < cbl_batch.Items.Count; i++)
                            {
                                if (!cbl_batch.Items[i].Selected == true)
                                    continue;
                                batchOk = true;
                                for (int j = 0; j < cbl_dept.Items.Count; j++)
                                {
                                    if (!cbl_dept.Items[j].Selected == true)
                                        continue;
                                    deptOk = true;
                                    for (int k = 0; k < cbl_seat.Items.Count; k++)
                                    {
                                        if (!cbl_seat.Items[k].Selected == true)
                                            continue;
                                        seatOk = true;


                                        for (int comm = 0; comm < cbl_community.Items.Count; comm++)
                                        {
                                            if (!cbl_community.Items[comm].Selected)
                                                continue;


                                            for (int l = 0; l < cbl_sem.Items.Count; l++)
                                            {
                                                if (!cbl_sem.Items[l].Selected == true)
                                                    continue;
                                                int indexvalue = 1;
                                                if (FpSpread1.Sheets[0].RowCount > 0)
                                                {
                                                    for (int ro = 1; ro < FpSpread1.Sheets[0].RowCount; ro++)
                                                    {
                                                        #region
                                                        indexvalue = Convert.ToInt32(check[Convert.ToString(cbl_sem.Items[l].Value)]);
                                                        string headerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 0].Tag);
                                                        string ledgerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 1].Tag);
                                                        string feeamountmonthly = "";
                                                        if (headerid.Trim() != "" && ledgerid.Trim() != "")
                                                        {
                                                            string paymode = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                            if (paymode.Trim() == "Regular")
                                                            {
                                                                paymode = "1";
                                                                feeamountmonthly = "";
                                                            }
                                                            else
                                                            {
                                                                paymode = "2";
                                                                feeamountmonthly = "";
                                                            }
                                                            indexvalue++;
                                                            string feeamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                            if (paymode.Trim() == "2")
                                                            {
                                                                feeamountmonthly = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                                            }

                                                            //============Added by saranya on 19March2018===============//
                                                            int noOfConcession = 0;
                                                            noOfConcession = Convert.ToInt32(txtNoConcession.Text);
                                                            string deductamount1 = string.Empty;
                                                            string deductreason1 = string.Empty;
                                                            string deductamount2 = string.Empty;
                                                            string deductreason2 = string.Empty;
                                                            string deductamount3 = string.Empty;
                                                            string deductreason3 = string.Empty;
                                                            string deductamnt = string.Empty;
                                                            string deductreason = string.Empty;
                                                            double tempDeductAmt = 0;

                                                            if (noOfConcession == 0 || noOfConcession == 1)
                                                            {
                                                                indexvalue++;
                                                                deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                if (deductamnt.Trim() == "")
                                                                {
                                                                    deductamnt = "0";
                                                                }
                                                                indexvalue++;
                                                                tempDeductAmt = 0;
                                                                deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                if (deductreason.Trim() == "")
                                                                {
                                                                    deductreason = "0";
                                                                    double.TryParse(deductamnt, out tempDeductAmt);
                                                                    deductamnt = "0";
                                                                }
                                                                deductamount1 = "0";
                                                                deductamount2 = "0";
                                                                deductamount3 = "0";
                                                                deductreason1 = "0";
                                                                deductreason2 = "0";
                                                                deductreason3 = "0";
                                                            }
                                                            if (noOfConcession == 2)
                                                            {
                                                                indexvalue++;
                                                                deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                if (deductamount1.Trim() == "")
                                                                {
                                                                    deductamount1 = "0";
                                                                }
                                                                indexvalue++;
                                                                double tempDeductAmt1 = 0;
                                                                deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                if (deductreason1.Trim() == "")
                                                                {
                                                                    deductreason1 = "0";
                                                                    double.TryParse(deductamount1, out tempDeductAmt1);
                                                                    deductamount1 = "0";
                                                                }

                                                                indexvalue++;
                                                                deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                if (deductamount2.Trim() == "")
                                                                {
                                                                    deductamount2 = "0";
                                                                }
                                                                indexvalue++;
                                                                double tempDeductAmt2 = 0;
                                                                deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                if (deductreason2.Trim() == "")
                                                                {
                                                                    deductreason2 = "0";
                                                                    double.TryParse(deductamount2, out tempDeductAmt2);
                                                                    deductamount2 = "0";
                                                                }
                                                                indexvalue++;
                                                                deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                if (deductamnt.Trim() == "")
                                                                {
                                                                    deductamnt = "0";
                                                                }
                                                                indexvalue++;
                                                                tempDeductAmt = 0;
                                                                deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                if (deductreason.Trim() == "")
                                                                {
                                                                    deductreason = "0";
                                                                    double.TryParse(deductamnt, out tempDeductAmt);
                                                                    deductamnt = "0";
                                                                }

                                                                deductamount3 = "0";
                                                                deductreason3 = "0";

                                                            }
                                                            if (noOfConcession == 3)
                                                            {
                                                                indexvalue++;
                                                                deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                if (deductamount1.Trim() == "")
                                                                {
                                                                    deductamount1 = "0";
                                                                }
                                                                indexvalue++;
                                                                double tempDeductAmt1 = 0;
                                                                deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                if (deductreason1.Trim() == "")
                                                                {
                                                                    deductreason1 = "0";
                                                                    double.TryParse(deductamount1, out tempDeductAmt1);
                                                                    deductamount1 = "0";
                                                                }

                                                                indexvalue++;
                                                                deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                if (deductamount2.Trim() == "")
                                                                {
                                                                    deductamount2 = "0";
                                                                }
                                                                indexvalue++;
                                                                double tempDeductAmt2 = 0;
                                                                deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                if (deductreason2.Trim() == "")
                                                                {
                                                                    deductreason2 = "0";
                                                                    double.TryParse(deductamount2, out tempDeductAmt2);
                                                                    deductamount2 = "0";
                                                                }

                                                                indexvalue++;
                                                                deductamount3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                if (deductamount3.Trim() == "")
                                                                {
                                                                    deductamount3 = "0";
                                                                }
                                                                indexvalue++;
                                                                double tempDeductAmt3 = 0;
                                                                deductreason3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                if (deductreason3.Trim() == "")
                                                                {
                                                                    deductreason3 = "0";
                                                                    double.TryParse(deductamount3, out tempDeductAmt3);
                                                                    deductamount3 = "0";
                                                                }
                                                                indexvalue++;
                                                                deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                if (deductamnt.Trim() == "")
                                                                {
                                                                    deductamnt = "0";
                                                                }
                                                                indexvalue++;
                                                                tempDeductAmt = 0;
                                                                deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                if (deductreason.Trim() == "")
                                                                {
                                                                    deductreason = "0";
                                                                    double.TryParse(deductamnt, out tempDeductAmt);
                                                                    deductamnt = "0";
                                                                }
                                                            }
                                                            //==========================================================//

                                                            indexvalue++;
                                                            string totalamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                            double tempTot = 0;
                                                            double.TryParse(totalamnt, out tempTot);
                                                            tempTot += tempDeductAmt;
                                                            totalamnt = Convert.ToString(tempTot);
                                                            indexvalue++;
                                                            string refundamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                            if (refundamnt.Trim() == "")
                                                            {
                                                                refundamnt = "0";
                                                            }
                                                            if (refundamnt.Trim() != "")
                                                            {
                                                                isfeedeposit = "1";
                                                            }
                                                            else
                                                            {
                                                                isfeedeposit = "0";
                                                            }
                                                            if (ledgerid.Trim() != "")
                                                            {
                                                                indexvalue++;
                                                                string schlSingMul = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);

                                                                indexvalue++;
                                                                string frmgovt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                                //string mulScholarVal = string.Empty;
                                                                if (frmgovt == null || frmgovt.Trim() == "")
                                                                {
                                                                    frm = "0";
                                                                }
                                                                else
                                                                {
                                                                    frm = frmgovt;
                                                                    if (schlSingMul.Trim().ToUpper() == "TYPE")
                                                                    {
                                                                        mulScholarVal = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                                                    }
                                                                }
                                                                indexvalue++;
                                                                string day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                if (day1.Trim() != "")
                                                                {
                                                                    day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                }
                                                                else
                                                                {
                                                                    day1 = "";
                                                                }
                                                                indexvalue++;
                                                                string mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                if (mon1.Trim() != "")
                                                                {
                                                                    mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                }
                                                                else
                                                                {
                                                                    mon1 = "";
                                                                }
                                                                indexvalue++;
                                                                string year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                if (year1.Trim() != "")
                                                                {
                                                                    year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                }
                                                                else
                                                                {
                                                                    year1 = "";
                                                                }
                                                                if (day1.Trim() != "" && mon1.Trim() != "" && year1.Trim() != "")
                                                                {
                                                                    duedt = Convert.ToString(mon1 + "/" + day1 + "/" + year1);
                                                                    ddt = Convert.ToDateTime(duedt);
                                                                }
                                                            }
                                                            indexvalue++;
                                                            string fineamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                            if (fineamnt.Trim() == "")
                                                            {
                                                                fineamnt = "0";
                                                            }
                                                            if (ledgerid.Trim() != "")
                                                            {
                                                                indexvalue++;
                                                                string day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                if (day2.Trim() != "")
                                                                {
                                                                    day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                }
                                                                else
                                                                {
                                                                    day2 = "";
                                                                }
                                                                indexvalue++;
                                                                string mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                if (mon2.Trim() != "")
                                                                {
                                                                    mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                }
                                                                else
                                                                {
                                                                    mon2 = "";
                                                                }
                                                                indexvalue++;
                                                                string year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                if (year2.Trim() != "")
                                                                {
                                                                    year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                                }
                                                                else
                                                                {
                                                                    year2 = "";
                                                                }
                                                                if (day2.Trim() != "" && mon2.Trim() != "" && year2.Trim() != "")
                                                                {
                                                                    startdt = Convert.ToString(mon2 + "/" + day2 + "/" + year2);
                                                                    paydt = Convert.ToDateTime(startdt);
                                                                }
                                                            }
                                                            double fee_amt = 0;
                                                            double ref_amt = 0;
                                                            double tot_amount = 0;
                                                            double.TryParse(feeamnt, out fee_amt);
                                                            double.TryParse(refundamnt, out ref_amt);
                                                            double.TryParse(totalamnt, out tot_amount);
                                                            //fee_amt >= ref_amt 
                                                            if (feeamnt.Trim() != "" && feeamnt.Trim() != null && totalamnt.Trim() != "" && totalamnt.Trim() != null)
                                                            {
                                                                string insupdquery = "if exists (select * from FT_FeeAllotDegree where DegreeCode ='" + cbl_dept.Items[j].Value + "' and BatchYear ='" + cbl_batch.Items[i].Value + "' and FeeCategory ='" + cbl_sem.Items[l].Value + "' and SeatType='" + cbl_seat.Items[k].Value + "' and HeaderFK ='" + headerid + "' and LedgerFK ='" + ledgerid + "' and FinYearFK='" + getfinid + "' and CommunityCode='" + cbl_community.Items[comm].Value + "' and isnull(IsCommunity,'0')='1' ) update FT_FeeAllotDegree set  FeeAmount='" + feeamnt + "',DeductAmout='" + deductamnt + "',DeductReason='" + deductreason + "',TotalAmount='" + totalamnt + "',RefundAmount='" + refundamnt + "',IsFeeDeposit='" + isfeedeposit + "',FeeAmountMonthly='" + feeamountmonthly + "',PayMode='" + paymode + "',PayStartDate='" + ddt + "',DueDate='" + paydt + "',FineAmount='" + fineamnt + "',DeductAmount1='" + deductamount1 + "',DeductReason1='" + deductreason1 + "',DeductAmount2='" + deductamount2 + "',DeductReason2='" + deductreason2 + "',DeductAmount3='" + deductamount3 + "',DeductReason3='" + deductreason3 + "' where DegreeCode ='" + cbl_dept.Items[j].Value + "' and BatchYear ='" + cbl_batch.Items[i].Value + "' and FeeCategory ='" + cbl_sem.Items[l].Value + "' and SeatType='" + cbl_seat.Items[k].Value + "' and HeaderFK ='" + headerid + "' and LedgerFK ='" + ledgerid + "' and FinYearFK='" + getfinid + "' and CommunityCode='" + cbl_community.Items[comm].Value + "' and isnull(IsCommunity,'0')='1' else INSERT INTO FT_FeeAllotDegree(AllotDate,BatchYear,DegreeCode,SeatType,LedgerFK,HeaderFK,FeeAmount,DeductAmout,DeductReason,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,DueDate,FineAmount,FinYearFK,CommunityCode,IsCommunity,DeductAmount1,DeductReason1,DeductAmount2,DeductReason2,DeductAmount3,DeductReason3) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "','" + cbl_batch.Items[i].Value + "','" + cbl_dept.Items[j].Value + "','" + cbl_seat.Items[k].Value + "','" + ledgerid + "','" + headerid + "','" + feeamnt + "','" + deductamnt + "','" + deductreason + "','" + totalamnt + "','" + refundamnt + "','" + isfeedeposit + "','" + feeamountmonthly + "','" + paymode + "','" + cbl_sem.Items[l].Value + "','" + duedt.ToString() + "','" + startdt.ToString() + "','" + fineamnt + "','" + getfinid + "','" + cbl_community.Items[comm].Value + "','1','" + deductamount1 + "','" + deductreason1 + "','" + deductamount2 + "','" + deductreason2 + "','" + deductamount3 + "','" + deductreason3 + "' )";//quota added by abarna

                                                                int inscount = d2.update_method_wo_parameter(insupdquery, "Text");
                                                                if (inscount > 0)
                                                                {
                                                                    inscheck = true;
                                                                }
                                                                //==========================Added by Saranya on 10/04/2018=============================//
                                                                int savevalue = 1;
                                                                string entrycode = Session["Entry_Code"].ToString();
                                                                string formname = "FeeAllot";
                                                                string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                                string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                                IPHostEntry host;
                                                                string localip = "";
                                                                host = Dns.GetHostEntry(Dns.GetHostName());
                                                                foreach (IPAddress ip in host.AddressList)
                                                                {
                                                                    if (ip.AddressFamily.ToString() == "InterNetwork")
                                                                    {
                                                                        localip = ip.ToString();
                                                                    }
                                                                }
                                                                string details = "Batch Year - " + cbl_batch.Items[i].Value + " : Degree - " + cbl_dept.Items[j].Text + " : Semester - " + cbl_sem.Items[l].Text + " : SeatType - " + cbl_seat.Items[k].Text + " : Allot Amt -" + feeamnt + " : Date - " + toa + " ";
                                                                string ctsname = "";
                                                                if (savevalue == 1)
                                                                {
                                                                    ctsname = "Fee Alloted";
                                                                }
                                                                string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                                d2.insertEinanceUserActionLog(entrycode, formname, 1, toa, doa, details, ctsname, localip);
                                                                //============================================================================//
                                                            }
                                                            else
                                                            {
                                                                string delquery = "delete FT_FeeAllotDegree where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + cbl_sem.Items[l].Value + "') and BatchYear ='" + cbl_batch.Items[i].Value + "' and DegreeCode ='" + cbl_dept.Items[j].Value + "' and SeatType='" + cbl_seat.Items[k].Value + "'  and FinYearFK='" + getfinid + "' and isnull(isHostelFees,'0')<>'1' and CommunityCode='" + cbl_community.Items[comm].Value + "' and isnull(IsCommunity,'0')='1'";
                                                                int delcount = d2.update_method_wo_parameter(delquery, "Text");
                                                                if (delcount > 0)
                                                                {
                                                                    inscheck = true;
                                                                }
                                                                //==========================Added by Saranya on 10/04/2018=============================//
                                                                int savevalue = 3;
                                                                string entrycode = Session["Entry_Code"].ToString();
                                                                string formname = "FeeAllotDelete";
                                                                string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                                string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                                IPHostEntry host;
                                                                string localip = "";
                                                                host = Dns.GetHostEntry(Dns.GetHostName());
                                                                foreach (IPAddress ip in host.AddressList)
                                                                {
                                                                    if (ip.AddressFamily.ToString() == "InterNetwork")
                                                                    {
                                                                        localip = ip.ToString();
                                                                    }
                                                                }
                                                                string details = "Batch Year - " + cbl_batch.Items[i].Value + " : Degree - " + cbl_dept.Items[j].Text + " : Semester - " + cbl_sem.Items[l].Text + " : SeatType - " + cbl_seat.Items[k].Text + " : Allot Amt-" + feeamnt + " : Date - " + toa + "";
                                                                string ctsname = "";
                                                                if (savevalue == 3)
                                                                {
                                                                    ctsname = "Fee Allot Deleted";
                                                                }
                                                                string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                                d2.insertEinanceUserActionLog(entrycode, formname, 3, toa, doa, details, ctsname, localip);
                                                                //============================================================================//
                                                            }
                                                        }
                                                        //else
                                                        //{
                                                        //    string delquery = "delete FT_FeeAllotDegree where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + cbl_sem.Items[l].Value + "')";
                                                        //    int delcount = d2.update_method_wo_parameter(delquery, "Text");
                                                        //    if (delcount > 0)
                                                        //    {
                                                        //        inscheck = true;
                                                        //    }
                                                        //}
                                                        #endregion

                                                    }
                                                }

                                            }


                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                    }


                    if (inscheck == true)
                    {
                        alertpopwindow.Visible = true;
                        lblalerterr.Visible = true;
                        lblalerterr.Text = "Saved Successfully";
                    }
                    else
                    {
                        if (!hostelOK)
                        {
                            alertpopwindow.Visible = true;
                            lblalerterr.Visible = true;
                            lblalerterr.Text = "Please Select Hostel Name";
                        }
                        if (!roomOK)
                        {
                            alertpopwindow.Visible = true;
                            lblalerterr.Visible = true;
                            lblalerterr.Text = "Please Select Room Type";
                        }
                        if (!deptOk)
                        {
                            alertpopwindow.Visible = true;
                            lblalerterr.Visible = true;
                            lblalerterr.Text = "Please Select " + lbl_dept.Text;
                        }
                        else if (!batchOk)
                        {
                            alertpopwindow.Visible = true;
                            lblalerterr.Visible = true;
                            lblalerterr.Text = "Please Select Batch";
                        }
                        else if (!seatOk)
                        {
                            alertpopwindow.Visible = true;
                            lblalerterr.Visible = true;
                            lblalerterr.Text = "Please Select Seat Type";
                        }
                    }
                }
                #endregion

                #region Individual Admitted
                int refundcheck = 0;

                if (ddl_type.SelectedItem.Text == "Individual(Admitted)")
                {
                    if (txt_roll.Text.Trim() != "")
                    {
                        #region textbox not equal to empty

                        string memtype = "1";
                        string appl_no = "";

                        //for (int l = 0; l < cbl_sem.Items.Count; l++)
                        //{
                        //    if (cbl_sem.Items[l].Selected == true)
                        //    {
                        foreach (KeyValuePair<string, int> feecatValue in Semflter)
                        {
                            string feestr = Convert.ToString(feecatValue.Key);
                            string feeValue = Convert.ToString(feecatValue.Value);
                            int indexvalue = 1;
                            if (FpSpread1.Sheets[0].RowCount > 0)
                            {
                                for (int ro = 1; ro < FpSpread1.Sheets[0].RowCount; ro++)
                                {
                                    indexvalue = Convert.ToInt32(check[Convert.ToString(feeValue)]);
                                    string headerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 0].Tag);
                                    string ledgerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 1].Tag);
                                    string feeamountmonthly = "";
                                    mulScholarVal = "";
                                    if (headerid.Trim() != "" && ledgerid.Trim() != "")
                                    {
                                        string paymode = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                        if (paymode.Trim() == "Regular")
                                        {
                                            paymode = "1";
                                            feeamountmonthly = "";
                                        }
                                        else
                                        {
                                            paymode = "2";
                                            feeamountmonthly = "";
                                        }
                                        indexvalue++;
                                        string feeamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                        if (paymode.Trim() == "2")
                                        {
                                            feeamountmonthly = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                        }
                                        //============Added by saranya on 19March2018===============//
                                        int noOfConcession = 0;
                                        noOfConcession = Convert.ToInt32(txtNoConcession.Text);
                                        string deductamount1 = string.Empty;
                                        string deductreason1 = string.Empty;
                                        string deductamount2 = string.Empty;
                                        string deductreason2 = string.Empty;
                                        string deductamount3 = string.Empty;
                                        string deductreason3 = string.Empty;
                                        string deductamnt = string.Empty;
                                        string deductreason = string.Empty;
                                        double tempDeductAmt = 0;

                                        if (noOfConcession == 0 || noOfConcession == 1)
                                        {
                                            indexvalue++;
                                            deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (deductamnt.Trim() == "")
                                            {
                                                deductamnt = "0";
                                            }
                                            indexvalue++;
                                            tempDeductAmt = 0;
                                            deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            if (deductreason.Trim() == "")
                                            {
                                                deductreason = "0";
                                                //double.TryParse(deductamnt, out tempDeductAmt);
                                                //deductamnt = "0";
                                            }
                                            deductamount1 = "0";
                                            deductamount2 = "0";
                                            deductamount3 = "0";
                                            deductreason1 = "0";
                                            deductreason2 = "0";
                                            deductreason3 = "0";
                                        }
                                        if (noOfConcession == 2)
                                        {
                                            indexvalue++;
                                            deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (deductamount1.Trim() == "")
                                            {
                                                deductamount1 = "0";
                                            }
                                            indexvalue++;
                                            double tempDeductAmt1 = 0;
                                            deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            if (deductreason1.Trim() == "")
                                            {
                                                deductreason1 = "0";
                                                //double.TryParse(deductamount1, out tempDeductAmt1);
                                                //deductamount1 = "0";
                                            }

                                            indexvalue++;
                                            deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (deductamount2.Trim() == "")
                                            {
                                                deductamount2 = "0";
                                            }
                                            indexvalue++;
                                            double tempDeductAmt2 = 0;
                                            deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            if (deductreason2.Trim() == "")
                                            {
                                                deductreason2 = "0";
                                                //double.TryParse(deductamount2, out tempDeductAmt2);
                                                // deductamount2 = "0";
                                            }
                                            indexvalue++;
                                            deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (deductamnt.Trim() == "")
                                            {
                                                deductamnt = "0";
                                            }
                                            indexvalue++;
                                            tempDeductAmt = 0;
                                            deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            if (deductreason.Trim() == "")
                                            {
                                                deductreason = "0";
                                                //double.TryParse(deductamnt, out tempDeductAmt);
                                                //deductamnt = "0";
                                            }

                                            deductamount3 = "0";
                                            deductreason3 = "0";

                                        }
                                        if (noOfConcession == 3)
                                        {
                                            indexvalue++;
                                            deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (deductamount1.Trim() == "")
                                            {
                                                deductamount1 = "0";
                                            }
                                            indexvalue++;
                                            double tempDeductAmt1 = 0;
                                            deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            if (deductreason1.Trim() == "")
                                            {
                                                deductreason1 = "0";
                                                //double.TryParse(deductamount1, out tempDeductAmt1);
                                                //deductamount1 = "0";
                                            }

                                            indexvalue++;
                                            deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (deductamount2.Trim() == "")
                                            {
                                                deductamount2 = "0";
                                            }
                                            indexvalue++;
                                            double tempDeductAmt2 = 0;
                                            deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            if (deductreason2.Trim() == "")
                                            {
                                                deductreason2 = "0";
                                                //double.TryParse(deductamount2, out tempDeductAmt2);
                                                //deductamount2 = "0";
                                            }

                                            indexvalue++;
                                            deductamount3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (deductamount3.Trim() == "")
                                            {
                                                deductamount3 = "0";
                                            }
                                            indexvalue++;
                                            double tempDeductAmt3 = 0;
                                            deductreason3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            if (deductreason3.Trim() == "")
                                            {
                                                deductreason3 = "0";
                                                //double.TryParse(deductamount3, out tempDeductAmt3);
                                                //deductamount3 = "0";
                                            }
                                            indexvalue++;
                                            deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (deductamnt.Trim() == "")
                                            {
                                                deductamnt = "0";
                                            }
                                            indexvalue++;
                                            tempDeductAmt = 0;
                                            deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            if (deductreason.Trim() == "")
                                            {
                                                deductreason = "0";
                                                //double.TryParse(deductamnt, out tempDeductAmt);
                                                //deductamnt = "0";
                                            }
                                        }

                                        //==========================================================//

                                        indexvalue++;
                                        string totalamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                        double tempTot = 0;
                                        double.TryParse(totalamnt, out tempTot);
                                        tempTot += tempDeductAmt;
                                        totalamnt = Convert.ToString(tempTot);
                                        indexvalue++;
                                        string refundamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);

                                        indexvalue++;
                                        string schlSingMul = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                        indexvalue++;
                                        string frmgovt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);

                                        if (frmgovt == null || frmgovt.Trim() == "")
                                        {
                                            frm = "0";
                                        }
                                        else
                                        {
                                            frm = frmgovt;
                                            if (schlSingMul.Trim().ToUpper() == "TYPE")
                                            {
                                                mulScholarVal = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                            }
                                        }

                                        if (refundamnt.Trim() == "")
                                        {
                                            refundamnt = "0";
                                        }
                                        if (refundamnt.Trim() != "")
                                        {
                                            isfeedeposit = "1";
                                        }
                                        else
                                        {
                                            isfeedeposit = "0";
                                        }
                                        if (ledgerid.Trim() != "")
                                        {
                                            indexvalue++;
                                            string day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (day1.Trim() != "")
                                            {
                                                day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            }
                                            else
                                            {
                                                day1 = "";
                                            }
                                            indexvalue++;
                                            string mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (mon1.Trim() != "")
                                            {
                                                mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            }
                                            else
                                            {
                                                mon1 = "";
                                            }
                                            indexvalue++;
                                            string year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (year1.Trim() != "")
                                            {
                                                year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            }
                                            else
                                            {
                                                year1 = "";
                                            }
                                            if (day1.Trim() != "" && mon1.Trim() != "" && year1.Trim() != "")
                                            {
                                                duedt = Convert.ToString(mon1 + "/" + day1 + "/" + year1);
                                            }
                                        }
                                        indexvalue++;
                                        string fineamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                        if (fineamnt.Trim() == "")
                                        {
                                            fineamnt = "0";
                                        }
                                        if (ledgerid.Trim() != "")
                                        {
                                            indexvalue++;
                                            string day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (day2.Trim() != "")
                                            {
                                                day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            }
                                            else
                                            {
                                                day2 = "";
                                            }
                                            indexvalue++;
                                            string mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (mon2.Trim() != "")
                                            {
                                                mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            }
                                            else
                                            {
                                                mon2 = "";
                                            }
                                            indexvalue++;
                                            string year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (year2.Trim() != "")
                                            {
                                                year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            }
                                            else
                                            {
                                                year2 = "";
                                            }
                                            if (day2.Trim() != "" && mon2.Trim() != "" && year2.Trim() != "")
                                            {
                                                startdt = Convert.ToString(mon2 + "/" + day2 + "/" + year2);
                                            }
                                        }
                                        string selq = "";
                                        appl_no = getAppNo(txt_roll.Text.Trim(), collegecode1);
                                        // appl_no = d2.GetFunction(selq);
                                        double fee_amt = 0;
                                        double ref_amt = 0;
                                        double tot_amount = 0;
                                        double.TryParse(feeamnt, out fee_amt);
                                        double.TryParse(refundamnt, out ref_amt);
                                        double.TryParse(totalamnt, out tot_amount);
                                        //fee_amt >= ref_amt
                                        if (feeamnt.Trim() != "" && feeamnt.Trim() != null && ((totalamnt.Trim() != "" && totalamnt.Trim() != null) || (Convert.ToDouble(deductamnt) == Convert.ToDouble(feeamnt))))
                                        {
                                            string paidAmt = "PaidAmount";
                                            //if (Convert.ToDouble(deductamnt) == Convert.ToDouble(feeamnt))
                                            //{
                                            //    paidAmt = "0";
                                            //}

                                            string insupdquery = "if exists (select app_no from FT_FeeAllot where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + feeValue + "')  and App_No in('" + appl_no + "') and isnull(istransfer,'0')='0' " + strFinYrFk + " ) update FT_FeeAllot set MemType='" + memtype + "',FeeAmount='" + feeamnt + "',PaidAmount=" + paidAmt + ",DeductAmout='" + deductamnt + "',DeductReason='" + deductreason + "',FromGovtAmt='" + frm + "',TotalAmount='" + totalamnt + "',RefundAmount='" + refundamnt + "',IsFeeDeposit='" + isfeedeposit + "',FeeAmountMonthly='" + feeamountmonthly + "',PayMode='" + paymode + "',PayStartDate='" + duedt.ToString() + "',PaidStatus='0',DueDate='" + startdt.ToString() + "',DueAmount='0',FineAmount='" + fineamnt + "',BalAmount=" + totalamnt + " - isnull(PaidAmount,0),DeductAmount1='" + deductamount1 + "',DeductReason1='" + deductreason1 + "',DeductAmount2='" + deductamount2 + "',DeductReason2='" + deductreason2 + "',DeductAmount3='" + deductamount3 + "',DeductReason3='" + deductreason3 + "'  where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + feeValue + "') and App_No in('" + appl_no + "') and isnull(PaidAmount,0) <=" + totalamnt + " " + strFinYrFk + " and isnull(istransfer,'0')='0' else INSERT INTO FT_FeeAllot(AllotDate,MemType,App_No,LedgerFK,HeaderFK,FeeAmount,DeductAmout,DeductReason,FromGovtAmt,TotalAmount, RefundAmount,IsFeeDeposit,FeeAmountMonthly, PayMode,FeeCategory,PayStartDate,PaidStatus,DueDate,DueAmount, FineAmount,BalAmount,FinYearFK,istransfer,DeductAmount1,DeductReason1,DeductAmount2,DeductReason2,DeductAmount3,DeductReason3 ) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "'," + memtype + "," + appl_no + ",'" + ledgerid + "','" + headerid + "','" + feeamnt + "','" + deductamnt + "'," + deductreason + ",'" + frm + "','" + totalamnt + "','" + refundamnt + "','" + isfeedeposit + "','" + feeamountmonthly + "','" + paymode + "','" + feeValue + "','" + duedt.ToString() + "','0','" + startdt.ToString() + "','0','" + fineamnt + "','" + totalamnt + "','" + getfinid + "','0','" + deductamount1 + "','" + deductreason1 + "','" + deductamount2 + "','" + deductreason2 + "','" + deductamount3 + "','" + deductreason3 + "')";

                                            try
                                            {
                                                string[] reasonsWtValue = mulScholarVal.Split(',');
                                                if (reasonsWtValue.Length > 0)
                                                {
                                                    for (int reas = 0; reas < reasonsWtValue.Length; reas++)
                                                    {
                                                        string[] reasonAdValues = reasonsWtValue[reas].Split(':');
                                                        if (reasonAdValues.Length == 2)
                                                        {
                                                            string insUpQuery = "if exists (select * from FT_FinScholarship where App_no=" + appl_no + " and LedgerFK=" + ledgerid + " and HeaderFk=" + headerid + " and Feecategory=" + feeValue + " and ReasonCode=" + reasonAdValues[0] + " and CollegeCode=" + collegecode1 + " and FinyearFk=" + getfinid + ") update Ft_FinScholarship set AlloteDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',TotalAmount=" + reasonAdValues[1] + ",AdjusAmount=0 where App_no=" + appl_no + " and LedgerFK=" + ledgerid + " and HeaderFk=" + headerid + " and Feecategory=" + feeValue + " and ReasonCode=" + reasonAdValues[0] + " and CollegeCode=" + collegecode1 + "  and FinyearFk=" + getfinid + " else INSERT INTO FT_FINSCHOLARSHIP (App_no, LedgerFK, HeaderFk, ReasonCode, Feecategory, AlloteDate, TotalAmount, AdjusAmount, FinyearFK, CollegeCode) VALUES(" + appl_no + ", " + ledgerid + ", " + headerid + ", " + reasonAdValues[0] + ", " + feeValue + ", '" + DateTime.Now.ToString("MM/dd/yyyy") + "', " + reasonAdValues[1] + ", 0, " + getfinid + ", " + collegecode1 + ")";
                                                            d2.update_method_wo_parameter(insUpQuery, "Text");
                                                        }
                                                    }
                                                }
                                            }
                                            catch
                                            {
                                            }
                                            int inscount = d2.update_method_wo_parameter(insupdquery, "Text");
                                            if (inscount > 0)
                                            {
                                                if (paymode.Trim() == "2")
                                                {
                                                    double feeallotpk = 0;
                                                    double.TryParse(d2.GetFunction("select feeallotpk from FT_FeeAllot where App_No=" + appl_no + " and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FeeCategory=" + feeValue + "  " + strFinYrFk + " and isnull(istransfer,'0')='0' ").Trim(), out feeallotpk);
                                                    //double.TryParse(d2.GetFunction("select feeallotpk from FT_FeeAllot where App_No=" + appl_no + " and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FeeCategory=" + cbl_sem.Items[l].Value + " and FinYearFK=" + getfinid + "  ").Trim(), out feeallotpk);
                                                    if (feeallotpk > 0)
                                                    {
                                                        string delQ = "if exists (select feeallotpk from ft_feeallotmonthly where feeallotpk=" + feeallotpk + ") delete from FT_FeeallotMonthly where FeeAllotPK=" + feeallotpk + " and  Isnull(PaidAmount,0) =0  ";
                                                        d2.update_method_wo_parameter(delQ, "Text");

                                                        string[] months = feeamountmonthly.Split(',');
                                                        foreach (string month in months)
                                                        {
                                                            string[] resultval = month.Split(':');
                                                            if (resultval.Length == 3)
                                                            {
                                                                string insMonwiseQ = "if exists (select * from ft_feeallotmonthly where FeeAllotPK=" + feeallotpk + " and  AllotMonth=" + resultval[0] + " ) update ft_feeallotmonthly set  AllotAmount= " + resultval[2] + ", BalAmount=(" + resultval[2] + "-isnull(PaidAMount,0)), FinYearFK=" + getfinid + ",AllotYear=" + resultval[1] + " where  FeeAllotPK=" + feeallotpk + " and  AllotMonth=" + resultval[0] + "   else INSERT INTO ft_feeallotmonthly (FeeAllotPK, AllotMonth, AllotYear, AllotAmount, BalAmount, FinYearFK) VALUES (" + feeallotpk + ", " + resultval[0] + ", " + resultval[1] + ", " + resultval[2] + ", " + resultval[2] + ", " + getfinid + ")";
                                                                d2.update_method_wo_parameter(insMonwiseQ, "Text");
                                                            }
                                                        }
                                                    }
                                                }

                                                inscheck = true;
                                            }
                                            //refund amount
                                            if (refundamnt != "" && refundamnt != "0")
                                            {
                                                double Refndamt = 0;
                                                double Exledgamt = 0;
                                                string RefInsQ = "";
                                                string FTPK = "";
                                                string ExLEINQ = "";
                                                double.TryParse(refundamnt, out Refndamt);
                                                string SelQExPK = d2.GetFunction(" select ExcessDetPK from FT_ExcessDet where ExcessType='3' and App_No='" + appl_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "'");
                                                if (SelQExPK != "" && SelQExPK != "0")
                                                {
                                                    string SelEx = d2.GetFunction(" select SUM(ISNULL(AdjAmt,'0')) as Paid from FT_ExcessLedgerDet where FeeCategory='" + feeValue + "' and ExcessDetFK='" + SelQExPK + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "'  and FinYearFK='" + getfinid + "'");
                                                    double.TryParse(SelEx, out Exledgamt);
                                                    if (Refndamt >= Exledgamt)
                                                    {
                                                        refundcheck++;
                                                        if (refundcheck == 1)
                                                        {
                                                            string update = " update FT_ExcessDet set ExcessAmt=0,BalanceAmt=0 where ExcessDetPK='" + SelQExPK + "' and App_No='" + appl_no + "' and MemType='1' and FeeCategory='" + feeValue + "' and ExcessType='3'";
                                                            int updrefnd = d2.update_method_wo_parameter(update, "Text");
                                                        }
                                                        RefInsQ = "if exists (select * from FT_ExcessDet where App_No='" + appl_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "')update FT_ExcessDet set ExcessAmt=ISNULL(ExcessAmt,'0')+'" + refundamnt + "',BalanceAmt=ISNULL(BalanceAmt,'0')+'" + refundamnt + "' where App_No='" + appl_no + "' and FeeCategory='" + feeValue + "' and excessType='3' and FinYearFK='" + getfinid + "' else insert into FT_ExcessDet (ExcessTransDate,TransTime,app_no,memtype,excessType,Excessamt,balanceamt,feecategory,FinYearFK) values('" + DateTime.Now.ToString("MM/dd/yyyy") + "','" + transtme + "','" + appl_no + "','1','3','" + refundamnt + "','" + refundamnt + "','" + feeValue + "','" + getfinid + "')";
                                                        d2.update_method_wo_parameter(RefInsQ, "Text");
                                                        FTPK = d2.GetFunction("select ExcessDetPK from FT_ExcessDet where App_No='" + appl_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "'");
                                                        if (FTPK != "" && FTPK != "0")
                                                        {
                                                            ExLEINQ = " if exists (select * from FT_ExcessLedgerDet where ExcessDetFK='" + FTPK + "' and FeeCategory='" + feeValue + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FinYearFK='" + getfinid + "')update FT_ExcessLedgerDet set ExcessAmt='" + refundamnt + "',BalanceAmt='" + refundamnt + "' where ExcessDetFK='" + FTPK + "' and FeeCategory='" + feeValue + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FinYearFK='" + getfinid + "' else insert into FT_ExcessLedgerDet (HeaderFK,LedgerFK,ExcessAmt,BalanceAmt,ExcessDetFK,FeeCategory,FinYearFK) values('" + headerid + "','" + ledgerid + "','" + refundamnt + "','" + refundamnt + "','" + FTPK + "','" + feeValue + "','" + getfinid + "')";
                                                            d2.update_method_wo_parameter(ExLEINQ, "Text");
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    refundcheck++;
                                                    RefInsQ = "if exists (select * from FT_ExcessDet where App_No='" + appl_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "')update FT_ExcessDet set ExcessAmt='" + refundamnt + "',BalanceAmt='" + refundamnt + "' where App_No='" + appl_no + "' and FeeCategory='" + feeValue + "' and excessType='3' and FinYearFK='" + getfinid + "' else insert into FT_ExcessDet (ExcessTransDate,TransTime,app_no,memtype,excessType,Excessamt,balanceamt,feecategory,FinYearFK) values('" + DateTime.Now.ToString("MM/dd/yyyy") + "','" + transtme + "','" + appl_no + "','1','3','" + refundamnt + "','" + refundamnt + "','" + feeValue + "','" + getfinid + "')";
                                                    d2.update_method_wo_parameter(RefInsQ, "Text");
                                                    FTPK = d2.GetFunction("select ExcessDetPK from FT_ExcessDet where App_No='" + appl_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "'");
                                                    if (FTPK != "" && FTPK != "0")
                                                    {
                                                        ExLEINQ = " if exists (select * from FT_ExcessLedgerDet where ExcessDetFK='" + FTPK + "' and FeeCategory='" + feeValue + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FinYearFK='" + getfinid + "')update FT_ExcessLedgerDet set ExcessAmt='" + refundamnt + "',BalanceAmt='" + refundamnt + "' where ExcessDetFK='" + FTPK + "' and FeeCategory='" + feeValue + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FinYearFK='" + getfinid + "' else insert into FT_ExcessLedgerDet (HeaderFK,LedgerFK,ExcessAmt,BalanceAmt,ExcessDetFK,FeeCategory,FinYearFK) values('" + headerid + "','" + ledgerid + "','" + refundamnt + "','" + refundamnt + "','" + FTPK + "','" + feeValue + "','" + getfinid + "')";
                                                        d2.update_method_wo_parameter(ExLEINQ, "Text");
                                                    }
                                                }
                                            }
                                            //==========================Added by Saranya on 10/04/2018=============================//
                                            int savevalue = 1;
                                            string entrycode = Session["Entry_Code"].ToString();
                                            string formname = "Fee Allot";
                                            string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                            string doa = DateTime.Now.ToString("MM/dd/yyy");
                                            IPHostEntry host;
                                            string localip = "";
                                            host = Dns.GetHostEntry(Dns.GetHostName());
                                            foreach (IPAddress ip in host.AddressList)
                                            {
                                                if (ip.AddressFamily.ToString() == "InterNetwork")
                                                {
                                                    localip = ip.ToString();
                                                }
                                            }
                                            string details = "RollNo - " + txt_roll.Text + " : Semester - " + feestr + " : Allot Amt-" + feeamnt + " : Date - " + toa + "";
                                            string ctsname = "";
                                            if (savevalue == 1)
                                            {
                                                ctsname = "Fee Alloted";
                                            }
                                            string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                            d2.insertEinanceUserActionLog(entrycode, formname, 1, toa, doa, details, ctsname, localip);
                                            //============================================================================//
                                        }
                                        else
                                        {
                                            string delquery = "delete FT_FeeAllot where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + feeValue + "') and App_No in('" + appl_no + "') and isnull(istransfer,'0')='0' " + strFinYrFk + "";
                                            int delcount = d2.update_method_wo_parameter(delquery, "Text");
                                            if (delcount > 0)
                                            {
                                                inscheck = true;
                                            }
                                            //==========================Added by Saranya on 10/04/2018=============================//
                                            int savevalue = 3;
                                            string entrycode = Session["Entry_Code"].ToString();
                                            string formname = "FeeAllotDelete ";
                                            string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                            string doa = DateTime.Now.ToString("MM/dd/yyy");
                                            IPHostEntry host;
                                            string localip = "";
                                            host = Dns.GetHostEntry(Dns.GetHostName());
                                            foreach (IPAddress ip in host.AddressList)
                                            {
                                                if (ip.AddressFamily.ToString() == "InterNetwork")
                                                {
                                                    localip = ip.ToString();
                                                }
                                            }
                                            string details = "RollNo - " + txt_roll.Text + " : Semester - " + feestr + " : Allot Amt-" + feeamnt + " : Date - " + toa + "";
                                            string ctsname = "";
                                            if (savevalue == 3)
                                            {
                                                ctsname = "Fee Allot Deleted";
                                            }
                                            string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                            d2.insertEinanceUserActionLog(entrycode, formname, 3, toa, doa, details, ctsname, localip);
                                            //============================================================================//
                                        }
                                    }
                                }
                            }
                        }
                        //    }
                        //}
                        if (inscheck == true)
                        {
                            alertpopwindow.Visible = true;
                            lblalerterr.Visible = true;
                            lblalerterr.Text = "Saved Successfully";
                        }
                        else
                        {
                            alertpopwindow.Visible = true;
                            lblalerterr.Visible = true;
                            lblalerterr.Text = "Not Saved";
                        }
                        #endregion
                    }
                    else
                    {
                        #region multiple student

                        FpSpreadstud.SaveChanges();
                        string app_no = "";
                        int studcount = 0;
                        if (FpSpreadstud.Sheets[0].Rows.Count > 0)
                        {
                            //for (int newrow = 1; newrow < FpSpreadstud.Sheets[0].Rows.Count; newrow++)
                            //{
                            //    int checkapp = Convert.ToInt32(FpSpreadstud.Sheets[0].Cells[newrow, 1].Value);
                            //    if (checkapp == 1)
                            //    {
                            //        studcount++;
                            //        app_no = Convert.ToString(FpSpreadstud.Sheets[0].Cells[newrow, 0].Tag);
                            string memtype = "1";
                            //for (int l = 0; l < cbl_sem.Items.Count; l++)
                            //{
                            //    if (cbl_sem.Items[l].Selected == true)
                            //    {
                            foreach (KeyValuePair<string, int> feecatValue in Semflter)
                            {
                                string feestr = Convert.ToString(feecatValue.Key);
                                string feeValue = Convert.ToString(feecatValue.Value);
                                int indexvalue = 1;
                                if (FpSpread1.Sheets[0].RowCount > 0)
                                {
                                    for (int ro = 1; ro < FpSpread1.Sheets[0].RowCount; ro++)
                                    {
                                        indexvalue = Convert.ToInt32(check[Convert.ToString(feeValue)]);
                                        string headerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 0].Tag);
                                        string ledgerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 1].Tag);
                                        string feeamountmonthly = "";
                                        mulScholarVal = "";
                                        if (headerid.Trim() != "" && ledgerid.Trim() != "")
                                        {
                                            string paymode = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            if (paymode.Trim() == "Regular")
                                            {
                                                paymode = "1";
                                                feeamountmonthly = "";
                                            }
                                            else
                                            {
                                                paymode = "2";
                                                feeamountmonthly = "";
                                            }
                                            indexvalue++;
                                            string feeamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (paymode.Trim() == "2")
                                            {
                                                feeamountmonthly = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                            }

                                            //============Added by saranya on 19March2018===============//
                                            int noOfConcession = 0;
                                            noOfConcession = Convert.ToInt32(txtNoConcession.Text);
                                            string deductamount1 = string.Empty;
                                            string deductreason1 = string.Empty;
                                            string deductamount2 = string.Empty;
                                            string deductreason2 = string.Empty;
                                            string deductamount3 = string.Empty;
                                            string deductreason3 = string.Empty;
                                            string deductamnt = string.Empty;
                                            string deductreason = string.Empty;
                                            double tempDeductAmt = 0;

                                            if (noOfConcession == 0 || noOfConcession == 1)
                                            {
                                                indexvalue++;
                                                deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (deductamnt.Trim() == "")
                                                {
                                                    deductamnt = "0";
                                                }
                                                indexvalue++;
                                                tempDeductAmt = 0;
                                                deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                if (deductreason.Trim() == "")
                                                {
                                                    deductreason = "0";
                                                    //double.TryParse(deductamnt, out tempDeductAmt);
                                                    //deductamnt = "0";
                                                }
                                                deductamount1 = "0";
                                                deductamount2 = "0";
                                                deductamount3 = "0";
                                                deductreason1 = "0";
                                                deductreason2 = "0";
                                                deductreason3 = "0";
                                            }
                                            if (noOfConcession == 2)
                                            {
                                                indexvalue++;
                                                deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (deductamount1.Trim() == "")
                                                {
                                                    deductamount1 = "0";
                                                }
                                                indexvalue++;
                                                double tempDeductAmt1 = 0;
                                                deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                if (deductreason1.Trim() == "")
                                                {
                                                    deductreason1 = "0";
                                                    //double.TryParse(deductamount1, out tempDeductAmt1);
                                                    //deductamount1 = "0";
                                                }

                                                indexvalue++;
                                                deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (deductamount2.Trim() == "")
                                                {
                                                    deductamount2 = "0";
                                                }
                                                indexvalue++;
                                                double tempDeductAmt2 = 0;
                                                deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                if (deductreason2.Trim() == "")
                                                {
                                                    deductreason2 = "0";
                                                    //double.TryParse(deductamount2, out tempDeductAmt2);
                                                    //deductamount2 = "0";
                                                }
                                                indexvalue++;
                                                deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (deductamnt.Trim() == "")
                                                {
                                                    deductamnt = "0";
                                                }
                                                indexvalue++;
                                                tempDeductAmt = 0;
                                                deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                if (deductreason.Trim() == "")
                                                {
                                                    deductreason = "0";
                                                    //double.TryParse(deductamnt, out tempDeductAmt);
                                                    //deductamnt = "0";
                                                }

                                                deductamount3 = "0";
                                                deductreason3 = "0";

                                            }
                                            if (noOfConcession == 3)
                                            {
                                                indexvalue++;
                                                deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (deductamount1.Trim() == "")
                                                {
                                                    deductamount1 = "0";
                                                }
                                                indexvalue++;
                                                double tempDeductAmt1 = 0;
                                                deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                if (deductreason1.Trim() == "")
                                                {
                                                    deductreason1 = "0";
                                                    //double.TryParse(deductamount1, out tempDeductAmt1);
                                                    //deductamount1 = "0";
                                                }

                                                indexvalue++;
                                                deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (deductamount2.Trim() == "")
                                                {
                                                    deductamount2 = "0";
                                                }
                                                indexvalue++;
                                                double tempDeductAmt2 = 0;
                                                deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                if (deductreason2.Trim() == "")
                                                {
                                                    deductreason2 = "0";
                                                    //double.TryParse(deductamount2, out tempDeductAmt2);
                                                    //deductamount2 = "0";
                                                }

                                                indexvalue++;
                                                deductamount3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (deductamount3.Trim() == "")
                                                {
                                                    deductamount3 = "0";
                                                }
                                                indexvalue++;
                                                double tempDeductAmt3 = 0;
                                                deductreason3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                if (deductreason3.Trim() == "")
                                                {
                                                    deductreason3 = "0";
                                                    //double.TryParse(deductamount3, out tempDeductAmt3);
                                                    //deductamount3 = "0";
                                                }
                                                indexvalue++;
                                                deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (deductamnt.Trim() == "")
                                                {
                                                    deductamnt = "0";
                                                }
                                                indexvalue++;
                                                tempDeductAmt = 0;
                                                deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                if (deductreason.Trim() == "")
                                                {
                                                    deductreason = "0";
                                                    //double.TryParse(deductamnt, out tempDeductAmt);
                                                    //deductamnt = "0";
                                                }
                                            }

                                            //==========================================================//

                                            indexvalue++;
                                            string totalamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            double tempTot = 0;
                                            double.TryParse(totalamnt, out tempTot);
                                            tempTot += tempDeductAmt;
                                            totalamnt = Convert.ToString(tempTot);
                                            indexvalue++;
                                            string refundamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            indexvalue++;
                                            string schlSingMul = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);

                                            indexvalue++;
                                            string frmgovt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            //string mulScholarVal = string.Empty;
                                            if (frmgovt == null || frmgovt.Trim() == "")
                                            {
                                                frm = "0";
                                            }
                                            else
                                            {
                                                frm = frmgovt;
                                                if (schlSingMul.Trim().ToUpper() == "TYPE")
                                                {
                                                    mulScholarVal = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                                }
                                            }
                                            if (refundamnt.Trim() == "")
                                            {
                                                refundamnt = "0";
                                            }
                                            if (refundamnt.Trim() != "")
                                            {
                                                isfeedeposit = "1";
                                            }
                                            else
                                            {
                                                isfeedeposit = "0";
                                            }
                                            if (ledgerid.Trim() != "")
                                            {
                                                indexvalue++;
                                                string day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (day1.Trim() != "")
                                                {
                                                    day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                }
                                                else
                                                {
                                                    day1 = "";
                                                }
                                                indexvalue++;
                                                string mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (mon1.Trim() != "")
                                                {
                                                    mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                }
                                                else
                                                {
                                                    mon1 = "";
                                                }
                                                indexvalue++;
                                                string year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (year1.Trim() != "")
                                                {
                                                    year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                }
                                                else
                                                {
                                                    year1 = "";
                                                }
                                                if (day1.Trim() != "" && mon1.Trim() != "" && year1.Trim() != "")
                                                {
                                                    duedt = Convert.ToString(mon1 + "/" + day1 + "/" + year1);
                                                }
                                            }
                                            indexvalue++;
                                            string fineamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (fineamnt.Trim() == "")
                                            {
                                                fineamnt = "0";
                                            }
                                            if (ledgerid.Trim() != "")
                                            {
                                                indexvalue++;
                                                string day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (day2.Trim() != "")
                                                {
                                                    day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                }
                                                else
                                                {
                                                    day2 = "";
                                                }
                                                indexvalue++;
                                                string mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (mon2.Trim() != "")
                                                {
                                                    mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                }
                                                else
                                                {
                                                    mon2 = "";
                                                }
                                                indexvalue++;
                                                string year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (year2.Trim() != "")
                                                {
                                                    year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                }
                                                else
                                                {
                                                    year2 = "";
                                                }
                                                if (day2.Trim() != "" && mon2.Trim() != "" && year2.Trim() != "")
                                                {
                                                    startdt = Convert.ToString(mon2 + "/" + day2 + "/" + year2);
                                                }
                                            }
                                            double fee_amt = 0;
                                            double ref_amt = 0;
                                            double tot_amount = 0;
                                            double.TryParse(feeamnt, out fee_amt);
                                            double.TryParse(refundamnt, out ref_amt);
                                            double.TryParse(totalamnt, out tot_amount);
                                            //fee_amt >= ref_amt
                                            for (int newrow = 0; newrow < appnolist.Count; newrow++)
                                            {
                                                studcount++;
                                                app_no = Convert.ToString(appnolist[newrow]);
                                                if (feeamnt.Trim() != "" && feeamnt.Trim() != null && ((totalamnt.Trim() != "" && totalamnt.Trim() != null) || (Convert.ToDouble(deductamnt) == Convert.ToDouble(feeamnt))))
                                                {
                                                    string paidAmt = "PaidAmount";
                                                    //if (Convert.ToDouble(deductamnt) == Convert.ToDouble(feeamnt))
                                                    //{
                                                    //    paidAmt = "0";
                                                    //}
                                                    string insupdquery = "";

                                                    insupdquery = "if exists (select * from FT_FeeAllot where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + feeValue + "') and  App_No in('" + app_no + "') " + strFinYrFk + " and isnull(istransfer,'0')='0' ) update FT_FeeAllot set MemType='" + memtype + "',FeeAmount='" + feeamnt + "',PaidAmount=" + paidAmt + ",DeductAmout='" + deductamnt + "',DeductReason='" + deductreason + "',FromGovtAmt='" + frm + "',TotalAmount='" + totalamnt + "',RefundAmount='" + refundamnt + "',IsFeeDeposit='" + isfeedeposit + "',FeeAmountMonthly='" + feeamountmonthly + "',PayMode='" + paymode + "',PayStartDate='" + duedt.ToString() + "',PaidStatus='0',DueDate='" + startdt.ToString() + "',DueAmount='0',FineAmount='" + fineamnt + "',BalAmount=" + totalamnt + " - isnull(PaidAmount,0),DeductAmount1='" + deductamount1 + "',DeductReason1='" + deductreason1 + "',DeductAmount2='" + deductamount2 + "',DeductReason2='" + deductreason2 + "',DeductAmount3='" + deductamount3 + "',DeductReason3='" + deductreason3 + "' where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + feeValue + "')  and App_No in('" + app_no + "') and isnull(PaidAmount,0) <=" + totalamnt + " " + strFinYrFk + " and istransfer='0' else INSERT INTO FT_FeeAllot(AllotDate,MemType,App_No,LedgerFK,HeaderFK,FeeAmount,DeductAmout,DeductReason,FromGovtAmt,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,PaidStatus,DueDate,DueAmount,FineAmount,BalAmount,FinYearFK,istransfer,DeductAmount1,DeductReason1,DeductAmount2,DeductReason2,DeductAmount3,DeductReason3 ) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "'," + memtype + "," + app_no + ",'" + ledgerid + "','" + headerid + "','" + feeamnt + "','" + deductamnt + "'," + deductreason + ",'" + frm + "','" + totalamnt + "','" + refundamnt + "','" + isfeedeposit + "','" + feeamountmonthly + "','" + paymode + "','" + feeValue + "','" + duedt.ToString() + "','0','" + startdt.ToString() + "','0','" + fineamnt + "','" + totalamnt + "','" + getfinid + "','0','" + deductamount1 + "','" + deductreason1 + "','" + deductamount2 + "','" + deductreason2 + "','" + deductamount3 + "','" + deductreason3 + "')";
                                                    int inscount = d2.update_method_wo_parameter(insupdquery, "Text");
                                                    try
                                                    {
                                                        string[] reasonsWtValue = mulScholarVal.Split(',');
                                                        if (reasonsWtValue.Length > 0)
                                                        {
                                                            for (int reas = 0; reas < reasonsWtValue.Length; reas++)
                                                            {
                                                                string[] reasonAdValues = reasonsWtValue[reas].Split(':');
                                                                if (reasonAdValues.Length == 2)
                                                                {
                                                                    string insUpQuery = "if exists (select * from FT_FinScholarship where App_no=" + app_no + " and LedgerFK=" + ledgerid + " and HeaderFk=" + headerid + " and Feecategory=" + feeValue + " and ReasonCode=" + reasonAdValues[0] + " and CollegeCode=" + collegecode1 + " and FinyearFk=" + getfinid + ") update Ft_FinScholarship set AlloteDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',TotalAmount=" + reasonAdValues[1] + ",AdjusAmount=0 where App_no=" + app_no + " and LedgerFK=" + ledgerid + " and HeaderFk=" + headerid + " and Feecategory=" + feeValue + " and ReasonCode=" + reasonAdValues[0] + " and CollegeCode=" + collegecode1 + "  and FinyearFk=" + getfinid + " else INSERT INTO FT_FINSCHOLARSHIP (App_no, LedgerFK, HeaderFk, ReasonCode, Feecategory, AlloteDate, TotalAmount, AdjusAmount, FinyearFK, CollegeCode) VALUES(" + app_no + ", " + ledgerid + ", " + headerid + ", " + reasonAdValues[0] + ", " + feeValue + ", '" + DateTime.Now.ToString("MM/dd/yyyy") + "', " + reasonAdValues[1] + ", 0, " + getfinid + ", " + collegecode1 + ")";
                                                                    d2.update_method_wo_parameter(insUpQuery, "Text");
                                                                }
                                                            }
                                                        }
                                                    }
                                                    catch
                                                    {
                                                    }
                                                    if (inscount > 0)
                                                    {
                                                        if (paymode.Trim() == "2")
                                                        {
                                                            double feeallotpk = 0;
                                                            double.TryParse(d2.GetFunction("select feeallotpk from FT_FeeAllot where App_No=" + app_no + " and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FeeCategory=" + feeValue + " " + strFinYrFk + " and isnull(istransfer,'0')='0'").Trim(), out feeallotpk);
                                                            //double.TryParse(d2.GetFunction("select feeallotpk from FT_FeeAllot where App_No=" + app_no + " and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FeeCategory=" + cbl_sem.Items[l].Value + " and FinYearFK=" + getfinid + "  ").Trim(), out feeallotpk);
                                                            if (feeallotpk > 0)
                                                            {
                                                                //string delQ = "if exists (select feeallotpk from ft_feeallotmonthly where feeallotpk=" + feeallotpk + ") delete from FT_FeeallotMonthly where FeeAllotPK=" + feeallotpk + "  ";
                                                                //d2.update_method_wo_parameter(delQ, "Text");
                                                                string delQ = "if exists (select feeallotpk from ft_feeallotmonthly where feeallotpk=" + feeallotpk + ") delete from FT_FeeallotMonthly where FeeAllotPK=" + feeallotpk + " and  Isnull(PaidAmount,0) =0  ";
                                                                d2.update_method_wo_parameter(delQ, "Text");

                                                                string[] months = feeamountmonthly.Split(',');
                                                                foreach (string month in months)
                                                                {
                                                                    string[] resultval = month.Split(':');
                                                                    if (resultval.Length == 3)
                                                                    {
                                                                        //string insMonwiseQ = "INSERT INTO ft_feeallotmonthly (FeeAllotPK, AllotMonth, AllotYear, AllotAmount, BalAmount, FinYearFK) VALUES (" + feeallotpk + ", " + resultval[0] + ", " + resultval[1] + ", " + resultval[2] + ", " + resultval[2] + ", " + getfinid + ")";
                                                                        //d2.update_method_wo_parameter(insMonwiseQ, "Text");
                                                                        string insMonwiseQ = "if exists (select * from ft_feeallotmonthly where FeeAllotPK=" + feeallotpk + " and  AllotMonth=" + resultval[0] + " ) update ft_feeallotmonthly set  AllotAmount= " + resultval[2] + ", BalAmount=(" + resultval[2] + "-isnull(PaidAMount,0)), FinYearFK=" + getfinid + ",AllotYear=" + resultval[1] + " where  FeeAllotPK=" + feeallotpk + " and  AllotMonth=" + resultval[0] + "   else INSERT INTO ft_feeallotmonthly (FeeAllotPK, AllotMonth, AllotYear, AllotAmount, BalAmount, FinYearFK) VALUES (" + feeallotpk + ", " + resultval[0] + ", " + resultval[1] + ", " + resultval[2] + ", " + resultval[2] + ", " + getfinid + ")";
                                                                        d2.update_method_wo_parameter(insMonwiseQ, "Text");
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        inscheck = true;
                                                    }
                                                    //refund amount

                                                    if (refundamnt != "" && refundamnt != "0")
                                                    {
                                                        double Refndamt = 0;
                                                        double Exledgamt = 0;
                                                        double.TryParse(refundamnt, out Refndamt);
                                                        string SelQExPK = d2.GetFunction(" select ExcessDetPK from FT_ExcessDet where ExcessType='3' and App_No='" + app_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "'");
                                                        if (SelQExPK != "" && SelQExPK != "0")
                                                        {
                                                            string SelEx = d2.GetFunction(" select SUM(ISNULL(AdjAmt,'0')) as Paid from FT_ExcessLedgerDet where FeeCategory='" + feeValue + "' and ExcessDetFK='" + SelQExPK + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "'  and FinYearFK='" + getfinid + "'");
                                                            double.TryParse(SelEx, out Exledgamt);
                                                            if (Refndamt >= Exledgamt)
                                                            {
                                                                refundcheck++;
                                                                if (refundcheck == 1)
                                                                {
                                                                    string update = " update FT_ExcessDet set ExcessAmt=0,BalanceAmt=0 where ExcessDetPK='" + SelQExPK + "' and App_No='" + app_no + "' and MemType='1' and FeeCategory='" + feeValue + "' and ExcessType='3'";
                                                                    int updrefnd = d2.update_method_wo_parameter(update, "Text");
                                                                }
                                                                string RefInsQ = "if exists (select * from FT_ExcessDet where App_No='" + app_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "')update FT_ExcessDet set ExcessAmt=ISNULL(ExcessAmt,'0')+'" + refundamnt + "',BalanceAmt=ISNULL(BalanceAmt,'0')+'" + refundamnt + "' where App_No='" + app_no + "' and FeeCategory='" + feeValue + "' and excessType='3' and FinYearFK='" + getfinid + "' else insert into FT_ExcessDet (ExcessTransDate,TransTime,app_no,memtype,excessType,Excessamt,balanceamt,feecategory,FinYearFK) values('" + DateTime.Now.ToString("MM/dd/yyyy") + "','" + transtme + "','" + app_no + "','1','3','" + refundamnt + "','" + refundamnt + "','" + feeValue + "','" + getfinid + "')";
                                                                d2.update_method_wo_parameter(RefInsQ, "Text");
                                                                string FTPK = d2.GetFunction("select ExcessDetPK from FT_ExcessDet where App_No='" + app_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "'");
                                                                if (FTPK != "" && FTPK != "0")
                                                                {
                                                                    String ExLEINQ = " if exists (select * from FT_ExcessLedgerDet where ExcessDetFK='" + FTPK + "' and FeeCategory='" + feeValue + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FinYearFK='" + getfinid + "')update FT_ExcessLedgerDet set ExcessAmt='" + refundamnt + "',BalanceAmt='" + refundamnt + "' where ExcessDetFK='" + FTPK + "' and FeeCategory='" + feeValue + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FinYearFK='" + getfinid + "' else insert into FT_ExcessLedgerDet (HeaderFK,LedgerFK,ExcessAmt,BalanceAmt,ExcessDetFK,FeeCategory,FinYearFK) values('" + headerid + "','" + ledgerid + "','" + refundamnt + "','" + refundamnt + "','" + FTPK + "','" + feeValue + "','" + getfinid + "')";
                                                                    d2.update_method_wo_parameter(ExLEINQ, "Text");
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            refundcheck++;
                                                            string RefInsQ = "if exists (select * from FT_ExcessDet where App_No='" + app_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "')update FT_ExcessDet set ExcessAmt='" + refundamnt + "',BalanceAmt='" + refundamnt + "' where App_No='" + app_no + "' and FeeCategory='" + feeValue + "' and excessType='3' and FinYearFK='" + getfinid + "' else insert into FT_ExcessDet (ExcessTransDate,TransTime,app_no,memtype,excessType,Excessamt,balanceamt,feecategory,FinYearFK) values('" + DateTime.Now.ToString("MM/dd/yyyy") + "','" + transtme + "','" + app_no + "','1','3','" + refundamnt + "','" + refundamnt + "','" + feeValue + "','" + getfinid + "')";
                                                            d2.update_method_wo_parameter(RefInsQ, "Text");
                                                            string FTPK = d2.GetFunction("select ExcessDetPK from FT_ExcessDet where App_No='" + app_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "'");
                                                            if (FTPK != "" && FTPK != "0")
                                                            {
                                                                String ExLEINQ = " if exists (select * from FT_ExcessLedgerDet where ExcessDetFK='" + FTPK + "' and FeeCategory='" + feeValue + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FinYearFK='" + getfinid + "')update FT_ExcessLedgerDet set ExcessAmt='" + refundamnt + "',BalanceAmt='" + refundamnt + "' where ExcessDetFK='" + FTPK + "' and FeeCategory='" + feeValue + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FinYearFK='" + getfinid + "' else insert into FT_ExcessLedgerDet (HeaderFK,LedgerFK,ExcessAmt,BalanceAmt,ExcessDetFK,FeeCategory,FinYearFK) values('" + headerid + "','" + ledgerid + "','" + refundamnt + "','" + refundamnt + "','" + FTPK + "','" + feeValue + "','" + getfinid + "')";
                                                                d2.update_method_wo_parameter(ExLEINQ, "Text");
                                                            }
                                                        }
                                                    }
                                                    //==========================Added by Saranya on 10/04/2018=============================//
                                                    int savevalue = 1;
                                                    string entrycode = Session["Entry_Code"].ToString();
                                                    string formname = "Fee Allot";
                                                    string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                    string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                    IPHostEntry host;
                                                    string localip = "";
                                                    host = Dns.GetHostEntry(Dns.GetHostName());
                                                    foreach (IPAddress ip in host.AddressList)
                                                    {
                                                        if (ip.AddressFamily.ToString() == "InterNetwork")
                                                        {
                                                            localip = ip.ToString();
                                                        }
                                                    }
                                                    string details = "App_No - " + app_no + " : Semester - " + feestr + " : Allot Amt-" + feeamnt + " : Date - " + toa + "";
                                                    string ctsname = "";
                                                    if (savevalue == 1)
                                                    {
                                                        ctsname = "Fee Alloted";
                                                    }
                                                    string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                    d2.insertEinanceUserActionLog(entrycode, formname, 1, toa, doa, details, ctsname, localip);
                                                    //============================================================================//
                                                }
                                                else
                                                {
                                                    string delquery = "delete FT_FeeAllot where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + feeValue + "') and App_No in('" + app_no + "') and isnull(istransfer,'0')='0'" + strFinYrFk + "";
                                                    int delcount = d2.update_method_wo_parameter(delquery, "Text");
                                                    if (delcount > 0)
                                                    {
                                                        inscheck = true;
                                                    }
                                                    //==========================Added by Saranya on 10/04/2018=============================//
                                                    int savevalue = 3;
                                                    string entrycode = Session["Entry_Code"].ToString();
                                                    string formname = "Fee Allot Delete";
                                                    string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                    string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                    IPHostEntry host;
                                                    string localip = "";
                                                    host = Dns.GetHostEntry(Dns.GetHostName());
                                                    foreach (IPAddress ip in host.AddressList)
                                                    {
                                                        if (ip.AddressFamily.ToString() == "InterNetwork")
                                                        {
                                                            localip = ip.ToString();
                                                        }
                                                    }
                                                    string details = "App_No - " + app_no + " : Semester - " + feestr + " : Allot Amt-" + feeamnt + " : Date - " + toa + "";
                                                    string ctsname = "";
                                                    if (savevalue == 3)
                                                    {
                                                        ctsname = "Fee Allot Deleted";
                                                    }
                                                    string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                    d2.insertEinanceUserActionLog(entrycode, formname, 3, toa, doa, details, ctsname, localip);
                                                    //============================================================================//
                                                }
                                            }
                                        }

                                    }
                                }
                                //  }
                                //    }
                                //}
                                // }
                            }
                            if (studcount == 0)
                            {
                                alertpopwindow.Visible = true;
                                lblalerterr.Visible = true;
                                lblalerterr.Text = "Please select any one student!";
                            }
                            if (inscheck == true)
                            {
                                alertpopwindow.Visible = true;
                                lblalerterr.Visible = true;
                                lblalerterr.Text = "Saved Successfully";
                            }
                        }
                        #endregion
                    }
                }

                #endregion

                #region Individual Applied
                if (ddl_type.SelectedItem.Text == "Individual(Applied)")
                {
                    if (txt_roll.Text.Trim() != "")
                    {
                        #region textbox

                        string memtype = "1";
                        string appl_no = "";
                        //for (int l = 0; l < cbl_sem.Items.Count; l++)
                        //{
                        //    if (cbl_sem.Items[l].Selected == true)
                        //    {
                        foreach (KeyValuePair<string, int> feecatValue in Semflter)
                        {
                            string feestr = Convert.ToString(feecatValue.Key);
                            string feeValue = Convert.ToString(feecatValue.Value);
                            int indexvalue = 1;
                            if (FpSpread1.Sheets[0].RowCount > 0)
                            {
                                for (int ro = 1; ro < FpSpread1.Sheets[0].RowCount; ro++)
                                {
                                    indexvalue = Convert.ToInt32(check[feeValue]);
                                    string headerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 0].Tag);
                                    string ledgerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 1].Tag);
                                    string feeamountmonthly = "";
                                    mulScholarVal = "";
                                    if (headerid.Trim() != "" && ledgerid.Trim() != "")
                                    {
                                        string paymode = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                        if (paymode.Trim() == "Regular")
                                        {
                                            paymode = "1";
                                            feeamountmonthly = "";
                                        }
                                        else
                                        {
                                            paymode = "2";
                                            feeamountmonthly = "";
                                        }
                                        indexvalue++;
                                        string feeamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                        if (paymode.Trim() == "2")
                                        {
                                            feeamountmonthly = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                        }

                                        //============Added by saranya on 19March2018===============//
                                        int noOfConcession = 0;
                                        noOfConcession = Convert.ToInt32(txtNoConcession.Text);
                                        string deductamount1 = string.Empty;
                                        string deductreason1 = string.Empty;
                                        string deductamount2 = string.Empty;
                                        string deductreason2 = string.Empty;
                                        string deductamount3 = string.Empty;
                                        string deductreason3 = string.Empty;
                                        string deductamnt = string.Empty;
                                        string deductreason = string.Empty;
                                        double tempDeductAmt = 0;

                                        if (noOfConcession == 0 || noOfConcession == 1)
                                        {
                                            indexvalue++;
                                            deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (deductamnt.Trim() == "")
                                            {
                                                deductamnt = "0";
                                            }
                                            indexvalue++;
                                            tempDeductAmt = 0;
                                            deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            if (deductreason.Trim() == "")
                                            {
                                                deductreason = "0";
                                                //double.TryParse(deductamnt, out tempDeductAmt);
                                                //deductamnt = "0";
                                            }
                                            deductamount1 = "0";
                                            deductamount2 = "0";
                                            deductamount3 = "0";
                                            deductreason1 = "0";
                                            deductreason2 = "0";
                                            deductreason3 = "0";
                                        }
                                        if (noOfConcession == 2)
                                        {
                                            indexvalue++;
                                            deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (deductamount1.Trim() == "")
                                            {
                                                deductamount1 = "0";
                                            }
                                            indexvalue++;
                                            double tempDeductAmt1 = 0;
                                            deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            if (deductreason1.Trim() == "")
                                            {
                                                deductreason1 = "0";
                                                //    double.TryParse(deductamount1, out tempDeductAmt1);
                                                //    deductamount1 = "0";
                                            }

                                            indexvalue++;
                                            deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (deductamount2.Trim() == "")
                                            {
                                                deductamount2 = "0";
                                            }
                                            indexvalue++;
                                            double tempDeductAmt2 = 0;
                                            deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            if (deductreason2.Trim() == "")
                                            {
                                                deductreason2 = "0";
                                                //double.TryParse(deductamount2, out tempDeductAmt2);
                                                //deductamount2 = "0";
                                            }
                                            indexvalue++;
                                            deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (deductamnt.Trim() == "")
                                            {
                                                deductamnt = "0";
                                            }
                                            indexvalue++;
                                            tempDeductAmt = 0;
                                            deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            if (deductreason.Trim() == "")
                                            {
                                                deductreason = "0";
                                                //double.TryParse(deductamnt, out tempDeductAmt);
                                                //deductamnt = "0";
                                            }

                                            deductamount3 = "0";
                                            deductreason3 = "0";

                                        }
                                        if (noOfConcession == 3)
                                        {
                                            indexvalue++;
                                            deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (deductamount1.Trim() == "")
                                            {
                                                deductamount1 = "0";
                                            }
                                            indexvalue++;
                                            //double tempDeductAmt1 = 0;
                                            deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            if (deductreason1.Trim() == "")
                                            {
                                                deductreason1 = "0";
                                                //double.TryParse(deductamount1, out tempDeductAmt1);
                                                //deductamount1 = "0";
                                            }

                                            indexvalue++;
                                            deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (deductamount2.Trim() == "")
                                            {
                                                deductamount2 = "0";
                                            }
                                            indexvalue++;
                                            double tempDeductAmt2 = 0;
                                            deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            if (deductreason2.Trim() == "")
                                            {
                                                deductreason2 = "0";
                                                //double.TryParse(deductamount2, out tempDeductAmt2);
                                                //deductamount2 = "0";
                                            }

                                            indexvalue++;
                                            deductamount3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (deductamount3.Trim() == "")
                                            {
                                                deductamount3 = "0";
                                            }
                                            indexvalue++;
                                            double tempDeductAmt3 = 0;
                                            deductreason3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            if (deductreason3.Trim() == "")
                                            {
                                                deductreason3 = "0";
                                                //double.TryParse(deductamount3, out tempDeductAmt3);
                                                //deductamount3 = "0";
                                            }
                                            indexvalue++;
                                            deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (deductamnt.Trim() == "")
                                            {
                                                deductamnt = "0";
                                            }
                                            indexvalue++;
                                            tempDeductAmt = 0;
                                            deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            if (deductreason.Trim() == "")
                                            {
                                                deductreason = "0";
                                                //double.TryParse(deductamnt, out tempDeductAmt);
                                                //deductamnt = "0";
                                            }
                                        }

                                        //==========================================================//


                                        indexvalue++;
                                        string totalamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                        double tempTot = 0;
                                        double.TryParse(totalamnt, out tempTot);
                                        tempTot += tempDeductAmt;
                                        totalamnt = Convert.ToString(tempTot);
                                        indexvalue++;
                                        string refundamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);

                                        indexvalue++;
                                        string schlSingMul = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                        indexvalue++;
                                        string frmgovt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);

                                        if (frmgovt == null || frmgovt.Trim() == "")
                                        {
                                            frm = "0";
                                        }
                                        else
                                        {
                                            frm = frmgovt;
                                            if (schlSingMul.Trim().ToUpper() == "TYPE")
                                            {
                                                mulScholarVal = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                            }
                                        }

                                        if (refundamnt.Trim() == "")
                                        {
                                            refundamnt = "0";
                                        }
                                        if (refundamnt.Trim() != "")
                                        {
                                            isfeedeposit = "1";
                                        }
                                        else
                                        {
                                            isfeedeposit = "0";
                                        }
                                        if (ledgerid.Trim() != "")
                                        {
                                            indexvalue++;
                                            string day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (day1.Trim() != "")
                                            {
                                                day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            }
                                            else
                                            {
                                                day1 = "";
                                            }
                                            indexvalue++;
                                            string mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (mon1.Trim() != "")
                                            {
                                                mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            }
                                            else
                                            {
                                                mon1 = "";
                                            }
                                            indexvalue++;
                                            string year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (year1.Trim() != "")
                                            {
                                                year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            }
                                            else
                                            {
                                                year1 = "";
                                            }
                                            if (day1.Trim() != "" && mon1.Trim() != "" && year1.Trim() != "")
                                            {
                                                duedt = Convert.ToString(mon1 + "/" + day1 + "/" + year1);
                                            }
                                        }
                                        indexvalue++;
                                        string fineamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                        if (fineamnt.Trim() == "")
                                        {
                                            fineamnt = "0";
                                        }
                                        if (ledgerid.Trim() != "")
                                        {
                                            indexvalue++;
                                            string day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (day2.Trim() != "")
                                            {
                                                day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            }
                                            else
                                            {
                                                day2 = "";
                                            }
                                            indexvalue++;
                                            string mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (mon2.Trim() != "")
                                            {
                                                mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            }
                                            else
                                            {
                                                mon2 = "";
                                            }
                                            indexvalue++;
                                            string year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (year2.Trim() != "")
                                            {
                                                year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            }
                                            else
                                            {
                                                year2 = "";
                                            }
                                            if (day2.Trim() != "" && mon2.Trim() != "" && year2.Trim() != "")
                                            {
                                                startdt = Convert.ToString(mon2 + "/" + day2 + "/" + year2);
                                            }
                                        }
                                        appl_no = getAppNo(txt_roll.Text.Trim(), collegecode1);
                                        double fee_amt = 0;
                                        double ref_amt = 0;
                                        double tot_amount = 0;
                                        double.TryParse(feeamnt, out fee_amt);
                                        double.TryParse(refundamnt, out ref_amt);
                                        double.TryParse(totalamnt, out tot_amount);
                                        //fee_amt >= ref_amt
                                        if (feeamnt.Trim() != "" && feeamnt.Trim() != null && ((totalamnt.Trim() != "" && totalamnt.Trim() != null) || (Convert.ToDouble(deductamnt) == Convert.ToDouble(feeamnt))))
                                        {
                                            string paidAmt = "PaidAmount";
                                            //if (Convert.ToDouble(deductamnt) == Convert.ToDouble(feeamnt))
                                            //{
                                            //    paidAmt = "0";
                                            //}
                                            string insupdquery = "if exists (select * from FT_FeeAllot where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + feeValue + "')  and App_No in('" + appl_no + "') " + strFinYrFk + " and isnull(istransfer,'0')='0') update FT_FeeAllot set MemType='" + memtype + "',FeeAmount='" + feeamnt + "',PaidAmount=" + paidAmt + ",DeductAmout='" + deductamnt + "',DeductReason='" + deductreason + "',FromGovtAmt='" + frm + "',TotalAmount='" + totalamnt + "',RefundAmount='" + refundamnt + "',IsFeeDeposit='" + isfeedeposit + "',FeeAmountMonthly='" + feeamountmonthly + "',PayMode='" + paymode + "',PayStartDate='" + duedt.ToString() + "',PaidStatus='0',DueDate='" + startdt.ToString() + "',DueAmount='0',FineAmount='" + fineamnt + "',BalAmount=" + totalamnt + " - isnull(PaidAmount,0),DeductAmount1='" + deductamount1 + "',DeductReason1='" + deductreason1 + "',DeductAmount2='" + deductamount2 + "',DeductReason2='" + deductreason2 + "',DeductAmount3='" + deductamount3 + "',DeductReason3='" + deductreason3 + "' where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + feeValue + "') and App_No in('" + appl_no + "') and isnull(PaidAmount,0) <=" + totalamnt + " " + strFinYrFk + " and istransfer='0' else INSERT INTO FT_FeeAllot(AllotDate,MemType,App_No,LedgerFK,HeaderFK, FeeAmount,DeductAmout, DeductReason,FromGovtAmt,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,PaidStatus,DueDate,DueAmount,FineAmount,BalAmount,FinYearFK,istransfer,DeductAmount1,DeductReason1,DeductAmount2,DeductReason2,DeductAmount3,DeductReason3) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "'," + memtype + "," + appl_no + ",'" + ledgerid + "','" + headerid + "','" + feeamnt + "','" + deductamnt + "'," + deductreason + ",'" + frm + "','" + totalamnt + "','" + refundamnt + "','" + isfeedeposit + "','" + feeamountmonthly + "','" + paymode + "','" + feeValue + "','" + duedt.ToString() + "','0','" + startdt.ToString() + "','0','" + fineamnt + "','" + totalamnt + "','" + getfinid + "','0','" + deductamount1 + "','" + deductreason1 + "','" + deductamount2 + "','" + deductreason2 + "','" + deductamount3 + "','" + deductreason3 + "')";

                                            try
                                            {
                                                string[] reasonsWtValue = mulScholarVal.Split(',');
                                                if (reasonsWtValue.Length > 0)
                                                {
                                                    for (int reas = 0; reas < reasonsWtValue.Length; reas++)
                                                    {
                                                        string[] reasonAdValues = reasonsWtValue[reas].Split(':');
                                                        if (reasonAdValues.Length == 2)
                                                        {
                                                            string insUpQuery = "if exists (select * from FT_FinScholarship where App_no=" + appl_no + " and LedgerFK=" + ledgerid + " and HeaderFk=" + headerid + " and Feecategory=" + feeValue + " and ReasonCode=" + reasonAdValues[0] + " and CollegeCode=" + collegecode1 + " and FinyearFk=" + getfinid + ") update Ft_FinScholarship set AlloteDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',TotalAmount=" + reasonAdValues[1] + ",AdjusAmount=0 where App_no=" + appl_no + " and LedgerFK=" + ledgerid + " and HeaderFk=" + headerid + " and Feecategory=" + feeValue + " and ReasonCode=" + reasonAdValues[0] + " and CollegeCode=" + collegecode1 + "  and FinyearFk=" + getfinid + " else INSERT INTO FT_FINSCHOLARSHIP (App_no, LedgerFK, HeaderFk, ReasonCode, Feecategory, AlloteDate, TotalAmount, AdjusAmount, FinyearFK, CollegeCode) VALUES(" + appl_no + ", " + ledgerid + ", " + headerid + ", " + reasonAdValues[0] + ", " + feeValue + ", '" + DateTime.Now.ToString("MM/dd/yyyy") + "', " + reasonAdValues[1] + ", 0, " + getfinid + ", " + collegecode1 + ")";
                                                            d2.update_method_wo_parameter(insUpQuery, "Text");
                                                        }
                                                    }
                                                }
                                            }
                                            catch
                                            {
                                            }
                                            int inscount = d2.update_method_wo_parameter(insupdquery, "Text");
                                            if (inscount > 0)
                                            {
                                                if (paymode.Trim() == "2")
                                                {
                                                    double feeallotpk = 0;
                                                    double.TryParse(d2.GetFunction("select feeallotpk from FT_FeeAllot where App_No=" + appl_no + " and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FeeCategory=" + feeValue + "    " + strFinYrFk + " and isnull(istransfer,'0')='0'").Trim(), out feeallotpk);
                                                    //double.TryParse(d2.GetFunction("select feeallotpk from FT_FeeAllot where App_No=" + appl_no + " and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FeeCategory=" + cbl_sem.Items[l].Value + " and FinYearFK=" + getfinid + "  ").Trim(), out feeallotpk);
                                                    if (feeallotpk > 0)
                                                    {
                                                        string delQ = "if exists (select feeallotpk from ft_feeallotmonthly where feeallotpk=" + feeallotpk + ") delete from FT_FeeallotMonthly where FeeAllotPK=" + feeallotpk + " and  Isnull(PaidAmount,0) =0  ";
                                                        d2.update_method_wo_parameter(delQ, "Text");

                                                        string[] months = feeamountmonthly.Split(',');
                                                        foreach (string month in months)
                                                        {
                                                            string[] resultval = month.Split(':');
                                                            if (resultval.Length == 3)
                                                            {
                                                                string insMonwiseQ = "if exists (select * from ft_feeallotmonthly where FeeAllotPK=" + feeallotpk + " and  AllotMonth=" + resultval[0] + " ) update ft_feeallotmonthly set  AllotAmount= " + resultval[2] + ", BalAmount=(" + resultval[2] + "-isnull(PaidAMount,0)), FinYearFK=" + getfinid + ",AllotYear=" + resultval[1] + " where  FeeAllotPK=" + feeallotpk + " and  AllotMonth=" + resultval[0] + "   else INSERT INTO ft_feeallotmonthly (FeeAllotPK, AllotMonth, AllotYear, AllotAmount, BalAmount, FinYearFK) VALUES (" + feeallotpk + ", " + resultval[0] + ", " + resultval[1] + ", " + resultval[2] + ", " + resultval[2] + ", " + getfinid + ")";
                                                                d2.update_method_wo_parameter(insMonwiseQ, "Text");
                                                            }
                                                        }
                                                    }
                                                }

                                                inscheck = true;
                                            }
                                            //refund amount                                           
                                            if (refundamnt != "" && refundamnt != "0")
                                            {
                                                double Refndamt = 0;
                                                double Exledgamt = 0;
                                                double.TryParse(refundamnt, out Refndamt);
                                                string SelQExPK = d2.GetFunction(" select ExcessDetPK from FT_ExcessDet where ExcessType='3' and App_No='" + appl_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "'");
                                                if (SelQExPK != "" && SelQExPK != "0")
                                                {
                                                    string SelEx = d2.GetFunction(" select SUM(ISNULL(AdjAmt,'0')) as Paid from FT_ExcessLedgerDet where FeeCategory='" + feeValue + "' and ExcessDetFK='" + SelQExPK + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "'  and FinYearFK='" + getfinid + "'");
                                                    double.TryParse(SelEx, out Exledgamt);
                                                    if (Refndamt >= Exledgamt)
                                                    {

                                                        refundcheck++;
                                                        if (refundcheck == 1)
                                                        {
                                                            string update = " update FT_ExcessDet set ExcessAmt=0,BalanceAmt=0 where ExcessDetPK='" + SelQExPK + "' and App_No='" + appl_no + "' and MemType='1' and FeeCategory='" + feeValue + "' and ExcessType='3'";
                                                            int updrefnd = d2.update_method_wo_parameter(update, "Text");
                                                        }
                                                        string RefInsQ = "if exists (select * from FT_ExcessDet where App_No='" + appl_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "')update FT_ExcessDet set ExcessAmt=ISNULL(ExcessAmt,'0')+'" + refundamnt + "',BalanceAmt=ISNULL(BalanceAmt,'0')+'" + refundamnt + "' where App_No='" + appl_no + "' and FeeCategory='" + feeValue + "' and excessType='3' and FinYearFK='" + getfinid + "' else insert into FT_ExcessDet (ExcessTransDate,TransTime,app_no,memtype,excessType,Excessamt,balanceamt,feecategory,FinYearFK) values('" + DateTime.Now.ToString("MM/dd/yyyy") + "','" + transtme + "','" + appl_no + "','1','3','" + refundamnt + "','" + refundamnt + "','" + feeValue + "','" + getfinid + "')";
                                                        d2.update_method_wo_parameter(RefInsQ, "Text");
                                                        string FTPK = d2.GetFunction("select ExcessDetPK from FT_ExcessDet where App_No='" + appl_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "'");
                                                        if (FTPK != "" && FTPK != "0")
                                                        {
                                                            String ExLEINQ = " if exists (select * from FT_ExcessLedgerDet where ExcessDetFK='" + FTPK + "' and FeeCategory='" + feeValue + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FinYearFK='" + getfinid + "')update FT_ExcessLedgerDet set ExcessAmt='" + refundamnt + "',BalanceAmt='" + refundamnt + "' where ExcessDetFK='" + FTPK + "' and FeeCategory='" + feeValue + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FinYearFK='" + getfinid + "' else insert into FT_ExcessLedgerDet (HeaderFK,LedgerFK,ExcessAmt,BalanceAmt,ExcessDetFK,FeeCategory,FinYearFK) values('" + headerid + "','" + ledgerid + "','" + refundamnt + "','" + refundamnt + "','" + FTPK + "','" + feeValue + "','" + getfinid + "')";
                                                            d2.update_method_wo_parameter(ExLEINQ, "Text");
                                                        }
                                                    }
                                                }
                                                else
                                                {
                                                    refundcheck++;
                                                    string RefInsQ = "if exists (select * from FT_ExcessDet where App_No='" + appl_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "')update FT_ExcessDet set ExcessAmt='" + refundamnt + "',BalanceAmt='" + refundamnt + "' where App_No='" + appl_no + "' and FeeCategory='" + feeValue + "' and excessType='3' and FinYearFK='" + getfinid + "' else insert into FT_ExcessDet (ExcessTransDate,TransTime,app_no,memtype,excessType,Excessamt,balanceamt,feecategory,FinYearFK) values('" + DateTime.Now.ToString("MM/dd/yyyy") + "','" + transtme + "','" + appl_no + "','1','3','" + refundamnt + "','" + refundamnt + "','" + feeValue + "','" + getfinid + "')";
                                                    d2.update_method_wo_parameter(RefInsQ, "Text");
                                                    string FTPK = d2.GetFunction("select ExcessDetPK from FT_ExcessDet where App_No='" + appl_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "'");
                                                    if (FTPK != "" && FTPK != "0")
                                                    {
                                                        String ExLEINQ = " if exists (select * from FT_ExcessLedgerDet where ExcessDetFK='" + FTPK + "' and FeeCategory='" + feeValue + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FinYearFK='" + getfinid + "')update FT_ExcessLedgerDet set ExcessAmt='" + refundamnt + "',BalanceAmt='" + refundamnt + "' where ExcessDetFK='" + FTPK + "' and FeeCategory='" + feeValue + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FinYearFK='" + getfinid + "' else insert into FT_ExcessLedgerDet (HeaderFK,LedgerFK,ExcessAmt,BalanceAmt,ExcessDetFK,FeeCategory,FinYearFK) values('" + headerid + "','" + ledgerid + "','" + refundamnt + "','" + refundamnt + "','" + FTPK + "','" + feeValue + "','" + getfinid + "')";
                                                        d2.update_method_wo_parameter(ExLEINQ, "Text");
                                                    }
                                                }
                                            }
                                            //==========================Added by Saranya on 10/04/2018=============================//
                                            int savevalue = 1;
                                            string entrycode = Session["Entry_Code"].ToString();
                                            string formname = "Fee Allot";
                                            string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                            string doa = DateTime.Now.ToString("MM/dd/yyy");
                                            IPHostEntry host;
                                            string localip = "";
                                            host = Dns.GetHostEntry(Dns.GetHostName());
                                            foreach (IPAddress ip in host.AddressList)
                                            {
                                                if (ip.AddressFamily.ToString() == "InterNetwork")
                                                {
                                                    localip = ip.ToString();
                                                }
                                            }
                                            string details = "RollNo - " + txt_roll.Text + " : Semester - " + feestr + " : Allot Amt-" + feeamnt + " : Date - " + toa + "";
                                            string ctsname = "";
                                            if (savevalue == 1)
                                            {
                                                ctsname = "Fee Alloted";
                                            }
                                            string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                            d2.insertEinanceUserActionLog(entrycode, formname, 1, toa, doa, details, ctsname, localip);
                                            //============================================================================//
                                        }
                                        else
                                        {
                                            string delquery = "delete FT_FeeAllot where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + feeValue + "') and App_No in('" + appl_no + "') " + strFinYrFk + " and isnull(istransfer,'0')='0'";
                                            int delcount = d2.update_method_wo_parameter(delquery, "Text");
                                            if (delcount > 0)
                                            {
                                                inscheck = true;
                                            }
                                            //==========================Added by Saranya on 10/04/2018=============================//
                                            int savevalue = 3;
                                            string entrycode = Session["Entry_Code"].ToString();
                                            string formname = "Fee Allot Delete";
                                            string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                            string doa = DateTime.Now.ToString("MM/dd/yyy");
                                            IPHostEntry host;
                                            string localip = "";
                                            host = Dns.GetHostEntry(Dns.GetHostName());
                                            foreach (IPAddress ip in host.AddressList)
                                            {
                                                if (ip.AddressFamily.ToString() == "InterNetwork")
                                                {
                                                    localip = ip.ToString();
                                                }
                                            }
                                            string details = "RollNo - " + txt_roll.Text + " : Semester - " + feestr + " : Allot Amt-" + feeamnt + " : Date - " + toa + "";
                                            string ctsname = "";
                                            if (savevalue == 3)
                                            {
                                                ctsname = "Fee Allot Deleted";
                                            }
                                            string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                            d2.insertEinanceUserActionLog(entrycode, formname, 3, toa, doa, details, ctsname, localip);
                                            //============================================================================//
                                        }
                                    }
                                }
                            }
                            //    }
                            //}
                        }
                        if (inscheck == true)
                        {
                            alertpopwindow.Visible = true;
                            lblalerterr.Visible = true;
                            lblalerterr.Text = "Saved Successfully";
                        }
                        #endregion
                    }
                    else
                    {
                        #region multiple student

                        FpSpreadstud.SaveChanges();
                        string app_no = "";
                        int studcount = 0;
                        if (FpSpreadstud.Sheets[0].Rows.Count > 0)
                        {
                            //for (int newrow = 1; newrow < FpSpreadstud.Sheets[0].Rows.Count; newrow++)
                            //{
                            //    int checkapp = Convert.ToInt32(FpSpreadstud.Sheets[0].Cells[newrow, 1].Value);
                            //    if (checkapp == 1)
                            //    {
                            //        studcount++;
                            //        app_no = Convert.ToString(FpSpreadstud.Sheets[0].Cells[newrow, 0].Tag);
                            string memtype = "1";
                            //for (int l = 0; l < cbl_sem.Items.Count; l++)
                            //{
                            //    if (cbl_sem.Items[l].Selected == true)
                            //    {
                            foreach (KeyValuePair<string, int> feecatValue in Semflter)
                            {
                                string feestr = Convert.ToString(feecatValue.Key);
                                string feeValue = Convert.ToString(feecatValue.Value);
                                int indexvalue = 1;
                                if (FpSpread1.Sheets[0].RowCount > 0)
                                {
                                    for (int ro = 1; ro < FpSpread1.Sheets[0].RowCount; ro++)
                                    {
                                        indexvalue = Convert.ToInt32(check[feeValue]);
                                        string headerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 0].Tag);
                                        string ledgerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 1].Tag);
                                        string feeamountmonthly = "";
                                        mulScholarVal = "";
                                        if (headerid.Trim() != "" && ledgerid.Trim() != "")
                                        {
                                            string paymode = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            if (paymode.Trim() == "Regular")
                                            {
                                                paymode = "1";
                                                feeamountmonthly = "";
                                            }
                                            else
                                            {
                                                paymode = "2";
                                                feeamountmonthly = "";
                                            }
                                            indexvalue++;
                                            string feeamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (paymode.Trim() == "2")
                                            {
                                                feeamountmonthly = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                            }

                                            //============Added by saranya on 19March2018===============//
                                            int noOfConcession = 0;
                                            noOfConcession = Convert.ToInt32(txtNoConcession.Text);
                                            string deductamount1 = string.Empty;
                                            string deductreason1 = string.Empty;
                                            string deductamount2 = string.Empty;
                                            string deductreason2 = string.Empty;
                                            string deductamount3 = string.Empty;
                                            string deductreason3 = string.Empty;
                                            string deductamnt = string.Empty;
                                            string deductreason = string.Empty;
                                            double tempDeductAmt = 0;

                                            if (noOfConcession == 0 || noOfConcession == 1)
                                            {
                                                indexvalue++;
                                                deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (deductamnt.Trim() == "")
                                                {
                                                    deductamnt = "0";
                                                }
                                                indexvalue++;
                                                tempDeductAmt = 0;
                                                deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                if (deductreason.Trim() == "")
                                                {
                                                    deductreason = "0";
                                                    //double.TryParse(deductamnt, out tempDeductAmt);
                                                    //deductamnt = "0";
                                                }
                                                deductamount1 = "0";
                                                deductamount2 = "0";
                                                deductamount3 = "0";
                                                deductreason1 = "0";
                                                deductreason2 = "0";
                                                deductreason3 = "0";
                                            }
                                            if (noOfConcession == 2)
                                            {
                                                indexvalue++;
                                                deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (deductamount1.Trim() == "")
                                                {
                                                    deductamount1 = "0";
                                                }
                                                indexvalue++;
                                                double tempDeductAmt1 = 0;
                                                deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                if (deductreason1.Trim() == "")
                                                {
                                                    deductreason1 = "0";
                                                    //double.TryParse(deductamount1, out tempDeductAmt1);
                                                    //deductamount1 = "0";
                                                }

                                                indexvalue++;
                                                deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (deductamount2.Trim() == "")
                                                {
                                                    deductamount2 = "0";
                                                }
                                                indexvalue++;
                                                double tempDeductAmt2 = 0;
                                                deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                if (deductreason2.Trim() == "")
                                                {
                                                    deductreason2 = "0";
                                                    //double.TryParse(deductamount2, out tempDeductAmt2);
                                                    //deductamount2 = "0";
                                                }
                                                indexvalue++;
                                                deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (deductamnt.Trim() == "")
                                                {
                                                    deductamnt = "0";
                                                }
                                                indexvalue++;
                                                tempDeductAmt = 0;
                                                deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                if (deductreason.Trim() == "")
                                                {
                                                    deductreason = "0";
                                                    //double.TryParse(deductamnt, out tempDeductAmt);
                                                    //deductamnt = "0";
                                                }

                                                deductamount3 = "0";
                                                deductreason3 = "0";

                                            }
                                            if (noOfConcession == 3)
                                            {
                                                indexvalue++;
                                                deductamount1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (deductamount1.Trim() == "")
                                                {
                                                    deductamount1 = "0";
                                                }
                                                indexvalue++;
                                                double tempDeductAmt1 = 0;
                                                deductreason1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                if (deductreason1.Trim() == "")
                                                {
                                                    deductreason1 = "0";
                                                    //double.TryParse(deductamount1, out tempDeductAmt1);
                                                    //deductamount1 = "0";
                                                }

                                                indexvalue++;
                                                deductamount2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (deductamount2.Trim() == "")
                                                {
                                                    deductamount2 = "0";
                                                }
                                                indexvalue++;
                                                double tempDeductAmt2 = 0;
                                                deductreason2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                if (deductreason2.Trim() == "")
                                                {
                                                    deductreason2 = "0";
                                                    //double.TryParse(deductamount2, out tempDeductAmt2);
                                                    //deductamount2 = "0";
                                                }

                                                indexvalue++;
                                                deductamount3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (deductamount3.Trim() == "")
                                                {
                                                    deductamount3 = "0";
                                                }
                                                indexvalue++;
                                                double tempDeductAmt3 = 0;
                                                deductreason3 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                if (deductreason3.Trim() == "")
                                                {
                                                    deductreason3 = "0";
                                                    //double.TryParse(deductamount3, out tempDeductAmt3);
                                                    //deductamount3 = "0";
                                                }
                                                indexvalue++;
                                                deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (deductamnt.Trim() == "")
                                                {
                                                    deductamnt = "0";
                                                }
                                                indexvalue++;
                                                tempDeductAmt = 0;
                                                deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                                if (deductreason.Trim() == "")
                                                {
                                                    deductreason = "0";
                                                    //double.TryParse(deductamnt, out tempDeductAmt);
                                                    //deductamnt = "0";
                                                }
                                            }
                                            //==========================================================//

                                            indexvalue++;
                                            string totalamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            double tempTot = 0;
                                            double.TryParse(totalamnt, out tempTot);
                                            tempTot += tempDeductAmt;
                                            totalamnt = Convert.ToString(tempTot);
                                            indexvalue++;
                                            string refundamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            indexvalue++;
                                            string schlSingMul = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);

                                            indexvalue++;
                                            string frmgovt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                                            //string mulScholarVal = string.Empty;
                                            if (frmgovt == null || frmgovt.Trim() == "")
                                            {
                                                frm = "0";
                                            }
                                            else
                                            {
                                                frm = frmgovt;
                                                if (schlSingMul.Trim().ToUpper() == "TYPE")
                                                {
                                                    mulScholarVal = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Tag);
                                                }
                                            }
                                            if (refundamnt.Trim() == "")
                                            {
                                                refundamnt = "0";
                                            }
                                            if (refundamnt.Trim() != "")
                                            {
                                                isfeedeposit = "1";
                                            }
                                            else
                                            {
                                                isfeedeposit = "0";
                                            }
                                            if (ledgerid.Trim() != "")
                                            {
                                                indexvalue++;
                                                string day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (day1.Trim() != "")
                                                {
                                                    day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                }
                                                else
                                                {
                                                    day1 = "";
                                                }
                                                indexvalue++;
                                                string mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (mon1.Trim() != "")
                                                {
                                                    mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                }
                                                else
                                                {
                                                    mon1 = "";
                                                }
                                                indexvalue++;
                                                string year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (year1.Trim() != "")
                                                {
                                                    year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                }
                                                else
                                                {
                                                    year1 = "";
                                                }
                                                if (day1.Trim() != "" && mon1.Trim() != "" && year1.Trim() != "")
                                                {
                                                    duedt = Convert.ToString(mon1 + "/" + day1 + "/" + year1);
                                                }
                                            }
                                            indexvalue++;
                                            string fineamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                            if (fineamnt.Trim() == "")
                                            {
                                                fineamnt = "0";
                                            }
                                            if (ledgerid.Trim() != "")
                                            {
                                                indexvalue++;
                                                string day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (day2.Trim() != "")
                                                {
                                                    day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                }
                                                else
                                                {
                                                    day2 = "";
                                                }
                                                indexvalue++;
                                                string mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (mon2.Trim() != "")
                                                {
                                                    mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                }
                                                else
                                                {
                                                    mon2 = "";
                                                }
                                                indexvalue++;
                                                string year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                if (year2.Trim() != "")
                                                {
                                                    year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                                                }
                                                else
                                                {
                                                    year2 = "";
                                                }
                                                if (day2.Trim() != "" && mon2.Trim() != "" && year2.Trim() != "")
                                                {
                                                    startdt = Convert.ToString(mon2 + "/" + day2 + "/" + year2);
                                                }
                                            }
                                            double fee_amt = 0;
                                            double ref_amt = 0;
                                            double tot_amount = 0;
                                            double.TryParse(feeamnt, out fee_amt);
                                            double.TryParse(refundamnt, out ref_amt);
                                            double.TryParse(totalamnt, out tot_amount);
                                            //fee_amt >= ref_amt                                  

                                            for (int newrow = 0; newrow < appnolist.Count; newrow++)
                                            {
                                                studcount++;
                                                app_no = Convert.ToString(appnolist[newrow]);

                                                if (feeamnt.Trim() != "" && feeamnt.Trim() != null && ((totalamnt.Trim() != "" && totalamnt.Trim() != null) || (Convert.ToDouble(deductamnt) == Convert.ToDouble(feeamnt))))
                                                {
                                                    string paidAmt = "PaidAmount";
                                                    //if (Convert.ToDouble(deductamnt) == Convert.ToDouble(feeamnt))
                                                    //{
                                                    //    paidAmt = "0";
                                                    //}
                                                    string insupdquery = "";

                                                    insupdquery = "if exists (select * from FT_FeeAllot where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + feeValue + "') and  App_No in('" + app_no + "') " + strFinYrFk + " and isnull(istransfer,'0')='0') update FT_FeeAllot set MemType='" + memtype + "',FeeAmount='" + feeamnt + "',PaidAmount=" + paidAmt + ",DeductAmout='" + deductamnt + "',DeductReason='" + deductreason + "',FromGovtAmt='" + frm + "',TotalAmount='" + totalamnt + "',RefundAmount='" + refundamnt + "',IsFeeDeposit='" + isfeedeposit + "',FeeAmountMonthly='" + feeamountmonthly + "',PayMode='" + paymode + "',PayStartDate='" + duedt.ToString() + "',PaidStatus='0',DueDate='" + startdt.ToString() + "',DueAmount='0',FineAmount='" + fineamnt + "',BalAmount=" + totalamnt + " - isnull(PaidAmount,0),DeductAmount1='" + deductamount1 + "',DeductReason1='" + deductreason1 + "',DeductAmount2='" + deductamount2 + "',DeductReason2='" + deductreason2 + "',DeductAmount3='" + deductamount3 + "',DeductReason3='" + deductreason3 + "' where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + feeValue + "')  and App_No in('" + app_no + "') and isnull(PaidAmount,0) <=" + totalamnt + " " + strFinYrFk + " and istransfer='0'  else INSERT INTO FT_FeeAllot(AllotDate,MemType,App_No,LedgerFK,HeaderFK,FeeAmount,DeductAmout,DeductReason,FromGovtAmt,TotalAmount,RefundAmount,IsFeeDeposit,FeeAmountMonthly,PayMode,FeeCategory,PayStartDate,PaidStatus,DueDate,DueAmount,FineAmount,BalAmount,FinYearFK,istransfer,DeductAmount1,DeductReason1,DeductAmount2,DeductReason2,DeductAmount3,DeductReason3) VALUES('" + DateTime.Now.ToString("MM/dd/yyyy") + "'," + memtype + "," + app_no + ",'" + ledgerid + "','" + headerid + "','" + feeamnt + "','" + deductamnt + "'," + deductreason + ",'" + frm + "','" + totalamnt + "','" + refundamnt + "','" + isfeedeposit + "','" + feeamountmonthly + "','" + paymode + "','" + feeValue + "','" + duedt.ToString() + "','0','" + startdt.ToString() + "','0','" + fineamnt + "','" + totalamnt + "','" + getfinid + "','0','" + deductamount1 + "','" + deductreason1 + "','" + deductamount2 + "','" + deductreason2 + "','" + deductamount3 + "','" + deductreason3 + "')";
                                                    int inscount = d2.update_method_wo_parameter(insupdquery, "Text");
                                                    try
                                                    {
                                                        string[] reasonsWtValue = mulScholarVal.Split(',');
                                                        if (reasonsWtValue.Length > 0)
                                                        {
                                                            for (int reas = 0; reas < reasonsWtValue.Length; reas++)
                                                            {
                                                                string[] reasonAdValues = reasonsWtValue[reas].Split(':');
                                                                if (reasonAdValues.Length == 2)
                                                                {
                                                                    string insUpQuery = "if exists (select * from FT_FinScholarship where App_no=" + app_no + " and LedgerFK=" + ledgerid + " and HeaderFk=" + headerid + " and Feecategory=" + feeValue + " and ReasonCode=" + reasonAdValues[0] + " and CollegeCode=" + collegecode1 + " and FinyearFk=" + getfinid + ") update Ft_FinScholarship set AlloteDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',TotalAmount=" + reasonAdValues[1] + ",AdjusAmount=0 where App_no=" + app_no + " and LedgerFK=" + ledgerid + " and HeaderFk=" + headerid + " and Feecategory=" + feeValue + " and ReasonCode=" + reasonAdValues[0] + " and CollegeCode=" + collegecode1 + "  and FinyearFk=" + getfinid + " else INSERT INTO FT_FINSCHOLARSHIP (App_no, LedgerFK, HeaderFk, ReasonCode, Feecategory, AlloteDate, TotalAmount, AdjusAmount, FinyearFK, CollegeCode) VALUES(" + app_no + ", " + ledgerid + ", " + headerid + ", " + reasonAdValues[0] + ", " + feeValue + ", '" + DateTime.Now.ToString("MM/dd/yyyy") + "', " + reasonAdValues[1] + ", 0, " + getfinid + ", " + collegecode1 + ")";
                                                                    d2.update_method_wo_parameter(insUpQuery, "Text");
                                                                }
                                                            }
                                                        }
                                                    }
                                                    catch
                                                    {
                                                    }
                                                    if (inscount > 0)
                                                    {
                                                        if (paymode.Trim() == "2")
                                                        {
                                                            double feeallotpk = 0;
                                                            double.TryParse(d2.GetFunction("select feeallotpk from FT_FeeAllot where App_No=" + app_no + " and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FeeCategory=" + feeValue + " " + strFinYrFk + "").Trim(), out feeallotpk);
                                                            //double.TryParse(d2.GetFunction("select feeallotpk from FT_FeeAllot where App_No=" + app_no + " and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FeeCategory=" + cbl_sem.Items[l].Value + " and FinYearFK=" + getfinid + "  ").Trim(), out feeallotpk);
                                                            if (feeallotpk > 0)
                                                            {
                                                                //string delQ = "if exists (select feeallotpk from ft_feeallotmonthly where feeallotpk=" + feeallotpk + ") delete from FT_FeeallotMonthly where FeeAllotPK=" + feeallotpk + "  ";
                                                                //d2.update_method_wo_parameter(delQ, "Text");
                                                                string delQ = "if exists (select feeallotpk from ft_feeallotmonthly where feeallotpk=" + feeallotpk + ") delete from FT_FeeallotMonthly where FeeAllotPK=" + feeallotpk + " and  Isnull(PaidAmount,0) =0  ";
                                                                d2.update_method_wo_parameter(delQ, "Text");

                                                                string[] months = feeamountmonthly.Split(',');
                                                                foreach (string month in months)
                                                                {
                                                                    string[] resultval = month.Split(':');
                                                                    if (resultval.Length == 3)
                                                                    {
                                                                        //string insMonwiseQ = "INSERT INTO ft_feeallotmonthly (FeeAllotPK, AllotMonth, AllotYear, AllotAmount, BalAmount, FinYearFK) VALUES (" + feeallotpk + ", " + resultval[0] + ", " + resultval[1] + ", " + resultval[2] + ", " + resultval[2] + ", " + getfinid + ")";
                                                                        //d2.update_method_wo_parameter(insMonwiseQ, "Text");
                                                                        string insMonwiseQ = "if exists (select * from ft_feeallotmonthly where FeeAllotPK=" + feeallotpk + " and  AllotMonth=" + resultval[0] + " ) update ft_feeallotmonthly set  AllotAmount= " + resultval[2] + ", BalAmount=(" + resultval[2] + "-isnull(PaidAMount,0)), FinYearFK=" + getfinid + ",AllotYear=" + resultval[1] + " where  FeeAllotPK=" + feeallotpk + " and  AllotMonth=" + resultval[0] + "   else INSERT INTO ft_feeallotmonthly (FeeAllotPK, AllotMonth, AllotYear, AllotAmount, BalAmount, FinYearFK) VALUES (" + feeallotpk + ", " + resultval[0] + ", " + resultval[1] + ", " + resultval[2] + ", " + resultval[2] + ", " + getfinid + ")";
                                                                        d2.update_method_wo_parameter(insMonwiseQ, "Text");
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        inscheck = true;
                                                    }
                                                    //refund amount                                                   
                                                    if (refundamnt != "" && refundamnt != "0")
                                                    {
                                                        double Refndamt = 0;
                                                        double Exledgamt = 0;
                                                        double.TryParse(refundamnt, out Refndamt);
                                                        string SelQExPK = d2.GetFunction(" select ExcessDetPK from FT_ExcessDet where ExcessType='3' and App_No='" + app_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "'");
                                                        if (SelQExPK != "" && SelQExPK != "0")
                                                        {

                                                            string SelEx = d2.GetFunction(" select SUM(ISNULL(AdjAmt,'0')) as Paid from FT_ExcessLedgerDet where FeeCategory='" + feeValue + "' and ExcessDetFK='" + SelQExPK + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "'  and FinYearFK='" + getfinid + "'");
                                                            double.TryParse(SelEx, out Exledgamt);
                                                            if (Refndamt >= Exledgamt)
                                                            {
                                                                refundcheck++;
                                                                if (refundcheck == 1)
                                                                {
                                                                    string update = " update FT_ExcessDet set ExcessAmt=0,BalanceAmt=0 where ExcessDetPK='" + SelQExPK + "' and App_No='" + app_no + "' and MemType='1' and FeeCategory='" + feeValue + "' and ExcessType='3'";
                                                                    int updrefnd = d2.update_method_wo_parameter(update, "Text");
                                                                }
                                                                string RefInsQ = "if exists (select * from FT_ExcessDet where App_No='" + app_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "')update FT_ExcessDet set ExcessAmt=ISNULL(ExcessAmt,'0')+'" + refundamnt + "',BalanceAmt=ISNULL(BalanceAmt,'0')+'" + refundamnt + "' where App_No='" + app_no + "' and FeeCategory='" + feeValue + "' and excessType='3' and FinYearFK='" + getfinid + "' else insert into FT_ExcessDet (ExcessTransDate,TransTime,app_no,memtype,excessType,Excessamt,balanceamt,feecategory,FinYearFK) values('" + DateTime.Now.ToString("MM/dd/yyyy") + "','" + transtme + "','" + app_no + "','1','3','" + refundamnt + "','" + refundamnt + "','" + feeValue + "','" + getfinid + "')";
                                                                d2.update_method_wo_parameter(RefInsQ, "Text");
                                                                string FTPK = d2.GetFunction("select ExcessDetPK from FT_ExcessDet where App_No='" + app_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "'");
                                                                if (FTPK != "" && FTPK != "0")
                                                                {
                                                                    String ExLEINQ = " if exists (select * from FT_ExcessLedgerDet where ExcessDetFK='" + FTPK + "' and FeeCategory='" + feeValue + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FinYearFK='" + getfinid + "')update FT_ExcessLedgerDet set ExcessAmt='" + refundamnt + "',BalanceAmt='" + refundamnt + "' where ExcessDetFK='" + FTPK + "' and FeeCategory='" + feeValue + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FinYearFK='" + getfinid + "' else insert into FT_ExcessLedgerDet (HeaderFK,LedgerFK,ExcessAmt,BalanceAmt,ExcessDetFK,FeeCategory,FinYearFK) values('" + headerid + "','" + ledgerid + "','" + refundamnt + "','" + refundamnt + "','" + FTPK + "','" + feeValue + "','" + getfinid + "')";
                                                                    d2.update_method_wo_parameter(ExLEINQ, "Text");
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            refundcheck++;
                                                            string RefInsQ = "if exists (select * from FT_ExcessDet where App_No='" + app_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "')update FT_ExcessDet set ExcessAmt='" + refundamnt + "',BalanceAmt='" + refundamnt + "' where App_No='" + app_no + "' and FeeCategory='" + feeValue + "' and excessType='3' and FinYearFK='" + getfinid + "' else insert into FT_ExcessDet (ExcessTransDate,TransTime,app_no,memtype,excessType,Excessamt,balanceamt,feecategory,FinYearFK) values('" + DateTime.Now.ToString("MM/dd/yyyy") + "','" + transtme + "','" + app_no + "','1','3','" + refundamnt + "','" + refundamnt + "','" + feeValue + "','" + getfinid + "')";
                                                            d2.update_method_wo_parameter(RefInsQ, "Text");
                                                            string FTPK = d2.GetFunction("select ExcessDetPK from FT_ExcessDet where App_No='" + app_no + "' and FeeCategory='" + feeValue + "'  and FinYearFK='" + getfinid + "'");
                                                            if (FTPK != "" && FTPK != "0")
                                                            {
                                                                String ExLEINQ = " if exists (select * from FT_ExcessLedgerDet where ExcessDetFK='" + FTPK + "' and FeeCategory='" + feeValue + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FinYearFK='" + getfinid + "')update FT_ExcessLedgerDet set ExcessAmt='" + refundamnt + "',BalanceAmt='" + refundamnt + "' where ExcessDetFK='" + FTPK + "' and FeeCategory='" + feeValue + "' and LedgerFK='" + ledgerid + "' and HeaderFK='" + headerid + "' and FinYearFK='" + getfinid + "' else insert into FT_ExcessLedgerDet (HeaderFK,LedgerFK,ExcessAmt,BalanceAmt,ExcessDetFK,FeeCategory,FinYearFK) values('" + headerid + "','" + ledgerid + "','" + refundamnt + "','" + refundamnt + "','" + FTPK + "','" + feeValue + "','" + getfinid + "')";
                                                                d2.update_method_wo_parameter(ExLEINQ, "Text");
                                                            }
                                                        }
                                                    }
                                                    //==========================Added by Saranya on 10/04/2018=============================//
                                                    int savevalue = 1;
                                                    string entrycode = Session["Entry_Code"].ToString();
                                                    string formname = "Fee Allot";
                                                    string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                    string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                    IPHostEntry host;
                                                    string localip = "";
                                                    host = Dns.GetHostEntry(Dns.GetHostName());
                                                    foreach (IPAddress ip in host.AddressList)
                                                    {
                                                        if (ip.AddressFamily.ToString() == "InterNetwork")
                                                        {
                                                            localip = ip.ToString();
                                                        }
                                                    }
                                                    string details = "App_No - " + app_no + " : Semester - " + feestr + " : Allot Amt-" + feeamnt + " : Date - " + toa + "";
                                                    string ctsname = "";
                                                    if (savevalue == 1)
                                                    {
                                                        ctsname = "Fee Alloted";
                                                    }
                                                    string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                    d2.insertEinanceUserActionLog(entrycode, formname, 1, toa, doa, details, ctsname, localip);
                                                    //============================================================================//
                                                }
                                                else
                                                {
                                                    string delquery = "delete FT_FeeAllot where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + feeValue + "') and App_No in('" + app_no + "') " + strFinYrFk + " and isnull(istransfer,'0')='0'";
                                                    int delcount = d2.update_method_wo_parameter(delquery, "Text");
                                                    if (delcount > 0)
                                                    {
                                                        inscheck = true;
                                                    }
                                                    //==========================Added by Saranya on 10/04/2018=============================//
                                                    int savevalue = 3;
                                                    string entrycode = Session["Entry_Code"].ToString();
                                                    string formname = "Fee Allot";
                                                    string toa = DateTime.Now.ToString("MM/dd/yyy hh:mm:ss tt");
                                                    string doa = DateTime.Now.ToString("MM/dd/yyy");
                                                    IPHostEntry host;
                                                    string localip = "";
                                                    host = Dns.GetHostEntry(Dns.GetHostName());
                                                    foreach (IPAddress ip in host.AddressList)
                                                    {
                                                        if (ip.AddressFamily.ToString() == "InterNetwork")
                                                        {
                                                            localip = ip.ToString();
                                                        }
                                                    }
                                                    string details = "App_No - " + app_no + " : Semester - " + feestr + " : Allot Amt-" + feeamnt + " : Date - " + toa + "";
                                                    string ctsname = "";
                                                    if (savevalue == 3)
                                                    {
                                                        ctsname = "Fee Alloted";
                                                    }
                                                    string hostName = Dns.GetHostName(); // Retrive the Name of HOST  
                                                    d2.insertEinanceUserActionLog(entrycode, formname, 3, toa, doa, details, ctsname, localip);
                                                    //============================================================================//
                                                }
                                            }
                                        }

                                    }
                                }
                                //  }
                                //    }
                                //}
                                //  }
                            }
                            if (studcount == 0)
                            {
                                alertpopwindow.Visible = true;
                                lblalerterr.Visible = true;
                                lblalerterr.Text = "Please select any one student!";
                            }
                            if (inscheck == true)
                            {
                                alertpopwindow.Visible = true;
                                lblalerterr.Visible = true;
                                lblalerterr.Text = "Saved Successfully";
                            }
                        }
                        #endregion
                    }
                    #region old
                    //}
                    //else
                    //{
                    //    FpSpreadstud.SaveChanges();
                    //    string actrow = FpSpreadstud.ActiveSheetView.ActiveRow.ToString();
                    //    string actcol = FpSpreadstud.ActiveSheetView.ActiveColumn.ToString();
                    //    app_no = Convert.ToString(FpSpreadstud.Sheets[0].Cells[Convert.ToInt32(actrow), 2].Tag);
                    //    string memtype = "1";
                    //    for (int l = 0; l < cbl_sem.Items.Count; l++)
                    //    {
                    //        if (cbl_sem.Items[l].Selected == true)
                    //        {
                    //            int indexvalue = 1;
                    //            if (FpSpread1.Sheets[0].RowCount > 0)
                    //            {
                    //                for (int ro = 1; ro < FpSpread1.Sheets[0].RowCount; ro++)
                    //                {
                    //                    indexvalue = Convert.ToInt32(check[Convert.ToString(cbl_sem.Items[l].Value)]);
                    //                    string headerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 0].Tag);
                    //                    string ledgerid = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, 1].Tag);
                    //                    string feeamountmonthly = "";
                    //                    if (headerid.Trim() != "" && ledgerid.Trim() != "")
                    //                    {
                    //                        string paymode = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                    //                        if (paymode.Trim() == "Regular")
                    //                        {
                    //                            paymode = "1";
                    //                            feeamountmonthly = "";
                    //                        }
                    //                        else
                    //                        {
                    //                            paymode = "2";
                    //                            feeamountmonthly = "";
                    //                        }
                    //                        indexvalue++;
                    //                        string feeamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                    //                        indexvalue++;
                    //                        string deductamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                    //                        if (deductamnt.Trim() == "")
                    //                        {
                    //                            deductamnt = "0";
                    //                        }
                    //                        indexvalue++;
                    //                        string deductreason = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                    //                        if (deductreason.Trim() == "")
                    //                        {
                    //                            deductreason = "0";
                    //                        }
                    //                        indexvalue++;
                    //                        string totalamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                    //                        indexvalue++;
                    //                        string refundamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                    //                        indexvalue++;
                    //                        string frmgovt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Value);
                    //                        if (frmgovt == null || frmgovt.Trim() == "")
                    //                        {
                    //                            frm = "0";
                    //                        }
                    //                        else
                    //                        {
                    //                            frm = frmgovt;
                    //                        }
                    //                        if (refundamnt.Trim() == "")
                    //                        {
                    //                            refundamnt = "0";
                    //                        }
                    //                        if (refundamnt.Trim() != "")
                    //                        {
                    //                            isfeedeposit = "1";
                    //                        }
                    //                        else
                    //                        {
                    //                            isfeedeposit = "0";
                    //                        }
                    //                        if (ledgerid.Trim() != "")
                    //                        {
                    //                            indexvalue++;
                    //                            string day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                    //                            if (day1.Trim() != "")
                    //                            {
                    //                                day1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                    //                            }
                    //                            else
                    //                            {
                    //                                day1 = "";
                    //                            }
                    //                            indexvalue++;
                    //                            string mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                    //                            if (mon1.Trim() != "")
                    //                            {
                    //                                mon1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                    //                            }
                    //                            else
                    //                            {
                    //                                mon1 = "";
                    //                            }
                    //                            indexvalue++;
                    //                            string year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                    //                            if (year1.Trim() != "")
                    //                            {
                    //                                year1 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                    //                            }
                    //                            else
                    //                            {
                    //                                year1 = "";
                    //                            }
                    //                            if (day1.Trim() != "" && mon1.Trim() != "" && year1.Trim() != "")
                    //                            {
                    //                                duedt = Convert.ToString(mon1 + "/" + day1 + "/" + year1);
                    //                            }
                    //                        }
                    //                        indexvalue++;
                    //                        string fineamnt = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                    //                        if (fineamnt.Trim() == "")
                    //                        {
                    //                            fineamnt = "0";
                    //                        }
                    //                        if (ledgerid.Trim() != "")
                    //                        {
                    //                            indexvalue++;
                    //                            string day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                    //                            if (day2.Trim() != "")
                    //                            {
                    //                                day2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                    //                            }
                    //                            else
                    //                            {
                    //                                day2 = "";
                    //                            }
                    //                            indexvalue++;
                    //                            string mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                    //                            if (mon2.Trim() != "")
                    //                            {
                    //                                mon2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                    //                            }
                    //                            else
                    //                            {
                    //                                mon2 = "";
                    //                            }
                    //                            indexvalue++;
                    //                            string year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                    //                            if (year2.Trim() != "")
                    //                            {
                    //                                year2 = Convert.ToString(FpSpread1.Sheets[0].Cells[ro, indexvalue].Text);
                    //                            }
                    //                            else
                    //                            {
                    //                                year2 = "";
                    //                            }
                    //                            if (day2.Trim() != "" && mon2.Trim() != "" && year2.Trim() != "")
                    //                            {
                    //                                startdt = Convert.ToString(mon2 + "/" + day2 + "/" + year2);
                    //                            }
                    //                        }
                    //                        if (feeamnt.Trim() != "0" && feeamnt.Trim() != "" && feeamnt.Trim() != null && totalamnt.Trim() != "" && totalamnt.Trim() != null && totalamnt.Trim() != "0")
                    //                        {
                    //                            string insupdquery = "";
                    //                            insupdquery = "update FT_FeeAllot set AllotDate='" + DateTime.Now.ToString("MM/dd/yyyy") + "',MemType='" + memtype + "',FeeAmount='" + feeamnt + "',DeductAmout='" + deductamnt + "',DeductReason='" + deductreason + "',FromGovtAmt='" + frm + "',TotalAmount='" + totalamnt + "',RefundAmount='" + refundamnt + "',IsFeeDeposit='" + isfeedeposit + "',FeeAmountMonthly='" + feeamountmonthly + "',PayMode='" + paymode + "',PayStartDate='" + duedt.ToString() + "',PaidStatus='0',DueDate='" + startdt.ToString() + "',DueAmount='0',FineAmount='" + fineamnt + "',BalAmount='" + totalamnt + "' where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + cbl_sem.Items[l].Value + "') and  FinYearFK='" + getfinid + "' and App_No in('" + app_no + "')";
                    //                            int inscount = d2.update_method_wo_parameter(insupdquery, "Text");
                    //                            if (inscount > 0)
                    //                            {
                    //                                inscheck = true;
                    //                            }
                    //                        }
                    //                        else
                    //                        {
                    //                            string delquery = "delete FT_FeeAllot where LedgerFK in('" + ledgerid + "') and HeaderFK in('" + headerid + "') and FeeCategory in('" + cbl_sem.Items[l].Value + "') and App_No in('" + app_no + "')";
                    //                            int delcount = d2.update_method_wo_parameter(delquery, "Text");
                    //                            if (delcount > 0)
                    //                            {
                    //                                inscheck = true;
                    //                            }
                    //                        }
                    //                    }
                    //                }
                    //            }
                    //        }
                    //    }
                    //    if (inscheck == true)
                    //    {
                    //        alertpopwindow.Visible = true;
                    //        lblalerterr.Visible = true;
                    //        lblalerterr.Text = "Saved Successfully";
                    //    }
                    //}
                    #endregion
                }

                #endregion

            }
            else
            {
                alertpopwindow.Visible = true;
                lblalerterr.Visible = true;
                lblalerterr.Text = "Please Select Finance Year!";
            }
        }
        catch (Exception ex)
        {
            // d2.sendErrorMail(ex, collegecode1, "TransferRefund.aspx");
        }
    }

    protected string getAppNo(string rollno, string collegecode1)
    {
        string appl_no = string.Empty;
        if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 0)
        {
            appl_no = d2.GetFunction(" select App_No from Registration where Roll_No='" + rollno + "' and college_code='" + collegecode1 + "'");
        }
        if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 1)
        {
            appl_no = d2.GetFunction(" select App_No from Registration where reg_no='" + rollno + "' and college_code='" + collegecode1 + "'");
        }
        if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 2)
        {
            appl_no = d2.GetFunction(" select App_No from Registration where Roll_admit='" + rollno + "' and college_code='" + collegecode1 + "'");
        }
        if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 3)
        {
            appl_no = d2.GetFunction(" select app_no from applyn where app_formno='" + rollno + "' and college_code='" + collegecode1 + "'");
        }
        return appl_no;
    }
    static bool save = true;

    #region commented by saranya 0n 20March2018
    //protected void FpSpread1_Command(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    //{
    //    try
    //    {
    //        //if (save)
    //        //{
    //        //    save = false;
    //        //    FpSpread1.SaveChanges();               
    //        //}
    //        //else
    //        //{
    //        //    save = true;
    //        //}
    //        string seltext = "";
    //        //e.Handled = true;
    //        Hashtable newheader = (Hashtable)ViewState["headertotal"];
    //        Hashtable newledger = (Hashtable)ViewState["ledgertotal"];
    //        Hashtable newgrand = (Hashtable)ViewState["Grandtotal"];
    //        // ddlyear1.SelectedIndex = 0;
    //        string actrow = FpSpread1.Sheets[0].ActiveRow.ToString();
    //        string actcol = FpSpread1.Sheets[0].ActiveColumn.ToString();
    //        if (actcol.Trim() != "" && actcol.Trim() != "-1")
    //        {
    //            //feeamnt = e.EditValues[Convert.ToInt32(actcol)].ToString();
    //            //if (columnind.Count > 0)
    //            //{
    //            //    for (int i = 0; i < columnind.Count; i++)
    //            //    {
    //            //        index = Convert.ToString(columnind[i]);
    //            //        int colind = Convert.ToInt32(index);
    //            //        otheramnt = Convert.ToString(FpSpread1.Sheets[0].Cells[Convert.ToInt32(actrow), colind - 1].Text);
    //            //    }
    //            //}

    //            int arow = Convert.ToInt32(actrow);
    //            int acol = Convert.ToInt32(actcol);
    //            int sprow1 = Convert.ToInt32(actrow);
    //            string value = e.EditValues[0].ToString();
    //            seltext = e.EditValues[Convert.ToInt32(actcol)].ToString();

    //            //double deduct = 0;
    //            //double feeAmt = 0;
    //            //double tot = 0;
    //            //double.TryParse(seltext, out deduct);
    //            //double.TryParse(Convert.ToString(FpSpread1.Sheets[0].Cells[arow, --acol].Value), out feeAmt);
    //            //if (feeAmt < deduct)
    //            //{
    //            //    tot = 0;
    //            //    FpSpread1.Sheets[0].Cells[arow, acol].Text = "0";
    //            //}

    //            //if (tot == 0)
    //            //{
    //            if (sprow1 == 0 && seltext.Trim() != "" && seltext.Trim() != "System.Object")
    //            {
    //                for (int i = 1; i < FpSpread1.Sheets[0].RowCount; i++)
    //                {
    //                    if (!newheader.ContainsValue(i))
    //                    {
    //                        if (!newheader.ContainsValue(i - 1))
    //                        {
    //                            FpSpread1.Sheets[0].Cells[i, Convert.ToInt32(actcol)].Text = seltext;
    //                        }
    //                    }
    //                }
    //            }
    //            pnlupdate.Visible = false;
    //            divMulSchlolar.Visible = false;
    //            if (seltext == "Monthwise")
    //            {
    //                monthwise(actcol, actrow);
    //                pnlupdate.Visible = true;
    //            }
    //            else if (seltext == "Type")
    //            {
    //                string appno = Convert.ToString(FpSpread1.Sheets[0].Cells[0, 0].Note);
    //                LoadMulScholarship(appno);
    //                divMulSchlolar.Visible = true;
    //            }
    //            else if (seltext == " ")
    //            {
    //                ReplaceScholarshipamount(false);
    //            }
    //            int colindex = 0;
    //            int rowindex = 0;
    //            int finalrowindex = 0;
    //            if (Grandtotal.Count > 0)
    //            {
    //                finalrowindex = Convert.ToInt32(Convert.ToString(newgrand["GrandTotal"]));
    //            }
    //            int newcheck = 1;
    //            string col = "";
    //            string col1 = "";
    //            string col2 = "";
    //            string col3 = "";
    //            string col4 = "";
    //            string col5 = "";
    //            string row1 = "";
    //            string sumvalue = "";
    //            string newsumvalue = "";
    //            string newsumvalue1 = "";
    //            string newsumvalue2 = "";
    //            string newsumvalue3 = "";
    //            string newsumvalue4 = "";
    //            int actrowint = Convert.ToInt32(actrow);
    //            if (cbl_sem.Items.Count > 0)
    //            {
    //                for (int row = 0; row < cbl_sem.Items.Count; row++)
    //                {
    //                    if (cbl_sem.Items[row].Selected == true)
    //                    {
    //                        newcheck = 1;
    //                        sumvalue = "";
    //                        newsumvalue = "";
    //                        newsumvalue1 = "";
    //                        newsumvalue2 = "";
    //                        newsumvalue3 = "";
    //                        newsumvalue4 = "";
    //                        if (newheader.Count > 0)
    //                        {
    //                            foreach (DictionaryEntry pr in newheader)
    //                            {
    //                                string key = Convert.ToString(pr.Key);
    //                                string value_new = Convert.ToString(pr.Value);
    //                                if (value_new.Trim() != "")
    //                                {
    //                                    rowindex = Convert.ToInt32(value_new);
    //                                }
    //                                if (newledger.Count > 0)
    //                                {
    //                                    if (newledger.ContainsKey(Convert.ToString(cbl_sem.Items[row].Value)))
    //                                    {
    //                                        colindex = Convert.ToInt32(Convert.ToString(newledger[Convert.ToString(cbl_sem.Items[row].Value)]));
    //                                        col = getidx(colindex - 1);
    //                                        col1 = getidx(colindex);
    //                                        col2 = getidx(colindex + 2);

    //                                        col3 = getidx(colindex + 3);
    //                                        col4 = getidx(colindex + 5);
    //                                        // col5 = getidx(colindex + 8);

    //                                        if (col.Trim() != "")
    //                                        {
    //                                            FpSpread1.Sheets[0].Cells[rowindex, colindex - 1].Formula = "SUM(" + col + "" + newcheck + ":" + col + "" + Convert.ToInt32(rowindex) + ")";

    //                                            FpSpread1.Sheets[0].Cells[rowindex, colindex].Formula = "SUM(" + col1 + "" + newcheck + ":" + col1 + "" + Convert.ToInt32(rowindex) + ")";

    //                                            FpSpread1.Sheets[0].Cells[rowindex, colindex + 2].Formula = "SUM(" + col2 + "" + newcheck + ":" + col2 + "" + Convert.ToInt32(rowindex) + ")";

    //                                            FpSpread1.Sheets[0].Cells[rowindex, colindex + 3].Formula = "SUM(" + col3 + "" + newcheck + ":" + col3 + "" + Convert.ToInt32(rowindex) + ")";

    //                                            FpSpread1.Sheets[0].Cells[rowindex, colindex + 5].Formula = "SUM(" + col4 + "" + newcheck + ":" + col4 + "" + Convert.ToInt32(rowindex) + ")";

    //                                            string sumvalue_new_value = col + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "-" + col1 + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "";

    //                                            FpSpread1.Sheets[0].Cells[actrowint, colindex + 2].Formula = "" + sumvalue_new_value + "";
    //                                            if (sumvalue.Trim() == "")
    //                                            {
    //                                                sumvalue = col + newcheck;
    //                                                newsumvalue = col1 + newcheck;
    //                                                newsumvalue1 = col2 + newcheck;

    //                                                newsumvalue2 = col3 + newcheck;
    //                                                newsumvalue3 = col4 + newcheck;
    //                                                //newsumvalue4 = col5 + newcheck;
    //                                            }
    //                                            else
    //                                            {
    //                                                sumvalue = sumvalue + "+" + col + (newcheck - 1);
    //                                                newsumvalue = newsumvalue + "+" + col1 + (newcheck - 1);
    //                                                newsumvalue1 = newsumvalue1 + "+" + col2 + (newcheck - 1);

    //                                                newsumvalue2 = newsumvalue2 + "+" + col3 + (newcheck - 1);
    //                                                newsumvalue3 = newsumvalue3 + "+" + col4 + (newcheck - 1);
    //                                                //newsumvalue4 = newsumvalue4 + "+" + col5 + (newcheck - 1);
    //                                            }
    //                                            newcheck = rowindex + 2;
    //                                        }
    //                                    }
    //                                }
    //                            }

    //                            FpSpread1.Sheets[0].Cells[finalrowindex, colindex - 1].Formula = "SUM(" + sumvalue + "+" + col + "" + finalrowindex + ")";
    //                            FpSpread1.Sheets[0].Cells[finalrowindex, colindex].Formula = "SUM(" + newsumvalue + "+" + col1 + "" + finalrowindex + ")";
    //                            FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 2].Formula = "SUM(" + newsumvalue1 + "+" + col2 + "" + finalrowindex + ")";


    //                            FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 3].Formula = "SUM(" + newsumvalue2 + "+" + col3 + "" + finalrowindex + ")";
    //                            FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 5].Formula = "SUM(" + newsumvalue3 + "+" + col4 + "" + finalrowindex + ")";
    //                        }
    //                        // FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 8].Formula = "SUM(" + newsumvalue4 + "+" + col5 + "" + finalrowindex + ")";

    //                    }
    //                }
    //            }
    //        }
    //    }
    //    catch
    //    {

    //    }
    //}
    #endregion

    protected void FpSpread1_Command(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        try
        {
            //if (save)
            //{
            //    save = false;
            //    FpSpread1.SaveChanges();               
            //}
            //else
            //{
            //    save = true;
            //}
            string seltext = "";
            //e.Handled = true;
            Hashtable newheader = (Hashtable)ViewState["headertotal"];
            Hashtable newledger = (Hashtable)ViewState["ledgertotal"];
            Hashtable newgrand = (Hashtable)ViewState["Grandtotal"];
            // ddlyear1.SelectedIndex = 0;
            string actrow = FpSpread1.Sheets[0].ActiveRow.ToString();
            string actcol = FpSpread1.Sheets[0].ActiveColumn.ToString();
            if (actcol.Trim() != "" && actcol.Trim() != "-1")
            {
                //feeamnt = e.EditValues[Convert.ToInt32(actcol)].ToString();
                //if (columnind.Count > 0)
                //{
                //    for (int i = 0; i < columnind.Count; i++)
                //    {
                //        index = Convert.ToString(columnind[i]);
                //        int colind = Convert.ToInt32(index);
                //        otheramnt = Convert.ToString(FpSpread1.Sheets[0].Cells[Convert.ToInt32(actrow), colind - 1].Text);
                //    }
                //}

                int arow = Convert.ToInt32(actrow);
                int acol = Convert.ToInt32(actcol);
                int sprow1 = Convert.ToInt32(actrow);
                string value = e.EditValues[0].ToString();
                seltext = e.EditValues[Convert.ToInt32(actcol)].ToString();

                //double deduct = 0;
                //double feeAmt = 0;
                //double tot = 0;
                //double.TryParse(seltext, out deduct);
                //double.TryParse(Convert.ToString(FpSpread1.Sheets[0].Cells[arow, --acol].Value), out feeAmt);
                //if (feeAmt < deduct)
                //{
                //    tot = 0;
                //    FpSpread1.Sheets[0].Cells[arow, acol].Text = "0";
                //}

                //if (tot == 0)
                //{
                if (sprow1 == 0 && seltext.Trim() != "" && seltext.Trim() != "System.Object")
                {
                    for (int i = 1; i < FpSpread1.Sheets[0].RowCount; i++)
                    {
                        if (!newheader.ContainsValue(i))
                        {
                            if (!newheader.ContainsValue(i - 1))
                            {
                                FpSpread1.Sheets[0].Cells[i, Convert.ToInt32(actcol)].Text = seltext;
                            }
                        }
                    }
                }
                pnlupdate.Visible = false;
                divMulSchlolar.Visible = false;
                if (seltext == "Monthwise")
                {
                    monthwise(actcol, actrow);
                    pnlupdate.Visible = true;
                }
                else if (seltext == "Type")
                {
                    string appno = Convert.ToString(FpSpread1.Sheets[0].Cells[0, 0].Note);
                    LoadMulScholarship(appno);
                    divMulSchlolar.Visible = true;
                }
                else if (seltext == " ")
                {
                    ReplaceScholarshipamount(false);
                }
                int colindex = 0;
                int rowindex = 0;
                int finalrowindex = 0;
                if (Grandtotal.Count > 0)
                {
                    finalrowindex = Convert.ToInt32(Convert.ToString(newgrand["GrandTotal"]));
                }
                //============Added by saranya on 19/03/2018 For multiple concession==============//
                int noOfConcession = 0;
                noOfConcession = Convert.ToInt32(txtNoConcession.Text);
                if (noOfConcession == 0 || noOfConcession == 1)
                {
                    int newcheck = 1;
                    string col = "";
                    string col1 = "";
                    string col2 = "";
                    string col3 = "";
                    string col4 = "";
                    string col5 = "";
                    string row1 = "";
                    string sumvalue = "";
                    string newsumvalue = "";
                    string newsumvalue1 = "";
                    string newsumvalue2 = "";
                    string newsumvalue3 = "";
                    string newsumvalue4 = "";
                    int actrowint = Convert.ToInt32(actrow);
                    if (cbl_sem.Items.Count > 0)
                    {
                        for (int row = 0; row < cbl_sem.Items.Count; row++)
                        {
                            if (cbl_sem.Items[row].Selected == true)
                            {
                                newcheck = 1;
                                sumvalue = "";
                                newsumvalue = "";
                                newsumvalue1 = "";
                                newsumvalue2 = "";
                                newsumvalue3 = "";
                                newsumvalue4 = "";

                                if (newheader.Count > 0)
                                {
                                    foreach (DictionaryEntry pr in newheader)
                                    {
                                        string key = Convert.ToString(pr.Key);
                                        string value_new = Convert.ToString(pr.Value);
                                        if (value_new.Trim() != "")
                                        {
                                            rowindex = Convert.ToInt32(value_new);
                                        }
                                        if (newledger.Count > 0)
                                        {
                                            if (newledger.ContainsKey(Convert.ToString(cbl_sem.Items[row].Value)))
                                            {
                                                colindex = Convert.ToInt32(Convert.ToString(newledger[Convert.ToString(cbl_sem.Items[row].Value)]));
                                                col = getidx(colindex - 1);
                                                col1 = getidx(colindex);
                                                col2 = getidx(colindex + 2);

                                                col3 = getidx(colindex + 3);
                                                col4 = getidx(colindex + 5);
                                                // col5 = getidx(colindex + 8);

                                                if (col.Trim() != "")
                                                {
                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex - 1].Formula = "SUM(" + col + "" + newcheck + ":" + col + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex].Formula = "SUM(" + col1 + "" + newcheck + ":" + col1 + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 2].Formula = "SUM(" + col2 + "" + newcheck + ":" + col2 + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 3].Formula = "SUM(" + col3 + "" + newcheck + ":" + col3 + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 5].Formula = "SUM(" + col4 + "" + newcheck + ":" + col4 + "" + Convert.ToInt32(rowindex) + ")";

                                                    string sumvalue_new_value = col + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "-" + col1 + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "";

                                                    FpSpread1.Sheets[0].Cells[actrowint, colindex + 2].Formula = "" + sumvalue_new_value + "";
                                                    if (sumvalue.Trim() == "")
                                                    {
                                                        sumvalue = col + newcheck;
                                                        newsumvalue = col1 + newcheck;
                                                        newsumvalue1 = col2 + newcheck;

                                                        newsumvalue2 = col3 + newcheck;
                                                        newsumvalue3 = col4 + newcheck;
                                                        //newsumvalue4 = col5 + newcheck;
                                                    }
                                                    else
                                                    {
                                                        sumvalue = sumvalue + "+" + col + (newcheck - 1);
                                                        newsumvalue = newsumvalue + "+" + col1 + (newcheck - 1);
                                                        newsumvalue1 = newsumvalue1 + "+" + col2 + (newcheck - 1);

                                                        newsumvalue2 = newsumvalue2 + "+" + col3 + (newcheck - 1);
                                                        newsumvalue3 = newsumvalue3 + "+" + col4 + (newcheck - 1);
                                                        //newsumvalue4 = newsumvalue4 + "+" + col5 + (newcheck - 1);
                                                    }
                                                    newcheck = rowindex + 2;
                                                }
                                            }
                                        }
                                    }

                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex - 1].Formula = "SUM(" + sumvalue + "+" + col + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex].Formula = "SUM(" + newsumvalue + "+" + col1 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 2].Formula = "SUM(" + newsumvalue1 + "+" + col2 + "" + finalrowindex + ")";


                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 3].Formula = "SUM(" + newsumvalue2 + "+" + col3 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 5].Formula = "SUM(" + newsumvalue3 + "+" + col4 + "" + finalrowindex + ")";
                                }
                                // FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 8].Formula = "SUM(" + newsumvalue4 + "+" + col5 + "" + finalrowindex + ")";
                            }

                        }
                    }
                }

                if (noOfConcession == 2)
                {
                    int newcheck = 1;
                    string col = "";
                    string col1 = "";
                    string col2 = "";
                    string col3 = "";
                    string col4 = "";
                    string col5 = "";
                    string col6 = "";

                    string sumvalue = "";
                    string newsumvalue = "";
                    string newsumvalue1 = "";
                    string newsumvalue2 = "";
                    string newsumvalue3 = "";
                    string newsumvalue4 = "";
                    string newsumvalue5 = "";

                    string TotalConcessionAmt = "";

                    int actrowint = Convert.ToInt32(actrow);
                    if (cbl_sem.Items.Count > 0)
                    {
                        for (int row = 0; row < cbl_sem.Items.Count; row++)
                        {
                            if (cbl_sem.Items[row].Selected == true)
                            {
                                newcheck = 1;
                                sumvalue = "";
                                newsumvalue = "";
                                newsumvalue1 = "";
                                newsumvalue2 = "";
                                newsumvalue3 = "";
                                newsumvalue4 = "";

                                if (newheader.Count > 0)
                                {
                                    foreach (DictionaryEntry pr in newheader)
                                    {
                                        string key = Convert.ToString(pr.Key);
                                        string value_new = Convert.ToString(pr.Value);
                                        if (value_new.Trim() != "")
                                        {
                                            rowindex = Convert.ToInt32(value_new);
                                        }
                                        if (newledger.Count > 0)
                                        {
                                            if (newledger.ContainsKey(Convert.ToString(cbl_sem.Items[row].Value)))
                                            {
                                                colindex = Convert.ToInt32(Convert.ToString(newledger[Convert.ToString(cbl_sem.Items[row].Value)]));
                                                col = getidx(colindex - 1);
                                                col1 = getidx(colindex);
                                                col2 = getidx(colindex + 2);
                                                col3 = getidx(colindex + 4);
                                                col4 = getidx(colindex + 6);
                                                col5 = getidx(colindex + 7);


                                                if (col.Trim() != "")
                                                {
                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex - 1].Formula = "SUM(" + col + "" + newcheck + ":" + col + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex].Formula = "SUM(" + col1 + "" + newcheck + ":" + col1 + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 2].Formula = "SUM(" + col2 + "" + newcheck + ":" + col2 + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 4].Formula = "SUM(" + col3 + "" + newcheck + ":" + col3 + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 6].Formula = "SUM(" + col4 + "" + newcheck + ":" + col4 + "" + Convert.ToInt32(rowindex) + ")";
                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 8].Formula = "SUM(" + col5 + "" + newcheck + ":" + col5 + "" + Convert.ToInt32(rowindex) + ")";

                                                    TotalConcessionAmt = col1 + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "+" + col2 + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "";

                                                    FpSpread1.Sheets[0].Cells[actrowint, colindex + 4].Formula = "" + TotalConcessionAmt + "";

                                                    string sumvalue_new_value = col + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "-" + col3 + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "";


                                                    FpSpread1.Sheets[0].Cells[actrowint, colindex + 6].Formula = "" + sumvalue_new_value + "";
                                                    if (sumvalue.Trim() == "")
                                                    {
                                                        sumvalue = col + newcheck;
                                                        newsumvalue = col1 + newcheck;
                                                        newsumvalue1 = col2 + newcheck;

                                                        newsumvalue2 = col3 + newcheck;
                                                        newsumvalue3 = col4 + newcheck;
                                                        newsumvalue4 = col5 + newcheck;

                                                    }
                                                    else
                                                    {
                                                        sumvalue = sumvalue + "+" + col + (newcheck - 1);
                                                        newsumvalue = newsumvalue + "+" + col1 + (newcheck - 1);
                                                        newsumvalue1 = newsumvalue1 + "+" + col2 + (newcheck - 1);

                                                        newsumvalue2 = newsumvalue2 + "+" + col3 + (newcheck - 1);
                                                        newsumvalue3 = newsumvalue3 + "+" + col4 + (newcheck - 1);
                                                        newsumvalue4 = newsumvalue4 + "+" + col5 + (newcheck - 1);

                                                    }
                                                    newcheck = rowindex + 2;
                                                }
                                            }
                                        }
                                    }

                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex - 1].Formula = "SUM(" + sumvalue + "+" + col + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex].Formula = "SUM(" + newsumvalue + "+" + col1 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 2].Formula = "SUM(" + newsumvalue1 + "+" + col2 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 4].Formula = "SUM(" + newsumvalue2 + "+" + col3 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 6].Formula = "SUM(" + newsumvalue3 + "+" + col4 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 7].Formula = "SUM(" + newsumvalue4 + "+" + col5 + "" + finalrowindex + ")";

                                }
                                // FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 8].Formula = "SUM(" + newsumvalue4 + "+" + col5 + "" + finalrowindex + ")";
                            }

                        }
                    }
                }
                if (noOfConcession == 3)
                {
                    int newcheck = 1;
                    string col = "";
                    string col1 = "";
                    string col2 = "";
                    string col3 = "";
                    string col4 = "";
                    string col5 = "";
                    string col6 = "";

                    string sumvalue = "";
                    string newsumvalue = "";
                    string newsumvalue1 = "";
                    string newsumvalue2 = "";
                    string newsumvalue3 = "";
                    string newsumvalue4 = "";
                    string newsumvalue5 = "";

                    string TotalConcessionAmt = "";

                    int actrowint = Convert.ToInt32(actrow);
                    if (cbl_sem.Items.Count > 0)
                    {
                        for (int row = 0; row < cbl_sem.Items.Count; row++)
                        {
                            if (cbl_sem.Items[row].Selected == true)
                            {
                                newcheck = 1;
                                sumvalue = "";
                                newsumvalue = "";
                                newsumvalue1 = "";
                                newsumvalue2 = "";
                                newsumvalue3 = "";
                                newsumvalue4 = "";
                                newsumvalue5 = "";

                                if (newheader.Count > 0)
                                {
                                    foreach (DictionaryEntry pr in newheader)
                                    {
                                        string key = Convert.ToString(pr.Key);
                                        string value_new = Convert.ToString(pr.Value);
                                        if (value_new.Trim() != "")
                                        {
                                            rowindex = Convert.ToInt32(value_new);
                                        }
                                        if (newledger.Count > 0)
                                        {
                                            if (newledger.ContainsKey(Convert.ToString(cbl_sem.Items[row].Value)))
                                            {
                                                colindex = Convert.ToInt32(Convert.ToString(newledger[Convert.ToString(cbl_sem.Items[row].Value)]));
                                                col = getidx(colindex - 1);
                                                col1 = getidx(colindex);
                                                col2 = getidx(colindex + 2);
                                                col3 = getidx(colindex + 4);
                                                col4 = getidx(colindex + 6);
                                                col5 = getidx(colindex + 8);
                                                col6 = getidx(colindex + 9);

                                                if (col.Trim() != "")
                                                {
                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex - 1].Formula = "SUM(" + col + "" + newcheck + ":" + col + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex].Formula = "SUM(" + col1 + "" + newcheck + ":" + col1 + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 2].Formula = "SUM(" + col2 + "" + newcheck + ":" + col2 + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 4].Formula = "SUM(" + col3 + "" + newcheck + ":" + col3 + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 6].Formula = "SUM(" + col4 + "" + newcheck + ":" + col4 + "" + Convert.ToInt32(rowindex) + ")";
                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 8].Formula = "SUM(" + col5 + "" + newcheck + ":" + col5 + "" + Convert.ToInt32(rowindex) + ")";
                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 9].Formula = "SUM(" + col6 + "" + newcheck + ":" + col6 + "" + Convert.ToInt32(rowindex) + ")";
                                                    TotalConcessionAmt = col1 + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "+" + col2 + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "+" + col3 + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "";

                                                    FpSpread1.Sheets[0].Cells[actrowint, colindex + 6].Formula = "" + TotalConcessionAmt + "";

                                                    string sumvalue_new_value = col + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "-" + col4 + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "";


                                                    FpSpread1.Sheets[0].Cells[actrowint, colindex + 8].Formula = "" + sumvalue_new_value + "";
                                                    if (sumvalue.Trim() == "")
                                                    {
                                                        sumvalue = col + newcheck;
                                                        newsumvalue = col1 + newcheck;
                                                        newsumvalue1 = col2 + newcheck;

                                                        newsumvalue2 = col3 + newcheck;
                                                        newsumvalue3 = col4 + newcheck;
                                                        newsumvalue4 = col5 + newcheck;
                                                        newsumvalue5 = col6 + newcheck;
                                                    }
                                                    else
                                                    {
                                                        sumvalue = sumvalue + "+" + col + (newcheck - 1);
                                                        newsumvalue = newsumvalue + "+" + col1 + (newcheck - 1);
                                                        newsumvalue1 = newsumvalue1 + "+" + col2 + (newcheck - 1);

                                                        newsumvalue2 = newsumvalue2 + "+" + col3 + (newcheck - 1);
                                                        newsumvalue3 = newsumvalue3 + "+" + col4 + (newcheck - 1);
                                                        newsumvalue4 = newsumvalue4 + "+" + col5 + (newcheck - 1);
                                                        newsumvalue5 = newsumvalue5 + "+" + col6 + (newcheck - 1);
                                                    }
                                                    newcheck = rowindex + 2;
                                                }
                                            }
                                        }
                                    }

                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex - 1].Formula = "SUM(" + sumvalue + "+" + col + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex].Formula = "SUM(" + newsumvalue + "+" + col1 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 2].Formula = "SUM(" + newsumvalue1 + "+" + col2 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 4].Formula = "SUM(" + newsumvalue2 + "+" + col3 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 6].Formula = "SUM(" + newsumvalue3 + "+" + col4 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 8].Formula = "SUM(" + newsumvalue4 + "+" + col5 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 9].Formula = "SUM(" + newsumvalue5 + "+" + col6 + "" + finalrowindex + ")";
                                }
                                // FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 8].Formula = "SUM(" + newsumvalue4 + "+" + col5 + "" + finalrowindex + ")";
                            }
                        }
                    }
                }
            }
        }
        catch
        {

        }
    }

    protected void FpSpread1_OnButtonCommand(object sender, EventArgs e)
    {
        try
        {
            FpSpread1.SaveChanges();
            //FpSpread1.Sheets[0].AutoPostBack = true;
            string seltext = "";
            //e.Handled = true;
            Hashtable newheader = (Hashtable)ViewState["headertotal"];
            Hashtable newledger = (Hashtable)ViewState["ledgertotal"];
            Hashtable newgrand = (Hashtable)ViewState["Grandtotal"];
            // ddlyear1.SelectedIndex = 0;
            string actrow = FpSpread1.Sheets[0].ActiveRow.ToString();
            string actcol = FpSpread1.Sheets[0].ActiveColumn.ToString();
            if (actcol.Trim() != "" && actcol.Trim() != "-1")
            {

                int sprow1 = Convert.ToInt32(actrow);
                // string value = e.EditValues[0].ToString();
                // seltext = e.EditValues[Convert.ToInt32(actcol)].ToString();

                seltext = Convert.ToString(FpSpread1.Sheets[0].Cells[Convert.ToInt32(actrow), Convert.ToInt32(actcol)].Value);
                if (sprow1 == 0 && seltext.Trim() != "" && seltext.Trim() != "System.Object")
                {
                    for (int i = 1; i < FpSpread1.Sheets[0].RowCount; i++)
                    {
                        if (!newheader.ContainsValue(i))
                        {
                            if (!newheader.ContainsValue(i - 1))
                            {
                                FpSpread1.Sheets[0].Cells[i, Convert.ToInt32(actcol)].Text = seltext;
                            }
                        }
                    }
                }

                pnlupdate.Visible = false;
                divMulSchlolar.Visible = false;
                if (seltext == "Monthwise")
                {
                    monthwise(actcol, actrow);
                    pnlupdate.Visible = true;
                }
                else if (seltext == "Type")
                {
                    string appno = Convert.ToString(FpSpread1.Sheets[0].Cells[0, 0].Note);
                    LoadMulScholarship(appno);
                    divMulSchlolar.Visible = true;
                }
                else if (seltext == " ")
                {
                    ReplaceScholarshipamount(false);
                }
                int colindex = 0;
                int rowindex = 0;
                int finalrowindex = 0;
                if (Grandtotal.Count > 0)
                {
                    finalrowindex = Convert.ToInt32(Convert.ToString(newgrand["GrandTotal"]));
                }
                //============Added by saranya on 19/03/2018 for Multiple concession====================//
                int noOfConcession = 0;
                noOfConcession = Convert.ToInt32(txtNoConcession.Text);
                if (noOfConcession == 0 || noOfConcession == 1)
                {
                    int newcheck = 1;
                    string col = "";
                    string col1 = "";
                    string col2 = "";
                    string col3 = "";
                    string col4 = "";
                    string col5 = "";
                    string row1 = "";
                    string sumvalue = "";
                    string newsumvalue = "";
                    string newsumvalue1 = "";
                    string newsumvalue2 = "";
                    string newsumvalue3 = "";
                    string newsumvalue4 = "";
                    int actrowint = Convert.ToInt32(actrow);
                    if (cbl_sem.Items.Count > 0)
                    {
                        for (int row = 0; row < cbl_sem.Items.Count; row++)
                        {
                            if (cbl_sem.Items[row].Selected == true)
                            {
                                newcheck = 1;
                                sumvalue = "";
                                newsumvalue = "";
                                newsumvalue1 = "";
                                newsumvalue2 = "";
                                newsumvalue3 = "";
                                newsumvalue4 = "";
                                if (newheader.Count > 0)
                                {
                                    foreach (DictionaryEntry pr in newheader)
                                    {
                                        string key = Convert.ToString(pr.Key);
                                        string value_new = Convert.ToString(pr.Value);
                                        if (value_new.Trim() != "")
                                        {
                                            rowindex = Convert.ToInt32(value_new);
                                        }
                                        if (newledger.Count > 0)
                                        {
                                            if (newledger.ContainsKey(Convert.ToString(cbl_sem.Items[row].Value)))
                                            {
                                                colindex = Convert.ToInt32(Convert.ToString(newledger[Convert.ToString(cbl_sem.Items[row].Value)]));
                                                col = getidx(colindex - 1);
                                                col1 = getidx(colindex);
                                                col2 = getidx(colindex + 2);

                                                col3 = getidx(colindex + 3);
                                                col4 = getidx(colindex + 5);
                                                // col5 = getidx(colindex + 8);


                                                if (col.Trim() != "")
                                                {
                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex - 1].Formula = "SUM(" + col + "" + newcheck + ":" + col + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex].Formula = "SUM(" + col1 + "" + newcheck + ":" + col1 + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 2].Formula = "SUM(" + col2 + "" + newcheck + ":" + col2 + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 3].Formula = "SUM(" + col3 + "" + newcheck + ":" + col3 + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 5].Formula = "SUM(" + col4 + "" + newcheck + ":" + col4 + "" + Convert.ToInt32(rowindex) + ")";

                                                    //  FpSpread1.Sheets[0].Cells[rowindex, colindex + 8].Formula = "SUM(" + col5 + "" + newcheck + ":" + col5 + "" + Convert.ToInt32(rowindex) + ")";

                                                    string sumvalue_new_value = col + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "-" + col1 + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "";

                                                    FpSpread1.Sheets[0].Cells[actrowint, colindex + 2].Formula = "" + sumvalue_new_value + "";
                                                    if (sumvalue.Trim() == "")
                                                    {
                                                        sumvalue = col + newcheck;
                                                        newsumvalue = col1 + newcheck;
                                                        newsumvalue1 = col2 + newcheck;

                                                        newsumvalue2 = col3 + newcheck;
                                                        newsumvalue3 = col4 + newcheck;
                                                        // newsumvalue4 = col5 + newcheck;
                                                    }
                                                    else
                                                    {
                                                        sumvalue = sumvalue + "+" + col + (newcheck - 1);
                                                        newsumvalue = newsumvalue + "+" + col1 + (newcheck - 1);
                                                        newsumvalue1 = newsumvalue1 + "+" + col2 + (newcheck - 1);

                                                        newsumvalue2 = newsumvalue2 + "+" + col3 + (newcheck - 1);
                                                        newsumvalue3 = newsumvalue3 + "+" + col4 + (newcheck - 1);
                                                        // newsumvalue4 = newsumvalue4 + "+" + col5 + (newcheck - 1);

                                                    }
                                                    newcheck = rowindex + 2;
                                                }
                                            }
                                        }
                                    }
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex - 1].Formula = "SUM(" + sumvalue + "+" + col + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex].Formula = "SUM(" + newsumvalue + "+" + col1 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 2].Formula = "SUM(" + newsumvalue1 + "+" + col2 + "" + finalrowindex + ")";

                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 3].Formula = "SUM(" + newsumvalue2 + "+" + col3 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 5].Formula = "SUM(" + newsumvalue3 + "+" + col4 + "" + finalrowindex + ")";
                                    // FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 8].Formula = "SUM(" + newsumvalue4 + "+" + col5 + "" + finalrowindex + ")";
                                }
                            }
                        }
                    }
                }
                if (noOfConcession == 2)
                {
                    int newcheck = 1;
                    string col = "";
                    string col1 = "";
                    string col2 = "";
                    string col3 = "";
                    string col4 = "";
                    string col5 = "";
                    string sumvalue = "";
                    string newsumvalue = "";
                    string newsumvalue1 = "";
                    string newsumvalue2 = "";
                    string newsumvalue3 = "";
                    string newsumvalue4 = "";
                    string TotalConcessionAmt = "";
                    int actrowint = Convert.ToInt32(actrow);
                    if (cbl_sem.Items.Count > 0)
                    {
                        for (int row = 0; row < cbl_sem.Items.Count; row++)
                        {
                            if (cbl_sem.Items[row].Selected == true)
                            {
                                newcheck = 1;
                                sumvalue = "";
                                newsumvalue = "";
                                newsumvalue1 = "";
                                newsumvalue2 = "";
                                newsumvalue3 = "";
                                newsumvalue4 = "";
                                if (newheader.Count > 0)
                                {
                                    foreach (DictionaryEntry pr in newheader)
                                    {
                                        string key = Convert.ToString(pr.Key);
                                        string value_new = Convert.ToString(pr.Value);
                                        if (value_new.Trim() != "")
                                        {
                                            rowindex = Convert.ToInt32(value_new);
                                        }
                                        if (newledger.Count > 0)
                                        {
                                            if (newledger.ContainsKey(Convert.ToString(cbl_sem.Items[row].Value)))
                                            {
                                                colindex = Convert.ToInt32(Convert.ToString(newledger[Convert.ToString(cbl_sem.Items[row].Value)]));
                                                col = getidx(colindex - 1);
                                                col1 = getidx(colindex);
                                                col2 = getidx(colindex + 2);
                                                col3 = getidx(colindex + 4);
                                                col4 = getidx(colindex + 6);
                                                col5 = getidx(colindex + 7);


                                                if (col.Trim() != "")
                                                {
                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex - 1].Formula = "SUM(" + col + "" + newcheck + ":" + col + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex].Formula = "SUM(" + col1 + "" + newcheck + ":" + col1 + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 2].Formula = "SUM(" + col2 + "" + newcheck + ":" + col2 + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 4].Formula = "SUM(" + col3 + "" + newcheck + ":" + col3 + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 6].Formula = "SUM(" + col4 + "" + newcheck + ":" + col4 + "" + Convert.ToInt32(rowindex) + ")";
                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 8].Formula = "SUM(" + col5 + "" + newcheck + ":" + col5 + "" + Convert.ToInt32(rowindex) + ")";

                                                    TotalConcessionAmt = col1 + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "+" + col2 + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "";

                                                    FpSpread1.Sheets[0].Cells[actrowint, colindex + 4].Formula = "" + TotalConcessionAmt + "";

                                                    string sumvalue_new_value = col + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "-" + col3 + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "";


                                                    FpSpread1.Sheets[0].Cells[actrowint, colindex + 6].Formula = "" + sumvalue_new_value + "";
                                                    if (sumvalue.Trim() == "")
                                                    {
                                                        sumvalue = col + newcheck;
                                                        newsumvalue = col1 + newcheck;
                                                        newsumvalue1 = col2 + newcheck;

                                                        newsumvalue2 = col3 + newcheck;
                                                        newsumvalue3 = col4 + newcheck;
                                                        newsumvalue4 = col5 + newcheck;

                                                    }
                                                    else
                                                    {
                                                        sumvalue = sumvalue + "+" + col + (newcheck - 1);
                                                        newsumvalue = newsumvalue + "+" + col1 + (newcheck - 1);
                                                        newsumvalue1 = newsumvalue1 + "+" + col2 + (newcheck - 1);

                                                        newsumvalue2 = newsumvalue2 + "+" + col3 + (newcheck - 1);
                                                        newsumvalue3 = newsumvalue3 + "+" + col4 + (newcheck - 1);
                                                        newsumvalue4 = newsumvalue4 + "+" + col5 + (newcheck - 1);

                                                    }
                                                    newcheck = rowindex + 2;
                                                }
                                            }
                                        }
                                    }

                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex - 1].Formula = "SUM(" + sumvalue + "+" + col + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex].Formula = "SUM(" + newsumvalue + "+" + col1 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 2].Formula = "SUM(" + newsumvalue1 + "+" + col2 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 4].Formula = "SUM(" + newsumvalue2 + "+" + col3 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 6].Formula = "SUM(" + newsumvalue3 + "+" + col4 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 7].Formula = "SUM(" + newsumvalue4 + "+" + col5 + "" + finalrowindex + ")";


                                    // FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 8].Formula = "SUM(" + newsumvalue4 + "+" + col5 + "" + finalrowindex + ")";
                                }
                            }
                        }
                    }
                }
                if (noOfConcession == 3)
                {
                    int newcheck = 1;
                    string col = "";
                    string col1 = "";
                    string col2 = "";
                    string col3 = "";
                    string col4 = "";
                    string col5 = "";
                    string col6 = "";
                    string row1 = "";
                    string sumvalue = "";
                    string newsumvalue = "";
                    string newsumvalue1 = "";
                    string newsumvalue2 = "";
                    string newsumvalue3 = "";
                    string newsumvalue4 = "";
                    string newsumvalue5 = "";
                    string TotalConcessionAmt = "";
                    int actrowint = Convert.ToInt32(actrow);
                    if (cbl_sem.Items.Count > 0)
                    {
                        for (int row = 0; row < cbl_sem.Items.Count; row++)
                        {
                            if (cbl_sem.Items[row].Selected == true)
                            {
                                newcheck = 1;
                                sumvalue = "";
                                newsumvalue = "";
                                newsumvalue1 = "";
                                newsumvalue2 = "";
                                newsumvalue3 = "";
                                newsumvalue4 = "";

                                if (newheader.Count > 0)
                                {
                                    foreach (DictionaryEntry pr in newheader)
                                    {
                                        string key = Convert.ToString(pr.Key);
                                        string value_new = Convert.ToString(pr.Value);
                                        if (value_new.Trim() != "")
                                        {
                                            rowindex = Convert.ToInt32(value_new);
                                        }
                                        if (newledger.Count > 0)
                                        {
                                            if (newledger.ContainsKey(Convert.ToString(cbl_sem.Items[row].Value)))
                                            {
                                                colindex = Convert.ToInt32(Convert.ToString(newledger[Convert.ToString(cbl_sem.Items[row].Value)]));
                                                col = getidx(colindex - 1);
                                                col1 = getidx(colindex);
                                                col2 = getidx(colindex + 2);
                                                col3 = getidx(colindex + 4);
                                                col4 = getidx(colindex + 6);
                                                col5 = getidx(colindex + 8);
                                                col6 = getidx(colindex + 9);

                                                if (col.Trim() != "")
                                                {
                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex - 1].Formula = "SUM(" + col + "" + newcheck + ":" + col + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex].Formula = "SUM(" + col1 + "" + newcheck + ":" + col1 + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 2].Formula = "SUM(" + col2 + "" + newcheck + ":" + col2 + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 4].Formula = "SUM(" + col3 + "" + newcheck + ":" + col3 + "" + Convert.ToInt32(rowindex) + ")";

                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 6].Formula = "SUM(" + col4 + "" + newcheck + ":" + col4 + "" + Convert.ToInt32(rowindex) + ")";
                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 8].Formula = "SUM(" + col5 + "" + newcheck + ":" + col5 + "" + Convert.ToInt32(rowindex) + ")";
                                                    FpSpread1.Sheets[0].Cells[rowindex, colindex + 9].Formula = "SUM(" + col6 + "" + newcheck + ":" + col6 + "" + Convert.ToInt32(rowindex) + ")";
                                                    TotalConcessionAmt = col1 + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "+" + col2 + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "+" + col3 + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "";

                                                    FpSpread1.Sheets[0].Cells[actrowint, colindex + 6].Formula = "" + TotalConcessionAmt + "";

                                                    string sumvalue_new_value = col + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "-" + col4 + "" + Convert.ToString(Convert.ToInt32(actrow) + 1) + "";


                                                    FpSpread1.Sheets[0].Cells[actrowint, colindex + 8].Formula = "" + sumvalue_new_value + "";
                                                    if (sumvalue.Trim() == "")
                                                    {
                                                        sumvalue = col + newcheck;
                                                        newsumvalue = col1 + newcheck;
                                                        newsumvalue1 = col2 + newcheck;

                                                        newsumvalue2 = col3 + newcheck;
                                                        newsumvalue3 = col4 + newcheck;
                                                        newsumvalue4 = col5 + newcheck;
                                                        newsumvalue5 = col6 + newcheck;
                                                    }
                                                    else
                                                    {
                                                        sumvalue = sumvalue + "+" + col + (newcheck - 1);
                                                        newsumvalue = newsumvalue + "+" + col1 + (newcheck - 1);
                                                        newsumvalue1 = newsumvalue1 + "+" + col2 + (newcheck - 1);

                                                        newsumvalue2 = newsumvalue2 + "+" + col3 + (newcheck - 1);
                                                        newsumvalue3 = newsumvalue3 + "+" + col4 + (newcheck - 1);
                                                        newsumvalue4 = newsumvalue4 + "+" + col5 + (newcheck - 1);
                                                        newsumvalue5 = newsumvalue5 + "+" + col6 + (newcheck - 1);
                                                    }
                                                    newcheck = rowindex + 2;
                                                }
                                            }
                                        }
                                    }

                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex - 1].Formula = "SUM(" + sumvalue + "+" + col + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex].Formula = "SUM(" + newsumvalue + "+" + col1 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 2].Formula = "SUM(" + newsumvalue1 + "+" + col2 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 4].Formula = "SUM(" + newsumvalue2 + "+" + col3 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 6].Formula = "SUM(" + newsumvalue3 + "+" + col4 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 8].Formula = "SUM(" + newsumvalue4 + "+" + col5 + "" + finalrowindex + ")";
                                    FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 9].Formula = "SUM(" + newsumvalue5 + "+" + col6 + "" + finalrowindex + ")";

                                    // FpSpread1.Sheets[0].Cells[finalrowindex, colindex + 8].Formula = "SUM(" + newsumvalue4 + "+" + col5 + "" + finalrowindex + ")";
                                }
                            }
                        }
                    }
                }






            }
        }
        catch
        {

        }
    }



    protected void FpSpreadstud_CellClick(object sender, EventArgs e)
    {
        try
        {
            // FpSpread1.SaveChanges();
            // FpSpreadstud.SaveChanges();
            // FpSpreadstud_SelectedIndexChanged(sender, e);
            spreadstud_click = true;
        }
        catch
        {

        }
    }
    protected void FpSpreadstud2_CellClick(object sender, EventArgs e)
    {
        try
        {
            // FpSpread1.SaveChanges();
            //FpSpreadstud2.SaveChanges();
            //FpSpreadstud2_SelectedIndexChanged(sender, e);
            spreadstud2_click = true;
        }
        catch { }
    }
    protected void FpSpreadstud3_CellClick(object sender, EventArgs e)
    {
        try
        {
            //FpSpread1.SaveChanges();
            //FpSpreadstud3.SaveChanges();
            // FpSpreadstud3_SelectedIndexChanged(sender, e);
            spreadstud3_click = true;
        }
        catch { }
    }
    //protected void FpSpreadstud_Command(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    //{

    //}

    //protected void FpSpreadstud2_Command(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    //{

    //}

    //protected void FpSpreadstud3_Command(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    //{

    //}
    protected void FpSpreadstud_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {


        }
        catch
        {

        }
    }
    protected void FpSpreadstud2_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (spreadstud2_click == true)
            {
                // FpSpread1.SaveChanges();
                // FpSpreadstud2.SaveChanges();
                DataView dvnew = new DataView();
                DataView dv1 = new DataView();
                int i;
                int col;
                string startdate = "";
                string duedate = "";
                string day1 = "";
                string mon1 = "";
                string year1 = "";
                string day2 = "";
                string mon2 = "";
                string year2 = "";
                string feecategory = "";
                string header = "";
                string ledger = "";
                string[] split;
                //Grandtotal.Clear();
                //ledgertotal.Clear();
                //headertotal.Clear();

                string[] dtday = new string[31];
                for (int id = 1; id <= 31; id++)
                {
                    if (id.ToString().Length == 1)
                    {
                        dtday[id - 1] = "0" + Convert.ToString(id);
                    }
                    else
                    {
                        dtday[id - 1] = Convert.ToString(id);
                    }
                }
                string[] dtmon = new string[12] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" };
                string[] droparray = new string[2];
                string[] droparray1 = new string[ddl_detre.Items.Count];
                droparray[0] = "Regular";
                droparray[1] = "Monthly";
                string[] loadyear = new string[10];

                DateTime currdt = DateTime.Now;
                int curryear = currdt.Year;

                for (int ij = 0; ij < 10; ij++)
                {
                    loadyear[ij] = Convert.ToString(curryear - ij);
                }


                if (ddl_detre.Items.Count > 0)
                {
                    for (int re = 0; re < ddl_detre.Items.Count; re++)
                    {
                        if (re == 0)
                        {
                            droparray1[re] = " ";
                        }
                        else
                        {
                            droparray1[re] = Convert.ToString(ddl_detre.Items[re].Text);
                        }
                    }
                }

                //if (ddlyear1.Items.Count > 0)
                //{
                //    for (int yr = 0; yr < ddlyear1.Items.Count; yr++)
                //    {
                //        loadyear[yr] = Convert.ToString(ddlyear1.Items[yr].Text);
                //    }
                //}

                for (i = 0; i < cbl_sem.Items.Count; i++)
                {
                    if (cbl_sem.Items[i].Selected)
                    {
                        if (feecategory == "")
                        {
                            feecategory = "" + cbl_sem.Items[i].Value.ToString();
                        }
                        else
                        {
                            feecategory += "','" + cbl_sem.Items[i].Value.ToString() + "";
                        }
                    }
                }

                for (i = 0; i < cbl_ledger.Items.Count; i++)
                {
                    if (cbl_ledger.Items[i].Selected)
                    {
                        if (ledger == "")
                        {
                            ledger = "" + cbl_ledger.Items[i].Value.ToString();
                        }
                        else
                        {
                            ledger += "','" + cbl_ledger.Items[i].Value.ToString() + "";
                        }
                    }
                }

                for (i = 0; i < cbl_header.Items.Count; i++)
                {
                    if (cbl_header.Items[i].Selected)
                    {
                        if (header == "")
                        {
                            header = "" + cbl_header.Items[i].Value.ToString();
                        }
                        else
                        {
                            header += "','" + cbl_header.Items[i].Value.ToString() + "";
                        }
                    }
                }

                FarPoint.Web.Spread.ComboBoxCellType cb = new FarPoint.Web.Spread.ComboBoxCellType(droparray);
                cb.UseValue = true;
                cb.AutoPostBack = true;
                cb.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cb1 = new FarPoint.Web.Spread.ComboBoxCellType(droparray1);
                cb1.UseValue = true;
                cb1.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cbday1 = new FarPoint.Web.Spread.ComboBoxCellType(dtday);
                cbday1.UseValue = true;
                cbday1.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cbmon1 = new FarPoint.Web.Spread.ComboBoxCellType(dtmon);
                cbmon1.UseValue = true;
                cbmon1.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cbyear1 = new FarPoint.Web.Spread.ComboBoxCellType(loadyear);
                cbyear1.UseValue = true;
                cbyear1.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cbday2 = new FarPoint.Web.Spread.ComboBoxCellType(dtday);
                cbday2.UseValue = true;
                cbday2.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cbmon2 = new FarPoint.Web.Spread.ComboBoxCellType(dtmon);
                cbmon2.UseValue = true;
                cbmon2.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cbyear2 = new FarPoint.Web.Spread.ComboBoxCellType(loadyear);
                cbyear2.UseValue = true;
                cbyear2.ShowButton = true;

                FarPoint.Web.Spread.DoubleCellType doubl = new FarPoint.Web.Spread.DoubleCellType();
                doubl.ErrorMessage = "Allow Numerics";

                Hashtable hatnew = new Hashtable();
                hatnew = (Hashtable)ViewState["colcountnew"];
                if (spreadstud2_click == true)
                {
                    FpSpreadstud2.Visible = false;
                    FpSpread1.Visible = true;
                    //popper1.Visible = false;

                    Hashtable tothash = new Hashtable();
                    Hashtable dedhash = new Hashtable();
                    Hashtable coltothash = new Hashtable();
                    Hashtable refhash = new Hashtable();
                    Hashtable frmhash = new Hashtable();
                    Hashtable finehash = new Hashtable();

                    Hashtable Grandtothash = new Hashtable();
                    Hashtable Granddedhash = new Hashtable();
                    Hashtable Grandcoltothash = new Hashtable();
                    Hashtable Grandrefhash = new Hashtable();
                    Hashtable Grandfrmhash = new Hashtable();
                    Hashtable Grandfinehash = new Hashtable();
                    int colindex;
                    int dedindex;
                    int coltotindex;
                    int refindex;
                    int frmindex;
                    int fineindex;
                    double totgrand = 0;
                    double dedgrand = 0;
                    double grandtot = 0;
                    double refundtot = 0;
                    double frmgovttot = 0;
                    double finetotal = 0;

                    FpSpread1.Sheets[0].RowCount = 0;

                    string actrow = FpSpreadstud2.ActiveSheetView.ActiveRow.ToString();
                    string actcol = FpSpreadstud2.ActiveSheetView.ActiveColumn.ToString();

                    string app_no = Convert.ToString(FpSpreadstud2.Sheets[0].Cells[Convert.ToInt32(actrow), 1].Tag);
                    Session["appform_no"] = app_no;
                    string selquery = "";

                    selquery = "select headerpk,headername,ledgerpk,ledgername from FM_HeaderMaster m,FM_LedgerMaster l where m.HeaderPK = l.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure')  and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "') order by len(isnull(l.priority,1000)) , l.priority asc ";

                    selquery = selquery + "select HeaderPK,HeaderName,LedgerPK,LedgerName,LedgerFK,f.HeaderFK,AllotDate,FeeCategory,PayMode,FeeAmount,DeductAmout,DeductReason,TotalAmount,RefundAmount,FromGovtAmt,convert(varchar(10),DueDate,103) as DueDate,FineAmount,convert(varchar(10),PayStartDate,103) as  PayStartDate from FM_HeaderMaster m,FM_LedgerMaster l,FT_FeeAllot f where m.HeaderPK = l.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure') and m.HeaderPK=f.HeaderFK and l.LedgerPK=f.LedgerFK and App_No='" + app_no + "' and f.FeeCategory in('" + feecategory + "') and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "') order by len(isnull(l.priority,1000)) , l.priority asc ";

                    selquery = selquery + " select distinct headerpk,headername from FM_HeaderMaster m,FM_LedgerMaster l where m.HeaderPK = l.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure')  and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "')";

                    ds.Clear();
                    ds = d2.select_method_wo_parameter(selquery, "Text");

                    if (ds.Tables[0].Rows.Count > 0 && ds.Tables[2].Rows.Count > 0)
                    {
                        int sno = 0;
                        for (int ik = 0; ik < ds.Tables[2].Rows.Count; ik++)
                        {
                            tothash.Clear();
                            dedhash.Clear();
                            coltothash.Clear();
                            refhash.Clear();
                            frmhash.Clear();
                            finehash.Clear();

                            double total = 0;
                            double dedtot = 0;
                            double coltot = 0;
                            double reftot = 0;
                            double frmtot = 0;
                            double finetot = 0;
                            FpSpread1.Sheets[0].RowCount++;
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(ds.Tables[2].Rows[ik]["HeaderName"]);
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);

                            ds.Tables[0].DefaultView.RowFilter = "HeaderPK='" + Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"]) + "'";
                            dvnew = ds.Tables[0].DefaultView;
                            for (i = 0; i < dvnew.Count; i++)
                            {
                                FpSpread1.Sheets[0].RowCount++;
                                sno++;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(sno);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;

                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = Convert.ToString(dvnew[i]["LedgerName"]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Tag = Convert.ToString(dvnew[i]["LedgerPK"]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Left;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                                for (int cn = 0; cn < cbl_sem.Items.Count; cn++)
                                {
                                    col = 1;
                                    if (cbl_sem.Items[cn].Selected == true)
                                    {
                                        col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        //dt = dv.ToTable();
                                        //dt1 = dv1.ToTable();
                                        //dv1 = new DataView(dt1);
                                        ds.Tables[1].DefaultView.RowFilter = "FeeCategory='" + cbl_sem.Items[cn].Value + "' and HeaderFK ='" + Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"]) + "' and LedgerFK='" + Convert.ToString(dvnew[i]["LedgerPK"]) + "'";
                                        dv1 = ds.Tables[1].DefaultView;

                                        if (dv1.Count > 0)
                                        {
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag = Convert.ToString(dv1[0]["LedgerFK"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["FeeAmount"]);
                                            if (Convert.ToString(dv1[0]["FeeAmount"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["FeeAmount"]);
                                                if (tothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                {
                                                    total = Convert.ToInt32(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                    total += getvalue;
                                                    tothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                    tothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(total));
                                                }
                                                else
                                                {
                                                    tothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                                }
                                            }
                                            totgrand += total;
                                            //total += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (tothash.ContainsKey(colindex))
                                            //{
                                            //    tothash.Remove(colindex);
                                            //}
                                            //tothash.Add(colindex, Convert.ToString(total));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductAmout"]);
                                            if (Convert.ToString(dv1[0]["DeductAmout"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["DeductAmout"]);
                                                if (dedhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                {
                                                    dedtot = Convert.ToInt32(dedhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                    dedtot += getvalue;
                                                    dedhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                    dedhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(dedtot));
                                                }
                                                else
                                                {
                                                    dedhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                                }
                                            }
                                            dedgrand += dedtot;
                                            //dedtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (dedhash.ContainsKey(dedindex))
                                            //{
                                            //    dedhash.Remove(dedindex);
                                            //}
                                            //dedhash.Add(dedindex, Convert.ToString(dedtot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductReason"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;


                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["TotalAmount"]);
                                            if (Convert.ToString(dv1[0]["TotalAmount"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["TotalAmount"]);
                                                if (coltothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                {
                                                    coltot = Convert.ToInt32(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                    coltot += getvalue;
                                                    coltothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                    coltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(coltot));
                                                }
                                                else
                                                {
                                                    coltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                                }
                                            }
                                            grandtot += coltot;
                                            //coltot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (coltothash.ContainsKey(coltotindex))
                                            //{
                                            //    coltothash.Remove(coltotindex);
                                            //}
                                            //coltothash.Add(coltotindex, Convert.ToString(coltot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;


                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["RefundAmount"]);
                                            if (Convert.ToString(dv1[0]["RefundAmount"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["RefundAmount"]);
                                                if (refhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                {
                                                    reftot = Convert.ToInt32(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                    reftot += getvalue;
                                                    refhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                    refhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(reftot));
                                                }
                                                else
                                                {
                                                    refhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                                }
                                            }
                                            refundtot += reftot;
                                            //reftot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (refhash.ContainsKey(refindex))
                                            //{
                                            //    refhash.Remove(refindex);
                                            //}
                                            //refhash.Add(refindex, Convert.ToString(reftot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;


                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["FromGovtAmt"]);
                                            if (Convert.ToString(dv1[0]["FromGovtAmt"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["FromGovtAmt"]);
                                                if (frmhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                {
                                                    frmtot = Convert.ToInt32(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                    frmtot += getvalue;
                                                    frmhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                    frmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(frmtot));
                                                }
                                                else
                                                {
                                                    frmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                                }
                                            }
                                            frmgovttot += frmtot;
                                            //frmtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (frmhash.ContainsKey(frmindex))
                                            //{
                                            //    frmhash.Remove(frmindex);
                                            //}
                                            //frmhash.Add(frmindex, Convert.ToString(frmtot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag = Convert.ToString(dv1[0]["PayStartDate"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            startdate = Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 5].Tag);
                                            if (startdate.Trim() != "01/01/1900")
                                            {
                                                split = startdate.Split('/');
                                                day2 = split[0];
                                                mon2 = split[1];
                                                year2 = split[2];
                                            }
                                            else
                                            {
                                                day2 = "";
                                                mon2 = "";
                                                year2 = "";
                                            }

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = day2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = mon2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = year2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["FineAmount"]);
                                            if (Convert.ToString(dv1[0]["FineAmount"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["FineAmount"]);
                                                if (finehash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                {
                                                    finetot = Convert.ToInt32(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                    finetot += getvalue;
                                                    finehash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                    finehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(finetot));
                                                }
                                                else
                                                {
                                                    finehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                                }
                                            }
                                            finetotal += finetot;
                                            ////finetot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            ////if (finehash.ContainsKey(fineindex))
                                            ////{
                                            ////    finehash.Remove(fineindex);
                                            ////}
                                            ////finehash.Add(fineindex, Convert.ToString(finetot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 5].Tag = Convert.ToString(dv1[0]["DueDate"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            duedate = Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag);
                                            if (duedate.Trim() != "01/01/1900")
                                            {
                                                split = duedate.Split('/');
                                                day1 = split[0];
                                                mon1 = split[1];
                                                year1 = split[2];
                                            }
                                            else
                                            {
                                                day1 = "";
                                                mon1 = "";
                                                year1 = "";
                                            }
                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = day1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = mon1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = year1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                        }
                                        else
                                        {
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                        }
                                    }
                                }
                            }
                            FpSpread1.Sheets[0].RowCount++;
                            if (!headertotal.ContainsKey(Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"])))
                            {
                                headertotal.Add(Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"]), FpSpread1.Sheets[0].RowCount - 1);
                                ViewState["headertotal"] = headertotal;
                            }
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Total";
                            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                            for (int cn = 0; cn < cbl_sem.Items.Count; cn++)
                            {
                                col = 1;
                                if (cbl_sem.Items[cn].Selected == true)
                                {
                                    col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    col++;
                                    colindex = col;
                                    dedindex = col + 1;
                                    coltotindex = col + 3;
                                    refindex = col + 4;
                                    frmindex = col + 5;
                                    fineindex = col + 9;

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, colindex].Text = Convert.ToString(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string headertotalGrand = Convert.ToString(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(headertotalGrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(headertotalGrand);
                                        if (Grandtothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            totgrand = Convert.ToInt32(Grandtothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            totgrand += getvalue;
                                            Grandtothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandtothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(totgrand));
                                        }
                                        else
                                        {
                                            Grandtothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    //totgrand += Convert.ToInt32(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, dedindex].Text = Convert.ToString(dedhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    string dedtotalgrand = Convert.ToString(dedhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(dedtotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(dedtotalgrand);
                                        if (Granddedhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            dedgrand = Convert.ToInt32(Granddedhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            dedgrand += getvalue;
                                            Granddedhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Granddedhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(dedgrand));
                                        }
                                        else
                                        {
                                            Granddedhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    //dedgrand += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text));

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, coltotindex].Text = Convert.ToString(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string tottotalgrand = Convert.ToString(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(tottotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(tottotalgrand);
                                        if (Grandcoltothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            grandtot = Convert.ToInt32(Grandcoltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            grandtot += getvalue;
                                            Grandcoltothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandcoltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(grandtot));
                                        }
                                        else
                                        {
                                            Grandcoltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    //grandtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 6].Text));

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, refindex].Text = Convert.ToString(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string reftotalgrand = Convert.ToString(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(reftotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(reftotalgrand);
                                        if (Grandrefhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            refundtot = Convert.ToInt32(Grandrefhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            refundtot += getvalue;
                                            Grandrefhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandrefhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(refundtot));
                                        }
                                        else
                                        {
                                            Grandrefhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    // refundtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 7].Text));

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, frmindex].Text = Convert.ToString(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string frmtotalgrand = Convert.ToString(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(frmtotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(frmtotalgrand);
                                        if (Grandfrmhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            frmgovttot = Convert.ToInt32(Grandfrmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            frmgovttot += getvalue;
                                            Grandfrmhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandfrmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(frmgovttot));
                                        }
                                        else
                                        {
                                            Grandfrmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    // frmgovttot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 8].Text));

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, fineindex].Text = Convert.ToString(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string finetotalgrand = Convert.ToString(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(finetotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(finetotalgrand);
                                        if (Grandfinehash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            finetotal = Convert.ToInt32(Grandfinehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            finetotal += getvalue;
                                            Grandfinehash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandfinehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(finetotal));
                                        }
                                        else
                                        {
                                            Grandfinehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    //finetotal += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 12].Text));
                                }
                            }
                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                        }

                        FpSpread1.Sheets[0].RowCount++;
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Grand Total";
                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].BackColor = ColorTranslator.FromHtml("#0CA6CA");

                        for (int cn = 0; cn < cbl_sem.Items.Count; cn++)
                        {
                            col = 1;
                            if (cbl_sem.Items[cn].Selected == true)
                            {
                                col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                col++;
                                colindex = col;
                                dedindex = col + 1;
                                coltotindex = col + 3;
                                refindex = col + 4;
                                frmindex = col + 5;
                                fineindex = col + 9;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, colindex].Text = Convert.ToString(Grandtothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, dedindex].Text = Convert.ToString(Granddedhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, coltotindex].Text = Convert.ToString(Grandcoltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, refindex].Text = Convert.ToString(Grandrefhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, frmindex].Text = Convert.ToString(Grandfrmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, fineindex].Text = Convert.ToString(Grandfinehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                            }
                        }
                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                        Grandtotal.Add(Convert.ToString("GrandTotal"), FpSpread1.Sheets[0].RowCount - 1);
                        ViewState["Grandtotal"] = Grandtotal;
                    }
                    FpSpread1.Sheets[0].PageSize = FpSpread1.Sheets[0].RowCount;
                    FpSpread1.Visible = true;
                    FpSpread1.Width = 600;
                    FpSpread1.Height = 400;
                    //  FpSpread1.SaveChanges();
                    // FpSpreadstud2.SaveChanges();
                }
            }
        }
        catch
        {

        }
    }
    protected void FpSpreadstud3_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (spreadstud3_click == true)
            {
                // FpSpread1.SaveChanges();
                // FpSpreadstud3.SaveChanges();
                DataView dvnew = new DataView();
                DataView dv1 = new DataView();
                int i;
                int col;
                string startdate = "";
                string duedate = "";
                string day1 = "";
                string mon1 = "";
                string year1 = "";
                string day2 = "";
                string mon2 = "";
                string year2 = "";
                string feecategory = "";
                string header = "";
                string ledger = "";
                string[] split;
                //Grandtotal.Clear();
                //ledgertotal.Clear();
                //headertotal.Clear();

                string[] dtday = new string[31];
                for (int id = 1; id <= 31; id++)
                {
                    if (Convert.ToString(id).Length == 1)
                    {
                        dtday[id - 1] = "0" + Convert.ToString(id);
                    }
                    else
                    {
                        dtday[id - 1] = Convert.ToString(id);
                    }
                }
                string[] dtmon = new string[12] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" };
                string[] droparray = new string[2];
                string[] droparray1 = new string[ddl_detre.Items.Count];
                droparray[0] = "Regular";
                droparray[1] = "Monthly";
                string[] loadyear = new string[10];

                DateTime currdt = DateTime.Now;
                int curryear = currdt.Year;

                for (int ij = 0; ij < 10; ij++)
                {
                    loadyear[ij] = Convert.ToString(curryear - ij);
                }


                if (ddl_detre.Items.Count > 0)
                {
                    for (int re = 0; re < ddl_detre.Items.Count; re++)
                    {
                        if (re == 0)
                        {
                            droparray1[re] = " ";
                        }
                        else
                        {
                            droparray1[re] = Convert.ToString(ddl_detre.Items[re].Text);
                        }
                    }
                }

                //if (ddlyear1.Items.Count > 0)
                //{
                //    for (int yr = 0; yr < ddlyear1.Items.Count; yr++)
                //    {
                //        loadyear[yr] = Convert.ToString(ddlyear1.Items[yr].Text);
                //    }
                //}

                for (i = 0; i < cbl_sem.Items.Count; i++)
                {
                    if (cbl_sem.Items[i].Selected)
                    {
                        if (feecategory == "")
                        {
                            feecategory = "" + cbl_sem.Items[i].Value.ToString();
                        }
                        else
                        {
                            feecategory += "','" + cbl_sem.Items[i].Value.ToString() + "";
                        }
                    }
                }

                for (i = 0; i < cbl_ledger.Items.Count; i++)
                {
                    if (cbl_ledger.Items[i].Selected)
                    {
                        if (ledger == "")
                        {
                            ledger = "" + cbl_ledger.Items[i].Value.ToString();
                        }
                        else
                        {
                            ledger += "','" + cbl_ledger.Items[i].Value.ToString() + "";
                        }
                    }
                }

                for (i = 0; i < cbl_header.Items.Count; i++)
                {
                    if (cbl_header.Items[i].Selected)
                    {
                        if (header == "")
                        {
                            header = "" + cbl_header.Items[i].Value.ToString();
                        }
                        else
                        {
                            header += "','" + cbl_header.Items[i].Value.ToString() + "";
                        }
                    }
                }

                FarPoint.Web.Spread.ComboBoxCellType cb = new FarPoint.Web.Spread.ComboBoxCellType(droparray);
                cb.UseValue = true;
                cb.AutoPostBack = true;
                cb.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cb1 = new FarPoint.Web.Spread.ComboBoxCellType(droparray1);
                cb1.UseValue = true;
                cb1.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cbday1 = new FarPoint.Web.Spread.ComboBoxCellType(dtday);
                cbday1.UseValue = true;
                cbday1.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cbmon1 = new FarPoint.Web.Spread.ComboBoxCellType(dtmon);
                cbmon1.UseValue = true;
                cbmon1.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cbyear1 = new FarPoint.Web.Spread.ComboBoxCellType(loadyear);
                cbyear1.UseValue = true;
                cbyear1.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cbday2 = new FarPoint.Web.Spread.ComboBoxCellType(dtday);
                cbday2.UseValue = true;
                cbday2.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cbmon2 = new FarPoint.Web.Spread.ComboBoxCellType(dtmon);
                cbmon2.UseValue = true;
                cbmon2.ShowButton = true;

                FarPoint.Web.Spread.ComboBoxCellType cbyear2 = new FarPoint.Web.Spread.ComboBoxCellType(loadyear);
                cbyear2.UseValue = true;
                cbyear2.ShowButton = true;

                FarPoint.Web.Spread.DoubleCellType doubl = new FarPoint.Web.Spread.DoubleCellType();
                doubl.ErrorMessage = "Allow Numerics";

                Hashtable hatnew = new Hashtable();
                hatnew = (Hashtable)ViewState["colcountnew"];
                if (spreadstud3_click == true)
                {
                    FpSpreadstud3.Visible = false;
                    FpSpread1.Visible = true;
                    //popper1.Visible = false;

                    Hashtable tothash = new Hashtable();
                    Hashtable dedhash = new Hashtable();
                    Hashtable coltothash = new Hashtable();
                    Hashtable refhash = new Hashtable();
                    Hashtable frmhash = new Hashtable();
                    Hashtable finehash = new Hashtable();

                    Hashtable Grandtothash = new Hashtable();
                    Hashtable Granddedhash = new Hashtable();
                    Hashtable Grandcoltothash = new Hashtable();
                    Hashtable Grandrefhash = new Hashtable();
                    Hashtable Grandfrmhash = new Hashtable();
                    Hashtable Grandfinehash = new Hashtable();
                    int colindex;
                    int dedindex;
                    int coltotindex;
                    int refindex;
                    int frmindex;
                    int fineindex;
                    double totgrand = 0;
                    double dedgrand = 0;
                    double grandtot = 0;
                    double refundtot = 0;
                    double frmgovttot = 0;
                    double finetotal = 0;

                    FpSpread1.Sheets[0].RowCount = 0;

                    string actrow = FpSpreadstud3.ActiveSheetView.ActiveRow.ToString();
                    string actcol = FpSpreadstud3.ActiveSheetView.ActiveColumn.ToString();

                    string app_no = Convert.ToString(FpSpreadstud3.Sheets[0].Cells[Convert.ToInt32(actrow), 1].Tag);
                    Session["appformnew_no"] = app_no;
                    string selquery = "";

                    selquery = "select headerpk,headername,ledgerpk,ledgername from FM_HeaderMaster m,FM_LedgerMaster l where m.HeaderPK = l.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure')  and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "') order by len(isnull(l.priority,1000)) , l.priority asc ";

                    selquery = selquery + "select HeaderPK,HeaderName,LedgerPK,LedgerName,LedgerFK,f.HeaderFK,AllotDate,FeeCategory,PayMode,FeeAmount,DeductAmout,DeductReason,TotalAmount,RefundAmount,FromGovtAmt,convert(varchar(10),DueDate,103) as DueDate,FineAmount,convert(varchar(10),PayStartDate,103) as  PayStartDate from FM_HeaderMaster m,FM_LedgerMaster l,FT_FeeAllot f where m.HeaderPK = l.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure') and m.HeaderPK=f.HeaderFK and l.LedgerPK=f.LedgerFK and App_No='" + app_no + "' and f.FeeCategory in('" + feecategory + "') and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "') order by len(isnull(l.priority,1000)) , l.priority asc ";

                    selquery = selquery + " select distinct headerpk,headername from FM_HeaderMaster m,FM_LedgerMaster l where m.HeaderPK = l.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure')  and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "')";

                    ds.Clear();
                    ds = d2.select_method_wo_parameter(selquery, "Text");

                    if (ds.Tables[0].Rows.Count > 0 && ds.Tables[2].Rows.Count > 0)
                    {
                        int sno = 0;
                        for (int ik = 0; ik < ds.Tables[2].Rows.Count; ik++)
                        {
                            tothash.Clear();
                            dedhash.Clear();
                            coltothash.Clear();
                            refhash.Clear();
                            frmhash.Clear();
                            finehash.Clear();

                            double total = 0;
                            double dedtot = 0;
                            double coltot = 0;
                            double reftot = 0;
                            double frmtot = 0;
                            double finetot = 0;
                            FpSpread1.Sheets[0].RowCount++;
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(ds.Tables[2].Rows[ik]["HeaderName"]);
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);

                            ds.Tables[0].DefaultView.RowFilter = "HeaderPK='" + Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"]) + "'";
                            dvnew = ds.Tables[0].DefaultView;
                            for (i = 0; i < dvnew.Count; i++)
                            {
                                FpSpread1.Sheets[0].RowCount++;
                                sno++;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(sno);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;

                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = Convert.ToString(dvnew[i]["LedgerName"]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Tag = Convert.ToString(dvnew[i]["LedgerPK"]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Left;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                                for (int cn = 0; cn < cbl_sem.Items.Count; cn++)
                                {
                                    col = 1;
                                    if (cbl_sem.Items[cn].Selected == true)
                                    {
                                        col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                        //dt = dv.ToTable();
                                        //dt1 = dv1.ToTable();
                                        //dv1 = new DataView(dt1);
                                        ds.Tables[1].DefaultView.RowFilter = "FeeCategory='" + cbl_sem.Items[cn].Value + "' and HeaderFK ='" + Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"]) + "' and LedgerFK='" + Convert.ToString(dvnew[i]["LedgerPK"]) + "'";
                                        dv1 = ds.Tables[1].DefaultView;

                                        if (dv1.Count > 0)
                                        {
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag = Convert.ToString(dv1[0]["LedgerFK"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["FeeAmount"]);
                                            if (Convert.ToString(dv1[0]["FeeAmount"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["FeeAmount"]);
                                                if (tothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                {
                                                    total = Convert.ToInt32(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                    total += getvalue;
                                                    tothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                    tothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(total));
                                                }
                                                else
                                                {
                                                    tothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                                }
                                            }
                                            totgrand += total;
                                            //total += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (tothash.ContainsKey(colindex))
                                            //{
                                            //    tothash.Remove(colindex);
                                            //}
                                            //tothash.Add(colindex, Convert.ToString(total));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductAmout"]);
                                            if (Convert.ToString(dv1[0]["DeductAmout"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["DeductAmout"]);
                                                if (dedhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                {
                                                    dedtot = Convert.ToInt32(dedhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                    dedtot += getvalue;
                                                    dedhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                    dedhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(dedtot));
                                                }
                                                else
                                                {
                                                    dedhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                                }
                                            }
                                            dedgrand += dedtot;
                                            //dedtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (dedhash.ContainsKey(dedindex))
                                            //{
                                            //    dedhash.Remove(dedindex);
                                            //}
                                            //dedhash.Add(dedindex, Convert.ToString(dedtot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductReason"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;


                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["TotalAmount"]);
                                            if (Convert.ToString(dv1[0]["TotalAmount"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["TotalAmount"]);
                                                if (coltothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                {
                                                    coltot = Convert.ToInt32(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                    coltot += getvalue;
                                                    coltothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                    coltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(coltot));
                                                }
                                                else
                                                {
                                                    coltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                                }
                                            }
                                            grandtot += coltot;
                                            //coltot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (coltothash.ContainsKey(coltotindex))
                                            //{
                                            //    coltothash.Remove(coltotindex);
                                            //}
                                            //coltothash.Add(coltotindex, Convert.ToString(coltot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;


                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["RefundAmount"]);
                                            if (Convert.ToString(dv1[0]["RefundAmount"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["RefundAmount"]);
                                                if (refhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                {
                                                    reftot = Convert.ToInt32(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                    reftot += getvalue;
                                                    refhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                    refhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(reftot));
                                                }
                                                else
                                                {
                                                    refhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                                }
                                            }
                                            refundtot += reftot;
                                            //reftot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (refhash.ContainsKey(refindex))
                                            //{
                                            //    refhash.Remove(refindex);
                                            //}
                                            //refhash.Add(refindex, Convert.ToString(reftot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;


                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["FromGovtAmt"]);
                                            if (Convert.ToString(dv1[0]["FromGovtAmt"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["FromGovtAmt"]);
                                                if (frmhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                {
                                                    frmtot = Convert.ToInt32(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                    frmtot += getvalue;
                                                    frmhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                    frmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(frmtot));
                                                }
                                                else
                                                {
                                                    frmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                                }
                                            }
                                            frmgovttot += frmtot;
                                            //frmtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (frmhash.ContainsKey(frmindex))
                                            //{
                                            //    frmhash.Remove(frmindex);
                                            //}
                                            //frmhash.Add(frmindex, Convert.ToString(frmtot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag = Convert.ToString(dv1[0]["DueDate"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            duedate = Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag);
                                            if (duedate.Trim() != "01/01/1900")
                                            {
                                                split = duedate.Split('/');
                                                day1 = split[0];
                                                mon1 = split[1];
                                                year1 = split[2];
                                            }
                                            else
                                            {
                                                day1 = "";
                                                mon1 = "";
                                                year1 = "";
                                            }

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = day1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = mon1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = year1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["FineAmount"]);
                                            if (Convert.ToString(dv1[0]["FineAmount"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["FineAmount"]);
                                                if (finehash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                {
                                                    finetot = Convert.ToInt32(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                    finetot += getvalue;
                                                    finehash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                    finehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(finetot));
                                                }
                                                else
                                                {
                                                    finehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                                }
                                            }
                                            finetotal += finetot;
                                            ////finetot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            ////if (finehash.ContainsKey(fineindex))
                                            ////{
                                            ////    finehash.Remove(fineindex);
                                            ////}
                                            ////finehash.Add(fineindex, Convert.ToString(finetot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 5].Tag = Convert.ToString(dv1[0]["PayStartDate"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            startdate = Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 5].Tag);
                                            if (startdate.Trim() != "01/01/1900")
                                            {
                                                split = startdate.Split('/');
                                                day2 = split[0];
                                                mon2 = split[1];
                                                year2 = split[2];
                                            }
                                            else
                                            {
                                                day2 = "";
                                                mon2 = "";
                                                year2 = "";
                                            }
                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = day2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = mon2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = year2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                        }
                                        else
                                        {
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear2;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                        }
                                    }
                                }
                            }
                            FpSpread1.Sheets[0].RowCount++;
                            if (!headertotal.ContainsKey(Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"])))
                            {
                                headertotal.Add(Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"]), FpSpread1.Sheets[0].RowCount - 1);
                                ViewState["headertotal"] = headertotal;
                            }
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Total";
                            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                            for (int cn = 0; cn < cbl_sem.Items.Count; cn++)
                            {
                                col = 1;
                                if (cbl_sem.Items[cn].Selected == true)
                                {
                                    col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    col++;
                                    colindex = col;
                                    dedindex = col + 1;
                                    coltotindex = col + 3;
                                    refindex = col + 4;
                                    frmindex = col + 5;
                                    fineindex = col + 9;

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, colindex].Text = Convert.ToString(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string headertotalGrand = Convert.ToString(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(headertotalGrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(headertotalGrand);
                                        if (Grandtothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            totgrand = Convert.ToInt32(Grandtothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            totgrand += getvalue;
                                            Grandtothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandtothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(totgrand));
                                        }
                                        else
                                        {
                                            Grandtothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    //totgrand += Convert.ToInt32(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, dedindex].Text = Convert.ToString(dedhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    string dedtotalgrand = Convert.ToString(dedhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(dedtotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(dedtotalgrand);
                                        if (Granddedhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            dedgrand = Convert.ToInt32(Granddedhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            dedgrand += getvalue;
                                            Granddedhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Granddedhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(dedgrand));
                                        }
                                        else
                                        {
                                            Granddedhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    //dedgrand += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text));

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, coltotindex].Text = Convert.ToString(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string tottotalgrand = Convert.ToString(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(tottotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(tottotalgrand);
                                        if (Grandcoltothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            grandtot = Convert.ToInt32(Grandcoltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            grandtot += getvalue;
                                            Grandcoltothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandcoltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(grandtot));
                                        }
                                        else
                                        {
                                            Grandcoltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    //grandtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 6].Text));

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, refindex].Text = Convert.ToString(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string reftotalgrand = Convert.ToString(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(reftotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(reftotalgrand);
                                        if (Grandrefhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            refundtot = Convert.ToInt32(Grandrefhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            refundtot += getvalue;
                                            Grandrefhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandrefhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(refundtot));
                                        }
                                        else
                                        {
                                            Grandrefhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    // refundtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 7].Text));

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, frmindex].Text = Convert.ToString(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string frmtotalgrand = Convert.ToString(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(frmtotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(frmtotalgrand);
                                        if (Grandfrmhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            frmgovttot = Convert.ToInt32(Grandfrmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            frmgovttot += getvalue;
                                            Grandfrmhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandfrmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(frmgovttot));
                                        }
                                        else
                                        {
                                            Grandfrmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    // frmgovttot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 8].Text));

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, fineindex].Text = Convert.ToString(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string finetotalgrand = Convert.ToString(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(finetotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(finetotalgrand);
                                        if (Grandfinehash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            finetotal = Convert.ToInt32(Grandfinehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            finetotal += getvalue;
                                            Grandfinehash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandfinehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(finetotal));
                                        }
                                        else
                                        {
                                            Grandfinehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    //finetotal += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 12].Text));
                                }
                            }
                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                        }

                        FpSpread1.Sheets[0].RowCount++;
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Grand Total";
                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].BackColor = ColorTranslator.FromHtml("#0CA6CA");

                        for (int cn = 0; cn < cbl_sem.Items.Count; cn++)
                        {
                            col = 1;
                            if (cbl_sem.Items[cn].Selected == true)
                            {
                                col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                col++;
                                colindex = col;
                                dedindex = col + 1;
                                coltotindex = col + 3;
                                refindex = col + 4;
                                frmindex = col + 5;
                                fineindex = col + 9;
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, colindex].Text = Convert.ToString(Grandtothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, dedindex].Text = Convert.ToString(Granddedhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, coltotindex].Text = Convert.ToString(Grandcoltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, refindex].Text = Convert.ToString(Grandrefhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, frmindex].Text = Convert.ToString(Grandfrmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, fineindex].Text = Convert.ToString(Grandfinehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                            }
                        }
                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                        Grandtotal.Add(Convert.ToString("GrandTotal"), FpSpread1.Sheets[0].RowCount - 1);
                        ViewState["Grandtotal"] = Grandtotal;
                    }
                    FpSpread1.Sheets[0].PageSize = FpSpread1.Sheets[0].RowCount;
                    FpSpread1.Visible = true;
                    FpSpread1.Width = 600;
                    FpSpread1.Height = 400;
                    // FpSpread1.SaveChanges();
                    // FpSpreadstud3.SaveChanges();
                }
            }
        }
        catch
        {

        }
    }
    protected void btn_errorclose_Click(object sender, EventArgs e)
    {
        alertpopwindow.Visible = false;
    }
    protected void btn_exitaddreason_Click(object sender, EventArgs e)
    {
        plusdiv.Visible = false;
        panel_addreason.Visible = false;
        txt_addreason.Text = "";

    }
    protected void cb_stream_CheckedChanged(object sender, EventArgs e)
    {
        string stream = "";
        if (cb_stream.Checked == true)
        {
            for (int i = 0; i < cbl_stream.Items.Count; i++)
            {
                cbl_stream.Items[i].Selected = true;
                stream = Convert.ToString(cbl_stream.Items[i].Text);
            }
            if (lbl_stream.Text == "Stream")
            {
                if (cbl_stream.Items.Count == 1)
                {
                    txt_stream.Text = "" + stream + "";
                }
                else
                {
                    txt_stream.Text = "Stream(" + (cbl_stream.Items.Count) + ")";
                }
            }
            if (lbl_stream.Text == "Shift")
            {
                if (cbl_stream.Items.Count == 1)
                {
                    txt_stream.Text = "" + stream + "";
                }
                else
                {
                    txt_stream.Text = "Shift(" + (cbl_stream.Items.Count) + ")";
                }
            }
        }
        else
        {
            for (int i = 0; i < cbl_stream.Items.Count; i++)
            {
                cbl_stream.Items[i].Selected = false;
            }
            txt_stream.Text = "--Select--";
        }
        loadedulevel();
        Bindcourse();
        binddept();
    }
    protected void cbl_stream_SelectedIndexChanged(object sender, EventArgs e)
    {
        string stream = "";
        txt_stream.Text = "--Select--";
        cb_stream.Checked = false;
        int commcount = 0;
        for (int i = 0; i < cbl_stream.Items.Count; i++)
        {
            if (cbl_stream.Items[i].Selected == true)
            {
                commcount = commcount + 1;
                stream = Convert.ToString(cbl_stream.Items[i].Text);
            }
        }
        if (commcount > 0)
        {
            if (lbl_stream.Text == "Shift")
            {
                if (commcount == 1)
                {
                    txt_stream.Text = "" + stream + "";
                }
                else
                {
                    txt_stream.Text = "Shift(" + commcount.ToString() + ")";
                }
            }
            if (lbl_stream.Text == "Stream")
            {
                if (commcount == 1)
                {
                    txt_stream.Text = "" + stream + "";
                }
                else
                {
                    txt_stream.Text = "Stream(" + commcount.ToString() + ")";
                }
            }
            if (commcount == cbl_stream.Items.Count)
            {
                cb_stream.Checked = true;
            }
        }
        loadedulevel();
        Bindcourse();
        binddept();
    }
    public void loadstream()
    {
        try
        {
            string stream = "";
            cbl_stream.Items.Clear();
            string deptquery = "select distinct type from Course where type is not null and type<>'' and college_code  in ('" + collegecode1 + "')";
            ds.Clear();
            ds = d2.select_method_wo_parameter(deptquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_stream.DataSource = ds;
                cbl_stream.DataTextField = "type";
                cbl_stream.DataBind();

                if (cbl_stream.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_stream.Items.Count; i++)
                    {
                        cbl_stream.Items[i].Selected = true;
                        stream = Convert.ToString(cbl_stream.Items[i].Text);
                    }
                    if (lbl_stream.Text == "Stream")
                    {
                        if (cbl_stream.Items.Count == 1)
                        {
                            txt_stream.Text = "Stream(" + stream + ")";
                        }
                        else
                        {
                            txt_stream.Text = "Stream(" + cbl_stream.Items.Count + ")";
                        }
                    }
                    if (lbl_stream.Text == "Shift")
                    {
                        if (cbl_stream.Items.Count == 1)
                        {
                            txt_stream.Text = "Shift(" + stream + ")";
                        }
                        else
                        {
                            txt_stream.Text = "Shift(" + cbl_stream.Items.Count + ")";
                        }
                    }
                    cb_stream.Checked = true;
                    if (isStreamEnabled())
                        txt_stream.Enabled = true;
                    else
                        txt_stream.Enabled = false;
                }
            }
            else
            {
                txt_stream.Text = "--Select--";
                txt_stream.Enabled = false;

            }
        }
        catch
        {
        }

    }
    protected void cb_edulevel_CheckedChanged(object sender, EventArgs e)
    {
        string edulevel = "";
        if (cb_edulevel.Checked == true)
        {
            for (int i = 0; i < cbl_edulevel.Items.Count; i++)
            {
                cbl_edulevel.Items[i].Selected = true;
                edulevel = Convert.ToString(cbl_edulevel.Items[i].Text);
            }
            if (cbl_edulevel.Items.Count == 1)
            {
                txt_edulevel.Text = "" + edulevel + "";
            }
            else
            {
                txt_edulevel.Text = "Edu Level(" + (cbl_edulevel.Items.Count) + ")";
            }
        }
        else
        {
            for (int i = 0; i < cbl_edulevel.Items.Count; i++)
            {
                cbl_edulevel.Items[i].Selected = false;
            }
            txt_edulevel.Text = "--Select--";
        }
        Bindcourse();
        binddept();
    }
    protected void cbl_edulevel_SelectedIndexChanged(object sender, EventArgs e)
    {
        txt_edulevel.Text = "--Select--";
        cb_edulevel.Checked = false;
        string edulevel = "";
        int commcount = 0;
        for (int i = 0; i < cbl_edulevel.Items.Count; i++)
        {
            if (cbl_edulevel.Items[i].Selected == true)
            {
                commcount = commcount + 1;
                edulevel = Convert.ToString(cbl_edulevel.Items[i].Text);
            }
        }
        if (commcount > 0)
        {
            if (commcount == cbl_edulevel.Items.Count)
            {
                cb_edulevel.Checked = true;
            }
            if (commcount == 1)
            {
                txt_edulevel.Text = "" + edulevel + "";
            }
            else
            {
                txt_edulevel.Text = "Edu Level(" + commcount.ToString() + ")";
            }
        }
        Bindcourse();
        binddept();
    }
    public void loadedulevel()
    {
        try
        {
            ds.Clear();
            cbl_edulevel.Items.Clear();
            string edulevel = "";

            string itemheader = "";
            for (int i = 0; i < cbl_stream.Items.Count; i++)
            {
                if (cbl_stream.Items[i].Selected == true)
                {
                    if (itemheader == "")
                    {
                        itemheader = "" + cbl_stream.Items[i].Value.ToString() + "";
                    }
                    else
                    {
                        itemheader = itemheader + "'" + "," + "" + "'" + cbl_stream.Items[i].Value.ToString() + "";
                    }
                }
            }
            string deptquery = "";
            if (itemheader.Trim() != "" && txt_stream.Enabled)
            {
                deptquery = "select distinct Edu_Level  from Course where Edu_Level is not null and Edu_Level<>'' and type in ('" + itemheader + "') and college_code in ('" + collegecode1 + "')";
            }
            else
            {
                deptquery = "select distinct Edu_Level  from Course where Edu_Level is not null and Edu_Level<>'' and college_code in ('" + collegecode1 + "')";
            }
            ds.Clear();
            ds = d2.select_method_wo_parameter(deptquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_edulevel.DataSource = ds;
                cbl_edulevel.DataTextField = "Edu_Level";
                cbl_edulevel.DataBind();
                if (cbl_edulevel.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_edulevel.Items.Count; i++)
                    {
                        cbl_edulevel.Items[i].Selected = true;
                        edulevel = Convert.ToString(cbl_edulevel.Items[i].Text);
                    }
                    if (cbl_edulevel.Items.Count == 1)
                    {
                        txt_edulevel.Text = "Edu Level(" + edulevel + ")";
                    }
                    else
                    {
                        txt_edulevel.Text = "Edu Level(" + cbl_edulevel.Items.Count + ")";
                    }
                    cb_edulevel.Checked = true;
                }
            }
            else
            {
                txt_edulevel.Text = "--Select--";
                cb_edulevel.Checked = false;
            }

            //}
            //else
            //{
            //    txt_edulevel.Text = "--Select--";
            //    cb_edulevel.Checked = false;
            //}
        }
        catch
        {
        }
    }
    public void loadreligion()
    {
        try
        {
            string religion = "";
            cbl_religion.Items.Clear();
            cbl_religion.Text = "--Select--";
            cb_religion.Checked = false;
            string reliquery = "SELECT Distinct religion,T.TextVal  FROM applyn A,Registration R,TextValTable T WHERE A.app_no=R.App_No AND T.TextCode =A.religion AND R.college_code ='" + ddl_college.SelectedItem.Value + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(reliquery, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cbl_religion.DataSource = ds;
                    cbl_religion.DataTextField = "TextVal";
                    cbl_religion.DataValueField = "religion";
                    cbl_religion.DataBind();
                    if (cbl_religion.Items.Count > 0)
                    {
                        for (int i = 0; i < cbl_religion.Items.Count; i++)
                        {
                            cbl_religion.Items[i].Selected = true;
                            religion = Convert.ToString(cbl_religion.Items[i].Text);
                        }
                        if (cbl_religion.Items.Count == 1)
                        {
                            txt_religion.Text = "" + religion + "";
                        }
                        else
                        {
                            txt_religion.Text = "Religion(" + cbl_religion.Items.Count + ")";
                        }
                        cb_religion.Checked = true;
                    }
                }
            }
            else
            {
                txt_religion.Text = "--Select--";
                cb_religion.Checked = false;
            }
        }
        catch
        {
        }
    }
    protected void cb_religion_CheckedChanged(object seender, EventArgs e)
    {
        try
        {
            string religion = "";
            if (cb_religion.Checked == true)
            {
                for (int i = 0; i < cbl_religion.Items.Count; i++)
                {
                    cbl_religion.Items[i].Selected = true;
                    religion = Convert.ToString(cbl_religion.Items[i].Text);
                }
                if (cbl_religion.Items.Count == 1)
                {
                    txt_religion.Text = "" + religion + "";
                }
                else
                {
                    txt_religion.Text = "Religion(" + (cbl_religion.Items.Count) + ")";
                }
            }
            else
            {
                for (int i = 0; i < cbl_religion.Items.Count; i++)
                {
                    cbl_religion.Items[i].Selected = false;
                }
                txt_religion.Text = "--Select--";
            }
        }
        catch
        {

        }
    }
    protected void cbl_religion_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            txt_religion.Text = "--Select--";
            string religion = "";
            cb_religion.Checked = false;
            int commcount = 0;
            for (int i = 0; i < cbl_religion.Items.Count; i++)
            {
                if (cbl_religion.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                    religion = Convert.ToString(cbl_religion.Items[i].Text);
                }
            }
            if (commcount > 0)
            {
                if (commcount == cbl_religion.Items.Count)
                {
                    cb_religion.Checked = true;
                }
                if (commcount == 1)
                {
                    txt_religion.Text = "" + religion + "";
                }
                else
                {
                    txt_religion.Text = "Religion(" + commcount.ToString() + ")";
                }
            }
        }
        catch
        {

        }
    }
    public void loadcommunity()
    {
        try
        {

            cbl_community.Items.Clear();
            cbl_community.Text = "--Select--";
            cb_community.Checked = false;
            string comm = "";

            string selq = "SELECT Distinct community,T.TextVal  FROM applyn A,Registration R,TextValTable T WHERE A.app_no=R.App_No AND T.TextCode =A.community  AND TextVal<>''AND R.college_code ='" + ddl_college.SelectedItem.Value + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selq, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cbl_community.DataSource = ds;
                    cbl_community.DataTextField = "TextVal";
                    cbl_community.DataValueField = "community";
                    cbl_community.DataBind();
                    if (cbl_community.Items.Count > 0)
                    {
                        for (int i = 0; i < cbl_community.Items.Count; i++)
                        {
                            cbl_community.Items[i].Selected = true;
                            comm = Convert.ToString(cbl_community.Items[i].Text);
                        }
                        if (cbl_community.Items.Count == 1)
                        {
                            txt_community.Text = "" + comm + "";
                        }
                        else
                        {
                            txt_community.Text = "Community(" + cbl_community.Items.Count + ")";
                        }
                        cb_community.Checked = true;
                    }
                }
            }
            else
            {
                txt_community.Text = "--Select--";
                cb_community.Checked = false;
            }
        }
        catch
        {

        }
    }
    protected void cb_community_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            string comm = "";
            if (cb_community.Checked == true)
            {
                for (int i = 0; i < cbl_community.Items.Count; i++)
                {
                    cbl_community.Items[i].Selected = true;
                    comm = Convert.ToString(cbl_community.Items[i].Text);
                }
                if (cbl_community.Items.Count == 1)
                {
                    txt_community.Text = "" + comm + "";
                }
                else
                {

                    txt_community.Text = "Community(" + (cbl_community.Items.Count) + ")";
                }
            }
            else
            {
                for (int i = 0; i < cbl_community.Items.Count; i++)
                {
                    cbl_community.Items[i].Selected = false;
                }
                txt_community.Text = "--Select--";
            }
        }
        catch
        {

        }
    }
    protected void cbl_community_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            txt_community.Text = "--Select--";
            cb_community.Checked = false;
            string comm = "";
            int commcount = 0;
            for (int i = 0; i < cbl_community.Items.Count; i++)
            {
                if (cbl_community.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                    comm = Convert.ToString(cbl_community.Items[i].Text);
                }
            }
            if (commcount > 0)
            {
                if (commcount == cbl_community.Items.Count)
                {
                    cb_community.Checked = true;
                }
                if (commcount == 1)
                {
                    txt_community.Text = "" + comm + "";
                }
                else
                {
                    txt_community.Text = "Community(" + commcount.ToString() + ")";
                }
            }
        }
        catch
        {

        }
    }
    public void cb_batch_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            int count = 0;
            string batch = "";
            txt_batch.Text = "--Select--";
            if (cb_batch.Checked == true)
            {
                count++;
                for (int i = 0; i < cbl_batch.Items.Count; i++)
                {
                    cbl_batch.Items[i].Selected = true;
                    batch = Convert.ToString(cbl_batch.Items[i].Text);
                }
                if (cbl_batch.Items.Count == 1)
                {
                    txt_batch.Text = "" + batch + "";
                }
                else
                {
                    txt_batch.Text = "Batch(" + (cbl_batch.Items.Count) + ")";
                }
            }
            else
            {
                for (int i = 0; i < cbl_batch.Items.Count; i++)
                {
                    cbl_batch.Items[i].Selected = false;
                }
                txt_batch.Text = "--Select--";
            }
            //BindDegree();
            //bindbranch();
            //bindsem();
            //bindsec();

        }
        catch (Exception ex)
        {

        }

    }
    public void cbl_batch_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int commcount = 0;
            string buildvalue = "";
            string build = "";
            string batch = "";
            cb_batch.Checked = false;
            txt_batch.Text = "--Select--";


            for (int i = 0; i < cbl_batch.Items.Count; i++)
            {
                if (cbl_batch.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                    batch = Convert.ToString(cbl_batch.Items[i].Text);
                    //cb_batch.Checked = false;
                    build = cbl_batch.Items[i].Value.ToString();
                    if (buildvalue == "")
                    {
                        buildvalue = build;
                    }
                    else
                    {
                        buildvalue = buildvalue + "'" + "," + "'" + build;
                    }

                }

            }


            if (commcount > 0)
            {
                if (commcount == cbl_batch.Items.Count)
                {
                    cb_batch.Checked = true;
                }
                if (commcount == 1)
                {
                    txt_batch.Text = "" + batch + "";
                }
                else
                {
                    txt_batch.Text = "Batch(" + commcount.ToString() + ")";
                }
            }
            //BindDegree();
            //bindbranch();
            //bindsem();
            //bindsec();

        }
        catch (Exception ex)
        {

        }
    }
    public void BindBatch()
    {
        try
        {
            string batch = "";
            cbl_batch.Items.Clear();
            // hat.Clear();
            ds = d2.BindBatch();

            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_batch.DataSource = ds;
                cbl_batch.DataTextField = "batch_year";
                cbl_batch.DataValueField = "batch_year";
                cbl_batch.DataBind();
            }
            if (cbl_batch.Items.Count > 0)
            {
                for (int row = 0; row < cbl_batch.Items.Count; row++)
                {
                    cbl_batch.Items[row].Selected = true;
                    cb_batch.Checked = true;
                    batch = Convert.ToString(cbl_batch.Items[row].Text);
                }
                if (cbl_batch.Items.Count == 1)
                {
                    txt_batch.Text = "Batch(" + batch + ")";
                }
                else
                {
                    txt_batch.Text = "Batch(" + cbl_batch.Items.Count + ")";
                }
            }

            else
            {

                txt_batch.Text = "--Select--";
            }
        }
        catch
        {
        }
    }
    public void cb_course_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            int count = 0;
            txt_course.Text = "--Select--";
            string course = "";
            if (cb_course.Checked == true)
            {
                count++;
                for (int i = 0; i < cbl_course.Items.Count; i++)
                {

                    cbl_course.Items[i].Selected = true;
                    course = Convert.ToString(cbl_course.Items[i].Text);
                }
                if (cbl_course.Items.Count == 1)
                {
                    txt_course.Text = "" + course + "";
                }
                else
                {
                    txt_course.Text = lbl_course.Text + "(" + (cbl_course.Items.Count) + ")";
                }
                //txt_course.Text = "Course(" + (cbl_course.Items.Count) + ")";

            }
            else
            {
                for (int i = 0; i < cbl_course.Items.Count; i++)
                {
                    cbl_course.Items[i].Selected = false;

                }
                txt_course.Text = "--Select--";
            }
            binddept();

        }
        catch (Exception ex)
        {
        }

    }
    public void cbl_course_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int i = 0;
            int commcount = 0;
            cb_course.Checked = false;
            string course = "";
            txt_course.Text = "--Select--";
            for (i = 0; i < cbl_course.Items.Count; i++)
            {
                if (cbl_course.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                    course = Convert.ToString(cbl_course.Items[i].Text);
                }
            }
            if (commcount > 0)
            {
                if (commcount == cbl_course.Items.Count)
                {
                    cb_course.Checked = true;
                }
                if (commcount == 1)
                {
                    txt_course.Text = "" + course + "";
                }
                else
                {
                    txt_course.Text = lbl_course.Text + "(" + commcount.ToString() + ")";
                }
                //txt_course.Text = "Course (" + commcount.ToString() + ")";
            }
            binddept();
        }
        catch (Exception ex)
        {

        }
    }
    public void Bindcourse()
    {
        try
        {
            cbl_course.Items.Clear();
            string build = "";
            string build1 = "";
            if (cbl_stream.Items.Count > 0)
            {
                for (int i = 0; i < cbl_stream.Items.Count; i++)
                {
                    if (cbl_stream.Items[i].Selected == true)
                    {
                        if (build1 == "")
                        {
                            build1 = Convert.ToString(cbl_stream.Items[i].Value);
                        }
                        else
                        {
                            build1 = build1 + "'" + "," + "'" + Convert.ToString(cbl_stream.Items[i].Value);
                        }
                    }
                }
            }
            if (cbl_edulevel.Items.Count > 0)
            {
                for (int i = 0; i < cbl_edulevel.Items.Count; i++)
                {
                    if (cbl_edulevel.Items[i].Selected == true)
                    {
                        if (build == "")
                        {
                            build = Convert.ToString(cbl_edulevel.Items[i].Value);
                        }
                        else
                        {
                            build = build + "'" + "," + "'" + Convert.ToString(cbl_edulevel.Items[i].Value);
                        }
                    }
                }
            }
            if (build != "")
            {
                //  string deptquery = "select distinct degree.course_id,course.course_name from degree,course,deptprivilages where course.course_id=degree.course_id and course.college_code = degree.college_code and degree.college_code in ('" + collegecode1 + "') and deptprivilages.Degree_code=degree.Degree_code and user_code in ('" + usercode + "') and course.Edu_Level in ('" + build + "') and type in ('" + build1 + "')";
                string deptquery = "select distinct degree.course_id,course.course_name from degree,course,deptprivilages where course.course_id=degree.course_id and course.college_code = degree.college_code and degree.college_code in ('" + collegecode1 + "') and deptprivilages.Degree_code=degree.Degree_code and user_code in ('" + usercode + "') and course.Edu_Level in ('" + build + "')";
                if (build1.Trim() != "" && txt_stream.Enabled)
                {
                    deptquery = deptquery + " and type in ('" + build1 + "')";
                }
                ds.Clear();
                ds = d2.select_method_wo_parameter(deptquery, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cbl_course.DataSource = ds;
                    cbl_course.DataTextField = "course_name";
                    cbl_course.DataValueField = "course_id";
                    cbl_course.DataBind();
                    if (cbl_course.Items.Count > 0)
                    {
                        for (int row = 0; row < cbl_course.Items.Count; row++)
                        {
                            cbl_course.Items[row].Selected = true;
                        }
                        cb_course.Checked = true;
                        txt_course.Text = lbl_course.Text + "(" + cbl_course.Items.Count + ")";
                    }

                }
            }
            else
            {
                cb_course.Checked = false;
                txt_course.Text = "--Select--";
            }
        }
        catch (Exception ex)
        {
        }
    }
    public void cb_dept_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            string deptname = "";
            int cout = 0;
            txt_dept.Text = "--Select--";
            if (cb_dept.Checked == true)
            {
                cout++;
                for (int i = 0; i < cbl_dept.Items.Count; i++)
                {
                    cbl_dept.Items[i].Selected = true;
                    deptname = Convert.ToString(cbl_dept.Items[i].Text);
                }
                if (cbl_dept.Items.Count == 1)
                {
                    txt_dept.Text = "" + deptname + "";
                }
                else
                {
                    txt_dept.Text = lbl_dept.Text + "(" + (cbl_dept.Items.Count) + ")";
                }
                // txt_dept.Text = "Department(" + (cbl_dept.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < cbl_dept.Items.Count; i++)
                {
                    cbl_dept.Items[i].Selected = false;
                }
                txt_dept.Text = "--Select--";
            }



        }
        catch (Exception ex)
        {

        }
    }
    public void cbl_dept_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            // cbl_sem.Items.Clear();

            int commcount = 0;
            cb_dept.Checked = false;
            txt_dept.Text = "--Select--";
            //int commcount1 = 0;
            string deptname = "";
            for (int i = 0; i < cbl_dept.Items.Count; i++)
            {
                if (cbl_dept.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                    deptname = Convert.ToString(cbl_dept.Items[i].Text);
                }
            }
            if (commcount > 0)
            {
                if (commcount == cbl_dept.Items.Count)
                {

                    cb_dept.Checked = true;
                }
                if (commcount == 1)
                {
                    txt_dept.Text = "" + deptname + "";
                }
                else
                {
                    txt_dept.Text = lbl_dept.Text + "(" + commcount.ToString() + ")";
                }
                //  txt_dept.Text = "Department(" + commcount.ToString() + ")";

            }

        }
        catch (Exception ex)
        {

        }
    }
    public void binddept()
    {
        try
        {

            cbl_dept.Items.Clear();
            string build = "";
            string build1 = "";
            string build2 = "";
            if (cbl_stream.Items.Count > 0)
            {
                for (int i = 0; i < cbl_stream.Items.Count; i++)
                {
                    if (cbl_stream.Items[i].Selected == true)
                    {
                        if (build1 == "")
                        {
                            build1 = Convert.ToString(cbl_stream.Items[i].Value);
                        }
                        else
                        {
                            build1 = build1 + "'" + "," + "'" + Convert.ToString(cbl_stream.Items[i].Value);
                        }
                    }
                }
            }
            if (cbl_edulevel.Items.Count > 0)
            {
                for (int i = 0; i < cbl_edulevel.Items.Count; i++)
                {
                    if (cbl_edulevel.Items[i].Selected == true)
                    {
                        if (build == "")
                        {
                            build = Convert.ToString(cbl_edulevel.Items[i].Value);
                        }
                        else
                        {
                            build = build + "'" + "," + "'" + Convert.ToString(cbl_edulevel.Items[i].Value);
                        }
                    }
                }
            }
            if (cbl_course.Items.Count > 0)
            {
                for (int i = 0; i < cbl_course.Items.Count; i++)
                {
                    if (cbl_course.Items[i].Selected == true)
                    {
                        if (build2 == "")
                        {
                            build2 = Convert.ToString(cbl_course.Items[i].Value);
                        }
                        else
                        {
                            // build2 = build2 + "'" + "," + "'" + Convert.ToString(cbl_course.Items[i].Value);
                            build2 += "," + Convert.ToString(cbl_course.Items[i].Value);
                        }
                    }
                }
            }
            if (build2 != "")
            {
                // string deptquery = "select distinct degree.degree_code,department.dept_name,department.dept_code from degree,department,course,deptprivilages where course.course_id=degree.course_id and department.dept_code=degree.dept_code and course.college_code = degree.college_code and department.college_code = degree.college_code and degree.course_id in('" + build2 + "') and degree.college_code in ('" + collegecode1 + "') and deptprivilages.Degree_code=degree.Degree_code and user_code in ('" + usercode + "') and course.Edu_Level in ('" + build + "')and type in ('" + build1 + "')";
                // string deptquery = "select distinct degree.degree_code,department.dept_name,department.dept_code from degree,department,course,deptprivilages where course.course_id=degree.course_id and  department .dept_code=degree.dept_code and course.college_code = degree.college_code and department.college_code = degree.college_code and degree.course_id in('" + build2 + "') and degree.college_code in ('" + collegecode1 + "') and deptprivilages.Degree_code=degree.Degree_code and user_code in ('" + usercode + "') and course.Edu_Level in ('" + build + "')";

                //   ds.Clear();
                //   ds = d2.select_method_wo_parameter(deptquery, "Text");
                ds.Clear();
                ds = d2.BindBranchMultiple(singleuser, group_user, build2, collegecode, usercode);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cbl_dept.DataSource = ds;
                    cbl_dept.DataTextField = "dept_name";
                    cbl_dept.DataValueField = "degree_code";
                    cbl_dept.DataBind();
                    if (cbl_dept.Items.Count > 0)
                    {
                        for (int row = 0; row < cbl_dept.Items.Count; row++)
                        {
                            cbl_dept.Items[row].Selected = true;
                        }
                        cb_dept.Checked = true;
                        txt_dept.Text = lbl_dept.Text + "(" + cbl_dept.Items.Count + ")";
                    }

                }
            }
            else
            {
                cb_dept.Checked = false;
                txt_dept.Text = "--Select--";
            }
        }

        catch (Exception ex)
        {
        }
    }
    protected void cb_seat_CheckedChanged(object sender, EventArgs e)
    {
        string seat = "";
        if (cb_seat.Checked == true)
        {
            for (int i = 0; i < cbl_seat.Items.Count; i++)
            {
                cbl_seat.Items[i].Selected = true;
                seat = Convert.ToString(cbl_seat.Items[i].Text);
            }
            if (cbl_seat.Items.Count == 1)
            {
                txt_seat.Text = "" + seat + "";
            }
            else
            {
                txt_seat.Text = "Seat(" + (cbl_seat.Items.Count) + ")";
            }
        }
        else
        {
            for (int i = 0; i < cbl_seat.Items.Count; i++)
            {
                cbl_seat.Items[i].Selected = false;
            }
            txt_seat.Text = "--Select--";
        }

    }
    protected void cbl_seat_SelectedIndexChanged(object sender, EventArgs e)
    {
        txt_seat.Text = "--Select--";
        string seat = "";
        cb_seat.Checked = false;
        int commcount = 0;
        for (int i = 0; i < cbl_seat.Items.Count; i++)
        {
            if (cbl_seat.Items[i].Selected == true)
            {
                commcount = commcount + 1;
                seat = Convert.ToString(cbl_seat.Items[i].Text);
            }
        }
        if (commcount > 0)
        {
            if (commcount == cbl_seat.Items.Count)
            {
                cb_seat.Checked = true;
            }
            if (commcount == 1)
            {
                txt_seat.Text = "" + seat + "";
            }
            else
            {
                txt_seat.Text = "Seat(" + commcount.ToString() + ")";
            }
        }
        loadquota();//added by abarna

    }
    public void loadseat()
    {

        try
        {

            cbl_seat.Items.Clear();
            txt_seat.Text = "--Select--";
            cb_seat.Checked = false;
            string seat = "";
            string deptquery = "select distinct TextCode,TextVal from TextValTable  where TextCriteria='seat' and college_code='" + collegecode1 + "'";
            ds.Clear();
            ds = d2.select_method_wo_parameter(deptquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_seat.DataSource = ds;
                cbl_seat.DataTextField = "TextVal";
                cbl_seat.DataValueField = "TextCode";
                cbl_seat.DataBind();

                if (ddl_type.SelectedIndex == 0)
                {
                    if (cbl_seat.Items.Count > 0)
                    {
                        for (int i = 0; i < cbl_seat.Items.Count; i++)
                        {
                            cbl_seat.Items[i].Selected = true;
                            seat = Convert.ToString(cbl_seat.Items[i].Text);
                        }
                        if (cbl_seat.Items.Count == 1)
                        {
                            txt_seat.Text = "Seat(" + seat + ")";
                        }
                        else
                        {
                            txt_seat.Text = "Seat(" + cbl_seat.Items.Count + ")";
                        }
                        cb_seat.Checked = true;
                    }
                }
            }
            else
            {
                txt_seat.Text = "--Select--";

            }

        }
        catch
        {
        }

    }
    protected void cb_type_CheckedChanged(object sender, EventArgs e)
    {
        string type = "";
        if (cb_type.Checked == true)
        {
            for (int i = 0; i < cbl_type.Items.Count; i++)
            {
                cbl_type.Items[i].Selected = true;
                type = Convert.ToString(cbl_type.Items[i].Text);
            }
            if (cbl_type.Items.Count == 1)
            {
                txt_type.Text = "" + type + "";
            }
            else
            {
                txt_type.Text = "Type(" + (cbl_type.Items.Count) + ")";
            }
        }
        else
        {
            for (int i = 0; i < cbl_type.Items.Count; i++)
            {
                cbl_type.Items[i].Selected = false;
            }
            txt_type.Text = "--Select--";
        }

    }
    protected void cbl_type_SelectedIndexChanged(object sender, EventArgs e)
    {
        txt_type.Text = "--Select--";
        string type = "";
        cb_type.Checked = false;
        int commcount = 0;
        for (int i = 0; i < cbl_type.Items.Count; i++)
        {
            if (cbl_type.Items[i].Selected == true)
            {
                commcount = commcount + 1;
                type = Convert.ToString(cbl_type.Items[i].Text);
            }
        }
        if (commcount > 0)
        {
            if (commcount == cbl_type.Items.Count)
            {
                cb_type.Checked = true;
            }
            if (commcount == 1)
            {
                txt_type.Text = "" + type + "";
            }
            else
            {
                txt_type.Text = "Type(" + commcount.ToString() + ")";
            }
        }

    }
    public void loadtype()
    {

        try
        {

            cbl_type.Items.Clear();

            string type = "";
            string deptquery = "select distinct case when mode =1 then 'Regular' when mode =3 then 'Lateral'  when mode =2 then 'Transfer' end as Modename,mode from Registration r,Degree g where r.degree_code = g.Degree_Code and g.college_code in('" + collegecode1 + "')";
            ds.Clear();
            ds = d2.select_method_wo_parameter(deptquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_type.DataSource = ds;
                cbl_type.DataTextField = "Modename";
                cbl_type.DataValueField = "mode";
                cbl_type.DataBind();

                if (cbl_type.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_type.Items.Count; i++)
                    {
                        cbl_type.Items[i].Selected = true;
                        type = Convert.ToString(cbl_type.Items[i].Text);
                    }
                    if (cbl_type.Items.Count == 1)
                    {
                        txt_type.Text = "Type(" + type + ")";
                    }
                    else
                    {
                        txt_type.Text = "Type(" + cbl_type.Items.Count + ")";
                    }
                    cb_type.Checked = true;
                }
            }
            else
            {
                txt_type.Text = "--Select--";

            }
        }
        catch
        {
        }

    }
    protected void cb_stutype_CheckedChanged(object sender, EventArgs e)
    {
        string studtype = "";
        if (cb_stutype.Checked == true)
        {
            for (int i = 0; i < cbl_stutype.Items.Count; i++)
            {
                cbl_stutype.Items[i].Selected = true;
                studtype = Convert.ToString(cbl_stutype.Items[i].Text);
            }
            if (cbl_stutype.Items.Count == 1)
            {
                txt_stutype.Text = "" + studtype + "";
            }
            else
            {
                txt_stutype.Text = "Type (" + (cbl_stutype.Items.Count) + ")";
            }
        }
        else
        {
            for (int i = 0; i < cbl_stutype.Items.Count; i++)
            {
                cbl_stutype.Items[i].Selected = false;
            }
            txt_stutype.Text = "--Select--";
        }

    }
    protected void cbl_stutype_SelectedIndexChanged(object sender, EventArgs e)
    {
        txt_stutype.Text = "--Select--";
        string studtype = "";
        cb_stutype.Checked = false;
        int commcount = 0;
        for (int i = 0; i < cbl_stutype.Items.Count; i++)
        {
            if (cbl_stutype.Items[i].Selected == true)
            {
                commcount = commcount + 1;
                studtype = Convert.ToString(cbl_stutype.Items[i].Text);
            }
        }
        if (commcount > 0)
        {
            if (commcount == cbl_stutype.Items.Count)
            {
                cb_stutype.Checked = true;
            }
            if (commcount == 1)
            {
                txt_stutype.Text = "" + studtype + "";
            }
            else
            {
                txt_stutype.Text = "Type(" + commcount.ToString() + ")";
            }
        }

    }
    public void loadstutype()
    {

        try
        {

            cbl_stutype.Items.Clear();

            string studtype = "";
            string deptquery = "select distinct Stud_Type from Registration where college_code in('" + collegecode1 + "') and Stud_Type is not null and Stud_Type<>''";
            ds.Clear();
            ds = d2.select_method_wo_parameter(deptquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_stutype.DataSource = ds;
                cbl_stutype.DataTextField = "Stud_Type";
                // cbl_stutype.DataValueField = "mode";
                cbl_stutype.DataBind();

                if (cbl_stutype.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_stutype.Items.Count; i++)
                    {
                        cbl_stutype.Items[i].Selected = true;
                        studtype = Convert.ToString(cbl_stutype.Items[i].Text);
                    }
                    if (cbl_stutype.Items.Count == 1)
                    {
                        txt_stutype.Text = "Type(" + studtype + ")";
                    }
                    else
                    {
                        txt_stutype.Text = "Type(" + cbl_stutype.Items.Count + ")";
                    }
                    cb_stutype.Checked = true;
                }
            }
            else
            {
                txt_stutype.Text = "--Select--";

            }
        }
        catch
        {
        }

    }
    protected void cb_sem_CheckedChanged(object sender, EventArgs e)
    {
        string sem = "";
        if (cb_sem.Checked == true)
        {
            for (int i = 0; i < cbl_sem.Items.Count; i++)
            {
                cbl_sem.Items[i].Selected = true;
                sem = Convert.ToString(cbl_sem.Items[i].Text);
            }
            if (lbl_sem.Text == "Semester")
            {
                if (cbl_sem.Items.Count == 1)
                {
                    txt_sem.Text = "" + sem + "";
                }
                else
                {
                    txt_sem.Text = "Sem(" + (cbl_sem.Items.Count) + ")";
                }
            }
            if (lbl_sem.Text == "Year")
            {
                if (cbl_sem.Items.Count == 1)
                {
                    txt_sem.Text = "" + sem + "";
                }
                else
                {
                    txt_sem.Text = "Year(" + (cbl_sem.Items.Count) + ")";
                }
            }
        }
        else
        {
            for (int i = 0; i < cbl_sem.Items.Count; i++)
            {
                cbl_sem.Items[i].Selected = false;
            }
            txt_sem.Text = "--Select--";
        }

    }
    protected void cbl_sem_SelectedIndexChanged(object sender, EventArgs e)
    {
        txt_sem.Text = "--Select--";
        cb_sem.Checked = false;
        string sem = "";
        int commcount = 0;
        for (int i = 0; i < cbl_sem.Items.Count; i++)
        {
            if (cbl_sem.Items[i].Selected == true)
            {
                commcount = commcount + 1;
                sem = Convert.ToString(cbl_sem.Items[i].Text);
            }
        }
        if (commcount > 0)
        {
            if (lbl_sem.Text == "Semester")
            {
                if (commcount == 1)
                {
                    txt_sem.Text = "" + sem + "";
                }
                else
                {
                    txt_sem.Text = "Sem(" + commcount.ToString() + ")";
                }
            }
            if (lbl_sem.Text == "Year")
            {
                if (commcount == 1)
                {
                    txt_sem.Text = "" + sem + "";
                }
                else
                {
                    txt_sem.Text = "Year(" + commcount.ToString() + ")";
                }
            }
            if (commcount == cbl_sem.Items.Count)
            {
                cb_sem.Checked = true;
            }
        }
    }


    protected void loadsem()
    {
        try
        {
            string featDegcode = Convert.ToString(getCblSelectedValue(cbl_dept));
            cbl_sem.Items.Clear();
            txt_sem.Text = "--Select--";
            cb_sem.Checked = false;
            ds.Clear();
            string linkName = string.Empty;
            string cbltext = string.Empty;
            d2.featDegreeCode = featDegcode;
            ds = d2.loadFeecategory(Convert.ToString(ddl_college.SelectedItem.Value), usercode, ref linkName);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                cbl_sem.DataSource = ds;
                cbl_sem.DataTextField = "TextVal";
                cbl_sem.DataValueField = "TextCode";
                cbl_sem.DataBind();

                if (cbl_sem.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_sem.Items.Count; i++)
                    {
                        cbl_sem.Items[i].Selected = true;
                        cbltext = Convert.ToString(cbl_sem.Items[i].Text);
                    }
                    if (cbl_sem.Items.Count == 1)
                        txt_sem.Text = "" + linkName + "(" + cbltext + ")";
                    else
                        txt_sem.Text = "" + linkName + "(" + cbl_sem.Items.Count + ")";
                    cb_sem.Checked = true;
                }
            }
        }
        catch { }
    }


    protected void cb_header_CheckedChanged(object sender, EventArgs e)
    {
        string headername = "";
        if (cb_header.Checked == true)
        {
            for (int i = 0; i < cbl_header.Items.Count; i++)
            {
                cbl_header.Items[i].Selected = true;
                headername = Convert.ToString(cbl_header.Items[i].Text);
            }
            if (cbl_header.Items.Count == 1)
            {
                txt_header.Text = "" + headername + "";
            }
            else
            {
                txt_header.Text = "Header (" + (cbl_header.Items.Count) + ")";
            }
            // txt_header.Text = "Header (" + (cbl_header.Items.Count) + ")";
        }
        else
        {
            for (int i = 0; i < cbl_header.Items.Count; i++)
            {
                cbl_header.Items[i].Selected = false;
            }
            txt_header.Text = "--Select--";
        }
        loadledger();
    }
    protected void cbl_header_SelectedIndexChanged(object sender, EventArgs e)
    {
        txt_header.Text = "--Select--";
        cb_header.Checked = false;
        string headername = "";
        int commcount = 0;
        for (int i = 0; i < cbl_header.Items.Count; i++)
        {
            if (cbl_header.Items[i].Selected == true)
            {
                commcount = commcount + 1;
                headername = Convert.ToString(cbl_header.Items[i].Text);
            }
        }
        if (commcount > 0)
        {
            // txt_header.Text = "Header(" + commcount.ToString() + ")";
            if (commcount == cbl_header.Items.Count)
            {
                cb_header.Checked = true;
            }
            if (commcount == 1)
            {
                txt_header.Text = "" + headername + "";
            }
            else
            {
                txt_header.Text = "Header (" + commcount.ToString() + ")";
            }
        }
        loadledger();
    }
    public void headerbind()
    {
        try
        {

            cbl_header.Items.Clear();

            //  string query = "select distinct HeaderName,HeaderPK from FM_HeaderMaster where CollegeCode='" + collegecode1 + "'";
            string query = " SELECT HeaderPK,HeaderName,hd_priority FROM FM_HeaderMaster H,FS_HeaderPrivilage P WHERE H.HeaderPK = P.HeaderFK AND P.CollegeCode = H.CollegeCode AND P. UserCode = " + usercode + " AND H.CollegeCode = " + collegecode1 + " order by len(isnull(hd_priority,10000)),hd_priority asc ";
            ds = d2.select_method_wo_parameter(query, "Text");

            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_header.DataSource = ds;
                cbl_header.DataTextField = "HeaderName";
                cbl_header.DataValueField = "HeaderPK";
                cbl_header.DataBind();


                if (cbl_header.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_header.Items.Count; i++)
                    {
                        cbl_header.Items[i].Selected = true;
                    }
                    txt_header.Text = "Header(" + cbl_header.Items.Count + ")";
                    cb_header.Checked = true;
                }
            }
            else
            {
                txt_header.Text = "--Select--";

            }
        }

        catch
        {
        }
    }
    protected void cb_ledger_CheckedChanged(object sender, EventArgs e)
    {
        string ledgername = "";
        if (cb_ledger.Checked == true)
        {
            for (int i = 0; i < cbl_ledger.Items.Count; i++)
            {
                cbl_ledger.Items[i].Selected = true;
                ledgername = Convert.ToString(cbl_ledger.Items[i].Text);
            }
            if (cbl_ledger.Items.Count == 1)
            {
                txt_ledger.Text = "" + ledgername + "";
            }
            else
            {
                txt_ledger.Text = "Ledger (" + (cbl_ledger.Items.Count) + ")";
            }
            // txt_ledger.Text = "Ledger(" + (cbl_ledger.Items.Count) + ")";
        }
        else
        {
            for (int i = 0; i < cbl_ledger.Items.Count; i++)
            {
                cbl_ledger.Items[i].Selected = false;
            }
            txt_ledger.Text = "--Select--";
        }

    }
    protected void cbl_ledger_SelectedIndexChanged(object sender, EventArgs e)
    {
        string ledgername = "";
        txt_ledger.Text = "--Select--";
        cb_ledger.Checked = false;
        int commcount = 0;
        for (int i = 0; i < cbl_ledger.Items.Count; i++)
        {
            if (cbl_ledger.Items[i].Selected == true)
            {
                commcount = commcount + 1;
                ledgername = Convert.ToString(cbl_ledger.Items[i].Text);
            }
        }
        if (commcount > 0)
        {
            //   txt_ledger.Text = "Ledger(" + commcount.ToString() + ")";
            if (commcount == cbl_ledger.Items.Count)
            {
                cb_ledger.Checked = true;
            }
            if (commcount == 1)
            {
                txt_ledger.Text = "" + ledgername + "";
            }
            else
            {
                txt_ledger.Text = "Ledger (" + commcount.ToString() + ")";
            }
        }

    }
    public void loadledger()
    {
        try
        {
            ds.Clear();
            cbl_ledger.Items.Clear();

            string itemheader = "";
            for (int i = 0; i < cbl_header.Items.Count; i++)
            {
                if (cbl_header.Items[i].Selected == true)
                {
                    if (itemheader == "")
                    {
                        itemheader = "" + cbl_header.Items[i].Value.ToString() + "";
                    }
                    else
                    {
                        itemheader = itemheader + "'" + "," + "" + "'" + cbl_header.Items[i].Value.ToString() + "";
                    }
                }
            }
            if (itemheader.Trim() != "")
            {
                // string deptquery = "select distinct LedgerName,LedgerPK from FM_LedgerMaster l,FM_HeaderMaster h where l.HeaderFK = h.HeaderPK and l.HeaderFK in('" + itemheader + "') and l.LedgerMode='0' and l.CollegeCode =" + collegecode1 + "";
                string deptquery = " SELECT LedgerPK,LedgerName FROM FM_LedgerMaster L,FS_LedgerPrivilage P WHERE L.LedgerPK = P.LedgerFK   AND P.CollegeCode = L.CollegeCode AND P. UserCode = " + usercode + " AND  Ledgermode='0' and L.CollegeCode = " + collegecode1 + "  and L.HeaderFK in('" + itemheader + "') order by len(isnull(l.priority,1000)) , l.priority asc ";
                ds.Clear();
                ds = d2.select_method_wo_parameter(deptquery, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cbl_ledger.DataSource = ds;
                    cbl_ledger.DataTextField = "LedgerName";
                    cbl_ledger.DataValueField = "LedgerPK";
                    cbl_ledger.DataBind();
                    if (cbl_ledger.Items.Count > 0)
                    {
                        for (int i = 0; i < cbl_ledger.Items.Count; i++)
                        {
                            cbl_ledger.Items[i].Selected = true;
                        }
                        txt_ledger.Text = "Ledger(" + cbl_ledger.Items.Count + ")";
                        cb_ledger.Checked = true;
                    }
                }
                else
                {
                    txt_ledger.Text = "--Select--";
                    cb_ledger.Checked = false;
                }
            }
            else
            {
                txt_ledger.Text = "--Select--";
                cb_ledger.Checked = false;
            }
        }
        catch
        {
        }
    }
    protected void btn_plus_detre_Click(object sender, EventArgs e)
    {
        plusdiv.Visible = true;
        panel_addreason.Visible = true;
        lbl_addreason.Text = "Add Reason";
        lblerror.Visible = false;
    }
    protected void bindaddreason()
    {
        try
        {
            ddl_detre.Items.Clear();
            ds.Clear();
            string sql = "select TextCode,TextVal from TextValTable where TextCriteria ='DedRe' and college_code ='" + collegecode1 + "'";
            ds = d2.select_method_wo_parameter(sql, "TEXT");
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddl_detre.DataSource = ds;
                ddl_detre.DataTextField = "TextVal";
                ddl_detre.DataValueField = "TextCode";
                ddl_detre.DataBind();
                ddl_detre.Items.Insert(0, new ListItem("Select", "0"));
            }
            else
            {
                ddl_detre.Items.Insert(0, new ListItem("Select", "0"));
            }
        }
        catch
        { }
    }
    protected void btn_minus_detre_Click(object sender, EventArgs e)
    {
        try
        {
            imgDiv1.Visible = true;
            lblconfirm.Visible = true;
            lblconfirm.Text = "Do you want to delete this Record?";
        }
        catch { }
    }
    protected void btnyes_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddl_detre.SelectedIndex != 0)
            {
                string sql = "delete from TextValTable where TextCode='" + ddl_detre.SelectedItem.Value.ToString() + "' and TextCriteria='DedRe' and college_code='" + collegecode1 + "' ";
                int delete = d2.update_method_wo_parameter(sql, "Text");
                if (delete != 0)
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "Deleted Successfully";
                    imgDiv1.Visible = false;
                    lblconfirm.Visible = false;
                }
                else
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Text = "No Record Selected";
                    imgDiv1.Visible = false;
                    lblconfirm.Visible = false;
                }
            }
            else
            {
                alertpopwindow.Visible = true;
                lblalerterr.Text = "No Record Selected";
                imgDiv1.Visible = false;
                lblconfirm.Visible = false;
            }
            bindaddreason();
        }
        catch
        {

        }
    }
    protected void btnno_Click(object sender, EventArgs e)
    {
        imgDiv1.Visible = false;
        lblconfirm.Visible = false;
    }
    protected void btnerrclose_Click(object sender, EventArgs e)
    {
        alertpopwindow.Visible = false;
    }
    protected void btn_addreason_Click(object sender, EventArgs e)
    {
        try
        {
            if (lbl_addreason.Text == "Add Reason")
            {
                if (txt_addreason.Text != "")
                {
                    string sql = "if exists ( select * from TextValTable where TextVal ='" + txt_addreason.Text + "' and TextCriteria ='DedRe' and college_code ='" + collegecode1 + "') update TextValTable set TextVal ='" + txt_addreason.Text + "' where TextVal ='" + txt_addreason.Text + "' and TextCriteria ='DedRe' and college_code ='" + collegecode1 + "' else insert into TextValTable (TextVal,TextCriteria,college_code) values ('" + txt_addreason.Text + "','DedRe','" + collegecode1 + "')";
                    int insert = d2.update_method_wo_parameter(sql, "Text");
                    if (insert != 0)
                    {
                        alertpopwindow.Visible = true;
                        lblalerterr.Text = "Saved Successfully";
                        txt_addreason.Text = "";
                        plusdiv.Visible = false;
                        panel_addreason.Visible = false;
                    }
                    bindaddreason();
                    txt_addreason.Text = "";
                }
                else
                {
                    //alertpopwindow.Visible = true;
                    plusdiv.Visible = true;
                    lblerror.Visible = true;
                    lblerror.Text = "Enter the Reason";
                }
            }
        }
        catch
        {
        }

    }
    public void cblcolumnorder_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            CheckBox_column.Checked = false;
            string value = "";
            int index;
            cblcolumnorder.Items[0].Selected = true;
            // cblcolumnorder.Items[0].Enabled = false;
            value = string.Empty;
            string result = Request.Form["__EVENTTARGET"];
            string[] checkedBox = result.Split('$');
            index = int.Parse(checkedBox[checkedBox.Length - 1]);
            string sindex = Convert.ToString(index);
            if (cblcolumnorder.Items[index].Selected)
            {
                if (!Itemindex.Contains(sindex))
                {
                    //if (tborder.Text == "")
                    //{
                    //    ItemList.Add("Company Code");
                    //}
                    //ItemList.Add("Admission No");
                    //ItemList.Add("Name");
                    // if (cblcolumnorder.Items[index].Text.ToString().Trim().ToLower() == "scholarship")


                    ItemList.Add(cblcolumnorder.Items[index].Text.ToString());
                    Itemindex.Add(sindex);
                }
            }
            else
            {
                ItemList.Remove(cblcolumnorder.Items[index].Text.ToString());
                Itemindex.Remove(sindex);
            }
            for (int i = 0; i < cblcolumnorder.Items.Count; i++)
            {
                //if (i == 0 || i == 1 || i == 2)
                //{
                //    cblcolumnorder.Items[0].Selected = true;
                //    cblcolumnorder.Items[1].Selected = true;
                //    cblcolumnorder.Items[2].Selected = true;
                //}
                if (cblcolumnorder.Items[i].Selected == false)
                {
                    sindex = Convert.ToString(i);
                    ItemList.Remove(cblcolumnorder.Items[i].Text.ToString());
                    Itemindex.Remove(sindex);
                }
            }

            lnk_columnorder.Visible = true;
            tborder.Visible = false;
            tborder.Text = "";
            string colname12 = "";
            for (int i = 0; i < ItemList.Count; i++)
            {
                if (colname12 == "")
                {
                    colname12 = ItemList[i].ToString() + "(" + (i + 1).ToString() + ")";
                }
                else
                {
                    colname12 = colname12 + "," + ItemList[i].ToString() + "(" + (i + 1).ToString() + ")";
                }
                //tborder.Text = tborder.Text + ItemList[i].ToString();

                //tborder.Text = tborder.Text + "(" + (i + 1).ToString() + ")  ";

            }
            tborder.Text = colname12;
            if (ItemList.Count == 14)
            {
                CheckBox_column.Checked = true;
            }
            if (ItemList.Count == 0)
            {
                tborder.Visible = false;
                lnk_columnorder.Visible = false;
            }
            tborder.Visible = false;
            //  Button2.Focus();
        }
        catch (Exception ex)
        {

        }
    }
    public void CheckBox_column_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (CheckBox_column.Checked == true)
            {
                tborder.Text = "";
                ItemList.Clear();
                for (int i = 0; i < cblcolumnorder.Items.Count; i++)
                {
                    string si = Convert.ToString(i);
                    cblcolumnorder.Items[i].Selected = true;
                    lnk_columnorder.Visible = true;
                    ItemList.Add(cblcolumnorder.Items[i].Text.ToString());
                    Itemindex.Add(si);
                }
                lnk_columnorder.Visible = true;
                tborder.Visible = true;
                tborder.Text = "";
                int j = 0;
                string colname12 = "";
                for (int i = 0; i < ItemList.Count; i++)
                {
                    j = j + 1;
                    if (colname12 == "")
                    {
                        colname12 = ItemList[i].ToString() + "(" + (j).ToString() + ")";

                    }
                    else
                    {
                        colname12 = colname12 + "," + ItemList[i].ToString() + "(" + (j).ToString() + ")";
                    }
                    // tborder.Text = tborder.Text + ItemList[i].ToString();



                }
                tborder.Text = colname12;

            }
            else
            {
                for (int i = 0; i < cblcolumnorder.Items.Count; i++)
                {
                    cblcolumnorder.Items[i].Selected = false;
                    lnk_columnorder.Visible = false;
                    ItemList.Clear();
                    Itemindex.Clear();
                    //cblcolumnorder.Items[0].Selected = true;
                }

                tborder.Text = "";
                tborder.Visible = false;

            }
            tborder.Visible = false;
            //  Button2.Focus();
        }
        catch (Exception ex)
        {

        }
    }
    public void LinkButtonsremove_Click(object sender, EventArgs e)
    {
        try
        {
            cblcolumnorder.ClearSelection();
            CheckBox_column.Checked = false;
            lnk_columnorder.Visible = false;
            //cblcolumnorder.Items[0].Selected = true;
            ItemList.Clear();
            Itemindex.Clear();
            tborder.Text = "";
            tborder.Visible = false;
            //Button2.Focus();
        }
        catch (Exception ex)
        {
        }
    }
    public string newvalue(int index)
    {
        string valu = "";
        if (index == 4)
        {
            valu = "D";
        }
        return valu;
    }
    public static string getcolidx(int index)
    {
        int quotient = (index) / 26;

        if (quotient > 0)
        {
            return getcolidx(quotient - 1) + (char)((index % 26) + 65);
        }
        else
        {
            return "" + (char)((index % 26) + 65);
        }
    }
    public string getidx(int value)
    {
        columnname = getcolidx(value);
        return columnname;
    }
    protected void FpSpreadstud_Command(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        try
        {
            string actrow = FpSpreadstud.Sheets[0].ActiveRow.ToString();
            string actcol = FpSpreadstud.Sheets[0].ActiveColumn.ToString();
            if (actrow.Trim() == "0" && actcol.Trim() == "1")
            {
                if (FpSpreadstud.Sheets[0].RowCount > 0)
                {
                    int checkval = Convert.ToInt32(FpSpreadstud.Sheets[0].Cells[0, 1].Value);
                    if (checkval == 0)
                    {
                        for (int i = 1; i < FpSpreadstud.Sheets[0].RowCount; i++)
                        {
                            FpSpreadstud.Sheets[0].Cells[i, 1].Value = 1;
                        }
                    }
                    if (checkval == 1)
                    {
                        for (int i = 1; i < FpSpreadstud.Sheets[0].RowCount; i++)
                        {
                            FpSpreadstud.Sheets[0].Cells[i, 1].Value = 0;
                        }
                    }
                }
            }
        }
        catch { }
    }

    protected void btnok1_Click(object sender, EventArgs e)
    {
        loadstuenddetails();
    }
    protected void btnexitstud_Click(object sender, EventArgs e)
    {
        //popper1.Visible = false;
        lnkview.Text = "View Details";
        FpSpreadstud.Visible = false;
        divview.Visible = false;
        Div3.Visible = false;
        lblerr1.Visible = false;
        FpSpread1.Width = 1000;
    }


    public void loadstuenddetails()
    {
        try
        {
            // loadcolumns();
            FpSpread1.SaveChanges();
            // FpSpreadstud.SaveChanges();
            DataView dvnew = new DataView();
            DataView dv1 = new DataView();
            int i;
            int col;
            string startdate = "";
            string duedate = "";
            string day1 = "";
            string mon1 = "";
            string year1 = "";
            string day2 = "";
            string mon2 = "";
            string year2 = "";
            string feecategory = "";
            string header = "";
            string ledger = "";
            string[] split;
            //Grandtotal.Clear();
            //ledgertotal.Clear();
            //headertotal.Clear();
            int colindex;
            int dedindex;
            int coltotindex;
            int refindex;
            int frmindex;
            int fineindex;

            string[] dtday = new string[31];
            for (int id = 1; id <= 31; id++)
            {
                if (id.ToString().Length == 1)
                {
                    dtday[id - 1] = "0" + Convert.ToString(id);
                }
                else
                {
                    dtday[id - 1] = Convert.ToString(id);
                }
            }
            string[] dtmon = new string[12] { "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12" };
            string[] droparray = new string[2];
            string[] droparray1 = new string[ddl_detre.Items.Count];
            string[] droparray2 = new string[ddl_detre.Items.Count];
            droparray[0] = "Regular";
            droparray[1] = "Monthwise";
            string[] loadyear = new string[10];

            DateTime currdt = DateTime.Now;
            int curryear = currdt.Year;

            for (int ij = 0; ij < 10; ij++)
            {
                loadyear[ij] = Convert.ToString(curryear - ij);
            }


            if (ddl_detre.Items.Count > 0)
            {
                for (int re = 0; re < ddl_detre.Items.Count; re++)
                {
                    if (re == 0)
                    {
                        droparray1[re] = "Select";
                    }
                    else
                    {
                        droparray1[re] = Convert.ToString(ddl_detre.Items[re].Text);
                    }
                }
            }

            if (ddl_detre.Items.Count > 0)
            {
                for (int re = 0; re < ddl_detre.Items.Count; re++)
                {
                    if (re == 0)
                    {
                        droparray2[re] = " ";
                    }
                    else
                    {
                        droparray2[re] = Convert.ToString(ddl_detre.Items[re].Value);
                    }
                }
            }

            //if (ddlyear1.Items.Count > 0)
            //{
            //    for (int yr = 0; yr < ddlyear1.Items.Count; yr++)
            //    {
            //        loadyear[yr] = Convert.ToString(ddlyear1.Items[yr].Text);
            //    }
            //}
            feecategory = GetSelectedItemsValueAsString(cbl_sem);

            ledger = GetSelectedItemsValueAsString(cbl_ledger);

            header = GetSelectedItemsValueAsString(cbl_header);


            FarPoint.Web.Spread.ComboBoxCellType cb = new FarPoint.Web.Spread.ComboBoxCellType(droparray);
            cb.UseValue = true;
            cb.AutoPostBack = true;
            cb.ShowButton = true;

            FarPoint.Web.Spread.ComboBoxCellType cb1 = new FarPoint.Web.Spread.ComboBoxCellType(droparray1, droparray2);
            //string sql = "select TextCode,TextVal from TextValTable where TextCriteria ='DedRe' and college_code ='" + collegecode1 + "'";
            //ds.Clear();
            //ds = d2.select_method_wo_parameter(sql, "TEXT");
            //if (ds.Tables.Count > 0)
            //{
            //    if (ds.Tables[0].Rows.Count > 0)
            //    {
            //        cb1.DataSource = ds;
            //        cb1.DataTextField = "TextVal";
            //        cb1.DataValueField = "TextCode";
            //    }
            //}
            cb1.UseValue = true;
            cb1.ShowButton = true;

            FarPoint.Web.Spread.ComboBoxCellType cbcomday = new FarPoint.Web.Spread.ComboBoxCellType(dtday);
            cbcomday.UseValue = true;
            cbcomday.ShowButton = true;
            cbcomday.AutoPostBack = true;

            FarPoint.Web.Spread.ComboBoxCellType cbcommon = new FarPoint.Web.Spread.ComboBoxCellType(dtmon);
            cbcommon.UseValue = true;
            cbcommon.ShowButton = true;
            cbcommon.AutoPostBack = true;

            FarPoint.Web.Spread.ComboBoxCellType cbcomyear = new FarPoint.Web.Spread.ComboBoxCellType(loadyear);
            cbcomyear.UseValue = true;
            cbcomyear.ShowButton = true;
            cbcomyear.AutoPostBack = true;

            FarPoint.Web.Spread.ComboBoxCellType cbday1 = new FarPoint.Web.Spread.ComboBoxCellType(dtday);
            cbday1.UseValue = true;
            cbday1.ShowButton = true;

            FarPoint.Web.Spread.ComboBoxCellType cbmon1 = new FarPoint.Web.Spread.ComboBoxCellType(dtmon);
            cbmon1.UseValue = true;
            cbmon1.ShowButton = true;

            FarPoint.Web.Spread.ComboBoxCellType cbyear1 = new FarPoint.Web.Spread.ComboBoxCellType(loadyear);
            cbyear1.UseValue = true;
            cbyear1.ShowButton = true;

            FarPoint.Web.Spread.ComboBoxCellType cbday2 = new FarPoint.Web.Spread.ComboBoxCellType(dtday);
            cbday2.UseValue = true;
            cbday2.ShowButton = true;

            FarPoint.Web.Spread.ComboBoxCellType cbmon2 = new FarPoint.Web.Spread.ComboBoxCellType(dtmon);
            cbmon2.UseValue = true;
            cbmon2.ShowButton = true;

            FarPoint.Web.Spread.ComboBoxCellType cbyear2 = new FarPoint.Web.Spread.ComboBoxCellType(loadyear);
            cbyear2.UseValue = true;
            cbyear2.ShowButton = true;

            string[] schlType = { " ", "Type" };
            FarPoint.Web.Spread.ComboBoxCellType cbSchType = new FarPoint.Web.Spread.ComboBoxCellType(schlType);
            cbSchType.UseValue = true;
            cbSchType.ShowButton = true;
            cbSchType.AutoPostBack = true;

            FarPoint.Web.Spread.DoubleCellType doubl = new FarPoint.Web.Spread.DoubleCellType();
            doubl.ErrorMessage = "Allow Numerics";

            Hashtable hatnew = new Hashtable();
            hatnew = (Hashtable)ViewState["colcountnew"];
            Hashtable hathsgetcol = (Hashtable)ViewState["hsgetcol"];

            // FpSpreadstud.Visible = false;
            FpSpread1.Visible = true;
            //popper1.Visible = false;

            Hashtable tothash = new Hashtable();
            Hashtable dedhash = new Hashtable();
            Hashtable coltothash = new Hashtable();
            Hashtable refhash = new Hashtable();
            Hashtable frmhash = new Hashtable();
            Hashtable finehash = new Hashtable();

            Hashtable Grandtothash = new Hashtable();
            Hashtable Granddedhash = new Hashtable();
            Hashtable Grandcoltothash = new Hashtable();
            Hashtable Grandrefhash = new Hashtable();
            Hashtable Grandfrmhash = new Hashtable();
            Hashtable Grandfinehash = new Hashtable();


            double totgrand = 0;
            double dedgrand = 0;
            double grandtot = 0;
            double refundtot = 0;
            double frmgovttot = 0;
            double finetotal = 0;
            double divheight = 0;

            FpSpread1.Sheets[0].RowCount = 0;

            string actrow = FpSpreadstud.ActiveSheetView.ActiveRow.ToString();
            string actcol = FpSpreadstud.ActiveSheetView.ActiveColumn.ToString();
            string app_no = "";
            int appnew_no = 0;

            FpSpreadstud.SaveChanges();
            int cellchkcount = 0;
            //if (Convert.ToInt32(actrow) > 0 || actrow.Trim() != "-1" || actrow.Trim() != "")
            //{
            if (txt_roll.Text.Trim() != "")
            {
                string selq = "";
                lnkview.Visible = false;
                // string selq = "select App_No from Registration where Reg_No='" + txt_roll.Text.Trim() + "' and college_code='" + collegecode1 + "'";
                //app_no = d2.GetFunction(selq);
                if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 0)
                {
                    app_no = d2.GetFunction(" select App_No from Registration where Roll_No='" + txt_roll.Text.Trim() + "' and college_code='" + collegecode1 + "'");
                }
                if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 1)
                {
                    app_no = d2.GetFunction(" select App_No from Registration where reg_no='" + txt_roll.Text.Trim() + "' and college_code='" + collegecode1 + "'");
                }
                if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 2)
                {
                    app_no = d2.GetFunction(" select App_No from Registration where Roll_admit='" + txt_roll.Text.Trim() + "' and college_code='" + collegecode1 + "'");
                }
                if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 3)
                {
                    app_no = d2.GetFunction(" select app_no from applyn where app_formno='" + txt_roll.Text.Trim() + "' and college_code='" + collegecode1 + "'");
                }

            }
            else
            {
                lnkview.Visible = true;
                //   string studappno = "";
                List<string> studappno = new List<string>();
                for (int no = 0; no < FpSpreadstud.Sheets[0].RowCount; no++)
                {
                    if (no == 0)
                        continue;
                    //if (no != 1)
                    //    continue;
                    int checkno = Convert.ToInt32(FpSpreadstud.Sheets[0].Cells[no, 1].Value);
                    if (checkno == 1)
                    {
                        cellchkcount++;
                        if (app_no.Trim() == "")
                        {
                            app_no = Convert.ToString(FpSpreadstud.Sheets[0].Cells[no, 2].Tag);
                            studappno.Add(Convert.ToString(FpSpreadstud.Sheets[0].Cells[no, 2].Tag));
                        }
                        else
                        {
                            studappno.Add(Convert.ToString(FpSpreadstud.Sheets[0].Cells[no, 2].Tag));
                            // app_no = app_no + "'" + "," + "'" + Convert.ToString(FpSpreadstud.Sheets[0].Cells[no, 2].Tag);
                        }
                    }
                }
                if (cellchkcount == 0)
                {
                    alertpopwindow.Visible = true;
                    lblalerterr.Visible = true;
                    lblalerterr.Text = "Please select any one student!";
                    FpSpreadstud.Visible = true;
                }
                if (studappno != null)
                    ViewState["appnolist"] = studappno;
            }

            if (app_no.Trim() == "")
            {
                app_no = "0";
            }
            string selquery = "";
            string strFinYrFK = string.Empty;
            if (checkSchoolSetting() == 0)
                strFinYrFK = " and finyearfk='" + ddlfinyear.SelectedValue + "'";
            //header
            string rghtval = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Show All Ledger' and user_code='" + usercode + "'");
            if (rghtval == "0")
            {
                selquery = "select distinct isnull(l.priority,1000), headerpk,headername,ledgerpk,ledgername from FM_HeaderMaster m,FM_LedgerMaster l,FT_FeeAllot F where m.HeaderPK = l.HeaderFK and f.LedgerFK =l.LedgerPK and l.HeaderFK =f.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure')  and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "') and f.App_No ='" + app_no + "' and isnull(istransfer,'0')='0' and f.FeeCategory in('" + feecategory + "') order by isnull(l.priority,1000)";

                selquery = selquery + "select HeaderPK,HeaderName,LedgerPK,LedgerName,LedgerFK,f.HeaderFK,AllotDate,FeeCategory,PayMode,FeeAmount,FeeAmountMonthly,DeductAmout,DeductReason,TotalAmount,RefundAmount,FromGovtAmt,convert(varchar(10),DueDate,103) as DueDate,FineAmount,convert(varchar(10),PayStartDate,103) as  PayStartDate,f.FeeAllotPK,DeductAmount1,DeductReason1,DeductAmount2,DeductReason2,DeductAmount3,DeductReason3,balamount,paidamount from FM_HeaderMaster m,FM_LedgerMaster l,FT_FeeAllot f where m.HeaderPK = l.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure') and m.HeaderPK=f.HeaderFK and l.LedgerPK=f.LedgerFK and App_No ='" + app_no + "' and isnull(istransfer,'0')='0' and f.FeeCategory in('" + feecategory + "') and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "') " + strFinYrFK + " order by len(isnull(l.priority,1000)) , l.priority asc ";

                selquery = selquery + " select distinct m.headerpk,m.headername from FM_HeaderMaster m,FT_FeeAllot F where f.HeaderFK=m.headerPK and HeaderpK in('" + header + "') and LedgerfK in('" + ledger + "') and f.App_No ='" + app_no + "' and isnull(istransfer,'0')='0' and f.FeeCategory in('" + feecategory + "')";
            }
            else
            {
                // selquery = "select distinct headerpk,headername,ledgerpk,ledgername from FM_HeaderMaster m,FM_LedgerMaster l,FT_FeeAllot F where m.HeaderPK = l.HeaderFK and f.LedgerFK =l.LedgerPK and l.HeaderFK =f.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure')  and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "') and f.App_No ='" + app_no + "'";
                //   and f.App_No ='" + app_no + "'
                selquery = "select distinct isnull(l.priority,1000), headerpk,headername,ledgerpk,ledgername from FM_HeaderMaster m,FM_LedgerMaster l where m.HeaderPK = l.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure')  and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "') order by isnull(l.priority,1000)";

                selquery = selquery + "select HeaderPK,HeaderName,LedgerPK,LedgerName,LedgerFK,f.HeaderFK,AllotDate,FeeCategory,PayMode,FeeAmount,FeeAmountMonthly,DeductAmout,DeductReason,TotalAmount,RefundAmount,FromGovtAmt,convert(varchar(10),DueDate,103) as DueDate,FineAmount,convert(varchar(10),PayStartDate,103) as  PayStartDate,f.FeeAllotPK,DeductAmount1,DeductReason1,DeductAmount2,DeductReason2,DeductAmount3,DeductReason3,balamount,paidamount from FM_HeaderMaster m,FM_LedgerMaster l,FT_FeeAllot f where m.HeaderPK = l.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure') and m.HeaderPK=f.HeaderFK and l.LedgerPK=f.LedgerFK and App_No in('" + app_no + "') and isnull(istransfer,'0')='0' and f.FeeCategory in('" + feecategory + "') and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "') " + strFinYrFK + " order by len(isnull(l.priority,1000)) , l.priority asc ";

                selquery = selquery + " select distinct headerpk,headername from FM_HeaderMaster m,FM_LedgerMaster l where m.HeaderPK = l.HeaderFK and LedgerName not in ('cash','Income & Expenditure','Income','Expenditure')  and HeaderpK in('" + header + "') and LedgerpK in('" + ledger + "') ";
                //selquery = selquery + " select distinct m.headerpk,m.headername from FM_HeaderMaster m,FT_FeeAllot F where f.HeaderFK=m.headerPK and HeaderpK in('" + header + "') and LedgerfK in('" + ledger + "') and f.App_No ='" + app_no + "'";

            }
            ds.Clear();
            ds = d2.select_method_wo_parameter(selquery, "Text");

            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0 && ds.Tables[2].Rows.Count > 0)
                {
                    int sno = 0;
                    for (int ik = 0; ik < ds.Tables[2].Rows.Count; ik++)
                    {
                        tothash.Clear();
                        dedhash.Clear();
                        coltothash.Clear();
                        refhash.Clear();
                        frmhash.Clear();
                        finehash.Clear();

                        double total = 0;
                        double dedtot = 0;
                        double coltot = 0;
                        double reftot = 0;
                        double frmtot = 0;
                        double finetot = 0;
                        FpSpread1.Sheets[0].RowCount++;
                        divheight += 25;
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(ds.Tables[2].Rows[ik]["HeaderName"]);
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Note = Convert.ToString(app_no);
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);
                        if (ik == 0)
                        {
                            if (hathsgetcol.Count > 0)
                            {
                                foreach (DictionaryEntry p in hathsgetcol)
                                {
                                    int indexvaluenew = Convert.ToInt32(p.Value);
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, indexvaluenew].CellType = cbcomday;
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, indexvaluenew + 1].CellType = cbcommon;
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, indexvaluenew + 2].CellType = cbcomyear;
                                }
                            }
                        }

                        ds.Tables[0].DefaultView.RowFilter = "HeaderPK='" + Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"]) + "'";
                        dvnew = ds.Tables[0].DefaultView;
                        for (i = 0; i < dvnew.Count; i++)
                        {
                            FpSpread1.Sheets[0].RowCount++;
                            divheight += 25;
                            sno++;
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(sno);
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Tag = Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"]);
                            //  FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Note = Convert.ToString(ds.Tables[2].Rows[ik]["app_no"]);
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;

                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = Convert.ToString(dvnew[i]["LedgerName"]);
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Tag = Convert.ToString(dvnew[i]["LedgerPK"]);
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Left;
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                            for (int cn = 0; cn < cbl_sem.Items.Count; cn++)
                            {
                                col = 1;
                                if (cbl_sem.Items[cn].Selected == true)
                                {
                                    col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    //dt = dv.ToTable();
                                    //dt1 = dv1.ToTable();
                                    //dv1 = new DataView(dt1);
                                    ds.Tables[1].DefaultView.RowFilter = "FeeCategory='" + cbl_sem.Items[cn].Value + "' and HeaderFK ='" + Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"]) + "' and LedgerFK='" + Convert.ToString(dvnew[i]["LedgerPK"]) + "'";
                                    dv1 = ds.Tables[1].DefaultView;

                                    if (dv1.Count > 0)
                                    {
                                        double govTotSingleStud = 0;
                                        DataTable dtGvtTable = new DataTable();
                                        if (txt_roll.Text.Trim() != "")
                                        {
                                            string fromgvtTotQ = "select sum(isnull(TotalAmount,0)) as FromGovtAmt from FT_FinScholarship where LedgerFK=" + Convert.ToString(dvnew[i]["LedgerPK"]) + " and Headerfk=" + Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"]) + " and CollegeCode=" + collegecode1 + " and Feecategory=" + cbl_sem.Items[cn].Value + " and App_no=" + app_no + "";
                                            double.TryParse(d2.GetFunction(fromgvtTotQ).Trim(), out govTotSingleStud);
                                            DataSet dsNew = new DataSet();
                                            dsNew = d2.select_method_wo_parameter("select Convert(varchar(10),ReasonCode)+':'+Convert(varchar(10),TotalAmount) as schl from FT_FinScholarship where LedgerFK=" + Convert.ToString(dvnew[i]["LedgerPK"]) + " and Headerfk=" + Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"]) + " and CollegeCode=" + collegecode1 + " and Feecategory=" + cbl_sem.Items[cn].Value + " and App_no=" + app_no + "", "Text");
                                            if (dsNew.Tables.Count > 0)
                                            {
                                                dtGvtTable = dsNew.Tables[0];
                                            }
                                        }

                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb;
                                        if (Convert.ToString(dv1[0]["PayMode"]) == "1")
                                        {
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = "Regular";
                                        }
                                        if (Convert.ToString(dv1[0]["PayMode"]) == "2")
                                        {
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = "Monthwise";
                                            //Int64 feeallopk = Convert.ToInt64(Convert.ToString(dv1[0]["feeallotpk"]));
                                        }
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag = Convert.ToString(dv1[0]["LedgerFK"]);
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["FeeAmount"]);
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag = Convert.ToString(dv1[0]["FeeAmountMonthly"]);
                                        if (Convert.ToString(dv1[0]["FeeAmount"]).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(dv1[0]["FeeAmount"]);
                                            if (tothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                total = Convert.ToInt32(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                total += getvalue;
                                                tothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                tothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(total));
                                            }
                                            else
                                            {
                                                tothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }
                                        totgrand += total;
                                        //total += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                        //if (tothash.ContainsKey(colindex))
                                        //{
                                        //    tothash.Remove(colindex);
                                        //}
                                        //tothash.Add(colindex, Convert.ToString(total));

                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                        if (Convert.ToString(dv1[0]["balamount"]).Trim() == "0.00" || Convert.ToString(dv1[0]["paidamount"]).Trim() != "0.00")
                                        {
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = Color.Red;
                                        }
                                        if (Convert.ToString(dv1[0]["PayMode"]) == "1")
                                        {
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Locked = false;
                                        }
                                        if (Convert.ToString(dv1[0]["PayMode"]) == "2")
                                        {
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Locked = true;
                                        }

                                        #region Added by saranya on 21/03/2018 for Multiple concession
                                        int noOfConcession = 0;
                                        noOfConcession = Convert.ToInt32(txtNoConcession.Text);
                                        if (noOfConcession == 0 || noOfConcession == 1)
                                        {

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductAmout"]);
                                            if (Convert.ToString(dv1[0]["DeductAmout"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["DeductAmout"]);
                                                if (dedhash.ContainsKey(col))
                                                {
                                                    dedtot = Convert.ToInt32(dedhash[col]);
                                                    dedtot += getvalue;
                                                    dedhash.Remove(col);
                                                    dedhash.Add(col, Convert.ToString(dedtot));
                                                }
                                                else
                                                {
                                                    dedhash.Add(col, Convert.ToString(getvalue));
                                                }
                                            }
                                            dedgrand += dedtot;
                                            //dedtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (dedhash.ContainsKey(dedindex))
                                            //{
                                            //    dedhash.Remove(dedindex);
                                            //}
                                            //dedhash.Add(dedindex, Convert.ToString(dedtot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Value = Convert.ToString(dv1[0]["DeductReason"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                        }
                                        if (noOfConcession == 2)
                                        {
                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductAmount1"]);
                                            if (Convert.ToString(dv1[0]["DeductAmount1"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["DeductAmount1"]);
                                                if (dedhash.ContainsKey(col))
                                                {
                                                    dedtot = Convert.ToInt32(dedhash[col]);
                                                    dedtot += getvalue;
                                                    dedhash.Remove(col);
                                                    dedhash.Add(col, Convert.ToString(dedtot));
                                                }
                                                else
                                                {
                                                    dedhash.Add(col, Convert.ToString(getvalue));
                                                }
                                            }
                                            dedgrand += dedtot;
                                            //dedtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (dedhash.ContainsKey(dedindex))
                                            //{
                                            //    dedhash.Remove(dedindex);
                                            //}
                                            //dedhash.Add(dedindex, Convert.ToString(dedtot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Value = Convert.ToString(dv1[0]["DeductReason1"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductAmount2"]);
                                            if (Convert.ToString(dv1[0]["DeductAmount2"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["DeductAmount2"]);
                                                if (dedhash.ContainsKey(col))
                                                {
                                                    dedtot = Convert.ToInt32(dedhash[col]);
                                                    dedtot += getvalue;
                                                    dedhash.Remove(col);
                                                    dedhash.Add(col, Convert.ToString(dedtot));
                                                }
                                                else
                                                {
                                                    dedhash.Add(col, Convert.ToString(getvalue));
                                                }
                                            }
                                            dedgrand += dedtot;
                                            //dedtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (dedhash.ContainsKey(dedindex))
                                            //{
                                            //    dedhash.Remove(dedindex);
                                            //}
                                            //dedhash.Add(dedindex, Convert.ToString(dedtot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Value = Convert.ToString(dv1[0]["DeductReason2"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductAmout"]);
                                            if (Convert.ToString(dv1[0]["DeductAmout"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["DeductAmout"]);
                                                if (dedhash.ContainsKey(col))
                                                {
                                                    dedtot = Convert.ToInt32(dedhash[col]);
                                                    dedtot += getvalue;
                                                    dedhash.Remove(col);
                                                    dedhash.Add(col, Convert.ToString(dedtot));
                                                }
                                                else
                                                {
                                                    dedhash.Add(col, Convert.ToString(getvalue));
                                                }
                                            }
                                            dedgrand += dedtot;
                                            //dedtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (dedhash.ContainsKey(dedindex))
                                            //{
                                            //    dedhash.Remove(dedindex);
                                            //}
                                            //dedhash.Add(dedindex, Convert.ToString(dedtot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";

                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Value = Convert.ToString(dv1[0]["DeductReason"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                        }
                                        if (noOfConcession == 3)
                                        {
                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductAmount1"]);
                                            if (Convert.ToString(dv1[0]["DeductAmount1"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["DeductAmount1"]);
                                                if (dedhash.ContainsKey(col))
                                                {
                                                    dedtot = Convert.ToInt32(dedhash[col]);
                                                    dedtot += getvalue;
                                                    dedhash.Remove(col);
                                                    dedhash.Add(col, Convert.ToString(dedtot));
                                                }
                                                else
                                                {
                                                    dedhash.Add(col, Convert.ToString(getvalue));
                                                }
                                            }
                                            dedgrand += dedtot;
                                            //dedtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (dedhash.ContainsKey(dedindex))
                                            //{
                                            //    dedhash.Remove(dedindex);
                                            //}
                                            //dedhash.Add(dedindex, Convert.ToString(dedtot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Value = Convert.ToString(dv1[0]["DeductReason1"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductAmount2"]);
                                            if (Convert.ToString(dv1[0]["DeductAmount2"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["DeductAmount2"]);
                                                if (dedhash.ContainsKey(col))
                                                {
                                                    dedtot = Convert.ToInt32(dedhash[col]);
                                                    dedtot += getvalue;
                                                    dedhash.Remove(col);
                                                    dedhash.Add(col, Convert.ToString(dedtot));
                                                }
                                                else
                                                {
                                                    dedhash.Add(col, Convert.ToString(getvalue));
                                                }
                                            }
                                            dedgrand += dedtot;
                                            //dedtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (dedhash.ContainsKey(dedindex))
                                            //{
                                            //    dedhash.Remove(dedindex);
                                            //}
                                            //dedhash.Add(dedindex, Convert.ToString(dedtot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Value = Convert.ToString(dv1[0]["DeductReason2"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductAmount3"]);
                                            if (Convert.ToString(dv1[0]["DeductAmount3"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["DeductAmount3"]);
                                                if (dedhash.ContainsKey(col))
                                                {
                                                    dedtot = Convert.ToInt32(dedhash[col]);
                                                    dedtot += getvalue;
                                                    dedhash.Remove(col);
                                                    dedhash.Add(col, Convert.ToString(dedtot));
                                                }
                                                else
                                                {
                                                    dedhash.Add(col, Convert.ToString(getvalue));
                                                }
                                            }
                                            dedgrand += dedtot;
                                            //dedtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (dedhash.ContainsKey(dedindex))
                                            //{
                                            //    dedhash.Remove(dedindex);
                                            //}
                                            //dedhash.Add(dedindex, Convert.ToString(dedtot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Value = Convert.ToString(dv1[0]["DeductReason3"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;


                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["DeductAmout"]);
                                            if (Convert.ToString(dv1[0]["DeductAmout"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["DeductAmout"]);
                                                if (dedhash.ContainsKey(col))
                                                {
                                                    dedtot = Convert.ToInt32(dedhash[col]);
                                                    dedtot += getvalue;
                                                    dedhash.Remove(col);
                                                    dedhash.Add(col, Convert.ToString(dedtot));
                                                }
                                                else
                                                {
                                                    dedhash.Add(col, Convert.ToString(getvalue));
                                                }
                                            }
                                            dedgrand += dedtot;
                                            //dedtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                            //if (dedhash.ContainsKey(dedindex))
                                            //{
                                            //    dedhash.Remove(dedindex);
                                            //}
                                            //dedhash.Add(dedindex, Convert.ToString(dedtot));
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Value = Convert.ToString(dv1[0]["DeductReason"]);
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                        }

                                        #endregion

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["TotalAmount"]);
                                       
                                        if (Convert.ToString(dv1[0]["TotalAmount"]).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(dv1[0]["TotalAmount"]);
                                            if (coltothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                coltot = Convert.ToInt32(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                coltot += getvalue;
                                                coltothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                coltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(coltot));
                                            }
                                            else
                                            {
                                                coltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }
                                        grandtot += coltot;
                                        //coltot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                        //if (coltothash.ContainsKey(coltotindex))
                                        //{
                                        //    coltothash.Remove(coltotindex);
                                        //}
                                        //coltothash.Add(coltotindex, Convert.ToString(coltot));
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightgreen");
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                        if (Convert.ToString(dv1[0]["balamount"]).Trim() == "0.00" || Convert.ToString(dv1[0]["paidamount"]).Trim() != "0.00")
                                        {
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = Color.Red;
                                        }

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["RefundAmount"]);
                                        if (Convert.ToString(dv1[0]["RefundAmount"]).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(dv1[0]["RefundAmount"]);
                                            if (refhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                reftot = Convert.ToInt32(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                reftot += getvalue;
                                                refhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                refhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(reftot));
                                            }
                                            else
                                            {
                                                refhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }
                                        refundtot += reftot;
                                        //reftot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                        //if (refhash.ContainsKey(refindex))
                                        //{
                                        //    refhash.Remove(refindex);
                                        //}
                                        //refhash.Add(refindex, Convert.ToString(reftot));
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                        if (Convert.ToString(dv1[0]["balamount"]).Trim() == "0.00" || Convert.ToString(dv1[0]["paidamount"]).Trim() != "0.00")
                                        {
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = Color.Red;
                                        }
                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbSchType;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag = Convert.ToString(cbl_sem.Items[cn].Value);
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        if (txt_roll.Text.Trim() != "")
                                        {
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(govTotSingleStud);
                                            StringBuilder sbReas = new StringBuilder();
                                            for (int dtReas = 0; dtReas < dtGvtTable.Rows.Count; dtReas++)
                                            {
                                                sbReas.Append(Convert.ToString(dtGvtTable.Rows[dtReas][0]) + ",");
                                            }
                                            if (sbReas.Length > 0)
                                            {
                                                sbReas.Remove(sbReas.Length - 1, 1);
                                            }
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag = Convert.ToString(sbReas);
                                            double getvalue = govTotSingleStud;
                                            if (frmhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                frmtot = Convert.ToInt32(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                frmtot += getvalue;
                                                frmhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                frmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(frmtot));
                                            }
                                            else
                                            {
                                                frmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }

                                        }
                                        else
                                        {
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["FromGovtAmt"]);
                                            if (Convert.ToString(dv1[0]["FromGovtAmt"]).Trim() != "")
                                            {
                                                double getvalue = Convert.ToDouble(dv1[0]["FromGovtAmt"]);
                                                if (frmhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                                {
                                                    frmtot = Convert.ToInt32(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                    frmtot += getvalue;
                                                    frmhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                    frmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(frmtot));
                                                }
                                                else
                                                {
                                                    frmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                                }
                                            }
                                        }

                                        frmgovttot += frmtot;
                                        //frmtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                        //if (frmhash.ContainsKey(frmindex))
                                        //{
                                        //    frmhash.Remove(frmindex);
                                        //}
                                        //frmhash.Add(frmindex, Convert.ToString(frmtot));
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag = Convert.ToString(dv1[0]["PayStartDate"]);
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        startdate = Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag);
                                        if (startdate.Trim() != "01/01/1900" && startdate.Trim() != "")
                                        {
                                            split = startdate.Split('/');
                                            day2 = split[0];
                                            mon2 = split[1];
                                            year2 = split[2];
                                        }
                                        else
                                        {
                                            day2 = "";
                                            mon2 = "";
                                            year2 = "";
                                        }

                                        col++;
                                        if (hathsgetcol.ContainsValue(col))
                                        {
                                            FpSpread1.Sheets[0].Cells[0, col].CellType = cbcomday;
                                            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = day2;
                                            FpSpread1.Sheets[0].Cells[0, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[0, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[0, col].Font.Size = FontUnit.Medium;
                                            FpSpread1.Sheets[0].Cells[0, col].Locked = false;

                                            FpSpread1.Sheets[0].Cells[0, col + 1].CellType = cbcommon;
                                            FpSpread1.Sheets[0].Cells[0, col + 1].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[0, col + 1].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[0, col + 1].Font.Size = FontUnit.Medium;
                                            FpSpread1.Sheets[0].Cells[0, col + 1].Locked = false;

                                            FpSpread1.Sheets[0].Cells[0, col + 2].CellType = cbcomyear;
                                            FpSpread1.Sheets[0].Cells[0, col + 2].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[0, col + 2].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[0, col + 2].Font.Size = FontUnit.Medium;
                                            FpSpread1.Sheets[0].Cells[0, col + 2].Locked = false;
                                        }
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday2;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = day2;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon2;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = mon2;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear2;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = year2;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = Convert.ToString(dv1[0]["FineAmount"]);
                                        if (Convert.ToString(dv1[0]["FineAmount"]).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(dv1[0]["FineAmount"]);
                                            if (finehash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                            {
                                                finetot = Convert.ToInt32(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                                finetot += getvalue;
                                                finehash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                                finehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(finetot));
                                            }
                                            else
                                            {
                                                finehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                            }
                                        }
                                        finetotal += finetot;
                                        ////finetot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text));
                                        ////if (finehash.ContainsKey(fineindex))
                                        ////{
                                        ////    finehash.Remove(fineindex);
                                        ////}
                                        ////finehash.Add(fineindex, Convert.ToString(finetot));
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag = Convert.ToString(dv1[0]["DueDate"]);
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        duedate = Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag);
                                        if (duedate.Trim() != "01/01/1900" && duedate.Trim() != "")
                                        {
                                            split = duedate.Split('/');
                                            day1 = split[0];
                                            mon1 = split[1];
                                            year1 = split[2];
                                        }
                                        else
                                        {
                                            day1 = "";
                                            mon1 = "";
                                            year1 = "";
                                        }

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday1;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = day1;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon1;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = mon1;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear1;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = year1;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                        //FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Visible = true;
                                    }
                                    else
                                    {
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        int noOfConcession = 0;
                                        noOfConcession = Convert.ToInt32(txtNoConcession.Text);
                                        if (noOfConcession == 0 || noOfConcession == 1)
                                        {
                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                            col++;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                        }
                                        if (noOfConcession == 2 || noOfConcession == 3)
                                        {
                                            for (int con = 0; con <= noOfConcession; con++)
                                            {
                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = doubl;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                                col++;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cb1;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                            }
                                        }


                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightgreen");
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbSchType;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Tag = Convert.ToString(cbl_sem.Items[cn].Value);
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        if (hathsgetcol.ContainsValue(col))
                                        {
                                            FpSpread1.Sheets[0].Cells[0, col].CellType = cbcomday;
                                            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Text = day2;
                                            FpSpread1.Sheets[0].Cells[0, col].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[0, col].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[0, col].Font.Size = FontUnit.Medium;
                                            FpSpread1.Sheets[0].Cells[0, col].Locked = false;

                                            FpSpread1.Sheets[0].Cells[0, col + 1].CellType = cbcommon;
                                            FpSpread1.Sheets[0].Cells[0, col + 1].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[0, col + 1].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[0, col + 1].Font.Size = FontUnit.Medium;
                                            FpSpread1.Sheets[0].Cells[0, col + 1].Locked = false;

                                            FpSpread1.Sheets[0].Cells[0, col + 2].CellType = cbcomyear;
                                            FpSpread1.Sheets[0].Cells[0, col + 2].HorizontalAlign = HorizontalAlign.Center;
                                            FpSpread1.Sheets[0].Cells[0, col + 2].Font.Name = "Book Antiqua";
                                            FpSpread1.Sheets[0].Cells[0, col + 2].Font.Size = FontUnit.Medium;
                                            FpSpread1.Sheets[0].Cells[0, col + 2].Locked = false;
                                        }
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday2;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon2;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear2;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].BackColor = ColorTranslator.FromHtml("lightyellow");
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Right;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbday1;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbmon1;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;

                                        col++;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].CellType = cbyear1;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].HorizontalAlign = HorizontalAlign.Center;
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Name = "Book Antiqua";
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, col].Font.Size = FontUnit.Medium;
                                        //  FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Visible = false;
                                    }
                                }
                            }
                        }
                        FpSpread1.Sheets[0].RowCount++;
                        divheight += 25;
                        if (!headertotal.ContainsKey(Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"])))
                        {
                            headertotal.Add(Convert.ToString(ds.Tables[2].Rows[ik]["HeaderPK"]), FpSpread1.Sheets[0].RowCount - 1);
                            ViewState["headertotal"] = headertotal;
                        }
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Total";
                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                        for (int cn = 0; cn < cbl_sem.Items.Count; cn++)
                        {
                            col = 1;
                            if (cbl_sem.Items[cn].Selected == true)
                            {
                                int noOfconcession = 0;
                                noOfconcession = Convert.ToInt32(txtNoConcession.Text);

                                if (noOfconcession == 0 || noOfconcession == 1)
                                {
                                    col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    col++;
                                    colindex = col;
                                    dedindex = col + 1;
                                    coltotindex = col + 3;
                                    refindex = col + 4;
                                    frmindex = col + 6;
                                    fineindex = col + 10;

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, colindex].Text = Convert.ToString(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string headertotalGrand = Convert.ToString(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(headertotalGrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(headertotalGrand);
                                        if (Grandtothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            totgrand = Convert.ToInt32(Grandtothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            totgrand += getvalue;
                                            Grandtothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandtothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(totgrand));
                                        }
                                        else
                                        {
                                            Grandtothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, dedindex].Text = Convert.ToString(dedhash[dedindex]);
                                    string dedtotalgrand = Convert.ToString(dedhash[dedindex]);
                                    if (Convert.ToString(dedtotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(dedtotalgrand);
                                        if (Granddedhash.ContainsKey(dedindex))
                                        {
                                            dedgrand = Convert.ToInt32(Granddedhash[dedindex]);
                                            dedgrand += getvalue;
                                            Granddedhash.Remove(dedindex);
                                            Granddedhash.Add(dedindex, Convert.ToString(dedgrand));
                                        }
                                        else
                                        {
                                            Granddedhash.Add(dedindex, Convert.ToString(getvalue));
                                        }
                                    }
                                    //dedgrand += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text));

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, coltotindex].Text = Convert.ToString(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string tottotalgrand = Convert.ToString(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(tottotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(tottotalgrand);
                                        if (Grandcoltothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            grandtot = Convert.ToInt32(Grandcoltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            grandtot += getvalue;
                                            Grandcoltothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandcoltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(grandtot));
                                        }
                                        else
                                        {
                                            Grandcoltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    //grandtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 6].Text));

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, refindex].Text = Convert.ToString(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string reftotalgrand = Convert.ToString(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(reftotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(reftotalgrand);
                                        if (Grandrefhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            refundtot = Convert.ToInt32(Grandrefhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            refundtot += getvalue;
                                            Grandrefhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandrefhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(refundtot));
                                        }
                                        else
                                        {
                                            Grandrefhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    // refundtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 7].Text));

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, frmindex].Text = Convert.ToString(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string frmtotalgrand = Convert.ToString(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(frmtotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(frmtotalgrand);
                                        if (Grandfrmhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            frmgovttot = Convert.ToInt32(Grandfrmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            frmgovttot += getvalue;
                                            Grandfrmhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandfrmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(frmgovttot));
                                        }
                                        else
                                        {
                                            Grandfrmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    // frmgovttot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 8].Text));

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, fineindex].Text = Convert.ToString(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    string finetotalgrand = Convert.ToString(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(finetotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(finetotalgrand);
                                        if (Grandfinehash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            finetotal = Convert.ToInt32(Grandfinehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            finetotal += getvalue;
                                            Grandfinehash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandfinehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(finetotal));
                                        }
                                        else
                                        {
                                            Grandfinehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    //finetotal += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 12].Text));

                                }
                                if (noOfconcession == 2)
                                {
                                    col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    col++;
                                    colindex = col;
                                    dedindex = col + 1;
                                    coltotindex = col + 7;
                                    refindex = col + 8;
                                    frmindex = col + 10;
                                    fineindex = col + 12;

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, colindex].Text = Convert.ToString(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string headertotalGrand = Convert.ToString(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(headertotalGrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(headertotalGrand);
                                        if (Grandtothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            totgrand = Convert.ToInt32(Grandtothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            totgrand += getvalue;
                                            Grandtothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandtothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(totgrand));
                                        }
                                        else
                                        {
                                            Grandtothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    for (int con = 0; con <= noOfconcession; con++)
                                    {
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, dedindex].Text = Convert.ToString(dedhash[dedindex]);
                                        string dedtotalgrand = Convert.ToString(dedhash[dedindex]);
                                        if (Convert.ToString(dedtotalgrand).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(dedtotalgrand);
                                            if (Granddedhash.ContainsKey(dedindex))
                                            {
                                                dedgrand = Convert.ToInt32(Granddedhash[dedindex]);
                                                dedgrand += getvalue;
                                                Granddedhash.Remove(dedindex);
                                                Granddedhash.Add(dedindex, Convert.ToString(dedgrand));
                                            }
                                            else
                                            {
                                                Granddedhash.Add(dedindex, Convert.ToString(getvalue));
                                            }
                                        }
                                        dedindex = dedindex + 2;
                                        //dedgrand += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text));
                                    }
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, coltotindex].Text = Convert.ToString(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string tottotalgrand = Convert.ToString(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(tottotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(tottotalgrand);
                                        if (Grandcoltothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            grandtot = Convert.ToInt32(Grandcoltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            grandtot += getvalue;
                                            Grandcoltothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandcoltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(grandtot));
                                        }
                                        else
                                        {
                                            Grandcoltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    //grandtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 6].Text));

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, refindex].Text = Convert.ToString(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string reftotalgrand = Convert.ToString(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(reftotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(reftotalgrand);
                                        if (Grandrefhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            refundtot = Convert.ToInt32(Grandrefhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            refundtot += getvalue;
                                            Grandrefhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandrefhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(refundtot));
                                        }
                                        else
                                        {
                                            Grandrefhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    // refundtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 7].Text));

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, frmindex].Text = Convert.ToString(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string frmtotalgrand = Convert.ToString(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(frmtotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(frmtotalgrand);
                                        if (Grandfrmhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            frmgovttot = Convert.ToInt32(Grandfrmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            frmgovttot += getvalue;
                                            Grandfrmhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandfrmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(frmgovttot));
                                        }
                                        else
                                        {
                                            Grandfrmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    // frmgovttot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 8].Text));

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, fineindex].Text = Convert.ToString(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    string finetotalgrand = Convert.ToString(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(finetotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(finetotalgrand);
                                        if (Grandfinehash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            finetotal = Convert.ToInt32(Grandfinehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            finetotal += getvalue;
                                            Grandfinehash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandfinehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(finetotal));
                                        }
                                        else
                                        {
                                            Grandfinehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    //finetotal += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 12].Text));
                                }
                                if (noOfconcession == 3)
                                {
                                    col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    col++;
                                    colindex = col;
                                    dedindex = col + 1;
                                    coltotindex = col + 9;
                                    refindex = col + 10;
                                    frmindex = col + 12;
                                    fineindex = col + 14;


                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, colindex].Text = Convert.ToString(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string headertotalGrand = Convert.ToString(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(headertotalGrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(headertotalGrand);
                                        if (Grandtothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            totgrand = Convert.ToInt32(Grandtothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            totgrand += getvalue;
                                            Grandtothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandtothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(totgrand));
                                        }
                                        else
                                        {
                                            Grandtothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    for (int con = 0; con <= noOfconcession; con++)
                                    {
                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, dedindex].Text = Convert.ToString(dedhash[dedindex]);
                                        string dedtotalgrand = Convert.ToString(dedhash[dedindex]);
                                        if (Convert.ToString(dedtotalgrand).Trim() != "")
                                        {
                                            double getvalue = Convert.ToDouble(dedtotalgrand);
                                            if (Granddedhash.ContainsKey(dedindex))
                                            {
                                                dedgrand = Convert.ToInt32(Granddedhash[dedindex]);
                                                dedgrand += getvalue;
                                                Granddedhash.Remove(dedindex);
                                                Granddedhash.Add(dedindex, Convert.ToString(dedgrand));
                                            }
                                            else
                                            {
                                                Granddedhash.Add(dedindex, Convert.ToString(getvalue));
                                            }
                                        }
                                        dedindex = dedindex + 2;
                                        //dedgrand += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text));
                                    }
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, coltotindex].Text = Convert.ToString(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string tottotalgrand = Convert.ToString(coltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(tottotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(tottotalgrand);
                                        if (Grandcoltothash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            grandtot = Convert.ToInt32(Grandcoltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            grandtot += getvalue;
                                            Grandcoltothash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandcoltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(grandtot));
                                        }
                                        else
                                        {
                                            Grandcoltothash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    //grandtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 6].Text));

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, refindex].Text = Convert.ToString(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string reftotalgrand = Convert.ToString(refhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(reftotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(reftotalgrand);
                                        if (Grandrefhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            refundtot = Convert.ToInt32(Grandrefhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            refundtot += getvalue;
                                            Grandrefhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandrefhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(refundtot));
                                        }
                                        else
                                        {
                                            Grandrefhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    // refundtot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 7].Text));

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, frmindex].Text = Convert.ToString(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                    string frmtotalgrand = Convert.ToString(frmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(frmtotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(frmtotalgrand);
                                        if (Grandfrmhash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            frmgovttot = Convert.ToInt32(Grandfrmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            frmgovttot += getvalue;
                                            Grandfrmhash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandfrmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(frmgovttot));
                                        }
                                        else
                                        {
                                            Grandfrmhash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    // frmgovttot += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 8].Text));

                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, fineindex].Text = Convert.ToString(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    string finetotalgrand = Convert.ToString(finehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                    if (Convert.ToString(finetotalgrand).Trim() != "")
                                    {
                                        double getvalue = Convert.ToDouble(finetotalgrand);
                                        if (Grandfinehash.ContainsKey(Convert.ToString(cbl_sem.Items[cn].Value)))
                                        {
                                            finetotal = Convert.ToInt32(Grandfinehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                            finetotal += getvalue;
                                            Grandfinehash.Remove(Convert.ToString(cbl_sem.Items[cn].Value));
                                            Grandfinehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(finetotal));
                                        }
                                        else
                                        {
                                            Grandfinehash.Add(Convert.ToString(cbl_sem.Items[cn].Value), Convert.ToString(getvalue));
                                        }
                                    }
                                    //finetotal += Convert.ToInt32(Convert.ToString(FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 12].Text));
                                }

                                //totgrand += Convert.ToInt32(tothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                            }
                        }
                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                    }

                    FpSpread1.Sheets[0].RowCount++;
                    divheight += 25;
                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Grand Total";
                    FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Locked = true;
                    FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].BackColor = ColorTranslator.FromHtml("#0CA6CA");

                    for (int cn = 0; cn < cbl_sem.Items.Count; cn++)
                    {
                        col = 1;
                        if (cbl_sem.Items[cn].Selected == true)
                        {
                            int noOfconcession = 0;
                            noOfconcession = Convert.ToInt32(txtNoConcession.Text);
                            if (noOfconcession == 0 || noOfconcession == 1)
                            {
                                col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                col++;
                                colindex = col;
                                dedindex = col + 1;
                                coltotindex = col + 3;
                                refindex = col + 4;
                                frmindex = col + 6;
                                fineindex = col + 10;

                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, colindex].Text = Convert.ToString(Grandtothash[Convert.ToString(cbl_sem.Items[cn].Value)]);

                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, dedindex].Text = Convert.ToString(Granddedhash[dedindex]);

                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, coltotindex].Text = Convert.ToString(Grandcoltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, refindex].Text = Convert.ToString(Grandrefhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, frmindex].Text = Convert.ToString(Grandfrmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, fineindex].Text = Convert.ToString(Grandfinehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                            }
                            if (noOfconcession == 2)
                            {
                                col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                col++;
                                colindex = col;
                                dedindex = col + 1;
                                coltotindex = col + 7;
                                refindex = col + 8;
                                frmindex = col + 10;
                                fineindex = col + 12;

                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, colindex].Text = Convert.ToString(Grandtothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                for (int con = 0; con <= noOfconcession; con++)
                                {
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, dedindex].Text = Convert.ToString(Granddedhash[dedindex]);
                                    dedindex = dedindex + 2;
                                }
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, coltotindex].Text = Convert.ToString(Grandcoltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, refindex].Text = Convert.ToString(Grandrefhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, frmindex].Text = Convert.ToString(Grandfrmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, fineindex].Text = Convert.ToString(Grandfinehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                            }
                            if (noOfconcession == 3)
                            {
                                col = Convert.ToInt32(hatnew[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                col++;
                                colindex = col;
                                dedindex = col + 1;
                                coltotindex = col + 9;
                                refindex = col + 10;
                                frmindex = col + 12;
                                fineindex = col + 14;

                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, colindex].Text = Convert.ToString(Grandtothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                for (int con = 0; con <= noOfconcession; con++)
                                {
                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, dedindex].Text = Convert.ToString(Granddedhash[dedindex]);
                                    dedindex = dedindex + 2;
                                }
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, coltotindex].Text = Convert.ToString(Grandcoltothash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, refindex].Text = Convert.ToString(Grandrefhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, frmindex].Text = Convert.ToString(Grandfrmhash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, fineindex].Text = Convert.ToString(Grandfinehash[Convert.ToString(cbl_sem.Items[cn].Value)]);
                            }


                        }
                    }
                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 3);
                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                    // Grandtotal.Add(Convert.ToString("GrandTotal"), FpSpread1.Sheets[0].RowCount - 1);
                }
            }
            FpSpread1.Sheets[0].PageSize = FpSpread1.Sheets[0].RowCount;
            if (txt_roll.Text.Trim() != "")
            {
                Feedetails.Visible = true;
                FpSpread1.Visible = true;
                FpSpreadstud.Visible = false;
                btnok1.Visible = false;
                btnexitstud.Visible = false;
                FpSpread1.Width = 1000;
                FpSpread1.Height = Convert.ToInt32(divheight + 100);
                FpSpread1.SaveChanges();
            }
            else
            {
                Feedetails.Visible = true;
                FpSpread1.Visible = true;
                if (dirAccess.selectScalarInt("select LinkValue from New_InsSettings where LinkName='StudentsDisplayPositioninJournal' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ") == 0)
                {
                    divview.Visible = false;
                }
                // FpSpreadstud.Visible = true;
                btnok1.Visible = true;
                btnexitstud.Visible = true;
                // FpSpread1.Width = 550;
                // FpSpread1.Height = 400;
                FpSpread1.SaveChanges();
            }
            // FpSpreadstud.SaveChanges();
        }
        catch
        {

        }
    }


    public void loadsetting()
    {
        try
        {
            ListItem list1 = new ListItem("Roll No", "0");
            ListItem list2 = new ListItem("Reg No", "1");
            ListItem list3 = new ListItem("Admission No", "2");
            ListItem list4 = new ListItem("App No", "3");

            if (ddl_type.SelectedItem.Text.Trim() == "Individual(Admitted)")
            {
                rbl_rollno.Items.Clear();
                string insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptRollNo' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";

                int save1 = Convert.ToInt32(d2.GetFunction(insqry1));

                if (save1 == 1)
                {
                    rbl_rollno.Items.Add(list1);
                }


                insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptRegNo' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";
                save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                if (save1 == 1)
                {
                    rbl_rollno.Items.Add(list2);
                }

                insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptRollAdmit' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "'";
                save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                if (save1 == 1)
                {
                    rbl_rollno.Items.Add(list3);
                }

                insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptAppFormNo' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
                save1 = Convert.ToInt32(d2.GetFunction(insqry1));

                if (save1 == 1)
                {
                    rbl_rollno.Items.Add(list4);
                }
                if (rbl_rollno.Items.Count == 0)
                {
                    rbl_rollno.Items.Add(list1);
                }
                switch (Convert.ToUInt32(rbl_rollno.SelectedItem.Value))
                {
                    case 0:
                        txt_roll.Attributes.Add("placeholder", "Roll No");
                        chosedmode = 0;
                        break;
                    case 1:
                        txt_roll.Attributes.Add("placeholder", "Reg No");
                        chosedmode = 1;
                        break;
                    case 2:
                        txt_roll.Attributes.Add("placeholder", "Admin No");
                        chosedmode = 2;
                        break;
                    case 3:
                        txt_roll.Attributes.Add("placeholder", "App No");
                        chosedmode = 3;
                        break;
                }
            }
            else if (ddl_type.SelectedItem.Text.Trim() == "Individual(Applied)")
            {
                rbl_rollno.Items.Clear();
                rbl_rollno.Items.Add(list4);
                txt_roll.Attributes.Add("placeholder", "App No");
                chosedmode = 3;
            }

        }
        catch { }
    }
    protected void rbl_rollno_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            txt_roll.Text = "";
            txt_name.Text = "";
            if (ddl_type.SelectedItem.Text.Trim() == "Individual(Admitted)")
            {
                switch (Convert.ToUInt32(rbl_rollno.SelectedItem.Value))
                {
                    case 0:
                        txt_roll.Attributes.Add("Placeholder", "Roll No");
                        chosedmode = 0;
                        break;
                    case 1:
                        txt_roll.Attributes.Add("Placeholder", "Reg No");
                        chosedmode = 1;
                        break;
                    case 2:
                        txt_roll.Attributes.Add("Placeholder", "Admin No");
                        chosedmode = 2;
                        break;
                    case 3:
                        txt_roll.Attributes.Add("Placeholder", "App No");
                        chosedmode = 2;
                        break;
                }
            }
            else if (ddl_type.SelectedItem.Text.Trim() == "Individual(Applied)")
            {
                txt_roll.Attributes.Add("Placeholder", "App No");
                chosedmode = 2;
            }
        }
        catch { }
    }
    public void imagebtnorder_Click(object sender, EventArgs e)
    {
        divview.Visible = false;
    }

    //Code added by Mohamed Idhris 04-03-2016
    //Add and Remove Reasons for Scholarship
    protected void btnplusMulSclReason_OnClick(object sender, EventArgs e)
    {
        imgdiv3.Visible = true;
        panel_description.Visible = true;
    }
    protected void btnminusMulSclReason_OnClick(object sender, EventArgs e)
    {
        if (ddl_MulSclReason.Items.Count > 0)
        {
            surediv.Visible = true;
        }
        else
        {
            imgdiv2.Visible = true;
            lbl_erroralert.Text = "No Scholarship Type Selected";
        }
    }
    protected void btn_sureno_Click(object sender, EventArgs e)
    {
        surediv.Visible = false;
    }
    protected void btn_sureyes_Click(object sender, EventArgs e)
    {
        try
        {
            surediv.Visible = false;
            if (ddl_MulSclReason.Items.Count > 0)
            {

                string sql = "delete from CO_MasterValues where MasterCode='" + ddl_MulSclReason.SelectedItem.Value.ToString() + "' and MasterCriteria ='SchlolarshipReason' and CollegeCode='" + collegecode1 + "' ";
                int delete = d2.update_method_wo_parameter(sql, "TEXT");
                if (delete != 0)
                {
                    imgdiv2.Visible = true;
                    lbl_erroralert.Text = "Deleted Sucessfully";
                }
                else
                {
                    imgdiv2.Visible = true;
                    lbl_erroralert.Text = "Not deleted";
                }
                loaddesc1();
            }

            else
            {
                imgdiv2.Visible = true;
                lbl_erroralert.Text = "No Scholarship Type Selected";
            }
        }
        catch { }
    }
    protected void btndescpopadd_Click(object sender, EventArgs e)
    {
        try
        {
            if (txt_description11.Text != "")
            {
                string sql = "if exists ( select * from CO_MasterValues where MasterValue ='" + txt_description11.Text + "' and MasterCriteria ='SchlolarshipReason' and CollegeCode ='" + collegecode1 + "') update CO_MasterValues set MasterValue ='" + txt_description11.Text + "' where MasterValue ='" + txt_description11.Text + "' and MasterCriteria ='SchlolarshipReason' and CollegeCode ='" + collegecode1 + "' else insert into CO_MasterValues (MasterValue,MasterCriteria,CollegeCode) values ('" + txt_description11.Text + "','SchlolarshipReason','" + collegecode1 + "')";
                int insert = d2.update_method_wo_parameter(sql, "TEXT");
                if (insert != 0)
                {
                    imgdiv2.Visible = true;
                    lbl_erroralert.Text = "Saved sucessfully";
                    txt_description11.Text = "";
                    imgdiv3.Visible = false;
                    panel_description.Visible = false;
                }
                loaddesc1();
            }
            else
            {
                imgdiv2.Visible = true;
                lbl_erroralert.Text = "Enter the description";
            }
        }
        catch (Exception ex)
        {
        }
    }
    protected void btndescpopexit_Click(object sender, EventArgs e)
    {
        imgdiv3.Visible = false;
        panel_description.Visible = false;
        loaddesc1();
    }
    public void loaddesc1()
    {
        try
        {
            ddl_MulSclReason.Items.Clear();
            string query = " select Distinct MasterValue,MasterCode from CO_MasterValues where MasterCriteria ='SchlolarshipReason' and CollegeCode ='" + collegecode1 + "' order by MasterValue asc";
            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    ddl_MulSclReason.DataSource = ds;
                    ddl_MulSclReason.DataTextField = "MasterValue";
                    ddl_MulSclReason.DataValueField = "MasterCode";
                    ddl_MulSclReason.DataBind();
                }
            }
        }
        catch { }
    }
    protected void btnerrexit_Click(object sender, EventArgs e)
    {
        imgdiv2.Visible = false;
    }
    //Multiple Scholarship Popup
    private void LoadMulScholarship(string appno)
    {
        try
        {
            string query = " select Distinct MasterValue,MasterCode from CO_MasterValues where MasterCriteria ='SchlolarshipReason' and CollegeCode ='" + collegecode1 + "' order by MasterValue asc";
            ds.Clear();
            ds = d2.select_method_wo_parameter(query, "Text");

            string app_no = "0";
            if (txt_roll.Text.Trim() != "")
            {
                if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 0)
                {
                    app_no = d2.GetFunction(" select App_No from Registration where Roll_No='" + txt_roll.Text.Trim() + "' and college_code='" + collegecode1 + "'");
                }
                if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 1)
                {
                    app_no = d2.GetFunction(" select App_No from Registration where reg_no='" + txt_roll.Text.Trim() + "' and college_code='" + collegecode1 + "'");
                }
                if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 2)
                {
                    app_no = d2.GetFunction(" select App_No from Registration where Roll_admit='" + txt_roll.Text.Trim() + "' and college_code='" + collegecode1 + "'");
                }
                if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 3)
                {
                    app_no = d2.GetFunction(" select app_no from applyn where app_formno='" + txt_roll.Text.Trim() + "' and college_code='" + collegecode1 + "'");
                }
            }
            else
            {
                if (appno != "")
                    app_no = appno;
            }
            string feecat = "0";
            string ledger = "0";

            int actrow = Convert.ToInt32(FpSpread1.Sheets[0].ActiveRow.ToString());
            int actcol = Convert.ToInt32(FpSpread1.Sheets[0].ActiveColumn.ToString());
            if (actrow > 0 && actcol > 0)
            {
                ledger = FpSpread1.Sheets[0].Cells[actrow, 1].Tag.ToString();
                feecat = FpSpread1.Sheets[0].Cells[actrow, actcol].Tag.ToString();
            }

            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {

                FpSchloar.Sheets[0].RowHeader.Visible = false;
                FpSchloar.CommandBar.Visible = false;
                FpSchloar.Sheets[0].AutoPostBack = false;
                FpSchloar.Sheets[0].RowCount = 0;
                FpSchloar.Sheets[0].ColumnCount = 3;
                FpSchloar.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                FpSchloar.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                FpSchloar.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                FpSchloar.Sheets[0].ColumnHeader.Cells[0, 0].Column.Width = 50;
                FpSchloar.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = FontUnit.Medium;

                FpSchloar.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Scholarship";
                FpSchloar.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
                FpSchloar.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                FpSchloar.Sheets[0].ColumnHeader.Cells[0, 1].Column.Width = 100;
                FpSchloar.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = FontUnit.Medium;

                FpSchloar.Columns[0].Locked = true;
                FpSchloar.Columns[1].Locked = true;

                FpSchloar.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Amount";
                FpSchloar.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
                FpSchloar.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
                FpSchloar.Sheets[0].ColumnHeader.Cells[0, 2].Column.Width = 80;
                FpSchloar.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = FontUnit.Medium;
                FarPoint.Web.Spread.DoubleCellType intgrcell = new FarPoint.Web.Spread.DoubleCellType();
                intgrcell.FormatString = System.Windows.Forms.MaskFormat.ExcludePromptAndLiterals.ToString();

                intgrcell.MinimumValue = 0;
                intgrcell.ErrorMessage = "Enter valid Number";
                FpSchloar.Sheets[0].Columns[2].CellType = intgrcell;
                FpSchloar.Sheets[0].Columns[2].Font.Bold = false;
                FpSchloar.Sheets[0].Columns[2].Font.Name = "Book Antiqua";

                FarPoint.Web.Spread.IntegerCellType integer = new FarPoint.Web.Spread.IntegerCellType();
                FpSchloar.Sheets[0].Columns[2].CellType = integer;
                double totOvall = 0;
                for (int scl = 0; scl < ds.Tables[0].Rows.Count; scl++)
                {
                    FpSchloar.Sheets[0].RowCount++;
                    FpSchloar.Sheets[0].Cells[scl, 0].Font.Bold = false;
                    FpSchloar.Sheets[0].Cells[scl, 0].Text = (scl + 1).ToString();
                    FpSchloar.Sheets[0].Cells[scl, 0].HorizontalAlign = HorizontalAlign.Center;
                    FpSchloar.Sheets[0].Cells[scl, 0].Font.Name = "Book Antiqua";

                    FpSchloar.Sheets[0].Cells[scl, 1].Font.Bold = false;
                    FpSchloar.Sheets[0].Cells[scl, 1].Text = Convert.ToString(ds.Tables[0].Rows[scl]["MasterValue"]);
                    FpSchloar.Sheets[0].Cells[scl, 1].Tag = Convert.ToString(ds.Tables[0].Rows[scl]["MasterCode"]);
                    FpSchloar.Sheets[0].Cells[scl, 1].HorizontalAlign = HorizontalAlign.Left;
                    FpSchloar.Sheets[0].Cells[scl, 1].Font.Name = "Book Antiqua";
                    FpSchloar.Sheets[0].Cells[scl, 1].Font.Size = FontUnit.Medium;

                    FpSchloar.Sheets[0].Cells[scl, 2].CellType = intgrcell;
                    #region old
                    //if (txt_roll.Text.Trim() != "")
                    //{
                    //    double dbValue = 0;
                    //    double.TryParse(d2.GetFunction("select isnull(TotalAmount,0) as schl from FT_FinScholarship where LedgerFK=" + ledger + "  and CollegeCode=" + collegecode1 + " and Feecategory=" + feecat + " and App_no=" + app_no + " and ReasonCode=" + ds.Tables[0].Rows[scl]["MasterCode"] + ""), out dbValue);
                    //    FpSchloar.Sheets[0].Cells[scl, 2].Text = dbValue.ToString();
                    //    totOvall += dbValue;
                    //}
                    //else
                    //{
                    //    FpSchloar.Sheets[0].Cells[scl, 2].Text = "";
                    //}
                    #endregion

                    if (app_no != "")
                    {
                        double dbValue = 0;
                        double.TryParse(d2.GetFunction("select isnull(TotalAmount,0) as schl from FT_FinScholarship where LedgerFK=" + ledger + "  and CollegeCode=" + collegecode1 + " and Feecategory=" + feecat + " and App_no=" + app_no + " and ReasonCode=" + ds.Tables[0].Rows[scl]["MasterCode"] + ""), out dbValue);
                        FpSchloar.Sheets[0].Cells[scl, 2].Text = dbValue.ToString();
                        totOvall += dbValue;
                    }
                    else
                    {
                        FpSchloar.Sheets[0].Cells[scl, 2].Text = "";
                    }
                }

                FpSchloar.Sheets[0].RowCount++;
                FpSchloar.Sheets[0].Cells[FpSchloar.Sheets[0].RowCount - 1, 0].Text = "Total Amount";
                FpSchloar.Sheets[0].SpanModel.Add(FpSchloar.Sheets[0].RowCount - 1, 0, 1, 2);
                FpSchloar.Sheets[0].Cells[FpSchloar.Sheets[0].RowCount - 1, 2].Text = totOvall.ToString();
                FpSchloar.Sheets[0].Cells[FpSchloar.Sheets[0].RowCount - 1, 2].Locked = true;
                FpSchloar.Sheets[0].Cells[FpSchloar.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                FpSchloar.Sheets[0].Cells[FpSchloar.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                FpSchloar.Sheets[0].Cells[FpSchloar.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;

                FpSchloar.Height = 350;

                FpSchloar.Sheets[0].PageSize = FpSchloar.Sheets[0].RowCount;
                FpSchloar.SaveChanges();
            }
            else
            {
                divMulSchlolar.Visible = false;
                imgdiv2.Visible = true;
                lbl_erroralert.Text = "No Scholarship Type Available";
            }
        }
        catch { }
    }
    protected void FpSchloar_Command(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        try
        {
            int col = (FpSchloar.Sheets[0].RowCount) - 1;
            FpSchloar.Sheets[0].Cells[FpSchloar.Sheets[0].RowCount - 1, 2].Formula = "SUM(C1:C" + col + ")";
        }
        catch { }
    }
    protected void btnExitScholar_Click(object sender, EventArgs e)
    {
        ReplaceScholarshipamount(true);
    }
    private void ReplaceScholarshipamount(bool fromExit)
    {
        try
        {
            string mulScholar = "";
            string monthamount = "";

            string actrow = FpSpread1.Sheets[0].ActiveRow.ToString();
            string actcol = FpSpread1.Sheets[0].ActiveColumn.ToString();
            int col = Convert.ToInt32(actcol);
            int colindex = col + 1;

            if (!fromExit)
            {
                monthamount = "0";
                mulScholar = "";
            }
            else
            {
                FpSpread1.SaveChanges();
                FpSchloar.SaveChanges();
                for (int i = 0; i < FpSchloar.Sheets[0].RowCount - 1; i++)
                {
                    if (FpSchloar.Sheets[0].Cells[i, 2].Text.Trim() != "")
                    {
                        if (mulScholar == "")
                        {
                            mulScholar = "" + FpSchloar.Sheets[0].Cells[i, 1].Tag + ":" + FpSchloar.Sheets[0].Cells[i, 2].Text + "";
                        }
                        else
                        {
                            mulScholar = mulScholar + "," + FpSchloar.Sheets[0].Cells[i, 1].Tag + ":" + FpSchloar.Sheets[0].Cells[i, 2].Text + "";
                        }
                    }
                }
                monthamount = FpSchloar.Sheets[0].Cells[FpSchloar.Sheets[0].RowCount - 1, 2].Text;
                divMulSchlolar.Visible = false;
            }

            FpSpread1.Sheets[0].Cells[Convert.ToInt32(actrow), Convert.ToInt32(colindex)].Text = monthamount;
            FpSpread1.Sheets[0].Cells[Convert.ToInt32(actrow), Convert.ToInt32(colindex)].Tag = mulScholar;
            FpSpread1.Sheets[0].Cells[Convert.ToInt32(actrow), Convert.ToInt32(colindex)].Font.Size = FontUnit.Medium;
            FpSpread1.Sheets[0].Cells[Convert.ToInt32(actrow), Convert.ToInt32(colindex)].HorizontalAlign = HorizontalAlign.Right;
            FpSpread1.Sheets[0].Cells[Convert.ToInt32(actrow), Convert.ToInt32(colindex)].Locked = true;

        }
        catch { }
    }
    private string GetSelectedItemsValue(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder sbSelected = new System.Text.StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (sbSelected.Length == 0)
                    {
                        sbSelected.Append(Convert.ToString(cblSelected.Items[sel].Value));
                    }
                    else
                    {
                        sbSelected.Append("," + Convert.ToString(cblSelected.Items[sel].Value));
                    }
                }
            }
        }
        catch { sbSelected.Clear(); }
        return sbSelected.ToString();
    }
    private string GetSelectedItemsValueAsString(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder sbSelected = new System.Text.StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (sbSelected.Length == 0)
                    {
                        sbSelected.Append(Convert.ToString(cblSelected.Items[sel].Value));
                    }
                    else
                    {
                        sbSelected.Append("','" + Convert.ToString(cblSelected.Items[sel].Value));
                    }
                }
            }
        }
        catch { sbSelected.Clear(); }
        return sbSelected.ToString();
    }
    private string GetSelectedItemsText(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder sbSelected = new System.Text.StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (sbSelected.Length == 0)
                    {
                        sbSelected.Append(Convert.ToString(cblSelected.Items[sel].Text));
                    }
                    else
                    {
                        sbSelected.Append("','" + Convert.ToString(cblSelected.Items[sel].Text));
                    }
                }
            }
        }
        catch { sbSelected.Clear(); }
        return sbSelected.ToString();
    }
    private string getCblSelectedValue(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder selectedvalue = new System.Text.StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (selectedvalue.Length == 0)
                    {
                        selectedvalue.Append(Convert.ToString(cblSelected.Items[sel].Value));
                    }
                    else
                    {
                        selectedvalue.Append("','" + Convert.ToString(cblSelected.Items[sel].Value));
                    }
                }
            }
        }
        catch { cblSelected.Items.Clear(); }
        return selectedvalue.ToString();
    }
    //Month wise Fees Allocation
    protected void btnexi_Click(object sender, EventArgs e)
    {
        try
        {
            string monthwise = "";
            FpSpread3.SaveChanges();
            FpSpread1.SaveChanges();
            string actrow = FpSpread1.Sheets[0].ActiveRow.ToString();
            string actcol = FpSpread1.Sheets[0].ActiveColumn.ToString();
            int col = Convert.ToInt32(actcol);
            int colindex = col + 1;

            for (int i = 0; i < 12; i++)
            {
                if (FpSpread3.Sheets[0].Cells[i, 3].Text.Trim() != "")
                {
                    if (monthwise == "")
                    {
                        monthwise = "" + FpSpread3.Sheets[0].Cells[i, 0].Text + ":" + FpSpread3.Sheets[0].Cells[i, 2].Text + ":" + FpSpread3.Sheets[0].Cells[i, 3].Text + "";
                    }
                    else
                    {
                        monthwise = monthwise + "," + FpSpread3.Sheets[0].Cells[i, 0].Text + ":" + FpSpread3.Sheets[0].Cells[i, 2].Text + ":" + FpSpread3.Sheets[0].Cells[i, 3].Text + "";
                    }
                }
            }

            string monthamount = FpSpread3.Sheets[0].Cells[13, 3].Text;
            FpSpread1.Sheets[0].Cells[Convert.ToInt32(actrow), Convert.ToInt32(colindex)].Text = monthamount;
            FpSpread1.Sheets[0].Cells[Convert.ToInt32(actrow), Convert.ToInt32(colindex)].Tag = monthwise;
            FpSpread1.Sheets[0].Cells[Convert.ToInt32(actrow), Convert.ToInt32(colindex)].Font.Size = FontUnit.Medium;
            FpSpread1.Sheets[0].Cells[Convert.ToInt32(actrow), Convert.ToInt32(colindex)].HorizontalAlign = HorizontalAlign.Right;
            FpSpread1.Sheets[0].Cells[Convert.ToInt32(actrow), Convert.ToInt32(colindex)].Locked = true;
            pnlupdate.Visible = false;
        }
        catch (Exception ex)
        {

        }
    }
    //Name Search
    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod()]
    public static List<string> GetName(string prefixText)
    {
        List<string> name = new List<string>();
        try
        {
            WebService ws = new WebService();
            string qAdd = string.Empty;
            if (chosedmode == 0)
            {
                qAdd = "r.Roll_No,r.Roll_No ";
            }
            else if (chosedmode == 1)
            {
                qAdd = "r.Reg_No,r.Reg_No ";
            }
            else if (chosedmode == 2)
            {
                qAdd = "r.Roll_admit,r.Roll_admit ";
            }
            else
            {
                qAdd = "a.app_formno,a.app_formno ";
            }
            string query = "";
            if (applied == 0)
            {
                query = "select  top 100 a.stud_name+'-'+ISNULL(  a.parent_name,'')+'-'+c.Course_Name+'-'+dt.Dept_Name+'-'+" + qAdd + " from applyn a,Registration r ,Degree d,course c,Department dt  where a.app_no=r.app_no and r.degree_code=d.Degree_Code and d.Course_Id=c.Course_Id and d.Dept_Code=dt.Dept_Code and r.Exam_Flag <>'DEBAR' and a.stud_name like '" + prefixText + "%' and r.college_code=" + collegecode1 + "";
                if (distcon == 1)
                    query += " and r.DelFlag =0";
                if (compl == 1)
                    query += " and r.CC=0";
            }
            else
            {
                query = " select top 100 a.stud_name+'-'+ISNULL(  a.parent_name,'')+'-'+c.Course_Name+'-'+dt.Dept_Name+'-'+" + qAdd + " from applyn a,Course C,Degree d,Department dt where a.degree_code=d.Degree_Code and d.Course_Id=c.Course_Id and d.Dept_Code=dt.Dept_Code and a.college_code=" + collegecode1 + " and a.stud_name like '" + prefixText + "%'";
            }

            Hashtable studhash = ws.Getnamevalue(query);
            if (studhash.Count > 0)
            {
                foreach (DictionaryEntry p in studhash)
                {
                    string studname = Convert.ToString(p.Key);
                    name.Add(studname);
                }
            }
            return name;
        }
        catch { return name; }
    }
    protected void getDiscontinue()
    {
        try
        {
            distcon = 0;
            compl = 0;
            if (dirAccess.selectScalarInt("select LinkValue from New_InsSettings where LinkName='IncludeDiscontinuedInJournal' and user_code ='" + usercode + "'  ") == 0)//and college_code ='" + collegecode1 + "'
                distcon = 1;
            if (dirAccess.selectScalarInt("select LinkValue from New_InsSettings where LinkName='IncludeCompletedInJournal' and user_code ='" + usercode + "'  ") == 0)//and college_code ='" + collegecode1 + "'
                compl = 1;
        }
        catch { }
    }
    protected void txt_name_Changed(object sender, EventArgs e)
    {
        try
        {
            string roll_no = Convert.ToString(txt_name.Text);

            if (roll_no != "")
            {
                try
                {
                    string rollno = roll_no.Split('-')[4];
                    roll_no = rollno;
                }
                catch { roll_no = ""; }
            }
            txt_roll.Text = roll_no;
        }
        catch { }
    }
    private bool isStreamEnabled()
    {
        bool enabled = false;
        string chkQ = "select LinkValue from New_InsSettings where LinkName='JournalEnableStreamShift' and user_code ='" + usercode + "' and college_code ='" + collegecode1 + "' ";
        byte val = 0;
        byte.TryParse(d2.GetFunction(chkQ), out val);
        if (val == 1)
            enabled = true;
        return enabled;

    }
    private byte StudentAppliedShorlistAdmit()
    {

        string Q = "select LinkValue from New_InsSettings where LinkName='StudentAppliedShorlistAdmit' and user_code ='" + usercode + "'";
        byte moveVal = 0;
        byte.TryParse(d2.GetFunction(Q.Trim()), out moveVal);
        return moveVal;
    }
    //Code ended by Mohamed Idhris -- Last Modified - 11-06-2016

    #region Rollno and name


    protected void txt_roll_OnTextChanged(object sender, EventArgs e)
    {
        try
        {
            string rollno = Convert.ToString(txt_roll.Text.Trim());
            if (rollno != "")
            {
                if (ddl_type.SelectedItem.Text.Trim() == "Individual(Admitted)")
                {
                    string query = "select   a.stud_name+'-'+ISNULL(  a.parent_name,'')+'-'+c.Course_Name+'-'+dt.Dept_Name as Name from applyn a,Registration r ,Degree d,course c,Department dt  where a.app_no=r.app_no and r.degree_code=d.Degree_Code and d.Course_Id=c.Course_Id and d.Dept_Code=dt.Dept_Code   and r.Exam_Flag <>'DEBAR'  and r.college_code=" + collegecode1 + "";//and r.CC=0 and r.DelFlag =0
                    if (dirAccess.selectScalarInt("select LinkValue from New_InsSettings where LinkName='IncludeDiscontinuedInJournal' and user_code ='" + usercode + "'  ") == 0)//and college_code ='" + collegecode1 + "'
                    {
                        query += "  and r.DelFlag =0 ";
                    }

                    if (dirAccess.selectScalarInt("select LinkValue from New_InsSettings where LinkName='IncludeCompletedInJournal' and user_code ='" + usercode + "'  ") == 0)//and college_code ='" + collegecode1 + "'
                    {
                        query += "  and r.CC=0 ";
                    }
                    if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 0)
                    {
                        query = query + " and r.Roll_no='" + rollno + "' ";
                    }
                    if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 1)
                    {
                        query = query + " and r.Reg_No='" + rollno + "'";
                    }
                    if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 2)
                    {
                        query = query + " and r.Roll_Admit='" + rollno + "' ";
                    }
                    if (Convert.ToInt32(rbl_rollno.SelectedItem.Value) == 3)
                    {
                        query = query + " and a.app_formno='" + rollno + "' ";
                    }
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(query, "Text");
                    if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                    {
                        txt_name.Text = Convert.ToString(ds.Tables[0].Rows[0]["Name"]);
                    }
                    else
                    {
                        txt_name.Text = "";
                    }
                }
                else if (ddl_type.SelectedItem.Text.Trim() == "Individual(Applied)")
                {
                    string query = "select a.stud_name+'-'+ISNULL(  a.parent_name,'')+'-'+c.Course_Name+'-'+dt.Dept_Name as Name from applyn a,Course C,Degree d,Department dt where a.degree_code=d.Degree_Code and d.Course_Id=c.Course_Id and d.Dept_Code=dt.Dept_Code and a.college_code=" + collegecode1 + " and a.app_formno='" + rollno + "'";
                    // query = query + " and a.app_formno='" + rollno + "' ";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(query, "Text");
                    if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                    {
                        txt_name.Text = Convert.ToString(ds.Tables[0].Rows[0]["Name"]);
                    }
                    else
                    {
                        txt_name.Text = "";
                    }
                }
            }
        }
        catch { }
    }

    #endregion

    protected void showLedgerSetting()
    {
        try
        {
            string rghtval = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Show All Ledger' and college_code='" + ddl_college.SelectedItem.Value + "' and user_code='" + usercode + "'");
            if (rghtval == "1")
            {

            }
            else
            {

            }
        }
        catch { }
    }

    private void setLabelText()
    {
        string grouporusercode = string.Empty;
        if (Session["group_code"] != null && (Convert.ToString(Session["group_code"]).Trim() != "") && (Convert.ToString(Session["group_code"]).Trim() != "0") && (Convert.ToString(Session["group_code"]).Trim() != "-1"))
        {
            grouporusercode = " group_code=" + Convert.ToString(Session["group_code"]).Trim() + "";
        }
        else if (Session["usercode"] != null)
        {
            grouporusercode = " usercode=" + Convert.ToString(Session["usercode"]).Trim() + "";
        }
        List<Label> lbl = new List<Label>();
        List<byte> fields = new List<byte>();
        lbl.Add(lbl_collegename);
        lbl.Add(lbl_stream);
        lbl.Add(lbl_course);
        lbl.Add(lbl_dept);
        lbl.Add(lbl_sem);
        fields.Add(0);
        fields.Add(1);
        fields.Add(2);
        fields.Add(3);
        fields.Add(4);
        new HeaderLabelText().setLabels(grouporusercode, ref lbl, fields);
    }

    protected void loadType()
    {
        try
        {
            cbl_type.Items.Clear();
            if (checkSchoolSetting() == 0)
            {
                cbl_type.Items.Add(new ListItem("Old Studnent", "1"));
                cbl_type.Items.Add(new ListItem("New Student", "3"));
                cbl_type.Items.Add(new ListItem("Transfer", "2"));
            }
            else
            {
                cbl_type.Items.Add(new ListItem("Regular", "1"));
                cbl_type.Items.Add(new ListItem("Lateral", "3"));
                cbl_type.Items.Add(new ListItem("Transfer", "2"));
                cbl_type.Items.Add(new ListItem("IrRegular", "4"));
            }
        }
        catch { }
    }

    #region roll,reg,admission setting
    private void RollAndRegSettings()
    {
        try
        {
            DataSet dsl = new DataSet();
            string Master1 = "select * from Master_Settings where usercode=" + Session["usercode"] + "";
            dsl = d2.select_method_wo_parameter(Master1, "text");
            Session["Rollflag"] = "0";
            Session["Regflag"] = "0";
            Session["Admission"] = "0";
            if (dsl.Tables[0].Rows.Count > 0)
            {
                for (int hf = 0; hf < dsl.Tables[0].Rows.Count; hf++)
                {
                    if (dsl.Tables[0].Rows[hf]["settings"].ToString() == "Roll No" && dsl.Tables[0].Rows[hf]["value"].ToString() == "1")
                    {
                        Session["Rollflag"] = "1";
                    }
                    if (dsl.Tables[0].Rows[hf]["settings"].ToString() == "Register No" && dsl.Tables[0].Rows[hf]["value"].ToString() == "1")
                    {
                        Session["Regflag"] = "1";
                    }
                    if (dsl.Tables[0].Rows[hf]["settings"].ToString() == "Admission No" && dsl.Tables[0].Rows[hf]["value"].ToString() == "1")
                    {
                        Session["Admission"] = "1";
                    }
                }
                settingValueRollAndReg(Convert.ToString(Session["Rollflag"]), Convert.ToString(Session["Regflag"]), Convert.ToString(Session["Admission"]));
            }
        }
        catch { }
    }
    private void settingValueRollAndReg(string rollvalue, string regvalue, string addmis)
    {
        // Tuple<byte, byte>
        string rollval = rollvalue;
        string regval = regvalue;
        string addVal = addmis;
        try
        {
            if (rollval != "" && regval != "")
            {
                if (rollval == "0" && regval == "0" && addVal == "0")
                    roll = 0;
                else if (rollval == "1" && regval == "1" && addVal == "1")
                    roll = 1;
                else if (rollval == "1" && regval == "0" && addVal == "0")
                    roll = 2;
                else if (rollval == "0" && regval == "1" && addVal == "0")
                    roll = 3;
                else if (rollval == "0" && regval == "0" && addVal == "1")
                    roll = 4;
                else if (rollval == "1" && regval == "1" && addVal == "0")
                    roll = 5;
                else if (rollval == "0" && regval == "1" && addVal == "1")
                    roll = 6;
                else if (rollval == "1" && regval == "0" && addVal == "1")
                    roll = 7;
            }
        }
        catch { }
        // return new Tuple<byte, byte>(roll,reg);

    }

    protected void spreadColumnVisible()
    {
        try
        {
            if (roll == 0)
            {
                FpSpreadstud.Columns[2].Visible = true;
                FpSpreadstud.Columns[3].Visible = true;
                FpSpreadstud.Columns[4].Visible = true;
            }
            else if (roll == 1)
            {
                FpSpreadstud.Columns[2].Visible = true;
                FpSpreadstud.Columns[3].Visible = true;
                FpSpreadstud.Columns[4].Visible = true;
            }
            else if (roll == 2)
            {
                FpSpreadstud.Columns[2].Visible = true;
                FpSpreadstud.Columns[3].Visible = false;
                FpSpreadstud.Columns[4].Visible = false;

            }
            else if (roll == 3)
            {
                FpSpreadstud.Columns[2].Visible = false;
                FpSpreadstud.Columns[3].Visible = true;
                FpSpreadstud.Columns[4].Visible = false;
            }
            else if (roll == 4)
            {
                FpSpreadstud.Columns[2].Visible = false;
                FpSpreadstud.Columns[3].Visible = false;
                FpSpreadstud.Columns[4].Visible = true;
            }
            else if (roll == 5)
            {
                FpSpreadstud.Columns[2].Visible = true;
                FpSpreadstud.Columns[3].Visible = true;
                FpSpreadstud.Columns[4].Visible = false;
            }
            else if (roll == 6)
            {
                FpSpreadstud.Columns[2].Visible = false;
                FpSpreadstud.Columns[3].Visible = true;
                FpSpreadstud.Columns[4].Visible = true;
            }
            else if (roll == 7)
            {
                FpSpreadstud.Columns[2].Visible = true;
                FpSpreadstud.Columns[3].Visible = false;
                FpSpreadstud.Columns[4].Visible = true;
            }
        }
        catch { }
    }

    #endregion
    //discontinue setting query collegecode removed  11.03.2017 sudhagar

    //added by sudhagar disability option 11.03.2017
    protected void cbdisa_CheckedChanged(object sender, EventArgs e)
    {
        if (cbdisa.Checked == true)
        {
            for (int i = 0; i < cbldisa.Items.Count; i++)
            {
                cbldisa.Items[i].Selected = true;
            }
            txtdisa.Text = "Disability(" + (cbldisa.Items.Count) + ")";
        }
        else
        {
            for (int i = 0; i < cbldisa.Items.Count; i++)
            {
                cbldisa.Items[i].Selected = false;
            }
            txtdisa.Text = "--Select--";
        }
    }
    protected void cbldisa_SelectedIndexChanged(object sender, EventArgs e)
    {
        txtdisa.Text = "--Select--";
        cbdisa.Checked = false;
        int commcount = 0;
        for (int i = 0; i < cbldisa.Items.Count; i++)
        {
            if (cbldisa.Items[i].Selected == true)
            {
                commcount = commcount + 1;
            }
        }
        if (commcount > 0)
        {
            txtdisa.Text = "Disability(" + commcount.ToString() + ")";
            if (commcount == cbldisa.Items.Count)
            {
                cbdisa.Checked = true;
            }
        }
    }

    protected void loadDisable()
    {
        try
        {
            cbldisa.Items.Clear();
            cbldisa.Items.Add(new ListItem("Isdisable", "1"));
            cbldisa.Items.Add(new ListItem("Handy", "1"));
            cbldisa.Items.Add(new ListItem("Visualhandy", "1"));
            cbldisa.Items.Add(new ListItem("Islearningdis", "1"));
            cbldisa.Items.Add(new ListItem("Isdisabledisc", "1"));
        }
        catch { }
    }
    protected string getDisable()
    {
        string strDisable = string.Empty;
        try
        {
            for (int row = 0; row < cbldisa.Items.Count; row++)
            {
                if (cbldisa.Items[row].Selected)
                {
                    if (cbldisa.Items[row].Text == "Isdisable")
                    {
                        strDisable = " and( Isdisable='1'";
                    }
                    if (cbldisa.Items[row].Text == "Handy")
                    {
                        if (strDisable == string.Empty)
                            strDisable += " and( Handy='1'";
                        else
                            strDisable += " or Handy='1'";
                    }
                    if (cbldisa.Items[row].Text == "Visualhandy")
                    {
                        if (strDisable == string.Empty)
                            strDisable += " and( Visualhandy='1'";
                        else
                            strDisable += " or Visualhandy='1'";
                    }
                    if (cbldisa.Items[row].Text == "Islearningdis")
                    {
                        if (strDisable == string.Empty)
                            strDisable += " and( Islearningdis='1'";
                        else
                            strDisable += " or Islearningdis='1'";
                    }
                    if (cbldisa.Items[row].Text == "Isdisabledisc")
                    {
                        if (strDisable == string.Empty)
                            strDisable += " and( Isdisabledisc='1'";
                        else
                            strDisable += " or Isdisabledisc='1'";
                    }
                }
            }
            if (!string.IsNullOrEmpty(strDisable))
                strDisable += " )";
        }
        catch { strDisable = string.Empty; }
        return strDisable;
    }

    //added by sudhagar 24.04.2017
    private double checkSchoolSetting()
    {
        double getVal = 0;
        double.TryParse(Convert.ToString(d2.GetFunction("select  value from Master_Settings where settings='schoolorcollege' and usercode='" + usercode + "'")), out getVal);
        return getVal;
    }

    #region financial year
    public void loadfinanceyear()
    {
        try
        {
            string fnalyr = "";
            string getfinanceyear = "select distinct convert(nvarchar(15),FinYearStart,103) sdate,convert(nvarchar(15),FinYearEnd,103) edate,FinYearPK from FM_FinYearMaster where CollegeCode='" + collegecode + "'  order by FinYearPK desc";
            ds.Dispose();
            ds.Reset();
            ddlfinyear.Items.Clear();
            ds = d2.select_method_wo_parameter(getfinanceyear, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    string fdatye = ds.Tables[0].Rows[i]["sdate"].ToString() + '-' + ds.Tables[0].Rows[i]["edate"].ToString();
                    string actid = ds.Tables[0].Rows[i]["FinYearPK"].ToString();
                    ddlfinyear.Items.Insert(0, new System.Web.UI.WebControls.ListItem(fdatye, actid));
                }
            }
        }
        catch (Exception ex)
        {

        }
    }
    #endregion

    #region Common Checkbox and Checkboxlist Event


    private void CallCheckboxChange(CheckBox cb, CheckBoxList cbl, TextBox txt, string dispst, string deft)
    {
        try
        {
            int sel = 0;
            string name = "";
            txt.Text = deft;
            if (cb.Checked == true)
            {
                for (sel = 0; sel < cbl.Items.Count; sel++)
                {
                    cbl.Items[sel].Selected = true;
                    name = Convert.ToString(cbl.Items[sel].Text);
                }
                if (cbl.Items.Count == 1)
                {
                    txt.Text = "" + name + "";
                }
                else
                {
                    txt.Text = dispst + "(" + cbl.Items.Count + ")";
                }
            }
            else
            {
                for (sel = 0; sel < cbl.Items.Count; sel++)
                {
                    cbl.Items[sel].Selected = false;
                }
                txt.Text = deft;
            }
        }
        catch { }
    }
    private void CallCheckboxListChange(CheckBox cb, CheckBoxList cbl, TextBox txt, string dipst, string deft)
    {
        try
        {
            int sel = 0;
            int count = 0;
            string name = "";
            cb.Checked = false;
            for (sel = 0; sel < cbl.Items.Count; sel++)
            {
                if (cbl.Items[sel].Selected == true)
                {
                    count++;
                    name = Convert.ToString(cbl.Items[sel].Text);
                }
            }
            if (count > 0)
            {
                if (count == 1)
                {
                    txt.Text = "" + name + "";
                }
                else
                {
                    txt.Text = dipst + "(" + count + ")";
                }
                if (cbl.Items.Count == count)
                {
                    cb.Checked = true;
                }
            }
        }
        catch { }
    }

    #endregion

    //added by sudhagar fine setting based on new,old and concession students
    protected void cbfine_CheckedChanged(object sender, EventArgs e)
    {
        CallCheckboxChange(cbfine, cblfine, txtfine, "Setting", "--Select--");
    }
    protected void cblfine_SelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckboxListChange(cbfine, cblfine, txtfine, "Setting", "--Select--");
    }
    protected void loadStudentSetting()
    {
        try
        {
            cbfine.Checked = false;
            txtfine.Text = "--Select--";
            cblfine.Items.Clear();
            cblfine.Items.Add(new ListItem("New", "3"));
            cblfine.Items.Add(new ListItem("Old", "1"));
            //cblfine.Items.Add(new ListItem("Concession", "0"));
        }
        catch { }
    }

    //added by sudhagar 06.07.2017 for hostel fees in general allotment
    #region hostel
    protected void loadHostel()
    {
        try
        {
            ds.Clear();
            cblhstlname.Items.Clear();
            cbhstlname.Checked = false;
            txthstlname.Text = "--Select--";
            string MessmasterFK = d2.GetFunction("select value from Master_Settings where settings='Mess Rights' and usercode='" + usercode + "'");
            ds = d2.BindHostelbaseonmessrights_inv(MessmasterFK);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                cblhstlname.DataSource = ds;
                cblhstlname.DataTextField = "HostelName";
                cblhstlname.DataValueField = "HostelMasterPK";
                cblhstlname.DataBind();
                if (cblhstlname.Items.Count > 0)
                {
                    for (int i = 0; i < cblhstlname.Items.Count; i++)
                    {
                        cblhstlname.Items[i].Selected = true;
                    }
                    txthstlname.Text = " Hostel Name(" + cblhstlname.Items.Count + ")";
                    cbhstlname.Checked = true;
                }
            }

        }
        catch
        {
        }
    }
    protected void cbhstlname_checkedchange(object sender, EventArgs e)
    {
        CallCheckboxChange(cbhstlname, cblhstlname, txthstlname, "Hostel", "--Select--");
    }
    protected void cblhstlname_SelectedIndexChange(object sender, EventArgs e)
    {
        CallCheckboxListChange(cbhstlname, cblhstlname, txthstlname, "Hostel", "--Select--");
    }
    #endregion

    #region room type
    protected void loadRoomType()
    {
        try
        {
            cblroomtype.Items.Clear();
            cbroomtype.Checked = false;
            txtroomtype.Text = "--Select--";
            string itemname = "select distinct Room_type from Room_Detail where isnull(room_type,'')<>'' ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(itemname, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cblroomtype.DataSource = ds;
                cblroomtype.DataTextField = "Room_Type";
                cblroomtype.DataValueField = "Room_Type";
                cblroomtype.DataBind();
                if (cblroomtype.Items.Count > 0)
                {
                    for (int i = 0; i < cblroomtype.Items.Count; i++)
                    {
                        cblroomtype.Items[i].Selected = true;
                    }
                    txtroomtype.Text = " Room Type(" + cblroomtype.Items.Count + ")";
                    cbroomtype.Checked = true;
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    protected void cbroomtype_checkedchange(object sender, EventArgs e)
    {
        CallCheckboxChange(cbroomtype, cblroomtype, txtroomtype, "Room Type", "--Select--");
    }
    protected void cblroomtype_SelectedIndexChange(object sender, EventArgs e)
    {
        CallCheckboxListChange(cbroomtype, cblroomtype, txtroomtype, "Room Type", "--Select--");
    }
    #endregion

    //added by sudhagar 07.07.2017 state wise filter

    #region state type
    protected void loadState()
    {
        try
        {
            cblstate.Items.Clear();
            cbstate.Checked = false;
            txtstate.Text = "--Select--";
            string itemname = "select textcode,textval from textvaltable where textcriteria='state' and college_code='" + ddl_college.SelectedValue + "' ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(itemname, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cblstate.DataSource = ds;
                cblstate.DataTextField = "textval";
                cblstate.DataValueField = "textcode";
                cblstate.DataBind();
                if (cblstate.Items.Count > 0)
                {
                    for (int i = 0; i < cblstate.Items.Count; i++)
                    {
                        cblstate.Items[i].Selected = true;
                    }
                    txtstate.Text = " State(" + cblstate.Items.Count + ")";
                    cbstate.Checked = true;
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }
    protected void cbstate_checkedchange(object sender, EventArgs e)
    {
        CallCheckboxChange(cbstate, cblstate, txtstate, "State", "--Select--");
    }
    protected void cblstate_SelectedIndexChange(object sender, EventArgs e)
    {
        CallCheckboxListChange(cbstate, cblstate, txtstate, "State", "--Select--");
    }
    #endregion

    #region scholarship entry
    protected void loadscholarship()
    {
        //ddlsearch.Items.Add(new ListItem("All", "0"));
        try
        {



            ds.Clear();


            string query = "select distinct TextCode,TextVal from TextValTable  where TextCriteria='schol' and college_code='" + ddl_college.SelectedValue + "'";
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {

                ddlsearch.DataSource = ds;

                ddlsearch.DataTextField = "TextVal";
                ddlsearch.DataValueField = "TextCode";
                ddlsearch.DataBind();
                //ddlsearch.Items.Add(new ListItem("All", "0"));

            }

            ddlsearch.Items.Add(new ListItem("All", "0"));
            ddlsearch.Items.Add(new ListItem("First Graduate", "1"));
            ddlsearch.Items.Add(new ListItem("Tuition Fee weiver", "2"));
            ddlsearch.Items.Add(new ListItem("Post Metric Scholarship", "3"));
        }
        catch
        {
        }
    }
    #endregion

    #region Quota
    protected void loadquota()
    {
        try
        {
            ds.Clear();
            cblQuota.Items.Clear();

            string itemheader = "";
            for (int i = 0; i < cbl_seat.Items.Count; i++)
            {
                if (cbl_seat.Items[i].Selected == true)
                {
                    if (itemheader == "")
                    {
                        itemheader = "" + cbl_seat.Items[i].Value.ToString() + "";
                    }
                    else
                    {
                        itemheader = itemheader + "'" + "," + "" + "'" + cbl_seat.Items[i].Value.ToString() + "";
                    }
                }
            }
            if (itemheader.Trim() != "")
            {
                // string deptquery = "select distinct LedgerName,LedgerPK from FM_LedgerMaster l,FM_HeaderMaster h where l.HeaderFK = h.HeaderPK and l.HeaderFK in('" + itemheader + "') and l.LedgerMode='0' and l.CollegeCode =" + collegecode1 + "";
                string degree = Convert.ToString(getCblSelectedValue(cbl_dept));
                //string deptquery = "select distinct cat_code,category_name from seattype_cat where quota in('" + itemheader + "') and  degree_code in('" + degree + "')";
                //select distinct quota from seattype_cat where quota in('" + itemheader + "') and college_code='" + collegecode1 + "';

                string deptquery = "select distinct quotaid,quotaname from stu_quotaseetinges where settype in('" + itemheader + "') and  collegecode in('" + collegecode + "')";//Added by saranya 0n 17/04/2018

                ds.Clear();
                ds = d2.select_method_wo_parameter(deptquery, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cblQuota.DataSource = ds;
                    cblQuota.DataTextField = "quotaname";
                    cblQuota.DataValueField = "quotaid";
                    cblQuota.DataBind();
                    if (cbl_ledger.Items.Count > 0)
                    {
                        for (int i = 0; i < cblQuota.Items.Count; i++)
                        {
                            cblQuota.Items[i].Selected = true;
                        }
                        txtQuota.Text = "Quota(" + cblQuota.Items.Count + ")";
                        cbQuota.Checked = true;
                    }
                }
                else
                {
                    txtQuota.Text = "--Select--";
                    cbQuota.Checked = false;
                }
            }
            else
            {
                txtQuota.Text = "--Select--";
                cbQuota.Checked = false;
            }
        }
        catch
        {
        }
    }
    protected void cbQuota_checkedchange(object sender, EventArgs e)
    {
        string ledgername = "";
        if (cbQuota.Checked == true)
        {
            for (int i = 0; i < cblQuota.Items.Count; i++)
            {
                cblQuota.Items[i].Selected = true;
                ledgername = Convert.ToString(cblQuota.Items[i].Text);
            }
            if (cblQuota.Items.Count == 1)
            {
                txtQuota.Text = "" + ledgername + "";
            }
            else
            {
                txtQuota.Text = "Quota (" + (cblQuota.Items.Count) + ")";
            }
            // txt_ledger.Text = "Ledger(" + (cbl_ledger.Items.Count) + ")";
        }
        else
        {
            for (int i = 0; i < cblQuota.Items.Count; i++)
            {
                cblQuota.Items[i].Selected = false;
            }
            txtQuota.Text = "--Select--";
        }

    }
    protected void cblQuota_SelectedIndexChange(object sender, EventArgs e)
    {
        string ledgername = "";
        txtQuota.Text = "--Select--";
        cbQuota.Checked = false;
        int commcount = 0;
        for (int i = 0; i < cblQuota.Items.Count; i++)
        {
            if (cblQuota.Items[i].Selected == true)
            {
                commcount = commcount + 1;
                ledgername = Convert.ToString(cblQuota.Items[i].Text);
            }
        }
        if (commcount > 0)
        {
            //   txt_ledger.Text = "Ledger(" + commcount.ToString() + ")";
            if (commcount == cblQuota.Items.Count)
            {
                cbQuota.Checked = true;
            }
            if (commcount == 1)
            {
                txtQuota.Text = "" + ledgername + "";
            }
            else
            {
                txtQuota.Text = "Quota (" + commcount.ToString() + ")";
            }
        }

    }

    #endregion

    private string getCblSelectedText(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder selectedText = new System.Text.StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (selectedText.Length == 0)
                    {
                        selectedText.Append(Convert.ToString(cblSelected.Items[sel].Text));
                    }
                    else
                    {
                        selectedText.Append("','" + Convert.ToString(cblSelected.Items[sel].Text));
                    }
                }
            }
        }
        catch { cblSelected.Items.Clear(); }
        return selectedText.ToString();
    }

    //Added by saranya for multiple concession

    public void txtNoCon_OnTextChanged(object sender, EventArgs e)
    {
        int Concession = 0;
        Concession = Convert.ToInt32(txtNoConcession.Text);
        if (Concession > 3)
        {
            FpSpread1.Visible = false;
            divBtns.Visible = false;
            imgdiv2.Visible = true;
            lbl_erroralert.Visible = true;
            lbl_erroralert.Text = "Maximum Concession range is 3";
        }

    }
    #region fine perdaysetting
    public void bindGrid()
    {
        ArrayList addnew = new ArrayList();
        addnew.Add("1");
        DataTable dt = new DataTable();
        dt.Columns.Add("Sno");

        dt.Columns.Add("Header Name");
        dt.Columns.Add("Ledger Name");
        dt.Columns.Add("Amount");
        dt.Columns.Add("DueDate");
        DataRow dr;
        for (int row = 0; row < addnew.Count; row++)
        {
            dr = dt.NewRow();
            dr[0] = addnew[row].ToString();
            dt.Rows.Add(dr);
        }
        if (dt.Rows.Count > 0)
        {
            ViewState["CurrentTable"] = dt;
            gdReport.DataSource = dt;
            //gridView2.DataSource = dt;
            //gridView2.DataBind();
            gdReport.DataBind();
        }
    }
    protected void Marksgrid_pg_DataBound(object sender, EventArgs e)
    {
        try
        {
            string collegecode = string.Empty;
            //string usercode = ddluser.SelectedValue;
            collegecode = Convert.ToString(ddl_college.SelectedItem.Value);

            (gdReport.Rows[0].FindControl("ddl_headername") as DropDownList).Items.Clear();
            (gdReport.Rows[0].FindControl("ddl_ledgername") as DropDownList).Items.Clear();
            if (gdReport.Rows.Count > 0)
            {
                // lbl_er.Visible = false;
                for (int a = 0; a < gdReport.Rows.Count; a++)
                {
                    // string englisquery = "select HeaderPK,HeaderName from FM_HeaderMaster where CollegeCode ='" + collegecode1 + "'";

                    string englisquery = " SELECT HeaderPK,HeaderName FROM FM_HeaderMaster H,FS_HeaderPrivilage P WHERE H.HeaderPK = P.HeaderFK AND P.CollegeCode = H.CollegeCode AND P. UserCode = " + usercode + " AND H.CollegeCode = " + collegecode + "  ";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(englisquery, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        (gdReport.Rows[a].FindControl("ddl_headername") as DropDownList).DataSource = ds;
                        (gdReport.Rows[a].FindControl("ddl_headername") as DropDownList).DataTextField = "HeaderName";
                        (gdReport.Rows[a].FindControl("ddl_headername") as DropDownList).DataValueField = "HeaderPK";
                        (gdReport.Rows[a].FindControl("ddl_headername") as DropDownList).DataBind();
                    }
                    (gdReport.Rows[a].FindControl("ddl_headername") as DropDownList).Items.Insert(0, "Select");


                    //  lbl_er.Visible = false;
                    //  englisquery = "select LedgerPK,LedgerName from FM_LedgerMaster where CollegeCode='" + collegecode1 + "' and LedgerMode=1 order by isnull(priority,1000), ledgerName asc";
                    //int n = Convert.ToInt32(e.CommandArgument);
                    //DropDownList strhdname = (DropDownList)gridView1.Rows[n].FindControl("ddl_headername");
                    englisquery = " SELECT LedgerPK,LedgerName FROM FM_LedgerMaster L,FS_LedgerPrivilage P WHERE L.LedgerPK = P.LedgerFK   AND P.CollegeCode = L.CollegeCode AND P. UserCode = " + usercode + " AND  Ledgermode='0' and L.CollegeCode = " + collegecode + "    order by isnull(l.priority,1000), l.ledgerName asc ";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(englisquery, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        (gdReport.Rows[a].FindControl("ddl_ledgername") as DropDownList).DataSource = ds;
                        (gdReport.Rows[a].FindControl("ddl_ledgername") as DropDownList).DataTextField = "LedgerName";
                        (gdReport.Rows[a].FindControl("ddl_ledgername") as DropDownList).DataValueField = "LedgerPK";
                        (gdReport.Rows[a].FindControl("ddl_ledgername") as DropDownList).DataBind();
                    }
                    (gdReport.Rows[a].FindControl("ddl_ledgername") as DropDownList).Items.Insert(0, "Select");

                }

                //Div5.Visible = true;
            }
        }
        catch
        {

        }


    }
    public void btnaddgrid_Click(object sender, EventArgs e)
    {
        try
        {
            bool emptyflage = false;
            if (gdReport.Rows.Count > 0)
            {

                DropDownList box1 = new DropDownList();
                DropDownList box2 = new DropDownList();


                TextBox box3 = new TextBox();
                TextBox box4 = new TextBox();

                for (int i = 0; i < gdReport.Rows.Count; i++)
                {
                    //box1 = (CheckBoxList)gdReport.Rows[i].Cells[1].FindControl("Kit_name");
                    box1 = (DropDownList)gdReport.Rows[i].Cells[1].FindControl("ddl_headername");
                    box2 = (DropDownList)gdReport.Rows[i].Cells[2].FindControl("ddl_ledgername");
                    box3 = (TextBox)gdReport.Rows[i].Cells[3].FindControl("txtpaymt");
                    box4 = (TextBox)gdReport.Rows[i].Cells[4].FindControl("dateset");

                    if (box1.Text != "Select" && box2.Text != "Select" && box4.Text.Trim() != "" && box3.Text.Trim() != "")
                    {
                        if (box4.Text != "" && box1.Text != "" && box2.Text != "" && box3.Text.Trim() != "")
                            emptyflage = false;
                        else
                            emptyflage = true;
                    }
                    else
                        emptyflage = true;
                }

            }
            //.style.borderColor = 'Red'
            if (emptyflage == true)
                ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"Please Fill All The Fields\");", true);
            else
            {
                AddNewRowToGrid();
                Marksgrid_pg_DataBound(sender, e);
                // gridView1_OnRowCommand(sender, e);                
                SetPreviousData1();
            }
        }
        catch
        {
        }
    }
    public void AddNewRowToGrid()
    {
        int rowIndex = 0;

        if (ViewState["CurrentTable"] != null)
        {
            DataTable dtCurrentTable = (DataTable)ViewState["CurrentTable"];
            DataRow drCurrentRow = null;
            // CheckBoxList box = new CheckBoxList();
            DropDownList box1 = new DropDownList();
            DropDownList box2 = new DropDownList();
            TextBox box4 = new TextBox();
            TextBox box3 = new TextBox();


            if (dtCurrentTable.Rows.Count > 0)
            {

                for (int i = 0; i < dtCurrentTable.Rows.Count; i++)
                {
                    //extract the TextBox values

                    box1 = (DropDownList)gdReport.Rows[i].Cells[1].FindControl("ddl_headername");
                    box2 = (DropDownList)gdReport.Rows[i].Cells[2].FindControl("ddl_ledgername");
                    box3 = (TextBox)gdReport.Rows[i].Cells[3].FindControl("txtpaymt");
                    box4 = (TextBox)gdReport.Rows[i].Cells[4].FindControl("dateset");
                    //  drCurrentRow["RowNumber"] = i + 1;
                    drCurrentRow = dtCurrentTable.NewRow();
                    dtCurrentTable.Rows[i][0] = Convert.ToString(i + 1);
                    dtCurrentTable.Rows[i][1] = box1.Text;
                    dtCurrentTable.Rows[i][2] = box2.Text;
                    dtCurrentTable.Rows[i][3] = box3.Text;
                    dtCurrentTable.Rows[i][4] = box4.Text;

                    rowIndex++;
                }



                dtCurrentTable.Rows.Add(drCurrentRow);
                ViewState["CurrentTable"] = dtCurrentTable;

                gdReport.DataSource = dtCurrentTable;
                gdReport.DataBind();
            }
        }
        else
        {
            ScriptManager.RegisterStartupScript(base.Page, this.GetType(), ("dialogJavascript" + this.ID), "alert(\"View State Null\");", true);
            // ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('View State Null')", true);
        }
        //
        // SetPreviousData1();
    }
    public void SetPreviousData1()
    {
        int rowIndex = 0;
        if (ViewState["CurrentTable"] != null)
        {
            DataTable dt = (DataTable)ViewState["CurrentTable"];
            Hashtable hashlist = new Hashtable();
            if (dt.Rows.Count > 0)
            {
                //CheckBoxList box = new CheckBoxList();
                DropDownList box1 = new DropDownList();
                DropDownList box2 = new DropDownList();
                TextBox box4 = new TextBox();
                TextBox box3 = new TextBox();
                Label lbl = new Label();

                hashlist.Add(0, "Sno");

                hashlist.Add(1, "Header Name");
                hashlist.Add(2, "Ledger Name");
                hashlist.Add(3, "Amount");
                hashlist.Add(4, "Date");

                DataRow dr;

                for (int i = 0; i < dt.Rows.Count; i++)
                {

                    //box = (CheckBoxList)gdReport.Rows[i].Cells[1].FindControl("Kit_name");
                    box1 = (DropDownList)gdReport.Rows[i].Cells[1].FindControl("ddl_headername");
                    box2 = (DropDownList)gdReport.Rows[i].Cells[2].FindControl("ddl_ledgername");
                    box3 = (TextBox)gdReport.Rows[i].Cells[3].FindControl("txtpaymt");
                    box4 = (TextBox)gdReport.Rows[i].Cells[4].FindControl("dateset");
                    lbl = (Label)gdReport.Rows[i].Cells[4].FindControl("lbl_rs");
                    string val_file = Convert.ToString(hashlist[i]);
                    lbl.Text = Convert.ToString(i + 1);
                    //  ddlBatch_year.SelectedIndex = ddlBatch_year.Items.IndexOf(ddlBatch_year.Items.FindByText(Convert.ToString(Batch_year)));
                    //string kit = dt.Rows[i][1].ToString();
                    string hedid = dt.Rows[i][1].ToString();
                    string ledgid = dt.Rows[i][2].ToString();
                    // box.SelectedIndex = box.Items.IndexOf(box.Items.FindByValue(Convert.ToString(dt.Rows[i][1])));
                    box1.SelectedIndex = box1.Items.IndexOf(box1.Items.FindByValue(Convert.ToString(dt.Rows[i][1])));
                    gridledgerload(hedid, i);
                    box2.SelectedIndex = box2.Items.IndexOf(box2.Items.FindByValue(Convert.ToString(dt.Rows[i][2])));
                    // box1.Text = dt.Rows[i][1].ToString();
                    //  box2.Text = dt.Rows[i][2].ToString();
                    box3.Text = dt.Rows[i][3].ToString();
                    box4.Text = dt.Rows[i][4].ToString();
                    rowIndex++;
                }



            }
        }
    }
    protected void gridledgerload(string hedid, int n)
    {
        try
        {
            lbl_er.Visible = false;
            string strdname = "";
            //string collegecode = string.Empty;
            // string usercode = ddluser.SelectedValue;

            string englisquery = " SELECT LedgerPK,LedgerName FROM FM_LedgerMaster L,FS_LedgerPrivilage P WHERE L.LedgerPK = P.LedgerFK   AND P.CollegeCode = L.CollegeCode AND P. UserCode = " + usercode + "   and L.CollegeCode = " + collegecode + "  and LedgerMode=1 and l.HeaderFK ='" + hedid + "'   order by isnull(l.priority,1000), l.ledgerName asc ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(englisquery, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {

                (gdReport.Rows[n].FindControl("ddl_ledgername") as DropDownList).DataSource = ds;
                (gdReport.Rows[n].FindControl("ddl_ledgername") as DropDownList).DataTextField = "LedgerName";
                (gdReport.Rows[n].FindControl("ddl_ledgername") as DropDownList).DataValueField = "LedgerPK";
                (gdReport.Rows[n].FindControl("ddl_ledgername") as DropDownList).DataBind();

                (gdReport.Rows[n].FindControl("ddl_ledgername") as DropDownList).Items.Insert(0, "Select");
                lbl_er.Visible = false;
            }
            else
            {
                (gdReport.Rows[n].FindControl("ddl_ledgername") as DropDownList).Items.Insert(0, "Select");
            }
        }
        catch { }
    }

    //protected void cbHeadername_CheckedChanged(object sender, EventArgs e)
    //{
    //    if (cbHeadername.Checked == true)
    //    {
    //        for (int i = 0; i < cblHeadername.Items.Count; i++)
    //        {
    //            cblHeadername.Items[i].Selected = true;
    //        }
    //        txtHeaderName.Text = "Header (" + (cblHeadername.Items.Count) + ")";
    //    }
    //    else
    //    {
    //        for (int i = 0; i < cblHeadername.Items.Count; i++)
    //        {
    //            cblHeadername.Items[i].Selected = false;
    //        }
    //        txtHeaderName.Text = "--Select--";
    //    }
    //    loadledgername ();
    //}
    //protected void cblHeadername_SelectedIndexChanged(object sender, EventArgs e)
    //{
    //    txtHeaderName.Text = "--Select--";
    //    cbHeadername.Checked = false;
    //    int commcount = 0;
    //    for (int i = 0; i < cblHeadername.Items.Count; i++)
    //    {
    //        if (cblHeadername.Items[i].Selected == true)
    //        {
    //            commcount = commcount + 1;
    //        }
    //    }
    //    if (commcount > 0)
    //    {
    //        txtHeaderName.Text = "Header(" + commcount.ToString() + ")";
    //        if (commcount == cblHeadername.Items.Count)
    //        {
    //            cbHeadername.Checked = true;
    //        }
    //    }
    //    loadledgername();
    //}
    //protected void cbledgername_CheckedChanged(object sender, EventArgs e)
    //{
    //    if (cbledgername.Checked == true)
    //    {
    //        for (int i = 0; i < cblledgername.Items.Count; i++)
    //        {
    //            cblledgername.Items[i].Selected = true;
    //        }
    //        txtLedgername.Text = "Ledger(" + (cblledgername.Items.Count) + ")";
    //    }
    //    else
    //    {
    //        for (int i = 0; i < cblledgername.Items.Count; i++)
    //        {
    //            cblledgername.Items[i].Selected = false;
    //        }
    //        txtLedgername.Text = "--Select--";
    //    }
    //}
    //protected void cblledgername_SelectedIndexChanged(object sender, EventArgs e)
    //{
    //    txtLedgername.Text = "--Select--";
    //    cbledgername.Checked = false;
    //    int commcount = 0;
    //    for (int i = 0; i < cblledgername.Items.Count; i++)
    //    {
    //        if (cblledgername.Items[i].Selected == true)
    //        {
    //            commcount = commcount + 1;
    //        }
    //    }
    //    if (commcount > 0)
    //    {
    //        txtLedgername.Text = "Ledger(" + commcount.ToString() + ")";
    //        if (commcount == cblledgername.Items.Count)
    //        {
    //            cbledgername.Checked = true;
    //        }
    //    }
    //}

    //protected void SaveSetting_click(object sender, EventArgs e)
    //{
    //    string headerid = string.Empty;
    //    string ledgerid = string.Empty;
    //    string amount = string.Empty;
    //    headerid = getCblSelectedValue(cblHeadername);
    //    ledgerid = getCblSelectedValue(cblledgername);
    //    amount = txtbalamtabove.Text;

    //}

    protected void gdReport_OnRowDataBound(object sender, GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                e.Row.Cells[1].Attributes["Onchange"] = Page.ClientScript.GetPostBackEventReference(gdReport, "Select$" + e.Row.RowIndex);


            }
        }
        catch
        {

        }
    }
    protected void gdReport_OnRowCommand(object sender, GridViewCommandEventArgs e)
    {
        lbl_er.Visible = false;
        string strdname = "";
        string collegecode = string.Empty;
        collegecode = ddl_college.SelectedItem.Value;
        int n = Convert.ToInt32(e.CommandArgument);
        DropDownList strhdname = (DropDownList)gdReport.Rows[n].FindControl("ddl_headername");
        (gdReport.Rows[n].FindControl("ddl_ledgername") as DropDownList).Items.Clear();
        // string englisquery = "select LedgerPK,LedgerName from FM_LedgerMaster where CollegeCode='" + collegecode1 + "' and LedgerMode=1 and HeaderFK ='" + strhdname.SelectedItem.Value + "' order by isnull(priority,1000),ledgerName asc";

        string englisquery = "SELECT LedgerPK,LedgerName FROM FM_LedgerMaster L,FS_LedgerPrivilage P WHERE L.LedgerPK = P.LedgerFK   AND P.CollegeCode = L.CollegeCode AND P. UserCode = " + usercode + " AND  Ledgermode='0' and L.CollegeCode = " + collegecode + " and l.HeaderFK ='" + strhdname.SelectedItem.Value + "'    order by isnull(l.priority,1000), l.ledgerName asc";
        ds.Clear();
        ds = d2.select_method_wo_parameter(englisquery, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {

            (gdReport.Rows[n].FindControl("ddl_ledgername") as DropDownList).DataSource = ds;
            (gdReport.Rows[n].FindControl("ddl_ledgername") as DropDownList).DataTextField = "LedgerName";
            (gdReport.Rows[n].FindControl("ddl_ledgername") as DropDownList).DataValueField = "LedgerPK";
            (gdReport.Rows[n].FindControl("ddl_ledgername") as DropDownList).DataBind();

            (gdReport.Rows[n].FindControl("ddl_ledgername") as DropDownList).Items.Insert(0, "Select");
            lbl_er.Visible = false;
        }
        else
        {
            (gdReport.Rows[n].FindControl("ddl_ledgername") as DropDownList).Items.Insert(0, "Select");
        }
        //try
        //{

        //    if (gridView1.Rows.Count > 0)
        //    {

        //        for (int a = 0; a < gridView1.Rows.Count; a++)
        //        {
        //            //academic year

        //            (gridView1.Rows[a].FindControl("ddl_kitname") as DropDownList).Items.Clear();

        //            (gridView1.Rows[a].FindControl("ddl_kitname") as DropDownList).DataSource = dtYear;
        //            (gridView1.Rows[a].FindControl("ddl_kitname") as DropDownList).DataTextField = "Academic_Year";
        //            (gridView1.Rows[a].FindControl("ddl_kitname") as DropDownList).DataValueField = "Academic_Year";
        //            (gridView1.Rows[a].FindControl("ddl_kitname") as DropDownList).DataBind();

        //            //(gdSetting.Rows[a].FindControl("ddlBatch") as DropDownList).Items.Insert(0, "Select");
        //            //batch year
        //            (gridView1.Rows[a].FindControl("ddl_headername") as DropDownList).Items.Clear();

        //            (gridView1.Rows[a].FindControl("ddl_headername") as DropDownList).DataSource = dsBatch;
        //            (gridView1.Rows[a].FindControl("ddl_headername") as DropDownList).DataTextField = "Batch_year";
        //            (gridView1.Rows[a].FindControl("ddl_headername") as DropDownList).DataValueField = "Batch_year";
        //            (gridView1.Rows[a].FindControl("ddl_headername") as DropDownList).DataBind();

        //            // (gdSetting.Rows[a].FindControl("ddlBatch") as DropDownList).Items.Insert(0, "Select");
        //            //feecategory 
        //            (gridView1.Rows[a].FindControl("ddl_ledgername") as CheckBoxList).Items.Clear();


        //            (gridView1.Rows[a].FindControl("ddl_ledgername") as CheckBoxList).DataSource = dsTemp;
        //            (gridView1.Rows[a].FindControl("ddl_ledgername") as CheckBoxList).DataTextField = "TextVal";
        //            (gridView1.Rows[a].FindControl("ddl_ledgername") as CheckBoxList).DataValueField = "TextVal";
        //            (gridView1.Rows[a].FindControl("ddl_ledgername") as CheckBoxList).DataBind();

        //            // (gdSetting.Rows[a].FindControl("ddlFeecat") as DropDownList).Items.Insert(0, "Select");
        //        }
        //    }
        //}
        //catch
        //{ }

    }

    protected void btnSave_Click(object sender, EventArgs e)
    {
        int save = 0;


        foreach (GridViewRow gdRow in gdReport.Rows)
        {

            DropDownList headername = (DropDownList)gdRow.FindControl("ddl_headername");
            DropDownList ledgername = (DropDownList)gdRow.FindControl("ddl_ledgername");
            TextBox Amount = (TextBox)gdRow.FindControl("txtpaymt");
            TextBox date = (TextBox)gdRow.FindControl("dateset");
            if (headername.Items.Count > 0 && ledgername.Items.Count > 0)
            {
                for (int row = 0; row < gdReport.Rows.Count; row++)
                {

                    //string kit = Convert.ToString(kit_name.Items[row].Value);
                    string header = Convert.ToString(headername.SelectedItem.Value);
                    string ledger = Convert.ToString(ledgername.SelectedItem.Value);
                    string amt = Amount.Text;
                    //DateTime  datedue = date.Text;
                    string[] due = date.Text.Split('/');
                    //string[] dtchkddsplit = txt_date1.Text.Split('/');
                    DateTime datedue = Convert.ToDateTime(due[1] + "/" + due[0] + "/" + due[2]);
                    string sql = string.Empty;
                    //sql = "insert into inventorykit(kitid,headerid,ledgerid,amt,collegecode,usercode,CommonOrIndividual)values('" + kit + "','" + header + "','" + ledger + "','" + amt + "','" + collegecode + "','" + usercode + "','0')";
                    sql = "if exists(select * from ft_perdayindividualsetting where headerfk='" + header + "' and ledgerfk='" + ledger + "')update ft_perdayindividualsetting set amount='" + amt + "' where headerfk='" + header + "' and ledgerfk='" + ledger + "' else insert into ft_perdayindividualsetting (headerfk,ledgerfk,amount,duedate)values('" + header + "','" + ledger + "','" + amt + "','" + datedue + "')";
                    save = d2.update_method_wo_parameter(sql, "Text");
                }

            }
        }


        if (save == 1)
        {
            lbl_erroralert.Visible = true;

            lbl_erroralert.Text = "Saved Successfully";
        }
        else
        {
            lbl_erroralert.Visible = true;
            lbl_erroralert.Text = "Not Saved";
        }

    }
    #endregion

    public void feesshow()
    {
        gdReport.Visible = true;
        DataRow drReport;
        DataTable dtReport = new DataTable();
        dtReport.Columns.Add("Sno");

        dtReport.Columns.Add("headername");
        //dtReport.Columns.Add("headerid");
        dtReport.Columns.Add("ledgername");
        //dtReport.Columns.Add("ledgerid");


        // dtReport.Columns.Add("kitid");
        dtReport.Columns.Add("amount");
        dtReport.Columns.Add("duedate");
        collegecode = ddl_college.SelectedItem.Value;
        //string usercode = ddluser.SelectedValue;
        string sql = "select amount,headername,ledgername,duedate from ft_perdayindividualsetting i,FM_HeaderMaster h ,FM_LedgerMaster l where h.HeaderPK =i.headerfk and l.LedgerPK =i.ledgerfk";
        DataSet ds = new DataSet();
        ds = d2.select_method_wo_parameter(sql, "text");


        int Sno = 0;
        if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
        {
            gdReport.DataSource = ds.Tables[0];


            DataTable dtkit = ds.Tables[0].DefaultView.ToTable(true, "headername", "ledgername", "amount", "duedate");
            if (dtkit.Rows.Count > 0)
            {
                for (int row = 0; row < dtkit.Rows.Count; row++)
                {
                    Sno++;
                    drReport = dtReport.NewRow();
                    drReport["Sno"] = Convert.ToString(Sno);
                    // drReport["kitname"] = Convert.ToString(dtkit.Rows[row]["MasterValue"]);
                    drReport["headername"] = Convert.ToString(dtkit.Rows[row]["headername"]);
                    drReport["ledgername"] = Convert.ToString(dtkit.Rows[row]["ledgername"]);
                    drReport["amount"] = Convert.ToString(dtkit.Rows[row]["amount"]);
                    drReport["duedate"] = Convert.ToString(dtkit.Rows[row]["duedate"]);
                    dtReport.Rows.Add(drReport);
                    //string kitname = Convert.ToString(dtkit.Rows[row]["MasterValue"]);
                    string headername = Convert.ToString(dtkit.Rows[row]["headername"]);
                    string ledgername = Convert.ToString(dtkit.Rows[row]["ledgername"]);
                    string amount = Convert.ToString(dtkit.Rows[row]["amount"]);
                    string duedate = Convert.ToString(dtkit.Rows[row]["duedate"]);

                    DropDownList header = (DropDownList)gdReport.Rows[row].FindControl("ddl_headername");
                    DropDownList ledger = (DropDownList)gdReport.Rows[row].FindControl("ddl_ledgername");
                    TextBox txtamtvalue = (TextBox)gdReport.Rows[row].FindControl("txtpaymt");
                    TextBox datevalue = (TextBox)gdReport.Rows[row].FindControl("dateset");

                    header.SelectedItem.Text = headername;
                    ledger.SelectedItem.Text = ledgername;
                    txtamtvalue.Text = amount;
                    datevalue.Text = duedate;

                }


            }
        }
    }
}