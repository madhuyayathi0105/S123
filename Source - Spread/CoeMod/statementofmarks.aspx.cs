using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.UI.WebControls;
using Gios.Pdf;
using InsproDataAccess;
using System.Configuration;

public partial class statementofmarks : System.Web.UI.Page
{
    DAccess2 d2 = new DAccess2();
    DAccess2 da = new DAccess2();

    DataSet ds = new DataSet();
    DataSet ds1 = new DataSet();

    Hashtable has = new Hashtable();
    Hashtable hat = new Hashtable();
    Hashtable hashmark = new Hashtable();
    bool isMPhil = false;
    string group_user = string.Empty;
    string singleuser = string.Empty;
    string usercode = string.Empty;
    string collegecode = string.Empty;
    string grouporusercode = string.Empty;
    int min;
    bool flag_true = false;

    ArrayList alv = new ArrayList();
    ArrayList rights = new ArrayList();

    ReuasableMethods reuse = new ReuasableMethods();
    InsproDirectAccess dirAcc = new InsproDirectAccess();
    InsproStoreAccess storeAcc = new InsproStoreAccess();
    Dictionary<string, string> dicParam = new Dictionary<string, string>();

    string collegeCode = string.Empty;
    string degreeCode = string.Empty;
    string batchYear = string.Empty;
    string courseId = string.Empty;
    string examMonth = string.Empty;
    string examYear = string.Empty;

    string qryCollegeCode = string.Empty;
    string qryDegreeCode = string.Empty;
    string qryBatchYear = string.Empty;
    string qryCourseId = string.Empty;
    string qryExamMonth = string.Empty;
    string qryExamYear = string.Empty;
    string gradenec = string.Empty;

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            lblerror.Visible = false;
            //****************************************************//
            if (Session["collegecode"] == null)
            {
                Response.Redirect("~/Default.aspx");
            }

            if (!Request.FilePath.Contains("CoeHome"))
            {
                string strPreviousPage = "";
                if (Request.UrlReferrer != null)
                {
                    strPreviousPage = Request.UrlReferrer.Segments[Request.UrlReferrer.Segments.Length - 1];
                }
                if (strPreviousPage == "")
                {
                    Response.Redirect("~/CoeMod/CoeHome.aspx");
                    return;
                }
            }
            //****************************************************//

            if (!IsPostBack)
            {
                txtDuplicateNumber.Text = string.Empty;
                divDuplicate.Visible = false;
                chkDuplicateMarksheet.Checked = false;
                txtDuplicateNumber.Enabled = false;
                txtdop.Attributes.Add("ReadOnly", "ReadOnly");
                txtdoi.Attributes.Add("ReadOnly", "ReadOnly");
                txtDuplicateDate.Attributes.Add("ReadOnly", "ReadOnly");
                txtdop.Text = DateTime.Now.ToString("dd/MM/yyyy");
                txtdoi.Text = DateTime.Now.ToString("dd/MM/yyyy");
                txtDuplicateDate.Text = DateTime.Now.ToString("dd/MM/yyyy");
                FarPoint.Web.Spread.StyleInfo style2 = new FarPoint.Web.Spread.StyleInfo();
                style2.Font.Size = 13;
                style2.Font.Name = "Trebuchet MS";
                style2.Font.Bold = true;
                style2.HorizontalAlign = HorizontalAlign.Center;
                style2.ForeColor = Color.White;
                style2.BackColor = Color.Teal;
                FpSpread2.Sheets[0].ColumnHeader.DefaultStyle = new FarPoint.Web.Spread.StyleInfo(style2);
                string grouporusercodeset = string.Empty;
                // ddlreport.Items.Add(new ListItem(""));
                rights.Clear();
                if (Session["group_code"] != null && (Convert.ToString(Session["group_code"]).Trim() != "") && (Convert.ToString(Session["group_code"]).Trim() != "0") && (Convert.ToString(Session["group_code"]).Trim() != "-1"))
                {
                    grouporusercode = " group_code='" + Convert.ToString(Session["group_code"]).Trim().Split(';')[0] + "'";
                    grouporusercodeset = " group_code='" + Convert.ToString(Session["group_code"]).Trim().Split(';')[0] + "'";
                }
                else if (Session["usercode"] != null)
                {
                    grouporusercode = " user_code='" + Convert.ToString(Session["usercode"]).Trim() + "'";
                    grouporusercodeset = " usercode='" + Convert.ToString(Session["usercode"]).Trim().Trim() + "'";
                }
                Session["Rollflag"] = "0";
                Session["Regflag"] = "0";
                string Master = "select * from Master_Settings where " + grouporusercodeset + "";
                ds = d2.select_method(Master, hat, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        if (Convert.ToString(ds.Tables[0].Rows[i]["settings"]).Trim() == "Roll No" && Convert.ToString(ds.Tables[0].Rows[i]["value"]).Trim() == "1")
                        {
                            Session["Rollflag"] = "1";
                        }
                        if (Convert.ToString(ds.Tables[0].Rows[i]["settings"]).Trim() == "Register No" && Convert.ToString(ds.Tables[0].Rows[i]["value"]).Trim() == "1")
                        {
                            Session["Regflag"] = "1";
                        }
                    }
                }
                grouporusercode = grouporusercode + " and rights_code in (80074,80075,80076,80077)";
                ds.Clear();
                ds = da.select_method_wo_parameter("select rights_code from security_user_right where " + grouporusercode + " ", "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        rights.Add(Convert.ToString(ds.Tables[0].Rows[i][0]).Trim());
                    }
                }


                #region NEW COLLEGE

                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("Certificate Course Mark Sheet", "0"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("Gradebased Consolidated", "1"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("Markbased Consolidated Format 1", "2"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("UG Mark Statement Format 1", "3"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("UG Mark Statement Format 2", "4"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("UG Mark Statement Format 3", "18"));

                #endregion NEW COLLEGE

                #region NOORUL ISLAM COLLEGE

                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("UG Mark Statement Format 4", "6"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("Markbased Consolidated Format 2", "7"));

                #endregion NOORUL ISLAM COLLEGE

                #region MCC COLLEGE

                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("UG Marks & Grades Based Consolidated Format 3", "8"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("Marksheet Community Format", "17"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("UG Mark Statement Format", "5"));

                #endregion MCC COLLEGE

                #region CHRISTOPHER FORMATS

                //---------------------------- START CHRISTOPHER COLLEGE FORMATS ----------------------------

                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("UG\\PG Mark Statement Format 5", "9"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("UG\\PG Mark Statement Format 6 (Practical)", "10")); //Chritopher
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("MPhil Mark Statement Format", "19"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("UG\\PG Consolidate Mark Statement Format 4", "11"));

                //---------------------------- ENDED CHRISTOPHER COLLEGE FORMATS ----------------------------ugmarkstatementformatForMphil()

                #endregion CHRISTOPHER FORMATS

                #region JAMAL (JMC) FORMATS

                //---------------------------- START JAMAL(JMC) COLLEGE FORMATS ----------------------------

                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("UG\\PG & MPhil Mark Statement Format-Jamal", "20"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("UG\\PG & MPhil Consolidated Mark Statement Format-Jamal", "21"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("UG\\PG Mark Statement Format 7", "12"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("MPhil. Mark Statement Format 1", "15"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("UG Consolidate Mark Statement Format 6 ", "13"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("PG Consolidate Mark Statement Format 7 ", "14"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("MPhil Consolidate Mark Statement Format 8 ", "16"));

                //---------------------------- ENDED JAMAL(JMC) COLLEGE FORMATS ----------------------------

                #endregion JAMAL (JMC) FORMATS

                //magesh 5/1/18
                #region mahendra(MEC) FORMATS
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("Statement Of Mark Sheet-Mahendra ", "23"));
                #endregion mahendra(MEC) FORMATS  //magesh 5/1/18

                //magesh 23.1.18
                #region SNS FORMATS
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("Grade Sheet-SNS ", "24"));
                //magesh 22/2/18
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("Choice Based Grade System-SNS ", "25"));//magesh 22/2/18
                #endregion SNS FORMATS  //magesh 23/1/18

                //mullai 8/3/18
                #region noorul
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("Mark Sheet-NIU ", "26"));
                //mullai 12/3/18           
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("Consolidated Mark Sheet-NIU ", "27"));
                #endregion noorul //mullai8/3/18

                #region SNS
                //mullai 2-04-2018
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("Consolidated Grade Sheet-SNS", "28"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("Consolidated CBGS-SNS", "29"));


                # endregion SNS

                #region Adhiyamaan
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("Degree Mark Statement", "30"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("Consolidated Grade Statement ", "31"));
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("PG Consolidated Grade Statement ", "32"));
                #endregion


                #region NEC Gradesheet
                ddlreporttype.Items.Add(new System.Web.UI.WebControls.ListItem("Grade Sheet-NEC ", "33"));
                #endregion


                ddlSubject.Visible = false;
                lblSubject.Visible = false;
                divSubject.Visible = false;
                Bindcollege();
                bindbatch();
                binddegree();
                bindbranch();
                subject();
                bindMonth();
                //clear();
                BindExamYear();
                BindExamMonth();
                //ddlMonth.Items.Insert(0, new System.Web.UI.WebControls.ListItem("  ", "0"));
                //ddlMonth.Items.Insert(1, new System.Web.UI.WebControls.ListItem("Jan", "1"));
                //ddlMonth.Items.Insert(2, new System.Web.UI.WebControls.ListItem("Feb", "2"));
                //ddlMonth.Items.Insert(3, new System.Web.UI.WebControls.ListItem("Mar", "3"));
                //ddlMonth.Items.Insert(4, new System.Web.UI.WebControls.ListItem("Apr", "4"));
                //ddlMonth.Items.Insert(5, new System.Web.UI.WebControls.ListItem("May", "5"));
                //ddlMonth.Items.Insert(6, new System.Web.UI.WebControls.ListItem("Jun", "6"));
                //ddlMonth.Items.Insert(7, new System.Web.UI.WebControls.ListItem("Jul", "7"));
                //ddlMonth.Items.Insert(8, new System.Web.UI.WebControls.ListItem("Aug", "8"));
                //ddlMonth.Items.Insert(9, new System.Web.UI.WebControls.ListItem("Sep", "9"));
                //ddlMonth.Items.Insert(10, new System.Web.UI.WebControls.ListItem("Oct", "10"));
                //ddlMonth.Items.Insert(11, new System.Web.UI.WebControls.ListItem("Nov", "11"));
                //ddlMonth.Items.Insert(12, new System.Web.UI.WebControls.ListItem("Dec", "12"));
                //ddlMonth.SelectedIndex = 0;
                //int year1;
                //year1 = Convert.ToInt16(DateTime.Today.Year);
                //ddlYear.Items.Clear();
                //for (int l = 0; l <= 10; l++)
                //{
                //    ddlYear.Items.Add(Convert.ToString(year1 - l));
                //    //ddlPosTYear.Items.Add(new System.Web.UI.WebControls.ListItem(Convert.ToString(year1 - l), Convert.ToString(year1 - l)));
                //}
                //ddlYear.Items.Insert(0, new System.Web.UI.WebControls.ListItem("  ", "0"));
                //ddlYear.SelectedIndex = 0;
                clear();
            }
            if (ddlCollege.Items.Count > 0)
            {
                collegecode = Convert.ToString(ddlCollege.SelectedValue).Trim();
            }
            else
            {
                collegecode = Convert.ToString(Session["collegecode"]).Trim();
            }
        }
        catch (Exception ex)
        {
        }
    }


    public void Bindcollege()
    {
        try
        {
            ddlCollege.Items.Clear();
            string columnfield = string.Empty;
            string group_user = ((Session["group_code"] != null) ? Convert.ToString(Session["group_code"]) : string.Empty);
            if (group_user.Contains(';'))
            {
                string[] group_semi = group_user.Split(';');
                group_user = Convert.ToString(group_semi[0]);
            }
            if ((Convert.ToString(group_user).Trim() != "") && Session["single_user"] != null && (Convert.ToString(Session["single_user"]) != "1" && Convert.ToString(Session["single_user"]).Trim().ToLower() != "true"))
            {
                columnfield = " and group_code='" + group_user + "'";
            }
            else if (Session["usercode"] != null)
            {
                columnfield = " and user_code='" + Convert.ToString(Session["usercode"]).Trim() + "'";
            }
            dicParam.Clear();
            dicParam.Add("column_field", Convert.ToString(columnfield));
            DataSet dsprint = storeAcc.selectDataSet("bind_college", dicParam);
            if (dsprint.Tables.Count > 0 && dsprint.Tables[0].Rows.Count > 0)
            {
                ddlCollege.DataSource = dsprint;
                ddlCollege.DataTextField = "collname";
                ddlCollege.DataValueField = "college_code";
                ddlCollege.DataBind();
            }
            if (ddlCollege.Items.Count > 0)
            {
                collegecode = Convert.ToString(ddlCollege.SelectedValue).Trim();
            }
            else
            {
                collegecode = Convert.ToString(Session["collegecode"]).Trim();
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void bindbatch()
    {
        try
        {
            ddlbatch.Items.Clear();
            ddlPosFYear.Items.Clear();
            ddlPosTYear.Items.Clear();
            ds = dirAcc.selectDataSet("select distinct batch_year from applyn where batch_year<>'-1' and batch_year<>'' and college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' order by batch_year desc");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                int count = ds.Tables[0].Rows.Count;
                if (count > 0)
                {
                    ddlbatch.DataSource = ds;
                    ddlbatch.DataTextField = "batch_year";
                    ddlbatch.DataValueField = "batch_year";
                    ddlbatch.DataBind();
                    ddlbatch.SelectedIndex = 0;

                    ddlPosFYear.DataSource = ds;
                    ddlPosFYear.DataTextField = "batch_year";
                    ddlPosFYear.DataValueField = "batch_year";
                    ddlPosFYear.DataBind();
                    ddlPosFYear.SelectedIndex = 0;

                    ddlPosTYear.DataSource = ds;
                    ddlPosTYear.DataTextField = "batch_year";
                    ddlPosTYear.DataValueField = "batch_year";
                    ddlPosTYear.DataBind();
                    ddlPosTYear.SelectedIndex = 0;
                }
            }
        }
        catch (Exception ex)
        {
            lblerror.Text = Convert.ToString(ex).Trim();
            lblerror.Visible = true;
        }
    }

    public void binddegree()
    {
        try
        {
            ddldegree.Items.Clear();
            usercode = Convert.ToString(Session["usercode"]).Trim();
            singleuser = Convert.ToString(Session["single_user"]).Trim();
            group_user = Convert.ToString(Session["group_code"]).Trim();
            if (group_user.Contains(';'))
            {
                string[] group_semi = group_user.Split(';');
                group_user = Convert.ToString(group_semi[0]).Trim();
            }
            has.Clear();
            has.Add("single_user", singleuser);
            has.Add("group_code", group_user);
            has.Add("college_code", collegecode);
            has.Add("user_code", usercode);
            ds = da.select_method("bind_degree", has, "sp");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                int count1 = ds.Tables[0].Rows.Count;
                if (count1 > 0)
                {
                    ddldegree.DataSource = ds;
                    ddldegree.DataTextField = "course_name";
                    ddldegree.DataValueField = "course_id";
                    ddldegree.DataBind();
                    ddldegree.SelectedIndex = 0;
                }
            }
        }
        catch (Exception ex)
        {
            lblerror.Text = Convert.ToString(ex);
            lblerror.Visible = true;
        }
    }

    public void bindbranch()
    {
        try
        {
            has.Clear();
            usercode = Convert.ToString(Session["usercode"]).Trim();
            singleuser = Convert.ToString(Session["single_user"]).Trim();
            group_user = Convert.ToString(Session["group_code"]).Trim();
            if (group_user.Contains(';'))
            {
                string[] group_semi = group_user.Split(';');
                group_user = Convert.ToString(group_semi[0]).Trim();
            }
            has.Add("single_user", singleuser);
            has.Add("group_code", group_user);
            has.Add("course_id", ddldegree.SelectedValue);
            has.Add("college_code", collegecode);
            has.Add("user_code", usercode);
            ds = da.select_method("bind_branch", has, "sp");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                int count2 = ds.Tables[0].Rows.Count;
                if (count2 > 0)
                {
                    ddlbranch.DataSource = ds;
                    ddlbranch.DataTextField = "dept_name";
                    ddlbranch.DataValueField = "degree_code";
                    ddlbranch.DataBind();
                    ddlbranch.SelectedIndex = 0;
                }
            }
        }
        catch (Exception ex)
        {
            lblerror.Text = Convert.ToString(ex);
            lblerror.Visible = true;
        }
    }

    public void loadyear()
    {
        try
        {
            ddlYear.Items.Clear();
            ds.Reset();
            ds.Dispose();
            ds = da.Examyear();
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddlYear.DataSource = ds;
                ddlYear.DataTextField = "Exam_year";
                ddlYear.DataValueField = "Exam_year";
                ddlYear.DataBind();
                ddlYear.SelectedIndex = 0;
            }
            else
            {
                ddlYear.Enabled = false;
                ddlMonth.Enabled = false;
            }
        }
        catch (Exception ex)
        {
            lblerror.Visible = true;
            lblerror.Text = Convert.ToString(ex);
        }
    }

    public void loadmonth()
    {
        try
        {
            ddlMonth.Items.Clear();
            string year = Convert.ToString(ddlYear.Text);
            ds.Reset();
            ds.Dispose();
            ds = da.Exammonth(year);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddlMonth.DataSource = ds;
                ddlMonth.DataTextField = "monthName";
                ddlMonth.DataValueField = "Exam_month";
                ddlMonth.DataBind();
                ddlMonth.SelectedIndex = 0;
            }
            else
            {
                ddlMonth.Enabled = false;
            }
        }
        catch (Exception ex)
        {
            lblerror.Visible = true;
            lblerror.Text = Convert.ToString(ex);
        }
    }

    /// <summary>
    /// Developed By Malang Raja
    /// </summary>
    public void BindExamYear()
    {
        try
        {
            ddlYear.Items.Clear();
            ds.Clear();
            collegeCode = string.Empty;
            batchYear = string.Empty;
            degreeCode = string.Empty;
            qryCollegeCode = string.Empty;
            qryDegreeCode = string.Empty;
            qryBatchYear = string.Empty;
            if (ddlCollege.Items.Count > 0)
            {
                collegeCode = Convert.ToString(ddlCollege.SelectedValue).Trim();
                if (!string.IsNullOrEmpty(collegeCode))
                {
                    qryCollegeCode = " and dg.college_code in (" + collegeCode + ")";
                }
            }
            if (ddlbatch.Items.Count > 0)
            {
                batchYear = Convert.ToString(ddlbatch.SelectedValue).Trim();
                if (!string.IsNullOrEmpty(batchYear))
                {
                    qryBatchYear = " and ed.batch_year in(" + batchYear + ")";
                }
            }
            if (ddlbranch.Items.Count > 0)
            {
                degreeCode = Convert.ToString(ddlbranch.SelectedValue).Trim();
                if (!string.IsNullOrEmpty(degreeCode))
                {
                    qryDegreeCode = " and ed.degree_code in(" + degreeCode + ")";
                }
            }
            if (!string.IsNullOrEmpty(qryCollegeCode) && !string.IsNullOrEmpty(qryBatchYear) && !string.IsNullOrEmpty(qryDegreeCode))
            {
                string qry = "select distinct ed.Exam_year from exam_details ed,Degree dg,Course c,Department dt where dg.Degree_Code=ed.degree_code and  c.Course_Id=dg.Course_Id and dg.Dept_Code=dt.Dept_Code and ed.Exam_year<>'0' " + qryCollegeCode + qryDegreeCode + qryBatchYear + " order by ed.Exam_year desc";
                ds.Clear();
                ds.Reset();
                ds.Dispose();
                ds = da.select_method_wo_parameter(qry, "text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    ddlYear.DataSource = ds;
                    ddlYear.DataTextField = "Exam_year";
                    ddlYear.DataValueField = "Exam_year";
                    ddlYear.DataBind();
                    ddlYear.SelectedIndex = 0;
                }
            }
            ddlYear.Items.Insert(0, new System.Web.UI.WebControls.ListItem("  ", "0"));
            ddlYear.SelectedIndex = 0;
        }
        catch (Exception ex)
        {
        }
    }

    /// <summary>
    /// Developed By Malang Raja
    /// </summary>
    private void BindExamMonth()
    {
        try
        {
            string collegeCode = string.Empty;
            string batchYear = string.Empty;
            string degreeCode = string.Empty;
            ddlMonth.Items.Clear();
            ds.Clear();
            collegeCode = string.Empty;
            batchYear = string.Empty;
            degreeCode = string.Empty;
            qryCollegeCode = string.Empty;
            qryDegreeCode = string.Empty;
            qryBatchYear = string.Empty;
            if (ddlCollege.Items.Count > 0)
            {
                collegeCode = Convert.ToString(ddlCollege.SelectedValue).Trim();
                if (!string.IsNullOrEmpty(collegeCode))
                {
                    qryCollegeCode = " and dg.college_code in (" + collegeCode + ")";
                }
            }
            if (ddlbatch.Items.Count > 0)
            {
                batchYear = Convert.ToString(ddlbatch.SelectedValue).Trim();
                if (!string.IsNullOrEmpty(batchYear))
                {
                    qryBatchYear = " and ed.batch_year in(" + batchYear + ")";
                }
            }
            if (ddlbranch.Items.Count > 0)
            {
                degreeCode = Convert.ToString(ddlbranch.SelectedValue).Trim();
                if (!string.IsNullOrEmpty(degreeCode))
                {
                    qryDegreeCode = " and ed.degree_code in(" + degreeCode + ")";
                }
            }
            examYear = string.Empty;
            qryExamYear = string.Empty;
            if (ddlYear.Items.Count > 0)
            {
                foreach (System.Web.UI.WebControls.ListItem li in ddlYear.Items)
                {
                    if (li.Selected)
                    {
                        if (string.IsNullOrEmpty(examYear))
                        {
                            examYear = "'" + li.Value + "'";
                        }
                        else
                        {
                            examYear += ",'" + li.Value + "'";
                        }
                    }
                }
                if (!string.IsNullOrEmpty(examYear))
                {
                    qryExamYear = " and Exam_year in (" + examYear + ")";
                }
            }
            if (!string.IsNullOrEmpty(qryExamYear) && !string.IsNullOrEmpty(qryCollegeCode) && !string.IsNullOrEmpty(qryBatchYear) && !string.IsNullOrEmpty(qryDegreeCode))
            {
                string qry = "select distinct ed.Exam_Month,upper(convert(varchar(3),DateAdd(month,ed.Exam_Month,-1))) as Month_Name from exam_details ed,Degree dg,Course c,Department dt where dg.Degree_Code=ed.degree_code and  c.Course_Id=dg.Course_Id and dg.Dept_Code=dt.Dept_Code and ed.Exam_Month<>'0' " + qryCollegeCode + qryDegreeCode + qryBatchYear + qryExamYear + " order by Exam_Month";
                ds.Clear();
                ds.Reset();
                ds.Dispose();
                ds = da.select_method_wo_parameter(qry, "text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    ddlMonth.DataSource = ds;
                    ddlMonth.DataTextField = "Month_Name";
                    ddlMonth.DataValueField = "Exam_Month";
                    ddlMonth.DataBind();
                    ddlMonth.SelectedIndex = 0;
                }
            }
            ddlMonth.Items.Insert(0, new System.Web.UI.WebControls.ListItem("  ", "0"));
            ddlMonth.SelectedIndex = 0;
        }
        catch (Exception ex)
        {
        }
    }

    public void bindMonth()
    {
        ddlPosFMonth.Items.Clear();
        ddlPosTMonth.Items.Clear();
        var months = CultureInfo.CurrentCulture.DateTimeFormat.MonthNames;
        for (int i = 0; i < months.Length; i++)
        {
            if (months[i] != "")
            {
                ddlPosFMonth.Items.Add(new System.Web.UI.WebControls.ListItem(months[i], Convert.ToString(i)));
                ddlPosTMonth.Items.Add(new System.Web.UI.WebControls.ListItem(months[i], Convert.ToString(i)));
            }
        }
        ddlPosFMonth.Items.Insert(0, new System.Web.UI.WebControls.ListItem("-- Select --", "-1"));
        ddlPosTMonth.Items.Insert(0, new System.Web.UI.WebControls.ListItem("-- Select --", "-1"));
        ddlPosFMonth.SelectedIndex = 0;
        ddlPosTMonth.SelectedIndex = 0;
    }

    protected void lb2_Click(object sender, EventArgs e)
    {
        try
        {
            Session.Clear();
            Session.Abandon();
            Session.RemoveAll();
            Response.Redirect("default.aspx");
        }
        catch (Exception ex)
        {
            lblerror.Text = Convert.ToString(ex).Trim();
            lblerror.Visible = true;
        }
    }

    public void clear()
    {
        FpSpread2.Visible = false;
        btnprint.Visible = false;
    }

    protected void ddlCollege_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            bindbatch();
            binddegree();
            bindbranch();
            BindExamYear();
            BindExamMonth();
            clear();
        }
        catch (Exception ex)
        {
            lblerror.Text = Convert.ToString(ex).Trim();
            lblerror.Visible = true;
        }
    }

    protected void ddlMonth_SelectedIndexChanged(object sender, EventArgs e)
    {
        clear();
    }

    protected void ddlYear_SelectedIndexChanged(object sender, EventArgs e)
    {
        clear();
        BindExamMonth();
    }

    protected void ddlbatch_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            clear();
            BindExamYear();
            BindExamMonth();
        }
        catch (Exception ex)
        {
            lblerror.Text = Convert.ToString(ex).Trim();
            lblerror.Visible = true;
        }
    }

    protected void ddldegree_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            bindbranch();
            BindExamYear();
            BindExamMonth();
            clear();
        }
        catch (Exception ex)
        {
            lblerror.Text = Convert.ToString(ex).Trim();
            lblerror.Visible = true;
        }
    }

    protected void ddlbranch_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            BindExamYear();
            BindExamMonth();
            clear();
        }
        catch (Exception ex)
        {
            lblerror.Text = Convert.ToString(ex).Trim();
            lblerror.Visible = true;
        }
    }

    protected void ddlsem_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            BindExamYear();
            BindExamMonth();
            clear();
        }
        catch (Exception ex)
        {
            lblerror.Text = Convert.ToString(ex).Trim();
            lblerror.Visible = true;
        }
    }

    protected void ddlreport_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            div2.Visible = false;
            chkinstatnt.Visible = false;
            chkinstatnt.Checked = false;
            rblSpecialorCertify.Visible = false;
            chk_finalsemmrk_sheet.Checked = false;
            txtDuplicateNumber.Text = string.Empty;
            txtDuplicateNumber.Enabled = false;
            divDuplicate.Visible = false;
            chkDuplicateMarksheet.Checked = false;
            //  div1.Visible = false;
            // bindSem();
            // lblSem.Visible = false;
            if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "1" || Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "21") //NEW COLLEGE CONSOLIDATED
            {
                chk_consoli.Checked = true;
                ddlYear.Enabled = false;
                ddlMonth.Enabled = false;
            }
            else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "2") //NEW COLLEGE CONSOLIDATED
            {
                chk_consoli.Checked = true;
                ddlYear.Enabled = false;
                ddlMonth.Enabled = false;
            }
            else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "7") //NOORUL ISLAM COLLEGE CONSOLIDATED
            {
                chk_consoli.Checked = true;
                ddlYear.Enabled = false;
                ddlMonth.Enabled = false;
            }
            else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "8") //MCC COLLEGE CONSOLIDATED
            {
                chk_finalsemmrk_sheet.Checked = true;
                chk_consoli.Checked = true;
                ddlYear.Enabled = false;
                ddlMonth.Enabled = false;
                divDuplicate.Visible = true;
            }
            else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "11") //FOR CHRISTOPHER UG\PG CONSOLIDATED
            {
                chk_consoli.Checked = true;
                ddlYear.Enabled = false;
                ddlMonth.Enabled = false;
            }
            else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "13") //JAMAL(JMC) COLLEGE CONSOLIDATED
            {
                chk_consoli.Checked = true;
                ddlYear.Enabled = false;
                ddlMonth.Enabled = false;
                div2.Visible = true;
            }
            else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "14") //JAMAL(JMC) COLLEGE CONSOLIDATED
            {
                chk_consoli.Checked = true;
                ddlYear.Enabled = false;
                ddlMonth.Enabled = false;
                div2.Visible = true;
            }
            else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "16") //JAMAL(JMC) COLLEGE CONSOLIDATED
            {
                chk_consoli.Checked = true;
                ddlYear.Enabled = false;
                ddlMonth.Enabled = false;

            }
            else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "20") //JAMAL(JMC) COLLEGE CONSOLIDATED
            {
                div2.Visible = true;
            }
            else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "21") //JAMAL(JMC) COLLEGE CONSOLIDATED
            {
                div2.Visible = true;
            }
            else
            {
                chk_consoli.Checked = false;
                ddlYear.Enabled = true;
                ddlMonth.Enabled = true;
            }
            if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "21")
            {
                div2.Visible = true;
            }
            if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "9")
            {
                rblSpecialorCertify.Visible = true;
                rblSpecialorCertify.SelectedIndex = 2;
                ddlSubject.SelectedIndex = 0;
                //ddlSubject.Visible = true;
                checkBoxListselectOrDeselect(cblSubject, false);
                cblSubject_SelectedIndexChanged(sender, e);
                // checkBoxListselectOrDeselect(cblSem, false);
                // cblSem_SelectedIndexChanged(sender, e);
                divSubject.Visible = true;
                lblSubject.Visible = true;
                //  div1.Visible = true;
                // lblSem.Visible = true;
            }
            else
            {
                rblSpecialorCertify.Visible = false;
                //checkBoxListselectOrDeselect(cblSubject, false);
                //cblSubject_SelectedIndexChanged(sender, e);
                ddlSubject.Visible = false;
                divSubject.Visible = false;
                lblSubject.Visible = false;
                //  div1.Visible = false;
                //  lblSem.Visible = false;
            }
            if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "17") // MCC COLLEGE MARKSHEET COMMUNITY FORMAT
            {
                divPos.Attributes.Add("style", "display:block;");
            }
            else
            {
                divPos.Attributes.Add("style", "display:none;");
            }
            if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "5") // MCC COLLEGE MARKSHEET
            {
                chkinstatnt.Visible = true;
                divDuplicate.Visible = true;
                chkDuplicateMarksheet.Checked = false;
            }
            if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "30")
            {
                chkenrolmentno.Visible = true;
                lblcreditpaper.Visible = true;
                txtcreditpap.Visible = true;
                lblfrmrange.Visible = true;
                txtfrmrange.Visible = true;
                lbltorange.Visible = true;
                txttorange.Visible = true;
            }
            else
            {
                chkenrolmentno.Visible = false;
                lblcreditpaper.Visible = false;
                txtcreditpap.Visible = false;
                lblfrmrange.Visible = false;
                txtfrmrange.Visible = false;
                lbltorange.Visible = false;
                txttorange.Visible = false;
            }
            if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "31")
            {
                chk_consoli.Checked = true;
                lblcreditpaper.Visible = true;
                txtcreditpap.Visible = true;
            }


            if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "32")
            {
                chk_consoli.Checked = true;

                lblcreditpaper.Visible = true;
                txtcreditpap.Visible = true;
            }
            if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "33")
            {
                cbregulation.Visible = true;
                lblmode.Visible = true;
                txtmode.Visible = true;
            }
            else
            {
                cbregulation.Visible = false;
                lblmode.Visible = false;
                txtmode.Visible = false;
            }
            clear();
        }
        catch (Exception ex)
        {
            lblerror.Text = Convert.ToString(ex).Trim();
            lblerror.Visible = true;
        }
    }

    protected void chkSubject_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            clear();
            CallCheckboxChange(chkSubject, cblSubject, txtSubject, lblSubject.Text, "--Select--");
        }
        catch (Exception ex)
        {
        }
    }

    protected void cblSubject_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            clear();
            CallCheckboxListChange(chkSubject, cblSubject, txtSubject, lblSubject.Text, "--Select--");
        }
        catch (Exception ex)
        {
        }
    }

    //protected void chkSem_CheckedChanged(object sender, EventArgs e)
    //{
    //    try
    //    {
    //        clear();
    //        CallCheckboxChange(chkSem, cblSem, txtSem, lblSem.Text, "--Select--");
    //    }
    //    catch (Exception ex)
    //    {
    //    }
    //}

    //protected void cblSem_SelectedIndexChanged(object sender, EventArgs e)
    //{
    //    try
    //    {
    //        clear();
    //        CallCheckboxListChange(chkSem, cblSem, txtSem, lblSem.Text, "--Select--");
    //    }
    //    catch (Exception ex)
    //    {
    //    }
    //}

    protected void rblSpecialorCertify_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            clear();
            chkShowSubjectNameOnly.Visible = false;
            chkShowSubjectNameOnly.Checked = false;
            if (rblSpecialorCertify.SelectedIndex != 2)
                chkShowSubjectNameOnly.Visible = true;
        }
        catch (Exception ex)
        {

        }
    }

    protected void Buttongo_Click(object sender, EventArgs e)
    {
        try
        {
            FpSpread2.Visible = false;
            FpSpread2.CommandBar.Visible = false;
            FpSpread2.Sheets[0].RowCount = 0;
            FpSpread2.Sheets[0].ColumnCount = 5;
            FpSpread2.Sheets[0].Columns[0].Width = 40;
            FpSpread2.Sheets[0].Columns[1].Width = 110;
            FpSpread2.Sheets[0].Columns[2].Width = 110;
            FpSpread2.Sheets[0].Columns[3].Width = 300;
            FpSpread2.Sheets[0].Columns[4].Width = 90;
            FpSpread2.Sheets[0].Columns[0].Locked = true;
            FpSpread2.Sheets[0].Columns[1].Locked = true;
            FpSpread2.Sheets[0].Columns[2].Locked = true;
            FpSpread2.Sheets[0].Columns[3].Locked = true;
            FpSpread2.Sheets[0].RowHeader.Visible = false;
            FpSpread2.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
            FpSpread2.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            FpSpread2.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            FpSpread2.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
            FpSpread2.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
            FpSpread2.Sheets[0].DefaultStyle.Font.Name = "Book Antiqua";
            FpSpread2.Sheets[0].SheetCorner.RowCount = 2;
            FpSpread2.Sheets[0].ColumnHeaderSpanModel.Add(0, 0, 2, 1);
            FpSpread2.Sheets[0].ColumnHeaderSpanModel.Add(0, 1, 2, 1);
            FpSpread2.Sheets[0].ColumnHeaderSpanModel.Add(0, 2, 2, 1);
            FpSpread2.Sheets[0].ColumnHeaderSpanModel.Add(0, 3, 2, 1);
            FpSpread2.Sheets[0].ColumnHeaderSpanModel.Add(0, 4, 2, 1);
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Roll No";
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Reg No";
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Student Name";
            FpSpread2.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Select";
            if (Convert.ToString(Session["Rollflag"]).Trim() == "1")
            {
                FpSpread2.Sheets[0].Columns[1].Visible = true;
            }
            else
            {
                FpSpread2.Sheets[0].Columns[1].Visible = false;
            }
            if (Convert.ToString(Session["Regflag"]).Trim() == "1")
            {
                FpSpread2.Sheets[0].Columns[2].Visible = true;
            }
            else
            {
                FpSpread2.Sheets[0].Columns[2].Visible = false;
            }
            FarPoint.Web.Spread.TextCellType txt = new FarPoint.Web.Spread.TextCellType();
            FarPoint.Web.Spread.CheckBoxCellType chkcell = new FarPoint.Web.Spread.CheckBoxCellType();
            FpSpread2.Sheets[0].RowCount = 0;
            FarPoint.Web.Spread.CheckBoxCellType chkcell1 = new FarPoint.Web.Spread.CheckBoxCellType();
            FpSpread2.Sheets[0].RowCount = FpSpread2.Sheets[0].RowCount + 1;
            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 4].CellType = chkcell1;
            FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Center;
            FpSpread2.Sheets[0].FrozenRowCount = 1;
            chkcell1.AutoPostBack = true;
            FpSpread2.Sheets[0].AutoPostBack = false;
            string examyear = Convert.ToString(ddlYear.SelectedValue).Trim();
            string exammonth = Convert.ToString(ddlMonth.SelectedValue).Trim();
            string batchyear = Convert.ToString(ddlbatch.SelectedValue).Trim();
            string degreecode = Convert.ToString(ddlbranch.SelectedValue).Trim();
            string year = Convert.ToString(ddlbatch.SelectedValue).Trim();
            string degree = Convert.ToString(ddldegree.SelectedItem).Trim();
            string course = Convert.ToString(ddldegree.SelectedItem).Trim();
            string depart_code = Convert.ToString(ddlbranch.SelectedValue).Trim();
            string batchyearatt = Convert.ToString(ddlbatch.SelectedValue).Trim();
            string studinfo = string.Empty;
            if ((Session["group_code"] != null && Convert.ToString(Session["group_code"]).Trim() != "") && (Convert.ToString(Session["group_code"]).Trim() != "0") && (Convert.ToString(Session["group_code"]).Trim() != "-1"))
            {
                grouporusercode = " group_code='" + Convert.ToString(Session["group_code"]).Trim() + "'";
            }
            else
            {
                grouporusercode = " usercode='" + Convert.ToString(Session["usercode"]).Trim() + "'";
            }
            string semlico = d2.GetFunction("select value from Master_Settings where settings='previous sem subject allotment' " + grouporusercode + "");
            string strorder = "ORDER BY r.Reg_No";
            string serialno = d2.GetFunction("select LinkValue from inssettings where college_code=" + Convert.ToString(ddlCollege.SelectedValue).Trim() + " and linkname='Student Attendance'");
            if (serialno.Trim() == "1")
            {
                strorder = "ORDER BY r.serialno";
            }
            else
            {
                string orderby_Setting = d2.GetFunction("select value from master_Settings where settings='order_by'");
                if (orderby_Setting == "0")
                {
                    strorder = "ORDER BY r.Roll_No";
                }
                else if (orderby_Setting == "1")
                {
                    strorder = "ORDER BY r.Reg_No";
                }
                else if (orderby_Setting == "2")
                {
                    strorder = "ORDER BY r.Stud_Name";
                }
                else if (orderby_Setting == "0,1,2")
                {
                    strorder = "ORDER BY r.Roll_No,r.Reg_No,r.Stud_Name";
                }
                else if (orderby_Setting == "0,1")
                {
                    strorder = "ORDER BY r.Roll_No,r.Reg_No";
                }
                else if (orderby_Setting == "1,2")
                {
                    strorder = "ORDER BY r.Reg_No,r.Stud_Name";
                }
                else if (orderby_Setting == "0,2")
                {
                    strorder = "ORDER BY r.Roll_No,r.Stud_Name";
                }
            }
            studinfo = "select distinct r.serialno,r.current_semester, r.Roll_No,r.Reg_No,r.Stud_Name,ed.batch_year,ed.degree_code from Registration r,Exam_Details ed,mark_entry m where r.Roll_No=m.roll_no and m.exam_code=ed.exam_code and r.Batch_Year=ed.batch_year and ed.degree_code=r.degree_code and ed.batch_year='" + Convert.ToString(ddlbatch.SelectedItem.Text).Trim() + "' and r.degree_code='" + Convert.ToString(ddlbranch.SelectedItem.Value).Trim() + "' and ed.Exam_Month='" + Convert.ToString(ddlMonth.SelectedItem.Value).Trim() + "' and ed.Exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' " + strorder;
            if (chk_consoli.Checked == true)
            {
                studinfo = "select distinct len(r.reg_no),r.reg_no,r.stud_name,r.roll_no,r.batch_year,r.serialno from registration r where  r.degree_code='" + depart_code + "' and r.batch_year='" + Convert.ToString(ddlbatch.SelectedValue).Trim() + "' order by len(r.reg_no),r.reg_no,r.stud_name";
            }
            DataSet dsstudinfo = da.select_method_wo_parameter(studinfo, "Text");
            if (dsstudinfo.Tables.Count > 0 && dsstudinfo.Tables[0].Rows.Count > 0)
            {
                btnprint.Visible = true;
                int sno = 0;
                for (int studcount = 0; studcount < dsstudinfo.Tables[0].Rows.Count; studcount++)
                {
                    string regno = string.Empty;
                    string studname = string.Empty;
                    string rollno = string.Empty;
                    FpSpread2.Visible = true;
                    sno++;
                    batchyear = Convert.ToString(dsstudinfo.Tables[0].Rows[studcount]["batch_year"]).Trim();
                    regno = Convert.ToString(dsstudinfo.Tables[0].Rows[studcount]["reg_no"]).Trim();
                    studname = Convert.ToString(dsstudinfo.Tables[0].Rows[studcount]["stud_name"]).Trim();
                    rollno = Convert.ToString(dsstudinfo.Tables[0].Rows[studcount]["roll_no"]).Trim();
                    FpSpread2.Sheets[0].RowCount = FpSpread2.Sheets[0].RowCount + 1;
                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Text = sno + " ";
                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].Note = batchyear;
                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].CellType = txt;
                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].Text = rollno;
                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 1].Note = rollno;
                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 2].CellType = txt;
                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 2].Text = regno;
                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 3].Text = studname;
                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 4].CellType = chkcell;
                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                    FpSpread2.Sheets[0].Cells[FpSpread2.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Center;
                }
            }
            else
            {
                clear();
                lblerror.Text = "No Records Found";
                lblerror.Visible = true;
            }
            //Commented And Modified By Malang Raja Due To Its Show Spread Very Larger As Needed
            //string totalrows = Convert.ToString(FpSpread2.Sheets[0].RowCount);
            //FpSpread2.Sheets[0].PageSize = FpSpread2.Sheets[0].RowCount;
            //FpSpread2.Height = (Convert.ToInt32(totalrows) * 40) + 60;
            int totalrows = FpSpread2.Sheets[0].RowCount;
            FpSpread2.Sheets[0].PageSize = FpSpread2.Sheets[0].RowCount;
            FpSpread2.Height = (totalrows * 22) + 70;
        }
        catch (Exception ex)
        {
            lblerror.Text = Convert.ToString(ex).Trim();
            lblerror.Visible = true;
        }
    }

    protected void FpSpread1_UpdateCommand(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        string actrow = Convert.ToString(e.SheetView.ActiveRow).Trim();
        if (flag_true == false && actrow == "0")
        {
            for (int j = 1; j < Convert.ToInt16(FpSpread2.Sheets[0].RowCount); j++)
            {
                string actcol = Convert.ToString(e.SheetView.ActiveColumn).Trim();
                string seltext = Convert.ToString(e.EditValues[Convert.ToInt16(actcol)]).Trim();
                if (seltext != "System.Object")
                    FpSpread2.Sheets[0].Cells[j, Convert.ToInt16(actcol)].Text = Convert.ToString(seltext).Trim();
            }
            flag_true = true;
        }
    }

    protected void chk_consoli_CheckedChanged(object sender, EventArgs e)
    {
        if (chk_consoli.Checked == true)
        {
            ddlYear.Enabled = false;
            ddlMonth.Enabled = false;
        }
        else
        {
            ddlYear.Enabled = true;
            ddlMonth.Enabled = true;
        }
    }

    protected void cbenrolmentno_OnCheckedChanged(object sender, EventArgs e)
    {
    }

    protected void btnprint_Click(object sender, EventArgs e)
    {
        try
        {
            lbl_popuperr.Text = string.Empty;
            errdiv.Visible = false;
            FpSpread2.SaveChanges();
            int selectedcount = 0;
            for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
            {
                int isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                if (isval == 1)
                {
                    selectedcount++;
                }
            }
            if (selectedcount == 0)
            {
                lblerror.Visible = true;
                lblerror.Text = "Please Select the Student and then Proceed";
                return;
            }
            else
            {
                //#region printlock
                //string printsettings = da.GetFunction("select LinkValue from New_InsSettings where LinkName = 'MarkSheet Printlock' and college_code='" + ddlCollege.SelectedValue.ToString() + "'");
                //if (printsettings == "0")
                //{
                //    int count = da.update_method_wo_parameter("if not exists (select distinct value from Master_Settings where settings='prtlockmarksheet') insert into Master_Settings (settings,value) values ('prtlockmarksheet','0')", "text");

                //    string statusofPrintAvailability = da.GetFunction("select distinct value from Master_Settings where settings='prtlockmarksheet'");
                //    if (!String.IsNullOrEmpty(statusofPrintAvailability) && statusofPrintAvailability == "1")
                //    {
                //        lblerror.Visible = true;
                //        lblerror.Text = "Please Try Again Later";
                //        return;
                //    }
                //    string updateqry = "update Master_Settings set value='1' where settings='prtlockmarksheet'";
                //    int res = da.update_method_wo_parameter(updateqry, "text");

                //#endregion

                //    if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "5" || Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "8")
                //    {
                //        if (divDuplicate.Visible == true && chkDuplicateMarksheet.Checked && txtDuplicateNumber.Enabled)
                //        {
                //            if (string.IsNullOrEmpty(txtDuplicateNumber.Text.Trim()))
                //            {
                //                lbl_popuperr.Text = "Please Enter Duplicate Marksheet Number And Then Proceed";
                //                errdiv.Visible = true;
                //                return;
                //            }
                //            else if (selectedcount > 1)
                //            {
                //                lbl_popuperr.Text = "Please Select Only One Student To Take Duplicate Marksheet";
                //                errdiv.Visible = true;
                //                return;
                //            }
                //        }
                //    }
                //}

                #region NEW COLLEGE
                if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "0")
                {
                    CertificateCourseMarkSheet();//NEW COLLEGE
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "1")
                {
                    Gradebasedconsolidated();//NEW COLLEGE
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "2")
                {
                    Markbasedconsolidated();//NEW COLLEGE
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "3")
                {
                    ugmarkstatementf12008();//NEW COLLEGE
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "4")
                {
                    ugmarkstatementf22007();//NEW COLLEGE
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "18")
                {
                    ugmarkstatementf12009();//NEW COLLEGE
                }
                #endregion NEW COLLEGE

                #region MCC COLLEGE
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "5")
                {
                    ugmarkstatementf3();//MCC COLLEGE
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "8")
                {
                    if (ddlFormats.SelectedIndex == 0)
                        ugconsolidatedGrade_Mark();//MCC COLLEGE
                    else
                        ugconsolidatedGradeMarkForVocational();//MCC COLLEGE
                }
                //MCC COMMUNITY COLLEGE
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "17")
                {
                    mcc_community_format();
                }
                #endregion MCC COLLEGE

                #region NOORUL ISLAM COLLEGE
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "6")
                {
                    ugmarkstatementf4();//NOORUL ISLAM
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "7")
                {
                    markbasedconsolidatedF2();//NOORUL ISLAM
                }
                #endregion NOORUL ISLAM COLLEGE

                #region CHRISTOPHER COLLEGE
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "9")
                {
                    ugmarkstatementformat5();//CHRISTOBER COLLEGE
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "10")
                {
                    ugmarkstatementformat7();//UG PRACTICAL CHRISTOBER COLLEGE
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "11")
                {
                    ugconsolidatemarksheet();//UG & PG CONSOLIDATE CHRISTOBER COLLEGE
                    //pgconsolidatemarksheet();
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "19")
                {
                    ugmarkstatementformatForMphil();//MPHIL MARKSHEET CHRISTOBER COLLEGE
                }
                #endregion CHRISTOPHER COLLEGE

                #region JAMAL COLLEGE

                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "12")
                {
                    ugpgmarkstatementf6_jamal();//UG/PG MARK STATEMENTS JAMAL COLLEGE
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "20")
                {
                    StatementOfMarkSheet(); //UG/PG & MPhil MARK STATEMENTS JAMAL COLLEGE
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "21")
                {
                    ConsolidatedStatementOfMarkSheets(); //UG/PG & MPhil CONSOLIDATED MARK STATEMENTS JAMAL COLLEGE
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "13")
                {
                    markbasedconsolidatedF_jamal();//UG CONSOLIDATED MARK STATEMENTS
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "14")
                {
                    pgmarkbasedconsolidatedF_jamal();//PG CONSOLIDATED MARK STATEMENTS 
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "15")
                {
                    mphilmarkstatementf6_jamal();//MPHIL MARK STATEMENTS 
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "16")
                {
                    mphilconsolidatedF_jamal();//MPHIL CONSOLIDATED MARK STATEMENTS 
                }
                #endregion JAMAL COLLEGE

                #region Mahendra(MEC)
                //magesh 5/1/18
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "23")
                {
                    statmentofmark();
                }
                #endregion

                #region SNS
                //magesh 23/1/18
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "24")
                {
                    gradesheet();
                }
                //magesh 22/2/18
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "25")
                {
                    choicebased();
                }
                #endregion

                //mullai 8/3/18
                #region noorul

                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "26")
                {
                    marksheet();
                }
                //mullai 12/3/18
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "27")
                {
                    consolidatedgradesheet();
                }
                #endregion
                //
                #region SNS
                //mullai 2-04-2018
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "28")
                {
                    ConsolidatedStatementOfGradeSheet();
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "29")
                {
                    ConsolidatedStatementOfchoicebased();
                }
                #endregion

                #region adhiyamaan
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "30")
                {
                    Degreemarksheet();
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "31")
                {
                    ConsolidatedGradeStatement();
                }
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "32")
                {
                    PGConsolidatedGradeStatement();
                }
                #endregion

                #region NEC Gradesheet
                else if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "33")
                {
                    gradesheet1();
                }
                #endregion


                //#region printlock
                //string printsettings1=da.GetFunction("select LinkValue from New_InsSettings where LinkName = 'MarkSheet Printlock' and college_code='"+ddlCollege.SelectedValue.ToString()+"'");
                //if (printsettings1 == "0")
                //{

                //    string printAvailability = "update Master_Settings set value='0' where settings='prtlockmarksheet'";
                //    int printAvailabilityfun = da.update_method_wo_parameter(printAvailability, "text");
                //}

                // #endregion
            }
        }
        catch (Exception ex)
        {
            lblerror.Text = Convert.ToString(ex).Trim();
            lblerror.Visible = true;
        }
    }

    #region NEW COLLEGE

    public void CertificateCourseMarkSheet() //COMPLETED @ 12.02.2016
    {
        DataSet printds = new DataSet();
        DataSet printds_new = new DataSet();
        DataSet printds_rows = new DataSet();
        string degree = string.Empty;
        string monthandyear = string.Empty;
        string studname = string.Empty;
        string dob = string.Empty;
        string rollnosub = string.Empty;
        string regnumber = string.Empty;
        string batch_year = string.Empty;
        string degree_code = string.Empty;
        string exam_code = string.Empty;
        string sem = string.Empty;
        string branch = string.Empty;
        int month = 0;
        string monthstr = string.Empty;
        string sql2 = string.Empty;
        string sql3 = string.Empty;
        string semroman = string.Empty;
        string coe = string.Empty;
        DataSet gradeds = new DataSet();
        Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
        Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
        Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
        Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
        Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
        Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
        Font Fontarial9 = new Font("Arial", 8, FontStyle.Bold);
        Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
        Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
        //Font tamil = new Font("AMUDHAM.TTF", 16, FontStyle.Regular);
        PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.5, 14.5));
        PdfPage mypdfpage;
        if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
        {
            FpSpread2.SaveChanges();
            for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                if (isval == 1)
                {
                    printds.Clear();
                    printds.Dispose();
                    printds_new.Clear();
                    printds_new.Dispose();
                    rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                    regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                    string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';";
                    printds = da.select_method_wo_parameter(sql, "Text");
                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                    {
                        mypdfpage = mydoc.NewPage();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        coe = Convert.ToString(printds.Tables[1].Rows[0]["coe"]).Trim();
                        string[] spiltcoe = coe.Split('.');
                        string newcoe = string.Empty;
                        for (int ce = 1; ce <= spiltcoe.GetUpperBound(0); ce++)
                        {
                            if (newcoe == "")
                            {
                                newcoe = Convert.ToString(spiltcoe[ce]).Trim();
                            }
                            else
                            {
                                newcoe = newcoe + "." + Convert.ToString(spiltcoe[ce]).Trim();
                            }
                        }
                        coe = newcoe;
                        //month = ddlMonth.SelectedIndex;
                        //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                        int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                        monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                        string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                        monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        monthandyear = monthandyear.ToUpper();
                        studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        branch = Convert.ToString(printds.Tables[0].Rows[0]["Dept_name"]).Trim();
                        dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]).Trim();
                        string stdappno = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim();
                        sql2 = "select * from exam_details where    degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                        printds_new = da.select_method_wo_parameter(sql2, "Text");
                        if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                        {
                            sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
                            if (sem == "1")
                            {
                                semroman = "I";
                            }
                            else if (sem == "2")
                            {
                                semroman = "II";
                            }
                            else if (sem == "3")
                            {
                                semroman = "III";
                            }
                            else if (sem == "4")
                            {
                                semroman = "IV";
                            }
                            else if (sem == "5")
                            {
                                semroman = "V";
                            }
                            else if (sem == "6")
                            {
                                semroman = "VI";
                            }
                            else if (sem == "7")
                            {
                                semroman = "VII";
                            }
                            else if (sem == "8")
                            {
                                semroman = "VIII";
                            }
                            PdfTextArea pdfdoi = new PdfTextArea(Fontco10, System.Drawing.Color.Black, new PdfArea(mydoc, 145, 381, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                            mypdfpage.Add(pdfdoi);
                            exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]).Trim();
                            sql3 = "Select sm.semester,ss.subject_type,ss.Lab,s.subjectpriority,s.subject_no,s.subject_code,s.subject_name,isnull(m.internal_mark,0) as internal_mark,isnull(m.external_mark,0) as external_mark, (case when isnull(m.internal_mark,0) >=0  then   isnull(m.internal_mark,0) else 0 end) +   (case when isnull(m.external_mark,0) >=0  then   isnull(m.external_mark,0) else 0 end) as total,  case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABST' when 'WHD' then 'WWW' else 'FAIL' end as result,'0' as MarkOrExempted,'' Message, '' as description from Mark_Entry m,syllabus_master sm,sub_sem ss,Subject s  where sm.syll_code=s.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.Exam_Code = '" + exam_code + "' and m.roll_no='" + rollnosub + "' union select sm.semester,ss.subject_type,ss.Lab,s.subjectpriority,s.subject_no,s.subject_code,s.subject_name,'0' as internal_mark,'0' external_mark, '0' as total,'' as result ,'1' as MarkOrExempted,sg.grade as Message,sg.description from subject s,sub_sem ss,syllabus_master sm,SpecialCourseSubject scs,SpecialCourseGradeDetail sg,Registration r where sg.MarkType=scs.MarkType and r.App_No=scs.app_no and s.subject_no=scs.subject_no and scs.CurrentSem=sm.semester and ss.syll_code=sm.syll_code and ss.syll_code=s.syll_code and s.subType_no=ss.subType_no and s.syll_code=sm.syll_code and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and sm.semester='" + sem + "' and r.Roll_No='" + rollnosub + "' order by sm.semester,ss.subject_type,ss.lab,s.subjectpriority,s.subject_no";
                            printds_rows.Clear();
                            printds_rows.Dispose();
                            printds_rows = da.select_method_wo_parameter(sql3, "Text");
                            PdfTable table1forpage2 = mydoc.NewTable(Fontco10, 1, 2, 1);
                            table1forpage2.VisibleHeaders = false;
                            table1forpage2.SetBorders(Color.Black, 1, BorderType.None);
                            table1forpage2.SetColumnsWidth(new int[] { 425, 130 });
                            table1forpage2.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2.Cell(0, 0).SetContent(Convert.ToString(ddlbranch.SelectedItem.Text).Trim());
                            table1forpage2.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2.Cell(0, 1).SetContent(monthandyear);
                            PdfTablePage newpdftabpage2 = table1forpage2.CreateTablePage(new PdfArea(mydoc, 43, 121, 553, 50));
                            mypdfpage.Add(newpdftabpage2);
                            PdfTable table1forpage2a = mydoc.NewTable(Fontco10, 1, 3, 1);
                            table1forpage2a.VisibleHeaders = false;
                            table1forpage2a.SetBorders(Color.Black, 1, BorderType.None);
                            table1forpage2a.SetColumnsWidth(new int[] { 283, 109, 152 });
                            table1forpage2a.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2a.Cell(0, 0).SetContent(studname);
                            table1forpage2a.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2a.Cell(0, 1).SetContent(dob);
                            table1forpage2a.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2a.Cell(0, 2).SetContent(regnumber);
                            newpdftabpage2 = table1forpage2a.CreateTablePage(new PdfArea(mydoc, 43, 160, 553, 50));
                            mypdfpage.Add(newpdftabpage2);
                            if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                            {
                                PdfTable fullmark = mydoc.NewTable(Fontarial7, printds_rows.Tables[0].Rows.Count + 1, 6, 3);
                                fullmark.VisibleHeaders = false;
                                fullmark.SetBorders(Color.Black, 1, BorderType.None);
                                fullmark.Columns[0].SetWidth(82);
                                fullmark.Columns[1].SetWidth(317);
                                fullmark.Columns[2].SetWidth(31);
                                fullmark.Columns[3].SetWidth(31);
                                fullmark.Columns[4].SetWidth(43);
                                fullmark.Columns[5].SetWidth(54);
                                for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                                {
                                    string markOrExempted = Convert.ToString(printds_rows.Tables[0].Rows[i]["MarkOrExempted"]).Trim();
                                    string message = Convert.ToString(printds_rows.Tables[0].Rows[i]["Message"]).Trim();
                                    string description = Convert.ToString(printds_rows.Tables[0].Rows[i]["description"]).Trim();
                                    if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                    {
                                        fullmark.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        string subjetccode = "  " + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim();
                                        fullmark.Cell(i, 0).SetContent(subjetccode);
                                        fullmark.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        fullmark.Cell(i, 1).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim().ToUpper());
                                        if (markOrExempted.Trim() == "0")
                                        {
                                            fullmark.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 2).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim());
                                            double internalmmark = 0;
                                            double externalmark1 = 0;
                                            double totalintext = 0;
                                            internalmmark = 0;
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim(), out internalmmark);
                                            double extfinal = 0;
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim(), out internalmmark);
                                            extfinal = Math.Round(extfinal, 0);
                                            externalmark1 = extfinal;
                                            string checkedmark = string.Empty;
                                            if (extfinal < 0)
                                            {
                                                checkedmark = loadmarkat(Convert.ToString(extfinal));
                                            }
                                            else
                                            {
                                                checkedmark = Convert.ToString(extfinal);
                                            }
                                            if (internalmmark >= 0)
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = internalmmark + externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = internalmmark;
                                                }
                                            }
                                            else
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = 0;
                                                }
                                            }
                                            fullmark.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 3).SetContent(checkedmark);
                                            double totfinal = 0;
                                            totfinal = Math.Round(totalintext, 0);
                                            fullmark.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 4).SetContent(Convert.ToString(totfinal));
                                            fullmark.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 5).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim());
                                        }
                                        else
                                        {
                                            fullmark.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 2).SetContent("*** " + message + " ***");
                                            foreach (PdfCell pr in fullmark.CellRange(i, 2, i, 2).Cells)
                                            {
                                                pr.ColSpan = 4;
                                            }
                                        }
                                    }
                                }
                                fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetFont(Fontpala12);
                                fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContent("****** End of Statement ******");
                                foreach (PdfCell pr in fullmark.CellRange(printds_rows.Tables[0].Rows.Count, 0, printds_rows.Tables[0].Rows.Count, 0).Cells)
                                {
                                    pr.ColSpan = 5;
                                }
                                newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 43, 210, 550, 400));
                                mypdfpage.Add(newpdftabpage2);
                            }
                        }
                        PdfTable table1forpagecoe = mydoc.NewTable(Fontarial9, 1, 2, 1);
                        table1forpagecoe.VisibleHeaders = false;
                        table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagecoe.SetColumnsWidth(new int[] { 190 });
                        table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        table1forpagecoe.Cell(0, 0).SetContent("." + coe);
                        PdfTablePage newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 430, 374, 190, 50));
                        mypdfpage.Add(newpdftabpagecoe);
                        table1forpagecoe = mydoc.NewTable(Fontarial9, 1, 1, 1);
                        table1forpagecoe.VisibleHeaders = false;
                        table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagecoe.SetColumnsWidth(new int[] { 10 });
                        table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleRight);
                        table1forpagecoe.Cell(0, 0).SetContent("D");
                        newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 418, 374, 10, 25));
                        mypdfpage.Add(newpdftabpagecoe);
                        table1forpagecoe = mydoc.NewTable(Fontarial9, 1, 1, 1);
                        table1forpagecoe.VisibleHeaders = false;
                        table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagecoe.SetColumnsWidth(new int[] { 10 });
                        table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        table1forpagecoe.Cell(0, 0).SetContent("R");
                        table1forpagecoe.Cell(0, 0).SetFont(Fontarial7r);
                        newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 426, 375.5, 10, 25));
                        mypdfpage.Add(newpdftabpagecoe);
                        mypdfpage.SaveToDocument();
                    }
                }
            }
        }
        string appPath = HttpContext.Current.Server.MapPath("~");
        if (appPath != "")
        {
            string szPath = appPath + "/Report/";
            string szFile = "CertificateCourseMarkSheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
            mydoc.SaveToFile(szPath + szFile);
            Response.ClearHeaders();
            Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
            Response.ContentType = "application/pdf";
            Response.WriteFile(szPath + szFile);
        }
    }

    public void ugmarkstatementf12008()//COMPLETED @ 12.02.2016
    {
        DataSet printds = new DataSet();
        DataSet printds_new = new DataSet();
        DataSet printds_rows = new DataSet();
        string degree = string.Empty;
        string monthandyear = string.Empty;
        string studname = string.Empty;
        string dob = string.Empty;
        string rollnosub = string.Empty;
        string regnumber = string.Empty;
        string batch_year = string.Empty;
        string degree_code = string.Empty;
        string exam_code = string.Empty;
        string sem = string.Empty;
        string branch = string.Empty;
        int month = 0;
        string monthstr = string.Empty;
        string sql2 = string.Empty;
        string sql3 = string.Empty;
        string semroman = string.Empty;
        string coe = string.Empty;
        DataSet gradeds = new DataSet();
        Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
        Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
        Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
        Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
        Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
        Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
        Font Fontarial9 = new Font("Arial", 8, FontStyle.Bold);
        Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
        Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
        //Font tamil = new Font("AMUDHAM.TTF", 16, FontStyle.Regular);
        PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.A4);
        PdfPage mypdfpage;
        if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
        {
            FpSpread2.SaveChanges();
            for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                if (isval == 1)
                {
                    printds.Clear();
                    printds.Dispose();
                    printds_new.Clear();
                    printds_new.Dispose();
                    rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                    regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                    string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';";
                    printds = da.select_method_wo_parameter(sql, "Text");
                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                    {
                        mypdfpage = mydoc.NewPage();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        coe = Convert.ToString(printds.Tables[1].Rows[0]["coe"]).Trim();
                        string[] spiltcoe = coe.Split('.');
                        string newcoe = string.Empty;
                        //for (int ce = 1; ce <= spiltcoe.GetUpperBound(0); ce++)
                        //{
                        //    if (newcoe == "")
                        //    {
                        //        newcoe = Convert.ToString(spiltcoe[ce]);
                        //    }
                        //    else
                        //    {
                        //        newcoe = newcoe + "." + Convert.ToString(spiltcoe[ce]);
                        //    }
                        //}
                        //coe = newcoe;
                        //month = ddlMonth.SelectedIndex;
                        //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                        int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                        monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                        string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                        monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        monthandyear = monthandyear.ToUpper();
                        studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        branch = Convert.ToString(printds.Tables[0].Rows[0]["Dept_name"]).Trim();
                        dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]).Trim();
                        string stdappno = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim();
                        sql2 = "select * from exam_details where    degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                        printds_new = da.select_method_wo_parameter(sql2, "Text");
                        if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                        {
                            sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
                            if (sem == "1")
                            {
                                semroman = "I";
                            }
                            else if (sem == "2")
                            {
                                semroman = "II";
                            }
                            else if (sem == "3")
                            {
                                semroman = "III";
                            }
                            else if (sem == "4")
                            {
                                semroman = "IV";
                            }
                            else if (sem == "5")
                            {
                                semroman = "V";
                            }
                            else if (sem == "6")
                            {
                                semroman = "VI";
                            }
                            else if (sem == "7")
                            {
                                semroman = "--";
                            }
                            else if (sem == "8")
                            {
                                semroman = "--";
                            }
                            PdfTextArea pdfdoi = new PdfTextArea(Fontco10, System.Drawing.Color.Black, new PdfArea(mydoc, 113, 803, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                            mypdfpage.Add(pdfdoi);
                            exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]).Trim();
                            sql3 = "Select sm.semester,ss.subject_type,ss.Lab,s.subjectpriority,s.subject_no,s.subject_code,s.subject_name,s.max_int_marks,isnull(m.internal_mark,0) as internal_mark,s.max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(m.internal_mark,0) >=0  then   isnull(m.internal_mark,0) else 0 end) +   (case when isnull(m.external_mark,0) >=0  then   isnull(m.external_mark,0) else 0 end) as total, s.credit_points,case m.result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,'0' as MarkOrExempted,'' Message, '' as description from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm where sm.syll_code=s.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and m.Exam_Code = '" + exam_code + "' and m.roll_no='" + rollnosub + "' union select sm.semester,ss.subject_type,ss.Lab,s.subjectpriority,s.subject_no,s.subject_code,s.subject_name,'0' as max_int_marks,'0' as internal_mark,'0' as max_ext_marks,'0' external_mark,'0' as maxtotal, '0' as total,s.credit_points,'' as result ,'1' as MarkOrExempted,sg.grade as Message,sg.description from subject s,sub_sem ss,syllabus_master sm,SpecialCourseSubject scs,SpecialCourseGradeDetail sg,Registration r where sg.MarkType=scs.MarkType and r.App_No=scs.app_no and s.subject_no=scs.subject_no and scs.CurrentSem=sm.semester and ss.syll_code=sm.syll_code and ss.syll_code=s.syll_code and s.subType_no=ss.subType_no and s.syll_code=sm.syll_code and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and sm.semester='" + sem + "' and r.Roll_No='" + rollnosub + "' order by sm.semester,ss.subject_type,ss.lab,s.subjectpriority,s.subject_no";
                            printds_rows.Clear();
                            printds_rows.Dispose();
                            printds_rows = da.select_method_wo_parameter(sql3, "Text");
                            PdfTable table1forpage1 = mydoc.NewTable(Fontco12, 1, 3, 1);
                            table1forpage1.VisibleHeaders = false;
                            table1forpage1.SetBorders(Color.Black, 1, BorderType.None);
                            table1forpage1.SetColumnsWidth(new int[] { 111, 137, 119 });
                            table1forpage1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage1.Cell(0, 0).SetContent(degree);
                            table1forpage1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage1.Cell(0, 1).SetContent("");
                            table1forpage1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage1.Cell(0, 2).SetContent(monthandyear);
                            PdfTablePage newpdftabpage2 = table1forpage1.CreateTablePage(new PdfArea(mydoc, 116, 63, 366, 50));
                            mypdfpage.Add(newpdftabpage2);
                            PdfTable table1forpage2 = mydoc.NewTable(Fontco10, 1, 3, 1);
                            table1forpage2.VisibleHeaders = false;
                            table1forpage2.SetBorders(Color.Black, 1, BorderType.None);
                            table1forpage2.SetColumnsWidth(new int[] { 332, 108, 133 });
                            table1forpage2.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2.Cell(0, 0).SetContent(studname);
                            table1forpage2.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2.Cell(0, 1).SetContent(dob);
                            table1forpage2.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2.Cell(0, 2).SetContent(regnumber);
                            newpdftabpage2 = table1forpage2.CreateTablePage(new PdfArea(mydoc, 12, 127, 567, 50));
                            mypdfpage.Add(newpdftabpage2);
                            PdfTable table1forpage2a = mydoc.NewTable(Fontco10, 1, 4, 1);
                            table1forpage2a.VisibleHeaders = false;
                            table1forpage2a.SetBorders(Color.Black, 1, BorderType.None);
                            table1forpage2a.SetColumnsWidth(new int[] { 255, 77, 108, 133 });
                            table1forpage2a.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2a.Cell(0, 0).SetContent(branch);
                            table1forpage2a.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2a.Cell(0, 1).SetContent(semroman);
                            table1forpage2a.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2a.Cell(0, 2).SetContent(monthandyear);
                            table1forpage2a.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2a.Cell(0, 3).SetContent(txtdop.Text);
                            // newpdftabpage2 = table1forpage2a.CreateTablePage(new PdfArea(mydoc, 12, 158, 558, 50));
                            newpdftabpage2 = table1forpage2a.CreateTablePage(new PdfArea(mydoc, 12, 163, 567, 50));
                            mypdfpage.Add(newpdftabpage2);
                            if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                            {
                                PdfTable fullmark = mydoc.NewTable(Fontarial7, printds_rows.Tables[0].Rows.Count + 1, 10, 3);
                                fullmark.VisibleHeaders = false;
                                fullmark.SetBorders(Color.Black, 1, BorderType.None);
                                fullmark.Columns[0].SetWidth(67);
                                fullmark.Columns[1].SetWidth(240);
                                fullmark.Columns[2].SetWidth(34);
                                fullmark.Columns[3].SetWidth(34);
                                fullmark.Columns[4].SetWidth(34);
                                fullmark.Columns[5].SetWidth(34);
                                fullmark.Columns[6].SetWidth(34);
                                fullmark.Columns[7].SetWidth(34);
                                fullmark.Columns[8].SetWidth(40);
                                fullmark.Columns[9].SetWidth(43);
                                for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                                {
                                    string markOrExempted = Convert.ToString(printds_rows.Tables[0].Rows[i]["MarkOrExempted"]).Trim();
                                    string message = Convert.ToString(printds_rows.Tables[0].Rows[i]["Message"]).Trim();
                                    string description = Convert.ToString(printds_rows.Tables[0].Rows[i]["description"]).Trim();
                                    if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                    {
                                        fullmark.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        string subjectccoden = "   " + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim();
                                        fullmark.Cell(i, 0).SetContent(subjectccoden);
                                        fullmark.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        fullmark.Cell(i, 1).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim().ToUpper());
                                        fullmark.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        if (markOrExempted.Trim() == "0")
                                        {
                                            fullmark.Cell(i, 2).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["max_int_marks"]).Trim());
                                            double internalmmark = 0;
                                            double externalmark1 = 0;
                                            double totalintext = 0;
                                            fullmark.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 3).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim());
                                            internalmmark = 0;
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim(), out internalmmark);
                                            fullmark.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 4).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["max_ext_marks"]).Trim());
                                            double extfinal = 0;
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim(), out extfinal);
                                            extfinal = Math.Round(extfinal, 0);
                                            externalmark1 = extfinal;
                                            string checkedmark = string.Empty;
                                            if (extfinal < 0)
                                            {
                                                checkedmark = loadmarkat(Convert.ToString(extfinal));
                                            }
                                            else
                                            {
                                                checkedmark = Convert.ToString(extfinal);
                                            }
                                            if (internalmmark >= 0)
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = internalmmark + externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = internalmmark;
                                                }
                                            }
                                            else
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = 0;
                                                }
                                            }
                                            fullmark.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 5).SetContent(checkedmark);
                                            fullmark.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 6).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["maxtotal"]).Trim());
                                            double totfinal = 0;
                                            totfinal = Math.Round(totalintext, 0, MidpointRounding.AwayFromZero);
                                            fullmark.Cell(i, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 7).SetContent(Convert.ToString(totfinal));
                                            fullmark.Cell(i, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 8).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
                                            string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim();
                                            fullmark.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 9).SetContent(result);
                                        }
                                        else
                                        {
                                            fullmark.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 2).SetContent("*** " + message + " ***");
                                            foreach (PdfCell pr in fullmark.CellRange(i, 2, i, 2).Cells)
                                            {
                                                pr.ColSpan = 8;
                                            }
                                        }
                                    }
                                }
                                fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetFont(Fontpala12);
                                fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContent("****** End of Statement ******");
                                foreach (PdfCell pr in fullmark.CellRange(printds_rows.Tables[0].Rows.Count, 0, printds_rows.Tables[0].Rows.Count, 0).Cells)
                                {
                                    pr.ColSpan = 10;
                                }
                                newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 12, 255, 567, 800));
                                mypdfpage.Add(newpdftabpage2);
                            }
                        }
                        PdfTable table1forpagecoe = mydoc.NewTable(Fontarial9, 1, 2, 1);
                        table1forpagecoe.VisibleHeaders = false;
                        table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagecoe.SetColumnsWidth(new int[] { 190 });
                        table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        table1forpagecoe.Cell(0, 0).SetContent(coe);
                        PdfTablePage newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 387, 808, 190, 50));//392
                        mypdfpage.Add(newpdftabpagecoe);
                        table1forpagecoe = mydoc.NewTable(Fontarial9, 1, 1, 1);
                        table1forpagecoe.VisibleHeaders = false;
                        table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagecoe.SetColumnsWidth(new int[] { 10 });
                        table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleRight);
                        //table1forpagecoe.Cell(0, 0).SetContent("D");
                        // table1forpagecoe.Cell(0, 0).SetFont(Fontarial12);
                        newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 375, 808, 10, 25));//380
                        mypdfpage.Add(newpdftabpagecoe);
                        table1forpagecoe = mydoc.NewTable(Fontarial9, 1, 1, 1);
                        table1forpagecoe.VisibleHeaders = false;
                        table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagecoe.SetColumnsWidth(new int[] { 10 });
                        table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        // table1forpagecoe.Cell(0, 0).SetContent("R");
                        table1forpagecoe.Cell(0, 0).SetFont(Fontarial7r);
                        newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 383, 809.5, 10, 25));//388
                        mypdfpage.Add(newpdftabpagecoe);
                        string year = Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        string collcode = Convert.ToString(ddlCollege.SelectedValue).Trim();
                        PdfTable table1forpagegpa = mydoc.NewTable(Fontco12a, 1, 4, 1);
                        table1forpagegpa.VisibleHeaders = false;
                        table1forpagegpa.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagegpa.SetColumnsWidth(new int[] { 94, 94, 94, 94 });
                        table1forpagegpa.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        mypdfpage.SaveToDocument();
                    }
                }
            }
        }
        string appPath = HttpContext.Current.Server.MapPath("~");
        if (appPath != "")
        {
            string szPath = appPath + "/Report/";
            string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
            mydoc.SaveToFile(szPath + szFile);
            Response.ClearHeaders();
            Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
            Response.ContentType = "application/pdf";
            Response.WriteFile(szPath + szFile);
        }
    }

    public void ugmarkstatementf22007()//COMPLETED @ 13.02.2016
    {
        DataSet printds = new DataSet();
        DataSet printds_new = new DataSet();
        DataSet printds_rows = new DataSet();
        string degree = string.Empty;
        string monthandyear = string.Empty;
        string studname = string.Empty;
        string dob = string.Empty;
        string rollnosub = string.Empty;
        string regnumber = string.Empty;
        string batch_year = string.Empty;
        string degree_code = string.Empty;
        string exam_code = string.Empty;
        string sem = string.Empty;
        string branch = string.Empty;
        int month = 0;
        string monthstr = string.Empty;
        string sql2 = string.Empty;
        string sql3 = string.Empty;
        string semroman = string.Empty;
        string coe = string.Empty;
        DataSet gradeds = new DataSet();
        Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
        Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
        Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
        Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
        Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
        Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
        Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
        Font Fontarial9 = new Font("Arial", 8, FontStyle.Bold);
        Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
        Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
        //Font tamil = new Font("AMUDHAM.TTF", 16, FontStyle.Regular);
        PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.A4);
        PdfPage mypdfpage;
        if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
        {
            FpSpread2.SaveChanges();
            for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                if (isval == 1)
                {
                    printds.Clear();
                    printds.Dispose();
                    printds_new.Clear();
                    printds_new.Dispose();
                    rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                    regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                    string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';";
                    printds = da.select_method_wo_parameter(sql, "Text");
                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                    {
                        mypdfpage = mydoc.NewPage();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        coe = Convert.ToString(printds.Tables[1].Rows[0]["coe"]).Trim();
                        string[] spiltcoe = coe.Split('.');
                        string newcoe = string.Empty;
                        //for (int ce = 1; ce <= spiltcoe.GetUpperBound(0); ce++)
                        //{
                        //    if (newcoe == "")
                        //    {
                        //        newcoe = Convert.ToString(spiltcoe[ce]);
                        //    }
                        //    else
                        //    {
                        //        newcoe = newcoe + "." + Convert.ToString(spiltcoe[ce]);
                        //    }
                        //}
                        //coe = newcoe;
                        //month = ddlMonth.SelectedIndex;
                        //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                        int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                        monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                        string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                        monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        monthandyear = monthandyear.ToUpper();
                        studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        branch = Convert.ToString(printds.Tables[0].Rows[0]["Dept_name"]).Trim();
                        dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]).Trim();
                        string stdappno = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim();
                        sql2 = "select * from exam_details where    degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                        printds_new = da.select_method_wo_parameter(sql2, "Text");
                        if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                        {
                            sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
                            if (sem == "1")
                            {
                                semroman = "I";
                            }
                            else if (sem == "2")
                            {
                                semroman = "II";
                            }
                            else if (sem == "3")
                            {
                                semroman = "III";
                            }
                            else if (sem == "4")
                            {
                                semroman = "IV";
                            }
                            else if (sem == "5")
                            {
                                semroman = "V";
                            }
                            else if (sem == "6")
                            {
                                semroman = "VI";
                            }
                            else if (sem == "7")
                            {
                                semroman = "--";
                            }
                            else if (sem == "8")
                            {
                                semroman = "--";
                            }
                            string txtddate = Convert.ToString(txtdoi.Text).Trim();
                            PdfTextArea pdfdoi = new PdfTextArea(Fontco10, System.Drawing.Color.Black, new PdfArea(mydoc, 115, 796, 305, 50), System.Drawing.ContentAlignment.TopLeft, txtddate);
                            mypdfpage.Add(pdfdoi);
                            exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]).Trim();
                            sql3 = "Select sm.semester,ss.subject_type,ss.Lab,s.subjectpriority,s.subject_no,s.subject_code,s.subject_name,s.max_int_marks,isnull(internal_mark,0) as internal_mark,s.max_ext_marks,isnull(m.external_mark,0) as external_mark,maxtotal, (case when isnull(m.internal_mark,0) >=0  then   isnull(m.internal_mark,0) else 0 end) +   (case when isnull(m.external_mark,0) >=0  then   isnull(m.external_mark,0) else 0 end) as total,s.credit_points,case m.result when 'Pass' Then 'PASS' when 'AAA' then 'AAA' when 'WHD' then 'WHD' else 'FAIL' end as result,'0' as MarkOrExempted,'' Message, '' as description from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm where sm.syll_code=s.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and m.Exam_Code = '" + exam_code + "' and m.roll_no='" + rollnosub + "' union select sm.semester,ss.subject_type,ss.Lab,s.subjectpriority,s.subject_no,s.subject_code,s.subject_name,'0' as max_int_marks,'0' as internal_mark,'0' as max_ext_marks,'0' external_mark,'0' as maxtotal, '0' as total,s.credit_points,'' as result ,'1' as MarkOrExempted,sg.grade as Message,sg.description from subject s,sub_sem ss,syllabus_master sm,SpecialCourseSubject scs,SpecialCourseGradeDetail sg,Registration r where sg.MarkType=scs.MarkType and r.App_No=scs.app_no and s.subject_no=scs.subject_no and scs.CurrentSem=sm.semester and ss.syll_code=sm.syll_code and ss.syll_code=s.syll_code and s.subType_no=ss.subType_no and s.syll_code=sm.syll_code and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and sm.semester='" + sem + "' and r.Roll_No='" + rollnosub + "'  order by sm.semester,ss.subject_type,ss.lab,s.subjectpriority,s.subject_no";
                            printds_rows.Clear();
                            printds_rows.Dispose();
                            printds_rows = da.select_method_wo_parameter(sql3, "Text");
                            PdfTable table1forpage1 = mydoc.NewTable(Fontco12, 1, 3, 1);
                            table1forpage1.VisibleHeaders = false;
                            table1forpage1.SetBorders(Color.Black, 1, BorderType.None);
                            table1forpage1.SetColumnsWidth(new int[] { 111, 137, 119 });
                            table1forpage1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage1.Cell(0, 0).SetContent(degree);
                            table1forpage1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage1.Cell(0, 1).SetContent("");
                            table1forpage1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage1.Cell(0, 2).SetContent(monthandyear);
                            PdfTablePage newpdftabpage2 = table1forpage1.CreateTablePage(new PdfArea(mydoc, 116, 56, 366, 50));
                            mypdfpage.Add(newpdftabpage2);
                            PdfTable table1forpage2 = mydoc.NewTable(Fontco10, 1, 3, 1);
                            table1forpage2.VisibleHeaders = false;
                            table1forpage2.SetBorders(Color.Black, 1, BorderType.None);
                            table1forpage2.SetColumnsWidth(new int[] { 332, 108, 133 });
                            table1forpage2.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2.Cell(0, 0).SetContent(studname);
                            table1forpage2.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2.Cell(0, 1).SetContent(dob);
                            table1forpage2.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2.Cell(0, 2).SetContent(regnumber);
                            // newpdftabpage2 = table1forpage2.CreateTablePage(new PdfArea(mydoc, 14, 130, 573, 50));//sr
                            newpdftabpage2 = table1forpage2.CreateTablePage(new PdfArea(mydoc, 12, 121, 567, 50));//sr
                            mypdfpage.Add(newpdftabpage2);
                            PdfTable table1forpage2a = mydoc.NewTable(Fontco10, 1, 4, 1);
                            table1forpage2a.VisibleHeaders = false;
                            table1forpage2a.SetBorders(Color.Black, 1, BorderType.None);
                            table1forpage2a.SetColumnsWidth(new int[] { 255, 77, 108, 133 });
                            table1forpage2a.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2a.Cell(0, 0).SetContent(branch);
                            table1forpage2a.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2a.Cell(0, 1).SetContent(semroman);
                            table1forpage2a.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2a.Cell(0, 2).SetContent(monthandyear);
                            table1forpage2a.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            table1forpage2a.Cell(0, 3).SetContent(txtdop.Text);
                            // newpdftabpage2 = table1forpage2a.CreateTablePage(new PdfArea(mydoc, 12, 158, 558, 50));
                            newpdftabpage2 = table1forpage2a.CreateTablePage(new PdfArea(mydoc, 12, 158, 567, 50));
                            mypdfpage.Add(newpdftabpage2);
                            if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                            {
                                PdfTable fullmark = mydoc.NewTable(Fontarial7, printds_rows.Tables[0].Rows.Count + 1, 10, 3);
                                fullmark.VisibleHeaders = false;
                                fullmark.SetBorders(Color.Black, 1, BorderType.None);
                                fullmark.Columns[0].SetWidth(69);
                                fullmark.Columns[1].SetWidth(243);
                                fullmark.Columns[2].SetWidth(34);
                                fullmark.Columns[3].SetWidth(34);
                                fullmark.Columns[4].SetWidth(34);
                                fullmark.Columns[5].SetWidth(34);
                                fullmark.Columns[6].SetWidth(34);
                                fullmark.Columns[7].SetWidth(34);
                                fullmark.Columns[8].SetWidth(40);
                                fullmark.Columns[9].SetWidth(43);
                                for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                                {
                                    string markOrExempted = Convert.ToString(printds_rows.Tables[0].Rows[i]["MarkOrExempted"]).Trim();
                                    string message = Convert.ToString(printds_rows.Tables[0].Rows[i]["Message"]).Trim();
                                    string description = Convert.ToString(printds_rows.Tables[0].Rows[i]["description"]).Trim();
                                    if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                    {
                                        fullmark.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        string subjectccoden = "   " + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim();
                                        fullmark.Cell(i, 0).SetContent(subjectccoden);
                                        fullmark.Columns[1].SetFont(Fontarial7a);
                                        fullmark.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        string subjectnname = "  " + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim().ToUpper();
                                        fullmark.Cell(i, 1).SetContent(subjectnname);
                                        if (markOrExempted.Trim() == "0")
                                        {
                                            string includespace = " " + Convert.ToString(printds_rows.Tables[0].Rows[i]["max_int_marks"]).Trim();
                                            fullmark.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 2).SetContent(includespace);
                                            double internalmmark = 0;
                                            double externalmark1 = 0;
                                            double totalintext = 0;
                                            includespace = " " + Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim();
                                            fullmark.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 3).SetContent(includespace);
                                            internalmmark = Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim());
                                            includespace = "  " + Convert.ToString(printds_rows.Tables[0].Rows[i]["max_ext_marks"]).Trim();
                                            fullmark.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 4).SetContent(includespace);
                                            double extfinal = Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim());
                                            extfinal = Math.Round(extfinal, 0);
                                            externalmark1 = extfinal;
                                            string checkedmark = string.Empty;
                                            if (extfinal < 0)
                                            {
                                                checkedmark = loadmarkat(Convert.ToString(extfinal).Trim());
                                            }
                                            else
                                            {
                                                checkedmark = Convert.ToString(extfinal).Trim();
                                            }
                                            if (internalmmark >= 0)
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = internalmmark + externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = internalmmark;
                                                }
                                            }
                                            else
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = 0;
                                                }
                                            }
                                            includespace = "  " + checkedmark;
                                            fullmark.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 5).SetContent(includespace);
                                            includespace = " " + Convert.ToString(printds_rows.Tables[0].Rows[i]["maxtotal"]).Trim();
                                            fullmark.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 6).SetContent(includespace);
                                            double totfinal = 0;
                                            totfinal = Math.Round(totalintext, 0);
                                            includespace = " " + Convert.ToString(totfinal);
                                            fullmark.Cell(i, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 7).SetContent(includespace);
                                            fullmark.Cell(i, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 8).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
                                            string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim();
                                            fullmark.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 9).SetContent(result);
                                        }
                                        else
                                        {
                                            fullmark.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 2).SetContent("*** " + message + " ***");
                                            foreach (PdfCell pr in fullmark.CellRange(i, 2, i, 2).Cells)
                                            {
                                                pr.ColSpan = 8;
                                            }
                                        }
                                    }
                                }
                                fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetFont(Fontpala12);
                                fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContent("****** End of Statement ******");
                                foreach (PdfCell pr in fullmark.CellRange(printds_rows.Tables[0].Rows.Count, 0, printds_rows.Tables[0].Rows.Count, 0).Cells)
                                {
                                    pr.ColSpan = 10;
                                }
                                newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 12, 250, 567, 800));
                                mypdfpage.Add(newpdftabpage2);
                            }
                        }
                        PdfTable table1forpagecoe = mydoc.NewTable(Fontarial9, 1, 2, 1);
                        table1forpagecoe.VisibleHeaders = false;
                        table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagecoe.SetColumnsWidth(new int[] { 190 });
                        table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        table1forpagecoe.Cell(0, 0).SetContent(coe);
                        PdfTablePage newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 392, 799, 190, 50));//392
                        mypdfpage.Add(newpdftabpagecoe);
                        table1forpagecoe = mydoc.NewTable(Fontarial9, 1, 1, 1);
                        table1forpagecoe.VisibleHeaders = false;
                        table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagecoe.SetColumnsWidth(new int[] { 10 });
                        table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleRight);
                        // table1forpagecoe.Cell(0, 0).SetContent("D");
                        // table1forpagecoe.Cell(0, 0).SetFont(Fontarial12);
                        newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 380, 799, 10, 25));//380
                        mypdfpage.Add(newpdftabpagecoe);
                        table1forpagecoe = mydoc.NewTable(Fontarial9, 1, 1, 1);
                        table1forpagecoe.VisibleHeaders = false;
                        table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagecoe.SetColumnsWidth(new int[] { 10 });
                        table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        // table1forpagecoe.Cell(0, 0).SetContent("R");
                        table1forpagecoe.Cell(0, 0).SetFont(Fontarial7r);
                        newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 388, 800.5, 10, 25));//388
                        mypdfpage.Add(newpdftabpagecoe);
                        string year = Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        string collcode = Convert.ToString(ddlCollege.SelectedValue).Trim();
                        PdfTable table1forpagegpa = mydoc.NewTable(Fontco12a, 1, 4, 1);
                        table1forpagegpa.VisibleHeaders = false;
                        table1forpagegpa.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagegpa.SetColumnsWidth(new int[] { 94, 94, 94, 94 });
                        table1forpagegpa.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        mypdfpage.SaveToDocument();
                    }
                }
            }
        }
        string appPath = HttpContext.Current.Server.MapPath("~");
        if (appPath != "")
        {
            string szPath = appPath + "/Report/";
            string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
            mydoc.SaveToFile(szPath + szFile);
            Response.ClearHeaders();
            Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
            Response.ContentType = "application/pdf";
            Response.WriteFile(szPath + szFile);
        }
    }

    public void Gradebasedconsolidated()//COMPLETED @ 13.02.2016
    {
        {
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            string lblerror1 = string.Empty;
            Boolean printpage = false;
            string edu_level = string.Empty;
            string degree = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string roman = string.Empty;
            string semroman = string.Empty;
            string grade = string.Empty;
            string gradepoints = string.Empty;
            string coe = string.Empty;
            string subjectcode_Part1 = string.Empty;
            string subjectcode_Part2 = string.Empty;
            string subjectcode_Part3 = string.Empty;
            string subjectcode_Part4 = string.Empty;
            string cal_gpa = string.Empty;
            string current_semester = string.Empty;
            string subtype = string.Empty;
            DataSet gradeds = new DataSet();
            Font f1_cos10bold = new Font("Comic Sans MS", 10, FontStyle.Bold);
            Font f2_cos9bold = new Font("Comic Sans MS", 9, FontStyle.Bold);
            Font f3_arial10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font f4_arial7reg = new Font("Arial", 7, FontStyle.Regular);
            Font f5_pal10bold = new Font("Palatino Linotype", 10, FontStyle.Bold);
            //Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            //Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            //Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            //Font Fontco12a = new Font("Comic Sans MS", 10, FontStyle.Bold);
            //Font Fontarial7 = new Font("Arial", 7, FontStyle.Regular);
            //Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            //Font Fontarial9 = new Font("Arial", 8, FontStyle.Bold);
            //Font Fontarial10b = new Font("Arial", 10, FontStyle.Bold);
            //Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            //Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            //Font tamil = new Font("AMUDHAM.TTF", 16, FontStyle.Regular);
            Boolean coedoc = false, princdr = false;
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.5, 34.5));
            PdfPage mypdfpage;
            //if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
            //{
            FpSpread2.SaveChanges();
            for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                if (isval == 1)
                {
                    printds.Clear();
                    printds.Dispose();
                    printds_new.Clear();
                    printds_new.Dispose();
                    rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                    regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                    string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,c.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
                    sql = sql + "  select count(distinct s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
                    sql = sql + "  Select count(distinct subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'  ";
                    sql = sql + "  Select count(distinct subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail'  and roll_no='" + rollnosub + "'  ";
                    //printds = da.select_method_wo_parameter(sql, "Text");
                    printds = da.select_method_wo_parameter(sql, "Text");
                    int noofsubapplied = Convert.ToInt32(Convert.ToString(printds.Tables[3].Rows[0][0]).Trim());
                    int noofsubpassed = Convert.ToInt32(Convert.ToString(printds.Tables[4].Rows[0][0]).Trim());
                    int noofsubfailed = Convert.ToInt32(Convert.ToString(printds.Tables[5].Rows[0][0]).Trim());
                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0 && noofsubpassed == noofsubapplied)
                    {
                        printpage = true;
                        string principal = string.Empty;
                        edu_level = Convert.ToString(printds.Tables[0].Rows[0]["edu_level"]).Trim();
                        mypdfpage = mydoc.NewPage();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        coe = Convert.ToString(printds.Tables[1].Rows[0]["coe"]).Trim();
                        //if (coe.Trim().ToLower().Contains("dr."))
                        //{
                        //    string[] spiltcoe = coe.Split(' ');
                        //    string newcoe = string.Empty;
                        //    for (int ce = 1; ce < spiltcoe.GetUpperBound(0); ce++)
                        //    {coedoc = true;
                        //        string[] spiltcoe12 = spiltcoe[0].Split('.');
                        //        if (spiltcoe12.Length == 3)
                        //        {
                        //            newcoe = Convert.ToString(spiltcoe12[1]);
                        //            newcoe = newcoe + "." + Convert.ToString(spiltcoe12[2]);
                        //        }
                        //        if (newcoe == "")
                        //        {
                        //            newcoe = Convert.ToString(spiltcoe[ce]);
                        //        }
                        //        else
                        //        {
                        //            newcoe = newcoe + " " + Convert.ToString(spiltcoe[ce]);
                        //        }
                        //    }
                        //    coe = newcoe;
                        //}
                        principal = Convert.ToString(printds.Tables[1].Rows[0]["principal"]).Trim();
                        string[] spiltprinci = principal.Split('.');
                        string newprinc = string.Empty;
                        //if (principal.Trim().ToLower().Contains("dr."))
                        //{
                        //    princdr = true;
                        //    for (int ce = 1; ce <= spiltprinci.GetUpperBound(0); ce++)
                        //    {
                        //        if (newprinc == "")
                        //        {
                        //            newprinc = Convert.ToString(spiltprinci[ce]);
                        //        }
                        //        else
                        //        {
                        //            newprinc = newprinc + "." + Convert.ToString(spiltprinci[ce]);
                        //        }
                        //    }
                        //    principal = newprinc.ToUpper();
                        //}
                        //   month = ddlMonth.SelectedIndex;
                        // monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                        string strMonthName = string.Empty;
                        // monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        // monthandyear = monthandyear.ToUpper();
                        studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        branch = Convert.ToString(printds.Tables[0].Rows[0]["Dept_name"]).Trim();
                        dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]).Trim();
                        string stdappno = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim();
                        //sql2 = "select * from exam_details where    degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                        // printds_new = da.select_method_wo_parameter(sql2, "Text");
                        // if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                        //{
                        //sem =Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
                        if (sem == "1")
                        {
                            semroman = "I";
                        }
                        else if (sem == "2")
                        {
                            semroman = "II";
                        }
                        else if (sem == "3")
                        {
                            semroman = "III";
                        }
                        else if (sem == "4")
                        {
                            semroman = "IV";
                        }
                        else if (sem == "5")
                        {
                            semroman = "V";
                        }
                        else if (sem == "6")
                        {
                            semroman = "VI";
                        }
                        else if (sem == "7")
                        {
                            semroman = "VII";
                        }
                        else if (sem == "8")
                        {
                            semroman = "VIII";
                        }
                        string stdphtsql = "select * from StdPhoto where app_no='" + stdappno + "'";
                        MemoryStream memoryStream = new MemoryStream();
                        DataSet dsstdpho = new DataSet();
                        dsstdpho.Clear();
                        dsstdpho.Dispose();
                        dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                        if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                        {
                            byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                            memoryStream.Write(file, 0, file.Length);
                            if (file.Length > 0)
                            {
                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                {
                                }
                                else
                                {
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                }
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                        {
                            PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                            mypdfpage.Add(LogoImage2, 13, 876, 400);
                        }
                        else
                        {
                            PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                            mypdfpage.Add(LogoImage2, 13, 876, 400);
                        }
                        PdfTextArea pdfdoi = new PdfTextArea(f2_cos9bold, System.Drawing.Color.Black, new PdfArea(mydoc, 19, 865, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                        mypdfpage.Add(pdfdoi);
                        // exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]).Trim();
                        sql3 = "Select sm.semester,ss.Subject_Type,ss.Lab,s.subjectpriority,s.subject_no,s.subject_code,s.subject_name,s.max_int_marks,m.internal_mark,s.max_ext_marks,m.external_mark,s.maxtotal,m.total,s.credit_points,m.result,m.grade,m.cp,m.exam_code,'0' as MarkOrExempted,'' as Message,'' description from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm where sm.syll_code=s.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and m.result='pass' and m.roll_no='" + rollnosub + "' union select sm.semester,ss.subject_type,ss.Lab,s.subjectpriority,s.subject_no,s.subject_code,s.subject_name,'0' as max_int_marks,'0' as internal_mark,'0' as max_ext_marks,'0' external_mark,'0' as maxtotal, '0' as total,s.credit_points,'' as result,'' grade,'0' cp,'0' exam_code,'1' as MarkOrExempted,sg.grade as Message,sg.description from subject s,sub_sem ss,syllabus_master sm,SpecialCourseSubject scs,SpecialCourseGradeDetail sg,Registration r where sg.MarkType=scs.MarkType and r.App_No=scs.app_no and s.subject_no=scs.subject_no and scs.CurrentSem=sm.semester and ss.syll_code=sm.syll_code and ss.syll_code=s.syll_code and s.subType_no=ss.subType_no and s.syll_code=sm.syll_code and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and r.Roll_No='" + rollnosub + "' order by sm.semester,ss.subject_type,ss.lab,s.subjectpriority,s.subject_no";
                        printds_rows.Clear();
                        printds_rows.Dispose();
                        printds_rows = da.select_method_wo_parameter(sql3, "Text");
                        PdfTable table1forpage2 = mydoc.NewTable(f1_cos10bold, 1, 3, 1);
                        table1forpage2.VisibleHeaders = false;
                        table1forpage2.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpage2.SetColumnsWidth(new int[] { 326, 116, 139 });
                        table1forpage2.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table1forpage2.Cell(0, 0).SetContent(studname);
                        table1forpage2.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table1forpage2.Cell(0, 1).SetContent(dob);
                        table1forpage2.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table1forpage2.Cell(0, 2).SetContent(regnumber);
                        PdfTablePage newpdftabpage2 = table1forpage2.CreateTablePage(new PdfArea(mydoc, 14, 155, 578, 50));//sr
                        mypdfpage.Add(newpdftabpage2);
                        PdfTable table1forpage2a = mydoc.NewTable(f1_cos10bold, 1, 3, 1);
                        table1forpage2a.VisibleHeaders = false;
                        table1forpage2a.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpage2a.SetColumnsWidth(new int[] { 119, 326, 139 });
                        table1forpage2a.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table1forpage2a.Cell(0, 0).SetContent(degree);
                        table1forpage2a.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table1forpage2a.Cell(0, 1).SetContent(branch);
                        table1forpage2a.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        //string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-" + DateTime.Now.ToString("yyyy");
                        string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-";
                        if (edu_level.Trim().ToLower() == "ug")
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 3));
                        }
                        else
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 2));
                        }
                        table1forpage2a.Cell(0, 2).SetContent(batch_year1);
                        newpdftabpage2 = table1forpage2a.CreateTablePage(new PdfArea(mydoc, 14, 190, 578, 50));
                        mypdfpage.Add(newpdftabpage2);
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            PdfTable fullmark = mydoc.NewTable(f4_arial7reg, printds_rows.Tables[0].Rows.Count + 1, 12, 2);
                            fullmark.VisibleHeaders = false;
                            fullmark.SetBorders(Color.Black, 1, BorderType.None);
                            fullmark.Columns[0].SetWidth(31);
                            fullmark.Columns[1].SetWidth(43);
                            fullmark.Columns[2].SetWidth(57);
                            fullmark.Columns[3].SetWidth(223);
                            fullmark.Columns[4].SetWidth(31);
                            fullmark.Columns[5].SetWidth(31);
                            fullmark.Columns[6].SetWidth(31);
                            fullmark.Columns[7].SetWidth(31);
                            fullmark.Columns[8].SetWidth(34);
                            fullmark.Columns[9].SetWidth(34);
                            fullmark.Columns[10].SetWidth(34);
                            fullmark.Columns[11].SetWidth(45);
                            for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                            {
                                string markOrExempted = Convert.ToString(printds_rows.Tables[0].Rows[i]["MarkOrExempted"]).Trim();
                                string message = Convert.ToString(printds_rows.Tables[0].Rows[i]["Message"]).Trim();
                                string description = Convert.ToString(printds_rows.Tables[0].Rows[i]["description"]).Trim();
                                subtype = Convert.ToString(printds_rows.Tables[0].Rows[i]["Subject_Type"]).Trim();
                                string[] spitsubtype = subtype.Split(' ');
                                if (spitsubtype.GetUpperBound(0) > 0)
                                {
                                    roman = Convert.ToString(spitsubtype[1]).Trim();
                                    if (roman == "1" || roman.Trim().ToUpper() == "I")
                                    {
                                        roman = "I";
                                        if (subjectcode_Part1 == "")
                                        {
                                            subjectcode_Part1 = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                        }
                                        else
                                        {
                                            subjectcode_Part1 = subjectcode_Part1 + "'" + "," + "'" + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                        }
                                    }
                                    else if (roman == "2" || roman.Trim().ToUpper() == "II")
                                    {
                                        roman = "II";
                                        if (subjectcode_Part2 == "")
                                        {
                                            subjectcode_Part2 = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                        }
                                        else
                                        {
                                            subjectcode_Part2 = subjectcode_Part2 + "'" + "," + "'" + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                        }
                                    }
                                    else if (roman == "3" || roman.Trim().ToUpper() == "III")
                                    {
                                        roman = "III";
                                        if (subjectcode_Part3 == "")
                                        {
                                            subjectcode_Part3 = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                        }
                                        else
                                        {
                                            subjectcode_Part3 = subjectcode_Part3 + "'" + "," + "'" + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                        }
                                    }
                                    else if (roman == "4" || roman.Trim().ToUpper() == "IV")
                                    {
                                        roman = "IV";
                                        if (subjectcode_Part4 == "")
                                        {
                                            subjectcode_Part4 = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                        }
                                        else
                                        {
                                            subjectcode_Part4 = subjectcode_Part4 + "'" + "," + "'" + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                        }
                                    }
                                }
                                // if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                //{
                                fullmark.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(i, 0).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["semester"]).Trim());
                                fullmark.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(i, 1).SetContent(roman);
                                fullmark.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                fullmark.Cell(i, 2).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim());
                                fullmark.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                fullmark.Cell(i, 3).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim().ToUpper());
                                if (markOrExempted.Trim() == "0")
                                {
                                    fullmark.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    fullmark.Cell(i, 4).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["maxtotal"]).Trim());
                                    string submaxtotal = Convert.ToString(printds_rows.Tables[0].Rows[i]["maxtotal"]).Trim();
                                    string subintmax = Convert.ToString(printds_rows.Tables[0].Rows[i]["max_int_marks"]).Trim();
                                    string subextmax = Convert.ToString(printds_rows.Tables[0].Rows[i]["max_ext_marks"]).Trim();
                                    double internalmmark = 0;
                                    double externalmark1 = 0;
                                    double totalintext = 0;
                                    fullmark.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    if (roman == "V")
                                    {
                                        fullmark.Cell(i, 5).SetContent("");
                                    }
                                    else
                                    {
                                        fullmark.Cell(i, 5).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim());
                                    }
                                    internalmmark = Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim());
                                    double extfinal = Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim());
                                    extfinal = Math.Round(extfinal, 0);
                                    externalmark1 = extfinal;
                                    string checkedmark = string.Empty;
                                    if (extfinal < 0)
                                    {
                                        checkedmark = loadmarkat(Convert.ToString(extfinal));
                                    }
                                    else
                                    {
                                        checkedmark = Convert.ToString(extfinal);
                                    }
                                    if (internalmmark >= 0)
                                    {
                                        if (extfinal > 0)
                                        {
                                            totalintext = internalmmark + externalmark1;
                                        }
                                        else
                                        {
                                            totalintext = internalmmark;
                                        }
                                    }
                                    else
                                    {
                                        if (extfinal > 0)
                                        {
                                            totalintext = externalmark1;
                                        }
                                        else
                                        {
                                            totalintext = 0;
                                        }
                                    }
                                    fullmark.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    if (roman == "V")
                                    {
                                        fullmark.Cell(i, 6).SetContent("");
                                    }
                                    else
                                    {
                                        fullmark.Cell(i, 6).SetContent(checkedmark);
                                    }
                                    double totfinal = 0;
                                    totfinal = Math.Round(totalintext, 0);
                                    fullmark.Cell(i, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    if (roman == "V")
                                    {
                                        fullmark.Cell(i, 7).SetContent("");
                                    }
                                    else
                                    {
                                        fullmark.Cell(i, 7).SetContent(Convert.ToString(totfinal));
                                    }
                                    double checkmarkmm = Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim());
                                    string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 16/aug 2014
                                    gradeds.Clear();
                                    gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                    if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                    {
                                        gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                    }
                                    if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                    {
                                        for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                        {
                                            if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                            {
                                                grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
                                                gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
                                            }
                                        }
                                    }
                                    double gradeibtpoint = Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim());
                                    gradeibtpoint = gradeibtpoint / 10;
                                    gradeibtpoint = Math.Round(gradeibtpoint, 1);
                                    gradepoints = Convert.ToString(gradeibtpoint);
                                    fullmark.Cell(i, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    fullmark.Cell(i, 8).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
                                    gradepoints = Convert.ToString(Math.Round(Convert.ToDouble(gradepoints), 2));
                                    gradepoints = String.Format("{0:0.00}", Convert.ToDouble(gradepoints));
                                    string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim().ToLower();
                                    if (submaxtotal.Trim() == "0" && subintmax.Trim() == "0" && subextmax.Trim() == "0")
                                    {
                                        fullmark.Cell(i, 4).SetContent("");
                                        fullmark.Cell(i, 5).SetContent("");
                                        fullmark.Cell(i, 6).SetContent("");
                                        fullmark.Cell(i, 7).SetContent("");
                                        fullmark.Cell(i, 9).SetContent("");
                                        result = "pass";
                                    }
                                    if (result == "fail")
                                    {
                                        result = "RA";
                                        grade = "U";
                                        fullmark.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        fullmark.Cell(i, 9).SetContent("0.00");
                                    }
                                    else if (result == "pass")
                                    {
                                        result = "P";
                                        fullmark.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        if (roman == "V")
                                        {
                                            fullmark.Cell(i, 9).SetContent("");
                                        }
                                        else
                                        {
                                            fullmark.Cell(i, 9).SetContent(gradepoints);
                                        }
                                    }
                                    else
                                    {
                                        result = "AB";
                                        grade = "U";
                                        fullmark.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        fullmark.Cell(i, 9).SetContent("0.00");
                                    }
                                    fullmark.Cell(i, 10).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    string newggrade = "   " + grade;
                                    if (roman == "V")
                                    {
                                        fullmark.Cell(i, 10).SetContent("");
                                    }
                                    else
                                    {
                                        fullmark.Cell(i, 10).SetContent(newggrade);
                                    }
                                    if (submaxtotal.Trim() == "0" && subintmax.Trim() == "0" && subextmax.Trim() == "0")
                                    {
                                        fullmark.Cell(i, 4).SetContent("");
                                        fullmark.Cell(i, 5).SetContent("");
                                        fullmark.Cell(i, 6).SetContent("");
                                        fullmark.Cell(i, 7).SetContent("");
                                        fullmark.Cell(i, 9).SetContent("");
                                        fullmark.Cell(i, 10).SetContent("");
                                        result = "pass";
                                    }
                                    fullmark.Cell(i, 11).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    DataView dv = new DataView();
                                    printds.Tables[2].DefaultView.RowFilter = "exam_code='" + Convert.ToString(printds_rows.Tables[0].Rows[i]["exam_code"]).Trim() + "'";
                                    dv = printds.Tables[2].DefaultView;
                                    if (dv.Count > 0)
                                    {
                                        string exam_y = Convert.ToString(dv[0]["Exam_year"]).Trim();
                                        string exam_m = Convert.ToString(dv[0]["Exam_Month"]).Trim();
                                        strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                        strMonthName = Convert.ToString(strMonthName[0]) + Convert.ToString(strMonthName[1]) + Convert.ToString(strMonthName[2]);
                                        strMonthName = strMonthName.ToUpper() + " " + exam_y + "  ";
                                        fullmark.Cell(i, 11).SetContent(strMonthName);
                                    }
                                }
                                else
                                {
                                    fullmark.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    fullmark.Cell(i, 4).SetContent("*** " + message + " ***");
                                    foreach (PdfCell pr in fullmark.CellRange(i, 4, i, 4).Cells)
                                    {
                                        pr.ColSpan = 8;
                                    }
                                }
                                //}
                            }
                            fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetFont(f5_pal10bold);
                            fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContent("****** End of Statement ******");
                            foreach (PdfCell pr in fullmark.CellRange(printds_rows.Tables[0].Rows.Count, 0, printds_rows.Tables[0].Rows.Count, 0).Cells)
                            {
                                pr.ColSpan = 12;
                            }
                            newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 14, 245, 578, 800));
                            mypdfpage.Add(newpdftabpage2);
                        }
                        // }
                        PdfTable table1forpagecoe = mydoc.NewTable(f3_arial10bold, 1, 2, 1);
                        table1forpagecoe.VisibleHeaders = false;
                        table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagecoe.SetColumnsWidth(new int[] { 190 });
                        table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        table1forpagecoe.Cell(0, 0).SetContent(coe);
                        PdfTablePage newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 450, 940, 190, 50));
                        mypdfpage.Add(newpdftabpagecoe);
                        //if (coedoc==true)
                        //{
                        //    table1forpagecoe = mydoc.NewTable(f3_arial10bold, 1, 1, 1);
                        //    table1forpagecoe.VisibleHeaders = false;
                        //    table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                        //    table1forpagecoe.SetColumnsWidth(new int[] { 10 });
                        //    table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleRight);
                        //    table1forpagecoe.Cell(0, 0).SetContent("D");
                        //    newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 475, 927, 10, 25));
                        //    mypdfpage.Add(newpdftabpagecoe);
                        //    table1forpagecoe = mydoc.NewTable(f3_arial10bold, 1, 1, 1);
                        //    table1forpagecoe.VisibleHeaders = false;
                        //    table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                        //    table1forpagecoe.SetColumnsWidth(new int[] { 10 });
                        //    table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        //    table1forpagecoe.Cell(0, 0).SetContent("r");
                        //    table1forpagecoe.Cell(0, 0).SetFont(Fontarial7r);
                        //    newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 483, 930, 10, 25));
                        //    mypdfpage.Add(newpdftabpagecoe);
                        //}
                        /////////////////principle name
                        PdfTable table1forpageprinci = mydoc.NewTable(f3_arial10bold, 1, 2, 1);
                        table1forpageprinci.VisibleHeaders = false;
                        table1forpageprinci.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpageprinci.SetColumnsWidth(new int[] { 190 });
                        table1forpageprinci.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        table1forpageprinci.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        table1forpageprinci.Cell(0, 0).SetContent(principal.Trim());
                        PdfTablePage newpdftabpageprinci = table1forpageprinci.CreateTablePage(new PdfArea(mydoc, 267, 940, 190, 50));
                        mypdfpage.Add(newpdftabpageprinci);
                        //if (princdr==true)
                        //{
                        //    table1forpageprinci = mydoc.NewTable(f3_arial10bold, 1, 1, 1);
                        //    table1forpageprinci.VisibleHeaders = false;
                        //    table1forpageprinci.SetBorders(Color.Black, 1, BorderType.None);
                        //    table1forpageprinci.SetColumnsWidth(new int[] { 10 });
                        //    table1forpageprinci.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleRight);
                        //    table1forpageprinci.Cell(0, 0).SetContent("D");
                        //    newpdftabpageprinci = table1forpageprinci.CreateTablePage(new PdfArea(mydoc, 255, 927, 10, 25));
                        //    mypdfpage.Add(newpdftabpageprinci);
                        //    table1forpageprinci = mydoc.NewTable(f3_arial10bold, 1, 1, 1);
                        //    table1forpageprinci.VisibleHeaders = false;
                        //    table1forpageprinci.SetBorders(Color.Black, 1, BorderType.None);
                        //    table1forpageprinci.SetColumnsWidth(new int[] { 10 });
                        //    table1forpageprinci.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        //    table1forpageprinci.Cell(0, 0).SetContent("R");
                        //    table1forpageprinci.Cell(0, 0).SetFont(Fontarial7r);
                        //    newpdftabpageprinci = table1forpageprinci.CreateTablePage(new PdfArea(mydoc, 263, 930.5, 10, 25));
                        //    mypdfpage.Add(newpdftabpageprinci);
                        //}
                        ///////////////////////////////////////
                        string year = Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        string collcode = Convert.ToString(ddlCollege.SelectedValue).Trim();
                        PdfTable table1forpagegpa = mydoc.NewTable(f1_cos10bold, 2, 4, 2);
                        table1forpagegpa.VisibleHeaders = false;
                        table1forpagegpa.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagegpa.SetColumnsWidth(new int[] { 94, 94, 94, 94 });
                        // table1forpagegpa.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        string batchsetting = "0";
                        double partsums = 0.000;
                        int partrowcount = 0;
                        double Credit_Points = 0.0;
                        double grade_points = 0.0;
                        double creditstotal = 0;
                        double overalltotgrade = 0;
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            string sumpart = string.Empty;
                            DataView dv_demand_data = new DataView();
                            DataView dv_demand_datadummy = new DataView();
                            printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part I' and MarkOrExempted='0'";
                            dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                            partrowcount = dv_demand_datadummy.Count;
                            printds_rows.Tables[0].DefaultView.RowFilter = "Subject_Type='Part I' and result='pass' and MarkOrExempted='0'";
                            dv_demand_data = printds_rows.Tables[0].DefaultView;
                            if (dv_demand_data.Count > 0 && partrowcount == dv_demand_data.Count)
                            {
                                for (int sum = 0; sum < dv_demand_data.Count; sum++)
                                {
                                    double checkmarkmm = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                    string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + checkmarkmm + "' between frange and trange";//added by sridhar 16/aug 2014
                                    gradeds.Clear();
                                    gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                    if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                    {
                                        gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'  and '" + checkmarkmm + "' between frange and trange";//added by sridhar 
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                    }
                                    if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                    {
                                        for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                        {
                                            if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                            {
                                                grade_points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                                grade_points = grade_points / 10;
                                                Credit_Points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["credit_points"]).Trim());
                                                creditstotal = creditstotal + Credit_Points;
                                                partsums = partsums + (grade_points * Credit_Points);
                                            }
                                        }
                                    }
                                }
                                if (creditstotal == 0)
                                {
                                    sumpart = "0.000";
                                }
                                else if (creditstotal > 0)
                                {
                                    partsums = (partsums / creditstotal);
                                    partsums = Math.Round(partsums, 3);
                                    sumpart = String.Format("{0:0.000}", partsums);
                                }
                                else
                                {
                                    sumpart = "0.000";
                                }
                            }
                            else if (partrowcount > 0)
                            {
                                sumpart = "0.000";
                            }
                            else
                            {
                                sumpart = "--";
                            }
                            if (sumpart.Trim() == "0.000")
                            {
                                sumpart = "--";
                            }
                            if (sumpart != "--")
                            {
                                double sumpartgrade = 0;
                                if (double.TryParse(sumpart, out sumpartgrade))
                                {
                                    sumpartgrade = Convert.ToDouble(sumpart);
                                    // overalltotgrade = overalltotgrade + sumpartgrade;
                                    if (edu_level.Trim().ToLower() != "ug")
                                    {
                                        overalltotgrade = sumpartgrade;
                                    }
                                }
                                else
                                {
                                    sumpartgrade = 0;
                                }
                                // string gradesqlcoe = "select distinct batch_year,markgradeflag from coe_classification where edu_level='" + edu_level + "' and markgradeflag='1'"; 
                                //gradeds.Clear();
                                //gradeds = da.select_method_wo_parameter(gradesqlcoe, "Text");
                                //if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                //{
                                //     batchsetting=Convert.ToString(gradeds.Tables[0].Rows[0]["batch_year"]);
                                //    if(Convert.ToInt32(batch_year)<=Convert.ToInt32(batchsetting))
                                //    {
                                //        batchsetting="1";
                                //    }
                                //}
                                string gradesqlcoe = "    select * from coe_classification where '" + sumpartgrade + "'>= frompoint and '" + sumpartgrade + "'< topoint  and  markgradeflag='" + batchsetting + "' ";//added by sridhar 16/aug 2014
                                gradeds.Clear();
                                gradeds = da.select_method_wo_parameter(gradesqlcoe, "Text");
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                {
                                    sumpart = sumpart + "   " + Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]).Trim();
                                    table1forpagegpa.Cell(0, 0).SetContent(sumpart);
                                }
                            }
                            else
                            {
                                table1forpagegpa.Cell(0, 0).SetContent(sumpart);
                            }
                        }
                        else
                        {
                            table1forpagegpa.Cell(0, 0).SetContent("--");
                        }
                        partsums = 0;
                        partrowcount = 0;
                        creditstotal = 0;
                        // table1forpagegpa.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            string sumpart = string.Empty;
                            DataView dv_demand_data = new DataView();
                            DataView dv_demand_datadummy = new DataView();
                            printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part II' and MarkOrExempted='0'";
                            dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                            partrowcount = dv_demand_datadummy.Count;
                            printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part II' and result='pass' and MarkOrExempted='0'";
                            dv_demand_data = printds_rows.Tables[0].DefaultView;
                            if (dv_demand_data.Count > 0 && partrowcount == dv_demand_data.Count)
                            {
                                for (int sum = 0; sum < dv_demand_data.Count; sum++)
                                {
                                    double checkmarkmm = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                    string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + checkmarkmm + "' between frange and trange";//added by sridhar 16/aug 2014
                                    gradeds.Clear();
                                    gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                    if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                    {
                                        gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + checkmarkmm + "' between frange and trange";//added by sridhar 
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                    }
                                    if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                    {
                                        for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                        {
                                            if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                            {
                                                grade_points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                                grade_points = grade_points / 10;
                                                Credit_Points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["credit_points"]).Trim());
                                                creditstotal = creditstotal + Credit_Points;
                                                partsums = partsums + (grade_points * Credit_Points);
                                            }
                                        }
                                    }
                                }
                                if (creditstotal == 0)
                                {
                                    sumpart = "0.000";
                                }
                                else if (creditstotal > 0)
                                {
                                    partsums = (partsums / creditstotal);
                                    partsums = Math.Round(partsums, 3);
                                    sumpart = String.Format("{0:0.000}", partsums);
                                }
                                else
                                {
                                    sumpart = "0.000";
                                }
                            }
                            else if (partrowcount > 0)
                            {
                                sumpart = "0.000";
                            }
                            else
                            {
                                sumpart = "--";
                            }
                            if (sumpart.Trim() == "0.000")
                            {
                                sumpart = "--";
                            }
                            if (sumpart != "--")
                            {
                                double sumpartgrade = 0;
                                if (double.TryParse(sumpart, out sumpartgrade))
                                {
                                    sumpartgrade = Convert.ToDouble(sumpart);
                                    //  overalltotgrade = overalltotgrade + sumpartgrade;
                                }
                                else
                                {
                                    sumpartgrade = 0;
                                }
                                string gradesqlcoe = "    select * from coe_classification where  '" + sumpartgrade + "'>= frompoint and '" + sumpartgrade + "'< topoint  and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014
                                gradeds.Clear();
                                gradeds = da.select_method_wo_parameter(gradesqlcoe, "Text");
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                {
                                    sumpart = sumpart + "   " + Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]).Trim();
                                    table1forpagegpa.Cell(0, 1).SetContent(sumpart);
                                }
                            }
                            else
                            {
                                table1forpagegpa.Cell(0, 1).SetContent(sumpart);
                            }
                        }
                        else
                        {
                            table1forpagegpa.Cell(0, 1).SetContent("--");
                        }
                        partsums = 0;
                        partrowcount = 0;
                        creditstotal = 0;
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            string sumpart = string.Empty;
                            DataView dv_demand_data = new DataView();
                            DataView dv_demand_datadummy = new DataView();
                            printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part III' and MarkOrExempted='0'";
                            dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                            partrowcount = dv_demand_datadummy.Count;
                            printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part III' and result='pass' and MarkOrExempted='0'";
                            dv_demand_data = printds_rows.Tables[0].DefaultView;
                            if (dv_demand_data.Count > 0 && partrowcount == dv_demand_data.Count)
                            {
                                for (int sum = 0; sum < dv_demand_data.Count; sum++)
                                {
                                    double checkmarkmm = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                    string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + checkmarkmm + "' between frange and trange";//added by sridhar 16/aug 2014
                                    gradeds.Clear();
                                    gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                    if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                    {
                                        gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + checkmarkmm + "' between frange and trange";//added by sridhar 
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                    }
                                    if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                    {
                                        for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                        {
                                            if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                            {
                                                grade_points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                                grade_points = grade_points / 10;
                                                Credit_Points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["credit_points"]).Trim());
                                                creditstotal = creditstotal + Credit_Points;
                                                partsums = partsums + (grade_points * Credit_Points);
                                            }
                                        }
                                    }
                                }
                                if (creditstotal == 0)
                                {
                                    sumpart = "0.000";
                                }
                                else if (creditstotal > 0)
                                {
                                    partsums = (partsums / creditstotal);
                                    partsums = Math.Round(partsums, 3);
                                    sumpart = String.Format("{0:0.000}", partsums);
                                }
                                else
                                {
                                    sumpart = "0.000";
                                }
                            }
                            else if (partrowcount > 0)
                            {
                                sumpart = "0.000";
                            }
                            else
                            {
                                sumpart = "--";
                            }
                            if (sumpart.Trim() == "0.000")
                            {
                                sumpart = "--";
                            }
                            if (sumpart != "--")
                            {
                                double sumpartgrade = 0;
                                if (double.TryParse(sumpart, out sumpartgrade))
                                {
                                    sumpartgrade = Convert.ToDouble(sumpart);
                                    if (edu_level.Trim().ToLower() == "ug")
                                    {
                                        overalltotgrade = sumpartgrade;
                                    }
                                }
                                else
                                {
                                    sumpartgrade = 0;
                                }
                                //if (noofsubfailed != 0 && sumpartgrade>=6)
                                //{
                                //    table1forpagegpa.Cell(0, 2).SetContent("FIRST");
                                //}
                                //else
                                //{
                                string gradesqlcoe = "    select * from coe_classification where  '" + sumpartgrade + "'>= frompoint and '" + sumpartgrade + "'< topoint  and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014
                                gradeds.Clear();
                                gradeds = da.select_method_wo_parameter(gradesqlcoe, "Text");
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                {
                                    sumpart = sumpart + "   " + Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]).Trim();
                                    table1forpagegpa.Cell(0, 2).SetContent(sumpart);
                                }
                            }
                            else
                            {
                                table1forpagegpa.Cell(0, 2).SetContent(sumpart);
                            }
                        }
                        else
                        {
                            table1forpagegpa.Cell(0, 2).SetContent("--");
                        }
                        partsums = 0;
                        partrowcount = 0;
                        creditstotal = 0;
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            string sumpart = string.Empty;
                            DataView dv_demand_data = new DataView();
                            DataView dv_demand_datadummy = new DataView();
                            printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part IV' and MarkOrExempted='0'";
                            dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                            partrowcount = dv_demand_datadummy.Count;
                            printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part IV' and result='pass' and MarkOrExempted='0'";
                            dv_demand_data = printds_rows.Tables[0].DefaultView;
                            if (dv_demand_data.Count > 0 && partrowcount == dv_demand_data.Count)
                            {
                                for (int sum = 0; sum < dv_demand_data.Count; sum++)
                                {
                                    double checkmarkmm = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                    string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + checkmarkmm + "' between frange and trange";//added by sridhar 16/aug 2014
                                    gradeds.Clear();
                                    gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                    if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                    {
                                        gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + checkmarkmm + "' between frange and trange";//added by sridhar 
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                    }
                                    if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                    {
                                        for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                        {
                                            if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                            {
                                                grade_points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                                grade_points = grade_points / 10;
                                                Credit_Points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["credit_points"]).Trim());
                                                creditstotal = creditstotal + Credit_Points;
                                                partsums = partsums + (grade_points * Credit_Points);
                                            }
                                        }
                                    }
                                }
                                if (creditstotal == 0)
                                {
                                    sumpart = "0.000";
                                }
                                else if (creditstotal > 0)
                                {
                                    partsums = (partsums / creditstotal);
                                    partsums = Math.Round(partsums, 3);
                                    sumpart = String.Format("{0:0.000}", partsums);
                                }
                                else
                                {
                                    sumpart = "0.000";
                                }
                            }
                            else if (partrowcount > 0)
                            {
                                sumpart = "0.000";
                            }
                            else
                            {
                                sumpart = "--";
                            }
                            if (sumpart.Trim() == "0.000")
                            {
                                sumpart = "--";
                            }
                            if (sumpart != "--")
                            {
                                double sumpartgrade = 0;
                                if (double.TryParse(sumpart, out sumpartgrade))
                                {
                                    sumpartgrade = Convert.ToDouble(sumpart);
                                    //   overalltotgrade = overalltotgrade + sumpartgrade;
                                }
                                else
                                {
                                    sumpartgrade = 0;
                                }
                                string gradesqlcoe = "    select * from coe_classification where '" + sumpartgrade + "'>= frompoint and '" + sumpartgrade + "'< topoint  and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014
                                gradeds.Clear();
                                gradeds = da.select_method_wo_parameter(gradesqlcoe, "Text");
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                {
                                    //sumpart = sumpart + "   " + Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]).Trim();
                                    table1forpagegpa.Cell(0, 3).SetContent(sumpart);
                                }
                            }
                            else
                            {
                                table1forpagegpa.Cell(0, 3).SetContent(sumpart);
                            }
                        }
                        else
                        {
                            table1forpagegpa.Cell(0, 3).SetContent("--");
                        }
                        // overalltotgrade = overalltotgrade;
                        if (noofsubfailed != 0 && overalltotgrade >= 6)
                        {
                            string cclass = "         " + "FIRST";
                            table1forpagegpa.Cell(1, 0).SetContent(cclass);
                        }
                        else
                        {
                            string gradesqlclass = "    select * from coe_classification where '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'< topoint  and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014
                            gradeds.Clear();
                            gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                            {
                                string cclass = "         " + Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim();
                                table1forpagegpa.Cell(1, 0).SetContent(cclass);
                            }
                        }
                        foreach (PdfCell pr in table1forpagegpa.CellRange(1, 0, 1, 0).Cells)
                        {
                            pr.ColSpan = 4;
                        }
                        table1forpagegpa.Cell(1, 0).SetContentAlignment(ContentAlignment.TopLeft);
                        newpdftabpagecoe = table1forpagegpa.CreateTablePage(new PdfArea(mydoc, 165, 873, 377, 50));
                        mypdfpage.Add(newpdftabpagecoe);
                        mypdfpage.SaveToDocument();
                    }
                    else
                    {
                        if (lblerror1 == "")
                        {
                            lblerror1 = rollnosub;
                        }
                        else
                        {
                            lblerror1 = lblerror1 + "," + rollnosub;
                        }
                    }
                }
            }
            /// }
            /// 
            if (lblerror1 != "")
            {
                lblerror.Text = lblerror1;
                lblerror.Visible = true;
            }
            else
            {
                lblerror.Text = string.Empty;
                lblerror.Visible = false;
            }
            if (printpage == true)
            {
                string appPath = HttpContext.Current.Server.MapPath("~");
                if (appPath != "")
                {
                    string szPath = appPath + "/Report/";
                    string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                    mydoc.SaveToFile(szPath + szFile);
                    Response.ClearHeaders();
                    Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                    Response.ContentType = "application/pdf";
                    Response.WriteFile(szPath + szFile);
                }
            }
        }
    }

    public void Markbasedconsolidated()//COMPLETED @ 13.02.2016
    {
        {
            DataSet printds = new DataSet();
            string lblerror1 = string.Empty;
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            //578
            Boolean printpage = false;
            string edu_level = string.Empty;
            string degree = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string roman = string.Empty;
            string semroman = string.Empty;
            string grade = string.Empty;
            string gradepoints = string.Empty;
            string coe = string.Empty;
            string subjectcode_Part1 = string.Empty;
            string subjectcode_Part2 = string.Empty;
            string subjectcode_Part3 = string.Empty;
            string subjectcode_Part4 = string.Empty;
            string cal_gpa = string.Empty;
            string current_semester = string.Empty;
            string subtype = string.Empty;
            DataSet gradeds = new DataSet();
            Font f1_cos10bold = new Font("Comic Sans MS", 10, FontStyle.Bold);
            Font f2_cos9bold = new Font("Comic Sans MS", 9, FontStyle.Bold);
            Font f3_arial10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font f4_arial7reg = new Font("Arial", 7, FontStyle.Regular);
            Font f5_pal10bold = new Font("Palatino Linotype", 10, FontStyle.Bold);
            //Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            //Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            //Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            //Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            //Font Fontarial7 = new Font("Arial", 7, FontStyle.Regular);
            //Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            //Font Fontarial9 = new Font("Arial", 8, FontStyle.Bold);
            //Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            //Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            //Font tamil = new Font("AMUDHAM.TTF", 16, FontStyle.Regular);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.5, 34.5));
            PdfPage mypdfpage;
            //if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
            //{
            FpSpread2.SaveChanges();
            for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                if (isval == 1)
                {
                    printds.Clear();
                    printds.Dispose();
                    printds_new.Clear();
                    printds_new.Dispose();
                    rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                    regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                    string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,c.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
                    sql = sql + "  select count(distinct s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
                    sql = sql + "  Select count(distinct subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'  ";
                    sql = sql + "  Select count(distinct subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail'  and roll_no='" + rollnosub + "'  ";
                    printds = da.select_method_wo_parameter(sql, "Text");
                    int noofsubapplied = Convert.ToInt32(Convert.ToString(printds.Tables[3].Rows[0][0]).Trim());
                    int noofsubpassed = Convert.ToInt32(Convert.ToString(printds.Tables[4].Rows[0][0]).Trim());
                    int noofsubfailed = Convert.ToInt32(Convert.ToString(printds.Tables[5].Rows[0][0]).Trim());
                    if (printds.Tables[0].Rows.Count > 0 && noofsubpassed == noofsubapplied)
                    {
                        printpage = true;
                        string principal = string.Empty;
                        edu_level = Convert.ToString(printds.Tables[0].Rows[0]["edu_level"]).Trim();
                        mypdfpage = mydoc.NewPage();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        coe = Convert.ToString(printds.Tables[1].Rows[0]["coe"]).Trim();
                        string[] spiltcoe = coe.Split(' ');
                        string newcoe = string.Empty;
                        //for (int ce = 1; ce < spiltcoe.GetUpperBound(0); ce++)
                        //{
                        //    string[] spiltcoe12 = spiltcoe[0].Split('.');
                        //    if (spiltcoe12.Length == 3)
                        //    {
                        //        newcoe = Convert.ToString(spiltcoe12[1]);
                        //        newcoe = newcoe + "." + Convert.ToString(spiltcoe12[2]);
                        //    }
                        //    if (newcoe == "")
                        //    {
                        //        newcoe =Convert.ToString( spiltcoe[ce]);
                        //    }
                        //    else
                        //    {
                        //        newcoe = newcoe + " " + Convert.ToString(spiltcoe[ce]);
                        //    }
                        //}
                        //coe = newcoe;
                        principal = Convert.ToString(printds.Tables[1].Rows[0]["principal"]).Trim();
                        string[] spiltprinci = principal.Split('.');
                        string newprinc = string.Empty;
                        //for (int ce = 1; ce <= spiltprinci.GetUpperBound(0); ce++)
                        //{
                        //    if (newprinc == "")
                        //    {
                        //        newprinc = Convert.ToString(spiltprinci[ce]);
                        //    }
                        //    else
                        //    {
                        //        newprinc = newprinc + "." +Convert.ToString(spiltprinci[ce]);
                        //    }
                        //}
                        //principal = newprinc.ToUpper();
                        // month = ddlMonth.SelectedIndex;
                        //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                        string strMonthName = string.Empty;
                        //monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        //monthandyear = monthandyear.ToUpper();
                        studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        branch = Convert.ToString(printds.Tables[0].Rows[0]["Dept_name"]).Trim();
                        dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]).Trim();
                        string stdappno = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim();
                        //sql2 = "select * from exam_details where    degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                        //printds_new = da.select_method_wo_parameter(sql2, "Text");
                        // if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                        //{
                        //sem =Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
                        if (sem == "1")
                        {
                            semroman = "I";
                        }
                        else if (sem == "2")
                        {
                            semroman = "II";
                        }
                        else if (sem == "3")
                        {
                            semroman = "III";
                        }
                        else if (sem == "4")
                        {
                            semroman = "IV";
                        }
                        else if (sem == "5")
                        {
                            semroman = "V";
                        }
                        else if (sem == "6")
                        {
                            semroman = "VI";
                        }
                        else if (sem == "7")
                        {
                            semroman = "VII";
                        }
                        else if (sem == "8")
                        {
                            semroman = "VIII";
                        }
                        PdfTextArea pdfdoi = new PdfTextArea(f2_cos9bold, System.Drawing.Color.Black, new PdfArea(mydoc, 56, 953, 305, 20), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString(txtdoi.Text).Trim());
                        mypdfpage.Add(pdfdoi);
                        // exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]).Trim();
                        sql3 = "Select sm.semester,ss.Subject_Type,ss.Lab,s.subjectpriority,s.subject_no,s.subject_code,s.subject_name,s.max_int_marks,m.internal_mark,s.max_ext_marks,m.external_mark,s.maxtotal,m.total,s.credit_points,m.result,m.grade,m.cp,m.exam_code,'0' as MarkOrExempted,'' as Message,'' description from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm where sm.syll_code=s.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and m.result='pass' and m.roll_no='" + rollnosub + "' union select sm.semester,ss.subject_type,ss.Lab,s.subjectpriority,s.subject_no,s.subject_code,s.subject_name,'0' as max_int_marks,'0' as internal_mark,'0' as max_ext_marks,'0' external_mark,'0' as maxtotal, '0' as total,s.credit_points,'' as result,'' grade,'0' cp,'0' exam_code,'1' as MarkOrExempted,sg.grade as Message,sg.description from subject s,sub_sem ss,syllabus_master sm,SpecialCourseSubject scs,SpecialCourseGradeDetail sg,Registration r where sg.MarkType=scs.MarkType and r.App_No=scs.app_no and s.subject_no=scs.subject_no and scs.CurrentSem=sm.semester and ss.syll_code=sm.syll_code and ss.syll_code=s.syll_code and s.subType_no=ss.subType_no and s.syll_code=sm.syll_code and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and r.Roll_No='" + rollnosub + "' order by sm.semester,ss.subject_type,ss.lab,s.subjectpriority,s.subject_no";
                        printds_rows.Clear();
                        printds_rows.Dispose();
                        printds_rows = da.select_method_wo_parameter(sql3, "Text");
                        PdfTable table1forpage2 = mydoc.NewTable(f1_cos10bold, 1, 3, 1);
                        table1forpage2.VisibleHeaders = false;
                        table1forpage2.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpage2.SetColumnsWidth(new int[] { 119, 337, 125 });
                        table1forpage2.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table1forpage2.Cell(0, 0).SetContent(regnumber);
                        table1forpage2.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table1forpage2.Cell(0, 1).SetContent(studname);
                        table1forpage2.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table1forpage2.Cell(0, 2).SetContent(dob);
                        PdfTablePage newpdftabpage2 = table1forpage2.CreateTablePage(new PdfArea(mydoc, 12, 153, 578, 50));//sr
                        mypdfpage.Add(newpdftabpage2);
                        //string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-" + DateTime.Now.ToString("yyyy");
                        string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-";
                        if (edu_level.Trim().ToLower() == "ug")
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 3));
                        }
                        else
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 2));
                        }
                        PdfTable table1forpage2a = mydoc.NewTable(f1_cos10bold, 1, 3, 1);
                        table1forpage2a.VisibleHeaders = false;
                        table1forpage2a.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpage2a.SetColumnsWidth(new int[] { 119, 230, 232 });
                        table1forpage2a.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table1forpage2a.Cell(0, 0).SetContent(batch_year1);//branch
                        table1forpage2a.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table1forpage2a.Cell(0, 1).SetContent(degree);//degree
                        table1forpage2a.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table1forpage2a.Cell(0, 2).SetContent(branch);////monthandyear
                        newpdftabpage2 = table1forpage2a.CreateTablePage(new PdfArea(mydoc, 12, 201, 578, 50));
                        mypdfpage.Add(newpdftabpage2);
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            PdfTable fullmark = mydoc.NewTable(f4_arial7reg, printds_rows.Tables[0].Rows.Count + 1, 11, 2);
                            fullmark.VisibleHeaders = false;
                            fullmark.SetBorders(Color.Black, 1, BorderType.None);
                            fullmark.Columns[0].SetWidth(31);
                            fullmark.Columns[1].SetWidth(40);
                            fullmark.Columns[2].SetWidth(54);
                            fullmark.Columns[3].SetWidth(230);
                            fullmark.Columns[4].SetWidth(34);
                            fullmark.Columns[5].SetWidth(31);
                            fullmark.Columns[6].SetWidth(31);
                            fullmark.Columns[7].SetWidth(31);
                            fullmark.Columns[8].SetWidth(34);
                            fullmark.Columns[9].SetWidth(43);
                            fullmark.Columns[10].SetWidth(43);
                            //  fullmark.Columns[11].SetWidth(34);
                            for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                            {
                                string markOrExempted = Convert.ToString(printds_rows.Tables[0].Rows[i]["MarkOrExempted"]).Trim();
                                string message = Convert.ToString(printds_rows.Tables[0].Rows[i]["Message"]).Trim();
                                string description = Convert.ToString(printds_rows.Tables[0].Rows[i]["description"]).Trim();
                                subtype = Convert.ToString(printds_rows.Tables[0].Rows[i]["Subject_Type"]).Trim();
                                string[] spitsubtype = subtype.Split(' ');
                                if (spitsubtype.GetUpperBound(0) > 0)
                                {
                                    roman = Convert.ToString(spitsubtype[1]).Trim();
                                    if (roman == "1" || roman.Trim().ToUpper() == "I")
                                    {
                                        roman = "I";
                                        if (subjectcode_Part1 == "")
                                        {
                                            subjectcode_Part1 = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                        }
                                        else
                                        {
                                            subjectcode_Part1 = subjectcode_Part1 + "'" + "," + "'" + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                        }
                                    }
                                    else if (roman == "2" || roman.Trim().ToUpper() == "II")
                                    {
                                        roman = "II";
                                        if (subjectcode_Part2 == "")
                                        {
                                            subjectcode_Part2 = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                        }
                                        else
                                        {
                                            subjectcode_Part2 = subjectcode_Part2 + "'" + "," + "'" + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                        }
                                    }
                                    else if (roman == "3" || roman.Trim().ToUpper() == "III")
                                    {
                                        roman = "III";
                                        if (subjectcode_Part3 == "")
                                        {
                                            subjectcode_Part3 = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                        }
                                        else
                                        {
                                            subjectcode_Part3 = subjectcode_Part3 + "'" + "," + "'" + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                        }
                                    }
                                    else if (roman == "4" || roman.Trim().ToUpper() == "IV")
                                    {
                                        roman = "IV";
                                        if (subjectcode_Part4 == "")
                                        {
                                            subjectcode_Part4 = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                        }
                                        else
                                        {
                                            subjectcode_Part4 = subjectcode_Part4 + "'" + "," + "'" + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                        }
                                    }
                                }
                                // if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                //{
                                fullmark.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(i, 0).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["semester"]).Trim());
                                fullmark.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(i, 1).SetContent(roman);
                                fullmark.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                fullmark.Cell(i, 2).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim());
                                //if ("VBE201" == Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim().Trim().ToUpper())
                                //{
                                //}
                                fullmark.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                fullmark.Cell(i, 3).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim().ToUpper());
                                if (markOrExempted.Trim() == "0")
                                {
                                    fullmark.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    fullmark.Cell(i, 4).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["maxtotal"]).Trim());
                                    double internalmmark = 0;
                                    double externalmark1 = 0;
                                    double totalintext = 0;
                                    fullmark.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    if (roman == "V")
                                    {
                                        fullmark.Cell(i, 5).SetContent("");
                                    }
                                    else
                                    {
                                        fullmark.Cell(i, 5).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim());
                                    }
                                    internalmmark = Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim());
                                    double extfinal = Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim());
                                    extfinal = Math.Round(extfinal, 0);
                                    externalmark1 = extfinal;
                                    string checkedmark = string.Empty;
                                    if (extfinal < 0)
                                    {
                                        checkedmark = loadmarkat(Convert.ToString(extfinal).Trim());
                                    }
                                    else
                                    {
                                        checkedmark = Convert.ToString(extfinal).Trim();
                                    }
                                    if (internalmmark >= 0)
                                    {
                                        if (extfinal > 0)
                                        {
                                            totalintext = internalmmark + externalmark1;
                                        }
                                        else
                                        {
                                            totalintext = internalmmark;
                                        }
                                    }
                                    else
                                    {
                                        if (extfinal > 0)
                                        {
                                            totalintext = externalmark1;
                                        }
                                        else
                                        {
                                            totalintext = 0;
                                        }
                                    }
                                    fullmark.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    if (roman == "V")
                                    {
                                        fullmark.Cell(i, 6).SetContent("");
                                    }
                                    else
                                    {
                                        fullmark.Cell(i, 6).SetContent(checkedmark);
                                    }
                                    double totfinal = 0;
                                    totfinal = Math.Round(totalintext, 0);
                                    fullmark.Cell(i, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    if (roman == "V")
                                    {
                                        fullmark.Cell(i, 7).SetContent("");
                                    }
                                    else
                                    {
                                        fullmark.Cell(i, 7).SetContent(Convert.ToString(totfinal));
                                    }
                                    double checkmarkmm = Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim());
                                    string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 16/aug 2014
                                    gradeds.Clear();
                                    gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                    if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                    {
                                        gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                    }
                                    if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                    {
                                        for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                        {
                                            if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                            {
                                                grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
                                                gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
                                            }
                                        }
                                    }
                                    double gradeibtpoint = Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim());
                                    gradeibtpoint = gradeibtpoint / 10;
                                    gradeibtpoint = Math.Round(gradeibtpoint, 1);
                                    gradepoints = Convert.ToString(gradeibtpoint).Trim();
                                    fullmark.Cell(i, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    fullmark.Cell(i, 8).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
                                    gradepoints = Convert.ToString(Math.Round(Convert.ToDouble(gradepoints), 2)).Trim();
                                    gradepoints = string.Format("{0:0.00}", Convert.ToDouble(gradepoints));
                                    string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim().ToLower();
                                    if (result == "fail")
                                    {
                                        result = "RA";
                                        grade = "U";
                                    }
                                    else if (result == "pass")
                                    {
                                        result = "P";
                                    }
                                    else
                                    {
                                        result = "AB";
                                        grade = "U";
                                    }
                                    totfinal = totfinal * Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
                                    fullmark.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    totfinal = Math.Round(totfinal, 0);
                                    if (roman == "V")
                                    {
                                        fullmark.Cell(i, 9).SetContent("");
                                    }
                                    else
                                    {
                                        fullmark.Cell(i, 9).SetContent(totfinal);
                                    }
                                    if (totfinal == 0)
                                    {
                                        if (checkmarkmm != 0)
                                        {
                                            fullmark.Cell(i, 7).SetContent(Convert.ToString(checkmarkmm));
                                            if (internalmmark == 0)
                                            {
                                                fullmark.Cell(i, 5).SetContent("");
                                            }
                                            if (extfinal == 0)
                                            {
                                                fullmark.Cell(i, 6).SetContent("");
                                            }
                                            if (internalmmark == 0 && extfinal == 0)
                                            {
                                                fullmark.Cell(i, 9).SetContent("");
                                            }
                                        }
                                    }
                                    fullmark.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    fullmark.Cell(i, 10).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    DataView dv = new DataView();
                                    printds.Tables[2].DefaultView.RowFilter = "exam_code='" + Convert.ToString(printds_rows.Tables[0].Rows[i]["exam_code"]).Trim() + "'";
                                    dv = printds.Tables[2].DefaultView;
                                    if (dv.Count > 0)
                                    {
                                        string exam_y = Convert.ToString(dv[0]["Exam_year"]).Trim();
                                        string exam_m = Convert.ToString(dv[0]["Exam_Month"]).Trim();
                                        strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                        strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                        strMonthName = strMonthName.ToUpper() + " " + exam_y + "   ";
                                        fullmark.Cell(i, 10).SetContent(strMonthName);
                                    }
                                }
                                else
                                {
                                    fullmark.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    fullmark.Cell(i, 4).SetContent("*** " + message + " ***");
                                    foreach (PdfCell pr in fullmark.CellRange(i, 4, i, 4).Cells)
                                    {
                                        pr.ColSpan = 7;
                                    }
                                }
                                //}
                            }
                            fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetFont(f5_pal10bold);
                            fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContent("****** End of Statement ******");
                            foreach (PdfCell pr in fullmark.CellRange(printds_rows.Tables[0].Rows.Count, 0, printds_rows.Tables[0].Rows.Count, 0).Cells)
                            {
                                pr.ColSpan = 10;
                            }
                            newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 14, 270, 578, 800));
                            mypdfpage.Add(newpdftabpage2);
                        }
                        //}
                        PdfTable table1forpagecoe = mydoc.NewTable(f3_arial10bold, 1, 2, 1);
                        table1forpagecoe.VisibleHeaders = false;
                        table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagecoe.SetColumnsWidth(new int[] { 190 });
                        table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        table1forpagecoe.Cell(0, 0).SetContent(coe);
                        PdfTablePage newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 439, 946, 190, 50));//190
                        mypdfpage.Add(newpdftabpagecoe);
                        table1forpagecoe = mydoc.NewTable(f3_arial10bold, 1, 1, 1);
                        table1forpagecoe.VisibleHeaders = false;
                        table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagecoe.SetColumnsWidth(new int[] { 10 });
                        table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleRight);
                        // table1forpagecoe.Cell(0, 0).SetContent("D");
                        newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 450, 946, 10, 50));
                        mypdfpage.Add(newpdftabpagecoe);
                        table1forpagecoe = mydoc.NewTable(f3_arial10bold, 1, 1, 1);
                        table1forpagecoe.VisibleHeaders = false;
                        table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagecoe.SetColumnsWidth(new int[] { 10 });
                        table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        //  table1forpagecoe.Cell(0, 0).SetContent("R");
                        table1forpagecoe.Cell(0, 0).SetFont(Fontarial7r);
                        newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 458, 950.5, 10, 25));
                        mypdfpage.Add(newpdftabpagecoe);
                        /////////////////principle name
                        PdfTable table1forpageprinci = mydoc.NewTable(f3_arial10bold, 1, 2, 1);
                        table1forpageprinci.VisibleHeaders = false;
                        table1forpageprinci.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpageprinci.SetColumnsWidth(new int[] { 190 });
                        table1forpageprinci.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        table1forpageprinci.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        table1forpageprinci.Cell(0, 0).SetContent(principal.Trim());
                        PdfTablePage newpdftabpageprinci = table1forpageprinci.CreateTablePage(new PdfArea(mydoc, 212, 947, 190, 50));
                        mypdfpage.Add(newpdftabpageprinci);
                        //table1forpageprinci = mydoc.NewTable(f3_arial10bold, 1, 1, 1);
                        //table1forpageprinci.VisibleHeaders = false;
                        //table1forpageprinci.SetBorders(Color.Black, 1, BorderType.None);
                        //table1forpageprinci.SetColumnsWidth(new int[] { 10 });
                        //table1forpageprinci.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleRight);
                        //table1forpageprinci.Cell(0, 0).SetContent("D");
                        //newpdftabpageprinci = table1forpageprinci.CreateTablePage(new PdfArea(mydoc, 200, 947, 10, 25));
                        //mypdfpage.Add(newpdftabpageprinci);
                        //table1forpageprinci = mydoc.NewTable(f3_arial10bold, 1, 1, 1);
                        //table1forpageprinci.VisibleHeaders = false;
                        //table1forpageprinci.SetBorders(Color.Black, 1, BorderType.None);
                        //table1forpageprinci.SetColumnsWidth(new int[] { 10 });
                        //table1forpageprinci.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        //table1forpageprinci.Cell(0, 0).SetContent("R");
                        //table1forpageprinci.Cell(0, 0).SetFont(Fontarial7r);
                        //newpdftabpageprinci = table1forpageprinci.CreateTablePage(new PdfArea(mydoc, 208, 950.5, 10, 25));
                        //mypdfpage.Add(newpdftabpageprinci);
                        ///////////////////////////////////////
                        string year = Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        string collcode = Convert.ToString(ddlCollege.SelectedValue).Trim();
                        string batchsetting = "1";
                        PdfTable table1forpagegpa = mydoc.NewTable(f1_cos10bold, 1, 6, 1);
                        table1forpagegpa.VisibleHeaders = false;
                        table1forpagegpa.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagegpa.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        double partsums = 0.00;
                        int partrowcount = 0;
                        double Credit_Points = 0.0;
                        double grade_points = 0.0;
                        double creditstotal = 0;
                        double overalltotgrade = 0;
                        // noofsubfailed = 1;
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            string sumpart = string.Empty;
                            DataView dv_demand_data = new DataView();
                            DataView dv_demand_datadummy = new DataView();
                            printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part I' and MarkOrExempted='0'";
                            dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                            partrowcount = dv_demand_datadummy.Count;
                            printds_rows.Tables[0].DefaultView.RowFilter = "Subject_Type='Part I' and result='pass' and MarkOrExempted='0'";
                            dv_demand_data = printds_rows.Tables[0].DefaultView;
                            if (dv_demand_data.Count > 0 && partrowcount == dv_demand_data.Count)
                            {
                                for (int sum = 0; sum < dv_demand_data.Count; sum++)
                                {
                                    grade_points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                    Credit_Points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["credit_points"]).Trim());
                                    creditstotal = creditstotal + Credit_Points;
                                    partsums = partsums + (grade_points * Credit_Points);
                                }
                                if (creditstotal == 0)
                                {
                                    sumpart = "0";
                                }
                                else if (creditstotal > 0)
                                {
                                    partsums = (partsums / creditstotal);
                                    // partsums = Math.Round(partsums, 0);                                      
                                    partsums = Math.Round(partsums, 0, MidpointRounding.AwayFromZero);
                                    // sumpart = String.Format("{0:0.00}", partsums);
                                    sumpart = Convert.ToString(partsums);
                                }
                                else
                                {
                                    sumpart = "0";
                                }
                            }
                            else if (partrowcount > 0)
                            {
                                sumpart = "0";
                            }
                            else
                            {
                                sumpart = "--";
                            }
                            if (sumpart != "--")
                            {
                                double sumpartgrade = 0;
                                if (double.TryParse(sumpart, out sumpartgrade))
                                {
                                    sumpartgrade = Convert.ToDouble(sumpart);
                                    overalltotgrade = overalltotgrade + sumpartgrade;
                                }
                                else
                                {
                                    sumpartgrade = 0;
                                }
                                //string gradesqlcoe = "    select * from coe_classification where  edu_level='" + edu_level + "' and  '" + sumpartgrade + "'>= frompoint and '" + sumpartgrade + "'<= topoint   and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014
                                //gradeds.Clear();
                                //gradeds = da.select_method_wo_parameter(gradesqlcoe, "Text");
                                //if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                //{
                                //    table1forpagegpa.Cell(0, 0).SetContent(sumpart);
                                //    table1forpagegpa.Cell(0, 1).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                //}
                                if (noofsubfailed != 0 && overalltotgrade >= 60)
                                {
                                    string cclass = "FIRST";
                                    table1forpagegpa.Cell(0, 0).SetContent(sumpart);
                                    table1forpagegpa.Cell(0, 1).SetContent(cclass);
                                }
                                else
                                {
                                    string gradesqlclass = "    select * from coe_classification where '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014
                                    gradeds.Clear();
                                    gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                    if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                    {
                                        table1forpagegpa.Cell(0, 0).SetContent(sumpart);
                                        table1forpagegpa.Cell(0, 1).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                    }
                                }
                            }
                            else
                            {
                                table1forpagegpa.Cell(0, 0).SetContent(sumpart);
                            }
                        }
                        else
                        {
                            table1forpagegpa.Cell(0, 0).SetContent("--");
                        }
                        partsums = 0;
                        partrowcount = 0;
                        creditstotal = 0;
                        overalltotgrade = 0;
                        table1forpagegpa.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            string sumpart = string.Empty;
                            DataView dv_demand_data = new DataView();
                            DataView dv_demand_datadummy = new DataView();
                            printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part II' and MarkOrExempted='0'";
                            dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                            partrowcount = dv_demand_datadummy.Count;
                            printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part II' and result='pass' and MarkOrExempted='0'";
                            dv_demand_data = printds_rows.Tables[0].DefaultView;
                            if (dv_demand_data.Count > 0 && partrowcount == dv_demand_data.Count)
                            {
                                for (int sum = 0; sum < dv_demand_data.Count; sum++)
                                {
                                    grade_points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                    Credit_Points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["credit_points"]).Trim());
                                    creditstotal = creditstotal + Credit_Points;
                                    partsums = partsums + (grade_points * Credit_Points);
                                }
                                if (creditstotal == 0)
                                {
                                    sumpart = "0";
                                }
                                else if (creditstotal > 0)
                                {
                                    partsums = (partsums / creditstotal);
                                    // partsums = Math.Round(partsums, 0);
                                    partsums = Math.Round(partsums, 0, MidpointRounding.AwayFromZero);
                                    //  sumpart = String.Format("{0:0.00}", partsums);
                                    sumpart = Convert.ToString(partsums);
                                }
                                else
                                {
                                    sumpart = "0";
                                }
                            }
                            else if (partrowcount > 0)
                            {
                                sumpart = "0";
                            }
                            else
                            {
                                sumpart = "--";
                            }
                            if (sumpart != "--")
                            {
                                double sumpartgrade = 0;
                                if (double.TryParse(sumpart, out sumpartgrade))
                                {
                                    sumpartgrade = Convert.ToDouble(sumpart);
                                    overalltotgrade = overalltotgrade + sumpartgrade;
                                }
                                else
                                {
                                    sumpartgrade = 0;
                                }
                                //string gradesqlcoe = "    select * from coe_classification where edu_level='" + edu_level + "' and  '" + sumpartgrade + "'>= frompoint and '" + sumpartgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014
                                //gradeds.Clear();
                                //gradeds = da.select_method_wo_parameter(gradesqlcoe, "Text");
                                //if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                //{
                                //    table1forpagegpa.Cell(0, 2).SetContent(sumpart);
                                //    table1forpagegpa.Cell(0, 3).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                //}
                                if (noofsubfailed != 0 && overalltotgrade >= 60)
                                {
                                    string cclass = "FIRST";
                                    table1forpagegpa.Cell(0, 2).SetContent(sumpart);
                                    table1forpagegpa.Cell(0, 3).SetContent(cclass);
                                }
                                else
                                {
                                    string gradesqlclass = "    select * from coe_classification where '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014
                                    gradeds.Clear();
                                    gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                    if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                    {
                                        table1forpagegpa.Cell(0, 2).SetContent(sumpart);
                                        table1forpagegpa.Cell(0, 3).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                    }
                                }
                            }
                            else
                            {
                                table1forpagegpa.Cell(0, 2).SetContent(sumpart);
                            }
                        }
                        else
                        {
                            table1forpagegpa.Cell(0, 1).SetContent("--");
                        }
                        partsums = 0;
                        partrowcount = 0;
                        creditstotal = 0;
                        overalltotgrade = 0;
                        table1forpagegpa.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            string sumpart = string.Empty;
                            DataView dv_demand_data = new DataView();
                            DataView dv_demand_datadummy = new DataView();
                            printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part III' and MarkOrExempted='0'";
                            dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                            partrowcount = dv_demand_datadummy.Count;
                            printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part III' and result='pass' and MarkOrExempted='0'";
                            dv_demand_data = printds_rows.Tables[0].DefaultView;
                            if (dv_demand_data.Count > 0 && partrowcount == dv_demand_data.Count)
                            {
                                for (int sum = 0; sum < dv_demand_data.Count; sum++)
                                {
                                    grade_points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                    Credit_Points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["credit_points"]).Trim());
                                    creditstotal = creditstotal + Credit_Points;
                                    partsums = partsums + (grade_points * Credit_Points);
                                }
                                if (creditstotal == 0)
                                {
                                    sumpart = "0";
                                }
                                else if (creditstotal > 0)
                                {
                                    partsums = (partsums / creditstotal);
                                    // partsums = Math.Round(partsums, 0);
                                    partsums = Math.Round(partsums, 0, MidpointRounding.AwayFromZero);
                                    // sumpart = String.Format("{0:0.00}", partsums);
                                    sumpart = Convert.ToString(partsums);
                                }
                                else
                                {
                                    sumpart = "0";
                                }
                            }
                            else if (partrowcount > 0)
                            {
                                sumpart = "0";
                            }
                            else
                            {
                                sumpart = "--";
                            }
                            if (sumpart != "--")
                            {
                                double sumpartgrade = 0;
                                if (double.TryParse(sumpart, out sumpartgrade))
                                {
                                    sumpartgrade = Convert.ToDouble(sumpart);
                                    overalltotgrade = sumpartgrade;
                                }
                                else
                                {
                                    sumpartgrade = 0;
                                }
                                //string gradesqlcoe = "    select * from coe_classification where  edu_level='" + edu_level + "' and  '" + sumpartgrade + "'>= frompoint and '" + sumpartgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014
                                //gradeds.Clear();
                                //gradeds = da.select_method_wo_parameter(gradesqlcoe, "Text");
                                //if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                //{
                                //    table1forpagegpa.Cell(0, 4).SetContent(sumpart);
                                //    table1forpagegpa.Cell(0, 5).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                //}
                                if (noofsubfailed != 0 && overalltotgrade >= 60)
                                {
                                    string cclass = "FIRST";
                                    table1forpagegpa.Cell(0, 4).SetContent(sumpart);
                                    table1forpagegpa.Cell(0, 5).SetContent(cclass);
                                }
                                else
                                {
                                    string gradesqlclass = "    select * from coe_classification where '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014
                                    gradeds.Clear();
                                    gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                    if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                    {
                                        table1forpagegpa.Cell(0, 4).SetContent(sumpart);
                                        table1forpagegpa.Cell(0, 5).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                    }
                                }
                            }
                            else
                            {
                                table1forpagegpa.Cell(0, 4).SetContent(sumpart);
                            }
                        }
                        else
                        {
                            table1forpagegpa.Cell(0, 2).SetContent("--");
                        }
                        partsums = 0;
                        partrowcount = 0;
                        creditstotal = 0;
                        table1forpagegpa.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                        #region part4
                        //if (printds_rows.Tables.Count>0 && printds_rows.Tables[0].Rows.Count > 0)
                        //{
                        //    string sumpart = string.Empty;
                        //    DataView dv_demand_data = new DataView();
                        //    DataView dv_demand_datadummy = new DataView();
                        //    printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part IV' and MarkOrExempted='0'";
                        //    dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                        //    partrowcount = dv_demand_datadummy.Count;
                        //    printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part IV' and result='pass' and MarkOrExempted='0'";
                        //    dv_demand_data = printds_rows.Tables[0].DefaultView;
                        //    if (dv_demand_data.Count > 0 && partrowcount == dv_demand_data.Count)
                        //    {
                        //        for (int sum = 0; sum < dv_demand_data.Count; sum++)
                        //        {
                        //            double checkmarkmm = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                        //            string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + checkmarkmm + "' between frange and trange";//added by sridhar 16/aug 2014
                        //            gradeds.Clear();
                        //            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                        //           if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                        //{
                        //                gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + checkmarkmm + "' between frange and trange";//added by sridhar 
                        //                gradeds.Clear();
                        //                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                        //            }
                        //if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                        //                        {
                        //            for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                        //            {
                        //                if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                        //                {
                        //                    grade_points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                        //                    grade_points = grade_points / 10;
                        //                    Credit_Points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["credit_points"]).Trim());
                        //                    creditstotal = creditstotal + Credit_Points;
                        //                    partsums = partsums + (grade_points * Credit_Points);
                        //                }
                        //            }
                        //}
                        //        }
                        //        if (creditstotal == 0)
                        //        {
                        //            sumpart = "0.00";
                        //        }
                        //        else if (creditstotal > 0)
                        //        {
                        //            partsums = (partsums / creditstotal);
                        //            partsums = Math.Round(partsums, 2);
                        //            sumpart = String.Format("{0:0.00}", partsums);
                        //        }
                        //        else
                        //        {
                        //            sumpart = "0.00";
                        //        }
                        //    }
                        //    else if (partrowcount > 0)
                        //    {
                        //        sumpart = "0.00";
                        //    }
                        //    else
                        //    {
                        //        sumpart = "--";
                        //    }
                        //    if (sumpart != "--")
                        //    {
                        //        double sumpartgrade = 0;
                        //        if (double.TryParse(sumpart, out sumpartgrade))
                        //        {
                        //            sumpartgrade = Convert.ToDouble(sumpart);
                        //            overalltotgrade = overalltotgrade + sumpartgrade;
                        //        }
                        //        else
                        //        {
                        //            sumpartgrade = 0;
                        //        }
                        //        string gradesqlcoe = "    select * from coe_classification where CollegeCode='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and edu_level='" + edu_level + "' and '" + sumpartgrade + "' between frompoint and topoint";//added by sridhar 16/aug 2014
                        //        gradeds.Clear();
                        //        gradeds = da.select_method_wo_parameter(gradesqlcoe, "Text");
                        //        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                        //        {
                        //            sumpart = sumpart + "   " + Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]).Trim();
                        //            table1forpagegpa.Cell(0, 3).SetContent(sumpart);
                        //        }
                        //    }
                        //    else
                        //    {
                        //        //table1forpagegpa.Cell(0, 3).SetContent(sumpart);
                        //    }
                        //}
                        //else
                        //{
                        //   // table1forpagegpa.Cell(0, 3).SetContent("--");
                        //}
                        #endregion
                        newpdftabpagecoe = table1forpagegpa.CreateTablePage(new PdfArea(mydoc, 14, 851, 578, 50));
                        mypdfpage.Add(newpdftabpagecoe);
                        // overalltotgrade = overalltotgrade / 3;
                        table1forpagegpa = mydoc.NewTable(f1_cos10bold, 1, 1, 1);
                        table1forpagegpa.VisibleHeaders = false;
                        table1forpagegpa.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagegpa.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        //sumpart = String.Format("{0:0.00}", partsums);
                        overalltotgrade = Math.Round(overalltotgrade, 0);
                        // string overalltotgradeformat = String.Format("{0:0.00}", overalltotgrade);
                        table1forpagegpa.Cell(0, 0).SetContent(overalltotgrade);
                        newpdftabpagecoe = table1forpagegpa.CreateTablePage(new PdfArea(mydoc, 190, 870, 113, 50));
                        mypdfpage.Add(newpdftabpagecoe);
                        table1forpagegpa = mydoc.NewTable(f1_cos10bold, 1, 1, 1);
                        table1forpagegpa.VisibleHeaders = false;
                        table1forpagegpa.SetBorders(Color.Black, 1, BorderType.None);
                        table1forpagegpa.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        if (noofsubfailed != 0 && overalltotgrade >= 60)
                        {
                            string cclass = "FIRST";
                            table1forpagegpa.Cell(0, 0).SetContent(cclass);
                        }
                        else
                        {
                            string gradesqlclass = "    select * from coe_classification where '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014
                            gradeds.Clear();
                            gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                            {
                                string cclass = Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim();
                                table1forpagegpa.Cell(0, 0).SetContent(cclass);
                            }
                        }
                        newpdftabpagecoe = table1forpagegpa.CreateTablePage(new PdfArea(mydoc, 417, 870, 181, 50));
                        mypdfpage.Add(newpdftabpagecoe);
                        mypdfpage.SaveToDocument();
                    }
                    else
                    {
                        if (lblerror1 == "")
                        {
                            lblerror1 = rollnosub;
                        }
                        else
                        {
                            lblerror1 = lblerror1 + "," + rollnosub;
                        }
                    }
                }
            }
            //} 
            if (lblerror1 != "")
            {
                lblerror.Text = lblerror1;
                lblerror.Visible = true;
            }
            else
            {
                lblerror.Text = string.Empty;
                lblerror.Visible = false;
            }
            if (printpage == true)
            {
                string appPath = HttpContext.Current.Server.MapPath("~");
                if (appPath != "")
                {
                    string szPath = appPath + "/Report/";
                    string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                    mydoc.SaveToFile(szPath + szFile);
                    Response.ClearHeaders();
                    Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                    Response.ContentType = "application/pdf";
                    Response.WriteFile(szPath + szFile);
                }
            }
        }
    }

    public void ugmarkstatementf12009()
    {
        {
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            string degree = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            //int max_internal_mark = 0;
            //int max_external_mark = 0;
            int colval = 0;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string roman = string.Empty;
            string semroman = string.Empty;
            string grade = string.Empty;
            string gradepoints = string.Empty;
            string coe = string.Empty;
            string subjectcode_Part1 = string.Empty;
            string subjectcode_Part2 = string.Empty;
            string subjectcode_Part3 = string.Empty;
            string subjectcode_Part4 = string.Empty;
            string cal_gpa = string.Empty;
            string current_semester = string.Empty;
            string subtype = string.Empty;
            DataSet gradeds = new DataSet();
            Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font Fontarial9 = new Font("Arial", 8, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            //Font tamil = new Font("AMUDHAM.TTF", 16, FontStyle.Regular);
            Boolean coedoc = false;
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.A4);
            PdfPage mypdfpage;
            if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
            {
                FpSpread2.SaveChanges();
                for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
                {
                    int isval = 0;
                    isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                    if (isval == 1)
                    {
                        printds.Clear();
                        printds.Dispose();
                        printds_new.Clear();
                        printds_new.Dispose();
                        rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                        regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                        string sql = "SELECT  c.Edu_Level, Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';";
                        string edu_level = string.Empty;
                        printds = da.select_method_wo_parameter(sql, "Text");
                        if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                        {
                            edu_level = Convert.ToString(printds.Tables[0].Rows[0]["Edu_Level"]).Trim();
                            // current_semester = Convert.ToString(Session["semforsub"]);
                            mypdfpage = mydoc.NewPage();
                            degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                            coe = Convert.ToString(printds.Tables[1].Rows[0]["coe"]).Trim();
                            string[] spiltcoe = coe.Split('.');
                            string newcoe = string.Empty;
                            //if (coe.Trim().ToLower().Contains("dr."))
                            //{
                            //    for (int ce = 1; ce <= spiltcoe.GetUpperBound(0); ce++)
                            //    {
                            //        if (newcoe == "")
                            //        {
                            //            newcoe = Convert.ToString(spiltcoe[ce]);
                            //        }
                            //        else
                            //        {
                            //            newcoe = newcoe + "." + Convert.ToString(spiltcoe[ce]);
                            //        }
                            //    }
                            //    coe = newcoe;
                            //}
                            //month = ddlMonth.SelectedIndex;
                            //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                            int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                            monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                            string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                            monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                            monthandyear = monthandyear.ToUpper();
                            studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                            branch = Convert.ToString(printds.Tables[0].Rows[0]["Dept_name"]).Trim();
                            dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]).Trim();
                            string stdappno = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();
                            batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                            degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim();
                            sql2 = "select * from exam_details where    degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                            printds_new = da.select_method_wo_parameter(sql2, "Text");
                            if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                            {
                                sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
                                current_semester = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
                                if (sem == "1")
                                {
                                    semroman = "I";
                                }
                                else if (sem == "2")
                                {
                                    semroman = "II";
                                }
                                else if (sem == "3")
                                {
                                    semroman = "III";
                                }
                                else if (sem == "4")
                                {
                                    semroman = "IV";
                                }
                                else if (sem == "5")
                                {
                                    semroman = "V";
                                }
                                else if (sem == "6")
                                {
                                    semroman = "VI";
                                }
                                else if (sem == "7")
                                {
                                    semroman = "--";
                                }
                                else if (sem == "8")
                                {
                                    semroman = "--";
                                }
                                int noofsem = Convert.ToInt32(da.GetFunctionv("select Duration from Degree where Degree_Code='" + degree_code + "' "));
                                if (noofsem < Convert.ToInt32(sem))
                                {
                                    semroman = "--";
                                }
                                string stdphtsql = "select * from StdPhoto where app_no='" + stdappno + "'";
                                MemoryStream memoryStream = new MemoryStream();
                                DataSet dsstdpho = new DataSet();
                                dsstdpho.Clear();
                                dsstdpho.Dispose();
                                dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                                if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                                {
                                    byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                                    memoryStream.Write(file, 0, file.Length);
                                    if (file.Length > 0)
                                    {
                                        System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                        System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                        {
                                        }
                                        else
                                        {
                                            thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                        }
                                    }
                                }
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                {
                                    PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                                    mypdfpage.Add(LogoImage2, 500, 13, 340);
                                }
                                else
                                {
                                    PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                    mypdfpage.Add(LogoImage2, 500, 13, 340);
                                }
                                PdfTextArea pdfdoi = new PdfTextArea(Fontco10, System.Drawing.Color.Black, new PdfArea(mydoc, 74, 681, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                                mypdfpage.Add(pdfdoi);
                                exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]).Trim();
                                //sql3 = "Select syllabus_master.semester,Subject_Type,subject_name,subject_code,subject.subject_no,result,max_int_marks,max_ext_marks,internal_mark,external_mark,total,maxtotal,grade,cp,credit_points,mark_entry.subject_no,semester,maxtotal,exam_code from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = '" + exam_code + "' and roll_no='" + rollnosub + "'  order by syllabus_master.semester,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no";
                                sql3 = "Select sm.semester,ss.Subject_Type,ss.Lab,s.subjectpriority,s.subject_no,s.subject_code,s.subject_name,s.max_int_marks,m.internal_mark,s.max_ext_marks,m.external_mark,s.maxtotal,m.total,s.credit_points,m.result,m.grade,m.cp,m.exam_code,'0' as MarkOrExempted,'' as Message,'' description from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm where sm.syll_code=s.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and m.Exam_Code = '" + exam_code + "' and m.roll_no='" + rollnosub + "'  union  select sm.semester,ss.subject_type,ss.Lab,s.subjectpriority,s.subject_no,s.subject_code,s.subject_name,'0' as max_int_marks,'0' as internal_mark,'0' as max_ext_marks,'0' external_mark,'0' as maxtotal, '0' as total,s.credit_points,'' as result,'' grade,'0' cp,'0' exam_code,'1' as MarkOrExempted,sg.grade as Message,sg.description from subject s,sub_sem ss,syllabus_master sm,SpecialCourseSubject scs,SpecialCourseGradeDetail sg,Registration r where sg.MarkType=scs.MarkType and r.App_No=scs.app_no and s.subject_no=scs.subject_no and scs.CurrentSem=sm.semester and ss.syll_code=sm.syll_code and ss.syll_code=s.syll_code and s.subType_no=ss.subType_no and s.syll_code=sm.syll_code and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and sm.semester='" + sem + "' and r.Roll_No='" + rollnosub + "' order by sm.semester,ss.subject_type,ss.lab,s.subjectpriority,s.subject_no";
                                printds_rows.Clear();
                                printds_rows.Dispose();
                                printds_rows = da.select_method_wo_parameter(sql3, "Text");
                                PdfTable table1forpage1 = mydoc.NewTable(Fontco12, 1, 3, 1);
                                table1forpage1.VisibleHeaders = false;
                                table1forpage1.SetBorders(Color.Black, 1, BorderType.None);
                                table1forpage1.SetColumnsWidth(new int[] { 91, 157, 119 });
                                table1forpage1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(0, 0).SetContent(degree);
                                table1forpage1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(0, 1).SetContent("");
                                table1forpage1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(0, 2).SetContent(monthandyear);
                                PdfTablePage newpdftabpage2 = table1forpage1.CreateTablePage(new PdfArea(mydoc, 116, 69, 366, 50));
                                mypdfpage.Add(newpdftabpage2);
                                PdfTable table1forpage2 = mydoc.NewTable(Fontco10, 1, 3, 1);
                                table1forpage2.VisibleHeaders = false;
                                table1forpage2.SetBorders(Color.Black, 1, BorderType.None);
                                table1forpage2.SetColumnsWidth(new int[] { 354, 108, 108 });
                                table1forpage2.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage2.Cell(0, 0).SetContent(studname);
                                table1forpage2.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage2.Cell(0, 1).SetContent(dob);
                                table1forpage2.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage2.Cell(0, 2).SetContent(regnumber);
                                newpdftabpage2 = table1forpage2.CreateTablePage(new PdfArea(mydoc, 12, 125, 567, 50));//sr
                                mypdfpage.Add(newpdftabpage2);
                                PdfTable table1forpage2a = mydoc.NewTable(Fontco10, 1, 4, 1);
                                table1forpage2a.Columns[0].SetWidth(354);
                                table1forpage2a.VisibleHeaders = false;
                                table1forpage2a.SetBorders(Color.Black, 1, BorderType.None);
                                table1forpage2a.SetColumnsWidth(new int[] { 298, 56, 108, 108 });
                                table1forpage2a.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage2a.Cell(0, 0).SetContent(branch);
                                table1forpage2a.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage2a.Cell(0, 1).SetContent(semroman);
                                table1forpage2a.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage2a.Cell(0, 2).SetContent(monthandyear);
                                table1forpage2a.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage2a.Cell(0, 3).SetContent(txtdop.Text);
                                newpdftabpage2 = table1forpage2a.CreateTablePage(new PdfArea(mydoc, 12, 158, 567, 50));
                                mypdfpage.Add(newpdftabpage2);
                                colval = 215;
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    PdfTable fullmark = mydoc.NewTable(Fontarial7, printds_rows.Tables[0].Rows.Count + 1, 13, 2);
                                    fullmark.VisibleHeaders = false;
                                    fullmark.SetBorders(Color.Black, 1, BorderType.None);
                                    fullmark.Columns[0].SetWidth(23);
                                    fullmark.Columns[1].SetWidth(43);
                                    fullmark.Columns[2].SetWidth(232);
                                    fullmark.Columns[3].SetWidth(27);
                                    fullmark.Columns[4].SetWidth(27);
                                    fullmark.Columns[5].SetWidth(27);
                                    fullmark.Columns[6].SetWidth(27);
                                    fullmark.Columns[7].SetWidth(27);
                                    fullmark.Columns[8].SetWidth(27);
                                    fullmark.Columns[9].SetWidth(27);
                                    fullmark.Columns[10].SetWidth(34);
                                    fullmark.Columns[11].SetWidth(23);
                                    fullmark.Columns[12].SetWidth(23);
                                    for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                                    {
                                        string markOrExempted = Convert.ToString(printds_rows.Tables[0].Rows[i]["MarkOrExempted"]).Trim();
                                        string message = Convert.ToString(printds_rows.Tables[0].Rows[i]["Message"]).Trim();
                                        string description = Convert.ToString(printds_rows.Tables[0].Rows[i]["description"]).Trim();
                                        subtype = Convert.ToString(printds_rows.Tables[0].Rows[i]["Subject_Type"]).Trim();
                                        string[] spitsubtype = subtype.Split(' ');
                                        if (spitsubtype.GetUpperBound(0) > 0)
                                        {
                                            roman = Convert.ToString(spitsubtype[1]).Trim();
                                            if (roman == "1" || roman.Trim().ToUpper() == "I")
                                            {
                                                roman = "I";
                                                if (subjectcode_Part1 == "")
                                                {
                                                    subjectcode_Part1 = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                                }
                                                else
                                                {
                                                    subjectcode_Part1 = subjectcode_Part1 + "'" + "," + "'" + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                                }
                                            }
                                            else if (roman == "2" || roman.Trim().ToUpper() == "II")
                                            {
                                                roman = "II";
                                                if (subjectcode_Part2 == "")
                                                {
                                                    subjectcode_Part2 = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                                }
                                                else
                                                {
                                                    subjectcode_Part2 = subjectcode_Part2 + "'" + "," + "'" + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                                }
                                            }
                                            else if (roman == "3" || roman.Trim().ToUpper() == "III")
                                            {
                                                roman = "III";
                                                if (subjectcode_Part3 == "")
                                                {
                                                    subjectcode_Part3 = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                                }
                                                else
                                                {
                                                    subjectcode_Part3 = subjectcode_Part3 + "'" + "," + "'" + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                                }
                                            }
                                            else if (roman == "4" || roman.Trim().ToUpper() == "IV")
                                            {
                                                roman = "IV";
                                                if (subjectcode_Part4 == "")
                                                {
                                                    subjectcode_Part4 = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                                }
                                                else
                                                {
                                                    subjectcode_Part4 = subjectcode_Part4 + "'" + "," + "'" + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                                }
                                            }
                                        }
                                        if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                        {
                                            fullmark.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 0).SetContent(roman);
                                            fullmark.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(i, 1).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim());
                                            fullmark.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(i, 2).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim().ToUpper());
                                            if (markOrExempted.Trim() == "0")
                                            {
                                                fullmark.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(i, 3).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["max_int_marks"]).Trim());
                                                if (edu_level == "PG" && subtype.ToUpper().Trim() == "PART III")
                                                {
                                                    fullmark.Cell(i, 3).SetContent("");
                                                }
                                                double internalmmark = 0;
                                                double externalmark1 = 0;
                                                double totalintext = 0;
                                                fullmark.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(i, 4).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim());
                                                if (edu_level.ToUpper().Trim() == "PG" && subtype.ToUpper().Trim() == "PART III")
                                                {
                                                    fullmark.Cell(i, 4).SetContent("");
                                                }
                                                else if (edu_level.ToUpper().Trim() == "UG" && subtype.ToUpper().Trim() == "PART V")
                                                {
                                                    fullmark.Cell(i, 4).SetContent("");
                                                    fullmark.Cell(i, 3).SetContent("");//Rajkumar on 25-4-2018
                                                }
                                                //internalmmark = Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim());

                                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim(), out internalmmark);

                                                fullmark.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(i, 5).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["max_ext_marks"]).Trim());
                                                if (edu_level == "PG" && subtype.ToUpper().Trim() == "PART III")
                                                {
                                                    fullmark.Cell(i, 5).SetContent("");
                                                }
                                                else if (edu_level == "UG" && subtype.ToUpper().Trim() == "PART V")
                                                {
                                                    fullmark.Cell(i, 5).SetContent("");
                                                }
                                                double extfinal = 0;// Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim());
                                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim(), out extfinal);
                                                extfinal = Math.Round(extfinal, 0);
                                                externalmark1 = extfinal;
                                                string checkedmark = string.Empty;
                                                if (extfinal < 0)
                                                {
                                                    checkedmark = loadmarkat(Convert.ToString(extfinal));
                                                }
                                                else
                                                {
                                                    checkedmark = Convert.ToString(extfinal);
                                                }
                                                if (internalmmark >= 0)
                                                {
                                                    if (extfinal > 0)
                                                    {
                                                        totalintext = internalmmark + externalmark1;
                                                    }
                                                    else
                                                    {
                                                        totalintext = internalmmark;
                                                    }
                                                }
                                                else
                                                {
                                                    if (extfinal > 0)
                                                    {
                                                        totalintext = externalmark1;
                                                    }
                                                    else
                                                    {
                                                        totalintext = 0;
                                                    }
                                                }
                                                fullmark.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(i, 6).SetContent(checkedmark);
                                                if (edu_level == "PG" && subtype.ToUpper().Trim() == "PART III")
                                                {
                                                    fullmark.Cell(i, 6).SetContent("");
                                                }
                                                else if (edu_level == "UG" && subtype.ToUpper().Trim() == "PART V")
                                                {
                                                    fullmark.Cell(i, 6).SetContent("");
                                                }
                                                fullmark.Cell(i, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(i, 7).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["maxtotal"]).Trim());
                                                if (edu_level == "PG" && subtype.ToUpper().Trim() == "PART III")
                                                {
                                                    fullmark.Cell(i, 7).SetContent("");
                                                }
                                                else if (edu_level == "UG" && subtype.ToUpper().Trim() == "PART V")
                                                {
                                                    fullmark.Cell(i, 7).SetContent("");
                                                }
                                                double totfinal = 0;
                                                totfinal = Math.Round(totalintext, 0);
                                                fullmark.Cell(i, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(i, 8).SetContent(Convert.ToString(totfinal));
                                                if (edu_level == "PG" && subtype.ToUpper().Trim() == "PART III")
                                                {
                                                    fullmark.Cell(i, 8).SetContent("");
                                                }
                                                else if (edu_level == "UG" && subtype.ToUpper().Trim() == "PART V")
                                                {
                                                    fullmark.Cell(i, 8).SetContent("");
                                                }
                                                double checkmarkmm = 0;//Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim());
                                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim(), out checkmarkmm);
                                                string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 16/aug 2014
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                                {
                                                    gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 
                                                    gradeds.Clear();
                                                    gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                                }
                                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                                {
                                                    for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                                    {
                                                        if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                        {
                                                            grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
                                                            gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
                                                        }
                                                    }
                                                }
                                                double gradeibtpoint = 0;// Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim());
                                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim(), out gradeibtpoint);
                                                gradeibtpoint = gradeibtpoint / 10;
                                                gradeibtpoint = Math.Round(gradeibtpoint, 1);
                                                gradepoints = Convert.ToString(gradeibtpoint);
                                                fullmark.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(i, 9).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
                                                gradepoints = Convert.ToString(Math.Round(Convert.ToDouble(gradepoints), 2));
                                                gradepoints = String.Format("{0:0.00}", Convert.ToDouble(gradepoints));
                                                string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim().ToLower();
                                                if (result == "fail")
                                                {
                                                    result = "RA";
                                                    grade = "U";
                                                    fullmark.Cell(i, 10).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                    fullmark.Cell(i, 10).SetContent("0.00");
                                                }
                                                else if (result == "pass")
                                                {
                                                    result = "P";
                                                    fullmark.Cell(i, 10).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                    fullmark.Cell(i, 10).SetContent(gradepoints);
                                                    if (edu_level == "PG" && subtype.ToUpper().Trim() == "PART III")
                                                    {
                                                        fullmark.Cell(i, 10).SetContent("");
                                                    }
                                                    else if (edu_level == "UG" && subtype.ToUpper().Trim() == "PART V")
                                                    {
                                                        fullmark.Cell(i, 10).SetContent("");
                                                    }
                                                }
                                                else
                                                {
                                                    result = "AB";
                                                    grade = "U";
                                                    fullmark.Cell(i, 10).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                    fullmark.Cell(i, 10).SetContent("0.00");
                                                }
                                                fullmark.Cell(i, 11).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                string newggrade = "   " + grade;
                                                fullmark.Cell(i, 11).SetContent(newggrade);
                                                if (edu_level == "PG" && subtype.ToUpper().Trim() == "PART III")
                                                {
                                                    fullmark.Cell(i, 11).SetContent("");
                                                }
                                                else if (edu_level == "UG" && subtype.ToUpper().Trim() == "PART V")
                                                {
                                                    fullmark.Cell(i, 11).SetContent("");
                                                }
                                                fullmark.Cell(i, 12).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(i, 12).SetContent(result);
                                                if (edu_level == "PG" && subtype.ToUpper().Trim() == "PART III")
                                                {
                                                    fullmark.Cell(i, 12).SetContent("");
                                                }
                                                else if (edu_level == "UG" && subtype.ToUpper().Trim() == "PART V")
                                                {
                                                    fullmark.Cell(i, 12).SetContent("");
                                                }
                                            }
                                            else
                                            {
                                                fullmark.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(i, 3).SetContent("*** " + message + " ***");
                                                foreach (PdfCell pr in fullmark.CellRange(i, 3, i, 3).Cells)
                                                {
                                                    pr.ColSpan = 10;
                                                }
                                            }
                                            colval = colval + 12;
                                        }
                                    }
                                    fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetFont(Fontpala12);
                                    fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContent("****** End of Statement ******");
                                    foreach (PdfCell pr in fullmark.CellRange(printds_rows.Tables[0].Rows.Count, 0, printds_rows.Tables[0].Rows.Count, 0).Cells)
                                    {
                                        pr.ColSpan = 13;
                                    }
                                    newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 14, 215, 567, 800));
                                    mypdfpage.Add(newpdftabpage2);
                                }
                            }
                            PdfTable table1forpagecoe = mydoc.NewTable(Fontarial9, 1, 2, 1);
                            table1forpagecoe.VisibleHeaders = false;
                            table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                            table1forpagecoe.SetColumnsWidth(new int[] { 190 });
                            table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            table1forpagecoe.Cell(0, 0).SetContent(coe);
                            PdfTablePage newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 432, 782, 190, 50));
                            mypdfpage.Add(newpdftabpagecoe);
                            table1forpagecoe = mydoc.NewTable(Fontarial9, 1, 1, 1);
                            table1forpagecoe.VisibleHeaders = false;
                            table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                            table1forpagecoe.SetColumnsWidth(new int[] { 10 });
                            table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleRight);
                            // table1forpagecoe.Cell(0, 0).SetContent("D");
                            newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 420, 782, 10, 25));
                            mypdfpage.Add(newpdftabpagecoe);
                            table1forpagecoe = mydoc.NewTable(Fontarial9, 1, 1, 1);
                            table1forpagecoe.VisibleHeaders = false;
                            table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                            table1forpagecoe.SetColumnsWidth(new int[] { 10 });
                            table1forpagecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            // table1forpagecoe.Cell(0, 0).SetContent("R");
                            table1forpagecoe.Cell(0, 0).SetFont(Fontarial7r);
                            newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 428, 783.5, 10, 25));
                            mypdfpage.Add(newpdftabpagecoe);
                            string year = Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                            string collcode = Convert.ToString(ddlCollege.SelectedValue).Trim();
                            PdfTable table1forpagegpa = mydoc.NewTable(Fontco12a, 1, 4, 1);
                            table1forpagegpa.VisibleHeaders = false;
                            table1forpagegpa.SetBorders(Color.Black, 1, BorderType.None);
                            table1forpagegpa.SetColumnsWidth(new int[] { 94, 94, 94, 94 });
                            table1forpagegpa.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            double partsums = 0.00;
                            int partrowcount = 0;
                            double Credit_Points = 0.0;
                            double grade_points = 0.0;
                            double creditstotal = 0;
                            if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                            {
                                string sumpart = string.Empty;
                                DataView dv_demand_data = new DataView();
                                DataView dv_demand_datadummy = new DataView();
                                printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part I'  and semester='" + current_semester + "' and MarkOrExempted='0'";
                                dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                                partrowcount = dv_demand_datadummy.Count;
                                printds_rows.Tables[0].DefaultView.RowFilter = "Subject_Type='Part I' and result='pass' and semester='" + current_semester + "' and MarkOrExempted='0'";
                                dv_demand_data = printds_rows.Tables[0].DefaultView;
                                if (dv_demand_data.Count > 0 && partrowcount == dv_demand_data.Count)
                                {
                                    for (int sum = 0; sum < dv_demand_data.Count; sum++)
                                    {
                                        double checkmarkmm = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                        string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 16/aug 2014
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                        {
                                            gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                        }
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                        {
                                            for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                            {
                                                if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                {
                                                    grade_points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                                    grade_points = grade_points / 10;
                                                    Credit_Points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["credit_points"]).Trim());
                                                    creditstotal = creditstotal + Credit_Points;
                                                    partsums = partsums + (grade_points * Credit_Points);
                                                }
                                            }
                                        }
                                    }
                                    if (creditstotal == 0)
                                    {
                                        sumpart = "0.00";
                                    }
                                    else if (creditstotal > 0)
                                    {
                                        partsums = (partsums / creditstotal);
                                        partsums = Math.Round(partsums, 2);
                                        sumpart = String.Format("{0:0.00}", partsums);
                                    }
                                    else
                                    {
                                        sumpart = "0.00";
                                    }
                                }
                                else if (partrowcount > 0)
                                {
                                    sumpart = "0.00";
                                }
                                else
                                {
                                    sumpart = "--";
                                }
                                table1forpagegpa.Cell(0, 0).SetContent(sumpart);
                            }
                            else
                            {
                                table1forpagegpa.Cell(0, 0).SetContent("--");
                            }
                            partsums = 0;
                            partrowcount = 0;
                            creditstotal = 0;
                            table1forpagegpa.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                            {
                                string sumpart = string.Empty;
                                DataView dv_demand_data = new DataView();
                                DataView dv_demand_datadummy = new DataView();
                                printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part II' and semester='" + current_semester + "' and MarkOrExempted='0'";
                                dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                                partrowcount = dv_demand_datadummy.Count;
                                printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part II' and result='pass' and semester='" + current_semester + "' and MarkOrExempted='0'";
                                dv_demand_data = printds_rows.Tables[0].DefaultView;
                                if (dv_demand_data.Count > 0 && partrowcount == dv_demand_data.Count)
                                {
                                    for (int sum = 0; sum < dv_demand_data.Count; sum++)
                                    {
                                        double checkmarkmm = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                        string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 16/aug 2014
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                        {
                                            gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                        }
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                        {
                                            for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                            {
                                                if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                {
                                                    grade_points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                                    grade_points = grade_points / 10;
                                                    Credit_Points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["credit_points"]).Trim());
                                                    creditstotal = creditstotal + Credit_Points;
                                                    partsums = partsums + (grade_points * Credit_Points);
                                                }
                                            }
                                        }
                                    }
                                    if (creditstotal == 0)
                                    {
                                        sumpart = "0.00";
                                    }
                                    else if (creditstotal > 0)
                                    {
                                        partsums = (partsums / creditstotal);
                                        partsums = Math.Round(partsums, 2);
                                        sumpart = String.Format("{0:0.00}", partsums);
                                    }
                                    else
                                    {
                                        sumpart = "0.00";
                                    }
                                }
                                else if (partrowcount > 0)
                                {
                                    sumpart = "0.00";
                                }
                                else
                                {
                                    sumpart = "--";
                                }
                                table1forpagegpa.Cell(0, 1).SetContent(sumpart);
                            }
                            else
                            {
                                table1forpagegpa.Cell(0, 1).SetContent("--");
                            }
                            partsums = 0;
                            partrowcount = 0;
                            creditstotal = 0;
                            if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                            {
                                string sumpart = string.Empty;
                                DataView dv_demand_data = new DataView();
                                DataView dv_demand_datadummy = new DataView();
                                printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part III' and semester='" + current_semester + "' and MarkOrExempted='0'";
                                dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                                partrowcount = dv_demand_datadummy.Count;
                                printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part III' and result='pass' and semester='" + current_semester + "' and MarkOrExempted='0'";
                                dv_demand_data = printds_rows.Tables[0].DefaultView;
                                if (dv_demand_data.Count > 0 && partrowcount == dv_demand_data.Count)
                                {
                                    for (int sum = 0; sum < dv_demand_data.Count; sum++)
                                    {
                                        double checkmarkmm = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                        string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 16/aug 2014
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                        {
                                            gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                        }
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                        {
                                            for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                            {
                                                if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                {
                                                    grade_points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                                    grade_points = grade_points / 10;
                                                    Credit_Points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["credit_points"]).Trim());
                                                    creditstotal = creditstotal + Credit_Points;
                                                    partsums = partsums + (grade_points * Credit_Points);
                                                }
                                            }
                                        }
                                    }
                                    if (creditstotal == 0)
                                    {
                                        sumpart = "0.00";
                                    }
                                    else if (creditstotal > 0)
                                    {
                                        partsums = (partsums / creditstotal);
                                        partsums = Math.Round(partsums, 2);
                                        sumpart = String.Format("{0:0.00}", partsums);
                                    }
                                    else
                                    {
                                        sumpart = "0.00";
                                    }
                                }
                                else if (partrowcount > 0)
                                {
                                    sumpart = "0.00";
                                }
                                else
                                {
                                    sumpart = "--";
                                }
                                table1forpagegpa.Cell(0, 2).SetContent(sumpart);
                            }
                            else
                            {
                                table1forpagegpa.Cell(0, 2).SetContent("--");
                            }
                            if (edu_level == "PG")
                            {
                                table1forpagegpa.Cell(0, 2).SetContent("--");
                            }
                            partsums = 0;
                            partrowcount = 0;
                            creditstotal = 0;
                            if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                            {
                                string sumpart = string.Empty;
                                DataView dv_demand_data = new DataView();
                                DataView dv_demand_datadummy = new DataView();
                                printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part IV' and semester='" + current_semester + "' and MarkOrExempted='0'";
                                dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                                partrowcount = dv_demand_datadummy.Count;
                                printds_rows.Tables[0].DefaultView.RowFilter = "subject_type='Part IV' and result='pass' and semester='" + current_semester + "' and MarkOrExempted='0'";
                                dv_demand_data = printds_rows.Tables[0].DefaultView;
                                if (dv_demand_data.Count > 0 && partrowcount == dv_demand_data.Count)
                                {
                                    for (int sum = 0; sum < dv_demand_data.Count; sum++)
                                    {
                                        double checkmarkmm = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                        string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 16/aug 2014
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                        {
                                            gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                        }
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                        {
                                            for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                            {
                                                if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                {
                                                    grade_points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["total"]).Trim());
                                                    grade_points = grade_points / 10;
                                                    Credit_Points = Convert.ToDouble(Convert.ToString(dv_demand_data[sum]["credit_points"]).Trim());
                                                    creditstotal = creditstotal + Credit_Points;
                                                    partsums = partsums + (grade_points * Credit_Points);
                                                }
                                            }
                                        }
                                    }
                                    if (creditstotal == 0)
                                    {
                                        sumpart = "0.00";
                                    }
                                    else if (creditstotal > 0)
                                    {
                                        partsums = (partsums / creditstotal);
                                        partsums = Math.Round(partsums, 2);
                                        sumpart = String.Format("{0:0.00}", partsums);
                                    }
                                    else
                                    {
                                        sumpart = "0.00";
                                    }
                                }
                                else if (partrowcount > 0)
                                {
                                    sumpart = "0.00";
                                }
                                else
                                {
                                    sumpart = "--";
                                }
                                table1forpagegpa.Cell(0, 3).SetContent(sumpart);
                            }
                            else
                            {
                                table1forpagegpa.Cell(0, 3).SetContent("--");
                            }
                            newpdftabpagecoe = table1forpagegpa.CreateTablePage(new PdfArea(mydoc, 148, 725, 376, 50));
                            mypdfpage.Add(newpdftabpagecoe);
                            mypdfpage.SaveToDocument();
                        }
                    }
                }
            }
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
            }
        }
    }

    #endregion NEW COLLEGE

    //******* START BY MALANG RAJA.T ON 07/03/2016 ********

    #region MCC COLLEGE

    //FOR MCC,COMPLETED @ 08.03.2016
    public void ugmarkstatementf3()
    {
        try
        {
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            string degree = string.Empty;
            string edu_level = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string semroman = string.Empty;
            string coe = string.Empty;
            string curr_sem = string.Empty;
            int cur_sem = 0;
            int sheet_serial_no = 0;
            int additonalstatus = 0;
            string additionalmsg = string.Empty;
            bool onlyca = false;
            bool onlyes = false;
            DataSet gradeds = new DataSet();
            Font fontDegree = new Font("Times New Roman", 14, FontStyle.Bold);
            Font fontStudDetails = new Font("Times New Roman", 11, FontStyle.Bold);
            Font fontdegreename = new Font("Times New Roman", 14, FontStyle.Bold);
            Font fontStmtMarks = new Font("Times New Roman", 11, FontStyle.Regular);
            Font fontOveralrslt = new Font("Times New Roman", 11, FontStyle.Bold);
            Font fontcgpa = new Font("Times New Roman", 11, FontStyle.Regular);
            Font fontDate = new Font("Times New Roman", 11, FontStyle.Regular);
            Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font fontStud = new Font("Comic Sans MS", 10, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 8, FontStyle.Bold);
            DataTable dtPart1 = new DataTable();
            DataTable dtPart2 = new DataTable();
            DataTable dtPart3 = new DataTable();
            DataTable dtPart4 = new DataTable();
            DataSet OverallResult = new DataSet();
            Font Fontarial9 = new Font("Arial", 8, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            sheet_serial_no = 0;
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(25.4, 30.6));
            PdfPage mypdfpage;
            double ugpgminpass = 0;
            int selectedcount = 0;
            bool needDuplicate = false;
            string duplicateNumber = string.Empty;
            for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
            {
                int isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                if (isval == 1)
                {
                    selectedcount++;
                }
            }
            if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "5" || Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() == "8")
            {
                if (divDuplicate.Visible == true && chkDuplicateMarksheet.Checked && txtDuplicateNumber.Enabled)
                {
                    if (string.IsNullOrEmpty(txtDuplicateNumber.Text.Trim()))
                    {
                        //lbl_popuperr.Text = "Please Enter Duplicate Marksheet Number And Then Proceed";
                        //errdiv.Visible = true;
                        //return;
                        needDuplicate = false;
                    }
                    else if (selectedcount > 1)
                    {
                        //lbl_popuperr.Text = "Please Select Only One Student To Take Duplicate Marksheet";
                        //errdiv.Visible = true;
                        //return;
                        needDuplicate = false;
                    }
                    else
                    {
                        duplicateNumber = txtDuplicateNumber.Text.Trim();
                        needDuplicate = true;
                    }
                }
            }
            if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
            {
                FpSpread2.SaveChanges();
                for (int res = 1; res < FpSpread2.Sheets[0].RowCount; res++)
                {
                    int isval = 0;
                    additonalstatus = 0;
                    additionalmsg = string.Empty;
                    onlyca = false;
                    onlyes = false;
                    isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                    if (isval == 1)
                    {
                        cur_sem = 0;
                        ugpgminpass = 0;
                        printds.Clear();
                        printds.Dispose();
                        printds_new.Clear();
                        printds_new.Dispose();
                        PdfTable table1forpage1;
                        PdfTextArea pdfdoi;
                        PdfTextArea pdfDuplicateNo;
                        PdfTablePage newpdftabpage2;
                        PdfTable fullmark;
                        rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                        regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                        string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,C.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "';  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'; select * from exam_details ed,Registration r where ed.batch_year=r.Batch_Year and ed.degree_code=r.degree_code and r.Roll_No='" + rollnosub + "' order by exam_code;";//and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'
                        printds = da.select_method_wo_parameter(sql, "Text");
                        //string overall = "select count(s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'; Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc  where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass' and Mark_Entry.roll_no=sc.roll_no and Mark_Entry.subject_no=sc.subject_no and Mark_Entry.roll_no='" + rollnosub + "'  ";
                        //overall = overall + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc  where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail' and Mark_Entry.roll_no=sc.roll_no and Mark_Entry.subject_no=sc.subject_no and Mark_Entry.roll_no='" + rollnosub + "'select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass')";
                        string overall = "select count(s.subject_no) as total from subjectchooser sc,subject s,registration r,syllabus_master sm where sm.syll_code=s.syll_code and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code  and sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'; ";
                        overall += " Select count(s.subject_no) as total from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and ss.syll_code=s.syll_code and sm.syll_code=ss.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='pass' and m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' ;";
                        overall += " Select count(s.subject_no) as total from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and s.syll_code=ss.syll_code and sm.syll_code=ss.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='fail' and m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' ; ";
                        overall += " select distinct m.subject_no from mark_entry m,subjectChooser sc,syllabus_master sm,subject s where s.syll_code=sm.syll_code and s.subject_no=sc.subject_no and s.subject_no=m.subject_no and m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc,syllabus_master sm,subject s where s.syll_code=sm.syll_code and s.subject_no=m.subject_no and s.subject_no=sc.subject_no and m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass')";
                        OverallResult = da.select_method_wo_parameter(overall, "Text");
                        int noofsubapplied = Convert.ToInt32(Convert.ToString(OverallResult.Tables[0].Rows[0][0]).Trim());
                        int noofsubpassed = Convert.ToInt32(Convert.ToString(OverallResult.Tables[1].Rows[0][0]).Trim());
                        int splcredit = 0;
                        if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                        {
                            mypdfpage = mydoc.NewPage();
                            edu_level = Convert.ToString(printds.Tables[0].Rows[0]["edu_level"]).Trim();
                            degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                            coe = Convert.ToString(printds.Tables[1].Rows[0]["coe"]).Trim();
                            string[] spiltcoe = coe.Split('.');
                            string newcoe = string.Empty;
                            string grade_set = string.Empty;
                            for (int ce = 1; ce <= spiltcoe.GetUpperBound(0); ce++)
                            {
                                if (newcoe == "")
                                {
                                    newcoe = Convert.ToString(spiltcoe[ce]).Trim();
                                }
                                else
                                {
                                    newcoe = newcoe + "." + Convert.ToString(spiltcoe[ce]).Trim();
                                }
                            }
                            coe = newcoe;
                            //month = ddlMonth.SelectedIndex;
                            int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                            monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                            string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                            strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                            monthandyear = strMonthName.Trim() + "-" + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                            monthandyear = monthandyear.ToUpper().Trim();
                            //strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                            //strMonthName = Convert.ToString(strMonthName[0]) + Convert.ToString(strMonthName[1]) + Convert.ToString(strMonthName[2]);
                            //strMonthName = strMonthName.ToUpper() + " " + exam_y + "   ";
                            studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                            branch = Convert.ToString(printds.Tables[0].Rows[0]["Dept_name"]).Trim();
                            dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]).Trim();
                            string stdappno = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();
                            batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                            degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim();
                            int max_sem1 = 0;
                            string max_sem = d2.GetFunctionv("select NDurations from ndegree where batch_year='" + batch_year + "'  and Degree_code='" + degree_code + "'");
                            if (max_sem == "" || max_sem == null)
                            {
                                max_sem = d2.GetFunctionv("SELECT Duration FROM Degree where  Degree_Code='" + degree_code + "'");
                            }
                            int.TryParse(max_sem, out max_sem1);
                            sql2 = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                            string qryexmappn = string.Empty;
                            printds_new = da.select_method_wo_parameter(sql2, "Text");
                            if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                            {
                                sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
                                GetSem(batch_year.Trim(), Convert.ToString(ddlYear.SelectedItem.Text).Trim(), Convert.ToString(month).Trim(), max_sem, ref sem);
                                int.TryParse(sem, out cur_sem);
                                if (sem == "1")
                                {
                                    semroman = "I";
                                }
                                else if (sem == "2")
                                {
                                    semroman = "II";
                                }
                                else if (sem == "3")
                                {
                                    semroman = "III";
                                }
                                else if (sem == "4")
                                {
                                    semroman = "IV";
                                }
                                else if (sem == "5")
                                {
                                    semroman = "V";
                                }
                                else if (sem == "6")
                                {
                                    semroman = "VI";
                                }
                                else if (sem == "7")
                                {
                                    semroman = "VII";
                                }
                                else if (sem == "8")
                                {
                                    semroman = "VIII";
                                }
                                //PdfTextArea pdfdoi = new PdfTextArea(Fontco10, System.Drawing.Color.Black, new PdfArea(mydoc, 113, 803, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                                //mypdfpage.Add(pdfdoi);
                                pdfdoi = new PdfTextArea(fontDegree, System.Drawing.Color.Black, new PdfArea(mydoc, 231, 64, 80, 25), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString(degree));
                                mypdfpage.Add(pdfdoi);
                                if (needDuplicate)
                                {
                                    pdfDuplicateNo = new PdfTextArea(fontStudDetails, System.Drawing.Color.Black, new PdfArea(mydoc, 85, 25, 150, 200), System.Drawing.ContentAlignment.TopLeft, Convert.ToString("DUPLICATE OF NO\t:\t\t" + duplicateNumber + "\t\t\nDT\t:\t" + txtDuplicateDate.Text).Trim());
                                    mypdfpage.Add(pdfDuplicateNo);
                                }
                                exam_code = string.Empty;
                                for (int exa = 0; exa < printds_new.Tables[0].Rows.Count; exa++)
                                {
                                    exam_code += Convert.ToString(printds_new.Tables[0].Rows[exa]["exam_code"]).Trim() + ",";
                                }
                                exam_code = exam_code.Trim(',');
                                if (Convert.ToString(cur_sem).Trim() == Convert.ToString(max_sem1).Trim())
                                {
                                    chk_finalsemmrk_sheet.Checked = true;
                                }
                                //sql3 = "Select semester,subject_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,subject.Part_Type,sub_sem.priority,sub_sem.lab,SUBSTRING(subject_code,(LEN(subject_code)-2) ,1) as Prac_code,subject.subject_no,subject.min_int_marks,subject.min_ext_marks,subject.mintotal  from Mark_Entry,Subject,sub_sem,syllabus_master  where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in (" + exam_code + ") and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester desc,isnull(subject.Part_Type,'3') asc,case when (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='F' and lab=0) then null when (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='M' and lab=0) then 'A' when (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='M' and lab=1) then 'B' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='A' and lab=0) then 'C' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='A' and lab=1) then 'D' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,0)='E' and lab=1) then 'E' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='E' and lab=1) then 'F' Else SUBSTRING(subject_code,(LEN(subject_code)-2) ,1) End asc,subject.subjectpriority,sub_sem.lab,subject_type desc,subject_code asc"; hide by sridhar
                                sql3 = "Select semester,subject_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,case when result='WHD' then '-1' else isnull(external_mark,0) end external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'AAA' else 'FAIL' end as result,subject.Part_Type,sub_sem.priority,sub_sem.lab,SUBSTRING(subject_code,(LEN(subject_code)-2) ,1) as Prac_code,subject.subject_no,subject.min_int_marks,subject.min_ext_marks,subject.mintotal,print_acronmy  from Mark_Entry,Subject,sub_sem,syllabus_master  where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in (" + exam_code + ") and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null order by syllabus_master.semester desc, subject.subjectpriority";
                                printds_rows.Clear();
                                printds_rows.Dispose();
                                printds_rows = da.select_method_wo_parameter(sql3, "Text");
                                string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-";
                                if (edu_level.Trim().ToLower() == "ug")
                                {
                                    batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 3)).Trim();
                                    grade_set = "0";
                                    ugpgminpass = 50;
                                }
                                else
                                {
                                    batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 2)).Trim();
                                    grade_set = "1";
                                    ugpgminpass = 50;
                                }
                                table1forpage1 = mydoc.NewTable(fontStudDetails, 1, 6, 1);
                                table1forpage1.VisibleHeaders = false;
                                table1forpage1.SetBorders(Color.Black, 1, BorderType.None);
                                table1forpage1.SetColumnsWidth(new int[] { 290, 128, 86, 45, 45, 57 });  //286,116,88,45,45,60
                                table1forpage1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                table1forpage1.Cell(0, 0).SetContent(studname);
                                table1forpage1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                table1forpage1.Cell(0, 1).SetContent(branch);
                                table1forpage1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(0, 2).SetContent(regnumber);
                                table1forpage1.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(0, 3).SetContent(strMonthName);//monthandyear
                                table1forpage1.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(0, 4).SetContent(Convert.ToString(ddlYear.SelectedItem.Text).Trim());
                                table1forpage1.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(0, 5).SetFont(fontStudDetails);
                                if (chkinstatnt.Checked == false)
                                {
                                    if (cur_sem > max_sem1)
                                    {
                                        table1forpage1.Cell(0, 5).SetContent("PRIVATE");
                                    }
                                    else
                                    {
                                        table1forpage1.Cell(0, 5).SetContent(semroman);//semroman
                                    }
                                }
                                else
                                {
                                    table1forpage1.Cell(0, 5).SetContent("Instant");//semroman
                                }
                                newpdftabpage2 = table1forpage1.CreateTablePage(new PdfArea(mydoc, 27, 142, 665, 80));//h=35
                                mypdfpage.Add(newpdftabpage2);
                                DataSet dsSpl = new DataSet();
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    //string exm_sem = Convert.ToString(printds_rows.Tables[0].Rows[0]["semester"]).Trim();
                                    int rowSpecial = 0;
                                    //if (chk_finalsemmrk_sheet.Checked && (cur_sem) >= max_sem1)
                                    //{
                                    //string nwqry = "select top 1 from SpecialCourseSubject where App_no='" + stdappno + "' and CurrentSem='"+curr_sem+"' and IsFinalsem='1'";
                                    string nwqry = "select s.subject_name,scs.Subject_No,App_no,MarkType,IsFinalsem,CurrentSem,s.credit_points,ss.subject_type,s.acronym from SpecialCourseSubject scs,subject s,sub_sem ss where s.subject_no=scs.Subject_No and ss.subType_no=s.subType_no and App_no='" + stdappno + "'";
                                    //if (cur_sem == max_sem1)
                                    //{
                                    //    nwqry = nwqry + " and CurrentSem='" + cur_sem + "'";
                                    //}
                                    dsSpl = d2.select_method_wo_parameter(nwqry, "Text");
                                    rowSpecial = dsSpl.Tables[0].Rows.Count;
                                    //}
                                    fullmark = mydoc.NewTable(fontStmtMarks, printds_rows.Tables[0].Rows.Count + rowSpecial + 2, 10, 3);
                                    fullmark.VisibleHeaders = false;
                                    fullmark.SetBorders(Color.Black, 1, BorderType.None);
                                    fullmark.Columns[0].SetWidth(65);
                                    fullmark.Columns[1].SetWidth(250);
                                    fullmark.Columns[2].SetWidth(43);
                                    fullmark.Columns[3].SetWidth(40);
                                    fullmark.Columns[4].SetWidth(38);
                                    fullmark.Columns[5].SetWidth(40);
                                    fullmark.Columns[6].SetWidth(40);
                                    fullmark.Columns[7].SetWidth(43);
                                    fullmark.Columns[8].SetWidth(43);
                                    fullmark.Columns[9].SetWidth(50);
                                    int mr = 0;
                                    double maxInternalCheck = 0;
                                    double maxExtenalCheck = 0;
                                    if (ddlFormats.SelectedIndex == 0)
                                    {
                                        maxInternalCheck = 50;
                                        maxExtenalCheck = 50;
                                    }
                                    else
                                    {
                                        maxInternalCheck = 25;
                                        maxExtenalCheck = 75;
                                    }
                                    for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                                    {
                                        #region MarkSheet Page II

                                        if (i != 0 && i % 19 == 0)
                                        {
                                            if (i % 19 == 0)
                                            {
                                                fullmark.Cell(mr, 1).SetCellPadding(5);
                                                fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                fullmark.Cell(mr, 1).SetContent("--- STATEMENT CONTINUED ---");
                                                newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 27, 206, 665, 410));//old 255
                                                mypdfpage.Add(newpdftabpage2);
                                                pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 72, 828, 100, 25), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString(txtdoi.Text).Trim());
                                                mypdfpage.Add(pdfdoi);
                                                if (needDuplicate)
                                                {
                                                    pdfDuplicateNo = new PdfTextArea(fontStudDetails, System.Drawing.Color.Black, new PdfArea(mydoc, 85, 25, 150, 200), System.Drawing.ContentAlignment.TopLeft, Convert.ToString("DUPLICATE OF NO\t:\t\t" + duplicateNumber + "\t\t\nDT\t:\t" + txtDuplicateDate.Text));
                                                    mypdfpage.Add(pdfDuplicateNo);
                                                }
                                                mypdfpage.SaveToDocument();
                                                mypdfpage = mydoc.NewPage();
                                                mr = 0;
                                                pdfdoi = new PdfTextArea(fontdegreename, System.Drawing.Color.Black, new PdfArea(mydoc, 231, 64, 80, 25), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString(degree));
                                                mypdfpage.Add(pdfdoi);
                                                table1forpage1 = mydoc.NewTable(fontStudDetails, 1, 6, 1);
                                                table1forpage1.VisibleHeaders = false;
                                                table1forpage1.SetBorders(Color.Black, 1, BorderType.None);
                                                table1forpage1.SetColumnsWidth(new int[] { 290, 128, 86, 45, 45, 57 });  //286,116,88,45,45,60
                                                table1forpage1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                table1forpage1.Cell(0, 0).SetContent(studname);
                                                table1forpage1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                table1forpage1.Cell(0, 1).SetContent(branch);
                                                table1forpage1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                table1forpage1.Cell(0, 2).SetContent(regnumber);
                                                table1forpage1.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                table1forpage1.Cell(0, 3).SetContent(strMonthName);//monthandyear
                                                table1forpage1.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                table1forpage1.Cell(0, 4).SetContent(Convert.ToString(ddlYear.SelectedItem.Text).Trim());
                                                table1forpage1.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                table1forpage1.Cell(0, 5).SetFont(fontStudDetails);
                                                if (chkinstatnt.Checked == false)
                                                {
                                                    if (cur_sem > max_sem1)
                                                    {
                                                        //table1forpage1.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                        table1forpage1.Cell(0, 5).SetContent("PRIVATE");
                                                        table1forpage1.Cell(0, 5).SetFont(fontStudDetails);
                                                    }
                                                    else
                                                    {
                                                        //table1forpage1.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                        table1forpage1.Cell(0, 5).SetContent(semroman);
                                                    }
                                                }
                                                else
                                                {
                                                    table1forpage1.Cell(0, 5).SetContent("Instant");//semroman
                                                }
                                                newpdftabpage2 = table1forpage1.CreateTablePage(new PdfArea(mydoc, 27, 142, 665, 80));//h=35
                                                mypdfpage.Add(newpdftabpage2);
                                                fullmark = mydoc.NewTable(fontStmtMarks, printds_rows.Tables[0].Rows.Count + rowSpecial + 2, 10, 3);
                                                fullmark.VisibleHeaders = false;
                                                fullmark.SetBorders(Color.Black, 1, BorderType.None);
                                                fullmark.Columns[0].SetWidth(65);
                                                fullmark.Columns[1].SetWidth(250);
                                                fullmark.Columns[2].SetWidth(43);
                                                fullmark.Columns[3].SetWidth(40);
                                                fullmark.Columns[4].SetWidth(38);
                                                fullmark.Columns[5].SetWidth(40);
                                                fullmark.Columns[6].SetWidth(40);
                                                fullmark.Columns[7].SetWidth(43);
                                                fullmark.Columns[8].SetWidth(43);
                                                fullmark.Columns[9].SetWidth(50);
                                                fullmark.Cell(mr, 1).SetCellPadding(5);
                                                fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                fullmark.Cell(mr, 1).SetContent("--- CONTINUATION OF STATEMENT ---");
                                                mr += 2;
                                                //fullmark.Cell(mr, 1).SetCellPadding(5);
                                            }

                                            #region  Commented By Malang Raja T Do not Delete

                                            //if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                            //{
                                            //    fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //    string subjectccoden = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]);
                                            //    fullmark.Cell(mr, 0).SetContent(subjectccoden);
                                            //    fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            //    fullmark.Cell(mr, 1).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim());
                                            //    string subtypeaccr = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_type"]);
                                            //    string sub_no = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]);
                                            //    //Added by srinath 21 June 2016
                                            //    string printcronmy = Convert.ToString(printds_rows.Tables[0].Rows[i]["print_acronmy"]);
                                            //    if (printcronmy.Trim() != "")
                                            //    {
                                            //        subtypeaccr = printcronmy;
                                            //    }
                                            //    else
                                            //    {
                                            //        subtypeaccr = findSubTypeAccromy(subtypeaccr);
                                            //    }
                                            //    double max_total = 0;
                                            //    double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["maxtotal"]), out max_total);
                                            //    double min_total = 0;
                                            //    double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["mintotal"]), out min_total);
                                            //    double min_int_marks = 0;
                                            //    double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["min_int_marks"]), out min_int_marks);
                                            //    double min_ext_marks = 0;
                                            //    double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["min_ext_marks"]), out min_ext_marks);
                                            //    //string subtypeaccr = string.Empty;
                                            //    //subtypeaccr = Convert.ToString(dvMark[i]["subject_type"]);
                                            //    //subtypeaccr = findSubTypeAccromy(subtypeaccr);
                                            //    if (printcronmy.Trim() != "")
                                            //    {
                                            //        subtypeaccr = printcronmy;
                                            //    }
                                            //    else
                                            //    {
                                            //        if (subtypeaccr.ToUpper().Trim() == "PRAC")
                                            //        {
                                            //            if (Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).ToLower() == "computer training" || Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).ToLower() == "skillbased computer training intro.to information techn. & ms office")
                                            //            {
                                            //                subtypeaccr = "CT";
                                            //            }
                                            //            else if (subtypeaccr.ToUpper().Trim() == "PRAC")
                                            //            {
                                            //                string sub_code = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim();
                                            //                string gt_sub_code = sub_code.Substring(sub_code.Length - 3, 1);
                                            //                if (gt_sub_code.ToUpper().Trim() == "M")
                                            //                {
                                            //                    subtypeaccr = "MC";
                                            //                }
                                            //                else if (gt_sub_code.ToUpper().Trim() == "A")
                                            //                {
                                            //                    subtypeaccr = "AC";
                                            //                }
                                            //                else if (gt_sub_code.ToUpper().Trim() == "E")
                                            //                {
                                            //                    subtypeaccr = "EC";
                                            //                }
                                            //                else
                                            //                {
                                            //                    subtypeaccr = "PRAC";
                                            //                }
                                            //            }
                                            //        }
                                            //    }
                                            //    fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //    fullmark.Cell(mr, 2).SetContent(subtypeaccr);
                                            //    double internalmmark = 0;
                                            //    double externalmark1 = 0;
                                            //    double totalintext = 0;
                                            //    string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim();
                                            //    string r = string.Empty;
                                            //    fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //    if (result.ToUpper().Trim() == "PASS")
                                            //    {
                                            //        r = "PASS";
                                            //    }
                                            //    else if (result.ToUpper().Trim() == "FAIL")
                                            //    {
                                            //        r = "RA";
                                            //    }
                                            //    else if (result.ToUpper().Trim() == "ABSENT" || result.ToUpper().Trim() == "AB" || result.ToUpper().Trim() == "AAA")
                                            //    {
                                            //        r = "AAA";
                                            //    }
                                            //    else if (result.ToUpper().Trim() == "RE-APPEAR" || result.ToUpper().Trim() == "REAPPEAR" || result.ToUpper().Trim() == "RA")
                                            //    {
                                            //        r = "RA";
                                            //    }
                                            //    else
                                            //    {
                                            //        r = result;
                                            //    }
                                            //    fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //    fullmark.Cell(mr, 3).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
                                            //    //internalmmark = Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim());
                                            //    string maxinternal = Convert.ToString(printds_rows.Tables[0].Rows[i]["max_int_marks"]).Trim();
                                            //    string maxexternal = Convert.ToString(printds_rows.Tables[0].Rows[i]["max_ext_marks"]).Trim();
                                            //    double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]), out internalmmark);
                                            //    double extfinal = 0;
                                            //    double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]), out extfinal);
                                            //    extfinal = Math.Round(extfinal, 0, MidpointRounding.AwayFromZero);
                                            //    externalmark1 = extfinal;
                                            //    //added on  May 6 2016
                                            //    double internmrk = internalmmark;
                                            //    string intern = d2.GetFunctionv("select internal_mark from mark_entry where roll_no='" + rollnosub + "' and result='fail' and internal_mark=total and internal_mark>0 and subject_no='" + sub_no + "'");
                                            //    double new_intern = 0;
                                            //    double.TryParse(intern, out new_intern);
                                            //    string new_extern = string.Empty;
                                            //    double new_external = 0;
                                            //    //double internmrk = internalmmark;
                                            //    string checkedmark = string.Empty;
                                            //    string interncheck = string.Empty;
                                            //    if (internmrk < 0)
                                            //    {
                                            //        interncheck = loadmarkat(Convert.ToString(internmrk));
                                            //        interncheck = "AAA";
                                            //    }
                                            //    else
                                            //    {
                                            //        interncheck = Convert.ToString(internmrk);
                                            //    }
                                            //    //if (extfinal < 0)
                                            //    //{
                                            //    //    new_extern = d2.GetFunctionv("select external_mark from mark_entry where roll_no='" + rollnosub + "' and subject_no='" + sub_no + "' and   external_mark>0  order by external_mark desc");
                                            //    //    double.TryParse(new_extern, out new_external);
                                            //    //    externalmark1 = extfinal = new_external;
                                            //    //}
                                            //    if (extfinal < 0)
                                            //    {
                                            //        checkedmark = loadmarkat(Convert.ToString(extfinal));
                                            //        checkedmark = "AAA";
                                            //        switch (extfinal.ToString())
                                            //        {
                                            //            case "-1":
                                            //                checkedmark = "AAA";
                                            //                break;
                                            //            case "-2":
                                            //                checkedmark = "NE";
                                            //                break;
                                            //            case "-3":
                                            //                checkedmark = "NR";
                                            //                break;
                                            //            default:
                                            //                checkedmark = "AAA";
                                            //                break;
                                            //        }
                                            //    }
                                            //    else
                                            //    {
                                            //        checkedmark = Convert.ToString(extfinal).Trim();
                                            //    }
                                            //    if (internalmmark >= 0)
                                            //    {
                                            //        if (extfinal > 0)
                                            //        {
                                            //            totalintext = internalmmark + externalmark1;
                                            //        }
                                            //        else
                                            //        {
                                            //            totalintext = internalmmark;
                                            //        }
                                            //    }
                                            //    else
                                            //    {
                                            //        if (extfinal > 0)
                                            //        {
                                            //            totalintext = externalmark1;
                                            //        }
                                            //        else
                                            //        {
                                            //            totalintext = 0;
                                            //        }
                                            //    }
                                            //    onlyca = false;
                                            //    onlyes = false;
                                            //    //if (extfinal > ugpgminpass)
                                            //    //{
                                            //    //    onlyes = true;
                                            //    //}
                                            //    //if (internalmmark > ugpgminpass)
                                            //    //{
                                            //    //    onlyca = true;
                                            //    //}
                                            //    //if (maxinternal == "0" && maxexternal == "100")
                                            //    //{
                                            //    //    onlyes = true;
                                            //    //}
                                            //    //if (maxinternal == "100" && maxexternal == "0")
                                            //    //{
                                            //    //    onlyca = true;
                                            //    //}
                                            //    if (maxinternal == "0" && min_int_marks == 0)
                                            //    {
                                            //        onlyes = true;
                                            //    }
                                            //    if (min_ext_marks == 0 && maxexternal == "0")
                                            //    {
                                            //        onlyca = true;
                                            //    }
                                            //    fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //    if (onlyes == true && extfinal >= 0)
                                            //    {
                                            //        fullmark.Cell(mr, 5).SetContent(checkedmark + "/" + maxexternal + "");
                                            //    }
                                            //    else
                                            //    {
                                            //        //if (checkedmark.ToLower().Trim() != "aaa")
                                            //        //    fullmark.Cell(mr, 5).SetContent(checkedmark);
                                            //        //else
                                            //        //{
                                            //        //    fullmark.Cell(mr, 5).SetContent("AAA");
                                            //        //}
                                            //        if (extfinal < 0 && internmrk < 0)//Modified by srinath 28/5/2016
                                            //        {
                                            //            fullmark.Cell(mr, 5).SetContent("NR");//Modified by srinath 28/5/2016
                                            //        }
                                            //        // if (checkedmark.ToLower().Trim() != "aaa")
                                            //        fullmark.Cell(mr, 5).SetContent(checkedmark);
                                            //    }
                                            //    if (onlyca == true && internalmmark >= 0)
                                            //    {
                                            //        fullmark.Cell(mr, 4).SetContent(interncheck + "/" + maxinternal + "");//Modified by srinath 28/5/2016
                                            //    }
                                            //    else if (onlyes == false)
                                            //    {
                                            //        fullmark.Cell(mr, 4).SetContent(interncheck);
                                            //    }
                                            //    else
                                            //    {
                                            //        fullmark.Cell(mr, 4).SetContent("NA");
                                            //        additonalstatus = 1;
                                            //    }
                                            //    if (onlyca)
                                            //    {
                                            //        fullmark.Cell(mr, 5).SetContent("NA");
                                            //        additonalstatus = 1;
                                            //    }
                                            //    fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //    //fullmark.Cell(i, 4).SetContent(interncheck);
                                            //    fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //    double totfinal = 0;
                                            //    bool ggflag = false;
                                            //    totfinal = Math.Round(totalintext, 0, MidpointRounding.AwayFromZero);
                                            //    fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //    //if (totalintext >= min_total)
                                            //    //{
                                            //    //    result = "PASS";
                                            //    //    r = "PASS";
                                            //    //}
                                            //    //else
                                            //    //{
                                            //    //    result = "RA";
                                            //    //    r = "RA";
                                            //    //}
                                            //    //if ((extfinal < 0) || internmrk < 0)
                                            //    //{
                                            //    //    //if(onlyes && onlyca)
                                            //    //    fullmark.Cell(mr, 6).SetContent("AAA");
                                            //    //    ggflag = true;
                                            //    //}
                                            //    //else
                                            //    //{
                                            //    //    ggflag = false;
                                            //    //    fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal));
                                            //    //}
                                            //    if (!onlyca && !onlyes)
                                            //    {
                                            //        if (extfinal < 0 && internmrk < 0)
                                            //        {
                                            //            fullmark.Cell(mr, 6).SetContent("NR");//Modified by srinath 28/5/2016
                                            //            ggflag = true;
                                            //        }
                                            //        else
                                            //        {
                                            //            ggflag = false;
                                            //            fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal));
                                            //            if (max_total != 100 || onlyca == true || onlyes == true)
                                            //            {
                                            //                fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal + "/" + max_total));
                                            //            }
                                            //        }
                                            //    }
                                            //    else
                                            //    {
                                            //        if (onlyes)
                                            //        {
                                            //            if (extfinal < 0)
                                            //            {
                                            //                checkedmark = "AAA";
                                            //                switch (extfinal.ToString())
                                            //                {
                                            //                    case "-1":
                                            //                        checkedmark = "AAA";
                                            //                        break;
                                            //                    case "-2":
                                            //                        checkedmark = "NE";
                                            //                        break;
                                            //                    case "-3":
                                            //                        checkedmark = "NR";
                                            //                        break;
                                            //                    default:
                                            //                        checkedmark = "AAA";
                                            //                        break;
                                            //                }
                                            //                interncheck = string.Empty;
                                            //                fullmark.Cell(mr, 6).SetContent(checkedmark);
                                            //                ggflag = true;
                                            //            }
                                            //            else
                                            //            {
                                            //                interncheck = string.Empty;
                                            //                ggflag = false;
                                            //                fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal));
                                            //                if (max_total != 100 || onlyca == true || onlyes == true)
                                            //                {
                                            //                    fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal + "/" + max_total));
                                            //                }
                                            //            }
                                            //        }
                                            //        else if (onlyca)
                                            //        {
                                            //            if (internmrk < 0)
                                            //            {
                                            //                fullmark.Cell(mr, 6).SetContent("AAA");
                                            //                ggflag = true;
                                            //                interncheck = "AAA";
                                            //                checkedmark = string.Empty;
                                            //            }
                                            //            else
                                            //            {
                                            //                interncheck = string.Empty;
                                            //                checkedmark = string.Empty;
                                            //                ggflag = false;
                                            //                fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal));
                                            //                if (max_total != 100 || onlyca == true || onlyes == true)
                                            //                {
                                            //                    fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal + "/" + max_total));
                                            //                }
                                            //            }
                                            //        }
                                            //    }
                                            //    double getval = totfinal;
                                            //    if (max_total != 100)
                                            //    {
                                            //        getval = totfinal / max_total * 100;
                                            //        getval = Math.Round(getval, 1, MidpointRounding.AwayFromZero);
                                            //    }
                                            //    string grade = string.Empty;
                                            //    double gradepoint = 0;
                                            //    string q = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + getval + "' between Frange and Trange; select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + getval + "' between Frange and Trange;";
                                            //    DataSet dsgrade = new DataSet();
                                            //    dsgrade = d2.select_method_wo_parameter(q, "Text");
                                            //    if (dsgrade.Tables.Count > 0)
                                            //    {
                                            //        if (dsgrade.Tables[0].Rows.Count == 0)
                                            //        {
                                            //            if (dsgrade.Tables.Count > 1 && dsgrade.Tables[1].Rows.Count > 0)
                                            //            {
                                            //                grade = Convert.ToString(dsgrade.Tables[1].Rows[0]["Mark_Grade"]).Trim();
                                            //            }
                                            //        }
                                            //        else
                                            //        {
                                            //            grade = Convert.ToString(dsgrade.Tables[0].Rows[0]["Mark_Grade"]).Trim();
                                            //        }
                                            //    }
                                            //    fullmark.Cell(mr, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //    if (result.Trim().ToLower() == "pass" && (checkedmark.ToLower().Trim() != "aaa" && interncheck.ToLower().Trim() != "aaa"))
                                            //    {
                                            //        //gradepoint = totfinal / 10;
                                            //        if (onlyca == true || onlyes == true)
                                            //        {
                                            //            gradepoint = totfinal / max_total * 10;
                                            //        }
                                            //        else
                                            //        {
                                            //            gradepoint = totfinal / 10;
                                            //        }
                                            //        gradepoint = Math.Round(gradepoint, 1, MidpointRounding.AwayFromZero);
                                            //        string gp = String.Format("{0:0.0}", gradepoint);
                                            //        fullmark.Cell(mr, 7).SetContent(gp);
                                            //    }
                                            //    else
                                            //    {
                                            //        fullmark.Cell(mr, 7).SetContent("0.0");
                                            //    }
                                            //    fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //    if (ggflag)
                                            //    {
                                            //        //fullmark.Cell(mr, 8).SetContent("AAA");
                                            //        if (extfinal < 0 && internmrk < 0)//Modified by srinath 28/5/2016
                                            //        {
                                            //            fullmark.Cell(mr, 8).SetContent("NR");
                                            //        }
                                            //        else
                                            //        {
                                            //            fullmark.Cell(mr, 8).SetContent("AAA");
                                            //        }
                                            //    }
                                            //    else if (r.ToLower().Trim() == "ra")
                                            //    {
                                            //        fullmark.Cell(mr, 8).SetContent("U");
                                            //    }
                                            //    else
                                            //    {
                                            //        fullmark.Cell(mr, 8).SetContent(grade);
                                            //    }
                                            //    //if (extfinal < 0)
                                            //    //{
                                            //    //    r = checkedmark;
                                            //    //}
                                            //    //if (internmrk < 0)
                                            //    //{
                                            //    //    r = interncheck;
                                            //    //}
                                            //    //if (r.ToUpper() == "aaa")
                                            //    //{
                                            //    //    r = "AAA";
                                            //    //}
                                            //    if (onlyca == false && onlyes == false)
                                            //    {
                                            //        if (extfinal < 0)
                                            //        {
                                            //            r = checkedmark;
                                            //        }
                                            //        if (internmrk < 0)
                                            //        {
                                            //            r = interncheck;
                                            //        }
                                            //        if (r.ToUpper().Trim() == "AAA")
                                            //        {
                                            //            r = "AAA";
                                            //        }
                                            //    }
                                            //    fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //    fullmark.Cell(mr, 9).SetContent(r);
                                            //    if (extfinal < 0 && internmrk < 0)//Modified by srinath 28/5/2016
                                            //    {
                                            //        fullmark.Cell(mr, 9).SetContent("NR");
                                            //    }
                                            //}

                                            #endregion Commented By Malang Raja T
                                        }

                                        #endregion MarkSheet Page II

                                        #region MarkSheet Page I

                                        //else
                                        //{
                                        if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                        {
                                            string subjectccoden = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim();
                                            string subjectName = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim();
                                            string subnamefdsg = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim();
                                            string sub_no = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_no"]).Trim();
                                            string subtypeaccr = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_type"]).Trim();
                                            string printcronmy = Convert.ToString(printds_rows.Tables[0].Rows[i]["print_acronmy"]).Trim();

                                            string internalMarkNew = Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim();
                                            string minInternalMarks = Convert.ToString(printds_rows.Tables[0].Rows[i]["min_int_marks"]).Trim();
                                            string maxinternal = Convert.ToString(printds_rows.Tables[0].Rows[i]["max_int_marks"]).Trim();

                                            string externalMarksNew = Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim();
                                            string minExternalMarks = Convert.ToString(printds_rows.Tables[0].Rows[i]["min_ext_marks"]).Trim();
                                            string maxexternal = Convert.ToString(printds_rows.Tables[0].Rows[i]["max_ext_marks"]).Trim();

                                            string totalMarksNew = Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim();
                                            string minTotalMarks = Convert.ToString(printds_rows.Tables[0].Rows[i]["mintotal"]).Trim();
                                            string maxTotalMarks = Convert.ToString(printds_rows.Tables[0].Rows[i]["maxtotal"]).Trim();

                                            string creditPoints = Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim();

                                            string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim();
                                            string r = string.Empty;

                                            onlyca = false;
                                            onlyes = false;
                                            bool ggflag = false;

                                            string displayInternal = string.Empty;
                                            string displayExternal = string.Empty;
                                            string displayTotal = string.Empty;
                                            string displayResult = string.Empty;
                                            string displayGP = string.Empty;
                                            string displayLG = string.Empty;
                                            //string displayCredit = string.Empty;

                                            string intern = string.Empty;
                                            string interncheck = string.Empty;
                                            string new_extern = string.Empty;
                                            string checkedmark = string.Empty;

                                            double internalmmark = 0;
                                            double internmrk = 0;
                                            double new_intern = 0;
                                            double min_int_marks = 0;
                                            double maxInternalMarks = 0;

                                            double externalmark1 = 0;
                                            double extfinal = 0;
                                            double new_external = 0;
                                            double min_ext_marks = 0;
                                            double maxExternalMarks = 0;

                                            double totalintext = 0;
                                            double totfinal = 0;
                                            double totalMarkNew = 0;
                                            double min_total = 0;
                                            double max_total = 0;

                                            double creditPointNew = 0;


                                            intern = d2.GetFunctionv("select internal_mark from mark_entry where roll_no='" + rollnosub + "' and result='fail' and internal_mark=total and internal_mark>0 and subject_no='" + sub_no + "'");
                                            double.TryParse(intern, out new_intern);

                                            double.TryParse(Convert.ToString(internalMarkNew).Trim(), out internalmmark);
                                            internmrk = internalmmark;
                                            double.TryParse(Convert.ToString(minInternalMarks).Trim(), out min_int_marks);
                                            double.TryParse(Convert.ToString(maxinternal).Trim(), out maxInternalMarks);

                                            double.TryParse(Convert.ToString(externalMarksNew).Trim(), out externalmark1);
                                            double.TryParse(Convert.ToString(externalMarksNew).Trim(), out extfinal);
                                            extfinal = Math.Round(extfinal, 0, MidpointRounding.AwayFromZero);
                                            externalmark1 = extfinal;
                                            double.TryParse(Convert.ToString(minExternalMarks).Trim(), out min_ext_marks);
                                            double.TryParse(Convert.ToString(maxexternal).Trim(), out maxExternalMarks);

                                            //if (extfinal < 0)
                                            //{
                                            //    new_extern = d2.GetFunctionv("select external_mark from mark_entry where roll_no='" + rollnosub + "' and subject_no='" + sub_no + "' and   external_mark>0  order by external_mark desc");
                                            //    double.TryParse(new_extern, out new_external);
                                            //    externalmark1 = extfinal = new_external;
                                            //}

                                            double.TryParse(Convert.ToString(maxTotalMarks).Trim(), out max_total);
                                            double.TryParse(Convert.ToString(minTotalMarks).Trim(), out min_total);
                                            double.TryParse(Convert.ToString(totalMarksNew).Trim(), out totalMarkNew);

                                            double.TryParse(Convert.ToString(creditPoints).Trim(), out creditPointNew);

                                            if (printcronmy.Trim() != "")
                                            {
                                                subtypeaccr = printcronmy.Trim();
                                            }
                                            else
                                            {
                                                subtypeaccr = findSubTypeAccromy(subtypeaccr).Trim();
                                            }
                                            if (printcronmy.Trim() != "")
                                            {
                                                subtypeaccr = printcronmy.Trim();
                                            }
                                            else if (printcronmy.Trim() == "")
                                            {
                                                if (subtypeaccr.ToUpper().Trim() == "PRAC")
                                                {
                                                    if (Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).ToLower() == "computer training" || Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).ToLower() == "skillbased computer training intro.to information techn. & ms office")
                                                    {
                                                        subtypeaccr = "CT";
                                                    }
                                                    else if (subtypeaccr.ToUpper().Trim() == "PRAC")
                                                    {
                                                        string sub_code = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim();
                                                        string gt_sub_code = sub_code.Substring(sub_code.Length - 3, 1);
                                                        if (gt_sub_code.ToUpper().Trim() == "M")
                                                        {
                                                            subtypeaccr = "MC";
                                                        }
                                                        else if (gt_sub_code.ToUpper().Trim() == "A")
                                                        {
                                                            subtypeaccr = "AC";
                                                        }
                                                        else if (gt_sub_code.ToUpper().Trim() == "E")
                                                        {
                                                            subtypeaccr = "EC";
                                                        }
                                                        else
                                                        {
                                                            subtypeaccr = "PRAC";
                                                        }
                                                    }
                                                }
                                            }

                                            if (maxinternal == "0" && maxInternalMarks == 0 && minInternalMarks.Trim() == "0" && min_int_marks == 0)
                                            {
                                                onlyes = true;
                                            }
                                            if (min_ext_marks == 0 && minExternalMarks.Trim() == "0" && maxExternalMarks == 0 && maxexternal == "0")
                                            {
                                                onlyca = true;
                                            }

                                            if (internmrk < 0)
                                            {
                                                interncheck = loadmarkat(Convert.ToString(internmrk));
                                                interncheck = "AAA";
                                            }
                                            else
                                            {
                                                interncheck = Convert.ToString(internmrk);
                                            }

                                            if (extfinal < 0)
                                            {
                                                checkedmark = loadmarkat(Convert.ToString(extfinal));
                                                checkedmark = "AAA";
                                                switch (extfinal.ToString())
                                                {
                                                    case "-1":
                                                        checkedmark = "AAA";
                                                        break;
                                                    case "-2":
                                                        checkedmark = "NE";
                                                        break;
                                                    case "-3":
                                                        checkedmark = "NR";
                                                        break;
                                                    default:
                                                        checkedmark = "AAA";
                                                        break;
                                                }
                                            }
                                            else
                                            {
                                                checkedmark = Convert.ToString(extfinal);
                                            }

                                            if (internalmmark >= 0)
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = internalmmark + externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = internalmmark;
                                                }
                                            }
                                            else
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = 0;
                                                }
                                            }
                                            totfinal = Math.Round(totalintext, 0, MidpointRounding.AwayFromZero);

                                            if (result.ToUpper().Trim() == "PASS")
                                            {
                                                r = "PASS";
                                            }
                                            else if (result.ToUpper().Trim() == "FAIL")
                                            {
                                                r = "RA";
                                            }
                                            else if (result.ToUpper().Trim() == "ABSENT" || result.ToUpper().Trim() == "AB" || result.ToUpper().Trim() == "AAA")
                                            {
                                                r = "AAA";
                                            }
                                            else if (result.ToUpper().Trim() == "RE-APPEAR" || result.ToUpper().Trim() == "REAPPEAR" || result.ToUpper().Trim() == "RA")
                                            {
                                                r = "RA";
                                            }
                                            else
                                            {
                                                r = result.Trim();
                                            }

                                            double getval = totfinal;
                                            if (max_total != 100)
                                            {
                                                getval = totfinal / max_total * 100;
                                                getval = Math.Round(getval, 1, MidpointRounding.AwayFromZero);
                                            }
                                            string grade = string.Empty;
                                            double gradepoint = 0;
                                            string q = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + getval + "' between Frange and Trange; select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + getval + "' between Frange and Trange;";
                                            DataSet dsgrade = new DataSet();
                                            dsgrade = d2.select_method_wo_parameter(q, "Text");
                                            if (dsgrade.Tables.Count > 0)
                                            {
                                                if (dsgrade.Tables[0].Rows.Count == 0)
                                                {
                                                    if (dsgrade.Tables.Count > 1 && dsgrade.Tables[1].Rows.Count > 0)
                                                    {
                                                        grade = Convert.ToString(dsgrade.Tables[1].Rows[0]["Mark_Grade"]).Trim();
                                                    }
                                                }
                                                else
                                                {
                                                    grade = Convert.ToString(dsgrade.Tables[0].Rows[0]["Mark_Grade"]).Trim();
                                                }
                                            }
                                            bool isNENR = false;
                                            if (onlyca == true && internalmmark >= 0)
                                            {
                                                displayInternal = interncheck + "/" + maxinternal + "";
                                                //fullmark.Cell(mr, 4).SetContent(interncheck + "/" + maxinternal + "");//Modified by srinath 28/5/2016
                                            }
                                            else if (onlyes == false)
                                            {
                                                displayInternal = interncheck;
                                                if (maxInternalCheck != maxInternalMarks && internalmmark >= 0)
                                                {
                                                    displayInternal = interncheck + "/" + maxInternalMarks;
                                                }
                                                //fullmark.Cell(mr, 4).SetContent(interncheck);
                                            }
                                            else
                                            {
                                                displayInternal = "NA";
                                                //fullmark.Cell(mr, 4).SetContent("NA");
                                                additonalstatus = 1;
                                            }
                                            if (onlyes == true && extfinal >= 0)
                                            {
                                                displayExternal = checkedmark + "/" + maxexternal + "";
                                                //fullmark.Cell(mr, 5).SetContent(checkedmark + "/" + maxexternal + "");//Modified by srinath 28/5/2016
                                            }
                                            else
                                            {
                                                if (extfinal < 0 && internmrk < 0)//Modified by srinath 28/5/2016
                                                {
                                                    displayExternal = "NR";
                                                    //switch (extfinal.ToString().Trim())
                                                    //{
                                                    //    case "-2":
                                                    //        isNENR = true;
                                                    //        displayExternal = "NE";
                                                    //        break;
                                                    //    case "-3":
                                                    //        isNENR = true;
                                                    //        displayExternal = "NR";
                                                    //        break;
                                                    //}
                                                    //fullmark.Cell(mr, 5).SetContent("NR");//Modified by srinath 28/5/2016
                                                }
                                                displayExternal = checkedmark;
                                                if (maxExtenalCheck != maxExternalMarks && extfinal >= 0)
                                                {
                                                    displayExternal = checkedmark + "/" + maxExternalMarks;
                                                }
                                                //fullmark.Cell(mr, 5).SetContent(checkedmark);
                                            }
                                            if (onlyca)
                                            {
                                                displayExternal = "NA";
                                                //fullmark.Cell(mr, 5).SetContent("NA");
                                                additonalstatus = 1;
                                            }

                                            if (!onlyca && !onlyes)
                                            {
                                                if (extfinal < 0 && internmrk < 0)
                                                {
                                                    displayTotal = "NR";
                                                    switch (extfinal.ToString().Trim())
                                                    {
                                                        case "-2":
                                                            isNENR = true;
                                                            displayTotal = "NE";
                                                            break;
                                                        case "-3":
                                                            isNENR = true;
                                                            displayTotal = "NR";
                                                            break;
                                                    }
                                                    //fullmark.Cell(mr, 6).SetContent("NR");//Modified by srinath 28/5/2016
                                                    ggflag = true;
                                                }
                                                else
                                                {
                                                    if (extfinal < 0)
                                                    {
                                                        ggflag = true;
                                                        switch (extfinal.ToString().Trim())
                                                        {
                                                            case "-2":
                                                                isNENR = true;
                                                                displayTotal = "NE";
                                                                break;
                                                            case "-3":
                                                                isNENR = true;
                                                                displayTotal = "NR";
                                                                break;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        ggflag = false;
                                                    }
                                                    //fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal));
                                                    if (!isNENR)
                                                    {
                                                        displayTotal = Convert.ToString(totfinal).Trim();
                                                        if ((max_total != 100 || onlyca == true || onlyes == true))//&& totfinal >= 0
                                                        {
                                                            displayTotal = Convert.ToString(totfinal + "/" + max_total);
                                                            //fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal + "/" + max_total));
                                                        }
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                if (onlyes)
                                                {
                                                    if (extfinal < 0)
                                                    {
                                                        checkedmark = "AAA";
                                                        switch (extfinal.ToString())
                                                        {
                                                            case "-1":
                                                                checkedmark = "AAA";
                                                                break;
                                                            case "-2":
                                                                isNENR = true;
                                                                checkedmark = "NE";
                                                                break;
                                                            case "-3":
                                                                isNENR = true;
                                                                checkedmark = "NR";
                                                                break;
                                                            default:
                                                                checkedmark = "AAA";
                                                                break;
                                                        }
                                                        interncheck = string.Empty;
                                                        //fullmark.Cell(mr, 6).SetContent(checkedmark);
                                                        displayTotal = checkedmark;
                                                        ggflag = true;
                                                    }
                                                    else
                                                    {
                                                        interncheck = string.Empty;
                                                        ggflag = false;
                                                        //fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal));
                                                        displayTotal = Convert.ToString(totfinal).Trim();
                                                        if (max_total != 100 || onlyca == true || onlyes == true)
                                                        {
                                                            displayTotal = Convert.ToString(totfinal + "/" + max_total).Trim();
                                                            //fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal + "/" + max_total));
                                                        }
                                                    }
                                                }
                                                else if (onlyca)
                                                {
                                                    if (internmrk < 0)
                                                    {
                                                        //fullmark.Cell(mr, 6).SetContent("AAA");
                                                        ggflag = true;
                                                        interncheck = "AAA";
                                                        checkedmark = string.Empty;
                                                        displayTotal = "AAA";
                                                    }
                                                    else
                                                    {
                                                        interncheck = string.Empty;
                                                        checkedmark = string.Empty;
                                                        ggflag = false;
                                                        fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal));
                                                        displayTotal = Convert.ToString(totfinal).Trim();
                                                        if (max_total != 100 || onlyca == true || onlyes == true)
                                                        {
                                                            displayTotal = Convert.ToString(totfinal + "/" + max_total).Trim();
                                                            //fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal + "/" + max_total));
                                                        }
                                                    }
                                                }
                                            }

                                            if (result.Trim().ToLower() == "pass" && (checkedmark.ToLower().Trim() != "aaa" && interncheck.ToLower().Trim() != "aaa" && checkedmark.ToLower().Trim() != "ne" && checkedmark.ToLower().Trim() != "nr"))
                                            {
                                                if (onlyca == true || onlyes == true)
                                                {
                                                    gradepoint = totfinal / max_total * 10;
                                                }
                                                else
                                                {
                                                    gradepoint = totfinal / max_total * 10;
                                                }
                                                gradepoint = Math.Round(gradepoint, 1, MidpointRounding.AwayFromZero);
                                                string gp = String.Format("{0:0.0}", gradepoint);
                                                //fullmark.Cell(mr, 7).SetContent(gp);
                                                displayGP = gp;
                                            }
                                            else
                                            {
                                                //fullmark.Cell(mr, 7).SetContent("0.0");
                                                displayGP = "0.0";
                                            }
                                            if (ggflag)
                                            {
                                                if (extfinal < 0 && internmrk < 0)//Modified by srinath 28/5/2016
                                                {
                                                    //fullmark.Cell(mr, 8).SetContent("NR");
                                                    displayLG = "NR";
                                                    //switch (extfinal.ToString().Trim())
                                                    //{
                                                    //    case "-2":
                                                    //        isNENR = true;
                                                    //        displayLG = "NE";
                                                    //        break;
                                                    //    case "-3":
                                                    //        isNENR = true;
                                                    //        displayLG = "NR";
                                                    //        break;
                                                    //}
                                                    if (isNENR)
                                                    {
                                                        displayLG = displayTotal;
                                                    }
                                                }
                                                else
                                                {
                                                    //fullmark.Cell(mr, 8).SetContent("AAA");
                                                    if (isNENR)
                                                    {
                                                        displayLG = displayTotal;
                                                    }
                                                    else
                                                    {
                                                        displayLG = grade;
                                                    }
                                                }
                                            }
                                            else if (r.ToLower().Trim() == "ra")
                                            {
                                                //fullmark.Cell(mr, 8).SetContent("U");
                                                displayLG = "U";
                                            }
                                            else
                                            {
                                                //fullmark.Cell(mr, 8).SetContent(grade);                                                
                                                displayLG = grade;
                                            }

                                            if (onlyca == false && onlyes == false)
                                            {
                                                displayResult = r.Trim();
                                                if (extfinal < 0)
                                                {
                                                    r = checkedmark;
                                                }
                                                if (internmrk < 0)
                                                {
                                                    r = interncheck;
                                                }
                                                if (r.ToUpper().Trim() == "AAA")
                                                {
                                                    r = "AAA";
                                                }
                                                if (isNENR)
                                                {
                                                    displayResult = displayTotal;
                                                }
                                                else
                                                {
                                                    displayResult = r.Trim();
                                                }
                                            }
                                            else
                                            {
                                                displayResult = r.Trim();
                                                if (onlyca)
                                                {
                                                    if (internmrk < 0)
                                                    {
                                                        displayResult = "AAA";
                                                    }
                                                }
                                                if (onlyes)
                                                {
                                                    if (extfinal < 0)
                                                    {
                                                        checkedmark = "AAA";
                                                        switch (extfinal.ToString())
                                                        {
                                                            case "-1":
                                                                checkedmark = "AAA";
                                                                break;
                                                            case "-2":
                                                                checkedmark = "NE";
                                                                break;
                                                            case "-3":
                                                                checkedmark = "NR";
                                                                break;
                                                            default:
                                                                checkedmark = "AAA";
                                                                break;
                                                        }
                                                        displayResult = checkedmark.Trim();
                                                    }
                                                }
                                            }
                                            //if (extfinal < 0 && internmrk < 0)//Modified by srinath 28/5/2016
                                            //{
                                            //    fullmark.Cell(mr, 9).SetContent("NR");
                                            //}

                                            fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 0).SetContent(subjectccoden);

                                            fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 1).SetContent(subjectName);

                                            fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 2).SetContent(subtypeaccr.Trim());

                                            fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 3).SetContent(Convert.ToString(creditPoints).Trim());

                                            fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 4).SetContent(displayInternal);

                                            fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 5).SetContent(displayExternal);

                                            fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 6).SetContent(Convert.ToString(displayTotal).Trim());

                                            fullmark.Cell(mr, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 7).SetContent(displayGP);

                                            fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 8).SetContent(displayLG);

                                            fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 9).SetContent(displayResult);


                                            //fullmark.Cell(i, 4).SetContent(interncheck);

                                            #region Hide by sridhar

                                            //if (totalintext >= min_total)
                                            //{
                                            //    result = "PASS";
                                            //    r = "PASS";
                                            //}
                                            //else
                                            //{
                                            //    result = "FAIL";
                                            //    r = "RA";
                                            //}

                                            #endregion

                                            //if (extfinal < 0)
                                            //{
                                            //    r = checkedmark;                                               
                                            //}
                                            //if (internmrk < 0)
                                            //{
                                            //    r = interncheck;
                                            //}
                                            //if (r.ToUpper() == "AB")
                                            //{
                                            //    r = "AAA";
                                            //}
                                            //fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //fullmark.Cell(mr, 9).SetContent(r);
                                            //if (extfinal < 0 && internmrk < 0)//Modified by srinath 28/5/2016
                                            //{
                                            //    fullmark.Cell(mr, 9).SetContent("NR");
                                            //}
                                        }
                                        //}

                                        #endregion MarkSheet Page I
                                        mr += 1;
                                    }
                                    if (rowSpecial == 0)
                                    {
                                        fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        fullmark.Cell(mr, 1).SetFont(fontStmtMarks);
                                        fullmark.Cell(mr, 1).SetCellPadding(12);
                                        fullmark.Cell(mr, 1).SetContent("--- END OF STATEMENT ---");
                                    }
                                    else   // New Jairam
                                    {
                                        if (dsSpl.Tables.Count > 0 && dsSpl.Tables[0].Rows.Count > 0) //&& cur_sem == max_sem1
                                        {
                                            dsSpl.Tables[0].DefaultView.RowFilter = "currentsem='" + cur_sem + "'";
                                            DataView dvset = dsSpl.Tables[0].DefaultView;
                                            if (dvset.Count > 0)
                                            {
                                                string Finla = Convert.ToString(dvset[0]["IsFinalSem"]);

                                                splcredit = 1;
                                                if (edu_level.Trim().ToLower() == "ug")
                                                {
                                                    splcredit = 1;
                                                    if (Finla.Trim() != "1" && cur_sem != max_sem1)
                                                    {
                                                        fullmark.Cell(mr, 1).SetContent("Part III " + Convert.ToString(dvset[0]["Subject_name"]).Trim());
                                                    }
                                                    else
                                                    {
                                                        fullmark.Cell(mr, 1).SetContent("Part V " + Convert.ToString(dvset[0]["Subject_name"]).Trim());
                                                    }
                                                }
                                                else
                                                {
                                                    splcredit = 2;
                                                    fullmark.Cell(mr, 1).SetContent("Part II " + Convert.ToString(dvset[0]["Subject_name"]).Trim());
                                                }
                                                fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                fullmark.Cell(mr, 1).SetFont(fontStmtMarks);
                                                fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(mr, 2).SetFont(fontStmtMarks);
                                                //acronym
                                                //string subtypeaccr = Convert.ToString(dsSpl.Tables[0].Rows[0]["Subject_name"]);//acronym
                                                //subtypeaccr = findSubTypeAccromy(subtypeaccr);
                                                fullmark.Cell(mr, 2).SetContent(Convert.ToString(dsSpl.Tables[0].Rows[0]["acronym"]).Trim());
                                                fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(mr, 3).SetContent(splcredit);
                                                fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(mr, 4).SetContent("NA");
                                                fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(mr, 5).SetContent("NA");
                                                fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(mr, 6).SetContent("NA");
                                                fullmark.Cell(mr, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(mr, 7).SetContent("NA");
                                                fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(mr, 8).SetContent("NA");
                                                if (Convert.ToString(dvset[0]["MarkType"]).Trim() == "1")
                                                {
                                                    fullmark.Cell(mr, 9).SetContent("Good");
                                                }
                                                else if (Convert.ToString(dvset[0]["MarkType"]).Trim() == "2")
                                                {
                                                    fullmark.Cell(mr, 9).SetContent("Excellent");
                                                }
                                                else if (Convert.ToString(dvset[0]["MarkType"]).Trim() == "3")
                                                {
                                                    fullmark.Cell(mr, 9).SetContent("Outstanding");
                                                }
                                                else if (Convert.ToString(dvset[0]["MarkType"]).Trim() == "4")
                                                {
                                                    fullmark.Cell(mr, 9).SetContent("Average");
                                                }
                                                fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            }
                                        }
                                        fullmark.Cell(mr + 1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        fullmark.Cell(mr + 1, 1).SetFont(fontStmtMarks);
                                        fullmark.Cell(mr + 1, 1).SetCellPadding(12);
                                        fullmark.Cell(mr + 1, 1).SetContent("--- END OF STATEMENT ---");
                                    }
                                    //foreach (PdfCell pr in fullmark.CellRange(printds_rows.Tables[0].Rows.Count, 0, printds_rows.Tables[0].Rows.Count, 0).Cells)
                                    //{
                                    //    pr.ColSpan = 10;
                                    //}
                                    newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 27, 206, 665, 410));//old 255
                                    mypdfpage.Add(newpdftabpage2);
                                    DataView dvPasscount = new DataView();
                                    printds_rows.Tables[0].DefaultView.RowFilter = "result='pass'";
                                    dvPasscount = printds_rows.Tables[0].DefaultView;
                                    DataSet dsPass = new DataSet();
                                    //    string qry = "select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and exam_code in(" + exam_code + ") and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass' and exam_code in(" + exam_code + ")); select distinct COUNT(teq.Equal_Subject_Code),teq.Com_Subject_Code from  subjectchooser sc,subject s,registration r , tbl_equal_paper_Matching teq   where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no   and r.roll_no='" + rollnosub + "'  and teq.Equal_Subject_Code=s.subject_code group by teq.Com_Subject_Code having COUNT(teq.Equal_Subject_Code)>1; ";
                                    //    dsPass = d2.select_method_wo_parameter(qry, "Text");
                                    //int allpass=dsPass.Tables[0].Rows.Count-dsPass.Tables[1].Rows.Count;
                                    int nogetfailsub = 0;

                                    #region COMMENTED BY MALANG RAJA

                                    //int nofofailnonmajor = Convert.ToInt32(da.GetFunctionv(" select isnull(Count(distinct s.subject_no),'0') from mark_entry m,subject s,sub_sem ss where m.subject_no=s.subject_no and s.subType_no=ss.subType_no  and m.result<>'Pass' and SUBSTRING(subject_code,7,1)<>'M' and m.roll_no='" + rollnosub + "' and m.subject_no not in(select m1.subject_no from mark_entry m1 where m1.roll_no=m.roll_no and m1.subject_no=m.subject_no and m1.result='Pass') and m.subject_no in(select m1.subject_no from mark_entry m1 where m1.roll_no=m.roll_no and m1.subject_no=m.subject_no)"));

                                    #endregion COMMENTED BY MALANG RAJA



                                    //Rajkumar on 07-02-2018 for Major subject cridit based PASS/Fail in Overall Result
                                    int setng_ovrtotalcreadits = Convert.ToInt32(da.GetFunctionv("select totalcredits from coe_ovrl_credits_Dts where degree_code='" + degree_code + "'"));
                                    int setng_mintotalcreadits = Convert.ToInt32(da.GetFunctionv("select minimcredits from coe_ovrl_credits_Dts where degree_code='" + degree_code + "'"));
                                    int removeCredit = setng_ovrtotalcreadits - setng_mintotalcreadits;
                                    removeCredit = removeCredit / 5;

                                    string MfailCount = string.Empty;
                                    if (setng_mintotalcreadits == setng_ovrtotalcreadits)
                                        MfailCount = string.Empty;
                                    else
                                        MfailCount = "  and SUBSTRING(subject_code,7,1)<>'M'";

                                    int nofofailnonmajor = Convert.ToInt32(da.GetFunctionv(" select isnull(Count(distinct s.subject_no),'0') from mark_entry m,subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where m.subject_no=s.subject_no and s.subType_no=ss.subType_no and sm.syll_code=s.syll_code and s.syll_code=ss.syll_code and sm.syll_code=ss.syll_code and s.subject_no=sc.subject_no and sc.subject_no=m.subject_no and m.roll_no=sc.roll_no and  m.result<>'Pass' and (SUBSTRING(subject_code,7,1)<>'M'  OR part_type<>3) and m.roll_no='" + rollnosub + "' and m.subject_no not in(select m1.subject_no from mark_entry m1 where m1.roll_no=m.roll_no and m1.subject_no=m.subject_no and m1.result='Pass') and m.subject_no in(select m1.subject_no from mark_entry m1 where m1.roll_no=m.roll_no and m1.subject_no=m.subject_no)"));//or part_type<>3

                                    if (nofofailnonmajor == 0)
                                    {
                                        nogetfailsub = Convert.ToInt32(d2.GetFunction("select isnull(count(subject_no),'0') from mark_entry where roll_no='" + rollnosub + "' and exam_code in(" + exam_code + ")  and result<>'Pass'"));
                                        if (edu_level.Trim().ToUpper() == "UG")
                                        {

                                            //if (setng_ovrtotalcreadits > setng_mintotalcreadits)//command by Rajkumar for major fail student
                                            {
                                                #region COMMENTED BY MALANG RAJA

                                                //int nofofail = Convert.ToInt32(da.GetFunctionv(" Select isnull(Count(distinct subject.subject_no),'0') from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result<>'pass' and roll_no='" + rollnosub + "' and SUBSTRING(subject_code,7,1)='M' and subject.subject_no not in (Select subject.subject_no from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'   and roll_no='" + rollnosub + "')"));

                                                #endregion COMMENTED BY MALANG RAJA

                                                int nofofail = Convert.ToInt32(da.GetFunctionv("Select isnull(Count(distinct s.subject_no),'0') from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and sm.syll_code=ss.syll_code and ss.syll_code=s.syll_code and s.subject_no=sc.subject_no and m.roll_no=sc.roll_no and sc.subject_no=m.subject_no and m.result<>'pass' and m.roll_no='" + rollnosub + "' and SUBSTRING(subject_code,7,1)='M' and part_type=3 and s.subject_no not in (Select s.subject_no from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and sm.syll_code=ss.syll_code and ss.syll_code=s.syll_code and sc.roll_no=m.roll_no and s.subject_no=sc.subject_no and sc.subject_no=m.subject_no and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and m.result='pass' and m.roll_no='" + rollnosub + "')"));//and part_type=3
                                                if (nofofail <= removeCredit)//(nofofail <= 2 changed by Rajkumar
                                                {
                                                    nogetfailsub = 0;
                                                }
                                                else
                                                    nogetfailsub = nofofail;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        nogetfailsub = nofofailnonmajor;
                                    }



                                    if (cur_sem >= max_sem1)
                                    {
                                        //if (dvPasscount.Count == printds_rows.Tables[0].Rows.Count && (cur_sem) == max_sem1)
                                        if (nogetfailsub == 0 && rowSpecial > 0)
                                        {
                                            pdfdoi = new PdfTextArea(fontOveralrslt, System.Drawing.Color.Black, new PdfArea(mydoc, 113, 595, 305, 30), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("OVERALL RESULT   : PASS").Trim());
                                            mypdfpage.Add(pdfdoi);
                                        }
                                        else if ((cur_sem) > max_sem1 && cur_sem != max_sem1 && nogetfailsub == 0)
                                        {
                                            pdfdoi = new PdfTextArea(fontOveralrslt, System.Drawing.Color.Black, new PdfArea(mydoc, 113, 595, 305, 30), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("OVERALL RESULT   : PASS").Trim());
                                            mypdfpage.Add(pdfdoi);
                                        }
                                        else
                                        {
                                            pdfdoi = new PdfTextArea(fontOveralrslt, System.Drawing.Color.Black, new PdfArea(mydoc, 113, 595, 305, 30), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("OVERALL RESULT   : FAIL").Trim());
                                            mypdfpage.Add(pdfdoi);
                                        }
                                    }
                                    //Added by srinath  28/5/2016
                                    // pdfdoi = new PdfTextArea(fontOveralrslt, System.Drawing.Color.Black, new PdfArea(mydoc, 113, 610, 500, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("NE - NOT ELIGIBLE, NA - NOT APPLICABLE, NR - NOT REGISTRED, RA - RE-APPEAR"));
                                    //mypdfpage.Add(pdfdoi);
                                }
                                int cgparow = 0;
                                bool pglevel = false;
                                if (edu_level.Trim().ToLower() == "ug")
                                {
                                    cgparow = 2;
                                    pglevel = false;
                                }
                                else
                                {
                                    cgparow = 1;
                                    pglevel = true;
                                }
                                PdfTable table1forpagecoe = mydoc.NewTable(fontcgpa, cgparow, 8, 2);
                                table1forpagecoe.VisibleHeaders = false;
                                table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                                table1forpagecoe.SetColumnsWidth(new int[] { 79, 79, 79, 79, 79, 79, 79, 82 });
                                string batchsetting = "0";
                                double partsums = 0.000;
                                double partwpmsum = 0.000;
                                int partrowcount = 0;
                                double Credit_Points = 0.0;
                                double grade_points = 0.0;
                                double creditstotal = 0;
                                double overalltotgrade = 0;
                                double Marks = 0;
                                //if (pglevel == false)
                                //{
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    string sumpart = string.Empty;
                                    string wpm = string.Empty;
                                    DataView dv_demand_data = new DataView();
                                    DataView dv_demand_datadummy = new DataView();//semester='"+cur_sem+"'";
                                    printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='1' and semester='" + cur_sem + "'";
                                    dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                                    partrowcount = dv_demand_datadummy.Count;
                                    printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='1' and result='pass' and semester='" + cur_sem + "'";
                                    dtPart1 = printds_rows.Tables[0].DefaultView.ToTable();
                                    if (pglevel == false)
                                    {
                                        table1forpagecoe.Cell(0, 1).SetCellPadding(5);
                                        table1forpagecoe.Cell(0, 2).SetCellPadding(5);
                                        table1forpagecoe.Cell(0, 3).SetCellPadding(5);
                                    }
                                    else
                                    {
                                        table1forpagecoe.Cell(0, 1).SetCellPadding(7);
                                        table1forpagecoe.Cell(0, 2).SetCellPadding(7);
                                        table1forpagecoe.Cell(0, 3).SetCellPadding(7);
                                    }
                                    if (dtPart1.Rows.Count > 0 && partrowcount == dtPart1.Rows.Count)
                                    {
                                        for (int sum = 0; sum < dtPart1.Rows.Count; sum++)
                                        {
                                            //Convert.ToDouble(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim())
                                            double checkmarkmm = 0;
                                            double getval = 0;
                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim(), out getval);
                                            // checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                            double max_total = 0;
                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["maxtotal"]).Trim(), out max_total);
                                            //double getval = checkmarkmm;
                                            checkmarkmm = Math.Round(getval, 1, MidpointRounding.AwayFromZero);
                                            if (max_total != 0 && max_total != 100)
                                            {
                                                checkmarkmm = getval / max_total * 100;
                                                checkmarkmm = Math.Round(checkmarkmm, 1, MidpointRounding.AwayFromZero);
                                            }
                                            string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + checkmarkmm + "' between frange and trange";//added by sridhar 16/aug 2014
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                            {
                                                gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "'  and '" + checkmarkmm + "' between frange and trange";//added by sridhar 
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            }
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                                {
                                                    if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                    {
                                                        //grade_points = Convert.ToDouble(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim());
                                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim(), out grade_points);
                                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim(), out Marks);
                                                        if (max_total > 0)
                                                        {
                                                            grade_points = grade_points / max_total * 10;
                                                            Marks = Marks / max_total * 100;
                                                        }
                                                        else
                                                        {
                                                            grade_points = grade_points / 10;
                                                            //Marks = Marks / 100 * 100;
                                                        }
                                                        grade_points = Math.Round(grade_points, 1, MidpointRounding.AwayFromZero);
                                                        Marks = Math.Round(Marks, 0, MidpointRounding.AwayFromZero);
                                                        //Credit_Points = Convert.ToDouble(Convert.ToString(dtPart1.Rows[sum]["credit_points"]).Trim());
                                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["credit_points"]).Trim(), out Credit_Points);
                                                        creditstotal = creditstotal + Credit_Points;
                                                        partwpmsum += (Credit_Points * Marks);
                                                        partsums = partsums + (grade_points * Credit_Points);
                                                    }
                                                }
                                            }
                                        }
                                        if (creditstotal == 0)
                                        {
                                            sumpart = "---";
                                            wpm = "---";
                                        }
                                        else if (creditstotal > 0)
                                        {
                                            partsums = (partsums / creditstotal);
                                            partsums = Math.Round(partsums, 1, MidpointRounding.AwayFromZero);
                                            partwpmsum = (partwpmsum / creditstotal);
                                            partwpmsum = Math.Round(partwpmsum, 0, MidpointRounding.AwayFromZero);
                                            sumpart = String.Format("{0:0.0}", partsums);
                                            wpm = string.Format("{0:0}", partwpmsum);
                                        }
                                        else
                                        {
                                            sumpart = "---";
                                            wpm = "---";
                                        }
                                    }
                                    else if (partrowcount > 0)
                                    {
                                        sumpart = "---";
                                        wpm = "---";
                                    }
                                    else
                                    {
                                        sumpart = "---";
                                        wpm = "---";
                                    }
                                    if (sumpart != "---")
                                    {
                                        double sumpartgrade = 0;
                                        if (double.TryParse(sumpart, out sumpartgrade))
                                        {
                                            sumpartgrade = Convert.ToDouble(sumpart);
                                            // overalltotgrade = overalltotgrade + sumpartgrade;
                                        }
                                        else
                                        {
                                            sumpartgrade = 0;
                                        }
                                        table1forpagecoe.Cell(0, 1).SetContent(creditstotal);
                                        table1forpagecoe.Cell(0, 3).SetContent(sumpart);
                                        table1forpagecoe.Cell(0, 2).SetContent(wpm);
                                    }
                                    else
                                    {
                                        table1forpagecoe.Cell(0, 1).SetContent("---");
                                        table1forpagecoe.Cell(0, 3).SetContent("---");
                                        table1forpagecoe.Cell(0, 2).SetContent("---");
                                    }
                                }
                                else
                                {
                                    table1forpagecoe.Cell(0, 1).SetContent("---");
                                    table1forpagecoe.Cell(0, 2).SetContent("---");
                                    table1forpagecoe.Cell(0, 3).SetContent("---");
                                }
                                partsums = 0;
                                partrowcount = 0;
                                creditstotal = 0;
                                partwpmsum = 0;
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    string sumpart = string.Empty;
                                    string wpm = string.Empty;
                                    DataView dv_demand_data = new DataView();
                                    DataView dv_demand_datadummy = new DataView();
                                    printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='2' and semester='" + cur_sem + "'";
                                    dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                                    partrowcount = dv_demand_datadummy.Count;
                                    printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='2' and result='pass' and semester='" + cur_sem + "'";
                                    dtPart1 = printds_rows.Tables[0].DefaultView.ToTable();
                                    if (pglevel == false)
                                    {
                                        table1forpagecoe.Cell(1, 1).SetCellPadding(5);
                                        table1forpagecoe.Cell(1, 2).SetCellPadding(5);
                                        table1forpagecoe.Cell(1, 3).SetCellPadding(5);
                                    }
                                    else
                                    {
                                        table1forpagecoe.Cell(0, 5).SetCellPadding(7);
                                        table1forpagecoe.Cell(0, 6).SetCellPadding(7);
                                        table1forpagecoe.Cell(0, 7).SetCellPadding(7);
                                    }
                                    if (dtPart1.Rows.Count > 0 && partrowcount == dtPart1.Rows.Count)
                                    {
                                        for (int sum = 0; sum < dtPart1.Rows.Count; sum++)
                                        {
                                            //double checkmarkmm = Convert.ToDouble(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim());
                                            //double checkmarkmm = 0;
                                            //double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out checkmarkmm);
                                            double checkmarkmm = 0;
                                            double getval = 0;
                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim(), out getval);
                                            // checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                            double max_total = 0;
                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["maxtotal"]).Trim(), out max_total);
                                            //double getval = checkmarkmm;
                                            checkmarkmm = Math.Round(getval, 1, MidpointRounding.AwayFromZero);
                                            if (max_total != 0 && max_total != 100)
                                            {
                                                checkmarkmm = getval / max_total * 100;
                                                checkmarkmm = Math.Round(checkmarkmm, 1, MidpointRounding.AwayFromZero);
                                            }
                                            checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                            string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + checkmarkmm + "' between frange and trange";//added by sridhar 16/aug 2014
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                            {
                                                gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "'  and '" + checkmarkmm + "' between frange and trange";//added by sridhar 
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            }
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                                {
                                                    if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                    {
                                                        //double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out grade_points);
                                                        //double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out Marks);
                                                        //grade_points = grade_points / 10;
                                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim(), out grade_points);
                                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim(), out Marks);
                                                        if (max_total != 0)
                                                        {
                                                            grade_points = grade_points / max_total * 10;
                                                            Marks = Marks / max_total * 100;
                                                        }
                                                        else
                                                        {
                                                            grade_points = grade_points / 10;
                                                            //Marks = Marks / 100 * 100;
                                                        }
                                                        grade_points = Math.Round(grade_points, 1, MidpointRounding.AwayFromZero);
                                                        Marks = Math.Round(Marks, 0, MidpointRounding.AwayFromZero);
                                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["credit_points"]).Trim(), out Credit_Points);
                                                        creditstotal = creditstotal + Credit_Points;
                                                        partwpmsum += (Credit_Points * Marks);
                                                        partsums = partsums + (grade_points * Credit_Points);
                                                    }
                                                }
                                            }
                                        }
                                        if (creditstotal == 0)
                                        {
                                            sumpart = "---";
                                            wpm = "---";
                                        }
                                        else if (creditstotal > 0)
                                        {
                                            partsums = (partsums / creditstotal);
                                            partsums = Math.Round(partsums, 1, MidpointRounding.AwayFromZero);
                                            partwpmsum = (partwpmsum / creditstotal);
                                            partwpmsum = Math.Round(partwpmsum, 0, MidpointRounding.AwayFromZero);
                                            sumpart = String.Format("{0:0.0}", partsums);
                                            wpm = string.Format("{0:0}", partwpmsum);
                                        }
                                        else
                                        {
                                            sumpart = "---";
                                            wpm = "---";
                                        }
                                    }
                                    else if (partrowcount > 0)
                                    {
                                        sumpart = "---";
                                        wpm = "---";
                                    }
                                    else
                                    {
                                        sumpart = "---";
                                        wpm = "---";
                                    }
                                    if (sumpart != "---")
                                    {
                                        double sumpartgrade = 0;
                                        if (double.TryParse(sumpart, out sumpartgrade))
                                        {
                                            sumpartgrade = Convert.ToDouble(sumpart);
                                            // overalltotgrade = overalltotgrade + sumpartgrade;
                                        }
                                        else
                                        {
                                            sumpartgrade = 0;
                                        }
                                        if (pglevel == false)
                                        {
                                            table1forpagecoe.Cell(1, 1).SetContent(creditstotal);
                                            table1forpagecoe.Cell(1, 3).SetContent(sumpart);
                                            table1forpagecoe.Cell(1, 2).SetContent(wpm);
                                        }
                                        else
                                        {
                                            if ((cur_sem >= max_sem1))
                                            {
                                                if (splcredit != 0)
                                                {
                                                    table1forpagecoe.Cell(0, 5).SetContent(creditstotal + splcredit);
                                                }
                                                else
                                                {
                                                    table1forpagecoe.Cell(0, 5).SetContent("---");
                                                    table1forpagecoe.Cell(0, 6).SetContent("---");
                                                    table1forpagecoe.Cell(0, 7).SetContent("---");
                                                }
                                                table1forpagecoe.Cell(0, 6).SetContent("---");
                                                table1forpagecoe.Cell(0, 7).SetContent("---");
                                            }
                                            //table1forpagecoe.Cell(0, 5).SetContent(creditstotal + splcredit);
                                            else
                                            {
                                                table1forpagecoe.Cell(0, 5).SetContent(creditstotal);
                                                table1forpagecoe.Cell(0, 7).SetContent(sumpart);
                                                table1forpagecoe.Cell(0, 6).SetContent(wpm);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        //table1forpagecoe.Cell(1, 1).SetContent(creditstotal);
                                        //table1forpagecoe.Cell(1, 3).SetContent(sumpart);
                                        //table1forpagecoe.Cell(1, 2).SetContent(wpm);
                                        if (pglevel == false)
                                        {
                                            table1forpagecoe.Cell(1, 1).SetContent("---");
                                            table1forpagecoe.Cell(1, 2).SetContent("---");
                                            table1forpagecoe.Cell(1, 3).SetContent("---");
                                        }
                                        else
                                        {
                                            if ((cur_sem >= max_sem1))
                                            {
                                                if (splcredit != 0)
                                                {
                                                    table1forpagecoe.Cell(0, 5).SetContent(creditstotal + splcredit);
                                                }
                                                else
                                                {
                                                    table1forpagecoe.Cell(0, 5).SetContent("---");
                                                }
                                            }
                                            else
                                            {
                                                table1forpagecoe.Cell(0, 5).SetContent("---");
                                            }
                                            table1forpagecoe.Cell(0, 6).SetContent("---");
                                            table1forpagecoe.Cell(0, 7).SetContent("---");
                                        }
                                    }
                                }
                                else
                                {
                                    if (pglevel == false)
                                    {
                                        table1forpagecoe.Cell(1, 1).SetContent("---");
                                        table1forpagecoe.Cell(1, 2).SetContent("---");
                                        table1forpagecoe.Cell(1, 3).SetContent("---");
                                    }
                                    else
                                    {
                                        table1forpagecoe.Cell(0, 5).SetContent("---");
                                        table1forpagecoe.Cell(0, 6).SetContent("---");
                                        table1forpagecoe.Cell(0, 7).SetContent("---");
                                    }
                                }
                                if (pglevel == false)
                                {
                                    partsums = 0;
                                    partrowcount = 0;
                                    creditstotal = 0;
                                    partwpmsum = 0;
                                    if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                    {
                                        string sumpart = string.Empty;
                                        string wpm = string.Empty;
                                        DataView dv_demand_data = new DataView();
                                        DataView dv_demand_datadummy = new DataView();
                                        printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='3' and semester='" + cur_sem + "'";
                                        dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                                        partrowcount = dv_demand_datadummy.Count;
                                        printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='3' and result='pass' and semester='" + cur_sem + "'";
                                        dtPart1 = printds_rows.Tables[0].DefaultView.ToTable();
                                        table1forpagecoe.Cell(0, 5).SetCellPadding(5);
                                        table1forpagecoe.Cell(0, 6).SetCellPadding(5);
                                        table1forpagecoe.Cell(0, 7).SetCellPadding(5);
                                        if (dtPart1.Rows.Count > 0 && partrowcount == dtPart1.Rows.Count)
                                        {
                                            for (int sum = 0; sum < dtPart1.Rows.Count; sum++)
                                            {
                                                //double checkmarkmm = Convert.ToDouble(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim());
                                                //double checkmarkmm = 0;
                                                //double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out checkmarkmm);
                                                double checkmarkmm = 0;
                                                double getval = 0;
                                                double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim(), out getval);
                                                // checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                                double max_total = 0;
                                                double.TryParse(Convert.ToString(dtPart1.Rows[sum]["maxtotal"]).Trim(), out max_total);
                                                //double getval = checkmarkmm;
                                                checkmarkmm = Math.Round(getval, 1, MidpointRounding.AwayFromZero);
                                                if (max_total != 0 && max_total != 100)
                                                {
                                                    checkmarkmm = getval / max_total * 100;
                                                    checkmarkmm = Math.Round(checkmarkmm, 1, MidpointRounding.AwayFromZero);
                                                }
                                                checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                                string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + checkmarkmm + "' between frange and trange";//added by sridhar 16/aug 2014
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                                {
                                                    gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "'  and '" + checkmarkmm + "' between frange and trange";//added by sridhar 
                                                    gradeds.Clear();
                                                    gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                                }
                                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                                {
                                                    for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                                    {
                                                        if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                        {
                                                            //double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out grade_points);
                                                            //double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out Marks);
                                                            //grade_points = grade_points / 10;
                                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim(), out grade_points);
                                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim(), out Marks);
                                                            if (max_total != 0)
                                                            {
                                                                grade_points = grade_points / max_total * 10;
                                                                Marks = Marks / max_total * 100;
                                                            }
                                                            else
                                                            {
                                                                grade_points = grade_points / 10;
                                                                //Marks = Marks / 100 * 100;
                                                            }
                                                            grade_points = Math.Round(grade_points, 1, MidpointRounding.AwayFromZero);
                                                            Marks = Math.Round(Marks, 0, MidpointRounding.AwayFromZero);
                                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["credit_points"]).Trim(), out Credit_Points);
                                                            creditstotal = creditstotal + Credit_Points;
                                                            partwpmsum += (Credit_Points * Marks);
                                                            partsums = partsums + (grade_points * Credit_Points);
                                                        }
                                                    }
                                                }
                                            }
                                            if (creditstotal == 0)
                                            {
                                                sumpart = "---";
                                                wpm = "---";
                                            }
                                            else if (creditstotal > 0)
                                            {
                                                partsums = (partsums / creditstotal);
                                                partsums = Math.Round(partsums, 1, MidpointRounding.AwayFromZero);
                                                partwpmsum = (partwpmsum / creditstotal);
                                                partwpmsum = Math.Round(partwpmsum, 0, MidpointRounding.AwayFromZero);
                                                sumpart = String.Format("{0:0.0}", partsums);
                                                wpm = string.Format("{0:0}", partwpmsum);
                                            }
                                            else
                                            {
                                                sumpart = "---";
                                                wpm = "---";
                                            }
                                        }
                                        else if (partrowcount > 0)
                                        {
                                            sumpart = "---";
                                            wpm = "---";
                                        }
                                        else
                                        {
                                            sumpart = "---";
                                            wpm = "---";
                                        }
                                        if (sumpart != "---")
                                        {
                                            double sumpartgrade = 0;
                                            if (double.TryParse(sumpart, out sumpartgrade))
                                            {
                                                sumpartgrade = Convert.ToDouble(sumpart);
                                                // overalltotgrade = overalltotgrade + sumpartgrade;
                                            }
                                            else
                                            {
                                                sumpartgrade = 0;
                                            }
                                            if (pglevel == false)
                                            {
                                                table1forpagecoe.Cell(0, 5).SetContent(creditstotal);
                                                table1forpagecoe.Cell(0, 7).SetContent(sumpart);
                                                table1forpagecoe.Cell(0, 6).SetContent(wpm);
                                            }
                                            else
                                            {
                                                table1forpagecoe.Cell(0, 1).SetContent(creditstotal);
                                                table1forpagecoe.Cell(0, 3).SetContent(sumpart);
                                                table1forpagecoe.Cell(0, 2).SetContent(wpm);
                                            }
                                        }
                                        else
                                        {
                                            //table1forpagecoe.Cell(0, 5).SetContent(creditstotal);
                                            //table1forpagecoe.Cell(0, 7).SetContent(sumpart);
                                            //table1forpagecoe.Cell(0, 6).SetContent(wpm);
                                            if (pglevel == false)
                                            {
                                                table1forpagecoe.Cell(0, 5).SetContent("---");
                                                table1forpagecoe.Cell(0, 6).SetContent("---");
                                                table1forpagecoe.Cell(0, 7).SetContent("---");
                                            }
                                            else
                                            {
                                                table1forpagecoe.Cell(0, 1).SetContent("---");
                                                table1forpagecoe.Cell(0, 2).SetContent("---");
                                                table1forpagecoe.Cell(0, 3).SetContent("---");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (pglevel == false)
                                        {
                                            table1forpagecoe.Cell(0, 5).SetContent("---");
                                            table1forpagecoe.Cell(0, 6).SetContent("---");
                                            table1forpagecoe.Cell(0, 7).SetContent("---");
                                        }
                                        else
                                        {
                                            table1forpagecoe.Cell(0, 1).SetContent("---");
                                            table1forpagecoe.Cell(0, 2).SetContent("---");
                                            table1forpagecoe.Cell(0, 3).SetContent("---");
                                        }
                                    }
                                    partsums = 0;
                                    partrowcount = 0;
                                    creditstotal = 0;
                                    partwpmsum = 0;
                                    if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                    {
                                        string sumpart = string.Empty;
                                        string wpm = string.Empty;
                                        DataView dv_demand_data = new DataView();
                                        DataView dv_demand_datadummy = new DataView();
                                        int part = 4;
                                        if (pglevel == false)
                                        {
                                            part = 4;
                                            table1forpagecoe.Cell(1, 5).SetCellPadding(5);
                                            table1forpagecoe.Cell(1, 6).SetCellPadding(5);
                                            table1forpagecoe.Cell(1, 7).SetCellPadding(5);
                                        }
                                        else
                                        {
                                            part = 2;
                                        }
                                        printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='" + part + "' and semester='" + cur_sem + "'";
                                        dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                                        partrowcount = dv_demand_datadummy.Count;
                                        printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='" + part + "' and result='pass' and semester='" + cur_sem + "'";
                                        dtPart1 = printds_rows.Tables[0].DefaultView.ToTable();
                                        if (dtPart1.Rows.Count > 0 && partrowcount == dtPart1.Rows.Count)
                                        {
                                            for (int sum = 0; sum < dtPart1.Rows.Count; sum++)
                                            {
                                                //double checkmarkmm = Convert.ToDouble(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim());
                                                //double checkmarkmm = 0;
                                                //double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out checkmarkmm);
                                                double checkmarkmm = 0;
                                                double getval = 0;
                                                double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim(), out getval);
                                                // checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                                double max_total = 0;
                                                double.TryParse(Convert.ToString(dtPart1.Rows[sum]["maxtotal"]).Trim(), out max_total);
                                                //double getval = checkmarkmm;
                                                checkmarkmm = Math.Round(getval, 1, MidpointRounding.AwayFromZero);
                                                if (max_total != 0 && max_total != 100)
                                                {
                                                    checkmarkmm = getval / max_total * 100;
                                                    checkmarkmm = Math.Round(checkmarkmm, 1, MidpointRounding.AwayFromZero);
                                                }
                                                checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                                string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + checkmarkmm + "' between frange and trange";//added by sridhar 16/aug 2014
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                                {
                                                    gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "'  and '" + checkmarkmm + "' between frange and trange";//added by sridhar 
                                                    gradeds.Clear();
                                                    gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                                }
                                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                                {
                                                    for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                                    {
                                                        if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                        {
                                                            //grade_points = Convert.ToDouble(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim());
                                                            //double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out grade_points);
                                                            //double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out Marks);
                                                            //grade_points = grade_points / 10;
                                                            //Credit_Points = Convert.ToDouble(Convert.ToString(dtPart1.Rows[sum]["credit_points"]).Trim());
                                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim(), out grade_points);
                                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim(), out Marks);
                                                            if (max_total != 0)
                                                            {
                                                                grade_points = grade_points / max_total * 10;
                                                                Marks = Marks / max_total * 100;
                                                            }
                                                            else
                                                            {
                                                                grade_points = grade_points / 10;
                                                                //Marks = Marks / 100 * 100;
                                                            }
                                                            grade_points = Math.Round(grade_points, 1, MidpointRounding.AwayFromZero);
                                                            Marks = Math.Round(Marks, 0, MidpointRounding.AwayFromZero);
                                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["credit_points"]).Trim(), out Credit_Points);
                                                            creditstotal = creditstotal + Credit_Points;
                                                            partwpmsum += (Credit_Points * Marks);
                                                            partsums = partsums + (grade_points * Credit_Points);
                                                        }
                                                    }
                                                }
                                            }
                                            if (creditstotal == 0)
                                            {
                                                sumpart = "---";
                                                wpm = "---";
                                            }
                                            else if (creditstotal > 0)
                                            {
                                                partsums = (partsums / creditstotal);
                                                partsums = Math.Round(partsums, 1, MidpointRounding.AwayFromZero);
                                                partwpmsum = (partwpmsum / creditstotal);
                                                partwpmsum = Math.Round(partwpmsum, 0, MidpointRounding.AwayFromZero);
                                                sumpart = String.Format("{0:0.0}", partsums);
                                                wpm = string.Format("{0:0}", partwpmsum);
                                            }
                                            else
                                            {
                                                sumpart = "---";
                                                wpm = "---";
                                            }
                                        }
                                        else if (partrowcount > 0)
                                        {
                                            sumpart = "---";
                                            wpm = "---";
                                        }
                                        else
                                        {
                                            sumpart = "---";
                                            wpm = "---";
                                        }
                                        if (sumpart != "---")
                                        {
                                            double sumpartgrade = 0;
                                            if (double.TryParse(sumpart, out sumpartgrade))
                                            {
                                                sumpartgrade = Convert.ToDouble(sumpart);
                                                // overalltotgrade = overalltotgrade + sumpartgrade;
                                            }
                                            else
                                            {
                                                sumpartgrade = 0;
                                            }
                                            if (pglevel == false)
                                            {
                                                table1forpagecoe.Cell(1, 5).SetContent(creditstotal);
                                                table1forpagecoe.Cell(1, 7).SetContent(sumpart);
                                                table1forpagecoe.Cell(1, 6).SetContent(wpm);
                                            }
                                            else
                                            {
                                                if ((cur_sem >= max_sem1))
                                                {
                                                    if (splcredit != 0)
                                                    {
                                                        table1forpagecoe.Cell(0, 5).SetContent(creditstotal + splcredit);
                                                    }
                                                    else
                                                    {
                                                        table1forpagecoe.Cell(0, 5).SetContent("---");
                                                        table1forpagecoe.Cell(0, 6).SetContent("---");
                                                        table1forpagecoe.Cell(0, 7).SetContent("---");
                                                    }
                                                    table1forpagecoe.Cell(0, 6).SetContent("---");
                                                    table1forpagecoe.Cell(0, 7).SetContent("---");
                                                }
                                                //table1forpagecoe.Cell(0, 5).SetContent(creditstotal + splcredit);
                                                else
                                                {
                                                    table1forpagecoe.Cell(0, 5).SetContent(creditstotal);
                                                    table1forpagecoe.Cell(0, 7).SetContent(sumpart);
                                                    table1forpagecoe.Cell(0, 6).SetContent(wpm);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //table1forpagecoe.Cell(1, 5).SetContent(creditstotal);
                                            //table1forpagecoe.Cell(1, 7).SetContent(sumpart);
                                            //table1forpagecoe.Cell(1, 6).SetContent(wpm);
                                            if (pglevel == false)
                                            {
                                                table1forpagecoe.Cell(1, 5).SetContent("---");
                                                table1forpagecoe.Cell(1, 6).SetContent("---");
                                                table1forpagecoe.Cell(1, 7).SetContent("---");
                                            }
                                            else
                                            {
                                                if ((cur_sem >= max_sem1))
                                                {
                                                    if (splcredit != 0)
                                                    {
                                                        table1forpagecoe.Cell(0, 5).SetContent(creditstotal + splcredit);
                                                    }
                                                    else
                                                    {
                                                        table1forpagecoe.Cell(0, 5).SetContent("---");
                                                    }
                                                }
                                                else
                                                {
                                                    table1forpagecoe.Cell(0, 5).SetContent("---");
                                                }
                                                table1forpagecoe.Cell(0, 6).SetContent("---");
                                                table1forpagecoe.Cell(0, 7).SetContent("---");
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (pglevel == false)
                                        {
                                            table1forpagecoe.Cell(1, 5).SetContent("---");
                                            table1forpagecoe.Cell(1, 6).SetContent("---");
                                            table1forpagecoe.Cell(1, 7).SetContent("---");
                                        }
                                        else
                                        {
                                            table1forpagecoe.Cell(0, 5).SetContent("---");
                                            table1forpagecoe.Cell(0, 6).SetContent("---");
                                            table1forpagecoe.Cell(0, 7).SetContent("---");
                                        }
                                    }
                                }
                                if (pglevel == false)
                                {
                                    PdfTablePage newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 27, 669, 665, 120));//392
                                    mypdfpage.Add(newpdftabpagecoe);
                                }
                                else
                                {
                                    PdfTablePage newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 27, 674, 665, 120));//392
                                    mypdfpage.Add(newpdftabpagecoe);
                                }
                                pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 72, 828, 100, 25), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString(txtdoi.Text).Trim());
                                mypdfpage.Add(pdfdoi);
                                //table1forpagecoe = mydoc.NewTable(Fontarial9, 1, 1, 1);
                                //table1forpagecoe.VisibleHeaders = false;
                                //table1forpagecoe.SetBorders(Color.Black, 1, BorderType.None);
                                //table1forpagecoe.SetColumnsWidth(new int[] { 100 });
                                //table1forpagecoe.Cell(0, 0).SetContent(coe);
                                //newpdftabpagecoe = table1forpagecoe.CreateTablePage(new PdfArea(mydoc, 500, 770, 250, 60));//392
                                //mypdfpage.Add(newpdftabpagecoe);
                            }
                            mypdfpage.SaveToDocument();
                        }
                    }
                }
            }
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
            }
        }
        catch (Exception ex)
        {
        }
    }

    //FOR MCC,COMPLETED @ 17.03.2016
    #region Common Format

    public void ugconsolidatedGrade_Mark()
    {
        try
        {
            DataSet printds = new DataSet();
            string lblerror1 = string.Empty;
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            //578
            string max_sem = string.Empty;
            int maxSem = 0;
            Boolean printpage = false;
            string edu_level = string.Empty;
            string degree = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string roman = string.Empty;
            string semroman = string.Empty;
            string grade = string.Empty;
            string gradepoints = string.Empty;
            string coe = string.Empty;
            string subjectcode_Part1 = string.Empty;
            string subjectcode_Part2 = string.Empty;
            string subjectcode_Part3 = string.Empty;
            string subjectcode_Part4 = string.Empty;
            string cal_gpa = string.Empty;
            string current_semester = string.Empty;
            string app_no = string.Empty;
            string subtype = string.Empty;
            string admid_date = string.Empty;
            string additionalmsg = string.Empty;
            bool onlyca = false;
            bool onlyes = false;
            DataSet gradeds = new DataSet();
            DataSet dsSpl = new DataSet();
            DataTable dtStar = new DataTable();
            double ugpgminpass = 0;
            Font fontdegreename = new Font("Times New Roman", 14, FontStyle.Bold);
            Font fontStudDetails = new Font("Times New Roman", 11, FontStyle.Bold);
            Font fontStmtMarks = new Font("Times New Roman", 11, FontStyle.Regular);
            Font fontcgpa = new Font("Times New Roman", 11, FontStyle.Regular);
            Font fontDate = new Font("Times New Roman", 11, FontStyle.Regular);
            Font f1_cos10bold = new Font("Times New Roman", 10, FontStyle.Bold);
            Font f2_cos9bold = new Font("Comic Sans MS", 9, FontStyle.Bold);
            Font f3_arial10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font f4_arial7reg = new Font("Arial", 7, FontStyle.Regular);
            Font f5_pal10bold = new Font("Palatino Linotype", 10, FontStyle.Bold);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(25.5, 35.6));
            PdfPage mypdfpage;
            FpSpread2.SaveChanges();
            int selectedcount = 0;
            bool needDuplicate = false;
            string duplicateNumber = string.Empty;
            for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
            {
                int isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                if (isval == 1)
                {
                    selectedcount++;
                }
            }
            if (ddlreporttype.SelectedItem.Value == "5" || ddlreporttype.SelectedItem.Value == "8")
            {
                if (divDuplicate.Visible == true && chkDuplicateMarksheet.Checked && txtDuplicateNumber.Enabled)
                {
                    if (string.IsNullOrEmpty(txtDuplicateNumber.Text.Trim()))
                    {
                        //lbl_popuperr.Text = "Please Enter Duplicate Marksheet Number And Then Proceed";
                        //errdiv.Visible = true;
                        //return;
                        needDuplicate = false;
                    }
                    else if (selectedcount > 1)
                    {
                        //lbl_popuperr.Text = "Please Select Only One Student To Take Duplicate Marksheet";
                        //errdiv.Visible = true;
                        //return;
                        needDuplicate = false;
                    }
                    else
                    {
                        duplicateNumber = txtDuplicateNumber.Text.Trim();
                        needDuplicate = true;
                    }
                }
            }
            for (int res = 1; res < Convert.ToInt32(FpSpread2.Sheets[0].RowCount); res++)
            {
                int isval = 0;
                int additonalstatus = 0;
                onlyca = false;
                onlyes = false;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                additionalmsg = string.Empty;
                int splcredit = 0;
                if (isval == 1)
                {
                    ugpgminpass = 0;
                    printds.Clear();
                    printds.Dispose();
                    printds_new.Clear();
                    printds_new.Dispose();
                    string grade_set = string.Empty;
                    rollnosub = Convert.ToString(FpSpread2.Sheets[0].Cells[res, 1].Text).Trim();
                    regnumber = Convert.ToString(FpSpread2.Sheets[0].Cells[res, 2].Text).Trim();
                    int setng_ovrtotalcreadits = 0;
                    int setng_mintotalcreadits = 0;
                    int totalcreitdsened = 0;
                    int noofsubapplied = 0;
                    int noofsubpassed = 0;
                    int noofsubfailed = 0;
                    int Totalfailcount = 0;
                    int tot_credits = 0;
                    int Tot_credit_settings = 0;
                    DataSet DsExamYear = new DataSet();
                    string QuaeryExamYear = " Select distinct ed.Exam_Year,ed.exam_month,sm.semester  from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc,Exam_Details ed where sm.syll_code=ss.syll_code and ss.syll_code=s.syll_code and sm.syll_code=s.syll_code and sc.subject_no=s.subject_no and sc.subject_no=m.subject_no and sc.roll_no=m.roll_no and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and ed.exam_code=m.exam_code and ed.Batch_year=sm.batch_year and sm.degree_code=ed.degree_code and  result='pass'  and m.roll_no='" + rollnosub + "' order by ed.Exam_Year asc,ed.exam_month asc";
                    DsExamYear = d2.select_method_wo_parameter(QuaeryExamYear, "Text");



                    string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 105) as dob,c.edu_level,CONVERT(VARCHAR(11),R.Adm_Date,106) as ADM_DATE FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'; select * from exam_details ; ";
                    //sql = sql + "  select count(distinct s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
                    //sql = sql + " select count(distinct s.subject_no) as total from subjectchooser sc,syllabus_master sm,subject s,registration r where sm.syll_code=s.syll_code and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
                    //sql = sql + ";   Select count(distinct subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'; ";
                    //sql = sql + "   Select count(distinct subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail'  and roll_no='" + rollnosub + "'; select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass');  ";
                    sql += " select count(distinct s.subject_no) as total from subjectchooser sc,syllabus_master sm,subject s,registration r where sm.syll_code=s.syll_code and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'; ";
                    sql += " Select count(distinct s.subject_no) as total from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectchooser sc where sm.syll_code=s.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and ss.syll_code=s.syll_code and ss.syll_code=sm.syll_code and s.subject_no=sc.subject_no and sc.subject_no=m.subject_no and sc.roll_no=m.roll_no and  m.result='pass'  and m.roll_no='" + rollnosub + "';";
                    sql += " Select count(distinct s.subject_no) as total from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectchooser sc where sm.syll_code=s.syll_code and sm.syll_code=ss.syll_code and s.syll_code=ss.syll_code and sc.roll_no=m.roll_no and sc.subject_no=s.subject_no and sc.subject_no=m.subject_no and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='fail'  and m.roll_no='" + rollnosub + "'; ";
                    sql += " select distinct m.subject_no from mark_entry m,subjectChooser sc,subject s,syllabus_master sm where m.roll_no=sc.roll_no and s.syll_code=sm.syll_code and s.subject_no=sc.subject_no and s.subject_no=m.subject_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc,syllabus_master sm,subject s where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and sm.syll_code=s.syll_code and s.subject_no=m.subject_no and s.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass');";
                    sql += " select distinct COUNT(teq.Equal_Subject_Code),teq.Com_Subject_Code from  subjectchooser sc,subject s,registration r , tbl_equal_paper_Matching teq   where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no   and r.roll_no='" + rollnosub + "'  and teq.Equal_Subject_Code=s.subject_code group by teq.Com_Subject_Code having COUNT(teq.Equal_Subject_Code)>1; Select sum(credit_points) from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'";
                    sql = sql + "     Select distinct  subject.subject_no, subject_name, subject_code from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail'  and roll_no='" + rollnosub + "'  and SUBSTRING(subject_code,7,1)!='M'    and  subject.subject_no not in (Select subject.subject_no from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'   and roll_no='" + rollnosub + "')";
                    sql = sql + "     Select distinct  subject.subject_no, subject_name, subject_code from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail'  and roll_no='" + rollnosub + "'    and SUBSTRING(subject_code,7,1)='M'    and  subject.subject_no not in (Select subject.subject_no from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'   and roll_no='" + rollnosub + "')";
                    sql = sql + "  SELECT STUFF((SELECT distinct ''',''' + convert(nvarchar(max),[subject_code])  FROM subject sy   where  subject_name='Computer training'   FOR XML PATH('')),1,1,'''') as [Roll_No]";

                    string qry = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 105) as dob,c.edu_level,CONVERT(VARCHAR(11),R.Adm_Date,106) as ADM_DATE FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'; ";

                    qry += " select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';";
                    qry += " select * from exam_details ed,Registration r where ed.batch_year=r.Batch_Year and ed.degree_code=r.degree_code and r.Roll_No='" + rollnosub + "' order by exam_code; ";
                    qry += " select count(distinct s.subject_no) as total from subjectchooser sc,syllabus_master sm,subject s,registration r where sm.syll_code=s.syll_code and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'; ";
                    qry += " Select count(distinct s.subject_no) as total from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectchooser sc where sm.syll_code=s.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and ss.syll_code=s.syll_code and ss.syll_code=sm.syll_code and s.subject_no=sc.subject_no and sc.subject_no=m.subject_no and sc.roll_no=m.roll_no and  m.result='pass'  and m.roll_no='" + rollnosub + "';";

                    qry += " Select count(distinct s.subject_no) as total from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectchooser sc where sm.syll_code=s.syll_code and sm.syll_code=ss.syll_code and s.syll_code=ss.syll_code and sc.roll_no=m.roll_no and sc.subject_no=s.subject_no and sc.subject_no=m.subject_no and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  (m.result='fail' or m.passorfail=0)  and m.roll_no='" + rollnosub + "';  ";

                    qry += " select distinct m.subject_no from mark_entry m,subjectChooser sc,subject s,syllabus_master sm where m.roll_no=sc.roll_no and s.syll_code=sm.syll_code and s.subject_no=sc.subject_no and s.subject_no=m.subject_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc,syllabus_master sm,subject s where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and sm.syll_code=s.syll_code and s.subject_no=m.subject_no and s.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass'); ";
                    qry += " select distinct COUNT(teq.Equal_Subject_Code),teq.Com_Subject_Code from  subjectchooser sc,subject s,registration r , tbl_equal_paper_Matching teq,syllabus_master sm where sc.roll_no=r.roll_no and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and sm.syll_code=s.syll_code  and s.subject_no=sc.subject_no   and r.roll_no='" + rollnosub + "'  and teq.Equal_Subject_Code=s.subject_code group by teq.Com_Subject_Code having COUNT(teq.Equal_Subject_Code)>1;";
                    qry += " Select sum(credit_points) from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and s.syll_code=ss.syll_code and ss.syll_code=sm.syll_code and s.subject_no=sc.subject_no and sc.roll_no=m.roll_no and sc.subject_no=m.subject_no and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='pass'  and m.roll_no='" + rollnosub + "'";
                    qry += " Select distinct  s.subject_no,subject_name, subject_code from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and s.syll_code=ss.syll_code and sm.syll_code=ss.syll_code and sc.subject_no=m.subject_no and sc.subject_no=s.subject_no and sc.roll_no=m.roll_no and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='fail'  and m.roll_no='" + rollnosub + "'  and SUBSTRING(s.subject_code,7,1)!='M'    and  s.subject_no not in (Select s.subject_no from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and sm.syll_code=ss.syll_code and ss.syll_code=s.syll_code and sc.roll_no=m.roll_no and sc.subject_no=m.subject_no and sc.subject_no=s.subject_no and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='pass' and m.roll_no='" + rollnosub + "')  ";
                    qry += " Select distinct  s.subject_no, subject_name, subject_code from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and s.syll_code=ss.syll_code and sm.syll_code=ss.syll_code and sc.subject_no=s.subject_no and sc.subject_no=m.subject_no and sc.roll_no=m.roll_no and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='fail' and m.roll_no='" + rollnosub + "' and SUBSTRING(subject_code,7,1)='M'    and  s.subject_no not in (Select s.subject_no from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and sc.subject_no=s.subject_no and sc.subject_no =m.subject_no and sc.roll_no=m.roll_no and sm.syll_code=ss.syll_code and ss.syll_code=s.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='pass' and m.roll_no='" + rollnosub + "') ";
                    qry += " SELECT STUFF((SELECT distinct ''',''' + convert(nvarchar(max),[subject_code]) FROM subject sy,syllabus_master sm,Registration r,subjectChooser sc where sm.syll_code=sy.syll_code and sy.subject_no=sc.subject_no and sc.roll_no=r.Roll_No and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and subject_name='Computer training' FOR XML PATH('')),1,1,'''') as [Roll_No] ; ";
                    printds = da.select_method_wo_parameter(qry, "Text");
                    if (printds.Tables.Count > 0)
                    {
                        noofsubapplied = Convert.ToInt32(Convert.ToString(printds.Tables[3].Rows[0][0]).Trim());
                        //noofsubapplied = noofsubapplied - Convert.ToInt32(printds.Tables[7].Rows.Count);
                        noofsubpassed = Convert.ToInt32(Convert.ToString(printds.Tables[4].Rows[0][0]).Trim());
                        noofsubfailed = Convert.ToInt32(Convert.ToString(printds.Tables[5].Rows[0][0]).Trim());
                        Totalfailcount = printds.Tables[6].Rows.Count;
                        int.TryParse(Convert.ToString(printds.Tables[8].Rows[0][0]).Trim(), out tot_credits);
                    }
                    //if (edu_level.Trim().ToLower() == "ug" && noofsubpassed != noofsubapplied)
                    //{
                    //    int subjectmissed = noofsubapplied - noofsubpassed;
                    //    if (subjectmissed <= 2)
                    //    {
                    //        noofsubpassed = noofsubapplied;
                    //    }
                    //}
                    int chkCredififf = 0;
                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                    {
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim();
                        edu_level = Convert.ToString(printds.Tables[0].Rows[0]["edu_level"]).Trim();
                        app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]).Trim();
                        mypdfpage = mydoc.NewPage();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        coe = Convert.ToString(printds.Tables[1].Rows[0]["coe"]).Trim();
                        admid_date = Convert.ToString(printds.Tables[0].Rows[0]["ADM_DATE"]).Trim();
                        if (CbCommonCredits.Checked == true)
                        {
                            int.TryParse((da.GetFunctionv("select isnull(totalcredits,0) from coe_ovrl_credits_Dts where degree_code='" + degree_code + "' and isCommon='0'")), out setng_ovrtotalcreadits);
                            int.TryParse((da.GetFunctionv("select isnull(minimcredits,0) from coe_ovrl_credits_Dts where degree_code='" + degree_code + "' and isCommon='0'")), out setng_mintotalcreadits);
                        }
                        else if (CbCommonCredits.Checked == false)
                        {
                            int.TryParse((da.GetFunctionv("select isnull(totalcredits,0) from coe_ovrl_credits_Dts where degree_code='" + degree_code + "' and isCommon='1' and batchYear='" + ddlbatch.SelectedItem.Text + "'")), out setng_ovrtotalcreadits);
                            int.TryParse((da.GetFunctionv("select isnull(minimcredits,0) from coe_ovrl_credits_Dts where degree_code='" + degree_code + "' and isCommon='1' and batchYear='" + ddlbatch.SelectedItem.Text + "'")), out setng_mintotalcreadits);
                        }
                        max_sem = d2.GetFunctionv("select max(NDurations) asNDurations from ndegree where batch_year='" + batch_year + "'  and Degree_code='" + degree_code + "'");


                        chkCredififf = setng_ovrtotalcreadits - setng_mintotalcreadits;
                        if (chkCredififf > 0)
                            chkCredififf = chkCredififf / 5;

                        if (max_sem == "" || max_sem == null)
                        {
                            max_sem = d2.GetFunctionv("SELECT Max(Duration) as Duration FROM Degree where  Degree_Code='" + degree_code + "'");
                        }
                        int.TryParse(max_sem, out maxSem);
                        int newbatch = 0;
                        int.TryParse(batch_year, out newbatch);
                        DateTime dt = new DateTime();
                        int cur_year = DateTime.Now.Year;
                        int diff = newbatch + (maxSem / 2);
                        if (cur_year >= diff)
                        {
                        }
                        else
                        {
                            lbl_popuperr.Text = "The Consolidated is Generated Only For Passed Out Students.";
                            errdiv.Visible = true;
                            return;
                        }
                    }
                    if (edu_level.Trim().ToLower() == "ug" && noofsubpassed > 0 && noofsubapplied > 0 && noofsubpassed != noofsubapplied)
                    {
                        string comcode = string.Empty;
                        DataSet dspassorfail = new DataSet();
                        DataView dvcomptraing = new DataView();
                        DataView dvcomsubject = new DataView();
                        int comsubjectcount = 0;
                        DataSet dssequalpaers = new DataSet();
                        ArrayList comsubjects = new ArrayList();
                        for (int isub = 0; isub < printds.Tables[9].Rows.Count; isub++)
                        {
                            string commsubjectpaper1 = da.GetFunctionv("select Com_Subject_Code from tbl_equal_paper_Matching where Equal_Subject_Code='" + Convert.ToString(printds.Tables[9].Rows[isub][2]).Trim() + "' ");
                            sql = "  select * from tbl_equal_paper_Matching where  Com_Subject_Code  in ('" + commsubjectpaper1 + "') ";
                            dssequalpaers.Clear();
                            dssequalpaers = da.select_method_wo_parameter(sql, "Text");
                            if (dssequalpaers.Tables.Count > 0 && dssequalpaers.Tables[0].Rows.Count > 0)
                            {
                                for (int eqlpap = 0; eqlpap < dssequalpaers.Tables[0].Rows.Count; eqlpap++)
                                {
                                    string syllcode = da.GetFunctionv("select syll_code from subject where subject_no='" + Convert.ToString(printds.Tables[9].Rows[isub][0]).Trim() + "'");
                                    string equlpapersubjectno = da.GetFunctionv("select subject_no from subject where syll_code='" + syllcode + "' and  subject_code='" + Convert.ToString(dssequalpaers.Tables[0].Rows[eqlpap]["Equal_Subject_Code"]).Trim() + "'  ");
                                    if (equlpapersubjectno.Trim() != "" && equlpapersubjectno.Trim() != "0")
                                    {
                                        dspassorfail.Clear();
                                        dspassorfail = da.select_method_wo_parameter(" select * from mark_entry where subject_no='" + equlpapersubjectno + "' and  result='pass' and roll_no='" + rollnosub + "'  ", "Text");
                                        if (dspassorfail.Tables.Count > 0 && dspassorfail.Tables[0].Rows.Count > 0)
                                        {
                                            if (!comsubjects.Contains(commsubjectpaper1))
                                            {
                                                comsubjectcount++;
                                                comsubjects.Add(commsubjectpaper1);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        string computersubjectcode = Convert.ToString(printds.Tables[11].Rows[0][0]).Trim();
                        if (computersubjectcode != "")
                        {
                            computersubjectcode = computersubjectcode.Remove(0, 2);
                            computersubjectcode = computersubjectcode + "'";
                        }
                        printds.Tables[10].DefaultView.RowFilter = "subject_code in (" + computersubjectcode + ")";
                        dvcomptraing = printds.Tables[10].DefaultView;
                        int majorpaperscount = printds.Tables[10].Rows.Count;
                        int comcodecount = 0;
                        if (dvcomptraing.Count > 0)
                        {
                            majorpaperscount = printds.Tables[10].Rows.Count - dvcomptraing.Count;
                            comcodecount = comcodecount + 1;
                        }
                        comcodecount = Convert.ToInt32(printds.Tables[9].Rows.Count) - comsubjectcount;
                        int subjectmissed = noofsubapplied - noofsubpassed;
                        //command by rajkumar 
                        //if (printds.Tables[10].Rows.Count <= 2 && subjectmissed <= 2 && comcodecount == 0 && setng_ovrtotalcreadits != setng_mintotalcreadits)
                        if (printds.Tables[10].Rows.Count <= chkCredififf && subjectmissed <= chkCredififf && comcodecount == 0 && setng_ovrtotalcreadits != setng_mintotalcreadits)
                        {
                            noofsubpassed = noofsubapplied;
                        }
                    }
                    //if (printds.Tables[0].Rows.Count > 0 && noofsubpassed == noofsubapplied)
                    int tempval = noofsubapplied;
                    if (printds.Tables[0].Rows.Count > 0 && noofsubpassed > 0 && noofsubapplied > 0 && noofsubpassed == tempval) //Totalfailcount == 0)
                    {
                        PdfTable tblstudDetail;
                        PdfTextArea pdfdoi;
                        PdfImage LogoImage2;
                        PdfTablePage newpdftabpage2;
                        PdfTable fullmark;
                        PdfTextArea pdfDuplicateNo;
                        printpage = true;
                        string principal = string.Empty;
                        edu_level = Convert.ToString(printds.Tables[0].Rows[0]["edu_level"]).Trim();
                        app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]).Trim();
                        mypdfpage = mydoc.NewPage();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        coe = Convert.ToString(printds.Tables[1].Rows[0]["coe"]).Trim();
                        admid_date = Convert.ToString(printds.Tables[0].Rows[0]["ADM_DATE"]).Trim();
                        string[] adm_dt = admid_date.Split(' ');
                        if (adm_dt.Length > 0)
                        {
                            if (adm_dt.Length == 3)
                                admid_date = adm_dt[2] + " - JUN";//+ adm_dt[1]
                        }
                        //admid_date.ToString("yyyy-MMM");
                        //DateTime dt = new DateTime();
                        // //DateTime dt = new DateTime();
                        // //           exam_held = (dtsub.Rows.Count > 0) ? Convert.ToString(dtsub.Rows[0]["exam_date"]).Trim() : string.Empty;
                        // //           if (exam_held != "")
                        // //           {
                        // //               DateTime.TryParseExact(exam_held, "dd/MM/yyyy", null, DateTimeStyles.None, out dt);
                        ////           }M/dd/yyyy hh:mm:ss tt
                        //DateTime.TryParseExact(admid_date, "dd/MM/yyyy", null, DateTimeStyles.None, out dt);
                        //admid_date = dt.ToString("yyyy-MMM");
                        string[] spiltcoe = coe.Split(' ');
                        string newcoe = string.Empty;
                        for (int ce = 1; ce < spiltcoe.GetUpperBound(0); ce++)
                        {
                            string[] spiltcoe12 = spiltcoe[0].Split('.');
                            if (spiltcoe12.Length == 3)
                            {
                                newcoe = Convert.ToString(spiltcoe12[1]).Trim();
                                newcoe = newcoe + "." + Convert.ToString(spiltcoe12[2]).Trim();
                            }
                            if (newcoe == "")
                            {
                                newcoe = Convert.ToString(spiltcoe[ce]).Trim();
                            }
                            else
                            {
                                newcoe = newcoe + " " + Convert.ToString(spiltcoe[ce]).Trim();
                            }
                        }
                        coe = newcoe;
                        principal = Convert.ToString(printds.Tables[1].Rows[0]["principal"]).Trim();
                        string[] spiltprinci = principal.Split('.');
                        string newprinc = string.Empty;
                        for (int ce = 1; ce <= spiltprinci.GetUpperBound(0); ce++)
                        {
                            if (newprinc == "")
                            {
                                newprinc = Convert.ToString(spiltprinci[ce]).Trim();
                            }
                            else
                            {
                                newprinc = newprinc + "." + Convert.ToString(spiltprinci[ce]).Trim();
                            }
                        }
                        principal = newprinc.ToUpper();
                        // month = ddlMonth.SelectedIndex;
                        //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                        string strMonthName = string.Empty;
                        //monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        //monthandyear = monthandyear.ToUpper();
                        studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        branch = Convert.ToString(printds.Tables[0].Rows[0]["Dept_name"]).Trim();
                        dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]).Trim();
                        string stdappno = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim();
                        if (sem == "1")
                        {
                            semroman = "I";
                        }
                        else if (sem == "2")
                        {
                            semroman = "II";
                        }
                        else if (sem == "3")
                        {
                            semroman = "III";
                        }
                        else if (sem == "4")
                        {
                            semroman = "IV";
                        }
                        else if (sem == "5")
                        {
                            semroman = "V";
                        }
                        else if (sem == "6")
                        {
                            semroman = "VI";
                        }
                        else if (sem == "7")
                        {
                            semroman = "VII";
                        }
                        else if (sem == "8")
                        {
                            semroman = "VIII";
                        }
                        // x=248,y=70.8,W=80 ,H= 50
                        pdfdoi = new PdfTextArea(fontdegreename, System.Drawing.Color.Black, new PdfArea(mydoc, 227, 45, 100, 25), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString(degree));
                        mypdfpage.Add(pdfdoi);
                        //if (needDuplicate)
                        //{
                        //    pdfDuplicateNo = new PdfTextArea(fontdegreename, System.Drawing.Color.Black, new PdfArea(mydoc, mydoc.PageWidth - 270, 85, 250, 35), System.Drawing.ContentAlignment.MiddleRight, Convert.ToString(duplicateNumber));
                        //    mypdfpage.Add(pdfDuplicateNo);
                        //}
                        if (needDuplicate)
                        {
                            pdfDuplicateNo = new PdfTextArea(fontStudDetails, System.Drawing.Color.Black, new PdfArea(mydoc, 83, 25, 150, 200), System.Drawing.ContentAlignment.TopLeft, Convert.ToString("DUPLICATE OF NO\t:\t\t" + duplicateNumber + "\t\t\nDT\t:\t" + txtDuplicateDate.Text).Trim());
                            mypdfpage.Add(pdfDuplicateNo);
                        }
                        // sql3 = "Select syllabus_master.semester,Subject_Type,subject_name,subject_code,subject.subject_no,result,max_int_marks,max_ext_marks,internal_mark,external_mark,total,maxtotal,grade,cp,credit_points,mark_entry.subject_no,semester,maxtotal,exam_code,subject.Part_Type,sub_sem.priority,sub_sem.lab,subject.subjectpriority,SUBSTRING(subject_code,(LEN(subject_code)-2) ,1) as Prac_code from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "' order by syllabus_master.semester,isnull(subject.Part_Type,'3') asc,case when (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='F' and lab=0) then null when (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='M' and lab=0) then 'A' when (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='M' and lab=1) then 'B' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='A' and lab=0) then 'C' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='A' and lab=1) then 'D' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,0)='E' and lab=1) then 'E' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='E' and lab=1) then 'F' Else SUBSTRING(subject_code,(LEN(subject_code)-2) ,1) End asc,subject.subjectpriority,sub_sem.lab,subject_type desc,subject_code asc"; hide by sridhar
                        //sql3 = "Select syllabus_master.semester,Subject_Type,subject_name,subject_code,subject.subject_no,result,max_int_marks,max_ext_marks,internal_mark,external_mark,total,maxtotal,grade,cp,credit_points,mark_entry.subject_no,semester,maxtotal,exam_code,subject.Part_Type,sub_sem.priority,sub_sem.lab,subject.subjectpriority,SUBSTRING(subject_code,(LEN(subject_code)-2) ,1) as Prac_code,Subject.print_acronmy from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "' order by syllabus_master.semester, subject.subjectpriority ";
                        sql3 = "Select distinct sm.semester,ss.subject_type,s.subject_name,s.subject_code,s.subject_no,m.result,s.max_int_marks,s.max_ext_marks,m.internal_mark,m.external_mark,m.total,s.maxtotal,m.grade,m.cp,s.credit_points,sm.semester,s.mintotal,m.exam_code,ISNULL(s.Part_Type,'0') Part_Type,isnull(ss.priority,'0') priority,ss.lab,isNUll(s.subjectpriority,'0') subjectpriority,SUBSTRING(subject_code,(LEN(subject_code)-2) ,1) as Prac_code,ISNULL(s.print_acronmy,'') as print_acronmy from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=ss.syll_code and ss.syll_code=s.syll_code and sm.syll_code=s.syll_code and sc.subject_no=s.subject_no and sc.subject_no=m.subject_no and sc.roll_no=m.roll_no and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  result='pass'  and m.roll_no='" + rollnosub + "' order by sm.semester, subjectpriority ";
                        printds_rows.Clear();
                        printds_rows.Dispose();
                        printds_rows = da.select_method_wo_parameter(sql3, "Text");
                        string stdphtsql = "select * from StdPhoto where app_no='" + stdappno + "'";
                        MemoryStream memoryStream = new MemoryStream();
                        DataSet dsstdpho = new DataSet();
                        dsstdpho.Clear();
                        dsstdpho.Dispose();
                        dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                        if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                        {
                            byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                            memoryStream.Write(file, 0, file.Length);
                            if (file.Length > 0)
                            {
                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                {
                                }
                                else
                                {
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                }
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                        {
                            LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                            mypdfpage.Add(LogoImage2, 645, 25, 420);
                        }
                        else
                        {
                        }
                        string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-";
                        if (edu_level.Trim().ToLower() == "ug")
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 3)).Trim();
                            grade_set = "0";
                            ugpgminpass = 50;
                        }
                        else
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 2)).Trim();
                            grade_set = "1";
                            ugpgminpass = 50;
                        }
                        tblstudDetail = mydoc.NewTable(fontStudDetails, 1, 5, 5);
                        tblstudDetail.VisibleHeaders = false;
                        tblstudDetail.SetBorders(Color.Black, 1, BorderType.None);
                        tblstudDetail.SetColumnsWidth(new int[] { 255, 100, 108, 157, 90 });
                        tblstudDetail.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudDetail.Cell(0, 0).SetContent(studname);
                        tblstudDetail.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(0, 1).SetContent(dob);
                        tblstudDetail.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(0, 2).SetContent(regnumber);
                        tblstudDetail.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudDetail.Cell(0, 3).SetContent(branch);
                        tblstudDetail.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(0, 4).SetContent(admid_date.ToUpper());
                        newpdftabpage2 = tblstudDetail.CreateTablePage(new PdfArea(mydoc, 0, 115, 730, 50));
                        mypdfpage.Add(newpdftabpage2);
                        double overallcreditearned = 0;
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            int rowSpecial = 0;
                            //if (chk_finalsemmrk_sheet.Checked)
                            //{
                            string nwqry = "select s.subject_name,scs.Subject_No,App_no,MarkType,IsFinalsem,CurrentSem,s.credit_points,ss.subject_type,s.acronym,s.print_acronmy from SpecialCourseSubject scs,subject s,sub_sem ss where s.subject_no=scs.Subject_No and ss.subType_no=s.subType_no and App_no='" + stdappno + "' ";
                            //and CurrentSem='" + maxSem + "' and IsFinalsem='1'
                            dsSpl = d2.select_method_wo_parameter(nwqry, "Text");
                            rowSpecial = dsSpl.Tables[0].Rows.Count;
                            //}
                            bool starP3 = false;
                            string[] star = new string[2];
                            ArrayList arr_star = new ArrayList();
                            double[] starmrk = new double[2];
                            double[] starcredit = new double[2];
                            double[] stargpa = new double[2];
                            double[] starwpm = new double[2];
                            tot_credits = tot_credits + 1;
                            int creditsdiff = 0;
                            //magesh 17/2/18
                            //if (tot_credits != setng_ovrtotalcreadits)
                            //{
                            if (tot_credits > setng_mintotalcreadits)
                            {
                                creditsdiff = tot_credits - setng_mintotalcreadits;
                                creditsdiff = creditsdiff / 5;
                            }
                            //}
                            string removesubjetcs = string.Empty;
                            DataSet cutsubject = new DataSet();
                            if (creditsdiff > 0)
                            {
                                sql = "Select  top " + creditsdiff + " subject.subject_code,credit_points from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "' and Part_Type=3 and SUBSTRING(subject_code,7,1)='M' order by credit_points asc,total asc,syllabus_master.semester asc,subject.subjectpriority asc";//syllabus_master.semester asc
                                cutsubject.Clear();
                                cutsubject = da.select_method_wo_parameter(sql, "Text");
                                int removecredites = 0;
                                for (int ii = 0; ii < cutsubject.Tables[0].Rows.Count; ii++)
                                {
                                    if (removecredites == 0)
                                    {
                                        removecredites = Convert.ToInt32(Convert.ToString(cutsubject.Tables[0].Rows[ii][1]).Trim());
                                    }
                                    else
                                    {
                                        removecredites = removecredites + Convert.ToInt32(Convert.ToString(cutsubject.Tables[0].Rows[ii][1]).Trim());
                                    }
                                }
                                if (creditsdiff == 1 && removecredites > 5)
                                {
                                    // 6 credit paper
                                }
                                else if (!chkWoCr.Checked)
                                {
                                    if (removecredites <= 10)
                                    {
                                        for (int ii = 0; ii < cutsubject.Tables[0].Rows.Count; ii++)
                                        {
                                            if (removesubjetcs.Trim() == "")
                                            {
                                                removesubjetcs = Convert.ToString(cutsubject.Tables[0].Rows[ii][0]).Trim();
                                            }
                                            else
                                            {
                                                removesubjetcs = removesubjetcs + "," + Convert.ToString(cutsubject.Tables[0].Rows[ii][0]).Trim();
                                            }
                                            arr_star.Add(Convert.ToString(cutsubject.Tables[0].Rows[ii][0]).Trim());
                                        }
                                    }
                                    else
                                    {
                                        removesubjetcs = Convert.ToString(cutsubject.Tables[0].Rows[0][0]).Trim();
                                        arr_star.Add(Convert.ToString(cutsubject.Tables[0].Rows[0][0]).Trim());
                                    }
                                }
                            }
                            if ((edu_level.Trim().ToLower() == "ug") && tot_credits >= setng_mintotalcreadits)
                            {
                                starP3 = true;
                                additionalmsg = "*\t-\tAdditional Credit Papers of Part-III are not included in the Overall Result";
                                if (arr_star.Count == 0)
                                {
                                    additionalmsg = string.Empty;
                                }
                            }
                            else
                            {
                                starP3 = false;
                                additionalmsg = string.Empty;
                            }
                            fullmark = mydoc.NewTable(fontStmtMarks, printds_rows.Tables[0].Rows.Count + maxSem + rowSpecial + 4, 10, 1);
                            fullmark.VisibleHeaders = false;
                            fullmark.SetBorders(Color.Black, 1, BorderType.None);
                            fullmark.Columns[0].SetWidth(71);
                            fullmark.Columns[1].SetWidth(250);
                            fullmark.Columns[2].SetWidth(43);
                            fullmark.Columns[3].SetWidth(43);
                            fullmark.Columns[4].SetWidth(43);
                            fullmark.Columns[5].SetWidth(51);
                            fullmark.Columns[6].SetWidth(51);
                            fullmark.Columns[7].SetWidth(43);
                            fullmark.Columns[8].SetWidth(43);
                            fullmark.Columns[9].SetWidth(71);
                            int mr = 0;
                            int semescount = 0; //Checkjairam
                            for (int s = 1; s <= maxSem; s++)
                            {
                                semescount++;
                                string Exam_NewCode = string.Empty;
                                DataView dvMark = new DataView();
                                printds_rows.Tables[0].DefaultView.RowFilter = "semester='" + s + "'";
                                dvMark = printds_rows.Tables[0].DefaultView;
                                if (dvMark.Count > 0)
                                {
                                    for (int i = 0; i < dvMark.Count; i++)
                                    {
                                        if (mr != 0 && mr % 44 == 0)
                                        {
                                            if (mr % 44 == 0)
                                            {
                                                fullmark.Cell(mr, 1).SetCellPadding(5);
                                                fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                fullmark.Cell(mr, 1).SetContent("--- STATEMENT CONTINUED ---");
                                                newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 0, 175, 730, 650));
                                                mypdfpage.Add(newpdftabpage2);
                                                pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 50, 990, 71, 25), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                                                mypdfpage.Add(pdfdoi);
                                                //if (needDuplicate)
                                                //{
                                                //    pdfDuplicateNo = new PdfTextArea(fontdegreename, System.Drawing.Color.Black, new PdfArea(mydoc, mydoc.PageWidth - 270, 85, 250, 35), System.Drawing.ContentAlignment.MiddleRight, Convert.ToString(duplicateNumber));
                                                //    mypdfpage.Add(pdfDuplicateNo);
                                                //}
                                                if (needDuplicate)
                                                {
                                                    pdfDuplicateNo = new PdfTextArea(fontStudDetails, System.Drawing.Color.Black, new PdfArea(mydoc, 83, 25, 150, 200), System.Drawing.ContentAlignment.TopLeft, Convert.ToString("DUPLICATE OF NO\t:\t\t" + duplicateNumber + "\t\t\nDT\t:\t" + txtDuplicateDate.Text));
                                                    mypdfpage.Add(pdfDuplicateNo);
                                                }
                                                mypdfpage.SaveToDocument();
                                                mypdfpage = mydoc.NewPage();
                                                mr = 0;
                                                pdfdoi = new PdfTextArea(fontdegreename, System.Drawing.Color.Black, new PdfArea(mydoc, 227, 45, 100, 25), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(degree));
                                                mypdfpage.Add(pdfdoi);
                                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                                {
                                                    LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                                                    mypdfpage.Add(LogoImage2, 645, 25, 420);
                                                }
                                                else
                                                {
                                                }
                                                tblstudDetail = mydoc.NewTable(fontStudDetails, 1, 5, 5);
                                                tblstudDetail.VisibleHeaders = false;
                                                tblstudDetail.SetBorders(Color.Black, 1, BorderType.None);
                                                tblstudDetail.SetColumnsWidth(new int[] { 255, 100, 108, 157, 90 });
                                                tblstudDetail.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                tblstudDetail.Cell(0, 0).SetContent(studname);
                                                tblstudDetail.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblstudDetail.Cell(0, 1).SetContent(dob);
                                                tblstudDetail.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblstudDetail.Cell(0, 2).SetContent(regnumber);
                                                tblstudDetail.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                tblstudDetail.Cell(0, 3).SetContent(branch);
                                                tblstudDetail.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblstudDetail.Cell(0, 4).SetContent(admid_date.ToUpper());
                                                newpdftabpage2 = tblstudDetail.CreateTablePage(new PdfArea(mydoc, 0, 115, 730, 50));
                                                mypdfpage.Add(newpdftabpage2);
                                                fullmark = mydoc.NewTable(fontStmtMarks, printds_rows.Tables[0].Rows.Count + maxSem + rowSpecial + 4, 10, 1);
                                                fullmark.VisibleHeaders = false;
                                                fullmark.SetBorders(Color.Black, 1, BorderType.None);
                                                fullmark.Columns[0].SetWidth(71);
                                                fullmark.Columns[1].SetWidth(250);
                                                fullmark.Columns[2].SetWidth(43);
                                                fullmark.Columns[3].SetWidth(43);
                                                fullmark.Columns[4].SetWidth(43);
                                                fullmark.Columns[5].SetWidth(51);
                                                fullmark.Columns[6].SetWidth(51);
                                                fullmark.Columns[7].SetWidth(43);
                                                fullmark.Columns[8].SetWidth(43);
                                                fullmark.Columns[9].SetWidth(71);
                                                fullmark.Cell(mr, 1).SetCellPadding(5);
                                                fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                fullmark.Cell(mr, 1).SetContent("--- CONTINUATION OF STATEMENT ---");
                                                mr += 2;
                                            }
                                            bool calgpa = true;
                                            fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 0).SetContent(Convert.ToString(dvMark[i]["subject_code"]));
                                            fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 1).SetContent(Convert.ToString(dvMark[i]["subject_name"]));
                                            string subtypeaccr = string.Empty;
                                            string sub_code = Convert.ToString(dvMark[i]["subject_code"]).Trim();
                                            subtypeaccr = Convert.ToString(dvMark[i]["subject_type"]);
                                            string printcronmy = Convert.ToString(dvMark[i]["print_acronmy"]);
                                            if (printcronmy.Trim() != "")
                                            {
                                                subtypeaccr = printcronmy;
                                            }
                                            else
                                            {
                                                subtypeaccr = findSubTypeAccromy(subtypeaccr);
                                                if (subtypeaccr.ToUpper().Trim() == "PRAC")
                                                {
                                                    //if (Convert.ToString(dvMark[i]["subject_name"]).ToLower() == "computer training" || Convert.ToString(dvMark[i]["subject_name"]).ToLower() == "skillbased computer training intro.to information techn. & ms office")
                                                    if (Convert.ToString(dvMark[i]["subject_name"]).ToLower().Trim().Contains("computer training"))
                                                    {
                                                        subtypeaccr = "CT";
                                                    }
                                                    if (subtypeaccr.ToUpper().Trim() == "PRAC")
                                                    {
                                                        string gt_sub_code = sub_code.Substring(sub_code.Length - 3, 1);
                                                        if (gt_sub_code.ToUpper().Trim() == "M")
                                                        {
                                                            subtypeaccr = "MC";
                                                        }
                                                        else if (gt_sub_code.ToUpper().Trim() == "A")
                                                        {
                                                            subtypeaccr = "AC";
                                                        }
                                                        else if (gt_sub_code.ToUpper().Trim() == "E")
                                                        {
                                                            subtypeaccr = "EC";
                                                        }
                                                        else if (gt_sub_code.ToUpper().Trim() == "L")
                                                        {
                                                            subtypeaccr = "GE";
                                                        }
                                                        else
                                                        {
                                                            subtypeaccr = "PRAC";
                                                        }
                                                    }
                                                }
                                            }
                                            fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 2).SetContent(subtypeaccr);
                                            double internalmmark = 0;
                                            double externalmark1 = 0;
                                            double totalintext = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["internal_mark"]), out internalmmark);
                                            fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            string maxinternal = Convert.ToString(dvMark[i]["max_int_marks"]).Trim();
                                            string maxexternal = Convert.ToString(dvMark[i]["max_ext_marks"]).Trim();
                                            double submaxtot = 0;// Convert.ToDouble(dvMark[i]["maxtotal"]);
                                            double.TryParse(Convert.ToString(dvMark[i]["maxtotal"]).Trim(), out submaxtot);
                                            double extfinal = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["external_mark"]), out extfinal);
                                            extfinal = Math.Round(extfinal, 0);
                                            externalmark1 = extfinal;
                                            string checkedmark = string.Empty;
                                            if (extfinal < 0)
                                            {
                                                checkedmark = loadmarkat(Convert.ToString(extfinal));
                                            }
                                            else
                                            {
                                                checkedmark = Convert.ToString(extfinal);
                                            }
                                            if (internalmmark >= 0)
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = internalmmark + externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = internalmmark;
                                                }
                                            }
                                            else
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = 0;
                                                }
                                            }
                                            onlyca = false;
                                            onlyes = false;
                                            if (maxinternal == "0")
                                            {
                                                onlyes = true;
                                            }
                                            if (maxexternal == "0")
                                            {
                                                onlyca = true;
                                            }
                                            fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            if (onlyes == true && extfinal >= 0)
                                            {
                                                fullmark.Cell(mr, 5).SetContent(checkedmark + "/" + submaxtot.ToString());
                                            }
                                            else
                                            {
                                                fullmark.Cell(mr, 5).SetContent(checkedmark);
                                            }
                                            if (onlyca == true && internalmmark >= 0)
                                            {
                                                fullmark.Cell(mr, 4).SetContent(internalmmark + "/" + submaxtot.ToString());
                                            }
                                            else if (onlyes == false)
                                            {
                                                fullmark.Cell(mr, 4).SetContent(internalmmark);
                                            }
                                            else
                                            {
                                                fullmark.Cell(mr, 4).SetContent("NA");
                                                additonalstatus = 1;
                                            }
                                            if (onlyca)
                                            {
                                                fullmark.Cell(mr, 5).SetContent("NA");
                                                additonalstatus = 1;
                                            }
                                            double totfinal = 0;
                                            totfinal = Math.Round(totalintext, 0, MidpointRounding.AwayFromZero);
                                            fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal));
                                            if (submaxtot != 100 || onlyes == true || onlyca == true)
                                            {
                                                fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal + "/" + submaxtot));
                                            }
                                            double credit = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["credit_points"]), out credit);
                                            overallcreditearned += credit;
                                            fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            if (starP3 == true)
                                            {
                                                if (arr_star.Contains(sub_code))
                                                {
                                                    fullmark.Cell(mr, 3).SetContent(Convert.ToString(dvMark[i]["credit_points"] + "*").Trim());
                                                }
                                                else
                                                {
                                                    fullmark.Cell(mr, 3).SetContent(Convert.ToString(dvMark[i]["credit_points"]).Trim());
                                                }
                                            }
                                            else
                                            {
                                                fullmark.Cell(mr, 3).SetContent(Convert.ToString(dvMark[i]["credit_points"]));
                                            }
                                            double checkmarkmm = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["total"]).Trim(), out checkmarkmm);
                                            checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                            if (submaxtot != 100 && submaxtot != 0)
                                            {
                                                double getmark = checkmarkmm / submaxtot * 100;
                                                getmark = Math.Round(getmark, 0, MidpointRounding.AwayFromZero);
                                                checkmarkmm = getmark;
                                            }
                                            string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + checkmarkmm + "' between Frange and Trange";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                            {
                                                gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "'  and '" + checkmarkmm + "' between Frange and Trange";//added by sridhar 
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            }
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                                {
                                                    if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                    {
                                                        grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
                                                        gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
                                                    }
                                                }
                                            }
                                            double gradeibtpoint = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["total"]).Trim(), out gradeibtpoint);
                                            if (submaxtot != 100 && submaxtot != 0)
                                            {
                                                double getmark = gradeibtpoint / submaxtot * 100;
                                                getmark = Math.Round(getmark, 1, MidpointRounding.AwayFromZero);
                                                gradeibtpoint = getmark;
                                            }
                                            gradeibtpoint = gradeibtpoint / 10;
                                            gradeibtpoint = Math.Round(gradeibtpoint, 1, MidpointRounding.AwayFromZero);
                                            string gp = String.Format("{0:0.0}", gradeibtpoint);
                                            gradepoints = Convert.ToString(gradeibtpoint);
                                            gradepoints = Convert.ToString(Math.Round(Convert.ToDouble(gradeibtpoint), 1, MidpointRounding.AwayFromZero));
                                            gradepoints = String.Format("{0:0.0}", gradepoints);
                                            string result = Convert.ToString(dvMark[i]["result"]).Trim().ToLower();
                                            if (result == "fail")
                                            {
                                                result = "RA";
                                                grade = "U";
                                            }
                                            else if (result == "pass")
                                            {
                                                result = "P";
                                            }
                                            else
                                            {
                                                result = "AB";
                                                grade = "U";
                                            }
                                            totfinal = totfinal * Convert.ToDouble(credit);
                                            fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 8).SetContent(grade);
                                            fullmark.Cell(mr, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 7).SetContent(gp);
                                            totfinal = Math.Round(totfinal, 0, MidpointRounding.AwayFromZero);
                                            fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            DataView dv = new DataView();
                                            printds.Tables[2].DefaultView.RowFilter = "exam_code='" + Convert.ToString(dvMark[i]["exam_code"]).Trim() + "'";
                                            dv = printds.Tables[2].DefaultView;
                                            if (dv.Count > 0)
                                            {
                                                string exam_y = Convert.ToString(dv[0]["Exam_year"]).Trim();
                                                string exam_m = Convert.ToString(dv[0]["Exam_Month"]).Trim();
                                                strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                                strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                                strMonthName = exam_y + " - " + strMonthName.ToUpper() + " ";
                                                fullmark.Cell(mr, 9).SetContent(strMonthName);
                                            }
                                            mr++;
                                        }
                                        else
                                        {
                                            bool calgpa = true;
                                            fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 0).SetContent(Convert.ToString(dvMark[i]["subject_code"]).Trim());
                                            fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 1).SetContent(Convert.ToString(dvMark[i]["subject_name"]).Trim());
                                            string subtypeaccr = string.Empty;
                                            string sub_code = Convert.ToString(dvMark[i]["subject_code"]).Trim();
                                            subtypeaccr = Convert.ToString(dvMark[i]["subject_type"]).Trim();
                                            string printcronmy = Convert.ToString(dvMark[i]["print_acronmy"]).Trim();
                                            if (printcronmy.Trim() != "")
                                            {
                                                subtypeaccr = printcronmy;
                                            }
                                            else
                                            {
                                                subtypeaccr = findSubTypeAccromy(subtypeaccr);
                                                if (subtypeaccr.ToUpper().Trim() == "PRAC")
                                                {
                                                    // if (Convert.ToString(dvMark[i]["subject_name"]).ToLower() == "computer training" || Convert.ToString(dvMark[i]["subject_name"]).ToLower() == "skillbased computer training intro.to information techn. & ms office")
                                                    if (Convert.ToString(dvMark[i]["subject_name"]).ToLower().Trim().Contains("computer training"))
                                                    {
                                                        subtypeaccr = "CT";
                                                    }
                                                    if (subtypeaccr.ToUpper().Trim() == "PRAC")
                                                    {
                                                        string gt_sub_code = sub_code.Substring(sub_code.Length - 3, 1);
                                                        if (gt_sub_code.ToUpper().Trim() == "M")
                                                        {
                                                            subtypeaccr = "MC";
                                                        }
                                                        else if (gt_sub_code.ToUpper().Trim() == "A")
                                                        {
                                                            subtypeaccr = "AC";
                                                        }
                                                        else if (gt_sub_code.ToUpper().Trim() == "E")
                                                        {
                                                            subtypeaccr = "EC";
                                                        }
                                                        else if (gt_sub_code.ToUpper().Trim() == "L" || gt_sub_code.ToUpper().Trim() == "I")
                                                        {
                                                            subtypeaccr = "GE";
                                                        }
                                                        else
                                                        {
                                                            subtypeaccr = "PRAC";
                                                        }
                                                    }
                                                }
                                            }
                                            fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 2).SetContent(subtypeaccr);
                                            double internalmmark = 0;
                                            double externalmark1 = 0;
                                            double totalintext = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["internal_mark"]).Trim(), out internalmmark);
                                            fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            double submaxtot = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["maxtotal"]).Trim(), out submaxtot);
                                            string maxinternal = Convert.ToString(dvMark[i]["max_int_marks"]).Trim();
                                            string maxexternal = Convert.ToString(dvMark[i]["max_ext_marks"]).Trim();
                                            double extfinal = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["external_mark"]).Trim(), out extfinal);
                                            extfinal = Math.Round(extfinal, 0);
                                            externalmark1 = extfinal;
                                            string checkedmark = string.Empty;
                                            if (extfinal < 0)
                                            {
                                                checkedmark = loadmarkat(Convert.ToString(extfinal));
                                            }
                                            else
                                            {
                                                checkedmark = Convert.ToString(extfinal);
                                            }
                                            if (internalmmark >= 0)
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = internalmmark + externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = internalmmark;
                                                }
                                            }
                                            else
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = 0;
                                                }
                                            }
                                            onlyca = false;
                                            onlyes = false;
                                            if (maxinternal == "0")
                                            {
                                                onlyes = true;
                                            }
                                            if (maxexternal == "0")
                                            {
                                                onlyca = true;
                                            }
                                            fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            if (onlyes == true && extfinal >= 0)
                                            {
                                                fullmark.Cell(mr, 5).SetContent(checkedmark + "/" + submaxtot.ToString());
                                            }
                                            else
                                            {
                                                fullmark.Cell(mr, 5).SetContent(checkedmark);
                                            }
                                            if (onlyca == true && internalmmark >= 0)
                                            {
                                                fullmark.Cell(mr, 4).SetContent(internalmmark + "/" + submaxtot.ToString());
                                            }
                                            else if (onlyes == false)
                                            {
                                                fullmark.Cell(mr, 4).SetContent(internalmmark);
                                            }
                                            else
                                            {
                                                fullmark.Cell(mr, 4).SetContent("NA");
                                                additonalstatus = 1;
                                            }
                                            if (onlyca)
                                            {
                                                fullmark.Cell(mr, 5).SetContent("NA");
                                                additonalstatus = 1;
                                            }
                                            double totfinal = 0;
                                            totfinal = Math.Round(totalintext, 0, MidpointRounding.AwayFromZero);
                                            fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal));
                                            if (submaxtot != 100 || onlyca == true || onlyes == true)
                                            {
                                                fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal + "/" + submaxtot).Trim());
                                            }
                                            double credit = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["credit_points"]).Trim(), out credit);
                                            overallcreditearned += credit;
                                            fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            if (starP3 == true)
                                            {
                                                if (arr_star.Contains(sub_code))
                                                {
                                                    fullmark.Cell(mr, 3).SetContent(Convert.ToString(dvMark[i]["credit_points"] + "*").Trim());
                                                }
                                                else
                                                {
                                                    fullmark.Cell(mr, 3).SetContent(Convert.ToString(dvMark[i]["credit_points"]).Trim());
                                                }
                                            }
                                            else
                                            {
                                                fullmark.Cell(mr, 3).SetContent(Convert.ToString(dvMark[i]["credit_points"]).Trim());
                                            }
                                            double checkmarkmm = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["total"]).Trim(), out checkmarkmm);
                                            checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                            if (submaxtot != 100 && submaxtot != 0)
                                            {
                                                double getmark = checkmarkmm / submaxtot * 100;
                                                getmark = Math.Round(getmark, 2, MidpointRounding.AwayFromZero);
                                                checkmarkmm = getmark;
                                            }
                                            string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + checkmarkmm + "' between Frange and Trange";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                            {
                                                gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "'  and '" + checkmarkmm + "' between Frange and Trange";
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            }
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                                {
                                                    if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                    {
                                                        grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
                                                        gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
                                                    }
                                                }
                                            }
                                            double gradeibtpoint = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["total"]).Trim(), out gradeibtpoint);
                                            if (submaxtot != 100 && submaxtot != 0)
                                            {
                                                gradeibtpoint = gradeibtpoint / submaxtot * 10;
                                            }
                                            else
                                            {
                                                gradeibtpoint = gradeibtpoint / 10;
                                            }
                                            gradeibtpoint = Math.Round(gradeibtpoint, 1, MidpointRounding.AwayFromZero);
                                            string gp = String.Format("{0:0.0}", gradeibtpoint);
                                            gradepoints = Convert.ToString(gradeibtpoint);
                                            gradepoints = Convert.ToString(Math.Round(Convert.ToDouble(gradeibtpoint), 1, MidpointRounding.AwayFromZero));
                                            gradepoints = String.Format("{0:0.0}", gradepoints);
                                            string result = Convert.ToString(dvMark[i]["result"]).ToLower().Trim();
                                            if (result == "fail")
                                            {
                                                result = "RA";
                                                grade = "U";
                                            }
                                            else if (result == "pass")
                                            {
                                                result = "P";
                                            }
                                            else
                                            {
                                                result = "AB";
                                                grade = "U";
                                            }
                                            totfinal = totfinal * Convert.ToDouble(credit);
                                            fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 8).SetContent(grade);
                                            fullmark.Cell(mr, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 7).SetContent(gp);
                                            totfinal = Math.Round(totfinal, 0, MidpointRounding.AwayFromZero);
                                            fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            DataView dv = new DataView();
                                            printds.Tables[2].DefaultView.RowFilter = "exam_code='" + Convert.ToString(dvMark[i]["exam_code"]).Trim() + "'";
                                            dv = printds.Tables[2].DefaultView;
                                            Exam_NewCode = Convert.ToString(dvMark[i]["exam_code"]).Trim();
                                            if (dv.Count > 0)
                                            {
                                                string exam_y = Convert.ToString(dv[0]["Exam_year"]).Trim();
                                                string exam_m = Convert.ToString(dv[0]["Exam_Month"]).Trim();
                                                strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                                strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                                strMonthName = exam_y + " - " + strMonthName.ToUpper() + " ";
                                                fullmark.Cell(mr, 9).SetContent(strMonthName);
                                            }
                                            mr++;
                                        }
                                    }
                                    if (dsSpl.Tables.Count > 0 && dsSpl.Tables[0].Rows.Count > 0)
                                    {
                                        bool PartFlag = false;
                                        dsSpl.Tables[0].DefaultView.RowFilter = "currentsem='" + s + "'";
                                        DataView dvset = dsSpl.Tables[0].DefaultView;
                                        if (dvset.Count > 0)
                                        {
                                            string Finla = Convert.ToString(dvset[0]["IsFinalSem"]);
                                            string subj = string.Empty;
                                            //  mr++;
                                            if ((edu_level.Trim().ToLower() == "ug"))
                                            {
                                                splcredit = 1;
                                                if (Finla.Trim() == "1" || Finla.Trim().ToLower() == "true")
                                                {
                                                    subj = "Part V " + Convert.ToString(dvset[0]["Subject_name"]).Trim();
                                                }
                                                else
                                                {
                                                    subj = "Part III " + Convert.ToString(dvset[0]["Subject_name"]).Trim();
                                                    PartFlag = true;
                                                }
                                                fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                fullmark.Cell(mr, 1).SetContent(subj);
                                                fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            }
                                            else
                                            {
                                                splcredit = 2;
                                                if (Finla.Trim() == "1" || Finla.Trim().ToLower() == "true")
                                                {
                                                    subj = "Part II " + Convert.ToString(dvset[0]["Subject_name"]).Trim();
                                                }
                                                else
                                                {
                                                    subj = "" + Convert.ToString(dvset[0]["Subject_name"]).Trim();
                                                }
                                                fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                fullmark.Cell(mr, 1).SetContent(subj);
                                                fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            }
                                            string subtypeaccr = Convert.ToString(dvset[0]["Subject_name"]).Trim();
                                            subtypeaccr = findSubTypeAccromy(subtypeaccr);
                                            fullmark.Cell(mr, 2).SetContent(Convert.ToString(dvset[0]["acronym"]).Trim());
                                            fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 3).SetContent(splcredit);
                                            fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 4).SetContent("NA");
                                            fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 5).SetContent("NA");
                                            fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            string markType = Convert.ToString(dsSpl.Tables[0].Rows[0]["MarkType"]).Trim();
                                            string markGrade = string.Empty;
                                            //if (Convert.ToString(dsSpl.Tables[0].Rows[0]["MarkType"]).Trim() == "1")
                                            //{
                                            //    fullmark.Cell(mr, 6).SetContent("Good");
                                            //}
                                            //else if (Convert.ToString(dvset[0]["MarkType"]).Trim() == "2")
                                            //{
                                            //    fullmark.Cell(mr, 6).SetContent("Excellent");
                                            //}
                                            //else if (Convert.ToString(dvset[0]["MarkType"]).Trim() == "3")
                                            //{
                                            //    fullmark.Cell(mr, 6).SetContent("Outstanding");
                                            //}
                                            //else if (Convert.ToString(dvset[0]["MarkType"]).Trim() == "4")
                                            //{
                                            //    fullmark.Cell(mr, 6).SetContent("Average");
                                            //}
                                            switch (markType)
                                            {
                                                case "1":
                                                    markGrade = "Good";
                                                    break;
                                                case "2":
                                                    markGrade = "Excellent";
                                                    break;
                                                case "3":
                                                    markGrade = "Outstanding";
                                                    break;
                                                case "4":
                                                    markGrade = "Average";
                                                    break;
                                            }
                                            fullmark.Cell(mr, 6).SetContent(markGrade);
                                            fullmark.Cell(mr, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 7).SetContent("NA");
                                            fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 8).SetContent("NA");

                                            DataView dv1 = new DataView();
                                            if (PartFlag == false)
                                            {
                                                printds.Tables[2].DefaultView.RowFilter = "degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and Exam_year='" + batch_year1.Split('-')[1] + "'";
                                                dv1 = printds.Tables[2].DefaultView;
                                                dv1.Sort = "exam_code,current_semester";
                                            }
                                            else if (PartFlag == true)
                                            {
                                                DsExamYear.Tables[0].DefaultView.RowFilter = "semester='" + s + "'";
                                                dv1 = DsExamYear.Tables[0].DefaultView;
                                            }
                                            if (dv1.Count > 0)
                                            {
                                                string exam_y = Convert.ToString(dv1[0]["Exam_year"]).Trim();
                                                string exam_m = Convert.ToString(dv1[0]["Exam_Month"]).Trim();
                                                strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                                strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                                strMonthName = exam_y + " - " + strMonthName.ToUpper() + " ";
                                                fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(mr, 9).SetContent(strMonthName);
                                            }
                                            mr++;
                                        }

                                    }
                                    //else
                                    //{
                                    //    fullmark.Cell(mr, 9).SetCellPadding(5);
                                    //}
                                    fullmark.Rows[mr].SetCellPadding(5);
                                    //fullmark.Cell(mr, 9).SetCellPadding(5);
                                    mr++;

                                }
                            }
                            fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            fullmark.Cell(mr, 1).SetFont(fontStmtMarks);
                            fullmark.Cell(mr, 1).SetContent("--- END OF STATEMENT ---");
                            if (rowSpecial == 0)
                            {
                                splcredit = 0;
                            }
                            else
                            {
                                //if (dsSpl.Tables.Count > 0 && dsSpl.Tables[0].Rows.Count > 0)
                                //{
                                //    if ((edu_level.Trim().ToLower() == "ug"))
                                //    {
                                //        splcredit = 1;
                                //        fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                //        fullmark.Cell(mr, 1).SetContent("Part V " + Convert.ToString(dsSpl.Tables[0].Rows[0]["Subject_name"]).Trim());
                                //        fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    }
                                //    else
                                //    {
                                //        splcredit = 2;
                                //        fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                //        fullmark.Cell(mr, 1).SetContent("Part II " + Convert.ToString(dsSpl.Tables[0].Rows[0]["Subject_name"]).Trim());
                                //        fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    }
                                //    string subtypeaccr = Convert.ToString(dsSpl.Tables[0].Rows[0]["Subject_name"]).Trim();
                                //    subtypeaccr = findSubTypeAccromy(subtypeaccr);
                                //    fullmark.Cell(mr, 2).SetContent(Convert.ToString(dsSpl.Tables[0].Rows[0]["acronym"]).Trim());
                                //    fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    fullmark.Cell(mr, 3).SetContent(splcredit);
                                //    fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    fullmark.Cell(mr, 4).SetContent("NA");
                                //    fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    fullmark.Cell(mr, 5).SetContent("NA");
                                //    fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    if (Convert.ToString(dsSpl.Tables[0].Rows[0]["MarkType"]).Trim() == "1")
                                //    {
                                //        fullmark.Cell(mr, 6).SetContent("Good");
                                //    }
                                //    else if (Convert.ToString(dsSpl.Tables[0].Rows[0]["MarkType"]).Trim() == "2")
                                //    {
                                //        fullmark.Cell(mr, 6).SetContent("Excellent");
                                //    }
                                //    else if (Convert.ToString(dsSpl.Tables[0].Rows[0]["MarkType"]).Trim() == "3")
                                //    {
                                //        fullmark.Cell(mr, 6).SetContent("Outstanding");
                                //    }
                                //    else if (Convert.ToString(dsSpl.Tables[0].Rows[0]["MarkType"]).Trim() == "4")
                                //    {
                                //        fullmark.Cell(mr, 6).SetContent("Average");
                                //    }
                                //    fullmark.Cell(mr, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    fullmark.Cell(mr, 7).SetContent("NA");
                                //    fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    fullmark.Cell(mr, 8).SetContent("NA");
                                //}
                                //DataView dv1 = new DataView();
                                //printds.Tables[2].DefaultView.RowFilter = "degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and Exam_year='" + batch_year1.Split('-')[1] + "'";
                                //dv1 = printds.Tables[2].DefaultView;
                                //dv1.Sort = "exam_code,current_semester";
                                //if (dv1.Count > 0)
                                //{
                                //    string exam_y = Convert.ToString(dv1[0]["Exam_year"]).Trim();
                                //    string exam_m = Convert.ToString(dv1[0]["Exam_Month"]).Trim();
                                //    strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                //    strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                //    strMonthName = exam_y + " - " + strMonthName.ToUpper() + " ";
                                //    fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    fullmark.Cell(mr, 9).SetContent(strMonthName);
                                //}
                                //fullmark.Cell(mr + 1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                //fullmark.Cell(mr + 1, 1).SetCellPadding(10);
                                //fullmark.Cell(mr + 1, 1).SetContent("--- END OF STATEMENT ---");
                            }
                            //fullmark.Cell(mr + 2, 1).SetCellPadding(3);
                            //fullmark.Cell(mr + 2, 1).SetFont(fontStmtMarks);
                            //fullmark.Cell(mr + 2, 1).SetContent(additionalmsg);
                            //foreach (PdfCell pc in fullmark.CellRange(mr + 2, 1, mr + 2, 1).Cells)
                            //{
                            //    pc.ColSpan = 5;
                            //}
                            newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 0, 175, 730, 650));
                            mypdfpage.Add(newpdftabpage2);
                            PdfTextArea pdfAdditional = new PdfTextArea(fontStmtMarks, System.Drawing.Color.Black, new PdfArea(mydoc, 86, 780, 500, 25), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(additionalmsg));
                            mypdfpage.Add(pdfAdditional);
                            int classifyrows = 0;
                            bool clasipg = false;
                            if (((edu_level.Trim().ToLower() == "ug" || edu_level.Trim().ToLower() == "u.g")))
                            {
                                classifyrows = 6;
                                splcredit = 1;
                                clasipg = false;
                            }
                            else
                            {
                                clasipg = true;
                                splcredit = 2;
                                classifyrows = 4;
                            }
                            PdfTable tblcgpaclass = mydoc.NewTable(fontcgpa, classifyrows, 8, 4);
                            tblcgpaclass.VisibleHeaders = false;
                            tblcgpaclass.SetBorders(Color.Black, 1, BorderType.None);
                            tblcgpaclass.Columns[0].SetWidth(28);
                            tblcgpaclass.Columns[1].SetWidth(111);
                            tblcgpaclass.Columns[2].SetWidth(57);
                            tblcgpaclass.Columns[3].SetWidth(57);
                            tblcgpaclass.Columns[4].SetWidth(57);
                            tblcgpaclass.Columns[5].SetWidth(193);
                            tblcgpaclass.Columns[6].SetWidth(135);
                            tblcgpaclass.Columns[7].SetWidth(71);
                            DataTable dtPart1 = new DataTable();
                            string batchsetting = "0";
                            double partsums = 0.000;
                            double partwpmsum = 0.000;
                            int partrowcount = 0;
                            double Credit_Points = 0.0;
                            double grade_points = 0.0;
                            double creditstotal = 0;
                            double overalltotgrade = 0;
                            double Marks = 0;
                            tblcgpaclass.Cell(2, 0).SetContent("I");
                            tblcgpaclass.Cell(3, 0).SetContent("II");
                            if (clasipg == false)
                            {
                                tblcgpaclass.Cell(4, 0).SetContent("III");
                                tblcgpaclass.Cell(5, 0).SetContent("IV");
                                tblcgpaclass.Cell(4, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblcgpaclass.Cell(5, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            }
                            tblcgpaclass.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblcgpaclass.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            for (int patva = 1; patva < 2; patva++)
                            {
                                if ((edu_level.Trim().ToLower() == "ug" || edu_level.Trim().ToLower() == "u.g") || (edu_level.Trim().ToLower() != "ug" && edu_level.Trim().ToLower() != "u.g" && patva < 3))
                                {
                                    partsums = 0;
                                    partrowcount = 0;
                                    creditstotal = 0;
                                    partwpmsum = 0;
                                    overalltotgrade = 0;
                                    if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                    {
                                        tblcgpaclass.Cell(1 + patva, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(1 + patva, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(1 + patva, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        string sumpart = string.Empty;
                                        string wpm = string.Empty;
                                        DataView dv_demand_data = new DataView();
                                        DataView dv_demand_datadummy = new DataView();
                                        printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='" + patva + "'";
                                        dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                                        partrowcount = dv_demand_datadummy.Count;
                                        printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='" + patva + "' and result='pass'";
                                        dtPart1 = printds_rows.Tables[0].DefaultView.ToTable();
                                        if (dtPart1.Rows.Count > 0 && partrowcount == dtPart1.Rows.Count)
                                        {
                                            for (int sum = 0; sum < dtPart1.Rows.Count; sum++)
                                            {
                                                double checkmarkmm = 0;
                                                double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim(), out checkmarkmm);
                                                double maxsubbtotal = 0;
                                                double.TryParse(Convert.ToString(dtPart1.Rows[sum]["maxtotal"]).Trim(), out maxsubbtotal);
                                                if (maxsubbtotal != 0)
                                                    checkmarkmm = checkmarkmm / maxsubbtotal * 100;
                                                checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                                string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + checkmarkmm + "' between frange and trange";
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                                {
                                                    gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "'  and '" + checkmarkmm + "' between frange and trange";
                                                    gradeds.Clear();
                                                    gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                                }
                                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                                {
                                                    for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                                    {
                                                        if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                        {
                                                            grade_points = checkmarkmm;
                                                            grade_points = grade_points / 10;
                                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["credit_points"]), out Credit_Points);
                                                            creditstotal = creditstotal + Credit_Points;
                                                            partwpmsum += (Credit_Points * checkmarkmm);
                                                            partsums = partsums + (grade_points * Credit_Points);
                                                        }
                                                    }
                                                }
                                            }
                                            if (creditstotal == 0)
                                            {
                                                sumpart = "0.000";
                                                wpm = "0.00";
                                            }
                                            else if (creditstotal > 0)
                                            {
                                                partsums = (partsums / creditstotal);
                                                partsums = Math.Round(partsums, 3, MidpointRounding.AwayFromZero);
                                                partwpmsum = (partwpmsum / creditstotal);
                                                partwpmsum = Math.Round(partwpmsum, 2, MidpointRounding.AwayFromZero);
                                                sumpart = String.Format("{0:0.000}", partsums);
                                                wpm = string.Format("{0:0.00}", partwpmsum);
                                            }
                                            else
                                            {
                                                sumpart = "0.000";
                                                wpm = "0.00";
                                            }
                                        }
                                        else if (partrowcount > 0)
                                        {
                                            sumpart = "0.000";
                                            wpm = "0.00";
                                        }
                                        else
                                        {
                                            sumpart = "---";
                                            wpm = "---";
                                        }
                                        if (sumpart != "---")
                                        {
                                            double sumpartgrade = 0;
                                            if (double.TryParse(sumpart, out sumpartgrade))
                                            {
                                                sumpartgrade = Convert.ToDouble(sumpart);
                                                overalltotgrade = overalltotgrade + sumpartgrade;
                                            }
                                            else
                                            {
                                                sumpartgrade = 0;
                                            }
                                            tblcgpaclass.Cell(1 + patva, 1).SetContent(creditstotal);
                                            tblcgpaclass.Cell(1 + patva, 3).SetContent(sumpart);
                                            tblcgpaclass.Cell(1 + patva, 2).SetContent(wpm);
                                            batchsetting = "1";
                                            if (noofsubfailed != 0 && overalltotgrade >= 6)
                                            {
                                                string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                                string cclass = "First Class";
                                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                                {
                                                    tblcgpaclass.Cell(1 + patva, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                    tblcgpaclass.Cell(1 + patva, 5).SetContent(cclass);
                                                }
                                                else
                                                {
                                                    tblcgpaclass.Cell(1 + patva, 4).SetContent(Convert.ToString("A"));
                                                    tblcgpaclass.Cell(1 + patva, 5).SetContent(cclass);
                                                }
                                                tblcgpaclass.Cell(1 + patva, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblcgpaclass.Cell(1 + patva, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                            else
                                            {
                                                string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                                {
                                                    tblcgpaclass.Cell(1 + patva, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                    tblcgpaclass.Cell(1 + patva, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                    tblcgpaclass.Cell(1 + patva, 5).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                                    tblcgpaclass.Cell(1 + patva, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            tblcgpaclass.Cell(1 + patva, 1).SetContent("---");
                                            tblcgpaclass.Cell(1 + patva, 2).SetContent("---");
                                            tblcgpaclass.Cell(1 + patva, 3).SetContent("---");
                                        }
                                    }
                                    else
                                    {
                                        tblcgpaclass.Cell(1 + patva, 1).SetContent("---");
                                        tblcgpaclass.Cell(1 + patva, 2).SetContent("---");
                                        tblcgpaclass.Cell(1 + patva, 3).SetContent("---");
                                    }
                                }
                            }
                            partsums = 0;
                            partrowcount = 0;
                            creditstotal = 0;
                            partwpmsum = 0;
                            overalltotgrade = 0;
                            if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                            {
                                string sumpart = string.Empty;
                                string wpm = string.Empty;
                                DataView dv_demand_data = new DataView();
                                DataView dv_demand_datadummy = new DataView();
                                printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='2'";
                                dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                                partrowcount = dv_demand_datadummy.Count;
                                printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='2' and result='pass'";
                                dtPart1 = printds_rows.Tables[0].DefaultView.ToTable();
                                tblcgpaclass.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblcgpaclass.Cell(3, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblcgpaclass.Cell(3, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblcgpaclass.Cell(3, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblcgpaclass.Cell(3, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                if (dtPart1.Rows.Count > 0 && partrowcount == dtPart1.Rows.Count)
                                {
                                    for (int sum = 0; sum < dtPart1.Rows.Count; sum++)
                                    {
                                        double checkmarkmm = 0;
                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out checkmarkmm);
                                        double maxsubbtotal = 0;
                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["maxtotal"]).Trim(), out maxsubbtotal);
                                        if (maxsubbtotal != 0)
                                            checkmarkmm = checkmarkmm / maxsubbtotal * 100;
                                        checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                        string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + checkmarkmm + "' between frange and trange";
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                        {
                                            gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "'  and '" + checkmarkmm + "' between frange and trange";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                        }
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                        {
                                            for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                            {
                                                if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                {
                                                    double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out grade_points);
                                                    double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out Marks);
                                                    if (maxsubbtotal != 0)
                                                    {
                                                        grade_points = grade_points / maxsubbtotal * 100;
                                                        Marks = Marks / maxsubbtotal * 100;
                                                    }
                                                    grade_points = grade_points / 10;
                                                    double.TryParse(Convert.ToString(dtPart1.Rows[sum]["credit_points"]), out Credit_Points);
                                                    creditstotal = creditstotal + Credit_Points;
                                                    partwpmsum += (Credit_Points * Marks);
                                                    partsums = partsums + (grade_points * Credit_Points);
                                                }
                                            }
                                        }
                                    }
                                    if (creditstotal == 0)
                                    {
                                        sumpart = "0.000";
                                        wpm = "0.00";
                                    }
                                    else if (creditstotal > 0)
                                    {
                                        partsums = (partsums / creditstotal);
                                        partsums = Math.Round(partsums, 3, MidpointRounding.AwayFromZero);
                                        partwpmsum = (partwpmsum / creditstotal);
                                        partwpmsum = Math.Round(partwpmsum, 2, MidpointRounding.AwayFromZero);
                                        sumpart = String.Format("{0:0.000}", partsums);
                                        wpm = string.Format("{0:0.00}", partwpmsum);
                                    }
                                    else
                                    {
                                        sumpart = "0.000";
                                        wpm = "0.00";
                                    }
                                }
                                else if (partrowcount > 0)
                                {
                                    sumpart = "0.000";
                                    wpm = "0.00";
                                }
                                else
                                {
                                    sumpart = "---";
                                    wpm = "---";
                                }
                                if (sumpart != "---")
                                {
                                    double sumpartgrade = 0;
                                    if (double.TryParse(sumpart, out sumpartgrade))
                                    {
                                        sumpartgrade = Convert.ToDouble(sumpart);
                                        overalltotgrade = overalltotgrade + sumpartgrade;
                                    }
                                    else
                                    {
                                        sumpartgrade = 0;
                                    }
                                    if (clasipg == false)
                                    {
                                        tblcgpaclass.Cell(3, 1).SetContent(creditstotal);
                                        tblcgpaclass.Cell(3, 3).SetContent(sumpart);
                                        tblcgpaclass.Cell(3, 2).SetContent(wpm);
                                    }
                                    else
                                    {
                                        tblcgpaclass.Cell(3, 1).SetContent(creditstotal + splcredit);
                                        tblcgpaclass.Cell(3, 3).SetContent("---");
                                        tblcgpaclass.Cell(3, 2).SetContent("---");
                                    }
                                    batchsetting = "1";
                                    if (noofsubfailed != 0 && overalltotgrade >= 6)
                                    {
                                        string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                        string cclass = "First Class";
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                        {
                                            if (clasipg == false)
                                            {
                                                tblcgpaclass.Cell(3, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                tblcgpaclass.Cell(3, 5).SetContent(cclass);
                                            }
                                            else
                                            {
                                                tblcgpaclass.Cell(3, 4).SetContent("---");
                                                tblcgpaclass.Cell(3, 5).SetContent("---");
                                            }
                                        }
                                        else
                                        {
                                            if (clasipg == false)
                                            {
                                                tblcgpaclass.Cell(3, 4).SetContent(Convert.ToString("A"));
                                                tblcgpaclass.Cell(3, 5).SetContent(cclass);
                                            }
                                            else
                                            {
                                                tblcgpaclass.Cell(3, 4).SetContent("---");
                                                tblcgpaclass.Cell(3, 5).SetContent("---");
                                            }
                                        }
                                        tblcgpaclass.Cell(3, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(3, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    }
                                    else
                                    {
                                        string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                        {
                                            if (clasipg == false)
                                            {
                                                tblcgpaclass.Cell(3, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                tblcgpaclass.Cell(3, 5).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                            }
                                            else
                                            {
                                                tblcgpaclass.Cell(3, 4).SetContent("---");
                                                tblcgpaclass.Cell(3, 5).SetContent("---");
                                            }
                                        }
                                    }
                                    tblcgpaclass.Cell(3, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblcgpaclass.Cell(3, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                }
                                else
                                {
                                    if (clasipg == false)
                                    {
                                        tblcgpaclass.Cell(3, 1).SetContent(creditstotal);
                                        tblcgpaclass.Cell(3, 3).SetContent(sumpart);
                                        tblcgpaclass.Cell(3, 2).SetContent(wpm);
                                    }
                                    else
                                    {
                                        tblcgpaclass.Cell(3, 1).SetContent(creditstotal + splcredit);
                                        tblcgpaclass.Cell(3, 3).SetContent("---");
                                        tblcgpaclass.Cell(3, 2).SetContent("---");
                                    }
                                }
                            }
                            else
                            {
                                tblcgpaclass.Cell(3, 1).SetContent("---");
                                tblcgpaclass.Cell(3, 2).SetContent("---");
                                tblcgpaclass.Cell(3, 3).SetContent("---");
                            }
                            DataTable dtPart3 = new DataTable();
                            if ((edu_level.Trim().ToLower() == "ug" || edu_level.Trim().ToLower() == "u.g"))
                            {
                                creditsdiff = 0;
                                if (tot_credits > setng_mintotalcreadits)
                                {
                                    creditsdiff = tot_credits - setng_mintotalcreadits;
                                    creditsdiff = creditsdiff / 5;
                                }
                                partsums = 0;
                                partrowcount = 0;
                                creditstotal = 0;
                                partwpmsum = 0;
                                overalltotgrade = 0;
                                double min_credit = 0;
                                double Majorcredit = 0;
                                double Tot_Part3_Credit = 0;
                                double Tot_part3_Earned_credit = 0;
                                double Tot_Major_credit = 0;
                                double Tot_alied_Credit = 0;
                                double aliedCredit = 0;
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    string sumpart = string.Empty;
                                    string wpm = string.Empty;
                                    removesubjetcs = string.Empty;
                                    DataView dv_demand_data = new DataView();
                                    DataView dv_demand_datadummy = new DataView();
                                    cutsubject = new DataSet();
                                    if (creditsdiff > 0)
                                    {
                                        sql = "Select  top " + creditsdiff + " subject.subject_no,credit_points from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "' and Part_Type=3 and SUBSTRING(subject_code,7,1)='M' order by credit_points asc,total asc, syllabus_master.semester asc,subject.subjectpriority asc";//total asc,credit_points asc,syllabus_master.semester asc";
                                        cutsubject.Clear();
                                        cutsubject = da.select_method_wo_parameter(sql, "Text");
                                        int removecredites = 0;
                                        if (cutsubject.Tables.Count > 0 && cutsubject.Tables[0].Rows.Count > 0)
                                        {
                                            for (int ii = 0; ii < cutsubject.Tables[0].Rows.Count; ii++)
                                            {
                                                if (removecredites == 0)
                                                {
                                                    removecredites = Convert.ToInt32(cutsubject.Tables[0].Rows[ii][1].ToString());
                                                }
                                                else
                                                {
                                                    removecredites = removecredites + Convert.ToInt32(cutsubject.Tables[0].Rows[ii][1].ToString());
                                                }
                                            }
                                            if (removecredites > 5 && creditsdiff == 1)
                                            {
                                            }
                                            else if (!chkWoCr.Checked)
                                            {
                                                if (removecredites <= 10)
                                                {
                                                    for (int ii = 0; ii < cutsubject.Tables[0].Rows.Count; ii++)
                                                    {
                                                        if (removesubjetcs.Trim() == "")
                                                        {
                                                            removesubjetcs = cutsubject.Tables[0].Rows[ii][0].ToString();
                                                        }
                                                        else
                                                        {
                                                            removesubjetcs = removesubjetcs + "," + cutsubject.Tables[0].Rows[ii][0].ToString();
                                                        }
                                                        arr_star.Add(Convert.ToString(cutsubject.Tables[0].Rows[ii][0]));
                                                    }

                                                }
                                                else
                                                {
                                                    removesubjetcs = cutsubject.Tables[0].Rows[0][0].ToString();
                                                    arr_star.Add(Convert.ToString(cutsubject.Tables[0].Rows[0][0]));
                                                }
                                            }
                                        }
                                    }
                                    if (removesubjetcs.Trim() != "")
                                    {
                                        printds_rows.Tables[0].DefaultView.RowFilter = "part_type='3' and subject_no not in (" + removesubjetcs + ")";
                                    }
                                    else
                                    {
                                        printds_rows.Tables[0].DefaultView.RowFilter = "part_type='3'";
                                    }
                                    dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                                    partrowcount = dv_demand_datadummy.Count;
                                    if (removesubjetcs.Trim() != "")
                                    {
                                        printds_rows.Tables[0].DefaultView.RowFilter = "part_type='3' and result='pass'  and subject_no not in (" + removesubjetcs + ")";
                                    }
                                    else
                                    {
                                        printds_rows.Tables[0].DefaultView.RowFilter = "part_type='3' and result='pass'";
                                    }
                                    dtPart1 = printds_rows.Tables[0].DefaultView.ToTable();
                                    dtPart3 = printds_rows.Tables[0].DefaultView.ToTable();
                                    object mini = Convert.ToInt16(dtPart3.Compute("Min(total)", "subject_type='Major Course'"));
                                    double minimum = 0;
                                    double.TryParse(Convert.ToString(mini), out minimum);
                                    double min_gpa = 0;
                                    double min_wpm = 0;
                                    min_gpa = (minimum / 10) * 5;
                                    min_wpm = minimum * 5;
                                    if (dv_demand_datadummy.Count > 0)
                                    {
                                        Tot_Part3_Credit = 0;
                                        for (int tc = 0; tc < dv_demand_datadummy.Count; tc++)
                                        {
                                            double dummycredit = 0;
                                            string sub_code = Convert.ToString(dv_demand_datadummy[tc]["subject_code"]).Trim();
                                            string gt_sub_code = sub_code.Substring(sub_code.Length - 3, 1);
                                            string subtypeaccr = string.Empty;
                                            subtypeaccr = Convert.ToString(dv_demand_datadummy[tc]["subject_type"]);
                                            subtypeaccr = findSubTypeAccromy(subtypeaccr);
                                            string printcronmy = Convert.ToString(dv_demand_datadummy[tc]["print_acronmy"]);
                                            if (printcronmy.Trim() != "")
                                            {
                                                subtypeaccr = printcronmy;
                                            }
                                            else
                                            {
                                                if (subtypeaccr.ToUpper().Trim() == "PRAC")
                                                {
                                                    if (gt_sub_code.ToUpper().Trim() == "M")
                                                    {
                                                        subtypeaccr = "MC";
                                                    }
                                                    else if (gt_sub_code.ToUpper().Trim() == "A")
                                                    {
                                                        subtypeaccr = "AC";
                                                    }
                                                    else
                                                    {
                                                        subtypeaccr = "PRAC";
                                                    }
                                                }
                                            }
                                            double.TryParse(Convert.ToString(dv_demand_datadummy[tc]["credit_points"]), out dummycredit);
                                            Tot_Part3_Credit += dummycredit;
                                            if (Convert.ToString(dv_demand_datadummy[tc]["subject_type"]).Trim().ToLower() == "major course" && subtypeaccr.ToLower().Trim() == "mc")
                                            {
                                                Tot_Major_credit += dummycredit;
                                            }
                                            else if (Convert.ToString(dv_demand_datadummy[tc]["subject_type"]).Trim().ToLower() == "allied course" && subtypeaccr.ToLower().Trim() == "ac")
                                            {
                                                Tot_alied_Credit += dummycredit;
                                            }
                                        }
                                    }
                                    if (clasipg == false)
                                    {
                                        tblcgpaclass.Cell(4, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(4, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(4, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(4, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(4, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    }
                                    else
                                    {
                                        tblcgpaclass.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(2, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(2, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(2, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(2, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    }
                                    if (dtPart1.Rows.Count > 0)
                                    {
                                        for (int sum = 0; sum < dtPart1.Rows.Count; sum++)
                                        {
                                            double dummycredit = 0;
                                            string sub_code = Convert.ToString(dtPart1.Rows[sum]["subject_code"]).Trim();
                                            string gt_sub_code = sub_code.Substring(sub_code.Length - 3, 1);
                                            string subtypeaccr = string.Empty;
                                            subtypeaccr = Convert.ToString(dtPart1.Rows[sum]["subject_type"]);
                                            subtypeaccr = findSubTypeAccromy(subtypeaccr);
                                            if (subtypeaccr.ToUpper().Trim() == "PRAC")
                                            {
                                                if (gt_sub_code.ToUpper().Trim() == "M")
                                                {
                                                    subtypeaccr = "MC";
                                                }
                                                else if (gt_sub_code.ToUpper().Trim() == "A")
                                                {
                                                    subtypeaccr = "AC";
                                                }
                                                else if (gt_sub_code.ToUpper().Trim() == "E")
                                                {
                                                    subtypeaccr = "EC";
                                                }
                                                else
                                                {
                                                    subtypeaccr = "PRAC";
                                                }
                                            }
                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["credit_points"]), out dummycredit);
                                            Tot_part3_Earned_credit += dummycredit;
                                            if (Convert.ToString(dtPart1.Rows[sum]["subject_type"]).Trim().ToLower() == "major course" && subtypeaccr.ToLower().Trim() == "mc")
                                            {
                                                Majorcredit += dummycredit;
                                            }
                                            else if (Convert.ToString(dtPart1.Rows[sum]["subject_type"]).Trim().ToLower() == "allied course" && subtypeaccr.ToLower().Trim() == "ac")
                                            {
                                                aliedCredit += dummycredit;
                                            }
                                            double checkmarkmm = 0;
                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out checkmarkmm);
                                            double maxsubbtotal = 0;
                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["maxtotal"]).Trim(), out maxsubbtotal);
                                            if (maxsubbtotal != 0)
                                                checkmarkmm = checkmarkmm / maxsubbtotal * 100;
                                            checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                            string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + checkmarkmm + "' between frange and trange";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                            {
                                                gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "'  and '" + checkmarkmm + "' between frange and trange";//added by sridhar 
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            }
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                                {
                                                    if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                    {
                                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out grade_points);
                                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out Marks);
                                                        if (maxsubbtotal != 0)
                                                        {
                                                            grade_points = grade_points / maxsubbtotal * 100;
                                                            Marks = Marks / maxsubbtotal * 100;
                                                        }
                                                        grade_points = grade_points / 10;
                                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["credit_points"]), out Credit_Points);
                                                        creditstotal = creditstotal + Credit_Points;
                                                        partwpmsum += (Credit_Points * Marks);
                                                        partsums = partsums + (grade_points * Credit_Points);
                                                    }
                                                }
                                            }
                                        }
                                        if (creditstotal == 0)
                                        {
                                            sumpart = "0.000";
                                            wpm = "0.00";
                                        }
                                        else if (creditstotal > 0)
                                        {
                                            partsums = (partsums / creditstotal);
                                            partsums = Math.Round(partsums, 3, MidpointRounding.AwayFromZero);
                                            partwpmsum = (partwpmsum / creditstotal);
                                            partwpmsum = Math.Round(partwpmsum, 2, MidpointRounding.AwayFromZero);
                                            sumpart = String.Format("{0:0.000}", partsums);
                                            wpm = string.Format("{0:0.00}", partwpmsum);
                                        }
                                        else
                                        {
                                            sumpart = "0.000";
                                            wpm = "0.00";
                                        }
                                    }
                                    else if (partrowcount > 0)
                                    {
                                        sumpart = "0.000";
                                        wpm = "0.00";
                                    }
                                    else
                                    {
                                        sumpart = "---";
                                        wpm = "---";
                                    }
                                    if (sumpart != "---")
                                    {
                                        double sumpartgrade = 0;
                                        if (double.TryParse(sumpart, out sumpartgrade))
                                        {
                                            sumpartgrade = Convert.ToDouble(sumpart);
                                            overalltotgrade = overalltotgrade + sumpartgrade;
                                        }
                                        else
                                        {
                                            sumpartgrade = 0;
                                        }
                                        if (clasipg == false)
                                        {
                                            tblcgpaclass.Cell(4, 1).SetContent(creditstotal);
                                            tblcgpaclass.Cell(4, 3).SetContent(sumpart);
                                            tblcgpaclass.Cell(4, 2).SetContent(wpm);
                                        }
                                        else
                                        {
                                            tblcgpaclass.Cell(2, 1).SetContent(creditstotal);
                                            tblcgpaclass.Cell(2, 3).SetContent(sumpart);
                                            tblcgpaclass.Cell(2, 2).SetContent(wpm);
                                        }
                                        batchsetting = "1";
                                        if (noofsubfailed != 0 && overalltotgrade >= 6)
                                        {
                                            string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                            string cclass = "First Class";
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                if (clasipg == false)
                                                {
                                                    tblcgpaclass.Cell(4, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                    tblcgpaclass.Cell(4, 5).SetContent(cclass);
                                                }
                                                else
                                                {
                                                    tblcgpaclass.Cell(2, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                    tblcgpaclass.Cell(2, 5).SetContent(cclass);
                                                }
                                            }
                                            else
                                            {
                                                if (clasipg == false)
                                                {
                                                    tblcgpaclass.Cell(4, 4).SetContent("A");
                                                    tblcgpaclass.Cell(4, 5).SetContent(cclass);
                                                }
                                                else
                                                {
                                                    tblcgpaclass.Cell(2, 4).SetContent("A");
                                                    tblcgpaclass.Cell(2, 5).SetContent(cclass);
                                                }
                                            }
                                            if (clasipg == false)
                                            {
                                                tblcgpaclass.Cell(4, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblcgpaclass.Cell(4, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                            else
                                            {
                                                tblcgpaclass.Cell(2, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblcgpaclass.Cell(2, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                        }
                                        else
                                        {
                                            string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                if (clasipg == false)
                                                {
                                                    tblcgpaclass.Cell(4, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                    tblcgpaclass.Cell(4, 5).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                                }
                                                else
                                                {
                                                    tblcgpaclass.Cell(2, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                    tblcgpaclass.Cell(2, 5).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                                }
                                            }
                                            if (clasipg == false)
                                            {
                                                tblcgpaclass.Cell(4, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblcgpaclass.Cell(4, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                            else
                                            {
                                                tblcgpaclass.Cell(2, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblcgpaclass.Cell(2, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (clasipg == false)
                                        {
                                            tblcgpaclass.Cell(4, 1).SetContent(creditstotal);
                                            tblcgpaclass.Cell(4, 3).SetContent(sumpart);
                                            tblcgpaclass.Cell(4, 2).SetContent(wpm);
                                        }
                                        else
                                        {
                                            tblcgpaclass.Cell(2, 1).SetContent(creditstotal);
                                            tblcgpaclass.Cell(2, 3).SetContent(sumpart);
                                            tblcgpaclass.Cell(2, 2).SetContent(wpm);
                                        }
                                    }
                                }
                                else
                                {
                                    if (clasipg == false)
                                    {
                                        tblcgpaclass.Cell(4, 1).SetContent("---");
                                        tblcgpaclass.Cell(4, 3).SetContent("---");
                                        tblcgpaclass.Cell(4, 2).SetContent("---");
                                    }
                                    else
                                    {
                                        tblcgpaclass.Cell(2, 1).SetContent("---");
                                        tblcgpaclass.Cell(2, 3).SetContent("---");
                                        tblcgpaclass.Cell(2, 2).SetContent("---");
                                    }
                                }
                                partsums = 0;
                                partrowcount = 0;
                                creditstotal = 0;
                                partwpmsum = 0;
                                overalltotgrade = 0;
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    string sumpart = string.Empty;
                                    string wpm = string.Empty;
                                    DataView dv_demand_data = new DataView();
                                    DataView dv_demand_datadummy = new DataView();
                                    int part = 4;
                                    if (clasipg == false)
                                    {
                                        part = 4;
                                    }
                                    else
                                    {
                                        part = 2;
                                    }
                                    printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='" + part + "'";
                                    dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                                    partrowcount = dv_demand_datadummy.Count;
                                    printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='" + part + "' and result='pass'";
                                    dtPart1 = printds_rows.Tables[0].DefaultView.ToTable();
                                    if (clasipg == false)
                                    {
                                        tblcgpaclass.Cell(5, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(5, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(5, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(5, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(5, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    }
                                    else
                                    {
                                        tblcgpaclass.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(3, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(3, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(3, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(3, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    }
                                    if (dtPart1.Rows.Count > 0 && partrowcount == dtPart1.Rows.Count)
                                    {
                                        for (int sum = 0; sum < dtPart1.Rows.Count; sum++)
                                        {
                                            double checkmarkmm = 0;
                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out checkmarkmm);
                                            double maxsubbtotal = 0;
                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["maxtotal"]).Trim(), out maxsubbtotal);
                                            if (maxsubbtotal != 0)
                                                checkmarkmm = checkmarkmm / maxsubbtotal * 100;
                                            checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                            string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + checkmarkmm + "' between frange and trange";//added by sridhar 16/aug 2014
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                            {
                                                gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "'  and '" + checkmarkmm + "' between frange and trange";
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            }
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                                {
                                                    if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                    {
                                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out grade_points);
                                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out Marks);
                                                        if (maxsubbtotal != 0)
                                                        {
                                                            grade_points = grade_points / maxsubbtotal * 100;
                                                            Marks = Marks / maxsubbtotal * 100;
                                                        }
                                                        grade_points = grade_points / 10;
                                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["credit_points"]), out Credit_Points);
                                                        creditstotal = creditstotal + Credit_Points;
                                                        partwpmsum += (Credit_Points * Marks);
                                                        partsums = partsums + (grade_points * Credit_Points);
                                                    }
                                                }
                                            }
                                        }
                                        if (creditstotal == 0)
                                        {
                                            sumpart = "0.000";
                                            wpm = "0.00";
                                        }
                                        else if (creditstotal > 0)
                                        {
                                            partsums = (partsums / creditstotal);
                                            partsums = Math.Round(partsums, 3, MidpointRounding.AwayFromZero);
                                            partwpmsum = (partwpmsum / creditstotal);
                                            partwpmsum = Math.Round(partwpmsum, 2, MidpointRounding.AwayFromZero);
                                            sumpart = String.Format("{0:0.000}", partsums);
                                            wpm = string.Format("{0:0.00}", partwpmsum);
                                        }
                                        else
                                        {
                                            sumpart = "0.000";
                                            wpm = "0.00";
                                        }
                                    }
                                    else if (partrowcount > 0)
                                    {
                                        sumpart = "0.000";
                                        wpm = "0.00";
                                    }
                                    else
                                    {
                                        sumpart = "---";
                                        wpm = "---";
                                    }
                                    if (sumpart != "---")
                                    {
                                        double sumpartgrade = 0;
                                        if (double.TryParse(sumpart, out sumpartgrade))
                                        {
                                            sumpartgrade = Convert.ToDouble(sumpart);
                                            // overalltotgrade = overalltotgrade + sumpartgrade;
                                            overalltotgrade = overalltotgrade + sumpartgrade;
                                        }
                                        else
                                        {
                                            sumpartgrade = 0;
                                        }
                                        if (clasipg == false)
                                        {
                                            tblcgpaclass.Cell(5, 1).SetContent(creditstotal);
                                            tblcgpaclass.Cell(5, 3).SetContent(sumpart);
                                            tblcgpaclass.Cell(5, 2).SetContent(wpm);
                                        }
                                        else
                                        {
                                            tblcgpaclass.Cell(3, 1).SetContent(creditstotal + splcredit);
                                            tblcgpaclass.Cell(3, 3).SetContent("---");
                                            tblcgpaclass.Cell(3, 2).SetContent("---");
                                        }
                                        batchsetting = "1";
                                        if (noofsubfailed != 0 && overalltotgrade >= 6)
                                        {
                                            string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                            string cclass = "First Class";
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                if (clasipg == false)
                                                {
                                                    tblcgpaclass.Cell(5, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                    tblcgpaclass.Cell(5, 5).SetContent(cclass);
                                                }
                                                else
                                                {
                                                    tblcgpaclass.Cell(3, 4).SetContent("---");
                                                    tblcgpaclass.Cell(3, 5).SetContent("---");
                                                }
                                            }
                                            else
                                            {
                                                if (clasipg == false)
                                                {
                                                    tblcgpaclass.Cell(5, 4).SetContent(Convert.ToString("A"));
                                                    tblcgpaclass.Cell(5, 5).SetContent(cclass);
                                                }
                                                else
                                                {
                                                    tblcgpaclass.Cell(3, 4).SetContent("---");
                                                    tblcgpaclass.Cell(3, 5).SetContent("---");
                                                }
                                            }
                                            if (clasipg == false)
                                            {
                                                tblcgpaclass.Cell(5, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblcgpaclass.Cell(5, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                            else
                                            {
                                                tblcgpaclass.Cell(3, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblcgpaclass.Cell(3, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                        }
                                        else
                                        {
                                            string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                if (clasipg == false)
                                                {
                                                    tblcgpaclass.Cell(5, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                    tblcgpaclass.Cell(5, 5).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                                }
                                                else
                                                {
                                                    tblcgpaclass.Cell(3, 4).SetContent("---");
                                                    tblcgpaclass.Cell(3, 5).SetContent("---");
                                                }
                                            }
                                            if (clasipg == false)
                                            {
                                                tblcgpaclass.Cell(5, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblcgpaclass.Cell(5, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                            else
                                            {
                                                tblcgpaclass.Cell(3, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblcgpaclass.Cell(3, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (clasipg == false)
                                        {
                                            tblcgpaclass.Cell(5, 1).SetContent(creditstotal);
                                            tblcgpaclass.Cell(5, 3).SetContent(sumpart);
                                            tblcgpaclass.Cell(5, 2).SetContent(wpm);
                                        }
                                        else
                                        {
                                            tblcgpaclass.Cell(3, 1).SetContent(creditstotal + splcredit);
                                            tblcgpaclass.Cell(3, 3).SetContent("---");
                                            tblcgpaclass.Cell(3, 2).SetContent("---");
                                        }
                                    }
                                }
                                else
                                {
                                    if (clasipg == false)
                                    {
                                        tblcgpaclass.Cell(5, 1).SetContent("---");
                                        tblcgpaclass.Cell(5, 3).SetContent("---");
                                        tblcgpaclass.Cell(5, 2).SetContent("---");
                                    }
                                    else
                                    {
                                        tblcgpaclass.Cell(3, 1).SetContent("---");
                                        tblcgpaclass.Cell(3, 3).SetContent("---");
                                        tblcgpaclass.Cell(3, 2).SetContent("---");
                                    }
                                }
                            }
                            PdfTable tblPass = mydoc.NewTable(fontcgpa, 3, 2, 3);
                            tblPass.VisibleHeaders = false;
                            tblPass.SetBorders(Color.Black, 1, BorderType.None);
                            tblPass.SetColumnsWidth(new int[] { 255, 100 });
                            if (clasipg == false)
                            {
                                tblPass.Cell(0, 1).SetContent(setng_mintotalcreadits);
                                tblPass.Cell(1, 1).SetContent(overallcreditearned + splcredit);
                                tblPass.Cell(2, 1).SetContent("PASS");
                                tblPass.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblPass.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblPass.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblPass.Cell(0, 1).SetCellPadding(10);
                                tblPass.Cell(1, 1).SetCellPadding(10);
                                tblPass.Cell(2, 1).SetCellPadding(10);
                            }
                            else
                            {
                                if (degree.Trim().ToLower() == "mca" || degree.Trim().ToLower().Trim('.') == "m.c.a")
                                {
                                    tblPass.Cell(0, 1).SetContent(setng_mintotalcreadits);
                                }
                                else
                                {
                                    tblPass.Cell(0, 1).SetContent(setng_mintotalcreadits);
                                }
                                tblPass.Cell(0, 1).SetCellPadding(10);
                                tblPass.Cell(1, 1).SetCellPadding(10);
                                tblPass.Cell(2, 1).SetCellPadding(10);
                                tblPass.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblPass.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblPass.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblPass.Cell(1, 1).SetContent(overallcreditearned + splcredit);
                                tblPass.Cell(2, 1).SetContent("PASS");
                            }
                            newpdftabpage2 = tblPass.CreateTablePage(new PdfArea(mydoc, 482, 815, 250, 250));
                            mypdfpage.Add(newpdftabpage2);
                            // x=13,y=70.8,W= ,H= 
                            newpdftabpage2 = tblcgpaclass.CreateTablePage(new PdfArea(mydoc, 0, 815, 730, 150));
                            mypdfpage.Add(newpdftabpage2);
                        }
                        pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 50, 990, 71, 25), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                        mypdfpage.Add(pdfdoi);
                        mypdfpage.SaveToDocument();
                    }
                    else
                    {
                        if (lblerror1 == "")
                        {
                            lblerror1 = rollnosub;
                        }
                        else
                        {
                            lblerror1 = lblerror1 + "," + rollnosub;
                        }
                    }
                }
            }
            if (lblerror1 != "")
            {
                lblerror.Text = lblerror1;
                lblerror.Visible = true;
            }
            else
            {
                lblerror.Text = string.Empty;
                lblerror.Visible = false;
            }
            if (printpage == true)
            {
                string appPath = HttpContext.Current.Server.MapPath("~");
                if (appPath != "")
                {
                    string szPath = appPath + "/Report/";
                    string szFile = "consolidatedmarksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                    mydoc.SaveToFile(szPath + szFile);
                    Response.ClearHeaders();
                    Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                    Response.ContentType = "application/pdf";
                    Response.WriteFile(szPath + szFile);
                }
            }
        }
        catch (Exception ex)
        {
            lblerror.Visible = true;
            lblerror.Text = Convert.ToString(ex).Trim();
        }
    }

    #endregion

    #region Vocational Format

    public void ugconsolidatedGradeMarkForVocational()
    {
        try
        {
            DataSet printds = new DataSet();
            string lblerror1 = string.Empty;
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            //578
            string max_sem = string.Empty;
            int maxSem = 0;
            Boolean printpage = false;
            string edu_level = string.Empty;
            string degree = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string roman = string.Empty;
            string semroman = string.Empty;
            string grade = string.Empty;
            string gradepoints = string.Empty;
            string coe = string.Empty;
            string subjectcode_Part1 = string.Empty;
            string subjectcode_Part2 = string.Empty;
            string subjectcode_Part3 = string.Empty;
            string subjectcode_Part4 = string.Empty;
            string cal_gpa = string.Empty;
            string current_semester = string.Empty;
            string app_no = string.Empty;
            string subtype = string.Empty;
            string admid_date = string.Empty;
            string additionalmsg = string.Empty;
            bool onlyca = false;
            bool onlyes = false;
            DataSet gradeds = new DataSet();
            DataSet dsSpl = new DataSet();
            DataTable dtStar = new DataTable();
            double ugpgminpass = 0;
            Font fontdegreename = new Font("Times New Roman", 14, FontStyle.Bold);
            Font fontStudDetails = new Font("Times New Roman", 11, FontStyle.Bold);
            Font fontStmtMarks = new Font("Times New Roman", 11, FontStyle.Regular);
            Font fontcgpa = new Font("Times New Roman", 11, FontStyle.Regular);
            Font fontDate = new Font("Times New Roman", 11, FontStyle.Regular);
            Font f1_cos10bold = new Font("Times New Roman", 10, FontStyle.Bold);
            Font f2_cos9bold = new Font("Comic Sans MS", 9, FontStyle.Bold);
            Font f3_arial10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font f4_arial7reg = new Font("Arial", 7, FontStyle.Regular);
            Font f5_pal10bold = new Font("Palatino Linotype", 10, FontStyle.Bold);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(25.5, 35.6));
            PdfPage mypdfpage;
            FpSpread2.SaveChanges();
            int selectedcount = 0;
            bool needDuplicate = false;
            string duplicateNumber = string.Empty;
            for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
            {
                int isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                if (isval == 1)
                {
                    selectedcount++;
                }
            }
            if (ddlreporttype.SelectedItem.Value == "5" || ddlreporttype.SelectedItem.Value == "8")
            {
                if (divDuplicate.Visible == true && chkDuplicateMarksheet.Checked && txtDuplicateNumber.Enabled)
                {
                    if (string.IsNullOrEmpty(txtDuplicateNumber.Text.Trim()))
                    {
                        //lbl_popuperr.Text = "Please Enter Duplicate Marksheet Number And Then Proceed";
                        //errdiv.Visible = true;
                        //return;
                        needDuplicate = false;
                    }
                    else if (selectedcount > 1)
                    {
                        //lbl_popuperr.Text = "Please Select Only One Student To Take Duplicate Marksheet";
                        //errdiv.Visible = true;
                        //return;
                        needDuplicate = false;
                    }
                    else
                    {
                        duplicateNumber = txtDuplicateNumber.Text.Trim();
                        needDuplicate = true;
                    }
                }
            }
            for (int res = 1; res < Convert.ToInt32(FpSpread2.Sheets[0].RowCount); res++)
            {
                int isval = 0;
                int additonalstatus = 0;
                onlyca = false;
                onlyes = false;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                additionalmsg = string.Empty;
                int splcredit = 0;
                if (isval == 1)
                {
                    ugpgminpass = 0;
                    printds.Clear();
                    printds.Dispose();
                    printds_new.Clear();
                    printds_new.Dispose();
                    string grade_set = string.Empty;
                    rollnosub = Convert.ToString(FpSpread2.Sheets[0].Cells[res, 1].Text).Trim();
                    regnumber = Convert.ToString(FpSpread2.Sheets[0].Cells[res, 2].Text).Trim();
                    int setng_ovrtotalcreadits = 0;
                    int setng_mintotalcreadits = 0;
                    int totalcreitdsened = 0;
                    int noofsubapplied = 0;
                    int noofsubpassed = 0;
                    int noofsubfailed = 0;
                    int Totalfailcount = 0;
                    int tot_credits = 0;
                    int Tot_credit_settings = 0;
                    DataSet DsExamYear = new DataSet();
                    string QuaeryExamYear = " Select distinct ed.Exam_Year,ed.exam_month,sm.semester  from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc,Exam_Details ed where sm.syll_code=ss.syll_code and ss.syll_code=s.syll_code and sm.syll_code=s.syll_code and sc.subject_no=s.subject_no and sc.subject_no=m.subject_no and sc.roll_no=m.roll_no and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and ed.exam_code=m.exam_code and ed.Batch_year=sm.batch_year and sm.degree_code=ed.degree_code and  result='pass'  and m.roll_no='" + rollnosub + "' order by ed.Exam_Year asc,ed.exam_month asc";
                    DsExamYear = d2.select_method_wo_parameter(QuaeryExamYear, "Text");

                    string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 105) as dob,c.edu_level,CONVERT(VARCHAR(11),R.Adm_Date,106) as ADM_DATE FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'; select * from exam_details ; ";
                    //sql = sql + "  select count(distinct s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
                    //sql = sql + " select count(distinct s.subject_no) as total from subjectchooser sc,syllabus_master sm,subject s,registration r where sm.syll_code=s.syll_code and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
                    //sql = sql + ";   Select count(distinct subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'; ";
                    //sql = sql + "   Select count(distinct subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail'  and roll_no='" + rollnosub + "'; select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass');  ";
                    sql += " select count(distinct s.subject_no) as total from subjectchooser sc,syllabus_master sm,subject s,registration r where sm.syll_code=s.syll_code and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'; ";
                    sql += " Select count(distinct s.subject_no) as total from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectchooser sc where sm.syll_code=s.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and ss.syll_code=s.syll_code and ss.syll_code=sm.syll_code and s.subject_no=sc.subject_no and sc.subject_no=m.subject_no and sc.roll_no=m.roll_no and  m.result='pass'  and m.roll_no='" + rollnosub + "';";
                    sql += " Select count(distinct s.subject_no) as total from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectchooser sc where sm.syll_code=s.syll_code and sm.syll_code=ss.syll_code and s.syll_code=ss.syll_code and sc.roll_no=m.roll_no and sc.subject_no=s.subject_no and sc.subject_no=m.subject_no and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='fail'  and m.roll_no='" + rollnosub + "'; ";
                    sql += " select distinct m.subject_no from mark_entry m,subjectChooser sc,subject s,syllabus_master sm where m.roll_no=sc.roll_no and s.syll_code=sm.syll_code and s.subject_no=sc.subject_no and s.subject_no=m.subject_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc,syllabus_master sm,subject s where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and sm.syll_code=s.syll_code and s.subject_no=m.subject_no and s.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass');";
                    sql += " select distinct COUNT(teq.Equal_Subject_Code),teq.Com_Subject_Code from  subjectchooser sc,subject s,registration r , tbl_equal_paper_Matching teq   where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no   and r.roll_no='" + rollnosub + "'  and teq.Equal_Subject_Code=s.subject_code group by teq.Com_Subject_Code having COUNT(teq.Equal_Subject_Code)>1; Select sum(credit_points) from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'";
                    sql = sql + "     Select distinct  subject.subject_no, subject_name, subject_code from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail'  and roll_no='" + rollnosub + "'  and SUBSTRING(subject_code,7,1)!='M'    and  subject.subject_no not in (Select subject.subject_no from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'   and roll_no='" + rollnosub + "')";
                    sql = sql + "     Select distinct  subject.subject_no, subject_name, subject_code from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail'  and roll_no='" + rollnosub + "'    and SUBSTRING(subject_code,7,1)='M'    and  subject.subject_no not in (Select subject.subject_no from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'   and roll_no='" + rollnosub + "')";
                    sql = sql + "  SELECT STUFF((SELECT distinct ''',''' + convert(nvarchar(max),[subject_code])  FROM subject sy   where  subject_name='Computer training'   FOR XML PATH('')),1,1,'''') as [Roll_No]";
                    string qry = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 105) as dob,c.edu_level,CONVERT(VARCHAR(11),R.Adm_Date,106) as ADM_DATE FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'; ";
                    qry += " select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';";
                    qry += " select * from exam_details ed,Registration r where ed.batch_year=r.Batch_Year and ed.degree_code=r.degree_code and r.Roll_No='" + rollnosub + "' order by exam_code; ";
                    qry += " select count(distinct s.subject_no) as total from subjectchooser sc,syllabus_master sm,subject s,registration r where sm.syll_code=s.syll_code and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'; ";
                    qry += " Select count(distinct s.subject_no) as total from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectchooser sc where sm.syll_code=s.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and ss.syll_code=s.syll_code and ss.syll_code=sm.syll_code and s.subject_no=sc.subject_no and sc.subject_no=m.subject_no and sc.roll_no=m.roll_no and  m.result='pass'  and m.roll_no='" + rollnosub + "';";
                    qry += " Select count(distinct s.subject_no) as total from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectchooser sc where sm.syll_code=s.syll_code and sm.syll_code=ss.syll_code and s.syll_code=ss.syll_code and sc.roll_no=m.roll_no and sc.subject_no=s.subject_no and sc.subject_no=m.subject_no and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='fail'  and m.roll_no='" + rollnosub + "';  ";
                    qry += " select distinct m.subject_no from mark_entry m,subjectChooser sc,subject s,syllabus_master sm where m.roll_no=sc.roll_no and s.syll_code=sm.syll_code and s.subject_no=sc.subject_no and s.subject_no=m.subject_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc,syllabus_master sm,subject s where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and sm.syll_code=s.syll_code and s.subject_no=m.subject_no and s.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass'); ";
                    qry += " select distinct COUNT(teq.Equal_Subject_Code),teq.Com_Subject_Code from  subjectchooser sc,subject s,registration r , tbl_equal_paper_Matching teq,syllabus_master sm where sc.roll_no=r.roll_no and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and sm.syll_code=s.syll_code  and s.subject_no=sc.subject_no   and r.roll_no='" + rollnosub + "'  and teq.Equal_Subject_Code=s.subject_code group by teq.Com_Subject_Code having COUNT(teq.Equal_Subject_Code)>1;";
                    qry += " Select sum(credit_points) from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and s.syll_code=ss.syll_code and ss.syll_code=sm.syll_code and s.subject_no=sc.subject_no and sc.roll_no=m.roll_no and sc.subject_no=m.subject_no and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='pass'  and m.roll_no='" + rollnosub + "'";
                    qry += " Select distinct  s.subject_no,subject_name, subject_code from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and s.syll_code=ss.syll_code and sm.syll_code=ss.syll_code and sc.subject_no=m.subject_no and sc.subject_no=s.subject_no and sc.roll_no=m.roll_no and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='fail'  and m.roll_no='" + rollnosub + "'  and SUBSTRING(s.subject_code,7,1)!='M'    and  s.subject_no not in (Select s.subject_no from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and sm.syll_code=ss.syll_code and ss.syll_code=s.syll_code and sc.roll_no=m.roll_no and sc.subject_no=m.subject_no and sc.subject_no=s.subject_no and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='pass' and m.roll_no='" + rollnosub + "')  ";
                    qry += " Select distinct  s.subject_no, subject_name, subject_code from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and s.syll_code=ss.syll_code and sm.syll_code=ss.syll_code and sc.subject_no=s.subject_no and sc.subject_no=m.subject_no and sc.roll_no=m.roll_no and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='fail' and m.roll_no='" + rollnosub + "' and SUBSTRING(subject_code,7,1)='M'    and  s.subject_no not in (Select s.subject_no from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and sc.subject_no=s.subject_no and sc.subject_no =m.subject_no and sc.roll_no=m.roll_no and sm.syll_code=ss.syll_code and ss.syll_code=s.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='pass' and m.roll_no='" + rollnosub + "') ";
                    qry += " SELECT STUFF((SELECT distinct ''',''' + convert(nvarchar(max),[subject_code]) FROM subject sy,syllabus_master sm,Registration r,subjectChooser sc where sm.syll_code=sy.syll_code and sy.subject_no=sc.subject_no and sc.roll_no=r.Roll_No and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and subject_name='Computer training' FOR XML PATH('')),1,1,'''') as [Roll_No] ; ";
                    printds = da.select_method_wo_parameter(qry, "Text");
                    if (printds.Tables.Count > 0)
                    {
                        noofsubapplied = Convert.ToInt32(Convert.ToString(printds.Tables[3].Rows[0][0]).Trim());
                        //noofsubapplied = noofsubapplied - Convert.ToInt32(printds.Tables[7].Rows.Count);
                        noofsubpassed = Convert.ToInt32(Convert.ToString(printds.Tables[4].Rows[0][0]).Trim());
                        noofsubfailed = Convert.ToInt32(Convert.ToString(printds.Tables[5].Rows[0][0]).Trim());
                        Totalfailcount = printds.Tables[6].Rows.Count;
                        int.TryParse(Convert.ToString(printds.Tables[8].Rows[0][0]).Trim(), out tot_credits);
                    }
                    //if (edu_level.Trim().ToLower() == "ug" && noofsubpassed != noofsubapplied)
                    //{
                    //    int subjectmissed = noofsubapplied - noofsubpassed;
                    //    if (subjectmissed <= 2)
                    //    {
                    //        noofsubpassed = noofsubapplied;
                    //    }
                    //}
                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                    {
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim();
                        edu_level = Convert.ToString(printds.Tables[0].Rows[0]["edu_level"]).Trim();
                        app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]).Trim();
                        mypdfpage = mydoc.NewPage();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        coe = Convert.ToString(printds.Tables[1].Rows[0]["coe"]).Trim();
                        admid_date = Convert.ToString(printds.Tables[0].Rows[0]["ADM_DATE"]).Trim();
                        if (CbCommonCredits.Checked == true)
                        {
                            setng_ovrtotalcreadits = Convert.ToInt32(da.GetFunctionv("select totalcredits from coe_ovrl_credits_Dts where degree_code='" + degree_code + "' and isCommon='0'"));
                            setng_mintotalcreadits = Convert.ToInt32(da.GetFunctionv("select minimcredits from coe_ovrl_credits_Dts where degree_code='" + degree_code + "' and isCommon='0'"));
                        }
                        else if (CbCommonCredits.Checked == false)
                        {
                            setng_ovrtotalcreadits = Convert.ToInt32(da.GetFunctionv("select totalcredits from coe_ovrl_credits_Dts where degree_code='" + degree_code + "' and isCommon='1' and batchYear='" + ddlbatch.SelectedItem.Text + "'"));
                            setng_mintotalcreadits = Convert.ToInt32(da.GetFunctionv("select minimcredits from coe_ovrl_credits_Dts where degree_code='" + degree_code + "' and isCommon='1' and batchYear='" + ddlbatch.SelectedItem.Text + "'"));
                        }
                        max_sem = d2.GetFunctionv("select max(NDurations) asNDurations from ndegree where batch_year='" + batch_year + "'  and Degree_code='" + degree_code + "'");

                        if (max_sem == "" || max_sem == null)
                        {
                            max_sem = d2.GetFunctionv("SELECT Max(Duration) as Duration FROM Degree where  Degree_Code='" + degree_code + "'");
                        }
                        int.TryParse(max_sem, out maxSem);
                        int newbatch = 0;
                        int.TryParse(batch_year, out newbatch);
                        DateTime dt = new DateTime();
                        int cur_year = DateTime.Now.Year;
                        int diff = newbatch + (maxSem / 2);
                        if (cur_year >= diff)
                        {
                        }
                        else
                        {
                            lbl_popuperr.Text = "The Consolidated is Generated Only For Passed Out Students.";
                            errdiv.Visible = true;
                            return;
                        }
                    }
                    if (edu_level.Trim().ToLower() == "ug" && noofsubpassed > 0 && noofsubapplied > 0 && noofsubpassed != noofsubapplied)
                    {
                        string comcode = string.Empty;
                        DataSet dspassorfail = new DataSet();
                        DataView dvcomptraing = new DataView();
                        DataView dvcomsubject = new DataView();
                        int comsubjectcount = 0;
                        DataSet dssequalpaers = new DataSet();
                        ArrayList comsubjects = new ArrayList();
                        for (int isub = 0; isub < printds.Tables[9].Rows.Count; isub++)
                        {
                            string commsubjectpaper1 = da.GetFunctionv("select Com_Subject_Code from tbl_equal_paper_Matching where Equal_Subject_Code='" + Convert.ToString(printds.Tables[9].Rows[isub][2]).Trim() + "' ");
                            sql = "  select * from tbl_equal_paper_Matching where  Com_Subject_Code  in ('" + commsubjectpaper1 + "') ";
                            dssequalpaers.Clear();
                            dssequalpaers = da.select_method_wo_parameter(sql, "Text");
                            if (dssequalpaers.Tables.Count > 0 && dssequalpaers.Tables[0].Rows.Count > 0)
                            {
                                for (int eqlpap = 0; eqlpap < dssequalpaers.Tables[0].Rows.Count; eqlpap++)
                                {
                                    string syllcode = da.GetFunctionv("select syll_code from subject where subject_no='" + Convert.ToString(printds.Tables[9].Rows[isub][0]).Trim() + "'");
                                    string equlpapersubjectno = da.GetFunctionv("select subject_no from subject where syll_code='" + syllcode + "' and  subject_code='" + Convert.ToString(dssequalpaers.Tables[0].Rows[eqlpap]["Equal_Subject_Code"]).Trim() + "'  ");
                                    if (equlpapersubjectno.Trim() != "" && equlpapersubjectno.Trim() != "0")
                                    {
                                        dspassorfail.Clear();
                                        dspassorfail = da.select_method_wo_parameter(" select * from mark_entry where subject_no='" + equlpapersubjectno + "' and  result='pass' and roll_no='" + rollnosub + "'  ", "Text");
                                        if (dspassorfail.Tables.Count > 0 && dspassorfail.Tables[0].Rows.Count > 0)
                                        {
                                            if (!comsubjects.Contains(commsubjectpaper1))
                                            {
                                                comsubjectcount++;
                                                comsubjects.Add(commsubjectpaper1);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        string computersubjectcode = Convert.ToString(printds.Tables[11].Rows[0][0]).Trim();
                        if (computersubjectcode != "")
                        {
                            computersubjectcode = computersubjectcode.Remove(0, 2);
                            computersubjectcode = computersubjectcode + "'";
                        }
                        printds.Tables[10].DefaultView.RowFilter = "subject_code in (" + computersubjectcode + ")";
                        dvcomptraing = printds.Tables[10].DefaultView;
                        int majorpaperscount = printds.Tables[10].Rows.Count;
                        int comcodecount = 0;
                        if (dvcomptraing.Count > 0)
                        {
                            majorpaperscount = printds.Tables[10].Rows.Count - dvcomptraing.Count;
                            comcodecount = comcodecount + 1;
                        }
                        comcodecount = Convert.ToInt32(printds.Tables[9].Rows.Count) - comsubjectcount;
                        int subjectmissed = noofsubapplied - noofsubpassed;
                        if (printds.Tables[10].Rows.Count <= 2 && subjectmissed <= 2 && comcodecount == 0 && setng_ovrtotalcreadits != setng_mintotalcreadits)
                        {
                            noofsubpassed = noofsubapplied;
                        }
                    }
                    //if (printds.Tables[0].Rows.Count > 0 && noofsubpassed == noofsubapplied)
                    if (printds.Tables[0].Rows.Count > 0 && noofsubpassed > 0 && noofsubapplied > 0 && noofsubpassed == noofsubapplied) //Totalfailcount == 0)
                    {
                        PdfTable tblstudDetail;
                        PdfTextArea pdfdoi;
                        PdfImage LogoImage2;
                        PdfTablePage newpdftabpage2;
                        PdfTable fullmark;
                        PdfTextArea pdfDuplicateNo;
                        printpage = true;
                        string principal = string.Empty;
                        edu_level = Convert.ToString(printds.Tables[0].Rows[0]["edu_level"]).Trim();
                        app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]).Trim();
                        mypdfpage = mydoc.NewPage();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        coe = Convert.ToString(printds.Tables[1].Rows[0]["coe"]).Trim();
                        admid_date = Convert.ToString(printds.Tables[0].Rows[0]["ADM_DATE"]).Trim();
                        string[] adm_dt = admid_date.Split(' ');
                        if (adm_dt.Length > 0)
                        {
                            if (adm_dt.Length == 3)
                                admid_date = adm_dt[2] + " - JUN";//+ adm_dt[1]
                        }
                        //admid_date.ToString("yyyy-MMM");
                        //DateTime dt = new DateTime();
                        // //DateTime dt = new DateTime();
                        // //           exam_held = (dtsub.Rows.Count > 0) ? Convert.ToString(dtsub.Rows[0]["exam_date"]).Trim() : string.Empty;
                        // //           if (exam_held != "")
                        // //           {
                        // //               DateTime.TryParseExact(exam_held, "dd/MM/yyyy", null, DateTimeStyles.None, out dt);
                        ////           }M/dd/yyyy hh:mm:ss tt
                        //DateTime.TryParseExact(admid_date, "dd/MM/yyyy", null, DateTimeStyles.None, out dt);
                        //admid_date = dt.ToString("yyyy-MMM");
                        string[] spiltcoe = coe.Split(' ');
                        string newcoe = string.Empty;
                        for (int ce = 1; ce < spiltcoe.GetUpperBound(0); ce++)
                        {
                            string[] spiltcoe12 = spiltcoe[0].Split('.');
                            if (spiltcoe12.Length == 3)
                            {
                                newcoe = Convert.ToString(spiltcoe12[1]).Trim();
                                newcoe = newcoe + "." + Convert.ToString(spiltcoe12[2]).Trim();
                            }
                            if (newcoe == "")
                            {
                                newcoe = Convert.ToString(spiltcoe[ce]).Trim();
                            }
                            else
                            {
                                newcoe = newcoe + " " + Convert.ToString(spiltcoe[ce]).Trim();
                            }
                        }
                        coe = newcoe;
                        principal = Convert.ToString(printds.Tables[1].Rows[0]["principal"]).Trim();
                        string[] spiltprinci = principal.Split('.');
                        string newprinc = string.Empty;
                        for (int ce = 1; ce <= spiltprinci.GetUpperBound(0); ce++)
                        {
                            if (newprinc == "")
                            {
                                newprinc = Convert.ToString(spiltprinci[ce]).Trim();
                            }
                            else
                            {
                                newprinc = newprinc + "." + Convert.ToString(spiltprinci[ce]).Trim();
                            }
                        }
                        principal = newprinc.ToUpper();
                        // month = ddlMonth.SelectedIndex;
                        //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                        string strMonthName = string.Empty;
                        //monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        //monthandyear = monthandyear.ToUpper();
                        studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        branch = Convert.ToString(printds.Tables[0].Rows[0]["Dept_name"]).Trim();
                        dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]).Trim();
                        string stdappno = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim();
                        if (sem == "1")
                        {
                            semroman = "I";
                        }
                        else if (sem == "2")
                        {
                            semroman = "II";
                        }
                        else if (sem == "3")
                        {
                            semroman = "III";
                        }
                        else if (sem == "4")
                        {
                            semroman = "IV";
                        }
                        else if (sem == "5")
                        {
                            semroman = "V";
                        }
                        else if (sem == "6")
                        {
                            semroman = "VI";
                        }
                        else if (sem == "7")
                        {
                            semroman = "VII";
                        }
                        else if (sem == "8")
                        {
                            semroman = "VIII";
                        }
                        // x=248,y=70.8,W=80 ,H= 50
                        pdfdoi = new PdfTextArea(fontdegreename, System.Drawing.Color.Black, new PdfArea(mydoc, 227, 55, 100, 25), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString(degree));
                        mypdfpage.Add(pdfdoi);
                        //if (needDuplicate)
                        //{
                        //    pdfDuplicateNo = new PdfTextArea(fontdegreename, System.Drawing.Color.Black, new PdfArea(mydoc, mydoc.PageWidth - 270, 85, 250, 35), System.Drawing.ContentAlignment.MiddleRight, Convert.ToString(duplicateNumber));
                        //    mypdfpage.Add(pdfDuplicateNo);
                        //}
                        if (needDuplicate)
                        {
                            pdfDuplicateNo = new PdfTextArea(fontStudDetails, System.Drawing.Color.Black, new PdfArea(mydoc, 83, 25, 150, 200), System.Drawing.ContentAlignment.TopLeft, Convert.ToString("DUPLICATE OF NO\t:\t\t" + duplicateNumber + "\t\t\nDT\t:\t" + txtDuplicateDate.Text).Trim());
                            mypdfpage.Add(pdfDuplicateNo);
                        }
                        // sql3 = "Select syllabus_master.semester,Subject_Type,subject_name,subject_code,subject.subject_no,result,max_int_marks,max_ext_marks,internal_mark,external_mark,total,maxtotal,grade,cp,credit_points,mark_entry.subject_no,semester,maxtotal,exam_code,subject.Part_Type,sub_sem.priority,sub_sem.lab,subject.subjectpriority,SUBSTRING(subject_code,(LEN(subject_code)-2) ,1) as Prac_code from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "' order by syllabus_master.semester,isnull(subject.Part_Type,'3') asc,case when (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='F' and lab=0) then null when (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='M' and lab=0) then 'A' when (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='M' and lab=1) then 'B' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='A' and lab=0) then 'C' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='A' and lab=1) then 'D' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,0)='E' and lab=1) then 'E' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='E' and lab=1) then 'F' Else SUBSTRING(subject_code,(LEN(subject_code)-2) ,1) End asc,subject.subjectpriority,sub_sem.lab,subject_type desc,subject_code asc"; hide by sridhar
                        //sql3 = "Select syllabus_master.semester,Subject_Type,subject_name,subject_code,subject.subject_no,result,max_int_marks,max_ext_marks,internal_mark,external_mark,total,maxtotal,grade,cp,credit_points,mark_entry.subject_no,semester,maxtotal,exam_code,subject.Part_Type,sub_sem.priority,sub_sem.lab,subject.subjectpriority,SUBSTRING(subject_code,(LEN(subject_code)-2) ,1) as Prac_code,Subject.print_acronmy from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "' order by syllabus_master.semester, subject.subjectpriority ";
                        sql3 = "Select distinct sm.semester,ss.subject_type,s.subject_name,s.subject_code,s.subject_no,m.result,s.max_int_marks,s.max_ext_marks,m.internal_mark,m.external_mark,m.total,s.maxtotal,m.grade,m.cp,s.credit_points,sm.semester,s.mintotal,m.exam_code,ISNULL(s.Part_Type,'0') Part_Type,isnull(ss.priority,'0') priority,ss.lab,isNUll(s.subjectpriority,'0') subjectpriority,SUBSTRING(subject_code,(LEN(subject_code)-2) ,1) as Prac_code,ISNULL(s.print_acronmy,'') as print_acronmy from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=ss.syll_code and ss.syll_code=s.syll_code and sm.syll_code=s.syll_code and sc.subject_no=s.subject_no and sc.subject_no=m.subject_no and sc.roll_no=m.roll_no and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  result='pass'  and m.roll_no='" + rollnosub + "' order by sm.semester, subjectpriority ";
                        printds_rows.Clear();
                        printds_rows.Dispose();
                        printds_rows = da.select_method_wo_parameter(sql3, "Text");
                        string stdphtsql = "select * from StdPhoto where app_no='" + stdappno + "'";
                        MemoryStream memoryStream = new MemoryStream();
                        DataSet dsstdpho = new DataSet();
                        dsstdpho.Clear();
                        dsstdpho.Dispose();
                        dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                        if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                        {
                            byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                            memoryStream.Write(file, 0, file.Length);
                            if (file.Length > 0)
                            {
                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                {
                                }
                                else
                                {
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                }
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                        {
                            LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                            mypdfpage.Add(LogoImage2, 645, 25, 420);
                        }
                        else
                        {
                        }
                        string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-";
                        if (edu_level.Trim().ToLower() == "ug")
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 3)).Trim();
                            grade_set = "0";
                            ugpgminpass = 50;
                        }
                        else
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 2)).Trim();
                            grade_set = "1";
                            ugpgminpass = 50;
                        }
                        tblstudDetail = mydoc.NewTable(fontStudDetails, 1, 5, 5);
                        tblstudDetail.VisibleHeaders = false;
                        tblstudDetail.SetBorders(Color.Black, 1, BorderType.None);
                        tblstudDetail.SetColumnsWidth(new int[] { 255, 100, 108, 157, 90 });
                        tblstudDetail.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudDetail.Cell(0, 0).SetContent(studname);
                        tblstudDetail.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(0, 1).SetContent(dob);
                        tblstudDetail.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(0, 2).SetContent(regnumber);
                        tblstudDetail.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudDetail.Cell(0, 3).SetContent(branch);
                        tblstudDetail.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(0, 4).SetContent(admid_date.ToUpper());
                        newpdftabpage2 = tblstudDetail.CreateTablePage(new PdfArea(mydoc, 0, 115, 730, 50));
                        mypdfpage.Add(newpdftabpage2);
                        double overallcreditearned = 0;
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            int rowSpecial = 0;
                            //if (chk_finalsemmrk_sheet.Checked)
                            //{
                            string nwqry = "select s.subject_name,scs.Subject_No,App_no,MarkType,IsFinalsem,CurrentSem,s.credit_points,ss.subject_type,s.acronym,s.print_acronmy from SpecialCourseSubject scs,subject s,sub_sem ss where s.subject_no=scs.Subject_No and ss.subType_no=s.subType_no and App_no='" + stdappno + "' ";
                            //and CurrentSem='" + maxSem + "' and IsFinalsem='1'
                            dsSpl = d2.select_method_wo_parameter(nwqry, "Text");
                            rowSpecial = dsSpl.Tables[0].Rows.Count;
                            //}
                            bool starP3 = false;
                            string[] star = new string[2];
                            ArrayList arr_star = new ArrayList();
                            double[] starmrk = new double[2];
                            double[] starcredit = new double[2];
                            double[] stargpa = new double[2];
                            double[] starwpm = new double[2];
                            tot_credits = tot_credits + 1;
                            int creditsdiff = 0;
                            if (tot_credits > setng_mintotalcreadits)
                            {
                                creditsdiff = tot_credits - setng_mintotalcreadits;
                                creditsdiff = creditsdiff / 5;
                            }
                            string removesubjetcs = string.Empty;
                            DataSet cutsubject = new DataSet();
                            if (creditsdiff > 0)
                            {
                                sql = "Select  top " + creditsdiff + " subject.subject_code,credit_points from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "' and Part_Type=3 and SUBSTRING(subject_code,7,1)='M' order by total asc,credit_points asc,syllabus_master.semester asc,subject.subjectpriority asc";//syllabus_master.semester asc
                                cutsubject.Clear();
                                cutsubject = da.select_method_wo_parameter(sql, "Text");
                                int removecredites = 0;
                                for (int ii = 0; ii < cutsubject.Tables[0].Rows.Count; ii++)
                                {
                                    if (removecredites == 0)
                                    {
                                        removecredites = Convert.ToInt32(Convert.ToString(cutsubject.Tables[0].Rows[ii][1]).Trim());
                                    }
                                    else
                                    {
                                        removecredites = removecredites + Convert.ToInt32(Convert.ToString(cutsubject.Tables[0].Rows[ii][1]).Trim());
                                    }
                                }
                                if (removecredites <= 10)
                                {
                                    for (int ii = 0; ii < cutsubject.Tables[0].Rows.Count; ii++)
                                    {
                                        if (removesubjetcs.Trim() == "")
                                        {
                                            removesubjetcs = Convert.ToString(cutsubject.Tables[0].Rows[ii][0]).Trim();
                                        }
                                        else
                                        {
                                            removesubjetcs = removesubjetcs + "," + Convert.ToString(cutsubject.Tables[0].Rows[ii][0]).Trim();
                                        }
                                        arr_star.Add(Convert.ToString(cutsubject.Tables[0].Rows[ii][0]).Trim());
                                    }
                                }
                                else
                                {
                                    removesubjetcs = Convert.ToString(cutsubject.Tables[0].Rows[0][0]).Trim();
                                    arr_star.Add(Convert.ToString(cutsubject.Tables[0].Rows[0][0]).Trim());
                                }
                            }
                            if ((edu_level.Trim().ToLower() == "ug") && tot_credits >= setng_mintotalcreadits)
                            {
                                starP3 = true;
                                additionalmsg = "*\t-\tAdditional Credit Papers of Part-III are not included in the Overall Result";
                                if (arr_star.Count == 0)
                                {
                                    additionalmsg = string.Empty;
                                }
                            }
                            else
                            {
                                starP3 = false;
                                additionalmsg = string.Empty;
                            }
                            fullmark = mydoc.NewTable(fontStmtMarks, printds_rows.Tables[0].Rows.Count + maxSem + rowSpecial + 4, 10, 1);
                            fullmark.VisibleHeaders = false;
                            fullmark.SetBorders(Color.Black, 1, BorderType.None);
                            fullmark.Columns[0].SetWidth(71);
                            fullmark.Columns[1].SetWidth(250);
                            fullmark.Columns[2].SetWidth(43);
                            fullmark.Columns[3].SetWidth(43);
                            fullmark.Columns[4].SetWidth(43);
                            fullmark.Columns[5].SetWidth(51);
                            fullmark.Columns[6].SetWidth(51);
                            fullmark.Columns[7].SetWidth(43);
                            fullmark.Columns[8].SetWidth(43);
                            fullmark.Columns[9].SetWidth(71);
                            int mr = 0;
                            double maxInternalCheck = 0;
                            double maxExtenalCheck = 0;
                            if (ddlFormats.SelectedIndex == 0)
                            {
                                maxInternalCheck = 50;
                                maxExtenalCheck = 50;
                            }
                            else
                            {
                                maxInternalCheck = 25;
                                maxExtenalCheck = 75;
                            }
                            int semescount = 0; //Checkjairam
                            for (int s = 1; s <= maxSem; s++)
                            {
                                semescount++;
                                string Exam_NewCode = string.Empty;
                                DataView dvMark = new DataView();
                                printds_rows.Tables[0].DefaultView.RowFilter = "semester='" + s + "'";
                                dvMark = printds_rows.Tables[0].DefaultView;
                                if (dvMark.Count > 0)
                                {
                                    for (int i = 0; i < dvMark.Count; i++)
                                    {
                                        if (mr != 0 && mr % 44 == 0)
                                        {
                                            if (mr % 44 == 0)
                                            {
                                                fullmark.Cell(mr, 1).SetCellPadding(5);
                                                fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                fullmark.Cell(mr, 1).SetContent("--- STATEMENT CONTINUED ---");
                                                newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 0, 177, 730, 650));
                                                mypdfpage.Add(newpdftabpage2);
                                                pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 42, 985, 71, 25), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                                                mypdfpage.Add(pdfdoi);
                                                //if (needDuplicate)
                                                //{
                                                //    pdfDuplicateNo = new PdfTextArea(fontdegreename, System.Drawing.Color.Black, new PdfArea(mydoc, mydoc.PageWidth - 270, 85, 250, 35), System.Drawing.ContentAlignment.MiddleRight, Convert.ToString(duplicateNumber));
                                                //    mypdfpage.Add(pdfDuplicateNo);
                                                //}
                                                if (needDuplicate)
                                                {
                                                    pdfDuplicateNo = new PdfTextArea(fontStudDetails, System.Drawing.Color.Black, new PdfArea(mydoc, 83, 25, 150, 200), System.Drawing.ContentAlignment.TopLeft, Convert.ToString("DUPLICATE OF NO\t:\t\t" + duplicateNumber + "\t\t\nDT\t:\t" + txtDuplicateDate.Text));
                                                    mypdfpage.Add(pdfDuplicateNo);
                                                }
                                                mypdfpage.SaveToDocument();

                                                mypdfpage = mydoc.NewPage();
                                                mr = 0;
                                                pdfdoi = new PdfTextArea(fontdegreename, System.Drawing.Color.Black, new PdfArea(mydoc, 227, 55, 100, 25), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(degree));
                                                mypdfpage.Add(pdfdoi);
                                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                                {
                                                    LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                                                    mypdfpage.Add(LogoImage2, 645, 25, 420);
                                                }
                                                else
                                                {
                                                }
                                                tblstudDetail = mydoc.NewTable(fontStudDetails, 1, 5, 5);
                                                tblstudDetail.VisibleHeaders = false;
                                                tblstudDetail.SetBorders(Color.Black, 1, BorderType.None);
                                                tblstudDetail.SetColumnsWidth(new int[] { 255, 100, 108, 157, 90 });
                                                tblstudDetail.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                tblstudDetail.Cell(0, 0).SetContent(studname);
                                                tblstudDetail.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblstudDetail.Cell(0, 1).SetContent(dob);
                                                tblstudDetail.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblstudDetail.Cell(0, 2).SetContent(regnumber);
                                                tblstudDetail.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                tblstudDetail.Cell(0, 3).SetContent(branch);
                                                tblstudDetail.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblstudDetail.Cell(0, 4).SetContent(admid_date.ToUpper());
                                                newpdftabpage2 = tblstudDetail.CreateTablePage(new PdfArea(mydoc, 0, 115, 730, 50));
                                                mypdfpage.Add(newpdftabpage2);
                                                fullmark = mydoc.NewTable(fontStmtMarks, printds_rows.Tables[0].Rows.Count + maxSem + rowSpecial + 4, 10, 1);
                                                fullmark.VisibleHeaders = false;
                                                fullmark.SetBorders(Color.Black, 1, BorderType.None);
                                                fullmark.Columns[0].SetWidth(71);
                                                fullmark.Columns[1].SetWidth(250);
                                                fullmark.Columns[2].SetWidth(43);
                                                fullmark.Columns[3].SetWidth(43);
                                                fullmark.Columns[4].SetWidth(43);
                                                fullmark.Columns[5].SetWidth(51);
                                                fullmark.Columns[6].SetWidth(51);
                                                fullmark.Columns[7].SetWidth(43);
                                                fullmark.Columns[8].SetWidth(43);
                                                fullmark.Columns[9].SetWidth(71);
                                                fullmark.Cell(mr, 1).SetCellPadding(5);
                                                fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                fullmark.Cell(mr, 1).SetContent("--- CONTINUATION OF STATEMENT ---");
                                                mr += 2;
                                            }
                                            bool calgpa = true;
                                            fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 0).SetContent(Convert.ToString(dvMark[i]["subject_code"]));
                                            fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 1).SetContent(Convert.ToString(dvMark[i]["subject_name"]));
                                            string subtypeaccr = string.Empty;
                                            string sub_code = Convert.ToString(dvMark[i]["subject_code"]).Trim();
                                            subtypeaccr = Convert.ToString(dvMark[i]["subject_type"]);
                                            string printcronmy = Convert.ToString(dvMark[i]["print_acronmy"]);
                                            if (printcronmy.Trim() != "")
                                            {
                                                subtypeaccr = printcronmy;
                                            }
                                            else
                                            {
                                                subtypeaccr = findSubTypeAccromy(subtypeaccr);
                                                if (subtypeaccr.ToUpper().Trim() == "PRAC")
                                                {
                                                    //if (Convert.ToString(dvMark[i]["subject_name"]).ToLower() == "computer training" || Convert.ToString(dvMark[i]["subject_name"]).ToLower() == "skillbased computer training intro.to information techn. & ms office")
                                                    if (Convert.ToString(dvMark[i]["subject_name"]).ToLower().Trim().Contains("computer training"))
                                                    {
                                                        subtypeaccr = "CT";
                                                    }
                                                    if (subtypeaccr.ToUpper().Trim() == "PRAC")
                                                    {
                                                        string gt_sub_code = sub_code.Substring(sub_code.Length - 3, 1);
                                                        if (gt_sub_code.ToUpper().Trim() == "M")
                                                        {
                                                            subtypeaccr = "MC";
                                                        }
                                                        else if (gt_sub_code.ToUpper().Trim() == "A")
                                                        {
                                                            subtypeaccr = "AC";
                                                        }
                                                        else if (gt_sub_code.ToUpper().Trim() == "E")
                                                        {
                                                            subtypeaccr = "EC";
                                                        }
                                                        else if (gt_sub_code.ToUpper().Trim() == "L")
                                                        {
                                                            subtypeaccr = "GE";
                                                        }
                                                        else
                                                        {
                                                            subtypeaccr = "PRAC";
                                                        }
                                                    }
                                                }
                                            }
                                            fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 2).SetContent(subtypeaccr);
                                            double internalmmark = 0;
                                            double externalmark1 = 0;
                                            double totalintext = 0;
                                            double maxInternalMarks = 0;
                                            double maxExternalMarks = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["internal_mark"]), out internalmmark);
                                            fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            string maxinternal = Convert.ToString(dvMark[i]["max_int_marks"]).Trim();
                                            string maxexternal = Convert.ToString(dvMark[i]["max_ext_marks"]).Trim();
                                            double submaxtot = 0;// Convert.ToDouble(dvMark[i]["maxtotal"]);
                                            double.TryParse(Convert.ToString(dvMark[i]["maxtotal"]).Trim(), out submaxtot);
                                            double extfinal = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["external_mark"]), out extfinal);

                                            double.TryParse(Convert.ToString(maxinternal).Trim(), out maxInternalMarks);
                                            double.TryParse(Convert.ToString(maxexternal).Trim(), out maxExternalMarks);

                                            extfinal = Math.Round(extfinal, 0);
                                            externalmark1 = extfinal;
                                            string checkedmark = string.Empty;
                                            if (extfinal < 0)
                                            {
                                                checkedmark = loadmarkat(Convert.ToString(extfinal));
                                            }
                                            else
                                            {
                                                checkedmark = Convert.ToString(extfinal);
                                            }
                                            if (internalmmark >= 0)
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = internalmmark + externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = internalmmark;
                                                }
                                            }
                                            else
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = 0;
                                                }
                                            }
                                            onlyca = false;
                                            onlyes = false;
                                            if (maxinternal == "0")
                                            {
                                                onlyes = true;
                                            }
                                            if (maxexternal == "0")
                                            {
                                                onlyca = true;
                                            }
                                            fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            if (onlyes == true && extfinal >= 0)
                                            {
                                                fullmark.Cell(mr, 5).SetContent(checkedmark + "/" + submaxtot.ToString());
                                            }
                                            else if (onlyes == false)//Rajkumar 
                                            {

                                                if (maxExtenalCheck != maxExternalMarks && Convert.ToDouble(checkedmark) >= 0)
                                                {
                                                    fullmark.Cell(mr, 5).SetContent(checkedmark + "/" + maxExternalMarks);
                                                }
                                                else
                                                    fullmark.Cell(mr, 5).SetContent(checkedmark);
                                            }

                                            else
                                            {
                                                fullmark.Cell(mr, 5).SetContent(checkedmark);
                                            }


                                            if (onlyca == true && internalmmark >= 0)
                                            {
                                                fullmark.Cell(mr, 4).SetContent(internalmmark + "/" + submaxtot.ToString());
                                            }
                                            else if (onlyes == false)//Rajkumar 
                                            {

                                                if (maxInternalCheck != maxInternalMarks && Convert.ToDouble(internalmmark) >= 0)
                                                {
                                                    fullmark.Cell(mr, 4).SetContent(internalmmark + "/" + maxInternalMarks);
                                                }
                                                else
                                                    fullmark.Cell(mr, 4).SetContent(internalmmark);
                                            }


                                            else
                                            {
                                                fullmark.Cell(mr, 4).SetContent("NA");
                                                additonalstatus = 1;
                                            }
                                            if (onlyca)
                                            {
                                                fullmark.Cell(mr, 5).SetContent("NA");
                                                additonalstatus = 1;
                                            }
                                            double totfinal = 0;

                                            totfinal = Math.Round(totalintext, 0, MidpointRounding.AwayFromZero);

                                            fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal));
                                            if (submaxtot != 100 || onlyes == true || onlyca == true)
                                            {
                                                fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal + "/" + submaxtot));
                                            }
                                            double credit = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["credit_points"]), out credit);
                                            overallcreditearned += credit;
                                            fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            if (starP3 == true)
                                            {
                                                if (arr_star.Contains(sub_code))
                                                {
                                                    fullmark.Cell(mr, 3).SetContent(Convert.ToString(dvMark[i]["credit_points"] + "*").Trim());
                                                }
                                                else
                                                {
                                                    fullmark.Cell(mr, 3).SetContent(Convert.ToString(dvMark[i]["credit_points"]).Trim());
                                                }
                                            }
                                            else
                                            {
                                                fullmark.Cell(mr, 3).SetContent(Convert.ToString(dvMark[i]["credit_points"]));
                                            }
                                            double checkmarkmm = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["total"]).Trim(), out checkmarkmm);
                                            checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                            if (submaxtot != 100 && submaxtot != 0)
                                            {
                                                double getmark = checkmarkmm / submaxtot * 100;
                                                getmark = Math.Round(getmark, 0, MidpointRounding.AwayFromZero);
                                                checkmarkmm = getmark;
                                            }
                                            string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + checkmarkmm + "' between Frange and Trange";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                            {
                                                gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "'  and '" + checkmarkmm + "' between Frange and Trange";//added by sridhar 
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            }
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                                {
                                                    if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                    {
                                                        grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
                                                        gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
                                                    }
                                                }
                                            }
                                            double gradeibtpoint = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["total"]).Trim(), out gradeibtpoint);
                                            if (submaxtot != 100 && submaxtot != 0)
                                            {
                                                double getmark = gradeibtpoint / submaxtot * 100;
                                                getmark = Math.Round(getmark, 1, MidpointRounding.AwayFromZero);
                                                gradeibtpoint = getmark;
                                            }
                                            gradeibtpoint = gradeibtpoint / 10;
                                            gradeibtpoint = Math.Round(gradeibtpoint, 1, MidpointRounding.AwayFromZero);
                                            string gp = String.Format("{0:0.0}", gradeibtpoint);
                                            gradepoints = Convert.ToString(gradeibtpoint);
                                            gradepoints = Convert.ToString(Math.Round(Convert.ToDouble(gradeibtpoint), 1, MidpointRounding.AwayFromZero));
                                            gradepoints = String.Format("{0:0.0}", gradepoints);
                                            string result = Convert.ToString(dvMark[i]["result"]).Trim().ToLower();
                                            if (result == "fail")
                                            {
                                                result = "RA";
                                                grade = "U";
                                            }
                                            else if (result == "pass")
                                            {
                                                result = "P";
                                            }
                                            else
                                            {
                                                result = "AB";
                                                grade = "U";
                                            }
                                            totfinal = totfinal * Convert.ToDouble(credit);
                                            fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 8).SetContent(grade);
                                            fullmark.Cell(mr, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 7).SetContent(gp);
                                            totfinal = Math.Round(totfinal, 0, MidpointRounding.AwayFromZero);
                                            fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            DataView dv = new DataView();
                                            printds.Tables[2].DefaultView.RowFilter = "exam_code='" + Convert.ToString(dvMark[i]["exam_code"]).Trim() + "'";
                                            dv = printds.Tables[2].DefaultView;
                                            if (dv.Count > 0)
                                            {
                                                string exam_y = Convert.ToString(dv[0]["Exam_year"]).Trim();
                                                string exam_m = Convert.ToString(dv[0]["Exam_Month"]).Trim();
                                                strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                                strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                                strMonthName = exam_y + " - " + strMonthName.ToUpper() + " ";
                                                fullmark.Cell(mr, 9).SetContent(strMonthName);
                                            }
                                            mr++;
                                        }
                                        else
                                        {
                                            bool calgpa = true;
                                            fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 0).SetContent(Convert.ToString(dvMark[i]["subject_code"]).Trim());
                                            fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 1).SetContent(Convert.ToString(dvMark[i]["subject_name"]).Trim());
                                            string subtypeaccr = string.Empty;
                                            string sub_code = Convert.ToString(dvMark[i]["subject_code"]).Trim();
                                            subtypeaccr = Convert.ToString(dvMark[i]["subject_type"]).Trim();
                                            string printcronmy = Convert.ToString(dvMark[i]["print_acronmy"]).Trim();
                                            if (printcronmy.Trim() != "")
                                            {
                                                subtypeaccr = printcronmy;
                                            }
                                            else
                                            {
                                                subtypeaccr = findSubTypeAccromy(subtypeaccr);
                                                if (subtypeaccr.ToUpper().Trim() == "PRAC")
                                                {
                                                    // if (Convert.ToString(dvMark[i]["subject_name"]).ToLower() == "computer training" || Convert.ToString(dvMark[i]["subject_name"]).ToLower() == "skillbased computer training intro.to information techn. & ms office")
                                                    if (Convert.ToString(dvMark[i]["subject_name"]).ToLower().Trim().Contains("computer training"))
                                                    {
                                                        subtypeaccr = "CT";
                                                    }
                                                    if (subtypeaccr.ToUpper().Trim() == "PRAC")
                                                    {
                                                        string gt_sub_code = sub_code.Substring(sub_code.Length - 3, 1);
                                                        if (gt_sub_code.ToUpper().Trim() == "M")
                                                        {
                                                            subtypeaccr = "MC";
                                                        }
                                                        else if (gt_sub_code.ToUpper().Trim() == "A")
                                                        {
                                                            subtypeaccr = "AC";
                                                        }
                                                        else if (gt_sub_code.ToUpper().Trim() == "E")
                                                        {
                                                            subtypeaccr = "EC";
                                                        }
                                                        else if (gt_sub_code.ToUpper().Trim() == "L" || gt_sub_code.ToUpper().Trim() == "I")
                                                        {
                                                            subtypeaccr = "GE";
                                                        }
                                                        else
                                                        {
                                                            subtypeaccr = "PRAC";
                                                        }
                                                    }
                                                }
                                            }
                                            fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 2).SetContent(subtypeaccr);
                                            double internalmmark = 0;
                                            double externalmark1 = 0;
                                            double totalintext = 0;
                                            double maxInternalMarks = 0;
                                            double maxExternalMarks = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["internal_mark"]).Trim(), out internalmmark);
                                            fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            double submaxtot = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["maxtotal"]).Trim(), out submaxtot);
                                            string maxinternal = Convert.ToString(dvMark[i]["max_int_marks"]).Trim();
                                            string maxexternal = Convert.ToString(dvMark[i]["max_ext_marks"]).Trim();
                                            double extfinal = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["external_mark"]).Trim(), out extfinal);

                                            double.TryParse(Convert.ToString(maxinternal).Trim(), out maxInternalMarks);
                                            double.TryParse(Convert.ToString(maxexternal).Trim(), out maxExternalMarks);

                                            extfinal = Math.Round(extfinal, 0);
                                            externalmark1 = extfinal;
                                            string checkedmark = string.Empty;
                                            if (extfinal < 0)
                                            {
                                                checkedmark = loadmarkat(Convert.ToString(extfinal));
                                            }
                                            else
                                            {
                                                checkedmark = Convert.ToString(extfinal);
                                            }
                                            if (internalmmark >= 0)
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = internalmmark + externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = internalmmark;
                                                }
                                            }
                                            else
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = 0;
                                                }
                                            }
                                            onlyca = false;
                                            onlyes = false;
                                            if (maxinternal == "0")
                                            {
                                                onlyes = true;
                                            }
                                            if (maxexternal == "0")
                                            {
                                                onlyca = true;
                                            }
                                            fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            if (onlyes == true && extfinal >= 0)
                                            {
                                                fullmark.Cell(mr, 5).SetContent(checkedmark + "/" + submaxtot.ToString());
                                            }
                                            else if (onlyes == false)//Rajkumar 
                                            {
                                                if (maxExtenalCheck != maxExternalMarks && Convert.ToDouble(checkedmark) >= 0)
                                                {
                                                    fullmark.Cell(mr, 5).SetContent(checkedmark + "/" + maxExternalMarks);
                                                }
                                                else
                                                    fullmark.Cell(mr, 5).SetContent(checkedmark);

                                            }
                                            else
                                            {
                                                fullmark.Cell(mr, 5).SetContent(checkedmark);
                                            }
                                            if (onlyca == true && internalmmark >= 0)
                                            {
                                                fullmark.Cell(mr, 4).SetContent(internalmmark + "/" + submaxtot.ToString());
                                            }

                                            else if (onlyes == false)//Rajkumar 
                                            {

                                                if (maxInternalCheck != maxInternalMarks && Convert.ToDouble(internalmmark) >= 0)
                                                {
                                                    fullmark.Cell(mr, 4).SetContent(internalmmark + "/" + maxInternalMarks);
                                                }
                                                else
                                                    fullmark.Cell(mr, 4).SetContent(internalmmark);
                                            }

                                            else
                                            {
                                                fullmark.Cell(mr, 4).SetContent("NA");
                                                additonalstatus = 1;
                                            }
                                            if (onlyca)
                                            {
                                                fullmark.Cell(mr, 5).SetContent("NA");
                                                additonalstatus = 1;
                                            }
                                            double totfinal = 0;
                                            totfinal = Math.Round(totalintext, 0, MidpointRounding.AwayFromZero);
                                            fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal));
                                            if (submaxtot != 100 || onlyca == true || onlyes == true)
                                            {
                                                fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal + "/" + submaxtot).Trim());
                                            }
                                            double credit = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["credit_points"]).Trim(), out credit);
                                            overallcreditearned += credit;
                                            fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            if (starP3 == true)
                                            {
                                                if (arr_star.Contains(sub_code))
                                                {
                                                    fullmark.Cell(mr, 3).SetContent(Convert.ToString(dvMark[i]["credit_points"] + "*").Trim());
                                                }
                                                else
                                                {
                                                    fullmark.Cell(mr, 3).SetContent(Convert.ToString(dvMark[i]["credit_points"]).Trim());
                                                }
                                            }
                                            else
                                            {
                                                fullmark.Cell(mr, 3).SetContent(Convert.ToString(dvMark[i]["credit_points"]).Trim());
                                            }
                                            double checkmarkmm = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["total"]).Trim(), out checkmarkmm);
                                            checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                            if (submaxtot != 100 && submaxtot != 0)
                                            {
                                                double getmark = checkmarkmm / submaxtot * 100;
                                                getmark = Math.Round(getmark, 2, MidpointRounding.AwayFromZero);
                                                checkmarkmm = getmark;
                                            }
                                            string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + checkmarkmm + "' between Frange and Trange";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                            {
                                                gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "'  and '" + checkmarkmm + "' between Frange and Trange";
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            }
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                                {
                                                    if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                    {
                                                        grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
                                                        gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
                                                    }
                                                }
                                            }
                                            double gradeibtpoint = 0;
                                            double.TryParse(Convert.ToString(dvMark[i]["total"]).Trim(), out gradeibtpoint);
                                            if (submaxtot != 100 && submaxtot != 0)
                                            {
                                                gradeibtpoint = gradeibtpoint / submaxtot * 10;
                                            }
                                            else
                                            {
                                                gradeibtpoint = gradeibtpoint / 10;
                                            }
                                            gradeibtpoint = Math.Round(gradeibtpoint, 1, MidpointRounding.AwayFromZero);
                                            string gp = String.Format("{0:0.0}", gradeibtpoint);
                                            gradepoints = Convert.ToString(gradeibtpoint);
                                            gradepoints = Convert.ToString(Math.Round(Convert.ToDouble(gradeibtpoint), 1, MidpointRounding.AwayFromZero));
                                            gradepoints = String.Format("{0:0.0}", gradepoints);
                                            string result = Convert.ToString(dvMark[i]["result"]).ToLower().Trim();
                                            if (result == "fail")
                                            {
                                                result = "RA";
                                                grade = "U";
                                            }
                                            else if (result == "pass")
                                            {
                                                result = "P";
                                            }
                                            else
                                            {
                                                result = "AB";
                                                grade = "U";
                                            }
                                            totfinal = totfinal * Convert.ToDouble(credit);
                                            fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 8).SetContent(grade);
                                            fullmark.Cell(mr, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 7).SetContent(gp);
                                            totfinal = Math.Round(totfinal, 0, MidpointRounding.AwayFromZero);
                                            fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            DataView dv = new DataView();
                                            printds.Tables[2].DefaultView.RowFilter = "exam_code='" + Convert.ToString(dvMark[i]["exam_code"]).Trim() + "'";
                                            dv = printds.Tables[2].DefaultView;
                                            Exam_NewCode = Convert.ToString(dvMark[i]["exam_code"]).Trim();
                                            if (dv.Count > 0)
                                            {
                                                string exam_y = Convert.ToString(dv[0]["Exam_year"]).Trim();
                                                string exam_m = Convert.ToString(dv[0]["Exam_Month"]).Trim();
                                                strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                                strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                                strMonthName = exam_y + " - " + strMonthName.ToUpper() + " ";
                                                fullmark.Cell(mr, 9).SetContent(strMonthName);
                                            }
                                            mr++;
                                        }
                                    }
                                    if (dsSpl.Tables.Count > 0 && dsSpl.Tables[0].Rows.Count > 0)
                                    {
                                        bool PartFlag = false;
                                        dsSpl.Tables[0].DefaultView.RowFilter = "currentsem='" + s + "'";
                                        DataView dvset = dsSpl.Tables[0].DefaultView;
                                        if (dvset.Count > 0)
                                        {
                                            string Finla = Convert.ToString(dvset[0]["IsFinalSem"]);
                                            string subj = string.Empty;
                                            //  mr++;
                                            if ((edu_level.Trim().ToLower() == "ug"))
                                            {
                                                splcredit = 1;
                                                if (Finla.Trim() == "1" || Finla.Trim().ToLower() == "true")
                                                {
                                                    subj = "Part V " + Convert.ToString(dvset[0]["Subject_name"]).Trim();
                                                }
                                                else
                                                {
                                                    subj = "Part III " + Convert.ToString(dvset[0]["Subject_name"]).Trim();
                                                    PartFlag = true;
                                                }
                                                fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                fullmark.Cell(mr, 1).SetContent(subj);
                                                fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            }
                                            else
                                            {
                                                splcredit = 2;
                                                if (Finla.Trim() == "1" || Finla.Trim().ToLower() == "true")
                                                {
                                                    subj = "Part II " + Convert.ToString(dvset[0]["Subject_name"]).Trim();
                                                }
                                                else
                                                {
                                                    subj = "" + Convert.ToString(dvset[0]["Subject_name"]).Trim();
                                                }
                                                fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                fullmark.Cell(mr, 1).SetContent(subj);
                                                fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            }
                                            string subtypeaccr = Convert.ToString(dvset[0]["Subject_name"]).Trim();
                                            subtypeaccr = findSubTypeAccromy(subtypeaccr);
                                            fullmark.Cell(mr, 2).SetContent(Convert.ToString(dvset[0]["acronym"]).Trim());
                                            fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 3).SetContent(splcredit);
                                            fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 4).SetContent("NA");
                                            fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 5).SetContent("NA");
                                            fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            string markType = Convert.ToString(dsSpl.Tables[0].Rows[0]["MarkType"]).Trim();
                                            string markGrade = string.Empty;
                                            //if (Convert.ToString(dsSpl.Tables[0].Rows[0]["MarkType"]).Trim() == "1")
                                            //{
                                            //    fullmark.Cell(mr, 6).SetContent("Good");
                                            //}
                                            //else if (Convert.ToString(dvset[0]["MarkType"]).Trim() == "2")
                                            //{
                                            //    fullmark.Cell(mr, 6).SetContent("Excellent");
                                            //}
                                            //else if (Convert.ToString(dvset[0]["MarkType"]).Trim() == "3")
                                            //{
                                            //    fullmark.Cell(mr, 6).SetContent("Outstanding");
                                            //}
                                            //else if (Convert.ToString(dvset[0]["MarkType"]).Trim() == "4")
                                            //{
                                            //    fullmark.Cell(mr, 6).SetContent("Average");
                                            //}
                                            switch (markType)
                                            {
                                                case "1":
                                                    markGrade = "Good";
                                                    break;
                                                case "2":
                                                    markGrade = "Excellent";
                                                    break;
                                                case "3":
                                                    markGrade = "Outstanding";
                                                    break;
                                                case "4":
                                                    markGrade = "Average";
                                                    break;
                                            }
                                            fullmark.Cell(mr, 6).SetContent(markGrade);
                                            fullmark.Cell(mr, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 7).SetContent("NA");
                                            fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 8).SetContent("NA");

                                            DataView dv1 = new DataView();
                                            if (PartFlag == false)
                                            {
                                                printds.Tables[2].DefaultView.RowFilter = "degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and Exam_year='" + batch_year1.Split('-')[1] + "'";
                                                dv1 = printds.Tables[2].DefaultView;
                                                dv1.Sort = "exam_code,current_semester";
                                            }
                                            else if (PartFlag == true)
                                            {
                                                DsExamYear.Tables[0].DefaultView.RowFilter = "semester='" + s + "'";
                                                dv1 = DsExamYear.Tables[0].DefaultView;
                                            }
                                            if (dv1.Count > 0)
                                            {
                                                string exam_y = Convert.ToString(dv1[0]["Exam_year"]).Trim();
                                                string exam_m = Convert.ToString(dv1[0]["Exam_Month"]).Trim();
                                                strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                                strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                                strMonthName = exam_y + " - " + strMonthName.ToUpper() + " ";
                                                fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(mr, 9).SetContent(strMonthName);
                                            }
                                            mr++;
                                        }

                                    }
                                    //else
                                    //{
                                    //    fullmark.Cell(mr, 9).SetCellPadding(5);
                                    //}
                                    fullmark.Rows[mr].SetCellPadding(5);
                                    //fullmark.Cell(mr, 9).SetCellPadding(5);
                                    mr++;

                                }
                            }
                            fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            fullmark.Cell(mr, 1).SetFont(fontStmtMarks);
                            fullmark.Cell(mr, 1).SetContent("--- END OF STATEMENT ---");
                            if (rowSpecial == 0)
                            {
                                splcredit = 0;
                            }
                            else
                            {
                                //if (dsSpl.Tables.Count > 0 && dsSpl.Tables[0].Rows.Count > 0)
                                //{
                                //    if ((edu_level.Trim().ToLower() == "ug"))
                                //    {
                                //        splcredit = 1;
                                //        fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                //        fullmark.Cell(mr, 1).SetContent("Part V " + Convert.ToString(dsSpl.Tables[0].Rows[0]["Subject_name"]).Trim());
                                //        fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    }
                                //    else
                                //    {
                                //        splcredit = 2;
                                //        fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                //        fullmark.Cell(mr, 1).SetContent("Part II " + Convert.ToString(dsSpl.Tables[0].Rows[0]["Subject_name"]).Trim());
                                //        fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    }
                                //    string subtypeaccr = Convert.ToString(dsSpl.Tables[0].Rows[0]["Subject_name"]).Trim();
                                //    subtypeaccr = findSubTypeAccromy(subtypeaccr);
                                //    fullmark.Cell(mr, 2).SetContent(Convert.ToString(dsSpl.Tables[0].Rows[0]["acronym"]).Trim());
                                //    fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    fullmark.Cell(mr, 3).SetContent(splcredit);
                                //    fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    fullmark.Cell(mr, 4).SetContent("NA");
                                //    fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    fullmark.Cell(mr, 5).SetContent("NA");
                                //    fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    if (Convert.ToString(dsSpl.Tables[0].Rows[0]["MarkType"]).Trim() == "1")
                                //    {
                                //        fullmark.Cell(mr, 6).SetContent("Good");
                                //    }
                                //    else if (Convert.ToString(dsSpl.Tables[0].Rows[0]["MarkType"]).Trim() == "2")
                                //    {
                                //        fullmark.Cell(mr, 6).SetContent("Excellent");
                                //    }
                                //    else if (Convert.ToString(dsSpl.Tables[0].Rows[0]["MarkType"]).Trim() == "3")
                                //    {
                                //        fullmark.Cell(mr, 6).SetContent("Outstanding");
                                //    }
                                //    else if (Convert.ToString(dsSpl.Tables[0].Rows[0]["MarkType"]).Trim() == "4")
                                //    {
                                //        fullmark.Cell(mr, 6).SetContent("Average");
                                //    }
                                //    fullmark.Cell(mr, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    fullmark.Cell(mr, 7).SetContent("NA");
                                //    fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    fullmark.Cell(mr, 8).SetContent("NA");
                                //}
                                //DataView dv1 = new DataView();
                                //printds.Tables[2].DefaultView.RowFilter = "degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and Exam_year='" + batch_year1.Split('-')[1] + "'";
                                //dv1 = printds.Tables[2].DefaultView;
                                //dv1.Sort = "exam_code,current_semester";
                                //if (dv1.Count > 0)
                                //{
                                //    string exam_y = Convert.ToString(dv1[0]["Exam_year"]).Trim();
                                //    string exam_m = Convert.ToString(dv1[0]["Exam_Month"]).Trim();
                                //    strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                //    strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                //    strMonthName = exam_y + " - " + strMonthName.ToUpper() + " ";
                                //    fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    fullmark.Cell(mr, 9).SetContent(strMonthName);
                                //}
                                //fullmark.Cell(mr + 1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                //fullmark.Cell(mr + 1, 1).SetCellPadding(10);
                                //fullmark.Cell(mr + 1, 1).SetContent("--- END OF STATEMENT ---");
                            }
                            //fullmark.Cell(mr + 2, 1).SetCellPadding(3);
                            //fullmark.Cell(mr + 2, 1).SetFont(fontStmtMarks);
                            //fullmark.Cell(mr + 2, 1).SetContent(additionalmsg);
                            //foreach (PdfCell pc in fullmark.CellRange(mr + 2, 1, mr + 2, 1).Cells)
                            //{
                            //    pc.ColSpan = 5;
                            //}
                            newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 0, 177, 730, 650));
                            mypdfpage.Add(newpdftabpage2);
                            PdfTextArea pdfAdditional = new PdfTextArea(fontStmtMarks, System.Drawing.Color.Black, new PdfArea(mydoc, 86, 780, 500, 25), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(additionalmsg));
                            mypdfpage.Add(pdfAdditional);
                            int classifyrows = 0;
                            bool clasipg = false;
                            if (((edu_level.Trim().ToLower() == "ug" || edu_level.Trim().ToLower() == "u.g")))
                            {
                                classifyrows = 6;
                                splcredit = 1;
                                clasipg = false;
                            }
                            else
                            {
                                clasipg = true;
                                splcredit = 2;
                                classifyrows = 4;
                            }
                            PdfTable tblcgpaclass = mydoc.NewTable(fontcgpa, classifyrows, 8, 4);
                            tblcgpaclass.VisibleHeaders = false;
                            tblcgpaclass.SetBorders(Color.Black, 1, BorderType.None);
                            tblcgpaclass.Columns[0].SetWidth(28);
                            tblcgpaclass.Columns[1].SetWidth(111);
                            tblcgpaclass.Columns[2].SetWidth(57);
                            tblcgpaclass.Columns[3].SetWidth(57);
                            tblcgpaclass.Columns[4].SetWidth(57);
                            tblcgpaclass.Columns[5].SetWidth(193);
                            tblcgpaclass.Columns[6].SetWidth(135);
                            tblcgpaclass.Columns[7].SetWidth(71);
                            DataTable dtPart1 = new DataTable();
                            string batchsetting = "0";
                            double partsums = 0.000;
                            double partwpmsum = 0.000;
                            int partrowcount = 0;
                            double Credit_Points = 0.0;
                            double grade_points = 0.0;
                            double creditstotal = 0;
                            double overalltotgrade = 0;
                            double Marks = 0;
                            tblcgpaclass.Cell(2, 0).SetContent("I");
                            tblcgpaclass.Cell(3, 0).SetContent("II");
                            if (clasipg == false)
                            {
                                tblcgpaclass.Cell(4, 0).SetContent("III");
                                tblcgpaclass.Cell(5, 0).SetContent("IV");
                                tblcgpaclass.Cell(4, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblcgpaclass.Cell(5, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            }
                            tblcgpaclass.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblcgpaclass.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            for (int patva = 1; patva < 2; patva++)
                            {
                                if ((edu_level.Trim().ToLower() == "ug" || edu_level.Trim().ToLower() == "u.g") || (edu_level.Trim().ToLower() != "ug" && edu_level.Trim().ToLower() != "u.g" && patva < 3))
                                {
                                    partsums = 0;
                                    partrowcount = 0;
                                    creditstotal = 0;
                                    partwpmsum = 0;
                                    overalltotgrade = 0;
                                    if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                    {
                                        tblcgpaclass.Cell(1 + patva, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(1 + patva, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(1 + patva, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        string sumpart = string.Empty;
                                        string wpm = string.Empty;
                                        DataView dv_demand_data = new DataView();
                                        DataView dv_demand_datadummy = new DataView();
                                        printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='" + patva + "'";
                                        dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                                        partrowcount = dv_demand_datadummy.Count;
                                        printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='" + patva + "' and result='pass'";
                                        dtPart1 = printds_rows.Tables[0].DefaultView.ToTable();
                                        if (dtPart1.Rows.Count > 0 && partrowcount == dtPart1.Rows.Count)
                                        {
                                            for (int sum = 0; sum < dtPart1.Rows.Count; sum++)
                                            {
                                                double checkmarkmm = 0;
                                                double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim(), out checkmarkmm);
                                                double maxsubbtotal = 0;
                                                double.TryParse(Convert.ToString(dtPart1.Rows[sum]["maxtotal"]).Trim(), out maxsubbtotal);
                                                if (maxsubbtotal != 0)
                                                    checkmarkmm = checkmarkmm / maxsubbtotal * 100;
                                                checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                                string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + checkmarkmm + "' between frange and trange";
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                                {
                                                    gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "'  and '" + checkmarkmm + "' between frange and trange";
                                                    gradeds.Clear();
                                                    gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                                }
                                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                                {
                                                    for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                                    {
                                                        if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                        {
                                                            grade_points = checkmarkmm;
                                                            grade_points = grade_points / 10;
                                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["credit_points"]), out Credit_Points);
                                                            creditstotal = creditstotal + Credit_Points;
                                                            partwpmsum += (Credit_Points * checkmarkmm);
                                                            partsums = partsums + (grade_points * Credit_Points);
                                                        }
                                                    }
                                                }
                                            }
                                            if (creditstotal == 0)
                                            {
                                                sumpart = "0.000";
                                                wpm = "0.00";
                                            }
                                            else if (creditstotal > 0)
                                            {
                                                partsums = (partsums / creditstotal);
                                                partsums = Math.Round(partsums, 3, MidpointRounding.AwayFromZero);
                                                partwpmsum = (partwpmsum / creditstotal);
                                                partwpmsum = Math.Round(partwpmsum, 2, MidpointRounding.AwayFromZero);
                                                sumpart = String.Format("{0:0.000}", partsums);
                                                wpm = string.Format("{0:0.00}", partwpmsum);
                                            }
                                            else
                                            {
                                                sumpart = "0.000";
                                                wpm = "0.00";
                                            }
                                        }
                                        else if (partrowcount > 0)
                                        {
                                            sumpart = "0.000";
                                            wpm = "0.00";
                                        }
                                        else
                                        {
                                            sumpart = "---";
                                            wpm = "---";
                                        }
                                        if (sumpart != "---")
                                        {
                                            double sumpartgrade = 0;
                                            if (double.TryParse(sumpart, out sumpartgrade))
                                            {
                                                sumpartgrade = Convert.ToDouble(sumpart);
                                                overalltotgrade = overalltotgrade + sumpartgrade;
                                            }
                                            else
                                            {
                                                sumpartgrade = 0;
                                            }
                                            tblcgpaclass.Cell(1 + patva, 1).SetContent(creditstotal);
                                            tblcgpaclass.Cell(1 + patva, 3).SetContent(sumpart);
                                            tblcgpaclass.Cell(1 + patva, 2).SetContent(wpm);
                                            batchsetting = "1";
                                            if (noofsubfailed != 0 && overalltotgrade >= 6)
                                            {
                                                string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                                string cclass = "First Class";
                                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                                {
                                                    tblcgpaclass.Cell(1 + patva, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                    tblcgpaclass.Cell(1 + patva, 5).SetContent(cclass);
                                                }
                                                else
                                                {
                                                    tblcgpaclass.Cell(1 + patva, 4).SetContent(Convert.ToString("A"));
                                                    tblcgpaclass.Cell(1 + patva, 5).SetContent(cclass);
                                                }
                                                tblcgpaclass.Cell(1 + patva, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblcgpaclass.Cell(1 + patva, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                            else
                                            {
                                                string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                                {
                                                    tblcgpaclass.Cell(1 + patva, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                    tblcgpaclass.Cell(1 + patva, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                    tblcgpaclass.Cell(1 + patva, 5).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                                    tblcgpaclass.Cell(1 + patva, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            tblcgpaclass.Cell(1 + patva, 1).SetContent("---");
                                            tblcgpaclass.Cell(1 + patva, 2).SetContent("---");
                                            tblcgpaclass.Cell(1 + patva, 3).SetContent("---");
                                        }
                                    }
                                    else
                                    {
                                        tblcgpaclass.Cell(1 + patva, 1).SetContent("---");
                                        tblcgpaclass.Cell(1 + patva, 2).SetContent("---");
                                        tblcgpaclass.Cell(1 + patva, 3).SetContent("---");
                                    }
                                }
                            }
                            partsums = 0;
                            partrowcount = 0;
                            creditstotal = 0;
                            partwpmsum = 0;
                            overalltotgrade = 0;
                            if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                            {
                                string sumpart = string.Empty;
                                string wpm = string.Empty;
                                DataView dv_demand_data = new DataView();
                                DataView dv_demand_datadummy = new DataView();
                                printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='2'";
                                dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                                partrowcount = dv_demand_datadummy.Count;
                                printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='2' and result='pass'";
                                dtPart1 = printds_rows.Tables[0].DefaultView.ToTable();
                                tblcgpaclass.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblcgpaclass.Cell(3, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblcgpaclass.Cell(3, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblcgpaclass.Cell(3, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblcgpaclass.Cell(3, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                if (dtPart1.Rows.Count > 0 && partrowcount == dtPart1.Rows.Count)
                                {
                                    for (int sum = 0; sum < dtPart1.Rows.Count; sum++)
                                    {
                                        double checkmarkmm = 0;
                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out checkmarkmm);
                                        double maxsubbtotal = 0;
                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["maxtotal"]).Trim(), out maxsubbtotal);
                                        if (maxsubbtotal != 0)
                                            checkmarkmm = checkmarkmm / maxsubbtotal * 100;
                                        checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                        string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + checkmarkmm + "' between frange and trange";
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                        {
                                            gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "'  and '" + checkmarkmm + "' between frange and trange";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                        }
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                        {
                                            for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                            {
                                                if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                {
                                                    double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out grade_points);
                                                    double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out Marks);
                                                    if (maxsubbtotal != 0)
                                                    {
                                                        grade_points = grade_points / maxsubbtotal * 100;
                                                        Marks = Marks / maxsubbtotal * 100;
                                                    }
                                                    grade_points = grade_points / 10;
                                                    double.TryParse(Convert.ToString(dtPart1.Rows[sum]["credit_points"]), out Credit_Points);
                                                    creditstotal = creditstotal + Credit_Points;
                                                    partwpmsum += (Credit_Points * Marks);
                                                    partsums = partsums + (grade_points * Credit_Points);
                                                }
                                            }
                                        }
                                    }
                                    if (creditstotal == 0)
                                    {
                                        sumpart = "0.000";
                                        wpm = "0.00";
                                    }
                                    else if (creditstotal > 0)
                                    {
                                        partsums = (partsums / creditstotal);
                                        partsums = Math.Round(partsums, 3, MidpointRounding.AwayFromZero);
                                        partwpmsum = (partwpmsum / creditstotal);
                                        partwpmsum = Math.Round(partwpmsum, 2, MidpointRounding.AwayFromZero);
                                        sumpart = String.Format("{0:0.000}", partsums);
                                        wpm = string.Format("{0:0.00}", partwpmsum);
                                    }
                                    else
                                    {
                                        sumpart = "0.000";
                                        wpm = "0.00";
                                    }
                                }
                                else if (partrowcount > 0)
                                {
                                    sumpart = "0.000";
                                    wpm = "0.00";
                                }
                                else
                                {
                                    sumpart = "---";
                                    wpm = "---";
                                }
                                if (sumpart != "---")
                                {
                                    double sumpartgrade = 0;
                                    if (double.TryParse(sumpart, out sumpartgrade))
                                    {
                                        sumpartgrade = Convert.ToDouble(sumpart);
                                        overalltotgrade = overalltotgrade + sumpartgrade;
                                    }
                                    else
                                    {
                                        sumpartgrade = 0;
                                    }
                                    if (clasipg == false)
                                    {
                                        tblcgpaclass.Cell(3, 1).SetContent(creditstotal);
                                        tblcgpaclass.Cell(3, 3).SetContent(sumpart);
                                        tblcgpaclass.Cell(3, 2).SetContent(wpm);
                                    }
                                    else
                                    {
                                        tblcgpaclass.Cell(3, 1).SetContent(creditstotal + splcredit);
                                        tblcgpaclass.Cell(3, 3).SetContent("---");
                                        tblcgpaclass.Cell(3, 2).SetContent("---");
                                    }
                                    batchsetting = "1";
                                    if (noofsubfailed != 0 && overalltotgrade >= 6)
                                    {
                                        string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                        string cclass = "First Class";
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                        {
                                            if (clasipg == false)
                                            {
                                                tblcgpaclass.Cell(3, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                tblcgpaclass.Cell(3, 5).SetContent(cclass);
                                            }
                                            else
                                            {
                                                tblcgpaclass.Cell(3, 4).SetContent("---");
                                                tblcgpaclass.Cell(3, 5).SetContent("---");
                                            }
                                        }
                                        else
                                        {
                                            if (clasipg == false)
                                            {
                                                tblcgpaclass.Cell(3, 4).SetContent(Convert.ToString("A"));
                                                tblcgpaclass.Cell(3, 5).SetContent(cclass);
                                            }
                                            else
                                            {
                                                tblcgpaclass.Cell(3, 4).SetContent("---");
                                                tblcgpaclass.Cell(3, 5).SetContent("---");
                                            }
                                        }
                                        tblcgpaclass.Cell(3, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(3, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    }
                                    else
                                    {
                                        string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                        {
                                            if (clasipg == false)
                                            {
                                                tblcgpaclass.Cell(3, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                tblcgpaclass.Cell(3, 5).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                            }
                                            else
                                            {
                                                tblcgpaclass.Cell(3, 4).SetContent("---");
                                                tblcgpaclass.Cell(3, 5).SetContent("---");
                                            }
                                        }
                                    }
                                    tblcgpaclass.Cell(3, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblcgpaclass.Cell(3, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                }
                                else
                                {
                                    if (clasipg == false)
                                    {
                                        tblcgpaclass.Cell(3, 1).SetContent(creditstotal);
                                        tblcgpaclass.Cell(3, 3).SetContent(sumpart);
                                        tblcgpaclass.Cell(3, 2).SetContent(wpm);
                                    }
                                    else
                                    {
                                        tblcgpaclass.Cell(3, 1).SetContent(creditstotal + splcredit);
                                        tblcgpaclass.Cell(3, 3).SetContent("---");
                                        tblcgpaclass.Cell(3, 2).SetContent("---");
                                    }
                                }
                            }
                            else
                            {
                                tblcgpaclass.Cell(3, 1).SetContent("---");
                                tblcgpaclass.Cell(3, 2).SetContent("---");
                                tblcgpaclass.Cell(3, 3).SetContent("---");
                            }
                            DataTable dtPart3 = new DataTable();
                            if ((edu_level.Trim().ToLower() == "ug" || edu_level.Trim().ToLower() == "u.g"))
                            {
                                creditsdiff = 0;
                                if (tot_credits > setng_mintotalcreadits)
                                {
                                    creditsdiff = tot_credits - setng_mintotalcreadits;
                                    creditsdiff = creditsdiff / 5;
                                }
                                partsums = 0;
                                partrowcount = 0;
                                creditstotal = 0;
                                partwpmsum = 0;
                                overalltotgrade = 0;
                                double min_credit = 0;
                                double Majorcredit = 0;
                                double Tot_Part3_Credit = 0;
                                double Tot_part3_Earned_credit = 0;
                                double Tot_Major_credit = 0;
                                double Tot_alied_Credit = 0;
                                double aliedCredit = 0;
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    string sumpart = string.Empty;
                                    string wpm = string.Empty;
                                    removesubjetcs = string.Empty;
                                    DataView dv_demand_data = new DataView();
                                    DataView dv_demand_datadummy = new DataView();
                                    cutsubject = new DataSet();
                                    if (creditsdiff > 0)
                                    {
                                        sql = "Select  top " + creditsdiff + " subject.subject_no,credit_points from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "' and Part_Type=3 and SUBSTRING(subject_code,7,1)='M' order by total asc, credit_points asc,syllabus_master.semester asc,subject.subjectpriority asc";//total asc,credit_points asc,syllabus_master.semester asc";
                                        cutsubject.Clear();
                                        cutsubject = da.select_method_wo_parameter(sql, "Text");
                                        int removecredites = 0;
                                        if (cutsubject.Tables.Count > 0 && cutsubject.Tables[0].Rows.Count > 0)
                                        {
                                            for (int ii = 0; ii < cutsubject.Tables[0].Rows.Count; ii++)
                                            {
                                                if (removecredites == 0)
                                                {
                                                    removecredites = Convert.ToInt32(cutsubject.Tables[0].Rows[ii][1].ToString());
                                                }
                                                else
                                                {
                                                    removecredites = removecredites + Convert.ToInt32(cutsubject.Tables[0].Rows[ii][1].ToString());
                                                }
                                            }

                                            if (removecredites <= 10)
                                            {
                                                for (int ii = 0; ii < cutsubject.Tables[0].Rows.Count; ii++)
                                                {
                                                    if (removesubjetcs.Trim() == "")
                                                    {
                                                        removesubjetcs = cutsubject.Tables[0].Rows[ii][0].ToString();
                                                    }
                                                    else
                                                    {
                                                        removesubjetcs = removesubjetcs + "," + cutsubject.Tables[0].Rows[ii][0].ToString();
                                                    }
                                                    arr_star.Add(Convert.ToString(cutsubject.Tables[0].Rows[ii][0]));
                                                }
                                            }
                                            else
                                            {
                                                removesubjetcs = cutsubject.Tables[0].Rows[0][0].ToString();
                                                arr_star.Add(Convert.ToString(cutsubject.Tables[0].Rows[0][0]));
                                            }
                                        }
                                    }
                                    if (removesubjetcs.Trim() != "")
                                    {
                                        printds_rows.Tables[0].DefaultView.RowFilter = "part_type='3' and subject_no not in (" + removesubjetcs + ")";
                                    }
                                    else
                                    {
                                        printds_rows.Tables[0].DefaultView.RowFilter = "part_type='3'";
                                    }
                                    dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                                    partrowcount = dv_demand_datadummy.Count;
                                    if (removesubjetcs.Trim() != "")
                                    {
                                        printds_rows.Tables[0].DefaultView.RowFilter = "part_type='3' and result='pass'  and subject_no not in (" + removesubjetcs + ")";
                                    }
                                    else
                                    {
                                        printds_rows.Tables[0].DefaultView.RowFilter = "part_type='3' and result='pass'";
                                    }
                                    dtPart1 = printds_rows.Tables[0].DefaultView.ToTable();
                                    dtPart3 = printds_rows.Tables[0].DefaultView.ToTable();
                                    object mini = Convert.ToInt16(dtPart3.Compute("Min(total)", "subject_type='Major Course'"));
                                    double minimum = 0;
                                    double.TryParse(Convert.ToString(mini), out minimum);
                                    double min_gpa = 0;
                                    double min_wpm = 0;
                                    min_gpa = (minimum / 10) * 5;
                                    min_wpm = minimum * 5;
                                    if (dv_demand_datadummy.Count > 0)
                                    {
                                        Tot_Part3_Credit = 0;
                                        for (int tc = 0; tc < dv_demand_datadummy.Count; tc++)
                                        {
                                            double dummycredit = 0;
                                            string sub_code = Convert.ToString(dv_demand_datadummy[tc]["subject_code"]).Trim();
                                            string gt_sub_code = sub_code.Substring(sub_code.Length - 3, 1);
                                            string subtypeaccr = string.Empty;
                                            subtypeaccr = Convert.ToString(dv_demand_datadummy[tc]["subject_type"]);
                                            subtypeaccr = findSubTypeAccromy(subtypeaccr);
                                            string printcronmy = Convert.ToString(dv_demand_datadummy[tc]["print_acronmy"]);
                                            if (printcronmy.Trim() != "")
                                            {
                                                subtypeaccr = printcronmy;
                                            }
                                            else
                                            {
                                                if (subtypeaccr.ToUpper().Trim() == "PRAC")
                                                {
                                                    if (gt_sub_code.ToUpper().Trim() == "M")
                                                    {
                                                        subtypeaccr = "MC";
                                                    }
                                                    else if (gt_sub_code.ToUpper().Trim() == "A")
                                                    {
                                                        subtypeaccr = "AC";
                                                    }
                                                    else
                                                    {
                                                        subtypeaccr = "PRAC";
                                                    }
                                                }
                                            }
                                            double.TryParse(Convert.ToString(dv_demand_datadummy[tc]["credit_points"]), out dummycredit);
                                            Tot_Part3_Credit += dummycredit;
                                            if (Convert.ToString(dv_demand_datadummy[tc]["subject_type"]).Trim().ToLower() == "major course" && subtypeaccr.ToLower().Trim() == "mc")
                                            {
                                                Tot_Major_credit += dummycredit;
                                            }
                                            else if (Convert.ToString(dv_demand_datadummy[tc]["subject_type"]).Trim().ToLower() == "allied course" && subtypeaccr.ToLower().Trim() == "ac")
                                            {
                                                Tot_alied_Credit += dummycredit;
                                            }
                                        }
                                    }
                                    if (clasipg == false)
                                    {
                                        tblcgpaclass.Cell(4, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(4, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(4, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(4, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(4, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    }
                                    else
                                    {
                                        tblcgpaclass.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(2, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(2, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(2, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(2, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    }
                                    if (dtPart1.Rows.Count > 0)
                                    {
                                        for (int sum = 0; sum < dtPart1.Rows.Count; sum++)
                                        {
                                            double dummycredit = 0;
                                            string sub_code = Convert.ToString(dtPart1.Rows[sum]["subject_code"]).Trim();
                                            string gt_sub_code = sub_code.Substring(sub_code.Length - 3, 1);
                                            string subtypeaccr = string.Empty;
                                            subtypeaccr = Convert.ToString(dtPart1.Rows[sum]["subject_type"]);
                                            subtypeaccr = findSubTypeAccromy(subtypeaccr);
                                            if (subtypeaccr.ToUpper().Trim() == "PRAC")
                                            {
                                                if (gt_sub_code.ToUpper().Trim() == "M")
                                                {
                                                    subtypeaccr = "MC";
                                                }
                                                else if (gt_sub_code.ToUpper().Trim() == "A")
                                                {
                                                    subtypeaccr = "AC";
                                                }
                                                else if (gt_sub_code.ToUpper().Trim() == "E")
                                                {
                                                    subtypeaccr = "EC";
                                                }
                                                else
                                                {
                                                    subtypeaccr = "PRAC";
                                                }
                                            }
                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["credit_points"]), out dummycredit);
                                            Tot_part3_Earned_credit += dummycredit;
                                            if (Convert.ToString(dtPart1.Rows[sum]["subject_type"]).Trim().ToLower() == "major course" && subtypeaccr.ToLower().Trim() == "mc")
                                            {
                                                Majorcredit += dummycredit;
                                            }
                                            else if (Convert.ToString(dtPart1.Rows[sum]["subject_type"]).Trim().ToLower() == "allied course" && subtypeaccr.ToLower().Trim() == "ac")
                                            {
                                                aliedCredit += dummycredit;
                                            }
                                            double checkmarkmm = 0;
                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out checkmarkmm);
                                            double maxsubbtotal = 0;
                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["maxtotal"]).Trim(), out maxsubbtotal);
                                            if (maxsubbtotal != 0)
                                                checkmarkmm = checkmarkmm / maxsubbtotal * 100;
                                            checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                            string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + checkmarkmm + "' between frange and trange";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                            {
                                                gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "'  and '" + checkmarkmm + "' between frange and trange";//added by sridhar 
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            }
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                                {
                                                    if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                    {
                                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out grade_points);
                                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out Marks);
                                                        if (maxsubbtotal != 0)
                                                        {
                                                            grade_points = grade_points / maxsubbtotal * 100;
                                                            Marks = Marks / maxsubbtotal * 100;
                                                        }
                                                        grade_points = grade_points / 10;
                                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["credit_points"]), out Credit_Points);
                                                        creditstotal = creditstotal + Credit_Points;
                                                        partwpmsum += (Credit_Points * Marks);
                                                        partsums = partsums + (grade_points * Credit_Points);
                                                    }
                                                }
                                            }
                                        }
                                        if (creditstotal == 0)
                                        {
                                            sumpart = "0.000";
                                            wpm = "0.00";
                                        }
                                        else if (creditstotal > 0)
                                        {
                                            partsums = (partsums / creditstotal);
                                            partsums = Math.Round(partsums, 3, MidpointRounding.AwayFromZero);
                                            partwpmsum = (partwpmsum / creditstotal);
                                            partwpmsum = Math.Round(partwpmsum, 2, MidpointRounding.AwayFromZero);
                                            sumpart = String.Format("{0:0.000}", partsums);
                                            wpm = string.Format("{0:0.00}", partwpmsum);
                                        }
                                        else
                                        {
                                            sumpart = "0.000";
                                            wpm = "0.00";
                                        }
                                    }
                                    else if (partrowcount > 0)
                                    {
                                        sumpart = "0.000";
                                        wpm = "0.00";
                                    }
                                    else
                                    {
                                        sumpart = "---";
                                        wpm = "---";
                                    }
                                    if (sumpart != "---")
                                    {
                                        double sumpartgrade = 0;
                                        if (double.TryParse(sumpart, out sumpartgrade))
                                        {
                                            sumpartgrade = Convert.ToDouble(sumpart);
                                            overalltotgrade = overalltotgrade + sumpartgrade;
                                        }
                                        else
                                        {
                                            sumpartgrade = 0;
                                        }
                                        if (clasipg == false)
                                        {
                                            tblcgpaclass.Cell(4, 1).SetContent(creditstotal);
                                            tblcgpaclass.Cell(4, 3).SetContent(sumpart);
                                            tblcgpaclass.Cell(4, 2).SetContent(wpm);
                                        }
                                        else
                                        {
                                            tblcgpaclass.Cell(2, 1).SetContent(creditstotal);
                                            tblcgpaclass.Cell(2, 3).SetContent(sumpart);
                                            tblcgpaclass.Cell(2, 2).SetContent(wpm);
                                        }
                                        batchsetting = "1";
                                        if (noofsubfailed != 0 && overalltotgrade >= 6)
                                        {
                                            string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                            string cclass = "First Class";
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                if (clasipg == false)
                                                {
                                                    tblcgpaclass.Cell(4, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                    tblcgpaclass.Cell(4, 5).SetContent(cclass);
                                                }
                                                else
                                                {
                                                    tblcgpaclass.Cell(2, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                    tblcgpaclass.Cell(2, 5).SetContent(cclass);
                                                }
                                            }
                                            else
                                            {
                                                if (clasipg == false)
                                                {
                                                    tblcgpaclass.Cell(4, 4).SetContent("A");
                                                    tblcgpaclass.Cell(4, 5).SetContent(cclass);
                                                }
                                                else
                                                {
                                                    tblcgpaclass.Cell(2, 4).SetContent("A");
                                                    tblcgpaclass.Cell(2, 5).SetContent(cclass);
                                                }
                                            }
                                            if (clasipg == false)
                                            {
                                                tblcgpaclass.Cell(4, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblcgpaclass.Cell(4, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                            else
                                            {
                                                tblcgpaclass.Cell(2, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblcgpaclass.Cell(2, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                        }
                                        else
                                        {
                                            string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                if (clasipg == false)
                                                {
                                                    tblcgpaclass.Cell(4, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                    tblcgpaclass.Cell(4, 5).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                                }
                                                else
                                                {
                                                    tblcgpaclass.Cell(2, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                    tblcgpaclass.Cell(2, 5).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                                }
                                            }
                                            if (clasipg == false)
                                            {
                                                tblcgpaclass.Cell(4, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblcgpaclass.Cell(4, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                            else
                                            {
                                                tblcgpaclass.Cell(2, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblcgpaclass.Cell(2, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (clasipg == false)
                                        {
                                            tblcgpaclass.Cell(4, 1).SetContent(creditstotal);
                                            tblcgpaclass.Cell(4, 3).SetContent(sumpart);
                                            tblcgpaclass.Cell(4, 2).SetContent(wpm);
                                        }
                                        else
                                        {
                                            tblcgpaclass.Cell(2, 1).SetContent(creditstotal);
                                            tblcgpaclass.Cell(2, 3).SetContent(sumpart);
                                            tblcgpaclass.Cell(2, 2).SetContent(wpm);
                                        }
                                    }
                                }
                                else
                                {
                                    if (clasipg == false)
                                    {
                                        tblcgpaclass.Cell(4, 1).SetContent("---");
                                        tblcgpaclass.Cell(4, 3).SetContent("---");
                                        tblcgpaclass.Cell(4, 2).SetContent("---");
                                    }
                                    else
                                    {
                                        tblcgpaclass.Cell(2, 1).SetContent("---");
                                        tblcgpaclass.Cell(2, 3).SetContent("---");
                                        tblcgpaclass.Cell(2, 2).SetContent("---");
                                    }
                                }
                                partsums = 0;
                                partrowcount = 0;
                                creditstotal = 0;
                                partwpmsum = 0;
                                overalltotgrade = 0;
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    string sumpart = string.Empty;
                                    string wpm = string.Empty;
                                    DataView dv_demand_data = new DataView();
                                    DataView dv_demand_datadummy = new DataView();
                                    int part = 4;
                                    if (clasipg == false)
                                    {
                                        part = 4;
                                    }
                                    else
                                    {
                                        part = 2;
                                    }
                                    printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='" + part + "'";
                                    dv_demand_datadummy = printds_rows.Tables[0].DefaultView;
                                    partrowcount = dv_demand_datadummy.Count;
                                    printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='" + part + "' and result='pass'";
                                    dtPart1 = printds_rows.Tables[0].DefaultView.ToTable();
                                    if (clasipg == false)
                                    {
                                        tblcgpaclass.Cell(5, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(5, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(5, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(5, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(5, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    }
                                    else
                                    {
                                        tblcgpaclass.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(3, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(3, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(3, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblcgpaclass.Cell(3, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    }
                                    if (dtPart1.Rows.Count > 0 && partrowcount == dtPart1.Rows.Count)
                                    {
                                        for (int sum = 0; sum < dtPart1.Rows.Count; sum++)
                                        {
                                            double checkmarkmm = 0;
                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out checkmarkmm);
                                            double maxsubbtotal = 0;
                                            double.TryParse(Convert.ToString(dtPart1.Rows[sum]["maxtotal"]).Trim(), out maxsubbtotal);
                                            if (maxsubbtotal != 0)
                                                checkmarkmm = checkmarkmm / maxsubbtotal * 100;
                                            checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                            string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + checkmarkmm + "' between frange and trange";//added by sridhar 16/aug 2014
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                            {
                                                gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "'  and '" + checkmarkmm + "' between frange and trange";
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            }
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                                {
                                                    if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                    {
                                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out grade_points);
                                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["total"]), out Marks);
                                                        if (maxsubbtotal != 0)
                                                        {
                                                            grade_points = grade_points / maxsubbtotal * 100;
                                                            Marks = Marks / maxsubbtotal * 100;
                                                        }
                                                        grade_points = grade_points / 10;
                                                        double.TryParse(Convert.ToString(dtPart1.Rows[sum]["credit_points"]), out Credit_Points);
                                                        creditstotal = creditstotal + Credit_Points;
                                                        partwpmsum += (Credit_Points * Marks);
                                                        partsums = partsums + (grade_points * Credit_Points);
                                                    }
                                                }
                                            }
                                        }
                                        if (creditstotal == 0)
                                        {
                                            sumpart = "0.000";
                                            wpm = "0.00";
                                        }
                                        else if (creditstotal > 0)
                                        {
                                            partsums = (partsums / creditstotal);
                                            partsums = Math.Round(partsums, 3, MidpointRounding.AwayFromZero);
                                            partwpmsum = (partwpmsum / creditstotal);
                                            partwpmsum = Math.Round(partwpmsum, 2, MidpointRounding.AwayFromZero);
                                            sumpart = String.Format("{0:0.000}", partsums);
                                            wpm = string.Format("{0:0.00}", partwpmsum);
                                        }
                                        else
                                        {
                                            sumpart = "0.000";
                                            wpm = "0.00";
                                        }
                                    }
                                    else if (partrowcount > 0)
                                    {
                                        sumpart = "0.000";
                                        wpm = "0.00";
                                    }
                                    else
                                    {
                                        sumpart = "---";
                                        wpm = "---";
                                    }
                                    if (sumpart != "---")
                                    {
                                        double sumpartgrade = 0;
                                        if (double.TryParse(sumpart, out sumpartgrade))
                                        {
                                            sumpartgrade = Convert.ToDouble(sumpart);
                                            // overalltotgrade = overalltotgrade + sumpartgrade;
                                            overalltotgrade = overalltotgrade + sumpartgrade;
                                        }
                                        else
                                        {
                                            sumpartgrade = 0;
                                        }
                                        if (clasipg == false)
                                        {
                                            tblcgpaclass.Cell(5, 1).SetContent(creditstotal);
                                            tblcgpaclass.Cell(5, 3).SetContent(sumpart);
                                            tblcgpaclass.Cell(5, 2).SetContent(wpm);
                                        }
                                        else
                                        {
                                            tblcgpaclass.Cell(3, 1).SetContent(creditstotal + splcredit);
                                            tblcgpaclass.Cell(3, 3).SetContent("---");
                                            tblcgpaclass.Cell(3, 2).SetContent("---");
                                        }
                                        batchsetting = "1";
                                        if (noofsubfailed != 0 && overalltotgrade >= 6)
                                        {
                                            string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                            string cclass = "First Class";
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                if (clasipg == false)
                                                {
                                                    tblcgpaclass.Cell(5, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                    tblcgpaclass.Cell(5, 5).SetContent(cclass);
                                                }
                                                else
                                                {
                                                    tblcgpaclass.Cell(3, 4).SetContent("---");
                                                    tblcgpaclass.Cell(3, 5).SetContent("---");
                                                }
                                            }
                                            else
                                            {
                                                if (clasipg == false)
                                                {
                                                    tblcgpaclass.Cell(5, 4).SetContent(Convert.ToString("A"));
                                                    tblcgpaclass.Cell(5, 5).SetContent(cclass);
                                                }
                                                else
                                                {
                                                    tblcgpaclass.Cell(3, 4).SetContent("---");
                                                    tblcgpaclass.Cell(3, 5).SetContent("---");
                                                }
                                            }
                                            if (clasipg == false)
                                            {
                                                tblcgpaclass.Cell(5, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblcgpaclass.Cell(5, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                            else
                                            {
                                                tblcgpaclass.Cell(3, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblcgpaclass.Cell(3, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                        }
                                        else
                                        {
                                            string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                if (clasipg == false)
                                                {
                                                    tblcgpaclass.Cell(5, 4).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]));
                                                    tblcgpaclass.Cell(5, 5).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                                }
                                                else
                                                {
                                                    tblcgpaclass.Cell(3, 4).SetContent("---");
                                                    tblcgpaclass.Cell(3, 5).SetContent("---");
                                                }
                                            }
                                            if (clasipg == false)
                                            {
                                                tblcgpaclass.Cell(5, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblcgpaclass.Cell(5, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                            else
                                            {
                                                tblcgpaclass.Cell(3, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblcgpaclass.Cell(3, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (clasipg == false)
                                        {
                                            tblcgpaclass.Cell(5, 1).SetContent(creditstotal);
                                            tblcgpaclass.Cell(5, 3).SetContent(sumpart);
                                            tblcgpaclass.Cell(5, 2).SetContent(wpm);
                                        }
                                        else
                                        {
                                            tblcgpaclass.Cell(3, 1).SetContent(creditstotal + splcredit);
                                            tblcgpaclass.Cell(3, 3).SetContent("---");
                                            tblcgpaclass.Cell(3, 2).SetContent("---");
                                        }
                                    }
                                }
                                else
                                {
                                    if (clasipg == false)
                                    {
                                        tblcgpaclass.Cell(5, 1).SetContent("---");
                                        tblcgpaclass.Cell(5, 3).SetContent("---");
                                        tblcgpaclass.Cell(5, 2).SetContent("---");
                                    }
                                    else
                                    {
                                        tblcgpaclass.Cell(3, 1).SetContent("---");
                                        tblcgpaclass.Cell(3, 3).SetContent("---");
                                        tblcgpaclass.Cell(3, 2).SetContent("---");
                                    }
                                }
                            }
                            PdfTable tblPass = mydoc.NewTable(fontcgpa, 3, 2, 3);
                            tblPass.VisibleHeaders = false;
                            tblPass.SetBorders(Color.Black, 1, BorderType.None);
                            tblPass.SetColumnsWidth(new int[] { 255, 100 });
                            if (clasipg == false)
                            {
                                tblPass.Cell(0, 1).SetContent(setng_mintotalcreadits);
                                tblPass.Cell(1, 1).SetContent(overallcreditearned + splcredit);
                                tblPass.Cell(2, 1).SetContent("PASS");
                                tblPass.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblPass.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblPass.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblPass.Cell(0, 1).SetCellPadding(10);
                                tblPass.Cell(1, 1).SetCellPadding(10);
                                tblPass.Cell(2, 1).SetCellPadding(10);
                            }
                            else
                            {
                                if (degree.Trim().ToLower() == "mca" || degree.Trim().ToLower().Trim('.') == "m.c.a")
                                {
                                    tblPass.Cell(0, 1).SetContent(setng_mintotalcreadits);
                                }
                                else
                                {
                                    tblPass.Cell(0, 1).SetContent(setng_mintotalcreadits);
                                }
                                tblPass.Cell(0, 1).SetCellPadding(10);
                                tblPass.Cell(1, 1).SetCellPadding(10);
                                tblPass.Cell(2, 1).SetCellPadding(10);
                                tblPass.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblPass.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblPass.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblPass.Cell(1, 1).SetContent(overallcreditearned + splcredit);
                                tblPass.Cell(2, 1).SetContent("PASS");
                            }
                            newpdftabpage2 = tblPass.CreateTablePage(new PdfArea(mydoc, 482, 820, 250, 250));
                            mypdfpage.Add(newpdftabpage2);
                            // x=13,y=70.8,W= ,H= 
                            newpdftabpage2 = tblcgpaclass.CreateTablePage(new PdfArea(mydoc, 0, 820, 730, 150));
                            mypdfpage.Add(newpdftabpage2);
                        }
                        pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 42, 985, 71, 25), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                        mypdfpage.Add(pdfdoi);
                        mypdfpage.SaveToDocument();
                    }
                    else
                    {
                        if (lblerror1 == "")
                        {
                            lblerror1 = rollnosub;
                        }
                        else
                        {
                            lblerror1 = lblerror1 + "," + rollnosub;
                        }
                    }
                }
            }
            if (lblerror1 != "")
            {
                lblerror.Text = lblerror1;
                lblerror.Visible = true;
            }
            else
            {
                lblerror.Text = string.Empty;
                lblerror.Visible = false;
            }
            if (printpage == true)
            {
                string appPath = HttpContext.Current.Server.MapPath("~");
                if (appPath != "")
                {
                    string szPath = appPath + "/Report/";
                    string szFile = "consolidatedmarksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                    mydoc.SaveToFile(szPath + szFile);
                    Response.ClearHeaders();
                    Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                    Response.ContentType = "application/pdf";
                    Response.WriteFile(szPath + szFile);
                }
            }
        }
        catch (Exception ex)
        {
            lblerror.Visible = true;
            lblerror.Text = Convert.ToString(ex).Trim();
        }
    }

    #endregion

    //FOR MCC COMMUNITY COLLEGE
    public void mcc_community_format()
    {
        try
        {
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            string degree = string.Empty;
            string edu_level = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string semroman = string.Empty;
            string coe = string.Empty;
            string curr_sem = string.Empty;
            int cur_sem = 0;
            int sheet_serial_no = 0;
            int additonalstatus = 0;
            string additionalmsg = string.Empty;
            string posFMonth = "", posFyear = "", posTMonth = "", posTYear = string.Empty;
            bool onlyca = false;
            bool onlyes = false;
            DataSet gradeds = new DataSet();
            Font fontDegree = new Font("Times New Roman", 14, FontStyle.Bold);
            Font fontStudDetails = new Font("Times New Roman", 11, FontStyle.Bold);
            Font fontdegreename = new Font("Times New Roman", 14, FontStyle.Bold);
            Font fontStmtMarks = new Font("Times New Roman", 11, FontStyle.Regular);
            Font fontOveralrslt = new Font("Times New Roman", 11, FontStyle.Bold);
            Font fontcgpa = new Font("Times New Roman", 11, FontStyle.Regular);
            Font fontDate = new Font("Times New Roman", 11, FontStyle.Regular);
            Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font fontStud = new Font("Comic Sans MS", 10, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 8, FontStyle.Bold);
            DataTable dtPart1 = new DataTable();
            DataTable dtPart2 = new DataTable();
            DataTable dtPart3 = new DataTable();
            DataTable dtPart4 = new DataTable();
            DataSet OverallResult = new DataSet();
            Font Fontarial9 = new Font("Arial", 8, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            sheet_serial_no = 0;
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(25.4, 30.6));
            PdfPage mypdfpage;
            if (ddlPosFMonth.Items.Count != 0)
            {
                if (ddlPosFMonth.SelectedValue != "-1")
                {
                    //ddlPosFMonth.SelectedValue
                    int mon = 0;
                    int.TryParse(ddlPosFMonth.SelectedValue, out mon);
                    posFMonth = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(mon + 1);
                    posFMonth = posFMonth.Substring(0, 3).ToUpper();
                }
                else
                {
                    lblerror.Visible = true;
                    lblerror.Text = "Please Select Period of Study From Month";
                    return;
                }
            }
            else
            {
                lblerror.Visible = true;
                lblerror.Text = "No Period of Study From Month Found";
                return;
            }
            if (ddlPosFYear.Items.Count != 0)
            {
                posFyear = Convert.ToString(ddlPosFYear.SelectedValue);
            }
            else
            {
                lblerror.Visible = true;
                lblerror.Text = "No Period of Study From Year Found";
                return;
            }
            if (ddlPosTMonth.Items.Count != 0)
            {
                if (ddlPosTMonth.SelectedValue != "-1")
                {
                    //ddlPosFMonth.SelectedValue
                    int mon = 0;
                    int.TryParse(ddlPosTMonth.SelectedValue, out mon);
                    posTMonth = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(mon + 1);
                    posTMonth = posTMonth.Substring(0, 3).ToUpper();
                }
                else
                {
                    lblerror.Visible = true;
                    lblerror.Text = "Please Select Period of Study To Month";
                    return;
                }
            }
            else
            {
                lblerror.Visible = true;
                lblerror.Text = "No Period of Study To Month Found";
                return;
            }
            if (ddlPosTYear.Items.Count != 0)
            {
                posTYear = Convert.ToString(ddlPosTYear.SelectedValue);
            }
            else
            {
                lblerror.Visible = true;
                lblerror.Text = "No Period of Study To Year Found";
                return;
            }
            if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
            {
                FpSpread2.SaveChanges();
                for (int res = 1; res < FpSpread2.Sheets[0].RowCount; res++)
                {
                    int isval = 0;
                    additonalstatus = 0;
                    additionalmsg = string.Empty;
                    onlyca = false;
                    onlyes = false;
                    isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                    if (isval == 1)
                    {
                        printds.Clear();
                        printds.Dispose();
                        printds_new.Clear();
                        printds_new.Dispose();
                        PdfTable table1forpage1;
                        PdfTextArea pdfdoi;
                        PdfTablePage newpdftabpage2;
                        PdfTable fullmark;
                        PdfImage LogoImage2;
                        rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                        regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                        string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,C.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
                        printds = da.select_method_wo_parameter(sql, "Text");
                        string overall = "select count(s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'; Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc  where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass' and Mark_Entry.roll_no=sc.roll_no and Mark_Entry.subject_no=sc.subject_no and Mark_Entry.roll_no='" + rollnosub + "'  ";
                        overall = overall + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc  where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail' and Mark_Entry.roll_no=sc.roll_no and Mark_Entry.subject_no=sc.subject_no and Mark_Entry.roll_no='" + rollnosub + "'select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass')";
                        OverallResult = da.select_method_wo_parameter(overall, "Text");
                        int noofsubapplied = Convert.ToInt32(Convert.ToString(OverallResult.Tables[0].Rows[0][0]).Trim());
                        int noofsubpassed = Convert.ToInt32(Convert.ToString(OverallResult.Tables[1].Rows[0][0]).Trim());
                        int splcredit = 0;
                        if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                        {
                            mypdfpage = mydoc.NewPage();
                            edu_level = Convert.ToString(printds.Tables[0].Rows[0]["edu_level"]).Trim();
                            degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                            coe = Convert.ToString(printds.Tables[1].Rows[0]["coe"]).Trim();
                            //string[] spiltcoe = coe.Split('.');
                            //string newcoe = string.Empty;
                            string grade_set = string.Empty;
                            //for (int ce = 1; ce <= spiltcoe.GetUpperBound(0); ce++)
                            //{
                            //    if (newcoe == "")
                            //    {
                            //        newcoe = Convert.ToString(spiltcoe[ce]);
                            //    }
                            //    else
                            //    {
                            //        newcoe = newcoe + "." +Convert.ToString(spiltcoe[ce]);
                            //    }
                            //}
                            //coe = newcoe;
                            //month = ddlMonth.SelectedIndex;
                            int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                            monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                            //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                            string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                            //strMonthName = strMonthName[0].ToString() + strMonthName[1].ToString() + strMonthName[2].ToString();
                            monthandyear = strMonthName + "-" + Convert.ToString(ddlYear.SelectedItem.Text).Trim().Trim();
                            monthandyear = monthandyear.ToUpper();
                            //strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                            //strMonthName = strMonthName[0].ToString() + strMonthName[1].ToString() + strMonthName[2].ToString();
                            //strMonthName = strMonthName.ToUpper() + " " + exam_y + "   ";
                            studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                            branch = printds.Tables[0].Rows[0]["Dept_name"].ToString();
                            dob = printds.Tables[0].Rows[0]["dob"].ToString();
                            string stdappno = printds.Tables[0].Rows[0]["App_No"].ToString();
                            batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                            degree_code = printds.Tables[0].Rows[0]["degree_code"].ToString();
                            int max_sem1 = 0;
                            string max_sem = d2.GetFunctionv("select NDurations from ndegree where batch_year='" + batch_year + "'  and Degree_code='" + degree_code + "' and college_code='" + Convert.ToString(ddlCollege.SelectedValue) + "'");
                            if (max_sem == "" || max_sem == null)
                            {
                                max_sem = d2.GetFunctionv("SELECT Duration FROM Degree where  Degree_Code='" + degree_code + "' and college_code='" + Convert.ToString(ddlCollege.SelectedValue) + "'");
                            }
                            int.TryParse(max_sem, out max_sem1);
                            sql2 = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                            string qryexmappn = string.Empty;
                            printds_new = da.select_method_wo_parameter(sql2, "Text");
                            if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                            {
                                sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
                                GetSem(batch_year, Convert.ToString(ddlYear.SelectedItem.Text), Convert.ToString(month), max_sem, ref sem);
                                int.TryParse(sem, out cur_sem);
                                if (sem == "1")
                                {
                                    semroman = "I";
                                }
                                else if (sem == "2")
                                {
                                    semroman = "II";
                                }
                                else if (sem == "3")
                                {
                                    semroman = "III";
                                }
                                else if (sem == "4")
                                {
                                    semroman = "IV";
                                }
                                else if (sem == "5")
                                {
                                    semroman = "V";
                                }
                                else if (sem == "6")
                                {
                                    semroman = "VI";
                                }
                                else if (sem == "7")
                                {
                                    semroman = "VII";
                                }
                                else if (sem == "8")
                                {
                                    semroman = "VIII";
                                }
                                exam_code = string.Empty;
                                for (int exa = 0; exa < printds_new.Tables[0].Rows.Count; exa++)
                                {
                                    exam_code += printds_new.Tables[0].Rows[exa]["exam_code"].ToString() + ",";
                                }
                                exam_code = exam_code.Trim(',');
                                sql3 = "Select semester,subject_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) + (case when isnull(external_mark,0) >=0  then isnull(external_mark,0) else 0 end) as total,credit_points,case  result when 'Pass' Then 'PASS'  when 'P' Then 'PASS'when 'F' Then 'FAIL' when 'FAIL' Then 'FAIL' when 'AAA' then 'AAA' when 'WHD' then 'AAA' else 'FAIL' end as result,subject.Part_Type,sub_sem.priority,sub_sem.lab from Mark_Entry,Subject,sub_sem,syllabus_master  where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in (" + exam_code + ") and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester desc,subject.Part_Type,subject.subjectpriority,subject_code asc";
                                printds_rows.Clear();
                                printds_rows.Dispose();
                                printds_rows = da.select_method_wo_parameter(sql3, "Text");
                                string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-";
                                if (edu_level.Trim().ToLower() == "ug")
                                {
                                    batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 3));
                                    grade_set = "0";
                                }
                                else
                                {
                                    batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 2));
                                    grade_set = "1";
                                }
                                pdfdoi = new PdfTextArea(fontdegreename, System.Drawing.Color.Black, new PdfArea(mydoc, 41, 108, 505, 25), System.Drawing.ContentAlignment.MiddleCenter, degree.Trim() + " - " + branch.Trim());
                                mypdfpage.Add(pdfdoi);
                                table1forpage1 = mydoc.NewTable(fontStudDetails, 2, 3, 6);
                                table1forpage1.VisibleHeaders = false;
                                table1forpage1.SetBorders(Color.Black, 1, BorderType.None);
                                table1forpage1.SetColumnsWidth(new int[] { 320, 135, 185 });  //290, 300, 200 
                                table1forpage1.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(1, 0).SetContent(studname);
                                table1forpage1.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(1, 1).SetContent(regnumber);
                                table1forpage1.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(1, 2).SetContent(posFMonth.Trim() + " " + posFyear.Trim() + " - " + posTMonth.Trim() + " " + posTYear.Trim());
                                newpdftabpage2 = table1forpage1.CreateTablePage(new PdfArea(mydoc, 41, 149, 540, 100));//x=27
                                mypdfpage.Add(newpdftabpage2);
                                string stdphtsql = "select * from StdPhoto where app_no='" + stdappno + "'";
                                MemoryStream memoryStream = new MemoryStream();
                                DataSet dsstdpho = new DataSet();
                                dsstdpho.Clear();
                                dsstdpho.Dispose();
                                dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                                if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                                {
                                    byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                                    memoryStream.Write(file, 0, file.Length);
                                    if (file.Length > 0)
                                    {
                                        System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                        System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                        {
                                            //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                        }
                                        else
                                        {
                                            thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                            //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                        }
                                    }
                                }
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                {
                                    LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                                    mypdfpage.Add(LogoImage2, 480, 50, 420);
                                }
                                else
                                {
                                }
                                double sum_gpa = 0;
                                double tot_credit = 0;
                                bool gp_status = true;
                                DataSet dsSpl = new DataSet();
                                bool arrear = false;
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    //string exm_sem = Convert.ToString(printds_rows.Tables[0].Rows[0]["semester"]).Trim();
                                    fullmark = mydoc.NewTable(fontStmtMarks, printds_rows.Tables[0].Rows.Count + 4, 7, 3);
                                    fullmark.VisibleHeaders = false;
                                    fullmark.SetBorders(Color.Black, 1, BorderType.None);
                                    fullmark.Columns[0].SetWidth(65);
                                    fullmark.Columns[1].SetWidth(275);
                                    fullmark.Columns[2].SetWidth(40);
                                    fullmark.Columns[3].SetWidth(40);
                                    fullmark.Columns[4].SetWidth(40);
                                    fullmark.Columns[5].SetWidth(40);
                                    fullmark.Columns[6].SetWidth(55);
                                    int mr = 0;
                                    bool resu = true;
                                    double avg = 0, totobt = 0, Maxtotal = 0;
                                    for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                                    {
                                        bool arr_sub = false;
                                        if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                        {
                                            double weighted = 0;
                                            double internal_marks = 0, external_marks = 0, total = 0;
                                            string PartType = Convert.ToString(printds_rows.Tables[0].Rows[i]["Part_Type"]).Trim();
                                            string semester = Convert.ToString(printds_rows.Tables[0].Rows[i]["semester"]).Trim();
                                            //if (semester != sem && arrear == false)
                                            //{
                                            //    fullmark.Cell(mr, 3).SetCellPadding(6);
                                            //    fullmark.Cell(mr + 1, 3).SetContent("ARREAR(S) RESULT");
                                            //    fullmark.Cell(mr + 1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //    fullmark.Cell(mr + 2, 3).SetContent("-----------------");
                                            //    fullmark.Cell(mr + 2, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //    fullmark.Cell(mr + 3, 3).SetCellPadding(6);
                                            //    mr += 4;
                                            //    arrear = true;
                                            //}
                                            if (semester != sem)
                                            {
                                                arr_sub = true;
                                            }
                                            fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            string coursecod = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim();
                                            string coursename = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim();
                                            string maxinternalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["max_int_marks"]).Trim();
                                            string internalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim();
                                            string maxexternalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["max_ext_marks"]).Trim();
                                            string externalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim();
                                            string maxtotalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["maxtotal"]).Trim();
                                            string totalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim();
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim(), out internal_marks);
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim(), out external_marks);
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim(), out total);
                                            double maxtotalmark1 = 0;
                                            double.TryParse(maxtotalmark, out maxtotalmark1);
                                            Maxtotal += maxtotalmark1;
                                            double creditpoints = 0;
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim(), out creditpoints);
                                            double gradpoint = Math.Round(total / 10, 1, MidpointRounding.AwayFromZero);
                                            double checkmarkmm = 0;
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim(), out checkmarkmm);
                                            string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim();
                                            if (internal_marks < 0)
                                            {
                                                internalmark = "AB";
                                                result = "AAA";
                                                //weighted = 0;
                                                //gradpoint = 0;
                                                //resu = false;
                                                //gp_status = false;
                                            }
                                            else
                                            {
                                                internalmark = Convert.ToString(internalmark);
                                            }
                                            if (external_marks < 0)
                                            {
                                                externalmark = "AB";
                                                result = "AAA";
                                                //weighted = 0;
                                                //gradpoint = 0;
                                                //gp_status = false;
                                                //resu = false;
                                            }
                                            else
                                            {
                                                externalmark = Convert.ToString(external_marks);
                                            }
                                            if (result.ToLower().Trim() == "pass" || result.ToLower().Trim() == "p")
                                            {
                                                result = "PASS";
                                                tot_credit += creditpoints;
                                                totobt += total;
                                            }
                                            if (result.ToLower().Trim() == "fail" || result.ToLower().Trim() == "f" || result.ToLower().Trim() == "ra")
                                            {
                                                resu = false;
                                                result = "FAIL";
                                                //weighted = 0;
                                                //gradpoint = 0;
                                                //resu = false;
                                                //gp_status = false;
                                            }
                                            //weighted = Math.Round((creditpoints * gradpoint), 1, MidpointRounding.AwayFromZero);
                                            //if (arr_sub == false)
                                            //{
                                            //    if (PartType == "3")
                                            //    {
                                            //        tot_credit += creditpoints;
                                            //        sum_gpa += weighted;
                                            //    }
                                            //}
                                            //    fullmark.Cell(mr, 0).SetContent(PartType + "*");
                                            //fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            //fullmark.Cell(mr, 1).SetContent(semester);
                                            //fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 0).SetContent(coursecod);
                                            fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 1).SetContent(coursename);
                                            fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            //fullmark.Cell(mr, 4).SetContent(maxinternalmark);
                                            //fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 2).SetContent(Convert.ToString(creditpoints));
                                            fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 3).SetContent(internalmark);
                                            fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //fullmark.Cell(mr, 6).SetContent(maxexternalmark);
                                            //fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 4).SetContent(externalmark);
                                            fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //fullmark.Cell(mr, 8).SetContent(maxtotalmark);
                                            //fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 5).SetContent(totalmark);
                                            fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //fullmark.Cell(mr, 11).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            //fullmark.Cell(mr, 12).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 6).SetContent(Convert.ToString(result));
                                            fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        }
                                        mr++;
                                    }
                                    fullmark.Cell(mr, 3).SetCellPadding(6);
                                    fullmark.Cell(mr + 1, 1).SetContent(">>>>> END OF STATEMENT <<<<<");
                                    fullmark.Cell(mr + 1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    fullmark.Cell(mr + 2, 3).SetCellPadding(6);
                                    fullmark.Cell(mr + 3, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 41, 223, 540, 320));
                                    mypdfpage.Add(newpdftabpage2);
                                    avg = (totobt / Maxtotal) * 100;
                                    avg = Math.Round(avg, 2, MidpointRounding.AwayFromZero);
                                    table1forpage1 = mydoc.NewTable(fontStudDetails, 5, 3, 2);
                                    table1forpage1.VisibleHeaders = false;
                                    table1forpage1.SetBorders(Color.Black, 1, BorderType.None);
                                    table1forpage1.SetColumnsWidth(new int[] { 300, 200, 20 });  //290, 300, 200 
                                    table1forpage1.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    table1forpage1.Cell(1, 1).SetContent("Earned Credits : " + tot_credit);
                                    table1forpage1.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    table1forpage1.Cell(1, 0).SetContent("Total Mark Obtained : " + Convert.ToString(totobt + "/" + Maxtotal));
                                    table1forpage1.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    table1forpage1.Cell(2, 0).SetContent("Percentage : " + avg + "%");
                                    table1forpage1.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    table1forpage1.Cell(3, 0).SetContent("Class : " + ((avg >= 60) ? "I" : "II"));
                                    newpdftabpage2 = table1forpage1.CreateTablePage(new PdfArea(mydoc, 41, 563, 540, 150));//x=27
                                    mypdfpage.Add(newpdftabpage2);
                                }
                                pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 65, 765, 115, 25), System.Drawing.ContentAlignment.MiddleCenter, txtdoi.Text);
                                mypdfpage.Add(pdfdoi);
                            }
                            mypdfpage.SaveToDocument();
                        }
                    }
                }
            }
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
            }
        }
        catch (Exception ex)
        {
        }
    }

    #endregion MCC COLLEGE

    #region NOORUL ISLAM

    // FOR NOORUL ISLAM, COMPLETED @ 09.03.2016
    public void ugmarkstatementf4()
    {
        try
        {
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            DataSet semwisegpa = new DataSet();
            string degree = string.Empty;
            string degname = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string semroman = string.Empty;
            string coe = string.Empty;
            DataSet gradeds = new DataSet();
            Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            DataTable dtPart1 = new DataTable();
            DataTable dtPart2 = new DataTable();
            DataTable dtPart3 = new DataTable();
            DataTable dtPart4 = new DataTable();
            Font Fontarial9 = new Font("Arial", 8, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.5, 34.5));
            PdfPage mypdfpage;
            if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
            {
                FpSpread2.SaveChanges();
                for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
                {
                    int isval = 0;
                    isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                    if (isval == 1)
                    {
                        //mypdfpage = mydoc.NewPage();
                        printds.Clear();
                        printds.Dispose();
                        printds_new.Clear();
                        printds_new.Dispose();
                        rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                        regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                        string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';";
                        printds = da.select_method_wo_parameter(sql, "Text");
                        if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                        {
                            mypdfpage = mydoc.NewPage();
                            degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                            //month = ddlMonth.SelectedIndex;
                            //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                            int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                            monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                            string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                            monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                            monthandyear = monthandyear.ToUpper();
                            studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                            branch = printds.Tables[0].Rows[0]["Dept_name"].ToString();
                            dob = printds.Tables[0].Rows[0]["dob"].ToString();
                            string stdappno = printds.Tables[0].Rows[0]["App_No"].ToString();
                            batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                            degree_code = printds.Tables[0].Rows[0]["degree_code"].ToString();
                            sql2 = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                            printds_new = da.select_method_wo_parameter(sql2, "Text");
                            if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                            {
                                sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
                                if (sem == "1")
                                {
                                    semroman = "I";
                                }
                                else if (sem == "2")
                                {
                                    semroman = "II";
                                }
                                else if (sem == "3")
                                {
                                    semroman = "III";
                                }
                                else if (sem == "4")
                                {
                                    semroman = "IV";
                                }
                                else if (sem == "5")
                                {
                                    semroman = "V";
                                }
                                else if (sem == "6")
                                {
                                    semroman = "VI";
                                }
                                else if (sem == "7")
                                {
                                    semroman = "VII";
                                }
                                else if (sem == "8")
                                {
                                    semroman = "VIII";
                                }
                                //PdfTextArea pdfdoi = new PdfTextArea(Fontco10, System.Drawing.Color.Black, new PdfArea(mydoc, 113, 803, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                                //mypdfpage.Add(pdfdoi);
                                exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]).Trim();
                                sql3 = "Select semester,subject_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = '" + exam_code + "' and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;";
                                printds_rows.Clear();
                                printds_rows.Dispose();
                                printds_rows = da.select_method_wo_parameter(sql3, "Text");
                                PdfTable tblstudnameyear = mydoc.NewTable(Fontco12, 2, 6, 5);
                                tblstudnameyear.VisibleHeaders = false;
                                tblstudnameyear.SetBorders(Color.Black, 1, BorderType.None);
                                tblstudnameyear.SetColumnsWidth(new int[] { 130, 100, 150, 100, 180, 200 });
                                tblstudnameyear.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 2).SetContent(studname);
                                foreach (PdfCell pc in tblstudnameyear.CellRange(0, 2, 0, 2).Cells)
                                {
                                    pc.ColSpan = 4;
                                }
                                tblstudnameyear.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(1, 1).SetContent(regnumber);
                                foreach (PdfCell pc in tblstudnameyear.CellRange(1, 1, 1, 1).Cells)
                                {
                                    pc.ColSpan = 3;
                                }
                                tblstudnameyear.Cell(1, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(1, 5).SetContent(strMonthName + " - " + Convert.ToString(ddlYear.SelectedItem.Text).Trim());
                                PdfTablePage newpdftabpage2 = tblstudnameyear.CreateTablePage(new PdfArea(mydoc, 35, 124, 536, 46));
                                mypdfpage.Add(newpdftabpage2);
                                PdfTable tblDegreedetails = mydoc.NewTable(Fontco12, 2, 4, 5);
                                tblDegreedetails.VisibleHeaders = false;
                                tblDegreedetails.SetBorders(Color.Black, 1, BorderType.None);
                                tblDegreedetails.SetColumnsWidth(new int[] { 130, 180, 180, 180 });
                                tblDegreedetails.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblDegreedetails.Cell(0, 1).SetContent(degree);
                                foreach (PdfCell pc in tblDegreedetails.CellRange(0, 1, 0, 1).Cells)
                                {
                                    pc.ColSpan = 2;
                                }
                                tblDegreedetails.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblDegreedetails.Cell(1, 1).SetContent(branch);
                                foreach (PdfCell pc in tblDegreedetails.CellRange(1, 1, 1, 1).Cells)
                                {
                                    pc.ColSpan = 2;
                                }
                                tblDegreedetails.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblDegreedetails.Cell(1, 3).SetContent("");
                                newpdftabpage2 = tblDegreedetails.CreateTablePage(new PdfArea(mydoc, 35, 170, 536, 46));
                                mypdfpage.Add(newpdftabpage2);
                                //PdfTable tblMarkStmt = mydoc.NewTable(Fontco12, 2, 7, 3);
                                //tblMarkStmt.VisibleHeaders = false;
                                //tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                                //tblMarkStmt.SetColumnsWidth(new int[] { 80, 120, 300, 80, 80, 80, 80 });
                                //tblMarkStmt.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                //tblMarkStmt.Cell(1, 1).SetContent(branch);
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    PdfTable tblMarkStmt = mydoc.NewTable(Fontarial7, printds_rows.Tables[0].Rows.Count + 1, 7, 3);
                                    tblMarkStmt.VisibleHeaders = false;
                                    tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                                    //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                                    tblMarkStmt.SetColumnsWidth(new int[] { 33, 54, 282, 41, 41, 41, 41 });
                                    for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                                    {
                                        if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                        {
                                            tblMarkStmt.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            string sem1 = printds_rows.Tables[0].Rows[i]["semester"].ToString();
                                            tblMarkStmt.Cell(i, 0).SetContent(sem1);
                                            tblMarkStmt.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            string subjectccoden = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim();
                                            tblMarkStmt.Cell(i, 1).SetContent(subjectccoden);
                                            tblMarkStmt.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tblMarkStmt.Cell(i, 2).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim().ToUpper());
                                            double internalmmark = 0;
                                            double externalmark1 = 0;
                                            double totalintext = 0;
                                            tblMarkStmt.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(i, 4).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]), out internalmmark);
                                            double extfinal = 0;
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]), out extfinal);
                                            extfinal = Math.Round(extfinal, 0);
                                            externalmark1 = extfinal;
                                            string checkedmark = string.Empty;
                                            if (extfinal < 0)
                                            {
                                                checkedmark = loadmarkat(Convert.ToString(extfinal));
                                            }
                                            else
                                            {
                                                checkedmark = Convert.ToString(extfinal);
                                            }
                                            if (internalmmark >= 0)
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = internalmmark + externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = internalmmark;
                                                }
                                            }
                                            else
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = 0;
                                                }
                                            }
                                            double totfinal = 0;
                                            totfinal = Math.Round(totalintext, 0);
                                            tblMarkStmt.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(i, 3).SetContent(Convert.ToString(totfinal));
                                            string grade = string.Empty;
                                            double gradepoint = 0;
                                            string q = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + totfinal + "' between Frange and Trange; select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + totfinal + "' between Frange and Trange;";
                                            DataSet dsgrade = new DataSet();
                                            dsgrade = d2.select_method_wo_parameter(q, "Text");
                                            if (dsgrade.Tables.Count > 0)
                                            {
                                                if (dsgrade.Tables[0].Rows.Count == 0)
                                                {
                                                    if (dsgrade.Tables.Count > 1 && dsgrade.Tables[1].Rows.Count > 0)
                                                    {
                                                        grade = Convert.ToString(dsgrade.Tables[1].Rows[0]["Mark_Grade"]).Trim();
                                                    }
                                                }
                                                else
                                                {
                                                    grade = Convert.ToString(dsgrade.Tables[0].Rows[0]["Mark_Grade"]).Trim();
                                                }
                                            }
                                            gradepoint = totfinal / 10;
                                            tblMarkStmt.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(i, 6).SetContent(gradepoint);
                                            tblMarkStmt.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(i, 5).SetContent(grade);
                                            string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim();
                                            string r = string.Empty;
                                            //tblMarkStmt.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            if (result.ToUpper() == "PASS")
                                            {
                                                r = "P";
                                            }
                                            else if (result.ToUpper() == "FAIL")
                                            {
                                                r = "F";
                                            }
                                            else if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                            {
                                                r = "AAA";
                                            }
                                            else if (result.ToUpper() == "RE-APPEAR" || result.ToUpper() == "REAPPEAR")
                                            {
                                                r = "RA";
                                            }
                                            else
                                            {
                                                r = result;
                                            }
                                        }
                                    }
                                    tblMarkStmt.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(printds_rows.Tables[0].Rows.Count, 0).SetFont(Fontpala12);
                                    tblMarkStmt.Cell(printds_rows.Tables[0].Rows.Count, 0).SetCellPadding(9);
                                    tblMarkStmt.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContent("****** End of Statement ******");
                                    foreach (PdfCell pr in tblMarkStmt.CellRange(printds_rows.Tables[0].Rows.Count, 0, printds_rows.Tables[0].Rows.Count, 0).Cells)
                                    {
                                        pr.ColSpan = 7;
                                    }
                                    newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 35, 246, 536, 553));
                                    mypdfpage.Add(newpdftabpage2);
                                    PdfTable tblsemwisegpa = mydoc.NewTable(Fontarial7, 4, 11, 5);
                                    tblsemwisegpa.VisibleHeaders = false;
                                    tblsemwisegpa.SetBorders(Color.Black, 1, BorderType.None);
                                    tblsemwisegpa.SetColumnsWidth(new int[] { 100, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 });
                                    string semes = d2.GetFunction("select distinct Current_Semester from Registration where Batch_Year='" + batch_year + "' and degree_code='" + degree_code + "' and CC=0 and DelFlag=0 and Exam_Flag<>'debar'");
                                    int cur_sem = 0;
                                    int.TryParse(semes, out cur_sem);
                                    string quryallsemgpa = "Select semester,subject_code,exam_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,Part_Type from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in(select exam_code from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "') and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester,Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;select exam_code,current_semester from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "' order by exam_code,current_semester;";
                                    semwisegpa = d2.select_method_wo_parameter(quryallsemgpa, "Text");
                                    string[] gpa = new string[cur_sem - 1];
                                    double[] totcredit = new double[cur_sem - 1];
                                    double[] earnedcredit = new double[cur_sem - 1];

                                    #region magesh 25/1/18
                                    // calcsemwisegpa(semwisegpa, Convert.ToString(ddlCollege.SelectedValue).Trim(), degree_code, batch_year, semes, ref gpa, ref totcredit, ref earnedcredit);
                                    double[] gradfin = new double[cur_sem - 1];
                                    double cgpaove = 0.00;
                                    calcsemwisegpa(semwisegpa, Convert.ToString(ddlCollege.SelectedValue).Trim(), degree_code, batch_year, semes, ref gpa, ref totcredit, ref earnedcredit, ref gradfin);
                                    #endregion

                                    double totearnedcredit = 0;
                                    for (int s = 0; s < cur_sem - 1; s++)
                                    {
                                        tblsemwisegpa.Cell(0, s + 1).SetContent(totcredit[s]);
                                        tblsemwisegpa.Cell(1, s + 1).SetContent(earnedcredit[s]);
                                        tblsemwisegpa.Cell(2, s + 1).SetContent(gpa[s]);
                                        totearnedcredit += earnedcredit[s];
                                    }
                                    tblsemwisegpa.Cell(3, 1).SetContent(totearnedcredit);
                                    string latemode = "1";
                                    string cgpa = d2.Calculete_CGPA(rollnosub, semes, degree_code, batch_year, latemode, Convert.ToString(ddlCollege.SelectedValue).Trim());
                                    tblsemwisegpa.Cell(3, 10).SetContent(cgpa);
                                    //double overallearnedcredit = 0;
                                    //double overallcredit = 0;
                                    //string cgpa1 = string.Empty;
                                    //calcsemwisecgpa(semwisegpa, Convert.ToString(ddlCollege.SelectedValue).Trim(), degree_code, batch_year, semes, ref cgpa1, ref overallcredit, ref overallearnedcredit);
                                    newpdftabpage2 = tblsemwisegpa.CreateTablePage(new PdfArea(mydoc, 35, 812, 536, 84));
                                    mypdfpage.Add(newpdftabpage2);
                                    PdfTable tblftdate = mydoc.NewTable(Fontarial7, 1, 2, 3);
                                    tblftdate.VisibleHeaders = false;
                                    tblftdate.SetBorders(Color.Black, 1, BorderType.None);
                                    tblftdate.SetColumnsWidth(new int[] { 50, 130 });
                                    tblftdate.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    //tblftdate.Cell(0, 1).SetContent(DateTime.Now.Date.ToString("dd-MM-yyyy"));
                                    newpdftabpage2 = tblftdate.CreateTablePage(new PdfArea(mydoc, 35, 935, 142, 17));
                                    mypdfpage.Add(newpdftabpage2);
                                }
                            }
                            mypdfpage.SaveToDocument();
                        }
                    }
                }
            }
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
            }
        }
        catch (Exception ex)
        {
            lblerror.Visible = true;
            lblerror.Text = Convert.ToString(ex).Trim();
        }
    }

    // FOR NOORUL ISLAM, COMPLETED @ 10.03.2016
    public void markbasedconsolidatedF2()
    {
        try
        {
            DataSet printds = new DataSet();
            string lblerror1 = string.Empty;
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            //578
            Boolean printpage = false;
            string edu_level = string.Empty;
            string degree = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string roman = string.Empty;
            string semroman = string.Empty;
            string grade = string.Empty;
            string gradepoints = string.Empty;
            string coe = string.Empty;
            string subjectcode_Part1 = string.Empty;
            string subjectcode_Part2 = string.Empty;
            string subjectcode_Part3 = string.Empty;
            string subjectcode_Part4 = string.Empty;
            string cal_gpa = string.Empty;
            string current_semester = string.Empty;
            string app_no = string.Empty;
            string subtype = string.Empty;
            DataSet gradeds = new DataSet();
            Font f1_cos10bold = new Font("Comic Sans MS", 10, FontStyle.Bold);
            Font f2_cos9bold = new Font("Comic Sans MS", 9, FontStyle.Bold);
            Font f3_arial10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font f4_arial7reg = new Font("Arial", 7, FontStyle.Regular);
            Font f5_pal10bold = new Font("Palatino Linotype", 10, FontStyle.Bold);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.5, 34.5));
            PdfPage mypdfpage;
            FpSpread2.SaveChanges();
            for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                if (isval == 1)
                {
                    printds.Clear();
                    printds.Dispose();
                    printds_new.Clear();
                    printds_new.Dispose();
                    rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                    regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                    string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,c.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
                    sql = sql + "  select count(s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'  ";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail'  and roll_no='" + rollnosub + "'  ";
                    printds = da.select_method_wo_parameter(sql, "Text");
                    int noofsubapplied = Convert.ToInt32(printds.Tables[3].Rows[0][0].ToString());
                    int noofsubpassed = Convert.ToInt32(printds.Tables[4].Rows[0][0].ToString());
                    int noofsubfailed = Convert.ToInt32(printds.Tables[5].Rows[0][0].ToString());
                    if (printds.Tables[0].Rows.Count > 0 && noofsubpassed == noofsubapplied)
                    {
                        printpage = true;
                        string principal = string.Empty;
                        edu_level = Convert.ToString(printds.Tables[0].Rows[0]["Edu_Level"]).Trim();
                        app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]);
                        mypdfpage = mydoc.NewPage();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        coe = printds.Tables[1].Rows[0]["coe"].ToString();
                        string[] spiltcoe = coe.Split(' ');
                        string newcoe = string.Empty;
                        for (int ce = 1; ce < spiltcoe.GetUpperBound(0); ce++)
                        {
                            string[] spiltcoe12 = spiltcoe[0].Split('.');
                            if (spiltcoe12.Length == 3)
                            {
                                newcoe = spiltcoe12[1].ToString();
                                newcoe = newcoe + "." + spiltcoe12[2].ToString();
                            }
                            if (newcoe == "")
                            {
                                newcoe = spiltcoe[ce].ToString();
                            }
                            else
                            {
                                newcoe = newcoe + " " + spiltcoe[ce].ToString();
                            }
                        }
                        coe = newcoe;
                        principal = printds.Tables[1].Rows[0]["principal"].ToString();
                        string[] spiltprinci = principal.Split('.');
                        string newprinc = string.Empty;
                        for (int ce = 1; ce <= spiltprinci.GetUpperBound(0); ce++)
                        {
                            if (newprinc == "")
                            {
                                newprinc = spiltprinci[ce].ToString();
                            }
                            else
                            {
                                newprinc = newprinc + "." + spiltprinci[ce].ToString();
                            }
                        }
                        principal = newprinc.ToUpper();
                        // month = ddlMonth.SelectedIndex;
                        //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                        string strMonthName = string.Empty;
                        //monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        //monthandyear = monthandyear.ToUpper();
                        studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        branch = printds.Tables[0].Rows[0]["Dept_name"].ToString();
                        dob = printds.Tables[0].Rows[0]["dob"].ToString();
                        string stdappno = printds.Tables[0].Rows[0]["App_No"].ToString();
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = printds.Tables[0].Rows[0]["degree_code"].ToString();
                        //sql2 = "select * from exam_details where    degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                        //printds_new = da.select_method_wo_parameter(sql2, "Text");
                        // if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                        //{
                        //sem =Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
                        if (sem == "1")
                        {
                            semroman = "I";
                        }
                        else if (sem == "2")
                        {
                            semroman = "II";
                        }
                        else if (sem == "3")
                        {
                            semroman = "III";
                        }
                        else if (sem == "4")
                        {
                            semroman = "IV";
                        }
                        else if (sem == "5")
                        {
                            semroman = "V";
                        }
                        else if (sem == "6")
                        {
                            semroman = "VI";
                        }
                        else if (sem == "7")
                        {
                            semroman = "VII";
                        }
                        else if (sem == "8")
                        {
                            semroman = "VIII";
                        }
                        //PdfTextArea pdfdoi = new PdfTextArea(f2_cos9bold, System.Drawing.Color.Black, new PdfArea(mydoc, 44, 958, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                        //mypdfpage.Add(pdfdoi);
                        // exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]).Trim();
                        sql3 = "Select syllabus_master.semester,Subject_Type,subject_name,subject_code,subject.subject_no,result,max_int_marks,max_ext_marks,internal_mark,external_mark,total,maxtotal,grade,cp,credit_points,mark_entry.subject_no,semester,maxtotal,exam_code from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'  order by syllabus_master.semester,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no";
                        printds_rows.Clear();
                        printds_rows.Dispose();
                        printds_rows = da.select_method_wo_parameter(sql3, "Text");
                        string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-";
                        if (edu_level.Trim().ToLower() == "ug")
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 3));
                        }
                        else
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 2));
                        }
                        PdfTable tblstudDetail = mydoc.NewTable(f1_cos10bold, 2, 7, 5);
                        tblstudDetail.VisibleHeaders = false;
                        tblstudDetail.SetBorders(Color.Black, 1, BorderType.None);
                        tblstudDetail.SetColumnsWidth(new int[] { 84, 57, 47, 56, 140, 57, 126 });
                        tblstudDetail.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudDetail.Cell(0, 2).SetContent(studname);
                        foreach (PdfCell pc in tblstudDetail.CellRange(0, 2, 0, 2).Cells)
                        {
                            pc.ColSpan = 3;
                        }
                        tblstudDetail.Cell(0, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(0, 6).SetContent(regnumber);
                        tblstudDetail.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudDetail.Cell(1, 1).SetContent(degree);
                        //foreach (PdfCell pc in tblstudDetail.CellRange(1, 1, 1, 1).Cells)
                        //{
                        //    pc.ColSpan = 1;
                        //}
                        tblstudDetail.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudDetail.Cell(1, 4).SetContent(branch);
                        tblstudDetail.Cell(1, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(1, 6).SetContent(batch_year1);
                        PdfTablePage newpdftabpage2 = tblstudDetail.CreateTablePage(new PdfArea(mydoc, 33, 108, 533, 44));
                        mypdfpage.Add(newpdftabpage2);
                        //string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-" + DateTime.Now.ToString("yyyy"); 
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            PdfTable fullmark = mydoc.NewTable(f4_arial7reg, printds_rows.Tables[0].Rows.Count + 1, 8, 4);
                            fullmark.VisibleHeaders = false;
                            fullmark.SetBorders(Color.Black, 1, BorderType.None);
                            fullmark.Columns[0].SetWidth(34);
                            fullmark.Columns[1].SetWidth(47);
                            fullmark.Columns[2].SetWidth(240);
                            fullmark.Columns[3].SetWidth(31);
                            fullmark.Columns[4].SetWidth(40);
                            fullmark.Columns[5].SetWidth(31);
                            fullmark.Columns[6].SetWidth(37);
                            fullmark.Columns[7].SetWidth(71);
                            for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                            {
                                fullmark.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(i, 0).SetContent(printds_rows.Tables[0].Rows[i]["semester"].ToString());
                                fullmark.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(i, 1).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]));
                                fullmark.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                fullmark.Cell(i, 2).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).ToUpper());
                                double internalmmark = 0;
                                double externalmark1 = 0;
                                double totalintext = 0;
                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]), out internalmmark);
                                double extfinal = 0;
                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]), out extfinal);
                                extfinal = Math.Round(extfinal, 0);
                                externalmark1 = extfinal;
                                string checkedmark = string.Empty;
                                if (extfinal < 0)
                                {
                                    checkedmark = loadmarkat(Convert.ToString(extfinal));
                                }
                                else
                                {
                                    checkedmark = Convert.ToString(extfinal);
                                }
                                if (internalmmark >= 0)
                                {
                                    if (extfinal > 0)
                                    {
                                        totalintext = internalmmark + externalmark1;
                                    }
                                    else
                                    {
                                        totalintext = internalmmark;
                                    }
                                }
                                else
                                {
                                    if (extfinal > 0)
                                    {
                                        totalintext = externalmark1;
                                    }
                                    else
                                    {
                                        totalintext = 0;
                                    }
                                }
                                double totfinal = 0;
                                totfinal = Math.Round(totalintext, 0);
                                fullmark.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(i, 3).SetContent(Convert.ToString(totfinal));
                                fullmark.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(i, 4).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]));
                                double checkmarkmm = 0;
                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]), out checkmarkmm);
                                string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";
                                gradeds.Clear();
                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                {
                                    gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 
                                    gradeds.Clear();
                                    gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                }
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                {
                                    for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                    {
                                        if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                        {
                                            grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
                                            gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
                                        }
                                    }
                                }
                                double gradeibtpoint = 0;
                                double.TryParse(Convert.ToString(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim()), out gradeibtpoint);
                                gradeibtpoint = gradeibtpoint / 10;
                                gradeibtpoint = Math.Round(gradeibtpoint, 1);
                                gradepoints = Convert.ToString(gradeibtpoint);
                                gradepoints = Convert.ToString(Math.Round(Convert.ToDouble(gradeibtpoint), 2));
                                gradepoints = String.Format("{0:0.00}", gradepoints);
                                string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).ToLower();
                                if (result == "fail")
                                {
                                    result = "RA";
                                    grade = "U";
                                }
                                else if (result == "pass")
                                {
                                    result = "P";
                                }
                                else
                                {
                                    result = "AB";
                                    grade = "U";
                                }
                                totfinal = totfinal * Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
                                fullmark.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(i, 5).SetContent(grade);
                                fullmark.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(i, 6).SetContent(gradepoints);
                                totfinal = Math.Round(totfinal, 0);
                                //fullmark.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(i, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                DataView dv = new DataView();
                                printds.Tables[2].DefaultView.RowFilter = "exam_code='" + Convert.ToString(printds_rows.Tables[0].Rows[i]["exam_code"]).Trim() + "'";
                                dv = printds.Tables[2].DefaultView;
                                if (dv.Count > 0)
                                {
                                    string exam_y = Convert.ToString(dv[0]["Exam_year"]).Trim();
                                    string exam_m = Convert.ToString(dv[0]["Exam_Month"]).Trim();
                                    strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                    strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                    strMonthName = strMonthName.ToUpper() + " " + exam_y + "   ";
                                    fullmark.Cell(i, 7).SetContent(strMonthName);
                                }
                            }
                            fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetFont(f5_pal10bold);
                            fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContent("****** End of Statement ******");
                            foreach (PdfCell pr in fullmark.CellRange(printds_rows.Tables[0].Rows.Count, 0, printds_rows.Tables[0].Rows.Count, 0).Cells)
                            {
                                pr.ColSpan = 8;
                            }
                            newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 33, 183, 533, 709));
                            mypdfpage.Add(newpdftabpage2);
                            PdfTable tblcgpaclass = mydoc.NewTable(f2_cos9bold, 1, 2, 3);
                            tblcgpaclass.VisibleHeaders = false;
                            tblcgpaclass.SetBorders(Color.Black, 1, BorderType.None);
                            tblcgpaclass.Columns[0].SetWidth(75);
                            tblcgpaclass.Columns[1].SetWidth(130);
                            double partsums = 0.00;
                            int partrowcount = 0;
                            double Credit_Points = 0.0;
                            double grade_points = 0.0;
                            double creditstotal = 0;
                            double overalltotgrade = 0;
                            // noofsubfailed = 1;
                            if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                            {
                                string sumpart = string.Empty;
                                DataView dv_demand_data = new DataView();
                                DataView dv_demand_datadummy = new DataView();
                                printds_rows.Tables[0].DefaultView.RowFilter = "result='pass'";
                                dv_demand_data = printds_rows.Tables[0].DefaultView;
                                if (dv_demand_data.Count > 0)
                                {
                                    for (int sum = 0; sum < dv_demand_data.Count; sum++)
                                    {
                                        double.TryParse(Convert.ToString(dv_demand_data[sum]["total"]), out grade_points);
                                        double.TryParse(Convert.ToString(dv_demand_data[sum]["credit_points"]), out Credit_Points);
                                        grade_points = grade_points / 10;
                                        creditstotal = creditstotal + Credit_Points;
                                        partsums = partsums + (grade_points * Credit_Points);
                                    }
                                    if (creditstotal == 0)
                                    {
                                        sumpart = "0";
                                    }
                                    else if (creditstotal > 0)
                                    {
                                        partsums = (partsums / creditstotal);
                                        // partsums = Math.Round(partsums, 0);                                      
                                        partsums = Math.Round(partsums, 0, MidpointRounding.AwayFromZero);
                                        // sumpart = String.Format("{0:0.00}", partsums);
                                        sumpart = Convert.ToString(partsums);
                                    }
                                    else
                                    {
                                        sumpart = "0";
                                    }
                                }
                                else
                                {
                                    sumpart = "--";
                                }
                                if (sumpart != "--")
                                {
                                    double sumpartgrade = 0;
                                    if (double.TryParse(sumpart, out sumpartgrade))
                                    {
                                        //sumpartgrade = Convert.ToDouble(sumpart);
                                        overalltotgrade = overalltotgrade + sumpartgrade;
                                    }
                                    else
                                    {
                                        sumpartgrade = 0;
                                    }
                                    string batchsetting = "1";
                                    if (noofsubfailed != 0 && overalltotgrade >= 6)
                                    {
                                        string cclass = "FIRST";
                                        tblcgpaclass.Cell(0, 0).SetContent(sumpart);
                                        tblcgpaclass.Cell(0, 1).SetContent(cclass);
                                    }
                                    else
                                    {
                                        string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                        {
                                            tblcgpaclass.Cell(0, 0).SetContent(sumpart);
                                            tblcgpaclass.Cell(0, 1).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                        }
                                    }
                                }
                                else
                                {
                                    tblcgpaclass.Cell(0, 0).SetContent(sumpart);
                                }
                            }
                            else
                            {
                                tblcgpaclass.Cell(0, 0).SetContent("--");
                            }
                            newpdftabpage2 = tblcgpaclass.CreateTablePage(new PdfArea(mydoc, 146, 921, 213, 50));
                            mypdfpage.Add(newpdftabpage2);
                        }
                        //PdfTextArea pdfdoi = new PdfTextArea(f2_cos9bold, System.Drawing.Color.Black, new PdfArea(mydoc, 74, 858, 71, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                        //mypdfpage.Add(pdfdoi);
                        string medium = d2.GetFunction("select TextVal from TextValTable where TextCriteria='medi' and college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and TextCode in(select isnull(medium_ins,0) from applyn  where app_no='" + app_no + "')");
                        if (medium != "" && medium != null && medium != "0")
                        {
                            PdfTextArea pdfdoi = new PdfTextArea(f2_cos9bold, System.Drawing.Color.Black, new PdfArea(mydoc, 304, 858, 190, 50), System.Drawing.ContentAlignment.TopLeft, medium);
                            mypdfpage.Add(pdfdoi);
                        }
                        mypdfpage.SaveToDocument();
                    }
                    else
                    {
                        if (lblerror1 == "")
                        {
                            lblerror1 = rollnosub;
                        }
                        else
                        {
                            lblerror1 = lblerror1 + "," + rollnosub;
                        }
                    }
                }
            }
            //} 
            if (lblerror1 != "")
            {
                lblerror.Text = lblerror1;
                lblerror.Visible = true;
            }
            else
            {
                lblerror.Text = string.Empty;
                lblerror.Visible = false;
            }
            if (printpage == true)
            {
                string appPath = HttpContext.Current.Server.MapPath("~");
                if (appPath != "")
                {
                    string szPath = appPath + "/Report/";
                    string szFile = "consolidatedmarksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                    mydoc.SaveToFile(szPath + szFile);
                    Response.ClearHeaders();
                    Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                    Response.ContentType = "application/pdf";
                    Response.WriteFile(szPath + szFile);
                }
            }
        }
        catch (Exception ex)
        {
            lblerror.Visible = true;
            lblerror.Text = Convert.ToString(ex).Trim();
        }
    }

    /// <summary>
    /// This method is used for Calculate SGPA For all Semester i.e. Semester wise GPA Calculation For Individual Students.
    /// Developed By Malang Raja T on 09/03/2016.
    /// </summary>
    /// <param name="ds">This Dataset Should have 2 tables one contains all semester Marks for particular student.Second table contains exam code of each and every semester</param>
    /// <param name="coll_code">College Code</param>
    /// <param name="degree_code">Degree Code</param>
    /// <param name="batch_yr">Batch Year</param>
    /// <param name="sem">Current Semester</param>
    /// <param name="gpa">Reference Type string array to store semester wise gpa</param>
    /// <param name="totcredit">Reference Type double array to store semester wise total credit</param>
    /// <param name="earnedcredit">Reference Type double array to store semester wise earned credit</param>
    /// 
    // megesh 27jan2018 public void calcsemwisegpa(DataSet ds, string coll_code, string degree_code, string batch_yr, string sem, ref string[] gpa, ref double[] totcredit, ref double[] earnedcredit)
    public void calcsemwisegpa(DataSet ds, string coll_code, string degree_code, string batch_yr, string sem, ref string[] gpa, ref double[] totcredit, ref double[] earnedcredit, ref double[] gradfin)
    {
        int semester = 0;
        int.TryParse(sem, out semester);
        int prev_sem = semester - 1;
        string batchsetting = "0";
        double partsums = 0.000;
        double partwpmsum = 0.000;
        double cgpa = 0;
        //magesh 26/1/18
        double gradcrit = 0.0;//magesh 25/1/18
        int partrowcount = 0;
        double Credit_Points = 0.0;
        double grade_points = 0.0;
        double creditstotal = 0;
        double overallcredit = 0;
        double overalltotgrade = 0;
        double Marks = 0;
        DataTable dvallSubcount = new DataTable();
        DataView dvpassedsubcnt = new DataView();
        DataSet gradeds = new DataSet();
        string[] examcode = new string[semester];
        totcredit = new double[prev_sem];
        gpa = new string[prev_sem];
        earnedcredit = new double[prev_sem];
        try
        {
            if (ds.Tables.Count > 1 && ds.Tables[1].Rows.Count > 0)
            {
                for (int ex = 0; ex < ds.Tables[1].Rows.Count; ex++)
                {
                    examcode[ex] = Convert.ToString(ds.Tables[1].Rows[ex]["exam_code"]);
                }
            }
            overalltotgrade = 0;
            overallcredit = 0;
            for (int cur_sem = 0; cur_sem < semester - 1; cur_sem++)
            {
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    string sumpart = string.Empty;
                    string wpm = string.Empty;
                    ds.Tables[0].DefaultView.RowFilter = "semester='" + (cur_sem + 1) + "' and exam_code='" + examcode[cur_sem] + "'";
                    dvallSubcount = ds.Tables[0].DefaultView.ToTable();
                    partrowcount = dvallSubcount.Rows.Count;
                    ds.Tables[0].DefaultView.RowFilter = "semester='" + (cur_sem + 1) + "' and result='pass'";//and exam_code='" + examcode[cur_sem - 1] + "'
                    dvpassedsubcnt = ds.Tables[0].DefaultView;
                    if (partrowcount > 0)
                    {
                        double ttcredit = 0;
                        for (int rs = 0; rs < partrowcount; rs++)
                        {
                            double.TryParse(Convert.ToString(dvallSubcount.Rows[rs]["credit_points"]), out ttcredit);
                            totcredit[cur_sem] += ttcredit;
                        }
                    }
                    if (dvpassedsubcnt.Count > 0 && partrowcount == dvpassedsubcnt.Count)
                    {
                        for (int sum = 0; sum < dvpassedsubcnt.Count; sum++)
                        {
                            double checkmarkmm = Convert.ToDouble(dvpassedsubcnt[sum]["total"].ToString());
                            string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_yr + "' and '" + checkmarkmm + "' between frange and trange";//added by sridhar 16/aug 2014
                            gradeds.Clear();
                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                            {
                                gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_yr + "'  and '" + checkmarkmm + "' between frange and trange";//added by sridhar 
                                gradeds.Clear();
                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                            }
                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                            {
                                for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                {
                                    if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                    {
                                        #region magesh 25/1/18
                                        double.TryParse(Convert.ToString(gradeds.Tables[0].Rows[0]["credit_points"]), out gradcrit);
                                        gradfin[cur_sem] += gradcrit;//magesh 25/1/18
                                        #endregion
                                        //grade_points = Convert.ToDouble(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim());
                                        double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["total"]), out grade_points);
                                        double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["total"]), out Marks);
                                        grade_points = grade_points / 10;
                                        //Credit_Points = Convert.ToDouble(Convert.ToString(dtPart1.Rows[sum]["credit_points"]).Trim());
                                        double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["credit_points"]), out Credit_Points);
                                        earnedcredit[cur_sem] += Credit_Points;
                                        partwpmsum += (Credit_Points * Marks);
                                        partsums = partsums + (grade_points * Credit_Points);
                                    }
                                }
                            }
                        }
                        overalltotgrade += partsums;
                        overallcredit += earnedcredit[cur_sem];
                        if (earnedcredit[cur_sem] == 0)
                        {
                            sumpart = "0.000";
                            wpm = "0.000";
                        }
                        else if (earnedcredit[cur_sem] > 0)
                        {
                            partsums = (partsums / earnedcredit[cur_sem]);
                            partsums = Math.Round(partsums, 3);
                            partwpmsum = (partwpmsum / earnedcredit[cur_sem]);
                            partwpmsum = Math.Round(partwpmsum, 3);
                            sumpart = String.Format("{0:0.000}", partsums);
                            wpm = string.Format("{0:0.000}", partwpmsum);
                        }
                        else
                        {
                            sumpart = "0.000";
                            wpm = "0.000";
                        }
                    }
                    else if (partrowcount > 0)
                    {
                        sumpart = "0.000";
                        wpm = "0.000";
                    }
                    else
                    {
                        sumpart = "--";
                        wpm = "--";
                    }
                    gpa[cur_sem] = sumpart;
                    //earnedcredit[cur_sem - 1] = creditstotal;
                }
            }
            if (overallcredit > 0)
            {
                cgpa = overalltotgrade / overallcredit;
                cgpa = Math.Round(cgpa, 3);
            }
        }
        catch (Exception ex)
        {
            lblerror.Visible = true;
            lblerror.Text = Convert.ToString(ex).Trim();
        }
    }

    public void calcsemwisecgpa(DataSet ds, string coll_code, string degree_code, string batch_yr, string sem, ref string cgpa1, ref double totcredit, ref double earnedcredit)
    {
        int semester = 0;
        int.TryParse(sem, out semester);
        int prev_sem = semester - 1;
        string batchsetting = "0";
        double partsums = 0.000;
        double partwpmsum = 0.000;
        double cgpa = 0;
        int partrowcount = 0;
        double Credit_Points = 0.0;
        double grade_points = 0.0;
        double creditstotal = 0;
        double overallcredit = 0;
        double overalltotgrade = 0;
        double Marks = 0;
        DataTable dvallSubcount = new DataTable();
        DataView dvpassedsubcnt = new DataView();
        DataSet gradeds = new DataSet();
        string[] examcode = new string[semester];
        //totcredit = new double[prev_sem];
        //gpa = new string[prev_sem];
        //earnedcredit = new double[prev_sem];
        try
        {
            if (ds.Tables.Count > 1 && ds.Tables[1].Rows.Count > 0)
            {
                for (int ex = 0; ex < ds.Tables[1].Rows.Count; ex++)
                {
                    examcode[ex] = Convert.ToString(ds.Tables[1].Rows[ex]["exam_code"]);
                }
            }
            overalltotgrade = 0;
            overallcredit = 0;
            //for (int cur_sem = 0; cur_sem < semester - 1; cur_sem++)
            //{
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)//&& ds.Tables[1].Rows.Count > 0
            {
                string sumpart = string.Empty;
                string wpm = string.Empty;
                //ds.Tables[0].DefaultView.RowFilter = "semester='" + (cur_sem + 1) + "' and exam_code='" + examcode[cur_sem] + "'";
                //dvallSubcount = ds.Tables[0].DefaultView.ToTable();
                //partrowcount = dvallSubcount.Rows.Count;
                ds.Tables[0].DefaultView.RowFilter = "result='pass'";//and exam_code='" + examcode[cur_sem - 1] + "'
                dvpassedsubcnt = ds.Tables[0].DefaultView;
                //if (partrowcount > 0)
                //{
                //    double ttcredit = 0;
                //    for (int rs = 0; rs < partrowcount; rs++)
                //    {
                //        double.TryParse(Convert.ToString(dvallSubcount.Rows[rs]["credit_points"]), out ttcredit);
                //        totcredit[cur_sem] += ttcredit;
                //    }
                //}
                if (dvpassedsubcnt.Count > 0)
                {
                    for (int sum = 0; sum < dvpassedsubcnt.Count; sum++)
                    {
                        double checkmarkmm = Convert.ToDouble(dvpassedsubcnt[sum]["total"].ToString());
                        string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_yr + "' and '" + checkmarkmm + "' between frange and trange";//added by sridhar 16/aug 2014
                        gradeds.Clear();
                        gradeds = da.select_method_wo_parameter(gradesql, "Text");
                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                        {
                            gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_yr + "'  and '" + checkmarkmm + "' between frange and trange";//added by sridhar 
                            gradeds.Clear();
                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                        }
                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                        {
                            for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                            {
                                if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                {

                                    //grade_points = Convert.ToDouble(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim());
                                    double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["total"]), out grade_points);
                                    double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["total"]), out Marks);
                                    grade_points = grade_points / 10;
                                    //Credit_Points = Convert.ToDouble(Convert.ToString(dtPart1.Rows[sum]["credit_points"]).Trim());
                                    double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["credit_points"]), out Credit_Points);
                                    overallcredit += Credit_Points;
                                    partwpmsum += (Credit_Points * Marks);
                                    partsums = partsums + (grade_points * Credit_Points);
                                }
                            }
                        }
                    }
                    overalltotgrade += partsums;
                    //overallcredit += earnedcredit[cur_sem];
                    if (overallcredit == 0)
                    {
                        sumpart = "0.000";
                        wpm = "0.000";
                    }
                    else if (overallcredit > 0)
                    {
                        partsums = (partsums / overallcredit);
                        partsums = Math.Round(partsums, 3);
                        cgpa = partsums;
                        partwpmsum = (partwpmsum / overallcredit);
                        partwpmsum = Math.Round(partwpmsum, 3);
                        sumpart = String.Format("{0:0.000}", partsums);
                        wpm = string.Format("{0:0.000}", partwpmsum);
                    }
                    else
                    {
                        sumpart = "0.000";
                        wpm = "0.000";
                    }
                }
                //else if (partrowcount > 0)
                //{
                //    sumpart = "0.000";
                //    wpm = "0.000";
                //}
                else
                {
                    sumpart = "--";
                    wpm = "--";
                }
                cgpa1 = Convert.ToString(cgpa);
                //gpa[cur_sem] = sumpart;
                //earnedcredit[cur_sem - 1] = creditstotal;
            }
            //}
            //if (overallcredit > 0)
            //{
            //    cgpa = overalltotgrade / overallcredit;
            //    cgpa = Math.Round(cgpa, 3);
            //}
        }
        catch (Exception ex)
        {
            lblerror.Visible = true;
            lblerror.Text = Convert.ToString(ex).Trim();
        }
    }

    #endregion NOORUL ISLAM COLLEGE

    #region CHRISTOPHER COLLEGE

    //FOR CHRISTOBER COLLEGE
    public void ugmarkstatementformat5()
    {
        try
        {
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            //DataSet semwisegpa = new DataSet();
            string degree = string.Empty;
            string degname = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string issuedate = string.Empty;
            string semroman = string.Empty;
            string edu_level = string.Empty;
            string coe = string.Empty;
            DataSet gradeds = new DataSet();
            lblerror.Visible = false;
            lblerror.Text = string.Empty;
            bool isSupplementaryExam = false;
            string SupplementaryExam = string.Empty;
            //bool.TryParse(SupplementaryExam.Trim(), out isSupplementaryExam); 
            Font fondColName = new Font("Comic Sans MS", 18, FontStyle.Bold);
            Font fontdegexam = new Font("Arial", 12, FontStyle.Bold);
            Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco11 = new Font("Comic Sans MS", 11, FontStyle.Bold);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
            Font Fontwma = new Font("Arial", 8, FontStyle.Bold);
            Font Font8bold = new Font("Arial", 8, FontStyle.Bold);
            Font Font10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            DataTable dtPart1 = new DataTable();
            DataTable dtPart2 = new DataTable();
            DataTable dtPart3 = new DataTable();
            DataTable dtPart4 = new DataTable();
            Font Fontarial9 = new Font("Arial", 9, FontStyle.Bold);
            Font Fontarial10b = new Font("Arial", 11, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.3, 30.3));
            PdfPage mypdfpage;
            bool specialcourse = false;
            //if (ddlSubject.SelectedIndex == 0)
            //{
            //    specialcourse = false;
            //}
            //else
            //{
            //    specialcourse = true;
            //}
            string semesterwise = string.Empty;
            string Subsem = string.Empty;
            //if (cblSem.Items.Count > 0)
            //    Subsem = reuse.getCblSelectedValue(cblSem);
            //if (!string.IsNullOrEmpty(Subsem))
            //    semesterwise = "and semester in('" + Subsem + "')";

            Dictionary<string, string> dicSubjectList = new Dictionary<string, string>();
            bool isSelectSubject = false;
            foreach (ListItem liSub in cblSubject.Items)
            {
                string subjectNos = Convert.ToString(liSub.Value).Trim();
                string subjectName = Convert.ToString(liSub.Text).Trim();
                if (liSub.Selected)
                {
                    isSelectSubject = true;
                    specialcourse = true;
                    if (!dicSubjectList.ContainsKey(subjectNos))
                    {
                        dicSubjectList.Add(subjectNos, subjectName);
                    }
                }
            }
            if (isSelectSubject)
            {
                specialcourse = true;
            }
            else
            {
                specialcourse = false;
            }
            if (Convert.ToString(ddlMonth.SelectedValue).Trim() != "0" && Convert.ToString(ddlYear.SelectedValue).Trim() != "0")
            {
                string strquery = "select *,district+' - '+pincode  as districtpin from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                ds.Dispose();
                ds.Reset();
                ds = d2.select_method_wo_parameter(strquery, "Text");
                string Collegename = string.Empty;
                string aff = string.Empty;
                string collacr = string.Empty;
                string dispin = string.Empty;
                string clgaddress = string.Empty;
                string univ = string.Empty;
                string pincode = string.Empty;
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    Collegename = Convert.ToString(ds.Tables[0].Rows[0]["Collname"]).Trim();
                    aff = Convert.ToString(ds.Tables[0].Rows[0]["affliatedby"]).Trim();
                    univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]).Trim();
                    string[] strpa = aff.Split(',');
                    aff = "( " + univ + " " + strpa[0] + " )";
                    //coename =Convert.ToString( ds.Tables[0].Rows[0]["coe"]).Trim();
                    collacr = Convert.ToString(ds.Tables[0].Rows[0]["acr"]).Trim();
                    pincode = Convert.ToString(ds.Tables[0].Rows[0]["pincode"]).Trim();
                    pincode = pincode.Substring(pincode.Length - 3);
                    int pin = 0;
                    int.TryParse(pincode, out pin);
                    //((pincode.Length > 0) ? pincode.Substring(pincode.Length - 1) : ""
                    //char[] pin = pincode.Substring(pincode.Length - 1);
                    clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]).Trim() + " , " + Convert.ToString(ds.Tables[0].Rows[0]["district"]).Trim() + ((pin != 0) ? (" - " + pin.ToString()) : " - " + pincode);
                    clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]).Trim();
                    dispin = Convert.ToString(ds.Tables[0].Rows[0]["districtpin"]).Trim();
                }
                FpSpread2.SaveChanges();
                for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
                {
                    int isval = 0;
                    isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                    if (isval == 1)
                    {
                        printds.Clear();
                        printds.Dispose();
                        printds_new.Clear();
                        printds_new.Dispose();
                        rollnosub = Convert.ToString(FpSpread2.Sheets[0].Cells[res, 1].Text).Trim();
                        regnumber = Convert.ToString(FpSpread2.Sheets[0].Cells[res, 2].Text).Trim();

                        string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,C.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';";
                        printds = da.select_method_wo_parameter(sql, "Text");
                        if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                        {

                            string app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]).Trim();
                            degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                            //month = ddlMonth.SelectedIndex;
                            //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                            int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                            monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                            string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                            monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                            monthandyear = monthandyear.ToUpper();
                            studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                            issuedate = Convert.ToString(txtdoi.Text).Trim();
                            branch = Convert.ToString(printds.Tables[0].Rows[0]["Dept_name"]).Trim();
                            dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]).Trim();
                            edu_level = Convert.ToString(printds.Tables[0].Rows[0]["edu_level"]).Trim();
                            string stdappno = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();
                            batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                            degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim();
                            string medium = d2.GetFunctionv("select TextVal from TextValTable where TextCriteria='medi' and college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and TextCode in(select isnull(medium_ins,0) from applyn  where app_no='" + app_no + "')");
                            sql2 = "select * from exam_details where degree_code='" + degree_code + "' and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and batch_year=" + batch_year + "";
                            printds_new = da.select_method_wo_parameter(sql2, "Text");
                            if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                            {
                                //for (int semW = 0; semW < cblSem.Items.Count; semW++)//Rajkumar on 8-6-2018 for semwise individual marksheet
                                //{
                                //    if (cblSem.Items[semW].Selected)
                                //    {
                                mypdfpage = mydoc.NewPage();
                                // string semdet = Convert.ToString(cblSem.Items[semW].Text);
                                sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
                                SupplementaryExam = string.Empty;
                                SupplementaryExam = Convert.ToString(printds_new.Tables[0].Rows[0]["isSupplementaryExam"]).Trim();
                                bool.TryParse(SupplementaryExam.Trim(), out isSupplementaryExam);
                                string Supplementary = string.Empty;// "[ SUPPLEMENTARY ]";
                                if (isSupplementaryExam)
                                {
                                    Supplementary = "[ SUPPLEMENTARY ]";
                                }
                                // if (!string.IsNullOrEmpty(Subsem))
                                // semesterwise = "and semester in('" + semdet + "')";

                                semroman = getSemRoman(sem);
                                //if (sem == "1")
                                //{
                                //    semroman = "I";
                                //}
                                //else if (sem == "2")
                                //{
                                //    semroman = "II";
                                //}
                                //else if (sem == "3")
                                //{
                                //    semroman = "III";
                                //}
                                //else if (sem == "4")
                                //{
                                //    semroman = "IV";
                                //}
                                //else if (sem == "5")
                                //{
                                //    semroman = "V";
                                //}
                                //else if (sem == "6")
                                //{
                                //    semroman = "VI";
                                //}
                                //else if (sem == "7")
                                //{
                                //    semroman = "VII";
                                //}
                                //else if (sem == "8")
                                //{
                                //    semroman = "VIII";
                                //}
                                //PdfTextArea pdfdoi = new PdfTextArea(Fontco10, System.Drawing.Color.Black, new PdfArea(mydoc, 113, 803, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                                //mypdfpage.Add(pdfdoi);
                                PdfRectangle pr1 = new PdfRectangle(mydoc, new PdfArea(mydoc, 30, 44, 555, 771), Color.DarkBlue);
                                mypdfpage.Add(pr1);
                                PdfTextArea pdfHeader = new PdfTextArea(fondColName, Color.DarkBlue, new PdfArea(mydoc, 30, 40, 550, 50), ContentAlignment.MiddleCenter, Collegename + ", " + clgaddress);
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(Fontarial7, Color.DarkBlue, new PdfArea(mydoc, 30, 55, 550, 50), ContentAlignment.MiddleCenter, aff);
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(fontdegexam, Color.DarkBlue, new PdfArea(mydoc, 30, 78, 550, 50), ContentAlignment.MiddleCenter, degree + " DEGREE EXAMINATION " + Supplementary);
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(fondColName, Color.DarkBlue, new PdfArea(mydoc, 30, 108, 550, 50), ContentAlignment.MiddleCenter, "STATEMENT OF MARKS");
                                mypdfpage.Add(pdfHeader);
                                //pl = new PdfLine(mydoc, new Point(30, 778), new Point(585, 778), Color.DarkBlue, 1);
                                //mypdfpage.Add(pl);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))
                                {
                                    PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
                                    mypdfpage.Add(LogoImage, 40, 83, 415);
                                }

                                exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]).Trim();
                                sql3 = "Select semester,subject_code,subject_name,subject_type,min_int_marks,min_ext_marks,mintotal,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,subject.subjectpriority from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = '" + exam_code + "' and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester desc,subject.subjectpriority,sub_sem.lab;";// order by syllabus_master.semester,Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;
                                printds_rows.Clear();
                                printds_rows.Dispose();
                                printds_rows = da.select_method_wo_parameter(sql3, "Text");
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    string stdphtsql = "select * from StdPhoto where app_no='" + stdappno + "'";
                                    MemoryStream memoryStream = new MemoryStream();
                                    DataSet dsstdpho = new DataSet();
                                    semroman = getSemRoman(Convert.ToString(printds_rows.Tables[0].Rows[0]["semester"]));
                                    dsstdpho.Clear();
                                    dsstdpho.Dispose();
                                    dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                                    if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                                    {
                                        byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                                        memoryStream.Write(file, 0, file.Length);
                                        if (file.Length > 0)
                                        {
                                            System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                            System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                                            if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                            {
                                                //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                            }
                                            else
                                            {
                                                thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                                //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                            }
                                        }
                                    }
                                    if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                    {
                                        PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                                        mypdfpage.Add(LogoImage2, 510, 85, 420);
                                    }
                                    else
                                    {
                                        PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                        mypdfpage.Add(LogoImage2, 510, 85, 420);
                                    }
                                    PdfTable tblstudnameyear = mydoc.NewTable(Fontco12, 1, 5, 2);
                                    tblstudnameyear.VisibleHeaders = false;
                                    tblstudnameyear.SetBorders(Color.Black, 1, BorderType.None);
                                    tblstudnameyear.SetColumnsWidth(new int[] { 50, 256, 99, 100, 79 });
                                    tblstudnameyear.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    tblstudnameyear.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                    tblstudnameyear.Cell(0, 0).SetContent("Name : ");
                                    tblstudnameyear.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    tblstudnameyear.Cell(0, 1).SetContent(studname.Trim());
                                    foreach (PdfCell pc in tblstudnameyear.CellRange(0, 1, 0, 1).Cells)
                                    {
                                        pc.ColSpan = 2;
                                    }
                                    tblstudnameyear.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleRight);
                                    tblstudnameyear.Cell(0, 3).SetColors(Color.DarkBlue, Color.White);
                                    tblstudnameyear.Cell(0, 3).SetContent("Register No. :");
                                    tblstudnameyear.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    tblstudnameyear.Cell(0, 4).SetContent(regnumber.Trim());
                                    PdfTablePage newpdftabpage2 = tblstudnameyear.CreateTablePage(new PdfArea(mydoc, 35, 156, 549, 60));
                                    mypdfpage.Add(newpdftabpage2);
                                    int height = 0;
                                    height = Convert.ToInt32(newpdftabpage2.Area.Height) + 156;
                                    tblstudnameyear = mydoc.NewTable(Fontco12, 1, 5, 2);
                                    tblstudnameyear.VisibleHeaders = false;
                                    tblstudnameyear.SetBorders(Color.Black, 1, BorderType.None);
                                    tblstudnameyear.SetColumnsWidth(new int[] { 50, 99, 256, 100, 79 });
                                    tblstudnameyear.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    tblstudnameyear.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                    tblstudnameyear.Cell(0, 0).SetContent("Medium of Instruction :");
                                    foreach (PdfCell pc in tblstudnameyear.CellRange(0, 0, 0, 0).Cells)
                                    {
                                        pc.ColSpan = 2;
                                    }
                                    tblstudnameyear.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    tblstudnameyear.Cell(0, 2).SetContent(medium);
                                    //foreach (PdfCell pc in tblstudnameyear.CellRange(1, 1, 1, 1).Cells)
                                    //{
                                    //    pc.ColSpan = 3;
                                    //}
                                    tblstudnameyear.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleRight);
                                    tblstudnameyear.Cell(0, 3).SetColors(Color.DarkBlue, Color.White);
                                    tblstudnameyear.Cell(0, 3).SetContent("Date :");
                                    tblstudnameyear.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    tblstudnameyear.Cell(0, 4).SetContent(issuedate);
                                    newpdftabpage2 = tblstudnameyear.CreateTablePage(new PdfArea(mydoc, 35, height, 549, 40));
                                    mypdfpage.Add(newpdftabpage2);
                                    height += Convert.ToInt32(newpdftabpage2.Area.Height);
                                    PdfTextArea pdfdoi = new PdfTextArea(Fontco11, System.Drawing.Color.DarkBlue, new PdfArea(mydoc, 37, height, 500, 35), System.Drawing.ContentAlignment.TopLeft, "The following marks were awarded to the candidate in the " + degree + " Degree (Theory)");
                                    mypdfpage.Add(pdfdoi);
                                    height += 15;
                                    tblstudnameyear = mydoc.NewTable(Fontco11, 1, 4, 2);
                                    tblstudnameyear.VisibleHeaders = false;
                                    tblstudnameyear.SetBorders(Color.Black, 1, BorderType.None);
                                    tblstudnameyear.SetColumnsWidth(new int[] { 135, 190, 120, 40 });
                                    tblstudnameyear.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    tblstudnameyear.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                    tblstudnameyear.Cell(0, 0).SetContent("Examination held in ");
                                    tblstudnameyear.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    tblstudnameyear.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                    tblstudnameyear.Cell(0, 1).SetContent(monthandyear);
                                    tblstudnameyear.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    tblstudnameyear.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                                    tblstudnameyear.Cell(0, 2).SetContent("SEMESTER " + semroman);
                                    //tblstudnameyear.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    //tblstudnameyear.Cell(0, 3).SetColors(Color.DarkBlue, Color.White);
                                    //tblstudnameyear.Cell(0, 3).SetContent(semroman);
                                    newpdftabpage2 = tblstudnameyear.CreateTablePage(new PdfArea(mydoc, 35, height, 400, 28));
                                    mypdfpage.Add(newpdftabpage2);
                                    bool wpm = true;
                                    bool ab = false;
                                    height += Convert.ToInt32(newpdftabpage2.Area.Height);
                                    if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                    {
                                        PdfTable tblMarkStmt = mydoc.NewTable(Fontarial10b, printds_rows.Tables[0].Rows.Count + 2, 8, 5);
                                        tblMarkStmt.VisibleHeaders = false;
                                        tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                                        //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                                        tblMarkStmt.SetColumnsWidth(new int[] { 35, 235, 52, 52, 48, 52, 38, 48 });
                                        double totcredit = 0;
                                        double summarkcredit = 0;
                                        tblMarkStmt.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 0).SetContent("CODE");
                                        tblMarkStmt.Cell(0, 0).SetFont(Fontarial9);
                                        tblMarkStmt.Cell(0, 0).SetCellPadding(0);
                                        foreach (PdfCell pc in tblMarkStmt.CellRange(0, 0, 0, 0).Cells)
                                        {
                                            pc.RowSpan = 2;
                                        }
                                        tblMarkStmt.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 1).SetContent("COURSE");
                                        tblMarkStmt.Cell(0, 1).SetFont(Fontarial9);
                                        tblMarkStmt.Cell(0, 1).SetCellPadding(0);
                                        foreach (PdfCell pc in tblMarkStmt.CellRange(0, 1, 0, 1).Cells)
                                        {
                                            pc.RowSpan = 2;
                                        }
                                        tblMarkStmt.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 2).SetCellPadding(0);
                                        tblMarkStmt.Cell(0, 2).SetFont(Fontarial9);
                                        tblMarkStmt.Cell(0, 2).SetContent("MARKS AWARDED");
                                        foreach (PdfCell pc in tblMarkStmt.CellRange(0, 2, 0, 2).Cells)
                                        {
                                            pc.ColSpan = 3;
                                        }
                                        tblMarkStmt.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(1, 2).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(1, 2).SetCellPadding(0);
                                        tblMarkStmt.Cell(1, 2).SetFont(Fontarial9);
                                        tblMarkStmt.Cell(1, 2).SetContent("INTERNAL\n(40)");
                                        tblMarkStmt.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(1, 3).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(1, 3).SetCellPadding(0);
                                        tblMarkStmt.Cell(1, 3).SetFont(Fontarial9);
                                        tblMarkStmt.Cell(1, 3).SetContent("EXTERNAL\n(60)");
                                        tblMarkStmt.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(1, 4).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(1, 4).SetCellPadding(0);
                                        tblMarkStmt.Cell(1, 4).SetFont(Fontarial9);
                                        tblMarkStmt.Cell(1, 4).SetContent("TOTAL\n(100)");
                                        tblMarkStmt.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 5).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 5).SetCellPadding(0);
                                        tblMarkStmt.Cell(0, 5).SetFont(Fontarial9);
                                        tblMarkStmt.Cell(0, 5).SetContent("RESULT");
                                        foreach (PdfCell pc in tblMarkStmt.CellRange(0, 5, 0, 5).Cells)
                                        {
                                            pc.RowSpan = 2;
                                        }
                                        tblMarkStmt.Cell(0, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 6).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 6).SetCellPadding(0);
                                        tblMarkStmt.Cell(0, 6).SetFont(Fontarial9);
                                        tblMarkStmt.Cell(0, 6).SetContent("CREDIT");
                                        foreach (PdfCell pc in tblMarkStmt.CellRange(0, 6, 0, 6).Cells)
                                        {
                                            pc.RowSpan = 2;
                                        }
                                        tblMarkStmt.Cell(0, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 7).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 7).SetCellPadding(0);
                                        tblMarkStmt.Cell(0, 7).SetFont(Fontarial9);
                                        tblMarkStmt.Cell(0, 7).SetContent("MARKS\n  X  \nCREDIT");
                                        foreach (PdfCell pc in tblMarkStmt.CellRange(0, 7, 0, 7).Cells)
                                        {
                                            pc.RowSpan = 2;
                                        }
                                        for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                                        {
                                            if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                            {
                                                tblMarkStmt.Cell(i + 2, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(i + 2, 0).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim());
                                                bool rab = false;
                                                tblMarkStmt.Cell(i + 2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                tblMarkStmt.Cell(i + 2, 1).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim());
                                                double internalmmark = 0;
                                                double externalmark1 = 0;
                                                double totalintext = 0;
                                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim(), out internalmmark);
                                                double extfinal = 0;
                                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim(), out extfinal);
                                                extfinal = Math.Round(extfinal, 0);
                                                externalmark1 = extfinal;

                                                double minINTMark = 0;
                                                double maxINTMark = 0;
                                                string minINT = Convert.ToString(printds_rows.Tables[0].Rows[i]["min_int_marks"]).Trim();
                                                string maxINT = Convert.ToString(printds_rows.Tables[0].Rows[i]["max_int_marks"]).Trim();
                                                double.TryParse(minINT.Trim(), out minINTMark);
                                                double.TryParse(maxINT.Trim(), out maxINTMark);

                                                double minEXTMark = 0;
                                                double maxEXTMark = 0;
                                                string minEXT = Convert.ToString(printds_rows.Tables[0].Rows[i]["min_ext_marks"]).Trim();
                                                string maxEXT = Convert.ToString(printds_rows.Tables[0].Rows[i]["max_ext_marks"]).Trim();
                                                double.TryParse(minEXT.Trim(), out minEXTMark);
                                                double.TryParse(maxEXT.Trim(), out maxEXTMark);

                                                double minTOTMark = 0;
                                                double maxTOTMark = 0;
                                                string minTOT = Convert.ToString(printds_rows.Tables[0].Rows[i]["mintotal"]).Trim();
                                                string maxTOT = Convert.ToString(printds_rows.Tables[0].Rows[i]["maxtotal"]).Trim();
                                                double.TryParse(minTOT.Trim(), out minTOTMark);
                                                double.TryParse(maxTOT.Trim(), out maxTOTMark);

                                                string checkedmark = string.Empty;
                                                if (extfinal < 0)
                                                {
                                                    checkedmark = loadmarkat(Convert.ToString(extfinal).Trim());
                                                }
                                                else
                                                {
                                                    checkedmark = Convert.ToString(extfinal).Trim();
                                                }
                                                if (internalmmark >= 0)
                                                {
                                                    if (extfinal > 0)
                                                    {
                                                        totalintext = internalmmark + externalmark1;
                                                    }
                                                    else
                                                    {
                                                        totalintext = internalmmark;
                                                    }
                                                }
                                                else
                                                {
                                                    if (extfinal > 0)
                                                    {
                                                        totalintext = externalmark1;
                                                    }
                                                    else
                                                    {
                                                        totalintext = 0;
                                                    }
                                                }
                                                tblMarkStmt.Cell(i + 2, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(i + 2, 2).SetContent(internalmmark);
                                                tblMarkStmt.Cell(i + 2, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(i + 2, 3).SetContent(checkedmark);
                                                double totfinal = 0;
                                                totfinal = Math.Round(totalintext, 0);
                                                tblMarkStmt.Cell(i + 2, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(i + 2, 4).SetContent(Convert.ToString(totfinal).Trim());
                                                double creditpoint = 0;
                                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim(), out creditpoint);
                                                double mrkcredit = 0;
                                                string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim();
                                                string r = string.Empty;
                                                //tblMarkStmt.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                if (result.ToUpper() == "PASS")
                                                {
                                                    r = "PASS";
                                                    totcredit += creditpoint;
                                                    mrkcredit = totfinal * creditpoint;
                                                    summarkcredit += mrkcredit;
                                                }
                                                else if (result.ToUpper() == "FAIL")
                                                {
                                                    r = "Reappear";
                                                    //tblMarkStmt.Cell(i + 2, 5).SetFont(Fontarial9);                                                
                                                }
                                                else if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                                {
                                                    ab = true;
                                                    tblMarkStmt.Cell(i + 2, 3).SetContent("AB");
                                                    tblMarkStmt.Cell(i + 2, 2).SetContent("0");
                                                    tblMarkStmt.Cell(i + 2, 4).SetContent("0");
                                                    tblMarkStmt.Cell(i + 2, 5).SetContent("AB");  //modified by Mullai
                                                    tblMarkStmt.Cell(i + 2, 6).SetContent("");
                                                    tblMarkStmt.Cell(i + 2, 7).SetContent("");
                                                    if (extfinal == 0 || internalmmark == 0)
                                                    {
                                                        rab = true;
                                                        //totcredit += creditpoint;
                                                        //mrkcredit = totfinal * creditpoint;
                                                        //summarkcredit += mrkcredit;
                                                    }
                                                    r = "AB";
                                                }
                                                else if (result.ToUpper() == "RE-APPEAR" || result.ToUpper() == "REAPPEAR")
                                                {
                                                    r = "RA";
                                                }
                                                else
                                                {
                                                    r = result;
                                                }
                                                tblMarkStmt.Cell(i + 2, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(i + 2, 5).SetContent(r);
                                                tblMarkStmt.Cell(i + 2, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(i + 2, 7).SetContent(mrkcredit);
                                                tblMarkStmt.Cell(i + 2, 6).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
                                                tblMarkStmt.Cell(i + 2, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                if (result.Trim().ToUpper() == "FAIL")
                                                {
                                                    wpm = false;
                                                    tblMarkStmt.Cell(i + 2, 7).SetContent("");
                                                    tblMarkStmt.Cell(i + 2, 6).SetContent("");
                                                    tblMarkStmt.Cell(i + 2, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                }
                                                if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                                {
                                                    ab = true;
                                                    tblMarkStmt.Cell(i + 2, 6).SetContent("");
                                                    tblMarkStmt.Cell(i + 2, 7).SetContent("");
                                                }
                                                if (extfinal < 0)
                                                {
                                                    ab = true;
                                                    tblMarkStmt.Cell(i + 2, 3).SetContent("AB");
                                                    tblMarkStmt.Cell(i + 2, 2).SetContent("AB");
                                                    tblMarkStmt.Cell(i + 2, 4).SetContent("AB");
                                                    tblMarkStmt.Cell(i + 2, 5).SetContent("AB");  //modified by Mullai
                                                    tblMarkStmt.Cell(i + 2, 6).SetContent("");
                                                    tblMarkStmt.Cell(i + 2, 7).SetContent("");
                                                }
                                                if (internalmmark < 0)
                                                {
                                                    ab = true;
                                                    tblMarkStmt.Cell(i + 2, 3).SetContent("AB");
                                                    tblMarkStmt.Cell(i + 2, 2).SetContent("AB");
                                                    tblMarkStmt.Cell(i + 2, 4).SetContent("AB");
                                                    tblMarkStmt.Cell(i + 2, 5).SetContent("AB"); //modified by Mullai
                                                    tblMarkStmt.Cell(i + 2, 6).SetContent("");
                                                    tblMarkStmt.Cell(i + 2, 7).SetContent("");
                                                }
                                                tblMarkStmt.Cell(i + 2, 6).SetForegroundColor(Color.Blue);
                                            }
                                        }
                                        //tblMarkStmt.Cell(printds_rows.Tables[0].Rows.Count, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        //tblMarkStmt.Cell(printds_rows.Tables[0].Rows.Count, 1).SetFont(Fontpala12);
                                        //tblMarkStmt.Cell(printds_rows.Tables[0].Rows.Count, 1).SetCellPadding(9);
                                        //tblMarkStmt.Cell(printds_rows.Tables[0].Rows.Count, 1).SetContent("****** End of Statement ******");
                                        //foreach (PdfCell pr in tblMarkStmt.CellRange(printds_rows.Tables[0].Rows.Count, 0, printds_rows.Tables[0].Rows.Count, 0).Cells)
                                        //{
                                        //    pr.ColSpan = 7;
                                        //}
                                        newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 35, 249, 549, 300));
                                        mypdfpage.Add(newpdftabpage2);
                                        tblMarkStmt = mydoc.NewTable(Fontarial10b, 1, 4, 10);
                                        tblMarkStmt.VisibleHeaders = false;
                                        tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                                        tblMarkStmt.SetColumnsWidth(new int[] { 43, 420, 38, 47 });
                                        tblMarkStmt.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 1).SetContent("TOTAL");
                                        //foreach (PdfCell pc in tblstudnameyear.CellRange(1, 0, 1, 0).Cells)
                                        //{
                                        //    pc.ColSpan = 2;
                                        //}
                                        tblMarkStmt.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        if (totcredit != 0)
                                        {
                                            tblMarkStmt.Cell(0, 2).SetContent(totcredit);
                                            tblMarkStmt.Cell(0, 2).SetForegroundColor(Color.Blue);
                                        }
                                        tblMarkStmt.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        if (summarkcredit != 0)
                                            tblMarkStmt.Cell(0, 3).SetContent(summarkcredit);
                                        double wam = 0;
                                        if (summarkcredit == 0 || totcredit == 0)
                                        {
                                            wam = 0;
                                        }
                                        else
                                        {
                                            wam = Math.Round((summarkcredit / totcredit), 0, MidpointRounding.AwayFromZero);
                                        }
                                        newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 35, 560, 550, 35));
                                        mypdfpage.Add(newpdftabpage2);
                                        PdfTextArea pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 60, 617, 160, 50), ContentAlignment.TopLeft, "Weighted Average of Marks  = ");
                                        mypdfpage.Add(pdftxt);
                                        if (wpm == true && ab == false)
                                        {
                                            pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 402, 607, 50, 50), ContentAlignment.TopCenter, Convert.ToString(summarkcredit));
                                            mypdfpage.Add(pdftxt);
                                            //Horizandal Line 11 for Tot(M X C) / totcredit
                                            PdfLine ple1 = new PdfLine(mydoc, new Point(402, 621), new Point(450, 621), Color.Black, 1);
                                            mypdfpage.Add(ple1);
                                        }
                                        else
                                        {
                                            pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 390, 607, 100, 50), ContentAlignment.TopCenter, Convert.ToString("NOT COMPLETED"));
                                            mypdfpage.Add(pdftxt);
                                            //Horizandal Line 11 for Tot(M X C) / totcredit
                                            PdfLine ple = new PdfLine(mydoc, new Point(390, 621), new Point(490, 621), Color.Black, 1);
                                            mypdfpage.Add(ple);
                                        }
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 220, 607, 150, 50), ContentAlignment.TopCenter, Convert.ToString("Total of (Marks X Credits)"));
                                        mypdfpage.Add(pdftxt);
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 222, 627, 150, 50), ContentAlignment.TopCenter, Convert.ToString("Total Credits"));
                                        mypdfpage.Add(pdftxt);
                                        if (wpm == true && ab == false)
                                        {
                                            pdftxt = new PdfTextArea(Fontarial10b, Color.Blue, new PdfArea(mydoc, 402, 627, 50, 50), ContentAlignment.TopCenter, Convert.ToString(totcredit));
                                            mypdfpage.Add(pdftxt);
                                            pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 468, 617, 16, 50), ContentAlignment.TopLeft, " = ");
                                            mypdfpage.Add(pdftxt);
                                            pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 476, 617, 86, 50), ContentAlignment.TopLeft, Convert.ToString("  " + wam));
                                            mypdfpage.Add(pdftxt);
                                        }
                                        else
                                        {
                                            pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 402, 627, 50, 50), ContentAlignment.TopCenter, Convert.ToString(""));
                                            mypdfpage.Add(pdftxt);
                                        }
                                        //if (ab == true)
                                        //{
                                        //    pdftxt = new PdfTextArea(Font10bold, Color.Black, new PdfArea(mydoc, 402, 607, 50, 50), ContentAlignment.TopCenter, Convert.ToString("0"));
                                        //    mypdfpage.Add(pdftxt);
                                        //    pdftxt = new PdfTextArea(Font10bold, Color.Black, new PdfArea(mydoc, 402, 627, 50, 50), ContentAlignment.TopCenter, Convert.ToString(totcredit));
                                        //    mypdfpage.Add(pdftxt);
                                        //    pdftxt = new PdfTextArea(Font10bold, Color.Black, new PdfArea(mydoc, 468, 617, 16, 50), ContentAlignment.TopLeft, " = ");
                                        //    mypdfpage.Add(pdftxt);
                                        //    //pdftxt = new PdfTextArea(Font10bold, Color.Black, new PdfArea(mydoc, 476, 617, 86, 50), ContentAlignment.TopLeft, Convert.ToString("0"));
                                        //    //mypdfpage.Add(pdftxt);
                                        //}
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 369, 617, 16, 50), ContentAlignment.TopLeft, "  =  ");
                                        mypdfpage.Add(pdftxt);
                                        //pdftxt = new PdfTextArea(Fontwma, Color.Black, new PdfArea(mydoc, 40, 674, 145, 50), ContentAlignment.TopLeft, Convert.ToString("SHOT TERM COURSES"));
                                        //mypdfpage.Add(pdftxt);
                                        //pdftxt = new PdfTextArea(Fontwma, Color.Black, new PdfArea(mydoc, 190, 674, 400, 50), ContentAlignment.TopLeft, Convert.ToString("1." + Convert.ToString(ddlSubject.SelectedItem)));
                                        //mypdfpage.Add(pdftxt);
                                        ////pdftxt = new PdfTextArea(Fontarial7, Color.Black, new PdfArea(mydoc, 190, 620, 180, 50), ContentAlignment.TopLeft, Convert.ToString("2.EFFECTIVE COMMUNICATION SKILLS"));
                                        ////mypdfpage.Add(pdftxt);
                                        //string credit = d2.GetFunctionv("select credit_points from subject where subject_no='" + Convert.ToString(ddlSubject.SelectedItem.Value) + "'");
                                        //if (credit != "" && credit != "0")
                                        //{
                                        //    pdftxt = new PdfTextArea(Fontwma, Color.Black, new PdfArea(mydoc, 480, 674, 180, 50), ContentAlignment.TopLeft, Convert.ToString(credit + " CREDITS"));
                                        //    mypdfpage.Add(pdftxt);
                                        //}
                                        int sct = 0;
                                        if (rblSpecialorCertify.SelectedValue.Trim() != "2")
                                        {
                                            if (specialcourse == true)
                                            {
                                                PdfTable tblspecial = mydoc.NewTable(Fontarial10b, dicSubjectList.Count + 1, 3, 2);
                                                tblspecial.VisibleHeaders = false;
                                                tblspecial.SetBorders(Color.Black, 1, BorderType.None);
                                                //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                                                tblspecial.SetColumnsWidth(new int[] { 570, 150, 120 });
                                                string subjectName = string.Empty;
                                                string subjectNo = string.Empty;
                                                int row = 0;
                                                bool top = false;
                                                bool splcourseflag = false;
                                                string subject = string.Empty;
                                                foreach (KeyValuePair<string, string> dicSub in dicSubjectList)
                                                {
                                                    subjectName = Convert.ToString(dicSub.Value).Trim();
                                                    subjectNo = dicSub.Key;
                                                    string credit = d2.GetFunctionv("select credit_points from subject where subject_no='" + Convert.ToString(subjectNo).Trim() + "'");
                                                    string splCourseType = Convert.ToString(rblSpecialorCertify.SelectedValue).Trim();

                                                    if (splcourseflag == false)
                                                    {
                                                        splcourseflag = true;
                                                        switch (splCourseType)
                                                        {
                                                            case "0":

                                                                subject = ((row == 0) ? Convert.ToString("SHORT TERM COURSES :").ToUpper().Trim() + " " : Convert.ToString("").ToUpper().Trim());
                                                                tblspecial.Cell(row, 0).SetContentAlignment(ContentAlignment.TopLeft);
                                                                tblspecial.Cell(row, 2).SetContentAlignment(ContentAlignment.TopLeft);
                                                                tblspecial.Cell(row, 0).SetColors(Color.DarkBlue, Color.White);
                                                                foreach (PdfCell pc in tblspecial.CellRange(row, 0, row, 0).Cells)
                                                                {
                                                                    pc.ColSpan = 2;
                                                                }
                                                                tblspecial.Cell(row, 0).SetContent(subject);
                                                                row++;
                                                                break;
                                                            case "1":

                                                                subject = ((row == 0) ? Convert.ToString("CERTIFICATE COURSES :").ToUpper().Trim() + "  " : Convert.ToString("").ToUpper().Trim());
                                                                tblspecial.Cell(row, 0).SetContentAlignment(ContentAlignment.TopLeft);
                                                                tblspecial.Cell(row, 2).SetContentAlignment(ContentAlignment.TopLeft);
                                                                tblspecial.Cell(row, 0).SetColors(Color.DarkBlue, Color.White);
                                                                foreach (PdfCell pc in tblspecial.CellRange(row, 0, row, 0).Cells)
                                                                {
                                                                    pc.ColSpan = 2;
                                                                }
                                                                tblspecial.Cell(row, 0).SetContent(subject);
                                                                row++;
                                                                break;
                                                            default:
                                                                subject = ((row == 0) ? Convert.ToString("CERTIFICATE COURSES :").ToUpper().Trim() + " " : Convert.ToString("").ToUpper().Trim());
                                                                tblspecial.Cell(row, 0).SetContentAlignment(ContentAlignment.TopLeft);
                                                                tblspecial.Cell(row, 2).SetContentAlignment(ContentAlignment.TopLeft);
                                                                tblspecial.Cell(row, 0).SetColors(Color.DarkBlue, Color.White);
                                                                foreach (PdfCell pc in tblspecial.CellRange(row, 0, row, 0).Cells)
                                                                {
                                                                    pc.ColSpan = 2;
                                                                }
                                                                tblspecial.Cell(row, 0).SetContent(subject);
                                                                subject = ((row == 0) ? Convert.ToString("SHORT TERM COURSES :").ToUpper().Trim() + "   " : Convert.ToString("").ToUpper().Trim());
                                                                row++;
                                                                break;


                                                        }
                                                    }

                                                    string subtyp = da.GetFunction("select subject_type from sub_sem where subType_no in (select subType_no from subject where subject_no='" + subjectNo + "')");
                                                    string rm = string.Empty;
                                                    string[] coursenam = subject.Split(' ');
                                                    string[] suptyp1 = subtyp.Split(' ');
                                                    if (Convert.ToString(suptyp1[0]).ToLower().Trim() == Convert.ToString(coursenam[0]).ToLower().Trim())
                                                    {
                                                        sct++;

                                                        if (sct == 1)
                                                            rm = "i) ";
                                                        else if (sct == 2)
                                                            rm = "ii) ";
                                                        else if (sct == 3)
                                                            rm = "iii) ";
                                                        else if (sct == 4)
                                                            rm = "iv) ";
                                                        else if (sct == 5)
                                                            rm = "v) ";
                                                        else if (sct == 6)
                                                            rm = "vi) ";
                                                    }



                                                    string sname = rm + subjectName;
                                                    //  string subName = ((chkShowSubjectNameOnly.Checked) ? "" : subject) + sname;
                                                    string subName = sname;

                                                    //if (chkShowSubjectNameOnly.Checked)

                                                    tblspecial.Cell(row, 0).SetContentAlignment(ContentAlignment.TopLeft);
                                                    tblspecial.Cell(row, 2).SetContentAlignment(ContentAlignment.TopLeft);
                                                    tblspecial.Cell(row, 0).SetColors(Color.DarkBlue, Color.White);
                                                    foreach (PdfCell pc in tblspecial.CellRange(row, 0, row, 0).Cells)
                                                    {
                                                        pc.ColSpan = 2;
                                                    }
                                                    tblspecial.Cell(row, 0).SetContent(subName);
                                                    tblspecial.Rows[row].SetCellPadding(2);
                                                    tblspecial.Cell(row, 2).SetColors(Color.DarkBlue, Color.White);
                                                    tblspecial.Cell(row, 2).SetContent(Convert.ToString(credit.Trim() + " CREDIT").Trim());
                                                    row++;
                                                }
                                                newpdftabpage2 = tblspecial.CreateTablePage(new PdfArea(mydoc, 60, 672, mydoc.PageWidth - 120, 150));
                                                mypdfpage.Add(newpdftabpage2);
                                            }
                                            else
                                            {
                                                PdfTable tblspecial = mydoc.NewTable(Fontarial10b, 2, 3, 2);
                                                tblspecial.VisibleHeaders = false;
                                                tblspecial.SetBorders(Color.Black, 1, BorderType.None);
                                                //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                                                tblspecial.SetColumnsWidth(new int[] { 230, 420, 100 });
                                                tblspecial.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                tblspecial.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                                if (!chkShowSubjectNameOnly.Checked)
                                                {
                                                    if (rblSpecialorCertify.SelectedValue == "1")
                                                    {
                                                        tblspecial.Cell(0, 0).SetContent(Convert.ToString("CERTIFICATE COURSES").Trim().ToUpper());
                                                    }
                                                    else if (rblSpecialorCertify.SelectedValue == "0")
                                                    {
                                                        tblspecial.Cell(0, 0).SetContent(Convert.ToString("SHORT TERM COURSES").Trim().ToUpper());
                                                    }
                                                    else
                                                    {
                                                        tblspecial.Cell(0, 0).SetContent(Convert.ToString("SHORT TERM COURSES").Trim().ToUpper());
                                                    }
                                                }
                                                tblspecial.Cell(0, 1).SetContentAlignment(ContentAlignment.TopLeft);
                                                tblspecial.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                                tblspecial.Cell(0, 1).SetContent(Convert.ToString(" --------- "));
                                                tblspecial.Cell(0, 2).SetContentAlignment(ContentAlignment.TopLeft);
                                                tblspecial.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                                                tblspecial.Cell(0, 2).SetContent(Convert.ToString("1 CREDIT"));
                                                tblspecial.Rows[0].SetCellPadding(1);
                                                newpdftabpage2 = tblspecial.CreateTablePage(new PdfArea(mydoc, 60, 672, mydoc.PageWidth - 120, 100));
                                                mypdfpage.Add(newpdftabpage2);
                                            }
                                        }
                                        pdftxt = new PdfTextArea(Font10bold, Color.DarkBlue, new PdfArea(mydoc, 37, 786, 275, 50), ContentAlignment.TopCenter, "CONTROLLER OF EXAMINATIONS");
                                        mypdfpage.Add(pdftxt);
                                        pdftxt = new PdfTextArea(Font10bold, Color.DarkBlue, new PdfArea(mydoc, 300, 786, 340, 50), ContentAlignment.TopCenter, "PRINCIPAL");
                                        mypdfpage.Add(pdftxt);
                                        pdftxt = new PdfTextArea(Fontwma, Color.DarkBlue, new PdfArea(mydoc, 37, 805, 540, 30), ContentAlignment.TopCenter, "Passing Minimum : Internal Assessment - 20 Marks, External Assessment - 30 Marks, Aggregate - 50 Marks,AB-Absent");
                                        mypdfpage.Add(pdftxt);
                                        //Top Horizantal Line 1
                                        PdfLine pl = new PdfLine(mydoc, new Point(30, 155), new Point(585, 155), Color.DarkBlue, 1);
                                        mypdfpage.Add(pl);
                                        //Horizandal Line 2
                                        pl = new PdfLine(mydoc, new Point(30, 250), new Point(585, 250), Color.DarkBlue, 1);
                                        mypdfpage.Add(pl);
                                        //Horizandal Line 3
                                        pl = new PdfLine(mydoc, new Point(298, 270), new Point(447, 270), Color.DarkBlue, 1);
                                        mypdfpage.Add(pl);
                                        //Horizandal Line 4
                                        pl = new PdfLine(mydoc, new Point(30, 296), new Point(585, 296), Color.DarkBlue, 1);
                                        mypdfpage.Add(pl);
                                        //Horizandal Line 5
                                        pl = new PdfLine(mydoc, new Point(30, 567), new Point(585, 567), Color.DarkBlue, 1);
                                        mypdfpage.Add(pl);
                                        //Horizandal Line 6
                                        pl = new PdfLine(mydoc, new Point(30, 582), new Point(585, 582), Color.DarkBlue, 1);
                                        mypdfpage.Add(pl);
                                        //Horizandal Line 7
                                        pl = new PdfLine(mydoc, new Point(30, 669), new Point(585, 669), Color.DarkBlue, 1);
                                        mypdfpage.Add(pl);
                                        if (rblSpecialorCertify.SelectedValue.Trim() != "2")
                                        {
                                            //Horizandal Line 8
                                            pl = new PdfLine(mydoc, new Point(30, 745), new Point(585, 745), Color.DarkBlue, 1);
                                            mypdfpage.Add(pl);
                                        }
                                        //Horizandal Line 9
                                        pl = new PdfLine(mydoc, new Point(30, 800), new Point(585, 800), Color.DarkBlue, 1);
                                        mypdfpage.Add(pl);
                                        //Horizandal Line 10 for Tot(M X C) / totcredit
                                        pl = new PdfLine(mydoc, new Point(226, 621), new Point(365, 621), Color.Black, 1);
                                        mypdfpage.Add(pl);
                                        //Vertical Line 1 
                                        pl = new PdfLine(mydoc, new Point(71, 250), new Point(71, 582), Color.DarkBlue, 1);
                                        mypdfpage.Add(pl);
                                        //Vertical Line 2
                                        pl = new PdfLine(mydoc, new Point(298, 250), new Point(298, 567), Color.DarkBlue, 1);
                                        mypdfpage.Add(pl);
                                        //Vertical Line 3
                                        pl = new PdfLine(mydoc, new Point(350, 270), new Point(350, 567), Color.DarkBlue, 1);
                                        mypdfpage.Add(pl);
                                        //Vertical Line 4
                                        pl = new PdfLine(mydoc, new Point(404, 270), new Point(404, 567), Color.DarkBlue, 1);
                                        mypdfpage.Add(pl);
                                        //Vertical Line 5
                                        pl = new PdfLine(mydoc, new Point(447, 250), new Point(447, 567), Color.DarkBlue, 1);
                                        mypdfpage.Add(pl);
                                        //Vertical Line 6
                                        pl = new PdfLine(mydoc, new Point(499, 250), new Point(499, 582), Color.DarkBlue, 1);
                                        mypdfpage.Add(pl);
                                        //Vertical Line 7
                                        pl = new PdfLine(mydoc, new Point(538, 250), new Point(538, 582), Color.DarkBlue, 1);
                                        mypdfpage.Add(pl);
                                        //mypdfpage.SaveToDocument();
                                        //PdfTable tblftdate = mydoc.NewTable(Fontarial7, 1, 2, 3);
                                        //tblftdate.VisibleHeaders = false;
                                        //tblftdate.SetBorders(Color.Black, 1, BorderType.None);
                                        //tblftdate.SetColumnsWidth(new int[] { 50, 420, });
                                        //tblftdate.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        ////tblftdate.Cell(0, 1).SetContent(DateTime.Now.Date.ToString("dd-MM-yyyy"));
                                        //newpdftabpage2 = tblftdate.CreateTablePage(new PdfArea(mydoc, 35, 935, 142, 17));
                                        //mypdfpage.Add(newpdftabpage2);
                                        mypdfpage.SaveToDocument();
                                    }
                                }
                                // }
                                // }
                            }


                        }
                    }
                }
            }
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
            }
        }
        catch (Exception ex)
        {
        }
    }

    //FOR CHRISTOPHER UG PRACTICAL
    public void ugmarkstatementformat7()
    {
        try
        {
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            DataSet gradeds = new DataSet();
            //DataSet semwisegpa = new DataSet();

            DataTable dtPart1 = new DataTable();
            DataTable dtPart2 = new DataTable();
            DataTable dtPart3 = new DataTable();
            DataTable dtPart4 = new DataTable();

            string degree = string.Empty;
            string degname = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string issuedate = string.Empty;
            string semroman = string.Empty;
            string edu_level = string.Empty;
            string coe = string.Empty;

            lblerror.Visible = false;
            lblerror.Text = string.Empty;
            bool isSupplementaryExam = false;
            string SupplementaryExam = string.Empty;
            Font fondColName = new Font("Comic Sans MS", 18, FontStyle.Bold);
            Font fontdegexam = new Font("Arial", 12, FontStyle.Bold);
            Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco11 = new Font("Comic Sans MS", 11, FontStyle.Bold);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
            Font Fontwma = new Font("Arial", 8, FontStyle.Bold);
            Font Font8bold = new Font("Arial", 8, FontStyle.Bold);
            Font Font10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);

            Font Fontarial9 = new Font("Arial", 9, FontStyle.Bold);
            Font Fontarial10b = new Font("Arial", 11, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);

            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.3, 30.3));
            PdfPage mypdfpage;

            bool specialcourse = false;
            if (ddlSubject.SelectedIndex == 0)
            {
                specialcourse = false;
            }
            else
            {
                specialcourse = true;
            }
            if (Convert.ToString(ddlMonth.SelectedValue).Trim() != "0" && Convert.ToString(ddlYear.SelectedValue).Trim() != "0")
            {
                string strquery = "select *,district+' - '+pincode  as districtpin from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                ds.Dispose();
                ds.Reset();
                ds = d2.select_method_wo_parameter(strquery, "Text");
                string Collegename = string.Empty;
                string aff = string.Empty;
                string collacr = string.Empty;
                string dispin = string.Empty;
                string clgaddress = string.Empty;
                string univ = string.Empty;
                string pincode = string.Empty;
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    Collegename = Convert.ToString(ds.Tables[0].Rows[0]["Collname"]).Trim();
                    aff = Convert.ToString(ds.Tables[0].Rows[0]["affliatedby"]).Trim();
                    univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]).Trim();
                    string[] strpa = aff.Split(',');
                    aff = "( " + univ + " " + strpa[0] + " )";
                    //coename = Convert.ToString(ds.Tables[0].Rows[0]["coe"]);
                    collacr = Convert.ToString(ds.Tables[0].Rows[0]["acr"]).Trim();
                    pincode = Convert.ToString(ds.Tables[0].Rows[0]["pincode"]).Trim();
                    pincode = pincode.Substring(pincode.Length - 3);
                    int pin = 0;
                    int.TryParse(pincode, out pin);
                    //((pincode.Length > 0) ? pincode.Substring(pincode.Length - 1) : ""
                    //char[] pin = pincode.Substring(pincode.Length - 1);
                    clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]).Trim() + " , " + Convert.ToString(ds.Tables[0].Rows[0]["district"]).Trim() + ((pin != 0) ? (" - " + pin.ToString()) : " - " + pincode);
                    clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]).Trim();
                    dispin = Convert.ToString(ds.Tables[0].Rows[0]["districtpin"]).Trim();
                }
                FpSpread2.SaveChanges();
                for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
                {
                    int isval = 0;
                    isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                    if (isval == 1)
                    {
                        printds.Clear();
                        printds.Dispose();
                        printds_new.Clear();
                        printds_new.Dispose();
                        rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                        regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                        string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,C.edu_level,(select tv.TextVal from TextValTable tv where tv.TextCode=a.SecondLang) as Language FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';";
                        printds = da.select_method_wo_parameter(sql, "Text");
                        if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                        {
                            bool status = false;
                            mypdfpage = mydoc.NewPage();
                            string app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]).Trim();
                            degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                            //month = ddlMonth.SelectedIndex;
                            //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                            int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                            monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                            string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month).Trim();
                            monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                            monthandyear = monthandyear.ToUpper().Trim();
                            studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                            issuedate = Convert.ToString(txtdoi.Text).Trim();
                            branch = Convert.ToString(printds.Tables[0].Rows[0]["Dept_name"]).Trim();
                            dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]).Trim();
                            edu_level = Convert.ToString(printds.Tables[0].Rows[0]["edu_level"]).Trim();
                            string stdappno = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();
                            batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                            degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim();
                            string partLanguage = Convert.ToString(printds.Tables[0].Rows[0]["Language"]).Trim();
                            string medium = d2.GetFunctionv("select TextVal from TextValTable where TextCriteria='medi' and college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and TextCode in(select isnull(medium_ins,0) from applyn  where app_no='" + app_no + "')");
                            sql2 = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                            printds_new = da.select_method_wo_parameter(sql2, "Text");
                            if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                            {
                                sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
                                SupplementaryExam = string.Empty;
                                SupplementaryExam = Convert.ToString(printds_new.Tables[0].Rows[0]["isSupplementaryExam"]).Trim();
                                bool.TryParse(SupplementaryExam.Trim(), out isSupplementaryExam);
                                string Supplementary = string.Empty;// "[ SUPPLEMENTARY ]";
                                if (isSupplementaryExam)
                                {
                                    Supplementary = "[ SUPPLEMENTARY ]";
                                }
                                if (sem == "1")
                                {
                                    semroman = "I";
                                }
                                else if (sem == "2")
                                {
                                    semroman = "II";
                                }
                                else if (sem == "3")
                                {
                                    semroman = "III";
                                }
                                else if (sem == "4")
                                {
                                    semroman = "IV";
                                }
                                else if (sem == "5")
                                {
                                    semroman = "V";
                                }
                                else if (sem == "6")
                                {
                                    semroman = "VI";
                                }
                                else if (sem == "7")
                                {
                                    semroman = "VII";
                                }
                                else if (sem == "8")
                                {
                                    semroman = "VIII";
                                }
                                //PdfTextArea pdfdoi = new PdfTextArea(Fontco10, System.Drawing.Color.Black, new PdfArea(mydoc, 113, 803, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                                //mypdfpage.Add(pdfdoi);
                                PdfRectangle pr1 = new PdfRectangle(mydoc, new PdfArea(mydoc, 30, 44, 555, 771), Color.DarkBlue);
                                mypdfpage.Add(pr1);
                                PdfTextArea pdfHeader = new PdfTextArea(fondColName, Color.DarkBlue, new PdfArea(mydoc, 30, 40, 550, 50), ContentAlignment.MiddleCenter, Collegename + ", " + clgaddress);
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(Fontarial7, Color.DarkBlue, new PdfArea(mydoc, 30, 55, 550, 50), ContentAlignment.MiddleCenter, aff);
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(fontdegexam, Color.DarkBlue, new PdfArea(mydoc, 30, 78, 550, 50), ContentAlignment.MiddleCenter, degree + " DEGREE EXAMINATION " + Supplementary);
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(fondColName, Color.DarkBlue, new PdfArea(mydoc, 30, 108, 550, 50), ContentAlignment.MiddleCenter, "STATEMENT OF MARKS");
                                mypdfpage.Add(pdfHeader);
                                //pl = new PdfLine(mydoc, new Point(30, 778), new Point(585, 778), Color.DarkBlue, 1);
                                //mypdfpage.Add(pl);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))
                                {
                                    PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
                                    mypdfpage.Add(LogoImage, 40, 83, 415);
                                }
                                exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]).Trim();
                                sql3 = "Select semester,subject_code,subject_name,subject_type,min_int_marks,min_ext_marks,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal,mintotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,subject.subjectpriority from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = '" + exam_code + "' and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null and sub_sem.lab=1  order by syllabus_master.semester desc,subject.subjectpriority,sub_sem.lab; Select distinct subject_type,sub_sem.subType_no from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = '" + exam_code + "' and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null and sub_sem.lab=1 order by sub_sem.subType_no";
                                printds_rows.Clear();
                                printds_rows.Dispose();
                                printds_rows = da.select_method_wo_parameter(sql3, "Text");
                                string stdphtsql = "select * from StdPhoto where app_no='" + stdappno + "'";
                                MemoryStream memoryStream = new MemoryStream();
                                DataSet dsstdpho = new DataSet();
                                dsstdpho.Clear();
                                dsstdpho.Dispose();
                                dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                                if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                                {
                                    byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                                    memoryStream.Write(file, 0, file.Length);
                                    if (file.Length > 0)
                                    {
                                        System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                        System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                        {
                                            //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                        }
                                        else
                                        {
                                            thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                            //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                        }
                                    }
                                }
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                {
                                    PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                                    mypdfpage.Add(LogoImage2, 510, 85, 420);
                                }
                                else
                                {
                                    PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                    mypdfpage.Add(LogoImage2, 510, 85, 420);
                                }
                                PdfTable tblstudnameyear = mydoc.NewTable(Fontco12, 2, 6, 2);
                                tblstudnameyear.VisibleHeaders = false;
                                tblstudnameyear.SetBorders(Color.Black, 1, BorderType.None);
                                tblstudnameyear.SetColumnsWidth(new int[] { 68, 10, 270, 74, 100, 85 });
                                tblstudnameyear.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(0, 0).SetContent("Name ");
                                tblstudnameyear.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(0, 1).SetContent(":");
                                tblstudnameyear.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 2).SetContent(studname.Trim());
                                foreach (PdfCell pc in tblstudnameyear.CellRange(0, 2, 0, 2).Cells)
                                {
                                    pc.ColSpan = 2;
                                }
                                tblstudnameyear.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleRight);
                                tblstudnameyear.Cell(0, 4).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(0, 4).SetContent("Register No. :");
                                tblstudnameyear.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 5).SetContent(regnumber.Trim());
                                if (edu_level.Trim().ToLower().Contains("ug"))
                                {
                                    tblstudnameyear.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    tblstudnameyear.Cell(1, 0).SetColors(Color.DarkBlue, Color.White);
                                    tblstudnameyear.Cell(1, 0).SetContent("Optional");
                                    tblstudnameyear.Cell(1, 1).SetColors(Color.DarkBlue, Color.White);
                                    tblstudnameyear.Cell(1, 1).SetContent(":");
                                    //foreach (PdfCell pc in tblstudnameyear.CellRange(1, 0, 1, 0).Cells)
                                    //{
                                    //    pc.ColSpan = 2;
                                    //}
                                    tblstudnameyear.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    tblstudnameyear.Cell(1, 2).SetContent(partLanguage.Trim());
                                    foreach (PdfCell pc in tblstudnameyear.CellRange(1, 2, 1, 2).Cells)
                                    {
                                        pc.ColSpan = 4;
                                    }
                                }
                                PdfTablePage newpdftabpage2 = tblstudnameyear.CreateTablePage(new PdfArea(mydoc, 35, 156, 549, 60));
                                mypdfpage.Add(newpdftabpage2);
                                int height = 0;
                                height = Convert.ToInt32(newpdftabpage2.Area.Height) + 156;
                                tblstudnameyear = mydoc.NewTable(Fontco12, 1, 6, 2);
                                tblstudnameyear.VisibleHeaders = false;
                                tblstudnameyear.SetBorders(Color.Black, 1, BorderType.None);
                                tblstudnameyear.SetColumnsWidth(new int[] { 68, 10, 74, 270, 100, 85 });
                                tblstudnameyear.Cell(0, 0).SetContentAlignment(ContentAlignment.TopLeft);
                                tblstudnameyear.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(0, 0).SetContent("Medium of Instruction :");
                                foreach (PdfCell pc in tblstudnameyear.CellRange(0, 0, 0, 0).Cells)
                                {
                                    pc.ColSpan = 3;
                                }
                                tblstudnameyear.Cell(0, 3).SetContentAlignment(ContentAlignment.TopLeft);
                                tblstudnameyear.Cell(0, 3).SetContent(medium);
                                //foreach (PdfCell pc in tblstudnameyear.CellRange(1, 1, 1, 1).Cells)
                                //{
                                //    pc.ColSpan = 3;
                                //}
                                tblstudnameyear.Cell(0, 4).SetContentAlignment(ContentAlignment.TopRight);
                                tblstudnameyear.Cell(0, 4).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(0, 4).SetContent("Date :");
                                tblstudnameyear.Cell(0, 5).SetContentAlignment(ContentAlignment.TopLeft);
                                tblstudnameyear.Cell(0, 5).SetContent(issuedate);
                                //tblstudnameyear.Rows[0].SetCellPadding(0);
                                //tblstudnameyear.Rows[1].SetCellPadding(0);
                                //tblstudnameyear.Rows[2].SetCellPadding(0);
                                newpdftabpage2 = tblstudnameyear.CreateTablePage(new PdfArea(mydoc, 35, height, 549, 40));
                                mypdfpage.Add(newpdftabpage2);
                                height += Convert.ToInt32(newpdftabpage2.Area.Height);
                                PdfTextArea pdfdoi = new PdfTextArea(Fontco11, System.Drawing.Color.DarkBlue, new PdfArea(mydoc, 37, height, 500, 35), System.Drawing.ContentAlignment.TopLeft, "The following marks were awarded to the candidate in the " + degree + " Degree (Practical)");
                                mypdfpage.Add(pdfdoi);
                                height += 15;
                                tblstudnameyear = mydoc.NewTable(Fontco11, 1, 4, 2);
                                tblstudnameyear.VisibleHeaders = false;
                                tblstudnameyear.SetBorders(Color.Black, 1, BorderType.None);
                                tblstudnameyear.SetColumnsWidth(new int[] { 135, 190, 120, 40 });
                                tblstudnameyear.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(0, 0).SetContent("Examination held in ");
                                tblstudnameyear.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(0, 1).SetContent(monthandyear);
                                if (edu_level.Trim().ToLower() == "ug" || edu_level.Trim().ToLower() == "u.g")
                                {
                                    tblstudnameyear.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    tblstudnameyear.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                                    tblstudnameyear.Cell(0, 2).SetContent("SEMESTER " + semroman);
                                }
                                //tblstudnameyear.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                //tblstudnameyear.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                                //tblstudnameyear.Cell(0, 2).SetContent("SEMESTER " + semroman);
                                //tblstudnameyear.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                //tblstudnameyear.Cell(0, 3).SetColors(Color.DarkBlue, Color.White);
                                //tblstudnameyear.Cell(0, 3).SetContent(semroman);
                                newpdftabpage2 = tblstudnameyear.CreateTablePage(new PdfArea(mydoc, 35, height, 400, 28));
                                mypdfpage.Add(newpdftabpage2);
                                bool wpm = true;
                                bool ab = false;
                                height += Convert.ToInt32(newpdftabpage2.Area.Height);
                                ArrayList arr_subType = new ArrayList();
                                arr_subType.Clear();
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    status = true;
                                    PdfTable tblMarkStmt = mydoc.NewTable(Font10bold, printds_rows.Tables[0].Rows.Count + printds_rows.Tables[1].Rows.Count + 2, 8, 5);
                                    tblMarkStmt.VisibleHeaders = false;
                                    tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                                    //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                                    tblMarkStmt.SetColumnsWidth(new int[] { 39, 232, 50, 50, 57, 40, 55, 55 });
                                    double totcredit = 0;
                                    double summarkcredit = 0;
                                    tblMarkStmt.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 0).SetContent("CODE");
                                    tblMarkStmt.Cell(0, 0).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 0).SetCellPadding(6);
                                    tblMarkStmt.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 1).SetContent("COURSE");
                                    tblMarkStmt.Cell(0, 1).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 1).SetCellPadding(6);
                                    tblMarkStmt.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 2).SetCellPadding(6);
                                    tblMarkStmt.Cell(0, 2).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 2).SetContent("MAXIMUM\nMARKS");
                                    tblMarkStmt.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 3).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 3).SetCellPadding(6);
                                    tblMarkStmt.Cell(0, 3).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 3).SetContent("MARKS\nAWARDED");
                                    tblMarkStmt.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 4).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 4).SetCellPadding(6);
                                    tblMarkStmt.Cell(0, 4).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 4).SetContent("MARKS\n%");
                                    tblMarkStmt.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 5).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 5).SetCellPadding(6);
                                    tblMarkStmt.Cell(0, 5).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 5).SetContent("CREDIT");
                                    tblMarkStmt.Cell(0, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 6).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 6).SetCellPadding(6);
                                    tblMarkStmt.Cell(0, 6).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 6).SetContent("MARKS%\n  X  \nCREDIT");
                                    tblMarkStmt.Cell(0, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 7).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 7).SetCellPadding(6);
                                    tblMarkStmt.Cell(0, 7).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 7).SetContent("RESULT");
                                    int mr = 0;
                                    double tblheight = 0;
                                    int autochar = 65;
                                    for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                                    {
                                        if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                        {
                                            tblMarkStmt.Cell(mr + 1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(mr + 1, 0).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim());
                                            tblMarkStmt.Cell(mr + 1, 0).SetColors(Color.DarkBlue, Color.White);
                                            bool rab = false;
                                            tblMarkStmt.Cell(mr + 1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            double internalmmark = 0;
                                            double externalmark1 = 0;
                                            double totalintext = 0;
                                            double max_marks = 0;
                                            double min_marks = 0;

                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["maxtotal"]), out max_marks);
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["mintotal"]), out min_marks);
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]), out internalmmark);
                                            double extfinal = 0;
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]), out extfinal);
                                            extfinal = Math.Round(extfinal, 0, MidpointRounding.AwayFromZero);
                                            externalmark1 = extfinal;

                                            double minINTMark = 0;
                                            double maxINTMark = 0;
                                            string minINT = Convert.ToString(printds_rows.Tables[0].Rows[i]["min_int_marks"]).Trim();
                                            string maxINT = Convert.ToString(printds_rows.Tables[0].Rows[i]["max_int_marks"]).Trim();
                                            double.TryParse(minINT.Trim(), out minINTMark);
                                            double.TryParse(maxINT.Trim(), out maxINTMark);

                                            double minEXTMark = 0;
                                            double maxEXTMark = 0;
                                            string minEXT = Convert.ToString(printds_rows.Tables[0].Rows[i]["min_ext_marks"]).Trim();
                                            string maxEXT = Convert.ToString(printds_rows.Tables[0].Rows[i]["max_ext_marks"]).Trim();
                                            double.TryParse(minEXT.Trim(), out minEXTMark);
                                            double.TryParse(maxEXT.Trim(), out maxEXTMark);

                                            double minTOTMark = 0;
                                            double maxTOTMark = 0;
                                            string minTOT = Convert.ToString(printds_rows.Tables[0].Rows[i]["mintotal"]).Trim();
                                            string maxTOT = Convert.ToString(printds_rows.Tables[0].Rows[i]["maxtotal"]).Trim();
                                            double.TryParse(minTOT.Trim(), out minTOTMark);
                                            double.TryParse(maxTOT.Trim(), out maxTOTMark);

                                            double markPercentage = 0;

                                            string checkedmark = string.Empty;
                                            if (extfinal < 0)
                                            {
                                                checkedmark = loadmarkat(Convert.ToString(extfinal));
                                            }
                                            else
                                            {
                                                checkedmark = Convert.ToString(extfinal);
                                            }
                                            if (internalmmark >= 0)
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = internalmmark + externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = internalmmark;
                                                }
                                            }
                                            else
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = 0;
                                                }
                                            }
                                            tblMarkStmt.Cell(mr + 1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(mr + 1, 2).SetContent(max_marks);
                                            tblMarkStmt.Cell(mr + 1, 2).SetColors(Color.DarkBlue, Color.White);

                                            double totfinal = 0;
                                            totfinal = Math.Round(totalintext, 0, MidpointRounding.AwayFromZero);

                                            if (maxTOTMark > 0 && totfinal > 0)
                                            {
                                                double markPercent = 0;
                                                markPercent = (totfinal / maxTOTMark) * 100;
                                                markPercentage = Math.Round(markPercent, 1, MidpointRounding.AwayFromZero);
                                                markPercentage = Math.Round(markPercentage, 0, MidpointRounding.AwayFromZero);
                                            }
                                            if (totfinal == 0)
                                            {
                                                tblMarkStmt.Cell(mr + 1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(mr + 1, 3).SetContent(Convert.ToString("-"));
                                                tblMarkStmt.Cell(mr + 1, 3).SetColors(Color.Black, Color.White);
                                            }
                                            else
                                            {
                                                tblMarkStmt.Cell(mr + 1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(mr + 1, 3).SetContent(Convert.ToString(totfinal));
                                                tblMarkStmt.Cell(mr + 1, 3).SetColors(Color.Black, Color.White);
                                            }
                                            if (markPercentage == 0)
                                            {
                                                tblMarkStmt.Cell(mr + 1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(mr + 1, 4).SetContent(Convert.ToString("-"));
                                                tblMarkStmt.Cell(mr + 1, 5).SetContent(Convert.ToString("-"));
                                            }
                                            else
                                            {
                                                tblMarkStmt.Cell(mr + 1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(mr + 1, 4).SetContent(Convert.ToString(markPercentage));
                                                tblMarkStmt.Cell(mr + 1, 5).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]));
                                            }
                                            double creditpoint = 0;
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]), out creditpoint);
                                            double mrkcredit = 0;
                                            string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim();
                                            string r = string.Empty;
                                            tblMarkStmt.Cell(mr + 1, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(mr + 1, 5).SetColors(Color.Blue, Color.White);
                                            tblMarkStmt.Cell(mr + 1, 6).SetContentAlignment(ContentAlignment.MiddleCenter);


                                            tblMarkStmt.Cell(mr + 1, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(mr + 1, 7).SetContentAlignment(ContentAlignment.MiddleCenter);

                                            if (result.ToUpper() == "PASS")
                                            {
                                                r = "PASS";
                                                tblMarkStmt.Cell(mr + 1, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(mr + 1, 7).SetContent(r);
                                                totcredit += creditpoint;
                                                mrkcredit = markPercentage * creditpoint;
                                                mrkcredit = Math.Round(mrkcredit, 0, MidpointRounding.AwayFromZero);
                                                tblMarkStmt.Cell(mr + 1, 6).SetContent(mrkcredit);
                                                summarkcredit += mrkcredit;
                                            }
                                            else if (result.ToUpper() == "FAIL")
                                            {
                                                r = "Reappear";
                                                if (markPercentage.ToString() == " ")
                                                {
                                                    tblMarkStmt.Cell(mr + 1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                    tblMarkStmt.Cell(mr + 1, 4).SetContent("-");
                                                }
                                                //tblMarkStmt.Cell(mr + 1, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                //tblMarkStmt.Cell(mr + 1, 5).SetContent("-");
                                                tblMarkStmt.Cell(mr + 1, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(mr + 1, 6).SetContent("-");
                                                tblMarkStmt.Cell(mr + 1, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(mr + 1, 7).SetContent(Convert.ToString(r).ToUpper());
                                            }
                                            else if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                            {
                                                ab = true;
                                                tblMarkStmt.Cell(mr + 1, 4).SetContent("AB");
                                                tblMarkStmt.Cell(mr + 1, 6).SetContent("AB");
                                                tblMarkStmt.Cell(mr + 1, 5).SetContent("AB");
                                                tblMarkStmt.Cell(mr + 1, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(mr + 1, 7).SetContent("AB");
                                                if (extfinal == 0 || internalmmark == 0)
                                                {
                                                    rab = true;
                                                }
                                                r = "AAA";
                                            }
                                            else if (result.ToUpper() == "RE-APPEAR" || result.ToUpper() == "REAPPEAR")
                                            {
                                                r = "RA";
                                                if (markPercentage.ToString() == "")
                                                {
                                                    tblMarkStmt.Cell(mr + 1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                    tblMarkStmt.Cell(mr + 1, 4).SetContent("-");
                                                }
                                                //tblMarkStmt.Cell(mr + 1, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                //tblMarkStmt.Cell(mr + 1, 5).SetContent("-");
                                                tblMarkStmt.Cell(mr + 1, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(mr + 1, 6).SetContent("-");
                                                tblMarkStmt.Cell(mr + 1, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(mr + 1, 7).SetContent("REAPPEAR");
                                            }
                                            else
                                            {
                                                r = result;
                                            }

                                            if (result.Trim().ToUpper() == "FAIL")
                                            {
                                                wpm = false;
                                                //tblMarkStmt.Cell(mr + 1, 6).SetContent("");
                                                //tblMarkStmt.Cell(mr + 1, 5).SetContent("");
                                                //tblMarkStmt.Cell(mr + 1, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            }
                                            if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                            {
                                                ab = true;
                                                tblMarkStmt.Cell(mr + 1, 6).SetContent("AB");
                                                tblMarkStmt.Cell(mr + 1, 5).SetContent("AB");
                                                tblMarkStmt.Cell(mr + 1, 4).SetContent("AB");
                                                tblMarkStmt.Cell(mr + 1, 7).SetContent("AB");
                                            }
                                            if (extfinal < 0)
                                            {
                                                ab = true;
                                                tblMarkStmt.Cell(mr + 1, 4).SetContent("AB");
                                                tblMarkStmt.Cell(mr + 1, 6).SetContent("AB");
                                                tblMarkStmt.Cell(mr + 1, 5).SetContent("AB");
                                                tblMarkStmt.Cell(mr + 1, 7).SetContent("AB");
                                            }
                                            if (internalmmark < 0)
                                            {
                                                ab = true;
                                                tblMarkStmt.Cell(mr + 1, 4).SetContent("AB");
                                                tblMarkStmt.Cell(mr + 1, 6).SetContent("AB");
                                                tblMarkStmt.Cell(mr + 1, 5).SetContent("AB");
                                                tblMarkStmt.Cell(mr + 1, 7).SetContent("AB");
                                            }
                                            if (!arr_subType.Contains(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_type"]).Trim()))
                                            {
                                                string prefix = Convert.ToString((char)(autochar)) + ". ";
                                                tblMarkStmt.Cell(mr + 1, 1).SetContent(prefix + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_type"]).Trim());
                                                tblMarkStmt.Cell(mr + 1, 1).SetColors(Color.DarkBlue, Color.White);
                                                tblMarkStmt.Cell(mr + 2, 1).SetContent("\t\t" + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]));
                                                tblMarkStmt.Cell(mr + 2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                tblMarkStmt.Cell(mr + 2, 1).SetColors(Color.Black, Color.White);
                                                arr_subType.Add(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_type"]).Trim());
                                                autochar++;
                                                mr += 2;

                                            }
                                            else
                                            {
                                                tblMarkStmt.Cell(mr + 1, 1).SetContent("\t\t" + Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]));
                                                tblMarkStmt.Cell(mr + 1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                tblMarkStmt.Cell(mr + 1, 1).SetColors(Color.DarkBlue, Color.White);
                                                mr++;
                                            }
                                        }
                                    }
                                    newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 35, 259, 549, 400));//249
                                    mypdfpage.Add(newpdftabpage2);
                                    tblMarkStmt = mydoc.NewTable(Fontarial10b, 1, 4, 10);
                                    tblMarkStmt.VisibleHeaders = false;
                                    tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                                    tblMarkStmt.SetColumnsWidth(new int[] { 43, 270, 52, 62 });
                                    tblMarkStmt.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 1).SetContent("TOTAL");
                                    tblMarkStmt.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    if (totcredit != 0)
                                    {
                                        tblMarkStmt.Cell(0, 2).SetContent(totcredit);
                                        tblMarkStmt.Cell(0, 2).SetColors(Color.Blue, Color.White);
                                    }
                                    tblMarkStmt.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    if (summarkcredit != 0)
                                        tblMarkStmt.Cell(0, 3).SetContent(summarkcredit);
                                    double wam = 0;
                                    if (summarkcredit == 0 || totcredit == 0)
                                    {
                                        wam = 0;
                                    }
                                    else
                                    {
                                        wam = Math.Round((summarkcredit / totcredit), 0, MidpointRounding.AwayFromZero);
                                    }
                                    newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 20, 580, 550, 35));//580
                                    mypdfpage.Add(newpdftabpage2);
                                    PdfTextArea pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 60, 635, 160, 50), ContentAlignment.TopLeft, "Weighted Average of Marks  = ");
                                    mypdfpage.Add(pdftxt);
                                    if (wpm == true && ab == false)
                                    {
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 402, 627, 50, 50), ContentAlignment.TopCenter, Convert.ToString(summarkcredit));
                                        mypdfpage.Add(pdftxt);
                                        //Horizandal Line 11 for Tot(M X C) / totcredit
                                        PdfLine ple1 = new PdfLine(mydoc, new Point(402, 641), new Point(450, 641), Color.DarkBlue, 1);
                                        mypdfpage.Add(ple1);
                                    }
                                    else
                                    {
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 390, 627, 100, 50), ContentAlignment.TopCenter, Convert.ToString("NOT COMPLETED"));
                                        mypdfpage.Add(pdftxt);
                                        //Horizandal Line 11 for Tot(M X C) / totcredit
                                        PdfLine ple = new PdfLine(mydoc, new Point(390, 641), new Point(490, 641), Color.DarkBlue, 1);
                                        mypdfpage.Add(ple);
                                    }
                                    pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 220, 627, 150, 50), ContentAlignment.TopCenter, Convert.ToString("Total of (Marks% X Credits)"));
                                    mypdfpage.Add(pdftxt);
                                    pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 222, 647, 150, 50), ContentAlignment.TopCenter, Convert.ToString("Total Credits"));
                                    mypdfpage.Add(pdftxt);
                                    if (wpm == true && ab == false)
                                    {
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.Blue, new PdfArea(mydoc, 402, 647, 50, 50), ContentAlignment.TopCenter, Convert.ToString(totcredit));
                                        mypdfpage.Add(pdftxt);
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 468, 635, 16, 50), ContentAlignment.TopLeft, " = ");
                                        mypdfpage.Add(pdftxt);
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 476, 635, 86, 50), ContentAlignment.TopLeft, Convert.ToString("  " + wam));
                                        mypdfpage.Add(pdftxt);
                                    }
                                    else
                                    {
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 402, 647, 50, 50), ContentAlignment.TopCenter, Convert.ToString(""));
                                        mypdfpage.Add(pdftxt);
                                    }
                                    pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 369, 635, 16, 50), ContentAlignment.TopLeft, "  =  ");
                                    mypdfpage.Add(pdftxt);
                                    pdftxt = new PdfTextArea(Font10bold, Color.DarkBlue, new PdfArea(mydoc, 37, 786, 275, 50), ContentAlignment.TopCenter, "CONTROLLER OF EXAMINATIONS");
                                    mypdfpage.Add(pdftxt);
                                    pdftxt = new PdfTextArea(Font10bold, Color.DarkBlue, new PdfArea(mydoc, 300, 786, 340, 50), ContentAlignment.TopCenter, "PRINCIPAL");
                                    mypdfpage.Add(pdftxt);
                                    //pdftxt = new PdfTextArea(Fontwma, Color.DarkBlue, new PdfArea(mydoc, 37, 805, 540, 30), ContentAlignment.TopCenter, "Passing Minimum : Internal Assessment - 20 Marks, External Assessment - 30 Marks, Aggregate - 50 Marks");
                                    //mypdfpage.Add(pdftxt);
                                    pdftxt = new PdfTextArea(Fontwma, Color.DarkBlue, new PdfArea(mydoc, 37, 805, 540, 30), ContentAlignment.TopCenter, "Passing Minimum : 50% in Each Component, AB-Absent");
                                    mypdfpage.Add(pdftxt);
                                    //Top Horizantal Line 1
                                    PdfLine pl = new PdfLine(mydoc, new Point(30, 155), new Point(585, 155), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 2
                                    pl = new PdfLine(mydoc, new Point(30, 260), new Point(585, 260), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    ////Horizandal Line 3
                                    //pl = new PdfLine(mydoc, new Point(298, 270), new Point(447, 270), Color.DarkBlue, 1);
                                    //mypdfpage.Add(pl);
                                    //Horizandal Line 4
                                    pl = new PdfLine(mydoc, new Point(30, 301), new Point(585, 301), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 5
                                    pl = new PdfLine(mydoc, new Point(30, 587), new Point(585, 587), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 6
                                    pl = new PdfLine(mydoc, new Point(30, 602), new Point(585, 602), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 7
                                    pl = new PdfLine(mydoc, new Point(30, 689), new Point(585, 689), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //if (edu_level.Trim().ToLower() == "ug" || edu_level.Trim('.').ToLower() == "u.g")
                                    //{
                                    //    //Horizandal Line 8
                                    //    pl = new PdfLine(mydoc, new Point(30, 740), new Point(585, 740), Color.DarkBlue, 1);
                                    //    mypdfpage.Add(pl);
                                    //}
                                    //Horizandal Line 9
                                    pl = new PdfLine(mydoc, new Point(30, 800), new Point(585, 800), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 10 for Tot(M X C) / totcredit
                                    pl = new PdfLine(mydoc, new Point(226, 641), new Point(365, 641), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 1 
                                    pl = new PdfLine(mydoc, new Point(75, 260), new Point(75, 602), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 2
                                    pl = new PdfLine(mydoc, new Point(290, 260), new Point(290, 587), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 3
                                    pl = new PdfLine(mydoc, new Point(339, 260), new Point(339, 587), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 4
                                    pl = new PdfLine(mydoc, new Point(390, 260), new Point(390, 587), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 5
                                    pl = new PdfLine(mydoc, new Point(436, 260), new Point(436, 602), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 6
                                    pl = new PdfLine(mydoc, new Point(481, 260), new Point(481, 602), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 7
                                    pl = new PdfLine(mydoc, new Point(526, 260), new Point(526, 602), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                }
                            }
                            if (status == true)
                                mypdfpage.SaveToDocument();
                        }
                    }
                }
            }
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
            }
        }
        catch (Exception ex)
        {
        }
    }


    //FOR UG SEMESTER - II
    public void ugchristophermarkstatementsem2()
    {
        try
        {
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            //DataSet semwisegpa = new DataSet();
            string degree = string.Empty;
            string degname = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string issuedate = string.Empty;
            string semroman = "", edu_level = string.Empty;
            string coe = string.Empty;
            DataSet gradeds = new DataSet();
            lblerror.Visible = false;
            lblerror.Text = string.Empty;
            Font fondColName = new Font("Comic Sans MS", 18, FontStyle.Bold);
            Font fontdegexam = new Font("Arial", 12, FontStyle.Bold);
            Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco11 = new Font("Comic Sans MS", 11, FontStyle.Bold);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
            Font Fontwma = new Font("Arial", 8, FontStyle.Bold);
            Font Font8bold = new Font("Arial", 8, FontStyle.Bold);
            Font Font10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            DataTable dtPart1 = new DataTable();
            DataTable dtPart2 = new DataTable();
            DataTable dtPart3 = new DataTable();
            DataTable dtPart4 = new DataTable();
            Font Fontarial9 = new Font("Arial", 9, FontStyle.Bold);
            Font Fontarial10b = new Font("Arial", 11, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.3, 30.3));
            PdfPage mypdfpage;
            bool specialcourse = false;
            if (ddlSubject.SelectedIndex == 0)
            {
                specialcourse = false;
            }
            else
            {
                specialcourse = true;
            }
            if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
            {
                string strquery = "select *,district+' - '+pincode  as districtpin from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                ds.Dispose();
                ds.Reset();
                ds = d2.select_method_wo_parameter(strquery, "Text");
                string Collegename = string.Empty;
                string aff = string.Empty;
                string collacr = string.Empty;
                string dispin = string.Empty;
                string clgaddress = string.Empty;
                string univ = string.Empty;
                string pincode = string.Empty;
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    Collegename = ds.Tables[0].Rows[0]["Collname"].ToString();
                    aff = ds.Tables[0].Rows[0]["affliatedby"].ToString();
                    univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                    string[] strpa = aff.Split(',');
                    aff = "( " + univ + " " + strpa[0] + " )";
                    //coename = ds.Tables[0].Rows[0]["coe"].ToString();
                    collacr = ds.Tables[0].Rows[0]["acr"].ToString();
                    pincode = Convert.ToString(ds.Tables[0].Rows[0]["pincode"]).Trim();
                    pincode = pincode.Substring(pincode.Length - 3);
                    int pin = 0;
                    int.TryParse(pincode, out pin);
                    //((pincode.Length > 0) ? pincode.Substring(pincode.Length - 1) : ""
                    //char[] pin = pincode.Substring(pincode.Length - 1);
                    clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]) + " , " + Convert.ToString(ds.Tables[0].Rows[0]["district"]) + ((pin != 0) ? (" - " + pin.ToString()) : " - " + pincode);
                    clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);
                    dispin = ds.Tables[0].Rows[0]["districtpin"].ToString();
                }
                FpSpread2.SaveChanges();
                for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
                {
                    int isval = 0;
                    isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                    if (isval == 1)
                    {
                        printds.Clear();
                        printds.Dispose();
                        printds_new.Clear();
                        printds_new.Dispose();
                        rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                        regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                        string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,C.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';";
                        printds = da.select_method_wo_parameter(sql, "Text");
                        if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                        {
                            mypdfpage = mydoc.NewPage();
                            string app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]);
                            degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                            //month = ddlMonth.SelectedIndex;
                            //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                            int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                            monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                            string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                            monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                            monthandyear = monthandyear.ToUpper();
                            studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                            issuedate = Convert.ToString(txtdoi.Text);
                            branch = printds.Tables[0].Rows[0]["Dept_name"].ToString();
                            dob = printds.Tables[0].Rows[0]["dob"].ToString();
                            edu_level = Convert.ToString(printds.Tables[0].Rows[0]["Edu_Level"]).Trim();
                            string stdappno = printds.Tables[0].Rows[0]["App_No"].ToString();
                            batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                            degree_code = printds.Tables[0].Rows[0]["degree_code"].ToString();
                            string medium = d2.GetFunctionv("select TextVal from TextValTable where TextCriteria='medi' and college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and TextCode in(select isnull(medium_ins,0) from applyn  where app_no='" + app_no + "')");
                            sql2 = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                            printds_new = da.select_method_wo_parameter(sql2, "Text");
                            if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                            {
                                sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]);
                                if (sem == "1")
                                {
                                    semroman = "I";
                                }
                                else if (sem == "2")
                                {
                                    semroman = "II";
                                }
                                else if (sem == "3")
                                {
                                    semroman = "III";
                                }
                                else if (sem == "4")
                                {
                                    semroman = "IV";
                                }
                                else if (sem == "5")
                                {
                                    semroman = "V";
                                }
                                else if (sem == "6")
                                {
                                    semroman = "VI";
                                }
                                else if (sem == "7")
                                {
                                    semroman = "VII";
                                }
                                else if (sem == "8")
                                {
                                    semroman = "VIII";
                                }
                                //PdfTextArea pdfdoi = new PdfTextArea(Fontco10, System.Drawing.Color.Black, new PdfArea(mydoc, 113, 803, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                                //mypdfpage.Add(pdfdoi);
                                PdfRectangle pr1 = new PdfRectangle(mydoc, new PdfArea(mydoc, 30, 44, 555, 771), Color.DarkBlue);
                                mypdfpage.Add(pr1);
                                PdfTextArea pdfHeader = new PdfTextArea(fondColName, Color.DarkBlue, new PdfArea(mydoc, 30, 40, 550, 50), ContentAlignment.MiddleCenter, Collegename + ", " + clgaddress);
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(Fontarial7, Color.DarkBlue, new PdfArea(mydoc, 30, 55, 550, 50), ContentAlignment.MiddleCenter, aff);
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(fontdegexam, Color.DarkBlue, new PdfArea(mydoc, 30, 78, 550, 50), ContentAlignment.MiddleCenter, degree + " DEGREE EXAMINATION");
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(fondColName, Color.DarkBlue, new PdfArea(mydoc, 30, 108, 550, 50), ContentAlignment.MiddleCenter, "STATEMENT OF MARKS");
                                mypdfpage.Add(pdfHeader);
                                //pl = new PdfLine(mydoc, new Point(30, 778), new Point(585, 778), Color.DarkBlue, 1);
                                //mypdfpage.Add(pl);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))
                                {
                                    PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
                                    mypdfpage.Add(LogoImage, 40, 83, 415);
                                }
                                exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]).Trim();
                                sql3 = "Select semester,subject_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,Part_Type from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = '" + exam_code + "' and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;";
                                printds_rows.Clear();
                                printds_rows.Dispose();
                                printds_rows = da.select_method_wo_parameter(sql3, "Text");
                                string stdphtsql = "select * from StdPhoto where app_no='" + stdappno + "'";
                                MemoryStream memoryStream = new MemoryStream();
                                DataSet dsstdpho = new DataSet();
                                dsstdpho.Clear();
                                dsstdpho.Dispose();
                                dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                                if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                                {
                                    byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                                    memoryStream.Write(file, 0, file.Length);
                                    if (file.Length > 0)
                                    {
                                        System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                        System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                        {
                                            //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                        }
                                        else
                                        {
                                            thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                            //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                        }
                                    }
                                }
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                {
                                    PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                                    mypdfpage.Add(LogoImage2, 510, 85, 420);
                                }
                                else
                                {
                                    PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                    mypdfpage.Add(LogoImage2, 510, 85, 420);
                                }
                                PdfTable tblstudnameyear = mydoc.NewTable(Fontco12, 2, 5, 2);
                                tblstudnameyear.VisibleHeaders = false;
                                tblstudnameyear.SetBorders(Color.Black, 1, BorderType.None);
                                tblstudnameyear.SetColumnsWidth(new int[] { 50, 106, 256, 100, 79 });
                                tblstudnameyear.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(0, 0).SetContent("Name : ");
                                tblstudnameyear.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 1).SetContent(studname.Trim());
                                foreach (PdfCell pc in tblstudnameyear.CellRange(0, 1, 0, 1).Cells)
                                {
                                    pc.ColSpan = 2;
                                }
                                tblstudnameyear.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleRight);
                                tblstudnameyear.Cell(0, 3).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(0, 3).SetContent("Register No. :");
                                tblstudnameyear.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 4).SetContent(regnumber.Trim());
                                tblstudnameyear.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(1, 0).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(1, 0).SetContent("Medium of Instruction :");
                                foreach (PdfCell pc in tblstudnameyear.CellRange(1, 0, 1, 0).Cells)
                                {
                                    pc.ColSpan = 2;
                                }
                                tblstudnameyear.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(1, 2).SetContent(medium);
                                //foreach (PdfCell pc in tblstudnameyear.CellRange(1, 1, 1, 1).Cells)
                                //{
                                //    pc.ColSpan = 3;
                                //}
                                tblstudnameyear.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleRight);
                                tblstudnameyear.Cell(1, 3).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(1, 3).SetContent("Date :");
                                tblstudnameyear.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(1, 4).SetContent(issuedate);
                                PdfTablePage newpdftabpage2 = tblstudnameyear.CreateTablePage(new PdfArea(mydoc, 35, 169, 549, 60));
                                mypdfpage.Add(newpdftabpage2);
                                PdfTextArea pdfdoi = new PdfTextArea(Fontco11, System.Drawing.Color.DarkBlue, new PdfArea(mydoc, 37, 215, 500, 35), System.Drawing.ContentAlignment.TopLeft, "The following marks were awarded to the candidate in the " + degree + " Degree (Written)");
                                mypdfpage.Add(pdfdoi);
                                tblstudnameyear = mydoc.NewTable(Fontco11, 1, 4, 2);
                                tblstudnameyear.VisibleHeaders = false;
                                tblstudnameyear.SetBorders(Color.Black, 1, BorderType.None);
                                tblstudnameyear.SetColumnsWidth(new int[] { 135, 190, 120, 40 });
                                tblstudnameyear.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(0, 0).SetContent("Examination held in ");
                                tblstudnameyear.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(0, 1).SetContent(monthandyear);
                                tblstudnameyear.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(0, 2).SetContent("SEMESTER " + semroman);
                                //tblstudnameyear.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                //tblstudnameyear.Cell(0, 3).SetColors(Color.DarkBlue, Color.White);
                                //tblstudnameyear.Cell(0, 3).SetContent(semroman);
                                newpdftabpage2 = tblstudnameyear.CreateTablePage(new PdfArea(mydoc, 35, 230, 400, 28));
                                mypdfpage.Add(newpdftabpage2);
                                bool wpm = true;
                                bool ab = false;
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    PdfTable tblMarkStmt = mydoc.NewTable(Fontarial10b, printds_rows.Tables[0].Rows.Count + 2, 8, 12);
                                    tblMarkStmt.VisibleHeaders = false;
                                    tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                                    //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                                    tblMarkStmt.SetColumnsWidth(new int[] { 35, 235, 52, 52, 48, 52, 38, 48 });
                                    double totcredit = 0;
                                    double summarkcredit = 0;
                                    tblMarkStmt.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 0).SetContent("CODE");
                                    tblMarkStmt.Cell(0, 0).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 0).SetCellPadding(0);
                                    foreach (PdfCell pc in tblMarkStmt.CellRange(0, 0, 0, 0).Cells)
                                    {
                                        pc.RowSpan = 2;
                                    }
                                    tblMarkStmt.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 1).SetContent("COURSE");
                                    tblMarkStmt.Cell(0, 1).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 1).SetCellPadding(0);
                                    foreach (PdfCell pc in tblMarkStmt.CellRange(0, 1, 0, 1).Cells)
                                    {
                                        pc.RowSpan = 2;
                                    }
                                    tblMarkStmt.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 2).SetCellPadding(0);
                                    tblMarkStmt.Cell(0, 2).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 2).SetContent("MARKS AWARDED");
                                    foreach (PdfCell pc in tblMarkStmt.CellRange(0, 2, 0, 2).Cells)
                                    {
                                        pc.ColSpan = 3;
                                    }
                                    tblMarkStmt.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(1, 2).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(1, 2).SetCellPadding(0);
                                    tblMarkStmt.Cell(1, 2).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(1, 2).SetContent("INTERNAL\n(40)");
                                    tblMarkStmt.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(1, 3).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(1, 3).SetCellPadding(0);
                                    tblMarkStmt.Cell(1, 3).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(1, 3).SetContent("EXTERNAL\n(60)");
                                    tblMarkStmt.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(1, 4).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(1, 4).SetCellPadding(0);
                                    tblMarkStmt.Cell(1, 4).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(1, 4).SetContent("TOTAL\n(100)");
                                    tblMarkStmt.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 5).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 5).SetCellPadding(0);
                                    tblMarkStmt.Cell(0, 5).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 5).SetContent("RESULT");
                                    foreach (PdfCell pc in tblMarkStmt.CellRange(0, 5, 0, 5).Cells)
                                    {
                                        pc.RowSpan = 2;
                                    }
                                    tblMarkStmt.Cell(0, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 6).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 6).SetCellPadding(0);
                                    tblMarkStmt.Cell(0, 6).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 6).SetContent("CREDIT");
                                    foreach (PdfCell pc in tblMarkStmt.CellRange(0, 6, 0, 6).Cells)
                                    {
                                        pc.RowSpan = 2;
                                    }
                                    tblMarkStmt.Cell(0, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 7).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 7).SetCellPadding(0);
                                    tblMarkStmt.Cell(0, 7).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 7).SetContent("MARKS\n  X  \nCREDIT");
                                    foreach (PdfCell pc in tblMarkStmt.CellRange(0, 7, 0, 7).Cells)
                                    {
                                        pc.RowSpan = 2;
                                    }
                                    for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                                    {
                                        if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                        {
                                            tblMarkStmt.Cell(i + 2, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(i + 2, 0).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim());
                                            bool rab = false;
                                            tblMarkStmt.Cell(i + 2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tblMarkStmt.Cell(i + 2, 1).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]));
                                            double internalmmark = 0;
                                            double externalmark1 = 0;
                                            double totalintext = 0;
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]), out internalmmark);
                                            double extfinal = 0;
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]), out extfinal);
                                            extfinal = Math.Round(extfinal, 0);
                                            externalmark1 = extfinal;
                                            string checkedmark = string.Empty;
                                            if (extfinal < 0)
                                            {
                                                checkedmark = loadmarkat(Convert.ToString(extfinal));
                                            }
                                            else
                                            {
                                                checkedmark = Convert.ToString(extfinal);
                                            }
                                            if (internalmmark >= 0)
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = internalmmark + externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = internalmmark;
                                                }
                                            }
                                            else
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = 0;
                                                }
                                            }
                                            tblMarkStmt.Cell(i + 2, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(i + 2, 2).SetContent(internalmmark);
                                            tblMarkStmt.Cell(i + 2, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(i + 2, 3).SetContent(checkedmark);
                                            double totfinal = 0;
                                            totfinal = Math.Round(totalintext, 0);
                                            tblMarkStmt.Cell(i + 2, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(i + 2, 4).SetContent(Convert.ToString(totfinal));
                                            double creditpoint = 0;
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]), out creditpoint);
                                            double mrkcredit = 0;
                                            string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim();
                                            string r = string.Empty;
                                            //tblMarkStmt.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            if (result.ToUpper() == "PASS")
                                            {
                                                r = "PASS";
                                                totcredit += creditpoint;
                                                mrkcredit = totfinal * creditpoint;
                                                summarkcredit += mrkcredit;
                                            }
                                            else if (result.ToUpper() == "FAIL")
                                            {
                                                r = "Reappear";
                                                //tblMarkStmt.Cell(i + 2, 5).SetFont(Fontarial9);                                                
                                            }
                                            else if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                            {
                                                ab = true;
                                                tblMarkStmt.Cell(i + 2, 3).SetContent("AB");
                                                tblMarkStmt.Cell(i + 2, 2).SetContent("0");
                                                tblMarkStmt.Cell(i + 2, 4).SetContent("0");
                                                tblMarkStmt.Cell(i + 2, 5).SetContent("AAA");
                                                tblMarkStmt.Cell(i + 2, 6).SetContent("");
                                                tblMarkStmt.Cell(i + 2, 7).SetContent("");
                                                if (extfinal == 0 || internalmmark == 0)
                                                {
                                                    rab = true;
                                                    //totcredit += creditpoint;
                                                    //mrkcredit = totfinal * creditpoint;
                                                    //summarkcredit += mrkcredit;
                                                }
                                                r = "AAA";
                                            }
                                            else if (result.ToUpper() == "RE-APPEAR" || result.ToUpper() == "REAPPEAR")
                                            {
                                                r = "RA";
                                            }
                                            else
                                            {
                                                r = result;
                                            }
                                            tblMarkStmt.Cell(i + 2, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(i + 2, 5).SetContent(r);
                                            tblMarkStmt.Cell(i + 2, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(i + 2, 7).SetContent(mrkcredit);
                                            tblMarkStmt.Cell(i + 2, 6).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]));
                                            tblMarkStmt.Cell(i + 2, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            if (result.Trim().ToUpper() == "FAIL")
                                            {
                                                wpm = false;
                                                tblMarkStmt.Cell(i + 2, 7).SetContent("");
                                                tblMarkStmt.Cell(i + 2, 6).SetContent("");
                                                tblMarkStmt.Cell(i + 2, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            }
                                            if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                            {
                                                ab = true;
                                                tblMarkStmt.Cell(i + 2, 6).SetContent("");
                                                tblMarkStmt.Cell(i + 2, 7).SetContent("");
                                            }
                                            if (extfinal < 0)
                                            {
                                                ab = true;
                                                tblMarkStmt.Cell(i + 2, 3).SetContent("AB");
                                                tblMarkStmt.Cell(i + 2, 2).SetContent("0");
                                                tblMarkStmt.Cell(i + 2, 4).SetContent("0");
                                                tblMarkStmt.Cell(i + 2, 5).SetContent("AAA");
                                                tblMarkStmt.Cell(i + 2, 6).SetContent("");
                                                tblMarkStmt.Cell(i + 2, 7).SetContent("");
                                            }
                                            if (internalmmark < 0)
                                            {
                                                ab = true;
                                                tblMarkStmt.Cell(i + 2, 3).SetContent("0");
                                                tblMarkStmt.Cell(i + 2, 2).SetContent("AB");
                                                tblMarkStmt.Cell(i + 2, 4).SetContent("0");
                                                tblMarkStmt.Cell(i + 2, 5).SetContent("AAA");
                                                tblMarkStmt.Cell(i + 2, 6).SetContent("");
                                                tblMarkStmt.Cell(i + 2, 7).SetContent("");
                                            }
                                            //if (rab == false)
                                            //{
                                            //    if (extfinal < 0 || internalmmark < 0)
                                            //    {
                                            //        totcredit += creditpoint;
                                            //        //mrkcredit = totfinal * creditpoint;
                                            //        //summarkcredit += mrkcredit;
                                            //    }
                                            //}
                                            //if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                            //{
                                            //    wpm = false;
                                            //    tblMarkStmt.Cell(i + 2, 7).SetContent("");
                                            //    tblMarkStmt.Cell(i + 2, 6).SetContent("");
                                            //    tblMarkStmt.Cell(i + 2, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //}
                                        }
                                    }
                                    //tblMarkStmt.Cell(printds_rows.Tables[0].Rows.Count, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    //tblMarkStmt.Cell(printds_rows.Tables[0].Rows.Count, 1).SetFont(Fontpala12);
                                    //tblMarkStmt.Cell(printds_rows.Tables[0].Rows.Count, 1).SetCellPadding(9);
                                    //tblMarkStmt.Cell(printds_rows.Tables[0].Rows.Count, 1).SetContent("****** End of Statement ******");
                                    //foreach (PdfCell pr in tblMarkStmt.CellRange(printds_rows.Tables[0].Rows.Count, 0, printds_rows.Tables[0].Rows.Count, 0).Cells)
                                    //{
                                    //    pr.ColSpan = 7;
                                    //}
                                    newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 35, 249, 549, 300));
                                    mypdfpage.Add(newpdftabpage2);
                                    tblMarkStmt = mydoc.NewTable(Fontarial10b, 1, 4, 10);
                                    tblMarkStmt.VisibleHeaders = false;
                                    tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                                    tblMarkStmt.SetColumnsWidth(new int[] { 43, 420, 38, 47 });
                                    tblMarkStmt.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 1).SetContent("TOTAL");
                                    //foreach (PdfCell pc in tblstudnameyear.CellRange(1, 0, 1, 0).Cells)
                                    //{
                                    //    pc.ColSpan = 2;
                                    //}
                                    tblMarkStmt.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    if (totcredit != 0)
                                    {
                                        tblMarkStmt.Cell(0, 2).SetContent(totcredit);
                                    }
                                    tblMarkStmt.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    if (summarkcredit != 0)
                                        tblMarkStmt.Cell(0, 3).SetContent(summarkcredit);
                                    double wam = 0;
                                    if (summarkcredit == 0 || totcredit == 0)
                                    {
                                        wam = 0;
                                    }
                                    else
                                    {
                                        wam = Math.Round((summarkcredit / totcredit), 0, MidpointRounding.AwayFromZero);
                                    }
                                    newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 35, 560, 550, 35));
                                    mypdfpage.Add(newpdftabpage2);
                                    PdfTextArea pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 60, 617, 160, 50), ContentAlignment.TopLeft, "Weighted Average of Marks  = ");
                                    mypdfpage.Add(pdftxt);
                                    if (wpm == true && ab == false)
                                    {
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 402, 607, 50, 50), ContentAlignment.TopCenter, Convert.ToString(summarkcredit));
                                        mypdfpage.Add(pdftxt);
                                        //Horizandal Line 11 for Tot(M X C) / totcredit
                                        PdfLine ple1 = new PdfLine(mydoc, new Point(402, 621), new Point(450, 621), Color.Black, 1);
                                        mypdfpage.Add(ple1);
                                    }
                                    else
                                    {
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 390, 607, 100, 50), ContentAlignment.TopCenter, Convert.ToString("NOT COMPLETED"));
                                        mypdfpage.Add(pdftxt);
                                        //Horizandal Line 11 for Tot(M X C) / totcredit
                                        PdfLine ple = new PdfLine(mydoc, new Point(390, 621), new Point(490, 621), Color.Black, 1);
                                        mypdfpage.Add(ple);
                                    }
                                    pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 220, 607, 150, 50), ContentAlignment.TopCenter, Convert.ToString("Total of (Marks X Credits)"));
                                    mypdfpage.Add(pdftxt);
                                    pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 222, 627, 150, 50), ContentAlignment.TopCenter, Convert.ToString("Total Credits"));
                                    mypdfpage.Add(pdftxt);
                                    if (wpm == true && ab == false)
                                    {
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 402, 627, 50, 50), ContentAlignment.TopCenter, Convert.ToString(totcredit));
                                        mypdfpage.Add(pdftxt);
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 468, 617, 16, 50), ContentAlignment.TopLeft, " = ");
                                        mypdfpage.Add(pdftxt);
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 476, 617, 86, 50), ContentAlignment.TopLeft, Convert.ToString("  " + wam));
                                        mypdfpage.Add(pdftxt);
                                    }
                                    else
                                    {
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 402, 627, 50, 50), ContentAlignment.TopCenter, Convert.ToString(""));
                                        mypdfpage.Add(pdftxt);
                                    }
                                    //if (ab == true)
                                    //{
                                    //    pdftxt = new PdfTextArea(Font10bold, Color.Black, new PdfArea(mydoc, 402, 607, 50, 50), ContentAlignment.TopCenter, Convert.ToString("0"));
                                    //    mypdfpage.Add(pdftxt);
                                    //    pdftxt = new PdfTextArea(Font10bold, Color.Black, new PdfArea(mydoc, 402, 627, 50, 50), ContentAlignment.TopCenter, Convert.ToString(totcredit));
                                    //    mypdfpage.Add(pdftxt);
                                    //    pdftxt = new PdfTextArea(Font10bold, Color.Black, new PdfArea(mydoc, 468, 617, 16, 50), ContentAlignment.TopLeft, " = ");
                                    //    mypdfpage.Add(pdftxt);
                                    //    //pdftxt = new PdfTextArea(Font10bold, Color.Black, new PdfArea(mydoc, 476, 617, 86, 50), ContentAlignment.TopLeft, Convert.ToString("0"));
                                    //    //mypdfpage.Add(pdftxt);
                                    //}
                                    pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 369, 617, 16, 50), ContentAlignment.TopLeft, "  =  ");
                                    mypdfpage.Add(pdftxt);
                                    //pdftxt = new PdfTextArea(Fontwma, Color.Black, new PdfArea(mydoc, 40, 674, 145, 50), ContentAlignment.TopLeft, Convert.ToString("SHOT TERM COURSES"));
                                    //mypdfpage.Add(pdftxt);
                                    //pdftxt = new PdfTextArea(Fontwma, Color.Black, new PdfArea(mydoc, 190, 674, 400, 50), ContentAlignment.TopLeft, Convert.ToString("1." + Convert.ToString(ddlSubject.SelectedItem)));
                                    //mypdfpage.Add(pdftxt);
                                    ////pdftxt = new PdfTextArea(Fontarial7, Color.Black, new PdfArea(mydoc, 190, 620, 180, 50), ContentAlignment.TopLeft, Convert.ToString("2.EFFECTIVE COMMUNICATION SKILLS"));
                                    ////mypdfpage.Add(pdftxt);
                                    //string credit = d2.GetFunctionv("select credit_points from subject where subject_no='" + Convert.ToString(ddlSubject.SelectedItem.Value) + "'");
                                    //if (credit != "" && credit != "0")
                                    //{
                                    //    pdftxt = new PdfTextArea(Fontwma, Color.Black, new PdfArea(mydoc, 480, 674, 180, 50), ContentAlignment.TopLeft, Convert.ToString(credit + " CREDITS"));
                                    //    mypdfpage.Add(pdftxt);
                                    //}
                                    if (edu_level.Trim().ToLower() == "ug" || edu_level.Trim('.').ToLower() == "u.g")
                                    {
                                        if (specialcourse == true)
                                        {
                                            PdfTable tblspecial = mydoc.NewTable(Fontarial10b, 2, 3, 3);
                                            tblspecial.VisibleHeaders = false;
                                            tblspecial.SetBorders(Color.Black, 1, BorderType.None);
                                            //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                                            tblspecial.SetColumnsWidth(new int[] { 100, 350, 100 });
                                            tblspecial.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tblspecial.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                            tblspecial.Cell(0, 0).SetContent(Convert.ToString("CERTIFICATE COURSE") + "    -    " + Convert.ToString(ddlSubject.SelectedItem));
                                            foreach (PdfCell pc in tblspecial.CellRange(0, 0, 0, 0).Cells)
                                            {
                                                pc.ColSpan = 2;
                                            }
                                            //tblspecial.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //tblspecial.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                            //tblspecial.Cell(0, 1).SetContent(Convert.ToString();
                                            string credit = d2.GetFunctionv("select credit_points from subject where subject_no='" + Convert.ToString(ddlSubject.SelectedItem.Value) + "'");
                                            tblspecial.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblspecial.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                                            tblspecial.Cell(0, 2).SetContent(Convert.ToString(credit + " CREDIT"));
                                            newpdftabpage2 = tblspecial.CreateTablePage(new PdfArea(mydoc, 80, 674, 500, 100));
                                            mypdfpage.Add(newpdftabpage2);
                                        }
                                        else
                                        {
                                            PdfTable tblspecial = mydoc.NewTable(Fontarial10b, 2, 3, 3);
                                            tblspecial.VisibleHeaders = false;
                                            tblspecial.SetBorders(Color.Black, 1, BorderType.None);
                                            //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                                            tblspecial.SetColumnsWidth(new int[] { 100, 80, 150 });
                                            tblspecial.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tblspecial.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                            tblspecial.Cell(0, 0).SetContent(Convert.ToString("CERTIFICATE COURSE"));
                                            //foreach (PdfCell pc in tblspecial.CellRange(0, 0, 0, 0).Cells)
                                            //{
                                            //    pc.ColSpan = 2;
                                            //}
                                            tblspecial.Cell(0, 1).SetContentAlignment(ContentAlignment.TopLeft);
                                            tblspecial.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                            tblspecial.Cell(0, 1).SetContent(Convert.ToString(" --------- "));
                                            tblspecial.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleRight);
                                            tblspecial.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                                            tblspecial.Cell(0, 2).SetContent(Convert.ToString("1 CREDIT"));
                                            newpdftabpage2 = tblspecial.CreateTablePage(new PdfArea(mydoc, 80, 674, 500, 100));
                                            mypdfpage.Add(newpdftabpage2);
                                        }
                                    }
                                    pdftxt = new PdfTextArea(Font10bold, Color.DarkBlue, new PdfArea(mydoc, 37, 786, 275, 50), ContentAlignment.TopCenter, "CONTROLLER OF EXAMINATIONS");
                                    mypdfpage.Add(pdftxt);
                                    pdftxt = new PdfTextArea(Font10bold, Color.DarkBlue, new PdfArea(mydoc, 300, 786, 340, 50), ContentAlignment.TopCenter, "PRINCIPAL");
                                    mypdfpage.Add(pdftxt);
                                    pdftxt = new PdfTextArea(Fontwma, Color.DarkBlue, new PdfArea(mydoc, 37, 805, 540, 30), ContentAlignment.TopCenter, "Passing Minimum : Internal Assessment - 20 Marks, External Assessment - 30 Marks, Aggregate - 50 Marks");
                                    mypdfpage.Add(pdftxt);
                                    //Top Horizantal Line 1
                                    PdfLine pl = new PdfLine(mydoc, new Point(30, 155), new Point(585, 155), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 2
                                    pl = new PdfLine(mydoc, new Point(30, 250), new Point(585, 250), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 3
                                    pl = new PdfLine(mydoc, new Point(298, 270), new Point(447, 270), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 4
                                    pl = new PdfLine(mydoc, new Point(30, 296), new Point(585, 296), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 5
                                    pl = new PdfLine(mydoc, new Point(30, 567), new Point(585, 567), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 6
                                    pl = new PdfLine(mydoc, new Point(30, 582), new Point(585, 582), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 7
                                    pl = new PdfLine(mydoc, new Point(30, 669), new Point(585, 669), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    if (edu_level.Trim().ToLower() == "ug" || edu_level.Trim('.').ToLower() == "u.g")
                                    {
                                        //Horizandal Line 8
                                        pl = new PdfLine(mydoc, new Point(30, 740), new Point(585, 740), Color.DarkBlue, 1);
                                        mypdfpage.Add(pl);
                                    }
                                    //Horizandal Line 9
                                    pl = new PdfLine(mydoc, new Point(30, 800), new Point(585, 800), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 10 for Tot(M X C) / totcredit
                                    pl = new PdfLine(mydoc, new Point(226, 621), new Point(365, 621), Color.Black, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 1 
                                    pl = new PdfLine(mydoc, new Point(71, 250), new Point(71, 582), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 2
                                    pl = new PdfLine(mydoc, new Point(298, 250), new Point(298, 567), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 3
                                    pl = new PdfLine(mydoc, new Point(350, 270), new Point(350, 567), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 4
                                    pl = new PdfLine(mydoc, new Point(404, 270), new Point(404, 567), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 5
                                    pl = new PdfLine(mydoc, new Point(447, 250), new Point(447, 567), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 6
                                    pl = new PdfLine(mydoc, new Point(499, 250), new Point(499, 582), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 7
                                    pl = new PdfLine(mydoc, new Point(538, 250), new Point(538, 582), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //mypdfpage.SaveToDocument();
                                    //PdfTable tblftdate = mydoc.NewTable(Fontarial7, 1, 2, 3);
                                    //tblftdate.VisibleHeaders = false;
                                    //tblftdate.SetBorders(Color.Black, 1, BorderType.None);
                                    //tblftdate.SetColumnsWidth(new int[] { 50, 420, });
                                    //tblftdate.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    ////tblftdate.Cell(0, 1).SetContent(DateTime.Now.Date.ToString("dd-MM-yyyy"));
                                    //newpdftabpage2 = tblftdate.CreateTablePage(new PdfArea(mydoc, 35, 935, 142, 17));
                                    //mypdfpage.Add(newpdftabpage2);
                                }
                            }
                            mypdfpage.SaveToDocument();
                        }
                    }
                }
            }
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
            }
        }
        catch (Exception ex)
        {
        }
    }

    //FOR CHRISTOPHER UG CONSOLIDATE MARKSHEET
    public void ugconsolidatemarksheet()
    {
        try
        {
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            //DataSet semwisegpa = new DataSet();
            string degree = string.Empty;
            string degname = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string max_sem = string.Empty;
            int maxSem = 0;
            string issuedate = string.Empty;
            string semroman = string.Empty;
            string edu_level = string.Empty;
            string coe = string.Empty;
            DataSet gradeds = new DataSet();
            lblerror.Visible = false;
            lblerror.Text = string.Empty;
            Font fondColName = new Font("Comic Sans MS", 18, FontStyle.Bold);
            Font fontdegexam = new Font("Arial", 12, FontStyle.Bold);
            Font fondconsol = new Font("Comic Sans MS", 15, FontStyle.Bold);
            Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco11 = new Font("Comic Sans MS", 11, FontStyle.Bold);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
            Font Fontwma = new Font("Arial", 8, FontStyle.Bold);
            Font Font8bold = new Font("Arial", 8, FontStyle.Bold);
            Font Font10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            DataTable dtPart1 = new DataTable();
            DataTable dtPart2 = new DataTable();
            DataTable dtPart3 = new DataTable();
            DataTable dtPart4 = new DataTable();
            Font Fontarial9 = new Font("Arial", 9, FontStyle.Bold);
            Font Fontarial10b = new Font("Arial", 11, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.3, 30.3));
            PdfPage mypdfpage;
            //if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
            //{
            string strquery = "select *,district+' - '+pincode  as districtpin from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
            ds.Dispose();
            ds.Reset();
            ds = d2.select_method_wo_parameter(strquery, "Text");
            string Collegename = string.Empty;
            string aff = string.Empty;
            string collacr = string.Empty;
            string dispin = string.Empty;
            string clgaddress = string.Empty;
            string univ = string.Empty;
            string pincode = string.Empty;
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                Collegename = ds.Tables[0].Rows[0]["Collname"].ToString();
                aff = ds.Tables[0].Rows[0]["affliatedby"].ToString();
                univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                string[] strpa = aff.Split(',');
                aff = "( " + univ + " " + strpa[0] + " )";
                //coename = ds.Tables[0].Rows[0]["coe"].ToString();
                collacr = ds.Tables[0].Rows[0]["acr"].ToString();
                pincode = Convert.ToString(ds.Tables[0].Rows[0]["pincode"]).Trim();
                pincode = pincode.Substring(pincode.Length - 3);
                int pin = 0;
                int.TryParse(pincode, out pin);
                //((pincode.Length > 0) ? pincode.Substring(pincode.Length - 1) : ""
                //char[] pin = pincode.Substring(pincode.Length - 1);
                clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]) + " , " + Convert.ToString(ds.Tables[0].Rows[0]["district"]) + ((pin != 0) ? (" - " + pin.ToString()) : " - " + pincode);
                clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);
                dispin = ds.Tables[0].Rows[0]["districtpin"].ToString();
            }
            FpSpread2.SaveChanges();
            for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                if (isval == 1)
                {
                    printds.Clear();
                    printds.Dispose();
                    printds_new.Clear();
                    printds_new.Dispose();
                    rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                    regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                    string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 110) as dob,c.edu_level,CONVERT(VARCHAR(11),R.Adm_Date,106) as ADM_DATE FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
                    sql = sql + "  select count(distinct s.subject_no) as total from subjectchooser sc,syllabus_master sm,subject s,registration r where sm.syll_code=s.syll_code and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
                    sql = sql + " Select count(distinct s.subject_no) as total from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectchooser sc where sm.syll_code=s.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and ss.syll_code=s.syll_code and ss.syll_code=sm.syll_code and s.subject_no=sc.subject_no and sc.subject_no=m.subject_no and sc.roll_no=m.roll_no and  m.result='pass' and m.roll_no='" + rollnosub + "'; ";
                    sql = sql + "Select count(distinct s.subject_no) as total from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectchooser sc where sm.syll_code=s.syll_code and sm.syll_code=ss.syll_code and s.syll_code=ss.syll_code and sc.roll_no=m.roll_no and sc.subject_no=s.subject_no and sc.subject_no=m.subject_no and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='fail' and m.roll_no='" + rollnosub + "'; select distinct m.subject_no from mark_entry m,subjectChooser sc,subject s,syllabus_master sm where m.roll_no=sc.roll_no and s.syll_code=sm.syll_code and s.subject_no=sc.subject_no and s.subject_no=m.subject_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc,syllabus_master sm,subject s where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and sm.syll_code=s.syll_code and s.subject_no=m.subject_no and s.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass')";
                    printds = da.select_method_wo_parameter(sql, "Text");
                    int noofsubapplied = Convert.ToInt32(printds.Tables[3].Rows[0][0].ToString());
                    int noofsubpassed = Convert.ToInt32(printds.Tables[4].Rows[0][0].ToString());
                    int noofsubfailed = Convert.ToInt32(printds.Tables[5].Rows[0][0].ToString());
                    int Totalfailcount = printds.Tables[6].Rows.Count;
                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0 && Totalfailcount == 0)
                    {
                        mypdfpage = mydoc.NewPage();
                        string app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]);
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        //month = ddlMonth.SelectedIndex;
                        //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                        //string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                        //monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        //monthandyear = monthandyear.ToUpper();
                        studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        issuedate = Convert.ToString(txtdoi.Text);
                        branch = printds.Tables[0].Rows[0]["Dept_name"].ToString();
                        dob = printds.Tables[0].Rows[0]["dob"].ToString();
                        edu_level = Convert.ToString(printds.Tables[0].Rows[0]["Edu_Level"]).Trim();
                        string stdappno = printds.Tables[0].Rows[0]["App_No"].ToString();
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = printds.Tables[0].Rows[0]["degree_code"].ToString();
                        max_sem = d2.GetFunctionv("select NDurations from ndegree where batch_year='" + batch_year + "'  and Degree_code='" + degree_code + "' and college_code='" + Convert.ToString(ddlCollege.SelectedValue) + "'");
                        if (max_sem == "" || max_sem == null)
                        {
                            max_sem = d2.GetFunctionv("SELECT Duration FROM Degree where  Degree_Code='" + degree_code + "' and college_code='" + Convert.ToString(ddlCollege.SelectedValue) + "'");
                        }
                        int.TryParse(max_sem, out maxSem);
                        int newbatch = 0;
                        int.TryParse(batch_year, out newbatch);
                        DateTime dt = new DateTime();
                        int cur_year = DateTime.Now.Year;
                        int diff = newbatch + (maxSem / 2);
                        //if (cur_year > diff)
                        //{
                        //}
                        //else
                        //{
                        //    lbl_popuperr.Text = "The Consolidated is Generated Only For Passed Out Students.";
                        //    errdiv.Visible = true;
                        //    return;
                        //}
                        string medium = d2.GetFunctionv("select TextVal from TextValTable where TextCriteria='medi' and college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and TextCode in(select isnull(medium_ins,0) from applyn  where app_no='" + app_no + "')");
                        //sql2 = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                        //printds_new = da.select_method_wo_parameter(sql2, "Text");
                        // if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                        //{
                        //    sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]);
                        //    if (sem == "1")
                        //    {
                        //        semroman = "I";
                        //    }
                        //    else if (sem == "2")
                        //    {
                        //        semroman = "II";
                        //    }
                        //    else if (sem == "3")
                        //    {
                        //        semroman = "III";
                        //    }
                        //    else if (sem == "4")
                        //    {
                        //        semroman = "IV";
                        //    }
                        //    else if (sem == "5")
                        //    {
                        //        semroman = "V";
                        //    }
                        //    else if (sem == "6")
                        //    {
                        //        semroman = "VI";
                        //    }
                        //    else if (sem == "7")
                        //    {
                        //        semroman = "VII";
                        //    }
                        //    else if (sem == "8")
                        //    {
                        //        semroman = "VIII";
                        //    }
                        //PdfTextArea pdfdoi = new PdfTextArea(Fontco10, System.Drawing.Color.Black, new PdfArea(mydoc, 113, 803, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                        //mypdfpage.Add(pdfdoi);
                        PdfRectangle pr1 = new PdfRectangle(mydoc, new PdfArea(mydoc, 30, 44, 555, 771), Color.DarkBlue);
                        mypdfpage.Add(pr1);
                        PdfTextArea pdfHeader = new PdfTextArea(fondColName, Color.DarkBlue, new PdfArea(mydoc, 30, 40, 550, 50), ContentAlignment.MiddleCenter, Collegename + ", " + clgaddress);
                        mypdfpage.Add(pdfHeader);
                        pdfHeader = new PdfTextArea(Fontarial7, Color.DarkBlue, new PdfArea(mydoc, 30, 55, 550, 50), ContentAlignment.MiddleCenter, aff);
                        mypdfpage.Add(pdfHeader);
                        pdfHeader = new PdfTextArea(fontdegexam, Color.DarkBlue, new PdfArea(mydoc, 30, 78, 550, 50), ContentAlignment.MiddleCenter, degree + " DEGREE EXAMINATION");
                        mypdfpage.Add(pdfHeader);
                        pdfHeader = new PdfTextArea(fondconsol, Color.DarkBlue, new PdfArea(mydoc, 30, 108, 550, 50), ContentAlignment.MiddleCenter, "CONSOLIDATED MARK SHEET & PASS CERTIFICATE");
                        mypdfpage.Add(pdfHeader);
                        //pl = new PdfLine(mydoc, new Point(30, 778), new Point(585, 778), Color.DarkBlue, 1);
                        //mypdfpage.Add(pl);
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))
                        {
                            PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
                            mypdfpage.Add(LogoImage, 40, 83, 415);
                        }
                        sql3 = "Select syllabus_master.semester,Subject_Type,subject_name,subject_code,subject.subject_no,result,min_int_marks,max_int_marks,min_ext_marks,max_ext_marks,internal_mark,external_mark,total,mintotal,maxtotal,grade,cp,credit_points,mark_entry.subject_no,semester,exam_code,subject.Part_Type,sub_sem.lab,subject.subjectpriority from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'order by syllabus_master.semester,subject.subjectpriority,sub_sem.Lab,sub_sem.ElectivePap;";
                        printds_rows.Clear();
                        printds_rows.Dispose();
                        printds_rows = da.select_method_wo_parameter(sql3, "Text");
                        string stdphtsql = "select * from StdPhoto where app_no='" + stdappno + "'";
                        MemoryStream memoryStream = new MemoryStream();
                        DataSet dsstdpho = new DataSet();
                        dsstdpho.Clear();
                        dsstdpho.Dispose();
                        dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                        if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                        {
                            byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                            memoryStream.Write(file, 0, file.Length);
                            if (file.Length > 0)
                            {
                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                {
                                    //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                }
                                else
                                {
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                    //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                }
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                        {
                            PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                            mypdfpage.Add(LogoImage2, 510, 85, 420);
                        }
                        else
                        {
                            PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                            mypdfpage.Add(LogoImage2, 510, 85, 420);
                        }
                        PdfTable tblstudnameyear = mydoc.NewTable(Fontco12, 2, 5, 2);
                        tblstudnameyear.VisibleHeaders = false;
                        tblstudnameyear.SetBorders(Color.Black, 1, BorderType.None);
                        tblstudnameyear.SetColumnsWidth(new int[] { 50, 106, 256, 100, 79 });
                        tblstudnameyear.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudnameyear.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                        tblstudnameyear.Cell(0, 0).SetContent("Name : ");
                        tblstudnameyear.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudnameyear.Cell(0, 1).SetContent(studname.Trim());
                        foreach (PdfCell pc in tblstudnameyear.CellRange(0, 1, 0, 1).Cells)
                        {
                            pc.ColSpan = 2;
                        }
                        tblstudnameyear.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleRight);
                        tblstudnameyear.Cell(0, 3).SetColors(Color.DarkBlue, Color.White);
                        tblstudnameyear.Cell(0, 3).SetContent("Register No. :");
                        tblstudnameyear.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudnameyear.Cell(0, 4).SetContent(regnumber.Trim());
                        tblstudnameyear.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudnameyear.Cell(1, 0).SetColors(Color.DarkBlue, Color.White);
                        tblstudnameyear.Cell(1, 0).SetContent("Medium of Instruction :");
                        foreach (PdfCell pc in tblstudnameyear.CellRange(1, 0, 1, 0).Cells)
                        {
                            pc.ColSpan = 2;
                        }
                        tblstudnameyear.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudnameyear.Cell(1, 2).SetContent(medium);
                        //foreach (PdfCell pc in tblstudnameyear.CellRange(1, 1, 1, 1).Cells)
                        //{
                        //    pc.ColSpan = 3;
                        //}
                        tblstudnameyear.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleRight);
                        tblstudnameyear.Cell(1, 3).SetColors(Color.DarkBlue, Color.White);
                        tblstudnameyear.Cell(1, 3).SetContent("Date :");
                        tblstudnameyear.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudnameyear.Cell(1, 4).SetContent(issuedate);
                        PdfTablePage newpdftabpage2 = tblstudnameyear.CreateTablePage(new PdfArea(mydoc, 35, 165, 549, 65));
                        mypdfpage.Add(newpdftabpage2);
                        bool status = false;
                        bool wpm = true;
                        bool ab = false;
                        int mr = 0;
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            status = true;
                            PdfTable tblMarkStmt = mydoc.NewTable(Fontarial10b, printds_rows.Tables[0].Rows.Count + maxSem + 2, 8, 2);
                            tblMarkStmt.VisibleHeaders = false;
                            tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                            //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                            tblMarkStmt.SetColumnsWidth(new int[] { 35, 228, 50, 50, 48, 38, 35, 60 });
                            double totcredit = 0;
                            double summarkcredit = 0;
                            tblMarkStmt.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(0, 0).SetContent("CODE");
                            tblMarkStmt.Cell(0, 0).SetFont(Fontarial9);
                            tblMarkStmt.Cell(0, 0).SetCellPadding(0);
                            foreach (PdfCell pc in tblMarkStmt.CellRange(0, 0, 0, 0).Cells)
                            {
                                pc.RowSpan = 2;
                            }
                            tblMarkStmt.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(0, 1).SetContent("COURSE");
                            tblMarkStmt.Cell(0, 1).SetFont(Fontarial9);
                            tblMarkStmt.Cell(0, 1).SetCellPadding(0);
                            foreach (PdfCell pc in tblMarkStmt.CellRange(0, 1, 0, 1).Cells)
                            {
                                pc.RowSpan = 2;
                            }
                            tblMarkStmt.Cell(0, 2).SetContentAlignment(ContentAlignment.TopCenter);
                            tblMarkStmt.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(0, 2).SetCellPadding(0);
                            tblMarkStmt.Cell(0, 2).SetFont(Fontarial9);
                            tblMarkStmt.Cell(0, 2).SetContent("MARKS AWARDED");
                            foreach (PdfCell pc in tblMarkStmt.CellRange(0, 2, 0, 2).Cells)
                            {
                                pc.ColSpan = 3;
                            }
                            tblMarkStmt.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(1, 2).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(1, 2).SetCellPadding(2);
                            tblMarkStmt.Cell(1, 2).SetFont(Fontarial9);
                            tblMarkStmt.Cell(1, 2).SetContent("INTERNAL\n(40)");
                            tblMarkStmt.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(1, 3).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(1, 3).SetCellPadding(2);
                            tblMarkStmt.Cell(1, 3).SetFont(Fontarial9);
                            tblMarkStmt.Cell(1, 3).SetContent("EXTERNAL\n(60)");
                            tblMarkStmt.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(1, 4).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(1, 4).SetCellPadding(2);
                            tblMarkStmt.Cell(1, 4).SetFont(Fontarial9);
                            tblMarkStmt.Cell(1, 4).SetContent("TOTAL\n(100)");
                            tblMarkStmt.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(0, 5).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(0, 5).SetCellPadding(0);
                            tblMarkStmt.Cell(0, 5).SetFont(Fontarial9);
                            tblMarkStmt.Cell(0, 5).SetContent("RESULT");
                            foreach (PdfCell pc in tblMarkStmt.CellRange(0, 5, 0, 5).Cells)
                            {
                                pc.RowSpan = 2;
                            }
                            tblMarkStmt.Cell(0, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(0, 6).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(0, 6).SetCellPadding(0);
                            tblMarkStmt.Cell(0, 6).SetFont(Fontarial9);
                            tblMarkStmt.Cell(0, 6).SetContent("CREDIT");
                            foreach (PdfCell pc in tblMarkStmt.CellRange(0, 6, 0, 6).Cells)
                            {
                                pc.RowSpan = 2;
                            }
                            tblMarkStmt.Cell(0, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(0, 7).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(0, 7).SetCellPadding(0);
                            tblMarkStmt.Cell(0, 7).SetFont(Fontarial9);
                            tblMarkStmt.Cell(0, 7).SetContent("PASSED IN");
                            foreach (PdfCell pc in tblMarkStmt.CellRange(0, 7, 0, 7).Cells)
                            {
                                pc.RowSpan = 2;
                            }
                            ArrayList semarr = new ArrayList();
                            Dictionary<string, double> dicSemWAM = new Dictionary<string, double>();
                            double[] semwisewam = new double[0];
                            double wamprac = 0;
                            double prac_credit = 0;
                            for (int s = 0; s < maxSem; s++)
                            {
                                DataView dvSem = new DataView();
                                printds_rows.Tables[0].DefaultView.RowFilter = "semester='" + Convert.ToString(s + 1) + "' and lab=0";
                                dvSem = printds_rows.Tables[0].DefaultView;
                                double semwa = 0;
                                double semcredit = 0;
                                if (dvSem.Count > 0)
                                {
                                    if (!semarr.Contains(Convert.ToString(dvSem[0]["semester"]).Trim()))
                                    {
                                        semarr.Add(Convert.ToString(dvSem[0]["semester"]).Trim());
                                        //semwisewam = new double[semarr.Count];
                                        Array.Resize(ref semwisewam, semarr.Count);
                                    }
                                    tblMarkStmt.Cell(mr + 2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    tblMarkStmt.Cell(mr + 2, 1).SetContent(Convert.ToString("SEMESTER - " + ToRoman(Convert.ToString(dvSem[0]["semester"]).Trim())));
                                    tblMarkStmt.Cell(mr + 2, 1).SetForegroundColor(Color.DarkBlue);
                                    tblMarkStmt.Cell(mr + 2, 1).SetCellPadding(3);
                                    //semarr.Add(Convert.ToString(dvSem[0]["semester"]).Trim());
                                    mr++;
                                    for (int i = 0; i < dvSem.Count; i++)
                                    {
                                        tblMarkStmt.Cell(mr + 2, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(mr + 2, 0).SetContent(Convert.ToString(dvSem[i]["subject_code"]).Trim());
                                        bool rab = false;
                                        tblMarkStmt.Cell(mr + 2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMarkStmt.Cell(mr + 2, 1).SetContent(Convert.ToString(dvSem[i]["subject_name"]));
                                        double internalmmark = 0;
                                        double externalmark1 = 0;
                                        double totalintext = 0;
                                        double.TryParse(Convert.ToString(dvSem[i]["internal_mark"]), out internalmmark);
                                        double extfinal = 0;
                                        double.TryParse(Convert.ToString(dvSem[i]["external_mark"]), out extfinal);
                                        extfinal = Math.Round(extfinal, 0);
                                        externalmark1 = extfinal;
                                        string checkedmark = string.Empty;
                                        if (extfinal < 0)
                                        {
                                            checkedmark = loadmarkat(Convert.ToString(extfinal));
                                        }
                                        else
                                        {
                                            checkedmark = Convert.ToString(extfinal);
                                        }
                                        if (internalmmark >= 0)
                                        {
                                            if (extfinal > 0)
                                            {
                                                totalintext = internalmmark + externalmark1;
                                            }
                                            else
                                            {
                                                totalintext = internalmmark;
                                            }
                                        }
                                        else
                                        {
                                            if (extfinal > 0)
                                            {
                                                totalintext = externalmark1;
                                            }
                                            else
                                            {
                                                totalintext = 0;
                                            }
                                        }
                                        tblMarkStmt.Cell(mr + 2, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(mr + 2, 2).SetContent(internalmmark);
                                        tblMarkStmt.Cell(mr + 2, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(mr + 2, 3).SetContent(checkedmark);
                                        double totfinal = 0;
                                        totfinal = Math.Round(totalintext, 0);
                                        tblMarkStmt.Cell(mr + 2, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(mr + 2, 4).SetContent(Convert.ToString(totfinal));
                                        double creditpoint = 0;
                                        double.TryParse(Convert.ToString(dvSem[i]["credit_points"]), out creditpoint);
                                        double mrkcredit = 0;
                                        string result = dvSem[i]["result"].ToString();
                                        string r = string.Empty;
                                        //tblMarkStmt.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        if (result.ToUpper() == "PASS")
                                        {
                                            if (Convert.ToString(dvSem[i]["lab"]).Trim() == "True")
                                            {
                                                prac_credit += creditpoint;
                                                wamprac += totfinal * creditpoint;
                                            }
                                            r = "PASS";
                                            totcredit += creditpoint;
                                            mrkcredit = totfinal * creditpoint;
                                            semwa += mrkcredit;
                                            semcredit += creditpoint;
                                            summarkcredit += mrkcredit;
                                        }
                                        else if (result.ToUpper() == "FAIL")
                                        {
                                            r = "Reappear";
                                            //tblMarkStmt.Cell(i + 2, 5).SetFont(Fontarial9);    
                                        }
                                        else if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                        {
                                            ab = true;
                                            tblMarkStmt.Cell(mr + 2, 3).SetContent("AB");
                                            tblMarkStmt.Cell(mr + 2, 2).SetContent("0");
                                            tblMarkStmt.Cell(mr + 2, 4).SetContent("0");
                                            tblMarkStmt.Cell(mr + 2, 5).SetContent("AAA");
                                            tblMarkStmt.Cell(mr + 2, 6).SetContent("");
                                            tblMarkStmt.Cell(mr + 2, 7).SetContent("");
                                            if (extfinal == 0 || internalmmark == 0)
                                            {
                                                rab = true;
                                                //totcredit += creditpoint;
                                                //mrkcredit = totfinal * creditpoint;
                                                //summarkcredit += mrkcredit;
                                            }
                                            r = "AAA";
                                        }
                                        else if (result.ToUpper() == "RE-APPEAR" || result.ToUpper() == "REAPPEAR")
                                        {
                                            r = "RA";
                                        }
                                        else
                                        {
                                            r = result;
                                        }
                                        tblMarkStmt.Cell(mr + 2, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(mr + 2, 5).SetContent(r);
                                        tblMarkStmt.Cell(mr + 2, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(mr + 2, 6).SetContent(Convert.ToString(dvSem[i]["credit_points"]));
                                        tblMarkStmt.Cell(mr + 2, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        if (result.Trim().ToUpper() == "FAIL")
                                        {
                                            wpm = false;
                                            tblMarkStmt.Cell(mr + 2, 7).SetContent("");
                                            tblMarkStmt.Cell(mr + 2, 6).SetContent("");
                                            tblMarkStmt.Cell(mr + 2, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        }
                                        if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                        {
                                            ab = true;
                                            tblMarkStmt.Cell(mr + 2, 6).SetContent("");
                                            tblMarkStmt.Cell(mr + 2, 7).SetContent("");
                                        }
                                        if (extfinal < 0)
                                        {
                                            ab = true;
                                            tblMarkStmt.Cell(mr + 2, 3).SetContent("AB");
                                            tblMarkStmt.Cell(mr + 2, 2).SetContent("0");
                                            tblMarkStmt.Cell(mr + 2, 4).SetContent("0");
                                            tblMarkStmt.Cell(mr + 2, 5).SetContent("AAA");
                                            tblMarkStmt.Cell(mr + 2, 6).SetContent("");
                                            tblMarkStmt.Cell(mr + 2, 7).SetContent("");
                                        }
                                        if (internalmmark < 0)
                                        {
                                            ab = true;
                                            tblMarkStmt.Cell(mr + 2, 3).SetContent("0");
                                            tblMarkStmt.Cell(mr + 2, 2).SetContent("AB");
                                            tblMarkStmt.Cell(mr + 2, 4).SetContent("0");
                                            tblMarkStmt.Cell(mr + 2, 5).SetContent("AAA");
                                            tblMarkStmt.Cell(mr + 2, 6).SetContent("");
                                            tblMarkStmt.Cell(mr + 2, 7).SetContent("");
                                        }
                                        //DataView dv1 = new DataView();
                                        //printds.Tables[2].DefaultView.RowFilter = "degree_code='" + degree_code + "' and batch_year='" + batch_year + "' ";//and Exam_year='" + batch_year.Split('-')[1] + "'
                                        //dv1 = printds.Tables[2].DefaultView;
                                        //dv1.Sort = "exam_code,current_semester";
                                        //if (dv1.Count > 0)
                                        //{
                                        //    string exam_y = dv1[0]["Exam_year"].ToString();
                                        //    string exam_m = dv1[0]["Exam_Month"].ToString();
                                        //   string  strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                        //   strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                        //    strMonthName = exam_y + " - " + strMonthName.ToUpper() + " ";
                                        //    tblMarkStmt.Cell(mr + 2, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //    tblMarkStmt.Cell(mr + 2, 7).SetContent(strMonthName);
                                        //}
                                        DataView dv = new DataView();
                                        printds.Tables[2].DefaultView.RowFilter = "exam_code='" + dvSem[i]["exam_code"].ToString() + "'";
                                        dv = printds.Tables[2].DefaultView;
                                        if (dv.Count > 0)
                                        {
                                            string exam_y = Convert.ToString(dv[0]["Exam_year"]).Trim();
                                            string exam_m = Convert.ToString(dv[0]["Exam_Month"]).Trim();
                                            string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                            strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                            strMonthName = strMonthName.Trim() + "-" + exam_y.Trim();
                                            tblMarkStmt.Cell(mr + 2, 7).SetContent(strMonthName);
                                        }
                                        tblMarkStmt.Cell(mr + 2, 6).SetForegroundColor(Color.Blue);
                                        //tblMarkStmt.Cell(mr + 2, 7).SetContent(mrkcredit);
                                        mr++;
                                    }
                                    semwisewam[semarr.Count - 1] = Math.Round((semwa / semcredit), 0, MidpointRounding.AwayFromZero);
                                    if (!dicSemWAM.ContainsKey(Convert.ToString((s + 1)).Trim()))
                                    {
                                        dicSemWAM.Add(Convert.ToString((s + 1)).Trim(), semwisewam[semarr.Count - 1]);
                                    }
                                }
                            }
                            newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 35, 223, 549, 500));
                            mypdfpage.Add(newpdftabpage2);
                            PdfTextArea pdftxt = new PdfTextArea(Font10bold, Color.DarkBlue, new PdfArea(mydoc, 37, 786, 275, 50), ContentAlignment.TopCenter, "CONTROLLER OF EXAMINATIONS");
                            mypdfpage.Add(pdftxt);
                            pdftxt = new PdfTextArea(Font10bold, Color.DarkBlue, new PdfArea(mydoc, 300, 786, 340, 50), ContentAlignment.TopCenter, "PRINCIPAL");
                            mypdfpage.Add(pdftxt);
                            pdftxt = new PdfTextArea(Fontwma, Color.DarkBlue, new PdfArea(mydoc, 20, 805, 540, 30), ContentAlignment.TopCenter, "* Class is based on Wieighted Average Marks.\t\t\t\t\t\t First Class With Distinction\t-\t75% and Above,\t First Class\t-\t60\t-\t74%,\tSecond Class\t-\t50\t-\t59%");
                            mypdfpage.Add(pdftxt);

                            pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 90, 575, 275, 20), ContentAlignment.MiddleLeft, "WRITTEN EXAMINATION");
                            mypdfpage.Add(pdftxt);
                            double written = (summarkcredit != 0 && totcredit != 0) ? Math.Round((summarkcredit / totcredit), 0, MidpointRounding.AwayFromZero) : 0;
                            tblMarkStmt = mydoc.NewTable(Fontarial10b, maxSem + 1, 3, 3);
                            tblMarkStmt.VisibleHeaders = false;
                            tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                            //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                            tblMarkStmt.SetColumnsWidth(new int[] { 228, 30, 50 });
                            double sumweightage = 0;
                            //double 
                            for (int se = 0; se < semarr.Count; se++)
                            {
                                //tblMarkStmt.Cell(se, 0).SetCellPadding(0);
                                tblMarkStmt.Cell(se, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblMarkStmt.Cell(se, 0).SetContent("Semester " + ToRoman(Convert.ToString(semarr[se]).Trim()) + " Weighted Average Marks");
                                //tblMarkStmt.Cell(se, 1).SetCellPadding(0);
                                tblMarkStmt.Cell(se, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblMarkStmt.Cell(se, 1).SetContent(" : ");
                                //tblMarkStmt.Cell(se, 2).SetCellPadding(0);
                                tblMarkStmt.Cell(se, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblMarkStmt.Cell(se, 2).SetContent(Convert.ToString(semwisewam[se]));
                                sumweightage += semwisewam[se];
                            }
                            tblMarkStmt.Cell(semarr.Count, 0).SetCellPadding(1);
                            tblMarkStmt.Cell(semarr.Count, 1).SetCellPadding(1);
                            tblMarkStmt.Cell(semarr.Count, 2).SetCellPadding(1);
                            written = (sumweightage != 0 && semwisewam.Length != 0) ? Math.Round((sumweightage / semwisewam.Length), 0, MidpointRounding.AwayFromZero) : 0;
                            tblMarkStmt.Cell(maxSem, 0).SetCellPadding(3);
                            tblMarkStmt.Cell(maxSem, 1).SetCellPadding(3);
                            tblMarkStmt.Cell(maxSem, 2).SetCellPadding(3);
                            tblMarkStmt.Cell(maxSem, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblMarkStmt.Cell(maxSem, 0).SetContent("Final Weighted Average Marks");
                            tblMarkStmt.Cell(maxSem, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblMarkStmt.Cell(maxSem, 1).SetContent(" : ");
                            tblMarkStmt.Cell(maxSem, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblMarkStmt.Cell(maxSem, 2).SetContent(written);
                            newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 95, 590, 280, 120));//(mydoc, 95, 595, 280, 120));
                            mypdfpage.Add(newpdftabpage2);

                            double prac = 590 + newpdftabpage2.Area.Height;
                            //double practicalwam = (wamprac != 0 && prac_credit != 0) ? Math.Round((wamprac / prac_credit), 0, MidpointRounding.AwayFromZero) : 0;
                            double practicalwam = 0;
                            findWeightedAvgMarks(printds_rows, ref practicalwam, true);
                            printds_rows.Tables[0].DefaultView.RowFilter = "lab=1";
                            List<int> listLabSem = printds_rows.Tables[0].DefaultView.ToTable(true, "semester").AsEnumerable().Select(r => r.Field<int>("semester"))
                                                      .ToList<int>();
                            pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 90, prac, 275, 20), ContentAlignment.MiddleLeft, "PRACTICAL EXAMINATION");
                            mypdfpage.Add(pdftxt);
                            tblMarkStmt = mydoc.NewTable(Fontarial10b, 1, 3, 3);
                            tblMarkStmt.VisibleHeaders = false;
                            tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                            //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                            tblMarkStmt.SetColumnsWidth(new int[] { 228, 30, 50 });//{ 228, 30, 50 });
                            //tblMarkStmt.Cell(0, 0).SetCellPadding(0);
                            //tblMarkStmt.Cell(0, 1).SetCellPadding(0);
                            //tblMarkStmt.Cell(0, 2).SetCellPadding(0);
                            tblMarkStmt.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblMarkStmt.Cell(0, 0).SetContent(((listLabSem.Count == 1 && edu_level.Trim().ToLower() == "ug") ? "Semester " + ToRoman(Convert.ToString((listLabSem[0])).Trim()) + " " : "") + "Weighted Average Marks");
                            tblMarkStmt.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblMarkStmt.Cell(0, 1).SetContent(" : ");
                            tblMarkStmt.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblMarkStmt.Cell(0, 2).SetContent(practicalwam);
                            newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 95, prac + 15, 280, 50));
                            mypdfpage.Add(newpdftabpage2);
                            //= tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 95, 590, 280, 120));
                            //mypdfpage.Add(newpdftabpage2);

                            //pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 90, 575, 275, 30), ContentAlignment.MiddleLeft, "WRITTEN EXAMINATION");
                            //mypdfpage.Add(pdftxt);
                            //double written = (summarkcredit != 0 && totcredit != 0) ? Math.Round((summarkcredit / totcredit), 0, MidpointRounding.AwayFromZero) : 0;
                            //tblMarkStmt = mydoc.NewTable(Fontarial10b, maxSem + 1, 3, 3);
                            //tblMarkStmt.VisibleHeaders = false;
                            //tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                            ////tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                            //tblMarkStmt.SetColumnsWidth(new int[] { 228, 30, 50 });
                            //double sumweightage = 0;
                            ////double 
                            //int semVal = 0;
                            //double finalWAM = 0;
                            //Dictionary<string, double> dicLabWAM = new Dictionary<string, double>();
                            //Dictionary<string, double> dicTheoryWAM = new Dictionary<string, double>();
                            //double theoryFinalWAM = 0;
                            //double labFinalWAM = 0;
                            //findWeightedAvgMarks(printds_rows, ref finalWAM, ref dicSemWAM, maxSem.ToString(), ref dicTheoryWAM, ref dicLabWAM, out theoryFinalWAM, out labFinalWAM);
                            //for (int se = 0; se < maxSem; se++)
                            //{
                            //    double semWAM = 0;
                            //    if (dicSemWAM.ContainsKey(Convert.ToString((se + 1)).Trim()))
                            //    {
                            //        semWAM = dicSemWAM[Convert.ToString((se + 1)).Trim()];
                            //    }
                            //    //tblMarkStmt.Cell(se, 0).SetCellPadding(0);
                            //    tblMarkStmt.Cell(se, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            //    //tblMarkStmt.Cell(se, 0).SetContent("Semester " + ToRoman(Convert.ToString(semarr[se]).Trim()) + " Weighted Average Marks");
                            //    tblMarkStmt.Cell(se, 0).SetContent("Semester " + ToRoman(Convert.ToString((se + 1)).Trim()) + " Weighted Average Marks");
                            //    //tblMarkStmt.Cell(se, 1).SetCellPadding(0);
                            //    tblMarkStmt.Cell(se, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            //    tblMarkStmt.Cell(se, 1).SetContent(" : ");
                            //    //tblMarkStmt.Cell(se, 2).SetCellPadding(0);
                            //    tblMarkStmt.Cell(se, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                            //    if (semWAM > 0)
                            //    {
                            //        tblMarkStmt.Cell(se, 2).SetContent(Convert.ToString(semWAM));
                            //    }
                            //    //tblMarkStmt.Cell(se, 2).SetContent(Convert.ToString(semwisewam[se]));
                            //    //sumweightage += semwisewam[se];
                            //    sumweightage += semWAM;
                            //}
                            ////tblMarkStmt.Cell(maxSem, 0).SetCellPadding(0);
                            ////tblMarkStmt.Cell(maxSem, 1).SetCellPadding(0);
                            ////tblMarkStmt.Cell(maxSem, 2).SetCellPadding(0);
                            //tblMarkStmt.Cell(maxSem, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            //tblMarkStmt.Cell(maxSem, 0).SetContent("Final Weighted Average Marks");
                            //tblMarkStmt.Cell(maxSem, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            //tblMarkStmt.Cell(maxSem, 1).SetContent(" : ");
                            //tblMarkStmt.Cell(maxSem, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                            //tblMarkStmt.Cell(maxSem, 2).SetContent(finalWAM);
                            //newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 95, 595, 280, 120));
                            //mypdfpage.Add(newpdftabpage2);
                            ////double practicalwam = (wamprac != 0 && prac_credit != 0) ? Math.Round((wamprac / prac_credit), 0, MidpointRounding.AwayFromZero) : 0;
                            //double practicalwam = 0;

                            //printds_rows.Tables[0].DefaultView.RowFilter = "lab=1";
                            //List<int> listLabSem = printds_rows.Tables[0].DefaultView.ToTable(true, "semester").AsEnumerable().Select(r => r.Field<int>("semester"))
                            //                           .ToList<int>();
                            //findWeightedAvgMarks(printds_rows, ref practicalwam, true);
                            //pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 90, 645, 275, 30), ContentAlignment.MiddleLeft, "PRACTICAL EXAMINATION");
                            //mypdfpage.Add(pdftxt);
                            //tblMarkStmt = mydoc.NewTable(Fontarial10b, 1, 3, 1);
                            //tblMarkStmt.VisibleHeaders = false;
                            //tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                            ////tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                            //tblMarkStmt.SetColumnsWidth(new int[] { 228, 30, 50 });
                            //tblMarkStmt.Cell(0, 0).SetCellPadding(0);
                            //tblMarkStmt.Cell(0, 1).SetCellPadding(0);
                            //tblMarkStmt.Cell(0, 2).SetCellPadding(0);
                            //tblMarkStmt.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            //tblMarkStmt.Cell(0, 0).SetContent(((listLabSem.Count == 1) ? "Semester " + ToRoman(Convert.ToString((listLabSem[0])).Trim()) : "") + "Weighted Average Marks");
                            //tblMarkStmt.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            //tblMarkStmt.Cell(0, 1).SetContent(" : ");
                            //tblMarkStmt.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                            //tblMarkStmt.Cell(0, 2).SetContent(practicalwam);
                            //newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 95, 665, 280, 30));
                            //mypdfpage.Add(newpdftabpage2);
                            //pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 37, 685, 550, 20), ContentAlignment.MiddleCenter, "Passed the " + degree + " Degree Examination");
                            //mypdfpage.Add(pdftxt);
                            //pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 37, 700, 550, 20), ContentAlignment.MiddleCenter, "with");
                            //mypdfpage.Add(pdftxt);
                            string wrtclassify = string.Empty;
                            string batchsetting = "1";
                            if (noofsubfailed != 0 && written >= 60)
                            {
                                string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + written + "'>= frompoint and '" + written + "'<= topoint and  markgradeflag='" + batchsetting + "'";
                                gradeds.Clear();
                                gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                string cclass = "First Class";
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                {
                                    wrtclassify = cclass;
                                }
                                else
                                {
                                    wrtclassify = cclass;
                                }
                            }
                            else
                            {
                                string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + written + "'>= frompoint and '" + written + "'<= topoint and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014
                                gradeds.Clear();
                                gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                {
                                    wrtclassify = Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]);
                                }
                            }
                            string pracclassify = string.Empty;
                            batchsetting = "1";
                            if (noofsubfailed != 0 && practicalwam >= 60)
                            {
                                string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + practicalwam + "'>= frompoint and '" + practicalwam + "'<= topoint and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014  and (classification='First Class' or classification='First')
                                gradeds.Clear();
                                gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                string cclass = "First Class";
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                {
                                    pracclassify = cclass;
                                }
                                else
                                {
                                    pracclassify = cclass;
                                }
                            }
                            else
                            {
                                string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + practicalwam + "'>= frompoint and '" + practicalwam + "'<= topoint and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014
                                gradeds.Clear();
                                gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                {
                                    pracclassify = Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]);
                                }
                            }
                            //pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 200, 695, 550, 20), ContentAlignment.MiddleLeft, "Written Examination\t\t\t\t:\t\t\t" + wrtclassify);
                            //mypdfpage.Add(pdftxt);
                            //pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 200, 715, 550, 20), ContentAlignment.MiddleLeft, "Practical Examination\t\t:\t\t\t" + pracclassify);
                            //mypdfpage.Add(pdftxt);

                            pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 200, 708, 550, 20), ContentAlignment.MiddleLeft, "Theory\t\t\t\t:\t\t\t" + wrtclassify);
                            mypdfpage.Add(pdftxt);
                            pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 200, 725, 550, 20), ContentAlignment.MiddleLeft, "Practical\t\t:\t\t\t" + pracclassify);
                            mypdfpage.Add(pdftxt);
                            //Top Horizantal Line 1
                            PdfLine pl = new PdfLine(mydoc, new Point(30, 155), new Point(585, 155), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Horizandal Line 2
                            pl = new PdfLine(mydoc, new Point(30, 220), new Point(585, 220), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Horizandal Line 3
                            pl = new PdfLine(mydoc, new Point(298, 233), new Point(447, 233), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Horizandal Line 4
                            pl = new PdfLine(mydoc, new Point(30, 256), new Point(585, 256), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            ////Horizandal Line 5
                            //pl = new PdfLine(mydoc, new Point(30, 567), new Point(585, 567), Color.DarkBlue, 1);
                            //mypdfpage.Add(pl);
                            //Horizandal Line 6
                            pl = new PdfLine(mydoc, new Point(30, 570), new Point(585, 570), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            ////Horizandal Line 7
                            //pl = new PdfLine(mydoc, new Point(30, 669), new Point(585, 669), Color.DarkBlue, 1);
                            //mypdfpage.Add(pl);
                            //Horizandal Line 8
                            pl = new PdfLine(mydoc, new Point(30, 740), new Point(585, 740), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Horizandal Line 9
                            pl = new PdfLine(mydoc, new Point(30, 800), new Point(585, 800), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            ////Horizandal Line 10 for Tot(M X C) / totcredit
                            //pl = new PdfLine(mydoc, new Point(226, 621), new Point(365, 621), Color.Black, 1);
                            //mypdfpage.Add(pl);
                            //Vertical Line 1 
                            pl = new PdfLine(mydoc, new Point(71, 220), new Point(71, 570), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Vertical Line 2
                            pl = new PdfLine(mydoc, new Point(298, 220), new Point(298, 570), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Vertical Line 3
                            pl = new PdfLine(mydoc, new Point(350, 233), new Point(350, 570), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Vertical Line 4
                            pl = new PdfLine(mydoc, new Point(404, 233), new Point(404, 570), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Vertical Line 5
                            pl = new PdfLine(mydoc, new Point(447, 220), new Point(447, 570), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Vertical Line 6
                            pl = new PdfLine(mydoc, new Point(489, 220), new Point(489, 570), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Vertical Line 7
                            pl = new PdfLine(mydoc, new Point(525, 220), new Point(525, 570), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                        }
                        if (status == true)
                            mypdfpage.SaveToDocument();
                    }
                }
            }
            //}
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "Consolidatedmarksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
            }
        }
        catch (Exception ex)
        {
        }
    }

    // DEVELOPED BY MALANG RAJA 
    /// <summary>
    /// Author Malang Raja T For Christopher
    /// </summary>
    /// 
    /// <param name="ds"></param>
    /// <param name="wam"></param>
    /// <param name="islab"></param>
    public void findWeightedAvgMarks(DataSet ds, ref double wam, bool islab = false)
    {
        double credit = 0;
        double totCredit = 0;
        double mark = 0;
        double wam1 = 0;
        double weightmark = 0;
        string lab = string.Empty;
        DataView dvWam = new DataView();
        if (islab)
        {
            lab = "1";
        }
        else
        {
            lab = "0";
        }
        try
        {
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ds.Tables[0].DefaultView.RowFilter = "lab=" + lab + " ";
                dvWam = ds.Tables[0].DefaultView;
                if (dvWam.Count > 0)
                {
                    wam1 = 0;
                    for (int i = 0; i < dvWam.Count; i++)
                    {
                        double minINTMark = 0;
                        double maxINTMark = 0;
                        string minINT = Convert.ToString(dvWam[i]["min_int_marks"]).Trim();
                        string maxINT = Convert.ToString(dvWam[i]["max_int_marks"]).Trim();
                        double.TryParse(minINT.Trim(), out minINTMark);
                        double.TryParse(maxINT.Trim(), out maxINTMark);

                        double minEXTMark = 0;
                        double maxEXTMark = 0;
                        string minEXT = Convert.ToString(dvWam[i]["min_ext_marks"]).Trim();
                        string maxEXT = Convert.ToString(dvWam[i]["max_ext_marks"]).Trim();
                        double.TryParse(minEXT.Trim(), out minEXTMark);
                        double.TryParse(maxEXT.Trim(), out maxEXTMark);

                        double minTOTMark = 0;
                        double maxTOTMark = 0;
                        string minTOT = Convert.ToString(dvWam[i]["mintotal"]).Trim();
                        string maxTOT = Convert.ToString(dvWam[i]["maxtotal"]).Trim();
                        double.TryParse(minTOT.Trim(), out minTOTMark);
                        double.TryParse(maxTOT.Trim(), out maxTOTMark);

                        double markPercentage = 0;

                        double.TryParse(Convert.ToString(dvWam[i]["credit_points"]), out credit);
                        double.TryParse(Convert.ToString(dvWam[i]["total"]), out mark);
                        markPercentage = mark;
                        if (islab)
                        {
                            if (mark > 0 && maxTOTMark > 0)
                            {
                                markPercentage = (mark / maxTOTMark) * 100;
                                markPercentage = Math.Round(markPercentage, 0, MidpointRounding.AwayFromZero);
                            }
                        }
                        totCredit += credit;
                        weightmark = credit * markPercentage;
                        weightmark = Math.Round(weightmark, 0, MidpointRounding.AwayFromZero);
                        wam1 += weightmark;
                    }
                    //wam = Math.Round((wam1 / totCredit),0,MidpointRounding.AwayFromZero);
                    wam = (wam1 != 0 && totCredit != 0) ? Math.Round((wam1 / totCredit), 0, MidpointRounding.AwayFromZero) : 0;
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void findWeightedAvgMarks(DataSet ds, ref double wam, string sem = null)
    {
        double credit = 0;
        double totCredit = 0;
        double mark = 0;
        double wam1 = 0;
        double weightmark = 0;
        string qryFilter = string.Empty;

        DataView dvWam = new DataView();
        if (sem == null)
        {
            qryFilter = string.Empty;
        }
        else
        {
            if (!string.IsNullOrEmpty(sem))
            {
                qryFilter = " semester='" + sem + "'";
            }
        }
        try
        {
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ds.Tables[0].DefaultView.RowFilter = qryFilter;
                dvWam = ds.Tables[0].DefaultView;
                if (dvWam.Count > 0)
                {
                    wam1 = 0;
                    for (int i = 0; i < dvWam.Count; i++)
                    {

                        string lab = Convert.ToString(dvWam[i]["lab"]).Trim();
                        bool isLab = false;
                        bool.TryParse(lab.Trim(), out isLab);

                        double minINTMark = 0;
                        double maxINTMark = 0;
                        string minINT = Convert.ToString(dvWam[i]["min_int_marks"]).Trim();
                        string maxINT = Convert.ToString(dvWam[i]["max_int_marks"]).Trim();
                        double.TryParse(minINT.Trim(), out minINTMark);
                        double.TryParse(maxINT.Trim(), out maxINTMark);

                        double minEXTMark = 0;
                        double maxEXTMark = 0;
                        string minEXT = Convert.ToString(dvWam[i]["min_ext_marks"]).Trim();
                        string maxEXT = Convert.ToString(dvWam[i]["max_ext_marks"]).Trim();
                        double.TryParse(minEXT.Trim(), out minEXTMark);
                        double.TryParse(maxEXT.Trim(), out maxEXTMark);

                        double minTOTMark = 0;
                        double maxTOTMark = 0;
                        string minTOT = Convert.ToString(dvWam[i]["mintotal"]).Trim();
                        string maxTOT = Convert.ToString(dvWam[i]["maxtotal"]).Trim();
                        double.TryParse(minTOT.Trim(), out minTOTMark);
                        double.TryParse(maxTOT.Trim(), out maxTOTMark);

                        double markPercentage = 0;

                        double.TryParse(Convert.ToString(dvWam[i]["credit_points"]), out credit);
                        double.TryParse(Convert.ToString(dvWam[i]["total"]), out mark);
                        markPercentage = mark;
                        if (isLab)
                        {
                            if (mark > 0 && maxTOTMark > 0)
                            {
                                markPercentage = (mark / maxTOTMark) * 100;
                                markPercentage = Math.Round(markPercentage, 0, MidpointRounding.AwayFromZero);
                            }
                        }

                        totCredit += credit;
                        weightmark = credit * markPercentage;
                        weightmark = Math.Round(weightmark, 0, MidpointRounding.AwayFromZero);
                        wam1 += weightmark;
                    }
                    //wam = Math.Round((wam1 / totCredit),0,MidpointRounding.AwayFromZero);
                    wam = (wam1 != 0 && totCredit != 0) ? Math.Round((wam1 / totCredit), 0, MidpointRounding.AwayFromZero) : 0;
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void findWeightedAvgMarks(DataSet ds, ref double wam, ref Dictionary<string, double> dicSemWAM, string maxSem, ref Dictionary<string, double> dicSemTheoryWAM, ref Dictionary<string, double> dicSemLabWAM, out double theoryFinalWAM, out double labFinalWAM)
    {
        dicSemWAM = new Dictionary<string, double>();
        dicSemLabWAM = new Dictionary<string, double>();
        dicSemTheoryWAM = new Dictionary<string, double>();
        double credit = 0;
        double totCredit = 0;
        double mark = 0;
        double wam1 = 0;
        double weightmark = 0;
        double semWAM = 0;

        double labSemWAM = 0;
        double theorySemWAM = 0;
        double overAllWAM = 0;
        double overAllEarnedCredit = 0;

        double labOverAllWAM = 0;
        double labOverAllEarnedCredit = 0;
        double theoryOverAllWAM = 0;
        double theoryOverAllEarnedCredit = 0;

        string qryFilter = string.Empty;

        double maxSemester = 0;
        double.TryParse(maxSem, out maxSemester);

        theoryFinalWAM = 0;
        labFinalWAM = 0;
        DataView dvWam = new DataView();
        try
        {
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                for (int sem = 0; sem < maxSemester; sem++)
                {
                    totCredit = 0;
                    semWAM = 0;
                    wam1 = 0;
                    labSemWAM = 0;
                    theorySemWAM = 0;
                    bool hasLab = false;
                    bool hasTheory = false;
                    double labTotalCredit = 0;
                    double theoryTotalCredit = 0;
                    double labWAM = 0;
                    double theoryWAM = 0;
                    double labWeightedMarks = 0;
                    double theoryWeightedMarks = 0;
                    dvWam = new DataView();
                    ds.Tables[0].DefaultView.RowFilter = "semester='" + Convert.ToString(sem + 1).Trim() + "'"; ;
                    dvWam = ds.Tables[0].DefaultView;
                    if (dvWam.Count > 0)
                    {
                        labTotalCredit = 0;
                        theoryTotalCredit = 0;
                        labWAM = 0;
                        theoryWAM = 0;
                        labWeightedMarks = 0;
                        theoryWeightedMarks = 0;
                        wam1 = 0;

                        for (int i = 0; i < dvWam.Count; i++)
                        {
                            weightmark = 0;
                            mark = 0;
                            double minINTMark = 0;
                            double maxINTMark = 0;

                            string lab = Convert.ToString(dvWam[i]["lab"]).Trim();
                            bool isLab = false;
                            bool.TryParse(lab.Trim(), out isLab);

                            string minINT = Convert.ToString(dvWam[i]["min_int_marks"]).Trim();
                            string maxINT = Convert.ToString(dvWam[i]["max_int_marks"]).Trim();
                            double.TryParse(minINT.Trim(), out minINTMark);
                            double.TryParse(maxINT.Trim(), out maxINTMark);

                            double minEXTMark = 0;
                            double maxEXTMark = 0;
                            string minEXT = Convert.ToString(dvWam[i]["min_ext_marks"]).Trim();
                            string maxEXT = Convert.ToString(dvWam[i]["max_ext_marks"]).Trim();
                            double.TryParse(minEXT.Trim(), out minEXTMark);
                            double.TryParse(maxEXT.Trim(), out maxEXTMark);

                            double minTOTMark = 0;
                            double maxTOTMark = 0;
                            string minTOT = Convert.ToString(dvWam[i]["mintotal"]).Trim();
                            string maxTOT = Convert.ToString(dvWam[i]["maxtotal"]).Trim();
                            double.TryParse(minTOT.Trim(), out minTOTMark);
                            double.TryParse(maxTOT.Trim(), out maxTOTMark);
                            double markPercentage = 0;
                            credit = 0;
                            double.TryParse(Convert.ToString(dvWam[i]["credit_points"]), out credit);
                            double.TryParse(Convert.ToString(dvWam[i]["total"]), out mark);
                            if (isLab)
                            {
                                if (mark > 0 && maxTOTMark > 0)
                                {
                                    markPercentage = (mark / maxTOTMark) * 100;
                                    markPercentage = Math.Round(markPercentage, 0, MidpointRounding.AwayFromZero);
                                }
                                labTotalCredit += credit;
                                labWeightedMarks = credit * markPercentage;
                                labWeightedMarks = Math.Round(labWeightedMarks, 0, MidpointRounding.AwayFromZero);
                                labWAM += labWeightedMarks;
                                hasLab = true;
                            }
                            else
                            {
                                markPercentage = mark;
                                markPercentage = Math.Round(markPercentage, 0, MidpointRounding.AwayFromZero);
                                theoryTotalCredit += credit;
                                theoryWeightedMarks = credit * markPercentage;
                                theoryWeightedMarks = Math.Round(theoryWeightedMarks, 0, MidpointRounding.AwayFromZero);
                                theoryWAM += theoryWeightedMarks;
                                hasTheory = true;
                            }
                            totCredit += credit;
                            weightmark = credit * markPercentage;
                            weightmark = Math.Round(weightmark, 0, MidpointRounding.AwayFromZero);
                            wam1 += weightmark;
                        }
                        semWAM = (wam1 > 0 && totCredit > 0) ? Math.Round((wam1 / totCredit), 0, MidpointRounding.AwayFromZero) : 0;
                        if (hasLab)
                        {
                            labSemWAM = (labWAM > 0 && labTotalCredit > 0) ? Math.Round((labWAM / labTotalCredit), 0, MidpointRounding.AwayFromZero) : 0;
                        }
                        if (hasTheory)
                        {
                            theorySemWAM = (theoryWAM > 0 && theoryTotalCredit > 0) ? Math.Round((theoryWAM / theoryTotalCredit), 0, MidpointRounding.AwayFromZero) : 0;
                        }
                    }
                    overAllEarnedCredit += (totCredit > 0) ? totCredit : 0;
                    overAllWAM += (wam1 > 0) ? wam1 : 0;


                    if (!dicSemWAM.ContainsKey(Convert.ToString(sem + 1).Trim()))
                    {
                        dicSemWAM.Add(Convert.ToString(sem + 1).Trim(), semWAM);
                    }
                    if (hasLab)
                    {
                        labOverAllEarnedCredit += (labTotalCredit > 0) ? labTotalCredit : 0;
                        labOverAllWAM += (labWAM > 0) ? labWAM : 0;
                        if (!dicSemLabWAM.ContainsKey(Convert.ToString(sem + 1).Trim()))
                        {
                            dicSemLabWAM.Add(Convert.ToString(sem + 1).Trim(), labSemWAM);
                        }
                    }
                    if (hasTheory)
                    {
                        theoryOverAllEarnedCredit += (theoryTotalCredit > 0) ? theoryTotalCredit : 0;
                        theoryOverAllWAM += (theoryWAM > 0) ? theoryWAM : 0;
                        if (!dicSemTheoryWAM.ContainsKey(Convert.ToString(sem + 1).Trim()))
                        {
                            dicSemTheoryWAM.Add(Convert.ToString(sem + 1).Trim(), theorySemWAM);
                        }
                    }
                }
                wam = (overAllWAM > 0 && overAllEarnedCredit > 0) ? Math.Round((overAllWAM / overAllEarnedCredit), 0, MidpointRounding.AwayFromZero) : 0;
                theoryFinalWAM = (theoryOverAllWAM > 0 && theoryOverAllEarnedCredit > 0) ? Math.Round((theoryOverAllWAM / theoryOverAllEarnedCredit), 0, MidpointRounding.AwayFromZero) : 0;
                labFinalWAM = (labOverAllWAM > 0 && labOverAllEarnedCredit > 0) ? Math.Round((labOverAllWAM / labOverAllEarnedCredit), 0, MidpointRounding.AwayFromZero) : 0;
            }
        }
        catch (Exception ex)
        {
        }
    }

    //PG MARK STATEMENT ( CHRISTOPHER )
    public void pgmarkstatementformat()
    {
        try
        {
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            //DataSet semwisegpa = new DataSet();
            string degree = string.Empty;
            string degname = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string issuedate = string.Empty;
            string semroman = "", edu_level = string.Empty;
            string coe = string.Empty;
            DataSet gradeds = new DataSet();
            lblerror.Visible = false;
            lblerror.Text = string.Empty;
            Font fondColName = new Font("Comic Sans MS", 18, FontStyle.Bold);
            Font fontdegexam = new Font("Arial", 12, FontStyle.Bold);
            Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco11 = new Font("Comic Sans MS", 11, FontStyle.Bold);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
            Font Fontwma = new Font("Arial", 8, FontStyle.Bold);
            Font Font8bold = new Font("Arial", 8, FontStyle.Bold);
            Font Font10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            DataTable dtPart1 = new DataTable();
            DataTable dtPart2 = new DataTable();
            DataTable dtPart3 = new DataTable();
            DataTable dtPart4 = new DataTable();
            Font Fontarial9 = new Font("Arial", 9, FontStyle.Bold);
            Font Fontarial10b = new Font("Arial", 11, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.3, 30.3));
            PdfPage mypdfpage;
            bool specialcourse = false;
            if (ddlSubject.SelectedIndex == 0)
            {
                specialcourse = false;
            }
            else
            {
                specialcourse = true;
            }
            if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
            {
                string strquery = "select *,district+' - '+pincode  as districtpin from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue) + "'";
                ds.Dispose();
                ds.Reset();
                ds = d2.select_method_wo_parameter(strquery, "Text");
                string Collegename = string.Empty;
                string aff = string.Empty;
                string collacr = string.Empty;
                string dispin = string.Empty;
                string clgaddress = string.Empty;
                string univ = string.Empty;
                string pincode = string.Empty;
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    Collegename = Convert.ToString(ds.Tables[0].Rows[0]["Collname"]);
                    aff = Convert.ToString(ds.Tables[0].Rows[0]["affliatedby"]);
                    univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                    string[] strpa = aff.Split(',');
                    aff = "( " + univ + " " + strpa[0] + " )";
                    //coename = ds.Tables[0].Rows[0]["coe"].ToString();
                    collacr = Convert.ToString(ds.Tables[0].Rows[0]["acr"]);
                    pincode = Convert.ToString(ds.Tables[0].Rows[0]["pincode"]).Trim();
                    pincode = pincode.Substring(pincode.Length - 3);
                    int pin = 0;
                    int.TryParse(pincode, out pin);
                    //((pincode.Length > 0) ? pincode.Substring(pincode.Length - 1) : ""
                    //char[] pin = pincode.Substring(pincode.Length - 1);
                    clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]) + " , " + Convert.ToString(ds.Tables[0].Rows[0]["district"]) + ((pin != 0) ? (" - " + Convert.ToString(pin)) : " - " + pincode);
                    clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);
                    dispin = Convert.ToString(ds.Tables[0].Rows[0]["districtpin"]);
                }
                FpSpread2.SaveChanges();
                for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
                {
                    int isval = 0;
                    isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                    if (isval == 1)
                    {
                        printds.Clear();
                        printds.Dispose();
                        printds_new.Clear();
                        printds_new.Dispose();
                        rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                        regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                        string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,C.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue) + "' ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue) + "';";
                        printds = da.select_method_wo_parameter(sql, "Text");
                        if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                        {
                            mypdfpage = mydoc.NewPage();
                            string app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]);
                            degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]);
                            //month = ddlMonth.SelectedIndex;
                            //monthstr = Convert.ToString(ddlMonth.SelectedIndex);
                            int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                            monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                            string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                            monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text);
                            monthandyear = monthandyear.ToUpper();
                            studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]);
                            issuedate = Convert.ToString(txtdoi.Text);
                            branch = Convert.ToString(printds.Tables[0].Rows[0]["Dept_name"]);
                            dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]);
                            edu_level = Convert.ToString(printds.Tables[0].Rows[0]["edu_level"]);
                            string stdappno = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]);
                            batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]);
                            degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]);
                            string medium = d2.GetFunctionv("select TextVal from TextValTable where TextCriteria='medi' and college_code='" + Convert.ToString(ddlCollege.SelectedValue) + "' and TextCode in(select isnull(medium_ins,0) from applyn  where app_no='" + app_no + "')");
                            sql2 = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text) + "' and  batch_year=" + batch_year + " ";
                            printds_new = da.select_method_wo_parameter(sql2, "Text");
                            if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                            {
                                sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]);
                                if (sem == "1")
                                {
                                    semroman = "I";
                                }
                                else if (sem == "2")
                                {
                                    semroman = "II";
                                }
                                else if (sem == "3")
                                {
                                    semroman = "III";
                                }
                                else if (sem == "4")
                                {
                                    semroman = "IV";
                                }
                                else if (sem == "5")
                                {
                                    semroman = "V";
                                }
                                else if (sem == "6")
                                {
                                    semroman = "VI";
                                }
                                else if (sem == "7")
                                {
                                    semroman = "VII";
                                }
                                else if (sem == "8")
                                {
                                    semroman = "VIII";
                                }
                                //PdfTextArea pdfdoi = new PdfTextArea(Fontco10, System.Drawing.Color.Black, new PdfArea(mydoc, 113, 803, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                                //mypdfpage.Add(pdfdoi);
                                PdfRectangle pr1 = new PdfRectangle(mydoc, new PdfArea(mydoc, 30, 44, 555, 771), Color.DarkBlue);
                                mypdfpage.Add(pr1);
                                PdfTextArea pdfHeader = new PdfTextArea(fondColName, Color.DarkBlue, new PdfArea(mydoc, 30, 40, 550, 50), ContentAlignment.MiddleCenter, Collegename + ", " + clgaddress);
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(Fontarial7, Color.DarkBlue, new PdfArea(mydoc, 30, 55, 550, 50), ContentAlignment.MiddleCenter, aff);
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(fontdegexam, Color.DarkBlue, new PdfArea(mydoc, 30, 78, 550, 50), ContentAlignment.MiddleCenter, degree + " DEGREE EXAMINATION");
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(fondColName, Color.DarkBlue, new PdfArea(mydoc, 30, 108, 550, 50), ContentAlignment.MiddleCenter, "STATEMENT OF MARKS");
                                mypdfpage.Add(pdfHeader);
                                //pl = new PdfLine(mydoc, new Point(30, 778), new Point(585, 778), Color.DarkBlue, 1);
                                //mypdfpage.Add(pl);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))
                                {
                                    PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
                                    mypdfpage.Add(LogoImage, 40, 83, 415);
                                }
                                exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]);
                                sql3 = "Select semester,subject_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,Part_Type,sub_sem.projThe from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = '" + exam_code + "' and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester,Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;";
                                printds_rows.Clear();
                                printds_rows.Dispose();
                                printds_rows = da.select_method_wo_parameter(sql3, "Text");
                                string stdphtsql = "select * from StdPhoto where app_no='" + stdappno + "'";
                                MemoryStream memoryStream = new MemoryStream();
                                DataSet dsstdpho = new DataSet();
                                dsstdpho.Clear();
                                dsstdpho.Dispose();
                                dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                                if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                                {
                                    byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                                    memoryStream.Write(file, 0, file.Length);
                                    if (file.Length > 0)
                                    {
                                        System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                        System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                        {
                                            //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                        }
                                        else
                                        {
                                            thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                            //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                        }
                                    }
                                }
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                {
                                    PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                                    mypdfpage.Add(LogoImage2, 510, 85, 420);
                                }
                                else
                                {
                                    PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                    mypdfpage.Add(LogoImage2, 510, 85, 420);
                                }
                                PdfTable tblstudnameyear = mydoc.NewTable(Fontco12, 2, 5, 2);
                                tblstudnameyear.VisibleHeaders = false;
                                tblstudnameyear.SetBorders(Color.Black, 1, BorderType.None);
                                tblstudnameyear.SetColumnsWidth(new int[] { 50, 106, 256, 100, 79 });
                                tblstudnameyear.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(0, 0).SetContent("Name : ");
                                tblstudnameyear.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 1).SetContent(studname.Trim());
                                foreach (PdfCell pc in tblstudnameyear.CellRange(0, 1, 0, 1).Cells)
                                {
                                    pc.ColSpan = 2;
                                }
                                tblstudnameyear.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleRight);
                                tblstudnameyear.Cell(0, 3).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(0, 3).SetContent("Register No. :");
                                tblstudnameyear.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 4).SetContent(regnumber.Trim());
                                tblstudnameyear.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(1, 0).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(1, 0).SetContent("Medium of Instruction :");
                                foreach (PdfCell pc in tblstudnameyear.CellRange(1, 0, 1, 0).Cells)
                                {
                                    pc.ColSpan = 2;
                                }
                                tblstudnameyear.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(1, 2).SetContent(medium);
                                //foreach (PdfCell pc in tblstudnameyear.CellRange(1, 1, 1, 1).Cells)
                                //{
                                //    pc.ColSpan = 3;
                                //}
                                tblstudnameyear.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleRight);
                                tblstudnameyear.Cell(1, 3).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(1, 3).SetContent("Date :");
                                tblstudnameyear.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(1, 4).SetContent(issuedate);
                                PdfTablePage newpdftabpage2 = tblstudnameyear.CreateTablePage(new PdfArea(mydoc, 35, 169, 549, 60));
                                mypdfpage.Add(newpdftabpage2);
                                PdfTextArea pdfdoi = new PdfTextArea(Fontco11, System.Drawing.Color.DarkBlue, new PdfArea(mydoc, 37, 215, 500, 35), System.Drawing.ContentAlignment.TopLeft, "The following marks were awarded to the candidate in the " + degree + " Degree (Written)");
                                mypdfpage.Add(pdfdoi);
                                tblstudnameyear = mydoc.NewTable(Fontco11, 1, 4, 2);
                                tblstudnameyear.VisibleHeaders = false;
                                tblstudnameyear.SetBorders(Color.Black, 1, BorderType.None);
                                tblstudnameyear.SetColumnsWidth(new int[] { 135, 190, 120, 40 });
                                tblstudnameyear.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(0, 0).SetContent("Examination held in ");
                                tblstudnameyear.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(0, 1).SetContent(monthandyear);
                                tblstudnameyear.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                                tblstudnameyear.Cell(0, 2).SetContent("SEMESTER " + semroman);
                                //tblstudnameyear.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                //tblstudnameyear.Cell(0, 3).SetColors(Color.DarkBlue, Color.White);
                                //tblstudnameyear.Cell(0, 3).SetContent(semroman);
                                newpdftabpage2 = tblstudnameyear.CreateTablePage(new PdfArea(mydoc, 35, 230, 400, 28));
                                mypdfpage.Add(newpdftabpage2);
                                bool wpm = true;
                                bool ab = false;
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    PdfTable tblMarkStmt = mydoc.NewTable(Fontarial10b, printds_rows.Tables[0].Rows.Count + 2, 8, 12);
                                    tblMarkStmt.VisibleHeaders = false;
                                    tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                                    //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                                    tblMarkStmt.SetColumnsWidth(new int[] { 35, 235, 52, 52, 48, 52, 38, 48 });
                                    double totcredit = 0;
                                    double summarkcredit = 0;
                                    tblMarkStmt.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 0).SetContent("CODE");
                                    tblMarkStmt.Cell(0, 0).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 0).SetCellPadding(0);
                                    foreach (PdfCell pc in tblMarkStmt.CellRange(0, 0, 0, 0).Cells)
                                    {
                                        pc.RowSpan = 2;
                                    }
                                    tblMarkStmt.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 1).SetContent("COURSE");
                                    tblMarkStmt.Cell(0, 1).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 1).SetCellPadding(0);
                                    foreach (PdfCell pc in tblMarkStmt.CellRange(0, 1, 0, 1).Cells)
                                    {
                                        pc.RowSpan = 2;
                                    }
                                    tblMarkStmt.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 2).SetCellPadding(0);
                                    tblMarkStmt.Cell(0, 2).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 2).SetContent("MARKS AWARDED");
                                    foreach (PdfCell pc in tblMarkStmt.CellRange(0, 2, 0, 2).Cells)
                                    {
                                        pc.ColSpan = 3;
                                    }
                                    tblMarkStmt.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(1, 2).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(1, 2).SetCellPadding(0);
                                    tblMarkStmt.Cell(1, 2).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(1, 2).SetContent("INTERNAL\n(40)");
                                    tblMarkStmt.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(1, 3).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(1, 3).SetCellPadding(0);
                                    tblMarkStmt.Cell(1, 3).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(1, 3).SetContent("EXTERNAL\n(60)");
                                    tblMarkStmt.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(1, 4).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(1, 4).SetCellPadding(0);
                                    tblMarkStmt.Cell(1, 4).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(1, 4).SetContent("TOTAL\n(100)");
                                    tblMarkStmt.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 5).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 5).SetCellPadding(0);
                                    tblMarkStmt.Cell(0, 5).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 5).SetContent("RESULT");
                                    foreach (PdfCell pc in tblMarkStmt.CellRange(0, 5, 0, 5).Cells)
                                    {
                                        pc.RowSpan = 2;
                                    }
                                    tblMarkStmt.Cell(0, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 6).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 6).SetCellPadding(0);
                                    tblMarkStmt.Cell(0, 6).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 6).SetContent("CREDIT");
                                    foreach (PdfCell pc in tblMarkStmt.CellRange(0, 6, 0, 6).Cells)
                                    {
                                        pc.RowSpan = 2;
                                    }
                                    tblMarkStmt.Cell(0, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 7).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 7).SetCellPadding(0);
                                    tblMarkStmt.Cell(0, 7).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 7).SetContent("MARKS\n  X  \nCREDIT");
                                    foreach (PdfCell pc in tblMarkStmt.CellRange(0, 7, 0, 7).Cells)
                                    {
                                        pc.RowSpan = 2;
                                    }
                                    DataView dvMark = new DataView();
                                    printds_rows.Tables[0].DefaultView.RowFilter = " projThe=0";
                                    dvMark = printds_rows.Tables[0].DefaultView;
                                    if (dvMark.Count > 0)
                                    {
                                        for (int i = 0; i < dvMark.Count; i++)
                                        {
                                            if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                            {
                                                tblMarkStmt.Cell(i + 2, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(i + 2, 0).SetContent(Convert.ToString(dvMark[i]["subject_code"]).Trim());
                                                bool rab = false;
                                                tblMarkStmt.Cell(i + 2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                tblMarkStmt.Cell(i + 2, 1).SetContent(Convert.ToString(dvMark[i]["subject_name"]));
                                                double internalmmark = 0;
                                                double externalmark1 = 0;
                                                double totalintext = 0;
                                                double.TryParse(Convert.ToString(dvMark[i]["internal_mark"]), out internalmmark);
                                                double extfinal = 0;
                                                double.TryParse(Convert.ToString(dvMark[i]["external_mark"]), out extfinal);
                                                extfinal = Math.Round(extfinal, 0);
                                                externalmark1 = extfinal;
                                                string checkedmark = string.Empty;
                                                if (extfinal < 0)
                                                {
                                                    checkedmark = loadmarkat(Convert.ToString(extfinal));
                                                }
                                                else
                                                {
                                                    checkedmark = Convert.ToString(extfinal);
                                                }
                                                if (internalmmark >= 0)
                                                {
                                                    if (extfinal > 0)
                                                    {
                                                        totalintext = internalmmark + externalmark1;
                                                    }
                                                    else
                                                    {
                                                        totalintext = internalmmark;
                                                    }
                                                }
                                                else
                                                {
                                                    if (extfinal > 0)
                                                    {
                                                        totalintext = externalmark1;
                                                    }
                                                    else
                                                    {
                                                        totalintext = 0;
                                                    }
                                                }
                                                tblMarkStmt.Cell(i + 2, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(i + 2, 2).SetContent(internalmmark);
                                                tblMarkStmt.Cell(i + 2, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(i + 2, 3).SetContent(checkedmark);
                                                double totfinal = 0;
                                                totfinal = Math.Round(totalintext, 0);
                                                tblMarkStmt.Cell(i + 2, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(i + 2, 4).SetContent(Convert.ToString(totfinal));
                                                double creditpoint = 0;
                                                double.TryParse(Convert.ToString(dvMark[i]["credit_points"]), out creditpoint);
                                                double mrkcredit = 0;
                                                string result = Convert.ToString(dvMark[i]["result"]).Trim();
                                                string r = string.Empty;
                                                //tblMarkStmt.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                if (result.ToUpper() == "PASS")
                                                {
                                                    r = "PASS";
                                                    totcredit += creditpoint;
                                                    mrkcredit = totfinal * creditpoint;
                                                    summarkcredit += mrkcredit;
                                                }
                                                else if (result.ToUpper() == "FAIL")
                                                {
                                                    r = "Reappear";
                                                    //tblMarkStmt.Cell(i + 2, 5).SetFont(Fontarial9);                                                
                                                }
                                                else if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                                {
                                                    ab = true;
                                                    tblMarkStmt.Cell(i + 2, 3).SetContent("AB");
                                                    tblMarkStmt.Cell(i + 2, 2).SetContent("0");
                                                    tblMarkStmt.Cell(i + 2, 4).SetContent("0");
                                                    tblMarkStmt.Cell(i + 2, 5).SetContent("AAA");
                                                    tblMarkStmt.Cell(i + 2, 6).SetContent("");
                                                    tblMarkStmt.Cell(i + 2, 7).SetContent("");
                                                    if (extfinal == 0 || internalmmark == 0)
                                                    {
                                                        rab = true;
                                                        //totcredit += creditpoint;
                                                        //mrkcredit = totfinal * creditpoint;
                                                        //summarkcredit += mrkcredit;
                                                    }
                                                    r = "AAA";
                                                }
                                                else if (result.ToUpper() == "RE-APPEAR" || result.ToUpper() == "REAPPEAR")
                                                {
                                                    r = "RA";
                                                }
                                                else
                                                {
                                                    r = result;
                                                }
                                                tblMarkStmt.Cell(i + 2, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(i + 2, 5).SetContent(r);
                                                tblMarkStmt.Cell(i + 2, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(i + 2, 7).SetContent(mrkcredit);
                                                tblMarkStmt.Cell(i + 2, 6).SetContent(Convert.ToString(dvMark[i]["credit_points"]));
                                                tblMarkStmt.Cell(i + 2, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                if (result.Trim().ToUpper() == "FAIL")
                                                {
                                                    wpm = false;
                                                    tblMarkStmt.Cell(i + 2, 7).SetContent("");
                                                    tblMarkStmt.Cell(i + 2, 6).SetContent("");
                                                    tblMarkStmt.Cell(i + 2, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                }
                                                if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                                {
                                                    ab = true;
                                                    tblMarkStmt.Cell(i + 2, 6).SetContent("");
                                                    tblMarkStmt.Cell(i + 2, 7).SetContent("");
                                                }
                                                if (extfinal < 0)
                                                {
                                                    ab = true;
                                                    tblMarkStmt.Cell(i + 2, 3).SetContent("AB");
                                                    tblMarkStmt.Cell(i + 2, 2).SetContent("0");
                                                    tblMarkStmt.Cell(i + 2, 4).SetContent("0");
                                                    tblMarkStmt.Cell(i + 2, 5).SetContent("AAA");
                                                    tblMarkStmt.Cell(i + 2, 6).SetContent("");
                                                    tblMarkStmt.Cell(i + 2, 7).SetContent("");
                                                }
                                                if (internalmmark < 0)
                                                {
                                                    ab = true;
                                                    tblMarkStmt.Cell(i + 2, 3).SetContent("0");
                                                    tblMarkStmt.Cell(i + 2, 2).SetContent("AB");
                                                    tblMarkStmt.Cell(i + 2, 4).SetContent("0");
                                                    tblMarkStmt.Cell(i + 2, 5).SetContent("AAA");
                                                    tblMarkStmt.Cell(i + 2, 6).SetContent("");
                                                    tblMarkStmt.Cell(i + 2, 7).SetContent("");
                                                }
                                            }
                                        }
                                    }
                                    newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 35, 249, 549, 300));
                                    mypdfpage.Add(newpdftabpage2);
                                    tblMarkStmt = mydoc.NewTable(Fontarial10b, 1, 4, 10);
                                    tblMarkStmt.VisibleHeaders = false;
                                    tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                                    tblMarkStmt.SetColumnsWidth(new int[] { 43, 420, 38, 47 });
                                    tblMarkStmt.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 1).SetContent("TOTAL");
                                    tblMarkStmt.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    if (totcredit != 0)
                                    {
                                        tblMarkStmt.Cell(0, 2).SetContent(totcredit);
                                    }
                                    tblMarkStmt.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    if (summarkcredit != 0)
                                        tblMarkStmt.Cell(0, 3).SetContent(summarkcredit);
                                    double wam = 0;
                                    if (summarkcredit == 0 || totcredit == 0)
                                    {
                                        wam = 0;
                                    }
                                    else
                                    {
                                        wam = Math.Round((summarkcredit / totcredit), 0, MidpointRounding.AwayFromZero);
                                    }
                                    newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 35, 432, 550, 35));
                                    mypdfpage.Add(newpdftabpage2);
                                    DataView dvThesis = new DataView();
                                    printds_rows.Tables[0].DefaultView.RowFilter = " projThe=1";
                                    dvThesis = printds_rows.Tables[0].DefaultView;
                                    if (dvThesis.Count == 0)
                                    {
                                        tblMarkStmt = mydoc.NewTable(Fontarial10b, 2, 8, 12);
                                    }
                                    else
                                    {
                                        tblMarkStmt = mydoc.NewTable(Fontarial10b, dvThesis.Count + 1, 8, 12);
                                    }
                                    tblMarkStmt.VisibleHeaders = false;
                                    tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                                    //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                                    tblMarkStmt.SetColumnsWidth(new int[] { 35, 235, 52, 52, 48, 52, 38, 48 });
                                    tblMarkStmt.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 2).SetCellPadding(0);
                                    tblMarkStmt.Cell(0, 2).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 2).SetContent("INTERNAL\n(80)");
                                    tblMarkStmt.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 3).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 3).SetCellPadding(0);
                                    tblMarkStmt.Cell(0, 3).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 3).SetContent("EXTERNAL\n(120)");
                                    tblMarkStmt.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(0, 4).SetColors(Color.DarkBlue, Color.White);
                                    tblMarkStmt.Cell(0, 4).SetCellPadding(0);
                                    tblMarkStmt.Cell(0, 4).SetFont(Fontarial9);
                                    tblMarkStmt.Cell(0, 4).SetContent("TOTAL\n(200)");
                                    double thesiscredit = 0;
                                    double sumthesis = 0;
                                    if (dvThesis.Count > 0)
                                    {
                                        for (int thesis = 0; thesis < dvThesis.Count; thesis++)
                                        {
                                            bool rab = false;
                                            tblMarkStmt.Cell(thesis + 1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tblMarkStmt.Cell(thesis + 1, 1).SetContent(Convert.ToString(dvThesis[thesis]["subject_name"]));
                                            double internalmmark = 0;
                                            double externalmark1 = 0;
                                            double totalintext = 0;
                                            double.TryParse(Convert.ToString(dvThesis[thesis]["internal_mark"]), out internalmmark);
                                            double extfinal = 0;
                                            double.TryParse(Convert.ToString(dvThesis[thesis]["external_mark"]), out extfinal);
                                            extfinal = Math.Round(extfinal, 0);
                                            externalmark1 = extfinal;
                                            string checkedmark = string.Empty;
                                            if (extfinal < 0)
                                            {
                                                checkedmark = loadmarkat(Convert.ToString(extfinal));
                                            }
                                            else
                                            {
                                                checkedmark = Convert.ToString(extfinal);
                                            }
                                            if (internalmmark >= 0)
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = internalmmark + externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = internalmmark;
                                                }
                                            }
                                            else
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = 0;
                                                }
                                            }
                                            tblMarkStmt.Cell(thesis + 1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(thesis + 1, 2).SetContent(internalmmark);
                                            tblMarkStmt.Cell(thesis + 1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(thesis + 1, 3).SetContent(checkedmark);
                                            double totfinal = 0;
                                            totfinal = Math.Round(totalintext, 0);
                                            tblMarkStmt.Cell(thesis + 1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(thesis + 1, 4).SetContent(Convert.ToString(totfinal));
                                            double creditpoint = 0;
                                            double.TryParse(Convert.ToString(dvThesis[thesis]["credit_points"]), out creditpoint);
                                            double mrkcredit = 0;
                                            string result = Convert.ToString(dvThesis[thesis]["result"]);
                                            string r = string.Empty;
                                            //tblMarkStmt.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            if (result.ToUpper() == "PASS")
                                            {
                                                r = "PASS";
                                                thesiscredit += creditpoint;
                                                mrkcredit = totfinal * creditpoint;
                                                sumthesis += mrkcredit;
                                            }
                                            else if (result.ToUpper() == "FAIL")
                                            {
                                                r = "Reappear";
                                                //tblMarkStmt.Cell(i + 2, 5).SetFont(Fontarial9);                                                
                                            }
                                            else if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                            {
                                                ab = true;
                                                tblMarkStmt.Cell(thesis + 1, 3).SetContent("AB");
                                                tblMarkStmt.Cell(thesis + 1, 2).SetContent("0");
                                                tblMarkStmt.Cell(thesis + 1, 4).SetContent("0");
                                                tblMarkStmt.Cell(thesis + 1, 5).SetContent("AAA");
                                                tblMarkStmt.Cell(thesis + 1, 6).SetContent("");
                                                tblMarkStmt.Cell(thesis + 1, 7).SetContent("");
                                                if (extfinal == 0 || internalmmark == 0)
                                                {
                                                    rab = true;
                                                    //totcredit += creditpoint;
                                                    //mrkcredit = totfinal * creditpoint;
                                                    //summarkcredit += mrkcredit;
                                                }
                                                r = "AAA";
                                            }
                                            else if (result.ToUpper() == "RE-APPEAR" || result.ToUpper() == "REAPPEAR")
                                            {
                                                r = "RA";
                                            }
                                            else
                                            {
                                                r = result;
                                            }
                                            tblMarkStmt.Cell(thesis + 1, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(thesis + 1, 5).SetContent(r);
                                            tblMarkStmt.Cell(thesis + 1, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(thesis + 1, 7).SetContent(mrkcredit);
                                            tblMarkStmt.Cell(thesis + 1, 6).SetContent(Convert.ToString(dvThesis[thesis]["credit_points"]));
                                            tblMarkStmt.Cell(thesis + 1, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            if (result.Trim().ToUpper() == "FAIL")
                                            {
                                                wpm = false;
                                                tblMarkStmt.Cell(thesis + 1, 7).SetContent("");
                                                tblMarkStmt.Cell(thesis + 1, 6).SetContent("");
                                                tblMarkStmt.Cell(thesis + 1, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            }
                                            if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                            {
                                                ab = true;
                                                tblMarkStmt.Cell(thesis + 1, 6).SetContent("");
                                                tblMarkStmt.Cell(thesis + 1, 7).SetContent("");
                                            }
                                            if (extfinal < 0)
                                            {
                                                ab = true;
                                                tblMarkStmt.Cell(thesis + 1, 3).SetContent("AB");
                                                tblMarkStmt.Cell(thesis + 1, 2).SetContent("0");
                                                tblMarkStmt.Cell(thesis + 1, 4).SetContent("0");
                                                tblMarkStmt.Cell(thesis + 1, 5).SetContent("AAA");
                                                tblMarkStmt.Cell(thesis + 1, 6).SetContent("");
                                                tblMarkStmt.Cell(thesis + 1, 7).SetContent("");
                                            }
                                            if (internalmmark < 0)
                                            {
                                                ab = true;
                                                tblMarkStmt.Cell(thesis + 1, 3).SetContent("0");
                                                tblMarkStmt.Cell(thesis + 1, 2).SetContent("AB");
                                                tblMarkStmt.Cell(thesis + 1, 4).SetContent("0");
                                                tblMarkStmt.Cell(thesis + 1, 5).SetContent("AAA");
                                                tblMarkStmt.Cell(thesis + 1, 6).SetContent("");
                                                tblMarkStmt.Cell(thesis + 1, 7).SetContent("");
                                            }
                                        }
                                    }
                                    newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 35, 459, 549, 100));
                                    mypdfpage.Add(newpdftabpage2);
                                    PdfTextArea pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 60, 577, 160, 50), ContentAlignment.TopLeft, "Weighted Average of Marks  = ");
                                    mypdfpage.Add(pdftxt);
                                    pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 60, 587, 160, 50), ContentAlignment.TopCenter, Convert.ToString("(Theory)"));
                                    mypdfpage.Add(pdftxt);
                                    if (wpm == true && ab == false)
                                    {
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 402, 567, 50, 50), ContentAlignment.TopCenter, Convert.ToString(summarkcredit));
                                        mypdfpage.Add(pdftxt);
                                        //Horizandal Line 11 for Tot(M X C) / totcredit
                                        PdfLine ple1 = new PdfLine(mydoc, new Point(402, 581), new Point(450, 581), Color.Black, 1);
                                        mypdfpage.Add(ple1);
                                    }
                                    else
                                    {
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 390, 567, 100, 50), ContentAlignment.TopCenter, Convert.ToString("NOT COMPLETED"));
                                        mypdfpage.Add(pdftxt);
                                        //Horizandal Line 11 for Tot(M X C) / totcredit
                                        PdfLine ple = new PdfLine(mydoc, new Point(390, 581), new Point(490, 581), Color.Black, 1);
                                        mypdfpage.Add(ple);
                                    }
                                    pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 220, 567, 150, 50), ContentAlignment.TopCenter, Convert.ToString("Total of (Marks X Credits)"));
                                    mypdfpage.Add(pdftxt);
                                    pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 222, 587, 150, 50), ContentAlignment.TopCenter, Convert.ToString("Total Credits"));
                                    mypdfpage.Add(pdftxt);
                                    if (wpm == true && ab == false)
                                    {
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 402, 587, 50, 50), ContentAlignment.TopCenter, Convert.ToString(totcredit));
                                        mypdfpage.Add(pdftxt);
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 468, 577, 16, 50), ContentAlignment.TopLeft, " = ");
                                        mypdfpage.Add(pdftxt);
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 476, 577, 86, 50), ContentAlignment.TopLeft, Convert.ToString("  " + wam));
                                        mypdfpage.Add(pdftxt);
                                    }
                                    else
                                    {
                                        pdftxt = new PdfTextArea(Fontarial10b, Color.Black, new PdfArea(mydoc, 402, 587, 50, 50), ContentAlignment.TopCenter, Convert.ToString(""));
                                        mypdfpage.Add(pdftxt);
                                    }
                                    //if (ab == true)
                                    //{
                                    //    pdftxt = new PdfTextArea(Font10bold, Color.Black, new PdfArea(mydoc, 402, 607, 50, 50), ContentAlignment.TopCenter, Convert.ToString("0"));
                                    //    mypdfpage.Add(pdftxt);
                                    //    pdftxt = new PdfTextArea(Font10bold, Color.Black, new PdfArea(mydoc, 402, 627, 50, 50), ContentAlignment.TopCenter, Convert.ToString(totcredit));
                                    //    mypdfpage.Add(pdftxt);
                                    //    pdftxt = new PdfTextArea(Font10bold, Color.Black, new PdfArea(mydoc, 468, 617, 16, 50), ContentAlignment.TopLeft, " = ");
                                    //    mypdfpage.Add(pdftxt);
                                    //    //pdftxt = new PdfTextArea(Font10bold, Color.Black, new PdfArea(mydoc, 476, 617, 86, 50), ContentAlignment.TopLeft, Convert.ToString("0"));
                                    //    //mypdfpage.Add(pdftxt);
                                    //}
                                    pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 369, 577, 16, 50), ContentAlignment.TopLeft, "  =  ");
                                    mypdfpage.Add(pdftxt);
                                    if (specialcourse == true)
                                    {
                                        PdfTable tblspecial = mydoc.NewTable(Fontarial10b, 2, 3, 3);
                                        tblspecial.VisibleHeaders = false;
                                        tblspecial.SetBorders(Color.Black, 1, BorderType.None);
                                        //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                                        tblspecial.SetColumnsWidth(new int[] { 100, 350, 100 });
                                        tblspecial.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblspecial.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                        tblspecial.Cell(0, 0).SetContent(Convert.ToString("SUPPORTIVE COURSE") + "    -    " + Convert.ToString(ddlSubject.SelectedItem));
                                        foreach (PdfCell pc in tblspecial.CellRange(0, 0, 0, 0).Cells)
                                        {
                                            pc.ColSpan = 2;
                                        }
                                        //tblspecial.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //tblspecial.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                        //tblspecial.Cell(0, 1).SetContent(Convert.ToString();
                                        string credit = d2.GetFunctionv("select credit_points from subject where subject_no='" + Convert.ToString(ddlSubject.SelectedItem.Value) + "'");
                                        tblspecial.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblspecial.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                                        tblspecial.Cell(0, 2).SetContent(Convert.ToString(credit + " CREDIT"));
                                        newpdftabpage2 = tblspecial.CreateTablePage(new PdfArea(mydoc, 80, 654, 500, 100));
                                        mypdfpage.Add(newpdftabpage2);
                                    }
                                    else
                                    {
                                        PdfTable tblspecial = mydoc.NewTable(Fontarial10b, 2, 3, 3);
                                        tblspecial.VisibleHeaders = false;
                                        tblspecial.SetBorders(Color.Black, 1, BorderType.None);
                                        //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                                        tblspecial.SetColumnsWidth(new int[] { 100, 80, 150 });
                                        tblspecial.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblspecial.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                        tblspecial.Cell(0, 0).SetContent(Convert.ToString("SUPPORTIVE COURSE"));
                                        tblspecial.Cell(0, 1).SetContentAlignment(ContentAlignment.TopLeft);
                                        tblspecial.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                        tblspecial.Cell(0, 1).SetContent(Convert.ToString(" --------- "));
                                        tblspecial.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleRight);
                                        tblspecial.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                                        tblspecial.Cell(0, 2).SetContent(Convert.ToString("1 CREDIT"));
                                        newpdftabpage2 = tblspecial.CreateTablePage(new PdfArea(mydoc, 80, 654, 500, 100));
                                        mypdfpage.Add(newpdftabpage2);
                                    }
                                    pdftxt = new PdfTextArea(Font10bold, Color.DarkBlue, new PdfArea(mydoc, 37, 786, 275, 50), ContentAlignment.TopCenter, "CONTROLLER OF EXAMINATIONS");
                                    mypdfpage.Add(pdftxt);
                                    pdftxt = new PdfTextArea(Font10bold, Color.DarkBlue, new PdfArea(mydoc, 300, 786, 340, 50), ContentAlignment.TopCenter, "PRINCIPAL");
                                    mypdfpage.Add(pdftxt);
                                    pdftxt = new PdfTextArea(Fontwma, Color.DarkBlue, new PdfArea(mydoc, 37, 805, 540, 30), ContentAlignment.TopCenter, "Passing Minimum : Internal Assessment - 20 Marks, External Assessment - 30 Marks, Aggregate - 50 Marks");
                                    mypdfpage.Add(pdftxt);
                                    //Top Horizantal Line 1
                                    PdfLine pl = new PdfLine(mydoc, new Point(30, 155), new Point(585, 155), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 2
                                    pl = new PdfLine(mydoc, new Point(30, 250), new Point(585, 250), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 3
                                    pl = new PdfLine(mydoc, new Point(298, 270), new Point(447, 270), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 4
                                    pl = new PdfLine(mydoc, new Point(30, 296), new Point(585, 296), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 5
                                    pl = new PdfLine(mydoc, new Point(30, 440), new Point(585, 440), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 6
                                    pl = new PdfLine(mydoc, new Point(30, 455), new Point(585, 455), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 6 New
                                    pl = new PdfLine(mydoc, new Point(298, 485), new Point(447, 485), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    pl = new PdfLine(mydoc, new Point(30, 520), new Point(585, 520), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 7
                                    pl = new PdfLine(mydoc, new Point(30, 639), new Point(585, 639), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 8
                                    pl = new PdfLine(mydoc, new Point(30, 740), new Point(585, 740), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 9
                                    pl = new PdfLine(mydoc, new Point(30, 800), new Point(585, 800), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Horizandal Line 10 for Tot(M X C) / totcredit
                                    pl = new PdfLine(mydoc, new Point(226, 581), new Point(365, 581), Color.Black, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 1 
                                    pl = new PdfLine(mydoc, new Point(71, 250), new Point(71, 520), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 2
                                    pl = new PdfLine(mydoc, new Point(298, 250), new Point(298, 440), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 2
                                    pl = new PdfLine(mydoc, new Point(298, 455), new Point(298, 520), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 3
                                    pl = new PdfLine(mydoc, new Point(350, 270), new Point(350, 440), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 3
                                    pl = new PdfLine(mydoc, new Point(350, 455), new Point(350, 520), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 4
                                    pl = new PdfLine(mydoc, new Point(404, 270), new Point(404, 440), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 4
                                    pl = new PdfLine(mydoc, new Point(404, 455), new Point(404, 520), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 5
                                    pl = new PdfLine(mydoc, new Point(447, 250), new Point(447, 440), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 5
                                    pl = new PdfLine(mydoc, new Point(447, 455), new Point(447, 520), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 6
                                    pl = new PdfLine(mydoc, new Point(499, 250), new Point(499, 520), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                    //Vertical Line 7
                                    pl = new PdfLine(mydoc, new Point(538, 250), new Point(538, 520), Color.DarkBlue, 1);
                                    mypdfpage.Add(pl);
                                }
                            }
                            mypdfpage.SaveToDocument();
                        }
                    }
                }
            }
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
            }
        }
        catch (Exception ex)
        {
        }
    }

    //FOR CHRISTOPHER PG CONSOLIDATE MARKSHEET
    public void pgconsolidatemarksheet()
    {
        try
        {
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            //DataSet semwisegpa = new DataSet();
            string degree = string.Empty;
            string degname = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string max_sem = string.Empty;
            int maxSem = 0;
            string issuedate = string.Empty;
            string semroman = "", edu_level = string.Empty;
            string coe = string.Empty;
            DataSet gradeds = new DataSet();
            lblerror.Visible = false;
            lblerror.Text = string.Empty;
            Font fondColName = new Font("Comic Sans MS", 18, FontStyle.Bold);
            Font fontdegexam = new Font("Arial", 12, FontStyle.Bold);
            Font fondconsol = new Font("Comic Sans MS", 15, FontStyle.Bold);
            Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco11 = new Font("Comic Sans MS", 11, FontStyle.Bold);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
            Font Fontwma = new Font("Arial", 8, FontStyle.Bold);
            Font Font8bold = new Font("Arial", 8, FontStyle.Bold);
            Font Font10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            DataTable dtPart1 = new DataTable();
            DataTable dtPart2 = new DataTable();
            DataTable dtPart3 = new DataTable();
            DataTable dtPart4 = new DataTable();
            Font Fontarial9 = new Font("Arial", 9, FontStyle.Bold);
            Font Fontarial10b = new Font("Arial", 11, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.3, 30.3));
            PdfPage mypdfpage;
            //if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
            //{
            string strquery = "select *,district+' - '+pincode  as districtpin from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
            ds.Dispose();
            ds.Reset();
            ds = d2.select_method_wo_parameter(strquery, "Text");
            string Collegename = string.Empty;
            string aff = string.Empty;
            string collacr = string.Empty;
            string dispin = string.Empty;
            string clgaddress = string.Empty;
            string univ = string.Empty;
            string pincode = string.Empty;
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                Collegename = ds.Tables[0].Rows[0]["Collname"].ToString();
                aff = ds.Tables[0].Rows[0]["affliatedby"].ToString();
                univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                string[] strpa = aff.Split(',');
                aff = "( " + univ + " " + strpa[0] + " )";
                //coename = ds.Tables[0].Rows[0]["coe"].ToString();
                collacr = ds.Tables[0].Rows[0]["acr"].ToString();
                pincode = Convert.ToString(ds.Tables[0].Rows[0]["pincode"]).Trim();
                pincode = pincode.Substring(pincode.Length - 3);
                int pin = 0;
                int.TryParse(pincode, out pin);
                //((pincode.Length > 0) ? pincode.Substring(pincode.Length - 1) : ""
                //char[] pin = pincode.Substring(pincode.Length - 1);
                clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]) + " , " + Convert.ToString(ds.Tables[0].Rows[0]["district"]) + ((pin != 0) ? (" - " + pin.ToString()) : " - " + pincode);
                clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);
                dispin = ds.Tables[0].Rows[0]["districtpin"].ToString();
            }
            FpSpread2.SaveChanges();
            for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                if (isval == 1)
                {
                    printds.Clear();
                    printds.Dispose();
                    printds_new.Clear();
                    printds_new.Dispose();
                    rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                    regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                    string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 110) as dob,c.edu_level,CONVERT(VARCHAR(11),R.Adm_Date,106) as ADM_DATE FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
                    sql = sql + "  select count(s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass' and sc.roll_no=mark_entry.roll_no and mark_entry.subject_no=sc.subject_no and mark_entry.roll_no='" + rollnosub + "'; ";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail' and sc.roll_no=mark_entry.roll_no and mark_entry.subject_no=sc.subject_no and mark_entry.roll_no='" + rollnosub + "'; select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass')";
                    printds = da.select_method_wo_parameter(sql, "Text");
                    int noofsubapplied = Convert.ToInt32(printds.Tables[3].Rows[0][0].ToString());
                    int noofsubpassed = Convert.ToInt32(printds.Tables[4].Rows[0][0].ToString());
                    int noofsubfailed = Convert.ToInt32(printds.Tables[5].Rows[0][0].ToString());
                    int Totalfailcount = printds.Tables[6].Rows.Count;
                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0 && Totalfailcount == 0)
                    {
                        mypdfpage = mydoc.NewPage();
                        string app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]);
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        //month = ddlMonth.SelectedIndex;
                        //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                        //string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                        //monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        //monthandyear = monthandyear.ToUpper();
                        studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        issuedate = Convert.ToString(txtdoi.Text);
                        branch = printds.Tables[0].Rows[0]["Dept_name"].ToString();
                        dob = printds.Tables[0].Rows[0]["dob"].ToString();
                        edu_level = Convert.ToString(printds.Tables[0].Rows[0]["Edu_Level"]).Trim();
                        string stdappno = printds.Tables[0].Rows[0]["App_No"].ToString();
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = printds.Tables[0].Rows[0]["degree_code"].ToString();
                        max_sem = d2.GetFunctionv("select NDurations from ndegree where batch_year='" + batch_year + "'  and Degree_code='" + degree_code + "' and college_code='" + Convert.ToString(ddlCollege.SelectedValue) + "'");
                        if (max_sem == "" || max_sem == null)
                        {
                            max_sem = d2.GetFunctionv("SELECT Duration FROM Degree where  Degree_Code='" + degree_code + "' and college_code='" + Convert.ToString(ddlCollege.SelectedValue) + "'");
                        }
                        int.TryParse(max_sem, out maxSem);
                        int newbatch = 0;
                        int.TryParse(batch_year, out newbatch);
                        DateTime dt = new DateTime();
                        int cur_year = DateTime.Now.Year;
                        int diff = newbatch + (maxSem / 2);
                        //if (cur_year > diff)
                        //{
                        //}
                        //else
                        //{
                        //    lbl_popuperr.Text = "The Consolidated is Generated Only For Passed Out Students.";
                        //    errdiv.Visible = true;
                        //    return;
                        //}
                        string medium = d2.GetFunctionv("select TextVal from TextValTable where TextCriteria='medi' and college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and TextCode in(select isnull(medium_ins,0) from applyn  where app_no='" + app_no + "')");
                        //sql2 = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                        //printds_new = da.select_method_wo_parameter(sql2, "Text");
                        // if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                        //{
                        //    sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]);
                        //    if (sem == "1")
                        //    {
                        //        semroman = "I";
                        //    }
                        //    else if (sem == "2")
                        //    {
                        //        semroman = "II";
                        //    }
                        //    else if (sem == "3")
                        //    {
                        //        semroman = "III";
                        //    }
                        //    else if (sem == "4")
                        //    {
                        //        semroman = "IV";
                        //    }
                        //    else if (sem == "5")
                        //    {
                        //        semroman = "V";
                        //    }
                        //    else if (sem == "6")
                        //    {
                        //        semroman = "VI";
                        //    }
                        //    else if (sem == "7")
                        //    {
                        //        semroman = "VII";
                        //    }
                        //    else if (sem == "8")
                        //    {
                        //        semroman = "VIII";
                        //    }
                        //PdfTextArea pdfdoi = new PdfTextArea(Fontco10, System.Drawing.Color.Black, new PdfArea(mydoc, 113, 803, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                        //mypdfpage.Add(pdfdoi);
                        PdfRectangle pr1 = new PdfRectangle(mydoc, new PdfArea(mydoc, 30, 44, 555, 771), Color.DarkBlue);
                        mypdfpage.Add(pr1);
                        PdfTextArea pdfHeader = new PdfTextArea(fondColName, Color.DarkBlue, new PdfArea(mydoc, 30, 40, 550, 50), ContentAlignment.MiddleCenter, Collegename + ", " + clgaddress);
                        mypdfpage.Add(pdfHeader);
                        pdfHeader = new PdfTextArea(Fontarial7, Color.DarkBlue, new PdfArea(mydoc, 30, 55, 550, 50), ContentAlignment.MiddleCenter, aff);
                        mypdfpage.Add(pdfHeader);
                        pdfHeader = new PdfTextArea(fontdegexam, Color.DarkBlue, new PdfArea(mydoc, 30, 78, 550, 50), ContentAlignment.MiddleCenter, degree + " DEGREE EXAMINATION");
                        mypdfpage.Add(pdfHeader);
                        pdfHeader = new PdfTextArea(fondconsol, Color.DarkBlue, new PdfArea(mydoc, 30, 108, 550, 50), ContentAlignment.MiddleCenter, "CONSOLIDATED MARK SHEET & PASS CERTIFICATE");
                        mypdfpage.Add(pdfHeader);
                        //pl = new PdfLine(mydoc, new Point(30, 778), new Point(585, 778), Color.DarkBlue, 1);
                        //mypdfpage.Add(pl);
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))
                        {
                            PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
                            mypdfpage.Add(LogoImage, 40, 83, 415);
                        }
                        sql3 = "Select syllabus_master.semester,Subject_Type,subject_name,subject_code,subject.subject_no,result,max_int_marks,max_ext_marks,internal_mark,external_mark,total,maxtotal,grade,cp,credit_points,mark_entry.subject_no,semester,maxtotal,exam_code,subject.Part_Type,sub_sem.lab,subject.subjectpriority,projThe from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'  order by syllabus_master.semester,Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;";
                        printds_rows.Clear();
                        printds_rows.Dispose();
                        printds_rows = da.select_method_wo_parameter(sql3, "Text");
                        string stdphtsql = "select * from StdPhoto where app_no='" + stdappno + "'";
                        MemoryStream memoryStream = new MemoryStream();
                        DataSet dsstdpho = new DataSet();
                        dsstdpho.Clear();
                        dsstdpho.Dispose();
                        dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                        if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                        {
                            byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                            memoryStream.Write(file, 0, file.Length);
                            if (file.Length > 0)
                            {
                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                {
                                    //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                }
                                else
                                {
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                    //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                }
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                        {
                            PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                            mypdfpage.Add(LogoImage2, 510, 85, 420);
                        }
                        else
                        {
                            PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                            mypdfpage.Add(LogoImage2, 510, 85, 420);
                        }
                        PdfTable tblstudnameyear = mydoc.NewTable(Fontco12, 2, 5, 2);
                        tblstudnameyear.VisibleHeaders = false;
                        tblstudnameyear.SetBorders(Color.Black, 1, BorderType.None);
                        tblstudnameyear.SetColumnsWidth(new int[] { 50, 106, 256, 100, 79 });
                        tblstudnameyear.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudnameyear.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                        tblstudnameyear.Cell(0, 0).SetContent("Name : ");
                        tblstudnameyear.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudnameyear.Cell(0, 1).SetContent(studname.Trim());
                        foreach (PdfCell pc in tblstudnameyear.CellRange(0, 1, 0, 1).Cells)
                        {
                            pc.ColSpan = 2;
                        }
                        tblstudnameyear.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleRight);
                        tblstudnameyear.Cell(0, 3).SetColors(Color.DarkBlue, Color.White);
                        tblstudnameyear.Cell(0, 3).SetContent("Register No. :");
                        tblstudnameyear.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudnameyear.Cell(0, 4).SetContent(regnumber.Trim());
                        tblstudnameyear.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudnameyear.Cell(1, 0).SetColors(Color.DarkBlue, Color.White);
                        tblstudnameyear.Cell(1, 0).SetContent("Medium of Instruction :");
                        foreach (PdfCell pc in tblstudnameyear.CellRange(1, 0, 1, 0).Cells)
                        {
                            pc.ColSpan = 2;
                        }
                        tblstudnameyear.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudnameyear.Cell(1, 2).SetContent(medium);
                        //foreach (PdfCell pc in tblstudnameyear.CellRange(1, 1, 1, 1).Cells)
                        //{
                        //    pc.ColSpan = 3;
                        //}
                        tblstudnameyear.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleRight);
                        tblstudnameyear.Cell(1, 3).SetColors(Color.DarkBlue, Color.White);
                        tblstudnameyear.Cell(1, 3).SetContent("Date :");
                        tblstudnameyear.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudnameyear.Cell(1, 4).SetContent(issuedate);
                        PdfTablePage newpdftabpage2 = tblstudnameyear.CreateTablePage(new PdfArea(mydoc, 35, 169, 549, 60));
                        mypdfpage.Add(newpdftabpage2);
                        bool status = false;
                        bool wpm = true;
                        bool ab = false;
                        int mr = 0;
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            status = true;
                            PdfTable tblMarkStmt = mydoc.NewTable(Fontarial10b, printds_rows.Tables[0].Rows.Count + maxSem + 2, 8, 1);
                            tblMarkStmt.VisibleHeaders = false;
                            tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                            //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                            tblMarkStmt.SetColumnsWidth(new int[] { 35, 228, 50, 50, 48, 38, 35, 60 });
                            double totcredit = 0;
                            double summarkcredit = 0;
                            tblMarkStmt.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(0, 0).SetContent("CODE");
                            tblMarkStmt.Cell(0, 0).SetFont(Fontarial9);
                            tblMarkStmt.Cell(0, 0).SetCellPadding(0);
                            foreach (PdfCell pc in tblMarkStmt.CellRange(0, 0, 0, 0).Cells)
                            {
                                pc.RowSpan = 2;
                            }
                            tblMarkStmt.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(0, 1).SetContent("COURSE");
                            tblMarkStmt.Cell(0, 1).SetFont(Fontarial9);
                            tblMarkStmt.Cell(0, 1).SetCellPadding(0);
                            foreach (PdfCell pc in tblMarkStmt.CellRange(0, 1, 0, 1).Cells)
                            {
                                pc.RowSpan = 2;
                            }
                            tblMarkStmt.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(0, 2).SetCellPadding(0);
                            tblMarkStmt.Cell(0, 2).SetFont(Fontarial9);
                            tblMarkStmt.Cell(0, 2).SetContent("MARKS AWARDED");
                            foreach (PdfCell pc in tblMarkStmt.CellRange(0, 2, 0, 2).Cells)
                            {
                                pc.ColSpan = 3;
                            }
                            tblMarkStmt.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(1, 2).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(1, 2).SetCellPadding(1);
                            tblMarkStmt.Cell(1, 2).SetFont(Fontarial9);
                            tblMarkStmt.Cell(1, 2).SetContent("INTERNAL\n(40)");
                            tblMarkStmt.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(1, 3).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(1, 3).SetCellPadding(1);
                            tblMarkStmt.Cell(1, 3).SetFont(Fontarial9);
                            tblMarkStmt.Cell(1, 3).SetContent("EXTERNAL\n(60)");
                            tblMarkStmt.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(1, 4).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(1, 4).SetCellPadding(1);
                            tblMarkStmt.Cell(1, 4).SetFont(Fontarial9);
                            tblMarkStmt.Cell(1, 4).SetContent("TOTAL\n(100)");
                            tblMarkStmt.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(0, 5).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(0, 5).SetCellPadding(0);
                            tblMarkStmt.Cell(0, 5).SetFont(Fontarial9);
                            tblMarkStmt.Cell(0, 5).SetContent("RESULT");
                            foreach (PdfCell pc in tblMarkStmt.CellRange(0, 5, 0, 5).Cells)
                            {
                                pc.RowSpan = 2;
                            }
                            tblMarkStmt.Cell(0, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(0, 6).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(0, 6).SetCellPadding(0);
                            tblMarkStmt.Cell(0, 6).SetFont(Fontarial9);
                            tblMarkStmt.Cell(0, 6).SetContent("CREDIT");
                            foreach (PdfCell pc in tblMarkStmt.CellRange(0, 6, 0, 6).Cells)
                            {
                                pc.RowSpan = 2;
                            }
                            tblMarkStmt.Cell(0, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(0, 7).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(0, 7).SetCellPadding(0);
                            tblMarkStmt.Cell(0, 7).SetFont(Fontarial9);
                            tblMarkStmt.Cell(0, 7).SetContent("PASSED IN");
                            foreach (PdfCell pc in tblMarkStmt.CellRange(0, 7, 0, 7).Cells)
                            {
                                pc.RowSpan = 2;
                            }
                            ArrayList semarr = new ArrayList();
                            double[] semwisewam = new double[maxSem];
                            double wamprac = 0;
                            double prac_credit = 0;
                            for (int s = 0; s < maxSem; s++)
                            {
                                DataView dvSem = new DataView();
                                printds_rows.Tables[0].DefaultView.RowFilter = "semester='" + Convert.ToString(s + 1) + "' and  projThe=0";
                                dvSem = printds_rows.Tables[0].DefaultView;
                                double semwa = 0;
                                double semcredit = 0;
                                if (dvSem.Count > 0)
                                {
                                    if (!semarr.Contains(Convert.ToString(dvSem[0]["semester"]).Trim()))
                                    {
                                        semarr.Add(Convert.ToString(dvSem[0]["semester"]).Trim());
                                    }
                                    tblMarkStmt.Cell(mr + 2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    tblMarkStmt.Cell(mr + 2, 1).SetContent(Convert.ToString("SEMESTER - " + ToRoman(Convert.ToString(dvSem[0]["semester"]).Trim())));
                                    tblMarkStmt.Cell(mr + 2, 1).SetCellPadding(3);
                                    //semarr.Add(Convert.ToString(dvSem[0]["semester"]).Trim());
                                    mr++;
                                    for (int i = 0; i < dvSem.Count; i++)
                                    {
                                        tblMarkStmt.Cell(mr + 2, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(mr + 2, 0).SetContent(Convert.ToString(dvSem[i]["subject_code"]).Trim());
                                        bool rab = false;
                                        tblMarkStmt.Cell(mr + 2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMarkStmt.Cell(mr + 2, 1).SetContent(Convert.ToString(dvSem[i]["subject_name"]));
                                        double internalmmark = 0;
                                        double externalmark1 = 0;
                                        double totalintext = 0;
                                        double.TryParse(Convert.ToString(dvSem[i]["internal_mark"]), out internalmmark);
                                        double extfinal = 0;
                                        double.TryParse(Convert.ToString(dvSem[i]["external_mark"]), out extfinal);
                                        extfinal = Math.Round(extfinal, 0);
                                        externalmark1 = extfinal;
                                        string checkedmark = string.Empty;
                                        if (extfinal < 0)
                                        {
                                            checkedmark = loadmarkat(Convert.ToString(extfinal));
                                        }
                                        else
                                        {
                                            checkedmark = Convert.ToString(extfinal);
                                        }
                                        if (internalmmark >= 0)
                                        {
                                            if (extfinal > 0)
                                            {
                                                totalintext = internalmmark + externalmark1;
                                            }
                                            else
                                            {
                                                totalintext = internalmmark;
                                            }
                                        }
                                        else
                                        {
                                            if (extfinal > 0)
                                            {
                                                totalintext = externalmark1;
                                            }
                                            else
                                            {
                                                totalintext = 0;
                                            }
                                        }
                                        tblMarkStmt.Cell(mr + 2, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(mr + 2, 2).SetContent(internalmmark);
                                        tblMarkStmt.Cell(mr + 2, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(mr + 2, 3).SetContent(checkedmark);
                                        double totfinal = 0;
                                        totfinal = Math.Round(totalintext, 0);
                                        tblMarkStmt.Cell(mr + 2, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(mr + 2, 4).SetContent(Convert.ToString(totfinal));
                                        double creditpoint = 0;
                                        double.TryParse(Convert.ToString(dvSem[i]["credit_points"]), out creditpoint);
                                        double mrkcredit = 0;
                                        string result = dvSem[i]["result"].ToString();
                                        string r = string.Empty;
                                        //tblMarkStmt.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        if (result.ToUpper() == "PASS")
                                        {
                                            if (Convert.ToString(dvSem[i]["lab"]).Trim() == "True")
                                            {
                                                prac_credit += creditpoint;
                                                wamprac += totfinal * creditpoint;
                                            }
                                            r = "PASS";
                                            totcredit += creditpoint;
                                            mrkcredit = totfinal * creditpoint;
                                            semwa += mrkcredit;
                                            semcredit += creditpoint;
                                            summarkcredit += mrkcredit;
                                        }
                                        else if (result.ToUpper() == "FAIL")
                                        {
                                            r = "Reappear";
                                            //tblMarkStmt.Cell(i + 2, 5).SetFont(Fontarial9);    
                                        }
                                        else if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                        {
                                            ab = true;
                                            tblMarkStmt.Cell(mr + 2, 3).SetContent("AB");
                                            tblMarkStmt.Cell(mr + 2, 2).SetContent("0");
                                            tblMarkStmt.Cell(mr + 2, 4).SetContent("0");
                                            tblMarkStmt.Cell(mr + 2, 5).SetContent("AAA");
                                            tblMarkStmt.Cell(mr + 2, 6).SetContent("");
                                            tblMarkStmt.Cell(mr + 2, 7).SetContent("");
                                            if (extfinal == 0 || internalmmark == 0)
                                            {
                                                rab = true;
                                                //totcredit += creditpoint;
                                                //mrkcredit = totfinal * creditpoint;
                                                //summarkcredit += mrkcredit;
                                            }
                                            r = "AAA";
                                        }
                                        else if (result.ToUpper() == "RE-APPEAR" || result.ToUpper() == "REAPPEAR")
                                        {
                                            r = "RA";
                                        }
                                        else
                                        {
                                            r = result;
                                        }
                                        tblMarkStmt.Cell(mr + 2, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(mr + 2, 5).SetContent(r);
                                        tblMarkStmt.Cell(mr + 2, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(mr + 2, 6).SetContent(Convert.ToString(dvSem[i]["credit_points"]));
                                        tblMarkStmt.Cell(mr + 2, 7).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        if (result.Trim().ToUpper() == "FAIL")
                                        {
                                            wpm = false;
                                            tblMarkStmt.Cell(mr + 2, 7).SetContent("");
                                            tblMarkStmt.Cell(mr + 2, 6).SetContent("");
                                            tblMarkStmt.Cell(mr + 2, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        }
                                        if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                        {
                                            ab = true;
                                            tblMarkStmt.Cell(mr + 2, 6).SetContent("");
                                            tblMarkStmt.Cell(mr + 2, 7).SetContent("");
                                        }
                                        if (extfinal < 0)
                                        {
                                            ab = true;
                                            tblMarkStmt.Cell(mr + 2, 3).SetContent("AB");
                                            tblMarkStmt.Cell(mr + 2, 2).SetContent("0");
                                            tblMarkStmt.Cell(mr + 2, 4).SetContent("0");
                                            tblMarkStmt.Cell(mr + 2, 5).SetContent("AAA");
                                            tblMarkStmt.Cell(mr + 2, 6).SetContent("");
                                            tblMarkStmt.Cell(mr + 2, 7).SetContent("");
                                        }
                                        if (internalmmark < 0)
                                        {
                                            ab = true;
                                            tblMarkStmt.Cell(mr + 2, 3).SetContent("0");
                                            tblMarkStmt.Cell(mr + 2, 2).SetContent("AB");
                                            tblMarkStmt.Cell(mr + 2, 4).SetContent("0");
                                            tblMarkStmt.Cell(mr + 2, 5).SetContent("AAA");
                                            tblMarkStmt.Cell(mr + 2, 6).SetContent("");
                                            tblMarkStmt.Cell(mr + 2, 7).SetContent("");
                                        }
                                        //DataView dv1 = new DataView();
                                        //printds.Tables[2].DefaultView.RowFilter = "degree_code='" + degree_code + "' and batch_year='" + batch_year + "' ";//and Exam_year='" + batch_year.Split('-')[1] + "'
                                        //dv1 = printds.Tables[2].DefaultView;
                                        //dv1.Sort = "exam_code,current_semester";
                                        //if (dv1.Count > 0)
                                        //{
                                        //    string exam_y = dv1[0]["Exam_year"].ToString();
                                        //    string exam_m = dv1[0]["Exam_Month"].ToString();
                                        //   string  strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                        //   strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                        //    strMonthName = exam_y + " - " + strMonthName.ToUpper() + " ";
                                        //    tblMarkStmt.Cell(mr + 2, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //    tblMarkStmt.Cell(mr + 2, 7).SetContent(strMonthName);
                                        //}
                                        DataView dv = new DataView();
                                        printds.Tables[2].DefaultView.RowFilter = "exam_code='" + dvSem[i]["exam_code"].ToString() + "'";
                                        dv = printds.Tables[2].DefaultView;
                                        if (dv.Count > 0)
                                        {
                                            string exam_y = Convert.ToString(dv[0]["Exam_year"]).Trim();
                                            string exam_m = Convert.ToString(dv[0]["Exam_Month"]).Trim();
                                            string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                            strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                            strMonthName = strMonthName.Trim() + "-" + exam_y.Trim();
                                            tblMarkStmt.Cell(mr + 2, 7).SetContent(strMonthName);
                                            tblMarkStmt.Cell(mr + 2, 7).SetCellPadding(3);
                                        }
                                        //tblMarkStmt.Cell(mr + 2, 7).SetContent(mrkcredit);
                                        mr++;
                                    }
                                    semwisewam[s] = Math.Round((semwa / semcredit), 0, MidpointRounding.AwayFromZero);
                                }
                            }
                            newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 35, 233, 549, 260));
                            mypdfpage.Add(newpdftabpage2);
                            DataView dvThesis = new DataView();
                            printds_rows.Tables[0].DefaultView.RowFilter = " projThe=1";
                            dvThesis = printds_rows.Tables[0].DefaultView;
                            if (dvThesis.Count == 0)
                            {
                                tblMarkStmt = mydoc.NewTable(Fontarial10b, 2, 8, 5);
                            }
                            else
                            {
                                tblMarkStmt = mydoc.NewTable(Fontarial10b, dvThesis.Count + 1, 8, 3);
                            }
                            tblMarkStmt.VisibleHeaders = false;
                            tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                            //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                            tblMarkStmt.SetColumnsWidth(new int[] { 35, 235, 52, 52, 48, 52, 38, 48 });
                            tblMarkStmt.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(0, 2).SetCellPadding(0);
                            tblMarkStmt.Cell(0, 2).SetFont(Fontarial9);
                            tblMarkStmt.Cell(0, 2).SetContent("INTERNAL\n(80)");
                            tblMarkStmt.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(0, 3).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(0, 3).SetCellPadding(0);
                            tblMarkStmt.Cell(0, 3).SetFont(Fontarial9);
                            tblMarkStmt.Cell(0, 3).SetContent("EXTERNAL\n(120)");
                            tblMarkStmt.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(0, 4).SetColors(Color.DarkBlue, Color.White);
                            tblMarkStmt.Cell(0, 4).SetCellPadding(0);
                            tblMarkStmt.Cell(0, 4).SetFont(Fontarial9);
                            tblMarkStmt.Cell(0, 4).SetContent("TOTAL\n(200)");
                            double thesiscredit = 0;
                            double sumthesis = 0;
                            if (dvThesis.Count > 0)
                            {
                                for (int thesis = 0; thesis < dvThesis.Count; thesis++)
                                {
                                    bool rab = false;
                                    tblMarkStmt.Cell(thesis + 1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    tblMarkStmt.Cell(thesis + 1, 1).SetContent(Convert.ToString(dvThesis[thesis]["subject_name"]));
                                    double internalmmark = 0;
                                    double externalmark1 = 0;
                                    double totalintext = 0;
                                    double.TryParse(Convert.ToString(dvThesis[thesis]["internal_mark"]), out internalmmark);
                                    double extfinal = 0;
                                    double.TryParse(Convert.ToString(dvThesis[thesis]["external_mark"]), out extfinal);
                                    extfinal = Math.Round(extfinal, 0);
                                    externalmark1 = extfinal;
                                    string checkedmark = string.Empty;
                                    if (extfinal < 0)
                                    {
                                        checkedmark = loadmarkat(Convert.ToString(extfinal));
                                    }
                                    else
                                    {
                                        checkedmark = Convert.ToString(extfinal);
                                    }
                                    if (internalmmark >= 0)
                                    {
                                        if (extfinal > 0)
                                        {
                                            totalintext = internalmmark + externalmark1;
                                        }
                                        else
                                        {
                                            totalintext = internalmmark;
                                        }
                                    }
                                    else
                                    {
                                        if (extfinal > 0)
                                        {
                                            totalintext = externalmark1;
                                        }
                                        else
                                        {
                                            totalintext = 0;
                                        }
                                    }
                                    tblMarkStmt.Cell(thesis + 1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(thesis + 1, 2).SetContent(internalmmark);
                                    tblMarkStmt.Cell(thesis + 1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(thesis + 1, 3).SetContent(checkedmark);
                                    double totfinal = 0;
                                    totfinal = Math.Round(totalintext, 0);
                                    tblMarkStmt.Cell(thesis + 1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(thesis + 1, 4).SetContent(Convert.ToString(totfinal));
                                    double creditpoint = 0;
                                    double.TryParse(Convert.ToString(dvThesis[thesis]["credit_points"]), out creditpoint);
                                    double mrkcredit = 0;
                                    string result = dvThesis[thesis]["result"].ToString();
                                    string r = string.Empty;
                                    //tblMarkStmt.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    if (result.ToUpper() == "PASS")
                                    {
                                        r = "PASS";
                                        thesiscredit += creditpoint;
                                        mrkcredit = totfinal * creditpoint;
                                        sumthesis += mrkcredit;
                                    }
                                    else if (result.ToUpper() == "FAIL")
                                    {
                                        r = "Reappear";
                                        //tblMarkStmt.Cell(i + 2, 5).SetFont(Fontarial9);                                                
                                    }
                                    else if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                    {
                                        ab = true;
                                        tblMarkStmt.Cell(thesis + 1, 3).SetContent("AB");
                                        tblMarkStmt.Cell(thesis + 1, 2).SetContent("0");
                                        tblMarkStmt.Cell(thesis + 1, 4).SetContent("0");
                                        tblMarkStmt.Cell(thesis + 1, 5).SetContent("AAA");
                                        tblMarkStmt.Cell(thesis + 1, 6).SetContent("");
                                        tblMarkStmt.Cell(thesis + 1, 7).SetContent("");
                                        if (extfinal == 0 || internalmmark == 0)
                                        {
                                            rab = true;
                                            //totcredit += creditpoint;
                                            //mrkcredit = totfinal * creditpoint;
                                            //summarkcredit += mrkcredit;
                                        }
                                        r = "AAA";
                                    }
                                    else if (result.ToUpper() == "RE-APPEAR" || result.ToUpper() == "REAPPEAR")
                                    {
                                        r = "RA";
                                    }
                                    else
                                    {
                                        r = result;
                                    }
                                    tblMarkStmt.Cell(thesis + 1, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(thesis + 1, 5).SetContent(r);
                                    tblMarkStmt.Cell(thesis + 1, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMarkStmt.Cell(thesis + 1, 7).SetContent(mrkcredit);
                                    tblMarkStmt.Cell(thesis + 1, 6).SetContent(Convert.ToString(dvThesis[thesis]["credit_points"]));
                                    tblMarkStmt.Cell(thesis + 1, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    if (result.Trim().ToUpper() == "FAIL")
                                    {
                                        wpm = false;
                                        tblMarkStmt.Cell(thesis + 1, 7).SetContent("");
                                        tblMarkStmt.Cell(thesis + 1, 6).SetContent("");
                                        tblMarkStmt.Cell(thesis + 1, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    }
                                    if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                    {
                                        ab = true;
                                        tblMarkStmt.Cell(thesis + 1, 6).SetContent("");
                                        tblMarkStmt.Cell(thesis + 1, 7).SetContent("");
                                    }
                                    if (extfinal < 0)
                                    {
                                        ab = true;
                                        tblMarkStmt.Cell(thesis + 1, 3).SetContent("AB");
                                        tblMarkStmt.Cell(thesis + 1, 2).SetContent("0");
                                        tblMarkStmt.Cell(thesis + 1, 4).SetContent("0");
                                        tblMarkStmt.Cell(thesis + 1, 5).SetContent("AAA");
                                        tblMarkStmt.Cell(thesis + 1, 6).SetContent("");
                                        tblMarkStmt.Cell(thesis + 1, 7).SetContent("");
                                    }
                                    if (internalmmark < 0)
                                    {
                                        ab = true;
                                        tblMarkStmt.Cell(thesis + 1, 3).SetContent("0");
                                        tblMarkStmt.Cell(thesis + 1, 2).SetContent("AB");
                                        tblMarkStmt.Cell(thesis + 1, 4).SetContent("0");
                                        tblMarkStmt.Cell(thesis + 1, 5).SetContent("AAA");
                                        tblMarkStmt.Cell(thesis + 1, 6).SetContent("");
                                        tblMarkStmt.Cell(thesis + 1, 7).SetContent("");
                                    }
                                    DataView dv = new DataView();
                                    printds.Tables[2].DefaultView.RowFilter = "exam_code='" + dvThesis[thesis]["exam_code"].ToString() + "'";
                                    dv = printds.Tables[2].DefaultView;
                                    if (dv.Count > 0)
                                    {
                                        string exam_y = Convert.ToString(dv[0]["Exam_year"]).Trim();
                                        string exam_m = Convert.ToString(dv[0]["Exam_Month"]).Trim();
                                        string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                        strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                        strMonthName = strMonthName.Trim() + "-" + exam_y.Trim();
                                        tblMarkStmt.Cell(thesis + 1, 7).SetContent(strMonthName);
                                        tblMarkStmt.Cell(thesis + 1, 7).SetCellPadding(1);
                                    }
                                }
                            }
                            newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 35, 500, 549, 200));
                            mypdfpage.Add(newpdftabpage2);
                            PdfTextArea pdftxt = new PdfTextArea(Font10bold, Color.DarkBlue, new PdfArea(mydoc, 37, 786, 275, 50), ContentAlignment.TopCenter, "CONTROLLER OF EXAMINATIONS");
                            mypdfpage.Add(pdftxt);
                            pdftxt = new PdfTextArea(Font10bold, Color.DarkBlue, new PdfArea(mydoc, 300, 786, 340, 50), ContentAlignment.TopCenter, "PRINCIPAL");
                            mypdfpage.Add(pdftxt);
                            pdftxt = new PdfTextArea(Fontwma, Color.DarkBlue, new PdfArea(mydoc, 37, 805, 540, 30), ContentAlignment.TopCenter, "Passing Minimum : Internal Assessment - 20 Marks, External Assessment - 30 Marks, Aggregate - 50 Marks");
                            mypdfpage.Add(pdftxt);
                            pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 90, 575, 275, 30), ContentAlignment.MiddleLeft, "WRITTEN EXAMINATION");
                            mypdfpage.Add(pdftxt);
                            double written = (summarkcredit != 0 && totcredit != 0) ? Math.Round((summarkcredit / totcredit), 0, MidpointRounding.AwayFromZero) : 0;
                            tblMarkStmt = mydoc.NewTable(Fontarial10b, maxSem + 1, 3, 2);
                            tblMarkStmt.VisibleHeaders = false;
                            tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                            //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                            tblMarkStmt.SetColumnsWidth(new int[] { 228, 30, 50 });
                            for (int se = 0; se < semarr.Count; se++)
                            {
                                //tblMarkStmt.Cell(se, 0).SetCellPadding(0);
                                tblMarkStmt.Cell(se, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblMarkStmt.Cell(se, 0).SetContent("Semester " + ToRoman(Convert.ToString(se + 1)) + " Weighted Average Marks");
                                //tblMarkStmt.Cell(se, 1).SetCellPadding(0);
                                tblMarkStmt.Cell(se, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblMarkStmt.Cell(se, 1).SetContent(" : ");
                                //tblMarkStmt.Cell(se, 2).SetCellPadding(0);
                                tblMarkStmt.Cell(se, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblMarkStmt.Cell(se, 2).SetContent(Convert.ToString(semwisewam[se]));
                            }
                            //tblMarkStmt.Cell(maxSem, 0).SetCellPadding(0);
                            //tblMarkStmt.Cell(maxSem, 1).SetCellPadding(0);
                            //tblMarkStmt.Cell(maxSem, 2).SetCellPadding(0);
                            tblMarkStmt.Cell(maxSem, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblMarkStmt.Cell(maxSem, 0).SetContent("Final Weighted Average Marks");
                            tblMarkStmt.Cell(maxSem, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblMarkStmt.Cell(maxSem, 1).SetContent(" : ");
                            tblMarkStmt.Cell(maxSem, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblMarkStmt.Cell(maxSem, 2).SetContent(written);
                            newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 95, 590, 280, 60));
                            mypdfpage.Add(newpdftabpage2);
                            double practicalwam = Math.Round(((sumthesis != 0 && thesiscredit != 0) ? Math.Round((sumthesis / thesiscredit), 0, MidpointRounding.AwayFromZero) : 0) / 2, 0, MidpointRounding.AwayFromZero);
                            pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 90, 645, 275, 30), ContentAlignment.MiddleLeft, "THESIS EXAMINATION");
                            mypdfpage.Add(pdftxt);
                            tblMarkStmt = mydoc.NewTable(Fontarial10b, 1, 3, 1);
                            tblMarkStmt.VisibleHeaders = false;
                            tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                            //tblMarkStmt.SetColumnsWidth(new int[] { 40, 80, 350, 41, 41, 41, 41 });   
                            tblMarkStmt.SetColumnsWidth(new int[] { 228, 30, 50 });
                            tblMarkStmt.Cell(0, 0).SetCellPadding(0);
                            tblMarkStmt.Cell(0, 1).SetCellPadding(0);
                            tblMarkStmt.Cell(0, 2).SetCellPadding(0);
                            tblMarkStmt.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblMarkStmt.Cell(0, 0).SetContent("Weighted Average Marks");
                            tblMarkStmt.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblMarkStmt.Cell(0, 1).SetContent(" : ");
                            tblMarkStmt.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblMarkStmt.Cell(0, 2).SetContent(practicalwam);
                            newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 95, 665, 280, 30));
                            mypdfpage.Add(newpdftabpage2);
                            //pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 37, 685, 550, 20), ContentAlignment.MiddleCenter, "Passed the " + degree + " Degree Examination");
                            //mypdfpage.Add(pdftxt);
                            //pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 37, 700, 550, 20), ContentAlignment.MiddleCenter, "with");
                            //mypdfpage.Add(pdftxt);
                            string wrtclassify = string.Empty;
                            string batchsetting = "1";
                            if (noofsubfailed != 0 && written >= 6)
                            {
                                string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + written + "'>= frompoint and '" + written + "'<= topoint and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014  and (classification='First Class' or classification='First')
                                gradeds.Clear();
                                gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                string cclass = "First Class";
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                {
                                    wrtclassify = cclass;
                                }
                                else
                                {
                                    wrtclassify = cclass;
                                }
                            }
                            else
                            {
                                string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + written + "'>= frompoint and '" + written + "'<= topoint and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014
                                gradeds.Clear();
                                gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                {
                                    wrtclassify = Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]);
                                }
                            }
                            string pracclassify = string.Empty;
                            batchsetting = "1";
                            if (noofsubfailed != 0 && practicalwam >= 6)
                            {
                                string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + practicalwam + "'>= frompoint and '" + practicalwam + "'<= topoint and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014  and (classification='First Class' or classification='First')
                                gradeds.Clear();
                                gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                string cclass = "First Class";
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                {
                                    pracclassify = cclass;
                                }
                                else
                                {
                                    pracclassify = cclass;
                                }
                            }
                            else
                            {
                                string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + practicalwam + "'>= frompoint and '" + practicalwam + "'<= topoint and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014
                                gradeds.Clear();
                                gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                {
                                    pracclassify = Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]);
                                }
                            }
                            pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 37, 715, 550, 20), ContentAlignment.MiddleCenter, wrtclassify + " in Written Examination");
                            mypdfpage.Add(pdftxt);
                            pdftxt = new PdfTextArea(Fontarial10b, Color.DarkBlue, new PdfArea(mydoc, 37, 730, 550, 20), ContentAlignment.MiddleCenter, pracclassify + " in Thesis Examination");
                            mypdfpage.Add(pdftxt);
                            //Top Horizantal Line 1
                            PdfLine pl = new PdfLine(mydoc, new Point(30, 155), new Point(585, 155), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Horizandal Line 2
                            pl = new PdfLine(mydoc, new Point(30, 230), new Point(585, 230), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Horizandal Line 3
                            pl = new PdfLine(mydoc, new Point(298, 243), new Point(447, 243), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Horizandal Line 4
                            pl = new PdfLine(mydoc, new Point(30, 266), new Point(585, 266), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            ////Horizandal Line 5
                            //pl = new PdfLine(mydoc, new Point(30, 567), new Point(585, 567), Color.DarkBlue, 1);
                            //mypdfpage.Add(pl);
                            //Horizandal Line 6
                            pl = new PdfLine(mydoc, new Point(30, 497), new Point(585, 497), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Horizandal Line 3
                            pl = new PdfLine(mydoc, new Point(298, 525), new Point(447, 525), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Horizandal Line 6
                            pl = new PdfLine(mydoc, new Point(30, 578), new Point(585, 578), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            ////Horizandal Line 7
                            //pl = new PdfLine(mydoc, new Point(30, 669), new Point(585, 669), Color.DarkBlue, 1);
                            //mypdfpage.Add(pl);
                            //Horizandal Line 8
                            pl = new PdfLine(mydoc, new Point(30, 740), new Point(585, 740), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Horizandal Line 9
                            pl = new PdfLine(mydoc, new Point(30, 800), new Point(585, 800), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            ////Horizandal Line 10 for Tot(M X C) / totcredit
                            //pl = new PdfLine(mydoc, new Point(226, 621), new Point(365, 621), Color.Black, 1);
                            //mypdfpage.Add(pl);
                            //Vertical Line 1 
                            pl = new PdfLine(mydoc, new Point(71, 230), new Point(71, 578), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Vertical Line 2
                            pl = new PdfLine(mydoc, new Point(298, 230), new Point(298, 578), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Vertical Line 3
                            pl = new PdfLine(mydoc, new Point(350, 243), new Point(350, 578), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Vertical Line 4
                            pl = new PdfLine(mydoc, new Point(404, 243), new Point(404, 578), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Vertical Line 5
                            pl = new PdfLine(mydoc, new Point(447, 230), new Point(447, 578), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Vertical Line 6
                            pl = new PdfLine(mydoc, new Point(489, 230), new Point(489, 578), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                            //Vertical Line 7
                            pl = new PdfLine(mydoc, new Point(525, 230), new Point(525, 578), Color.DarkBlue, 1);
                            mypdfpage.Add(pl);
                        }
                        if (status == true)
                            mypdfpage.SaveToDocument();
                    }
                }
            }
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
            }
        }
        catch (Exception ex)
        {
        }
    }

    //FOR CHRISTOBER COLLEGE TO MPHIL MARKS SHEETS
    public void ugmarkstatementformatForMphil()
    {
        try
        {
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            //DataSet semwisegpa = new DataSet();
            string degree = string.Empty;
            string degname = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string issuedate = string.Empty;
            string semroman = "", edu_level = string.Empty;
            string coe = string.Empty;
            DataSet gradeds = new DataSet();
            lblerror.Visible = false;
            lblerror.Text = string.Empty;
            bool isSupplementaryExam = false;
            string SupplementaryExam = string.Empty;
            Font fondColName = new Font("Comic Sans MS", 18, FontStyle.Bold);
            Font fontdegexam = new Font("Arial", 12, FontStyle.Bold);
            Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco11 = new Font("Comic Sans MS", 11, FontStyle.Bold);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
            Font Fontwma = new Font("Arial", 8, FontStyle.Bold);
            Font Font8bold = new Font("Arial", 8, FontStyle.Bold);
            Font Font10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            DataTable dtPart1 = new DataTable();
            DataTable dtPart2 = new DataTable();
            DataTable dtPart3 = new DataTable();
            DataTable dtPart4 = new DataTable();
            Font Fontarial9 = new Font("Arial", 9, FontStyle.Bold);
            Font Fontarial10b = new Font("Arial", 11, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            Font Fontarialb12 = new Font("Arial", 12, FontStyle.Bold);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.3, 30.3));
            PdfPage mypdfpage;
            PdfTablePage newpdftabpage2;
            PdfTextArea pdftxt;
            if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
            {
                string strquery = "select *,district+' - '+pincode  as districtpin from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                ds.Dispose();
                ds.Reset();
                ds = d2.select_method_wo_parameter(strquery, "Text");
                string Collegename = string.Empty;
                string aff = string.Empty;
                string collacr = string.Empty;
                string dispin = string.Empty;
                string clgaddress = string.Empty;
                string univ = string.Empty;
                string pincode = string.Empty;
                string urcollegecode = string.Empty;
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    Collegename = ds.Tables[0].Rows[0]["Collname"].ToString();
                    aff = ds.Tables[0].Rows[0]["affliatedby"].ToString();
                    univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                    string[] strpa = aff.Split(',');
                    aff = "( " + univ + " " + strpa[0] + " )";
                    //coename = ds.Tables[0].Rows[0]["coe"].ToString();
                    collacr = ds.Tables[0].Rows[0]["acr"].ToString();
                    urcollegecode = Convert.ToString(ds.Tables[0].Rows[0]["acr"]).Trim();
                    pincode = Convert.ToString(ds.Tables[0].Rows[0]["pincode"]).Trim();
                    pincode = pincode.Substring(pincode.Length - 3);
                    int pin = 0;
                    int.TryParse(pincode, out pin);
                    //((pincode.Length > 0) ? pincode.Substring(pincode.Length - 1) : ""
                    //char[] pin = pincode.Substring(pincode.Length - 1);
                    clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]) + " , " + Convert.ToString(ds.Tables[0].Rows[0]["district"]) + ((pin != 0) ? (" - " + pin.ToString()) : " - " + pincode);
                    clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);
                    dispin = ds.Tables[0].Rows[0]["districtpin"].ToString();
                }
                FpSpread2.SaveChanges();
                for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
                {
                    int isval = 0;
                    isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                    if (isval == 1)
                    {
                        printds.Clear();
                        printds.Dispose();
                        printds_new.Clear();
                        printds_new.Dispose();
                        bool hasMarks = false;
                        rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                        regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                        string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 104) as dob,C.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';";
                        printds = da.select_method_wo_parameter(sql, "Text");
                        if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                        {
                            mypdfpage = mydoc.NewPage();
                            string app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]);
                            degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                            //month = ddlMonth.SelectedIndex;
                            //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                            int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                            monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                            string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                            monthandyear = strMonthName + " - " + Convert.ToString(ddlYear.SelectedItem.Text).Trim().Substring(2, 2);
                            monthandyear = monthandyear.ToUpper();
                            studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                            issuedate = Convert.ToString(txtdoi.Text);
                            branch = printds.Tables[0].Rows[0]["Dept_name"].ToString();
                            dob = printds.Tables[0].Rows[0]["dob"].ToString();
                            edu_level = Convert.ToString(printds.Tables[0].Rows[0]["Edu_Level"]).Trim();
                            string stdappno = printds.Tables[0].Rows[0]["App_No"].ToString();
                            batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                            degree_code = printds.Tables[0].Rows[0]["degree_code"].ToString();
                            int tblHeight = 0;
                            int pageY = 0;
                            string medium = d2.GetFunctionv("select TextVal from TextValTable where TextCriteria='medi' and college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and TextCode in(select isnull(medium_ins,0) from applyn  where app_no='" + app_no + "')");
                            sql2 = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                            printds_new = da.select_method_wo_parameter(sql2, "Text");
                            if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                            {
                                sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]);
                                SupplementaryExam = string.Empty;
                                SupplementaryExam = Convert.ToString(printds_new.Tables[0].Rows[0]["isSupplementaryExam"]).Trim();
                                bool.TryParse(SupplementaryExam.Trim(), out isSupplementaryExam);
                                string Supplementary = string.Empty;// "[ SUPPLEMENTARY ]";
                                if (isSupplementaryExam)
                                {
                                    Supplementary = "[ SUPPLEMENTARY ]";
                                }
                                if (sem == "1")
                                {
                                    semroman = "I";
                                }
                                else if (sem == "2")
                                {
                                    semroman = "II";
                                }
                                else if (sem == "3")
                                {
                                    semroman = "III";
                                }
                                else if (sem == "4")
                                {
                                    semroman = "IV";
                                }
                                else if (sem == "5")
                                {
                                    semroman = "V";
                                }
                                else if (sem == "6")
                                {
                                    semroman = "VI";
                                }
                                else if (sem == "7")
                                {
                                    semroman = "VII";
                                }
                                else if (sem == "8")
                                {
                                    semroman = "VIII";
                                }
                                //PdfTextArea pdfdoi = new PdfTextArea(Fontco10, System.Drawing.Color.Black, new PdfArea(mydoc, 113, 803, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                                //mypdfpage.Add(pdfdoi);mydoc.PageWidth-50
                                PdfTextArea pdfHeader = new PdfTextArea(fondColName, Color.DarkBlue, new PdfArea(mydoc, 30, 40, 550, 50), ContentAlignment.MiddleCenter, Collegename + ", " + clgaddress);
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(Fontarial7, Color.DarkBlue, new PdfArea(mydoc, 30, 55, 550, 50), ContentAlignment.MiddleCenter, aff);
                                mypdfpage.Add(pdfHeader);
                                string fullTimeorPartTime = d2.GetFunctionv("select case when isnull(ltrim(rtrim(isFullTime)),'0')=0 then 'Full Time' else 'Part Time' end as Full_or_Part  from Degree where Degree_Code='" + degree_code + "'");
                                pdfHeader = new PdfTextArea(fontdegexam, Color.DarkBlue, new PdfArea(mydoc, 30, 78, 550, 50), ContentAlignment.MiddleCenter, degree + " DEGREE EXAMINATION\t(" + fullTimeorPartTime + ") " + Supplementary);
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(fondColName, Color.DarkBlue, new PdfArea(mydoc, 30, 116, 550, 50), ContentAlignment.MiddleCenter, "STATEMENT OF MARKS");
                                mypdfpage.Add(pdfHeader);
                                //pl = new PdfLine(mydoc, new Point(30, 778), new Point(585, 778), Color.DarkBlue, 1);
                                //mypdfpage.Add(pl);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))
                                {
                                    PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
                                    mypdfpage.Add(LogoImage, 40, 82, 415);
                                }
                                exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]).Trim();
                                sql3 = "Select semester,subject_code,subject_name,subject_type,isnull(min_int_marks,0) as min_int_marks,isnull(max_int_marks,0) as max_int_marks,isnull(internal_mark,0) as internal_mark,isnull(min_ext_marks,0) as min_ext_marks,isnull(max_ext_marks,0) as max_ext_marks,isnull(external_mark,0) as external_mark,isnull(mintotal,0) as mintotal,isnull(maxtotal,0) as maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,subject.subjectpriority,sub_sem.lab,isnull(sub_sem.projThe,0) as projThe from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = '" + exam_code + "' and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester desc,subject.subjectpriority,sub_sem.lab,sub_sem.projThe;";// order by syllabus_master.semester,Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;
                                printds_rows.Clear();
                                printds_rows.Dispose();
                                printds_rows = da.select_method_wo_parameter(sql3, "Text");
                                string stdphtsql = "select * from StdPhoto where app_no='" + stdappno + "'";
                                MemoryStream memoryStream = new MemoryStream();
                                DataSet dsstdpho = new DataSet();
                                dsstdpho.Clear();
                                dsstdpho.Dispose();
                                dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                                if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                                {
                                    byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                                    memoryStream.Write(file, 0, file.Length);
                                    if (file.Length > 0)
                                    {
                                        System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                        System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                        {
                                            //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                        }
                                        else
                                        {
                                            thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                            //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                        }
                                    }
                                }
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                {
                                    PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                                    mypdfpage.Add(LogoImage2, 510, 82, 420);
                                }
                                else
                                {
                                    PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                    mypdfpage.Add(LogoImage2, 510, 82, 420);
                                }
                                pageY = 155;
                                //Top Horizantal Line 1
                                //PdfLine pl = new PdfLine(mydoc, new Point(30, 155), new Point(585, 155), Color.DarkBlue, 1);
                                //mypdfpage.Add(pl);
                                PdfTable pdfStudDetails = mydoc.NewTable(Fontarial10b, 2, 3, 6);
                                pdfStudDetails.VisibleHeaders = false;
                                pdfStudDetails.SetBorders(Color.DarkBlue, 1, BorderType.Columns);
                                pdfStudDetails.SetColumnsWidth(new int[] { 300, 200, 150 });
                                pdfStudDetails.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdfStudDetails.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                pdfStudDetails.Cell(0, 0).SetContent("NAME OF THE CANDIDATE");
                                pdfStudDetails.Cell(0, 0).SetFont(Fontarial9);
                                pdfStudDetails.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdfStudDetails.Cell(1, 0).SetColors(Color.Black, Color.White);
                                pdfStudDetails.Cell(1, 0).SetContent(studname);
                                pdfStudDetails.Cell(1, 0).SetFont(Fontarial9);
                                pdfStudDetails.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdfStudDetails.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                pdfStudDetails.Cell(0, 1).SetContent("BRANCH NAME");
                                pdfStudDetails.Cell(0, 1).SetFont(Fontarial9);
                                pdfStudDetails.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdfStudDetails.Cell(1, 1).SetColors(Color.Black, Color.White);
                                pdfStudDetails.Cell(1, 1).SetContent(branch);
                                pdfStudDetails.Cell(1, 1).SetFont(Fontarial9);
                                pdfStudDetails.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdfStudDetails.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                                pdfStudDetails.Cell(0, 2).SetContent("DATE OF BIRTH");
                                pdfStudDetails.Cell(0, 2).SetFont(Fontarial9);
                                pdfStudDetails.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdfStudDetails.Cell(1, 2).SetColors(Color.Black, Color.White);
                                pdfStudDetails.Cell(1, 2).SetContent(dob);
                                pdfStudDetails.Cell(1, 2).SetFont(Fontarial9);
                                PdfTablePage newpdftabpage12 = pdfStudDetails.CreateTablePage(new PdfArea(mydoc, 30, 156, 554, 200));
                                mypdfpage.Add(newpdftabpage12);
                                PdfLine pline = newpdftabpage12.Area.LowerBound(Color.DarkBlue, 1);
                                mypdfpage.Add(pline);
                                pline = newpdftabpage12.Area.UpperBound(Color.DarkBlue, 1);
                                mypdfpage.Add(pline);
                                tblHeight = Convert.ToInt16(newpdftabpage12.Area.Height);
                                pageY += tblHeight + 1;
                                ////Top Horizantal Line 2
                                //pl = new PdfLine(mydoc, new Point(30, pageY), new Point(585, pageY), Color.DarkBlue, 1);
                                //mypdfpage.Add(pl);
                                //pl = new PdfLine(mydoc, new Point(300, 155), new Point(300, pageY), Color.Black, 1);
                                //mypdfpage.Add(pl);
                                pdfStudDetails = mydoc.NewTable(Fontarial10b, 2, 4, 6);
                                pdfStudDetails.VisibleHeaders = false;
                                pdfStudDetails.SetBorders(Color.DarkBlue, 1, BorderType.Columns);
                                pdfStudDetails.SetColumnsWidth(new int[] { 300, 200, 150, 150 });
                                pdfStudDetails.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdfStudDetails.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                pdfStudDetails.Cell(0, 0).SetContent("Reg. No:");
                                pdfStudDetails.Cell(0, 0).SetFont(Fontarial9);
                                pdfStudDetails.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdfStudDetails.Cell(1, 0).SetColors(Color.Black, Color.White);
                                pdfStudDetails.Cell(1, 0).SetContent(regnumber);
                                pdfStudDetails.Cell(1, 0).SetFont(Fontarial9);
                                pdfStudDetails.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdfStudDetails.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                pdfStudDetails.Cell(0, 1).SetContent("Month & Year");
                                pdfStudDetails.Cell(0, 1).SetFont(Fontarial9);
                                pdfStudDetails.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdfStudDetails.Cell(1, 1).SetColors(Color.Black, Color.White);
                                pdfStudDetails.Cell(1, 1).SetContent(monthandyear);
                                pdfStudDetails.Cell(1, 1).SetFont(Fontarial9);
                                pdfStudDetails.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdfStudDetails.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                                pdfStudDetails.Cell(0, 2).SetContent("Date of Publication");
                                pdfStudDetails.Cell(0, 2).SetFont(Fontarial9);
                                pdfStudDetails.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdfStudDetails.Cell(1, 2).SetColors(Color.Black, Color.White);
                                pdfStudDetails.Cell(1, 2).SetContent(txtdop.Text.Trim().Replace("/", "."));
                                pdfStudDetails.Cell(1, 2).SetFont(Fontarial9);
                                pdfStudDetails.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdfStudDetails.Cell(0, 3).SetColors(Color.DarkBlue, Color.White);
                                pdfStudDetails.Cell(0, 3).SetContent("College Code");
                                pdfStudDetails.Cell(0, 3).SetFont(Fontarial9);
                                pdfStudDetails.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdfStudDetails.Cell(1, 3).SetColors(Color.Black, Color.White);
                                pdfStudDetails.Cell(1, 3).SetContent(urcollegecode);
                                pdfStudDetails.Cell(1, 3).SetFont(Fontarial9);
                                newpdftabpage2 = pdfStudDetails.CreateTablePage(new PdfArea(mydoc, 30, pageY, 554, 200));
                                mypdfpage.Add(newpdftabpage2);
                                pline = newpdftabpage2.Area.LowerBound(Color.DarkBlue, 1);
                                mypdfpage.Add(pline);
                                tblHeight = Convert.ToInt16(newpdftabpage2.Area.Height);
                                pageY += tblHeight + 1;
                                ////Top Horizantal Line 2
                                //pl = new PdfLine(mydoc, new Point(30, pageY), new Point(585, pageY), Color.DarkBlue, 1);
                                //mypdfpage.Add(pl);
                                bool ab = false;
                                bool onlyica = false;
                                bool onlyesa = false;
                                double[] subTypeWiseTotal = new double[0];
                                string[] subTypeNames = new string[0];
                                double theoryAverage = 0;
                                double thesisAverage = 0;
                                double theoryPassCount = 0;
                                double thesisPassCount = 0;
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    DataTable dtTheory = new DataTable();
                                    DataTable dtTheorySubType = new DataTable();
                                    DataTable dtThesis = new DataTable();
                                    DataTable dtThesisSubType = new DataTable();
                                    ArrayList arrSubType = new ArrayList();
                                    DataTable dtSubType = printds_rows.Tables[0].DefaultView.ToTable(true, "subject_type", "projThe");
                                    printds_rows.Tables[0].DefaultView.RowFilter = "projThe=0";
                                    dtTheory = printds_rows.Tables[0].DefaultView.ToTable();
                                    printds_rows.Tables[0].DefaultView.RowFilter = "projThe=1";
                                    dtThesis = printds_rows.Tables[0].DefaultView.ToTable();
                                    int totalType = 1;
                                    //int TotalRows=0
                                    if (dtTheory.Rows.Count > 0)
                                    {
                                        onlyica = false;
                                        onlyesa = false;
                                        hasMarks = true;
                                        arrSubType.Clear();
                                        dtTheorySubType = dtTheory.DefaultView.ToTable(true, "subject_type", "projThe");
                                        PdfTable tblMarkStmt = mydoc.NewTable(Fontarial10b, dtTheory.Rows.Count + 2 + dtTheorySubType.Rows.Count, 7, 10);
                                        tblMarkStmt.VisibleHeaders = false;
                                        tblMarkStmt.SetBorders(Color.DarkBlue, 1, BorderType.None);
                                        tblMarkStmt.SetColumnsWidth(new int[] { 75, 65, 200, 55, 55, 63, 100 });
                                        double totcredit = 0;
                                        double summarkcredit = 0;
                                        tblMarkStmt.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 0).SetContent("SUB CODE");
                                        tblMarkStmt.Cell(0, 0).SetFont(Fontarial9);
                                        //foreach (PdfCell pc in tblMarkStmt.CellRange(0, 0, 0, 0).Cells)
                                        //{
                                        //    pc.RowSpan = 2;
                                        //}
                                        tblMarkStmt.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 1).SetContent("COURSE");
                                        tblMarkStmt.Cell(0, 1).SetFont(Fontarial9);
                                        foreach (PdfCell pc in tblMarkStmt.CellRange(0, 1, 0, 1).Cells)
                                        {
                                            pc.ColSpan = 2;
                                        }
                                        tblMarkStmt.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 3).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 3).SetFont(Fontarial9);
                                        tblMarkStmt.Cell(0, 3).SetContent("INTERNAL\n(20)");
                                        //foreach (PdfCell pc in tblMarkStmt.CellRange(0, 2, 0, 2).Cells)
                                        //{
                                        //    pc.RowSpan = 2;
                                        //}
                                        tblMarkStmt.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 4).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 4).SetFont(Fontarial9);
                                        tblMarkStmt.Cell(0, 4).SetContent("EXTERNAL\n(80)");
                                        //foreach (PdfCell pc in tblMarkStmt.CellRange(0, 3, 0, 3).Cells)
                                        //{
                                        //    pc.RowSpan = 2;
                                        //}
                                        tblMarkStmt.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 5).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 5).SetFont(Fontarial9);
                                        tblMarkStmt.Cell(0, 5).SetContent("TOTAL\t" + ((dtThesis.Rows.Count == 0) ? "\n" : "") + "(100)");
                                        //foreach (PdfCell pc in tblMarkStmt.CellRange(0, 4, 0, 4).Cells)
                                        //{
                                        //    pc.RowSpan = 2;
                                        //}
                                        tblMarkStmt.Cell(0, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 6).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 6).SetFont(Fontarial9);
                                        tblMarkStmt.Cell(0, 6).SetContent("RESULT");
                                        //foreach (PdfCell pc in tblMarkStmt.CellRange(0, 5, 0, 5).Cells)
                                        //{
                                        //    pc.RowSpan = 2;
                                        //}
                                        int row = 1;
                                        int totSubject = 1;
                                        double totalMarks = 0;
                                        for (int i = 0; i < dtTheory.Rows.Count; i++)
                                        {
                                            onlyica = false;
                                            onlyesa = false;
                                            bool rab = false;
                                            string maxinternal = Convert.ToString(dtTheory.Rows[i]["max_int_marks"]).Trim();
                                            string mininternal = Convert.ToString(dtTheory.Rows[i]["min_int_marks"]).Trim();
                                            string maxexternal = Convert.ToString(dtTheory.Rows[i]["max_ext_marks"]).Trim();
                                            string minexternal = Convert.ToString(dtTheory.Rows[i]["min_ext_marks"]).Trim();
                                            string maxtotal = Convert.ToString(dtTheory.Rows[i]["maxtotal"]).Trim();
                                            string mintotal = Convert.ToString(dtTheory.Rows[i]["mintotal"]).Trim();
                                            double internalmmark = 0;
                                            double internalMinMark = 0;
                                            double internalMaxMark = 0;
                                            double externalmark1 = 0;
                                            double externalMinMark = 0;
                                            double externalMaxMark = 0;
                                            double totalintext = 0;
                                            double totalMaxMark = 0;
                                            double totalMinMark = 0;
                                            double.TryParse(mininternal, out internalMinMark);
                                            double.TryParse(maxinternal, out internalMaxMark);
                                            double.TryParse(minexternal, out externalMinMark);
                                            double.TryParse(maxexternal, out externalMaxMark);
                                            double.TryParse(mintotal, out totalMinMark);
                                            double.TryParse(maxtotal, out totalMaxMark);
                                            if (!arrSubType.Contains(Convert.ToString(dtTheory.Rows[i]["subject_type"]).Trim()))
                                            {
                                                tblMarkStmt.Cell(row, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                tblMarkStmt.Cell(row, 1).SetContent("Part\t-\t" + ToRoman(Convert.ToString(totalType)).Trim() + "\t:\t" + Convert.ToString(dtTheory.Rows[i]["subject_type"]).Trim().ToUpper());
                                                foreach (PdfCell pc in tblMarkStmt.CellRange(row, 1, row, 1).Cells)
                                                {
                                                    pc.ColSpan = 2;
                                                }
                                                tblMarkStmt.Cell(row, 1).SetForegroundColor(Color.DarkBlue);
                                                arrSubType.Add(Convert.ToString(dtTheory.Rows[i]["subject_type"]).Trim());
                                                Array.Resize(ref subTypeWiseTotal, totalType);
                                                Array.Resize(ref subTypeNames, totalType);
                                                subTypeNames[totalType - 1] = Convert.ToString(dtTheory.Rows[i]["subject_type"]).Trim();
                                                row++;
                                                totalType++;
                                                totSubject = 1;
                                            }
                                            tblMarkStmt.Cell(row, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(row, 0).SetContent(Convert.ToString(dtTheory.Rows[i]["subject_code"]).Trim());
                                            tblMarkStmt.Cell(row, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tblMarkStmt.Cell(row, 1).SetContent("Paper\t-\t" + ToRoman(Convert.ToString(totSubject)).Trim() + "\t:\t");
                                            tblMarkStmt.Cell(row, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tblMarkStmt.Cell(row, 2).SetContent(Convert.ToString(dtTheory.Rows[i]["subject_name"]));
                                            double.TryParse(Convert.ToString(dtTheory.Rows[i]["internal_mark"]), out internalmmark);
                                            double extfinal = 0;
                                            double.TryParse(Convert.ToString(dtTheory.Rows[i]["external_mark"]), out extfinal);
                                            extfinal = Math.Round(extfinal, 0);
                                            externalmark1 = extfinal;
                                            string checkedmark = string.Empty;
                                            if (extfinal < 0)
                                            {
                                                checkedmark = loadmarkat(Convert.ToString(extfinal));
                                            }
                                            else
                                            {
                                                checkedmark = Convert.ToString(extfinal);
                                            }
                                            if (internalmmark >= 0)
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = internalmmark + externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = internalmmark;
                                                }
                                            }
                                            else
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = 0;
                                                }
                                            }
                                            //if (externalMaxMark == 0 && externalMinMark == 0)
                                            //{
                                            //    onlyica = true;
                                            //}
                                            //if (internalMaxMark == 0 && internalMinMark == 0)
                                            //{
                                            //    onlyesa = true;
                                            //}
                                            if ((externalMaxMark == 0 && externalMinMark == 0) && (totalMaxMark == internalMaxMark))
                                            {
                                                onlyica = true;
                                            }
                                            if ((internalMaxMark == 0 && internalMinMark == 0) && (totalMaxMark == externalMaxMark))
                                            {
                                                onlyesa = true;
                                            }
                                            tblMarkStmt.Cell(row, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(row, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //if (onlyica && internalmmark >= 0)
                                            //{
                                            //    tblMarkStmt.Cell(row, 2).SetContent(internalmmark + "/" + maxinternal);
                                            //    tblMarkStmt.Cell(row, 3).SetContent("--");
                                            //}
                                            //else if (!onlyesa && internalmmark >= 0)
                                            //{
                                            //    tblMarkStmt.Cell(row, 2).SetContent(internalmmark);
                                            //}
                                            //if (onlyesa && externalmark1 >= 0)
                                            //{
                                            //    tblMarkStmt.Cell(row, 3).SetContent(checkedmark + "/" + maxexternal);
                                            //    tblMarkStmt.Cell(row, 2).SetContent("--");
                                            //}
                                            //else if (!onlyica && externalmark1 >= 0)
                                            //{
                                            //    tblMarkStmt.Cell(row, 3).SetContent(checkedmark);
                                            //}
                                            if (onlyica && internalMaxMark != 20 && internalmmark >= 0)
                                            {
                                                tblMarkStmt.Cell(row, 3).SetContent(internalmmark + "/" + maxinternal);
                                                tblMarkStmt.Cell(row, 4).SetContent("--");
                                            }
                                            else if (!onlyesa && internalMaxMark != 20 && internalmmark >= 0)
                                            {
                                                tblMarkStmt.Cell(row, 3).SetContent(internalmmark + "/" + maxinternal);
                                            }
                                            else if (!onlyesa && !onlyica)
                                            {
                                                tblMarkStmt.Cell(row, 3).SetContent(internalmmark);
                                            }
                                            if (onlyesa && externalmark1 >= 0 && externalMaxMark != 80)
                                            {
                                                tblMarkStmt.Cell(row, 4).SetContent(checkedmark + "/" + maxexternal);
                                                tblMarkStmt.Cell(row, 3).SetContent("--");
                                            }
                                            else if (!onlyica && externalmark1 >= 0 && externalMaxMark != 80)
                                            {
                                                tblMarkStmt.Cell(row, 4).SetContent(checkedmark + "/" + maxexternal);
                                            }
                                            else if (!onlyesa && !onlyica)
                                            {
                                                tblMarkStmt.Cell(row, 4).SetContent(checkedmark);
                                            }
                                            double totfinal = 0;
                                            totfinal = Math.Round(totalintext, 0);
                                            totalMarks += totfinal;
                                            subTypeWiseTotal[totalType - 2] += totfinal;
                                            tblMarkStmt.Cell(row, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(row, 5).SetContent(Convert.ToString(totfinal));
                                            double creditpoint = 0;
                                            double.TryParse(Convert.ToString(dtTheory.Rows[i]["credit_points"]), out creditpoint);
                                            double mrkcredit = 0;
                                            string result = dtTheory.Rows[i]["result"].ToString();
                                            string r = string.Empty;
                                            if (result.ToUpper() == "PASS")
                                            {
                                                r = "PASS";
                                                totcredit += creditpoint;
                                                mrkcredit = totfinal * creditpoint;
                                                summarkcredit += mrkcredit;
                                                theoryPassCount++;
                                                theoryAverage += totfinal;
                                            }
                                            else if (result.ToUpper() == "FAIL")
                                            {
                                                r = "Reappear";
                                            }
                                            else if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                            {
                                                ab = true;
                                                tblMarkStmt.Cell(row, 4).SetContent("AB");
                                                tblMarkStmt.Cell(row, 3).SetContent("0");
                                                tblMarkStmt.Cell(row, 5).SetContent("0");
                                                tblMarkStmt.Cell(row, 6).SetContent("AAA");
                                                if (extfinal == 0 || internalmmark == 0)
                                                {
                                                    rab = true;
                                                }
                                                if (onlyica)
                                                {
                                                    tblMarkStmt.Cell(row, 3).SetContent("AB");
                                                    tblMarkStmt.Cell(row, 4).SetContent("--");
                                                }
                                                else if (onlyesa)
                                                {
                                                    tblMarkStmt.Cell(row, 4).SetContent("AB");
                                                    tblMarkStmt.Cell(row, 3).SetContent("--");
                                                }
                                                r = "AAA";
                                            }
                                            else if (result.ToUpper() == "RE-APPEAR" || result.ToUpper() == "REAPPEAR")
                                            {
                                                r = "RA";
                                            }
                                            else
                                            {
                                                r = result;
                                            }
                                            tblMarkStmt.Cell(row, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(row, 6).SetContent(r.ToUpper());
                                            //tblMarkStmt.Cell(i + 2, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            if (extfinal < 0)
                                            {
                                                ab = true;
                                                tblMarkStmt.Cell(row, 4).SetContent("AB");
                                                tblMarkStmt.Cell(row, 3).SetContent("0");
                                                tblMarkStmt.Cell(row, 5).SetContent("0");
                                                tblMarkStmt.Cell(row, 6).SetContent("AAA");
                                                if (onlyica)
                                                {
                                                    tblMarkStmt.Cell(row, 3).SetContent("AB");
                                                    tblMarkStmt.Cell(row, 4).SetContent("--");
                                                }
                                                else if (onlyesa)
                                                {
                                                    tblMarkStmt.Cell(row, 4).SetContent("AB");
                                                    tblMarkStmt.Cell(row, 3).SetContent("--");
                                                }
                                            }
                                            if (internalmmark < 0)
                                            {
                                                ab = true;
                                                tblMarkStmt.Cell(row, 4).SetContent("0");
                                                tblMarkStmt.Cell(row, 3).SetContent("AB");
                                                tblMarkStmt.Cell(row, 5).SetContent("0");
                                                tblMarkStmt.Cell(row, 6).SetContent("AAA");
                                                if (onlyica)
                                                {
                                                    tblMarkStmt.Cell(row, 3).SetContent("AB");
                                                    tblMarkStmt.Cell(row, 4).SetContent("--");
                                                }
                                                else if (onlyesa)
                                                {
                                                    tblMarkStmt.Cell(row, 4).SetContent("AB");
                                                    tblMarkStmt.Cell(row, 3).SetContent("--");
                                                }
                                            }
                                            row++;
                                            totSubject++;
                                        }
                                        tblMarkStmt.Cell(row, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(row, 1).SetContent("TOTAL");
                                        tblMarkStmt.Cell(row, 1).SetCellPadding(5);
                                        foreach (PdfCell pc in tblMarkStmt.CellRange(row, 1, row, 1).Cells)
                                        {
                                            pc.ColSpan = 4;
                                        }
                                        tblMarkStmt.Cell(row, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(row, 5).SetContent(totalMarks);
                                        tblMarkStmt.Cell(row, 5).SetCellPadding(5);
                                        newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 30, pageY, 554, 500));
                                        mypdfpage.Add(newpdftabpage2);
                                        pline = newpdftabpage2.Area.LowerBound(Color.DarkBlue, 1);
                                        mypdfpage.Add(pline);
                                        //pline = newpdftabpage2.Area.VerticalAxe(Color.DarkBlue, 1);
                                        //mypdfpage.Add(pline);
                                        pline = newpdftabpage2.CellArea(newpdftabpage2.LastRow - 1, 2).LowerBound(Color.DarkBlue, 1);
                                        mypdfpage.Add(pline);
                                        for (int roww = 0; roww < newpdftabpage2.LastRow; roww++)
                                        {
                                            for (int i = 0; i < 7; i++)
                                            {
                                                if (i != 2 && i != 1)
                                                {
                                                    pline = newpdftabpage2.CellArea(roww, i).RightBound(Color.DarkBlue, 1);
                                                    mypdfpage.Add(pline);
                                                }
                                                if (i == 3)
                                                {
                                                    pline = newpdftabpage2.CellArea(roww, i).LeftBound(Color.DarkBlue, 1);
                                                    mypdfpage.Add(pline);
                                                }
                                            }
                                        }
                                        for (int i = 0; i < 7; i++)
                                        {
                                            if (i != 2)
                                            {
                                                pline = newpdftabpage2.CellArea(0, i).LowerBound(Color.DarkBlue, 1);
                                                mypdfpage.Add(pline);
                                                pline = newpdftabpage2.CellArea(newpdftabpage2.LastRow - 1, i).LowerBound(Color.DarkBlue, 1);
                                                mypdfpage.Add(pline);
                                            }
                                        }
                                        pline = newpdftabpage2.CellArea(newpdftabpage2.LastRow, 5).LeftBound(Color.DarkBlue, 1);
                                        mypdfpage.Add(pline);
                                        pline = newpdftabpage2.CellArea(newpdftabpage2.LastRow, 5).RightBound(Color.DarkBlue, 1);
                                        mypdfpage.Add(pline);
                                        pline = newpdftabpage2.CellArea(newpdftabpage2.LastRow, 0).RightBound(Color.DarkBlue, 1);
                                        mypdfpage.Add(pline);
                                        tblHeight = Convert.ToInt16(newpdftabpage2.Area.Height) + 30;
                                        pageY += tblHeight;
                                    }
                                    if (dtThesis.Rows.Count > 0)
                                    {
                                        onlyica = false;
                                        onlyesa = false;
                                        hasMarks = true;
                                        arrSubType.Clear();
                                        dtThesisSubType = dtThesis.DefaultView.ToTable(true, "subject_type", "projThe");
                                        PdfTable tblMarkStmt = mydoc.NewTable(Fontarial10b, dtThesis.Rows.Count + 1 + dtThesisSubType.Rows.Count, 6, 10);
                                        tblMarkStmt.VisibleHeaders = false;
                                        tblMarkStmt.SetBorders(Color.DarkBlue, 1, BorderType.Columns);
                                        tblMarkStmt.SetColumnsWidth(new int[] { 75, 250, 55, 55, 63, 100 });
                                        double totcredit = 0;
                                        double summarkcredit = 0;
                                        tblMarkStmt.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 0).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 0).SetContent("CODE");
                                        tblMarkStmt.Cell(0, 0).SetFont(Fontarial9);
                                        //foreach (PdfCell pc in tblMarkStmt.CellRange(0, 0, 0, 0).Cells)
                                        //{
                                        //    pc.RowSpan = 2;
                                        //}
                                        tblMarkStmt.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 1).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 1).SetContent("COMPONENTS");
                                        tblMarkStmt.Cell(0, 1).SetFont(Fontarial9);
                                        //foreach (PdfCell pc in tblMarkStmt.CellRange(0, 1, 0, 1).Cells)
                                        //{
                                        //    pc.RowSpan = 2;
                                        //}
                                        tblMarkStmt.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 2).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 2).SetFont(Fontarial9);
                                        tblMarkStmt.Cell(0, 2).SetContent("INTERNAL\n\n");
                                        //foreach (PdfCell pc in tblMarkStmt.CellRange(0, 2, 0, 2).Cells)
                                        //{
                                        //    pc.RowSpan = 2;
                                        //}
                                        tblMarkStmt.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 3).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 3).SetFont(Fontarial9);
                                        tblMarkStmt.Cell(0, 3).SetContent("EXTERNAL\n\n");
                                        //foreach (PdfCell pc in tblMarkStmt.CellRange(0, 3, 0, 3).Cells)
                                        //{
                                        //    pc.RowSpan = 2;
                                        //}
                                        tblMarkStmt.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 4).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 4).SetCellPadding(0);
                                        tblMarkStmt.Cell(0, 4).SetFont(Fontarial9);
                                        tblMarkStmt.Cell(0, 4).SetContent("TOTAL\t" + ((dtTheory.Rows.Count == 0) ? "\n" : "") + "(200)");
                                        //foreach (PdfCell pc in tblMarkStmt.CellRange(0, 4, 0, 4).Cells)
                                        //{
                                        //    pc.RowSpan = 2;
                                        //}
                                        tblMarkStmt.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(0, 5).SetColors(Color.DarkBlue, Color.White);
                                        tblMarkStmt.Cell(0, 5).SetFont(Fontarial9);
                                        tblMarkStmt.Cell(0, 5).SetContent("RESULT");
                                        //foreach (PdfCell pc in tblMarkStmt.CellRange(0, 5, 0, 5).Cells)
                                        //{
                                        //    pc.RowSpan = 2;
                                        //}
                                        int row = 1;
                                        int totSubject = 1;
                                        double totalSubTypeMark = 0;
                                        double thesisTotalMaximum = 0;
                                        int startSpanRows = 1;
                                        for (int i = 0; i < dtThesis.Rows.Count; i++)
                                        {
                                            onlyica = false;
                                            onlyesa = false;
                                            bool rab = false;
                                            string maxinternal = Convert.ToString(dtThesis.Rows[i]["max_int_marks"]).Trim();
                                            string mininternal = Convert.ToString(dtThesis.Rows[i]["min_int_marks"]).Trim();
                                            string maxexternal = Convert.ToString(dtThesis.Rows[i]["max_ext_marks"]).Trim();
                                            string minexternal = Convert.ToString(dtThesis.Rows[i]["min_ext_marks"]).Trim();
                                            string maxtotal = Convert.ToString(dtThesis.Rows[i]["maxtotal"]).Trim();
                                            string mintotal = Convert.ToString(dtThesis.Rows[i]["mintotal"]).Trim();
                                            double internalmmark = 0;
                                            double internalMinMark = 0;
                                            double internalMaxMark = 0;
                                            double externalmark1 = 0;
                                            double externalMinMark = 0;
                                            double externalMaxMark = 0;
                                            double totalintext = 0;
                                            double totalMaxMark = 0;
                                            double totalMinMark = 0;
                                            double.TryParse(mininternal, out internalMinMark);
                                            double.TryParse(maxinternal, out internalMaxMark);
                                            double.TryParse(minexternal, out externalMinMark);
                                            double.TryParse(maxexternal, out externalMaxMark);
                                            double.TryParse(mintotal, out totalMinMark);
                                            double.TryParse(maxtotal, out totalMaxMark);
                                            if (!arrSubType.Contains(Convert.ToString(dtThesis.Rows[i]["subject_type"]).Trim()))
                                            {
                                                tblMarkStmt.Cell(row, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                tblMarkStmt.Cell(row, 1).SetContent("Part\t-\t" + ToRoman(Convert.ToString(totalType)).Trim() + "\t:\t" + Convert.ToString(dtThesis.Rows[i]["subject_type"]).ToUpper());
                                                tblMarkStmt.Cell(row, 1).SetForegroundColor(Color.DarkBlue);
                                                arrSubType.Add(Convert.ToString(dtThesis.Rows[i]["subject_type"]).Trim());
                                                row++;
                                                startSpanRows = row;
                                                tblMarkStmt.Cell(row, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                tblMarkStmt.Cell(row, 0).SetContent(Convert.ToString(dtThesis.Rows[i]["subject_code"]).Trim());
                                                totalType++;
                                                totSubject = 1;
                                                totalSubTypeMark = 0;
                                                thesisTotalMaximum = 0;
                                                thesisAverage = 0;
                                                thesisPassCount = 0;
                                            }
                                            thesisPassCount++;
                                            tblMarkStmt.Cell(row, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tblMarkStmt.Cell(row, 1).SetContent(Convert.ToString(dtThesis.Rows[i]["subject_name"]));
                                            internalmmark = 0;
                                            externalmark1 = 0;
                                            totalintext = 0;
                                            double.TryParse(Convert.ToString(dtThesis.Rows[i]["internal_mark"]), out internalmmark);
                                            double extfinal = 0;
                                            double.TryParse(Convert.ToString(dtThesis.Rows[i]["external_mark"]), out extfinal);
                                            extfinal = Math.Round(extfinal, 0);
                                            externalmark1 = extfinal;
                                            string checkedmark = string.Empty;
                                            if (extfinal < 0)
                                            {
                                                checkedmark = loadmarkat(Convert.ToString(extfinal));
                                            }
                                            else
                                            {
                                                checkedmark = Convert.ToString(extfinal);
                                            }
                                            if (internalmmark >= 0)
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = internalmmark + externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = internalmmark;
                                                }
                                            }
                                            else
                                            {
                                                if (extfinal > 0)
                                                {
                                                    totalintext = externalmark1;
                                                }
                                                else
                                                {
                                                    totalintext = 0;
                                                }
                                            }
                                            //tblMarkStmt.Cell(row, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //tblMarkStmt.Cell(row, 2).SetContent(internalmmark);
                                            //tblMarkStmt.Cell(row, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //tblMarkStmt.Cell(row, 3).SetContent(checkedmark);
                                            if ((externalMaxMark == 0 && externalMinMark == 0) && (totalMaxMark == internalMaxMark))
                                            {
                                                onlyica = true;
                                            }
                                            if ((internalMaxMark == 0 && internalMinMark == 0) && (totalMaxMark == externalMaxMark))
                                            {
                                                onlyesa = true;
                                            }
                                            tblMarkStmt.Cell(row, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(row, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            if (onlyica && internalMaxMark != 20 && internalmmark >= 0)
                                            {
                                                tblMarkStmt.Cell(row, 2).SetContent(internalmmark + "/" + maxinternal);
                                                tblMarkStmt.Cell(row, 3).SetContent("--");
                                            }
                                            else if (!onlyesa && internalMaxMark != 20 && internalmmark >= 0)
                                            {
                                                tblMarkStmt.Cell(row, 2).SetContent(internalmmark + "/" + maxinternal);
                                            }
                                            else if (!onlyesa && !onlyica)
                                            {
                                                tblMarkStmt.Cell(row, 2).SetContent(internalmmark);
                                            }
                                            if (onlyesa && externalmark1 >= 0 && externalMaxMark != 80)
                                            {
                                                tblMarkStmt.Cell(row, 3).SetContent(checkedmark + "/" + maxexternal);
                                                tblMarkStmt.Cell(row, 2).SetContent("--");
                                            }
                                            else if (!onlyica && externalmark1 >= 0 && externalMaxMark != 80)
                                            {
                                                tblMarkStmt.Cell(row, 3).SetContent(checkedmark + "/" + maxexternal);
                                            }
                                            else if (!onlyesa && !onlyica)
                                            {
                                                tblMarkStmt.Cell(row, 3).SetContent(checkedmark);
                                            }
                                            double totfinal = 0;
                                            totfinal = Math.Round(totalintext, 0);
                                            totalSubTypeMark += totfinal;
                                            tblMarkStmt.Cell(startSpanRows, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(startSpanRows, 4).SetContent(Convert.ToString(totalSubTypeMark));
                                            foreach (PdfCell pc in tblMarkStmt.CellRange(startSpanRows, 4, startSpanRows, 4).Cells)
                                            {
                                                pc.RowSpan = totSubject;
                                            }
                                            thesisTotalMaximum += totalMaxMark;
                                            double avg1 = 0;
                                            //if (thesisPassCount > 0)
                                            //{
                                            avg1 = (totalSubTypeMark / thesisTotalMaximum) * 100;
                                            //}
                                            avg1 = Math.Round(avg1, 1, MidpointRounding.AwayFromZero);
                                            double creditpoint = 0;
                                            double.TryParse(Convert.ToString(dtThesis.Rows[i]["credit_points"]), out creditpoint);
                                            double mrkcredit = 0;
                                            string result = dtThesis.Rows[i]["result"].ToString();
                                            string r = string.Empty;
                                            if (result.ToUpper() == "PASS")
                                            {
                                                r = "PASS";
                                                totcredit += creditpoint;
                                                mrkcredit = totfinal * creditpoint;
                                                summarkcredit += mrkcredit;
                                            }
                                            else if (result.ToUpper() == "FAIL")
                                            {
                                                r = "Reappear";
                                            }
                                            else if (result.ToUpper() == "ABSENT" || result.ToUpper() == "AB")
                                            {
                                                ab = true;
                                                tblMarkStmt.Cell(row, 3).SetContent("AB");
                                                tblMarkStmt.Cell(row, 2).SetContent("0");
                                                //tblMarkStmt.Cell(row, 4).SetContent("0");
                                                tblMarkStmt.Cell(row, 5).SetContent("AAA");
                                                if (extfinal == 0 || internalmmark == 0)
                                                {
                                                    rab = true;
                                                }
                                                if (onlyica)
                                                {
                                                    tblMarkStmt.Cell(row, 2).SetContent("AB");
                                                    tblMarkStmt.Cell(row, 3).SetContent("--");
                                                }
                                                else if (onlyesa)
                                                {
                                                    tblMarkStmt.Cell(row, 3).SetContent("AB");
                                                    tblMarkStmt.Cell(row, 2).SetContent("--");
                                                }
                                                r = "AAA";
                                            }
                                            else if (result.ToUpper() == "RE-APPEAR" || result.ToUpper() == "REAPPEAR")
                                            {
                                                r = "RA";
                                            }
                                            else
                                            {
                                                r = result;
                                            }
                                            tblMarkStmt.Cell(row, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(row, 5).SetContent(r.ToUpper());
                                            //tblMarkStmt.Cell(i + 2, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            if (extfinal < 0)
                                            {
                                                ab = true;
                                                tblMarkStmt.Cell(row, 3).SetContent("AB");
                                                tblMarkStmt.Cell(row, 2).SetContent("0");
                                                //tblMarkStmt.Cell(row, 4).SetContent("0");
                                                tblMarkStmt.Cell(row, 5).SetContent("AAA");
                                                if (onlyica)
                                                {
                                                    tblMarkStmt.Cell(row, 2).SetContent("AB");
                                                    tblMarkStmt.Cell(row, 3).SetContent("--");
                                                }
                                                else if (onlyesa)
                                                {
                                                    tblMarkStmt.Cell(row, 3).SetContent("AB");
                                                    tblMarkStmt.Cell(row, 2).SetContent("--");
                                                }
                                            }
                                            if (internalmmark < 0)
                                            {
                                                ab = true;
                                                tblMarkStmt.Cell(row, 3).SetContent("0");
                                                tblMarkStmt.Cell(row, 2).SetContent("AB");
                                                //tblMarkStmt.Cell(row, 4).SetContent("0");
                                                tblMarkStmt.Cell(row, 5).SetContent("AAA");
                                                if (onlyica)
                                                {
                                                    tblMarkStmt.Cell(row, 2).SetContent("AB");
                                                    tblMarkStmt.Cell(row, 3).SetContent("--");
                                                }
                                                else if (onlyesa)
                                                {
                                                    tblMarkStmt.Cell(row, 3).SetContent("AB");
                                                    tblMarkStmt.Cell(row, 2).SetContent("--");
                                                }
                                            }
                                            string classify1 = string.Empty;
                                            if (avg1 >= 70)
                                            {
                                                classify1 = "Highly Commented";
                                            }
                                            else if (avg1 < 70 && avg1 >= 50)
                                            {
                                                classify1 = "Commented";
                                            }
                                            else
                                            {
                                                classify1 = "Reappear";
                                            }
                                            tblMarkStmt.Cell(startSpanRows, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblMarkStmt.Cell(startSpanRows, 5).SetContent(Convert.ToString(classify1).ToUpper());
                                            foreach (PdfCell pc in tblMarkStmt.CellRange(startSpanRows, 5, startSpanRows, 5).Cells)
                                            {
                                                pc.RowSpan = totSubject;
                                            }
                                            row++;
                                            totSubject++;
                                        }
                                        newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 30, pageY, 554, 500));
                                        mypdfpage.Add(newpdftabpage2);
                                        pline = newpdftabpage2.Area.LowerBound(Color.DarkBlue, 1);
                                        mypdfpage.Add(pline);
                                        pline = newpdftabpage2.Area.UpperBound(Color.DarkBlue, 1);
                                        mypdfpage.Add(pline);
                                        for (int i = 0; i < 6; i++)
                                        {
                                            pline = newpdftabpage2.CellArea(0, i).LowerBound(Color.DarkBlue, 1);
                                            mypdfpage.Add(pline);
                                        }
                                        tblHeight = Convert.ToInt16(newpdftabpage2.Area.Height) + 30;
                                        pageY += tblHeight;
                                    }
                                    if (subTypeNames.Length > 0)
                                    {
                                        PdfTable pdfStudClassify = mydoc.NewTable(Fontarial10b, subTypeNames.Length, 1, 6);
                                        pdfStudClassify.VisibleHeaders = false;
                                        pdfStudClassify.SetBorders(Color.DarkBlue, 1, BorderType.None);
                                        pdfStudClassify.SetColumnsWidth(new int[] { 500 });
                                        double avg = 0;
                                        if (theoryPassCount > 0)
                                        {
                                            avg = theoryAverage / theoryPassCount;
                                            avg = Math.Round(avg, 1, MidpointRounding.AwayFromZero);
                                        }
                                        string classify = string.Empty;
                                        if (avg >= 60)
                                        {
                                            classify = "First Class";
                                        }
                                        else if (avg < 60 && avg >= 50)
                                        {
                                            classify = "Second Class";
                                        }
                                        else
                                        {
                                            classify = "Reappear";
                                        }
                                        for (int subType = 0; subType < subTypeNames.Length; subType++)
                                        {
                                            pdfStudClassify.Cell(subType, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdfStudClassify.Cell(subType, 0).SetColors(Color.Black, Color.White);
                                            pdfStudClassify.Cell(subType, 0).SetContent(subTypeNames[subType] + "\t:\tPassed in " + classify.ToUpper());
                                            pdfStudClassify.Cell(subType, 0).SetFont(Fontarialb12);
                                        }
                                        newpdftabpage2 = pdfStudClassify.CreateTablePage(new PdfArea(mydoc, 30, pageY - 10, 554, 200));
                                        mypdfpage.Add(newpdftabpage2);
                                        tblHeight = Convert.ToInt16(newpdftabpage2.Area.Height) + 30;
                                        pageY += tblHeight;
                                    }
                                    string title = new CultureInfo("en-US").TextInfo.ToTitleCase(Convert.ToString("Controller of Examinations").ToLower());
                                    pdftxt = new PdfTextArea(Font10bold, Color.DarkBlue, new PdfArea(mydoc, 50, 760, (mydoc.PageWidth / 2), 50), ContentAlignment.TopLeft, Convert.ToString("Controller of Examinations"));
                                    mypdfpage.Add(pdftxt);
                                    title = new CultureInfo("en-US").TextInfo.ToTitleCase(Convert.ToString("Principal").ToLower());
                                    pdftxt = new PdfTextArea(Font10bold, Color.DarkBlue, new PdfArea(mydoc, mydoc.PageWidth / 2, 760, (mydoc.PageWidth / 2) - 80, 50), ContentAlignment.TopRight, Convert.ToString("Principal"));
                                    mypdfpage.Add(pdftxt);
                                    PdfLine pl;
                                    int newY = 811;
                                    int count = 1;
                                    if (dtThesis.Rows.Count > 0)
                                    {
                                        pdftxt = new PdfTextArea(Fontwma, Color.Black, new PdfArea(mydoc, 37, newY - 6, 540, 30), ContentAlignment.TopCenter, "Dissertation:\tHighly Commented\t-\t70% and Above,\tCommented\t-\t50% to 69%");
                                        mypdfpage.Add(pdftxt);
                                        count++;
                                        //Horizandal Line Bottom 2
                                        pl = new PdfLine(mydoc, new Point(30, newY - 11), new Point(585, newY - 11), Color.DarkBlue, 1);
                                        mypdfpage.Add(pl);
                                    }
                                    if (dtTheory.Rows.Count > 0)
                                    {
                                        pdftxt = new PdfTextArea(Fontwma, Color.Black, new PdfArea(mydoc, 37, newY - count * 11, 540, 30), ContentAlignment.TopCenter, "Theory:\tPassing Minimum 50% of marks,\tFirst Class\t-\t60% and Above,\tSecond Class\t-\t50% to 59%");
                                        mypdfpage.Add(pdftxt);
                                        //Horizandal Line Bottom 1
                                        pl = new PdfLine(mydoc, new Point(30, newY - 5 - count * 11), new Point(585, newY - 5 - count * 11), Color.DarkBlue, 1);
                                        mypdfpage.Add(pl);
                                    }
                                    PdfRectangle pr1 = new PdfRectangle(mydoc, new PdfArea(mydoc, 30, 44, 555, 771), Color.DarkBlue);
                                    mypdfpage.Add(pr1);
                                }
                            }
                            if (hasMarks)
                                mypdfpage.SaveToDocument();
                        }
                    }
                }
            }
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "MPhil_MarkStatement" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
            }
        }
        catch (Exception ex)
        {
        }
    }

    #endregion CHRISTOPHER COLLEGE

    #region JAMAL COLLEGE

    //For Jamal UG/PG Format
    //UG & PG Mark Statements

    public void ugpgmarkstatementf6_jamal()
    {
        try
        {
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            string degree = string.Empty;
            string edu_level = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string semroman = string.Empty;
            string coe = string.Empty;
            string curr_sem = string.Empty;
            int cur_sem = 0;
            int sheet_serial_no = 0;
            int additonalstatus = 0;
            string additionalmsg = string.Empty;
            bool onlyca = false;
            bool onlyes = false;
            DataSet gradeds = new DataSet();
            Font fontDegree = new Font("Times New Roman", 14, FontStyle.Bold);
            Font fontStudDetails = new Font("Times New Roman", 11, FontStyle.Bold);
            Font fontdegreename = new Font("Times New Roman", 14, FontStyle.Bold);
            Font fontStmtMarks = new Font("Times New Roman", 11, FontStyle.Regular);
            Font fontOveralrslt = new Font("Times New Roman", 11, FontStyle.Bold);
            Font fontcgpa = new Font("Times New Roman", 11, FontStyle.Regular);
            Font fontDate = new Font("Times New Roman", 11, FontStyle.Regular);
            Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font fontStud = new Font("Comic Sans MS", 10, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 8, FontStyle.Bold);
            DataTable dtPart1 = new DataTable();
            DataTable dtPart2 = new DataTable();
            DataTable dtPart3 = new DataTable();
            DataTable dtPart4 = new DataTable();
            DataSet OverallResult = new DataSet();
            Font Fontarial9 = new Font("Arial", 8, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            sheet_serial_no = 0;
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(25.4, 30.4));
            PdfPage mypdfpage;
            if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
            {
                FpSpread2.SaveChanges();
                for (int res = 1; res < FpSpread2.Sheets[0].RowCount; res++)
                {
                    int isval = 0;
                    additonalstatus = 0;
                    additionalmsg = string.Empty;
                    onlyca = false;
                    onlyes = false;
                    isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                    if (isval == 1)
                    {
                        printds.Clear();
                        printds.Dispose();
                        printds_new.Clear();
                        printds_new.Dispose();
                        PdfTable table1forpage1;
                        PdfTextArea pdfdoi;
                        PdfTablePage newpdftabpage2;
                        PdfTable fullmark;
                        rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                        regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                        string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,r.college_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,C.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
                        printds = da.select_method_wo_parameter(sql, "Text");
                        string overall = "select count(s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'; Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc  where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass' and Mark_Entry.roll_no=sc.roll_no and Mark_Entry.subject_no=sc.subject_no and Mark_Entry.roll_no='" + rollnosub + "'  ";
                        overall = overall + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc  where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail' and Mark_Entry.roll_no=sc.roll_no and Mark_Entry.subject_no=sc.subject_no and Mark_Entry.roll_no='" + rollnosub + "'select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass')";
                        OverallResult = da.select_method_wo_parameter(overall, "Text");
                        int noofsubapplied = Convert.ToInt32(OverallResult.Tables[0].Rows[0][0].ToString());
                        int noofsubpassed = Convert.ToInt32(OverallResult.Tables[1].Rows[0][0].ToString());
                        int splcredit = 0;
                        if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                        {
                            mypdfpage = mydoc.NewPage();
                            edu_level = Convert.ToString(printds.Tables[0].Rows[0]["edu_level"]).Trim();
                            degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                            coe = Convert.ToString(printds.Tables[1].Rows[0]["coe"]).Trim();
                            //string[] spiltcoe = coe.Split('.');
                            //string newcoe = string.Empty;
                            string grade_set = string.Empty;
                            //for (int ce = 1; ce <= spiltcoe.GetUpperBound(0); ce++)
                            //{
                            //    if (newcoe == "")
                            //    {
                            //        newcoe = spiltcoe[ce].ToString();
                            //    }
                            //    else
                            //    {
                            //        newcoe = newcoe + "." + spiltcoe[ce].ToString();
                            //    }
                            //}
                            //coe = newcoe;
                            //month = ddlMonth.SelectedIndex;
                            //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                            int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                            monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                            string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                            //strMonthName = strMonthName[0].ToString() + strMonthName[1].ToString() + strMonthName[2].ToString();
                            monthandyear = strMonthName + "-" + Convert.ToString(ddlYear.SelectedItem.Text).Trim().Trim();
                            monthandyear = monthandyear.ToUpper();
                            //strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                            //strMonthName = strMonthName[0].ToString() + strMonthName[1].ToString() + strMonthName[2].ToString();
                            //strMonthName = strMonthName.ToUpper() + " " + exam_y + "   ";
                            studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                            branch = Convert.ToString(printds.Tables[0].Rows[0]["Dept_name"]).Trim();
                            dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]).Trim();
                            string stdappno = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();
                            batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                            degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim();
                            string collegeCode = Convert.ToString(printds.Tables[0].Rows[0]["college_code"]).Trim();
                            int max_sem1 = 0;
                            string max_sem = d2.GetFunctionv("select NDurations from ndegree where batch_year='" + batch_year + "'  and Degree_code='" + degree_code + "' and college_code='" + collegeCode.Trim() + "'");
                            if (max_sem == "" || max_sem == null)
                            {
                                max_sem = d2.GetFunctionv("SELECT Duration FROM Degree where  Degree_Code='" + degree_code + "' and college_code='" + collegeCode.Trim() + "'");
                            }
                            int.TryParse(max_sem, out max_sem1);
                            sql2 = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                            string qryexmappn = string.Empty;
                            printds_new = da.select_method_wo_parameter(sql2, "Text");
                            if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                            {
                                sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
                                GetSem(batch_year, Convert.ToString(ddlYear.SelectedItem.Text), Convert.ToString(month), max_sem, ref sem);
                                int.TryParse(sem, out cur_sem);
                                if (sem == "1")
                                {
                                    semroman = "I";
                                }
                                else if (sem == "2")
                                {
                                    semroman = "II";
                                }
                                else if (sem == "3")
                                {
                                    semroman = "III";
                                }
                                else if (sem == "4")
                                {
                                    semroman = "IV";
                                }
                                else if (sem == "5")
                                {
                                    semroman = "V";
                                }
                                else if (sem == "6")
                                {
                                    semroman = "VI";
                                }
                                else if (sem == "7")
                                {
                                    semroman = "VII";
                                }
                                else if (sem == "8")
                                {
                                    semroman = "VIII";
                                }
                                //PdfTextArea pdfdoi = new PdfTextArea(Fontco10, System.Drawing.Color.Black, new PdfArea(mydoc, 113, 803, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                                //mypdfpage.Add(pdfdoi);
                                // pdfdoi = new PdfTextArea(fontDegree, System.Drawing.Color.Black, new PdfArea(mydoc, 231, 64, 80, 25), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString(degree));
                                //mypdfpage.Add(pdfdoi);
                                exam_code = string.Empty;
                                for (int exa = 0; exa < printds_new.Tables[0].Rows.Count; exa++)
                                {
                                    exam_code += Convert.ToString(printds_new.Tables[0].Rows[exa]["exam_code"]).Trim() + ",";
                                }
                                exam_code = exam_code.Trim(',');
                                sql3 = "Select semester,subject_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) + (case when isnull(external_mark,0) >=0  then isnull(external_mark,0) else 0 end) as total,credit_points,case  result when 'Pass' Then 'PASS'  when 'P' Then 'PASS'when 'F' Then 'FAIL' when 'FAIL' Then 'FAIL' when 'AAA' then 'AAA' when 'WHD' then 'WWW' else 'FAIL' end as result,subject.Part_Type,sub_sem.priority,sub_sem.lab from Mark_Entry,Subject,sub_sem,syllabus_master  where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in (" + exam_code + ") and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester desc,subject.Part_Type,subject.subjectpriority,subject_code asc";
                                printds_rows.Clear();//,sub_sem.priority,subject.subject_no,subject_type,subject.Part_Type,subject_name ,sub_sem.priority subject.subjectpriority;isnull(subject.Part_Type,'3') asc,case when (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='F' and lab=0) then null when (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='M' and lab=0) then 'A' when (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='M' and lab=1) then 'B' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='A' and lab=0) then 'C' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='A' and lab=1) then 'D' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,0)='E' and lab=1) then 'E' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='E' and lab=1) then 'F' Else SUBSTRING(subject_code,(LEN(subject_code)-2) ,1) End asc,
                                //,subject.subjectpriority,sub_sem.lab,subject_type desc,
                                printds_rows.Dispose();
                                printds_rows = da.select_method_wo_parameter(sql3, "Text");
                                string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-";
                                if (edu_level.Trim().ToLower() == "ug")
                                {
                                    batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 3));
                                    grade_set = "0";
                                }
                                else
                                {
                                    batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 2));
                                    grade_set = "1";
                                }
                                table1forpage1 = mydoc.NewTable(fontStudDetails, 4, 3, 6);
                                table1forpage1.VisibleHeaders = false;
                                table1forpage1.SetBorders(Color.Black, 1, BorderType.None);
                                table1forpage1.SetColumnsWidth(new int[] { 235, 320, 125 });  //290, 300, 200 
                                table1forpage1.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(1, 0).SetContent(degree);
                                table1forpage1.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(1, 1).SetContent(branch);
                                table1forpage1.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(1, 2).SetContent(txtdop.Text);
                                table1forpage1.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(3, 0).SetContent(regnumber);//monthandyear
                                table1forpage1.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(3, 1).SetContent(studname);
                                table1forpage1.Cell(3, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(3, 2).SetContent(monthandyear);//monthandyear
                                newpdftabpage2 = table1forpage1.CreateTablePage(new PdfArea(mydoc, 27, 90, 665, 130));//x=27
                                mypdfpage.Add(newpdftabpage2);
                                double sum_gpa = 0;
                                double tot_credit = 0;
                                bool gp_status = true;
                                DataSet dsSpl = new DataSet();
                                bool arrear = false;
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    //string exm_sem = Convert.ToString(printds_rows.Tables[0].Rows[0]["semester"]).Trim();
                                    fullmark = mydoc.NewTable(fontStmtMarks, printds_rows.Tables[0].Rows.Count + 8, 14, 3);
                                    fullmark.VisibleHeaders = false;
                                    fullmark.SetBorders(Color.Black, 1, BorderType.None);
                                    fullmark.Columns[0].SetWidth(26);
                                    fullmark.Columns[1].SetWidth(32);
                                    fullmark.Columns[2].SetWidth(86);
                                    fullmark.Columns[3].SetWidth(230);
                                    fullmark.Columns[4].SetWidth(30);
                                    fullmark.Columns[5].SetWidth(30);
                                    fullmark.Columns[6].SetWidth(30);
                                    fullmark.Columns[7].SetWidth(30);
                                    fullmark.Columns[8].SetWidth(30);
                                    fullmark.Columns[9].SetWidth(30);
                                    fullmark.Columns[10].SetWidth(30);
                                    fullmark.Columns[11].SetWidth(39);
                                    fullmark.Columns[12].SetWidth(53);
                                    fullmark.Columns[13].SetWidth(33);
                                    int mr = 0;
                                    for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                                    {
                                        bool arr_sub = false;
                                        if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                        {
                                            bool resu = true;
                                            double weighted = 0;
                                            double internal_marks = 0, external_marks = 0, total = 0;
                                            string PartType = Convert.ToString(printds_rows.Tables[0].Rows[i]["Part_Type"]).Trim();
                                            string semester = Convert.ToString(printds_rows.Tables[0].Rows[i]["semester"]).Trim();
                                            if (semester != sem && arrear == false)
                                            {
                                                fullmark.Cell(mr, 3).SetCellPadding(6);
                                                fullmark.Cell(mr + 1, 3).SetContent("ARREAR(S) RESULT");
                                                fullmark.Cell(mr + 1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(mr + 2, 3).SetContent("-----------------");
                                                fullmark.Cell(mr + 2, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(mr + 3, 3).SetCellPadding(6);
                                                mr += 4;
                                                arrear = true;
                                            }
                                            if (semester != sem)
                                            {
                                                arr_sub = true;
                                            }
                                            fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            string coursecod = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim();
                                            string coursename = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim();
                                            string maxinternalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["max_int_marks"]).Trim();
                                            string internalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim();
                                            string maxexternalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["max_ext_marks"]).Trim();
                                            string externalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim();
                                            string maxtotalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["maxtotal"]).Trim();
                                            string totalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim();
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim(), out internal_marks);
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim(), out external_marks);
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim(), out total);
                                            //double creditpoints = Convert.ToDouble(printds_rows.Tables[0].Rows[i]["credit_points"]);
                                            double creditpoints = 0;
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim(), out creditpoints);
                                            double gradpoint = Math.Round(total / 10, 1, MidpointRounding.AwayFromZero);
                                            double checkmarkmm = 0;
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim(), out checkmarkmm);
                                            double max_total = 0;
                                            double.TryParse(maxtotalmark, out max_total);
                                            if (max_total != 100)
                                            {
                                                checkmarkmm = (checkmarkmm / max_total) * 100;
                                            }
                                            string grade = string.Empty;
                                            string gradepoints = string.Empty;
                                            string gradesql = "    select * from Grade_Master where College_Code='" + collegeCode.Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                            {
                                                gradesql = "select * from Grade_Master where College_Code='" + collegeCode.Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            }
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                                {
                                                    if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                    {
                                                        grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
                                                        gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
                                                    }
                                                }
                                            }
                                            double gradepoint = 0;
                                            double.TryParse(gradepoints, out gradepoint);
                                            gradepoint = Math.Round(gradepoint, 1, MidpointRounding.AwayFromZero);
                                            //fullmark.Cell(mr, 12).SetContent(String.Format("{0:00.0}", gradepoint));
                                            double creditPoint = 0;
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim(), out creditPoint);
                                            double weightmark = Convert.ToDouble(gradepoint * creditPoint);
                                            weightmark = Math.Round(weightmark, 1, MidpointRounding.AwayFromZero);
                                            weighted = weightmark;
                                            gradpoint = gradepoint;
                                            //fullmark.Cell(mr, 13).SetContent(String.Format("{0:000.0}", weightmark));
                                            //string gradepoint = Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim();
                                            //string weightedmk = Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim();printds_rows.Tables[0].Rows[i]["result"]).Trim()
                                            string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim();
                                            if (internal_marks < 0)
                                            {
                                                internalmark = "AB";
                                                result = "AAA";
                                                weighted = 0;
                                                gradpoint = 0;
                                                resu = false;
                                                gp_status = false;
                                            }
                                            else
                                            {
                                                internalmark = Convert.ToString(internalmark);
                                            }
                                            if (external_marks < 0)
                                            {
                                                externalmark = "AB";
                                                result = "AAA";
                                                weighted = 0;
                                                gradpoint = 0;
                                                gp_status = false;
                                                resu = false;
                                            }
                                            else
                                            {
                                                externalmark = Convert.ToString(external_marks);
                                            }
                                            if (result.ToLower().Trim() == "pass" || result.ToLower().Trim() == "p")
                                            {
                                                result = "P";
                                            }
                                            if (result.ToLower().Trim() == "fail" || result.ToLower().Trim() == "f" || result.ToLower().Trim() == "ra")
                                            {
                                                resu = false;
                                                result = "RA";
                                                weighted = 0;
                                                gradpoint = 0;
                                                resu = false;
                                                gp_status = false;
                                            }
                                            weighted = Math.Round((creditpoints * gradpoint), 1, MidpointRounding.AwayFromZero);
                                            if (arr_sub == false)
                                            {
                                                if (PartType == "3")
                                                {
                                                    tot_credit += creditpoints;
                                                    sum_gpa += weighted;
                                                }
                                            }
                                            if (Convert.ToString(printds_rows.Tables[0].Rows[i]["lab"]).Trim().ToLower() == "false" || Convert.ToString(printds_rows.Tables[0].Rows[i]["lab"]).Trim().ToLower() == "0")
                                            {
                                                fullmark.Cell(mr, 0).SetContent(PartType);
                                            }
                                            else
                                            {
                                                fullmark.Cell(mr, 0).SetContent(PartType + "*");
                                            }
                                            fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 1).SetContent(semester);
                                            fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 2).SetContent(coursecod);
                                            fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 3).SetContent(coursename);
                                            fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 4).SetContent(maxinternalmark);
                                            fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 5).SetContent(internalmark);
                                            fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 6).SetContent(maxexternalmark);
                                            fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 7).SetContent(externalmark);
                                            fullmark.Cell(mr, 7).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 8).SetContent(maxtotalmark);
                                            fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 9).SetContent(totalmark);
                                            fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 10).SetContent(Convert.ToString(creditpoints));
                                            fullmark.Cell(mr, 10).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            string gp = string.Format("{0:0.0}", gradpoint);
                                            fullmark.Cell(mr, 11).SetContent(gp);
                                            string wm = string.Format("{0:0.00}", weighted);
                                            fullmark.Cell(mr, 12).SetContent(wm);
                                            //double gradepoint = 0;
                                            //double.TryParse(gradepoints, out gradepoint);
                                            //gradepoint = Math.Round(gradepoint, 1, MidpointRounding.AwayFromZero);
                                            //fullmark.Cell(mr, 12).SetContent(String.Format("{0:00.0}", gradepoint));
                                            //double weightmark = Convert.ToDouble(gradepoint * Convert.ToDouble(printds_rows.Tables[0].Rows[i]["credit_points"]));
                                            //weightmark = Math.Round(weightmark, 1, MidpointRounding.AwayFromZero);
                                            //fullmark.Cell(mr, 13).SetContent(String.Format("{0:000.0}", weightmark));
                                            fullmark.Cell(mr, 11).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 12).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 13).SetContent(Convert.ToString(result));
                                            fullmark.Cell(mr, 13).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        }
                                        mr++;
                                    }
                                    fullmark.Cell(mr, 3).SetCellPadding(6);
                                    fullmark.Cell(mr + 1, 3).SetContent(">>>>> END OF STATEMENT <<<<<");
                                    fullmark.Cell(mr + 1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    if (gp_status == true)
                                    {
                                        double gpa = 0;// Math.Round((sum_gpa / tot_credit), 2, MidpointRounding.AwayFromZero);
                                        if (tot_credit > 0)
                                        {
                                            gpa = Math.Round((sum_gpa / tot_credit), 2, MidpointRounding.AwayFromZero);
                                        }
                                        double grade_mark = Math.Round(gpa * 10, 0, MidpointRounding.AwayFromZero);
                                        string grade = string.Empty;
                                        string q = "select * from Grade_Master where College_Code='" + collegeCode.Trim() + "' and Semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + grade_mark + "' between Frange and Trange; select * from Grade_Master where College_Code='" + collegeCode.Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + grade_mark + "' between Frange and Trange;";
                                        DataSet dsgrade = new DataSet();
                                        dsgrade = d2.select_method_wo_parameter(q, "Text");
                                        if (dsgrade.Tables.Count > 0)
                                        {
                                            if (dsgrade.Tables[0].Rows.Count == 0)
                                            {
                                                if (dsgrade.Tables.Count > 1 && dsgrade.Tables[1].Rows.Count > 0)
                                                {
                                                    grade = Convert.ToString(dsgrade.Tables[1].Rows[0]["Mark_Grade"]).Trim();
                                                }
                                            }
                                            else
                                            {
                                                grade = Convert.ToString(dsgrade.Tables[0].Rows[0]["Mark_Grade"]).Trim();
                                            }
                                        }
                                        gpa = Math.Round(gpa, 1, MidpointRounding.AwayFromZero);
                                        fullmark.Cell(mr + 3, 3).SetContent("G.P.A. FOR PART-3   :   " + String.Format("{0:0.0}", gpa) + " ( " + grade + " ) ");
                                    }
                                    else
                                    {
                                        fullmark.Cell(mr + 3, 3).SetContent("G.P.A.  :   NOT ELIGIBLE");
                                    }
                                    fullmark.Cell(mr + 2, 3).SetCellPadding(6);
                                    fullmark.Cell(mr + 3, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 27, 206, 665, 570));
                                    mypdfpage.Add(newpdftabpage2);
                                }
                                pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 27, 795, 100, 25), System.Drawing.ContentAlignment.MiddleLeft, "*  PRACTICAL");
                                mypdfpage.Add(pdfdoi);
                                if (arrear)
                                {
                                    pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 390, 795, 300, 25), System.Drawing.ContentAlignment.MiddleLeft, "G.P.A IS FURNISHED ONLY FOR THE CURRENT SEMESTER");
                                    mypdfpage.Add(pdfdoi);
                                }
                                pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 470, 795, 250, 25), System.Drawing.ContentAlignment.MiddleCenter, coe);
                                mypdfpage.Add(pdfdoi);
                                //pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 27, 795, 100, 25), System.Drawing.ContentAlignment.MiddleLeft, "*  PRACTICAL");
                                //mypdfpage.Add(pdfdoi);
                            }
                            mypdfpage.SaveToDocument();
                        }
                    }
                }
            }
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
            }
        }
        catch (Exception ex)
        {
        }
    }

    //UG Cnsolidated Mark Statements
    public void markbasedconsolidatedF_jamal()
    {
        try
        {
            DataSet printds = new DataSet();
            string lblerror1 = string.Empty;
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            //578
            string max_sem = string.Empty;
            int maxSem = 0;
            Boolean printpage = false;
            string edu_level = string.Empty;
            string degree = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string roman = string.Empty;
            string semroman = string.Empty;
            string grade = string.Empty;
            string gradepoints = string.Empty;
            string coe = string.Empty;
            string subjectcode_Part1 = string.Empty;
            string subjectcode_Part2 = string.Empty;
            string subjectcode_Part3 = string.Empty;
            string subjectcode_Part4 = string.Empty;
            string cal_gpa = string.Empty;
            string current_semester = string.Empty;
            string app_no = string.Empty;
            string subtype = string.Empty;
            string admid_date = string.Empty;
            string additionalmsg = string.Empty;
            bool onlyca = false;
            bool onlyes = false;
            int yearofpassing = 0;
            DataSet gradeds = new DataSet();
            DataSet dsSpl = new DataSet();
            DataTable dtStar = new DataTable();
            Font fontdegreename = new Font("Times New Roman", 14, FontStyle.Bold);
            Font fontStudDetails = new Font("Times New Roman", 11, FontStyle.Bold);
            Font fontStmtMarks = new Font("Times New Roman", 8, FontStyle.Regular);
            Font fontcgpa = new Font("Times New Roman", 11, FontStyle.Regular);
            Font fontDate = new Font("Times New Roman", 11, FontStyle.Regular);
            Font f1_cos10bold = new Font("Times New Roman", 10, FontStyle.Bold);
            Font f2_cos9bold = new Font("Comic Sans MS", 9, FontStyle.Bold);
            Font f3_arial10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font f4_arial7reg = new Font("Arial", 7, FontStyle.Regular);
            Font f5_pal10bold = new Font("Palatino Linotype", 10, FontStyle.Bold);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.1, 29.7));
            PdfPage mypdfpage;
            FpSpread2.SaveChanges();
            for (int res = 1; res < Convert.ToInt32(FpSpread2.Sheets[0].RowCount); res++)
            {
                int isval = 0;
                int additonalstatus = 0;
                onlyca = false;
                onlyes = false;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                additionalmsg = string.Empty;
                int splcredit = 0;
                if (isval == 1)
                {
                    bool saveStatus = false;
                    printds.Clear();
                    printds.Dispose();
                    printds_new.Clear();
                    printds_new.Dispose();
                    string grade_set = string.Empty;
                    rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                    regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                    //CONVERT(VARCHAR(11),GETDATE(),106)
                    string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.college_code,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 110) as dob,c.edu_level,CONVERT(VARCHAR(11),R.Adm_Date,106) as ADM_DATE FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' ;  select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
                    sql = sql + "  select count(s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass' and sc.roll_no=mark_entry.roll_no and mark_entry.subject_no=sc.subject_no and mark_entry.roll_no='" + rollnosub + "'; ";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail' and sc.roll_no=mark_entry.roll_no and mark_entry.subject_no=sc.subject_no and mark_entry.roll_no='" + rollnosub + "'; select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass')";
                    printds = da.select_method_wo_parameter(sql, "Text");
                    int noofsubapplied = Convert.ToInt32(printds.Tables[3].Rows[0][0].ToString());
                    int noofsubpassed = Convert.ToInt32(printds.Tables[4].Rows[0][0].ToString());
                    int noofsubfailed = Convert.ToInt32(printds.Tables[5].Rows[0][0].ToString());
                    int Totalfailcount = printds.Tables[6].Rows.Count;
                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                    {
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = printds.Tables[0].Rows[0]["degree_code"].ToString();
                        edu_level = Convert.ToString(printds.Tables[0].Rows[0]["Edu_Level"]).Trim();
                        app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]);
                        string collegeCode = Convert.ToString(printds.Tables[0].Rows[0]["college_code"]).Trim();
                        mypdfpage = mydoc.NewPage();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        coe = printds.Tables[1].Rows[0]["coe"].ToString();
                        admid_date = Convert.ToString(printds.Tables[0].Rows[0]["ADM_DATE"]);
                        max_sem = d2.GetFunctionv("select NDurations from ndegree where batch_year='" + batch_year + "'  and Degree_code='" + degree_code + "' and college_code='" + Convert.ToString(collegeCode).Trim() + "'");
                        if (max_sem == "" || max_sem == null)
                        {
                            max_sem = d2.GetFunctionv("SELECT Duration FROM Degree where  Degree_Code='" + degree_code + "' and college_code='" + Convert.ToString(collegeCode).Trim() + "'");
                        }
                        int.TryParse(max_sem, out maxSem);
                        int newbatch = 0;
                        int.TryParse(batch_year, out newbatch);
                        DateTime dt = new DateTime();
                        int cur_year = DateTime.Now.Year;
                        int diff = newbatch + (maxSem / 2);
                        if (cur_year >= diff)
                        {
                        }
                        else
                        {
                            lbl_popuperr.Text = "The Consolidated is Generated Only For Passed Out Students.";
                            errdiv.Visible = true;
                            return;
                        }
                    }
                    //if (printds.Tables[0].Rows.Count > 0 && noofsubpassed == noofsubapplied)
                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0 && Totalfailcount == 0)
                    {
                        PdfTable tblstudDetail;
                        PdfTable tblCgpa;
                        PdfTextArea pdfdoi;
                        PdfImage LogoImage2;
                        PdfTablePage newpdftabpage2;
                        PdfTable fullmark;
                        printpage = true;
                        string principal = string.Empty;
                        edu_level = Convert.ToString(printds.Tables[0].Rows[0]["Edu_Level"]).Trim();
                        app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]);
                        mypdfpage = mydoc.NewPage();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        coe = Convert.ToString(printds.Tables[1].Rows[0]["coe"]);
                        admid_date = Convert.ToString(printds.Tables[0].Rows[0]["ADM_DATE"]);
                        string collegeCode = Convert.ToString(printds.Tables[0].Rows[0]["college_code"]).Trim();
                        string[] adm_dt = admid_date.Split(' ');
                        if (adm_dt.Length > 0)
                        {
                            if (adm_dt.Length == 3)
                                admid_date = adm_dt[2] + " - JUN";//+ adm_dt[1]
                        }
                        //admid_date.ToString("yyyy-MMM");
                        //DateTime dt = new DateTime();
                        // //DateTime dt = new DateTime();
                        // //           exam_held = (dtsub.Rows.Count > 0) ? dtsub.Rows[0]["exam_date"].ToString() : string.Empty;
                        // //           if (exam_held != "")
                        // //           {
                        // //               DateTime.TryParseExact(exam_held, "dd/MM/yyyy", null, DateTimeStyles.None, out dt);
                        ////           }M/dd/yyyy hh:mm:ss tt
                        //DateTime.TryParseExact(admid_date, "dd/MM/yyyy", null, DateTimeStyles.None, out dt);
                        //admid_date = dt.ToString("yyyy-MMM");
                        //string[] spiltcoe = coe.Split(' ');
                        //string newcoe = string.Empty;
                        //for (int ce = 1; ce < spiltcoe.GetUpperBound(0); ce++)
                        //{
                        //    string[] spiltcoe12 = spiltcoe[0].Split('.');
                        //    if (spiltcoe12.Length == 3)
                        //    {
                        //        newcoe = spiltcoe12[1].ToString();
                        //        newcoe = newcoe + "." + spiltcoe12[2].ToString();
                        //    }
                        //    if (newcoe == "")
                        //    {
                        //        newcoe = spiltcoe[ce].ToString();
                        //    }
                        //    else
                        //    {
                        //        newcoe = newcoe + " " + spiltcoe[ce].ToString();
                        //    }
                        //}
                        //coe = newcoe;
                        principal = Convert.ToString(printds.Tables[1].Rows[0]["principal"]);
                        //string[] spiltprinci = principal.Split('.');
                        //string newprinc = string.Empty;
                        //for (int ce = 1; ce <= spiltprinci.GetUpperBound(0); ce++)
                        //{
                        //    if (newprinc == "")
                        //    {
                        //        newprinc = spiltprinci[ce].ToString();
                        //    }
                        //    else
                        //    {
                        //        newprinc = newprinc + "." + spiltprinci[ce].ToString();
                        //    }
                        //}
                        //principal = newprinc.ToUpper();
                        // month = ddlMonth.SelectedIndex;
                        //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                        string strMonthName = string.Empty;
                        //monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        //monthandyear = monthandyear.ToUpper();
                        studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        branch = printds.Tables[0].Rows[0]["Dept_name"].ToString();
                        dob = printds.Tables[0].Rows[0]["dob"].ToString();
                        string stdappno = printds.Tables[0].Rows[0]["App_No"].ToString();
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = printds.Tables[0].Rows[0]["degree_code"].ToString();
                        int.TryParse(batch_year, out yearofpassing);
                        if (sem == "1")
                        {
                            semroman = "I";
                        }
                        else if (sem == "2")
                        {
                            semroman = "II";
                        }
                        else if (sem == "3")
                        {
                            semroman = "III";
                        }
                        else if (sem == "4")
                        {
                            semroman = "IV";
                        }
                        else if (sem == "5")
                        {
                            semroman = "V";
                        }
                        else if (sem == "6")
                        {
                            semroman = "VI";
                        }
                        else if (sem == "7")
                        {
                            semroman = "VII";
                        }
                        else if (sem == "8")
                        {
                            semroman = "VIII";
                        }
                        // x=248,y=70.8,W=80 ,H= 50
                        //pdfdoi = new PdfTextArea(fontdegreename, System.Drawing.Color.Black, new PdfArea(mydoc, 227, 45, 100, 25), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString(degree));
                        //mypdfpage.Add(pdfdoi);
                        sql3 = "Select syllabus_master.semester,Subject_Type,subject_name,subject_code,subject.subject_no,result,max_int_marks,max_ext_marks,internal_mark,external_mark,total,maxtotal,grade,cp,credit_points,mark_entry.subject_no,semester,maxtotal,exam_code,subject.Part_Type,sub_sem.priority,sub_sem.lab,subject.subjectpriority from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "' order by syllabus_master.semester,isnull(subject.Part_Type,'3') asc,subject.subjectpriority,subject_code asc";
                        //sub_sem.priority,subject.Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no" ,SUBSTRING(subject_code,(LEN(subject_code)-2) ,1) as Prac_code;
                        printds_rows.Clear();
                        printds_rows.Dispose();
                        printds_rows = da.select_method_wo_parameter(sql3, "Text");
                        string stdphtsql = "select * from StdPhoto where app_no='" + stdappno + "'";
                        MemoryStream memoryStream = new MemoryStream();
                        DataSet dsstdpho = new DataSet();
                        dsstdpho.Clear();
                        dsstdpho.Dispose();
                        dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                        if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                        {
                            byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                            memoryStream.Write(file, 0, file.Length);
                            if (file.Length > 0)
                            {
                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                {
                                    //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                }
                                else
                                {
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                    //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                }
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                        {
                            LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                            mypdfpage.Add(LogoImage2, 525, 23, 420);
                        }
                        else
                        {
                        }
                        string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-";
                        if (edu_level.Trim().ToLower() == "ug")
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 3));
                            grade_set = "0";
                            yearofpassing += (maxSem / 2);
                        }
                        else
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 2));
                            grade_set = "1";
                            yearofpassing += (maxSem / 2);
                        }
                        tblstudDetail = mydoc.NewTable(fontStudDetails, 4, 3, 5);
                        tblstudDetail.VisibleHeaders = false;
                        tblstudDetail.SetBorders(Color.Black, 1, BorderType.None);
                        //255,100,106,156,88
                        tblstudDetail.SetColumnsWidth(new int[] { 180, 288, 100 });//280, 150, 150, 180, 150
                        tblstudDetail.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(1, 0).SetContent(degree);
                        tblstudDetail.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(1, 1).SetContent(branch);
                        tblstudDetail.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(1, 2).SetContent(txtdop.Text);
                        tblstudDetail.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(3, 0).SetContent(regnumber);
                        tblstudDetail.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(3, 1).SetContent(studname);
                        tblstudDetail.Cell(3, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(3, 2).SetContent("APRIL " + yearofpassing);
                        // x=13,y=121.8,W=706 ,H=41
                        newpdftabpage2 = tblstudDetail.CreateTablePage(new PdfArea(mydoc, 12, 87, 580, 85));
                        mypdfpage.Add(newpdftabpage2);
                        double overallcreditearned = 0;
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            saveStatus = true;
                            fullmark = mydoc.NewTable(fontStmtMarks, printds_rows.Tables[0].Rows.Count + maxSem + 4, 14, 1);
                            fullmark.VisibleHeaders = false;
                            fullmark.SetBorders(Color.Black, 1, BorderType.None);
                            fullmark.Columns[0].SetWidth(23);
                            fullmark.Columns[1].SetWidth(25);
                            fullmark.Columns[2].SetWidth(75);
                            fullmark.Columns[3].SetWidth(230);
                            fullmark.Columns[4].SetWidth(60);
                            fullmark.Columns[5].SetWidth(25);
                            fullmark.Columns[6].SetWidth(25);
                            fullmark.Columns[7].SetWidth(25);
                            fullmark.Columns[8].SetWidth(25);
                            fullmark.Columns[9].SetWidth(25);
                            fullmark.Columns[10].SetWidth(25);
                            fullmark.Columns[11].SetWidth(30);
                            fullmark.Columns[12].SetWidth(30);
                            fullmark.Columns[13].SetWidth(42);
                            int mr = 0;
                            int semescount = 0;
                            int sheet = 1;
                            string part1_sum = string.Empty;
                            string part2_sum = string.Empty;
                            string part3_sum = string.Empty;
                            string part1_max = string.Empty;
                            string part2_max = string.Empty;
                            string part3_max = string.Empty;
                            string part1_totcrdit = string.Empty;
                            string part2_totcrdit = string.Empty;
                            string part3_totcrdit = string.Empty;
                            string part1_weight = string.Empty;
                            string part2_weight = string.Empty;
                            string part3_weight = string.Empty;
                            string part1_cgpa = string.Empty;
                            string part2_cgpa = string.Empty;
                            string part3_cgpa = string.Empty;
                            string part1_grade = string.Empty;
                            string part2_grade = string.Empty;
                            string part3_grade = string.Empty;
                            string part1_class = string.Empty;
                            string part2_class = string.Empty;
                            string part3_class = string.Empty;
                            Get_Partwise_All("1", printds_rows, ref part1_sum, ref part1_max, ref part1_totcrdit, ref  part1_weight, ref  part1_cgpa, ref part1_grade, noofsubfailed, edu_level, ref part1_class, batch_year, degree_code, collegeCode);
                            Get_Partwise_All("2", printds_rows, ref part2_sum, ref part2_max, ref part2_totcrdit, ref  part2_weight, ref  part2_cgpa, ref part2_grade, noofsubfailed, edu_level, ref part2_class, batch_year, degree_code, collegeCode);
                            Get_Partwise_All("3", printds_rows, ref part3_sum, ref part3_max, ref part3_totcrdit, ref  part3_weight, ref  part3_cgpa, ref part3_grade, noofsubfailed, edu_level, ref part3_class, batch_year, degree_code, collegeCode);
                            for (int s = 1; s <= maxSem; s++)
                            {
                                semescount++;
                                DataView dvMark = new DataView();
                                printds_rows.Tables[0].DefaultView.RowFilter = "semester='" + s + "'";
                                dvMark = printds_rows.Tables[0].DefaultView;
                                if (dvMark.Count > 0)
                                {

                                    for (int i = 0; i < dvMark.Count; i++)
                                    {
                                        if (mr != 0 && mr % 33 == 0)
                                        {
                                            sheet++;
                                            fullmark.Cell(mr + 2, 3).SetCellPadding(5);
                                            fullmark.Cell(mr + 2, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr + 2, 3).SetContent("CONTINUED IN SHEET " + sheet + " ....");
                                            newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 12, 174, 580, 500));
                                            mypdfpage.Add(newpdftabpage2);
                                            tblCgpa = mydoc.NewTable(fontStmtMarks, 2, 4, 5);
                                            tblCgpa.VisibleHeaders = false;
                                            tblCgpa.SetBorders(Color.Black, 1, BorderType.None);
                                            tblCgpa.SetColumnsWidth(new int[] { 75, 118, 118, 118 });
                                            tblCgpa.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tblCgpa.Cell(0, 0).SetContent("Secured");
                                            tblCgpa.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tblCgpa.Cell(1, 0).SetContent("Maximum");
                                            tblCgpa.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblCgpa.Cell(0, 1).SetContent(part1_sum);
                                            tblCgpa.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblCgpa.Cell(1, 1).SetContent(part1_max);
                                            tblCgpa.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblCgpa.Cell(0, 2).SetContent(part2_sum);
                                            tblCgpa.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblCgpa.Cell(1, 2).SetContent(part2_max);
                                            tblCgpa.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblCgpa.Cell(0, 3).SetContent(part3_sum);
                                            tblCgpa.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblCgpa.Cell(1, 3).SetContent(part3_max);
                                            newpdftabpage2 = tblCgpa.CreateTablePage(new PdfArea(mydoc, 12, 695, 450, 150));
                                            mypdfpage.Add(newpdftabpage2);
                                            pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 12, 810, 189, 25), System.Drawing.ContentAlignment.TopLeft, principal);
                                            mypdfpage.Add(pdfdoi);
                                            pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 398, 810, 189, 25), System.Drawing.ContentAlignment.TopLeft, coe);
                                            mypdfpage.Add(pdfdoi);
                                            mypdfpage.SaveToDocument();
                                            mypdfpage = mydoc.NewPage();
                                            mr = 0;
                                            if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                            {
                                                LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                                                mypdfpage.Add(LogoImage2, 525, 23, 420);
                                            }
                                            else
                                            {
                                            }
                                            tblstudDetail = mydoc.NewTable(fontStudDetails, 4, 3, 5);
                                            tblstudDetail.VisibleHeaders = false;
                                            tblstudDetail.SetBorders(Color.Black, 1, BorderType.None);
                                            //255,100,106,156,88
                                            tblstudDetail.SetColumnsWidth(new int[] { 180, 288, 100 }); //280, 150, 150, 180, 150
                                            tblstudDetail.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblstudDetail.Cell(1, 0).SetContent(degree);
                                            tblstudDetail.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblstudDetail.Cell(1, 1).SetContent(branch);
                                            tblstudDetail.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblstudDetail.Cell(1, 2).SetContent(txtdop.Text);
                                            tblstudDetail.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblstudDetail.Cell(3, 0).SetContent(regnumber);
                                            tblstudDetail.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblstudDetail.Cell(3, 1).SetContent(studname);
                                            tblstudDetail.Cell(3, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            tblstudDetail.Cell(3, 2).SetContent("APRIL " + yearofpassing);
                                            // x=13,y=121.8,W=706 ,H=41
                                            newpdftabpage2 = tblstudDetail.CreateTablePage(new PdfArea(mydoc, 12, 87, 580, 85));
                                            mypdfpage.Add(newpdftabpage2);
                                            fullmark = mydoc.NewTable(fontStmtMarks, printds_rows.Tables[0].Rows.Count + maxSem + 4, 14, 1);
                                            fullmark.VisibleHeaders = false;
                                            fullmark.SetBorders(Color.Black, 1, BorderType.None);
                                            fullmark.Columns[0].SetWidth(23);
                                            fullmark.Columns[1].SetWidth(25);
                                            fullmark.Columns[2].SetWidth(68);
                                            fullmark.Columns[3].SetWidth(230);
                                            fullmark.Columns[4].SetWidth(60);
                                            fullmark.Columns[5].SetWidth(25);
                                            fullmark.Columns[6].SetWidth(25);
                                            fullmark.Columns[7].SetWidth(25);
                                            fullmark.Columns[8].SetWidth(25);
                                            fullmark.Columns[9].SetWidth(25);
                                            fullmark.Columns[10].SetWidth(25);
                                            fullmark.Columns[11].SetWidth(30);
                                            fullmark.Columns[12].SetWidth(30);
                                            fullmark.Columns[13].SetWidth(42);
                                            //fullmark.Cell(mr, 3).SetCellPadding(5);
                                            //fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            //fullmark.Cell(mr, 3).SetContent("--- CONTINUATION OF STATEMENT FROM ---");
                                            //mr += 2;
                                        }
                                        if (mr == 0)
                                        {
                                            fullmark.Cell(mr, 3).SetCellPadding(5);
                                            fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 3).SetContent("--- SHEET " + sheet + " OF 2  ---");
                                            mr++;
                                        }
                                        string part = string.Empty;
                                        //ToRoman(
                                        part = Convert.ToString(dvMark[i]["Part_Type"]);
                                        if (Convert.ToString(dvMark[i]["lab"]).Trim().ToLower() == "false")
                                        {
                                            fullmark.Cell(mr, 0).SetContent(part);
                                        }
                                        else
                                        {
                                            fullmark.Cell(mr, 0).SetContent(part + "*");
                                        }
                                        //fullmark.Cell(mr, 0).SetContent(part);
                                        fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //ToRoman(string part);
                                        fullmark.Cell(mr, 1).SetContent(dvMark[i]["semester"].ToString());
                                        fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        fullmark.Cell(mr, 2).SetContent(dvMark[i]["subject_code"].ToString());
                                        fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        fullmark.Cell(mr, 3).SetContent(dvMark[i]["subject_name"].ToString());
                                        fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        //string max_int = String.Format("{0:D3}", Convert.ToString(printds_rows.Tables[0].Rows[i]["max_int_marks"]));
                                        fullmark.Cell(mr, 5).SetContent(Convert.ToString(dvMark[i]["max_int_marks"]).Trim().PadLeft(3, '0'));
                                        fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //int sec_internal = 0;
                                        //int.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]),out sec_internal);
                                        //string sec_int = String.Format("{0:D3}", sec_internal);
                                        fullmark.Cell(mr, 6).SetContent(Convert.ToString(dvMark[i]["internal_mark"]).Trim().PadLeft(3, '0'));
                                        fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        fullmark.Cell(mr, 7).SetContent(Convert.ToString(dvMark[i]["max_ext_marks"]).Trim().PadLeft(3, '0'));
                                        fullmark.Cell(mr, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //string sec_ext = String.Format("{0:D3}",Convert.ToString( printds_rows.Tables[0].Rows[i]["external_mark"]).PadLeft(3,'0'));
                                        fullmark.Cell(mr, 8).SetContent(Convert.ToString(dvMark[i]["external_mark"]).Trim().PadLeft(3, '0'));
                                        fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //string max_tot = String.Format("{0:D3}", Convert.ToString(printds_rows.Tables[0].Rows[i]["maxtotal"]).PadLeft(3, '0'));
                                        fullmark.Cell(mr, 9).SetContent(Convert.ToString(dvMark[i]["maxtotal"]).Trim().PadLeft(3, '0'));
                                        fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //string sec_tot = String.Format("{0:D3}",Convert.ToString( printds_rows.Tables[0].Rows[i]["total"]));
                                        fullmark.Cell(mr, 10).SetContent(Convert.ToString(dvMark[i]["total"]).Trim().PadLeft(3, '0'));
                                        fullmark.Cell(mr, 10).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //string earned_credit = String.Format("{0:D2}", Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
                                        fullmark.Cell(mr, 11).SetContent(Convert.ToString(dvMark[i]["credit_points"]).Trim().PadLeft(2, '0'));
                                        fullmark.Cell(mr, 11).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        fullmark.Cell(mr, 12).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        // fullmark.Cell(i, 11).SetContent(printds_rows.Tables[0].Rows[i]["gradepoint"].ToString());
                                        fullmark.Cell(mr, 13).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        double internalmmark = 0;
                                        double externalmark1 = 0;
                                        double totalintext = 0;
                                        double.TryParse(Convert.ToString(dvMark[i]["internal_mark"]).Trim(), out internalmmark);
                                        double extfinal = 0;
                                        double.TryParse(Convert.ToString(dvMark[i]["external_mark"]).Trim(), out extfinal);
                                        extfinal = Math.Round(extfinal, 0);
                                        externalmark1 = extfinal;
                                        string checkedmark = string.Empty;
                                        if (extfinal < 0)
                                        {
                                            checkedmark = loadmarkat(Convert.ToString(extfinal).Trim());
                                        }
                                        else
                                        {
                                            checkedmark = Convert.ToString(extfinal).Trim();
                                        }
                                        if (internalmmark >= 0)
                                        {
                                            if (extfinal > 0)
                                            {
                                                totalintext = internalmmark + externalmark1;
                                            }
                                            else
                                            {
                                                totalintext = internalmmark;
                                            }
                                        }
                                        else
                                        {
                                            if (extfinal > 0)
                                            {
                                                totalintext = externalmark1;
                                            }
                                            else
                                            {
                                                totalintext = 0;
                                            }
                                        }
                                        double totfinal = 0;
                                        totfinal = Math.Round(totalintext, 0);
                                        //fullmark.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //fullmark.Cell(i, 3).SetContent(Convert.ToString(totfinal));
                                        //fullmark.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //fullmark.Cell(i, 4).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]));
                                        double checkmarkmm = 0;
                                        double.TryParse(Convert.ToString(dvMark[i]["total"]).Trim(), out checkmarkmm);
                                        string maxtotalmark = Convert.ToString(dvMark[i]["maxtotal"]).Trim();
                                        double max_total = 0;
                                        double.TryParse(maxtotalmark, out max_total);
                                        if (max_total != 100)
                                        {
                                            checkmarkmm = (checkmarkmm / max_total) * 100;
                                        }
                                        string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(collegeCode).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                        {
                                            gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(collegeCode).Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                        }
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                        {
                                            for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                            {
                                                if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                {
                                                    grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
                                                    gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
                                                }
                                            }
                                        }
                                        double gradepoint = 0;
                                        double.TryParse(gradepoints, out gradepoint);
                                        gradepoint = Math.Round(gradepoint, 1, MidpointRounding.AwayFromZero);
                                        fullmark.Cell(mr, 12).SetContent(String.Format("{0:00.0}", gradepoint));
                                        double creditPoint = 0;
                                        double.TryParse(Convert.ToString(dvMark[i]["credit_points"]).Trim(), out creditPoint);
                                        double weightmark = Convert.ToDouble(gradepoint * creditPoint);
                                        weightmark = Math.Round(weightmark, 1, MidpointRounding.AwayFromZero);
                                        fullmark.Cell(mr, 13).SetContent(String.Format("{0:000.0}", weightmark));
                                        string result = Convert.ToString(dvMark[i]["result"]).Trim().ToLower();
                                        if (result == "fail")
                                        {
                                            result = "RA";
                                            grade = "U";
                                        }
                                        else if (result == "pass")
                                        {
                                            result = "P";
                                        }
                                        else
                                        {
                                            result = "AB";
                                            grade = "U";
                                        }
                                        totfinal = totfinal * creditPoint;
                                        DataView dv = new DataView();
                                        printds.Tables[2].DefaultView.RowFilter = "exam_code='" + Convert.ToString(dvMark[i]["exam_code"]).Trim() + "'";
                                        dv = printds.Tables[2].DefaultView;
                                        if (dv.Count > 0)
                                        {
                                            string exam_y = Convert.ToString(dv[0]["Exam_year"]).Trim();
                                            string exam_m = Convert.ToString(dv[0]["Exam_Month"]).Trim();
                                            strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                            strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                            strMonthName = strMonthName.ToUpper() + " '" + exam_y[exam_y.Length - 2] + exam_y[exam_y.Length - 1];
                                            fullmark.Cell(mr, 4).SetContent(strMonthName);
                                            fullmark.Cell(mr, 4).SetContentAlignment(System.Drawing.ContentAlignment.MiddleCenter);
                                        }
                                        mr++;
                                    }
                                    fullmark.Cell(mr, 9).SetCellPadding(5);
                                    if (mr != 33)
                                        mr++;
                                }
                            }
                            fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            fullmark.Cell(mr, 1).SetFont(fontStmtMarks);
                            fullmark.Cell(mr, 1).SetContent("* PRACTICAL");
                            foreach (PdfCell pc in fullmark.CellRange(mr, 1, mr, 1).Cells)
                            {
                                pc.ColSpan = 2;
                            }
                            fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            fullmark.Cell(mr, 3).SetFont(fontStmtMarks);
                            fullmark.Cell(mr, 3).SetCellPadding(0);
                            fullmark.Cell(mr, 3).SetContent(">>>>>> END OF STATEMENT <<<<<<");
                            newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 12, 174, 580, 500));
                            mypdfpage.Add(newpdftabpage2);
                            tblCgpa = mydoc.NewTable(fontStmtMarks, 2, 4, 5);
                            tblCgpa.VisibleHeaders = false;
                            tblCgpa.SetBorders(Color.Black, 1, BorderType.None);
                            tblCgpa.SetColumnsWidth(new int[] { 75, 118, 118, 118 });
                            tblCgpa.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(0, 0).SetContent("CGPA");
                            tblCgpa.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(1, 0).SetContent("Grade");
                            tblCgpa.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(0, 1).SetContent((part1_weight != "" && part1_totcrdit != "" && part1_cgpa != "") ? (part1_weight + " / " + part1_totcrdit + " = " + part1_cgpa) : "");
                            tblCgpa.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(1, 1).SetContent(part1_grade);
                            tblCgpa.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(0, 2).SetContent((part2_weight != "" && part2_totcrdit != "" && part2_cgpa != "") ? (part2_weight + " / " + part2_totcrdit + " = " + part2_cgpa) : "");
                            tblCgpa.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(1, 2).SetContent(part2_grade);
                            tblCgpa.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(0, 3).SetContent((part3_weight != "" && part3_totcrdit != "" && part3_cgpa != "") ? (part3_weight + " / " + part3_totcrdit + " = " + part3_cgpa) : "");
                            tblCgpa.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(1, 3).SetContent(part3_grade);
                            newpdftabpage2 = tblCgpa.CreateTablePage(new PdfArea(mydoc, 12, 695, 450, 150));
                            mypdfpage.Add(newpdftabpage2);
                        }
                        pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 12, 810, 189, 25), System.Drawing.ContentAlignment.TopLeft, principal);
                        mypdfpage.Add(pdfdoi);
                        pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 398, 810, 189, 25), System.Drawing.ContentAlignment.TopLeft, coe);
                        mypdfpage.Add(pdfdoi);
                        if (saveStatus)
                            mypdfpage.SaveToDocument();
                    }
                    else
                    {
                        if (lblerror1 == "")
                        {
                            lblerror1 = rollnosub;
                        }
                        else
                        {
                            lblerror1 = lblerror1 + "," + rollnosub;
                        }
                    }
                }
            }
            if (lblerror1 != "")
            {
                lblerror.Text = lblerror1;
                lblerror.Visible = true;
            }
            else
            {
                lblerror.Text = string.Empty;
                lblerror.Visible = false;
            }
            if (printpage == true)
            {
                //mydoc.TotalNumberOfPages -= 1;
                int page = mydoc.TotalNumberOfPages;
                string appPath = HttpContext.Current.Server.MapPath("~");
                if (appPath != "")
                {
                    string szPath = appPath + "/Report/";
                    string szFile = "consolidatedmarksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                    mydoc.SaveToFile(szPath + szFile);
                    Response.ClearHeaders();
                    Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                    Response.ContentType = "application/pdf";
                    Response.WriteFile(szPath + szFile);
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    //PG Cnsolidated Mark Statements
    public void pgmarkbasedconsolidatedF_jamal()
    {
        try
        {
            DataSet printds = new DataSet();
            string lblerror1 = string.Empty;
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            //578
            string max_sem = string.Empty;
            int maxSem = 0;
            Boolean printpage = false;
            string edu_level = string.Empty;
            string degree = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string roman = string.Empty;
            string semroman = string.Empty;
            string grade = string.Empty;
            string gradepoints = string.Empty;
            string coe = string.Empty;
            string subjectcode_Part1 = string.Empty;
            string subjectcode_Part2 = string.Empty;
            string subjectcode_Part3 = string.Empty;
            string subjectcode_Part4 = string.Empty;
            string cal_gpa = string.Empty;
            string current_semester = string.Empty;
            string app_no = string.Empty;
            string subtype = string.Empty;
            string admid_date = string.Empty;
            string additionalmsg = string.Empty;
            bool onlyca = false;
            bool onlyes = false;
            int yearofpassing = 0;
            DataSet gradeds = new DataSet();
            DataSet dsSpl = new DataSet();
            DataTable dtStar = new DataTable();
            Font fontdegreename = new Font("Times New Roman", 12, FontStyle.Bold);
            Font fontStudDetails = new Font("Times New Roman", 9, FontStyle.Bold);
            Font fontStmtMarks = new Font("Times New Roman", 8, FontStyle.Regular);
            Font fontcgpa = new Font("Times New Roman", 9, FontStyle.Regular);
            Font fontDate = new Font("Times New Roman", 9, FontStyle.Regular);
            Font f1_cos10bold = new Font("Times New Roman", 10, FontStyle.Bold);
            Font f2_cos9bold = new Font("Comic Sans MS", 9, FontStyle.Bold);
            Font f3_arial10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font f4_arial7reg = new Font("Arial", 7, FontStyle.Regular);
            Font f5_pal10bold = new Font("Palatino Linotype", 10, FontStyle.Bold);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.1, 29.7));
            PdfPage mypdfpage;
            FpSpread2.SaveChanges();
            for (int res = 1; res < Convert.ToInt32(FpSpread2.Sheets[0].RowCount); res++)
            {
                int isval = 0;
                int additonalstatus = 0;
                onlyca = false;
                onlyes = false;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                additionalmsg = string.Empty;
                int splcredit = 0;
                if (isval == 1)
                {
                    bool saveStatus = false;
                    printds.Clear();
                    printds.Dispose();
                    printds_new.Clear();
                    printds_new.Dispose();
                    string grade_set = string.Empty;
                    rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                    regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                    //CONVERT(VARCHAR(11),GETDATE(),106)
                    string sql = "SELECT r.Reg_No,r.college_code,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 110) as dob,c.edu_level,CONVERT(VARCHAR(11),R.Adm_Date,106) as ADM_DATE FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' ;  select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
                    sql = sql + "  select count(s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass' and sc.roll_no=mark_entry.roll_no and mark_entry.subject_no=sc.subject_no and mark_entry.roll_no='" + rollnosub + "'; ";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail' and sc.roll_no=mark_entry.roll_no and mark_entry.subject_no=sc.subject_no and mark_entry.roll_no='" + rollnosub + "'; select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass')";
                    printds = da.select_method_wo_parameter(sql, "Text");
                    //int noofsubapplied = Convert.ToInt32(printds.Tables[3].Rows[0][0].ToString());
                    //int noofsubpassed = Convert.ToInt32(printds.Tables[4].Rows[0][0].ToString());
                    //int noofsubfailed = Convert.ToInt32(printds.Tables[5].Rows[0][0].ToString());
                    int noofsubapplied = 0;// Convert.ToInt32(printds.Tables[3].Rows[0][0].ToString());
                    int noofsubpassed = 0;//Convert.ToInt32(printds.Tables[4].Rows[0][0].ToString());
                    int noofsubfailed = 0;//Convert.ToInt32(printds.Tables[5].Rows[0][0].ToString());
                    int.TryParse(Convert.ToString(printds.Tables[3].Rows[0][0]).Trim(), out noofsubapplied);
                    int.TryParse(Convert.ToString(printds.Tables[4].Rows[0][0]).Trim(), out noofsubpassed);
                    int.TryParse(Convert.ToString(printds.Tables[5].Rows[0][0]).Trim(), out noofsubfailed);
                    int Totalfailcount = printds.Tables[6].Rows.Count;
                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                    {
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim(); ;
                        degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim(); ;
                        edu_level = Convert.ToString(printds.Tables[0].Rows[0]["edu_level"]).Trim(); ;
                        app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]).Trim();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim(); ;
                        coe = Convert.ToString(printds.Tables[1].Rows[0]["coe"]).Trim(); ;
                        admid_date = Convert.ToString(printds.Tables[0].Rows[0]["ADM_DATE"]).Trim();
                        string collegeCode = Convert.ToString(printds.Tables[0].Rows[0]["college_code"]).Trim();
                        max_sem = d2.GetFunctionv("select NDurations from ndegree where batch_year='" + batch_year + "'  and Degree_code='" + degree_code + "' and college_code='" + collegeCode.Trim() + "'");
                        if (max_sem == "" || max_sem == null)
                        {
                            max_sem = d2.GetFunctionv("SELECT Duration FROM Degree where  Degree_Code='" + degree_code + "' and college_code='" + collegeCode.Trim() + "'");
                        }
                        int.TryParse(max_sem, out maxSem);
                        int newbatch = 0;
                        int.TryParse(batch_year, out newbatch);
                        DateTime dt = new DateTime();
                        int cur_year = DateTime.Now.Year;
                        int diff = newbatch + (maxSem / 2);
                        if (cur_year > diff)
                        {
                        }
                        else
                        {
                            lbl_popuperr.Text = "The Consolidated is Generated Only For Passed Out Students.";
                            errdiv.Visible = true;
                            return;
                        }
                    }
                    //if (printds.Tables[0].Rows.Count > 0 && noofsubpassed == noofsubapplied)
                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0 && Totalfailcount == 0)
                    {
                        PdfTable tblstudDetail;
                        PdfTable tblCgpa;
                        PdfTextArea pdfdoi;
                        PdfImage LogoImage2;
                        PdfTablePage newpdftabpage2;
                        PdfTable fullmark;
                        printpage = true;
                        string principal = string.Empty;
                        edu_level = Convert.ToString(printds.Tables[0].Rows[0]["edu_level"]).Trim();
                        app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]).Trim();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        coe = Convert.ToString(printds.Tables[1].Rows[0]["coe"]).Trim();
                        principal = Convert.ToString(printds.Tables[1].Rows[0]["principal"]).Trim();
                        admid_date = Convert.ToString(printds.Tables[0].Rows[0]["ADM_DATE"]).Trim();
                        string collegeCode = Convert.ToString(printds.Tables[0].Rows[0]["college_code"]).Trim();
                        mypdfpage = mydoc.NewPage();
                        string[] adm_dt = admid_date.Split(' ');
                        if (adm_dt.Length > 0)
                        {
                            if (adm_dt.Length == 3)
                                admid_date = adm_dt[2] + " - JUN";//+ adm_dt[1]
                        }
                        //admid_date.ToString("yyyy-MMM");
                        //DateTime dt = new DateTime();
                        // //DateTime dt = new DateTime();
                        // //           exam_held = (dtsub.Rows.Count > 0) ? dtsub.Rows[0]["exam_date"].ToString() : string.Empty;
                        // //           if (exam_held != "")
                        // //           {
                        // //               DateTime.TryParseExact(exam_held, "dd/MM/yyyy", null, DateTimeStyles.None, out dt);
                        ////           }M/dd/yyyy hh:mm:ss tt
                        //DateTime.TryParseExact(admid_date, "dd/MM/yyyy", null, DateTimeStyles.None, out dt);
                        //admid_date = dt.ToString("yyyy-MMM");
                        //string[] spiltcoe = coe.Split(' ');
                        //string newcoe = string.Empty;
                        //for (int ce = 1; ce < spiltcoe.GetUpperBound(0); ce++)
                        //{
                        //    string[] spiltcoe12 = spiltcoe[0].Split('.');
                        //    if (spiltcoe12.Length == 3)
                        //    {
                        //        newcoe = spiltcoe12[1].ToString();
                        //        newcoe = newcoe + "." + spiltcoe12[2].ToString();
                        //    }
                        //    if (newcoe == "")
                        //    {
                        //        newcoe = spiltcoe[ce].ToString();
                        //    }
                        //    else
                        //    {
                        //        newcoe = newcoe + " " + spiltcoe[ce].ToString();
                        //    }
                        //}
                        //coe = newcoe;
                        //string[] spiltprinci = principal.Split('.');
                        //string newprinc = string.Empty;
                        //for (int ce = 1; ce <= spiltprinci.GetUpperBound(0); ce++)
                        //{
                        //    if (newprinc == "")
                        //    {
                        //        newprinc = spiltprinci[ce].ToString();
                        //    }
                        //    else
                        //    {
                        //        newprinc = newprinc + "." + spiltprinci[ce].ToString();
                        //    }
                        //}
                        //principal = newprinc.ToUpper();
                        // month = ddlMonth.SelectedIndex;
                        //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                        string strMonthName = string.Empty;
                        //monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        //monthandyear = monthandyear.ToUpper();
                        studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim(); ;
                        branch = Convert.ToString(printds.Tables[0].Rows[0]["Dept_name"]).Trim(); ;
                        dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]).Trim(); ;
                        string stdappno = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim(); ;
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim(); ;
                        degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim(); ;
                        int.TryParse(batch_year, out yearofpassing);
                        if (sem == "1")
                        {
                            semroman = "I";
                        }
                        else if (sem == "2")
                        {
                            semroman = "II";
                        }
                        else if (sem == "3")
                        {
                            semroman = "III";
                        }
                        else if (sem == "4")
                        {
                            semroman = "IV";
                        }
                        else if (sem == "5")
                        {
                            semroman = "V";
                        }
                        else if (sem == "6")
                        {
                            semroman = "VI";
                        }
                        else if (sem == "7")
                        {
                            semroman = "VII";
                        }
                        else if (sem == "8")
                        {
                            semroman = "VIII";
                        }
                        sql3 = "Select syllabus_master.semester,Subject_Type,subject_name,subject_code,subject.subject_no,result,max_int_marks,max_ext_marks,internal_mark,external_mark,total,maxtotal,grade,cp,credit_points,exam_code,subject.Part_Type,sub_sem.priority,sub_sem.lab,subject.subjectpriority from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "' order by syllabus_master.semester,isnull(subject.Part_Type,'3') asc,subject.subjectpriority,subject_code asc,len(subject_code)";
                        //sub_sem.priority,subject.Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no";
                        printds_rows.Clear();
                        printds_rows.Dispose();
                        printds_rows = da.select_method_wo_parameter(sql3, "Text");
                        string stdphtsql = "select * from StdPhoto where app_no='" + stdappno + "'";
                        MemoryStream memoryStream = new MemoryStream();
                        DataSet dsstdpho = new DataSet();
                        dsstdpho.Clear();
                        dsstdpho.Dispose();
                        dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                        if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0)
                        {
                            if (!string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()) && dsstdpho.Tables[0].Rows[0][1] != null)
                            {
                                byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                                memoryStream.Write(file, 0, file.Length);
                                if (file.Length > 0)
                                {
                                    System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                    System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                                    if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                    {
                                        //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                    }
                                    else
                                    {
                                        thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                        //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                                    }
                                }
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                        {
                            LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                            mypdfpage.Add(LogoImage2, 508, 80, 420);
                        }
                        else
                        {
                        }
                        string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-";
                        if (edu_level.Trim().ToLower() == "ug")
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 3)).Trim();
                            grade_set = "0";
                            yearofpassing += (maxSem / 2);
                        }
                        else
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 2)).Trim();
                            grade_set = "1";
                            yearofpassing += (maxSem / 2);
                        }
                        tblstudDetail = mydoc.NewTable(fontStudDetails, 4, 3, 5);
                        tblstudDetail.VisibleHeaders = false;
                        tblstudDetail.SetBorders(Color.Black, 1, BorderType.None);
                        //255,100,106,156,88
                        tblstudDetail.SetColumnsWidth(new int[] { 100, 311, 106 });
                        tblstudDetail.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(1, 0).SetContent(degree);
                        tblstudDetail.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(1, 1).SetContent(branch);
                        tblstudDetail.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(1, 2).SetContent(txtdop.Text);
                        tblstudDetail.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(3, 0).SetContent(regnumber);
                        tblstudDetail.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(3, 1).SetContent(studname);
                        tblstudDetail.Cell(3, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(3, 2).SetContent("APRIL " + yearofpassing);
                        newpdftabpage2 = tblstudDetail.CreateTablePage(new PdfArea(mydoc, 50, 142, 506, 85));
                        mypdfpage.Add(newpdftabpage2);
                        double overallcreditearned = 0;
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            saveStatus = true;//printds_rows.Tables[0].Rows.Count + maxSem + 4
                            fullmark = mydoc.NewTable(fontStmtMarks, printds_rows.Tables[0].Rows.Count + maxSem * 10, 13, 1);
                            fullmark.VisibleHeaders = false;
                            fullmark.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
                            //fullmark.Columns[0].SetWidth(23);
                            fullmark.Columns[0].SetWidth(20);
                            fullmark.Columns[1].SetWidth(60);
                            fullmark.Columns[2].SetWidth(230);
                            fullmark.Columns[3].SetWidth(45);
                            fullmark.Columns[4].SetWidth(20);
                            fullmark.Columns[5].SetWidth(20);
                            fullmark.Columns[6].SetWidth(20);
                            fullmark.Columns[7].SetWidth(20);
                            fullmark.Columns[8].SetWidth(20);
                            fullmark.Columns[9].SetWidth(20);
                            fullmark.Columns[10].SetWidth(25);
                            fullmark.Columns[11].SetWidth(25);
                            fullmark.Columns[12].SetWidth(33);
                            int mr = 0;
                            int semescount = 0;
                            int sheet = 1;
                            string overall_sum = string.Empty;
                            string part1_sum = string.Empty;
                            string part2_sum = string.Empty;
                            string part3_sum = string.Empty;
                            string overall_max = string.Empty;
                            string part1_max = string.Empty;
                            string part2_max = string.Empty;
                            string part3_max = string.Empty;
                            string overall_totcrdit = string.Empty;
                            string part1_totcrdit = string.Empty;
                            string part2_totcrdit = string.Empty;
                            string part3_totcrdit = string.Empty;
                            string overall_weight = string.Empty;
                            string part1_weight = string.Empty;
                            string part2_weight = string.Empty;
                            string part3_weight = string.Empty;
                            string overall_cgpa = string.Empty;
                            string part1_cgpa = string.Empty;
                            string part2_cgpa = string.Empty;
                            string part3_cgpa = string.Empty;
                            string overall_grade = string.Empty;
                            string part1_grade = string.Empty;
                            string part2_grade = string.Empty;
                            string part3_grade = string.Empty;
                            string overall_class = string.Empty;
                            string part1_class = string.Empty;
                            string part2_class = string.Empty;
                            string part3_class = string.Empty;
                            Get_Partwise_All("1", printds_rows, ref part1_sum, ref part1_max, ref part1_totcrdit, ref  part1_weight, ref  part1_cgpa, ref part1_grade, noofsubfailed, edu_level, ref part1_class, batch_year, degree_code, collegeCode);
                            Get_Partwise_All("2", printds_rows, ref part2_sum, ref part2_max, ref part2_totcrdit, ref  part2_weight, ref  part2_cgpa, ref part2_grade, noofsubfailed, edu_level, ref part2_class, batch_year, degree_code, collegeCode);
                            Get_Partwise_All("3", printds_rows, ref part3_sum, ref part3_max, ref part3_totcrdit, ref  part3_weight, ref  part3_cgpa, ref part3_grade, noofsubfailed, edu_level, ref part3_class, batch_year, degree_code, collegeCode);
                            Get_Partwise_All("", printds_rows, ref overall_sum, ref overall_max, ref overall_totcrdit, ref  overall_weight, ref  overall_cgpa, ref overall_grade, noofsubfailed, edu_level, ref overall_class, batch_year, degree_code, collegeCode);
                            for (int s = 1; s <= maxSem; s++)
                            {
                                semescount = (s * 10) + s;
                                DataView dvMark = new DataView();
                                printds_rows.Tables[0].DefaultView.RowFilter = "semester='" + s + "'";
                                dvMark = printds_rows.Tables[0].DefaultView;
                                fullmark.Cell(mr, 0).SetContent(ToRoman(Convert.ToString(s)) + " SEMESTER");
                                fullmark.Cell(mr, 0).SetCellPadding(3);
                                fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                foreach (PdfCell pc in fullmark.CellRange(mr, 0, mr, 0).Cells)
                                {
                                    pc.ColSpan = 13;
                                }
                                mr++;
                                if (dvMark.Count > 0)
                                {
                                    for (int i = 0; i < dvMark.Count; i++)
                                    {
                                        string part = string.Empty;
                                        part = Convert.ToString(dvMark[i]["Part_Type"]);
                                        if (Convert.ToString(dvMark[i]["lab"]).Trim().ToLower() == "false")
                                        {
                                            fullmark.Cell(mr, 0).SetContent(part);
                                        }
                                        else
                                        {
                                            fullmark.Cell(mr, 0).SetContent(part + "*");
                                        }
                                        //fullmark.Cell(mr, 0).SetContent(part);
                                        fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //ToRoman(string part);
                                        //fullmark.Cell(mr, 1).SetContent(dvMark[i]["semester"].ToString());
                                        //fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        fullmark.Cell(mr, 1).SetContent(dvMark[i]["subject_code"].ToString());
                                        fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        fullmark.Cell(mr, 2).SetContent(dvMark[i]["subject_name"].ToString());
                                        fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        //string max_int = String.Format("{0:D3}", Convert.ToString(printds_rows.Tables[0].Rows[i]["max_int_marks"]));
                                        fullmark.Cell(mr, 4).SetContent(Convert.ToString(dvMark[i]["max_int_marks"]).PadLeft(3, '0'));
                                        fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //int sec_internal = 0;
                                        //int.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]),out sec_internal);
                                        //string sec_int = String.Format("{0:D3}", sec_internal);
                                        fullmark.Cell(mr, 5).SetContent(Convert.ToString(dvMark[i]["internal_mark"]).PadLeft(3, '0'));
                                        fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        fullmark.Cell(mr, 6).SetContent(Convert.ToString(dvMark[i]["max_ext_marks"]).PadLeft(3, '0'));
                                        fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //string sec_ext = String.Format("{0:D3}",Convert.ToString( printds_rows.Tables[0].Rows[i]["external_mark"]).PadLeft(3,'0'));
                                        fullmark.Cell(mr, 7).SetContent(Convert.ToString(dvMark[i]["external_mark"]).PadLeft(3, '0'));
                                        fullmark.Cell(mr, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //string max_tot = String.Format("{0:D3}", Convert.ToString(printds_rows.Tables[0].Rows[i]["maxtotal"]).PadLeft(3, '0'));
                                        fullmark.Cell(mr, 8).SetContent(Convert.ToString(dvMark[i]["maxtotal"]).PadLeft(3, '0'));
                                        fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //string sec_tot = String.Format("{0:D3}",Convert.ToString( printds_rows.Tables[0].Rows[i]["total"]));
                                        fullmark.Cell(mr, 9).SetContent(Convert.ToString(dvMark[i]["total"]).PadLeft(3, '0'));
                                        fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //string earned_credit = String.Format("{0:D2}", Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
                                        fullmark.Cell(mr, 10).SetContent(Convert.ToString(dvMark[i]["credit_points"]).PadLeft(2, '0'));
                                        fullmark.Cell(mr, 10).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        fullmark.Cell(mr, 11).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        // fullmark.Cell(i, 11).SetContent(printds_rows.Tables[0].Rows[i]["gradepoint"].ToString());
                                        fullmark.Cell(mr, 12).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        double internalmmark = 0;
                                        double externalmark1 = 0;
                                        double totalintext = 0;
                                        double.TryParse(Convert.ToString(dvMark[i]["internal_mark"]), out internalmmark);
                                        double extfinal = 0;
                                        double.TryParse(Convert.ToString(dvMark[i]["external_mark"]), out extfinal);
                                        extfinal = Math.Round(extfinal, 0);
                                        externalmark1 = extfinal;
                                        string checkedmark = string.Empty;
                                        if (extfinal < 0)
                                        {
                                            checkedmark = loadmarkat(Convert.ToString(extfinal));
                                        }
                                        else
                                        {
                                            checkedmark = Convert.ToString(extfinal);
                                        }
                                        if (internalmmark >= 0)
                                        {
                                            if (extfinal > 0)
                                            {
                                                totalintext = internalmmark + externalmark1;
                                            }
                                            else
                                            {
                                                totalintext = internalmmark;
                                            }
                                        }
                                        else
                                        {
                                            if (extfinal > 0)
                                            {
                                                totalintext = externalmark1;
                                            }
                                            else
                                            {
                                                totalintext = 0;
                                            }
                                        }
                                        double totfinal = 0;
                                        totfinal = Math.Round(totalintext, 0);
                                        //fullmark.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //fullmark.Cell(i, 3).SetContent(Convert.ToString(totfinal));
                                        //fullmark.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //fullmark.Cell(i, 4).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]));
                                        double checkmarkmm = 0;
                                        double.TryParse(Convert.ToString(dvMark[i]["total"]).Trim(), out checkmarkmm);
                                        string maxtotalmark = Convert.ToString(dvMark[i]["maxtotal"]).Trim();
                                        double max_total = 0;
                                        double.TryParse(maxtotalmark, out max_total);
                                        if (max_total != 100)
                                        {
                                            checkmarkmm = (checkmarkmm / max_total) * 100;
                                        }
                                        string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(collegeCode).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                        {
                                            gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(collegeCode).Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                        }
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                        {
                                            for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                            {
                                                if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                {
                                                    grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
                                                    gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
                                                }
                                            }
                                        }
                                        //double gradeibtpoint = 0;
                                        //double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim(), out gradeibtpoint);
                                        //gradeibtpoint = gradeibtpoint / 10;
                                        //gradeibtpoint = Math.Round(gradeibtpoint, 1);
                                        //gradepoints = Convert.ToString(gradeibtpoint);
                                        //gradepoints = Convert.ToString(Math.Round(Convert.ToDouble(gradeibtpoint), 2));
                                        //gradepoints = String.Format("{0:0.00}", gradepoints);
                                        double gradepoint = 0;
                                        double.TryParse(gradepoints, out gradepoint);
                                        gradepoint = Math.Round(gradepoint, 1, MidpointRounding.AwayFromZero);
                                        fullmark.Cell(mr, 11).SetContent(String.Format("{0:00.0}", gradepoint));
                                        double creditPoint = 0;
                                        double.TryParse(Convert.ToString(dvMark[i]["credit_points"]).Trim(), out creditPoint);
                                        double weightmark = Convert.ToDouble(gradepoint * creditPoint);
                                        weightmark = Math.Round(weightmark, 1, MidpointRounding.AwayFromZero);
                                        fullmark.Cell(mr, 12).SetContent(String.Format("{0:000.0}", weightmark));
                                        string result = Convert.ToString(dvMark[i]["result"]).ToLower().Trim();
                                        if (result == "fail")
                                        {
                                            result = "RA";
                                            grade = "U";
                                        }
                                        else if (result == "pass")
                                        {
                                            result = "P";
                                        }
                                        else
                                        {
                                            result = "AB";
                                            grade = "U";
                                        }
                                        totfinal = totfinal * creditPoint;
                                        DataView dv = new DataView();
                                        printds.Tables[2].DefaultView.RowFilter = "exam_code='" + Convert.ToString(dvMark[i]["exam_code"]).Trim() + "'";
                                        dv = printds.Tables[2].DefaultView;
                                        if (dv.Count > 0)
                                        {
                                            string exam_y = Convert.ToString(dv[0]["Exam_year"]).Trim();
                                            string exam_m = Convert.ToString(dv[0]["Exam_Month"]).Trim();
                                            strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                            strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                            strMonthName = strMonthName.ToUpper() + " '" + exam_y[exam_y.Length - 2] + exam_y[exam_y.Length - 1];
                                            fullmark.Cell(mr, 3).SetContent(strMonthName);
                                            fullmark.Cell(mr, 3).SetContentAlignment(System.Drawing.ContentAlignment.MiddleCenter);
                                        }
                                        mr++;
                                    }
                                    for (int re = mr; re < semescount; re++)
                                    {
                                        fullmark.Cell(re, 9).SetCellPadding(5);
                                    }
                                    mr = semescount;
                                    fullmark.Cell(mr, 9).SetCellPadding(3);
                                    if (mr != 44)
                                        mr++;
                                }
                                else
                                {
                                    for (int i = 0; i < 10; i++)
                                    {
                                        fullmark.Cell(mr, 9).SetCellPadding(3);
                                        mr++;
                                    }
                                }
                            }
                            fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            fullmark.Cell(mr, 0).SetFont(fontStmtMarks);
                            fullmark.Cell(mr, 0).SetContent("* PRACTICAL");
                            fullmark.Cell(mr, 0).SetCellPadding(0);
                            fullmark.Cell(mr, 9).SetCellPadding(0);
                            foreach (PdfCell pc in fullmark.CellRange(mr, 0, mr, 0).Cells)
                            {
                                pc.ColSpan = 2;
                            }
                            fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            fullmark.Cell(mr, 2).SetFont(fontStmtMarks);
                            fullmark.Cell(mr, 2).SetCellPadding(0);
                            fullmark.Cell(mr, 2).SetContent(">>>>>> END OF STATEMENT <<<<<<");
                            newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 50, 219, 506, 470));
                            mypdfpage.Add(newpdftabpage2);
                            tblCgpa = mydoc.NewTable(fontStmtMarks, 3, 4, 5);
                            tblCgpa.VisibleHeaders = false;
                            tblCgpa.SetBorders(Color.Black, 1, BorderType.None);
                            tblCgpa.SetColumnsWidth(new int[] { 78, 150, 100, 90 });
                            tblCgpa.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(0, 0).SetContent("CGPA  : ");
                            tblCgpa.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(1, 0).SetContent("Grade  : ");
                            tblCgpa.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(2, 0).SetContent("Class  : ");
                            tblCgpa.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblCgpa.Cell(0, 1).SetContent(overall_weight + " / " + overall_totcrdit + " = " + overall_cgpa);
                            tblCgpa.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblCgpa.Cell(1, 1).SetContent(overall_grade);
                            tblCgpa.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblCgpa.Cell(2, 1).SetContent(overall_class);
                            foreach (PdfCell pc in tblCgpa.CellRange(2, 1, 2, 1).Cells)
                            {
                                pc.ColSpan = 3;
                            }
                            tblCgpa.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(0, 2).SetContent("Sec. Marks  :");
                            tblCgpa.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(1, 2).SetContent("Max. Marks  :");
                            tblCgpa.Cell(2, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(2, 2).SetContent("");
                            tblCgpa.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblCgpa.Cell(0, 3).SetContent(overall_sum);
                            tblCgpa.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblCgpa.Cell(1, 3).SetContent(overall_max);
                            newpdftabpage2 = tblCgpa.CreateTablePage(new PdfArea(mydoc, 50, 695, 450, 150));
                            mypdfpage.Add(newpdftabpage2);
                        }
                        pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 50, 810, 189, 25), System.Drawing.ContentAlignment.TopLeft, principal);
                        mypdfpage.Add(pdfdoi);
                        pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 398, 810, 189, 25), System.Drawing.ContentAlignment.TopLeft, coe);
                        mypdfpage.Add(pdfdoi);
                        if (saveStatus)
                            mypdfpage.SaveToDocument();
                    }
                    else
                    {
                        if (lblerror1 == "")
                        {
                            lblerror1 = rollnosub;
                        }
                        else
                        {
                            lblerror1 = lblerror1 + "," + rollnosub;
                        }
                    }
                }
            }
            if (lblerror1 != "")
            {
                lblerror.Text = lblerror1;
                lblerror.Visible = true;
            }
            else
            {
                lblerror.Text = string.Empty;
                lblerror.Visible = false;
            }
            if (printpage == true)
            {
                string appPath = HttpContext.Current.Server.MapPath("~");
                if (appPath != "")
                {
                    string szPath = appPath + "/Report/";
                    string szFile = "consolidatedmarksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                    mydoc.SaveToFile(szPath + szFile);
                    Response.ClearHeaders();
                    Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                    Response.ContentType = "application/pdf";
                    Response.WriteFile(szPath + szFile);
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void Get_Partwise_All(string part, DataSet ds, ref string partwise_sum, ref string partwise_maxtot, ref string tot_credit, ref string weight_mark, ref string cgpa, ref string grade, int failed, string ugpg, ref string classify, string batchYear, string degreeCode, string collegeCode)
    {
        try
        {
            double sumpart = 0;
            double maxtot = 0;
            double tot_credit1 = 0;
            double weight = 0;
            object dummycompute;
            double Credit_Points = 0;
            double grade_points = 0;
            double creditstotal = 0;
            double dbcgpa = 0;
            string edu_level = string.Empty;
            string gradeset = string.Empty;
            string cclass = "", graded = string.Empty;
            if (ugpg.ToLower() == "ug")
            {
                edu_level = "ug";
                gradeset = "0";
            }
            if (ugpg.ToLower() == "pg")
            {
                edu_level = "pg";
                gradeset = "1";
            }
            DataView dvPart = new DataView();
            DataTable dtPart = new DataTable();
            DataSet dsGrade = new DataSet();
            int sem = 0;
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                if (part != "")
                {
                    ds.Tables[0].DefaultView.RowFilter = "Part_Type='" + part + "'";
                    dvPart = ds.Tables[0].DefaultView;
                    dtPart = dvPart.ToTable();
                }
                else
                {
                    dtPart = ds.Tables[0];
                }
                //sumpart = dtPart.Compute();
                if (dtPart.Rows.Count > 0)
                {
                    dummycompute = Convert.ToInt16(dtPart.Compute("Sum(credit_points)", "result='pass'"));
                    double.TryParse(Convert.ToString(dummycompute), out tot_credit1);
                    tot_credit = Convert.ToString(tot_credit1);
                    dummycompute = Convert.ToInt16(dtPart.Compute("Sum(total)", "result='pass'"));
                    double.TryParse(Convert.ToString(dummycompute), out sumpart);
                    partwise_sum = Convert.ToString(sumpart);
                    dummycompute = Convert.ToInt16(dtPart.Compute("Sum(maxtotal)", "result='pass'"));
                    double.TryParse(Convert.ToString(dummycompute), out maxtot);
                    partwise_maxtot = Convert.ToString(maxtot);
                    for (int sub_part = 0; sub_part < dtPart.Rows.Count; sub_part++)
                    {
                        double checkmarkmm = 0;
                        double.TryParse(Convert.ToString(dtPart.Rows[sub_part]["total"]), out checkmarkmm);
                        checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                        string maxtotalmark = Convert.ToString(dtPart.Rows[sub_part]["maxtotal"]).Trim();
                        double max_total = 0;
                        double.TryParse(maxtotalmark, out max_total);
                        if (max_total != 100)
                        {
                            checkmarkmm = (checkmarkmm / max_total) * 100;
                        }
                        string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(collegeCode).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degreeCode + "' and batch_year='" + batchYear + "' and '" + checkmarkmm + "' between frange and trange";
                        dsGrade.Clear();
                        dsGrade = da.select_method_wo_parameter(gradesql, "Text");
                        if (dsGrade.Tables[0].Rows.Count == 0)
                        {
                            gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(collegeCode).Trim() + "' and Degree_Code='" + degreeCode + "' and batch_year='" + batchYear + "'  and '" + checkmarkmm + "' between frange and trange";
                            dsGrade.Clear();
                            dsGrade = da.select_method_wo_parameter(gradesql, "Text");
                        }
                        for (int grd = 0; grd < dsGrade.Tables[0].Rows.Count; grd++)
                        {
                            if (Convert.ToInt32(dsGrade.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(dsGrade.Tables[0].Rows[grd][2]) >= checkmarkmm)
                            {
                                double.TryParse(Convert.ToString(dsGrade.Tables[0].Rows[grd]["Credit_Points"]), out grade_points);
                                double.TryParse(Convert.ToString(dtPart.Rows[sub_part]["credit_points"]), out Credit_Points);
                                creditstotal = creditstotal + Credit_Points;
                                double wei_mark = 0;
                                wei_mark = grade_points * Credit_Points;
                                weight += wei_mark;
                                break;
                            }
                        }
                    }
                    dbcgpa = Math.Round((weight / creditstotal), 1, MidpointRounding.AwayFromZero);
                    //String.Format("{0:00.0}", gradepoint)
                    weight_mark = Convert.ToString(String.Format("{0:0.0}", Math.Round(weight, 1, MidpointRounding.AwayFromZero)));
                    cgpa = Convert.ToString(String.Format("{0:0.0}", dbcgpa));
                    string batchsetting = "1";
                    string batch_yearSett = string.Empty;
                    graded = string.Empty;
                    if (failed != 0 && dbcgpa >= 6)
                    {
                        string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + dbcgpa + "'>= frompoint and '" + dbcgpa + "'<= topoint and batch_year='" + batchYear + "'"; // and (classification='First Class' or classification='First') and  markgradeflag='" + batchsetting + "' and batch_year='" + batch_yearSett + "'
                        dsGrade.Clear();
                        dsGrade = da.select_method_wo_parameter(gradesqlclass, "Text");
                        cclass = "First Class";
                        if (dsGrade.Tables.Count > 0 && dsGrade.Tables[0].Rows.Count == 0)
                        {
                            gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + dbcgpa + "'>= frompoint and '" + dbcgpa + "'<= topoint and batch_year='" + batch_yearSett + "'"; // and (classification='First Class' or classification='First') and  markgradeflag='" + batchsetting + "' and batch_year='" + batch_yearSett + "'
                            dsGrade.Clear();
                            dsGrade = da.select_method_wo_parameter(gradesqlclass, "Text");
                        }
                        if (dsGrade.Tables.Count > 0 && dsGrade.Tables[0].Rows.Count > 0)
                        {
                            graded = Convert.ToString(dsGrade.Tables[0].Rows[0]["grade"]);
                            cclass = "First Class";
                        }
                        else
                        {
                            graded = "A";
                            cclass = "First Class";
                        }
                    }
                    else
                    {
                        string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + dbcgpa + "'>= frompoint and '" + dbcgpa + "'<= topoint and batch_year='" + batchYear + "'";
                        dsGrade.Clear();
                        dsGrade = da.select_method_wo_parameter(gradesqlclass, "Text");
                        if (dsGrade.Tables.Count > 0 && dsGrade.Tables[0].Rows.Count == 0)
                        {
                            gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + dbcgpa + "'>= frompoint and '" + dbcgpa + "'<= topoint and batch_year='" + batch_yearSett + "'";
                            dsGrade.Clear();
                            dsGrade = da.select_method_wo_parameter(gradesqlclass, "Text");
                        }
                        if (dsGrade.Tables.Count > 0 && dsGrade.Tables[0].Rows.Count > 0)
                        {
                            graded = Convert.ToString(dsGrade.Tables[0].Rows[0]["grade"]).Trim();
                            cclass = Convert.ToString(dsGrade.Tables[0].Rows[0]["classification"]).Trim();
                        }
                    }
                    grade = graded;
                    classify = cclass;
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    //Mark Statements For M.Phil.
    public void mphilmarkstatementf6_jamal()
    {
        try
        {
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            string degree = string.Empty;
            string edu_level = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string semroman = string.Empty;
            string coe = string.Empty;
            string curr_sem = string.Empty;
            int cur_sem = 0;
            int sheet_serial_no = 0;
            int additonalstatus = 0;
            string additionalmsg = string.Empty;
            bool onlyca = false;
            bool onlyes = false;
            DataSet gradeds = new DataSet();
            Font fontDegree = new Font("Times New Roman", 14, FontStyle.Bold);
            Font fontStudDetails = new Font("Times New Roman", 11, FontStyle.Bold);
            Font fontdegreename = new Font("Times New Roman", 14, FontStyle.Bold);
            Font fontStmtMarks = new Font("Times New Roman", 11, FontStyle.Regular);
            Font fontOveralrslt = new Font("Times New Roman", 11, FontStyle.Bold);
            Font fontcgpa = new Font("Times New Roman", 11, FontStyle.Regular);
            Font fontDate = new Font("Times New Roman", 11, FontStyle.Regular);
            Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font fontStud = new Font("Comic Sans MS", 10, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 8, FontStyle.Bold);
            DataTable dtPart1 = new DataTable();
            DataTable dtPart2 = new DataTable();
            DataTable dtPart3 = new DataTable();
            DataTable dtPart4 = new DataTable();
            DataSet OverallResult = new DataSet();
            Font Fontarial9 = new Font("Arial", 8, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            sheet_serial_no = 0;
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(25.4, 15.2));
            PdfPage mypdfpage;
            if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
            {
                FpSpread2.SaveChanges();
                for (int res = 1; res < FpSpread2.Sheets[0].RowCount; res++)
                {
                    int isval = 0;
                    additonalstatus = 0;
                    additionalmsg = string.Empty;
                    onlyca = false;
                    onlyes = false;
                    isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                    if (isval == 1)
                    {
                        printds.Clear();
                        printds.Dispose();
                        printds_new.Clear();
                        printds_new.Dispose();
                        PdfTable table1forpage1;
                        PdfTextArea pdfdoi;
                        PdfTablePage newpdftabpage2;
                        PdfTable fullmark;
                        rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                        regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                        string sql = "SELECT r.Reg_No,r.batch_year,r.college_code,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,C.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
                        printds = da.select_method_wo_parameter(sql, "Text");
                        string overall = "select count(s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'; Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc  where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass' and Mark_Entry.roll_no=sc.roll_no and Mark_Entry.subject_no=sc.subject_no and Mark_Entry.roll_no='" + rollnosub + "'  ";
                        overall = overall + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc  where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail' and Mark_Entry.roll_no=sc.roll_no and Mark_Entry.subject_no=sc.subject_no and Mark_Entry.roll_no='" + rollnosub + "'select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass')";
                        OverallResult = da.select_method_wo_parameter(overall, "Text");
                        int noofsubapplied = Convert.ToInt32(OverallResult.Tables[0].Rows[0][0].ToString());
                        int noofsubpassed = Convert.ToInt32(OverallResult.Tables[1].Rows[0][0].ToString());
                        int splcredit = 0;
                        if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                        {
                            mypdfpage = mydoc.NewPage();
                            edu_level = Convert.ToString(printds.Tables[0].Rows[0]["Edu_Level"]).Trim();
                            degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                            coe = printds.Tables[1].Rows[0]["coe"].ToString();
                            string collegeCode = Convert.ToString(printds.Tables[0].Rows[0]["college_code"]).Trim();
                            string grade_set = string.Empty;
                            //month = ddlMonth.SelectedIndex;
                            //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                            int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                            monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                            string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                            monthandyear = strMonthName + "-" + Convert.ToString(ddlYear.SelectedItem.Text).Trim().Trim();
                            monthandyear = monthandyear.ToUpper();
                            studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                            branch = printds.Tables[0].Rows[0]["Dept_name"].ToString();
                            dob = printds.Tables[0].Rows[0]["dob"].ToString();
                            string stdappno = printds.Tables[0].Rows[0]["App_No"].ToString();
                            batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                            degree_code = printds.Tables[0].Rows[0]["degree_code"].ToString();
                            int max_sem1 = 0;
                            string max_sem = d2.GetFunctionv("select NDurations from ndegree where batch_year='" + batch_year + "'  and Degree_code='" + degree_code + "' and college_code='" + Convert.ToString(collegeCode) + "'");
                            if (max_sem == "" || max_sem == null)
                            {
                                max_sem = d2.GetFunctionv("SELECT Duration FROM Degree where  Degree_Code='" + degree_code + "' and college_code='" + Convert.ToString(collegeCode) + "'");
                            }
                            int.TryParse(max_sem, out max_sem1);
                            sql2 = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                            string qryexmappn = string.Empty;
                            printds_new = da.select_method_wo_parameter(sql2, "Text");
                            if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                            {
                                sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
                                GetSem(batch_year, Convert.ToString(ddlYear.SelectedItem.Text), Convert.ToString(month), max_sem, ref sem);
                                int.TryParse(sem, out cur_sem);
                                if (sem == "1")
                                {
                                    semroman = "I";
                                }
                                else if (sem == "2")
                                {
                                    semroman = "II";
                                }
                                else if (sem == "3")
                                {
                                    semroman = "III";
                                }
                                else if (sem == "4")
                                {
                                    semroman = "IV";
                                }
                                else if (sem == "5")
                                {
                                    semroman = "V";
                                }
                                else if (sem == "6")
                                {
                                    semroman = "VI";
                                }
                                else if (sem == "7")
                                {
                                    semroman = "VII";
                                }
                                else if (sem == "8")
                                {
                                    semroman = "VIII";
                                }
                                exam_code = string.Empty;
                                for (int exa = 0; exa < printds_new.Tables[0].Rows.Count; exa++)
                                {
                                    exam_code += printds_new.Tables[0].Rows[exa]["exam_code"].ToString() + ",";
                                }
                                exam_code = exam_code.Trim(',');
                                sql3 = "Select semester,subject_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) + (case when isnull(external_mark,0) >=0  then isnull(external_mark,0) else 0 end) as total,credit_points,case  result when 'Pass' Then 'PASS'  when 'P' Then 'PASS'when 'F' Then 'FAIL' when 'FAIL' Then 'FAIL' when 'AAA' then 'AAA' when 'WHD' then 'WWW' else 'FAIL' end as result,subject.Part_Type,sub_sem.priority,sub_sem.lab from Mark_Entry,Subject,sub_sem,syllabus_master  where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in (" + exam_code + ") and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester desc,subject.Part_Type,subject_code asc";
                                printds_rows.Clear();
                                printds_rows.Dispose();
                                printds_rows = da.select_method_wo_parameter(sql3, "Text");
                                string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-";
                                if (edu_level.Trim().ToLower() == "ug")
                                {
                                    batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 3));
                                    grade_set = "0";
                                }
                                else
                                {
                                    batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 2));
                                    grade_set = "1";
                                }
                                table1forpage1 = mydoc.NewTable(fontStudDetails, 4, 3, 4);
                                table1forpage1.VisibleHeaders = false;
                                table1forpage1.SetBorders(Color.Black, 1, BorderType.None);
                                table1forpage1.SetColumnsWidth(new int[] { 235, 320, 125 });
                                table1forpage1.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(1, 0).SetContent(degree);
                                table1forpage1.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(1, 1).SetContent(branch);
                                table1forpage1.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(1, 2).SetContent(txtdop.Text);
                                table1forpage1.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(3, 0).SetContent(regnumber);
                                table1forpage1.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(3, 1).SetContent(studname);
                                table1forpage1.Cell(3, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(3, 2).SetContent(monthandyear);
                                newpdftabpage2 = table1forpage1.CreateTablePage(new PdfArea(mydoc, 34, 85, 660, 90));
                                mypdfpage.Add(newpdftabpage2);
                                double sum_gpa = 0;
                                double tot_credit = 0;
                                bool gp_status = true;
                                DataSet dsSpl = new DataSet();
                                bool arrear = false;
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    fullmark = mydoc.NewTable(fontStmtMarks, printds_rows.Tables[0].Rows.Count + 8, 14, 1);
                                    fullmark.VisibleHeaders = false;
                                    fullmark.SetBorders(Color.Black, 1, BorderType.None);
                                    fullmark.Columns[0].SetWidth(26);
                                    fullmark.Columns[1].SetWidth(32);
                                    fullmark.Columns[2].SetWidth(86);
                                    fullmark.Columns[3].SetWidth(230);
                                    fullmark.Columns[4].SetWidth(30);
                                    fullmark.Columns[5].SetWidth(30);
                                    fullmark.Columns[6].SetWidth(30);
                                    fullmark.Columns[7].SetWidth(30);
                                    fullmark.Columns[8].SetWidth(30);
                                    fullmark.Columns[9].SetWidth(30);
                                    fullmark.Columns[10].SetWidth(30);
                                    fullmark.Columns[11].SetWidth(39);
                                    fullmark.Columns[12].SetWidth(53);
                                    fullmark.Columns[13].SetWidth(33);
                                    int mr = 0;
                                    for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                                    {
                                        bool arr_sub = false;
                                        if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                        {
                                            bool resu = true;
                                            double weighted = 0;
                                            double internal_marks = 0, external_marks = 0, total = 0;
                                            string PartType = Convert.ToString(printds_rows.Tables[0].Rows[i]["Part_Type"]).Trim();
                                            string semester = Convert.ToString(printds_rows.Tables[0].Rows[i]["semester"]).Trim();
                                            if (semester != sem && arrear == false)
                                            {
                                                fullmark.Cell(mr, 3).SetCellPadding(1);
                                                fullmark.Cell(mr + 1, 3).SetContent("ARREAR(S) RESULT");
                                                fullmark.Cell(mr + 1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(mr + 2, 3).SetContent("-----------------");
                                                fullmark.Cell(mr + 2, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                fullmark.Cell(mr + 3, 3).SetCellPadding(1);
                                                mr += 4;
                                                arrear = true;
                                            }
                                            if (semester != sem)
                                            {
                                                arr_sub = true;
                                            }
                                            fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            string coursecod = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim();
                                            string coursename = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim();
                                            string maxinternalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["max_int_marks"]).Trim();
                                            string internalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim();
                                            string maxexternalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["max_ext_marks"]).Trim();
                                            string externalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim();
                                            string maxtotalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["maxtotal"]).Trim();
                                            string totalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]);
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim(), out internal_marks);
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim(), out external_marks);
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]), out total);
                                            //double creditpoints = Convert.ToDouble(printds_rows.Tables[0].Rows[i]["credit_points"]);
                                            double creditpoints = 0;
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim(), out creditpoints);
                                            double gradpoint = Math.Round(total / 10, 1, MidpointRounding.AwayFromZero);
                                            double checkmarkmm = 0;
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]), out checkmarkmm);
                                            double max_total = 0;
                                            double.TryParse(maxtotalmark, out max_total);
                                            if (max_total != 100)
                                            {
                                                checkmarkmm = (checkmarkmm / max_total) * 100;
                                            }
                                            string grade = string.Empty;
                                            string gradepoints = string.Empty;
                                            string gradesql = "  select * from Grade_Master where College_Code='" + Convert.ToString(collegeCode).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                            {
                                                gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(collegeCode).Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                            }
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                                {
                                                    if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                    {
                                                        grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]);
                                                        gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]);
                                                    }
                                                }
                                            }
                                            double gradepoint = 0;
                                            double.TryParse(gradepoints, out gradepoint);
                                            gradepoint = Math.Round(gradepoint, 1, MidpointRounding.AwayFromZero);
                                            //fullmark.Cell(mr, 12).SetContent(String.Format("{0:00.0}", gradepoint));
                                            double weightmark = Convert.ToDouble(gradepoint * creditpoints);
                                            weightmark = Math.Round(weightmark, 1, MidpointRounding.AwayFromZero);
                                            weighted = weightmark;
                                            gradpoint = gradepoint;
                                            //fullmark.Cell(mr, 13).SetContent(String.Format("{0:000.0}", weightmark));
                                            //string gradepoint = Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]);
                                            //string weightedmk = Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]);printds_rows.Tables[0].Rows[i]["result"])
                                            string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim();
                                            if (internal_marks < 0)
                                            {
                                                internalmark = "AB";
                                                result = "AAA";
                                                weighted = 0;
                                                gradpoint = 0;
                                                resu = false;
                                                gp_status = false;
                                            }
                                            else
                                            {
                                                internalmark = Convert.ToString(internalmark).Trim();
                                            }
                                            if (external_marks < 0)
                                            {
                                                externalmark = "AB";
                                                result = "AAA";
                                                weighted = 0;
                                                gradpoint = 0;
                                                gp_status = false;
                                                resu = false;
                                            }
                                            else
                                            {
                                                externalmark = Convert.ToString(external_marks).Trim();
                                            }
                                            if (result.ToLower().Trim() == "pass" || result.ToLower().Trim() == "p")
                                            {
                                                result = "P";
                                            }
                                            if (result.ToLower().Trim() == "fail" || result.ToLower().Trim() == "f" || result.ToLower().Trim() == "ra")
                                            {
                                                resu = false;
                                                result = "RA";
                                                weighted = 0;
                                                gradpoint = 0;
                                                resu = false;
                                                gp_status = false;
                                            }
                                            weighted = Math.Round((creditpoints * gradpoint), 1, MidpointRounding.AwayFromZero);
                                            if (arr_sub == false)
                                            {
                                                //if (PartType == "3")
                                                //{
                                                tot_credit += creditpoints;
                                                sum_gpa += weighted;
                                                //}
                                            }
                                            if (Convert.ToString(printds_rows.Tables[0].Rows[i]["lab"]).Trim().ToLower() == "false")
                                            {
                                                fullmark.Cell(mr, 0).SetContent(PartType);
                                            }
                                            else
                                            {
                                                fullmark.Cell(mr, 0).SetContent(PartType + "*");
                                            }
                                            fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 1).SetContent(semester);
                                            fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 2).SetContent(coursecod);
                                            fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 3).SetContent(coursename);
                                            fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 4).SetContent(maxinternalmark);
                                            fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            fullmark.Cell(mr, 5).SetContent(internalmark);
                                            fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 6).SetContent(maxexternalmark);
                                            fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 7).SetContent(externalmark);
                                            fullmark.Cell(mr, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 8).SetContent(maxtotalmark);
                                            fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 9).SetContent(totalmark);
                                            fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 10).SetContent(Convert.ToString(creditpoints));
                                            fullmark.Cell(mr, 10).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            string gp = string.Format("{0:0.0}", gradpoint);
                                            fullmark.Cell(mr, 11).SetContent(gp);
                                            string wm = string.Format("{0:0.00}", weighted);
                                            fullmark.Cell(mr, 12).SetContent(wm);
                                            //double gradepoint = 0;
                                            //double.TryParse(gradepoints, out gradepoint);
                                            //gradepoint = Math.Round(gradepoint, 1, MidpointRounding.AwayFromZero);
                                            //fullmark.Cell(mr, 12).SetContent(String.Format("{0:00.0}", gradepoint));
                                            //double weightmark = Convert.ToDouble(gradepoint * Convert.ToDouble(printds_rows.Tables[0].Rows[i]["credit_points"]));
                                            //weightmark = Math.Round(weightmark, 1, MidpointRounding.AwayFromZero);
                                            //fullmark.Cell(mr, 13).SetContent(String.Format("{0:000.0}", weightmark));
                                            fullmark.Cell(mr, 11).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 12).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(mr, 13).SetContent(Convert.ToString(result));
                                            fullmark.Cell(mr, 13).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        }
                                        mr++;
                                    }
                                    fullmark.Cell(mr, 3).SetCellPadding(2);
                                    fullmark.Cell(mr + 1, 3).SetContent(">>>>> END OF STATEMENT <<<<<");
                                    fullmark.Cell(mr + 1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    if (gp_status == true)
                                    {
                                        double gpa = Math.Round((sum_gpa / tot_credit), 2, MidpointRounding.AwayFromZero);
                                        double grade_mark = Math.Round((sum_gpa / tot_credit), 0, MidpointRounding.AwayFromZero) * 10;
                                        string grade = string.Empty;
                                        string q = "select * from Grade_Master where College_Code='" + Convert.ToString(collegeCode).Trim() + "' and Semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + grade_mark + "' between Frange and Trange; select * from Grade_Master where College_Code='" + Convert.ToString(collegeCode).Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + grade_mark + "' between Frange and Trange;";
                                        DataSet dsgrade = new DataSet();
                                        dsgrade = d2.select_method_wo_parameter(q, "Text");
                                        if (dsgrade.Tables.Count > 0)
                                        {
                                            if (dsgrade.Tables[0].Rows.Count == 0)
                                            {
                                                if (dsgrade.Tables.Count > 1 && dsgrade.Tables[1].Rows.Count > 0)
                                                {
                                                    grade = Convert.ToString(dsgrade.Tables[1].Rows[0]["Mark_Grade"]).Trim();
                                                }
                                            }
                                            else
                                            {
                                                grade = Convert.ToString(dsgrade.Tables[0].Rows[0]["Mark_Grade"]).Trim();
                                            }
                                        }
                                        gpa = Math.Round(gpa, 1, MidpointRounding.AwayFromZero);
                                        fullmark.Cell(mr + 3, 3).SetContent("G.P.A. FOR PART-3  :   " + String.Format("{0:0.0}", gpa) + " ( " + grade + " ) ");
                                    }
                                    else
                                    {
                                        fullmark.Cell(mr + 3, 3).SetContent("G.P.A.  :   NOT ELIGIBLE");
                                    }
                                    fullmark.Cell(mr + 2, 3).SetCellPadding(2);
                                    fullmark.Cell(mr + 3, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 27, 165, 665, 200));
                                    mypdfpage.Add(newpdftabpage2);
                                }
                                pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 27, 340, 100, 25), System.Drawing.ContentAlignment.MiddleLeft, "*  PRACTICAL");
                                mypdfpage.Add(pdfdoi);
                                if (arrear)
                                {
                                    pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 390, 795, 299, 25), System.Drawing.ContentAlignment.MiddleRight, "G.P.A IS FURNISHED ONLY FOR THE CURRENT SEMESTER");
                                    mypdfpage.Add(pdfdoi);
                                }
                                pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 470, 383, 250, 25), System.Drawing.ContentAlignment.MiddleCenter, coe);
                                mypdfpage.Add(pdfdoi);
                                //pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 27, 795, 100, 25), System.Drawing.ContentAlignment.MiddleLeft, "*  PRACTICAL");
                                //mypdfpage.Add(pdfdoi);
                            }
                            mypdfpage.SaveToDocument();
                        }
                    }
                }
            }
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
            }
        }
        catch (Exception ex)
        {
        }
    }

    //Consolidate For M.Phil.
    public void mphilconsolidatedF_jamal()
    {
        try
        {
            DataSet printds = new DataSet();
            string lblerror1 = string.Empty;
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            string max_sem = string.Empty;
            int maxSem = 0;
            bool printpage = false;
            string edu_level = string.Empty;
            string degree = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string roman = string.Empty;
            string semroman = string.Empty;
            string grade = string.Empty;
            string gradepoints = string.Empty;
            string coe = string.Empty;
            string subjectcode_Part1 = string.Empty;
            string subjectcode_Part2 = string.Empty;
            string subjectcode_Part3 = string.Empty;
            string subjectcode_Part4 = string.Empty;
            string cal_gpa = string.Empty;
            string current_semester = string.Empty;
            string app_no = string.Empty;
            string subtype = string.Empty;
            string admid_date = string.Empty;
            string additionalmsg = string.Empty;
            bool onlyca = false;
            bool onlyes = false;
            int yearofpassing = 0;
            DataSet gradeds = new DataSet();
            DataSet dsSpl = new DataSet();
            DataTable dtStar = new DataTable();
            Font fontdegreename = new Font("Times New Roman", 12, FontStyle.Bold);
            Font fontStudDetails = new Font("Times New Roman", 9, FontStyle.Bold);
            Font fontStmtMarks = new Font("Times New Roman", 9, FontStyle.Regular);
            Font fontcgpa = new Font("Times New Roman", 9, FontStyle.Regular);
            Font fontDate = new Font("Times New Roman", 9, FontStyle.Regular);
            Font f1_cos10bold = new Font("Times New Roman", 10, FontStyle.Bold);
            Font f2_cos9bold = new Font("Comic Sans MS", 9, FontStyle.Bold);
            Font f3_arial10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font f4_arial7reg = new Font("Arial", 7, FontStyle.Regular);
            Font f5_pal10bold = new Font("Palatino Linotype", 10, FontStyle.Bold);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.1, 29.7));
            PdfPage mypdfpage;
            FpSpread2.SaveChanges();
            for (int res = 1; res < Convert.ToInt32(FpSpread2.Sheets[0].RowCount); res++)
            {
                int isval = 0;
                int additonalstatus = 0;
                onlyca = false;
                onlyes = false;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                additionalmsg = string.Empty;
                int splcredit = 0;
                if (isval == 1)
                {
                    bool saveStatus = false;
                    printds.Clear();
                    printds.Dispose();
                    printds_new.Clear();
                    printds_new.Dispose();
                    string grade_set = string.Empty;
                    rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                    regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                    string sql = "SELECT Reg_No,r.batch_year,r.college_code,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 110) as dob,c.edu_level,CONVERT(VARCHAR(11),R.Adm_Date,106) as ADM_DATE FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' ;  select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
                    sql = sql + "  select count(s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass' and sc.roll_no=mark_entry.roll_no and mark_entry.subject_no=sc.subject_no and mark_entry.roll_no='" + rollnosub + "'; ";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail' and sc.roll_no=mark_entry.roll_no and mark_entry.subject_no=sc.subject_no and mark_entry.roll_no='" + rollnosub + "'; select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass')";
                    printds = da.select_method_wo_parameter(sql, "Text");
                    int noofsubapplied = Convert.ToInt32(printds.Tables[3].Rows[0][0].ToString());
                    int noofsubpassed = Convert.ToInt32(printds.Tables[4].Rows[0][0].ToString());
                    int noofsubfailed = Convert.ToInt32(printds.Tables[5].Rows[0][0].ToString());
                    int Totalfailcount = printds.Tables[6].Rows.Count;
                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                    {
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = printds.Tables[0].Rows[0]["degree_code"].ToString();
                        edu_level = Convert.ToString(printds.Tables[0].Rows[0]["Edu_Level"]).Trim();
                        app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]).Trim();
                        string collegeCode = Convert.ToString(printds.Tables[0].Rows[0]["college_code"]).Trim();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        coe = printds.Tables[1].Rows[0]["coe"].ToString();
                        admid_date = Convert.ToString(printds.Tables[0].Rows[0]["ADM_DATE"]).Trim();
                        max_sem = d2.GetFunctionv("select NDurations from ndegree where batch_year='" + batch_year + "'  and Degree_code='" + degree_code + "' and college_code='" + Convert.ToString(collegeCode) + "'");
                        if (max_sem == "" || max_sem == null)
                        {
                            max_sem = d2.GetFunctionv("SELECT Duration FROM Degree where  Degree_Code='" + degree_code + "' and college_code='" + Convert.ToString(collegeCode) + "'");
                        }
                        int.TryParse(max_sem, out maxSem);
                        int newbatch = 0;
                        int.TryParse(batch_year, out newbatch);
                        DateTime dt = new DateTime();
                        int cur_year = DateTime.Now.Year;
                        int diff = newbatch + (maxSem / 2);
                        if (cur_year > diff)
                        {
                        }
                        else
                        {
                            lbl_popuperr.Text = "The Consolidated is Generated Only For Passed Out Students.";
                            errdiv.Visible = true;
                            return;
                        }
                    }
                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0 && Totalfailcount == 0)
                    {
                        PdfTable tblstudDetail;
                        PdfTable tblCgpa;
                        PdfTextArea pdfdoi;
                        PdfImage LogoImage2;
                        PdfTablePage newpdftabpage2;
                        PdfTable fullmark;
                        printpage = true;
                        string principal = string.Empty;
                        edu_level = Convert.ToString(printds.Tables[0].Rows[0]["edu_level"]).Trim();
                        app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]).Trim();
                        mypdfpage = mydoc.NewPage();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        coe = Convert.ToString(printds.Tables[1].Rows[0]["coe"]).Trim();
                        admid_date = Convert.ToString(printds.Tables[0].Rows[0]["ADM_DATE"]).Trim();
                        string collegeCode = Convert.ToString(printds.Tables[0].Rows[0]["college_code"]).Trim();
                        principal = Convert.ToString(printds.Tables[1].Rows[0]["principal"]).Trim();
                        string[] adm_dt = admid_date.Split(' ');
                        if (adm_dt.Length > 0)
                        {
                            if (adm_dt.Length == 3)
                                admid_date = adm_dt[2] + " - JUN";
                        }
                        string strMonthName = string.Empty;
                        studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        branch = Convert.ToString(printds.Tables[0].Rows[0]["Dept_name"]).Trim();
                        dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]).Trim();
                        string stdappno = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim();
                        int.TryParse(batch_year, out yearofpassing);
                        if (sem == "1")
                        {
                            semroman = "I";
                        }
                        else if (sem == "2")
                        {
                            semroman = "II";
                        }
                        else if (sem == "3")
                        {
                            semroman = "III";
                        }
                        else if (sem == "4")
                        {
                            semroman = "IV";
                        }
                        else if (sem == "5")
                        {
                            semroman = "V";
                        }
                        else if (sem == "6")
                        {
                            semroman = "VI";
                        }
                        else if (sem == "7")
                        {
                            semroman = "VII";
                        }
                        else if (sem == "8")
                        {
                            semroman = "VIII";
                        }
                        sql3 = "Select syllabus_master.semester,Subject_Type,subject_name,subject_code,subject.subject_no,result,max_int_marks,max_ext_marks,internal_mark,external_mark,total,maxtotal,grade,cp,credit_points,mark_entry.subject_no,semester,maxtotal,exam_code,subject.Part_Type,sub_sem.priority,sub_sem.lab,subject.subjectpriority,SUBSTRING(subject_code,(LEN(subject_code)-2) ,1) as Prac_code from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "' order by syllabus_master.semester,isnull(subject.Part_Type,'3') asc,subject.subjectpriority,subject_code asc";
                        printds_rows.Clear();
                        printds_rows.Dispose();
                        printds_rows = da.select_method_wo_parameter(sql3, "Text");
                        string stdphtsql = "select * from StdPhoto where app_no='" + stdappno + "'";
                        MemoryStream memoryStream = new MemoryStream();
                        DataSet dsstdpho = new DataSet();
                        dsstdpho.Clear();
                        dsstdpho.Dispose();
                        dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                        if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                        {
                            byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                            memoryStream.Write(file, 0, file.Length);
                            if (file.Length > 0)
                            {
                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                {
                                }
                                else
                                {
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                }
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                        {
                            LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                            mypdfpage.Add(LogoImage2, 490, 142, 420);
                        }
                        else
                        {
                        }
                        string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-";
                        if (edu_level.Trim().ToLower() == "ug")
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 3));
                            grade_set = "0";
                            yearofpassing += (maxSem / 2);
                        }
                        else
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 2));
                            grade_set = "1";
                            yearofpassing += (maxSem / 2);
                        }
                        tblstudDetail = mydoc.NewTable(fontStudDetails, 2, 3, 5);
                        tblstudDetail.VisibleHeaders = false;
                        tblstudDetail.SetBorders(Color.Black, 1, BorderType.None);
                        tblstudDetail.SetColumnsWidth(new int[] { 100, 311, 106 });
                        tblstudDetail.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(1, 0).SetContent(regnumber + degree);
                        tblstudDetail.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(1, 1).SetContent(studname);
                        tblstudDetail.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstudDetail.Cell(1, 2).SetContent("APRIL " + yearofpassing);
                        newpdftabpage2 = tblstudDetail.CreateTablePage(new PdfArea(mydoc, 36, 159, 454, 60));
                        mypdfpage.Add(newpdftabpage2);
                        double overallcreditearned = 0;
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            saveStatus = true;
                            fullmark = mydoc.NewTable(fontStmtMarks, printds_rows.Tables[0].Rows.Count + maxSem + 4, 12, 1);
                            fullmark.VisibleHeaders = false;
                            fullmark.SetBorders(Color.Black, 1, BorderType.None);
                            fullmark.Columns[0].SetWidth(20);
                            fullmark.Columns[1].SetWidth(55);
                            fullmark.Columns[2].SetWidth(230);
                            fullmark.Columns[3].SetWidth(45);
                            fullmark.Columns[4].SetWidth(20);
                            fullmark.Columns[5].SetWidth(20);
                            fullmark.Columns[6].SetWidth(20);
                            fullmark.Columns[7].SetWidth(20);
                            fullmark.Columns[8].SetWidth(20);
                            fullmark.Columns[9].SetWidth(25);
                            fullmark.Columns[10].SetWidth(25);
                            fullmark.Columns[11].SetWidth(33);
                            int mr = 0;
                            int semescount = 0;
                            int sheet = 1;
                            string overall_sum = string.Empty;
                            string part1_sum = string.Empty;
                            string part2_sum = string.Empty;
                            string part3_sum = string.Empty;
                            string overall_max = string.Empty;
                            string part1_max = string.Empty;
                            string part2_max = string.Empty;
                            string part3_max = string.Empty;
                            string overall_totcrdit = string.Empty;
                            string part1_totcrdit = string.Empty;
                            string part2_totcrdit = string.Empty;
                            string part3_totcrdit = string.Empty;
                            string overall_weight = string.Empty;
                            string part1_weight = string.Empty;
                            string part2_weight = string.Empty;
                            string part3_weight = string.Empty;
                            string overall_cgpa = string.Empty;
                            string part1_cgpa = string.Empty;
                            string part2_cgpa = string.Empty;
                            string part3_cgpa = string.Empty;
                            string overall_grade = string.Empty;
                            string part1_grade = string.Empty;
                            string part2_grade = string.Empty;
                            string part3_grade = string.Empty;
                            string overall_class = string.Empty;
                            string part1_class = string.Empty;
                            string part2_class = string.Empty;
                            string part3_class = string.Empty;
                            Get_Partwise_All("1", printds_rows, ref part1_sum, ref part1_max, ref part1_totcrdit, ref  part1_weight, ref  part1_cgpa, ref part1_grade, noofsubfailed, edu_level, ref part1_class, batch_year, degree_code, collegeCode);
                            Get_Partwise_All("2", printds_rows, ref part2_sum, ref part2_max, ref part2_totcrdit, ref  part2_weight, ref  part2_cgpa, ref part2_grade, noofsubfailed, edu_level, ref part2_class, batch_year, degree_code, collegeCode);
                            Get_Partwise_All("3", printds_rows, ref part3_sum, ref part3_max, ref part3_totcrdit, ref  part3_weight, ref  part3_cgpa, ref part3_grade, noofsubfailed, edu_level, ref part3_class, batch_year, degree_code, collegeCode);
                            Get_Partwise_All("", printds_rows, ref overall_sum, ref overall_max, ref overall_totcrdit, ref  overall_weight, ref  overall_cgpa, ref overall_grade, noofsubfailed, edu_level, ref overall_class, batch_year, degree_code, collegeCode);
                            for (int s = 1; s <= maxSem; s++)
                            {
                                DataView dvMark = new DataView();
                                printds_rows.Tables[0].DefaultView.RowFilter = "semester='" + s + "'";
                                dvMark = printds_rows.Tables[0].DefaultView;
                                if (dvMark.Count > 0)
                                {
                                    for (int i = 0; i < dvMark.Count; i++)
                                    {
                                        string part = string.Empty;
                                        part = Convert.ToString(dvMark[i]["Part_Type"]).Trim();
                                        if (Convert.ToString(dvMark[i]["lab"]).Trim().ToLower() == "false")
                                        {
                                            fullmark.Cell(mr, 0).SetContent(part);
                                        }
                                        else
                                        {
                                            fullmark.Cell(mr, 0).SetContent(part + "*");
                                        }
                                        fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        fullmark.Cell(mr, 1).SetContent(dvMark[i]["subject_code"].ToString());
                                        fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        fullmark.Cell(mr, 2).SetContent(dvMark[i]["subject_name"].ToString());
                                        fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        fullmark.Cell(mr, 4).SetContent(Convert.ToString(dvMark[i]["max_int_marks"]).PadLeft(3, '0'));
                                        fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        fullmark.Cell(mr, 6).SetContent(Convert.ToString(dvMark[i]["internal_mark"]).PadLeft(3, '0'));
                                        fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        fullmark.Cell(mr, 5).SetContent(Convert.ToString(dvMark[i]["max_ext_marks"]).PadLeft(3, '0'));
                                        fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        fullmark.Cell(mr, 7).SetContent(Convert.ToString(dvMark[i]["external_mark"]).PadLeft(3, '0'));
                                        fullmark.Cell(mr, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        fullmark.Cell(mr, 8).SetContent(Convert.ToString(dvMark[i]["total"]).PadLeft(3, '0'));
                                        fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        fullmark.Cell(mr, 9).SetContent(Convert.ToString(dvMark[i]["credit_points"]).PadLeft(2, '0'));
                                        fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        fullmark.Cell(mr, 10).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        fullmark.Cell(mr, 11).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        double internalmmark = 0;
                                        double externalmark1 = 0;
                                        double totalintext = 0;
                                        double.TryParse(Convert.ToString(dvMark[i]["internal_mark"]), out internalmmark);
                                        double extfinal = 0;
                                        double.TryParse(Convert.ToString(dvMark[i]["external_mark"]), out extfinal);
                                        extfinal = Math.Round(extfinal, 0);
                                        externalmark1 = extfinal;
                                        string checkedmark = string.Empty;
                                        if (extfinal < 0)
                                        {
                                            checkedmark = loadmarkat(Convert.ToString(extfinal));
                                        }
                                        else
                                        {
                                            checkedmark = Convert.ToString(extfinal);
                                        }
                                        if (internalmmark >= 0)
                                        {
                                            if (extfinal > 0)
                                            {
                                                totalintext = internalmmark + externalmark1;
                                            }
                                            else
                                            {
                                                totalintext = internalmmark;
                                            }
                                        }
                                        else
                                        {
                                            if (extfinal > 0)
                                            {
                                                totalintext = externalmark1;
                                            }
                                            else
                                            {
                                                totalintext = 0;
                                            }
                                        }
                                        double totfinal = 0;
                                        totfinal = Math.Round(totalintext, 0);
                                        double checkmarkmm = 0;
                                        double.TryParse(Convert.ToString(dvMark[i]["total"]), out checkmarkmm);
                                        string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(collegeCode).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                        {
                                            gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(collegeCode).Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                        }
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                        {
                                            for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                            {
                                                if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                {
                                                    grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
                                                    gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
                                                }
                                            }
                                        }
                                        double gradepoint = 0;
                                        double.TryParse(gradepoints, out gradepoint);
                                        gradepoint = Math.Round(gradepoint, 1, MidpointRounding.AwayFromZero);
                                        fullmark.Cell(mr, 10).SetContent(String.Format("{0:00.0}", gradepoint));
                                        double weightmark = Convert.ToDouble(gradepoint * Convert.ToDouble(dvMark[i]["credit_points"]));
                                        weightmark = Math.Round(weightmark, 1, MidpointRounding.AwayFromZero);
                                        fullmark.Cell(mr, 11).SetContent(String.Format("{0:000.0}", weightmark));
                                        string result = Convert.ToString(dvMark[i]["result"]).ToLower();
                                        if (result == "fail")
                                        {
                                            result = "RA";
                                            grade = "U";
                                        }
                                        else if (result == "pass")
                                        {
                                            result = "P";
                                        }
                                        else
                                        {
                                            result = "AB";
                                            grade = "U";
                                        }
                                        totfinal = totfinal * Convert.ToDouble(dvMark[i]["credit_points"].ToString());
                                        DataView dv = new DataView();
                                        printds.Tables[2].DefaultView.RowFilter = "exam_code='" + Convert.ToString(dvMark[i]["exam_code"]).Trim() + "'";
                                        dv = printds.Tables[2].DefaultView;
                                        if (dv.Count > 0)
                                        {
                                            string exam_y = Convert.ToString(dv[0]["Exam_year"]).Trim();
                                            string exam_m = Convert.ToString(dv[0]["Exam_Month"]).Trim();
                                            strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                            strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                            strMonthName = strMonthName.ToUpper() + " '" + exam_y[exam_y.Length - 2] + exam_y[exam_y.Length - 1];
                                            fullmark.Cell(mr, 3).SetContent(strMonthName);
                                            fullmark.Cell(mr, 3).SetContentAlignment(System.Drawing.ContentAlignment.MiddleCenter);
                                        }
                                        mr++;
                                    }
                                    fullmark.Cell(mr, 9).SetCellPadding(3);
                                    if (mr != 44)
                                        mr++;
                                }
                            }
                            fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            fullmark.Cell(mr, 0).SetFont(fontStmtMarks);
                            fullmark.Cell(mr, 0).SetContent("* PRACTICAL");
                            fullmark.Cell(mr, 0).SetCellPadding(0);
                            fullmark.Cell(mr, 9).SetCellPadding(0);
                            foreach (PdfCell pc in fullmark.CellRange(mr, 0, mr, 0).Cells)
                            {
                                pc.ColSpan = 2;
                            }
                            fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            fullmark.Cell(mr, 2).SetFont(fontStmtMarks);
                            fullmark.Cell(mr, 2).SetCellPadding(0);
                            fullmark.Cell(mr, 2).SetContent(">>>>>> END OF STATEMENT <<<<<<");
                            newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 36, 221, 513, 370));
                            mypdfpage.Add(newpdftabpage2);
                            tblCgpa = mydoc.NewTable(fontStmtMarks, 3, 4, 5);
                            tblCgpa.VisibleHeaders = false;
                            tblCgpa.SetBorders(Color.Black, 1, BorderType.None);
                            tblCgpa.SetColumnsWidth(new int[] { 78, 150, 100, 90 });
                            tblCgpa.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(0, 0).SetContent("CGPA  : ");
                            tblCgpa.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(1, 0).SetContent("Grade  : ");
                            tblCgpa.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(2, 0).SetContent("Class  : ");
                            tblCgpa.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(0, 1).SetContent(overall_weight + " / " + overall_totcrdit + " = " + overall_cgpa);
                            tblCgpa.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(1, 1).SetContent(overall_grade);
                            tblCgpa.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblCgpa.Cell(2, 1).SetContent(overall_class);
                            foreach (PdfCell pc in tblCgpa.CellRange(2, 1, 2, 1).Cells)
                            {
                                pc.ColSpan = 3;
                            }
                            tblCgpa.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(0, 2).SetContent("Sec. Marks  :");
                            tblCgpa.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(1, 2).SetContent("Max. Marks  :");
                            tblCgpa.Cell(2, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(2, 2).SetContent("");
                            tblCgpa.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(0, 3).SetContent(overall_sum);
                            tblCgpa.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblCgpa.Cell(1, 3).SetContent(overall_max);
                            newpdftabpage2 = tblCgpa.CreateTablePage(new PdfArea(mydoc, 36, 601, 312, 100));
                            mypdfpage.Add(newpdftabpage2);
                        }
                        pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 36, 810, 189, 25), System.Drawing.ContentAlignment.TopLeft, principal);
                        mypdfpage.Add(pdfdoi);
                        pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 398, 810, 189, 25), System.Drawing.ContentAlignment.TopLeft, coe);
                        mypdfpage.Add(pdfdoi);
                        if (saveStatus)
                            mypdfpage.SaveToDocument();
                    }
                    else
                    {
                        if (lblerror1 == "")
                        {
                            lblerror1 = rollnosub;
                        }
                        else
                        {
                            lblerror1 = lblerror1 + "," + rollnosub;
                        }
                    }
                }
            }
            if (lblerror1 != "")
            {
                lblerror.Text = lblerror1;
                lblerror.Visible = true;
            }
            else
            {
                lblerror.Text = string.Empty;
                lblerror.Visible = false;
            }
            if (printpage == true)
            {
                string appPath = HttpContext.Current.Server.MapPath("~");
                if (appPath != "")
                {
                    string szPath = appPath + "/Report/";
                    string szFile = "consolidatedmarksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                    mydoc.SaveToFile(szPath + szFile);
                    Response.ClearHeaders();
                    Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                    Response.ContentType = "application/pdf";
                    Response.WriteFile(szPath + szFile);
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void Rankcertificate_jamal()
    {
        try
        {
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            //DataSet semwisegpa = new DataSet();
            string degree = string.Empty;
            string degname = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string issuedate = string.Empty;
            string semroman = "", edu_level = string.Empty;
            string coe = string.Empty;
            DataSet gradeds = new DataSet();
            lblerror.Visible = false;
            lblerror.Text = string.Empty;
            Font fondColName = new Font("Comic Sans MS", 18, FontStyle.Bold);
            Font fontdegexam = new Font("Arial", 12, FontStyle.Bold);
            Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco11 = new Font("Comic Sans MS", 11, FontStyle.Bold);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
            Font Fontwma = new Font("Arial", 8, FontStyle.Bold);
            Font Font8bold = new Font("Arial", 8, FontStyle.Bold);
            Font Font10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            DataTable dtPart1 = new DataTable();
            DataTable dtPart2 = new DataTable();
            DataTable dtPart3 = new DataTable();
            DataTable dtPart4 = new DataTable();
            Font Fontarial9 = new Font("Arial", 9, FontStyle.Bold);
            Font Fontarial10b = new Font("Arial", 11, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(23.5, 14.8));
            PdfPage mypdfpage;
            bool specialcourse = false;
            if (ddlSubject.SelectedIndex == 0)
            {
                specialcourse = false;
            }
            else
            {
                specialcourse = true;
            }
            if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
            {
                string strquery = "select *,district+' - '+pincode  as districtpin from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                ds.Dispose();
                ds.Reset();
                ds = d2.select_method_wo_parameter(strquery, "Text");
                string Collegename = string.Empty;
                string aff = string.Empty;
                string collacr = string.Empty;
                string dispin = string.Empty;
                string clgaddress = string.Empty;
                string univ = string.Empty;
                string pincode = string.Empty;
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    Collegename = ds.Tables[0].Rows[0]["Collname"].ToString();
                    aff = ds.Tables[0].Rows[0]["affliatedby"].ToString();
                    univ = Convert.ToString(ds.Tables[0].Rows[0]["university"]);
                    string[] strpa = aff.Split(',');
                    //aff = "( " + univ + " " + strpa[0] + " )";
                    //coename = ds.Tables[0].Rows[0]["coe"].ToString();
                    collacr = ds.Tables[0].Rows[0]["acr"].ToString();
                    pincode = Convert.ToString(ds.Tables[0].Rows[0]["pincode"]).Trim();
                    pincode = pincode.Substring(pincode.Length - 3);
                    int pin = 0;
                    int.TryParse(pincode, out pin);
                    //((pincode.Length > 0) ? pincode.Substring(pincode.Length - 1) : ""
                    //char[] pin = pincode.Substring(pincode.Length - 1);
                    clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]) + " , " + Convert.ToString(ds.Tables[0].Rows[0]["district"]) + ((pin != 0) ? (" - " + pin.ToString()) : " - " + pincode);
                    clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);
                    dispin = ds.Tables[0].Rows[0]["districtpin"].ToString();
                }
                FpSpread2.SaveChanges();
                for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
                {
                    int isval = 0;
                    isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                    if (isval == 1)
                    {
                        printds.Clear();
                        printds.Dispose();
                        printds_new.Clear();
                        printds_new.Dispose();
                        rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                        regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                        string sql = "SELECT r.Reg_No,r.college_code,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,C.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';";
                        printds = da.select_method_wo_parameter(sql, "Text");
                        if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                        {
                            mypdfpage = mydoc.NewPage();
                            string app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]);
                            degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                            //month = ddlMonth.SelectedIndex;
                            //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                            int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                            monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                            string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                            monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                            monthandyear = monthandyear.ToUpper();
                            studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                            issuedate = Convert.ToString(txtdoi.Text);
                            branch = printds.Tables[0].Rows[0]["Dept_name"].ToString();
                            dob = printds.Tables[0].Rows[0]["dob"].ToString();
                            edu_level = Convert.ToString(printds.Tables[0].Rows[0]["Edu_Level"]).Trim();
                            string stdappno = printds.Tables[0].Rows[0]["App_No"].ToString();
                            batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                            degree_code = printds.Tables[0].Rows[0]["degree_code"].ToString();
                            string collegeCode = Convert.ToString(printds.Tables[0].Rows[0]["college_code"]).Trim();
                            string medium = d2.GetFunctionv("select TextVal from TextValTable where TextCriteria='medi' and college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and TextCode in(select isnull(medium_ins,0) from applyn  where app_no='" + app_no + "')");
                            sql2 = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                            printds_new = da.select_method_wo_parameter(sql2, "Text");
                            if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                            {
                                sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]);
                                if (sem == "1")
                                {
                                    semroman = "I";
                                }
                                else if (sem == "2")
                                {
                                    semroman = "II";
                                }
                                else if (sem == "3")
                                {
                                    semroman = "III";
                                }
                                else if (sem == "4")
                                {
                                    semroman = "IV";
                                }
                                else if (sem == "5")
                                {
                                    semroman = "V";
                                }
                                else if (sem == "6")
                                {
                                    semroman = "VI";
                                }
                                else if (sem == "7")
                                {
                                    semroman = "VII";
                                }
                                else if (sem == "8")
                                {
                                    semroman = "VIII";
                                }
                                //PdfTextArea pdfdoi = new PdfTextArea(Fontco10, System.Drawing.Color.Black, new PdfArea(mydoc, 113, 803, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                                //mypdfpage.Add(pdfdoi);
                                PdfRectangle pr1 = new PdfRectangle(mydoc, new PdfArea(mydoc, 30, 44, 555, 771), Color.DarkBlue);
                                mypdfpage.Add(pr1);
                                PdfTextArea pdfHeader = new PdfTextArea(fondColName, Color.DarkBlue, new PdfArea(mydoc, 30, 40, 550, 50), ContentAlignment.MiddleCenter, Collegename);
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(Fontarial7, Color.DarkBlue, new PdfArea(mydoc, 30, 55, 550, 50), ContentAlignment.MiddleCenter, univ);
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(Fontarial7, Color.DarkBlue, new PdfArea(mydoc, 30, 78, 550, 50), ContentAlignment.MiddleCenter, aff);
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(fontdegexam, Color.DarkBlue, new PdfArea(mydoc, 30, 78, 550, 50), ContentAlignment.MiddleCenter, degree + " DEGREE EXAMINATION");
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(fontdegexam, Color.DarkBlue, new PdfArea(mydoc, 30, 108, 550, 50), ContentAlignment.MiddleCenter, "RANK CERTIFICATE");
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(Fontco12a, Color.DarkBlue, new PdfArea(mydoc, 30, 108, 550, 80), ContentAlignment.MiddleCenter, " This is certify that Mr./Ms. ____________________________________________");
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(Fontco12a, Color.DarkBlue, new PdfArea(mydoc, 30, 108, 550, 80), ContentAlignment.MiddleCenter, "has secured____________________________ Rank in ____________________________________");
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(Fontco12a, Color.DarkBlue, new PdfArea(mydoc, 30, 108, 550, 80), ContentAlignment.MiddleCenter, "Examinations conducted during May ________________________________________");
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(Fontco12a, Color.DarkBlue, new PdfArea(mydoc, 30, 108, 550, 80), ContentAlignment.MiddleLeft, "Principal");
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(Fontco12a, Color.DarkBlue, new PdfArea(mydoc, 30, 108, 550, 80), ContentAlignment.MiddleLeft, "Date:");
                                mypdfpage.Add(pdfHeader);
                                pdfHeader = new PdfTextArea(Fontco12a, Color.DarkBlue, new PdfArea(mydoc, 30, 108, 550, 80), ContentAlignment.MiddleRight, "Controller of Examinations");
                                mypdfpage.Add(pdfHeader);
                                //pl = new PdfLine(mydoc, new Point(30, 778), new Point(585, 778), Color.DarkBlue, 1);
                                //mypdfpage.Add(pl);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))
                                {
                                    PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
                                    mypdfpage.Add(LogoImage, 40, 83, 415);
                                }
                                //mypdfpage.SaveToDocument();
                                //PdfTable tblftdate = mydoc.NewTable(Fontarial7, 1, 2, 3);
                                //tblftdate.VisibleHeaders = false;
                                //tblftdate.SetBorders(Color.Black, 1, BorderType.None);
                                //tblftdate.SetColumnsWidth(new int[] { 50, 420, });
                                //tblftdate.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                ////tblftdate.Cell(0, 1).SetContent(DateTime.Now.Date.ToString("dd-MM-yyyy"));
                                //newpdftabpage2 = tblftdate.CreateTablePage(new PdfArea(mydoc, 35, 935, 142, 17));
                                //mypdfpage.Add(newpdftabpage2);
                            }
                            mypdfpage.SaveToDocument();
                        }
                    }
                }
            }
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
            }
        }
        catch (Exception ex)
        {
        }
    }

    //public void markbasedconsolidatedF2_jamal()
    //{
    //    try
    //    {
    //        DataSet printds = new DataSet();
    //        string lblerror1 = string.Empty;
    //        DataSet printds_new = new DataSet();
    //        DataSet printds_rows = new DataSet();
    //        //578
    //        Boolean printpage = false;
    //        string edu_level = string.Empty;
    //        string degree = string.Empty;
    //        string monthandyear = string.Empty;
    //        string studname = string.Empty;
    //        string dob = string.Empty;
    //        string rollnosub = string.Empty;
    //        string regnumber = string.Empty;
    //        string batch_year = string.Empty;
    //        string degree_code = string.Empty;
    //        string exam_code = string.Empty;
    //        string sem = string.Empty;
    //        string branch = string.Empty;
    //        int month = 0;
    //        string monthstr = string.Empty;
    //        string sql2 = string.Empty;
    //        string sql3 = string.Empty;
    //        string roman = string.Empty;
    //        string semroman = string.Empty;
    //        string grade = string.Empty;
    //        string gradepoints = string.Empty;
    //        string coe = string.Empty;
    //        string subjectcode_Part1 = string.Empty;
    //        string subjectcode_Part2 = string.Empty;
    //        string subjectcode_Part3 = string.Empty;
    //        string subjectcode_Part4 = string.Empty;
    //        string cal_gpa = string.Empty;
    //        string current_semester = string.Empty;
    //        string app_no = string.Empty;
    //        string subtype = string.Empty;
    //        DataSet gradeds = new DataSet();
    //        Font f1_cos10bold = new Font("Comic Sans MS", 10, FontStyle.Bold);
    //        Font f2_cos9bold = new Font("Comic Sans MS", 9, FontStyle.Bold);
    //        Font f3_arial10bold = new Font("Arial", 10, FontStyle.Bold);
    //        Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
    //        Font f4_arial7reg = new Font("Arial", 7, FontStyle.Regular);
    //        Font f5_pal10bold = new Font("Palatino Linotype", 10, FontStyle.Bold);
    //        PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.5, 34.5));
    //        PdfPage mypdfpage;
    //        FpSpread2.SaveChanges();
    //        for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
    //        {
    //            int isval = 0;
    //            isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
    //            if (isval == 1)
    //            {
    //                printds.Clear();
    //                printds.Dispose();
    //                printds_new.Clear();
    //                printds_new.Dispose();
    //                rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
    //                regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
    //                string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 110) as dob,c.edu_level,CONVERT(VARCHAR(11),R.Adm_Date,106) as ADM_DATE FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValueddlCollege.SelectedValue).Trim() + "' ;  select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
    //                sql = sql + "  select count(s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
    //                sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass' and sc.roll_no=mark_entry.roll_no and mark_entry.subject_no=sc.subject_no and mark_entry.roll_no='" + rollnosub + "'; ";
    //                sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail' and sc.roll_no=mark_entry.roll_no and mark_entry.subject_no=sc.subject_no and mark_entry.roll_no='" + rollnosub + "'; select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass')";
    //                printds = da.select_method_wo_parameter(sql, "Text");
    //                int noofsubapplied = Convert.ToInt32(printds.Tables[3].Rows[0][0].ToString());
    //                int noofsubpassed = Convert.ToInt32(printds.Tables[4].Rows[0][0].ToString());
    //                int noofsubfailed = Convert.ToInt32(printds.Tables[5].Rows[0][0].ToString());
    //                int Totalfailcount = printds.Tables[6].Rows.Count;
    //                if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
    //                {
    //                    batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
    //                    degree_code = printds.Tables[0].Rows[0]["degree_code"].ToString();
    //                    edu_level = Convert.ToString(printds.Tables[0].Rows[0]["Edu_Level"]).Trim();
    //                    app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]);
    //                    mypdfpage = mydoc.NewPage();
    //                    degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
    //                    coe = printds.Tables[1].Rows[0]["coe"].ToString();
    //                    admid_date = Convert.ToString(printds.Tables[0].Rows[0]["ADM_DATE"]);
    //                    max_sem = d2.GetFunctionv("select NDurations from ndegree where batch_year='" + batch_year + "'  and Degree_code='" + degree_code + "' and college_code='" + Convert.ToString(ddlCollege.SelectedValue) + "'");
    //                    if (max_sem == "" || max_sem == null)
    //                    {
    //                        max_sem = d2.GetFunctionv("SELECT Duration FROM Degree where  Degree_Code='" + degree_code + "' and college_code='" + Convert.ToString(ddlCollege.SelectedValue) + "'");
    //                    }
    //                    int.TryParse(max_sem, out maxSem);
    //                    int newbatch = 0;
    //                    int.TryParse(batch_year, out newbatch);
    //                    DateTime dt = new DateTime();
    //                    int cur_year = DateTime.Now.Year;
    //                    int diff = newbatch + (maxSem / 2);
    //                    if (cur_year > diff)
    //                    {
    //                    }
    //                    else
    //                    {
    //                        lbl_popuperr.Text = "The Consolidated is Generated Only For Passed Out Students.";
    //                        errdiv.Visible = true;
    //                        return;
    //                    }
    //                }
    //                if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
    //                {
    //                    printpage = true;
    //                    string principal = string.Empty;
    //                    edu_level = Convert.ToString(printds.Tables[0].Rows[0]["Edu_Level"]).Trim();
    //                    app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]);
    //                    regnumber = Convert.ToString(printds.Tables[0].Rows[0]["Reg_No"]);
    //                    mypdfpage = mydoc.NewPage();
    //                    degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
    //                    //degree = printds.Tables[0].Rows[0]["Dept_name"].ToString();
    //                    coe = printds.Tables[1].Rows[0]["coe"].ToString();
    //                    string[] spiltcoe = coe.Split(' ');
    //                    string newcoe = string.Empty;
    //                    for (int ce = 1; ce < spiltcoe.GetUpperBound(0); ce++)
    //                    {
    //                        string[] spiltcoe12 = spiltcoe[0].Split('.');
    //                        if (spiltcoe12.Length == 3)
    //                        {
    //                            newcoe = spiltcoe12[1].ToString();
    //                            newcoe = newcoe + "." + spiltcoe12[2].ToString();
    //                        }
    //                        if (newcoe == "")
    //                        {
    //                            newcoe = spiltcoe[ce].ToString();
    //                        }
    //                        else
    //                        {
    //                            newcoe = newcoe + " " + spiltcoe[ce].ToString();
    //                        }
    //                    }
    //                    coe = newcoe;
    //                    principal = printds.Tables[1].Rows[0]["principal"].ToString();
    //                    string[] spiltprinci = principal.Split('.');
    //                    string newprinc = string.Empty;
    //                    for (int ce = 1; ce <= spiltprinci.GetUpperBound(0); ce++)
    //                    {
    //                        if (newprinc == "")
    //                        {
    //                            newprinc = spiltprinci[ce].ToString();
    //                        }
    //                        else
    //                        {
    //                            newprinc = newprinc + "." + spiltprinci[ce].ToString();
    //                        }
    //                    }
    //                    principal = newprinc.ToUpper();
    //                    // month = ddlMonth.SelectedIndex;
    //                    //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
    //                    string strMonthName = string.Empty;
    //                    //monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
    //                    //monthandyear = monthandyear.ToUpper();
    //                    studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
    //                    branch = printds.Tables[0].Rows[0]["Dept_name"].ToString();
    //                    dob = printds.Tables[0].Rows[0]["dob"].ToString();
    //                    string stdappno = printds.Tables[0].Rows[0]["App_No"].ToString();
    //                    batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
    //                    degree_code = printds.Tables[0].Rows[0]["degree_code"].ToString();
    //                    //sql2 = "select * from exam_details where    degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
    //                    //printds_new = da.select_method_wo_parameter(sql2, "Text");
    //                    // if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
    //                    //{
    //                    //sem =Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
    //                    if (sem == "1")
    //                    {
    //                        semroman = "I";
    //                    }
    //                    else if (sem == "2")
    //                    {
    //                        semroman = "II";
    //                    }
    //                    else if (sem == "3")
    //                    {
    //                        semroman = "III";
    //                    }
    //                    else if (sem == "4")
    //                    {
    //                        semroman = "IV";
    //                    }
    //                    else if (sem == "5")
    //                    {
    //                        semroman = "V";
    //                    }
    //                    else if (sem == "6")
    //                    {
    //                        semroman = "VI";
    //                    }
    //                    else if (sem == "7")
    //                    {
    //                        semroman = "VII";
    //                    }
    //                    else if (sem == "8")
    //                    {
    //                        semroman = "VIII";
    //                    }
    //                    //PdfTextArea pdfdoi = new PdfTextArea(f2_cos9bold, System.Drawing.Color.Black, new PdfArea(mydoc, 44, 958, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
    //                    //mypdfpage.Add(pdfdoi);
    //                    // exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]).Trim();
    //                    sql3 = "Select syllabus_master.semester,Subject_Type,subject_name,subject_code,subject.subject_no,result,max_int_marks,max_ext_marks,internal_mark,external_mark,total,maxtotal,grade,cp,credit_points,mark_entry.subject_no,semester,maxtotal,exam_code,subject.Part_Type from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'  order by syllabus_master.semester,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no";
    //                    printds_rows.Clear();
    //                    printds_rows.Dispose();
    //                    printds_rows = da.select_method_wo_parameter(sql3, "Text");
    //                    string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-";
    //                    if (edu_level.Trim().ToLower() == "ug")
    //                    {
    //                        batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 3));
    //                    }
    //                    else
    //                    {
    //                        batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 2));
    //                    }
    //                    PdfTable tblstudDetail = mydoc.NewTable(f1_cos10bold, 4, 3, 5);
    //                    tblstudDetail.VisibleHeaders = false;
    //                    tblstudDetail.SetBorders(Color.Black, 1, BorderType.None);
    //                    tblstudDetail.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                    tblstudDetail.Cell(1, 0).SetContent(degree);
    //                    tblstudDetail.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                    tblstudDetail.Cell(1, 1).SetContent(branch);
    //                    tblstudDetail.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                    tblstudDetail.Cell(1, 2).SetContent(dob);
    //                    tblstudDetail.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                    tblstudDetail.Cell(3, 0).SetContent(regnumber);
    //                    tblstudDetail.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                    tblstudDetail.Cell(3, 1).SetContent(studname);
    //                    tblstudDetail.Cell(3, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                    tblstudDetail.Cell(3, 2).SetContent(batch_year);
    //                    PdfTablePage newpdftabpage2 = tblstudDetail.CreateTablePage(new PdfArea(mydoc, 33, 108, 533, 80));
    //                    mypdfpage.Add(newpdftabpage2);
    //                    //string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-" + DateTime.Now.ToString("yyyy"); 
    //                    if (printds_rows.Tables.Count>0 && printds_rows.Tables[0].Rows.Count > 0)
    //                    {
    //                        PdfTable fullmark = mydoc.NewTable(f4_arial7reg, printds_rows.Tables[0].Rows.Count + 1, 14, 4);
    //                        fullmark.VisibleHeaders = false;
    //                        fullmark.SetBorders(Color.Black, 1, BorderType.None);
    //                        fullmark.Columns[0].SetWidth(34);
    //                        fullmark.Columns[1].SetWidth(34);
    //                        fullmark.Columns[2].SetWidth(100);
    //                        fullmark.Columns[3].SetWidth(200);
    //                        fullmark.Columns[4].SetWidth(50);
    //                        fullmark.Columns[5].SetWidth(40);
    //                        fullmark.Columns[6].SetWidth(40);
    //                        fullmark.Columns[7].SetWidth(40);
    //                        fullmark.Columns[8].SetWidth(40);
    //                        fullmark.Columns[9].SetWidth(40);
    //                        fullmark.Columns[10].SetWidth(40);
    //                        fullmark.Columns[11].SetWidth(40);
    //                        fullmark.Columns[12].SetWidth(40);
    //                        fullmark.Columns[13].SetWidth(40);
    //                        // fullmark.Columns[11].SetWidth(40);
    //                        // fullmark.Columns[12].SetWidth(40);
    //                        int mr = 0;
    //                        int semescount = 0;
    //                        for (int s = 1; s <= maxSem; s++)
    //                        {
    //                            semescount++;
    //                            DataView dvMark = new DataView();
    //                            printds_rows.Tables[0].DefaultView.RowFilter = "semester='" + s + "'";
    //                            dvMark = printds_rows.Tables[0].DefaultView;
    //                            if (dvMark.Count > 0)
    //                            {
    //                                for (int i = 0; i < dvMark.Count; i++)
    //                                {
    //                                    if (mr != 0 && mr % 46 == 0)
    //                                    {
    //                                        if (mr % 46 == 0)
    //                                        {
    //                                            fullmark.Cell(mr, 1).SetCellPadding(5);
    //                                            fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                                            fullmark.Cell(mr, 1).SetContent("--- STATEMENT CONTINUED IN  ---");
    //                                            newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 0, 175, 730, 650));
    //                                            mypdfpage.Add(newpdftabpage2);
    //                                            pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 7, 990, 71, 25), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
    //                                            mypdfpage.Add(pdfdoi);
    //                                            mypdfpage.SaveToDocument();
    //                                            mypdfpage = mydoc.NewPage();
    //                                            mr = 0;
    //                                            pdfdoi = new PdfTextArea(fontdegreename, System.Drawing.Color.Black, new PdfArea(mydoc, 227, 45, 100, 25), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(degree));
    //                                            mypdfpage.Add(pdfdoi);
    //                                            if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
    //                                            {
    //                                                LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
    //                                                mypdfpage.Add(LogoImage2, 645, 25, 420);
    //                                            }
    //                                            else
    //                                            {
    //                                            }
    //                                            tblstudDetail = mydoc.NewTable(fontStudDetails, 4, 3, 5);
    //                                            tblstudDetail.VisibleHeaders = false;
    //                                            tblstudDetail.SetBorders(Color.Black, 1, BorderType.None);
    //                                            //255,100,106,156,88
    //                                            tblstudDetail.SetColumnsWidth(new int[] { 255, 100, 108, 157, 90 });
    //                                            tblstudDetail.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                                            tblstudDetail.Cell(1, 0).SetContent(degree);
    //                                            tblstudDetail.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                                            tblstudDetail.Cell(1, 1).SetContent(branch);
    //                                            tblstudDetail.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                                            tblstudDetail.Cell(1, 2).SetContent(dob);
    //                                            tblstudDetail.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                                            tblstudDetail.Cell(3, 0).SetContent(regnumber);
    //                                            tblstudDetail.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                                            tblstudDetail.Cell(3, 1).SetContent(studname);
    //                                            tblstudDetail.Cell(3, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                                            tblstudDetail.Cell(3, 2).SetContent(batch_year);
    //                                            // x=13,y=121.8,W=706 ,H=41
    //                                            newpdftabpage2 = tblstudDetail.CreateTablePage(new PdfArea(mydoc, 0, 115, 730, 50));//mydoc, 1, 115, 730, 50
    //                                            mypdfpage.Add(newpdftabpage2);
    //                                            fullmark = mydoc.NewTable(fontStmtMarks, printds_rows.Tables[0].Rows.Count + maxSem + rowSpecial + 2, 10, 1);
    //                                            fullmark.VisibleHeaders = false;
    //                                            fullmark.SetBorders(Color.Black, 1, BorderType.None);
    //                                            fullmark.Columns[0].SetWidth(71);//
    //                                            fullmark.Columns[1].SetWidth(250);
    //                                            fullmark.Columns[2].SetWidth(43);
    //                                            fullmark.Columns[3].SetWidth(43);
    //                                            fullmark.Columns[4].SetWidth(43);
    //                                            fullmark.Columns[5].SetWidth(51);
    //                                            fullmark.Columns[6].SetWidth(51);
    //                                            fullmark.Columns[7].SetWidth(43);
    //                                            fullmark.Columns[8].SetWidth(43);
    //                                            fullmark.Columns[9].SetWidth(71);
    //                                            fullmark.Cell(mr, 1).SetCellPadding(5);
    //                                            fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                                            fullmark.Cell(mr, 1).SetContent("--- CONTINUATION OF STATEMENT FROM ---");
    //                                            mr += 2;
    //                                            //fullmark.Cell(mr, 1).SetCellPadding(5);
    //                                        }
    //                                        bool calgpa = true;
    //                                        fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        fullmark.Cell(mr, 0).SetContent(Convert.ToString(dvMark[i]["subject_code"]));
    //                                        fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                                        fullmark.Cell(mr, 1).SetContent(Convert.ToString(dvMark[i]["subject_name"]));
    //                                        string subtypeaccr = string.Empty;
    //                                        string sub_code = Convert.ToString(dvMark[i]["subject_code"]).Trim();
    //                                        subtypeaccr = Convert.ToString(dvMark[i]["subject_type"]);
    //                                        subtypeaccr = findSubTypeAccromy(subtypeaccr);
    //                                        if (subtypeaccr.ToUpper().Trim() == "PRAC")
    //                                        {
    //                                            if (Convert.ToString(dvMark[i]["subject_name"]).ToLower() == "computer training" || Convert.ToString(dvMark[i]["subject_name"]).ToLower() == "skillbased computer training intro.to information techn. & ms office")
    //                                            {
    //                                                subtypeaccr = "CT";
    //                                            }
    //                                            if (subtypeaccr.ToUpper().Trim() == "PRAC")
    //                                            {
    //                                                string gt_sub_code = sub_code.Substring(sub_code.Length - 3, 1);
    //                                                if (gt_sub_code.ToUpper().Trim() == "M")
    //                                                {
    //                                                    subtypeaccr = "MC";
    //                                                }
    //                                                else if (gt_sub_code.ToUpper().Trim() == "A")
    //                                                {
    //                                                    subtypeaccr = "AC";
    //                                                }
    //                                                else if (gt_sub_code.ToUpper().Trim() == "E")
    //                                                {
    //                                                    subtypeaccr = "EC";
    //                                                }
    //                                                else if (gt_sub_code.ToUpper().Trim() == "L")
    //                                                {
    //                                                    subtypeaccr = "GE";
    //                                                }
    //                                                else
    //                                                {
    //                                                    subtypeaccr = "PRAC";
    //                                                }
    //                                            }
    //                                        }
    //                                        fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        fullmark.Cell(mr, 2).SetContent(subtypeaccr);
    //                                        double internalmmark = 0;
    //                                        double externalmark1 = 0;
    //                                        double totalintext = 0;
    //                                        double.TryParse(Convert.ToString(dvMark[i]["internal_mark"]), out internalmmark);
    //                                        fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        double extfinal = 0;
    //                                        double.TryParse(Convert.ToString(dvMark[i]["external_mark"]), out extfinal);
    //                                        extfinal = Math.Round(extfinal, 0);
    //                                        externalmark1 = extfinal;
    //                                        string checkedmark = string.Empty;
    //                                        if (extfinal < 0)
    //                                        {
    //                                            checkedmark = loadmarkat(Convert.ToString(extfinal));
    //                                        }
    //                                        else
    //                                        {
    //                                            checkedmark = Convert.ToString(extfinal);
    //                                        }
    //                                        if (internalmmark >= 0)
    //                                        {
    //                                            if (extfinal > 0)
    //                                            {
    //                                                totalintext = internalmmark + externalmark1;
    //                                            }
    //                                            else
    //                                            {
    //                                                totalintext = internalmmark;
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                            if (extfinal > 0)
    //                                            {
    //                                                totalintext = externalmark1;
    //                                            }
    //                                            else
    //                                            {
    //                                                totalintext = 0;
    //                                            }
    //                                        }
    //                                        onlyca = false;
    //                                        onlyes = false;
    //                                        if (extfinal > 50)
    //                                        {
    //                                            onlyes = true;
    //                                        }
    //                                        if (internalmmark > 50)
    //                                        {
    //                                            onlyca = true;
    //                                        }
    //                                        fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        if (onlyes == true && extfinal >= 0)
    //                                        {
    //                                            fullmark.Cell(mr, 5).SetContent(checkedmark + "/100");
    //                                        }
    //                                        else
    //                                        {
    //                                            fullmark.Cell(mr, 5).SetContent(checkedmark);
    //                                        }
    //                                        if (onlyca == true && internalmmark >= 0)
    //                                        {
    //                                            fullmark.Cell(mr, 4).SetContent(internalmmark + "/100");
    //                                        }
    //                                        else if (onlyes == false)
    //                                        {
    //                                            fullmark.Cell(mr, 4).SetContent(internalmmark);
    //                                        }
    //                                        else
    //                                        {
    //                                            fullmark.Cell(mr, 4).SetContent("NA");
    //                                            additonalstatus = 1;
    //                                        }
    //                                        if (onlyca)
    //                                        {
    //                                            fullmark.Cell(mr, 5).SetContent("NA");
    //                                            additonalstatus = 1;
    //                                        }
    //                                        //fullmark.Cell(mr, 4).SetContent(internalmmark);
    //                                        double totfinal = 0;
    //                                        totfinal = Math.Round(totalintext, 0, MidpointRounding.AwayFromZero);
    //                                        fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal));
    //                                        //max_int_marks,max_ext_marks,internal_mark,external_mark,total,maxtotal,grade,cp,credit_points,mark_entry.subject_no,semester,maxtotal,exam_code
    //                                        double credit = 0;
    //                                        double.TryParse(Convert.ToString(dvMark[i]["credit_points"]), out credit);
    //                                        overallcreditearned += credit;
    //                                        fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        if (starP3 == true)
    //                                        {
    //                                            if (arr_star.Contains(sub_code))
    //                                            {
    //                                                fullmark.Cell(mr, 3).SetContent(Convert.ToString(dvMark[i]["credit_points"] + "*"));
    //                                            }
    //                                            else
    //                                            {
    //                                                fullmark.Cell(mr, 3).SetContent(Convert.ToString(dvMark[i]["credit_points"]));
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                            fullmark.Cell(mr, 3).SetContent(Convert.ToString(dvMark[i]["credit_points"]));
    //                                        }
    //                                        //fullmark.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        //fullmark.Cell(i, 4).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["max_int_marks"]));
    //                                        //fullmark.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        //fullmark.Cell(i, 5).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["max_ext_marks"]));
    //                                        double checkmarkmm = 0;
    //                                        double.TryParse(Convert.ToString(dvMark[i]["total"]), out checkmarkmm);
    //                                        checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
    //                                        string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + checkmarkmm + "' between Frange and Trange";
    //                                        gradeds.Clear();
    //                                        gradeds = da.select_method_wo_parameter(gradesql, "Text");
    //                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
    //                                        {
    //                                            gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "'  and '" + checkmarkmm + "' between Frange and Trange";//added by sridhar 
    //                                            gradeds.Clear();
    //                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
    //                                        }
    //                                          if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
    //                                            {
    //                                        for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
    //                                        {
    //                                            if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
    //                                            {
    //                                                grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
    //                                                gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
    //                                            }
    //                                        }
    //                                        }
    //                                        double gradeibtpoint = 0;
    //                                        double.TryParse(Convert.ToString(dvMark[i]["total"].ToString()), out gradeibtpoint);
    //                                        gradeibtpoint = gradeibtpoint / 10;
    //                                        gradeibtpoint = Math.Round(gradeibtpoint, 1, MidpointRounding.AwayFromZero);
    //                                        string gp = String.Format("{0:0.0}", gradeibtpoint);
    //                                        gradepoints = Convert.ToString(gradeibtpoint);
    //                                        gradepoints = Convert.ToString(Math.Round(Convert.ToDouble(gradeibtpoint), 1, MidpointRounding.AwayFromZero));
    //                                        gradepoints = String.Format("{0:0.0}", gradepoints);
    //                                        string result = Convert.ToString(dvMark[i]["result"]).ToLower();
    //                                        if (result == "fail")
    //                                        {
    //                                            result = "RA";
    //                                            grade = "U";
    //                                        }
    //                                        else if (result == "pass")
    //                                        {
    //                                            result = "P";
    //                                        }
    //                                        else
    //                                        {
    //                                            result = "AB";
    //                                            grade = "U";
    //                                        }
    //                                        totfinal = totfinal * Convert.ToDouble(dvMark[i]["credit_points"].ToString());
    //                                        fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        fullmark.Cell(mr, 8).SetContent(grade);
    //                                        fullmark.Cell(mr, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        fullmark.Cell(mr, 7).SetContent(gp);
    //                                        totfinal = Math.Round(totfinal, 0);
    //                                        //fullmark.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        DataView dv = new DataView();
    //                                        printds.Tables[2].DefaultView.RowFilter = "exam_code='" + Convert.ToString(dvMark[i]["exam_code"]).Trim() + "'";
    //                                        dv = printds.Tables[2].DefaultView;
    //                                        if (dv.Count > 0)
    //                                        {
    //                                            string exam_y =Convert.ToString(dv[0]["Exam_year"]).Trim();
    //                                            string exam_m = Convert.ToString(dv[0]["Exam_Month"]).Trim();
    //                                            strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
    //                                           strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
    //                                            strMonthName = exam_y + " - " + strMonthName.ToUpper() + " ";
    //                                            fullmark.Cell(mr, 9).SetContent(strMonthName);
    //                                        }
    //                                        mr++;
    //                                    }
    //                                    else
    //                                    {
    //                                        bool calgpa = true;
    //                                        fullmark.Cell(mr, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        fullmark.Cell(mr, 0).SetContent(Convert.ToString(dvMark[i]["subject_code"]));
    //                                        fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                                        fullmark.Cell(mr, 1).SetContent(Convert.ToString(dvMark[i]["subject_name"]));
    //                                        string subtypeaccr = string.Empty;
    //                                        string sub_code = Convert.ToString(dvMark[i]["subject_code"]).Trim();
    //                                        subtypeaccr = Convert.ToString(dvMark[i]["subject_type"]);
    //                                        subtypeaccr = findSubTypeAccromy(subtypeaccr);
    //                                        if (subtypeaccr.ToUpper().Trim() == "PRAC")
    //                                        {
    //                                            if (Convert.ToString(dvMark[i]["subject_name"]).ToLower() == "computer training" || Convert.ToString(dvMark[i]["subject_name"]).ToLower() == "skillbased computer training intro.to information techn. & ms office")
    //                                            {
    //                                                subtypeaccr = "CT";
    //                                            }
    //                                            if (subtypeaccr.ToUpper().Trim() == "PRAC")
    //                                            {
    //                                                string gt_sub_code = sub_code.Substring(sub_code.Length - 3, 1);
    //                                                if (gt_sub_code.ToUpper().Trim() == "M")
    //                                                {
    //                                                    subtypeaccr = "MC";
    //                                                }
    //                                                else if (gt_sub_code.ToUpper().Trim() == "A")
    //                                                {
    //                                                    subtypeaccr = "AC";
    //                                                }
    //                                                else if (gt_sub_code.ToUpper().Trim() == "E")
    //                                                {
    //                                                    subtypeaccr = "EC";
    //                                                }
    //                                                else if (gt_sub_code.ToUpper().Trim() == "L")
    //                                                {
    //                                                    subtypeaccr = "GE";
    //                                                }
    //                                                else
    //                                                {
    //                                                    subtypeaccr = "PRAC";
    //                                                }
    //                                            }
    //                                        }
    //                                        fullmark.Cell(mr, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        fullmark.Cell(mr, 2).SetContent(subtypeaccr);
    //                                        double internalmmark = 0;
    //                                        double externalmark1 = 0;
    //                                        double totalintext = 0;
    //                                        double.TryParse(Convert.ToString(dvMark[i]["internal_mark"]), out internalmmark);
    //                                        fullmark.Cell(mr, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        double extfinal = 0;
    //                                        double.TryParse(Convert.ToString(dvMark[i]["external_mark"]), out extfinal);
    //                                        extfinal = Math.Round(extfinal, 0);
    //                                        externalmark1 = extfinal;
    //                                        string checkedmark = string.Empty;
    //                                        if (extfinal < 0)
    //                                        {
    //                                            checkedmark = loadmarkat(Convert.ToString(extfinal));
    //                                        }
    //                                        else
    //                                        {
    //                                            checkedmark = Convert.ToString(extfinal);
    //                                        }
    //                                        if (internalmmark >= 0)
    //                                        {
    //                                            if (extfinal > 0)
    //                                            {
    //                                                totalintext = internalmmark + externalmark1;
    //                                            }
    //                                            else
    //                                            {
    //                                                totalintext = internalmmark;
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                            if (extfinal > 0)
    //                                            {
    //                                                totalintext = externalmark1;
    //                                            }
    //                                            else
    //                                            {
    //                                                totalintext = 0;
    //                                            }
    //                                        }
    //                                        onlyca = false;
    //                                        onlyes = false;
    //                                        if (extfinal > 50)
    //                                        {
    //                                            onlyes = true;
    //                                        }
    //                                        if (internalmmark > 50)
    //                                        {
    //                                            onlyca = true;
    //                                        }
    //                                        fullmark.Cell(mr, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        if (onlyes == true && extfinal >= 0)
    //                                        {
    //                                            fullmark.Cell(mr, 5).SetContent(checkedmark + "/100");
    //                                        }
    //                                        else
    //                                        {
    //                                            fullmark.Cell(mr, 5).SetContent(checkedmark);
    //                                        }
    //                                        if (onlyca == true && internalmmark >= 0)
    //                                        {
    //                                            fullmark.Cell(mr, 4).SetContent(internalmmark + "/100");
    //                                        }
    //                                        else if (onlyes == false)
    //                                        {
    //                                            fullmark.Cell(mr, 4).SetContent(internalmmark);
    //                                        }
    //                                        else
    //                                        {
    //                                            fullmark.Cell(mr, 4).SetContent("NA");
    //                                            additonalstatus = 1;
    //                                        }
    //                                        if (onlyca)
    //                                        {
    //                                            fullmark.Cell(mr, 5).SetContent("NA");
    //                                            additonalstatus = 1;
    //                                        }
    //                                        //fullmark.Cell(mr, 4).SetContent(internalmmark);
    //                                        double totfinal = 0;
    //                                        totfinal = Math.Round(totalintext, 0, MidpointRounding.AwayFromZero);
    //                                        fullmark.Cell(mr, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        fullmark.Cell(mr, 6).SetContent(Convert.ToString(totfinal));
    //                                        //max_int_marks,max_ext_marks,internal_mark,external_mark,total,maxtotal,grade,cp,credit_points,mark_entry.subject_no,semester,maxtotal,exam_code
    //                                        double credit = 0;
    //                                        double.TryParse(Convert.ToString(dvMark[i]["credit_points"]), out credit);
    //                                        overallcreditearned += credit;
    //                                        fullmark.Cell(mr, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        if (starP3 == true)
    //                                        {
    //                                            if (arr_star.Contains(sub_code))
    //                                            {
    //                                                fullmark.Cell(mr, 3).SetContent(Convert.ToString(dvMark[i]["credit_points"] + "*"));
    //                                            }
    //                                            else
    //                                            {
    //                                                fullmark.Cell(mr, 3).SetContent(Convert.ToString(dvMark[i]["credit_points"]));
    //                                            }
    //                                        }
    //                                        else
    //                                        {
    //                                            fullmark.Cell(mr, 3).SetContent(Convert.ToString(dvMark[i]["credit_points"]));
    //                                        }
    //                                        //fullmark.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        //fullmark.Cell(i, 4).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["max_int_marks"]));
    //                                        //fullmark.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        //fullmark.Cell(i, 5).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["max_ext_marks"]));
    //                                        double checkmarkmm = 0;
    //                                        double.TryParse(Convert.ToString(dvMark[i]["total"]), out checkmarkmm);
    //                                        checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
    //                                        string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "' and '" + checkmarkmm + "' between Frange and Trange";
    //                                        gradeds.Clear();
    //                                        gradeds = da.select_method_wo_parameter(gradesql, "Text");
    //                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
    //                                            {
    //                                            gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + grade_set + "' and batch_year='" + grade_set + "'  and '" + checkmarkmm + "' between Frange and Trange";//added by sridhar 
    //                                            gradeds.Clear();
    //                                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
    //                                        }
    //if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
    //                                            {
    //                                        for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
    //                                        {
    //                                            if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
    //                                            {
    //                                                grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
    //                                                gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
    //                                            }
    //                                        }
    //}
    //                                        double gradeibtpoint = 0;
    //                                        double.TryParse(Convert.ToString(dvMark[i]["total"].ToString()), out gradeibtpoint);
    //                                        gradeibtpoint = gradeibtpoint / 10;
    //                                        gradeibtpoint = Math.Round(gradeibtpoint, 1, MidpointRounding.AwayFromZero);
    //                                        string gp = String.Format("{0:0.0}", gradeibtpoint);
    //                                        gradepoints = Convert.ToString(gradeibtpoint);
    //                                        gradepoints = Convert.ToString(Math.Round(Convert.ToDouble(gradeibtpoint), 1, MidpointRounding.AwayFromZero));
    //                                        gradepoints = String.Format("{0:0.0}", gradepoints);
    //                                        string result = Convert.ToString(dvMark[i]["result"]).ToLower();
    //                                        if (result == "fail")
    //                                        {
    //                                            result = "RA";
    //                                            grade = "U";
    //                                        }
    //                                        else if (result == "pass")
    //                                        {
    //                                            result = "P";
    //                                        }
    //                                        else
    //                                        {
    //                                            result = "AB";
    //                                            grade = "U";
    //                                        }
    //                                        totfinal = totfinal * Convert.ToDouble(dvMark[i]["credit_points"].ToString());
    //                                        fullmark.Cell(mr, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        fullmark.Cell(mr, 8).SetContent(grade);
    //                                        fullmark.Cell(mr, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        fullmark.Cell(mr, 7).SetContent(gp);
    //                                        totfinal = Math.Round(totfinal, 0);
    //                                        //fullmark.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        fullmark.Cell(mr, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                        DataView dv = new DataView();
    //                                        printds.Tables[2].DefaultView.RowFilter = "exam_code='" + Convert.ToString(dvMark[i]["exam_code"]).Trim() + "'";
    //                                        dv = printds.Tables[2].DefaultView;
    //                                        if (dv.Count > 0)
    //                                        {
    //                                            string exam_y =Convert.ToString(dv[0]["Exam_year"]).Trim();
    //                                            string exam_m = Convert.ToString(dv[0]["Exam_Month"]).Trim();
    //                                            strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
    //                                           strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
    //                                            strMonthName = exam_y + " - " + strMonthName.ToUpper() + " ";
    //                                            fullmark.Cell(mr, 9).SetContent(strMonthName);
    //                                        }
    //                                        mr++;
    //                                    }
    //                                }
    //                                fullmark.Cell(mr, 9).SetCellPadding(5);
    //                                mr++;
    //                            }
    //                        }
    //                        fullmark.Cell(mr, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                        fullmark.Cell(mr, 1).SetFont(fontStmtMarks);
    //                        fullmark.Cell(mr, 1).SetContent("--- END OF STATEMENT ---");
    //                        newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 0, 175, 730, 650));
    //                        mypdfpage.Add(newpdftabpage2);
    //                        for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
    //                        {
    //                            string part = string.Empty;
    //                            part = ToRoman(Convert.ToString(printds_rows.Tables[0].Rows[i]["Part_Type"]));
    //                            fullmark.Cell(i, 0).SetContent(part);
    //                            fullmark.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            //ToRoman(string part);
    //                            fullmark.Cell(i, 1).SetContent(printds_rows.Tables[0].Rows[i]["semester"].ToString());
    //                            fullmark.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            fullmark.Cell(i, 2).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim());
    //                            fullmark.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            fullmark.Cell(i, 3).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim());
    //                            fullmark.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                            fullmark.Cell(i, 5).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["max_int_marks"]).Trim());
    //                            fullmark.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            fullmark.Cell(i, 6).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim());
    //                            fullmark.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            fullmark.Cell(i, 7).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["max_ext_marks"]).Trim());
    //                            fullmark.Cell(i, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            fullmark.Cell(i, 8).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim());
    //                            fullmark.Cell(i, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            fullmark.Cell(i, 9).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["maxtotal"]).Trim());
    //                            fullmark.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            fullmark.Cell(i, 10).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim());
    //                            fullmark.Cell(i, 10).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            fullmark.Cell(i, 11).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
    //                            fullmark.Cell(i, 11).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            double gradepoint = Convert.ToDouble(printds_rows.Tables[0].Rows[i]["total"]) / 10;
    //                            gradepoint = Math.Round(gradepoint, 1, MidpointRounding.AwayFromZero);
    //                            fullmark.Cell(i, 12).SetContent(gradepoint);
    //                            fullmark.Cell(i, 12).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            // fullmark.Cell(i, 11).SetContent(printds_rows.Tables[0].Rows[i]["gradepoint"].ToString());
    //                            double weightmark = Convert.ToDouble(gradepoint * Convert.ToDouble(printds_rows.Tables[0].Rows[i]["credit_points"]));
    //                            weightmark = Math.Round(weightmark, 1, MidpointRounding.AwayFromZero);
    //                            fullmark.Cell(i, 13).SetContent(weightmark);
    //                            fullmark.Cell(i, 13).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            double internalmmark = 0;
    //                            double externalmark1 = 0;
    //                            double totalintext = 0;
    //                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]), out internalmmark);
    //                            double extfinal = 0;
    //                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]), out extfinal);
    //                            extfinal = Math.Round(extfinal, 0);
    //                            externalmark1 = extfinal;
    //                            string checkedmark = string.Empty;
    //                            if (extfinal < 0)
    //                            {
    //                                checkedmark = loadmarkat(Convert.ToString(extfinal));
    //                            }
    //                            else
    //                            {
    //                                checkedmark = Convert.ToString(extfinal);
    //                            }
    //                            if (internalmmark >= 0)
    //                            {
    //                                if (extfinal > 0)
    //                                {
    //                                    totalintext = internalmmark + externalmark1;
    //                                }
    //                                else
    //                                {
    //                                    totalintext = internalmmark;
    //                                }
    //                            }
    //                            else
    //                            {
    //                                if (extfinal > 0)
    //                                {
    //                                    totalintext = externalmark1;
    //                                }
    //                                else
    //                                {
    //                                    totalintext = 0;
    //                                }
    //                            }
    //                            double totfinal = 0;
    //                            totfinal = Math.Round(totalintext, 0);
    //                            //fullmark.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            //fullmark.Cell(i, 3).SetContent(Convert.ToString(totfinal));
    //                            //fullmark.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            //fullmark.Cell(i, 4).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]));
    //                            double checkmarkmm = 0;
    //                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]), out checkmarkmm);
    //                            string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";
    //                            gradeds.Clear();
    //                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
    //                           if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
    //{
    //                                gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 
    //                                gradeds.Clear();
    //                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
    //                            }
    //if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
    //                                            {
    //                            for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
    //                            {
    //                                if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
    //                                {
    //                                    grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
    //                                    gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
    //                                }
    //                            }
    //}
    //                            double gradeibtpoint = 0;
    //                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim(), out gradeibtpoint);
    //                            gradeibtpoint = gradeibtpoint / 10;
    //                            gradeibtpoint = Math.Round(gradeibtpoint, 1);
    //                            gradepoints = Convert.ToString(gradeibtpoint);
    //                            gradepoints = Convert.ToString(Math.Round(Convert.ToDouble(gradeibtpoint), 2));
    //                            gradepoints = String.Format("{0:0.00}", gradepoints);
    //                            string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).ToLower();
    //                            if (result == "fail")
    //                            {
    //                                result = "RA";
    //                                grade = "U";
    //                            }
    //                            else if (result == "pass")
    //                            {
    //                                result = "P";
    //                            }
    //                            else
    //                            {
    //                                result = "AB";
    //                                grade = "U";
    //                            }
    //                            totfinal = totfinal * Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
    //                            //fullmark.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            //fullmark.Cell(i, 5).SetContent(grade);
    //                            //fullmark.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            //fullmark.Cell(i, 6).SetContent(gradepoints);
    //                            //totfinal = Math.Round(totfinal, 0);
    //                            //fullmark.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            DataView dv = new DataView();
    //                            printds.Tables[2].DefaultView.RowFilter = "exam_code='" + Convert.ToString(printds_rows.Tables[0].Rows[i]["exam_code"]).Trim() + "'";
    //                            dv = printds.Tables[2].DefaultView;
    //                            if (dv.Count > 0)
    //                            {
    //                                string exam_y =Convert.ToString(dv[0]["Exam_year"]).Trim();
    //                                string exam_m = Convert.ToString(dv[0]["Exam_Month"]).Trim();
    //                                strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
    //                               strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
    //                                strMonthName = strMonthName.ToUpper() + " " + exam_y + "   ";
    //                                fullmark.Cell(i, 4).SetContent(strMonthName);
    //                            }
    //                        }
    //                        fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetFont(f5_pal10bold);
    //                        fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContent("****** End of Statement ******");
    //                        fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        foreach (PdfCell pr in fullmark.CellRange(printds_rows.Tables[0].Rows.Count, 0, printds_rows.Tables[0].Rows.Count, 0).Cells)
    //                        {
    //                            pr.ColSpan = 8;
    //                        }
    //                        newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 33, 183, 533, 709));
    //                        mypdfpage.Add(newpdftabpage2);
    //                        PdfTable tblcgpaclass = mydoc.NewTable(f2_cos9bold, 1, 2, 3);
    //                        tblcgpaclass.VisibleHeaders = false;
    //                        tblcgpaclass.SetBorders(Color.Black, 1, BorderType.None);
    //                        tblcgpaclass.Columns[0].SetWidth(75);
    //                        tblcgpaclass.Columns[1].SetWidth(130);
    //                        double partsums = 0.00;
    //                        int partrowcount = 0;
    //                        double Credit_Points = 0.0;
    //                        double grade_points = 0.0;
    //                        double creditstotal = 0;
    //                        double overalltotgrade = 0;
    //                        // noofsubfailed = 1;
    //                        if (printds_rows.Tables.Count>0 && printds_rows.Tables[0].Rows.Count > 0)
    //                        {
    //                            string sumpart = string.Empty;
    //                            DataView dv_demand_data = new DataView();
    //                            DataView dv_demand_datadummy = new DataView();
    //                            printds_rows.Tables[0].DefaultView.RowFilter = "result='pass'";
    //                            dv_demand_data = printds_rows.Tables[0].DefaultView;
    //                            if (dv_demand_data.Count > 0)
    //                            {
    //                                for (int sum = 0; sum < dv_demand_data.Count; sum++)
    //                                {
    //                                    double.TryParse(Convert.ToString(dv_demand_data[sum]["total"]), out grade_points);
    //                                    double.TryParse(Convert.ToString(dv_demand_data[sum]["credit_points"]), out Credit_Points);
    //                                    grade_points = grade_points / 10;
    //                                    creditstotal = creditstotal + Credit_Points;
    //                                    partsums = partsums + (grade_points * Credit_Points);
    //                                }
    //                                if (creditstotal == 0)
    //                                {
    //                                    sumpart = "0";
    //                                }
    //                                else if (creditstotal > 0)
    //                                {
    //                                    partsums = (partsums / creditstotal);
    //                                    // partsums = Math.Round(partsums, 0);                                      
    //                                    partsums = Math.Round(partsums, 0, MidpointRounding.AwayFromZero);
    //                                    // sumpart = String.Format("{0:0.00}", partsums);
    //                                    sumpart = Convert.ToString(partsums);
    //                                }
    //                                else
    //                                {
    //                                    sumpart = "0";
    //                                }
    //                            }
    //                            else
    //                            {
    //                                sumpart = "--";
    //                            }
    //                            if (sumpart != "--")
    //                            {
    //                                double sumpartgrade = 0;
    //                                if (double.TryParse(sumpart, out sumpartgrade))
    //                                {
    //                                    //sumpartgrade = Convert.ToDouble(sumpart);
    //                                    overalltotgrade = overalltotgrade + sumpartgrade;
    //                                }
    //                                else
    //                                {
    //                                    sumpartgrade = 0;
    //                                }
    //                                string batchsetting = "1";
    //                                if (noofsubfailed != 0 && overalltotgrade >= 6)
    //                                {
    //                                    string cclass = "FIRST";
    //                                    tblcgpaclass.Cell(0, 0).SetContent(sumpart);
    //                                    tblcgpaclass.Cell(0, 1).SetContent(cclass);
    //                                }
    //                                else
    //                                {
    //                                    string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";//added by sridhar 16/aug 2014
    //                                    gradeds.Clear();
    //                                    gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
    //                                    if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
    //                                    {
    //                                        tblcgpaclass.Cell(0, 0).SetContent(sumpart);
    //                                        tblcgpaclass.Cell(0, 1).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
    //                                    }
    //                                }
    //                            }
    //                            else
    //                            {
    //                                tblcgpaclass.Cell(0, 0).SetContent(sumpart);
    //                            }
    //                        }
    //                        else
    //                        {
    //                            tblcgpaclass.Cell(0, 0).SetContent("--");
    //                        }
    //                        newpdftabpage2 = tblcgpaclass.CreateTablePage(new PdfArea(mydoc, 146, 921, 213, 50));
    //                        mypdfpage.Add(newpdftabpage2);
    //                    }
    //                    //PdfTextArea pdfdoi = new PdfTextArea(f2_cos9bold, System.Drawing.Color.Black, new PdfArea(mydoc, 74, 858, 71, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
    //                    //mypdfpage.Add(pdfdoi);
    //                    string medium = d2.GetFunction("select TextVal from TextValTable where TextCriteria='medi' and college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and TextCode in(select isnull(medium_ins,0) from applyn  where app_no='" + app_no + "')");
    //                    if (medium != "" && medium != null && medium != "0")
    //                    {
    //                        PdfTextArea pdfdoi = new PdfTextArea(f2_cos9bold, System.Drawing.Color.Black, new PdfArea(mydoc, 304, 858, 190, 50), System.Drawing.ContentAlignment.TopLeft, medium);
    //                        mypdfpage.Add(pdfdoi);
    //                    }
    //                    mypdfpage.SaveToDocument();
    //                }
    //                else
    //                {
    //                    if (lblerror1 == "")
    //                    {
    //                        lblerror1 = rollnosub;
    //                    }
    //                    else
    //                    {
    //                        lblerror1 = lblerror1 + "," + rollnosub;
    //                    }
    //                }
    //            }
    //        }
    //        //} 
    //        if (lblerror1 != "")
    //        {
    //            lblerror.Text = lblerror1;
    //            lblerror.Visible = true;
    //        }
    //        else
    //        {
    //            lblerror.Text = string.Empty;
    //            lblerror.Visible = false;
    //        }
    //        if (printpage == true)
    //        {
    //            string appPath = HttpContext.Current.Server.MapPath("~");
    //            if (appPath != "")
    //            {
    //                string szPath = appPath + "/Report/";
    //                string szFile = "consolidatedmarksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
    //                mydoc.SaveToFile(szPath + szFile);
    //                Response.ClearHeaders();
    //                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
    //                Response.ContentType = "application/pdf";
    //                Response.WriteFile(szPath + szFile);
    //            }
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //    }
    //}
    //UGC 

    public void Ugc_sponsored_jamal()
    {
        try
        {
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            string degree = string.Empty;
            string edu_level = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string semroman = string.Empty;
            string coe = string.Empty;
            string curr_sem = string.Empty;
            int cur_sem = 0;
            int sheet_serial_no = 0;
            int additonalstatus = 0;
            string additionalmsg = string.Empty;
            bool onlyca = false;
            bool onlyes = false;
            string date_of_publication = string.Empty;
            DataSet gradeds = new DataSet();
            Font fontDegree = new Font("Times New Roman", 14, FontStyle.Bold);
            Font fontStudDetails = new Font("Times New Roman", 11, FontStyle.Bold);
            Font fontdegreename = new Font("Times New Roman", 14, FontStyle.Bold);
            Font fontStmtMarks = new Font("Times New Roman", 11, FontStyle.Regular);
            Font fontOveralrslt = new Font("Times New Roman", 11, FontStyle.Bold);
            Font fontcgpa = new Font("Times New Roman", 11, FontStyle.Regular);
            Font fontDate = new Font("Times New Roman", 11, FontStyle.Regular);
            Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font fontStud = new Font("Comic Sans MS", 10, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 8, FontStyle.Bold);
            DataTable dtPart1 = new DataTable();
            DataTable dtPart2 = new DataTable();
            DataTable dtPart3 = new DataTable();
            DataTable dtPart4 = new DataTable();
            DataSet OverallResult = new DataSet();
            Font Fontarial9 = new Font("Arial", 8, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            sheet_serial_no = 0;
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(25.4, 15.2));
            PdfPage mypdfpage;
            if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
            {
                FpSpread2.SaveChanges();
                for (int res = 1; res < FpSpread2.Sheets[0].RowCount; res++)
                {
                    int isval = 0;
                    additonalstatus = 0;
                    additionalmsg = string.Empty;
                    onlyca = false;
                    onlyes = false;
                    isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                    if (isval == 1)
                    {
                        printds.Clear();
                        printds.Dispose();
                        printds_new.Clear();
                        printds_new.Dispose();
                        PdfTable table1forpage1;
                        PdfTextArea pdfdoi;
                        PdfTablePage newpdftabpage2;
                        PdfTable fullmark;
                        rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                        regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                        string sql = "SELECT r.Reg_No,r.colllege_code,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,C.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "'  ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
                        printds = da.select_method_wo_parameter(sql, "Text");
                        string overall = "select count(s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'; Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc  where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass' and Mark_Entry.roll_no=sc.roll_no and Mark_Entry.subject_no=sc.subject_no and Mark_Entry.roll_no='" + rollnosub + "'  ";
                        overall = overall + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master,subjectChooser sc  where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail' and Mark_Entry.roll_no=sc.roll_no and Mark_Entry.subject_no=sc.subject_no and Mark_Entry.roll_no='" + rollnosub + "'select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc where m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no='" + rollnosub + "' and m.result='Pass')";
                        OverallResult = da.select_method_wo_parameter(overall, "Text");
                        int noofsubapplied = Convert.ToInt32(OverallResult.Tables[0].Rows[0][0].ToString());
                        int noofsubpassed = Convert.ToInt32(OverallResult.Tables[1].Rows[0][0].ToString());
                        int splcredit = 0;
                        if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                        {
                            mypdfpage = mydoc.NewPage();
                            edu_level = Convert.ToString(printds.Tables[0].Rows[0]["Edu_Level"]).Trim();
                            //  degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                            coe = printds.Tables[1].Rows[0]["coe"].ToString();
                            string[] spiltcoe = coe.Split('.');
                            string newcoe = string.Empty;
                            string grade_set = string.Empty;
                            for (int ce = 1; ce <= spiltcoe.GetUpperBound(0); ce++)
                            {
                                if (newcoe == "")
                                {
                                    newcoe = spiltcoe[ce].ToString();
                                }
                                else
                                {
                                    newcoe = newcoe + "." + spiltcoe[ce].ToString();
                                }
                            }
                            coe = newcoe;
                            //month = ddlMonth.SelectedIndex;
                            //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                            int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                            monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                            string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                            strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                            monthandyear = strMonthName + "-" + Convert.ToString(ddlYear.SelectedItem.Text).Trim().Trim();
                            monthandyear = monthandyear.ToUpper();
                            //strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                            //strMonthName = strMonthName[0].ToString() + strMonthName[1].ToString() + strMonthName[2].ToString();
                            //strMonthName = strMonthName.ToUpper() + " " + exam_y + "   ";
                            regnumber = printds.Tables[0].Rows[0]["Reg_No"].ToString();
                            studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                            branch = printds.Tables[0].Rows[0]["Dept_name"].ToString();
                            dob = printds.Tables[0].Rows[0]["dob"].ToString();
                            date_of_publication = txtdop.Text.ToString();
                            string stdappno = printds.Tables[0].Rows[0]["App_No"].ToString();
                            batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                            degree_code = printds.Tables[0].Rows[0]["degree_code"].ToString();
                            string collegeCode = Convert.ToString(printds.Tables[0].Rows[0]["college_code"]).Trim();
                            int max_sem1 = 0;
                            string max_sem = d2.GetFunctionv("select NDurations from ndegree where batch_year='" + batch_year + "'  and Degree_code='" + degree_code + "' and college_code='" + Convert.ToString(collegeCode) + "'");
                            if (max_sem == "" || max_sem == null)
                            {
                                max_sem = d2.GetFunctionv("SELECT Duration FROM Degree where  Degree_Code='" + degree_code + "' and college_code='" + Convert.ToString(collegeCode) + "'");
                            }
                            int.TryParse(max_sem, out max_sem1);
                            sql2 = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                            string qryexmappn = string.Empty;
                            printds_new = da.select_method_wo_parameter(sql2, "Text");
                            if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                            {
                                sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
                                GetSem(batch_year, Convert.ToString(ddlYear.SelectedItem.Text).Trim(), Convert.ToString(month), max_sem, ref sem);
                                int.TryParse(sem, out cur_sem);
                                if (sem == "1")
                                {
                                    semroman = "I";
                                }
                                else if (sem == "2")
                                {
                                    semroman = "II";
                                }
                                else if (sem == "3")
                                {
                                    semroman = "III";
                                }
                                else if (sem == "4")
                                {
                                    semroman = "IV";
                                }
                                else if (sem == "5")
                                {
                                    semroman = "V";
                                }
                                else if (sem == "6")
                                {
                                    semroman = "VI";
                                }
                                else if (sem == "7")
                                {
                                    semroman = "VII";
                                }
                                else if (sem == "8")
                                {
                                    semroman = "VIII";
                                }
                                //PdfTextArea pdfdoi = new PdfTextArea(Fontco10, System.Drawing.Color.Black, new PdfArea(mydoc, 113, 803, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                                //mypdfpage.Add(pdfdoi);
                                // pdfdoi = new PdfTextArea(fontDegree, System.Drawing.Color.Black, new PdfArea(mydoc, 231, 64, 80, 25), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString(degree));
                                //mypdfpage.Add(pdfdoi);
                                exam_code = string.Empty;
                                for (int exa = 0; exa < printds_new.Tables[0].Rows.Count; exa++)
                                {
                                    exam_code += printds_new.Tables[0].Rows[exa]["exam_code"].ToString() + ",";
                                }
                                exam_code = exam_code.Trim(',');
                                if (cur_sem == max_sem1)
                                {
                                    chk_finalsemmrk_sheet.Checked = true;
                                }
                                sql3 = "Select semester,subject_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,subject.Part_Type,sub_sem.priority,sub_sem.lab,SUBSTRING(subject_code,(LEN(subject_code)-2) ,1) as Prac_code,Exam_Code  from Mark_Entry,Subject,sub_sem,syllabus_master  where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in (" + exam_code + ") and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester desc,isnull(subject.Part_Type,'0') asc,subject.subjectpriority,sub_sem.lab,subject_type desc,subject_code asc";
                                printds_rows.Clear();//,sub_sem.priority,subject.subject_no,subject_type,subject.Part_Type,subject_name ,sub_sem.priority subject.subjectpriority;,case when (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='F' and lab=0) then null when (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='M' and lab=0) then 'A' when (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='M' and lab=1) then 'B' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='A' and lab=0) then 'C' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='A' and lab=1) then 'D' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,0)='E' and lab=1) then 'E' When (SUBSTRING(subject_code,(LEN(subject_code)-2) ,1)='E' and lab=1) then 'F' Else SUBSTRING(subject_code,(LEN(subject_code)-2) ,1) End asc
                                printds_rows.Dispose();
                                printds_rows = da.select_method_wo_parameter(sql3, "Text");
                                string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-";
                                if (edu_level.Trim().ToLower() == "ug")
                                {
                                    batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 3));
                                    grade_set = "0";
                                }
                                else
                                {
                                    batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 2));
                                    grade_set = "1";
                                }
                                table1forpage1 = mydoc.NewTable(fontStudDetails, 1, 4, 1);
                                table1forpage1.VisibleHeaders = false;
                                table1forpage1.SetBorders(Color.Black, 1, BorderType.None);
                                table1forpage1.SetColumnsWidth(new int[] { 190, 259, 135, 125 });  //286,116,88,45,45,60
                                table1forpage1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                table1forpage1.Cell(0, 0).SetContent(regnumber);
                                table1forpage1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                table1forpage1.Cell(0, 1).SetContent(studname);
                                table1forpage1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(0, 2).SetContent(monthandyear);
                                table1forpage1.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table1forpage1.Cell(0, 3).SetContent(date_of_publication);//monthandyear
                                newpdftabpage2 = table1forpage1.CreateTablePage(new PdfArea(mydoc, 27, 105, 661, 60));//h=35
                                mypdfpage.Add(newpdftabpage2);
                                DataSet dsSpl = new DataSet();
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    //string exm_sem = Convert.ToString(printds_rows.Tables[0].Rows[0]["semester"]).Trim();
                                    //int rowSpecial = 0;
                                    //if (chk_finalsemmrk_sheet.Checked && (cur_sem) == max_sem1)
                                    //{
                                    //    string nwqry = "select s.subject_name,scs.Subject_No,App_no,MarkType,IsFinalsem,CurrentSem,s.credit_points,ss.subject_type,s.acronym from SpecialCourseSubject scs,subject s,sub_sem ss where s.subject_no=scs.Subject_No and ss.subType_no=s.subType_no and App_no='" + stdappno + "' and CurrentSem='" + cur_sem + "' and IsFinalsem='1'";
                                    //    dsSpl = d2.select_method_wo_parameter(nwqry, "Text");
                                    //    rowSpecial = dsSpl.Tables[0].Rows.Count;
                                    //}
                                    fullmark = mydoc.NewTable(fontStmtMarks, printds_rows.Tables[0].Rows.Count + 2, 8, 3);
                                    fullmark.VisibleHeaders = false;
                                    fullmark.SetBorders(Color.Black, 1, BorderType.None);
                                    fullmark.Columns[0].SetWidth(55);
                                    fullmark.Columns[1].SetWidth(250);
                                    fullmark.Columns[2].SetWidth(90);
                                    fullmark.Columns[3].SetWidth(90);
                                    fullmark.Columns[4].SetWidth(90);
                                    fullmark.Columns[5].SetWidth(90);
                                    fullmark.Columns[6].SetWidth(90);
                                    fullmark.Columns[7].SetWidth(90);
                                    int mr = 0;
                                    for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                                    {
                                        if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                        {
                                            double internal_marks = 0, external_marks = 0, total = 0;
                                            fullmark.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            string Paper = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]);
                                            string corsename = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]);
                                            string internalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]);
                                            string externalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]);
                                            string totalmark = Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]);
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim(), out internal_marks);
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim(), out external_marks);
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim(), out total);
                                            double creditpoints = 0;// Convert.ToDouble(printds_rows.Tables[0].Rows[i]["credit_points"]);
                                            double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim(), out creditpoints);
                                            string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim();
                                            fullmark.Cell(i, 0).SetContent(Paper);
                                            fullmark.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 1).SetContent(corsename);
                                            fullmark.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            //fullmark.Cell(i, 2).SetContent("Appeardin month&year");
                                            //fullmark.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 3).SetContent(internalmark);
                                            fullmark.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 4).SetContent(externalmark);
                                            fullmark.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 5).SetContent(Convert.ToString(totalmark));
                                            fullmark.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 6).SetContent(creditpoints);
                                            fullmark.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            fullmark.Cell(i, 7).SetContent(result);
                                            fullmark.Cell(i, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            printds.Tables[2].DefaultView.RowFilter = "exam_code='" + Convert.ToString(printds_rows.Tables[0].Rows[i]["Exam_Code"]).Trim() + "'";
                                            DataView dv = printds.Tables[2].DefaultView;
                                            if (dv.Count > 0)
                                            {
                                                string exam_y = Convert.ToString(dv[0]["Exam_year"]).Trim();
                                                string exam_m = Convert.ToString(dv[0]["Exam_Month"]).Trim();
                                                strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                                strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                                strMonthName = strMonthName.ToUpper() + " '" + exam_y[exam_y.Length - 2] + exam_y[exam_y.Length - 1];
                                                fullmark.Cell(i, 2).SetContent(strMonthName);
                                                fullmark.Cell(i, 2).SetContentAlignment(System.Drawing.ContentAlignment.MiddleCenter);
                                            }
                                        }
                                    }
                                    newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 27, 173, 661, 158));
                                    mypdfpage.Add(newpdftabpage2);
                                }
                                pdfdoi = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(mydoc, 72, 828, 100, 25), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString(txtdoi.Text).Trim());
                                mypdfpage.Add(pdfdoi);
                            }
                            mypdfpage.SaveToDocument();
                        }
                    }
                }
            }
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
            }
        }
        catch (Exception ex)
        {
        }
    }

    //Consolidate For MPhil
    public void ConsolidateForMPhil_jamal()
    {
        try
        {
            DataSet printds = new DataSet();
            string lblerror1 = string.Empty;
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            //578
            Boolean printpage = false;
            string edu_level = string.Empty;
            string degree = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string roman = string.Empty;
            string semroman = string.Empty;
            string grade = string.Empty;
            string gradepoints = string.Empty;
            string coe = string.Empty;
            string subjectcode_Part1 = string.Empty;
            string subjectcode_Part2 = string.Empty;
            string subjectcode_Part3 = string.Empty;
            string subjectcode_Part4 = string.Empty;
            string cal_gpa = string.Empty;
            string current_semester = string.Empty;
            string app_no = string.Empty;
            string subtype = string.Empty;
            DataSet gradeds = new DataSet();
            Font f1_cos10bold = new Font("Comic Sans MS", 10, FontStyle.Bold);
            Font f2_cos9bold = new Font("Comic Sans MS", 9, FontStyle.Bold);
            Font f3_arial10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font f4_arial7reg = new Font("Arial", 7, FontStyle.Regular);
            Font f5_pal10bold = new Font("Palatino Linotype", 10, FontStyle.Bold);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.5, 34.5));
            PdfPage mypdfpage;
            FpSpread2.SaveChanges();
            for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                if (isval == 1)
                {
                    printds.Clear();
                    printds.Dispose();
                    printds_new.Clear();
                    printds_new.Dispose();
                    rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                    regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                    string sql = "SELECT r.Reg_No,r.college_code,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,c.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' ;  select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
                    sql = sql + "  select count(s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'  ";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail'  and roll_no='" + rollnosub + "'  ";
                    printds = da.select_method_wo_parameter(sql, "Text");
                    //int noofsubapplied = Convert.ToInt32(printds.Tables[3].Rows[0][0].ToString());
                    //int noofsubpassed = Convert.ToInt32(printds.Tables[4].Rows[0][0].ToString());
                    int noofsubfailed = Convert.ToInt32(printds.Tables[5].Rows[0][0].ToString());
                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                    {
                        printpage = true;
                        string principal = string.Empty;
                        edu_level = Convert.ToString(printds.Tables[0].Rows[0]["Edu_Level"]).Trim();
                        app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]);
                        regnumber = Convert.ToString(printds.Tables[0].Rows[0]["Reg_No"]);
                        string collegeCode = Convert.ToString(printds.Tables[0].Rows[0]["college_code"]).Trim();
                        mypdfpage = mydoc.NewPage();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        //degree = printds.Tables[0].Rows[0]["Dept_name"].ToString();
                        coe = printds.Tables[1].Rows[0]["coe"].ToString();
                        string[] spiltcoe = coe.Split(' ');
                        string newcoe = string.Empty;
                        for (int ce = 1; ce < spiltcoe.GetUpperBound(0); ce++)
                        {
                            string[] spiltcoe12 = spiltcoe[0].Split('.');
                            if (spiltcoe12.Length == 3)
                            {
                                newcoe = spiltcoe12[1].ToString();
                                newcoe = newcoe + "." + spiltcoe12[2].ToString();
                            }
                            if (newcoe == "")
                            {
                                newcoe = spiltcoe[ce].ToString();
                            }
                            else
                            {
                                newcoe = newcoe + " " + spiltcoe[ce].ToString();
                            }
                        }
                        coe = newcoe;
                        principal = printds.Tables[1].Rows[0]["principal"].ToString();
                        string[] spiltprinci = principal.Split('.');
                        string newprinc = string.Empty;
                        for (int ce = 1; ce <= spiltprinci.GetUpperBound(0); ce++)
                        {
                            if (newprinc == "")
                            {
                                newprinc = spiltprinci[ce].ToString();
                            }
                            else
                            {
                                newprinc = newprinc + "." + spiltprinci[ce].ToString();
                            }
                        }
                        principal = newprinc.ToUpper();
                        // month = ddlMonth.SelectedIndex;
                        //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                        string strMonthName = string.Empty;
                        //monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        //monthandyear = monthandyear.ToUpper();
                        studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        branch = printds.Tables[0].Rows[0]["Dept_name"].ToString();
                        dob = printds.Tables[0].Rows[0]["dob"].ToString();
                        string stdappno = printds.Tables[0].Rows[0]["App_No"].ToString();
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = printds.Tables[0].Rows[0]["degree_code"].ToString();
                        //sql2 = "select * from exam_details where    degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                        //printds_new = da.select_method_wo_parameter(sql2, "Text");
                        // if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                        //{
                        //sem =Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
                        if (sem == "1")
                        {
                            semroman = "I";
                        }
                        else if (sem == "2")
                        {
                            semroman = "II";
                        }
                        else if (sem == "3")
                        {
                            semroman = "III";
                        }
                        else if (sem == "4")
                        {
                            semroman = "IV";
                        }
                        else if (sem == "5")
                        {
                            semroman = "V";
                        }
                        else if (sem == "6")
                        {
                            semroman = "VI";
                        }
                        else if (sem == "7")
                        {
                            semroman = "VII";
                        }
                        else if (sem == "8")
                        {
                            semroman = "VIII";
                        }
                        //PdfTextArea pdfdoi = new PdfTextArea(f2_cos9bold, System.Drawing.Color.Black, new PdfArea(mydoc, 44, 958, 305, 50), System.Drawing.ContentAlignment.TopLeft, Convert.ToString(txtdoi.Text).Trim());
                        //mypdfpage.Add(pdfdoi);
                        // exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]).Trim();
                        sql3 = "Select syllabus_master.semester,Subject_Type,subject_name,subject_code,subject.subject_no,result,max_int_marks,max_ext_marks,internal_mark,external_mark,total,maxtotal,grade,cp,credit_points,mark_entry.subject_no,semester,maxtotal,exam_code,subject.Part_Type from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'  order by syllabus_master.semester,subject.subjectpriority,subject.subject_code";
                        printds_rows.Clear();
                        printds_rows.Dispose();
                        printds_rows = da.select_method_wo_parameter(sql3, "Text");
                        string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-";
                        if (edu_level.Trim().ToLower() == "ug")
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 3));
                        }
                        else
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 2));
                        }
                        PdfTable tblstudDetail = mydoc.NewTable(f1_cos10bold, 4, 3, 5);
                        tblstudDetail.VisibleHeaders = false;
                        tblstudDetail.SetBorders(Color.Black, 1, BorderType.None);
                        // tblstudDetail.SetColumnsWidth(new int[] { 84, 57, 47, 56, 140, 57, 126 });
                        tblstudDetail.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        //  tblstudDetail.Cell(1, 2).SetContent();
                        tblstudDetail.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudDetail.Cell(1, 0).SetContent(regnumber);
                        tblstudDetail.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudDetail.Cell(1, 1).SetContent(studname);
                        tblstudDetail.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstudDetail.Cell(1, 2).SetContent("Month and year");
                        //tblstudDetail.Cell(1, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                        ////tblstudDetail.Cell(1, 6).SetContent(regnumber);
                        //tblstudDetail.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        //tblstudDetail.Cell(1, 1).SetContent(degree);
                        ////foreach (PdfCell pc in tblstudDetail.CellRange(1, 1, 1, 1).Cells)
                        ////{
                        ////    pc.ColSpan = 1;
                        ////}
                        //tblstudDetail.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                        //tblstudDetail.Cell(1, 4).SetContent(branch);
                        //tblstudDetail.Cell(1, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                        //tblstudDetail.Cell(1, 6).SetContent(batch_year1);
                        PdfTablePage newpdftabpage2 = tblstudDetail.CreateTablePage(new PdfArea(mydoc, 33, 108, 533, 80));
                        mypdfpage.Add(newpdftabpage2);
                        //string batch_year1 = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim() + "-" + DateTime.Now.ToString("yyyy"); 
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            PdfTable fullmark = mydoc.NewTable(f4_arial7reg, printds_rows.Tables[0].Rows.Count + 1, 14, 4);
                            fullmark.VisibleHeaders = false;
                            fullmark.SetBorders(Color.Black, 1, BorderType.None);
                            fullmark.Columns[0].SetWidth(50);
                            fullmark.Columns[1].SetWidth(150);
                            fullmark.Columns[2].SetWidth(250);
                            fullmark.Columns[3].SetWidth(200);
                            fullmark.Columns[4].SetWidth(100);
                            fullmark.Columns[5].SetWidth(55);
                            fullmark.Columns[6].SetWidth(55);
                            fullmark.Columns[7].SetWidth(55);
                            fullmark.Columns[8].SetWidth(55);
                            fullmark.Columns[9].SetWidth(55);
                            fullmark.Columns[10].SetWidth(55);
                            fullmark.Columns[11].SetWidth(60);
                            fullmark.Columns[12].SetWidth(70);
                            fullmark.Columns[13].SetWidth(70);
                            // fullmark.Columns[11].SetWidth(40);
                            // fullmark.Columns[12].SetWidth(40);
                            for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                            {
                                string part = string.Empty;
                                part = (Convert.ToString(printds_rows.Tables[0].Rows[i]["Part_Type"]));
                                fullmark.Cell(i, 0).SetContent(part);
                                fullmark.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //ToRoman(string part);
                                fullmark.Cell(i, 1).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim());
                                fullmark.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(i, 2).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim());
                                fullmark.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                fullmark.Cell(i, 3).SetContent(monthandyear);
                                fullmark.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(i, 5).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["max_int_marks"]).Trim());
                                fullmark.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(i, 6).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]).Trim());
                                fullmark.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(i, 7).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["max_ext_marks"]).Trim());
                                fullmark.Cell(i, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(i, 8).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]).Trim());
                                fullmark.Cell(i, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(i, 9).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim());
                                fullmark.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                fullmark.Cell(i, 10).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
                                fullmark.Cell(i, 10).SetContentAlignment(ContentAlignment.MiddleCenter);
                                double gradepoint = Convert.ToDouble(printds_rows.Tables[0].Rows[i]["total"]) / 10;
                                gradepoint = Math.Round(gradepoint, 1, MidpointRounding.AwayFromZero);
                                fullmark.Cell(i, 11).SetContent(gradepoint);
                                fullmark.Cell(i, 11).SetContentAlignment(ContentAlignment.MiddleCenter);
                                // fullmark.Cell(i, 11).SetContent(printds_rows.Tables[0].Rows[i]["gradepoint"].ToString());
                                double weightmark = Convert.ToDouble(gradepoint * Convert.ToDouble(printds_rows.Tables[0].Rows[i]["credit_points"]));
                                weightmark = Math.Round(weightmark, 1, MidpointRounding.AwayFromZero);
                                fullmark.Cell(i, 12).SetContent(weightmark);
                                fullmark.Cell(i, 12).SetContentAlignment(ContentAlignment.MiddleCenter);
                                double internalmmark = 0;
                                double externalmark1 = 0;
                                double totalintext = 0;
                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]), out internalmmark);
                                double extfinal = 0;
                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]), out extfinal);
                                extfinal = Math.Round(extfinal, 0);
                                externalmark1 = extfinal;
                                string checkedmark = string.Empty;
                                if (extfinal < 0)
                                {
                                    checkedmark = loadmarkat(Convert.ToString(extfinal));
                                }
                                else
                                {
                                    checkedmark = Convert.ToString(extfinal);
                                }
                                if (internalmmark >= 0)
                                {
                                    if (extfinal > 0)
                                    {
                                        totalintext = internalmmark + externalmark1;
                                    }
                                    else
                                    {
                                        totalintext = internalmmark;
                                    }
                                }
                                else
                                {
                                    if (extfinal > 0)
                                    {
                                        totalintext = externalmark1;
                                    }
                                    else
                                    {
                                        totalintext = 0;
                                    }
                                }
                                double totfinal = 0;
                                totfinal = Math.Round(totalintext, 0, MidpointRounding.AwayFromZero);
                                double checkmarkmm = 0;
                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim(), out checkmarkmm);
                                string gradesql = "    select * from Grade_Master where College_Code='" + Convert.ToString(collegeCode).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";
                                gradeds.Clear();
                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                {
                                    gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(collegeCode).Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";//added by sridhar 
                                    gradeds.Clear();
                                    gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                }
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                {
                                    for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                    {
                                        if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                        {
                                            grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
                                            gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
                                        }
                                    }
                                }
                                double gradeibtpoint = 0;
                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim(), out gradeibtpoint);
                                gradeibtpoint = gradeibtpoint / 10;
                                gradeibtpoint = Math.Round(gradeibtpoint, 1);
                                gradepoints = Convert.ToString(gradeibtpoint);
                                gradepoints = Convert.ToString(Math.Round(Convert.ToDouble(gradeibtpoint), 2));
                                gradepoints = String.Format("{0:0.00}", gradepoints);
                                string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim().ToLower();
                                if (result == "fail")
                                {
                                    result = "RA";
                                    grade = "U";
                                }
                                else if (result == "pass")
                                {
                                    result = "P";
                                }
                                else
                                {
                                    result = "AB";
                                    grade = "U";
                                }
                                totfinal = totfinal * Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
                                //fullmark.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //fullmark.Cell(i, 5).SetContent(grade);
                                //fullmark.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //fullmark.Cell(i, 6).SetContent(gradepoints);
                                //totfinal = Math.Round(totfinal, 0);
                                //fullmark.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                DataView dv = new DataView();
                                printds.Tables[2].DefaultView.RowFilter = "exam_code='" + Convert.ToString(printds_rows.Tables[0].Rows[i]["exam_code"]).Trim() + "'";
                                dv = printds.Tables[2].DefaultView;
                                if (dv.Count > 0)
                                {
                                    string exam_y = Convert.ToString(dv[0]["Exam_year"]).Trim();
                                    string exam_m = Convert.ToString(dv[0]["Exam_Month"]).Trim();
                                    //Rajkumar 8/1/2018
                                    int examMonthValue = 0;
                                    int.TryParse(exam_m, out examMonthValue);
                                    DateTime dt = new DateTime(2000, 1, 1);
                                    string monthName = Convert.ToString(dt.AddMonths(examMonthValue - 1).ToString("MMMM"));

                                    //strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m));
                                    //strMonthName = Convert.ToString(strMonthName[0]).Trim() + Convert.ToString(strMonthName[1]).Trim() + Convert.ToString(strMonthName[2]).Trim();
                                    //strMonthName = strMonthName.ToUpper() + " " + exam_y + "   ";
                                    strMonthName = monthName.ToUpper() + " " + exam_y + "   ";
                                    fullmark.Cell(i, 4).SetContent(strMonthName);
                                }
                            }
                            fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetFont(f5_pal10bold);
                            fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContent(">>>>> End of Statement <<<<<");
                            fullmark.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            foreach (PdfCell pr in fullmark.CellRange(printds_rows.Tables[0].Rows.Count, 0, printds_rows.Tables[0].Rows.Count, 0).Cells)
                            {
                                pr.ColSpan = 8;
                            }
                            newpdftabpage2 = fullmark.CreateTablePage(new PdfArea(mydoc, 33, 183, 533, 709));
                            mypdfpage.Add(newpdftabpage2);
                            PdfTable tblcgpaclass = mydoc.NewTable(f2_cos9bold, 1, 2, 3);
                            tblcgpaclass.VisibleHeaders = false;
                            tblcgpaclass.SetBorders(Color.Black, 1, BorderType.None);
                            tblcgpaclass.Columns[0].SetWidth(75);
                            tblcgpaclass.Columns[1].SetWidth(130);
                            double partsums = 0.00;
                            int partrowcount = 0;
                            double Credit_Points = 0.0;
                            double grade_points = 0.0;
                            double creditstotal = 0;
                            double overalltotgrade = 0;
                            // noofsubfailed = 1;
                            if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                            {
                                string sumpart = string.Empty;
                                DataView dv_demand_data = new DataView();
                                DataView dv_demand_datadummy = new DataView();
                                printds_rows.Tables[0].DefaultView.RowFilter = "result='pass'";
                                dv_demand_data = printds_rows.Tables[0].DefaultView;
                                if (dv_demand_data.Count > 0)
                                {
                                    for (int sum = 0; sum < dv_demand_data.Count; sum++)
                                    {
                                        double.TryParse(Convert.ToString(dv_demand_data[sum]["total"]), out grade_points);
                                        double.TryParse(Convert.ToString(dv_demand_data[sum]["credit_points"]), out Credit_Points);
                                        grade_points = grade_points / 10;
                                        creditstotal = creditstotal + Credit_Points;
                                        partsums = partsums + (grade_points * Credit_Points);
                                    }
                                    if (creditstotal == 0)
                                    {
                                        sumpart = "0";
                                    }
                                    else if (creditstotal > 0)
                                    {
                                        partsums = (partsums / creditstotal);
                                        partsums = Math.Round(partsums, 0, MidpointRounding.AwayFromZero);
                                        sumpart = Convert.ToString(partsums);
                                    }
                                    else
                                    {
                                        sumpart = "0";
                                    }
                                }
                                else
                                {
                                    sumpart = "--";
                                }
                                if (sumpart != "--")
                                {
                                    double sumpartgrade = 0;
                                    if (double.TryParse(sumpart, out sumpartgrade))
                                    {
                                        overalltotgrade = overalltotgrade + sumpartgrade;
                                    }
                                    else
                                    {
                                        sumpartgrade = 0;
                                    }
                                    string batchsetting = "1";
                                    string batchYearSettings = string.Empty;
                                    if (noofsubfailed != 0 && overalltotgrade >= 6)
                                    {
                                        string cclass = "FIRST";
                                        tblcgpaclass.Cell(0, 0).SetContent(sumpart);
                                        tblcgpaclass.Cell(0, 1).SetContent(cclass);
                                    }
                                    else
                                    {
                                        string gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and batch_year='" + batch_year + "'";
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                        {
                                            gradesqlclass = "select * from coe_classification where edu_level='" + edu_level + "'  and  '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and batch_year='" + batchYearSettings + "'";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                        }
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                        {
                                            tblcgpaclass.Cell(0, 0).SetContent(sumpart);
                                            tblcgpaclass.Cell(0, 1).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                        }
                                    }
                                }
                                else
                                {
                                    tblcgpaclass.Cell(0, 0).SetContent(sumpart);
                                }
                            }
                            else
                            {
                                tblcgpaclass.Cell(0, 0).SetContent("--");
                            }
                            newpdftabpage2 = tblcgpaclass.CreateTablePage(new PdfArea(mydoc, 146, 921, 213, 50));
                            mypdfpage.Add(newpdftabpage2);
                        }
                        string medium = d2.GetFunction("select TextVal from TextValTable where TextCriteria='medi' and college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and TextCode in(select isnull(medium_ins,0) from applyn  where app_no='" + app_no + "')");
                        if (medium != "" && medium != null && medium != "0")
                        {
                            PdfTextArea pdfdoi = new PdfTextArea(f2_cos9bold, System.Drawing.Color.Black, new PdfArea(mydoc, 304, 858, 190, 50), System.Drawing.ContentAlignment.TopLeft, medium);
                            mypdfpage.Add(pdfdoi);
                        }
                        mypdfpage.SaveToDocument();
                    }
                    else
                    {
                        if (lblerror1 == "")
                        {
                            lblerror1 = rollnosub;
                        }
                        else
                        {
                            lblerror1 = lblerror1 + "," + rollnosub;
                        }
                    }
                }
            }
            //} 
            if (lblerror1 != "")
            {
                lblerror.Text = lblerror1;
                lblerror.Visible = true;
            }
            else
            {
                lblerror.Text = string.Empty;
                lblerror.Visible = false;
            }
            if (printpage == true)
            {
                string appPath = HttpContext.Current.Server.MapPath("~");
                if (appPath != "")
                {
                    string szPath = appPath + "/Report/";
                    string szFile = "consolidatedmarksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                    mydoc.SaveToFile(szPath + szFile);
                    Response.ClearHeaders();
                    Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                    Response.ContentType = "application/pdf";
                    Response.WriteFile(szPath + szFile);
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void getGradeDetails(DataTable dtGradeDetails, string marksOutOf100, string gradeSet, string collegeCode, string batchYear, string degreeCode, string semester, ref string gradePoint, ref string grade, ref string classify, ref double gp)
    {
        try
        {
            DataTable dtGrade = new DataTable();
            DataTable dtGradeCheck = new DataTable();
            DataView dvGrade = new DataView();
            gp = 0;
            grade = string.Empty;
            gradePoint = string.Empty;
            classify = string.Empty;
            if (dtGradeDetails.Rows.Count > 0)
            {
                dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batchYear + "' and degree_code='" + degreeCode + "' and semester='" + semester + "' and college_code='" + collegeCode + "'";
                dtGrade = dtGradeDetails.DefaultView.ToTable();
                if (dtGrade.Rows.Count == 0)
                {
                    dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batchYear + "' and degree_code='" + degreeCode + "' and semester='0' and college_code='" + collegeCode + "'";
                    dtGrade = dtGradeDetails.DefaultView.ToTable();
                }
                if (dtGrade.Rows.Count == 0)
                {
                    dtGradeDetails.DefaultView.RowFilter = "batch_year='" + gradeSet + "' and degree_code='" + gradeSet + "' and semester='" + semester + "' and college_code='" + collegeCode + "'";
                    dtGrade = dtGradeDetails.DefaultView.ToTable();
                }
                if (dtGrade.Rows.Count == 0)
                {
                    dtGradeDetails.DefaultView.RowFilter = "batch_year='" + gradeSet + "' and degree_code='" + gradeSet + "' and semester='0' and college_code='" + collegeCode + "'";
                    dtGrade = dtGradeDetails.DefaultView.ToTable();
                }
            }
            if (dtGrade.Rows.Count > 0)
            {
                Double setmark = Convert.ToDouble(marksOutOf100);
                setmark = Math.Round(setmark, 0, MidpointRounding.AwayFromZero);
                string gradeMark = Convert.ToString(setmark);
                //dtGrade.DefaultView.RowFilter = "frange<='" + marksOutOf100 + "' and trange>='" + marksOutOf100 + "'";
                dtGrade.DefaultView.RowFilter = "frange<='" + gradeMark + "' and trange>='" + gradeMark + "'";
                dtGradeCheck = dtGrade.DefaultView.ToTable();

            }
            if (dtGradeCheck.Rows.Count > 0)
            {
                grade = Convert.ToString(dtGradeCheck.Rows[0]["Mark_Grade"]).Trim();
                classify = Convert.ToString(dtGradeCheck.Rows[0]["classify"]).Trim();
                gradePoint = Convert.ToString(dtGradeCheck.Rows[0]["Credit_Points"]).Trim();
                double.TryParse(gradePoint, out gp);
                gp = Math.Round(gp, 1, MidpointRounding.AwayFromZero);
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void getGPAWAMGrade(DataTable dtGradeDetails, DataTable dtMarkDetails, DataTable dtStudentsPassFailHistory, DataTable dtClassification, string gradeSet, string collegeCode, string batchYear, string degreeCode, string semester, string eduLevel, string markOrGradeFlag, ref Dictionary<byte, string> dicPartWiseSecMarks, ref  Dictionary<byte, string> dicPartWiseMaxTotal, ref Dictionary<byte, string> dicPartWiseEarnedCredit, ref Dictionary<byte, string> dicPartWiseSumGP, ref Dictionary<byte, string> dicPartWiseWeight, ref  Dictionary<byte, string> dicPartWiseGPA, ref  Dictionary<byte, string> dicPartWiseGrade, ref  Dictionary<byte, string> dicPartWiseWAM, ref Dictionary<byte, string> dicPartWiseClassification, bool isCgpa = false, bool isRedo = false)
    {
        try
        {
            int roundOff = 0;
            int.TryParse(txtRoundOff.Text, out roundOff);
            if (roundOff <= 0)
                roundOff = 1;

            dicPartWiseSecMarks = new Dictionary<byte, string>();
            dicPartWiseMaxTotal = new Dictionary<byte, string>();
            dicPartWiseEarnedCredit = new Dictionary<byte, string>();
            dicPartWiseSumGP = new Dictionary<byte, string>();
            dicPartWiseWeight = new Dictionary<byte, string>();
            dicPartWiseGPA = new Dictionary<byte, string>();
            dicPartWiseGrade = new Dictionary<byte, string>();
            dicPartWiseWAM = new Dictionary<byte, string>();
            dicPartWiseClassification = new Dictionary<byte, string>();
            for (byte part = 1; part <= 5; part++)
            {
                dicPartWiseSecMarks.Add(part, "--");
                dicPartWiseMaxTotal.Add(part, "--");
                dicPartWiseEarnedCredit.Add(part, "--");
                dicPartWiseSumGP.Add(part, "--");
                dicPartWiseWeight.Add(part, "--");
                dicPartWiseGPA.Add(part, "--");
                dicPartWiseGrade.Add(part, "--");
                dicPartWiseWAM.Add(part, "--");
                dicPartWiseClassification.Add(part, "--");

                DataTable dtPartWiseMarks = new DataTable();
                DataTable dtPartWiseFailed = new DataTable();
                DataTable dtHasPartSubject = new DataTable();

                DataTable dtPartPassedSubjects = new DataTable();
                List<string> lstSubjectCode = new List<string>();
                string qrysubjectList = string.Empty;
                if (isCgpa)
                {
                    dtMarkDetails.DefaultView.RowFilter = "part_type='" + part + "' and result='pass' and MarkOrExempted='0'";
                    dtPartPassedSubjects = dtMarkDetails.DefaultView.ToTable();
                    lstSubjectCode = dtPartPassedSubjects.AsEnumerable().Select(r => r.Field<string>("subject_code")).ToList();
                    if (lstSubjectCode.Count > 0)
                    {
                        qrysubjectList = " and subject_code not in('" + string.Join("','", lstSubjectCode.ToArray()) + "')";
                    }
                }
                if (chk_consoli.Checked == true)
                {
                    dtMarkDetails.DefaultView.RowFilter = "result='pass' and MarkOrExempted='0'";//Rajkumar form consolidate
                }
                else
                {
                    dtMarkDetails.DefaultView.RowFilter = "part_type='" + part + "' and result='pass' and MarkOrExempted='0'";
                }


                if (chk_consoli.Checked == true)//Rajkumar on 17-7-2018
                {
                    if (!isMPhil)
                    {
                        dtMarkDetails.DefaultView.RowFilter = "part_type='" + part + "' and result='pass' and MarkOrExempted='0'";
                        dtPartWiseMarks = dtMarkDetails.DefaultView.ToTable();
                    }
                    else
                    {
                        dtMarkDetails.DefaultView.RowFilter = "result='pass' and MarkOrExempted='0'";
                        dtPartWiseMarks = dtMarkDetails.DefaultView.ToTable();
                    }
                }
                else
                {
                    dtMarkDetails.DefaultView.RowFilter = "part_type='" + part + "' and result='pass' and MarkOrExempted='0'";
                    dtPartWiseMarks = dtMarkDetails.DefaultView.ToTable();
                }


                //Rajkumar 8/1/2018
                dtMarkDetails.DefaultView.RowFilter = "part_type='" + part + "' and result<>'pass' and MarkOrExempted='0' " + qrysubjectList;
                dtPartWiseFailed = dtMarkDetails.DefaultView.ToTable();

                dtMarkDetails.DefaultView.RowFilter = "part_type='" + part + "' and MarkOrExempted='0'";
                dtHasPartSubject = dtMarkDetails.DefaultView.ToTable();

                bool isDefault = false;
                string partSum = string.Empty;
                string partWAM = string.Empty;
                string partSumEarnedCredit = string.Empty;

                double earnedCredit = 0;
                double weightedMarks = 0;
                double gp = 0;

                double totalWeightedMarks = 0;
                double totalGP = 0;
                double totalEarnedCredit = 0;
                double totalSecMarks = 0;
                double totalMaxMarks = 0;

                string displayTotalEarnedCredit = string.Empty;
                string displayTotalSecMarks = string.Empty;
                string displayTotalMaxMarks = string.Empty;
                string displayPartWiseSumGP = string.Empty;
                string displayPartWiseWeight = string.Empty;
                string displayPartWiseGPA = string.Empty;
                string displayPartWiseGrade = string.Empty;
                string displayPartWiseWAM = string.Empty;
                string displayPartWiseClassification = string.Empty;

                if ((dtPartWiseFailed.Rows.Count == 0) || (dtPartWiseFailed.Rows.Count == 0 && isCgpa))
                {
                    if (dtPartWiseMarks.Rows.Count > 0 && !isRedo)
                    {
                        isDefault = false;
                        object sum = dtPartWiseMarks.Compute("Sum(credit_points)", "result='pass'");
                        double.TryParse(Convert.ToString(sum).Trim(), out totalEarnedCredit);

                        sum = dtPartWiseMarks.Compute("Sum(maxtotal)", "result='pass'");
                        double.TryParse(Convert.ToString(sum).Trim(), out totalMaxMarks);
                        if (chk_consoli.Checked == true)
                        {
                            sum = dtPartWiseMarks.Compute("Sum(total)", "result='pass'");
                        }
                        else
                        {
                            sum = dtPartWiseMarks.Compute("Sum(OutOf100)", "result='pass'");
                        }
                        double.TryParse(Convert.ToString(sum).Trim(), out totalSecMarks);

                        //foreach (DataRow drPart in dtPartWiseMarks.Rows)
                        for (int row = 0; row < dtPartWiseMarks.Rows.Count; row++)
                        {
                            earnedCredit = 0;
                            weightedMarks = 0;
                            gp = 0;

                            //string internalMark = Convert.ToString(drPart["internal_mark"]).Trim();
                            //string minInternalMark = Convert.ToString(drPart["min_int_marks"]).Trim();
                            //string maxInternalMark = Convert.ToString(drPart["max_int_marks"]).Trim();

                            //string externalMark = Convert.ToString(drPart["external_mark"]).Trim();
                            //string minExternalMark = Convert.ToString(drPart["min_ext_marks"]).Trim();
                            //string maxExternalMark = Convert.ToString(drPart["max_ext_marks"]).Trim();

                            //string totalMark = Convert.ToString(drPart["total"]).Trim();
                            //string minTotalMark = Convert.ToString(drPart["mintotal"]).Trim();
                            //string maxTotalMark = Convert.ToString(drPart["maxtotal"]).Trim();

                            string internalMark = Convert.ToString(dtPartWiseMarks.Rows[row]["internal_mark"]).Trim();
                            string minInternalMark = Convert.ToString(dtPartWiseMarks.Rows[row]["min_int_marks"]).Trim();
                            string maxInternalMark = Convert.ToString(dtPartWiseMarks.Rows[row]["max_int_marks"]).Trim();

                            string externalMark = Convert.ToString(dtPartWiseMarks.Rows[row]["external_mark"]).Trim();
                            string minExternalMark = Convert.ToString(dtPartWiseMarks.Rows[row]["min_ext_marks"]).Trim();
                            string maxExternalMark = Convert.ToString(dtPartWiseMarks.Rows[row]["max_ext_marks"]).Trim();

                            string totalMark = Convert.ToString(dtPartWiseMarks.Rows[row]["total"]).Trim();
                            string minTotalMark = Convert.ToString(dtPartWiseMarks.Rows[row]["mintotal"]).Trim();
                            string maxTotalMark = Convert.ToString(dtPartWiseMarks.Rows[row]["maxtotal"]).Trim();

                            string college = Convert.ToString(collegeCode).Trim();
                            string batch = Convert.ToString(dtPartWiseMarks.Rows[row]["Batch_Year"]).Trim();
                            string degree = Convert.ToString(dtPartWiseMarks.Rows[row]["degree_code"]).Trim();
                            string sem = Convert.ToString(dtPartWiseMarks.Rows[row]["semester"]).Trim();

                            double internalMarks = 0;
                            double minInternalMarks = 0;
                            double maxInternalMarks = 0;
                            double.TryParse(internalMark.Trim(), out internalMarks);
                            double.TryParse(minInternalMark.Trim(), out minInternalMarks);
                            double.TryParse(maxInternalMark.Trim(), out maxInternalMarks);

                            double externalMarks = 0;
                            double minExternalMarks = 0;
                            double maxExternalMarks = 0;
                            double.TryParse(externalMark.Trim(), out externalMarks);
                            double.TryParse(minExternalMark.Trim(), out minExternalMarks);
                            double.TryParse(maxExternalMark.Trim(), out maxExternalMarks);

                            double totalMarks = 0;
                            double minTotalMarks = 0;
                            double maxTotalMarks = 0;
                            double.TryParse(totalMark.Trim(), out totalMarks);
                            double.TryParse(minInternalMark.Trim(), out minTotalMarks);
                            double.TryParse(maxInternalMark.Trim(), out maxTotalMarks);

                            bool isOnlyICA = false;
                            bool isOnlyESA = false;
                            bool isConsider = true;
                            if (string.IsNullOrEmpty(maxExternalMark) || maxExternalMark.Trim() == "0")
                            {
                                isOnlyICA = true;
                            }

                            if (string.IsNullOrEmpty(maxInternalMark) || maxInternalMark.Trim() == "0")
                            {
                                isOnlyESA = true;
                            }

                            //if (isOnlyESA && isOnlyICA && (string.IsNullOrEmpty(maxTotalMark) || maxTotalMark.Trim() == "0"))
                            //{
                            //    isConsider = false;
                            //}

                            string securedMarksOutOf100 = string.Empty;
                            securedMarksOutOf100 = Convert.ToString(dtPartWiseMarks.Rows[row]["OutOf100"]).Trim();
                            totalMark = Convert.ToString(dtPartWiseMarks.Rows[row]["total"]).Trim();
                            double totalMarksOrginal = 0;
                            double.TryParse(totalMark.Trim(), out totalMarksOrginal);
                            double secureMarks = 0;
                            double.TryParse(securedMarksOutOf100.Trim(), out secureMarks);
                            securedMarksOutOf100 = Convert.ToString(secureMarks).Trim();

                            string creditPoint = string.Empty;
                            creditPoint = Convert.ToString(dtPartWiseMarks.Rows[row]["credit_points"]).Trim();
                            double.TryParse(creditPoint.Trim(), out earnedCredit);

                            string subjectGrade = string.Empty;
                            string gradePoint = string.Empty;
                            string classify = string.Empty;

                            getGradeDetails(dtGradeDetails, securedMarksOutOf100, gradeSet, college, batch, degree, sem, ref  gradePoint, ref  subjectGrade, ref  classify, ref  gp);
                            //DataTable dtGrade = new DataTable();
                            //DataTable dtGradeCheck = new DataTable();
                            //DataView dvGrade = new DataView();
                            //gp = 0;
                            //subjectGrade = string.Empty;
                            //gradePoint = string.Empty;
                            //classify = string.Empty;
                            //if (dtGradeDetails.Rows.Count > 0)
                            //{
                            //    dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batch + "' and degree_code='" + degree + "' and semester='" + sem + "' and college_code='" + college + "'";
                            //    dtGrade = dtGradeDetails.DefaultView.ToTable();
                            //    if (dtGrade.Rows.Count == 0)
                            //    {
                            //        dtGradeDetails.DefaultView.RowFilter = "batch_year='" + batch + "' and degree_code='" + degree + "' and semester='0' and college_code='" + collegeCode + "'";
                            //        dtGrade = dtGradeDetails.DefaultView.ToTable();
                            //    }
                            //    if (dtGrade.Rows.Count == 0)
                            //    {
                            //        dtGradeDetails.DefaultView.RowFilter = "batch_year='" + gradeSet + "' and degree_code='" + gradeSet + "' and semester='" + semester + "' and college_code='" + college + "'";
                            //        dtGrade = dtGradeDetails.DefaultView.ToTable();
                            //    }
                            //    if (dtGrade.Rows.Count == 0)
                            //    {
                            //        dtGradeDetails.DefaultView.RowFilter = "batch_year='" + gradeSet + "' and degree_code='" + gradeSet + "' and semester='0' and college_code='" + college + "'";
                            //        dtGrade = dtGradeDetails.DefaultView.ToTable();
                            //    }
                            //}
                            //if (dtGrade.Rows.Count > 0)
                            //{
                            //    dtGrade.DefaultView.RowFilter = "frange<='" + securedMarksOutOf100 + "' and trange>='" + securedMarksOutOf100 + "'";
                            //    dtGradeCheck = dtGrade.DefaultView.ToTable();
                            //}
                            //if (dtGradeCheck.Rows.Count > 0)
                            //{
                            //    subjectGrade = Convert.ToString(dtGradeCheck.Rows[0]["Mark_Grade"]).Trim();
                            //    classify = Convert.ToString(dtGradeCheck.Rows[0]["classify"]).Trim();
                            //    gradePoint = Convert.ToString(dtGradeCheck.Rows[0]["Credit_Points"]).Trim();
                            //    double.TryParse(gradePoint, out gp);
                            //    gp = Math.Round(gp, 1, MidpointRounding.AwayFromZero);
                            //}
                            weightedMarks = gp * earnedCredit;
                            weightedMarks = Math.Round(weightedMarks, 1, MidpointRounding.AwayFromZero);
                            totalGP += weightedMarks;
                            double wpm = 0;
                            wpm = earnedCredit * totalMarksOrginal;
                            wpm = Math.Round(wpm, 1, MidpointRounding.AwayFromZero);
                            totalWeightedMarks += wpm;
                        }

                        totalGP = Math.Round(totalGP, 1, MidpointRounding.AwayFromZero);
                        displayPartWiseSumGP = string.Format("{0:0.0}", totalGP);
                        dicPartWiseSumGP[part] = displayPartWiseSumGP;

                        totalWeightedMarks = Math.Round(totalWeightedMarks, 1, MidpointRounding.AwayFromZero);
                        displayPartWiseWeight = string.Format("{0:0.0}", totalWeightedMarks);
                        dicPartWiseWeight[part] = displayPartWiseWeight;

                        double gpa = 0;
                        float gpaNew = 0;
                        if (totalGP > 0 && totalEarnedCredit > 0)
                            gpa = (float)((float)totalGP / (float)totalEarnedCredit);//Double

                        //gpa = Math.Round(gpa, 2, MidpointRounding.AwayFromZero);
                        gpa = Math.Round(gpa, roundOff, MidpointRounding.AwayFromZero);
                        displayPartWiseGPA = string.Format("{0:0.0}", gpa);
                        dicPartWiseGPA[part] = displayPartWiseGPA;

                        double WAM = 0;
                        if (totalWeightedMarks > 0 && totalEarnedCredit > 0)
                            WAM = (float)((float)totalWeightedMarks / (float)totalEarnedCredit);
                        WAM = Math.Round(WAM, 1, MidpointRounding.AwayFromZero);
                        displayPartWiseWAM = string.Format("{0:0.0}", WAM);
                        dicPartWiseWAM[part] = displayPartWiseWAM;

                        getClassification(dtStudentsPassFailHistory, dtClassification, gpa, collegeCode, batchYear, eduLevel, markOrGradeFlag, ref  displayPartWiseClassification, ref  displayPartWiseGrade);

                        dicPartWiseClassification[part] = displayPartWiseClassification;
                        dicPartWiseGrade[part] = displayPartWiseGrade;

                        totalEarnedCredit = Math.Round(totalEarnedCredit, 0, MidpointRounding.AwayFromZero);
                        displayTotalEarnedCredit = string.Format("{0:0}", totalEarnedCredit);
                        dicPartWiseEarnedCredit[part] = displayTotalEarnedCredit;

                        totalSecMarks = Math.Round(totalSecMarks, 0, MidpointRounding.AwayFromZero);
                        displayTotalSecMarks = string.Format("{0:0}", totalSecMarks);
                        dicPartWiseSecMarks[part] = displayTotalSecMarks;

                        totalMaxMarks = Math.Round(totalMaxMarks, 0, MidpointRounding.AwayFromZero);
                        displayTotalMaxMarks = string.Format("{0:0}", totalMaxMarks);
                        dicPartWiseMaxTotal[part] = displayTotalMaxMarks;
                    }
                    else
                    {
                        isDefault = true;
                    }
                }
                else
                {
                    isDefault = true;
                }
                if (isDefault)
                {
                    if (dtHasPartSubject.Rows.Count > 0)
                    {
                        dicPartWiseSecMarks[part] = "0";
                        dicPartWiseMaxTotal[part] = "0";
                        dicPartWiseEarnedCredit[part] = "0";
                        dicPartWiseSumGP[part] = "0.0";
                        dicPartWiseWeight[part] = "0.0";
                        dicPartWiseGPA[part] = "0.0";
                        dicPartWiseGrade[part] = "RA";
                        dicPartWiseWAM[part] = "0.0";
                        dicPartWiseClassification[part] = string.Empty;
                    }
                    else
                    {
                        dicPartWiseSecMarks[part] = "--";
                        dicPartWiseMaxTotal[part] = "--";
                        dicPartWiseEarnedCredit[part] = "--";
                        dicPartWiseSumGP[part] = "--";
                        dicPartWiseWeight[part] = "--";
                        dicPartWiseGPA[part] = "--";
                        dicPartWiseGrade[part] = "--";
                        dicPartWiseWAM[part] = "--";
                        dicPartWiseClassification[part] = "--";
                    }

                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void getClassification(DataTable dtStudentsPassFailHistory, DataTable dtClassification, double gpa, string collegeCode, string batchYear, string eduLevel, string markOrGradeFlag, ref string classification, ref string grade)
    {
        try
        {
            int roundOff = 0;
            int.TryParse(txtRoundOff.Text, out roundOff);
            if (roundOff <= 0)
                roundOff = 1;

            int failedSubjects = 0;
            int passedSubjects = 0;
            int availableSubjects = 0;
            int arrearSubjects = 0;
            double gpaNew = Math.Round(gpa, 1, MidpointRounding.AwayFromZero);
            DataTable dtClassify = new DataTable();
            DataView dvClassify = new DataView();
            if (dtStudentsPassFailHistory.Rows.Count > 0)
            {
                string TotalSubjectCount = Convert.ToString(dtStudentsPassFailHistory.Rows[0]["TotalSubjectCount"]).Trim();
                string PassedCount = Convert.ToString(dtStudentsPassFailHistory.Rows[0]["PassedCount"]).Trim();
                string FailedCount = Convert.ToString(dtStudentsPassFailHistory.Rows[0]["FailedCount"]).Trim();
                string CurrentArrearCount = Convert.ToString(dtStudentsPassFailHistory.Rows[0]["CurrentArrearCount"]).Trim();

                int.TryParse(TotalSubjectCount.Trim(), out availableSubjects);
                int.TryParse(PassedCount.Trim(), out passedSubjects);
                int.TryParse(FailedCount.Trim(), out failedSubjects);
                int.TryParse(CurrentArrearCount.Trim(), out arrearSubjects);
            }
            if (dtClassification.Rows.Count > 0)
            {
                dtClassification.DefaultView.RowFilter = "edu_level='" + eduLevel + "' and collegecode='" + collegeCode + "' and frompoint<='" + gpaNew + "' and topoint>='" + gpaNew + "' and  markgradeflag='" + markOrGradeFlag + "'  and batch_year='" + batchYear + "'";
                dtClassify = dtClassification.DefaultView.ToTable();
            }
            if (dtClassify.Rows.Count == 0)
            {
                dtClassification.DefaultView.RowFilter = "edu_level='" + eduLevel + "' and collegecode='" + collegeCode + "' and frompoint<='" + gpaNew + "' and topoint>='" + gpaNew + "' and  markgradeflag='" + markOrGradeFlag + "'";
                dtClassify = dtClassification.DefaultView.ToTable();
            }
            if (dtClassify.Rows.Count == 0)
            {
                dtClassification.DefaultView.RowFilter = "edu_level='" + eduLevel + "' and collegecode='" + collegeCode + "' and frompoint<='" + gpaNew + "' and topoint>='" + gpaNew + "' and  markgradeflag=''  and batch_year='" + batchYear + "'";
                dtClassify = dtClassification.DefaultView.ToTable();
            }
            if (dtClassify.Rows.Count == 0)
            {
                dtClassification.DefaultView.RowFilter = "edu_level='" + eduLevel + "' and collegecode='" + collegeCode + "' and frompoint<='" + gpaNew + "' and topoint>='" + gpaNew + "' and  markgradeflag=''";
                dtClassify = dtClassification.DefaultView.ToTable();
            }
            if (dtClassify.Rows.Count > 0)
            {
                grade = Convert.ToString(dtClassify.Rows[0]["grade"]).Trim();
                classification = Convert.ToString(dtClassify.Rows[0]["classification"]).Trim();
                //magesh 6/2/18
                if (Convert.ToString(ddlreporttype.SelectedItem.Value).Trim() != "21")
                {
                    if (failedSubjects != 0 && gpaNew >= 6.0)
                    {
                        classification = "First Class";
                    }
                }
            }
            else
            {
                if (failedSubjects != 0 && gpaNew >= 6.0)
                {
                    grade = "A";
                    classification = "First Class";
                }
            }
        }
        catch
        {
        }
    }

    private void StatementOfMarkSheet()
    {
        try
        {
            FpSpread2.SaveChanges();
            string rollNos = string.Empty;
            string regNos = string.Empty;

            DataTable dtAllStudentsMark = new DataTable();
            DataTable dtStudentsMarkList = new DataTable();
            DataTable dtCollegeDetails = new DataTable();
            DataTable dtExamDetails = new DataTable();
            DataTable dtStudentList = new DataTable();
            DataTable dtGradeDetails = new DataTable();
            DataTable dtSpecialSubject = new DataTable();

            DataTable dtRedoStudents = new DataTable();

            Dictionary<string, List<string>> dicAppNoRedoSemester = new Dictionary<string, List<string>>();
            Dictionary<string, List<string>> dicRollNoRedoSemester = new Dictionary<string, List<string>>();

            int startingPosX = 0;
            int startingPosY = 0;

            bool isMPhil = false;
            Font fontHeadingTop = new Font("Times New Roman", 22, FontStyle.Bold);
            Font fontStatementHeading = new Font("Arial", 20, FontStyle.Bold);
            Font fontMarkStatement = new Font("Times New Roman", 15, FontStyle.Bold);
            Font fontStudentDetail = new Font("Times New Roman", 16, FontStyle.Bold);
            Font fontDate = new Font("Times New Roman", 14, FontStyle.Bold);
            Font fontNote = new Font("Times New Roman", 15, FontStyle.Regular);

            bool isNewRegulation = true;
            bool isNewRegulation1 = true;
            int tableLineHeight = (isNewRegulation) ? 160 : 0;
            PdfDocument markSheetDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(41.4, 58.73));
            PdfPage markSheetPage;
            PdfTextArea pdftxt;
            PdfImage pdfImgLogo;
            PdfTable pdftblStudentDetails;
            PdfTable pdftblMarksContent;
            PdfTable pdftblGPA;
            PdfTable pdftblCGPA;
            PdfTable pdftblFooter;
            PdfTable pdftblDOP;
            PdfTablePage pdftblPages;
            PdfLine pdfLine;
            List<string> lstExamCode = new List<string>();
            string collegeCode = string.Empty;
            string batchYear = string.Empty;
            string degreeCode = string.Empty;
            string semester = string.Empty;
            string examYear = string.Empty;
            string examMonth = string.Empty;
            string examCode = string.Empty;
            string redoStudent = string.Empty;

            bool arrearresult = false;

            if (ddlbatch.Items.Count == 0)
            {
                return;
            }
            else
            {
                batchYear = Convert.ToString(ddlbatch.SelectedItem.Text).Trim();
            }

            if (ddlbranch.Items.Count == 0)
            {
                return;
            }
            else
            {
                degreeCode = Convert.ToString(ddlbranch.SelectedValue).Trim();
            }
            if (ddlMonth.Items.Count == 0)
            {
                return;
            }
            else
            {
                if (!string.IsNullOrEmpty(Convert.ToString(ddlMonth.SelectedValue).Trim()) && Convert.ToString(ddlMonth.SelectedValue).Trim() != "0")
                {
                    examMonth = Convert.ToString(ddlMonth.SelectedValue).Trim();
                }
                else
                {
                    return;
                }
            }
            if (ddlYear.Items.Count == 0)
            {
                return;
            }
            else
            {
                if (!string.IsNullOrEmpty(Convert.ToString(ddlYear.SelectedValue).Trim()) && Convert.ToString(ddlYear.SelectedValue).Trim() != "0")
                {
                    examYear = Convert.ToString(ddlYear.SelectedValue).Trim();
                }
                else
                {
                    return;
                }
            }
            int studRow = 0;

            for (studRow = 1; studRow < FpSpread2.Sheets[0].RowCount; studRow++)
            {
                int selected = 0;
                int.TryParse(Convert.ToString(FpSpread2.Sheets[0].Cells[studRow, 4].Value).Trim(), out selected);
                if (selected == 1)
                {
                    string studentRollNo = Convert.ToString(FpSpread2.Sheets[0].Cells[studRow, 1].Text).Trim();
                    string studentRegNo = Convert.ToString(FpSpread2.Sheets[0].Cells[studRow, 2].Text).Trim();
                    if (string.IsNullOrEmpty(rollNos))
                    {
                        rollNos = "'" + studentRollNo + "'";
                    }
                    else
                    {
                        rollNos += ",'" + studentRollNo + "'";
                    }
                    if (string.IsNullOrEmpty(regNos))
                    {
                        regNos = "'" + studentRegNo + "'";
                    }
                    else
                    {
                        regNos += ",'" + studentRegNo + "'";
                    }
                }
            }
            bool isSheetsSaved = false;
            string qry = string.Empty;
            string gradeSet = string.Empty;
            if (!string.IsNullOrEmpty(rollNos) && !string.IsNullOrEmpty(batchYear) && !string.IsNullOrEmpty(degreeCode) && !string.IsNullOrEmpty(examMonth) && !string.IsNullOrEmpty(examYear))
            {
                qry = "select r.Roll_No,r.Reg_No ,r.isRedo,r.App_No,r.Batch_Year,r.degree_code,r.college_code,r.Stud_Name,r.Current_Semester,c.Course_Name as CourseName,Dept_name as Department,CONVERT(VARCHAR, a.dob, 103) as dob,c.edu_level,ISNULL(r.isRedo,'0') as Redo from Registration r,applyn a,Degree dg,Department dt,Course c where c.Course_Id=dg.Course_Id and dt.Dept_Code=dg.Dept_Code and dg.Degree_Code=r.degree_code and a.app_no=r.App_No and r.college_code=c.college_code and c.college_code=dt.college_code and dt.college_code=dg.college_code and dg.college_code=r.college_code and r.Roll_No in(" + rollNos + ")";
                dtStudentList = dirAcc.selectDataTable(qry);
                qry = "select college_code,collname,coe,category,university,address1,address2,address3,district,state,pincode,principal,coe_signature,principal_sign,phoneno,logo1,logo2,affliatedby,website,email from collinfo";
                dtCollegeDetails = dirAcc.selectDataTable(qry);
                qry = "Select m.roll_no,sm.Batch_Year,sm.degree_code,ed.Exam_year as Exam_year,ed.Exam_Month as Exam_Month,ed.Current_Semester as Current_Semester,sm.semester,s.subject_code,s.subject_no,s.subject_name,s.acronym as SubjectAcronymn,ss.subject_type,s.max_int_marks,s.min_int_marks,ISNULL(m.attempts,0) as atmpts,isnull(m.internal_mark,0) as internal_mark,s.max_ext_marks,s.min_ext_marks,isnull(m.external_mark,0) as external_mark,s.maxtotal,s.mintotal,(case when isnull(m.internal_mark,0) >=0 then isnull(m.internal_mark,0) else 0 end) + (case when isnull(m.external_mark,0) >=0  then isnull(m.external_mark,0) else 0 end) as total,case when ISNULL(s.maxtotal,'0')<> '0' then (case when isnull(m.total,0) >=0  then isnull(m.total,0) else 0 end * 100)/s.maxtotal else 0 end as OutOf100,case when ISNULL(s.maxtotal,'0')<> '0' then (case when isnull(m.total,0) >=0  then isnull(m.total,0) else 0 end * 10)/s.maxtotal else 0 end as OutOf10,s.credit_points,case m.result when 'Pass' Then 'PASS'  when 'P' Then 'PASS'when 'F' Then 'FAIL' when 'FAIL' Then 'FAIL' when 'AAA' then 'AAA' when 'WHD' then 'WWW' else 'FAIL' end as result,m.passorfail,s.Part_Type,ISNULL(ss.ElectivePap,'0') as Elective,ss.priority,ISNULL(ss.lab,'0') Lab,ISNULL(m.grade,'') as Grade,ISNULL(ss.projThe,'0') projThe,s.subjectpriority,CAST(case when (ISNULL(CONVERT(varchar(20),m.Act_ReTotalMark),'')='' and ISNULL(CONVERT(varchar(20),m.actual_internal_mark),'')='') then ISNULL(CONVERT(varchar(20),m.internal_mark),'') when m.internal_mark<>m.actual_internal_mark then ISNULL(CONVERT(varchar(20) ,m.actual_internal_mark),'') else ISNULL(CONVERT(varchar(20),m.internal_mark),'') end as float) as BeforeReTotINT,CAST(case when (ISNULL(CONVERT(varchar(20),m.Act_Reval_Mark),'')='' and ISNULL(CONVERT(varchar(20),m.actual_external_mark),'')='') then ISNULL(CONVERT(varchar(20),m.external_mark),'') when m.external_mark<>m.actual_external_mark then ISNULL(CONVERT(varchar(20) ,m.actual_external_mark),'') else ISNULL(CONVERT(varchar(20),m.external_mark),'') end as float) as BeforeRevalEXT,CAST(case when (ISNULL(CONVERT(varchar(20),m.actual_total),'')='') then ISNULL(CONVERT(varchar(20),m.total),'') when m.total<>m.actual_total then ISNULL(CONVERT(varchar(20) ,m.actual_total),'') else ISNULL(CONVERT(varchar(20),m.total),'') end as float) as BeforeTOT,case when Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.Act_ReTotalMark),'')='' and ISNULL(CONVERT(varchar(20),m.actual_internal_mark),'')='') then ISNULL(CONVERT(varchar(20),m.internal_mark),'0') when m.internal_mark<>m.actual_internal_mark then ISNULL(CONVERT(varchar(20) ,m.actual_internal_mark),'0') else ISNULL(CONVERT(varchar(20),m.internal_mark),'0') end)=-1 or Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.Act_Reval_Mark),'')='' and ISNULL(CONVERT(varchar(20),m.actual_external_mark),'')='') then ISNULL(CONVERT(varchar(20),m.external_mark),'0') when m.external_mark<>m.actual_external_mark then ISNULL(CONVERT(varchar(20) ,m.actual_external_mark),'0') else ISNULL(CONVERT(varchar(20),m.external_mark),'0') end)=-1 or Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.actual_total),'')='') then ISNULL(CONVERT(varchar(20),m.total),'0') when m.total<>m.actual_total then ISNULL(CONVERT(varchar(20) ,m.actual_total),'0') else ISNULL(CONVERT(varchar(20),m.total),'0') end)=-1 then 'AAA' when Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.Act_ReTotalMark),'')='' and ISNULL(CONVERT(varchar(20),m.actual_internal_mark),'')='') then ISNULL(CONVERT(varchar(20),m.internal_mark),'0') when m.internal_mark<>m.actual_internal_mark then ISNULL(CONVERT(varchar(20) ,m.actual_internal_mark),'0') else ISNULL(CONVERT(varchar(20),m.internal_mark),'0') end)=-4 or Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.Act_Reval_Mark),'')='' and ISNULL(CONVERT(varchar(20),m.actual_external_mark),'')='') then ISNULL(CONVERT(varchar(20),m.external_mark),'0') when m.external_mark<>m.actual_external_mark then ISNULL(CONVERT(varchar(20) ,m.actual_external_mark),'0') else ISNULL(CONVERT(varchar(20),m.external_mark),'0') end)=-4 or Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.actual_total),'')='') then ISNULL(CONVERT(varchar(20),m.total),'0') when m.total<>m.actual_total then ISNULL(CONVERT(varchar(20) ,m.actual_total),'0') else ISNULL(CONVERT(varchar(20),m.total),'0') end)=-4 or m.result in('WHD','mp','www','w','ww','withheld','with held') then 'WHD' when Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.Act_ReTotalMark),'')='' and ISNULL(CONVERT(varchar(20),m.actual_internal_mark),'')='') then ISNULL(CONVERT(varchar(20),m.internal_mark),'0') when m.internal_mark<>m.actual_internal_mark then ISNULL(CONVERT(varchar(20) ,m.actual_internal_mark),'0') else ISNULL(CONVERT(varchar(20),m.internal_mark),'0') end)>=s.min_int_marks and Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.Act_Reval_Mark),'')='' and ISNULL(CONVERT(varchar(20),m.actual_external_mark),'')='') then ISNULL(CONVERT(varchar(20),m.external_mark),'0') when m.external_mark<>m.actual_external_mark then ISNULL(CONVERT(varchar(20) ,m.actual_external_mark),'0') else ISNULL(CONVERT(varchar(20),m.external_mark),'0') end)>=s.min_ext_marks and Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.actual_total),'')='') then ISNULL(CONVERT(varchar(20),m.total),'0') when m.total<>m.actual_total then ISNULL(CONVERT(varchar(20) ,m.actual_total),'0') else ISNULL(CONVERT(varchar(20),m.total),'0') end)>=s.mintotal then 'Pass' else 'Fail' end  as BeforeResult,CAST(case when (ISNULL(CONVERT(varchar(20),m.Act_ReTotalMark),'')='' and ISNULL(CONVERT(varchar(20),m.actual_internal_mark),'')='') then m.internal_mark when m.internal_mark<>m.actual_internal_mark then ISNULL(CONVERT(varchar(20),m.internal_mark),'') else ISNULL(CONVERT(varchar(20),m.internal_mark),'') end as float) as AfterReTotINT,CAST(case when (ISNULL(CONVERT(varchar(20),m.Act_Reval_Mark),'')='' and ISNULL(CONVERT(varchar(20),m.actual_external_mark),'')='') then m.external_mark when m.external_mark<>m.actual_external_mark then ISNULL(CONVERT(varchar(20),m.external_mark),'') else ISNULL(CONVERT(varchar(20),m.external_mark),'') end as float) as AfterRevalEXT,CAST(case when (ISNULL(CONVERT(varchar(20),m.actual_total),'')='') then m.total when m.total<>m.actual_total then ISNULL(CONVERT(varchar(20),m.total),'') else ISNULL(CONVERT(varchar(20),m.total),'') end as float) as AfterTOT,case when Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.Act_ReTotalMark),'')='' and ISNULL(CONVERT(varchar(20),m.actual_internal_mark),'')='') then ISNULL(CONVERT(varchar(20),m.internal_mark),'0')  when m.internal_mark<>m.actual_internal_mark then ISNULL(CONVERT(varchar(20),m.internal_mark),'0') else ISNULL(CONVERT(varchar(20),m.internal_mark),'0') end)=-1 or Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.Act_Reval_Mark),'')='' and ISNULL(CONVERT(varchar(20),m.actual_external_mark),'')='') then ISNULL(CONVERT(varchar(20), m.external_mark),'0') when m.external_mark<>m.actual_external_mark then ISNULL(CONVERT(varchar(20),m.external_mark),'0') else ISNULL(CONVERT(varchar(20),m.external_mark),'0') end)=-1 or Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.actual_total),'')='') then ISNULL(CONVERT(varchar(20), m.total),'0') when m.total<>m.actual_total then ISNULL(CONVERT(varchar(20),m.total),'0') else ISNULL(CONVERT(varchar(20),m.total),'0') end)=-1 then 'AAA' when Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.Act_ReTotalMark),'')='' and ISNULL(CONVERT(varchar(20),m.actual_internal_mark),'')='') then  ISNULL(CONVERT(varchar(20),m.internal_mark),'0') when m.internal_mark<>m.actual_internal_mark then ISNULL(CONVERT(varchar(20),m.internal_mark),'0') else ISNULL(CONVERT(varchar(20),m.internal_mark),'0') end)=-4 or Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.Act_Reval_Mark),'')='' and ISNULL(CONVERT(varchar(20),m.actual_external_mark),'')='') then  ISNULL(CONVERT(varchar(20),m.external_mark),'0') when m.external_mark<>m.actual_external_mark then ISNULL(CONVERT(varchar(20),m.external_mark),'0') else ISNULL(CONVERT(varchar(20),m.external_mark),'0') end)=-4 or Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.actual_total),'')='') then  ISNULL(CONVERT(varchar(20),m.total),'0') when m.total<>m.actual_total then ISNULL(CONVERT(varchar(20),m.total),'0') else ISNULL(CONVERT(varchar(20),m.total),'0') end)=-4 or m.result in('WHD','mp','www','w','ww','withheld','with held') then 'WHD' when Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.Act_ReTotalMark),'')='' and ISNULL(CONVERT(varchar(20),m.actual_internal_mark),'')='') then ISNULL(CONVERT(varchar(20),m.internal_mark),'0') when m.internal_mark<>m.actual_internal_mark then ISNULL(CONVERT(varchar(20),m.internal_mark),'0') else ISNULL(CONVERT(varchar(20),m.internal_mark),'0') end)>=s.min_int_marks and Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.Act_Reval_Mark),'')='' and ISNULL(CONVERT(varchar(20),m.actual_external_mark),'')='') then ISNULL(CONVERT(varchar(20),m.external_mark),'0') when m.external_mark<>m.actual_external_mark then ISNULL(CONVERT(varchar(20),m.external_mark),'0') else ISNULL(CONVERT(varchar(20),m.external_mark),'0') end)>=s.min_ext_marks and Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.actual_total),'')='') then ISNULL(CONVERT(varchar(20), m.total),'0') when m.total<>m.actual_total then ISNULL(CONVERT(varchar(20),m.total),'0') else ISNULL(CONVERT(varchar(20),m.total),'0') end)>=s.mintotal then 'Pass'  when Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.Act_ReTotalMark),'')='' and ISNULL(CONVERT(varchar(20),m.actual_internal_mark),'')='') then  ISNULL(CONVERT(varchar(20), m.internal_mark),'0') when m.internal_mark<>m.actual_internal_mark then ISNULL(CONVERT(varchar(20),m.internal_mark),'0') else ISNULL(CONVERT(varchar(20),m.internal_mark),'0') end)<-1 or Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.Act_Reval_Mark),'')='' and ISNULL(CONVERT(varchar(20),m.actual_external_mark),'')='') then ISNULL(CONVERT(varchar(20), m.external_mark),'0') when m.external_mark<>m.actual_external_mark then ISNULL(CONVERT(varchar(20),m.external_mark),'0') else ISNULL(CONVERT(varchar(20),m.external_mark),'0') end)<-1 and Convert(decimal(10,2),case when (ISNULL(CONVERT(varchar(20),m.actual_total),'')='') then ISNULL(CONVERT(varchar(20),m.total),'0') when m.total<>m.actual_total then ISNULL(CONVERT(varchar(20),m.total),'0') else ISNULL(CONVERT(varchar(20),m.total),'0') end)<-1 then 'Fail' else 'Fail' end  as AfterRevalResult,'0' as MarkOrExempted,'' as Message,'' description,SUBSTRING(s.subject_code,LEN(s.subject_code)-2,2) as ExtraCreditSubject from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,Exam_Details ed where sm.syll_code=s.syll_code and m.subject_no = s.Subject_No and s.subtype_no= ss.subtype_no  and ed.exam_code=m.exam_code and ed.batch_year=sm.Batch_Year and ed.degree_code=sm.degree_code and roll_no in(" + rollNos + ") and external_mark is not null and total is not null and result is not null  order by sm.Batch_Year,sm.degree_code,m.roll_no,sm.semester desc,s.subjectpriority,subject_code asc";
                dtAllStudentsMark = new DataTable();
                dtAllStudentsMark = dirAcc.selectDataTable(qry);
                getAllRedoStudentsSemester(out dicAppNoRedoSemester, out dicRollNoRedoSemester);

                dtSpecialSubject.Clear();
                dtSpecialSubject = dirAcc.selectDataTable("select r.Roll_no,sm.Batch_year,sm.degree_code,CAST('" + examYear + "' as smallint) as Exam_year,CAST('" + examMonth + "' as smallint) as Exam_Month,cast(0 as smallint) as Current_Semester,sm.semester,s.subject_code,s.subject_name,s.acronym as SubjectAcronymn,ss.subject_type,s.max_int_marks,s.min_int_marks,CAST('0' as float) as internal_mark,s.max_ext_marks,s.min_ext_marks,CAST('0' as float) external_mark,s.maxtotal,s.mintotal,CAST('0' as float) as total,CAST('0' as float) as OutOf100,CAST('0' as float) as OutOf10,s.credit_points,'' as result,cast('1' as bit) as passorfail,s.Part_Type,ISNULL(ss.ElectivePap,'0') as Elective,ss.priority,ISNULL(ss.lab,'0') Lab,'' as Grade,ISNULL(ss.projThe,'0') projThe,s.subjectpriority,CAST('0' as float) as BeforeReTotINT,CAST('0' as float) as BeforeRevalEXT,CAST('0' as float) as BeforeTOT,'' as BeforeResult,CAST('0' as float) as AfterReTotINT,CAST('0' as float) as AfterRevalEXT,CAST('0' as float) as AfterTOT,'' as AfterRevalResult,'1' as MarkOrExempted,sg.grade as Message,sg.description,SUBSTRING(s.subject_code,LEN(s.subject_code)-2,2) as ExtraCreditSubject from subject s,sub_sem ss,syllabus_master sm,SpecialCourseSubject scs,SpecialCourseGradeDetail sg,Registration r where sg.MarkType=scs.MarkType and r.App_No=scs.app_no and s.subject_no=scs.subject_no and scs.CurrentSem=sm.semester and ss.syll_code=sm.syll_code and ss.syll_code=s.syll_code and s.subType_no=ss.subType_no and s.syll_code=sm.syll_code and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and r.roll_no in(" + rollNos + ") order by sm.semester,subject_type,ss.lab,s.subjectpriority");

                qry = "select * from exam_details where degree_code='" + degreeCode + "'  and exam_month='" + examMonth + "' and exam_year='" + Convert.ToString(examYear).Trim() + "' and  batch_year='" + batchYear + "'";
                dtExamDetails = dirAcc.selectDataTable(qry);

                qry = "select gm.College_Code,gm.batch_year,gm.Degree_Code,ISNULL(gm.Semester,'0') as Semester,gm.Credit_Points,gm.Mark_Grade,gm.Frange,gm.Trange,LTRIM(RTRIM(ISNULL(gm.Criteria,''))) as Criteria,gm.classify,CONVERT(Varchar(50),gm.Frange)+' - '+CONVERT(Varchar(50),gm.Trange) as Ranges from Grade_Master gm where batch_year='" + batchYear + "' and Degree_Code='" + degreeCode + "' union select gm.College_Code,gm.batch_year,gm.Degree_Code,ISNULL(gm.Semester,'0') as Semester,gm.Credit_Points,gm.Mark_Grade,gm.Frange,gm.Trange,LTRIM(RTRIM(ISNULL(gm.Criteria,''))) as Criteria,gm.classify,CONVERT(Varchar(50),gm.Frange)+' - '+CONVERT(Varchar(50),gm.Trange) as Ranges from Grade_Master gm where batch_year in('0','1') and Degree_Code in('0','1') order by Trange desc";
                dtGradeDetails = dirAcc.selectDataTable(qry);

                DataTable dtClassification = new DataTable();
                qry = "select frompoint,topoint,LTRIM(RTRIM(ISNULL(classification,''))) as classification,collegecode,edu_level,LTRIM(RTRIM(ISNULL(markgradeflag,''))) as markgradeflag,LTRIM(RTRIM(ISNULL(grade,''))) as grade,LTRIM(RTRIM(ISNULL(batch_year,''))) as batch_year from coe_classification order by collegecode,edu_level desc,batch_year,topoint desc";
                dtClassification = dirAcc.selectDataTable(qry);

                DataTable dtProjectPaper = new DataTable();
                qry = "select distinct ID,AppNo,sm.semester,s.subject_code SubjectNo,ProjectPaperName from ProjectPaperDetails prj,subject s,syllabus_master sm where sm.syll_code=s.syll_code and s.subject_no=prj.SubjectNo and sm.Batch_Year='" + batchYear + "' and sm.degree_code='" + degreeCode + "' ";
                dtProjectPaper = dirAcc.selectDataTable(qry);
                studRow = 0;
                List<string> lstErr = new List<string>();
                bool ins = false;

                foreach (DataRow drStudent in dtStudentList.Rows)
                {
                    ins = false;
                    string studentName = Convert.ToString(drStudent["Stud_Name"]).Trim();
                    string registerNo = Convert.ToString(drStudent["Reg_No"]).Trim();
                    string dateOfBirth = Convert.ToString(drStudent["dob"]).Trim();
                    string appNo = Convert.ToString(drStudent["App_No"]).Trim();
                    string rollNo = Convert.ToString(drStudent["Roll_No"]).Trim();
                    batchYear = Convert.ToString(drStudent["Batch_Year"]).Trim();
                    degreeCode = Convert.ToString(drStudent["degree_code"]).Trim();
                    string currentSem = Convert.ToString(drStudent["Current_Semester"]).Trim();
                    collegeCode = Convert.ToString(drStudent["college_code"]).Trim();
                    string courseName = Convert.ToString(drStudent["CourseName"]).Trim();
                    string departmentName = Convert.ToString(drStudent["Department"]).Trim();
                    string eduLevel = Convert.ToString(drStudent["edu_level"]).Trim();
                    redoStudent = Convert.ToString(drStudent["Redo"]).Trim();
                    string displayMonthYear = string.Empty;
                    int examMonthValue = 0;
                    int.TryParse(examMonth, out examMonthValue);
                    //string monthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(examMonthValue);
                    //rajkumar
                    DateTime dt = new DateTime(2000, 1, 1);
                    string monthName = Convert.ToString(dt.AddMonths(examMonthValue - 1).ToString("MMMM"));
                    //
                    displayMonthYear = monthName.ToUpper() + "  " + Convert.ToString(examYear).Trim();
                    string collegeName = string.Empty;
                    string coeName = string.Empty;
                    int maxDuration = 0;
                    int studentExamSemester = 0;
                    examCode = string.Empty;
                    collegeName = string.Empty;
                    coeName = string.Empty;
                    string principalName = string.Empty;
                    string universityName = string.Empty;
                    string address1 = string.Empty;
                    string address2 = string.Empty;
                    string address3 = string.Empty;
                    string collegeDistrict = string.Empty;
                    string collegeState = string.Empty;
                    string collegePincode = string.Empty;
                    string collegePhoneNo = string.Empty;
                    string affiliatedBy = string.Empty;
                    string collegeWebsite = string.Empty;
                    string collegeEmail = string.Empty;
                    string collegeCategory = string.Empty;

                    string passingIA = string.Empty;
                    string passingSE = string.Empty;
                    string passingMsg = string.Empty;

                    int studBatchYear = 0;
                    int.TryParse(batchYear.Trim(), out studBatchYear);
                    isNewRegulation = false;
                    isNewRegulation1 = false;
                    if (studBatchYear >= 2016)
                        isNewRegulation = true;
                    if (studBatchYear >= 2017)
                        isNewRegulation1 = true;
                    //tableLineHeight = (isNewRegulation) ? 100 : 0;
                    tableLineHeight = (isNewRegulation && (redoStudent.Trim() != "1" || redoStudent.Trim().ToLower() != "true")) ? 160 : 0;
                    //I.A. - Internal Assesment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks, P - Pass, RA - Reappear, A - Absent. For " + eduLevel + " Passing Minimum is \n\n" + passingIA + " in I.A., & in S.E. and Overall Passing Minimum is " + passingSE + ". For details of Grade & Grade Point see Overleaf. Any correction Invalidates.
                    isMPhil = false;

                    switch (eduLevel.Trim().ToLower())
                    {
                        case "ug":
                        case "u.g":
                        case "u.g.":
                        case "ug.":
                            passingIA = "40%";
                            passingSE = "40%";
                            passingMsg = "I.A. - Internal Assessment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks, P - Pass, RA - Reappear, A - Absent. For UG\t:\tPassing Minimum is " + passingIA + " in I.A., & in S.E. and Overall Passing Minimum is " + passingSE + ". For details of Grade & Grade Point, see overleaf. Any Correction Invalidates.";
                            break;
                        case "pg":
                        case "p.g":
                        case "p.g.":
                        case "pg.":
                            if (isNewRegulation1)
                                passingIA = "50%"; //mullai
                            else
                                passingIA = "40%";
                            passingSE = "50%";
                            passingMsg = "I.A. - Internal Assessment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks, P - Pass, RA - Reappear, A - Absent. For PG\t:\tPassing Minimum is " + passingIA + " in I.A., & in S.E. and Overall Passing Minimum is " + passingSE + ". For M.B.A.\t:\tPassing Minimum is 50% in I.A., S.E. & Overall. For details of Grade & Grade Point, see overleaf. Any Correction Invalidates.";
                            break;
                        case "mba":
                        case "mba.":
                        case "m.b.a.":
                            if (isNewRegulation1)
                                passingIA = "50%"; //mullai
                            else
                                passingIA = "40%";
                            passingSE = "50%";
                            passingMsg = "I.A. - Internal Assessment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks, P - Pass, RA - Reappear, A - Absent. For PG\t:\tPassing Minimum is " + passingIA + " in I.A., & in S.E. and Overall Passing Minimum is " + passingSE + ". For M.B.A.\t:\tPassing Minimum is 50% in I.A., S.E. & Overall. For details of Grade & Grade Point, see overleaf. Any Correction Invalidates.";
                            break;
                        case "mca":
                        case "mca.":
                        case "m.c.a.":
                            if (isNewRegulation1)
                                passingIA = "50%"; //mullai
                            else
                                passingIA = "40%";
                            passingSE = "50%";
                            passingMsg = "I.A. - Internal Assessment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks, P - Pass, RA - Reappear, A - Absent. For PG\t:\tPassing Minimum is " + passingIA + " in I.A., & in S.E. and Overall Passing Minimum is " + passingSE + ". For M.B.A.\t:\tPassing Minimum is 50% in I.A., S.E. & Overall. For details of Grade & Grade Point, see overleaf. Any Correction Invalidates.";
                            break;
                        case "mphil":
                        case "m.phil.":
                        case "m.phil":
                        case "mphil.":
                            isMPhil = true;
                            if (isNewRegulation1)
                                passingIA = "50%"; //mullai
                            else
                                passingIA = "40%";
                            passingSE = "50%";
                            //passingMsg = "F.t.\t-\tFull Time, P.T.\t-\t Part Time. I.A. - Internal Assessment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks, P - Pass, RA - Reappear, A - Absent. Passing Minimum\t:\t Part\t-\tI\t:\t I.A.\t-\t40%, S.E.\t-\t40% and Aggregate\t-\t50%. Part\t-\tII\t:\t Viva-voce\t-\t50%, Dessertation\t-\t50%. For details of Grade & Grade Point, see Overleaf. Any correction Invalidates.";
                            passingMsg = "I.A. - Internal Assessment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks, P - Pass, RA - Reappear, A - Absent. For " + eduLevel.Trim() + "\t:\tPassing Minimum is " + passingIA + " in I.A., & in S.E. and Overall Passing Minimum is " + passingSE + ". For details of Grade & Grade Point, see overleaf. Any Correction Invalidates.";//F.T.\t-\tFull Time, P.T.\t-\t Part Time, 
                            break;
                        default:
                            passingIA = "40%";
                            passingSE = "50%";
                            passingMsg = "I.A. - Internal Assessment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks, P - Pass, RA - Reappear, A - Absent. For " + eduLevel.Trim() + "\t:\tPassing Minimum is " + passingIA + " in I.A., & in S.E. and Overall Passing Minimum is " + passingSE + ". For details of Grade & Grade Point, see overleaf. Any Correction Invalidates.";
                            break;
                    }
                    //passingMsg = "For " + eduLevel + ": Passing Minimum is " + passingIA + " in I.A., & in S.E. and Overall Passing Minimum is " + passingSE + ".";

                    DataView dvCollegeDetail = new DataView();
                    if (dtCollegeDetails.Rows.Count > 0)
                    {
                        dtCollegeDetails.DefaultView.RowFilter = "college_code='" + collegeCode + "'";
                        dvCollegeDetail = dtCollegeDetails.DefaultView;
                    }
                    if (dvCollegeDetail.Count > 0)
                    {
                        foreach (DataRowView drCollege in dvCollegeDetail)
                        {
                            collegeName = Convert.ToString(drCollege["collname"]).Trim();
                            coeName = Convert.ToString(drCollege["coe"]).Trim();
                            principalName = Convert.ToString(drCollege["principal"]).Trim();
                            universityName = Convert.ToString(drCollege["university"]).Trim();
                            address1 = Convert.ToString(drCollege["address1"]).Trim();
                            address2 = Convert.ToString(drCollege["address2"]).Trim();
                            address3 = Convert.ToString(drCollege["address3"]).Trim();
                            collegeDistrict = Convert.ToString(drCollege["district"]).Trim();
                            collegeState = Convert.ToString(drCollege["state"]).Trim();
                            collegePincode = Convert.ToString(drCollege["pincode"]).Trim();
                            collegePhoneNo = Convert.ToString(drCollege["phoneno"]).Trim();
                            affiliatedBy = Convert.ToString(drCollege["affliatedby"]).Trim();
                            collegeWebsite = Convert.ToString(drCollege["website"]).Trim();
                            collegeEmail = Convert.ToString(drCollege["email"]).Trim();
                            collegeCategory = Convert.ToString(drCollege["category"]).Trim();
                            //,principal,coe_signature,principal_sign,logo1,logo2
                        }
                    }
                    DataTable dtStudentOverAllResult = new DataTable();
                    dtStudentOverAllResult = dirAcc.selectDataTable("select  case when ISNULL(Tab1.roll_no,'')<>'' then ISNULL(Tab1.roll_no,'')  when ISNULL(Tab2.roll_no,'')<>'' then ISNULL(Tab2.roll_no,'') when ISNULL(Tab3.roll_no,'')<>'' then ISNULL(Tab3.roll_no,'') when ISNULL(Tab4.roll_no,'')<>'' then ISNULL(Tab4.roll_no,'') end roll_no,ISNULL(Tab1.TotalSubjectCount,'0') as TotalSubjectCount,ISNULL(Tab2.PassedCount,'0') as PassedCount,ISNULL(Tab3.FailedCount,'0') as FailedCount,ISNULL(Tab4.CurrentArrearCount,'0') as CurrentArrearCount from ((select sc.roll_no,count(s.subject_no) as TotalSubjectCount from subjectchooser sc,subject s,registration r,syllabus_master sm where sm.syll_code=s.syll_code and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code  and sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no in('" + rollNo + "') group by sc.roll_no) as Tab1 full join  (Select sc.roll_no,count(distinct s.subject_no) as PassedCount from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and ss.syll_code=s.syll_code and sm.syll_code=ss.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='pass' and m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no in('" + rollNo + "')  group by sc.roll_no) as Tab2 on tab1.roll_no=Tab2.roll_no full join ( Select sc.roll_no,count(distinct s.subject_no) as FailedCount from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and s.syll_code=ss.syll_code and sm.syll_code=ss.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='fail' and m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no in('" + rollNo + "') group by sc.roll_no) as Tab3 on Tab2.roll_no=Tab3.roll_no full join (select sc.roll_no,count(distinct m.subject_no) as CurrentArrearCount from mark_entry m,subjectChooser sc,syllabus_master sm,subject s where s.syll_code=sm.syll_code and s.subject_no=sc.subject_no and s.subject_no=m.subject_no and m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no in('" + rollNo + "') and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc,syllabus_master sm,subject s where s.syll_code=sm.syll_code and s.subject_no=m.subject_no and s.subject_no=sc.subject_no and m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no in('" + rollNo + "') and m.result='Pass') group by sc.roll_no ) as Tab4 on Tab3.roll_no=Tab4.roll_no)");
                    DataView dvCollege = new DataView();
                    if (dtCollegeDetails.Rows.Count > 0)
                    {
                        dtCollegeDetails.DefaultView.RowFilter = "college_code='" + collegeCode + "'";
                        dvCollege = dtCollegeDetails.DefaultView;
                    }
                    if (dvCollege.Count > 0)
                    {
                        coeName = Convert.ToString(dvCollege[0]["coe"]).Trim();
                        collegeName = Convert.ToString(dvCollege[0]["collname"]).Trim();
                    }
                    string maxSemester = dirAcc.selectScalarString("select NDurations from ndegree where batch_year='" + batchYear + "'  and Degree_code='" + degreeCode + "' and college_code='" + collegeCode.Trim() + "'");
                    if (maxSemester == "" || maxSemester == null)
                    {
                        maxSemester = dirAcc.selectScalarString("SELECT Duration FROM Degree where Degree_Code='" + degreeCode + "' and college_code='" + collegeCode.Trim() + "'");
                    }
                    int.TryParse(maxSemester, out maxDuration);
                    string sem = string.Empty;

                    dtStudentsMarkList = new DataTable();
                    //DataTable dtComm
                    dtAllStudentsMark.DefaultView.RowFilter = "Roll_no='" + rollNo + "' and exam_month='" + examMonth + "' and exam_year='" + examYear + "' and external_mark<>'-2' and external_mark<>'-3'";
                    dtStudentsMarkList = dtAllStudentsMark.DefaultView.ToTable();
                    bool isFirstYear = false;
                    if (dtStudentsMarkList.Rows.Count > 0)
                    {
                        double tableHeight = 0;
                        if (dtExamDetails.Rows.Count > 0)
                        {
                            sem = Convert.ToString(dtExamDetails.Rows[0]["current_semester"]).Trim();
                        }
                        GetSem(batchYear, Convert.ToString(examYear), Convert.ToString(examMonth), maxSemester, ref sem);
                        int.TryParse(sem, out studentExamSemester);
                        string semesterRoman = ToRoman(sem);
                        string studiedYears = Convert.ToString(batchYear).Trim() + "-";
                        if (eduLevel.Trim().ToLower() == "ug")
                        {
                            studiedYears += Convert.ToString((Convert.ToInt32(batchYear) + (maxDuration / 2)));
                            gradeSet = "0";
                        }
                        else
                        {
                            studiedYears += Convert.ToString((Convert.ToInt32(batchYear) + (maxDuration / 2)));
                            gradeSet = "1";
                        }
                        bool isStudentRedo = false;

                        bool issupl = false;
                        string issup = d2.GetFunction("select isSupplementaryExam from Exam_Details where batch_year='" + batchYear + "' and degree_code='" + degreeCode + "' and Exam_Month='" + examMonth + "' and Exam_year='" + examYear + "'");
                        if (issup == "1" || issup.Trim().ToLower() == "true")
                            issupl = true;

                        List<string> lstRedoSem = new List<string>();
                        if (redoStudent.ToLower() == "true" || redoStudent.Trim() == "1")
                        {
                            if (dicAppNoRedoSemester.ContainsKey(appNo.Trim()))
                            {
                                lstRedoSem = dicAppNoRedoSemester[appNo.Trim()];
                                semester = string.Empty;
                                semester = string.Join("','", lstRedoSem.ToArray());
                                //raj
                                //if (redoStudent.Trim() != "1" && redoStudent.Trim().ToLower() != "true")
                                //{
                                //    lstRedoSem.Remove(sem);
                                //    semester = string.Join("','", lstRedoSem.ToArray());
                                //}
                                //

                                if (lstRedoSem.Contains(sem))
                                {
                                    isStudentRedo = true;
                                }
                            }
                        }

                        int subMarkRow = 0;
                        startingPosX = 10;
                        startingPosY = 240;

                        markSheetPage = markSheetDocument.NewPage();

                        //pdftxt = new PdfTextArea();fontStatementHeading
                        pdftxt = new PdfTextArea(fontStatementHeading, Color.Green, new PdfArea(markSheetDocument, startingPosX, 187, markSheetDocument.PageWidth - (2 * startingPosX), 30), ContentAlignment.MiddleCenter, "STATEMENT OF MARKS - " + eduLevel);
                        markSheetPage.Add(pdftxt);

                        pdftblStudentDetails = markSheetDocument.NewTable(fontStudentDetail, 2, 5, 4);
                        pdftblStudentDetails.VisibleHeaders = false;
                        pdftblStudentDetails.SetBorders(Color.Black, 1, BorderType.None);
                        pdftblStudentDetails.SetColumnsWidth(new int[] { 80, 969, 150, 15, 230 });

                        pdftblStudentDetails.Cell(0, 2).SetContentAlignment(ContentAlignment.TopLeft);
                        pdftblStudentDetails.Cell(0, 2).SetContent("Register No.");
                        pdftblStudentDetails.Cell(0, 2).SetForegroundColor(Color.Green);

                        pdftblStudentDetails.Cell(0, 3).SetContentAlignment(ContentAlignment.TopCenter);
                        pdftblStudentDetails.Cell(0, 3).SetContent(":");
                        pdftblStudentDetails.Cell(0, 3).SetForegroundColor(Color.Green);

                        pdftblStudentDetails.Cell(0, 4).SetContentAlignment(ContentAlignment.TopLeft);
                        pdftblStudentDetails.Cell(0, 4).SetContent(registerNo);

                        pdftblStudentDetails.Cell(1, 0).SetContentAlignment(ContentAlignment.BottomLeft);
                        pdftblStudentDetails.Cell(1, 0).SetContent("Name : ");
                        pdftblStudentDetails.Cell(1, 0).SetForegroundColor(Color.Green);

                        pdftblStudentDetails.Cell(1, 1).SetContentAlignment(ContentAlignment.BottomLeft);
                        pdftblStudentDetails.Cell(1, 1).SetContent(studentName);
                        //foreach (PdfCell pc in pdftblStudentDetails.CellRange(1, 1, 1, 1).Cells)
                        //{
                        //    pc.ColSpan = 2;
                        //}

                        pdftblStudentDetails.Cell(1, 2).SetContentAlignment(ContentAlignment.BottomLeft);
                        pdftblStudentDetails.Cell(1, 2).SetContent("Date of Birth");
                        pdftblStudentDetails.Cell(1, 2).SetForegroundColor(Color.Green);

                        pdftblStudentDetails.Cell(1, 3).SetContentAlignment(ContentAlignment.BottomCenter);
                        pdftblStudentDetails.Cell(1, 3).SetContent(":");
                        pdftblStudentDetails.Cell(1, 3).SetForegroundColor(Color.Green);

                        pdftblStudentDetails.Cell(1, 4).SetContentAlignment(ContentAlignment.BottomLeft);
                        pdftblStudentDetails.Cell(1, 4).SetContent(dateOfBirth);

                        //pdftblStudentDetails.Cell(2, 0).SetContentAlignment(ContentAlignment.BottomLeft);
                        //pdftblStudentDetails.Cell(2, 0).SetContent("Degree & Branch :");
                        //pdftblStudentDetails.Cell(2, 0).SetCellPadding(1);
                        //pdftblStudentDetails.Cell(2, 0).SetForegroundColor(Color.Green);
                        //foreach (PdfCell pc in pdftblStudentDetails.CellRange(2, 0, 2, 0).Cells)
                        //{
                        //    pc.ColSpan = 2;
                        //}                        

                        //pdftblStudentDetails.Cell(2, 2).SetContentAlignment(ContentAlignment.BottomLeft);
                        //pdftblStudentDetails.Cell(2, 2).SetContent(courseName.Trim() + " - " + departmentName);
                        //pdftblStudentDetails.Cell(2, 2).SetCellPadding(1);

                        //pdftblStudentDetails.Cell(2, 3).SetContentAlignment(ContentAlignment.BottomLeft);
                        //pdftblStudentDetails.Cell(2, 3).SetContent("Month & Year");
                        //pdftblStudentDetails.Cell(2, 3).SetForegroundColor(Color.Green);

                        //pdftblStudentDetails.Cell(2, 4).SetContentAlignment(ContentAlignment.BottomCenter);
                        //pdftblStudentDetails.Cell(2, 4).SetContent(":");
                        //pdftblStudentDetails.Cell(2, 4).SetForegroundColor(Color.Green);

                        //pdftblStudentDetails.Cell(2, 5).SetContentAlignment(ContentAlignment.BottomLeft);
                        //pdftblStudentDetails.Cell(2, 5).SetContent(displayMonthYear);

                        pdftblPages = pdftblStudentDetails.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, startingPosY, markSheetDocument.PageWidth - (2 * startingPosX), 150));
                        markSheetPage.Add(pdftblPages);
                        tableHeight = pdftblPages.Area.Height;
                        startingPosY += Convert.ToInt32(tableHeight);

                        pdftblStudentDetails = markSheetDocument.NewTable(fontStudentDetail, 1, 5, 4);
                        pdftblStudentDetails.VisibleHeaders = false;
                        pdftblStudentDetails.SetBorders(Color.Black, 1, BorderType.None);
                        pdftblStudentDetails.SetColumnsWidth(new int[] { 180, 869, 150, 15, 230 });

                        pdftblStudentDetails.Cell(0, 0).SetContentAlignment(ContentAlignment.BottomLeft);
                        pdftblStudentDetails.Cell(0, 0).SetContent("Degree & Branch :");
                        pdftblStudentDetails.Cell(0, 0).SetForegroundColor(Color.Green);
                        //foreach (PdfCell pc in pdftblStudentDetails.CellRange(0, 0, 0, 0).Cells)
                        //{
                        //    pc.ColSpan = 2;
                        //}

                        pdftblStudentDetails.Cell(0, 1).SetContentAlignment(ContentAlignment.BottomLeft);
                        pdftblStudentDetails.Cell(0, 1).SetContent(courseName.Trim() + " - " + departmentName);

                        pdftblStudentDetails.Cell(0, 2).SetContentAlignment(ContentAlignment.BottomLeft);
                        pdftblStudentDetails.Cell(0, 2).SetContent("Month & Year");
                        pdftblStudentDetails.Cell(0, 2).SetForegroundColor(Color.Green);

                        pdftblStudentDetails.Cell(0, 3).SetContentAlignment(ContentAlignment.BottomCenter);
                        pdftblStudentDetails.Cell(0, 3).SetContent(":");
                        pdftblStudentDetails.Cell(0, 3).SetForegroundColor(Color.Green);

                        pdftblStudentDetails.Cell(0, 4).SetContentAlignment(ContentAlignment.BottomLeft);
                        pdftblStudentDetails.Cell(0, 4).SetContent(displayMonthYear);

                        pdftblPages = pdftblStudentDetails.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, startingPosY, markSheetDocument.PageWidth - (2 * startingPosX), 100));
                        markSheetPage.Add(pdftblPages);
                        tableHeight = pdftblPages.Area.Height;
                        startingPosY += Convert.ToInt32(tableHeight) + 5;

                        startingPosY = 335;

                        DataTable dtMarkDetails = new DataTable();
                        DataTable dtMarkDetailsOverAll = new DataTable();
                        DataTable dtSplSubjectMark = new DataTable();
                        DataTable dtFinalSubjectMark = new DataTable();
                        DataTable dtArrearSubjectMark = new DataTable();
                        string markOrGradeFlag = "1";
                        if (dtAllStudentsMark.Rows.Count > 0)
                        {
                            dtStudentsMarkList.DefaultView.RowFilter = "semester='" + sem + "'";
                            dtMarkDetails = dtStudentsMarkList.DefaultView.ToTable();
                            dtFinalSubjectMark = dtStudentsMarkList.DefaultView.ToTable();

                            dtStudentsMarkList.DefaultView.RowFilter = "semester<>'" + sem + "'";
                            dtStudentsMarkList.DefaultView.Sort = "semester asc";
                            dtArrearSubjectMark = dtStudentsMarkList.DefaultView.ToTable();

                            dtAllStudentsMark.DefaultView.RowFilter = "roll_no='" + rollNo + "' and current_semester<='" + sem + "'";
                            dtMarkDetailsOverAll = dtAllStudentsMark.DefaultView.ToTable();
                            //dtSplSubjectMark = dtMarkDetailsOverAll;
                        }
                        if (dtSpecialSubject.Rows.Count > 0 && !issupl)
                        {
                            dtSplSubjectMark.Clear();
                            dtSpecialSubject.DefaultView.RowFilter = "roll_no='" + rollNo + "' and semester='" + sem + "'";
                            //dtSplSubjectMark = dtAllStudentsMark.DefaultView.ToTable();
                            dtSplSubjectMark.Merge(dtSpecialSubject.DefaultView.ToTable());
                            if (!isStudentRedo)
                                dtStudentsMarkList.Merge(dtSplSubjectMark);
                            dtStudentsMarkList.DefaultView.RowFilter = "";
                            dtStudentsMarkList.DefaultView.Sort = "semester desc";
                            dtStudentsMarkList = dtStudentsMarkList.DefaultView.ToTable();

                            if (!isStudentRedo)
                                dtFinalSubjectMark.Merge(dtSplSubjectMark);
                        }
                        dtFinalSubjectMark.Merge(dtArrearSubjectMark);
                        int semRow = 28; //mullai
                        List<int> lstSem = dtFinalSubjectMark.AsEnumerable().Select(r => r.Field<int>("semester")).Distinct().ToList<int>();
                        int max = lstSem.Max();
                        //lstRedoSem.Remove(max);
                        if (lstSem.Count > 1)
                        {
                            semRow = 25;
                        }
                        else if (lstSem.Count > 0)
                        {
                            if (lstSem[0].ToString().Trim() != sem)
                                semRow = 13;
                        }
                        isFirstYear = false;
                        if (lstSem.Count == 1 && lstSem[0] == 1 && sem == "1")
                        {
                            isFirstYear = true;
                        }
                        Dictionary<byte, string> dicPartWiseSecMarks = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseMaxTotal = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseEarnedCredit = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseSumGP = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseWeight = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseGPA = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseGrade = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseWAM = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseClassification = new Dictionary<byte, string>();

                        getGPAWAMGrade(dtGradeDetails, dtMarkDetails, dtStudentOverAllResult, dtClassification, gradeSet, collegeCode, batchYear, degreeCode, sem, eduLevel, markOrGradeFlag, ref  dicPartWiseSecMarks, ref  dicPartWiseMaxTotal, ref  dicPartWiseEarnedCredit, ref dicPartWiseSumGP, ref dicPartWiseWeight, ref   dicPartWiseGPA, ref  dicPartWiseGrade, ref dicPartWiseWAM, ref dicPartWiseClassification);

                        string part1SecMarks = ((dicPartWiseSecMarks.ContainsKey(1)) ? dicPartWiseSecMarks[1] : "--");
                        string part2SecMarks = ((dicPartWiseSecMarks.ContainsKey(2)) ? dicPartWiseSecMarks[2] : "--");
                        string part3SecMarks = ((dicPartWiseSecMarks.ContainsKey(3)) ? dicPartWiseSecMarks[3] : "--");
                        string part4SecMarks = ((dicPartWiseSecMarks.ContainsKey(4)) ? dicPartWiseSecMarks[4] : "--");
                        string part5SecMarks = ((dicPartWiseSecMarks.ContainsKey(5)) ? dicPartWiseSecMarks[5] : "--");

                        string part1MaxTotal = ((dicPartWiseMaxTotal.ContainsKey(1)) ? dicPartWiseMaxTotal[1] : "--");
                        string part2MaxTotal = ((dicPartWiseMaxTotal.ContainsKey(2)) ? dicPartWiseMaxTotal[2] : "--");
                        string part3MaxTotal = ((dicPartWiseMaxTotal.ContainsKey(3)) ? dicPartWiseMaxTotal[3] : "--");
                        string part4MaxTotal = ((dicPartWiseMaxTotal.ContainsKey(4)) ? dicPartWiseMaxTotal[4] : "--");
                        string part5MaxTotal = ((dicPartWiseMaxTotal.ContainsKey(5)) ? dicPartWiseMaxTotal[5] : "--");

                        string part1EarnedCredit = ((dicPartWiseEarnedCredit.ContainsKey(1)) ? dicPartWiseEarnedCredit[1] : "--");
                        string part2EarnedCredit = ((dicPartWiseEarnedCredit.ContainsKey(2)) ? dicPartWiseEarnedCredit[2] : "--");
                        string part3EarnedCredit = ((dicPartWiseEarnedCredit.ContainsKey(3)) ? dicPartWiseEarnedCredit[3] : "--");
                        string part4EarnedCredit = ((dicPartWiseEarnedCredit.ContainsKey(4)) ? dicPartWiseEarnedCredit[4] : "--");
                        string part5EarnedCredit = ((dicPartWiseEarnedCredit.ContainsKey(5)) ? dicPartWiseEarnedCredit[5] : "--");

                        string part1SumGP = ((dicPartWiseSumGP.ContainsKey(1)) ? dicPartWiseSumGP[1] : "--");
                        string part2SumGP = ((dicPartWiseSumGP.ContainsKey(2)) ? dicPartWiseSumGP[2] : "--");
                        string part3SumGP = ((dicPartWiseSumGP.ContainsKey(3)) ? dicPartWiseSumGP[3] : "--");
                        string part4SumGP = ((dicPartWiseSumGP.ContainsKey(4)) ? dicPartWiseSumGP[4] : "--");
                        string part5SumGP = ((dicPartWiseSumGP.ContainsKey(5)) ? dicPartWiseSumGP[5] : "--");

                        string part1Weight = ((dicPartWiseWeight.ContainsKey(1)) ? dicPartWiseWeight[1] : "--");
                        string part2Weight = ((dicPartWiseWeight.ContainsKey(2)) ? dicPartWiseWeight[2] : "--");
                        string part3Weight = ((dicPartWiseWeight.ContainsKey(3)) ? dicPartWiseWeight[3] : "--");
                        string part4Weight = ((dicPartWiseWeight.ContainsKey(4)) ? dicPartWiseWeight[4] : "--");
                        string part5Weight = ((dicPartWiseWeight.ContainsKey(5)) ? dicPartWiseWeight[5] : "--");

                        string part1GPA = ((dicPartWiseGPA.ContainsKey(1)) ? dicPartWiseGPA[1] : "--");
                        string part2GPA = ((dicPartWiseGPA.ContainsKey(2)) ? dicPartWiseGPA[2] : "--");
                        string part3GPA = ((dicPartWiseGPA.ContainsKey(3)) ? dicPartWiseGPA[3] : "--");
                        string part4GPA = ((dicPartWiseGPA.ContainsKey(4)) ? dicPartWiseGPA[4] : "--");
                        string part5GPA = ((dicPartWiseWAM.ContainsKey(5)) ? dicPartWiseWAM[5] : "--");

                        string part1WAM = ((dicPartWiseWAM.ContainsKey(1)) ? dicPartWiseWAM[1] : "--");
                        string part2WAM = ((dicPartWiseWAM.ContainsKey(2)) ? dicPartWiseWAM[2] : "--");
                        string part3WAM = ((dicPartWiseWAM.ContainsKey(3)) ? dicPartWiseWAM[3] : "--");
                        string part4WAM = ((dicPartWiseWAM.ContainsKey(4)) ? dicPartWiseWAM[4] : "--");
                        string part5WAM = ((dicPartWiseWAM.ContainsKey(5)) ? dicPartWiseWAM[5] : "--");

                        string part1Grade = ((dicPartWiseGrade.ContainsKey(1)) ? dicPartWiseGrade[1] : "--");
                        string part2Grade = ((dicPartWiseGrade.ContainsKey(2)) ? dicPartWiseGrade[2] : "--");
                        string part3Grade = ((dicPartWiseGrade.ContainsKey(3)) ? dicPartWiseGrade[3] : "--");
                        string part4Grade = ((dicPartWiseGrade.ContainsKey(4)) ? dicPartWiseGrade[4] : "--");
                        string part5Grade = ((dicPartWiseGrade.ContainsKey(5)) ? dicPartWiseGrade[5] : "--");

                        string part1Classification = ((dicPartWiseClassification.ContainsKey(1)) ? dicPartWiseClassification[1] : "--");
                        string part2Classification = ((dicPartWiseClassification.ContainsKey(2)) ? dicPartWiseClassification[2] : "--");
                        string part3Classification = ((dicPartWiseClassification.ContainsKey(3)) ? dicPartWiseClassification[3] : "--");
                        string part4Classification = ((dicPartWiseClassification.ContainsKey(4)) ? dicPartWiseClassification[4] : "--");
                        string part5Classification = ((dicPartWiseClassification.ContainsKey(5)) ? dicPartWiseClassification[5] : "--");

                        Dictionary<byte, string> dicPartWiseCSecMarks = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseCMaxTotal = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseCEarnedCredit = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseCSumGP = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseCWeight = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseCGPA = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseCGrade = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseCWAM = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseCClassification = new Dictionary<byte, string>();
                        bool isRedo = false;

                        //Rajkumar
                        //listofIDs.Select(int.Parse).ToList();

                        List<int> myStringList = lstRedoSem.Select(s => int.Parse(s)).ToList();
                        if (myStringList.Count > 0)
                        {
                            min = myStringList.Min();
                        }
                        //
                        if (lstRedoSem.Count > 0)
                            isRedo = true;
                        if (studentExamSemester == max)
                        {
                            isRedo = false;
                        }
                        if (min != 0)
                        {
                            if (min < max)
                            {
                                isRedo = true;
                            }
                        }
                        getGPAWAMGrade(dtGradeDetails, dtMarkDetailsOverAll, dtStudentOverAllResult, dtClassification, gradeSet, collegeCode, batchYear, degreeCode, sem, eduLevel, markOrGradeFlag, ref  dicPartWiseCSecMarks, ref  dicPartWiseCMaxTotal, ref  dicPartWiseCEarnedCredit, ref dicPartWiseCSumGP, ref dicPartWiseCWeight, ref   dicPartWiseCGPA, ref  dicPartWiseCGrade, ref dicPartWiseCWAM, ref dicPartWiseCClassification, true, isRedo);

                        string part1CSecMarks = ((dicPartWiseCSecMarks.ContainsKey(1)) ? dicPartWiseSecMarks[1] : "--");
                        string part2CSecMarks = ((dicPartWiseCSecMarks.ContainsKey(2)) ? dicPartWiseSecMarks[2] : "--");
                        string part3CSecMarks = ((dicPartWiseCSecMarks.ContainsKey(3)) ? dicPartWiseSecMarks[3] : "--");
                        string part4CSecMarks = ((dicPartWiseCSecMarks.ContainsKey(4)) ? dicPartWiseSecMarks[4] : "--");
                        string part5CSecMarks = ((dicPartWiseCSecMarks.ContainsKey(5)) ? dicPartWiseSecMarks[5] : "--");

                        string part1CMaxTotal = ((dicPartWiseCMaxTotal.ContainsKey(1)) ? dicPartWiseMaxTotal[1] : "--");
                        string part2CMaxTotal = ((dicPartWiseCMaxTotal.ContainsKey(2)) ? dicPartWiseMaxTotal[2] : "--");
                        string part3CMaxTotal = ((dicPartWiseCMaxTotal.ContainsKey(3)) ? dicPartWiseMaxTotal[3] : "--");
                        string part4CMaxTotal = ((dicPartWiseCMaxTotal.ContainsKey(4)) ? dicPartWiseMaxTotal[4] : "--");
                        string part5CMaxTotal = ((dicPartWiseCMaxTotal.ContainsKey(5)) ? dicPartWiseMaxTotal[5] : "--");

                        string part1CEarnedCredit = ((dicPartWiseCEarnedCredit.ContainsKey(1)) ? dicPartWiseCEarnedCredit[1] : "--");
                        string part2CEarnedCredit = ((dicPartWiseCEarnedCredit.ContainsKey(2)) ? dicPartWiseCEarnedCredit[2] : "--");
                        string part3CEarnedCredit = ((dicPartWiseCEarnedCredit.ContainsKey(3)) ? dicPartWiseCEarnedCredit[3] : "--");
                        string part4CEarnedCredit = ((dicPartWiseCEarnedCredit.ContainsKey(4)) ? dicPartWiseCEarnedCredit[4] : "--");
                        string part5CEarnedCredit = ((dicPartWiseCEarnedCredit.ContainsKey(5)) ? dicPartWiseCEarnedCredit[5] : "--");

                        string part1CSumGP = ((dicPartWiseCSumGP.ContainsKey(1)) ? dicPartWiseCSumGP[1] : "--");
                        string part2CSumGP = ((dicPartWiseCSumGP.ContainsKey(2)) ? dicPartWiseCSumGP[2] : "--");
                        string part3CSumGP = ((dicPartWiseCSumGP.ContainsKey(3)) ? dicPartWiseCSumGP[3] : "--");
                        string part4CSumGP = ((dicPartWiseCSumGP.ContainsKey(4)) ? dicPartWiseCSumGP[4] : "--");
                        string part5CSumGP = ((dicPartWiseCSumGP.ContainsKey(5)) ? dicPartWiseCSumGP[5] : "--");

                        string part1CWeight = ((dicPartWiseCWeight.ContainsKey(1)) ? dicPartWiseCWeight[1] : "--");
                        string part2CWeight = ((dicPartWiseCWeight.ContainsKey(2)) ? dicPartWiseCWeight[2] : "--");
                        string part3CWeight = ((dicPartWiseCWeight.ContainsKey(3)) ? dicPartWiseCWeight[3] : "--");
                        string part4CWeight = ((dicPartWiseCWeight.ContainsKey(4)) ? dicPartWiseCWeight[4] : "--");
                        string part5CWeight = ((dicPartWiseCWeight.ContainsKey(5)) ? dicPartWiseCWeight[5] : "--");

                        string part1CGPA = ((dicPartWiseCGPA.ContainsKey(1)) ? dicPartWiseCGPA[1] : "--");
                        string part2CGPA = ((dicPartWiseCGPA.ContainsKey(2)) ? dicPartWiseCGPA[2] : "--");
                        string part3CGPA = ((dicPartWiseCGPA.ContainsKey(3)) ? dicPartWiseCGPA[3] : "--");
                        string part4CGPA = ((dicPartWiseCGPA.ContainsKey(4)) ? dicPartWiseCGPA[4] : "--");
                        string part5CGPA = ((dicPartWiseCGPA.ContainsKey(5)) ? dicPartWiseCGPA[5] : "--");

                        string part1CWAM = ((dicPartWiseCWAM.ContainsKey(1)) ? dicPartWiseCWAM[1] : "--");
                        string part2CWAM = ((dicPartWiseCWAM.ContainsKey(2)) ? dicPartWiseCWAM[2] : "--");
                        string part3CWAM = ((dicPartWiseCWAM.ContainsKey(3)) ? dicPartWiseCWAM[3] : "--");
                        string part4CWAM = ((dicPartWiseCWAM.ContainsKey(4)) ? dicPartWiseCWAM[4] : "--");
                        string part5CWAM = ((dicPartWiseCWAM.ContainsKey(5)) ? dicPartWiseCWAM[5] : "--");

                        string part1CGrade = ((dicPartWiseCGrade.ContainsKey(1)) ? dicPartWiseCGrade[1] : "--");
                        string part2CGrade = ((dicPartWiseCGrade.ContainsKey(2)) ? dicPartWiseCGrade[2] : "--");
                        string part3CGrade = ((dicPartWiseCGrade.ContainsKey(3)) ? dicPartWiseCGrade[3] : "--");
                        string part4CGrade = ((dicPartWiseCGrade.ContainsKey(4)) ? dicPartWiseCGrade[4] : "--");
                        string part5CGrade = ((dicPartWiseCGrade.ContainsKey(5)) ? dicPartWiseCGrade[5] : "--");

                        string part1CClassification = ((dicPartWiseCClassification.ContainsKey(1)) ? dicPartWiseCClassification[1] : "--");
                        string part2CClassification = ((dicPartWiseCClassification.ContainsKey(2)) ? dicPartWiseCClassification[2] : "--");
                        string part3CClassification = ((dicPartWiseCClassification.ContainsKey(3)) ? dicPartWiseCClassification[3] : "--");
                        string part4CClassification = ((dicPartWiseCClassification.ContainsKey(4)) ? dicPartWiseCClassification[4] : "--");
                        string part5CClassification = ((dicPartWiseCClassification.ContainsKey(5)) ? dicPartWiseCClassification[5] : "--");

                        pdftblMarksContent = markSheetDocument.NewTable(fontMarkStatement, dtFinalSubjectMark.Rows.Count + semRow, 15, 5);
                        pdftblMarksContent.VisibleHeaders = false;
                        pdftblMarksContent.SetBorders(Color.Black, 1, BorderType.None);
                        pdftblMarksContent.SetColumnsWidth(new int[] { 55, 70, 158, 268, 258, 65, 65, 65, 65, 65, 65, 70, 90, 105, 72 });

                        pdftblMarksContent.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, 0).SetContent("Part");
                        pdftblMarksContent.Cell(0, 0).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, 0).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 0, 0, 0).Cells)
                        {
                            pc.RowSpan = 2;
                        }

                        pdftblMarksContent.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, 1).SetContent("Sem");
                        pdftblMarksContent.Cell(0, 1).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, 1).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 1, 0, 1).Cells)
                        {
                            pc.RowSpan = 2;
                        }

                        pdftblMarksContent.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, 2).SetContent("Course Code");
                        pdftblMarksContent.Cell(0, 2).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, 2).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 2, 0, 2).Cells)
                        {
                            pc.RowSpan = 2;
                        }

                        pdftblMarksContent.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, 3).SetContent("Course Title");
                        pdftblMarksContent.Cell(0, 3).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, 3).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 3, 0, 3).Cells)
                        {
                            pc.RowSpan = 2;
                            pc.ColSpan = 2;
                        }
                        pdftblMarksContent.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, 5).SetContent("I.A.");
                        pdftblMarksContent.Cell(0, 5).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, 5).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 5, 0, 5).Cells)
                        {
                            pc.ColSpan = 2;
                        }
                        pdftblMarksContent.Cell(1, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(1, 5).SetContent("Max.");
                        pdftblMarksContent.Cell(1, 5).SetCellPadding(3);
                        pdftblMarksContent.Cell(1, 5).SetForegroundColor(Color.Green);
                        pdftblMarksContent.Cell(1, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(1, 6).SetContent("Sec.");
                        pdftblMarksContent.Cell(1, 6).SetCellPadding(3);
                        pdftblMarksContent.Cell(1, 6).SetForegroundColor(Color.Green);

                        pdftblMarksContent.Cell(0, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, 7).SetContent("S.E.");
                        pdftblMarksContent.Cell(0, 7).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, 7).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 7, 0, 7).Cells)
                        {
                            pc.ColSpan = 2;
                        }
                        pdftblMarksContent.Cell(1, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(1, 7).SetContent("Max.");
                        pdftblMarksContent.Cell(1, 7).SetCellPadding(3);
                        pdftblMarksContent.Cell(1, 7).SetForegroundColor(Color.Green);
                        pdftblMarksContent.Cell(1, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(1, 8).SetContent("Sec.");
                        pdftblMarksContent.Cell(1, 8).SetCellPadding(3);
                        pdftblMarksContent.Cell(1, 8).SetForegroundColor(Color.Green);

                        pdftblMarksContent.Cell(0, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, 9).SetContent("Total");
                        pdftblMarksContent.Cell(0, 9).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, 9).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 9, 0, 9).Cells)
                        {
                            pc.ColSpan = 2;
                        }

                        pdftblMarksContent.Cell(1, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(1, 9).SetContent("Max.");
                        pdftblMarksContent.Cell(1, 9).SetCellPadding(3);
                        pdftblMarksContent.Cell(1, 9).SetForegroundColor(Color.Green);
                        pdftblMarksContent.Cell(1, 10).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(1, 10).SetContent("Sec.");
                        pdftblMarksContent.Cell(1, 10).SetCellPadding(3);
                        pdftblMarksContent.Cell(1, 10).SetForegroundColor(Color.Green);

                        pdftblMarksContent.Cell(0, 11).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, 11).SetContent("Credit Earned");
                        pdftblMarksContent.Cell(0, 11).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, 11).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 11, 0, 11).Cells)
                        {
                            pc.RowSpan = 2;
                        }

                        pdftblMarksContent.Cell(0, 12).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, 12).SetContent("Grade Point");
                        pdftblMarksContent.Cell(0, 12).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, 12).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 12, 0, 12).Cells)
                        {
                            pc.RowSpan = 2;
                        }

                        pdftblMarksContent.Cell(0, 13).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, 13).SetContent("Weighted Marks");
                        pdftblMarksContent.Cell(0, 13).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, 13).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 13, 0, 13).Cells)
                        {
                            pc.RowSpan = 2;
                        }

                        pdftblMarksContent.Cell(0, 14).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, 14).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, 14).SetContent("Result");
                        pdftblMarksContent.Cell(0, 14).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 14, 0, 14).Cells)
                        {
                            pc.RowSpan = 2;
                        }

                        int markRow = 3;
                        int sheetNo = 1;
                        bool hasArrear = false;
                        bool hasRegular = false;
                        bool hasLab = false;
                        int totalRows = dtFinalSubjectMark.Rows.Count + semRow;
                        int totalSheetRequired = ((totalRows % 25) != 0 ? 1 : 0) + (totalRows / 25);
                        double sum_gpa = 0;
                        double tot_credit = 0;
                        bool gp_status = true;
                        bool isOnlyArrear = true;
                        Dictionary<int, int> dicSheetRow = new Dictionary<int, int>();
                        foreach (DataRow drStudMark in dtFinalSubjectMark.Rows)
                        {
                            bool isPassOrFail = false;
                            bool isLab = false;
                            bool isProjectThesis = false;
                            bool isElective = false;
                            bool isSubjectResult = true;
                            bool arrearSubject = false;
                            double weightedMarks = 0;

                            string batchYearSub = Convert.ToString(drStudMark["Batch_Year"]).Trim();
                            string degreeCodeSub = Convert.ToString(drStudMark["degree_code"]).Trim();
                            string internalMark = Convert.ToString(drStudMark["internal_mark"]).Trim();
                            string minInternalMark = Convert.ToString(drStudMark["min_int_marks"]).Trim();
                            string maxInternalMark = Convert.ToString(drStudMark["max_int_marks"]).Trim();
                            string externalMark = Convert.ToString(drStudMark["external_mark"]).Trim();
                            string minExternalMark = Convert.ToString(drStudMark["min_ext_marks"]).Trim();
                            string maxExternalMark = Convert.ToString(drStudMark["max_ext_marks"]).Trim();
                            string outOf100 = Convert.ToString(drStudMark["OutOf100"]).Trim();
                            string outOf10 = Convert.ToString(drStudMark["OutOf10"]).Trim();
                            string totalMark = Convert.ToString(drStudMark["total"]).Trim();
                            string minTotalMark = Convert.ToString(drStudMark["mintotal"]).Trim();
                            string maxTotalMark = Convert.ToString(drStudMark["maxtotal"]).Trim();
                            string result = Convert.ToString(drStudMark["result"]).Trim();
                            string passOrFail = Convert.ToString(drStudMark["passorfail"]).Trim();
                            string subjectCode = Convert.ToString(drStudMark["subject_code"]).Trim();
                            string subjectName = Convert.ToString(drStudMark["subject_name"]).Trim();
                            string subjectType = Convert.ToString(drStudMark["subject_type"]).Trim();
                            string subjectAcr = Convert.ToString(drStudMark["SubjectAcronymn"]).Trim();
                            string creditPoint = Convert.ToString(drStudMark["credit_points"]).Trim();
                            string partType = Convert.ToString(drStudMark["Part_Type"]).Trim();
                            string subjectSemester = Convert.ToString(drStudMark["semester"]).Trim();
                            string gradeValue = Convert.ToString(drStudMark["grade"]).Trim();
                            string labSubject = Convert.ToString(drStudMark["Lab"]).Trim();
                            string electiveSubject = Convert.ToString(drStudMark["Elective"]).Trim();
                            string projectOrThesis = Convert.ToString(drStudMark["projThe"]).Trim();
                            string MarkOrExempted = Convert.ToString(drStudMark["MarkOrExempted"]).Trim();
                            string Message = Convert.ToString(drStudMark["Message"]).Trim();
                            string description = Convert.ToString(drStudMark["description"]).Trim();
                            string extraCreditSubject = Convert.ToString(drStudMark["ExtraCreditSubject"]).Trim();


                            if (extraCreditSubject.ToLower().Trim().Equals("ec"))
                            {
                                if (!result.Trim().ToLower().Equals("pass"))
                                    continue;
                            }
                            DataTable dtProjectName = new DataTable();
                            if (dtProjectPaper.Rows.Count > 0)
                            {
                                dtProjectPaper.DefaultView.RowFilter = "subjectNo='" + subjectCode + "' and AppNo='" + appNo + "'";//rajkumar 10-1-2018
                                dtProjectName = dtProjectPaper.DefaultView.ToTable();
                                if (dtProjectName.Rows.Count > 0)
                                {
                                    subjectName = Convert.ToString(dtProjectName.Rows[0]["ProjectPaperName"]).Trim();
                                }
                            }
                            DataView dvSplSubject = new DataView();
                            if (dtSplSubjectMark.Rows.Count > 0)
                            {
                                dtSplSubjectMark.DefaultView.RowFilter = "roll_no='" + rollNo + "' and semester='" + sem + "' and subject_code='" + subjectCode + "'";
                                dvSplSubject = dtSplSubjectMark.DefaultView;
                            }
                            if (dvSplSubject.Count > 0 && MarkOrExempted.Trim() == "0")
                            {
                                continue;
                            }
                            string gradeCalc = string.Empty;

                            bool.TryParse(labSubject.Trim(), out isLab);
                            bool.TryParse(electiveSubject.Trim(), out isElective);
                            bool.TryParse(projectOrThesis.Trim(), out isProjectThesis);
                            bool.TryParse(passOrFail.Trim(), out isPassOrFail);

                            string displayPartType = string.Empty;
                            string displayMaxINT = string.Empty;
                            string displayINT = string.Empty;
                            string displayMaxEXT = string.Empty;
                            string displayEXT = string.Empty;
                            string displayMaxTOT = string.Empty;
                            string displayTOT = string.Empty;
                            string displayGP = string.Empty;
                            string displayWM = string.Empty;
                            string displayResult = string.Empty;
                            string displayGrade = string.Empty;
                            string displayClassify = string.Empty;
                            string displayCreditPoint = string.Empty;

                            bool isOnlyESA = false;
                            bool isOnlyICA = false;

                            double internalMarks = 0;
                            double minInternalMarks = 0;
                            double maxInternalMarks = 0;
                            double.TryParse(internalMark.Trim(), out internalMarks);
                            double.TryParse(minInternalMark.Trim(), out minInternalMarks);
                            double.TryParse(maxInternalMark.Trim(), out maxInternalMarks);

                            double externalMarks = 0;
                            double minExternalMarks = 0;
                            double maxExternalMarks = 0;
                            double.TryParse(externalMark.Trim(), out externalMarks);
                            double.TryParse(minExternalMark.Trim(), out minExternalMarks);
                            double.TryParse(maxExternalMark.Trim(), out maxExternalMarks);

                            double totalMarks = 0;
                            double minTotalMarks = 0;
                            double maxTotalMarks = 0;
                            double.TryParse(totalMark.Trim(), out totalMarks);
                            double.TryParse(minInternalMark.Trim(), out minTotalMarks);
                            double.TryParse(maxInternalMark.Trim(), out maxTotalMarks);

                            double outOf100s = 0;
                            double outOf10s = 0;
                            double.TryParse(outOf10.Trim(), out outOf10s);
                            double.TryParse(outOf100.Trim(), out outOf100s);

                            double creditPoints = 0;
                            double.TryParse(creditPoint.Trim(), out creditPoints);

                            if (isLab)
                                hasLab = true;
                            displayPartType = (partType.Trim() == "0") ? "" : ((isLab) ? "\t" : "") + partType + ((isLab) ? "*" : "");
                            displayMaxINT = maxInternalMark;
                            displayINT = internalMark.PadLeft(2, '0');
                            displayMaxEXT = maxExternalMark;
                            displayEXT = externalMark.PadLeft(2, '0');
                            displayMaxTOT = maxTotalMark;
                            displayTOT = totalMark.PadLeft(2, '0');
                            displayGP = outOf10;
                            displayWM = outOf100;
                            displayResult = result;
                            displayCreditPoint = creditPoint;
                            double gp = 0;
                            string gradePoint = string.Empty;
                            string weightedMark = string.Empty;
                            string classify = string.Empty;
                            string grade = string.Empty;

                            double secureMarksoutOf100 = 0;
                            double.TryParse(outOf100.Trim(), out secureMarksoutOf100);
                            outOf100 = Convert.ToString(secureMarksoutOf100).Trim();
                            getGradeDetails(dtGradeDetails, outOf100, gradeSet, collegeCode, batchYearSub, degreeCodeSub, subjectSemester, ref  gradePoint, ref  grade, ref  classify, ref gp);
                            displayGrade = grade;
                            weightedMarks = creditPoints * gp;
                            displayGP = string.Format("{0:0.0}", gp);
                            displayWM = string.Format("{0:00.00}", weightedMarks);

                            if (internalMarks < 0)
                            {
                                displayINT = "AA";
                                displayResult = "AAA";
                                displayGP = "0.0";
                                displayWM = "00.00";
                                displayTOT = "***";
                                //resu = false;
                                if (subjectSemester == sem)
                                    gp_status = false;
                            }
                            else
                            {
                                displayINT = Convert.ToString(internalMarks).PadLeft(2, '0');
                            }
                            if (externalMarks == -2)
                            {
                            }
                            else if (externalMarks < 0)
                            {
                                displayEXT = "AA";
                                displayResult = "AAA";
                                displayGP = "0.0";
                                displayWM = "00.00";
                                displayTOT = "***";
                                if (subjectSemester == sem)
                                    gp_status = false;
                                //resu = false;
                            }
                            else
                            {
                                displayEXT = Convert.ToString(externalMarks).PadLeft(2, '0');
                            }

                            if (string.IsNullOrEmpty(maxExternalMark) || maxExternalMark.Trim() == "0")
                            {
                                isOnlyICA = true;
                                displayEXT = "--";
                                displayMaxEXT = "--";
                            }

                            if (string.IsNullOrEmpty(maxInternalMark) || maxInternalMark.Trim() == "0")
                            {
                                isOnlyESA = true;
                                displayINT = "--";
                                displayMaxINT = "--";
                            }

                            switch (displayResult.Trim().ToLower())
                            {
                                case "pass":
                                case "p":
                                    displayResult = "P";
                                    break;
                                case "fail":
                                case "f":
                                    if (subjectSemester == sem)
                                        gp_status = false;
                                    displayResult = "\tRA";
                                    displayGP = "0.0";
                                    displayWM = "00.00";
                                    break;
                                case "whd":
                                case "wh":
                                case "www":
                                case "w":
                                case "ww":
                                case "mp":
                                case "malpractice":
                                case "mal-practice":
                                case "with held":
                                    if (subjectSemester == sem)
                                        gp_status = false;
                                    displayResult = "\tRA";
                                    displayTOT = displayINT;
                                    displayEXT = "\tMP";
                                    displayGP = "0.0";
                                    displayWM = "00.00";
                                    break;
                                case "a":
                                case "aa":
                                case "aaa":
                                case "ab":
                                case "absent":
                                    if (subjectSemester == sem)
                                        gp_status = false;
                                    displayResult = "A";
                                    displayGP = "0.0";
                                    displayWM = "00.00";
                                    displayTOT = "***";
                                    break;
                                case "null":
                                    if (subjectSemester == sem)
                                        gp_status = false;
                                    displayResult = string.Empty;
                                    displayTOT = displayINT;
                                    displayEXT = string.Empty;
                                    displayGP = "0.0";
                                    displayWM = "00.00";
                                    break;
                            }
                            if (isOnlyESA && isOnlyICA && (string.IsNullOrEmpty(maxTotalMark) || maxTotalMark.Trim() == "0"))
                            {
                                //displayINT = "--";
                                //displayMaxINT = "--";
                                //displayEXT = "--";
                                //displayMaxEXT = "--";
                                //displayTOT = "--";
                                //displayMaxTOT = "--";
                                //displayGP = "--";
                                //displayWM = "--";
                                displayINT = string.Empty;
                                displayMaxINT = string.Empty;
                                displayEXT = string.Empty;
                                displayMaxEXT = string.Empty;
                                displayTOT = string.Empty;
                                displayMaxTOT = string.Empty;
                                displayGP = string.Empty;
                                displayWM = string.Empty;
                                displayResult = string.Empty;
                                displayCreditPoint = string.Empty;
                                //displayMonthandYear = string.Empty;
                            }

                            #region Contionue On New Page


                            if (markRow % 35 == 0 && markRow != 3) //mullai
                            {

                                #region principal
                                string princisign1 = string.Empty;
                                princisign1 = "select principal_sign from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                                MemoryStream memoryStream11 = new MemoryStream();
                                DataSet dsprincisign1 = new DataSet();
                                dsprincisign1.Clear();
                                dsprincisign1.Dispose();
                                dsprincisign1 = da.select_method_wo_parameter(princisign1, "Text");
                                if (dsprincisign1.Tables.Count > 0 && dsprincisign1.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsprincisign1.Tables[0].Rows[0][0]).Trim()))
                                {
                                    byte[] file1 = (byte[])dsprincisign1.Tables[0].Rows[0][0];
                                    memoryStream11.Write(file1, 0, file1.Length);
                                    if (file1.Length > 0)
                                    {
                                        System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream11, true, true);
                                        System.Drawing.Image thumb = imgx.GetThumbnailImage(250, 250, null, IntPtr.Zero);
                                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                                        {
                                        }
                                        else
                                        {
                                            thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                        }
                                    }
                                }
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                                {
                                    PdfImage coesiImage2 = markSheetDocument.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"));
                                    markSheetPage.Add(coesiImage2, 1000, 1500, 200);

                                }
                                else
                                {
                                    PdfImage coesiImage2 = markSheetDocument.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                    markSheetPage.Add(coesiImage2, 1000, 1500, 200);

                                }

                                #endregion
                                //if (markRow != 3)
                                //{
                                markRow++;
                                pdftblMarksContent.Cell(markRow, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                pdftblMarksContent.Cell(markRow, 3).SetContent("CONTINUED IN SHEET " + sheetNo + " ....");
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, 3, markRow, 3).Cells)
                                {
                                    pc.ColSpan = 2;
                                }

                                if (hasLab)
                                {
                                    markRow++;
                                    pdftblMarksContent.Cell(markRow, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    pdftblMarksContent.Cell(markRow, 0).SetContent("* PRACTICAL");
                                    foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, 0, markRow, 0).Cells)
                                    {
                                        pc.ColSpan = 3;
                                    }
                                    markRow++;
                                }
                                pdftblPages = pdftblMarksContent.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, startingPosY, markSheetDocument.PageWidth - (2 * startingPosX), markSheetDocument.PageHeight - startingPosY));
                                markSheetPage.Add(pdftblPages);
                                pdfLine = pdftblPages.Area.UpperBound(Color.Black, 1);
                                markSheetPage.Add(pdfLine);

                                for (int col = 0; col < 15; col++)
                                {
                                    if (col >= 5 && col <= 10)
                                    {
                                        pdfLine = pdftblPages.CellArea(1, col).LowerBound(Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        //pdfLine = pdftblPages.CellArea(1, col).UpperBound(Color.Green, 1);
                                        //markSheetPage.Add(pdfLine);
                                    }
                                    else if (col != 4)
                                    {
                                        pdfLine = pdftblPages.CellArea(0, col).LowerBound(Color.Green, 1);
                                        markSheetPage.Add(pdfLine);
                                    }
                                }
                                //pdftblMarksContent.SetColumnsWidth(new int[] { 55, 70, 188, 248, 248, 65, 65, 65, 65, 65, 65, 70, 90, 105, 72 });

                                //Vertical Line 1
                                pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX, startingPosY), new Point(startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                                markSheetPage.Add(pdfLine);

                                pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), new Point(Convert.ToInt32(markSheetDocument.PageWidth - startingPosX), Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                                markSheetPage.Add(pdfLine);

                                pdfLine = new PdfLine(markSheetDocument, new Point(Convert.ToInt32(markSheetDocument.PageWidth - startingPosX), startingPosY), new Point(Convert.ToInt32(markSheetDocument.PageWidth - startingPosX), Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                                markSheetPage.Add(pdfLine);

                                pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 41, startingPosY), new Point(startingPosX + 41, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                                markSheetPage.Add(pdfLine);

                                pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 94, startingPosY), new Point(startingPosX + 94, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                                markSheetPage.Add(pdfLine);

                                pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 210, startingPosY), new Point(startingPosX + 210, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                                markSheetPage.Add(pdfLine);

                                pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 608, startingPosY), new Point(startingPosX + 608, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                                markSheetPage.Add(pdfLine);

                                pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 608, startingPosY + 30), new Point(startingPosX + 900, startingPosY + 30), Color.Green, 1);
                                markSheetPage.Add(pdfLine);



                                pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 655, startingPosY + 30), new Point(startingPosX + 655, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                                markSheetPage.Add(pdfLine);

                                pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 705, startingPosY), new Point(startingPosX + 705, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                                markSheetPage.Add(pdfLine);

                                pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 755, startingPosY + 30), new Point(startingPosX + 755, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                                markSheetPage.Add(pdfLine);

                                pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 802, startingPosY), new Point(startingPosX + 802, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                                markSheetPage.Add(pdfLine);

                                pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 852, startingPosY + 30), new Point(startingPosX + 852, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                                markSheetPage.Add(pdfLine);

                                pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 900, startingPosY), new Point(startingPosX + 900, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                                markSheetPage.Add(pdfLine);

                                pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 954, startingPosY), new Point(startingPosX + 954, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                                markSheetPage.Add(pdfLine);

                                pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 1020, startingPosY), new Point(startingPosX + 1020, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                                markSheetPage.Add(pdfLine);

                                pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 1100, startingPosY), new Point(startingPosX + 1100, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);

                                markSheetPage.Add(pdfLine);
                                tableHeight = Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight));

                                #region GPA

                                if (isNewRegulation)
                                {
                                    pdftblGPA = markSheetDocument.NewTable(fontStudentDetail, (!isFirstYear) ? 10 : 4, 6, 3);
                                    pdftblGPA.VisibleHeaders = false;
                                    pdftblGPA.SetBorders(Color.Green, 1, BorderType.ColumnsAndBounds);
                                    pdftblGPA.SetColumnsWidth(new int[] { 150, 200, 200, 200, 200, 200 });

                                    pdftblGPA.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    pdftblGPA.Cell(0, 0).SetForegroundColor(Color.Green);

                                    pdftblGPA.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    pdftblGPA.Cell(0, 1).SetForegroundColor(Color.Green);

                                    pdftblGPA.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    pdftblGPA.Cell(0, 2).SetForegroundColor(Color.Green);

                                    pdftblGPA.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    pdftblGPA.Cell(0, 3).SetForegroundColor(Color.Green);

                                    pdftblGPA.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    pdftblGPA.Cell(0, 4).SetForegroundColor(Color.Green);

                                    pdftblGPA.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    pdftblGPA.Cell(0, 5).SetForegroundColor(Color.Green);

                                    if (eduLevel.Trim().ToLower() == "ug")
                                    {
                                        pdftblGPA.Cell(0, 0).SetContent("Part");
                                        pdftblGPA.Cell(0, 1).SetContent("Part\t-\tI");
                                        pdftblGPA.Cell(0, 2).SetContent("Part\t-\tII");
                                        pdftblGPA.Cell(0, 3).SetContent("Part\t-\tIII");
                                        pdftblGPA.Cell(0, 4).SetContent("Part\t-\tIV");
                                        pdftblGPA.Cell(0, 5).SetContent("Part\t-\tV");

                                        pdftblGPA.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(1, 0).SetContent("GPA");

                                        pdftblGPA.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(1, 1).SetContent(part1GPA);

                                        pdftblGPA.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(1, 2).SetContent(part2GPA);

                                        pdftblGPA.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(1, 3).SetContent(part3GPA);

                                        pdftblGPA.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(1, 4).SetContent(part4GPA);

                                        pdftblGPA.Cell(1, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(1, 5).SetContent(part5GPA);

                                        pdftblGPA.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(2, 0).SetContent("GRADE");

                                        pdftblGPA.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(2, 1).SetContent(part1Grade);

                                        pdftblGPA.Cell(2, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(2, 2).SetContent(part2Grade);

                                        pdftblGPA.Cell(2, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(2, 3).SetContent(part3Grade);

                                        pdftblGPA.Cell(2, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(2, 4).SetContent(part4Grade);

                                        pdftblGPA.Cell(2, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(2, 5).SetContent(part5Grade);

                                        pdftblGPA.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(3, 0).SetContent("WAM");

                                        pdftblGPA.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(3, 1).SetContent(part1WAM);

                                        pdftblGPA.Cell(3, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(3, 2).SetContent(part2WAM);

                                        pdftblGPA.Cell(3, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(3, 3).SetContent(part3WAM);

                                        pdftblGPA.Cell(3, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(3, 4).SetContent(part4WAM);

                                        pdftblGPA.Cell(3, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(3, 5).SetContent(part5WAM);

                                    }
                                    else
                                    {
                                        pdftblGPA.Cell(0, 1).SetContent("Part");
                                        foreach (PdfCell pc in pdftblGPA.CellRange(0, 1, 0, 1).Cells)
                                        {
                                            pc.ColSpan = 5;
                                        }

                                        pdftblGPA.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(1, 0).SetContent("GPA");

                                        pdftblGPA.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        pdftblGPA.Cell(1, 1).SetContent((!isMPhil) ? part3GPA : part1GPA);
                                        foreach (PdfCell pc in pdftblGPA.CellRange(1, 1, 1, 1).Cells)
                                        {
                                            pc.ColSpan = 5;
                                        }

                                        pdftblGPA.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(2, 0).SetContent("GRADE");

                                        pdftblGPA.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        pdftblGPA.Cell(2, 1).SetContent((!isMPhil) ? part3Grade : part1Grade);
                                        foreach (PdfCell pc in pdftblGPA.CellRange(2, 1, 2, 1).Cells)
                                        {
                                            pc.ColSpan = 5;
                                        }

                                        pdftblGPA.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(3, 0).SetContent("WAM");

                                        pdftblGPA.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        pdftblGPA.Cell(3, 1).SetContent((!isMPhil) ? part3WAM : part1WAM);
                                        foreach (PdfCell pc in pdftblGPA.CellRange(3, 1, 3, 1).Cells)
                                        {
                                            pc.ColSpan = 5;
                                        }

                                    }

                                    pdftblGPA.Rows[0].SetCellPadding(1);

                                    #region CGPA

                                    if (!isFirstYear)
                                    {
                                        foreach (PdfCell pc in pdftblGPA.CellRange(4, 0, 4, 0).Cells)
                                        {
                                            pc.ColSpan = 6;
                                        }
                                        pdftblGPA.Cell(5, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(5, 0).SetForegroundColor(Color.Green);

                                        pdftblGPA.Cell(5, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(5, 1).SetForegroundColor(Color.Green);

                                        pdftblGPA.Cell(5, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(5, 2).SetForegroundColor(Color.Green);

                                        pdftblGPA.Cell(5, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(5, 3).SetForegroundColor(Color.Green);

                                        pdftblGPA.Cell(5, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(5, 4).SetForegroundColor(Color.Green);

                                        pdftblGPA.Cell(5, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(5, 5).SetForegroundColor(Color.Green);

                                        if (eduLevel.Trim().ToLower() == "ug")
                                        {
                                            pdftblGPA.Cell(5, 0).SetContent("Part");
                                            pdftblGPA.Cell(5, 1).SetContent("Part\t-\tI");
                                            pdftblGPA.Cell(5, 2).SetContent("Part\t-\tII");
                                            pdftblGPA.Cell(5, 3).SetContent("Part\t-\tIII");
                                            pdftblGPA.Cell(5, 4).SetContent("Part\t-\tIV");
                                            pdftblGPA.Cell(5, 5).SetContent("Part\t-\tV");

                                            pdftblGPA.Cell(6, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(6, 0).SetContent("\t\tCGPA");
                                            if (redoStudent.ToLower() == "true" || redoStudent == "1") //added by Mullai
                                            {
                                                pdftblGPA.Cell(6, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(6, 1).SetContent("0.0");

                                                pdftblGPA.Cell(6, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(6, 2).SetContent("0.0");

                                                pdftblGPA.Cell(6, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(6, 3).SetContent("0.0");

                                                pdftblGPA.Cell(6, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(6, 4).SetContent("0.0");

                                                pdftblGPA.Cell(6, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(6, 5).SetContent("0.0");

                                                pdftblGPA.Cell(7, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(7, 0).SetContent("\tGRADE");

                                                pdftblGPA.Cell(7, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(7, 1).SetContent("RA");

                                                pdftblGPA.Cell(7, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(7, 2).SetContent("RA");

                                                pdftblGPA.Cell(7, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(7, 3).SetContent("RA");

                                                pdftblGPA.Cell(7, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(7, 4).SetContent("RA");

                                                pdftblGPA.Cell(7, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(7, 5).SetContent("RA");

                                                pdftblGPA.Cell(8, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(8, 0).SetContent("\t\tCWAM");

                                                pdftblGPA.Cell(8, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(8, 1).SetContent("0");

                                                pdftblGPA.Cell(8, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(8, 2).SetContent("0");

                                                pdftblGPA.Cell(8, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(8, 3).SetContent("0");

                                                pdftblGPA.Cell(8, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(8, 4).SetContent("0");

                                                pdftblGPA.Cell(8, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(8, 5).SetContent("0");
                                            }
                                            else
                                            {
                                                pdftblGPA.Cell(6, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(6, 1).SetContent(part1CGPA);

                                                pdftblGPA.Cell(6, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(6, 2).SetContent(part2CGPA);

                                                pdftblGPA.Cell(6, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(6, 3).SetContent(part3CGPA);

                                                pdftblGPA.Cell(6, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(6, 4).SetContent(part4CGPA);

                                                pdftblGPA.Cell(6, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(6, 5).SetContent(part5CGPA);

                                                pdftblGPA.Cell(7, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(7, 0).SetContent("\tGRADE");

                                                pdftblGPA.Cell(7, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(7, 1).SetContent(part1CGrade);

                                                pdftblGPA.Cell(7, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(7, 2).SetContent(part2CGrade);

                                                pdftblGPA.Cell(7, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(7, 3).SetContent(part3CGrade);

                                                pdftblGPA.Cell(7, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(7, 4).SetContent(part4CGrade);

                                                pdftblGPA.Cell(7, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(7, 5).SetContent(part5CGrade);

                                                pdftblGPA.Cell(8, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(8, 0).SetContent("\t\tCWAM");

                                                pdftblGPA.Cell(8, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(8, 1).SetContent(part1CWAM);

                                                pdftblGPA.Cell(8, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(8, 2).SetContent(part2CWAM);

                                                pdftblGPA.Cell(8, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(8, 3).SetContent(part3CWAM);

                                                pdftblGPA.Cell(8, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(8, 4).SetContent(part4CWAM);

                                                pdftblGPA.Cell(8, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                                pdftblGPA.Cell(8, 5).SetContent(part5CWAM);
                                            }

                                        }
                                        else
                                        {
                                            pdftblGPA.Cell(5, 1).SetContent("Part");
                                            foreach (PdfCell pc in pdftblGPA.CellRange(5, 1, 5, 1).Cells)
                                            {
                                                pc.ColSpan = 5;
                                            }

                                            pdftblGPA.Cell(6, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(6, 0).SetContent("\t\tCGPA");

                                            pdftblGPA.Cell(6, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdftblGPA.Cell(6, 1).SetContent((!isMPhil) ? part3CGPA : part1CGPA);
                                            foreach (PdfCell pc in pdftblGPA.CellRange(6, 1, 6, 1).Cells)
                                            {
                                                pc.ColSpan = 5;
                                            }

                                            pdftblGPA.Cell(7, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(7, 0).SetContent("\tGRADE");

                                            pdftblGPA.Cell(7, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdftblGPA.Cell(7, 1).SetContent((!isMPhil) ? part3CGrade : part1CGrade);
                                            foreach (PdfCell pc in pdftblGPA.CellRange(7, 1, 7, 1).Cells)
                                            {
                                                pc.ColSpan = 5;
                                            }

                                            pdftblGPA.Cell(8, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(8, 0).SetContent("\t\tCWAM");

                                            pdftblGPA.Cell(8, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdftblGPA.Cell(8, 1).SetContent((!isMPhil) ? part3CWAM : part1CWAM);
                                            foreach (PdfCell pc in pdftblGPA.CellRange(8, 1, 8, 1).Cells)
                                            {
                                                pc.ColSpan = 5;
                                            }
                                            foreach (PdfCell pc in pdftblGPA.CellRange(9, 1, 9, 1).Cells)
                                            {
                                                pc.ColSpan = 5;
                                            }
                                        }
                                        pdftblGPA.Rows[5].SetCellPadding(1);

                                    }

                                    #endregion

                                    pdftblPages = pdftblGPA.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - (335 + 160)) + 5, markSheetDocument.PageWidth - (2 * startingPosX), 300));
                                    markSheetPage.Add(pdftblPages);

                                    for (int col = 0; col < ((eduLevel.Trim().ToLower() == "ug") ? 6 : 2); col++)
                                    {
                                        pdfLine = pdftblPages.CellArea(0, col).LowerBound(Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        if (!isFirstYear)
                                        {
                                            pdfLine = pdftblPages.CellArea(3, col).LowerBound(Color.Green, 1);
                                            markSheetPage.Add(pdfLine);

                                            pdfLine = pdftblPages.CellArea(5, col).LowerBound(Color.Green, 1);
                                            markSheetPage.Add(pdfLine);

                                            pdfLine = pdftblPages.CellArea(5, col).UpperBound(Color.Green, 1);
                                            markSheetPage.Add(pdfLine);

                                            pdfLine = pdftblPages.CellArea(4, 0).LeftBound(Color.White, 1);
                                            markSheetPage.Add(pdfLine);

                                            pdfLine = pdftblPages.CellArea(4, 0).RightBound(Color.White, 1);
                                            markSheetPage.Add(pdfLine);

                                        }
                                    }

                                    tableHeight += Convert.ToInt32(pdftblPages.Area.Height);

                                }

                                #endregion

                                //startingPosY += Convert.ToInt32(tableHeight) + 5;
                                //pdftxt = new PdfTextArea(fontNote, Color.Green, new PdfArea(markSheetDocument, startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - startingPosY) + 8, markSheetDocument.PageWidth - (2 * startingPosX), 100), ContentAlignment.MiddleLeft, "I.A. - Internal Assesment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks, P - Pass, RA - Reappear, A - Absent. For " + eduLevel + " Passing Minimum is \n\n" + passingIA + " in I.A., & in S.E. and Overall Passing Minimum is " + passingSE + ". For details of Grade & Grade Point see Overleaf. Any correction Invalidates.");
                                pdftxt = new PdfTextArea(fontNote, Color.Green, new PdfArea(markSheetDocument, (startingPosX + 10), tableHeight + 8, markSheetDocument.PageWidth - 20 - (2 * (startingPosX + 10)), 80), ContentAlignment.TopLeft, passingMsg);
                                markSheetPage.Add(pdftxt);

                                pdftblDOP = markSheetDocument.NewTable(fontStudentDetail, 1, 3, 5);
                                pdftblDOP.VisibleHeaders = false;
                                pdftblDOP.SetBorders(Color.Black, 1, BorderType.None);
                                pdftblDOP.SetColumnsWidth(new int[] { 130, 700 });

                                pdftblDOP.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                pdftblDOP.Cell(0, 0).SetColors(Color.Green, Color.White);
                                //pdftblDOP.Cell(0, 0).SetContent("Date of Publication\t:");
                                pdftblDOP.Cell(0, 0).SetContent("Date of Publication\t:");

                                pdftblDOP.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                pdftblDOP.Cell(0, 1).SetContent(txtdop.Text.Trim());

                                //pdftblDOP.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleRight);
                                //pdftblDOP.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                //if (isHasFolioNumber)
                                //{
                                //    pdftblDOP.Cell(0, 2).SetContent(displayFolioNumber);
                                //    pdftblDOP.Cell(0, 3).SetContent(displayFolioNumber);
                                //}

                                pdftblPages = pdftblDOP.CreateTablePage(new PdfArea(markSheetDocument, startingPosX - 5, tableHeight + 88, markSheetDocument.PageWidth - (2 * startingPosX), 100));
                                markSheetPage.Add(pdftblPages);

                                pdftblFooter = markSheetDocument.NewTable(fontStudentDetail, 1, 3, 5);
                                pdftblFooter.VisibleHeaders = false;
                                pdftblFooter.SetBorders(Color.Black, 1, BorderType.None);
                                pdftblFooter.SetColumnsWidth(new int[] { 280, 200, 280 });

                                pdftblFooter.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblFooter.Cell(0, 0).SetContent("");//coeName

                                pdftblFooter.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblFooter.Cell(0, 1).SetContent("");

                                pdftblFooter.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblFooter.Cell(0, 2).SetContent("");//principalName

                                //pdftblFooter.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //pdftblFooter.Cell(1, 0).SetContent("CONTROLLER OF EXAMINATIONS");

                                //pdftblFooter.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //pdftblFooter.Cell(1, 1).SetContent("College Seal");

                                //pdftblFooter.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //pdftblFooter.Cell(1, 2).SetContent("PRINCIPAL");

                                pdftblPages = pdftblFooter.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - 60), markSheetDocument.PageWidth - (2 * startingPosX), 50));
                                markSheetPage.Add(pdftblPages);

                                isSheetsSaved = true;
                                markSheetPage.SaveToDocument();
                                //}

                                startingPosX = 10;
                                startingPosY = 240;

                                markSheetPage = markSheetDocument.NewPage();

                                pdftxt = new PdfTextArea(fontStatementHeading, Color.Green, new PdfArea(markSheetDocument, startingPosX, 187, markSheetDocument.PageWidth - (2 * startingPosX), 30), ContentAlignment.MiddleCenter, "STATEMENT OF MARKS - " + eduLevel);
                                markSheetPage.Add(pdftxt);

                                pdftblStudentDetails = markSheetDocument.NewTable(fontStudentDetail, 2, 5, 4);
                                pdftblStudentDetails.VisibleHeaders = false;
                                pdftblStudentDetails.SetBorders(Color.Black, 1, BorderType.None);
                                //pdftblStudentDetails.SetColumnsWidth(new int[] { 100, 950, 185, 20, 220 });
                                pdftblStudentDetails.SetColumnsWidth(new int[] { 80, 969, 150, 15, 230 });

                                //pdftblStudentDetails.Rows[0].SetCellPadding(1);
                                //pdftblStudentDetails.Rows[1].SetCellPadding((studentName.Length > 15) ? 1 : 6);
                                //pdftblStudentDetails.Rows[2].SetCellPadding(1);

                                //pdftblStudentDetails.Rows[0].SetRowHeight(30);
                                //pdftblStudentDetails.Rows[1].SetRowHeight(30);
                                //pdftblStudentDetails.Rows[2].SetRowHeight(30);

                                //pdftblStudentDetails.Cell(0, 2).SetCellPadding(2);
                                pdftblStudentDetails.Cell(0, 2).SetContentAlignment(ContentAlignment.TopLeft);
                                pdftblStudentDetails.Cell(0, 2).SetContent("Register No.");
                                //pdftblStudentDetails.Cell(0, 2).SetCellPadding(1);
                                pdftblStudentDetails.Cell(0, 2).SetForegroundColor(Color.Green);

                                pdftblStudentDetails.Cell(0, 3).SetContentAlignment(ContentAlignment.TopCenter);
                                pdftblStudentDetails.Cell(0, 3).SetContent(":");
                                //pdftblStudentDetails.Cell(0, 3).SetCellPadding(1);
                                pdftblStudentDetails.Cell(0, 3).SetForegroundColor(Color.Green);

                                pdftblStudentDetails.Cell(0, 4).SetContentAlignment(ContentAlignment.TopLeft);
                                pdftblStudentDetails.Cell(0, 4).SetContent(registerNo);
                                //pdftblStudentDetails.Cell(0, 4).SetCellPadding(1);

                                pdftblStudentDetails.Cell(1, 0).SetContentAlignment(ContentAlignment.BottomLeft);
                                pdftblStudentDetails.Cell(1, 0).SetContent("Name : ");
                                //pdftblStudentDetails.Cell(1, 0).SetCellPadding(1);
                                pdftblStudentDetails.Cell(1, 0).SetForegroundColor(Color.Green);

                                pdftblStudentDetails.Cell(1, 1).SetContentAlignment(ContentAlignment.BottomLeft);
                                pdftblStudentDetails.Cell(1, 1).SetContent(studentName);
                                //pdftblStudentDetails.Cell(1, 1).SetCellPadding(1);
                                //foreach (PdfCell pc in pdftblStudentDetails.CellRange(1, 1, 1, 1).Cells)
                                //{
                                //    pc.ColSpan = 2;
                                //}

                                pdftblStudentDetails.Cell(1, 2).SetContentAlignment(ContentAlignment.BottomLeft);
                                pdftblStudentDetails.Cell(1, 2).SetContent("Date of Birth");
                                //pdftblStudentDetails.Cell(1, 2).SetCellPadding(1);
                                pdftblStudentDetails.Cell(1, 2).SetForegroundColor(Color.Green);

                                pdftblStudentDetails.Cell(1, 3).SetContentAlignment(ContentAlignment.BottomCenter);
                                pdftblStudentDetails.Cell(1, 3).SetContent(":");
                                //pdftblStudentDetails.Cell(1, 3).SetCellPadding(1);
                                pdftblStudentDetails.Cell(1, 3).SetForegroundColor(Color.Green);

                                pdftblStudentDetails.Cell(1, 4).SetContentAlignment(ContentAlignment.BottomLeft);
                                pdftblStudentDetails.Cell(1, 4).SetContent(dateOfBirth);
                                //pdftblStudentDetails.Cell(1, 4).SetCellPadding(1);

                                //pdftblStudentDetails.Cell(2, 0).SetContentAlignment(ContentAlignment.BottomLeft);
                                //pdftblStudentDetails.Cell(2, 0).SetContent("Degree & Branch :");
                                //pdftblStudentDetails.Cell(2, 0).SetCellPadding(1);
                                //pdftblStudentDetails.Cell(2, 0).SetForegroundColor(Color.Green);
                                //foreach (PdfCell pc in pdftblStudentDetails.CellRange(2, 0, 2, 0).Cells)
                                //{
                                //    pc.ColSpan = 2;
                                //}                        

                                //pdftblStudentDetails.Cell(2, 2).SetContentAlignment(ContentAlignment.BottomLeft);
                                //pdftblStudentDetails.Cell(2, 2).SetContent(courseName.Trim() + " - " + departmentName);
                                //pdftblStudentDetails.Cell(2, 2).SetCellPadding(1);

                                //pdftblStudentDetails.Cell(2, 3).SetContentAlignment(ContentAlignment.BottomLeft);
                                //pdftblStudentDetails.Cell(2, 3).SetContent("Month & Year");
                                //pdftblStudentDetails.Cell(2, 3).SetForegroundColor(Color.Green);

                                //pdftblStudentDetails.Cell(2, 4).SetContentAlignment(ContentAlignment.BottomCenter);
                                //pdftblStudentDetails.Cell(2, 4).SetContent(":");
                                //pdftblStudentDetails.Cell(2, 4).SetForegroundColor(Color.Green);

                                //pdftblStudentDetails.Cell(2, 5).SetContentAlignment(ContentAlignment.BottomLeft);
                                //pdftblStudentDetails.Cell(2, 5).SetContent(displayMonthYear);

                                pdftblPages = pdftblStudentDetails.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, startingPosY, markSheetDocument.PageWidth - (2 * startingPosX), 150));
                                markSheetPage.Add(pdftblPages);
                                tableHeight = pdftblPages.Area.Height;
                                startingPosY += Convert.ToInt32(tableHeight);

                                pdftblStudentDetails = markSheetDocument.NewTable(fontStudentDetail, 1, 5, 4);
                                pdftblStudentDetails.VisibleHeaders = false;
                                pdftblStudentDetails.SetBorders(Color.Black, 1, BorderType.None);
                                //pdftblStudentDetails.SetColumnsWidth(new int[] { 200, 850, 185, 20, 220 });
                                pdftblStudentDetails.SetColumnsWidth(new int[] { 180, 869, 150, 15, 230 });

                                pdftblStudentDetails.Cell(0, 0).SetContentAlignment(ContentAlignment.BottomLeft);
                                pdftblStudentDetails.Cell(0, 0).SetContent("Degree & Branch :");
                                //pdftblStudentDetails.Cell(0, 0).SetCellPadding(1);
                                pdftblStudentDetails.Cell(0, 0).SetForegroundColor(Color.Green);
                                //foreach (PdfCell pc in pdftblStudentDetails.CellRange(0, 0, 0, 0).Cells)
                                //{
                                //    pc.ColSpan = 2;
                                //}

                                pdftblStudentDetails.Cell(0, 1).SetContentAlignment(ContentAlignment.BottomLeft);
                                pdftblStudentDetails.Cell(0, 1).SetContent(courseName.Trim() + " - " + departmentName);
                                //pdftblStudentDetails.Cell(0, 1).SetCellPadding(1);

                                pdftblStudentDetails.Cell(0, 2).SetContentAlignment(ContentAlignment.BottomLeft);
                                pdftblStudentDetails.Cell(0, 2).SetContent("Month & Year");
                                pdftblStudentDetails.Cell(0, 2).SetForegroundColor(Color.Green);

                                pdftblStudentDetails.Cell(0, 3).SetContentAlignment(ContentAlignment.BottomCenter);
                                pdftblStudentDetails.Cell(0, 3).SetContent(":");
                                pdftblStudentDetails.Cell(0, 3).SetForegroundColor(Color.Green);

                                pdftblStudentDetails.Cell(0, 4).SetContentAlignment(ContentAlignment.BottomLeft);
                                pdftblStudentDetails.Cell(0, 4).SetContent(displayMonthYear);

                                pdftblPages = pdftblStudentDetails.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, startingPosY, markSheetDocument.PageWidth - (2 * startingPosX), 100));
                                markSheetPage.Add(pdftblPages);
                                tableHeight = pdftblPages.Area.Height;
                                startingPosY += Convert.ToInt32(tableHeight) + 5;
                                //magesh 22/2/18
                                //pdftblPages = pdftblStudentDetails.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, startingPosY, markSheetDocument.PageWidth - (2 * startingPosX), 200));
                                //markSheetPage.Add(pdftblPages);
                                //tableHeight = pdftblPages.Area.Height;
                                //startingPosY += Convert.ToInt32(tableHeight) + 5;
                                //magesh 22/2/18
                                startingPosY = 335;
                                pdftblMarksContent = markSheetDocument.NewTable(fontMarkStatement, dtStudentsMarkList.Rows.Count + semRow, 15, 5);
                                pdftblMarksContent.VisibleHeaders = false;
                                pdftblMarksContent.SetBorders(Color.Green, 1, BorderType.None);
                                //pdftblMarksContent.SetColumnsWidth(new int[] { 55, 70, 188, 248, 248, 65, 65, 65, 65, 65, 65, 70, 90, 105, 72 });
                                //pdftblMarksContent.SetColumnsWidth(new int[] { 55, 70, 168, 258, 258, 65, 65, 65, 65, 65, 65, 70, 90, 105, 72 });
                                pdftblMarksContent.SetColumnsWidth(new int[] { 55, 70, 158, 268, 258, 65, 65, 65, 65, 65, 65, 70, 90, 105, 72 });

                                pdftblMarksContent.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(0, 0).SetContent("Part");
                                pdftblMarksContent.Cell(0, 0).SetCellPadding(3);
                                pdftblMarksContent.Cell(0, 0).SetForegroundColor(Color.Green);
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 0, 0, 0).Cells)
                                {
                                    pc.RowSpan = 2;
                                }

                                pdftblMarksContent.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(0, 1).SetContent("Sem");
                                pdftblMarksContent.Cell(0, 1).SetCellPadding(3);
                                pdftblMarksContent.Cell(0, 1).SetForegroundColor(Color.Green);
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 1, 0, 1).Cells)
                                {
                                    pc.RowSpan = 2;
                                }

                                pdftblMarksContent.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(0, 2).SetContent("Course Code");
                                pdftblMarksContent.Cell(0, 2).SetCellPadding(3);
                                pdftblMarksContent.Cell(0, 2).SetForegroundColor(Color.Green);
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 2, 0, 2).Cells)
                                {
                                    pc.RowSpan = 2;
                                }

                                pdftblMarksContent.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(0, 3).SetContent("Course Title");
                                pdftblMarksContent.Cell(0, 3).SetCellPadding(3);
                                pdftblMarksContent.Cell(0, 3).SetForegroundColor(Color.Green);
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 3, 0, 3).Cells)
                                {
                                    pc.RowSpan = 2;
                                    pc.ColSpan = 2;
                                }
                                pdftblMarksContent.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(0, 5).SetContent("I.A.");
                                pdftblMarksContent.Cell(0, 5).SetCellPadding(3);
                                pdftblMarksContent.Cell(0, 5).SetForegroundColor(Color.Green);
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 5, 0, 5).Cells)
                                {
                                    pc.ColSpan = 2;
                                }
                                pdftblMarksContent.Cell(1, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(1, 5).SetContent("Max.");
                                pdftblMarksContent.Cell(1, 5).SetCellPadding(3);
                                pdftblMarksContent.Cell(1, 5).SetForegroundColor(Color.Green);
                                pdftblMarksContent.Cell(1, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(1, 6).SetContent("Sec.");
                                pdftblMarksContent.Cell(1, 6).SetCellPadding(3);
                                pdftblMarksContent.Cell(1, 6).SetForegroundColor(Color.Green);

                                pdftblMarksContent.Cell(0, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(0, 7).SetContent("S.E.");
                                pdftblMarksContent.Cell(0, 7).SetCellPadding(3);
                                pdftblMarksContent.Cell(0, 7).SetForegroundColor(Color.Green);
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 7, 0, 7).Cells)
                                {
                                    pc.ColSpan = 2;
                                }
                                pdftblMarksContent.Cell(1, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(1, 7).SetContent("Max.");
                                pdftblMarksContent.Cell(1, 7).SetCellPadding(3);
                                pdftblMarksContent.Cell(1, 7).SetForegroundColor(Color.Green);
                                pdftblMarksContent.Cell(1, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(1, 8).SetContent("Sec.");
                                pdftblMarksContent.Cell(1, 8).SetCellPadding(3);
                                pdftblMarksContent.Cell(1, 8).SetForegroundColor(Color.Green);

                                pdftblMarksContent.Cell(0, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(0, 9).SetContent("Total");
                                pdftblMarksContent.Cell(0, 9).SetCellPadding(3);
                                pdftblMarksContent.Cell(0, 9).SetForegroundColor(Color.Green);
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 9, 0, 9).Cells)
                                {
                                    pc.ColSpan = 2;
                                }
                                pdftblMarksContent.Cell(1, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(1, 9).SetContent("Max.");
                                pdftblMarksContent.Cell(1, 9).SetCellPadding(3);
                                pdftblMarksContent.Cell(1, 9).SetForegroundColor(Color.Green);
                                pdftblMarksContent.Cell(1, 10).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(1, 10).SetContent("Sec.");
                                pdftblMarksContent.Cell(1, 10).SetCellPadding(3);
                                pdftblMarksContent.Cell(1, 10).SetForegroundColor(Color.Green);

                                pdftblMarksContent.Cell(0, 11).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(0, 11).SetContent("Credit Earned");
                                pdftblMarksContent.Cell(0, 11).SetCellPadding(3);
                                pdftblMarksContent.Cell(0, 11).SetForegroundColor(Color.Green);
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 11, 0, 11).Cells)
                                {
                                    pc.RowSpan = 2;
                                }

                                pdftblMarksContent.Cell(0, 12).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(0, 12).SetContent("Grade Point");
                                pdftblMarksContent.Cell(0, 12).SetCellPadding(3);
                                pdftblMarksContent.Cell(0, 12).SetForegroundColor(Color.Green);
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 12, 0, 12).Cells)
                                {
                                    pc.RowSpan = 2;
                                }

                                pdftblMarksContent.Cell(0, 13).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(0, 13).SetContent("Weighted Marks");
                                pdftblMarksContent.Cell(0, 13).SetCellPadding(3);
                                pdftblMarksContent.Cell(0, 13).SetForegroundColor(Color.Green);
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 13, 0, 13).Cells)
                                {
                                    pc.RowSpan = 2;
                                }

                                pdftblMarksContent.Cell(0, 14).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(0, 14).SetCellPadding(3);
                                pdftblMarksContent.Cell(0, 14).SetContent("Result");
                                pdftblMarksContent.Cell(0, 14).SetForegroundColor(Color.Green);
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(0, 14, 0, 14).Cells)
                                {
                                    pc.RowSpan = 2;
                                }
                                markRow = 3;
                                subMarkRow = 0;
                            }

                            #endregion

                            if (issupl && !ins)
                            {
                                ins = true;
                                pdftblMarksContent.Cell(markRow, 3).SetCellPadding(6);
                                //if(issupl)
                                //    pdftblMarksContent.Cell(markRow + 1, 3).SetContent("INSTANT(S) RESULT");
                                //else
                                pdftblMarksContent.Cell(markRow + 1, 3).SetContent("INSTANT(S) RESULT");

                                pdftblMarksContent.Cell(markRow + 1, 3).SetCellPadding(1);
                                pdftblMarksContent.Cell(markRow + 1, 3).SetContentAlignment(ContentAlignment.BottomCenter);
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow + 1, 3, markRow + 1, 3).Cells)
                                {
                                    pc.ColSpan = 2;
                                }
                                pdftblMarksContent.Cell(markRow + 2, 3).SetContent("-----------------------------");
                                pdftblMarksContent.Cell(markRow + 2, 3).SetContentAlignment(ContentAlignment.TopCenter);
                                pdftblMarksContent.Cell(markRow + 2, 3).SetCellPadding(0);
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow + 2, 3, markRow + 2, 3).Cells)
                                {
                                    pc.ColSpan = 2;
                                }
                                //pdftblMarksContent.Cell(markRow + 3, 3).SetCellPadding(6);
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow + 3, 3, markRow + 3, 3).Cells)
                                {
                                    pc.ColSpan = 2;
                                }
                                markRow += 4;
                            }
                            else if (subjectSemester != sem && !issupl)
                            {
                                arrearSubject = true;
                                if (!hasArrear)
                                {

                                    arrearresult = true;
                                    pdftblMarksContent.Cell(markRow, 3).SetCellPadding(6);
                                    //if(issupl)
                                    //    pdftblMarksContent.Cell(markRow + 1, 3).SetContent("INSTANT(S) RESULT");
                                    //else
                                    pdftblMarksContent.Cell(markRow + 1, 3).SetContent("ARREAR(S) RESULT");

                                    pdftblMarksContent.Cell(markRow + 1, 3).SetCellPadding(1);
                                    pdftblMarksContent.Cell(markRow + 1, 3).SetContentAlignment(ContentAlignment.BottomCenter);
                                    foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow + 1, 3, markRow + 1, 3).Cells)
                                    {
                                        pc.ColSpan = 2;
                                    }
                                    pdftblMarksContent.Cell(markRow + 2, 3).SetContent("-----------------------------");
                                    pdftblMarksContent.Cell(markRow + 2, 3).SetContentAlignment(ContentAlignment.TopCenter);
                                    pdftblMarksContent.Cell(markRow + 2, 3).SetCellPadding(0);
                                    foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow + 2, 3, markRow + 2, 3).Cells)
                                    {
                                        pc.ColSpan = 2;
                                    }
                                    //pdftblMarksContent.Cell(markRow + 3, 3).SetCellPadding(6);
                                    foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow + 3, 3, markRow + 3, 3).Cells)
                                    {
                                        pc.ColSpan = 2;
                                    }
                                    markRow += 4;
                                    hasArrear = true;
                                }
                            }
                            else
                            {
                                hasRegular = true;
                            }

                            if (markRow == 3)
                            {

                                if (dicSheetRow.ContainsKey(sheetNo))
                                    dicSheetRow[sheetNo] = markRow;
                                else
                                    dicSheetRow.Add(sheetNo, markRow);
                                int maxRows = dicSheetRow.Count;
                                //pdftblMarksContent.Cell(markRow, 3).SetCellPadding(5);
                                //pdftblMarksContent.Cell(markRow, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                //pdftblMarksContent.Cell(markRow, 3).SetContent("--- SHEET " + sheetNo + " OF " + totalSheetRequired + "  ---");
                                //foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, 3, markRow, 3).Cells)
                                //{
                                //    pc.ColSpan = 2;
                                //}
                                //foreach (KeyValuePair<int, int> sheet in dicSheetRow)
                                //{
                                //    int row = sheet.Value;
                                //    pdftblMarksContent.Cell(row, 3).SetCellPadding(5);
                                //    pdftblMarksContent.Cell(row, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                //    pdftblMarksContent.Cell(row, 3).SetContent("--- SHEET " + sheet.Key + " OF " + maxRows + "  ---");
                                //    foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, 3, markRow, 3).Cells)
                                //    {
                                //        pc.ColSpan = 2;
                                //    }

                                //}
                                markRow++;
                            }

                            pdftblMarksContent.Cell(markRow, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblMarksContent.Cell(markRow, 0).SetContent(displayPartType);

                            pdftblMarksContent.Cell(markRow, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblMarksContent.Cell(markRow, 1).SetContent(subjectSemester);

                            pdftblMarksContent.Cell(markRow, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdftblMarksContent.Cell(markRow, 2).SetContent("\t\t" + subjectCode);

                            pdftblMarksContent.Cell(markRow, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdftblMarksContent.Cell(markRow, 3).SetContent(subjectName);
                            foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, 3, markRow, 3).Cells)
                            {
                                pc.ColSpan = 2;
                            }
                            if (MarkOrExempted.Trim() == "0")
                            {
                                pdftblMarksContent.Cell(markRow, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(markRow, 5).SetContent(displayMaxINT);

                                pdftblMarksContent.Cell(markRow, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(markRow, 6).SetContent(displayINT);

                                pdftblMarksContent.Cell(markRow, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(markRow, 7).SetContent(displayMaxEXT);

                                pdftblMarksContent.Cell(markRow, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(markRow, 8).SetContent(displayEXT);

                                pdftblMarksContent.Cell(markRow, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(markRow, 9).SetContent(displayMaxTOT);

                                pdftblMarksContent.Cell(markRow, 10).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(markRow, 10).SetContent(displayTOT);

                                pdftblMarksContent.Cell(markRow, 11).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(markRow, 11).SetContent((creditPoints != 0) ? displayCreditPoint : "");

                                pdftblMarksContent.Cell(markRow, 12).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(markRow, 12).SetContent(displayGP);

                                pdftblMarksContent.Cell(markRow, 13).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(markRow, 13).SetContent(displayWM);

                                pdftblMarksContent.Cell(markRow, 14).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(markRow, 14).SetContent(displayResult);
                            }
                            else
                            {
                                pdftblMarksContent.Cell(markRow, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                pdftblMarksContent.Cell(markRow, 5).SetContent("Grade : " + Message);
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, 5, markRow, 5).Cells)
                                {
                                    pc.ColSpan = 4;
                                }
                                displayCreditPoint = creditPoint;
                                pdftblMarksContent.Cell(markRow, 11).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(markRow, 11).SetContent((creditPoints == 0) ? "" : displayCreditPoint);
                            }
                            subMarkRow++;
                            markRow++;
                        }
                        if (dicSheetRow.Count > 1)
                        {
                            int maxRows = dicSheetRow.Count;
                            foreach (KeyValuePair<int, int> sheet in dicSheetRow)
                            {
                                int row = sheet.Value;
                                pdftblMarksContent.Cell(row, 3).SetCellPadding(5);
                                pdftblMarksContent.Cell(row, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                pdftblMarksContent.Cell(row, 3).SetContent("--- SHEET " + sheet.Key + " OF " + maxRows + "  ---");
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, 3, markRow, 3).Cells)
                                {
                                    pc.ColSpan = 2;
                                }
                            }
                        }

                        pdftblMarksContent.Cell(markRow + 1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(markRow + 1, 3).SetContent(">>>>>\tEND OF STATEMENT\t<<<<<");
                        pdftblMarksContent.Cell(markRow + 1, 3).SetCellPadding(10);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow + 1, 3, markRow + 1, 3).Cells)
                        {
                            pc.ColSpan = 2;
                        }
                        markRow++;
                        if (!isNewRegulation && (redoStudent.Trim() != "1" || redoStudent.Trim().ToLower() != "true") && hasRegular && !issupl)
                        {
                            markRow++;
                            pdftblMarksContent.Cell(markRow, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            if (gp_status == true)
                            {
                                pdftblMarksContent.Cell(markRow, 3).SetContent("G.P.A. FOR PART-3   :   " + ((!isMPhil) ? part3GPA + " ( " + part3Grade + " ) " : part1GPA + " ( " + part1Grade + " ) "));
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, 3, markRow, 3).Cells)
                                {
                                    pc.ColSpan = 2;
                                }
                            }
                            else
                            {
                                pdftblMarksContent.Cell(markRow, 3).SetContent("G.P.A.  :   NOT ELIGIBLE");
                                foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, 3, markRow, 3).Cells)
                                {
                                    pc.ColSpan = 2;
                                }
                            }
                            //G.P.A IS FURNISHED ONLY FOR THE CURRENT SEMESTER
                            //if (!isNewRegulation && hasArrear)
                            //{
                            //    //markRow++;
                            //    //pdftblMarksContent.Cell(markRow, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            //    //pdftblMarksContent.Cell(markRow, 0).SetContent("G.P.A IS FURNISHED ONLY FOR THE CURRENT SEMESTER");
                            //    //foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, 0, markRow, 0).Cells)
                            //    //{
                            //    //    pc.ColSpan = 6;
                            //    //}
                            //    pdftxt = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(markSheetDocument, 390, 795, 300, 25), System.Drawing.ContentAlignment.MiddleLeft, "G.P.A. IS FURNISHED ONLY FOR THE CURRENT SEMESTER");
                            //    markSheetPage.Add(pdftxt);
                            //}
                            markRow++;
                        }
                        if (hasLab)
                        {
                            markRow++;
                            pdftblMarksContent.Cell(markRow, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdftblMarksContent.Cell(markRow, 0).SetContent("* PRACTICAL");
                            pdftblMarksContent.Cell(markRow, 0).SetCellPadding(8);
                            foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, 0, markRow, 0).Cells)
                            {
                                pc.ColSpan = 3;
                            }
                            markRow++;
                        }

                        pdftblPages = pdftblMarksContent.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, startingPosY, markSheetDocument.PageWidth - (2 * startingPosX), markSheetDocument.PageHeight - startingPosY));
                        markSheetPage.Add(pdftblPages);

                        pdfLine = pdftblPages.Area.UpperBound(Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        for (int col = 0; col < 15; col++)
                        {
                            if (col >= 5 && col <= 10)
                            {
                                pdfLine = pdftblPages.CellArea(1, col).LowerBound(Color.Green, 1);
                                markSheetPage.Add(pdfLine);

                                //pdfLine = pdftblPages.CellArea(1, col).UpperBound(Color.Green, 1);
                                //markSheetPage.Add(pdfLine);
                            }
                            else if (col != 4)
                            {
                                pdfLine = pdftblPages.CellArea(0, col).LowerBound(Color.Green, 1);
                                markSheetPage.Add(pdfLine);
                            }
                        }
                        //pdftblMarksContent.SetColumnsWidth(new int[] { 55, 70, 188, 248, 248, 65, 65, 65, 65, 65, 65, 70, 90, 105, 72 });

                        if (!isNewRegulation && hasArrear && (redoStudent.Trim() != "1" || redoStudent.Trim().ToLower() != "true") && hasRegular && !issupl)
                        {
                            //markRow++;
                            //pdftblMarksContent.Cell(markRow, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            //pdftblMarksContent.Cell(markRow, 0).SetContent("G.P.A IS FURNISHED ONLY FOR THE CURRENT SEMESTER");
                            //foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, 0, markRow, 0).Cells)
                            //{
                            //    pc.ColSpan = 6;
                            //}
                            pdftxt = new PdfTextArea(fontDate, System.Drawing.Color.Black, new PdfArea(markSheetDocument, startingPosX, Convert.ToDouble(markSheetDocument.PageHeight - (startingPosY + tableLineHeight)) - 25, markSheetDocument.PageWidth - (2 * startingPosX), 25), System.Drawing.ContentAlignment.MiddleRight, "G.P.A. IS FURNISHED ONLY FOR THE CURRENT SEMESTER");
                            markSheetPage.Add(pdftxt);
                        }
                        //Vertical Line 1
                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX, startingPosY), new Point(startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), new Point(Convert.ToInt32(markSheetDocument.PageWidth - startingPosX), Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(Convert.ToInt32(markSheetDocument.PageWidth - startingPosX), startingPosY), new Point(Convert.ToInt32(markSheetDocument.PageWidth - startingPosX), Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 41, startingPosY), new Point(startingPosX + 41, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 94, startingPosY), new Point(startingPosX + 94, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 210, startingPosY), new Point(startingPosX + 210, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 608, startingPosY), new Point(startingPosX + 608, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 608, startingPosY + 30), new Point(startingPosX + 900, startingPosY + 30), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 655, startingPosY + 30), new Point(startingPosX + 655, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 705, startingPosY), new Point(startingPosX + 705, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 755, startingPosY + 30), new Point(startingPosX + 755, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 802, startingPosY), new Point(startingPosX + 802, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 852, startingPosY + 30), new Point(startingPosX + 852, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 900, startingPosY), new Point(startingPosX + 900, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 954, startingPosY), new Point(startingPosX + 954, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 1020, startingPosY), new Point(startingPosX + 1020, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 1100, startingPosY), new Point(startingPosX + 1100, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);
                        tableHeight = pdftblPages.Area.Height;
                        tableHeight = Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + tableLineHeight));

                        #region GPA

                        if (!issupl)
                        {

                            bool isarrearstu = true;
                            if (dtMarkDetailsOverAll.Rows.Count > 0)
                            {
                                dtMarkDetailsOverAll.DefaultView.RowFilter = "Exam_year='" + Convert.ToString(ddlYear.SelectedValue) + "' and Exam_month='" + Convert.ToString(ddlMonth.SelectedValue) + "'";
                                DataTable dvCurSubject = dtMarkDetailsOverAll.DefaultView.ToTable();
                                DataTable dvsubject = dvCurSubject.DefaultView.ToTable(true, "subject_no", "roll_no", "atmpts");
                                foreach (DataRow dts in dvsubject.Rows)
                                {
                                    string subNo = Convert.ToString(dts["subject_no"]);
                                    string roll_no = Convert.ToString(dts["roll_no"]);
                                    string markDet = Convert.ToString(dts["atmpts"]);
                                    //if (!string.IsNullOrEmpty(subNo) && !string.IsNullOrEmpty(roll_no))
                                    //{
                                    if (markDet == "1" || markDet == "0")
                                    {
                                        isarrearstu = false;
                                    }
                                    //}
                                }
                            }
                            if (isarrearstu)
                            {
                                part1Grade = "--"; part1GPA = "--"; part1WAM = "--";
                                part2Grade = "--"; part2GPA = "--"; part2WAM = "--";
                                part3Grade = "--"; part3GPA = "--"; part3WAM = "--";
                                part4Grade = "--"; part4GPA = "--"; part4WAM = "--";
                                part5Grade = "--"; part5GPA = "--"; part5WAM = "--";
                            }
                            if (hasRegular) //added by Mullai
                            {
                                if (isNewRegulation && (redoStudent.Trim() != "1" || redoStudent.Trim().ToLower() != "true"))
                                {
                                    pdftblGPA = markSheetDocument.NewTable(fontStudentDetail, (!isFirstYear) ? 10 : 4, 6, 3);
                                    pdftblGPA.VisibleHeaders = false;
                                    pdftblGPA.SetBorders(Color.Green, 1, BorderType.ColumnsAndBounds);
                                    pdftblGPA.SetColumnsWidth(new int[] { 150, 200, 200, 200, 200, 200 });

                                    pdftblGPA.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    pdftblGPA.Cell(0, 0).SetForegroundColor(Color.Green);

                                    pdftblGPA.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    pdftblGPA.Cell(0, 1).SetForegroundColor(Color.Green);

                                    pdftblGPA.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    pdftblGPA.Cell(0, 2).SetForegroundColor(Color.Green);

                                    pdftblGPA.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    pdftblGPA.Cell(0, 3).SetForegroundColor(Color.Green);

                                    pdftblGPA.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    pdftblGPA.Cell(0, 4).SetForegroundColor(Color.Green);

                                    pdftblGPA.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    pdftblGPA.Cell(0, 5).SetForegroundColor(Color.Green);

                                    if (eduLevel.Trim().ToLower() == "ug")
                                    {
                                        pdftblGPA.Cell(0, 0).SetContent("Part");
                                        pdftblGPA.Cell(0, 1).SetContent("Part\t-\tI");
                                        pdftblGPA.Cell(0, 2).SetContent("Part\t-\tII");
                                        pdftblGPA.Cell(0, 3).SetContent("Part\t-\tIII");
                                        pdftblGPA.Cell(0, 4).SetContent("Part\t-\tIV");
                                        pdftblGPA.Cell(0, 5).SetContent("Part\t-\tV");

                                        pdftblGPA.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(1, 0).SetContent("GPA");

                                        pdftblGPA.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(1, 1).SetContent(part1GPA);

                                        pdftblGPA.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(1, 2).SetContent(part2GPA);

                                        pdftblGPA.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(1, 3).SetContent(part3GPA);

                                        pdftblGPA.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(1, 4).SetContent(part4GPA);

                                        pdftblGPA.Cell(1, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(1, 5).SetContent(part5GPA);

                                        pdftblGPA.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(2, 0).SetContent("GRADE");

                                        pdftblGPA.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(2, 1).SetContent(part1Grade);

                                        pdftblGPA.Cell(2, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(2, 2).SetContent(part2Grade);

                                        pdftblGPA.Cell(2, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(2, 3).SetContent(part3Grade);

                                        pdftblGPA.Cell(2, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(2, 4).SetContent(part4Grade);

                                        pdftblGPA.Cell(2, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(2, 5).SetContent(part5Grade);

                                        pdftblGPA.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(3, 0).SetContent("WAM");

                                        pdftblGPA.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(3, 1).SetContent(part1WAM);

                                        pdftblGPA.Cell(3, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(3, 2).SetContent(part2WAM);

                                        pdftblGPA.Cell(3, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(3, 3).SetContent(part3WAM);

                                        pdftblGPA.Cell(3, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(3, 4).SetContent(part4WAM);

                                        pdftblGPA.Cell(3, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(3, 5).SetContent(part5WAM);

                                    }
                                    else
                                    {
                                        pdftblGPA.Cell(0, 1).SetContent("Part");
                                        foreach (PdfCell pc in pdftblGPA.CellRange(0, 1, 0, 1).Cells)
                                        {
                                            pc.ColSpan = 5;
                                        }

                                        pdftblGPA.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(1, 0).SetContent("GPA");

                                        pdftblGPA.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        pdftblGPA.Cell(1, 1).SetContent((!isMPhil) ? part3GPA : part1GPA);
                                        foreach (PdfCell pc in pdftblGPA.CellRange(1, 1, 1, 1).Cells)
                                        {
                                            pc.ColSpan = 5;
                                        }

                                        pdftblGPA.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(2, 0).SetContent("GRADE");

                                        pdftblGPA.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        pdftblGPA.Cell(2, 1).SetContent((!isMPhil) ? part3Grade : part1Grade);
                                        foreach (PdfCell pc in pdftblGPA.CellRange(2, 1, 2, 1).Cells)
                                        {
                                            pc.ColSpan = 5;
                                        }

                                        pdftblGPA.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(3, 0).SetContent("WAM");

                                        pdftblGPA.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        pdftblGPA.Cell(3, 1).SetContent((!isMPhil) ? part3WAM : part1WAM);
                                        foreach (PdfCell pc in pdftblGPA.CellRange(3, 1, 3, 1).Cells)
                                        {
                                            pc.ColSpan = 5;
                                        }

                                    }

                                    pdftblGPA.Rows[0].SetCellPadding(1);

                                    #region CGPA

                                    if (!isFirstYear)
                                    {
                                        foreach (PdfCell pc in pdftblGPA.CellRange(4, 0, 4, 0).Cells)
                                        {
                                            pc.ColSpan = 6;
                                        }
                                        pdftblGPA.Cell(5, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(5, 0).SetForegroundColor(Color.Green);

                                        pdftblGPA.Cell(5, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(5, 1).SetForegroundColor(Color.Green);

                                        pdftblGPA.Cell(5, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(5, 2).SetForegroundColor(Color.Green);

                                        pdftblGPA.Cell(5, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(5, 3).SetForegroundColor(Color.Green);

                                        pdftblGPA.Cell(5, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(5, 4).SetForegroundColor(Color.Green);

                                        pdftblGPA.Cell(5, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblGPA.Cell(5, 5).SetForegroundColor(Color.Green);

                                        if (eduLevel.Trim().ToLower() == "ug")
                                        {
                                            pdftblGPA.Cell(5, 0).SetContent("Part");
                                            pdftblGPA.Cell(5, 1).SetContent("Part\t-\tI");
                                            pdftblGPA.Cell(5, 2).SetContent("Part\t-\tII");
                                            pdftblGPA.Cell(5, 3).SetContent("Part\t-\tIII");
                                            pdftblGPA.Cell(5, 4).SetContent("Part\t-\tIV");
                                            pdftblGPA.Cell(5, 5).SetContent("Part\t-\tV");

                                            pdftblGPA.Cell(6, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(6, 0).SetContent("CGPA");

                                            pdftblGPA.Cell(6, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(6, 1).SetContent(part1CGPA);

                                            pdftblGPA.Cell(6, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(6, 2).SetContent(part2CGPA);

                                            pdftblGPA.Cell(6, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(6, 3).SetContent(part3CGPA);

                                            pdftblGPA.Cell(6, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(6, 4).SetContent(part4CGPA);

                                            pdftblGPA.Cell(6, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(6, 5).SetContent(part5CGPA);

                                            pdftblGPA.Cell(7, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(7, 0).SetContent("GRADE");

                                            pdftblGPA.Cell(7, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(7, 1).SetContent(part1CGrade);

                                            pdftblGPA.Cell(7, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(7, 2).SetContent(part2CGrade);

                                            pdftblGPA.Cell(7, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(7, 3).SetContent(part3CGrade);

                                            pdftblGPA.Cell(7, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(7, 4).SetContent(part4CGrade);

                                            pdftblGPA.Cell(7, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(7, 5).SetContent(part5CGrade);

                                            pdftblGPA.Cell(8, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(8, 0).SetContent("CWAM");

                                            pdftblGPA.Cell(8, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(8, 1).SetContent(part1CWAM);

                                            pdftblGPA.Cell(8, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(8, 2).SetContent(part2CWAM);

                                            pdftblGPA.Cell(8, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(8, 3).SetContent(part3CWAM);

                                            pdftblGPA.Cell(8, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(8, 4).SetContent(part4CWAM);

                                            pdftblGPA.Cell(8, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(8, 5).SetContent(part5CWAM);

                                        }
                                        else
                                        {
                                            pdftblGPA.Cell(5, 1).SetContent("Part");
                                            foreach (PdfCell pc in pdftblGPA.CellRange(5, 1, 5, 1).Cells)
                                            {
                                                pc.ColSpan = 5;
                                            }

                                            pdftblGPA.Cell(6, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(6, 0).SetContent("CGPA");

                                            pdftblGPA.Cell(6, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdftblGPA.Cell(6, 1).SetContent((!isMPhil) ? part3CGPA : part1CGPA);
                                            foreach (PdfCell pc in pdftblGPA.CellRange(6, 1, 6, 1).Cells)
                                            {
                                                pc.ColSpan = 5;
                                            }

                                            pdftblGPA.Cell(7, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(7, 0).SetContent("GRADE");

                                            pdftblGPA.Cell(7, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdftblGPA.Cell(7, 1).SetContent((!isMPhil) ? part3CGrade : part1CGrade);
                                            foreach (PdfCell pc in pdftblGPA.CellRange(7, 1, 7, 1).Cells)
                                            {
                                                pc.ColSpan = 5;
                                            }

                                            pdftblGPA.Cell(8, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblGPA.Cell(8, 0).SetContent("CWAM");

                                            pdftblGPA.Cell(8, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdftblGPA.Cell(8, 1).SetContent((!isMPhil) ? part3CWAM : part1CWAM);
                                            foreach (PdfCell pc in pdftblGPA.CellRange(8, 1, 8, 1).Cells)
                                            {
                                                pc.ColSpan = 5;
                                            }
                                            foreach (PdfCell pc in pdftblGPA.CellRange(9, 1, 9, 1).Cells)
                                            {
                                                pc.ColSpan = 5;
                                            }
                                        }
                                        pdftblGPA.Rows[5].SetCellPadding(1);
                                    }

                                    #endregion

                                    pdftblPages = pdftblGPA.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - (335 + 160)) + 5, markSheetDocument.PageWidth - (2 * startingPosX), 300));
                                    markSheetPage.Add(pdftblPages);

                                    for (int col = 0; col < ((eduLevel.Trim().ToLower() == "ug") ? 6 : 2); col++)
                                    {
                                        pdfLine = pdftblPages.CellArea(0, col).LowerBound(Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        if (!isFirstYear)
                                        {
                                            pdfLine = pdftblPages.CellArea(3, col).LowerBound(Color.Green, 1);
                                            markSheetPage.Add(pdfLine);

                                            pdfLine = pdftblPages.CellArea(5, col).LowerBound(Color.Green, 1);
                                            markSheetPage.Add(pdfLine);

                                            pdfLine = pdftblPages.CellArea(5, col).UpperBound(Color.Green, 1);
                                            markSheetPage.Add(pdfLine);

                                            pdfLine = pdftblPages.CellArea(4, 0).LeftBound(Color.White, 1);
                                            markSheetPage.Add(pdfLine);

                                            pdfLine = pdftblPages.CellArea(4, 0).RightBound(Color.White, 1);
                                            markSheetPage.Add(pdfLine);

                                        }
                                    }

                                    tableHeight += Convert.ToInt32(pdftblPages.Area.Height);

                                }
                            }
                        }

                        #endregion

                        //pdftxt = new PdfTextArea(fontNote, Color.Green, new PdfArea(markSheetDocument, startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - startingPosY) + 8, markSheetDocument.PageWidth - (2 * startingPosX), 100), ContentAlignment.MiddleLeft, "I.A. - Internal Assessment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks, P - Pass, RA - Reappear, A - Absent. For " + eduLevel + " Passing Minimum is \n\n" + passingIA + " in I.A., & in S.E. and Overall Passing Minimum is " + passingSE + ". For details of Grade & Grade Point, see Overleaf. Any correction Invalidates.");
                        pdftxt = new PdfTextArea(fontNote, Color.Green, new PdfArea(markSheetDocument, (startingPosX + 10), tableHeight + 8, markSheetDocument.PageWidth - 20 - (2 * (startingPosX + 10)), 80), ContentAlignment.TopLeft, passingMsg);
                        markSheetPage.Add(pdftxt);

                        pdftblDOP = markSheetDocument.NewTable(fontStudentDetail, 1, 3, 5);
                        pdftblDOP.VisibleHeaders = false;
                        pdftblDOP.SetBorders(Color.Black, 1, BorderType.None);
                        pdftblDOP.SetColumnsWidth(new int[] { 130, 700 });

                        pdftblDOP.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        pdftblDOP.Cell(0, 0).SetColors(Color.Green, Color.White);
                        pdftblDOP.Cell(0, 0).SetContent("Date of Publication\t:");

                        pdftblDOP.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        pdftblDOP.Cell(0, 1).SetContent(txtdop.Text.Trim());

                        pdftblPages = pdftblDOP.CreateTablePage(new PdfArea(markSheetDocument, startingPosX - 5, tableHeight + 88, markSheetDocument.PageWidth - (2 * startingPosX), 100));
                        markSheetPage.Add(pdftblPages);

                        //if (hasLab)
                        //{
                        //    pdftxt = new PdfTextArea(fontDate, Color.Black, new PdfArea(markSheetDocument, 62, Convert.ToInt32(markSheetDocument.PageHeight - startingPosY) + 199, 150, 25), ContentAlignment.MiddleLeft, "* PRACTICAL");
                        //    markSheetPage.Add(pdftxt);
                        //}

                        pdftblFooter = markSheetDocument.NewTable(fontStudentDetail, 1, 3, 5);
                        pdftblFooter.VisibleHeaders = false;
                        pdftblFooter.SetBorders(Color.Black, 1, BorderType.None);
                        pdftblFooter.SetColumnsWidth(new int[] { 280, 200, 280 });

                        pdftblFooter.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblFooter.Cell(0, 0).SetContent("");//coeName

                        pdftblFooter.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblFooter.Cell(0, 1).SetContent("");

                        pdftblFooter.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblFooter.Cell(0, 2).SetContent("");//principalName

                        //pdftblFooter.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        //pdftblFooter.Cell(1, 0).SetContent("CONTROLLER OF EXAMINATIONS");

                        //pdftblFooter.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        //pdftblFooter.Cell(1, 1).SetContent("College Seal");

                        //pdftblFooter.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        //pdftblFooter.Cell(1, 2).SetContent("PRINCIPAL");

                        pdftblPages = pdftblFooter.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - 60), markSheetDocument.PageWidth - (2 * startingPosX), 50));
                        markSheetPage.Add(pdftblPages);

                        //added by Mullai
                        #region principal
                        string princisign = string.Empty;
                        princisign = "select principal_sign from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                        MemoryStream memoryStream = new MemoryStream();
                        DataSet dsprincisign = new DataSet();
                        dsprincisign.Clear();
                        dsprincisign.Dispose();
                        dsprincisign = da.select_method_wo_parameter(princisign, "Text");
                        if (dsprincisign.Tables.Count > 0 && dsprincisign.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsprincisign.Tables[0].Rows[0][0]).Trim()))
                        {
                            byte[] file = (byte[])dsprincisign.Tables[0].Rows[0][0];
                            memoryStream.Write(file, 0, file.Length);
                            if (file.Length > 0)
                            {
                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                System.Drawing.Image thumb = imgx.GetThumbnailImage(250, 250, null, IntPtr.Zero);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                                {
                                }
                                else
                                {
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                }
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                        {
                            PdfImage coesiImage2 = markSheetDocument.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"));
                            markSheetPage.Add(coesiImage2, 1000, 1520, 200);
                        }
                        else
                        {
                            PdfImage coesiImage2 = markSheetDocument.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                            markSheetPage.Add(coesiImage2, 1000, 1520, 200);
                        }

                        #endregion
                        //***

                        isSheetsSaved = true;
                        markSheetPage.SaveToDocument();
                    }
                    else
                    {
                        lstErr.Add(registerNo);
                    }

                    studRow++;
                }
                if (lstErr.Count > 0)
                {
                    lblerror.Text = " Register no " + string.Join(",", lstErr.ToArray()) + ((lstErr.Count > 1) ? "are " : " is ") + " not generated.";
                    lblerror.Visible = true;
                }
                if (isSheetsSaved)
                {
                    string filePath = HttpContext.Current.Server.MapPath("~");
                    if (filePath != "")
                    {
                        string szPath = filePath + "/Report/";
                        string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmssfff") + ".pdf";
                        if (!File.Exists(szPath + szFile))
                        {
                            markSheetDocument.SaveToFile(szPath + szFile);
                            Response.ClearHeaders();
                            Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                            Response.ContentType = "application/pdf";
                            Response.WriteFile(szPath + szFile);
                        }
                    }
                }

            }
        }
        catch (Exception ex)
        {

        }
    }

    private void ConsolidatedStatementOfMarkSheets()
    {
        try
        {
            FpSpread2.SaveChanges();
            string rollNos = string.Empty;
            string regNos = string.Empty;

            DataTable dtAllStudentsMark = new DataTable();
            DataTable dtStudentsMarkList = new DataTable();
            DataTable dtCollegeDetails = new DataTable();
            DataTable dtExamDetails = new DataTable();
            DataTable dtStudentList = new DataTable();
            DataTable dtGradeDetails = new DataTable();
            DataTable dtSpecialSubject = new DataTable();

            int startingPosX = 0;
            int startingPosY = 0;
            Font fontHeadingTop = new Font("Times New Roman", 22, FontStyle.Bold);
            Font fontStatementHeading = new Font("Arial", 20, FontStyle.Bold);
            Font fontMarkStatement = new Font("Times New Roman", 14, FontStyle.Bold);
            Font fontMarkStatement1 = new Font("Times New Roman", 13, FontStyle.Bold);
            Font fontStudentDetail = new Font("Times New Roman", 16, FontStyle.Bold);
            Font fontDate = new Font("Times New Roman", 14, FontStyle.Bold);
            Font fontNote = new Font("Times New Roman", 15, FontStyle.Regular);

            PdfDocument markSheetDocument = new PdfDocument(PdfDocumentFormat.InCentimeters(41.4, 58.73));
            PdfPage markSheetPage;
            PdfTextArea pdftxt;
            PdfImage pdfImgLogo;
            PdfTable pdftblStudentDetails;
            PdfTable pdftblMarksContent;
            PdfTable pdftblCGPA;
            PdfTable pdftblFooter;
            PdfTable pdftblDOP;
            PdfTablePage pdftblPages;
            PdfLine pdfLine;
            List<string> lstExamCode = new List<string>();
            string collegeCode = string.Empty;
            string batchYear = string.Empty;
            string degreeCode = string.Empty;
            string semester = string.Empty;
            string examYear = string.Empty;
            string examMonth = string.Empty;
            string examCode = string.Empty;

            if (ddlbatch.Items.Count == 0)
            {
                return;
            }
            else
            {
                batchYear = Convert.ToString(ddlbatch.SelectedItem.Text).Trim();
            }

            if (ddlbranch.Items.Count == 0)
            {
                return;
            }
            else
            {
                degreeCode = Convert.ToString(ddlbranch.SelectedValue).Trim();
            }
            if (ddlMonth.Items.Count == 0)
            {
                //return;
            }
            else
            {
                if (!string.IsNullOrEmpty(Convert.ToString(ddlMonth.SelectedValue).Trim()) && Convert.ToString(ddlMonth.SelectedValue).Trim() != "0")
                {
                    examMonth = Convert.ToString(ddlMonth.SelectedValue).Trim();
                }
                else
                {
                    //return;
                }
            }
            if (ddlYear.Items.Count == 0)
            {
                //return;
            }
            else
            {
                if (!string.IsNullOrEmpty(Convert.ToString(ddlYear.SelectedValue).Trim()) && Convert.ToString(ddlYear.SelectedValue).Trim() != "0")
                {
                    examYear = Convert.ToString(ddlYear.SelectedValue).Trim();
                }
                else
                {
                    //return;
                }
            }
            int studRow = 0;

            isMPhil = false;
            for (studRow = 1; studRow < FpSpread2.Sheets[0].RowCount; studRow++)
            {
                int selected = 0;
                int.TryParse(Convert.ToString(FpSpread2.Sheets[0].Cells[studRow, 4].Value).Trim(), out selected);
                if (selected == 1)
                {
                    string studentRollNo = Convert.ToString(FpSpread2.Sheets[0].Cells[studRow, 1].Text).Trim();
                    string studentRegNo = Convert.ToString(FpSpread2.Sheets[0].Cells[studRow, 2].Text).Trim();
                    if (string.IsNullOrEmpty(rollNos))
                    {
                        rollNos = "'" + studentRollNo + "'";
                    }
                    else
                    {
                        rollNos += ",'" + studentRollNo + "'";
                    }
                    if (string.IsNullOrEmpty(regNos))
                    {
                        regNos = "'" + studentRegNo + "'";
                    }
                    else
                    {
                        regNos += ",'" + studentRegNo + "'";
                    }
                }
            }
            bool isSheetsSaved = false;
            string qry = string.Empty;
            string gradeSet = string.Empty;
            if (!string.IsNullOrEmpty(rollNos) && !string.IsNullOrEmpty(batchYear) && !string.IsNullOrEmpty(degreeCode))
            {
                qry = "select r.Roll_No,r.Reg_No ,r.App_No,r.Batch_Year,r.degree_code,r.college_code,r.Stud_Name,r.Current_Semester,c.Course_Name as CourseName,Dept_name as Department,CONVERT(VARCHAR, a.dob, 103) as dob,c.edu_level,ISNULL(r.isRedo,'0') as Redo,sp.Photo,CONVERT(VARCHAR(20),R.Adm_Date,103) as ADM_DATE from applyn a,Degree dg,Department dt,Course c,Registration r left join StdPhoto sp on r.App_No=sp.app_no where c.Course_Id=dg.Course_Id and dt.Dept_Code=dg.Dept_Code and dg.Degree_Code=r.degree_code and a.app_no=r.App_No and r.college_code=c.college_code and c.college_code=dt.college_code and dt.college_code=dg.college_code and dg.college_code=r.college_code and r.Roll_No in(" + rollNos + ") order by r.Reg_No";
                dtStudentList = dirAcc.selectDataTable(qry);
                qry = "select college_code,collname,coe,category,university,address1,address2,address3,district,state,pincode,principal,coe_signature,principal_sign,phoneno,logo1,logo2,affliatedby,website,email from collinfo";
                dtCollegeDetails = dirAcc.selectDataTable(qry);
                qry = " Select m.roll_no,sm.Batch_Year,sm.degree_code,ed.Exam_year,ed.Exam_Month,upper(convert(varchar(12),DATENAME(month,DateAdd(month,ed.Exam_Month,-1)))) as Month_Name,ed.Current_Semester,sm.semester,s.subject_code,s.subject_name,s.acronym as SubjectAcronymn,ss.subject_type,s.max_int_marks,s.min_int_marks,isnull(m.internal_mark,0) as internal_mark,s.max_ext_marks,s.min_ext_marks,isnull(m.external_mark,0) as external_mark,s.maxtotal,s.mintotal,(case when isnull(m.internal_mark,0) >=0 then isnull(m.internal_mark,0) else 0 end) + (case when isnull(m.external_mark,0) >=0  then isnull(m.external_mark,0) else 0 end) as total,case when ISNULL(s.maxtotal,'0')<> '0' then (case when isnull(m.total,0) >=0  then isnull(m.total,0) else 0 end * 100)/s.maxtotal else 0 end as OutOf100,case when ISNULL(s.maxtotal,'0')<> '0' then (case when isnull(m.total,0) >=0  then isnull(m.total,0) else 0 end * 10)/s.maxtotal else 0 end as OutOf10,s.credit_points,case m.result when 'Pass' Then 'PASS'  when 'P' Then 'PASS'when 'F' Then 'FAIL' when 'FAIL' Then 'FAIL' when 'AAA' then 'AAA' when 'WHD' then 'WWW' else 'FAIL' end as result,m.passorfail,s.Part_Type,ISNULL(ss.ElectivePap,'0') as Elective,ss.priority,ISNULL(ss.lab,'0') Lab,ISNULL(m.grade,'') as Grade,ISNULL(ss.projThe,'0') projThe,s.subjectpriority,'0' as MarkOrExempted,'' as Message,'' description from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,Exam_Details ed where sm.syll_code=s.syll_code and m.subject_no = s.Subject_No and s.subtype_no= ss.subtype_no  and ed.exam_code=m.exam_code and ed.batch_year=sm.Batch_Year and ed.degree_code=sm.degree_code and roll_no in(" + rollNos + ") and external_mark is not null and total is not null and result is not null  order by sm.Batch_Year,sm.degree_code,m.roll_no,sm.semester asc,s.subjectpriority,subject_code asc";//and ed.Exam_Month='" + examMonth + "' and ed.Exam_year='" + examYear + "' and  Exam_Code in (select exam_code from Exam_Details ed where ed.batch_year='" + batchYear + "' and ed.degree_code='" + degreeCode + "' ) //upper(convert(varchar(3),DateAdd(month,ed.Exam_Month,-1)))
                dtAllStudentsMark = new DataTable();
                dtAllStudentsMark = dirAcc.selectDataTable(qry);

                dtSpecialSubject.Clear();
                dtSpecialSubject = dirAcc.selectDataTable("select r.Roll_no,sm.Batch_year,sm.degree_code,CAST('' as smallint) as Exam_year,CAST('' as smallint) as Exam_Month,'' as Month_Name,cast(0 as smallint) as Current_Semester,cast(sm.semester as int) as semester,s.subject_code,s.subject_name,s.acronym as SubjectAcronymn,ss.subject_type,s.max_int_marks,s.min_int_marks,CAST('0' as float) as internal_mark,s.max_ext_marks,s.min_ext_marks,CAST('0' as float) external_mark,s.maxtotal,s.mintotal,CAST('0' as float) as total,CAST('0' as float) as OutOf100,CAST('0' as float) as OutOf10,s.credit_points,'' as result,cast('1' as bit) as passorfail,s.Part_Type,ISNULL(ss.ElectivePap,'0') as Elective,ss.priority,ISNULL(ss.lab,'0') Lab,'' as Grade,ISNULL(ss.projThe,'0') projThe,s.subjectpriority,'1' as MarkOrExempted,sg.grade as Message,sg.description from subject s,sub_sem ss,syllabus_master sm,SpecialCourseSubject scs,SpecialCourseGradeDetail sg,Registration r where sg.MarkType=scs.MarkType and r.App_No=scs.app_no and s.subject_no=scs.subject_no and scs.CurrentSem=sm.semester and ss.syll_code=sm.syll_code and ss.syll_code=s.syll_code and s.subType_no=ss.subType_no and s.syll_code=sm.syll_code and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and r.roll_no in(" + rollNos + ") order by sm.semester,subject_type,ss.lab,s.subjectpriority");

                qry = "select * from exam_details where degree_code='" + degreeCode + "' and  batch_year='" + batchYear + "'";
                dtExamDetails = dirAcc.selectDataTable(qry);

                qry = "select gm.College_Code,gm.batch_year,gm.Degree_Code,ISNULL(gm.Semester,'0') as Semester,gm.Credit_Points,gm.Mark_Grade,gm.Frange,gm.Trange,LTRIM(RTRIM(ISNULL(gm.Criteria,''))) as Criteria,gm.classify,CONVERT(Varchar(50),gm.Frange)+' - '+CONVERT(Varchar(50),gm.Trange) as Ranges from Grade_Master gm where batch_year='" + batchYear + "' and Degree_Code='" + degreeCode + "' union select gm.College_Code,gm.batch_year,gm.Degree_Code,ISNULL(gm.Semester,'0') as Semester,gm.Credit_Points,gm.Mark_Grade,gm.Frange,gm.Trange,LTRIM(RTRIM(ISNULL(gm.Criteria,''))) as Criteria,gm.classify,CONVERT(Varchar(50),gm.Frange)+' - '+CONVERT(Varchar(50),gm.Trange) as Ranges from Grade_Master gm where batch_year in('0','1') and Degree_Code in('0','1') order by Trange desc";
                dtGradeDetails = dirAcc.selectDataTable(qry);

                DataTable dtClassification = new DataTable();
                qry = "select frompoint,topoint,LTRIM(RTRIM(ISNULL(classification,''))) as classification,collegecode,edu_level,LTRIM(RTRIM(ISNULL(markgradeflag,''))) as markgradeflag,LTRIM(RTRIM(ISNULL(grade,''))) as grade,LTRIM(RTRIM(ISNULL(batch_year,''))) as batch_year from coe_classification order by collegecode,edu_level desc,batch_year,topoint desc";
                dtClassification = dirAcc.selectDataTable(qry);

                //DataTable dtDuartion = new DataTable();
                //dtDuartion = dirAcc.selectDataTable("select ndg.Degree_code,Convert(varchar(50),ndg.batch_year) as batch_year,ndg.college_code,ndg.NDurations as duration from Ndegree ndg where batch_year='" + batchYear + "' and Degree_code='" + degreeCode + "'  union select dg.Degree_code,'' batch_year,dg.college_code,dg.Duration as duration from Degree dg where Degree_Code='" + degreeCode + "'");

                DataTable dtProjectPaper = new DataTable();
                qry = "select distinct ID,AppNo,sm.semester,s.subject_code SubjectNo,ProjectPaperName from ProjectPaperDetails prj,subject s,syllabus_master sm where sm.syll_code=s.syll_code and s.subject_no=prj.SubjectNo and sm.Batch_Year='" + batchYear + "' and sm.degree_code='" + degreeCode + "' ";
                dtProjectPaper = dirAcc.selectDataTable(qry);

                studRow = 0;
                bool isNewRegulation1 = false;
                bool isNewRegulation = false;
                StringBuilder sbErrMsg = new StringBuilder();
                Dictionary<byte, StringBuilder> dicErrMsg = new Dictionary<byte, StringBuilder>();
                foreach (DataRow drStudent in dtStudentList.Rows)
                {
                    string studentName = Convert.ToString(drStudent["Stud_Name"]).Trim();
                    string registerNo = Convert.ToString(drStudent["Reg_No"]).Trim();
                    string dateOfBirth = Convert.ToString(drStudent["dob"]).Trim();
                    string appNo = Convert.ToString(drStudent["App_No"]).Trim();
                    string rollNo = Convert.ToString(drStudent["Roll_No"]).Trim();
                    batchYear = Convert.ToString(drStudent["Batch_Year"]).Trim();
                    degreeCode = Convert.ToString(drStudent["degree_code"]).Trim();
                    string currentSem = Convert.ToString(drStudent["Current_Semester"]).Trim();
                    collegeCode = Convert.ToString(drStudent["college_code"]).Trim();
                    string courseName = Convert.ToString(drStudent["CourseName"]).Trim();
                    string departmentName = Convert.ToString(drStudent["Department"]).Trim();
                    string eduLevel = Convert.ToString(drStudent["edu_level"]).Trim();
                    string redoStudent = Convert.ToString(drStudent["Redo"]).Trim();
                    string admitDate = Convert.ToString(drStudent["ADM_DATE"]).Trim();
                    DateTime dtAdmitDate = new DateTime();
                    DateTime.TryParseExact(admitDate, "dd/MM/yyyy", null, DateTimeStyles.None, out dtAdmitDate);
                    string admissionMonthYear = dtAdmitDate.Year.ToString() + " - " + dtAdmitDate.ToString("MMM");
                    string displayMonthYear = "APRIL ";

                    int studBatchYear = 0;
                    int.TryParse(batchYear.Trim(), out studBatchYear);
                    isNewRegulation = false;
                    isNewRegulation1 = false;
                    if (studBatchYear >= 2016)
                        isNewRegulation = true;
                    if (studBatchYear >= 2017)
                        isNewRegulation1 = true;

                    string passingIA = string.Empty;
                    string passingSE = string.Empty;
                    string passingMsg = string.Empty;
                    isMPhil = false;
                    switch (eduLevel.Trim().ToLower())
                    {
                        case "ug":
                        case "u.g":
                        case "u.g.":
                        case "ug.":
                            passingIA = "40%";
                            passingSE = "40%";
                            passingMsg = "I.A. - Internal Assessment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks. For UG\t:\tPassing Minimum is " + passingIA + " in I.A., & in S.E. and Overall Passing Minimum is " + passingSE + ". For details of Grade & Grade Point, see overleaf. Any Correction Invalidates.";
                            break;
                        case "pg":
                        case "p.g":
                        case "p.g.":
                        case "pg.":
                            passingIA = "40%";
                            passingSE = "50%";
                            passingMsg = "I.A. - Internal Assessment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks. For PG\t:\tPassing Minimum is " + passingIA + " in I.A., & in S.E. and Overall Passing Minimum is " + passingSE + ". For M.B.A\t:\tPassing Minimum is 50% in I.A., S.E. & Overall. For details of Grade & Grade Point, see overleaf. Any Correction Invalidates.";
                            break;
                        case "mba":
                        case "mba.":
                        case "m.b.a.":
                            passingIA = "40%";
                            passingSE = "50%";
                            passingMsg = "I.A. - Internal Assessment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks. For PG\t:\tPassing Minimum is " + passingIA + " in I.A., & in S.E. and Overall Passing Minimum is " + passingSE + ". For M.B.A\t:\tPassing Minimum is 50% in I.A., S.E. & Overall. For details of Grade & Grade Point, see overleaf. Any Correction Invalidates.";
                            break;
                        case "mca":
                        case "mca.":
                        case "m.c.a.":
                            passingIA = "40%";
                            passingSE = "50%";
                            passingMsg = "I.A. - Internal Assessment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks. For PG\t:\tPassing Minimum is " + passingIA + " in I.A., & in S.E. and Overall Passing Minimum is " + passingSE + ". For M.B.A\t:\tPassing Minimum is 50% in I.A., S.E. & Overall. For details of Grade & Grade Point, see overleaf. Any Correction Invalidates.";
                            break;
                        case "mphil":
                        case "m.phil.":
                        case "m.phil":
                        case "mphil.":
                            isMPhil = true;
                            passingIA = "40%";
                            passingSE = "50%";
                            if (isNewRegulation1)
                            {
                                passingIA = "50%";
                                passingMsg = "I.A. - Internal Assessment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks, P - Pass, RA - Reappear, A - Absent. For " + eduLevel.Trim() + "\t:\tPassing Minimum is " + passingIA + " in I.A., & in S.E. and Overall Passing Minimum is " + passingSE + ". For details of Grade & Grade Point, see overleaf. Any Correction Invalidates.";//F.T.\t-\tFull Time, P.T.\t-\t Part Time, 
                            }
                            else
                            {

                                passingMsg = "I.A. - Internal Assessment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks. Passing Minimum\t:\t Part\t-\tI\t:\t I.A.\t-\t40%, S.E.\t-\t40% and Aggregate\t-\t50%.\nPart\t-\tII\t:\t Viva-voce\t-\t50%, Dissertation\t-\t50%. For details of Grade & Grade Point, see overleaf. Any Correction Invalidates.";//F.T.\t-\tFull Time, P.T.\t-\t Part Time. 
                            }

                            break;
                        default:
                            passingIA = "40%";
                            passingSE = "50%";
                            passingMsg = "I.A. - Internal Assessment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks. For UG\t:\tPassing Minimum is " + passingIA + " in I.A., & in S.E. and Overall Passing Minimum is " + passingSE + ". For details of Grade & Grade Point, see overleaf. Any Correction Invalidates.";
                            break;
                    }
                    //passingMsg = "For " + eduLevel + ": Passing Minimum is " + passingIA + " in I.A., & in S.E. and Overall Passing Minimum is " + passingSE + ".";
                    //int examMonthValue = 0;
                    //int.TryParse(examMonth, out examMonthValue);
                    //string monthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(examMonthValue);
                    //displayMonthYear = monthName.ToUpper() + " " + Convert.ToString(examYear).Trim();
                    string collegeName = string.Empty;
                    string coeName = string.Empty;
                    int maxDuration = 0;
                    int studentExamSemester = 0;
                    examCode = string.Empty;
                    collegeName = string.Empty;
                    coeName = string.Empty;
                    string principalName = string.Empty;
                    string universityName = string.Empty;
                    string address1 = string.Empty;
                    string address2 = string.Empty;
                    string address3 = string.Empty;
                    string collegeDistrict = string.Empty;
                    string collegeState = string.Empty;
                    string collegePincode = string.Empty;
                    string collegePhoneNo = string.Empty;
                    string affiliatedBy = string.Empty;
                    string collegeWebsite = string.Empty;
                    string collegeEmail = string.Empty;
                    string collegeCategory = string.Empty;
                    DataView dvCollegeDetail = new DataView();
                    if (dtCollegeDetails.Rows.Count > 0)
                    {
                        dtCollegeDetails.DefaultView.RowFilter = "college_code='" + collegeCode + "'";
                        dvCollegeDetail = dtCollegeDetails.DefaultView;
                    }
                    if (dvCollegeDetail.Count > 0)
                    {
                        foreach (DataRowView drCollege in dvCollegeDetail)
                        {
                            collegeName = Convert.ToString(drCollege["collname"]).Trim();
                            coeName = Convert.ToString(drCollege["coe"]).Trim();
                            principalName = Convert.ToString(drCollege["principal"]).Trim();
                            universityName = Convert.ToString(drCollege["university"]).Trim();
                            address1 = Convert.ToString(drCollege["address1"]).Trim();
                            address2 = Convert.ToString(drCollege["address2"]).Trim();
                            address3 = Convert.ToString(drCollege["address3"]).Trim();
                            collegeDistrict = Convert.ToString(drCollege["district"]).Trim();
                            collegeState = Convert.ToString(drCollege["state"]).Trim();
                            collegePincode = Convert.ToString(drCollege["pincode"]).Trim();
                            collegePhoneNo = Convert.ToString(drCollege["phoneno"]).Trim();
                            affiliatedBy = Convert.ToString(drCollege["affliatedby"]).Trim();
                            collegeWebsite = Convert.ToString(drCollege["website"]).Trim();
                            collegeEmail = Convert.ToString(drCollege["email"]).Trim();
                            collegeCategory = Convert.ToString(drCollege["category"]).Trim();
                            //,principal,coe_signature,principal_sign,logo1,logo2
                        }
                    }
                    MemoryStream memoryStream = new MemoryStream();
                    if (!string.IsNullOrEmpty(Convert.ToString(Convert.ToString(drStudent["Photo"]).Trim())))
                    {
                        byte[] file = (byte[])drStudent["Photo"];
                        memoryStream.Write(file, 0, file.Length);
                        if (file.Length > 0)
                        {
                            System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                            System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                            if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg")))
                            {
                                //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                            }
                            else
                            {
                                thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                //image3.ImageUrl = "~/college/" + stdappno + ".jpeg";
                            }
                        }
                    }

                    DataTable dtStudentOverAllResult = new DataTable();
                    //dtStudentOverAllResult = dirAcc.selectDataTable("select case when ISNULL(Tab1.roll_no,'')<>'' then ISNULL(Tab1.roll_no,'')  when ISNULL(Tab2.roll_no,'')<>'' then ISNULL(Tab2.roll_no,'') when ISNULL(Tab3.roll_no,'')<>'' then ISNULL(Tab3.roll_no,'') when ISNULL(Tab4.roll_no,'')<>'' then ISNULL(Tab4.roll_no,'') end roll_no,ISNULL(Tab1.TotalSubjectCount,'0') as TotalSubjectCount,ISNULL(Tab2.PassedCount,'0') as PassedCount,ISNULL(Tab3.FailedCount,'0') as FailedCount,ISNULL(Tab4.CurrentArrearCount,'0') as CurrentArrearCount from ((select sc.roll_no,count(s.subject_no) as TotalSubjectCount from subjectchooser sc,subject s,registration r,syllabus_master sm where sm.syll_code=s.syll_code and sm.degree_code=r.degree_code  and sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no in('" + rollNo + "') group by sc.roll_no) as Tab1 full join  (Select sc.roll_no,count(distinct s.subject_no) as PassedCount from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and ss.syll_code=s.syll_code and sm.syll_code=ss.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='pass' and m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no in('" + rollNo + "')  group by sc.roll_no) as Tab2 on tab1.roll_no=Tab2.roll_no full join ( Select sc.roll_no,count(distinct s.subject_no) as FailedCount from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and s.syll_code=ss.syll_code and sm.syll_code=ss.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='fail' and m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no in('" + rollNo + "') group by sc.roll_no) as Tab3 on Tab2.roll_no=Tab3.roll_no full join (select sc.roll_no,count(distinct m.subject_no) as CurrentArrearCount from mark_entry m,subjectChooser sc,syllabus_master sm,subject s where s.syll_code=sm.syll_code and s.subject_no=sc.subject_no and s.subject_no=m.subject_no and m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no in('" + rollNo + "') and m.result<>'Pass' and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc,syllabus_master sm,subject s where s.syll_code=sm.syll_code and s.subject_no=m.subject_no and s.subject_no=sc.subject_no and m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no in('" + rollNo + "') and m.result='Pass') group by sc.roll_no ) as Tab4 on Tab3.roll_no=Tab4.roll_no)");


                    dtStudentOverAllResult = dirAcc.selectDataTable("select case when ISNULL(Tab1.roll_no,'')<>'' then ISNULL(Tab1.roll_no,'')  when ISNULL(Tab2.roll_no,'')<>'' then ISNULL(Tab2.roll_no,'') when ISNULL(Tab3.roll_no,'')<>'' then ISNULL(Tab3.roll_no,'') when ISNULL(Tab4.roll_no,'')<>'' then ISNULL(Tab4.roll_no,'') end roll_no,ISNULL(Tab1.TotalSubjectCount,'0') as TotalSubjectCount,ISNULL(Tab2.PassedCount,'0') as PassedCount,ISNULL(Tab3.FailedCount,'0') as FailedCount,ISNULL(Tab4.CurrentArrearCount,'0') as CurrentArrearCount from ((select sc.roll_no,count(s.subject_no) as TotalSubjectCount from subjectchooser sc,subject s,registration r,syllabus_master sm where sm.syll_code=s.syll_code and sm.degree_code=r.degree_code  and sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no in('" + rollNo + "') group by sc.roll_no) as Tab1 full join  (Select sc.roll_no,count(distinct s.subject_no) as PassedCount from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and ss.syll_code=s.syll_code and sm.syll_code=ss.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  (m.result='pass' or s.acronym='EC' ) and m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no in('" + rollNo + "')  group by sc.roll_no) as Tab2 on tab1.roll_no=Tab2.roll_no full join ( Select sc.roll_no,count(distinct s.subject_no) as FailedCount from Mark_Entry m,Subject s,sub_sem ss,syllabus_master sm,subjectChooser sc where sm.syll_code=s.syll_code and s.syll_code=ss.syll_code and sm.syll_code=ss.syll_code and m.Subject_No = s.Subject_No and s.subtype_no= ss.subtype_no and  m.result='fail' and s.acronym='EC' and m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no in('" + rollNo + "') group by sc.roll_no) as Tab3 on Tab2.roll_no=Tab3.roll_no full join (select sc.roll_no,count(distinct m.subject_no) as CurrentArrearCount from mark_entry m,subjectChooser sc,syllabus_master sm,subject s where s.syll_code=sm.syll_code and s.subject_no=sc.subject_no and s.subject_no=m.subject_no and m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no in('" + rollNo + "') and m.result<>'Pass' and s.acronym<>'EC'   and m.subject_no not in(select distinct m.subject_no from mark_entry m,subjectChooser sc,syllabus_master sm,subject s where s.syll_code=sm.syll_code and s.subject_no=m.subject_no and s.subject_no=sc.subject_no and m.roll_no=sc.roll_no and m.subject_no=sc.subject_no and m.roll_no in('" + rollNo + "') and m.result='Pass' ) group by sc.roll_no ) as Tab4 on Tab3.roll_no=Tab4.roll_no)");


                    DataView dvCollege = new DataView();
                    if (dtCollegeDetails.Rows.Count > 0)
                    {
                        dtCollegeDetails.DefaultView.RowFilter = "college_code='" + collegeCode + "'";
                        dvCollege = dtCollegeDetails.DefaultView;
                    }
                    if (dvCollege.Count > 0)
                    {
                        coeName = Convert.ToString(dvCollege[0]["coe"]).Trim();
                        collegeName = Convert.ToString(dvCollege[0]["collname"]).Trim();
                    }
                    string maxSemester = dirAcc.selectScalarString("select NDurations from ndegree where batch_year='" + batchYear + "'  and Degree_code='" + degreeCode + "' and college_code='" + collegeCode.Trim() + "'");
                    if (maxSemester == "" || maxSemester == null)
                    {
                        maxSemester = dirAcc.selectScalarString("SELECT Duration FROM Degree where  Degree_Code='" + degreeCode + "' and college_code='" + collegeCode.Trim() + "'");
                    }
                    int.TryParse(maxSemester, out maxDuration);
                    int batchYr = 0;
                    int.TryParse(batchYear, out batchYr);
                    int currentYear = DateTime.Now.Year;
                    int currentMonth = DateTime.Now.Month;
                    int yearDiff = batchYr + (maxDuration / 2);
                    string sem = string.Empty;

                    if (currentYear >= yearDiff && currentMonth >= 5)
                    {
                    }
                    else
                    {
                        if (dicErrMsg.ContainsKey(0))
                        {
                            sbErrMsg = dicErrMsg[0];
                            sbErrMsg.Append(rollNo + ",");
                        }
                        else
                        {
                            sbErrMsg = new StringBuilder();
                            sbErrMsg.Append(rollNo + ",");
                            dicErrMsg.Add(0, sbErrMsg);
                        }
                        //magesh 4/1/18
                        // continue;
                    }
                    displayMonthYear = "APRIL " + yearDiff;
                    int totalNoOfPaper = 0;
                    int passedCount = 0;
                    int failedCount = 0;
                    int currentArrearCount = 0;
                    DataTable dtOverAllResult = new DataTable();
                    if (dtStudentOverAllResult.Rows.Count > 0)
                    {
                        dtStudentOverAllResult.DefaultView.RowFilter = "Roll_no='" + rollNo + "'";
                        dtOverAllResult = dtStudentOverAllResult.DefaultView.ToTable();
                        object countSubjects = dtOverAllResult.Compute("SUM(TotalSubjectCount)", string.Empty);
                        int.TryParse(Convert.ToString(countSubjects).Trim(), out totalNoOfPaper);
                        countSubjects = dtOverAllResult.Compute("SUM(PassedCount)", string.Empty);
                        int.TryParse(Convert.ToString(countSubjects).Trim(), out passedCount);
                        countSubjects = dtOverAllResult.Compute("SUM(FailedCount)", string.Empty);
                        int.TryParse(Convert.ToString(countSubjects).Trim(), out failedCount);
                        countSubjects = dtOverAllResult.Compute("SUM(CurrentArrearCount)", string.Empty);
                        int.TryParse(Convert.ToString(countSubjects).Trim(), out currentArrearCount);
                    }

                    dtStudentsMarkList = new DataTable();
                    dtAllStudentsMark.DefaultView.RowFilter = "Roll_no='" + rollNo + "' and result='pass'";//and exam_month='" + examMonth + "' and exam_year='" + examYear + "'
                    dtAllStudentsMark.DefaultView.Sort = "Batch_Year,degree_code,roll_no,semester asc,subjectpriority,subject_code asc";
                    dtStudentsMarkList = dtAllStudentsMark.DefaultView.ToTable();

                    DataTable dtExamPassYear = new DataTable();
                    dtAllStudentsMark.DefaultView.Sort = "Batch_Year,degree_code,roll_no,Exam_year desc,Exam_Month desc";
                    dtExamPassYear = dtAllStudentsMark.DefaultView.ToTable();

                    if (dtExamPassYear.Rows.Count > 0)
                    {
                        displayMonthYear = Convert.ToString(dtExamPassYear.Rows[0]["Month_name"]).Trim() + " " + Convert.ToString(dtExamPassYear.Rows[0]["Exam_Year"]).Trim();
                    }
                    string vivaVoiceDate = string.Empty;//raj
                    if (dtStudentsMarkList.Rows.Count > 0 && totalNoOfPaper == passedCount && currentArrearCount == 0)
                    {
                        string displayFolioNumber = string.Empty;
                        bool isHasFolioNumber = getFolioNumber(appNo, ref displayFolioNumber);
                        double tableHeight = 0;
                        //if (dtExamDetails.Rows.Count > 0)
                        //{
                        //    sem = Convert.ToString(dtExamDetails.Rows[0]["current_semester"]).Trim();
                        //}
                        //GetSem(batchYear, Convert.ToString(examYear), Convert.ToString(examMonth), maxSemester, ref sem);
                        int.TryParse(sem, out studentExamSemester);
                        string semesterRoman = ToRoman(sem);
                        string studiedYears = Convert.ToString(batchYear).Trim() + "-";
                        if (eduLevel.Trim().ToLower() == "ug")
                        {
                            studiedYears += Convert.ToString((Convert.ToInt32(batchYear) + (maxDuration / 2)));
                            gradeSet = "0";
                        }
                        else
                        {
                            studiedYears += Convert.ToString((Convert.ToInt32(batchYear) + (maxDuration / 2)));
                            gradeSet = "1";
                        }
                        int subMarkRow = 0;
                        startingPosX = 10;
                        startingPosY = 240;

                        Dictionary<byte, string> dicPartWiseSecMarks = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseMaxTotal = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseEarnedCredit = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseSumGP = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseWeight = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseGPA = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseGrade = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseWAM = new Dictionary<byte, string>();
                        Dictionary<byte, string> dicPartWiseClassification = new Dictionary<byte, string>();

                        DataTable dtMarkDetails = new DataTable();
                        DataTable dtSplSubjectMark = new DataTable();
                        string markOrGradeFlag = "1";

                        //if (dtAllStudentsMark.Rows.Count > 0)
                        //{
                        //    if (gpaRows == 0)
                        //    {
                        //        //dtStudentsMarkList.DefaultView.RowFilter = "";
                        //        dtMarkDetails = dtStudentsMarkList.DefaultView.ToTable();
                        //    }
                        //    else if (gpaRows == 1)
                        //    {
                        //        dtAllStudentsMark.DefaultView.RowFilter = "roll_no='" + rollNo + "'";
                        //        dtMarkDetails = dtAllStudentsMark.DefaultView.ToTable();
                        //    }
                        //}

                        getGPAWAMGrade(dtGradeDetails, dtStudentsMarkList, dtStudentOverAllResult, dtClassification, gradeSet, collegeCode, batchYear, degreeCode, sem, eduLevel, markOrGradeFlag, ref  dicPartWiseSecMarks, ref  dicPartWiseMaxTotal, ref  dicPartWiseEarnedCredit, ref dicPartWiseSumGP, ref dicPartWiseWeight, ref   dicPartWiseGPA, ref  dicPartWiseGrade, ref dicPartWiseWAM, ref dicPartWiseClassification);

                        if (dtSpecialSubject.Rows.Count > 0)
                        {
                            dtSplSubjectMark.Clear();
                            dtSpecialSubject.DefaultView.RowFilter = "roll_no='" + rollNo + "'";
                            //dtSplSubjectMark = dtAllStudentsMark.DefaultView.ToTable();
                            dtSplSubjectMark.Merge(dtSpecialSubject.DefaultView.ToTable());
                            dtStudentsMarkList.Merge(dtSplSubjectMark);
                        }
                        string part1SecMarks = ((dicPartWiseSecMarks.ContainsKey(1)) ? dicPartWiseSecMarks[1] : "");
                        string part2SecMarks = ((dicPartWiseSecMarks.ContainsKey(2)) ? dicPartWiseSecMarks[2] : "");
                        string part3SecMarks = ((dicPartWiseSecMarks.ContainsKey(3)) ? dicPartWiseSecMarks[3] : "");
                        string part4SecMarks = ((dicPartWiseSecMarks.ContainsKey(4)) ? dicPartWiseSecMarks[4] : "");

                        string part1MaxTotal = ((dicPartWiseMaxTotal.ContainsKey(1)) ? dicPartWiseMaxTotal[1] : "");
                        string part2MaxTotal = ((dicPartWiseMaxTotal.ContainsKey(2)) ? dicPartWiseMaxTotal[2] : "");
                        string part3MaxTotal = ((dicPartWiseMaxTotal.ContainsKey(3)) ? dicPartWiseMaxTotal[3] : "");
                        string part4MaxTotal = ((dicPartWiseMaxTotal.ContainsKey(4)) ? dicPartWiseMaxTotal[4] : "");

                        string part1EarnedCredit = ((dicPartWiseEarnedCredit.ContainsKey(1)) ? dicPartWiseEarnedCredit[1] : "");
                        string part2EarnedCredit = ((dicPartWiseEarnedCredit.ContainsKey(2)) ? dicPartWiseEarnedCredit[2] : "");
                        string part3EarnedCredit = ((dicPartWiseEarnedCredit.ContainsKey(3)) ? dicPartWiseEarnedCredit[3] : "");
                        string part4EarnedCredit = ((dicPartWiseEarnedCredit.ContainsKey(4)) ? dicPartWiseEarnedCredit[4] : "");

                        string part1SumGP = ((dicPartWiseSumGP.ContainsKey(1)) ? dicPartWiseSumGP[1] : "");
                        string part2SumGP = ((dicPartWiseSumGP.ContainsKey(2)) ? dicPartWiseSumGP[2] : "");
                        string part3SumGP = ((dicPartWiseSumGP.ContainsKey(3)) ? dicPartWiseSumGP[3] : "");
                        string part4SumGP = ((dicPartWiseSumGP.ContainsKey(4)) ? dicPartWiseSumGP[4] : "");

                        string part1Weight = ((dicPartWiseWeight.ContainsKey(1)) ? dicPartWiseWeight[1] : "");
                        string part2Weight = ((dicPartWiseWeight.ContainsKey(2)) ? dicPartWiseWeight[2] : "");
                        string part3Weight = ((dicPartWiseWeight.ContainsKey(3)) ? dicPartWiseWeight[3] : "");
                        string part4Weight = ((dicPartWiseWeight.ContainsKey(4)) ? dicPartWiseWeight[4] : "");

                        string part1GPA = ((dicPartWiseGPA.ContainsKey(1)) ? dicPartWiseGPA[1] : "");
                        string part2GPA = ((dicPartWiseGPA.ContainsKey(2)) ? dicPartWiseGPA[2] : "");
                        string part3GPA = ((dicPartWiseGPA.ContainsKey(3)) ? dicPartWiseGPA[3] : "");
                        string part4GPA = ((dicPartWiseGPA.ContainsKey(4)) ? dicPartWiseGPA[4] : "");

                        string part1WAM = ((dicPartWiseWAM.ContainsKey(1)) ? dicPartWiseWAM[1] : "");
                        string part2WAM = ((dicPartWiseWAM.ContainsKey(2)) ? dicPartWiseWAM[2] : "");
                        string part3WAM = ((dicPartWiseWAM.ContainsKey(3)) ? dicPartWiseWAM[3] : "");
                        string part4WAM = ((dicPartWiseWAM.ContainsKey(4)) ? dicPartWiseWAM[4] : "");

                        string part1Grade = ((dicPartWiseGrade.ContainsKey(1)) ? dicPartWiseGrade[1] : "");
                        string part2Grade = ((dicPartWiseGrade.ContainsKey(2)) ? dicPartWiseGrade[2] : "");
                        string part3Grade = ((dicPartWiseGrade.ContainsKey(3)) ? dicPartWiseGrade[3] : "");
                        string part4Grade = ((dicPartWiseGrade.ContainsKey(4)) ? dicPartWiseGrade[4] : "");

                        string part1Classification = ((dicPartWiseClassification.ContainsKey(1)) ? dicPartWiseClassification[1] : "");
                        string part2Classification = ((dicPartWiseClassification.ContainsKey(2)) ? dicPartWiseClassification[2] : "");
                        string part3Classification = ((dicPartWiseClassification.ContainsKey(3)) ? dicPartWiseClassification[3] : "");
                        string part4Classification = ((dicPartWiseClassification.ContainsKey(4)) ? dicPartWiseClassification[4] : "");

                        markSheetPage = markSheetDocument.NewPage();
                        string strprgmm = string.Empty;
                        if (isMPhil)
                        {
                            strprgmm = "PROGRAMME";
                        }

                        pdftxt = new PdfTextArea(fontStatementHeading, Color.Green, new PdfArea(markSheetDocument, startingPosX, 187, markSheetDocument.PageWidth - (2 * startingPosX), 30), ContentAlignment.MiddleCenter, "CONSOLIDATED STATEMENT OF MARKS FOR - " + eduLevel + " " + strprgmm);
                        markSheetPage.Add(pdftxt);

                        pdftblStudentDetails = markSheetDocument.NewTable(fontStudentDetail, 2, 5, 4);
                        pdftblStudentDetails.VisibleHeaders = false;
                        pdftblStudentDetails.SetBorders(Color.Black, 1, BorderType.None);
                        //pdftblStudentDetails.SetColumnsWidth(new int[] { 100, 950, 185, 20, 220 });
                        pdftblStudentDetails.SetColumnsWidth(new int[] { 80, 969, 150, 15, 230 });

                        //pdftblStudentDetails.Rows[0].SetCellPadding(1);
                        //pdftblStudentDetails.Rows[1].SetCellPadding((studentName.Length > 15) ? 1 : 6);
                        //pdftblStudentDetails.Rows[2].SetCellPadding(1);

                        //pdftblStudentDetails.Rows[0].SetRowHeight(30);
                        //pdftblStudentDetails.Rows[1].SetRowHeight(30);
                        //pdftblStudentDetails.Rows[2].SetRowHeight(30);

                        //pdftblStudentDetails.Cell(0, 2).SetCellPadding(2);
                        pdftblStudentDetails.Cell(0, 2).SetContentAlignment(ContentAlignment.TopLeft);
                        pdftblStudentDetails.Cell(0, 2).SetContent("Register No.");
                        //pdftblStudentDetails.Cell(0, 2).SetCellPadding(1);
                        pdftblStudentDetails.Cell(0, 2).SetForegroundColor(Color.Green);

                        pdftblStudentDetails.Cell(0, 3).SetContentAlignment(ContentAlignment.TopCenter);
                        pdftblStudentDetails.Cell(0, 3).SetContent(":");
                        //pdftblStudentDetails.Cell(0, 3).SetCellPadding(1);
                        pdftblStudentDetails.Cell(0, 3).SetForegroundColor(Color.Green);

                        pdftblStudentDetails.Cell(0, 4).SetContentAlignment(ContentAlignment.TopLeft);
                        pdftblStudentDetails.Cell(0, 4).SetContent(registerNo);
                        //pdftblStudentDetails.Cell(0, 4).SetCellPadding(1);

                        pdftblStudentDetails.Cell(1, 0).SetContentAlignment(ContentAlignment.BottomLeft);
                        pdftblStudentDetails.Cell(1, 0).SetContent("Name : ");
                        //pdftblStudentDetails.Cell(1, 0).SetCellPadding(1);
                        pdftblStudentDetails.Cell(1, 0).SetForegroundColor(Color.Green);

                        pdftblStudentDetails.Cell(1, 1).SetContentAlignment(ContentAlignment.BottomLeft);
                        pdftblStudentDetails.Cell(1, 1).SetContent(studentName);
                        //pdftblStudentDetails.Cell(1, 1).SetCellPadding(1);
                        //foreach (PdfCell pc in pdftblStudentDetails.CellRange(1, 1, 1, 1).Cells)
                        //{
                        //    pc.ColSpan = 2;
                        //}

                        pdftblStudentDetails.Cell(1, 2).SetContentAlignment(ContentAlignment.BottomLeft);
                        pdftblStudentDetails.Cell(1, 2).SetContent("Date of Birth");
                        //pdftblStudentDetails.Cell(1, 2).SetCellPadding(1);
                        pdftblStudentDetails.Cell(1, 2).SetForegroundColor(Color.Green);

                        pdftblStudentDetails.Cell(1, 3).SetContentAlignment(ContentAlignment.BottomCenter);
                        pdftblStudentDetails.Cell(1, 3).SetContent(":");
                        //pdftblStudentDetails.Cell(1, 3).SetCellPadding(1);
                        pdftblStudentDetails.Cell(1, 3).SetForegroundColor(Color.Green);

                        pdftblStudentDetails.Cell(1, 4).SetContentAlignment(ContentAlignment.BottomLeft);
                        pdftblStudentDetails.Cell(1, 4).SetContent(dateOfBirth);
                        //pdftblStudentDetails.Cell(1, 4).SetCellPadding(1);

                        //pdftblStudentDetails.Cell(2, 0).SetContentAlignment(ContentAlignment.BottomLeft);
                        //pdftblStudentDetails.Cell(2, 0).SetContent("Degree & Branch :");
                        //pdftblStudentDetails.Cell(2, 0).SetCellPadding(1);
                        //pdftblStudentDetails.Cell(2, 0).SetForegroundColor(Color.Green);
                        //foreach (PdfCell pc in pdftblStudentDetails.CellRange(2, 0, 2, 0).Cells)
                        //{
                        //    pc.ColSpan = 2;
                        //}                        

                        //pdftblStudentDetails.Cell(2, 2).SetContentAlignment(ContentAlignment.BottomLeft);
                        //pdftblStudentDetails.Cell(2, 2).SetContent(courseName.Trim() + " - " + departmentName);
                        //pdftblStudentDetails.Cell(2, 2).SetCellPadding(1);

                        //pdftblStudentDetails.Cell(2, 3).SetContentAlignment(ContentAlignment.BottomLeft);
                        //pdftblStudentDetails.Cell(2, 3).SetContent("Month & Year");
                        //pdftblStudentDetails.Cell(2, 3).SetForegroundColor(Color.Green);

                        //pdftblStudentDetails.Cell(2, 4).SetContentAlignment(ContentAlignment.BottomCenter);
                        //pdftblStudentDetails.Cell(2, 4).SetContent(":");
                        //pdftblStudentDetails.Cell(2, 4).SetForegroundColor(Color.Green);

                        //pdftblStudentDetails.Cell(2, 5).SetContentAlignment(ContentAlignment.BottomLeft);
                        //pdftblStudentDetails.Cell(2, 5).SetContent(displayMonthYear);

                        pdftblPages = pdftblStudentDetails.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, startingPosY, markSheetDocument.PageWidth - (2 * startingPosX), 150));
                        markSheetPage.Add(pdftblPages);
                        tableHeight = pdftblPages.Area.Height;
                        startingPosY += Convert.ToInt32(tableHeight);
                        PdfRectangle pdfRec;
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg")))
                        {
                            pdfImgLogo = markSheetDocument.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg"));
                            markSheetPage.Add(pdfImgLogo, markSheetDocument.PageWidth - (125 + (2 * startingPosX)), 100, 283);
                            pdfRec = new PdfRectangle(markSheetDocument, new PdfArea(markSheetDocument, markSheetDocument.PageWidth - (130 + (2 * startingPosX)), 88, 100, 115), Color.DarkBlue);
                            markSheetPage.Add(pdfRec);
                        }
                        else
                        {
                            if (File.Exists(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg")))
                            {
                                pdfImgLogo = markSheetDocument.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                //mypdfpage.Add(LogoImage2, 13, 876, 400);
                                //markSheetPage.Add(pdfImgLogo, 525, 23, 420);
                                markSheetPage.Add(pdfImgLogo, markSheetDocument.PageWidth - (120 + (2 * startingPosX)), 100, 180);
                                pdfRec = new PdfRectangle(markSheetDocument, new PdfArea(markSheetDocument, markSheetDocument.PageWidth - (130 + (2 * startingPosX)), 88, 100, 115), Color.DarkBlue);
                                markSheetPage.Add(pdfRec);
                            }
                        }
                        //PdfRectangle pdfRec =
                        //PdfRectangle pdfRec = new PdfRectangle(markSheetDocument, new PdfArea(markSheetDocument, markSheetDocument.PageWidth - (130 + (2 * startingPosX)), 88, 108, 113), Color.DarkBlue);
                        //markSheetPage.Add(pdfRec);

                        pdftblStudentDetails = markSheetDocument.NewTable(fontStudentDetail, 1, 5, 4);
                        pdftblStudentDetails.VisibleHeaders = false;
                        pdftblStudentDetails.SetBorders(Color.Black, 1, BorderType.None);
                        //pdftblStudentDetails.SetColumnsWidth(new int[] { 200, 850, 185, 20, 220 });
                        pdftblStudentDetails.SetColumnsWidth(new int[] { 180, 869, 150, 15, 230 });

                        pdftblStudentDetails.Cell(0, 0).SetContentAlignment(ContentAlignment.BottomLeft);
                        pdftblStudentDetails.Cell(0, 0).SetContent("Degree & Branch :");
                        //pdftblStudentDetails.Cell(0, 0).SetCellPadding(1);
                        pdftblStudentDetails.Cell(0, 0).SetForegroundColor(Color.Green);
                        //foreach (PdfCell pc in pdftblStudentDetails.CellRange(0, 0, 0, 0).Cells)
                        //{
                        //    pc.ColSpan = 2;
                        //}

                        pdftblStudentDetails.Cell(0, 1).SetContentAlignment(ContentAlignment.BottomLeft);
                        pdftblStudentDetails.Cell(0, 1).SetContent(courseName.Trim() + " - " + departmentName);
                        //pdftblStudentDetails.Cell(0, 1).SetCellPadding(1);

                        pdftblStudentDetails.Cell(0, 2).SetContentAlignment(ContentAlignment.BottomLeft);
                        pdftblStudentDetails.Cell(0, 2).SetContent("Month & Year");
                        pdftblStudentDetails.Cell(0, 2).SetForegroundColor(Color.Green);

                        pdftblStudentDetails.Cell(0, 3).SetContentAlignment(ContentAlignment.BottomCenter);
                        pdftblStudentDetails.Cell(0, 3).SetContent(":");
                        pdftblStudentDetails.Cell(0, 3).SetForegroundColor(Color.Green);

                        pdftblStudentDetails.Cell(0, 4).SetContentAlignment(ContentAlignment.BottomLeft);
                        pdftblStudentDetails.Cell(0, 4).SetContent(displayMonthYear);

                        pdftblPages = pdftblStudentDetails.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, startingPosY, markSheetDocument.PageWidth - (2 * startingPosX), 100));
                        markSheetPage.Add(pdftblPages);
                        tableHeight = pdftblPages.Area.Height;
                        startingPosY += Convert.ToInt32(tableHeight) + 5;

                        int semRow = 1;
                        List<int> lstSem = dtStudentsMarkList.AsEnumerable().Select(r => r.Field<int>("semester")).Distinct().ToList<int>();
                        if (lstSem.Count > 1)
                        {
                            semRow = 4;
                        }
                        else if (lstSem.Count > 0)
                        {
                            if (lstSem[0].ToString().Trim() != sem)
                                semRow = 4;
                        }
                        bool isFirstYear = false;
                        if (sem == "1")
                        {
                            if (lstSem.Count == 1 && lstSem[0] == 1)
                            {
                                isFirstYear = true;
                            }
                        }
                        int totalRows = dtStudentsMarkList.Rows.Count + maxDuration + 7 + ((dtSplSubjectMark.Rows.Count > 0) ? 2 : 0);
                        int totalSheetRequired = ((totalRows % (35 + ((dtSplSubjectMark.Rows.Count > 0) ? 2 : 0))) != 0 ? 1 : 0) + (totalRows / (35 + ((dtSplSubjectMark.Rows.Count > 0) ? 2 : 0)));
                        pdftblMarksContent = markSheetDocument.NewTable(fontMarkStatement, totalRows, 15, 5);
                        pdftblMarksContent.VisibleHeaders = false;
                        pdftblMarksContent.SetBorders(Color.Black, 1, BorderType.None);
                        pdftblMarksContent.SetColumnsWidth(new int[] { 55, 70, 150, 275, 265, 110, 65, 65, 65, 65, 65, 65, 70, 90, 105 });


                        int markColumn = 0;
                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, markColumn).SetContent("Part");
                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                        {
                            pc.RowSpan = 2;
                        }

                        markColumn++;
                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, markColumn).SetContent("Sem");
                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                        {
                            pc.RowSpan = 2;
                        }

                        markColumn++;
                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, markColumn).SetContent("Course Code");
                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                        {
                            pc.RowSpan = 2;
                        }

                        markColumn++;
                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, markColumn).SetContent("Course Title");
                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                        {
                            pc.RowSpan = 2;
                            pc.ColSpan = 2;
                        }

                        markColumn += 2;
                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, markColumn).SetContent("Passed in\nMonth/Year");
                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                        {
                            pc.RowSpan = 2;
                        }

                        markColumn++;
                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, markColumn).SetContent("I.A.");
                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                        {
                            pc.ColSpan = 2;
                        }
                        pdftblMarksContent.Cell(1, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(1, markColumn).SetContent("Max.");
                        pdftblMarksContent.Cell(1, markColumn).SetCellPadding(3);
                        pdftblMarksContent.Cell(1, markColumn).SetForegroundColor(Color.Green);

                        markColumn++;
                        pdftblMarksContent.Cell(1, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(1, markColumn).SetContent("Sec.");
                        pdftblMarksContent.Cell(1, markColumn).SetCellPadding(3);
                        pdftblMarksContent.Cell(1, markColumn).SetForegroundColor(Color.Green);

                        markColumn++;
                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, markColumn).SetContent("S.E.");
                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                        {
                            pc.ColSpan = 2;
                        }
                        pdftblMarksContent.Cell(1, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(1, markColumn).SetContent("Max.");
                        pdftblMarksContent.Cell(1, markColumn).SetCellPadding(3);
                        pdftblMarksContent.Cell(1, markColumn).SetForegroundColor(Color.Green);

                        markColumn++;
                        pdftblMarksContent.Cell(1, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(1, markColumn).SetContent("Sec.");
                        pdftblMarksContent.Cell(1, markColumn).SetCellPadding(3);
                        pdftblMarksContent.Cell(1, markColumn).SetForegroundColor(Color.Green);

                        markColumn++;
                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, markColumn).SetContent("Total");
                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                        {
                            pc.ColSpan = 2;
                        }
                        pdftblMarksContent.Cell(1, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(1, markColumn).SetContent("Max.");
                        pdftblMarksContent.Cell(1, markColumn).SetCellPadding(3);
                        pdftblMarksContent.Cell(1, markColumn).SetForegroundColor(Color.Green);

                        markColumn++;
                        pdftblMarksContent.Cell(1, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(1, markColumn).SetContent("Sec.");
                        pdftblMarksContent.Cell(1, markColumn).SetCellPadding(3);
                        pdftblMarksContent.Cell(1, markColumn).SetForegroundColor(Color.Green);

                        markColumn++;
                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, markColumn).SetContent("Credit Earned");
                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                        {
                            pc.RowSpan = 2;
                        }

                        markColumn++;
                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, markColumn).SetContent("Grade Point");
                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                        {
                            pc.RowSpan = 2;
                        }

                        markColumn++;
                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(0, markColumn).SetContent("Weighted Marks");
                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                        {
                            pc.RowSpan = 2;
                        }

                        //markColumn++;
                        //pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                        //pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                        //pdftblMarksContent.Cell(0, markColumn).SetContent("Result");
                        //pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                        //foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                        //{
                        //    pc.RowSpan = 2;
                        //}

                        int markRow = 2;
                        int sheetNo = 1;
                        bool hasArrear = false;
                        bool hasLab = false;
                        Dictionary<int, int> dicSheetRow = new Dictionary<int, int>();
                        for (int s = 1; s <= maxDuration; s++)
                        {

                            DataView dvMark = new DataView();
                            DataTable dtMarkTable = new DataTable();
                            dtStudentsMarkList.DefaultView.RowFilter = "semester='" + s + "' and MarkOrExempted='0'";
                            dvMark = dtStudentsMarkList.DefaultView;
                            //dtMarkTable = dvMark.ToTable();
                            dtMarkTable.Merge(dvMark.ToTable());
                            if (s == maxDuration)
                            {
                                dtStudentsMarkList.DefaultView.RowFilter = "MarkOrExempted='1'";
                                dvMark = dtStudentsMarkList.DefaultView;
                                dtMarkTable.Merge(dvMark.ToTable());
                            }
                            bool isMarkOrExempted = false;
                            if (dtMarkTable.Rows.Count > 0)
                            {
                                foreach (DataRow drStudMark in dtMarkTable.Rows)
                                {
                                    bool isPassOrFail = false;
                                    bool isLab = false;
                                    bool isProjectThesis = false;
                                    bool isElective = false;
                                    bool isSubjectResult = true;
                                    bool arrearSubject = false;
                                    double weightedMarks = 0;

                                    string batchYearSub = Convert.ToString(drStudMark["Batch_Year"]).Trim();
                                    string degreeCodeSub = Convert.ToString(drStudMark["degree_code"]).Trim();
                                    string internalMark = Convert.ToString(drStudMark["internal_mark"]).Trim();
                                    string minInternalMark = Convert.ToString(drStudMark["min_int_marks"]).Trim();
                                    string maxInternalMark = Convert.ToString(drStudMark["max_int_marks"]).Trim();
                                    string externalMark = Convert.ToString(drStudMark["external_mark"]).Trim();
                                    string minExternalMark = Convert.ToString(drStudMark["min_ext_marks"]).Trim();
                                    string maxExternalMark = Convert.ToString(drStudMark["max_ext_marks"]).Trim();
                                    string outOf100 = Convert.ToString(drStudMark["OutOf100"]).Trim();
                                    string outOf10 = Convert.ToString(drStudMark["OutOf10"]).Trim();
                                    string totalMark = Convert.ToString(drStudMark["total"]).Trim();
                                    string minTotalMark = Convert.ToString(drStudMark["mintotal"]).Trim();
                                    string maxTotalMark = Convert.ToString(drStudMark["maxtotal"]).Trim();
                                    string result = Convert.ToString(drStudMark["result"]).Trim();
                                    string passOrFail = Convert.ToString(drStudMark["passorfail"]).Trim();
                                    string subjectCode = Convert.ToString(drStudMark["subject_code"]).Trim();
                                    string subjectName = Convert.ToString(drStudMark["subject_name"]).Trim();
                                    string subjectType = Convert.ToString(drStudMark["subject_type"]).Trim();
                                    string subjectAcr = Convert.ToString(drStudMark["SubjectAcronymn"]).Trim();
                                    string creditPoint = Convert.ToString(drStudMark["credit_points"]).Trim();
                                    string partType = Convert.ToString(drStudMark["Part_Type"]).Trim();
                                    string subjectSemester = Convert.ToString(drStudMark["semester"]).Trim();
                                    string gradeValue = Convert.ToString(drStudMark["grade"]).Trim();
                                    string labSubject = Convert.ToString(drStudMark["Lab"]).Trim();
                                    string electiveSubject = Convert.ToString(drStudMark["Elective"]).Trim();
                                    string projectOrThesis = Convert.ToString(drStudMark["projThe"]).Trim();
                                    string examMonthName = Convert.ToString(drStudMark["exam_month"]).Trim();
                                    string examYearValue = Convert.ToString(drStudMark["exam_Year"]).Trim();
                                    string monthName = Convert.ToString(drStudMark["Month_Name"]).Trim();
                                    string MarkOrExempted = Convert.ToString(drStudMark["MarkOrExempted"]).Trim();
                                    string Message = Convert.ToString(drStudMark["Message"]).Trim();
                                    string description = Convert.ToString(drStudMark["description"]).Trim();

                                    string gradeCalc = string.Empty;
                                    string passingYear = string.Empty;
                                    int monthValue = 0;
                                    int.TryParse(examMonthName, out monthValue);
                                    if (MarkOrExempted.Trim() == "0")
                                        passingYear = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(monthValue).Substring(0, 3) + "\t'\t" + examYearValue.Substring(2, 2);

                                    DataTable dtProjectName = new DataTable();
                                    if (dtProjectPaper.Rows.Count > 0)
                                    {
                                        dtProjectPaper.DefaultView.RowFilter = "subjectNo='" + subjectCode + "' and AppNo='" + appNo + "'";
                                        dtProjectName = dtProjectPaper.DefaultView.ToTable();
                                        if (dtProjectName.Rows.Count > 0)
                                        {
                                            subjectName = Convert.ToString(dtProjectName.Rows[0]["ProjectPaperName"]).Trim();
                                        }
                                    }
                                    DataView dvSplSubject = new DataView();
                                    if (dtSplSubjectMark.Rows.Count > 0)
                                    {
                                        dtSplSubjectMark.DefaultView.RowFilter = "roll_no='" + rollNo + "' and semester='" + subjectSemester + "' and subject_code='" + subjectCode + "'";
                                        dvSplSubject = dtSplSubjectMark.DefaultView;
                                    }
                                    if (dvSplSubject.Count > 0 && MarkOrExempted.Trim() == "0")
                                    {
                                        continue;
                                    }
                                    //Rajkumar 9/1/2017==========================
                                    DataTable dtVivaDate = new DataTable();

                                    string SelectQ = "select vivaDate from registration where Roll_no='" + rollNo + "'";
                                    dtVivaDate = dirAcc.selectDataTable(SelectQ);
                                    if (dtVivaDate.Rows.Count > 0)
                                    {
                                        vivaVoiceDate = Convert.ToString(dtVivaDate.Rows[0]["VivaDate"]).Trim();
                                    }
                                    //=====================================
                                    bool.TryParse(labSubject.Trim(), out isLab);
                                    bool.TryParse(electiveSubject.Trim(), out isElective);
                                    bool.TryParse(projectOrThesis.Trim(), out isProjectThesis);
                                    bool.TryParse(passOrFail.Trim(), out isPassOrFail);

                                    string displayPartType = string.Empty;
                                    string displaySemster = string.Empty;
                                    string displayCourseCode = string.Empty;
                                    string displayCourseTitle = string.Empty;
                                    string displayMonthandYear = string.Empty;
                                    string displayMaxINT = string.Empty;
                                    string displayINT = string.Empty;
                                    string displayMaxEXT = string.Empty;
                                    string displayEXT = string.Empty;
                                    string displayMaxTOT = string.Empty;
                                    string displayTOT = string.Empty;
                                    string displayCreditPoint = string.Empty;
                                    string displayGP = string.Empty;
                                    string displayWM = string.Empty;
                                    string displayResult = string.Empty;
                                    string displayGrade = string.Empty;
                                    string displayClassify = string.Empty;
                                    string displayMarkOrExempted = string.Empty;

                                    bool isOnlyESA = false;
                                    bool isOnlyICA = false;

                                    double internalMarks = 0;
                                    double minInternalMarks = 0;
                                    double maxInternalMarks = 0;
                                    double.TryParse(internalMark.Trim(), out internalMarks);
                                    double.TryParse(minInternalMark.Trim(), out minInternalMarks);
                                    double.TryParse(maxInternalMark.Trim(), out maxInternalMarks);

                                    double externalMarks = 0;
                                    double minExternalMarks = 0;
                                    double maxExternalMarks = 0;
                                    double.TryParse(externalMark.Trim(), out externalMarks);
                                    double.TryParse(minExternalMark.Trim(), out minExternalMarks);
                                    double.TryParse(maxExternalMark.Trim(), out maxExternalMarks);

                                    double totalMarks = 0;
                                    double minTotalMarks = 0;
                                    double maxTotalMarks = 0;
                                    double.TryParse(totalMark.Trim(), out totalMarks);
                                    double.TryParse(minInternalMark.Trim(), out minTotalMarks);
                                    double.TryParse(maxInternalMark.Trim(), out maxTotalMarks);

                                    double outOf100s = 0;
                                    double outOf10s = 0;
                                    double.TryParse(outOf10.Trim(), out outOf10s);
                                    double.TryParse(outOf100.Trim(), out outOf100s);

                                    double creditPoints = 0;
                                    double.TryParse(creditPoint.Trim(), out creditPoints);

                                    if (isLab)
                                        hasLab = true;
                                    int partTypeVal = 0;
                                    int.TryParse(partType.Trim(), out partTypeVal);
                                    displayPartType = (partTypeVal == 0) ? "" : Convert.ToString((((isLab) ? "\t" : "") + partType + ((isLab) ? "*" : "")));
                                    displaySemster = subjectSemester.Trim();
                                    displayCourseCode = "\t\t" + subjectCode.Trim();
                                    displayCourseTitle = subjectName.Trim();
                                    displayMonthandYear = passingYear;
                                    displayMaxINT = maxInternalMark.PadLeft(3, '0');
                                    displayINT = internalMark.PadLeft(3, '0');
                                    displayMaxEXT = maxExternalMark.PadLeft(3, '0');
                                    displayEXT = externalMark.PadLeft(3, '0');
                                    displayMaxTOT = maxTotalMark.PadLeft(3, '0');
                                    displayTOT = totalMark.PadLeft(3, '0');
                                    displayCreditPoint = (creditPoints == 0) ? "" : creditPoint.PadLeft(2, '0');
                                    displayGP = outOf10;
                                    displayWM = outOf100;
                                    displayResult = result;
                                    double gp = 0;
                                    string gradePoint = string.Empty;
                                    string weightedMark = string.Empty;
                                    string classify = string.Empty;
                                    string grade = string.Empty;

                                    double secureMarksoutOf100 = 0;
                                    double.TryParse(outOf100.Trim(), out secureMarksoutOf100);
                                    outOf100 = Convert.ToString(secureMarksoutOf100).Trim();
                                    getGradeDetails(dtGradeDetails, outOf100, gradeSet, collegeCode, batchYearSub, degreeCodeSub, subjectSemester, ref  gradePoint, ref  grade, ref  classify, ref gp);
                                    displayGrade = grade;
                                    weightedMarks = creditPoints * gp;
                                    displayGP = string.Format("{0:00.0}", gp);
                                    displayWM = string.Format("{0:000.0}", weightedMarks);

                                    if (internalMarks < 0)
                                    {
                                        displayINT = "AA";
                                        displayResult = "AAA";
                                        displayGP = "00.0";
                                        displayWM = "000.0";
                                        displayTOT = "***";
                                        //resu = false;
                                        //gp_status = false;
                                    }
                                    else
                                    {
                                        displayINT = Convert.ToString(internalMarks).PadLeft(3, '0'); ;
                                    }
                                    if (externalMarks < 0)
                                    {
                                        displayEXT = "AA";
                                        displayResult = "AAA";
                                        displayGP = "00.0";
                                        displayWM = "000.0";
                                        displayTOT = "***";
                                        //gp_status = false;
                                        //resu = false;
                                    }
                                    else
                                    {
                                        displayEXT = Convert.ToString(externalMarks).PadLeft(3, '0'); ;
                                    }

                                    if (string.IsNullOrEmpty(maxExternalMark) || maxExternalMark.Trim() == "0")
                                    {
                                        isOnlyICA = true;
                                        displayEXT = "--";
                                        displayMaxEXT = "--";
                                    }

                                    if (string.IsNullOrEmpty(maxInternalMark) || maxInternalMark.Trim() == "0")
                                    {
                                        isOnlyESA = true;
                                        displayINT = "--";
                                        displayMaxINT = "--";
                                    }

                                    switch (displayResult.Trim().ToLower())
                                    {
                                        case "pass":
                                        case "p":
                                            displayResult = "P";
                                            break;
                                        case "fail":
                                        case "f":
                                            displayResult = "\tRA";
                                            displayGP = "00.0";
                                            displayWM = "000.0";
                                            break;
                                        case "whd":
                                        case "wh":
                                        case "www":
                                        case "ww":
                                        case "w":
                                        case "mp":
                                        case "malpractice":
                                        case "mal-practice":
                                        case "mal - practice":
                                        case "with held":
                                        case "withheld":
                                            displayResult = "\tRA";
                                            displayTOT = displayINT.PadLeft(3, '0');
                                            displayEXT = "\tMP";
                                            displayGP = "00.0";
                                            displayWM = "000.0";
                                            break;
                                        case "a":
                                        case "aa":
                                        case "aaa":
                                        case "ab":
                                        case "absent":
                                            displayResult = "A";
                                            displayGP = "00.0";
                                            displayWM = "000.0";
                                            break;
                                        case "null":
                                            displayResult = string.Empty;
                                            displayTOT = displayINT.PadLeft(3, '0');
                                            displayEXT = string.Empty;
                                            displayGP = "00.0";
                                            displayWM = "000.0";
                                            break;
                                    }
                                    if (isOnlyESA && isOnlyICA && (string.IsNullOrEmpty(maxTotalMark) || maxTotalMark.Trim() == "0"))
                                    {
                                        //displayINT = "--";
                                        //displayMaxINT = "--";
                                        //displayEXT = "--";
                                        //displayMaxEXT = "--";
                                        //displayTOT = "--";
                                        //displayMaxTOT = "--";
                                        //displayGP = "--";
                                        //displayWM = "--";
                                        displayINT = string.Empty;
                                        displayMaxINT = string.Empty;
                                        displayEXT = string.Empty;
                                        displayMaxEXT = string.Empty;
                                        displayTOT = string.Empty;
                                        displayMaxTOT = string.Empty;
                                        displayGP = string.Empty;
                                        displayWM = string.Empty;
                                        displayCreditPoint = string.Empty;
                                        displayMonthandYear = string.Empty;
                                    }
                                    displayMarkOrExempted = (MarkOrExempted.Trim() == "1" && !string.IsNullOrEmpty(Message.Trim())) ? "Grade :" + Message : "";
                                    if (MarkOrExempted.Trim() == "1" && !isMarkOrExempted)
                                    {
                                        markRow++;
                                        isMarkOrExempted = true;
                                    }

                                    #region Contionue On New Page




                                    if (markRow % 35 == 0 && markRow != 2 || hasLab && markRow % 36 == 0 && markRow != 2)
                                    {
                                        #region principal
                                        string princisign1 = string.Empty;
                                        princisign1 = "select principal_sign from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                                        MemoryStream memoryStream11 = new MemoryStream();
                                        DataSet dsprincisign1 = new DataSet();
                                        dsprincisign1.Clear();
                                        dsprincisign1.Dispose();
                                        dsprincisign1 = da.select_method_wo_parameter(princisign1, "Text");
                                        if (dsprincisign1.Tables.Count > 0 && dsprincisign1.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsprincisign1.Tables[0].Rows[0][0]).Trim()))
                                        {
                                            byte[] file1 = (byte[])dsprincisign1.Tables[0].Rows[0][0];
                                            memoryStream11.Write(file1, 0, file1.Length);
                                            if (file1.Length > 0)
                                            {
                                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream11, true, true);
                                                System.Drawing.Image thumb = imgx.GetThumbnailImage(250, 250, null, IntPtr.Zero);
                                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                                                {
                                                }
                                                else
                                                {
                                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                                }
                                            }
                                        }
                                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                                        {
                                            PdfImage coesiImage2 = markSheetDocument.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"));
                                            markSheetPage.Add(coesiImage2, 1000, 1500, 200);

                                        }
                                        else
                                        {
                                            PdfImage coesiImage2 = markSheetDocument.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                            markSheetPage.Add(coesiImage2, 1000, 1500, 200);

                                        }

                                        #endregion
                                        //if (markRow != 3)
                                        //{
                                        sheetNo++;
                                        pdftblMarksContent.Cell(markRow, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(markRow, 3).SetContent("CONTINUED IN SHEET " + sheetNo + " ....");
                                        pdftblMarksContent.Cell(markRow, 3).SetCellPadding(8);
                                        foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, 3, markRow, 3).Cells)
                                        {
                                            pc.ColSpan = 2;
                                        }
                                        if (hasLab)
                                        {
                                            markRow++;
                                            pdftblMarksContent.Cell(markRow, 0).SetContentAlignment(ContentAlignment.TopLeft);
                                            pdftblMarksContent.Cell(markRow, 0).SetContent("* PRACTICAL");
                                            pdftblMarksContent.Cell(markRow, 0).SetCellPadding(5);
                                            foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, 0, markRow, 0).Cells)
                                            {
                                                pc.ColSpan = 3;
                                            }
                                            markRow++;
                                        }
                                        for (int r = markRow; r < totalRows; r++)
                                        {
                                            foreach (PdfCell pc in pdftblMarksContent.CellRange(r, 3, r, 3).Cells)
                                            {
                                                pc.ColSpan = 2;
                                            }
                                        }
                                        pdftblPages = pdftblMarksContent.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, startingPosY, markSheetDocument.PageWidth - (2 * startingPosX), markSheetDocument.PageHeight - startingPosY));
                                        markSheetPage.Add(pdftblPages);
                                        pdfLine = pdftblPages.Area.UpperBound(Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        for (int col = 0; col < 15; col++)
                                        {
                                            if (col >= 6 && col <= 11)
                                            {
                                                pdfLine = pdftblPages.CellArea(1, col).LowerBound(Color.Green, 1);
                                                markSheetPage.Add(pdfLine);
                                                if (col % 2 == 0)
                                                {
                                                    //pdfLine = pdftblPages.CellArea(0, col).LowerBound(Color.Green, 1);
                                                    //markSheetPage.Add(pdfLine);
                                                }
                                            }
                                            else if (col != 4)
                                            {
                                                pdfLine = pdftblPages.CellArea(0, col).LowerBound(Color.Green, 1);
                                                markSheetPage.Add(pdfLine);
                                            }
                                        }

                                        //pdftblMarksContent.SetColumnsWidth(new int[] { 55, 70, 160, 265, 265, 110, 65, 65, 65, 65, 65, 65, 70, 90, 105 });

                                        //Vertical Line 1
                                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX, startingPosY), new Point(startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), new Point(Convert.ToInt32(markSheetDocument.PageWidth - startingPosX), Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        pdfLine = new PdfLine(markSheetDocument, new Point(Convert.ToInt32(markSheetDocument.PageWidth - startingPosX), startingPosY), new Point(Convert.ToInt32(markSheetDocument.PageWidth - startingPosX), Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 41, startingPosY), new Point(startingPosX + 41, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 92, startingPosY), new Point(startingPosX + 92, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 197, startingPosY), new Point(startingPosX + 197, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 596, startingPosY), new Point(startingPosX + 596, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 675, startingPosY), new Point(startingPosX + 675, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 675, startingPosY + 30), new Point(startingPosX + 962, startingPosY + 30), Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 724, startingPosY + 30), new Point(startingPosX + 724, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 770, startingPosY), new Point(startingPosX + 770, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 819, startingPosY + 30), new Point(startingPosX + 819, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 866, startingPosY), new Point(startingPosX + 866, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 914, startingPosY + 30), new Point(startingPosX + 914, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 962, startingPosY), new Point(startingPosX + 962, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 1012, startingPosY), new Point(startingPosX + 1012, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 1078, startingPosY), new Point(startingPosX + 1078, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                                        markSheetPage.Add(pdfLine);

                                        //pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 1015, startingPosY), new Point(startingPosX + 1015, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY+100))), Color.Green, 1);
                                        //markSheetPage.Add(pdfLine);

                                        //tableHeight = pdftblPages.Area.Height;
                                        //tableHeight = Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY));

                                        #region CGPA

                                        if (eduLevel.Trim().ToLower() == "ug")
                                        {
                                            pdftblCGPA = markSheetDocument.NewTable(fontStudentDetail, 3, 5, 3);
                                            pdftblCGPA.VisibleHeaders = false;
                                            pdftblCGPA.SetBorders(Color.Green, 1, BorderType.CompleteGrid);
                                            pdftblCGPA.SetColumnsWidth(new int[] { 150, 200, 200, 200, 300 });

                                            pdftblCGPA.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblCGPA.Cell(0, 0).SetForegroundColor(Color.Green);
                                            pdftblCGPA.Cell(0, 0).SetContent("Part");

                                            pdftblCGPA.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblCGPA.Cell(0, 1).SetForegroundColor(Color.Green);
                                            pdftblCGPA.Cell(0, 1).SetContent("Part\t-\tI");

                                            pdftblCGPA.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblCGPA.Cell(0, 2).SetForegroundColor(Color.Green);
                                            pdftblCGPA.Cell(0, 2).SetContent("Part\t-\tII");

                                            pdftblCGPA.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblCGPA.Cell(0, 3).SetForegroundColor(Color.Green);
                                            pdftblCGPA.Cell(0, 3).SetContent("Part\t-\tIII");

                                            pdftblCGPA.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblCGPA.Cell(0, 4).SetForegroundColor(Color.Green);
                                            pdftblCGPA.Cell(0, 4).SetContent("Overall Result\nPASS");
                                            foreach (PdfCell pc in pdftblCGPA.CellRange(0, 4, 0, 4).Cells)
                                            {
                                                pc.RowSpan = 3;
                                            }
                                            pdftblCGPA.Rows[0].SetCellPadding(1);

                                            pdftblCGPA.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblCGPA.Cell(1, 0).SetContent("\tSecured");

                                            pdftblCGPA.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblCGPA.Cell(1, 1).SetContent(part1SecMarks);

                                            pdftblCGPA.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblCGPA.Cell(1, 2).SetContent(part2SecMarks);

                                            pdftblCGPA.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblCGPA.Cell(1, 3).SetContent(part3SecMarks);

                                            pdftblCGPA.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblCGPA.Cell(2, 0).SetContent("Maximum");

                                            pdftblCGPA.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblCGPA.Cell(2, 1).SetContent(part1MaxTotal);

                                            pdftblCGPA.Cell(2, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblCGPA.Cell(2, 2).SetContent(part2MaxTotal);

                                            pdftblCGPA.Cell(2, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblCGPA.Cell(2, 3).SetContent(part3MaxTotal);

                                            pdftblPages = pdftblCGPA.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100)) + 5, markSheetDocument.PageWidth - (2 * startingPosX), 100));
                                            markSheetPage.Add(pdftblPages);

                                            for (int col = 0; col < 4; col++)
                                            {
                                                pdfLine = pdftblPages.CellArea(0, col).LowerBound(Color.Green, 1);
                                                markSheetPage.Add(pdfLine);
                                            }
                                            tableHeight = Convert.ToInt32(pdftblPages.Area.Height);
                                        }
                                        //else
                                        //{
                                        //    pdftblCGPA = markSheetDocument.NewTable(fontStudentDetail, 4, 5, 3);
                                        //    pdftblCGPA.VisibleHeaders = false;
                                        //    pdftblCGPA.SetBorders(Color.Green, 1, BorderType.CompleteGrid);
                                        //    pdftblCGPA.SetColumnsWidth(new int[] { 150, 200, 200, 200, 300 });

                                        //    pdftblCGPA.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //    pdftblCGPA.Cell(0, 0).SetForegroundColor(Color.Green);
                                        //    pdftblCGPA.Cell(0, 0).SetContent("");

                                        //    pdftblCGPA.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //    pdftblCGPA.Cell(0, 1).SetForegroundColor(Color.Green);
                                        //    pdftblCGPA.Cell(0, 1).SetContent("Part");
                                        //    foreach (PdfCell pc in pdftblCGPA.CellRange(0, 1, 0, 1).Cells)
                                        //    {
                                        //        pc.ColSpan = 3;
                                        //    }

                                        //    //pdftblCGPA.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //    //pdftblCGPA.Cell(0, 2).SetForegroundColor(Color.Green);
                                        //    //pdftblCGPA.Cell(0, 2).SetContent("Part\t-\tII");

                                        //    //pdftblCGPA.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //    //pdftblCGPA.Cell(0, 3).SetForegroundColor(Color.Green);
                                        //    //pdftblCGPA.Cell(0, 3).SetContent("Part\t-\tIII");

                                        //    pdftblCGPA.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //    pdftblCGPA.Cell(0, 4).SetForegroundColor(Color.Green);
                                        //    pdftblCGPA.Cell(0, 4).SetContent("Overall Result\nPASS");
                                        //    foreach (PdfCell pc in pdftblCGPA.CellRange(0, 4, 0, 4).Cells)
                                        //    {
                                        //        pc.RowSpan = 4;
                                        //    }
                                        //    pdftblCGPA.Rows[0].SetCellPadding(1);

                                        //    pdftblCGPA.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        //    pdftblCGPA.Cell(1, 0).SetContent("\t\tCGPA");

                                        //    pdftblCGPA.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        //    pdftblCGPA.Cell(1, 1).SetContent((!isMPhil) ? ((part3GPA != "--") ? ((part3SumGP != "" && part3EarnedCredit != "" && part3GPA != "") ? (part3SumGP + " / " + part3EarnedCredit + " = " + part3GPA) : "--") : "--") : ((part1GPA != "--") ? ((part1SumGP != "" && part1EarnedCredit != "" && part1GPA != "") ? (part1SumGP + " / " + part1EarnedCredit + " = " + part1GPA) : "--") : "--"));

                                        //    pdftblCGPA.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        //    pdftblCGPA.Cell(1, 2).SetContent("MAX. MARKS");

                                        //    pdftblCGPA.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        //    pdftblCGPA.Cell(1, 3).SetContent((!isMPhil) ? part3MaxTotal : part1MaxTotal);

                                        //    pdftblCGPA.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        //    pdftblCGPA.Cell(2, 0).SetContent("\tGRADE");

                                        //    pdftblCGPA.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        //    pdftblCGPA.Cell(2, 1).SetContent((!isMPhil) ? part3Grade : part1Grade);

                                        //    pdftblCGPA.Cell(2, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        //    pdftblCGPA.Cell(2, 2).SetContent("\t\tSEC. MARKS");

                                        //    pdftblCGPA.Cell(2, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        //    pdftblCGPA.Cell(2, 3).SetContent((!isMPhil) ? part3SecMarks : part1SecMarks);

                                        //    pdftblCGPA.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        //    pdftblCGPA.Cell(3, 0).SetContent("\t\tCLASS");

                                        //    pdftblCGPA.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        //    pdftblCGPA.Cell(3, 1).SetContent((!isMPhil) ? part3Classification : part1Classification);
                                        //    foreach (PdfCell pc in pdftblCGPA.CellRange(3, 1, 3, 1).Cells)
                                        //    {
                                        //        pc.ColSpan = 3;
                                        //    }

                                        //    pdftblPages = pdftblCGPA.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100)) + 5, markSheetDocument.PageWidth - (2 * startingPosX), 100));
                                        //    markSheetPage.Add(pdftblPages);

                                        //    for (int col = 0; col < 4; col++)
                                        //    {
                                        //        pdfLine = pdftblPages.CellArea(1, col).UpperBound(Color.Green, 1);
                                        //        markSheetPage.Add(pdfLine);
                                        //    }
                                        //    tableHeight = Convert.ToInt32(pdftblPages.Area.Height);
                                        //}

                                        #endregion

                                        //startingPosY += Convert.ToInt32(tableHeight) + 5;
                                        //pdftxt = new PdfTextArea(fontNote, Color.Green, new PdfArea(markSheetDocument, startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - startingPosY) + 8, markSheetDocument.PageWidth - (2 * startingPosX), 100), ContentAlignment.MiddleLeft, "I.A. - Internal Assessment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks. For " + eduLevel + " Passing Minimum is " + passingIA + " in I.A., & in S.E. and Overall\n\nPassing Minimum is " + passingSE + ". For details of Grade & Grade Point, see Overleaf. Any correction Invalidates.");
                                        pdftxt = new PdfTextArea(fontNote, Color.Green, new PdfArea(markSheetDocument, startingPosX + 10, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100)) + 10 + tableHeight, markSheetDocument.PageWidth - 20 - (2 * (startingPosX + 10)), 80), ContentAlignment.TopLeft, passingMsg);
                                        markSheetPage.Add(pdftxt);

                                        //pdftxt = new PdfTextArea(fontDate, Color.Black, new PdfArea(markSheetDocument, startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - startingPosY) + 100, markSheetDocument.PageWidth - (2 * startingPosX), 25), ContentAlignment.MiddleLeft, "Date of Publication\t:\t" + txtdop.Text.Trim());
                                        //markSheetPage.Add(pdftxt);

                                        pdftblDOP = markSheetDocument.NewTable(fontStudentDetail, 1, 4, 5);
                                        pdftblDOP.VisibleHeaders = false;
                                        pdftblDOP.SetBorders(Color.Black, 1, BorderType.None);
                                        pdftblDOP.SetColumnsWidth(new int[] { ((!isMPhil) ? 170 : 265), 700, 100, 200 });

                                        pdftblDOP.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        pdftblDOP.Cell(0, 0).SetColors(Color.Green, Color.White);
                                        if (!isMPhil)
                                        {
                                            pdftblDOP.Cell(0, 0).SetContent("Date of Publication\t:");

                                            pdftblDOP.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdftblDOP.Cell(0, 1).SetContent(txtdop.Text.Trim());
                                        }
                                        else
                                        {
                                            pdftblDOP.Cell(0, 0).SetContent("VIVA - VOCE Completed on\t:");
                                            if (!string.IsNullOrEmpty(vivaVoiceDate))
                                            {
                                                pdftblDOP.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                pdftblDOP.Cell(0, 1).SetContent(vivaVoiceDate.Trim());
                                            }
                                            else
                                            {
                                                pdftblDOP.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                                pdftblDOP.Cell(0, 1).SetContent(txtdop.Text.Trim());
                                            }
                                        }

                                        pdftblDOP.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleRight);
                                        pdftblDOP.Cell(0, 2).SetColors(Color.Green, Color.White);
                                        pdftblDOP.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        if (isHasFolioNumber)
                                        {
                                            pdftblDOP.Cell(0, 2).SetContent("Folio No.:");
                                            pdftblDOP.Cell(0, 3).SetContent(displayFolioNumber);
                                        }

                                        //pdftblDOP.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        //pdftblDOP.Cell(0, 1).SetContent(txtdop.Text.Trim());

                                        pdftblPages = pdftblDOP.CreateTablePage(new PdfArea(markSheetDocument, startingPosX - 5, Convert.ToInt32(markSheetDocument.PageHeight - startingPosY) + 88, markSheetDocument.PageWidth - (2 * startingPosX), 100));
                                        markSheetPage.Add(pdftblPages);

                                        //if (hasLab)
                                        //{
                                        //    pdftxt = new PdfTextArea(fontDate, Color.Black, new PdfArea(markSheetDocument, 62, Convert.ToInt32(markSheetDocument.PageHeight - startingPosY) + 199, 150, 25), ContentAlignment.MiddleLeft, "* PRACTICAL");
                                        //    markSheetPage.Add(pdftxt);
                                        //}

                                        pdftblFooter = markSheetDocument.NewTable(fontStudentDetail, 1, 3, 5);
                                        pdftblFooter.VisibleHeaders = false;
                                        pdftblFooter.SetBorders(Color.Black, 1, BorderType.None);
                                        pdftblFooter.SetColumnsWidth(new int[] { 280, 200, 280 });

                                        pdftblFooter.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblFooter.Cell(0, 0).SetContent("");//coeName

                                        pdftblFooter.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblFooter.Cell(0, 1).SetContent("");

                                        pdftblFooter.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblFooter.Cell(0, 2).SetContent("");//principalName

                                        //pdftblFooter.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //pdftblFooter.Cell(1, 0).SetContent("CONTROLLER OF EXAMINATIONS");

                                        //pdftblFooter.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //pdftblFooter.Cell(1, 1).SetContent("College Seal");

                                        //pdftblFooter.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //pdftblFooter.Cell(1, 2).SetContent("PRINCIPAL");

                                        pdftblPages = pdftblFooter.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - 60), markSheetDocument.PageWidth - (2 * startingPosX), 50));
                                        markSheetPage.Add(pdftblPages);

                                        isSheetsSaved = true;
                                        markSheetPage.SaveToDocument();
                                        //}

                                        startingPosX = 10;
                                        startingPosY = 240;

                                        markSheetPage = markSheetDocument.NewPage();

                                        pdftxt = new PdfTextArea(fontStatementHeading, Color.Green, new PdfArea(markSheetDocument, startingPosX, 187, markSheetDocument.PageWidth - (2 * startingPosX), 30), ContentAlignment.MiddleCenter, "CONSOLIDATED STATEMENT OF MARKS FOR - " + eduLevel + "" + strprgmm);
                                        markSheetPage.Add(pdftxt);

                                        pdftblStudentDetails = markSheetDocument.NewTable(fontStudentDetail, 2, 5, 4);
                                        pdftblStudentDetails.VisibleHeaders = false;
                                        pdftblStudentDetails.SetBorders(Color.Black, 1, BorderType.None);
                                        //pdftblStudentDetails.SetColumnsWidth(new int[] { 100, 950, 185, 20, 220 });
                                        pdftblStudentDetails.SetColumnsWidth(new int[] { 80, 969, 150, 15, 230 });

                                        //pdftblStudentDetails.Rows[0].SetCellPadding(1);
                                        //pdftblStudentDetails.Rows[1].SetCellPadding((studentName.Length > 15) ? 1 : 6);
                                        //pdftblStudentDetails.Rows[2].SetCellPadding(1);

                                        //pdftblStudentDetails.Rows[0].SetRowHeight(30);
                                        //pdftblStudentDetails.Rows[1].SetRowHeight(30);
                                        //pdftblStudentDetails.Rows[2].SetRowHeight(30);

                                        //pdftblStudentDetails.Cell(0, 2).SetCellPadding(2);
                                        pdftblStudentDetails.Cell(0, 2).SetContentAlignment(ContentAlignment.TopLeft);
                                        pdftblStudentDetails.Cell(0, 2).SetContent("Register No.");
                                        //pdftblStudentDetails.Cell(0, 2).SetCellPadding(1);
                                        pdftblStudentDetails.Cell(0, 2).SetForegroundColor(Color.Green);

                                        pdftblStudentDetails.Cell(0, 3).SetContentAlignment(ContentAlignment.TopCenter);
                                        pdftblStudentDetails.Cell(0, 3).SetContent(":");
                                        //pdftblStudentDetails.Cell(0, 3).SetCellPadding(1);
                                        pdftblStudentDetails.Cell(0, 3).SetForegroundColor(Color.Green);

                                        pdftblStudentDetails.Cell(0, 4).SetContentAlignment(ContentAlignment.TopLeft);
                                        pdftblStudentDetails.Cell(0, 4).SetContent(registerNo);
                                        //pdftblStudentDetails.Cell(0, 4).SetCellPadding(1);

                                        pdftblStudentDetails.Cell(1, 0).SetContentAlignment(ContentAlignment.BottomLeft);
                                        pdftblStudentDetails.Cell(1, 0).SetContent("Name : ");
                                        //pdftblStudentDetails.Cell(1, 0).SetCellPadding(1);
                                        pdftblStudentDetails.Cell(1, 0).SetForegroundColor(Color.Green);

                                        pdftblStudentDetails.Cell(1, 1).SetContentAlignment(ContentAlignment.BottomLeft);
                                        pdftblStudentDetails.Cell(1, 1).SetContent(studentName);
                                        //pdftblStudentDetails.Cell(1, 1).SetCellPadding(1);
                                        //foreach (PdfCell pc in pdftblStudentDetails.CellRange(1, 1, 1, 1).Cells)
                                        //{
                                        //    pc.ColSpan = 2;
                                        //}

                                        pdftblStudentDetails.Cell(1, 2).SetContentAlignment(ContentAlignment.BottomLeft);
                                        pdftblStudentDetails.Cell(1, 2).SetContent("Date of Birth");
                                        //pdftblStudentDetails.Cell(1, 2).SetCellPadding(1);
                                        pdftblStudentDetails.Cell(1, 2).SetForegroundColor(Color.Green);

                                        pdftblStudentDetails.Cell(1, 3).SetContentAlignment(ContentAlignment.BottomCenter);
                                        pdftblStudentDetails.Cell(1, 3).SetContent(":");
                                        //pdftblStudentDetails.Cell(1, 3).SetCellPadding(1);
                                        pdftblStudentDetails.Cell(1, 3).SetForegroundColor(Color.Green);

                                        pdftblStudentDetails.Cell(1, 4).SetContentAlignment(ContentAlignment.BottomLeft);
                                        pdftblStudentDetails.Cell(1, 4).SetContent(dateOfBirth);
                                        //pdftblStudentDetails.Cell(1, 4).SetCellPadding(1);

                                        //pdftblStudentDetails.Cell(2, 0).SetContentAlignment(ContentAlignment.BottomLeft);
                                        //pdftblStudentDetails.Cell(2, 0).SetContent("Degree & Branch :");
                                        //pdftblStudentDetails.Cell(2, 0).SetCellPadding(1);
                                        //pdftblStudentDetails.Cell(2, 0).SetForegroundColor(Color.Green);
                                        //foreach (PdfCell pc in pdftblStudentDetails.CellRange(2, 0, 2, 0).Cells)
                                        //{
                                        //    pc.ColSpan = 2;
                                        //}                        

                                        //pdftblStudentDetails.Cell(2, 2).SetContentAlignment(ContentAlignment.BottomLeft);
                                        //pdftblStudentDetails.Cell(2, 2).SetContent(courseName.Trim() + " - " + departmentName);
                                        //pdftblStudentDetails.Cell(2, 2).SetCellPadding(1);

                                        //pdftblStudentDetails.Cell(2, 3).SetContentAlignment(ContentAlignment.BottomLeft);
                                        //pdftblStudentDetails.Cell(2, 3).SetContent("Month & Year");
                                        //pdftblStudentDetails.Cell(2, 3).SetForegroundColor(Color.Green);

                                        //pdftblStudentDetails.Cell(2, 4).SetContentAlignment(ContentAlignment.BottomCenter);
                                        //pdftblStudentDetails.Cell(2, 4).SetContent(":");
                                        //pdftblStudentDetails.Cell(2, 4).SetForegroundColor(Color.Green);

                                        //pdftblStudentDetails.Cell(2, 5).SetContentAlignment(ContentAlignment.BottomLeft);
                                        //pdftblStudentDetails.Cell(2, 5).SetContent(displayMonthYear);

                                        pdftblPages = pdftblStudentDetails.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, startingPosY, markSheetDocument.PageWidth - (2 * startingPosX), 150));
                                        markSheetPage.Add(pdftblPages);
                                        tableHeight = pdftblPages.Area.Height;
                                        startingPosY += Convert.ToInt32(tableHeight);

                                        //if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg")))
                                        //{
                                        //    pdfImgLogo = markSheetDocument.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg"));
                                        //    markSheetPage.Add(pdfImgLogo, markSheetDocument.PageWidth - (80 + (2 * startingPosX)), 100, 180);
                                        //}
                                        //else
                                        //{
                                        //    if (File.Exists(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg")))
                                        //    {
                                        //        pdfImgLogo = markSheetDocument.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                        //        markSheetPage.Add(pdfImgLogo, markSheetDocument.PageWidth - (80 + (2 * startingPosX)), 100, 180);
                                        //    }
                                        //}

                                        pdftblStudentDetails = markSheetDocument.NewTable(fontStudentDetail, 1, 5, 4);
                                        pdftblStudentDetails.VisibleHeaders = false;
                                        pdftblStudentDetails.SetBorders(Color.Black, 1, BorderType.None);
                                        //pdftblStudentDetails.SetColumnsWidth(new int[] { 200, 850, 185, 20, 220 });
                                        pdftblStudentDetails.SetColumnsWidth(new int[] { 180, 869, 150, 15, 230 });

                                        pdftblStudentDetails.Cell(0, 0).SetContentAlignment(ContentAlignment.BottomLeft);
                                        pdftblStudentDetails.Cell(0, 0).SetContent("Degree & Branch :");
                                        //pdftblStudentDetails.Cell(0, 0).SetCellPadding(1);
                                        pdftblStudentDetails.Cell(0, 0).SetForegroundColor(Color.Green);
                                        //foreach (PdfCell pc in pdftblStudentDetails.CellRange(0, 0, 0, 0).Cells)
                                        //{
                                        //    pc.ColSpan = 2;
                                        //}

                                        pdftblStudentDetails.Cell(0, 1).SetContentAlignment(ContentAlignment.BottomLeft);
                                        pdftblStudentDetails.Cell(0, 1).SetContent(courseName.Trim() + " - " + departmentName);
                                        //pdftblStudentDetails.Cell(0, 1).SetCellPadding(1);

                                        pdftblStudentDetails.Cell(0, 2).SetContentAlignment(ContentAlignment.BottomLeft);
                                        pdftblStudentDetails.Cell(0, 2).SetContent("Month & Year");
                                        pdftblStudentDetails.Cell(0, 2).SetForegroundColor(Color.Green);

                                        pdftblStudentDetails.Cell(0, 3).SetContentAlignment(ContentAlignment.BottomCenter);
                                        pdftblStudentDetails.Cell(0, 3).SetContent(":");
                                        pdftblStudentDetails.Cell(0, 3).SetForegroundColor(Color.Green);

                                        pdftblStudentDetails.Cell(0, 4).SetContentAlignment(ContentAlignment.BottomLeft);
                                        pdftblStudentDetails.Cell(0, 4).SetContent(displayMonthYear);

                                        pdftblPages = pdftblStudentDetails.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, startingPosY, markSheetDocument.PageWidth - (2 * startingPosX), 100));
                                        markSheetPage.Add(pdftblPages);
                                        tableHeight = pdftblPages.Area.Height;
                                        startingPosY += Convert.ToInt32(tableHeight) + 5;

                                        pdftblMarksContent = markSheetDocument.NewTable(fontMarkStatement, totalRows, 15, 5);
                                        pdftblMarksContent.VisibleHeaders = false;
                                        pdftblMarksContent.SetBorders(Color.Green, 1, BorderType.None);
                                        //pdftblMarksContent.SetColumnsWidth(new int[] { 55, 70, 188, 248, 248, 98, 65, 65, 65, 65, 65, 65, 70, 90, 105 });
                                        // pdftblMarksContent.SetColumnsWidth(new int[] { 55, 70, 140, 265, 265, 110, 65, 65, 65, 65, 65, 65, 70, 90, 105 });
                                        pdftblMarksContent.SetColumnsWidth(new int[] { 55, 70, 150, 275, 265, 110, 65, 65, 65, 65, 65, 65, 70, 90, 105 });

                                        markColumn = 0;
                                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(0, markColumn).SetContent("Part");
                                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                                        {
                                            pc.RowSpan = 2;
                                        }

                                        markColumn++;
                                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(0, markColumn).SetContent("Sem");
                                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                                        {
                                            pc.RowSpan = 2;
                                        }

                                        markColumn++;
                                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(0, markColumn).SetContent("Course Code");
                                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                                        {
                                            pc.RowSpan = 2;
                                        }

                                        markColumn++;
                                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(0, markColumn).SetContent("Course Title");
                                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                                        {
                                            pc.RowSpan = 2;
                                            pc.ColSpan = 2;
                                        }

                                        markColumn += 2;
                                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(0, markColumn).SetContent("Passed in\nMonth/Year");
                                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                                        {
                                            pc.RowSpan = 2;
                                        }

                                        markColumn++;
                                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(0, markColumn).SetContent("I.A.");
                                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                                        {
                                            pc.ColSpan = 2;
                                        }
                                        pdftblMarksContent.Cell(1, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(1, markColumn).SetContent("Max.");
                                        pdftblMarksContent.Cell(1, markColumn).SetCellPadding(3);
                                        pdftblMarksContent.Cell(1, markColumn).SetForegroundColor(Color.Green);

                                        markColumn++;
                                        pdftblMarksContent.Cell(1, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(1, markColumn).SetContent("Sec.");
                                        pdftblMarksContent.Cell(1, markColumn).SetCellPadding(3);
                                        pdftblMarksContent.Cell(1, markColumn).SetForegroundColor(Color.Green);

                                        markColumn++;
                                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(0, markColumn).SetContent("S.E.");
                                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                                        {
                                            pc.ColSpan = 2;
                                        }
                                        pdftblMarksContent.Cell(1, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(1, markColumn).SetContent("Max.");
                                        pdftblMarksContent.Cell(1, markColumn).SetCellPadding(3);
                                        pdftblMarksContent.Cell(1, markColumn).SetForegroundColor(Color.Green);

                                        markColumn++;
                                        pdftblMarksContent.Cell(1, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(1, markColumn).SetContent("Sec.");
                                        pdftblMarksContent.Cell(1, markColumn).SetCellPadding(3);
                                        pdftblMarksContent.Cell(1, markColumn).SetForegroundColor(Color.Green);

                                        markColumn++;
                                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(0, markColumn).SetContent("Total");
                                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                                        {
                                            pc.ColSpan = 2;
                                        }
                                        pdftblMarksContent.Cell(1, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(1, markColumn).SetContent("Max.");
                                        pdftblMarksContent.Cell(1, markColumn).SetCellPadding(3);
                                        pdftblMarksContent.Cell(1, markColumn).SetForegroundColor(Color.Green);

                                        markColumn++;
                                        pdftblMarksContent.Cell(1, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(1, markColumn).SetContent("Sec.");
                                        pdftblMarksContent.Cell(1, markColumn).SetCellPadding(3);
                                        pdftblMarksContent.Cell(1, markColumn).SetForegroundColor(Color.Green);

                                        markColumn++;
                                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(0, markColumn).SetContent("Credit Earned");
                                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                                        {
                                            pc.RowSpan = 2;
                                        }

                                        markColumn++;
                                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(0, markColumn).SetContent("Grade Point");
                                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                                        {
                                            pc.RowSpan = 2;
                                        }

                                        markColumn++;
                                        pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(0, markColumn).SetContent("Weighted Marks");
                                        pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                                        pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                                        foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                                        {
                                            pc.RowSpan = 2;
                                        }

                                        //markColumn++;
                                        //pdftblMarksContent.Cell(0, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //pdftblMarksContent.Cell(0, markColumn).SetCellPadding(3);
                                        //pdftblMarksContent.Cell(0, markColumn).SetContent("Result");
                                        //pdftblMarksContent.Cell(0, markColumn).SetForegroundColor(Color.Green);
                                        //foreach (PdfCell pc in pdftblMarksContent.CellRange(0, markColumn, 0, markColumn).Cells)
                                        //{
                                        //    pc.RowSpan = 2;
                                        //}
                                        markRow = 2;
                                        subMarkRow = 0;

                                    }

                                    #endregion

                                    if (markRow == 2)
                                    {
                                        if (dicSheetRow.ContainsKey(sheetNo))
                                            dicSheetRow[sheetNo] = markRow;
                                        else
                                            dicSheetRow.Add(sheetNo, markRow);
                                        int maxRows = dicSheetRow.Count;

                                        if (totalSheetRequired > 1 && dtStudentsMarkList.Rows.Count > 30)
                                        {
                                            pdftblMarksContent.Cell(markRow, 3).SetCellPadding(5);
                                            pdftblMarksContent.Cell(markRow, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdftblMarksContent.Cell(markRow, 3).SetContent("--- SHEET " + sheetNo + " OF " + totalSheetRequired + "  ---");
                                            foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, 3, markRow, 3).Cells)
                                            {
                                                pc.ColSpan = 2;
                                            }
                                        }
                                        //foreach (KeyValuePair<int, int> sheet in dicSheetRow)
                                        //{
                                        //    int row = sheet.Value;
                                        //    pdftblMarksContent.Cell(row, 3).SetCellPadding(5);
                                        //    pdftblMarksContent.Cell(row, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        //    pdftblMarksContent.Cell(row, 3).SetContent("--- SHEET " + sheet.Key + " OF " + totalSheetRequired + "  ---");
                                        //    foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, 3, markRow, 3).Cells)
                                        //    {
                                        //        pc.ColSpan = 2;
                                        //    }

                                        //}
                                        markRow++;
                                    }

                                    markColumn = 0;
                                    pdftblMarksContent.Cell(markRow, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    pdftblMarksContent.Cell(markRow, markColumn).SetContent(displayPartType);

                                    markColumn++;
                                    pdftblMarksContent.Cell(markRow, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    pdftblMarksContent.Cell(markRow, markColumn).SetContent(displaySemster);

                                    markColumn++;
                                    pdftblMarksContent.Cell(markRow, markColumn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    pdftblMarksContent.Cell(markRow, markColumn).SetContent(displayCourseCode);

                                    markColumn++;
                                    pdftblMarksContent.Cell(markRow, markColumn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    pdftblMarksContent.Cell(markRow, markColumn).SetContent(displayCourseTitle);
                                    pdftblMarksContent.Cell(markRow, markColumn).SetFont(fontMarkStatement1);
                                    foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, markColumn, markRow, markColumn).Cells)
                                    {
                                        pc.ColSpan = 2;
                                    }

                                    if (MarkOrExempted.Trim() == "0")
                                    {
                                        markColumn += 2;
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContent(displayMonthandYear);

                                        markColumn++;
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContent(displayMaxINT);

                                        markColumn++;
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContent(displayINT);

                                        markColumn++;
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContent(displayMaxEXT);

                                        markColumn++;
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContent(displayEXT);

                                        markColumn++;
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContent(displayMaxTOT);

                                        markColumn++;
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContent(displayTOT);

                                        markColumn++;
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContent((creditPoints == 0) ? "" : displayCreditPoint);

                                        markColumn++;
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContent(displayGP);

                                        markColumn++;
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContent(displayWM);
                                    }
                                    else
                                    {
                                        markColumn += 2;

                                        pdftblMarksContent.Cell(markRow, markColumn).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        pdftblMarksContent.Cell(markRow, markColumn).SetContent(displayMarkOrExempted);
                                        foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, markColumn, markRow, markColumn).Cells)
                                        {
                                            pc.ColSpan = 4;
                                        }
                                        displayCreditPoint = creditPoint.PadLeft(2, '0');
                                        pdftblMarksContent.Cell(markRow, 12).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        pdftblMarksContent.Cell(markRow, 12).SetContent((creditPoints == 0) ? "" : displayCreditPoint);
                                    }
                                    //markColumn++;
                                    //pdftblMarksContent.Cell(markRow, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    //pdftblMarksContent.Cell(markRow, markColumn).SetContent(displayResult);
                                    subMarkRow++;
                                    markRow++;
                                }
                            }
                            //pdftblMarksContent.Cell(markRow, markColumn).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblMarksContent.Rows[markRow].SetCellPadding(8);
                            foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, 3, markRow, 3).Cells)
                            {
                                pc.ColSpan = 2;
                            }
                            markRow++;
                        }
                        for (int r = markRow; r < totalRows; r++)
                        {
                            foreach (PdfCell pc in pdftblMarksContent.CellRange(r, 3, r, 3).Cells)
                            {
                                pc.ColSpan = 2;
                            }
                        }
                        pdftblMarksContent.Cell(markRow + 1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblMarksContent.Cell(markRow + 1, 3).SetContent(">>>>>\tEND OF STATEMENT\t<<<<<");
                        pdftblMarksContent.Cell(markRow + 1, 3).SetCellPadding(5);
                        foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow + 1, 3, markRow + 1, 3).Cells)
                        {
                            pc.ColSpan = 2;
                        }
                        if (hasLab)
                        {
                            markRow++;
                            pdftblMarksContent.Cell(markRow, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdftblMarksContent.Cell(markRow, 0).SetContent("* PRACTICAL");
                            pdftblMarksContent.Cell(markRow, 0).SetCellPadding(8);
                            foreach (PdfCell pc in pdftblMarksContent.CellRange(markRow, 0, markRow, 0).Cells)
                            {
                                pc.ColSpan = 3;
                            }
                            markRow++;
                        }
                        //pdftblMarksContent.Rows[markRow + 2].SetCellPadding(8);
                        //markRow += 2;

                        pdftblPages = pdftblMarksContent.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, startingPosY, markSheetDocument.PageWidth - (2 * startingPosX), markSheetDocument.PageHeight - startingPosY));
                        markSheetPage.Add(pdftblPages);

                        pdfLine = pdftblPages.Area.UpperBound(Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        //pdfLine = pdftblPages.Area.UpperBound(Color.Green, 1);
                        //markSheetPage.Add(pdfLine);

                        for (int col = 0; col < 15; col++)
                        {
                            if (col >= 6 && col <= 11)
                            {
                                pdfLine = pdftblPages.CellArea(1, col).LowerBound(Color.Green, 1);
                                markSheetPage.Add(pdfLine);
                                if (col % 2 == 0)
                                {
                                    //pdfLine = pdftblPages.CellArea(0, col).LowerBound(Color.Green, 1);
                                    //markSheetPage.Add(pdfLine);
                                }
                            }
                            else if (col != 4)
                            {
                                pdfLine = pdftblPages.CellArea(0, col).LowerBound(Color.Green, 1);
                                markSheetPage.Add(pdfLine);
                            }
                        }

                        //Vertical Line 1
                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX, startingPosY), new Point(startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), new Point(Convert.ToInt32(markSheetDocument.PageWidth - startingPosX), Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(Convert.ToInt32(markSheetDocument.PageWidth - startingPosX), startingPosY), new Point(Convert.ToInt32(markSheetDocument.PageWidth - startingPosX), Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 41, startingPosY), new Point(startingPosX + 41, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 92, startingPosY), new Point(startingPosX + 92, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 197, startingPosY), new Point(startingPosX + 197, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 596, startingPosY), new Point(startingPosX + 596, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 675, startingPosY), new Point(startingPosX + 675, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 675, startingPosY + 30), new Point(startingPosX + 962, startingPosY + 30), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 724, startingPosY + 30), new Point(startingPosX + 724, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 770, startingPosY), new Point(startingPosX + 770, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 819, startingPosY + 30), new Point(startingPosX + 819, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 866, startingPosY), new Point(startingPosX + 866, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 914, startingPosY + 30), new Point(startingPosX + 914, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 962, startingPosY), new Point(startingPosX + 962, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 1012, startingPosY), new Point(startingPosX + 1012, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 1078, startingPosY), new Point(startingPosX + 1078, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100))), Color.Green, 1);
                        markSheetPage.Add(pdfLine);

                        //------------------------------------
                        //pdfLine = new PdfLine(markSheetDocument, new Point(startingPosX + 1015, startingPosY), new Point(startingPosX + 1015, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY+100))), Color.Green, 1);
                        //markSheetPage.Add(pdfLine);

                        //tableHeight = pdftblPages.Area.Height;
                        //tableHeight = Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY));
                        //startingPosY += Convert.ToInt32(tableHeight) + 5;

                        #region CGPA

                        if (eduLevel.Trim().ToLower() == "ug")
                        {
                            pdftblCGPA = markSheetDocument.NewTable(fontStudentDetail, 4, 5, 3);
                            pdftblCGPA.VisibleHeaders = false;
                            pdftblCGPA.SetBorders(Color.Green, 1, BorderType.CompleteGrid);
                            pdftblCGPA.SetColumnsWidth(new int[] { 150, 200, 200, 200, 300 });

                            pdftblCGPA.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(0, 0).SetForegroundColor(Color.Green);
                            pdftblCGPA.Cell(0, 0).SetContent("Part");

                            pdftblCGPA.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(0, 1).SetForegroundColor(Color.Green);
                            pdftblCGPA.Cell(0, 1).SetContent("Part\t-\tI");

                            pdftblCGPA.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(0, 2).SetForegroundColor(Color.Green);
                            pdftblCGPA.Cell(0, 2).SetContent("Part\t-\tII");

                            pdftblCGPA.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(0, 3).SetForegroundColor(Color.Green);
                            pdftblCGPA.Cell(0, 3).SetContent("Part\t-\tIII");

                            pdftblCGPA.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(0, 4).SetForegroundColor(Color.Green);
                            pdftblCGPA.Cell(0, 4).SetContent("Overall Result\nPASS");
                            foreach (PdfCell pc in pdftblCGPA.CellRange(0, 4, 0, 4).Cells)
                            {
                                pc.RowSpan = 4;
                            }
                            pdftblCGPA.Rows[0].SetCellPadding(1);

                            pdftblCGPA.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(1, 0).SetContent("\t\t\tCGPA");

                            pdftblCGPA.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(1, 1).SetContent(((part1GPA != "--") ? ((part1SumGP != "" && part1EarnedCredit != "" && part1GPA != "") ? (part1SumGP + " / " + part1EarnedCredit + " = " + part1GPA) : "--") : "--"));

                            pdftblCGPA.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(1, 2).SetContent(((part2GPA != "--") ? ((part2SumGP != "" && part2EarnedCredit != "" && part2GPA != "") ? (part2SumGP + " / " + part2EarnedCredit + " = " + part2GPA) : "--") : "--"));

                            pdftblCGPA.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(1, 3).SetContent(((part3GPA != "--") ? ((part3SumGP != "" && part3EarnedCredit != "" && part3GPA != "") ? (part3SumGP + " / " + part3EarnedCredit + " = " + part3GPA) : "--") : "--"));

                            pdftblCGPA.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(2, 0).SetContent("\t\tGRADE");

                            pdftblCGPA.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(2, 1).SetContent(part1Grade);

                            pdftblCGPA.Cell(2, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(2, 2).SetContent(part2Grade);

                            pdftblCGPA.Cell(2, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(2, 3).SetContent(part3Grade);

                            pdftblCGPA.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(3, 0).SetContent("\t\tCLASS");

                            pdftblCGPA.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(3, 1).SetContent(part1Classification);

                            pdftblCGPA.Cell(3, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(3, 2).SetContent(part2Classification);

                            pdftblCGPA.Cell(3, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(3, 3).SetContent(part3Classification);

                            pdftblPages = pdftblCGPA.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100)) + 5, markSheetDocument.PageWidth - (2 * startingPosX), 100));
                            markSheetPage.Add(pdftblPages);

                            tableHeight = Convert.ToInt32(pdftblPages.Area.Height);
                            for (int col = 0; col < 4; col++)
                            {
                                pdfLine = pdftblPages.CellArea(0, col).LowerBound(Color.Green, 1);
                                markSheetPage.Add(pdfLine);
                            }
                        }
                        else
                        {
                            pdftblCGPA = markSheetDocument.NewTable(fontStudentDetail, 4, 5, 3);
                            pdftblCGPA.VisibleHeaders = false;
                            pdftblCGPA.SetBorders(Color.Green, 1, BorderType.CompleteGrid);
                            pdftblCGPA.SetColumnsWidth(new int[] { 150, 200, 200, 200, 300 });

                            pdftblCGPA.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(0, 0).SetForegroundColor(Color.Green);
                            pdftblCGPA.Cell(0, 0).SetContent("");

                            pdftblCGPA.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(0, 1).SetForegroundColor(Color.Green);
                            pdftblCGPA.Cell(0, 1).SetContent("Part");
                            foreach (PdfCell pc in pdftblCGPA.CellRange(0, 1, 0, 1).Cells)
                            {
                                pc.ColSpan = 3;
                            }

                            //pdftblCGPA.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            //pdftblCGPA.Cell(0, 2).SetForegroundColor(Color.Green);
                            //pdftblCGPA.Cell(0, 2).SetContent("Part\t-\tII");

                            //pdftblCGPA.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            //pdftblCGPA.Cell(0, 3).SetForegroundColor(Color.Green);
                            //pdftblCGPA.Cell(0, 3).SetContent("Part\t-\tIII");

                            DataTable dtFail = new DataTable();//Rajkumar 22/2/2018
                            if (isMPhil)
                            {
                                string strclass = "select * from mark_entry  where result like '%fail%' and roll_no='" + rollNo + "'";
                                dtFail = dirAcc.selectDataTable(strclass);
                                if (dtFail.Rows.Count > 0)
                                {
                                    part1Classification = "II";
                                    part1Grade = "B";
                                }
                            }
                            pdftblCGPA.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdftblCGPA.Cell(0, 4).SetForegroundColor(Color.Green);
                            pdftblCGPA.Cell(0, 4).SetContent("Overall Result\nPASS");
                            foreach (PdfCell pc in pdftblCGPA.CellRange(0, 4, 0, 4).Cells)
                            {
                                pc.RowSpan = 4;
                            }
                            pdftblCGPA.Rows[0].SetCellPadding(1);

                            pdftblCGPA.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdftblCGPA.Cell(1, 0).SetContent("CGPA");

                            pdftblCGPA.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdftblCGPA.Cell(1, 1).SetContent((!isMPhil) ? ((part3GPA != "--") ? ((part3SumGP != "" && part3EarnedCredit != "" && part3GPA != "") ? (part3SumGP + " / " + part3EarnedCredit + " = " + part3GPA) : "--") : "--") : ((part1GPA != "--") ? ((part1SumGP != "" && part1EarnedCredit != "" && part1GPA != "") ? (part1SumGP + " / " + part1EarnedCredit + " = " + part1GPA) : "--") : "--"));

                            pdftblCGPA.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdftblCGPA.Cell(1, 2).SetContent("MAX. MARKS");

                            pdftblCGPA.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdftblCGPA.Cell(1, 3).SetContent((!isMPhil) ? part3MaxTotal : part1MaxTotal);

                            pdftblCGPA.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdftblCGPA.Cell(2, 0).SetContent("GRADE");

                            pdftblCGPA.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdftblCGPA.Cell(2, 1).SetContent((!isMPhil) ? part3Grade : part1Grade);

                            pdftblCGPA.Cell(2, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdftblCGPA.Cell(2, 2).SetContent("SEC. MARKS");

                            pdftblCGPA.Cell(2, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdftblCGPA.Cell(2, 3).SetContent((!isMPhil) ? part3SecMarks : part1SecMarks);

                            pdftblCGPA.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdftblCGPA.Cell(3, 0).SetContent("CLASS");



                            pdftblCGPA.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdftblCGPA.Cell(3, 1).SetContent((!isMPhil) ? part3Classification : part1Classification);
                            if (eduLevel.ToUpper() != "M.PHIL.")  //added by Mullai
                            {
                                if (batchYr > 2015)
                                {
                                    pdftblCGPA.Cell(3, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    pdftblCGPA.Cell(3, 2).SetContent("CWAM");

                                    pdftblCGPA.Cell(3, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    pdftblCGPA.Cell(3, 3).SetContent((!isMPhil) ? part3WAM : part1WAM);
                                }
                                else
                                {
                                    foreach (PdfCell pc in pdftblCGPA.CellRange(3, 1, 3, 1).Cells)
                                    {
                                        pc.ColSpan = 3;
                                    }
                                }
                            }
                            else
                            {
                                foreach (PdfCell pc in pdftblCGPA.CellRange(3, 1, 3, 1).Cells)
                                {
                                    pc.ColSpan = 3;
                                }
                            }

                            pdftblPages = pdftblCGPA.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100)) + 5, markSheetDocument.PageWidth - (2 * startingPosX), 100));
                            markSheetPage.Add(pdftblPages);

                            for (int col = 0; col < 4; col++)
                            {
                                pdfLine = pdftblPages.CellArea(1, col).UpperBound(Color.Green, 1);
                                markSheetPage.Add(pdfLine);
                            }
                            tableHeight = Convert.ToInt32(pdftblPages.Area.Height);
                        }

                        #endregion

                        //pdftxt = new PdfTextArea(fontNote, Color.Green, new PdfArea(markSheetDocument, startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - startingPosY) + 8, markSheetDocument.PageWidth - (2 * startingPosX), 100), ContentAlignment.MiddleLeft, "I.A. - Internal Assesment, S.E. - Semester Examinations, Max. - Maximum Marks, Sec. - Secured Marks. For " + eduLevel + " Passing Minimum is " + passingIA + " in I.A., & in S.E. and Overall\n\nPassing Minimum is " + passingSE + ". For details of Grade & Grade Point see Overleaf. Any correction Invalidates."); Convert.ToInt32(markSheetDocument.PageHeight - startingPosY)
                        pdftxt = new PdfTextArea(fontNote, Color.Green, new PdfArea(markSheetDocument, (startingPosX + 10), Convert.ToInt32(markSheetDocument.PageHeight - (startingPosY + 100)) + 10 + tableHeight, markSheetDocument.PageWidth - 20 - (2 * (startingPosX + 10)), 80), ContentAlignment.TopLeft, passingMsg);
                        markSheetPage.Add(pdftxt);

                        //pdftxt = new PdfTextArea(fontDate, Color.Black, new PdfArea(markSheetDocument, startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - startingPosY) + 100, markSheetDocument.PageWidth - (2 * startingPosX), 25), ContentAlignment.MiddleLeft, "Date of Publication\t:\t" + txtdop.Text.Trim());
                        //markSheetPage.Add(pdftxt);

                        pdftblDOP = markSheetDocument.NewTable(fontStudentDetail, 1, 4, 5);
                        pdftblDOP.VisibleHeaders = false;
                        pdftblDOP.SetBorders(Color.Black, 1, BorderType.None);
                        pdftblDOP.SetColumnsWidth(new int[] { ((!isMPhil) ? 170 : 265), 700, 100, 200 });

                        pdftblDOP.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        pdftblDOP.Cell(0, 0).SetColors(Color.Green, Color.White);
                        //pdftblDOP.Cell(0, 0).SetContent("Date of Publication\t:");
                        if (!isMPhil)
                        {
                            pdftblDOP.Cell(0, 0).SetContent("Date of Publication\t:");
                            pdftblDOP.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdftblDOP.Cell(0, 1).SetContent(txtdop.Text.Trim());
                        }
                        else
                        {
                            pdftblDOP.Cell(0, 0).SetContent("VIVA - VOCE Completed on\t:");
                            if (!string.IsNullOrEmpty(vivaVoiceDate))
                            {
                                pdftblDOP.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                pdftblDOP.Cell(0, 1).SetContent(vivaVoiceDate.Trim());
                            }
                            else
                            {
                                pdftblDOP.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                pdftblDOP.Cell(0, 1).SetContent(txtdop.Text.Trim());
                            }
                        }

                        //pdftblDOP.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        //pdftblDOP.Cell(0, 1).SetContent(txtdop.Text.Trim());

                        pdftblDOP.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleRight);
                        pdftblDOP.Cell(0, 2).SetColors(Color.Green, Color.White);
                        pdftblDOP.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                        if (isHasFolioNumber)
                        {
                            pdftblDOP.Cell(0, 2).SetContent("Folio No.:");
                            pdftblDOP.Cell(0, 3).SetContent(displayFolioNumber);
                        }

                        pdftblPages = pdftblDOP.CreateTablePage(new PdfArea(markSheetDocument, startingPosX - 5, Convert.ToInt32(markSheetDocument.PageHeight - startingPosY) + 88, markSheetDocument.PageWidth - (2 * startingPosX), 100));
                        markSheetPage.Add(pdftblPages);

                        pdftblFooter = markSheetDocument.NewTable(fontStudentDetail, 1, 3, 5);
                        pdftblFooter.VisibleHeaders = false;
                        pdftblFooter.SetBorders(Color.Black, 1, BorderType.None);
                        pdftblFooter.SetColumnsWidth(new int[] { 280, 200, 280 });

                        pdftblFooter.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblFooter.Cell(0, 0).SetContent("");//coeName

                        pdftblFooter.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblFooter.Cell(0, 1).SetContent("");

                        pdftblFooter.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdftblFooter.Cell(0, 2).SetContent("");//principalName

                        //pdftblFooter.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        //pdftblFooter.Cell(1, 0).SetContent("CONTROLLER OF EXAMINATIONS");

                        //pdftblFooter.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        //pdftblFooter.Cell(1, 1).SetContent("College Seal");

                        //pdftblFooter.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        //pdftblFooter.Cell(1, 2).SetContent("PRINCIPAL");

                        pdftblPages = pdftblFooter.CreateTablePage(new PdfArea(markSheetDocument, startingPosX, Convert.ToInt32(markSheetDocument.PageHeight - 60), markSheetDocument.PageWidth - (2 * startingPosX), 50));
                        markSheetPage.Add(pdftblPages);



                        #region principal
                        string princisign = string.Empty;
                        princisign = "select principal_sign from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                        MemoryStream memoryStream1 = new MemoryStream();
                        DataSet dsprincisign = new DataSet();
                        dsprincisign.Clear();
                        dsprincisign.Dispose();
                        dsprincisign = da.select_method_wo_parameter(princisign, "Text");
                        if (dsprincisign.Tables.Count > 0 && dsprincisign.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsprincisign.Tables[0].Rows[0][0]).Trim()))
                        {
                            byte[] file = (byte[])dsprincisign.Tables[0].Rows[0][0];
                            memoryStream1.Write(file, 0, file.Length);
                            if (file.Length > 0)
                            {
                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream1, true, true);
                                System.Drawing.Image thumb = imgx.GetThumbnailImage(250, 250, null, IntPtr.Zero);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                                {
                                }
                                else
                                {
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                }
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                        {
                            PdfImage coesiImage2 = markSheetDocument.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"));
                            markSheetPage.Add(coesiImage2, 1000, 1520, 200);

                        }
                        else
                        {
                            PdfImage coesiImage2 = markSheetDocument.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                            markSheetPage.Add(coesiImage2, 1000, 1520, 200);

                        }

                        #endregion



                        isSheetsSaved = true;
                        markSheetPage.SaveToDocument();
                    }
                    else
                    {
                        if (dicErrMsg.ContainsKey(1))
                        {
                            sbErrMsg = dicErrMsg[1];
                            sbErrMsg.Append(registerNo + ",");
                            dicErrMsg[1] = sbErrMsg;
                        }
                        else
                        {
                            sbErrMsg = new StringBuilder();
                            sbErrMsg.Append(registerNo + ",");
                            dicErrMsg.Add(1, sbErrMsg);
                        }
                        continue;
                    }
                    studRow++;
                    continue;
                }
                if (dicErrMsg.Count > 0)
                {
                    lblerror.Text = dicErrMsg.ContainsKey(1) ? dicErrMsg[1].ToString().Trim(',') : "";
                    lblerror.Visible = true;
                }
                else
                {
                    lblerror.Text = string.Empty;
                    lblerror.Visible = false;
                }
                if (isSheetsSaved)
                {
                    string filePath = HttpContext.Current.Server.MapPath("~");
                    if (filePath != "")
                    {
                        string szPath = filePath + "/Report/";
                        string szFile = "consolidatedmarksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmssfff") + ".pdf";
                        if (!File.Exists(szPath + szFile))
                        {
                            markSheetDocument.SaveToFile(szPath + szFile);
                            Response.ClearHeaders();
                            Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                            Response.ContentType = "application/pdf";
                            Response.WriteFile(szPath + szFile);
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {

        }
    }

    public void dip_Mubaligha()
    {
        try
        {
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            DataSet semwisegpa = new DataSet();
            string degree = string.Empty;
            string degname = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            int month = 0;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string semroman = string.Empty;
            string coe = string.Empty;
            DataSet gradeds = new DataSet();
            Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            DataTable dtPart1 = new DataTable();
            DataTable dtPart2 = new DataTable();
            DataTable dtPart3 = new DataTable();
            DataTable dtPart4 = new DataTable();
            Font Fontarial9 = new Font("Arial", 8, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.5, 34.5));
            PdfPage mypdfpage;
            if ((Convert.ToString(ddlMonth.SelectedValue).Trim() != "0") && (Convert.ToString(ddlYear.SelectedValue).Trim() != "0"))
            {
                FpSpread2.SaveChanges();
                for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
                {
                    int isval = 0;
                    isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                    if (isval == 1)
                    {
                        printds.Clear();
                        printds.Dispose();
                        printds_new.Clear();
                        printds_new.Dispose();
                        rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                        regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                        string sql = "SELECT r.Reg_No,r.college_code,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';";
                        printds = da.select_method_wo_parameter(sql, "Text");
                        if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                        {
                            mypdfpage = mydoc.NewPage();
                            degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                            //month = ddlMonth.SelectedIndex;
                            //monthstr = Convert.ToString(ddlMonth.SelectedIndex).Trim();
                            int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                            monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                            string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                            monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                            monthandyear = monthandyear.ToUpper();
                            regnumber = Convert.ToString(printds.Tables[0].Rows[0]["Reg_No"]).Trim();
                            studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                            sem = Convert.ToString(printds.Tables[0].Rows[0]["current_semester"]).Trim();
                            dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]).Trim();
                            string stdappno = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();
                            batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                            degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim();
                            string collegeCode = Convert.ToString(printds.Tables[0].Rows[0]["college_code"]).Trim();
                            sql2 = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                            printds_new = da.select_method_wo_parameter(sql2, "Text");
                            if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                            {
                                sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();
                                if (sem == "1")
                                {
                                    semroman = "I";
                                }
                                else if (sem == "2")
                                {
                                    semroman = "II";
                                }
                                else if (sem == "3")
                                {
                                    semroman = "III";
                                }
                                else if (sem == "4")
                                {
                                    semroman = "IV";
                                }
                                else if (sem == "5")
                                {
                                    semroman = "V";
                                }
                                else if (sem == "6")
                                {
                                    semroman = "VI";
                                }
                                else if (sem == "7")
                                {
                                    semroman = "VII";
                                }
                                else if (sem == "8")
                                {
                                    semroman = "VIII";
                                }
                                exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]).Trim();
                                sql3 = "Select semester,subject_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = '" + exam_code + "' and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester,subject.subjectpriority,subject.subject_code;";
                                printds_rows.Clear();
                                printds_rows.Dispose();
                                printds_rows = da.select_method_wo_parameter(sql3, "Text");
                                PdfTable tblstudnameyear = mydoc.NewTable(Fontco12, 2, 4, 5);
                                tblstudnameyear.VisibleHeaders = false;
                                tblstudnameyear.SetBorders(Color.Black, 1, BorderType.None);
                                tblstudnameyear.SetColumnsWidth(new int[] { 130, 100, 150, 100 });
                                tblstudnameyear.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(1, 0).SetContent(regnumber);
                                tblstudnameyear.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(1, 1).SetContent(studname);
                                tblstudnameyear.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(1, 2).SetContent(sem);
                                tblstudnameyear.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblstudnameyear.Cell(1, 3).SetContent(monthandyear);
                                PdfTablePage newpdftabpage2 = tblstudnameyear.CreateTablePage(new PdfArea(mydoc, 35, 124, 536, 46));
                                mypdfpage.Add(newpdftabpage2);
                                if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                                {
                                    PdfTable tblMarkStmt = mydoc.NewTable(Fontarial7, printds_rows.Tables[0].Rows.Count + 1, 7, 3);
                                    tblMarkStmt.VisibleHeaders = false;
                                    tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                                    tblMarkStmt.SetColumnsWidth(new int[] { 33, 54, 282, 41, 41, 41, 41 });
                                    for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                                    {
                                        if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                        {
                                            tblMarkStmt.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tblMarkStmt.Cell(i, 0).SetContent(i + 1);
                                            tblMarkStmt.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tblMarkStmt.Cell(i, 1).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim().ToUpper());
                                            tblMarkStmt.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tblMarkStmt.Cell(i, 2).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim().ToUpper());
                                            tblMarkStmt.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            tblMarkStmt.Cell(i, 3).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim().ToUpper());
                                        }
                                    }
                                    tblMarkStmt.Columns[0].SetWidth(50);
                                    tblMarkStmt.Columns[1].SetWidth(200);
                                    tblMarkStmt.Columns[2].SetWidth(50);
                                    tblMarkStmt.Columns[3].SetWidth(90);
                                    newpdftabpage2 = tblMarkStmt.CreateTablePage(new PdfArea(mydoc, 35, 246, 536, 553));
                                    mypdfpage.Add(newpdftabpage2);
                                }
                            }
                            mypdfpage.SaveToDocument();
                        }
                    }
                }
            }
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
            }
        }
        catch (Exception ex)
        {
        }
    }

    //Developed By Selvam
    public string ToRoman(string part)
    {
        string roman = string.Empty;
        try
        {
            switch (part)
            {
                case "1":
                    roman = "I";
                    break;
                case "2":
                    roman = "II";
                    break;
                case "3":
                    roman = "III";
                    break;
                case "4":
                    roman = "IV";
                    break;
                case "5":
                    roman = "V";
                    break;
                case "6":
                    roman = "VI";
                    break;
                case "7":
                    roman = "VII";
                    break;
                case "8":
                    roman = "VIII";
                    break;
                case "9":
                    roman = "IX";
                    break;
                case "10":
                    roman = "X";
                    break;
                case "11":
                    roman = "XI";
                    break;
                case "12":
                    roman = "XII";
                    break;
            }
        }
        catch (Exception ex)
        {
        }
        return roman;
    }

    #endregion JAMAL COLLEGE

    public string loadmarkat(string mr)
    {
        string strgetval = string.Empty;
        if (mr == "-1")
        {
            strgetval = "AB";
        }
        else if (mr == "-2")
        {
            strgetval = "EL";
        }
        else if (mr == "-3")
        {
            strgetval = "EOD";
        }
        else if (mr == "-4")
        {
            strgetval = "ML";
        }
        else if (mr == "-5")
        {
            strgetval = "SOD";
        }
        else if (mr == "-6")
        {
            strgetval = "NSS";
        }
        else if (mr == "-7")
        {
            strgetval = "NJ";
        }
        else if (mr == "-8")
        {
            strgetval = "S";
        }
        else if (mr == "-9")
        {
            strgetval = "L";
        }
        else if (mr == "-10")
        {
            strgetval = "NCC";
        }
        else if (mr == "-11")
        {
            strgetval = "HS";
        }
        else if (mr == "-12")
        {
            strgetval = "PP";
        }
        else if (mr == "-13")
        {
            strgetval = "SYOD";
        }
        else if (mr == "-14")
        {
            strgetval = "COD";
        }
        else if (mr == "-15")
        {
            strgetval = "OOD";
        }
        else if (mr == "-16")
        {
            strgetval = "OD";
        }
        else if (mr == "-17")
        {
            strgetval = "LA";
        }
        else if (mr == "-18")
        {
            strgetval = "RAA";
        }
        else if (mr == "-19")
        {
            strgetval = "W";
        }
        return strgetval;
    }

    /// <summary>
    /// This Method is used For Get the Current Semester For Arts & Science College
    /// Exam Month is 4 for even semester or 11 for odd sem
    /// </summary>
    /// <param name="batchyr"></param>
    /// <param name="exmyr"></param>
    /// <param name="month"></param>
    /// <param name="max_sem"></param>
    /// <param name="cur_sem"></param>
    public void GetSem(string batchyr, string exmyr, string month, string max_sem, ref string cur_sem)
    {
        int batchyear = 0;
        int.TryParse(batchyr, out batchyear);
        int exmyear = 0;
        int.TryParse(exmyr, out exmyear);
        int mon = 0;
        int.TryParse(month, out mon);
        int maxsem = 0;
        int.TryParse(max_sem, out maxsem);
        int year = 0;
        year = exmyear - batchyear;
        int oddoreven = year % 2;
        int cursem = 1;
        int year1 = maxsem / 2;
        // case when ((exam_year-batch_year)<=(duration/2)) then when (year == 0 && mon == 11) then '1' when ((exam_year-batch_year)%2 = 1 && Exam_Month = 4) then  (exam_year-batch_year)+(exam_year-batch_year)  when ((exam_year-batch_year)%2 = 1 && Exam_Month = 11) then  (exam_year-batch_year)+2  when (((duration/2) = (exam_year-batch_year) && Exam_Month == 11) && ((exam_year-batch_year) > (duration/2) || Exam_Month == 4 || Exam_Month == 11)) then duration+1  end
        if (mon == 11 || mon == 4)
        {
            if (year <= year1)
            {
                if (year == 0 && mon == 11)
                {
                    cur_sem = "1";
                }
                else if (oddoreven == 1 && mon == 4)
                {
                    cursem = year + year;
                    cur_sem = Convert.ToString(cursem);
                }
                else if (oddoreven == 1 && mon == 11)
                {
                    cursem += year + 1;
                    cur_sem = Convert.ToString(cursem);
                }
                else if (oddoreven == 0 && mon == 4)
                {
                    cursem = 0;
                    cursem += year + 2;
                    cur_sem = Convert.ToString(cursem);
                }
                else if (oddoreven == 0 && mon == 11)
                {
                    cursem += year + 2;
                    cur_sem = Convert.ToString(cursem);
                }
                if (cursem > maxsem)
                {
                    cur_sem = Convert.ToString(maxsem + 1);
                }
                if ((year1 == year && mon == 11))
                {
                    cur_sem = Convert.ToString(maxsem + 1);
                }
            }
            else if ((year1 == year && mon == 11) && (year > year1 || mon == 4 || mon == 11))
            {
                cur_sem = Convert.ToString(maxsem + 1);
            }
        }
    }

    public string findSubTypeAccromy(string subType)
    {
        string accr = string.Empty;
        string subt = string.Empty;
        subt = subType.Trim().ToLowerInvariant();
        switch (subt)
        {
            case "foundation course - i":
                accr = "FC-I";
                break;
            case "foundation course - ii":
                accr = "FC-II";
                break;
            case "major course":
            case "project":
            case "projects":
                accr = "MC";
                break;
            case "elective course":
                accr = "EC";
                break;
            case "allied course":
                accr = "AC";
                break;
            case "basic tamil":
                accr = "BT";
                break;
            case "advanced tamil":
                accr = "AT";
                break;
            case "general course":
                accr = "GC";
                break;
            case "inter diciplinary elective":
            case "elective interdisciplinary":
                accr = "IDE";
                break;
            case "general elective":
            case "elective general":
                accr = "GE";
                break;
            case "computer training":
                accr = "CT";
                break;
            case "personality development":
                accr = "PD";
                break;
            case "environmental studies":
                accr = "EVS";
                break;
            case "value education":
                accr = "VE";
                break;
            case "service learning":
                accr = "SLP";
                break;
            case "physical education":
                accr = "PE";
                break;
            case "department association activities":
                accr = "DAA";
                break;
            case "national cadet corps":
                accr = "NCC";
                break;
            case "national service scheme":
                accr = "NSS";
                break;
            case "sports activity":
                accr = "SA";
                break;
            case "scrub society":
                accr = "SS";
                break;
            case "community and social service":
                accr = "CSS";
                break;
            case "internship":
                accr = "IN";
                break;
            case "soft skill programme":
            case "soft skill programmes":
                accr = "SSP";
                break;
            case "practicals":
            case "practical":
                accr = "PRAC";
                break;
            default:
                accr = subType;
                break;
        }
        return accr;
    }

    protected void chk_finalsemmrk_sheet_CheckedChanged(object sender, EventArgs e)
    {
    }

    public void subject()
    {
        try
        {
            ddlSubject.Items.Clear();
            cblSubject.Items.Clear();
            string qry = "select distinct subject_no,subject_name from subject order by subject_name";
            DataSet dssub = new DataSet();
            dssub = d2.select_method_wo_parameter(qry, "Text");
            if (dssub.Tables.Count > 0 && dssub.Tables[0].Rows.Count > 0)
            {
                ddlSubject.DataSource = dssub;
                ddlSubject.DataTextField = "subject_name";
                ddlSubject.DataValueField = "subject_no";
                ddlSubject.DataBind();
                ddlSubject.Items.Insert(0, "-- Select --");
                ddlSubject.SelectedIndex = 0;
                cblSubject.DataSource = dssub;
                cblSubject.DataTextField = "subject_name";
                cblSubject.DataValueField = "subject_no";
                cblSubject.DataBind();
                checkBoxListselectOrDeselect(cblSubject, false);
                CallCheckboxListChange(chkSubject, cblSubject, txtSubject, lblSubject.Text, "--Select--");
            }
        }
        catch (Exception ex)
        {
            lblerror.Visible = true;
            lblerror.Text = Convert.ToString(ex).Trim();
        }
    }

    //public void bindSem()
    //{
    //    try
    //    {
    //       // cblSem.Items.Clear();
    //        Boolean first_year;
    //        first_year = false;
    //        int duration = 0;
    //        int i = 0;
    //        string strquery = "select distinct ndurations,first_year_nonsemester from ndegree where college_code=" + ddlCollege.SelectedValue.ToString() + " and batch_year=" + ddlbatch.Text.ToString() + " and degree_code='" + ddlbranch.SelectedValue.ToString() + "' order by NDurations desc";
    //        ds.Reset();
    //        ds.Dispose();
    //        ds = d2.select_method_wo_parameter(strquery, "Text");
    //        if (ds.Tables[0].Rows.Count > 0)
    //        {
    //            first_year = Convert.ToBoolean(ds.Tables[0].Rows[0][1].ToString());
    //            duration = Convert.ToInt16(ds.Tables[0].Rows[0][0].ToString());
    //            for (i = 1; i <= duration; i++)
    //            {
    //                if (first_year == false)
    //                {
    //                    cblSem.Items.Add(i.ToString());
    //                }
    //                else if (first_year == true && i != 2)
    //                {
    //                    cblSem.Items.Add(i.ToString());
    //                }
    //            }
    //        }
    //        else
    //        {
    //            strquery = "select distinct duration,first_year_nonsemester  from degree where college_code=" + ddlCollege.SelectedValue.ToString() + " and degree_code='" + ddlbranch.SelectedValue.ToString() + "' order by duration desc";
    //            ds.Reset();
    //            ds.Dispose();
    //            ds = d2.select_method_wo_parameter(strquery, "Text");
    //            if (ds.Tables[0].Rows.Count > 0)
    //            {
    //                first_year = Convert.ToBoolean(ds.Tables[0].Rows[0][1].ToString());
    //                duration = Convert.ToInt16(ds.Tables[0].Rows[0][0].ToString());
    //                for (i = 1; i <= duration; i++)
    //                {
    //                    if (first_year == false)
    //                    {
    //                        cblSem.Items.Add(i.ToString());
    //                    }
    //                    else if (first_year == true && i != 2)
    //                    {
    //                        cblSem.Items.Add(i.ToString());
    //                    }
    //                }
    //            }
    //        }
    //    }
    //    catch
    //    {
    //    }
    //}
    public string getSemRoman(string sem)
    {
        string semroman = string.Empty;
        try
        {

            if (sem == "1")
            {
                semroman = "I";
            }
            else if (sem == "2")
            {
                semroman = "II";
            }
            else if (sem == "3")
            {
                semroman = "III";
            }
            else if (sem == "4")
            {
                semroman = "IV";
            }
            else if (sem == "5")
            {
                semroman = "V";
            }
            else if (sem == "6")
            {
                semroman = "VI";
            }
            else if (sem == "7")
            {
                semroman = "VII";
            }
            else if (sem == "8")
            {
                semroman = "VIII";
            }
            return semroman;
        }
        catch
        {

        }
        return semroman;
    }

    protected void btn_errorclose_Click(object sender, EventArgs e)
    {
        errdiv.Visible = false;
    }

    /// <summary>
    /// ADDED BY MALANG RAJA ON FEB 18 2017
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void chkDuplicateMarksheet_CheckedChanged(object sender, EventArgs e)
    {
        txtDuplicateNumber.Text = string.Empty;
        txtDuplicateNumber.Enabled = false;
        if (chkDuplicateMarksheet.Checked)
        {
            txtDuplicateNumber.Enabled = true;
        }
    }

    #region Common Checkbox and Checkboxlist Event

    private string getCblSelectedValue(CheckBoxList cblSelected)
    {
        StringBuilder selectedvalue = new StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (selectedvalue.Length == 0)
                    {
                        selectedvalue.Append("'" + Convert.ToString(cblSelected.Items[sel].Value).Trim() + "'");
                    }
                    else
                    {
                        selectedvalue.Append(",'" + Convert.ToString(cblSelected.Items[sel].Value).Trim() + "'");
                    }
                }
            }
        }
        catch { }
        return Convert.ToString(selectedvalue).Trim();
    }

    private string getCblSelectedText(CheckBoxList cblSelected)
    {
        StringBuilder selectedText = new StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (selectedText.Length == 0)
                    {
                        selectedText.Append("'" + Convert.ToString(cblSelected.Items[sel].Text).Trim() + "'");
                    }
                    else
                    {
                        selectedText.Append(",'" + Convert.ToString(cblSelected.Items[sel].Text).Trim() + "'");
                    }
                }
            }
        }
        catch { }
        return Convert.ToString(selectedText).Trim();
    }

    private int getCblSelectedCount(CheckBoxList cblSelected)
    {
        try
        {
            int sel = 0;
            foreach (ListItem li in cblSelected.Items)
            {
                if (li.Selected)
                {
                    sel++;
                }
            }
            return sel;
        }
        catch
        {
            return 0;
        }
    }

    private void CallCheckboxChange(CheckBox cb, CheckBoxList cbl, TextBox txt, string dispst, string deft)
    {
        try
        {
            int sel = 0;
            string name = string.Empty;
            txt.Text = deft;
            if (cb.Checked == true)
            {
                for (sel = 0; sel < cbl.Items.Count; sel++)
                {
                    cbl.Items[sel].Selected = true;
                    name = Convert.ToString(cbl.Items[sel].Text).Trim();
                }
                if (cbl.Items.Count == 1)
                {
                    txt.Text = "" + name + "";
                }
                else
                {
                    txt.Text = dispst + "(" + cbl.Items.Count + ")";
                }
            }
            else
            {
                for (sel = 0; sel < cbl.Items.Count; sel++)
                {
                    cbl.Items[sel].Selected = false;
                }
                txt.Text = deft;
            }
        }
        catch { }
    }

    private void CallCheckboxListChange(CheckBox cb, CheckBoxList cbl, TextBox txt, string dipst, string deft)
    {
        try
        {
            int sel = 0;
            int count = 0;
            string name = string.Empty;
            cb.Checked = false;
            txt.Text = deft;
            for (sel = 0; sel < cbl.Items.Count; sel++)
            {
                if (cbl.Items[sel].Selected == true)
                {
                    count++;
                    name = Convert.ToString(cbl.Items[sel].Text).Trim();
                }
            }
            if (count > 0)
            {
                if (count == 1)
                {
                    txt.Text = "" + name + "";
                }
                else
                {
                    txt.Text = dipst + "(" + count + ")";
                }
                if (cbl.Items.Count == count)
                {
                    cb.Checked = true;
                }
            }
        }
        catch { }
    }

    private void checkBoxListselectOrDeselect(CheckBoxList cbl, bool selected = true)
    {
        try
        {
            foreach (ListItem li in cbl.Items)
            {
                li.Selected = selected;
            }
        }
        catch
        {
        }
    }

    #endregion

    public bool getFolioNumber(string appNo, ref string studentFolioNumber)
    {
        bool hasSuccess = false;
        try
        {
            string prefix = string.Empty;
            string suffix = string.Empty;
            int numberFolio = 0;
            int maxFolioNumber = 0;
            string studentFolio = string.Empty;
            studentFolioNumber = string.Empty;

            // select folioNo from Registration where App_No=''  select displayfolioNo from Registration where App_No='' select MAX(ISNULL(folioNo,'0')) from Registration 

            studentFolioNumber = dirAcc.selectScalarString("select ISNULL(displayfolioNo,'') as displayfolioNo from Registration where App_No='" + appNo + "'");
            string maxFolioNo = dirAcc.selectScalarString("select MAX(ISNULL(folioNo,'0')) from Registration ");
            if (!string.IsNullOrEmpty(studentFolioNumber) && studentFolioNumber != "0")
            {
                hasSuccess = true;
            }
            else
            {
                string folioNumberSettings = dirAcc.selectScalarString("select value from Master_Settings where settings ='Consolidate Sheet'");
                string[] prefixSuffix = folioNumberSettings.Split('-');
                if (prefixSuffix.Length == 2)
                {
                    prefix = prefixSuffix[0].Trim();
                    suffix = prefixSuffix[1].Trim();
                    int.TryParse(suffix, out numberFolio);
                    int suffixLength = suffix.Length;
                    bool isSucc = int.TryParse(maxFolioNo.Trim(), out maxFolioNumber);
                    if (isSucc && maxFolioNumber != 0)
                    {
                        maxFolioNumber++;
                    }
                    else
                    {
                        maxFolioNumber = numberFolio;
                    }
                    studentFolioNumber = string.Concat(prefix, Convert.ToString(maxFolioNumber).Trim().PadLeft(suffixLength, '0'));
                    int upd = dirAcc.updateData("update Registration set displayfolioNo='" + studentFolioNumber + "',folioNo='" + maxFolioNumber + "' where App_No='" + appNo + "'");
                    hasSuccess = true;
                }
                else
                {
                    hasSuccess = false;
                }
            }
        }
        catch (Exception ex)
        {
        }
        return hasSuccess;
    }

    private void getAllRedoStudentsSemester(out Dictionary<string, List<string>> dicAppNoRedoSemester, out Dictionary<string, List<string>> dicRollNoRedoSemester, string batchYear = null, string degreeCode = null)
    {
        dicAppNoRedoSemester = new Dictionary<string, List<string>>();
        dicRollNoRedoSemester = new Dictionary<string, List<string>>();
        DataSet dsRedoSemester = new DataSet();
        string qry = string.Empty;
        try
        {
            if (!string.IsNullOrEmpty(batchYear) && !string.IsNullOrEmpty(degreeCode))
            {
                qry = "select el.batch_year,el.degree_code,el.Semester,el.is_eligible,el.app_no,el.Roll_no,ISNULL(el.fine_amt,'0') as fine_amt,ISNULL(el.isCondonationFee,'0') isCondonationFee from Eligibility_list el where is_eligible='3' and batch_year='" + batchYear + "' and degree_code='" + degreeCode + "'";
                dsRedoSemester = da.select_method_wo_parameter(qry, "text");
            }
            else
            {
                qry = "select el.batch_year,el.degree_code,el.Semester,el.is_eligible,el.app_no,el.Roll_no,ISNULL(el.fine_amt,'0') as fine_amt,ISNULL(el.isCondonationFee,'0') isCondonationFee from Eligibility_list el where is_eligible='3'";
                dsRedoSemester = da.select_method_wo_parameter(qry, "text");
            }
            if (dsRedoSemester.Tables.Count > 0 && dsRedoSemester.Tables[0].Rows.Count > 0)
            {
                foreach (DataRow drRedoSem in dsRedoSemester.Tables[0].Rows)
                {
                    string appNo = Convert.ToString(drRedoSem["app_no"]).Trim();
                    string rollNo = Convert.ToString(drRedoSem["Roll_no"]).Trim();
                    string semester = Convert.ToString(drRedoSem["Semester"]).Trim();
                    List<string> lstAppNo = new List<string>();
                    List<string> lstRollNo = new List<string>();
                    if (!string.IsNullOrEmpty(appNo.Trim()))
                    {
                        if (!dicAppNoRedoSemester.ContainsKey(appNo.Trim()))
                        {
                            lstAppNo.Add(semester);
                            dicAppNoRedoSemester.Add(appNo.Trim(), lstAppNo);
                        }
                        else
                        {
                            lstAppNo = dicAppNoRedoSemester[appNo.Trim()];
                            lstAppNo.Add(semester);
                            dicAppNoRedoSemester[appNo.Trim()] = lstAppNo;
                        }
                    }
                    if (!string.IsNullOrEmpty(rollNo.Trim()))
                    {
                        if (!dicRollNoRedoSemester.ContainsKey(rollNo.Trim()))
                        {
                            lstRollNo.Add(semester);
                            dicRollNoRedoSemester.Add(rollNo.Trim(), lstRollNo);
                        }
                        else
                        {
                            lstRollNo = dicRollNoRedoSemester[rollNo.Trim()];
                            lstRollNo.Add(semester);
                            dicRollNoRedoSemester[rollNo.Trim()] = lstRollNo;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    //Mahendra statment of mark sheet
    //magesh 5/1/18

    public void statmentofmark()
    {
        try
        {
            string monthstr = string.Empty;
            string monthandyear = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            Font fondColName = new Font("Comic Sans MS", 18, FontStyle.Bold);
            Font fontdegexam = new Font("Arial", 12, FontStyle.Bold);
            Font fondconsol = new Font("Comic Sans MS", 15, FontStyle.Bold);
            Font Fontco12 = new Font("Comic Sans MS", 9, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font fontStmtMarks = new Font("Calibra", 9, FontStyle.Regular);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco11 = new Font("Comic Sans MS", 11, FontStyle.Bold);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 8, FontStyle.Regular);
            Font Fontwma = new Font("Arial", 8, FontStyle.Bold);
            Font Font8bold = new Font("Arial", 13, FontStyle.Bold);
            Font Font10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font Fontarial9 = new Font("Arial", 9, FontStyle.Bold);
            Font Fontarial10b = new Font("Arial", 11, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.0, 29.8));
            PdfPage mypdfpage = mydoc.NewPage();
            string degree = string.Empty;
            string Collegename = string.Empty;
            string aff = string.Empty;
            string collacr = string.Empty;
            string dispin = string.Empty;
            string clgaddress = string.Empty;
            string univ = string.Empty;
            string pincode = string.Empty;
            string state = string.Empty;
            string dist = string.Empty;
            string studname = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string regno = string.Empty;
            string branch = string.Empty;
            string regulations = string.Empty;
            string dob = string.Empty;
            string follono = string.Empty;
            string gender = string.Empty;
            string publication = string.Empty;
            string category = string.Empty;
            string regulation = string.Empty;
            string semester1 = string.Empty;
            int month = 0;
            string publicationdate = string.Empty;
            string dobdate = string.Empty;
            string pumonthname = string.Empty;
            string searialno = string.Empty;
            DataSet printds1 = new DataSet();
            DataSet printds1_new = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            DataSet semwisegpa = new DataSet();
            DataTable dvallSubcount = new DataTable();
            DataTable dvallSubcount1 = new DataTable();
            int partrowcount = 0;
            int partrowcount1 = 0;


            string strquery = "select *,district+' - '+pincode  as districtpin from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
            ds.Dispose();
            ds.Reset();
            ds = d2.select_method_wo_parameter(strquery, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                pincode = Convert.ToString(ds.Tables[0].Rows[0]["pincode"]).Trim();
                int pin = 0;
                int.TryParse(pincode, out pin);
                clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]) + " , " + Convert.ToString(ds.Tables[0].Rows[0]["district"]) + ((pin != 0) ? (" - " + pin.ToString()) : " - " + pincode);
                clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);
            }

            FpSpread2.SaveChanges();
            for (int stmark = 1; stmark <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; stmark++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[stmark, 4].Value);
                if (isval == 1)
                {

                    printds1.Clear();
                    printds1.Dispose();
                    printds1_new.Clear();
                    printds1_new.Dispose();
                    rollnosub = FpSpread2.Sheets[0].Cells[stmark, 1].Text;
                    regno = FpSpread2.Sheets[0].Cells[stmark, 2].Text;
                    string sql1 = "SELECT Reg_No,r.batch_year,sex,r.app_no,r.degree_code,r.serialno,R.current_semester,r.regulation,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';";
                    printds1 = da.select_method_wo_parameter(sql1, "Text");
                    if (printds1.Tables.Count > 0 && printds1.Tables[0].Rows.Count > 0)
                    {

                        studname = Convert.ToString(printds1.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        searialno = Convert.ToString(printds1.Tables[0].Rows[0]["serialno"]).Trim();
                        string appNo = Convert.ToString(printds1.Tables[0].Rows[0]["App_No"]).Trim();
                        string displayFolioNumber = string.Empty;
                        bool isHasFolioNumber = getFolioNumber(appNo, ref displayFolioNumber);
                        int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                        monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                        string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                        if (strMonthName.ToLower().Trim() == "may")
                        {
                            monthandyear = strMonthName.Substring(0, 3) + " - " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        }
                        else
                        {
                            monthandyear = strMonthName.Substring(0, 3) + ".- " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        }
                        monthandyear = monthandyear.ToUpper();
                        branch = printds1.Tables[0].Rows[0]["Dept_name"].ToString();
                        batch_year = Convert.ToString(printds1.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = printds1.Tables[0].Rows[0]["degree_code"].ToString();
                        dob = printds1.Tables[0].Rows[0]["dob"].ToString();
                        degree = Convert.ToString(printds1.Tables[0].Rows[0]["degree"]).Trim();
                        string seme = printds1.Tables[0].Rows[0]["current_semester"].ToString();
                        regulation = Convert.ToString(printds1.Tables[0].Rows[0]["regulation"]).Trim();
                        string ldate = txtdop.Text;
                        string[] spl = ldate.Split('/');
                        DateTime dtl = Convert.ToDateTime(spl[1] + '/' + spl[0] + '/' + spl[2]);
                        string pudate = dtl.ToString("dd");
                        string pumonth = dtl.ToString("MMM");
                        string puyear = dtl.ToString("yyyy");
                        publicationdate = Convert.ToString(pudate + "-" + pumonth + ".-" + puyear).Trim();
                        string dobdat = dob;
                        if (dob != "")
                        {
                            string[] spl1 = dobdat.Split('/');
                            DateTime dtl1 = Convert.ToDateTime(spl1[1] + '/' + spl1[0] + '/' + spl1[2]);
                            string dodate = dtl1.ToString("dd");
                            string dobmonth = dtl1.ToString("MMM");
                            string dobyear = dtl1.ToString("yyyy");

                            if (dobmonth.ToLower().Trim() == "may")
                            {
                                dobdate = Convert.ToString(dodate + "-" + dobmonth + "-" + dobyear).Trim();
                            }
                            else
                            {
                                dobdate = Convert.ToString(dodate + "-" + dobmonth + ".-" + dobyear).Trim();
                            }
                        }
                        string medium = d2.GetFunctionv("select TextVal from TextValTable where TextCriteria='medi' and college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and TextCode in(select isnull(medium_ins,0) from applyn  where app_no='" + appNo + "')");

                        string degreename = degree + " " + "DEGREE EXAMINATIONS-" + " " + monthandyear;
                        PdfTextArea degreeheader = new PdfTextArea(Font8bold, System.Drawing.Color.Black, new PdfArea(mydoc, 24, 114, 400, 400), System.Drawing.ContentAlignment.TopRight, Convert.ToString(degreename));
                        mypdfpage.Add(degreeheader);


                        if (Convert.ToString(printds1.Tables[0].Rows[0]["sex"]) == "0")
                        {
                            gender = "MALE";
                        }
                        else if (Convert.ToString(printds1.Tables[0].Rows[0]["sex"]) == "1")
                        {
                            gender = "Female";
                        }
                        else if (Convert.ToString(printds1.Tables[0].Rows[0]["sex"]) == "2")
                        {
                            gender = "TransGender";
                        }
                        else
                        {
                            gender = "";
                        }
                        if (!isHasFolioNumber)
                        {

                            displayFolioNumber = "-";
                        }


                        #region studdetails

                        PdfTable tblstatement = mydoc.NewTable(Fontco12, 6, 7, 5);
                        tblstatement.VisibleHeaders = false;
                        tblstatement.SetBorders(Color.Black, 1, BorderType.None);
                        tblstatement.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Columns[0].SetWidth(10);
                        tblstatement.Columns[1].SetWidth(2);
                        tblstatement.Columns[2].SetWidth(12);

                        tblstatement.Columns[3].SetWidth(12);
                        tblstatement.Columns[4].SetWidth(9);
                        tblstatement.Columns[5].SetWidth(6);
                        tblstatement.Columns[6].SetWidth(7);

                        tblstatement.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(0, 0).SetContent("SI.No.");
                        tblstatement.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstatement.Cell(0, 1).SetContent(":");
                        tblstatement.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                        if (searialno == "null" || searialno == "NULL" || searialno == "Null" || searialno == "")
                        {
                            tblstatement.Cell(0, 2).SetContent("-");
                        }
                        else
                        {
                            tblstatement.Cell(0, 3).SetContent(Convert.ToString(searialno).ToString());
                        }

                        tblstatement.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(0, 3).SetContent("Folio No          : " + displayFolioNumber + "");
                        foreach (PdfCell pr in tblstatement.CellRange(0, 3, 0, 3).Cells)
                        {
                            pr.ColSpan = 2;
                        }


                        tblstatement.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(1, 0).SetContent("Name");

                        tblstatement.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstatement.Cell(1, 1).SetContent(":");

                        tblstatement.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(1, 2).SetContent(Convert.ToString(studname).ToString());
                        foreach (PdfCell pr in tblstatement.CellRange(1, 2, 1, 2).Cells)
                        {
                            pr.ColSpan = 3;
                        }


                        tblstatement.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(2, 0).SetContent("Register Number");

                        tblstatement.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstatement.Cell(2, 1).SetContent(":");

                        tblstatement.Cell(2, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(2, 2).SetContent(Convert.ToString(regno).ToString());

                        tblstatement.Cell(2, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(2, 3).SetContent("Date of Birth   : " + dobdate + "    " + "Gender:" + " " + gender + "");
                        foreach (PdfCell pr in tblstatement.CellRange(2, 3, 2, 3).Cells)
                        {
                            pr.ColSpan = 4;
                        }

                        tblstatement.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(3, 0).SetContent("Branch");


                        tblstatement.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstatement.Cell(3, 1).SetContent(":");

                        tblstatement.Cell(3, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(3, 2).SetContent(Convert.ToString(branch).ToString());
                        foreach (PdfCell pr in tblstatement.CellRange(3, 2, 3, 2).Cells)
                        {
                            pr.ColSpan = 3;
                        }

                        tblstatement.Cell(4, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(4, 0).SetContent("Regulations");


                        tblstatement.Cell(4, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblstatement.Cell(4, 1).SetContent(":");

                        tblstatement.Cell(4, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                        if (regulation == "null" || regulation == "NULL" || regulation == "Null" || regulation == "")
                        {
                            tblstatement.Cell(4, 2).SetContent("-");
                        }
                        else
                        {
                            tblstatement.Cell(4, 2).SetContent(Convert.ToString(regulation).ToString());
                        }


                        tblstatement.Cell(4, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(4, 3).SetContent("Date of Publication  : " + publicationdate + "");
                        foreach (PdfCell pr in tblstatement.CellRange(4, 3, 4, 3).Cells)
                        {
                            pr.ColSpan = 2;
                        }



                        Gios.Pdf.PdfTablePage myprov_pdfpage2 = tblstatement.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 34, 125, 501, 650));
                        mypdfpage.Add(myprov_pdfpage2);


                        #endregion

                        #region Photo
                        string stdphtsql = string.Empty;
                        stdphtsql = "select * from StdPhoto where app_no='" + appNo + "'";
                        MemoryStream memoryStream = new MemoryStream();
                        DataSet dsstdpho = new DataSet();
                        dsstdpho.Clear();
                        dsstdpho.Dispose();
                        dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                        if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                        {
                            byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                            memoryStream.Write(file, 0, file.Length);
                            if (file.Length > 0)
                            {
                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg")))
                                {

                                }
                                else
                                {
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                }
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg")))
                        {
                            PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg"));
                            mypdfpage.Add(LogoImage2, 448, 115, 340);
                        }
                        else
                        {
                            PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                            mypdfpage.Add(LogoImage2, 448, 115, 340);
                        }
                        #endregion

                        #region datesign
                        PdfTable addr = mydoc.NewTable(Fontco12, 2, 4, 3);
                        addr.VisibleHeaders = false;
                        addr.SetBorders(Color.Black, 1, BorderType.None);
                        foreach (PdfCell pr in addr.CellRange(0, 0, 0, 1).Cells)
                        {
                            pr.ColSpan = 2;
                        }
                        addr.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        addr.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        addr.Cell(1, 0).SetContent("");
                        addr.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleRight);
                        addr.Cell(1, 2).SetContent("SIGNATURE OF THE CANDIDATE  ");
                        addr.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleRight);
                        addr.Cell(1, 3).SetContent("CONTROLLER OF EXAMINATIONS");
                        addr.Columns[0].SetWidth(15);
                        addr.Cell(0, 0).SetContent(clgaddress + "-" + pincode);
                        string monthName = DateTime.Today.ToString("MMM");
                        string date = DateTime.Today.ToString("dd");
                        string year = DateTime.Today.ToString("yy");
                        string FormatDate = string.Empty;
                        if (monthName.ToLower().Trim() == "may")
                        {
                            FormatDate = Convert.ToString("Date: " + date + "-" + monthName + "-" + year).Trim();
                        }
                        else
                        {
                            FormatDate = Convert.ToString("Date: " + date + "-" + monthName + ".-" + year).Trim();
                        }
                        addr.Columns[1].SetWidth(5);
                        addr.Cell(1, 0).SetContent(FormatDate);


                        Gios.Pdf.PdfTablePage myprov_pdfpage5 = addr.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 28, 755, 503, 980));


                        mypdfpage.Add(myprov_pdfpage5);

                        #endregion


                        PdfTextArea pdfheader1 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 41, 225, 25, 30), System.Drawing.ContentAlignment.TopRight, "Semester");
                        mypdfpage.Add(pdfheader1);
                        PdfTextArea pdfheader111 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 37, 236, 25, 30), System.Drawing.ContentAlignment.TopRight, "Number");
                        mypdfpage.Add(pdfheader111);

                        PdfTextArea pdfheader2 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 84, 225, 25, 30), System.Drawing.ContentAlignment.TopRight, "Course");
                        mypdfpage.Add(pdfheader2);
                        PdfTextArea pdfheader221 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 78, 237, 25, 30), System.Drawing.ContentAlignment.TopRight, "Code");
                        mypdfpage.Add(pdfheader221);

                        PdfTextArea pdfheader3 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 160, 231, 100, 30), System.Drawing.ContentAlignment.TopRight, "Course Title");
                        mypdfpage.Add(pdfheader3);
                        PdfTextArea pdfheader4 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 388, 231, 25, 30), System.Drawing.ContentAlignment.TopRight, "Credits");
                        mypdfpage.Add(pdfheader4);
                        PdfTextArea pdfheader5 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 419, 227, 25, 30), System.Drawing.ContentAlignment.TopRight, "Letter Grade");
                        mypdfpage.Add(pdfheader5);
                        PdfTextArea pdfheader6 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 457, 227, 25, 30), System.Drawing.ContentAlignment.TopRight, "Grade");
                        mypdfpage.Add(pdfheader6);
                        PdfTextArea pdfheader616 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 454, 237, 25, 30), System.Drawing.ContentAlignment.TopRight, "Point");
                        mypdfpage.Add(pdfheader616);
                        PdfTextArea pdfheader7 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 500, 231, 25, 30), System.Drawing.ContentAlignment.TopRight, "Result");
                        mypdfpage.Add(pdfheader7);

                        #region semdetails

                        PdfTable tblMarkStmt = mydoc.NewTable(fontStmtMarks, 30, 7, 4);
                        tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                        tblMarkStmt.VisibleHeaders = false;
                        tblMarkStmt.Columns[0].SetWidth(4);
                        tblMarkStmt.Columns[1].SetWidth(13);
                        tblMarkStmt.Columns[2].SetWidth(38);
                        tblMarkStmt.Columns[3].SetWidth(5);
                        tblMarkStmt.Columns[4].SetWidth(6);
                        tblMarkStmt.Columns[5].SetWidth(7);
                        tblMarkStmt.Columns[6].SetWidth(10);

                        string sql2 = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                        printds_new = da.select_method_wo_parameter(sql2, "Text");
                        string exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]).Trim();
                        string sql3 = "Select semester,subject_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = '" + exam_code + "' and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester desc,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;";
                        printds_rows.Clear();
                        printds_rows.Dispose();
                        printds_rows = da.select_method_wo_parameter(sql3, "Text");

                        int j = 0;
                        int i1 = 0;
                        int sheetno = 0;
                        int j1 = 0;
                        int RowA = 1;
                        int rowCnt = 0;
                        int tableRow = 0;
                        int modcount = 1;
                        bool isFirstPagePrinted = false;
                        int check = 0;

                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                            {
                                if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                {


                                    string sem1 = Convert.ToString(printds_rows.Tables[0].Rows[i]["semester"]).Trim();
                                    if (sem1 == "1")
                                    {
                                        sem1 = "01";
                                    }
                                    else if (sem1 == "2")
                                    {
                                        sem1 = "02";
                                    }
                                    else if (sem1 == "3")
                                    {
                                        sem1 = "03";
                                    }
                                    else if (sem1 == "4")
                                    {
                                        sem1 = "04";
                                    }
                                    else if (sem1 == "5")
                                    {
                                        sem1 = "05";
                                    }
                                    else if (sem1 == "6")
                                    {
                                        sem1 = "06";
                                    }
                                    else if (sem1 == "7")
                                    {
                                        sem1 = "07";
                                    }
                                    else if (sem1 == "8")
                                    {
                                        sem1 = "08";
                                    }
                                    else if (sem1 == "9")
                                    {
                                        sem1 = "09";
                                    }
                                    else if (sem1 == "10")
                                    {
                                        sem1 = "10";
                                    }
                                    semester1 = Convert.ToString(printds_rows.Tables[0].Rows[0]["semester"]).Trim();
                                    if (semester1 == "1")
                                    {
                                        semester1 = "First";
                                    }
                                    else if (semester1 == "2")
                                    {
                                        semester1 = "Second";
                                    }
                                    else if (semester1 == "3")
                                    {
                                        semester1 = "Third";
                                    }
                                    else if (semester1 == "4")
                                    {
                                        semester1 = "Fourth";
                                    }
                                    else if (semester1 == "5")
                                    {
                                        semester1 = "Fifth";
                                    }
                                    else if (semester1 == "6")
                                    {
                                        semester1 = "Sixth";
                                    }
                                    else if (semester1 == "7")
                                    {
                                        semester1 = "Seventh";
                                    }
                                    else if (semester1 == "8")
                                    {
                                        semester1 = "Eight";
                                    }
                                    else if (semester1 == "9")
                                    {
                                        semester1 = "Ninth";
                                    }
                                    else if (semester1 == "10")
                                    {
                                        semester1 = "Tenth";
                                    }

                                    string subjectccoden = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim();
                                    string subname = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim().ToUpper();

                                    double internalmmark = 0;
                                    double externalmark1 = 0;
                                    double totalintext = 0;
                                    string cpoint = Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim();

                                    double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]), out internalmmark);
                                    double extfinal = 0;
                                    double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]), out extfinal);
                                    extfinal = Math.Round(extfinal, 0);
                                    externalmark1 = extfinal;
                                    string checkedmark = string.Empty;
                                    if (extfinal < 0)
                                    {
                                        checkedmark = loadmarkat(Convert.ToString(extfinal));
                                    }
                                    else
                                    {
                                        checkedmark = Convert.ToString(extfinal);
                                    }
                                    if (internalmmark >= 0)
                                    {
                                        if (extfinal > 0)
                                        {
                                            totalintext = internalmmark + externalmark1;
                                        }
                                        else
                                        {
                                            totalintext = internalmmark;
                                        }
                                    }
                                    else
                                    {
                                        if (extfinal > 0)
                                        {
                                            totalintext = externalmark1;
                                        }
                                        else
                                        {
                                            totalintext = 0;
                                        }
                                    }
                                    double totfinal = 0;
                                    totfinal = Math.Round(totalintext, 0);
                                    string grade = string.Empty;
                                    string grade_points = string.Empty;

                                    string q = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Semester='" + seme + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + totfinal + "' between Frange and Trange; select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + totfinal + "' between Frange and Trange;";
                                    DataSet dsgrade = new DataSet();
                                    dsgrade = d2.select_method_wo_parameter(q, "Text");
                                    if (dsgrade.Tables.Count > 0)
                                    {
                                        if (dsgrade.Tables[0].Rows.Count == 0)
                                        {
                                            if (dsgrade.Tables.Count > 1 && dsgrade.Tables[1].Rows.Count > 0)
                                            {
                                                grade = Convert.ToString(dsgrade.Tables[1].Rows[0]["Mark_Grade"]).Trim();
                                                grade_points = Convert.ToString(dsgrade.Tables[1].Rows[0]["Credit_points"]).Trim();
                                            }
                                        }
                                        else
                                        {
                                            grade = Convert.ToString(dsgrade.Tables[0].Rows[0]["Mark_Grade"]).Trim();
                                            grade_points = Convert.ToString(dsgrade.Tables[0].Rows[0]["Credit_points"]).Trim();
                                        }
                                    }

                                    string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim();

                                    if (isFirstPagePrinted == false ? j < 15 : (j < (tableRow < 15 ? tableRow : (15 * RowA) - check)))
                                    {


                                        j++;
                                        tblMarkStmt.Cell(j, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(j, 0).SetContent(sem1);
                                        tblMarkStmt.Cell(j, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(j, 1).SetContent(subjectccoden);
                                        tblMarkStmt.Cell(j, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMarkStmt.Cell(j, 2).SetContent(subname);
                                        tblMarkStmt.Cell(j, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(j, 3).SetContent(cpoint);
                                        tblMarkStmt.Cell(j, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(j, 5).SetContent(grade_points);
                                        tblMarkStmt.Cell(j, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(j, 4).SetContent(grade);
                                        tblMarkStmt.Cell(j, 6).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMarkStmt.Cell(j, 6).SetContent(result);
                                        i1 = j;

                                    }
                                    #region Contionue On New Page
                                    else
                                    {
                                        PdfLine p11 = new PdfLine(mydoc, new Point(23, 225), new Point(532, 225), Color.Black, 1);
                                        mypdfpage.Add(p11);
                                        PdfLine p21 = new PdfLine(mydoc, new Point(23, 225), new Point(25, 640), Color.Black, 1);
                                        mypdfpage.Add(p21);
                                        PdfLine p31 = new PdfLine(mydoc, new Point(532, 225), new Point(532, 640), Color.Black, 1);
                                        mypdfpage.Add(p31);
                                        PdfLine p41 = new PdfLine(mydoc, new Point(23, 251), new Point(532, 251), Color.Black, 1);
                                        mypdfpage.Add(p41);
                                        PdfLine p51 = new PdfLine(mydoc, new Point(23, 640), new Point(532, 640), Color.Black, 1);
                                        mypdfpage.Add(p51);



                                        tblMarkStmt.Cell(j + 1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMarkStmt.Cell(j + 1, 2).SetContent("CONTINUES IN NEXT PAGE...");
                                        isFirstPagePrinted = true;
                                        Gios.Pdf.PdfTablePage myprov_pdfpage3 = tblMarkStmt.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 27, 251, 528, 600));
                                        mypdfpage.Add(myprov_pdfpage3);
                                        mypdfpage.SaveToDocument();
                                        mypdfpage = mydoc.NewPage();
                                        RowA++;


                                        tableRow = printds_rows.Tables[0].Rows.Count - j;
                                        j = 0;

                                        tblMarkStmt = mydoc.NewTable(fontStmtMarks, 30, 7, 8);
                                        tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                                        tblMarkStmt.VisibleHeaders = false;
                                        tblMarkStmt.Columns[0].SetWidth(9);
                                        tblMarkStmt.Columns[1].SetWidth(14);
                                        tblMarkStmt.Columns[2].SetWidth(40);
                                        tblMarkStmt.Columns[3].SetWidth(5);
                                        tblMarkStmt.Columns[4].SetWidth(7);
                                        tblMarkStmt.Columns[5].SetWidth(8);
                                        tblMarkStmt.Columns[6].SetWidth(10);

                                        #region studdetails

                                        tblstatement = mydoc.NewTable(Fontco12, 6, 7, 5);
                                        tblstatement.VisibleHeaders = false;
                                        tblstatement.SetBorders(Color.Black, 1, BorderType.None);
                                        tblstatement.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Columns[0].SetWidth(10);
                                        tblstatement.Columns[1].SetWidth(2);
                                        tblstatement.Columns[2].SetWidth(12);

                                        tblstatement.Columns[3].SetWidth(12);
                                        tblstatement.Columns[4].SetWidth(9);
                                        tblstatement.Columns[5].SetWidth(6);
                                        tblstatement.Columns[6].SetWidth(7);

                                        tblstatement.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(0, 0).SetContent("SI.No.");
                                        tblstatement.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblstatement.Cell(0, 1).SetContent(":");
                                        tblstatement.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        if (searialno == "null" || searialno == "NULL" || searialno == "Null" || searialno == "")
                                        {
                                            tblstatement.Cell(0, 2).SetContent("-");
                                        }
                                        else
                                        {
                                            tblstatement.Cell(0, 3).SetContent(Convert.ToString(searialno).ToString());
                                        }

                                        tblstatement.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(0, 3).SetContent("Folio No          : " + displayFolioNumber + "");
                                        foreach (PdfCell pr in tblstatement.CellRange(0, 3, 0, 3).Cells)
                                        {
                                            pr.ColSpan = 2;
                                        }


                                        tblstatement.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(1, 0).SetContent("Name");

                                        tblstatement.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblstatement.Cell(1, 1).SetContent(":");

                                        tblstatement.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(1, 2).SetContent(Convert.ToString(studname).ToString());
                                        foreach (PdfCell pr in tblstatement.CellRange(1, 2, 1, 2).Cells)
                                        {
                                            pr.ColSpan = 3;
                                        }


                                        tblstatement.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(2, 0).SetContent("Register Number");

                                        tblstatement.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblstatement.Cell(2, 1).SetContent(":");

                                        tblstatement.Cell(2, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(2, 2).SetContent(Convert.ToString(regno).ToString());

                                        tblstatement.Cell(2, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(2, 3).SetContent("Date of Birth   : " + dobdate + "    " + "Gender:" + " " + gender + "");
                                        foreach (PdfCell pr in tblstatement.CellRange(2, 3, 2, 3).Cells)
                                        {
                                            pr.ColSpan = 4;
                                        }


                                        //tblstatement.Cell(2, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        //tblstatement.Cell(2, 5).SetContent("Gender :");

                                        //tblstatement.Cell(2, 6).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        //tblstatement.Cell(2, 6).SetContent(Convert.ToString(gender).ToString());

                                        tblstatement.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(3, 0).SetContent("Branch");


                                        tblstatement.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblstatement.Cell(3, 1).SetContent(":");

                                        tblstatement.Cell(3, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(3, 2).SetContent(Convert.ToString(branch).ToString());
                                        foreach (PdfCell pr in tblstatement.CellRange(3, 2, 3, 2).Cells)
                                        {
                                            pr.ColSpan = 3;
                                        }

                                        tblstatement.Cell(4, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(4, 0).SetContent("Regulations");


                                        tblstatement.Cell(4, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblstatement.Cell(4, 1).SetContent(":");

                                        tblstatement.Cell(4, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        if (regulation == "null" || regulation == "NULL" || regulation == "Null" || regulation == "")
                                        {
                                            tblstatement.Cell(4, 2).SetContent("-");
                                        }
                                        else
                                        {
                                            tblstatement.Cell(4, 2).SetContent(Convert.ToString(regulation).ToString());
                                        }


                                        tblstatement.Cell(4, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(4, 3).SetContent("Date of Publication  : " + publicationdate + "");
                                        foreach (PdfCell pr in tblstatement.CellRange(4, 3, 4, 3).Cells)
                                        {
                                            pr.ColSpan = 2;
                                        }

                                        Gios.Pdf.PdfTablePage myprov_pdfpage21 = tblstatement.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 34, 125, 501, 650));
                                        mypdfpage.Add(myprov_pdfpage21);



                                        #endregion

                                        #region Photo
                                        string stdphtsql1 = string.Empty;
                                        stdphtsql1 = "select * from StdPhoto where app_no='" + appNo + "'";
                                        MemoryStream memoryStream1 = new MemoryStream();
                                        DataSet dsstdpho1 = new DataSet();
                                        dsstdpho1.Clear();
                                        dsstdpho1.Dispose();
                                        dsstdpho1 = da.select_method_wo_parameter(stdphtsql1, "Text");
                                        if (dsstdpho1.Tables.Count > 0 && dsstdpho1.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho1.Tables[0].Rows[0][1]).Trim()))
                                        {
                                            byte[] file = (byte[])dsstdpho1.Tables[0].Rows[0][1];
                                            memoryStream1.Write(file, 0, file.Length);
                                            if (file.Length > 0)
                                            {
                                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                                System.Drawing.Image thumb = imgx.GetThumbnailImage(360, 360, null, IntPtr.Zero);
                                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg")))
                                                {
                                                }
                                                else
                                                {
                                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                                }
                                            }
                                        }
                                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg")))
                                        {
                                            PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg"));
                                            mypdfpage.Add(LogoImage2, 455, 112, 340);
                                        }
                                        else
                                        {
                                            PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                            mypdfpage.Add(LogoImage2, 455, 112, 340);
                                        }
                                        #endregion

                                        #region datesign
                                        addr = mydoc.NewTable(Fontco12, 2, 4, 6);
                                        addr.VisibleHeaders = false;
                                        addr.SetBorders(Color.Black, 1, BorderType.None);
                                        foreach (PdfCell pr in addr.CellRange(0, 0, 0, 1).Cells)
                                        {
                                            pr.ColSpan = 2;
                                        }
                                        addr.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        addr.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        addr.Cell(1, 0).SetContent("Date:");
                                        addr.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleRight);
                                        addr.Cell(1, 2).SetContent("SIGNATURE OF THE CANDIDATE");
                                        addr.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleRight);
                                        addr.Cell(1, 3).SetContent("CONTROLLER OF EXAMINATIONS");
                                        addr.Columns[0].SetWidth(10);
                                        addr.Cell(0, 0).SetContent(clgaddress + "-" + pincode);
                                        string monthName1 = DateTime.Today.ToString("MMM");
                                        string date1 = DateTime.Today.ToString("dd");
                                        string year1 = DateTime.Today.ToString("yy");
                                        string FormatDate1 = string.Empty;
                                        if (monthName1.ToLower().Trim() == "may")
                                        {
                                            FormatDate1 = Convert.ToString("Date: " + date1 + "-" + monthName1 + "-" + year1).Trim();
                                        }
                                        else
                                        {
                                            FormatDate1 = Convert.ToString("Date: " + date1 + "-" + monthName1 + ".-" + year1).Trim();
                                        }
                                        addr.Columns[1].SetWidth(5);
                                        addr.Cell(1, 0).SetContent(FormatDate);
                                        Gios.Pdf.PdfTablePage myprov_pdfpage51 = addr.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 28, 755, 500, 980));



                                        mypdfpage.Add(myprov_pdfpage51);

                                        #endregion


                                        PdfTextArea pdfheader11 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 41, 225, 25, 30), System.Drawing.ContentAlignment.TopRight, "Semester");
                                        mypdfpage.Add(pdfheader11);
                                        PdfTextArea pdfheader1112 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 37, 236, 25, 30), System.Drawing.ContentAlignment.TopRight, "Number");
                                        mypdfpage.Add(pdfheader1112);

                                        PdfTextArea pdfheader21 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 84, 225, 25, 30), System.Drawing.ContentAlignment.TopRight, "Course");
                                        mypdfpage.Add(pdfheader21);
                                        PdfTextArea pdfheader2211 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 78, 237, 25, 30), System.Drawing.ContentAlignment.TopRight, "Code");
                                        mypdfpage.Add(pdfheader2211);

                                        PdfTextArea pdfheader31 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 160, 231, 100, 30), System.Drawing.ContentAlignment.TopRight, "Course Title");
                                        mypdfpage.Add(pdfheader31);
                                        PdfTextArea pdfheader41 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 388, 231, 25, 30), System.Drawing.ContentAlignment.TopRight, "Credits");
                                        mypdfpage.Add(pdfheader41);
                                        PdfTextArea pdfheader51 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 419, 227, 25, 30), System.Drawing.ContentAlignment.TopRight, "Letter Grade");
                                        mypdfpage.Add(pdfheader51);
                                        PdfTextArea pdfheader61 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 457, 227, 25, 30), System.Drawing.ContentAlignment.TopRight, "Grade");
                                        mypdfpage.Add(pdfheader61);
                                        PdfTextArea pdfheader6161 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 454, 237, 25, 30), System.Drawing.ContentAlignment.TopRight, "Point");
                                        mypdfpage.Add(pdfheader6161);
                                        PdfTextArea pdfheader71 = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 500, 231, 25, 30), System.Drawing.ContentAlignment.TopRight, "Result");
                                        mypdfpage.Add(pdfheader71);



                                        PdfTextArea degreeheader1 = new PdfTextArea(Font8bold, System.Drawing.Color.Black, new PdfArea(mydoc, 24, 114, 400, 400), System.Drawing.ContentAlignment.TopRight, Convert.ToString(degreename));
                                        mypdfpage.Add(degreeheader1);


                                    }
                                    #endregion

                                }
                            }
                            tblMarkStmt.Cell(i1 + 1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(i1 + 1, 0).SetFont(Fontco12);
                            tblMarkStmt.Cell(i1 + 1, 0).SetContent("-- END OF STATEMENT --");
                            foreach (PdfCell pr in tblMarkStmt.CellRange(i1 + 1, 0, i1 + 1, 0).Cells)
                            {
                                pr.ColSpan = 6;
                            }

                            Gios.Pdf.PdfTablePage myprov_pdfpage31 = tblMarkStmt.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 27, 251, 528, 600));
                            mypdfpage.Add(myprov_pdfpage31);
                        }
                        #endregion

                        PdfTable semgpa = mydoc.NewTable(Fontco12, 3, 4, 4);
                        semgpa.VisibleHeaders = false;
                        semgpa.SetBorders(Color.Black, 1, BorderType.None);
                        semgpa.Columns[0].SetWidth(7);
                        semgpa.Columns[1].SetWidth(1);
                        semgpa.Columns[2].SetWidth(8);
                        semgpa.Columns[3].SetWidth(2);
                        string semes1 = d2.GetFunction("select distinct e.Current_Semester from Registration r,exam_details e where e.Batch_Year='" + batch_year + "' and e.degree_code='" + degree_code + "'and e.exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "'and e.exam_month='" + month + "' and CC=0 and DelFlag=0 and Exam_Flag<>'debar'");
                        string semes = d2.GetFunction("select distinct Current_Semester from Registration where Batch_Year='" + batch_year + "' and degree_code='" + degree_code + "' and CC=0 and DelFlag=0 and Exam_Flag<>'debar'");
                        string quryallsemgpa2 = "Select semester,subject_code,exam_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,Part_Type from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in(select exam_code from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes1 + "') and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester,Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;select exam_code,current_semester from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "'and exam_month='" + month + "' order by exam_code,current_semester;";
                        DataSet semwisegpaycur = new DataSet();
                        semwisegpaycur = d2.select_method_wo_parameter(quryallsemgpa2, "Text");
                        int cur_sem = 0;
                        int.TryParse(Convert.ToString(semes1).Trim(), out cur_sem);
                        cur_sem += 2;
                        string currsemesy = string.Empty;
                        string exament = d2.GetFunction("select exam_code from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "'and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "'and exam_month='" + month + "'");


                        string quryallsemgpa1 = "Select semester,subject_code,exam_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,Part_Type from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in(select exam_code from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "' and exam_year<='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "') and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester,Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;select exam_code,current_semester from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "' order by exam_code,current_semester;";
                        DataSet semwisegpay = new DataSet();
                        semwisegpay = d2.select_method_wo_parameter(quryallsemgpa1, "Text");
                        string quryallsemgpa = "Select semester,subject_code,exam_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,Part_Type from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code ='" + exament + "' and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester,Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;select exam_code,current_semester from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "'and current_semester<='" + semes + "' order by exam_code,current_semester;";


                        semwisegpa = d2.select_method_wo_parameter(quryallsemgpa, "Text");
                        currsemesy = Convert.ToInt32(semwisegpaycur.Tables[1].Rows[0]["current_semester"]).ToString();

                        int x = 0;
                        int.TryParse(currsemesy, out x);
                        x += 1;
                        int tosem = x - 1;
                        currsemesy = Convert.ToString(x).Trim();
                        string month1 = Convert.ToString(month).Trim();
                        string[] gpa = new string[x - 1];
                        double[] totcredit = new double[x - 1];
                        double[] earnedcredit = new double[x - 1];
                        double[] gradfin = new double[x - 1];
                        double cgpaove1 = 0.00;
                        double cgpaove4 = 0.00;
                        string gpa1 = string.Empty;
                        double gpa2 = 0.000;
                        // double cgpaove = 0.00;
                        double fincgpa = 0.00;
                        int coun = 0;

                        string cgpa1 = string.Empty;
                        double cgpaove = 0.00;
                        semwisegpawitharrear(semwisegpa, Convert.ToString(ddlCollege.SelectedValue).Trim(), degree_code, batch_year, semes, ref gpa, ref totcredit, ref earnedcredit, ref gradfin, ref cgpa1);
                        double totearnedcredit = 0;
                        double totalcredit = 0;
                        string gpafinal = string.Empty;
                        //double[] cp1=new double[x-1];
                        string currsemesys = Convert.ToInt32(semwisegpa.Tables[1].Rows[0]["current_semester"]).ToString();
                        // int s;
                        int rowcol;
                        int gparow = 0;
                        int.TryParse(currsemesys, out rowcol);
                        double gp2 = 0;
                        for (int s = 0; s < x - 1; s++)
                        {
                            semgpa.Cell(0, 1).SetContent(totcredit[s]);
                            semgpa.Cell(1, 1).SetContent(earnedcredit[s]);

                            gpa1 = Convert.ToString(gpa[s]).Trim();
                            if (!string.IsNullOrEmpty(gpa1) && gpa1.Trim() != "--")
                            {
                                gp2 = Math.Round(Convert.ToDouble(gpa1), 2, MidpointRounding.AwayFromZero);
                            }
                            semgpa.Cell(0, 3).SetContent(Convert.ToString(gp2));
                            totearnedcredit += earnedcredit[s];

                        }


                        if (cgpa1 == "")
                        {
                            cgpa1 = "0";
                        }
                        double cgpa2 = Convert.ToDouble(cgpa1);
                        cgpa2 = Math.Round(cgpa2, 2, MidpointRounding.AwayFromZero);
                        string cgpa = Convert.ToString(cgpa2);
                        semgpa.Cell(1, 3).SetContent(cgpa);
                        semgpa.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleLeft);




                        semgpa.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        semgpa.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        semgpa.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleLeft);



                        semgpa.Cell(2, 3).SetContent(medium);
                        semgpa.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleRight);
                        semgpa.Cell(0, 0).SetContent("Credits Enrolled upto" + " " + semester1 + " Semester:");
                        semgpa.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleRight);
                        semgpa.Cell(1, 0).SetContent("Credits Earned upto" + " " + semester1 + " Semester:");
                        semgpa.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleRight);
                        semgpa.Cell(0, 2).SetContent("Grade Point Average(GPA) in" + " " + semester1 + " Semester:");
                        semgpa.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleRight);
                        semgpa.Cell(1, 2).SetContent("Cumulative GPA(CGPA) upto" + " " + semester1 + " Semester:");
                        semgpa.Cell(2, 2).SetContentAlignment(ContentAlignment.MiddleRight);

                        PdfTextArea pdfmedium = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 26, 700, 500, 50), System.Drawing.ContentAlignment.TopRight, "Medium of Instruction:English");
                        mypdfpage.Add(pdfmedium);


                        PdfLine p1 = new PdfLine(mydoc, new Point(20, 225), new Point(537, 225), Color.Black, 1);
                        mypdfpage.Add(p1);
                        PdfLine p2 = new PdfLine(mydoc, new Point(20, 225), new Point(20, 640), Color.Black, 1);
                        mypdfpage.Add(p2);
                        PdfLine p3 = new PdfLine(mydoc, new Point(537, 225), new Point(537, 640), Color.Black, 1);
                        mypdfpage.Add(p3);
                        PdfLine p4 = new PdfLine(mydoc, new Point(20, 251), new Point(537, 251), Color.Black, 1);
                        mypdfpage.Add(p4);
                        PdfLine p5 = new PdfLine(mydoc, new Point(20, 640), new Point(537, 640), Color.Black, 1);
                        mypdfpage.Add(p5);


                        Gios.Pdf.PdfTablePage myprov_pdfpage4 = semgpa.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 25, 650, 540, 800));
                        mypdfpage.Add(myprov_pdfpage4);

                        mypdfpage.SaveToDocument();
                        mypdfpage = mydoc.NewPage();
                    }
                }
            }
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "Consolidatedmarksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
            }

        }
        catch (Exception ex)
        {
            //da.sendErrorMail(ex, collegeCode, "statementofmarks"); 
        }


    }

    public void semwisegpawitharrear(DataSet ds, string coll_code, string degree_code, string batch_yr, string semes, ref string[] gpa, ref double[] totcredit, ref double[] earnedcredit, ref double[] gradfin, ref string cgpa1)
    {
        int semester = 0;
        int.TryParse(semes, out semester);
        int prev_sem = semester - 1;
        prev_sem = semester;
        string batchsetting = "0";
        double partsums = 0.000;
        double partwpmsum = 0.000;
        double cgpa = 0;

        double totcdt = 0;
        double gradcrit = 0.0;
        int partrowcount = 0;
        double Credit_Points = 0.0;
        double grade_points = 0.0;
        double creditstotal = 0;
        double overallcredit = 0;
        double overalltotgrade = 0;
        double Marks = 0;
        DataTable dvallSubcount = new DataTable();
        DataView dvpassedsubcnt = new DataView();
        DataSet gradeds = new DataSet();
        string semester2 = string.Empty;

        for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
        {
            semester2 = Convert.ToString(ds.Tables[1].Rows[i]["current_semester"]);
        }
        int seme2 = Convert.ToInt32(semester2);
        string[] examcode = new string[seme2];
        totcredit = new double[prev_sem];
        gpa = new string[prev_sem];
        earnedcredit = new double[prev_sem];
        try
        {
            if (ds.Tables.Count > 1 && ds.Tables[1].Rows.Count > 0)
            {
                for (int ex = 0; ex < ds.Tables[1].Rows.Count; ex++)
                {
                    examcode[ex] = Convert.ToString(ds.Tables[1].Rows[ex]["exam_code"]);
                }
            }
            overalltotgrade = 0;
            overallcredit = 0;

            int cusem1;
            string cusem = Convert.ToString(ds.Tables[1].Rows[0]["current_semester"]).Trim();
            int.TryParse(cusem, out cusem1);
            int cur_sem = 0;
            for (int semee = cusem1; semee < semester; semee++)
            {
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    string sumpart = string.Empty;
                    string wpm = string.Empty;
                    partsums = 0;
                    ds.Tables[0].DefaultView.RowFilter = "semester='" + Convert.ToString(ds.Tables[1].Rows[cur_sem]["current_semester"]) + "' and exam_code='" + examcode[cur_sem] + "'";
                    dvallSubcount = ds.Tables[0].DefaultView.ToTable();
                    partrowcount = dvallSubcount.Rows.Count;
                    //  string exmyr = "select Exam_Month,Exam_year from Exam_Details where exam_code='"+examcode[cur_sem]+"'";
                    // DataSet dsexmyr = d2.select_method_wo_parameter(exmyr, "text");

                    ds.Tables[0].DefaultView.RowFilter = " result='pass'  and  semester='" + Convert.ToString(ds.Tables[1].Rows[cur_sem]["current_semester"]) + "' and exam_code='" + examcode[cur_sem] + "' ";  //
                    dvpassedsubcnt = ds.Tables[0].DefaultView;
                    if (partrowcount > 0)
                    {
                        double ttcredit = 0;
                        for (int rs = 0; rs < partrowcount; rs++)
                        {
                            double.TryParse(Convert.ToString(dvallSubcount.Rows[rs]["credit_points"]), out ttcredit);
                            totcdt = totcdt + ttcredit;
                            totcredit[cur_sem] += ttcredit;
                        }
                    }
                    if (dvpassedsubcnt.Count > 0)
                    {
                        for (int sum = 0; sum < dvpassedsubcnt.Count; sum++)
                        {
                            double checkmarkmm = Convert.ToDouble(dvpassedsubcnt[sum]["total"].ToString());
                            string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + semes + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_yr + "' and '" + checkmarkmm + "' between frange and trange";
                            gradeds.Clear();
                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                            if (gradeds.Tables.Count > 0 || gradeds.Tables[0].Rows.Count == 0)
                            {
                                gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_yr + "'  and '" + checkmarkmm + "' between frange and trange";
                                gradeds.Clear();
                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                            }
                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                            {
                                for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                {
                                    if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                    {

                                        double.TryParse(Convert.ToString(gradeds.Tables[0].Rows[0]["credit_points"]), out gradcrit);
                                        double grade2 = gradcrit;
                                        // gradfin[cur_sem] += gradcrit;

                                        double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["total"]), out grade_points);
                                        double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["total"]), out Marks);
                                        grade_points = grade_points / 10;
                                        double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["credit_points"]), out Credit_Points);
                                        earnedcredit[cur_sem] += Credit_Points;
                                        partwpmsum += (Credit_Points * Marks);
                                        partsums = partsums + (gradcrit * Credit_Points);
                                    }
                                }
                            }
                        }
                        overalltotgrade += partsums;
                        overallcredit += earnedcredit[cur_sem];
                        if (earnedcredit[cur_sem] == 0)
                        {
                            sumpart = "0.000";
                            wpm = "0.000";
                        }
                        else if (earnedcredit[cur_sem] > 0)
                        {
                            // partsums = (partsums / earnedcredit[cur_sem]);
                            partsums = (partsums / totcredit[cur_sem]);
                            partsums = Math.Round(partsums, 3);
                            partwpmsum = (partwpmsum / earnedcredit[cur_sem]);
                            partwpmsum = Math.Round(partwpmsum, 3);
                            sumpart = String.Format("{0:0.000}", partsums);
                            wpm = string.Format("{0:0.000}", partwpmsum);
                        }
                        else
                        {
                            sumpart = "0.000";
                            wpm = "0.000";
                        }
                    }
                    else if (partrowcount > 0)
                    {
                        sumpart = "0.000";
                        wpm = "0.000";
                    }
                    else
                    {
                        sumpart = "--";
                        wpm = "--";
                    }
                    gpa[cur_sem] = sumpart;

                    cur_sem++;
                }

            }
            if (overallcredit > 0)
            {
                cgpa = overalltotgrade / overallcredit;
                //  cgpa = overalltotgrade / totcdt;
                cgpa = Math.Round(cgpa, 3);
                cgpa1 = Convert.ToString(cgpa);
            }
        }
        catch (Exception ex)
        {
            lblerror.Visible = true;
            lblerror.Text = Convert.ToString(ex).Trim();
        }
    }

    #region SNS COLLEGE
    //magesh 23/1/18
    //GRADE SHEET-SNS
    public void gradesheet()
    {
        try
        {
            string monthstr = string.Empty;
            string monthandyear = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            Font fondColName = new Font("Comic Sans MS", 18, FontStyle.Bold);
            Font fontdegexam = new Font("Arial", 12, FontStyle.Bold);
            Font fondconsol = new Font("Comic Sans MS", 15, FontStyle.Bold);
            Font Fontco12 = new Font("Comic Sans MS", 13, FontStyle.Bold);
            Font Fontco121 = new Font("Comic Sans MS", 18, FontStyle.Bold);
            Font Fontco1211 = new Font("Comic Sans MS", 16, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 14, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco11 = new Font("Comic Sans MS", 11, FontStyle.Bold);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 14, FontStyle.Regular);
            Font Fontarial71 = new Font("Arial", 13, FontStyle.Bold);
            Font Fontwma = new Font("Arial", 8, FontStyle.Bold);
            Font Font8bold = new Font("Arial", 8, FontStyle.Bold);
            Font Font10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font Fontarial9 = new Font("Arial", 9, FontStyle.Bold);
            Font Fontarial10b = new Font("Arial", 11, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(28.3, 40.3));
            PdfPage mypdfpage = mydoc.NewPage();
            string degree = string.Empty;
            string Collegename = string.Empty;
            string aff = string.Empty;
            string collacr = string.Empty;
            string dispin = string.Empty;
            string clgaddress = string.Empty;
            string univ = string.Empty;
            string pincode = string.Empty;
            string state = string.Empty;
            string dist = string.Empty;
            string studname = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string regno = string.Empty;
            string branch = string.Empty;
            string regulations = string.Empty;
            string dob = string.Empty;
            string follono = string.Empty;
            string gender = string.Empty;
            string publication = string.Empty;
            string category = string.Empty;
            string regulation = string.Empty;
            int month = 0;
            string coesign = string.Empty;
            string monandyr = string.Empty;
            string publicationdate = string.Empty;
            string dobdate = string.Empty;
            string pumonthname = string.Empty;
            string searialno = string.Empty;
            int togradee = 0;
            DataSet printds1 = new DataSet();
            DataSet printds1_new = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            DataSet semwisegpa = new DataSet();
            DataTable dvallSubcount = new DataTable();
            DataTable dvallSubcount1 = new DataTable();
            int partrowcount = 0;
            int partrowcount1 = 0;



            string strquery = "select *,district+' - '+pincode  as districtpin,coe_signature from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
            ds.Dispose();
            ds.Reset();
            ds = d2.select_method_wo_parameter(strquery, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                pincode = Convert.ToString(ds.Tables[0].Rows[0]["pincode"]).Trim();
                int pin = 0;
                int.TryParse(pincode, out pin);
                clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]) + " , " + Convert.ToString(ds.Tables[0].Rows[0]["district"]) + ((pin != 0) ? (" - " + pin.ToString()) : " - " + pincode);
                clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);
                coesign = Convert.ToString(ds.Tables[0].Rows[0]["coe_signature"]).Trim();
            }

            FpSpread2.SaveChanges();
            for (int stmark = 1; stmark <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; stmark++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[stmark, 4].Value);
                if (isval == 1)
                {

                    printds1.Clear();
                    printds1.Dispose();
                    printds1_new.Clear();
                    printds1_new.Dispose();
                    rollnosub = FpSpread2.Sheets[0].Cells[stmark, 1].Text;
                    regno = FpSpread2.Sheets[0].Cells[stmark, 2].Text;
                    string sql1 = "SELECT Reg_No,r.batch_year,sex,r.app_no,r.degree_code,r.serialno,R.current_semester,G.regulation,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,c.Edu_Level,d.dept_acronym FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';";
                    printds1 = da.select_method_wo_parameter(sql1, "Text");
                    if (printds1.Tables.Count > 0 && printds1.Tables[0].Rows.Count > 0)
                    {
                        studname = Convert.ToString(printds1.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        searialno = Convert.ToString(printds1.Tables[0].Rows[0]["serialno"]).Trim();
                        string appNo = Convert.ToString(printds1.Tables[0].Rows[0]["App_No"]).Trim();
                        string deptacr = Convert.ToString(printds1.Tables[0].Rows[0]["dept_acronym"]).Trim();
                        string displayFolioNumber = string.Empty;
                        //  bool isHasFolioNumber = getFolioNumber(appNo, ref displayFolioNumber);
                        int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                        monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                        string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                        monthandyear = Convert.ToString(strMonthName).Trim() + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        monthandyear = monthandyear.ToUpper();
                        monandyr = Convert.ToString(monthandyear).Substring(0, 3) + " - " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        string mon2 = Convert.ToString(monthandyear).Substring(0, 3) + "/" + Convert.ToString(ddlYear.SelectedItem.Text).Substring(2, 2);
                        branch = printds1.Tables[0].Rows[0]["Dept_name"].ToString();
                        batch_year = Convert.ToString(printds1.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = printds1.Tables[0].Rows[0]["degree_code"].ToString();
                        dob = printds1.Tables[0].Rows[0]["dob"].ToString();
                        degree = Convert.ToString(printds1.Tables[0].Rows[0]["degree"]).Trim();
                        string degdep = Convert.ToString(degree).Trim() + "-" + Convert.ToString(branch).Trim();
                        string seme = printds1.Tables[0].Rows[0]["current_semester"].ToString();
                        string ed_level = Convert.ToString(printds1.Tables[0].Rows[0]["Edu_Level"].ToString());
                        regulation = Convert.ToString(printds1.Tables[0].Rows[0]["regulation"]).Trim();
                        regulation = regulation + "-" + ed_level;
                        string ldate = txtdop.Text;
                        string[] spl = ldate.Split('/');
                        DateTime dtl = Convert.ToDateTime(spl[1] + '/' + spl[0] + '/' + spl[2]);
                        string pudate = dtl.ToString("dd");
                        string pumonth = dtl.ToString("MM");
                        string puyear = dtl.ToString("yyyy");
                        publicationdate = Convert.ToString(pudate + "-" + pumonth + "-" + puyear).Trim();
                        string dobdat = dob;
                        string[] spl1 = dobdat.Split('/');
                        DateTime dtl1 = Convert.ToDateTime(spl1[1] + '/' + spl1[0] + '/' + spl1[2]);
                        string dodate = dtl1.ToString("dd");
                        string dobmonth = dtl1.ToString("MM");
                        string dobyear = dtl1.ToString("yyyy");
                        dobdate = Convert.ToString(dodate + "-" + dobmonth + "-" + dobyear).Trim();
                        displayFolioNumber = "   /" + deptacr + "/" + mon2 + " ";
                        string medium = d2.GetFunctionv("select TextVal from TextValTable where TextCriteria='medi' and college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and TextCode in(select isnull(medium_ins,0) from applyn  where app_no='" + appNo + "')");

                        #region studetails
                        PdfTextArea ptc;
                        ptc = new PdfTextArea(Fontco121, System.Drawing.Color.Black,
                                                                    new PdfArea(mydoc, 85, 53, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, degree + " DEGREE EXAMINATIONS");

                        mypdfpage.Add(ptc);//FOIL CARD FOR THE END OF SEMESTER EXAMINATIONS-
                        PdfTextArea folio;
                        folio = new PdfTextArea(Fontco1211, System.Drawing.Color.Black,
                                                                    new PdfArea(mydoc, 333, 84, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, Convert.ToString(displayFolioNumber));

                        mypdfpage.Add(folio);
                        PdfTable tblstatement = mydoc.NewTable(Fontco12, 3, 9, 9);
                        tblstatement.VisibleHeaders = false;
                        tblstatement.SetBorders(Color.Black, 1, BorderType.None);
                        tblstatement.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Columns[0].SetWidth(12);
                        tblstatement.Columns[1].SetWidth(14);
                        tblstatement.Columns[2].SetWidth(8);
                        tblstatement.Columns[6].SetWidth(10);
                        tblstatement.Columns[7].SetWidth(13);
                        tblstatement.Columns[3].SetWidth(8);
                        tblstatement.Columns[4].SetWidth(14);
                        tblstatement.Columns[5].SetWidth(12);
                        tblstatement.Columns[8].SetWidth(9);
                        //tblstatement.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        //if (searialno == "null" || searialno == "NULL" || searialno == "Null" || searialno == "")
                        //{
                        //    tblstatement.Cell(0, 1).SetContent("");
                        //}
                        //else
                        //{
                        //    tblstatement.Cell(0, 1).SetContent(Convert.ToString(searialno).Trim());
                        //}

                        //tblstatement.Cell(0, 7).SetContentAlignment(ContentAlignment.MiddleLeft);
                        //tblstatement.Cell(0, 7).SetContent(Convert.ToString(displayFolioNumber).Trim());

                        tblstatement.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(0, 1).SetContent(Convert.ToString(studname).Trim());
                        foreach (PdfCell pr in tblstatement.CellRange(0, 1, 0, 2).Cells)
                        {
                            pr.ColSpan = 4;
                        }
                        tblstatement.Cell(0, 7).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(0, 7).SetContent(Convert.ToString(regno).Trim());
                        tblstatement.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(1, 1).SetContent(Convert.ToString(dobdate).Trim());
                        if (Convert.ToString(printds1.Tables[0].Rows[0]["sex"]) == "0")
                        {
                            gender = "MALE";
                        }
                        else if (Convert.ToString(printds1.Tables[0].Rows[0]["sex"]) == "1")
                        {
                            gender = "Female";
                        }
                        else if (Convert.ToString(printds1.Tables[0].Rows[0]["sex"]) == "2")
                        {
                            gender = "TransGender";
                        }
                        else
                        {
                            gender = "";
                        }
                        tblstatement.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(1, 3).SetContent(Convert.ToString(gender).Trim());
                        tblstatement.Cell(1, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(1, 5).SetContent(Convert.ToString(monandyr).Trim());
                        foreach (PdfCell pr in tblstatement.CellRange(1, 5, 1, 5).Cells)
                        {
                            pr.ColSpan = 2;
                        }
                        tblstatement.Cell(1, 7).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(1, 7).SetContent(Convert.ToString(publicationdate).Trim());

                        tblstatement.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(2, 1).SetContent(Convert.ToString(degdep).Trim());
                        foreach (PdfCell pr in tblstatement.CellRange(2, 1, 2, 1).Cells)
                        {
                            pr.ColSpan = 5;
                        }

                        tblstatement.Cell(2, 7).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(2, 7).SetContent(Convert.ToString(regulation).Trim());


                        Gios.Pdf.PdfTablePage myprov_pdfpage2 = tblstatement.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 15, 127, 758, 650));
                        mypdfpage.Add(myprov_pdfpage2);

                        #region(stud photo)

                        string stdphtsql = string.Empty;
                        stdphtsql = "select * from StdPhoto where app_no='" + appNo + "'";
                        MemoryStream memoryStream = new MemoryStream();
                        DataSet dsstdpho = new DataSet();
                        dsstdpho.Clear();
                        dsstdpho.Dispose();
                        dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                        if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                        {
                            byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                            memoryStream.Write(file, 0, file.Length);
                            if (file.Length > 0)
                            {
                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                System.Drawing.Image thumb = imgx.GetThumbnailImage(400, 400, null, IntPtr.Zero);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg")))
                                {
                                }
                                else
                                {
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                }
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg")))
                        {
                            PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg"));
                            mypdfpage.Add(LogoImage2, 699, 130, 360);
                        }
                        else
                        {
                            PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                            mypdfpage.Add(LogoImage2, 699, 130, 360);
                        }
                        #endregion
                        #endregion

                        #region semdetails
                        PdfTable tblMarkStmt = mydoc.NewTable(Fontarial71, 30, 7, 6);
                        tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                        tblMarkStmt.VisibleHeaders = false;
                        tblMarkStmt.Columns[0].SetWidth(5);
                        tblMarkStmt.Columns[1].SetWidth(20);
                        tblMarkStmt.Columns[2].SetWidth(80);
                        tblMarkStmt.Columns[3].SetWidth(7);
                        tblMarkStmt.Columns[4].SetWidth(9);
                        tblMarkStmt.Columns[5].SetWidth(4);
                        tblMarkStmt.Columns[6].SetWidth(10);
                        string sql2 = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                        printds_new = da.select_method_wo_parameter(sql2, "Text");
                        string exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]).Trim();
                        string sql3 = "Select semester,subject_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = '" + exam_code + "' and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;";
                        printds_rows.Clear();
                        printds_rows.Dispose();
                        printds_rows = da.select_method_wo_parameter(sql3, "Text");

                        int j = 0;
                        int i1 = 0;
                        int sheetno = 0;
                        int j1 = 0;
                        int RowA = 1;
                        int rowCnt = 0;
                        int tableRow = 0;
                        int modcount = 1;
                        bool isFirstPagePrinted = false;
                        int check = 0;

                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                            {
                                if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                {


                                    string sem1 = Convert.ToString(printds_rows.Tables[0].Rows[i]["semester"]).Trim();

                                    string subjectccoden = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim();
                                    string subname = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim().ToUpper();

                                    double internalmmark = 0;
                                    double externalmark1 = 0;
                                    double totalintext = 0;
                                    string cpoint = Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim();

                                    double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]), out internalmmark);
                                    double extfinal = 0;
                                    double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]), out extfinal);
                                    extfinal = Math.Round(extfinal, 0);
                                    externalmark1 = extfinal;
                                    string checkedmark = string.Empty;
                                    if (extfinal < 0)
                                    {
                                        checkedmark = loadmarkat(Convert.ToString(extfinal));
                                    }
                                    else
                                    {
                                        checkedmark = Convert.ToString(extfinal);
                                    }
                                    if (internalmmark >= 0)
                                    {
                                        if (extfinal > 0)
                                        {
                                            totalintext = internalmmark + externalmark1;
                                        }
                                        else
                                        {
                                            totalintext = internalmmark;
                                        }
                                    }
                                    else
                                    {
                                        if (extfinal > 0)
                                        {
                                            totalintext = externalmark1;
                                        }
                                        else
                                        {
                                            totalintext = 0;
                                        }
                                    }
                                    double totfinal = 0;
                                    totfinal = Math.Round(totalintext, 0);
                                    string grade = string.Empty;
                                    string grade_points = string.Empty;

                                    string q = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Semester='" + seme + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + totfinal + "' between Frange and Trange; select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + totfinal + "' between Frange and Trange;";
                                    DataSet dsgrade = new DataSet();
                                    dsgrade = d2.select_method_wo_parameter(q, "Text");
                                    if (dsgrade.Tables.Count > 0)
                                    {
                                        if (dsgrade.Tables[0].Rows.Count == 0)
                                        {
                                            if (dsgrade.Tables.Count > 1 && dsgrade.Tables[1].Rows.Count > 0)
                                            {
                                                grade = Convert.ToString(dsgrade.Tables[1].Rows[0]["Mark_Grade"]).Trim();
                                                grade_points = Convert.ToString(dsgrade.Tables[1].Rows[0]["Credit_points"]).Trim();
                                            }
                                        }
                                        else
                                        {
                                            grade = Convert.ToString(dsgrade.Tables[0].Rows[0]["Mark_Grade"]).Trim();
                                            grade_points = Convert.ToString(dsgrade.Tables[0].Rows[0]["Credit_points"]).Trim();
                                        }
                                    }

                                    if (grade.ToString() == "REAPPEAR" || grade.ToString() == "Reappear")
                                    {
                                        grade = "RA";
                                    }

                                    string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim();

                                    if (isFirstPagePrinted == false ? j < 15 : (j < (tableRow < 15 ? tableRow : (15 * RowA) - check)))
                                    {


                                        j++;

                                        tblMarkStmt.Cell(j, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(j, 0).SetContent(sem1);
                                        tblMarkStmt.Cell(j, 0).SetFont(Fontarial71);
                                        tblMarkStmt.Cell(j, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(j, 1).SetContent(subjectccoden);
                                        tblMarkStmt.Cell(j, 1).SetFont(Fontarial71);
                                        tblMarkStmt.Cell(j, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMarkStmt.Cell(j, 2).SetContent(subname);
                                        tblMarkStmt.Cell(j, 2).SetFont(Fontarial71);
                                        tblMarkStmt.Cell(j, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(j, 3).SetContent(cpoint);
                                        tblMarkStmt.Cell(j, 3).SetFont(Fontarial71);
                                        tblMarkStmt.Cell(j, 5).SetContentAlignment(ContentAlignment.MiddleRight);
                                        tblMarkStmt.Cell(j, 5).SetContent(grade_points);
                                        tblMarkStmt.Cell(j, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMarkStmt.Cell(j, 4).SetContent(grade);
                                        tblMarkStmt.Cell(j, 6).SetContentAlignment(ContentAlignment.MiddleRight);
                                        tblMarkStmt.Cell(j, 6).SetContent(result);
                                        check++;
                                        i1 = j;
                                    }
                                    #region Contionue On New Page
                                    else
                                    {
                                        tblMarkStmt.Cell(j + 2, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMarkStmt.Cell(j + 2, 3).SetContent("CONTINUES IN NEXT PAGE...");
                                        isFirstPagePrinted = true;
                                        #region coesign


                                        string coesignphtsql1 = string.Empty;
                                        coesignphtsql1 = "select coe_signature from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                                        MemoryStream memoryStream2 = new MemoryStream();
                                        DataSet dscoesig1 = new DataSet();
                                        // DataSet dsstdpho = new DataSet();
                                        dscoesig1.Clear();
                                        dscoesig1.Dispose();
                                        dscoesig1 = da.select_method_wo_parameter(coesignphtsql1, "Text");
                                        if (dscoesig1.Tables.Count > 0 && dscoesig1.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dscoesig1.Tables[0].Rows[0][0]).Trim()))
                                        {
                                            byte[] file = (byte[])dscoesig1.Tables[0].Rows[0][0];
                                            memoryStream2.Write(file, 0, file.Length);
                                            if (file.Length > 0)
                                            {
                                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream2, true, true);
                                                System.Drawing.Image thumb = imgx.GetThumbnailImage(250, 250, null, IntPtr.Zero);
                                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                                                {
                                                }
                                                else
                                                {
                                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                                }
                                            }
                                        }
                                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                                        {
                                            PdfImage coesiImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"));
                                            mypdfpage.Add(coesiImage2, 650, 1050, 300);
                                        }
                                        else
                                        {
                                            PdfImage coesiImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                            mypdfpage.Add(coesiImage2, 650, 1050, 300);
                                        }

                                        #endregion
                                        string monthName2 = DateTime.Today.ToString("MM");
                                        string date2 = DateTime.Today.ToString("dd");
                                        string year2 = DateTime.Today.ToString("yyyy");
                                        string FormatDate2 = Convert.ToString(date2 + "-" + monthName2 + "-" + year2).Trim();

                                        PdfTextArea ptc4;
                                        ptc4 = new PdfTextArea(Fontarial7, System.Drawing.Color.Black, new PdfArea(mydoc, -50, 1075, 200, 50), System.Drawing.ContentAlignment.MiddleRight, Convert.ToString(pincode));

                                        mypdfpage.Add(ptc4);
                                        PdfTextArea ptc5;
                                        ptc5 = new PdfTextArea(Fontco1211, System.Drawing.Color.Black, new PdfArea(mydoc, 73, 1095, 200, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString(FormatDate2));

                                        mypdfpage.Add(ptc5);


                                        Gios.Pdf.PdfTablePage myprov_pdfpage31 = tblMarkStmt.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 2, 252, 775, 650));
                                        mypdfpage.Add(myprov_pdfpage31);
                                        mypdfpage.SaveToDocument();
                                        mypdfpage = mydoc.NewPage();
                                        RowA++;


                                        tblMarkStmt = mydoc.NewTable(Fontarial71, 30, 7, 6);
                                        tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                                        tblMarkStmt.VisibleHeaders = false;
                                        tblMarkStmt.Columns[0].SetWidth(5);
                                        tblMarkStmt.Columns[1].SetWidth(20);
                                        tblMarkStmt.Columns[2].SetWidth(80);
                                        tblMarkStmt.Columns[3].SetWidth(7);
                                        tblMarkStmt.Columns[4].SetWidth(9);
                                        tblMarkStmt.Columns[5].SetWidth(4);
                                        tblMarkStmt.Columns[6].SetWidth(10);





                                        #region studetails
                                        PdfTextArea ptc6;
                                        ptc6 = new PdfTextArea(Fontco121, System.Drawing.Color.Black,
                                                                                    new PdfArea(mydoc, 82, 43, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, degree + " DEGREE EXAMINATIONS");

                                        mypdfpage.Add(ptc6);

                                        PdfTextArea folio1;
                                        folio1 = new PdfTextArea(Fontco121, System.Drawing.Color.Black,
                                                                                    new PdfArea(mydoc, 335, 74, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, Convert.ToString(displayFolioNumber));

                                        mypdfpage.Add(folio1);

                                        tblstatement = mydoc.NewTable(Fontco12, 3, 9, 9);
                                        tblstatement.VisibleHeaders = false;
                                        tblstatement.SetBorders(Color.Black, 1, BorderType.None);
                                        tblstatement.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Columns[0].SetWidth(12);
                                        tblstatement.Columns[1].SetWidth(14);
                                        tblstatement.Columns[2].SetWidth(8);
                                        tblstatement.Columns[6].SetWidth(10);
                                        tblstatement.Columns[7].SetWidth(13);
                                        tblstatement.Columns[3].SetWidth(8);
                                        tblstatement.Columns[4].SetWidth(14);
                                        tblstatement.Columns[5].SetWidth(12);
                                        tblstatement.Columns[8].SetWidth(9);




                                        tblstatement.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(0, 1).SetContent(Convert.ToString(studname).Trim());
                                        foreach (PdfCell pr in tblstatement.CellRange(0, 1, 0, 2).Cells)
                                        {
                                            pr.ColSpan = 4;
                                        }
                                        tblstatement.Cell(0, 7).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(0, 7).SetContent(Convert.ToString(regno).Trim());
                                        tblstatement.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(1, 1).SetContent(Convert.ToString(dobdate).Trim());
                                        if (Convert.ToString(printds1.Tables[0].Rows[0]["sex"]) == "0")
                                        {
                                            gender = "MALE";
                                        }
                                        else if (Convert.ToString(printds1.Tables[0].Rows[0]["sex"]) == "1")
                                        {
                                            gender = "Female";
                                        }
                                        else if (Convert.ToString(printds1.Tables[0].Rows[0]["sex"]) == "2")
                                        {
                                            gender = "TransGender";
                                        }
                                        else
                                        {
                                            gender = "";
                                        }
                                        tblstatement.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(1, 3).SetContent(Convert.ToString(gender).Trim());
                                        tblstatement.Cell(1, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(1, 5).SetContent(Convert.ToString(monandyr).Trim());
                                        foreach (PdfCell pr in tblstatement.CellRange(1, 5, 1, 5).Cells)
                                        {
                                            pr.ColSpan = 2;
                                        }
                                        tblstatement.Cell(1, 7).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(1, 7).SetContent(Convert.ToString(publicationdate).Trim());

                                        tblstatement.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(2, 1).SetContent(Convert.ToString(degdep).Trim());
                                        foreach (PdfCell pr in tblstatement.CellRange(2, 1, 2, 1).Cells)
                                        {
                                            pr.ColSpan = 5;
                                        }
                                        tblstatement.Cell(2, 7).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(2, 7).SetContent(Convert.ToString(regulation).Trim());


                                        Gios.Pdf.PdfTablePage myprov_pdfpage21 = tblstatement.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 15, 127, 758, 650));
                                        mypdfpage.Add(myprov_pdfpage21);
                                        #endregion
                                        #region(stud photo)

                                        string stdphtsql3 = string.Empty;
                                        stdphtsql3 = "select * from StdPhoto where app_no='" + appNo + "'";
                                        MemoryStream memoryStream3 = new MemoryStream();
                                        DataSet dsstdpho3 = new DataSet();
                                        dsstdpho3.Clear();
                                        dsstdpho3.Dispose();
                                        dsstdpho3 = da.select_method_wo_parameter(stdphtsql3, "Text");
                                        if (dsstdpho3.Tables.Count > 0 && dsstdpho3.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho3.Tables[0].Rows[0][1]).Trim()))
                                        {
                                            byte[] file = (byte[])dsstdpho3.Tables[0].Rows[0][1];
                                            memoryStream3.Write(file, 0, file.Length);
                                            if (file.Length > 0)
                                            {
                                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream3, true, true);
                                                System.Drawing.Image thumb = imgx.GetThumbnailImage(400, 400, null, IntPtr.Zero);
                                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg")))
                                                {
                                                }
                                                else
                                                {
                                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                                }
                                            }
                                        }
                                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg")))
                                        {
                                            PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg"));
                                            mypdfpage.Add(LogoImage2, 699, 130, 360);
                                        }
                                        else
                                        {
                                            PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                            mypdfpage.Add(LogoImage2, 699, 130, 360);
                                        }
                                        #endregion
                                    #endregion

                                        tableRow = printds_rows.Tables[0].Rows.Count - j;
                                        j = 0;
                                    }


                                }
                            }
                            tblMarkStmt.Cell(i1 + 2, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(i1 + 2, 0).SetFont(Fontpala12);
                            tblMarkStmt.Cell(i1 + 2, 0).SetContent("*** End of Statement ***");
                            foreach (PdfCell pr in tblMarkStmt.CellRange(i1 + 2, 0, i1 + 2, 0).Cells)
                            {
                                pr.ColSpan = 6;
                            }



                        }


                        Gios.Pdf.PdfTablePage myprov_pdfpage3 = tblMarkStmt.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 2, 252, 775, 650));
                        mypdfpage.Add(myprov_pdfpage3);

                        #endregion

                        #region gpa cgpa details
                        PdfTable tblsemwisegpa = mydoc.NewTable(Fontarial7, 5, 9, 4);
                        tblsemwisegpa.VisibleHeaders = false;
                        tblsemwisegpa.SetBorders(Color.Black, 1, BorderType.None);
                        tblsemwisegpa.SetColumnsWidth(new int[] { 40, 20, 20, 20, 20, 20, 20, 20, 20 });
                        string semes = d2.GetFunction("select distinct Current_Semester from Registration where Batch_Year='" + batch_year + "' and degree_code='" + degree_code + "' and CC=0 and DelFlag=0 and Exam_Flag<>'debar'");
                        int cur_sem = 0;
                        int.TryParse(semes, out cur_sem);
                        string quryallsemgpa2 = "Select semester,subject_code,exam_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,Part_Type from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in(select exam_code from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "') and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester,Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;select exam_code,current_semester from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "'and exam_month='" + month + "' order by exam_code,current_semester;";
                        DataSet semwisegpaycur = new DataSet();
                        semwisegpaycur = d2.select_method_wo_parameter(quryallsemgpa2, "Text");
                        string currsemesy = string.Empty;
                        string quryallsemgpa1 = "Select semester,subject_code,exam_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,Part_Type from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in(select exam_code from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "' and exam_year<='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "') and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester,Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;select exam_code,current_semester from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "' order by exam_code,current_semester;";
                        DataSet semwisegpay = new DataSet();
                        semwisegpay = d2.select_method_wo_parameter(quryallsemgpa1, "Text");
                        currsemesy = Convert.ToInt32(semwisegpaycur.Tables[1].Rows[0]["current_semester"]).ToString();
                        int x = 0;
                        int.TryParse(currsemesy, out x);
                        x += 1;
                        int y = x - 1;
                        string[] gpa = new string[x - 1];
                        double[] totcredit = new double[x - 1];
                        double[] earnedcredit = new double[x - 1];
                        double[] gradfin = new double[x - 1];
                        currsemesy = Convert.ToString(x).Trim();

                        string month1 = Convert.ToString(month).Trim();


                        double cgpaove = 0.00;
                        withLateralcalcsemwisegpa(semwisegpay, Convert.ToString(ddlCollege.SelectedValue).Trim(), degree_code, batch_year, currsemesy, ref gpa, ref totcredit, ref earnedcredit, ref gradfin);
                        double totearnedcredit = 0;
                        //magesh 16.2.18
                        string currsemesys = Convert.ToInt32(semwisegpay.Tables[1].Rows[0]["current_semester"]).ToString();
                        int s;
                        int rowcol;
                        int gparow = 0;
                        int.TryParse(currsemesys, out rowcol);
                        //for (int s = 0; s < x - 1; s++)
                        for (s = rowcol; s < x; s++)
                        {
                            tblsemwisegpa.Cell(0, s).SetContent(totcredit[gparow]);
                            tblsemwisegpa.Cell(1, s).SetContent(earnedcredit[gparow]);
                            tblsemwisegpa.Cell(3, s).SetContent(gpa[gparow]);
                            tblsemwisegpa.Cell(2, s).SetContent(gradfin[gparow]);
                            totearnedcredit += earnedcredit[gparow];
                            gparow++;
                            //tblsemwisegpa.Cell(0, s + 1).SetContent(totcredit[s]);
                            //tblsemwisegpa.Cell(1, s + 1).SetContent(earnedcredit[s]);
                            //tblsemwisegpa.Cell(3, s + 1).SetContent(gpa[s]);
                            //tblsemwisegpa.Cell(2, s + 1).SetContent(gradfin[s]);
                            //totearnedcredit += earnedcredit[s];
                        }
                        tblsemwisegpa.Cell(4, 1).SetContent(totearnedcredit);
                        string cgpa1 = string.Empty;
                        double overallearnedcredit = 0;
                        double overallcredit = 0;
                        string latemode = "1";
                        string exament = d2.GetFunction("select exam_code from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "'and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "'and exam_month='" + month + "'");
                        semwisegpay.Tables[0].DefaultView.RowFilter = "result='PASS' and exam_code=" + exament + "";
                        dvallSubcount = semwisegpay.Tables[0].DefaultView.ToTable();
                        partrowcount = dvallSubcount.Rows.Count;
                        semwisegpay.Tables[0].DefaultView.RowFilter = "exam_code=" + exament + "";
                        dvallSubcount1 = semwisegpay.Tables[0].DefaultView.ToTable();
                        partrowcount1 = dvallSubcount1.Rows.Count;
                        if (partrowcount1 == partrowcount)
                        {
                            //string cgpa = d2.Calculete_CGPA(rollnosub, semes, degree_code, batch_year, latemode, Convert.ToString(ddlCollege.SelectedValue).Trim());
                            currsemesy = Convert.ToString(x - 1).Trim();
                            string cgpa = d2.Calculete_CGPA(rollnosub, currsemesy, degree_code, batch_year, latemode, Convert.ToString(ddlCollege.SelectedValue).Trim());
                            tblsemwisegpa.Cell(4, 5).SetContentAlignment(ContentAlignment.MiddleRight);
                            tblsemwisegpa.Cell(4, 5).SetContent(cgpa);
                        }

                        else
                        {
                            tblsemwisegpa.Cell(4, 5).SetContent("");
                        }
                        if (medium.ToString() != "")
                        {
                            tblsemwisegpa.Cell(4, 8).SetContent(medium);
                        }
                        else
                        {
                            tblsemwisegpa.Cell(4, 8).SetContent("");
                        }
                        foreach (PdfCell pr in tblsemwisegpa.CellRange(4, 2, 4, 2).Cells)
                        {
                            pr.ColSpan = 3;
                        }
                        #endregion


                        string monthName = DateTime.Today.ToString("MM");
                        string date = DateTime.Today.ToString("dd");
                        string year = DateTime.Today.ToString("yyyy");
                        string FormatDate = Convert.ToString(date + "-" + monthName + "-" + year).Trim();


                        PdfTextArea ptc1;
                        ptc1 = new PdfTextArea(Fontarial7, System.Drawing.Color.Black,
                                                                    new PdfArea(mydoc, -40, 1067, 200, 50), System.Drawing.ContentAlignment.MiddleRight, Convert.ToString(pincode));

                        mypdfpage.Add(ptc1);
                        PdfTextArea ptc2;
                        ptc2 = new PdfTextArea(Fontarial7, System.Drawing.Color.Black,
                                                                    new PdfArea(mydoc, 50, 1087, 200, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString(FormatDate));

                        mypdfpage.Add(ptc2);


                        #region coesign


                        string coesignphtsql = string.Empty;
                        coesignphtsql = "select coe_signature from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                        MemoryStream memoryStream1 = new MemoryStream();
                        DataSet dscoesig = new DataSet();
                        // DataSet dsstdpho = new DataSet();
                        dscoesig.Clear();
                        dscoesig.Dispose();
                        dscoesig = da.select_method_wo_parameter(coesignphtsql, "Text");
                        if (dscoesig.Tables.Count > 0 && dscoesig.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dscoesig.Tables[0].Rows[0][0]).Trim()))
                        {
                            byte[] file = (byte[])dscoesig.Tables[0].Rows[0][0];
                            memoryStream1.Write(file, 0, file.Length);
                            if (file.Length > 0)
                            {
                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream1, true, true);
                                System.Drawing.Image thumb = imgx.GetThumbnailImage(250, 250, null, IntPtr.Zero);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                                {
                                }
                                else
                                {
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                }
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                        {
                            PdfImage coesiImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"));
                            mypdfpage.Add(coesiImage2, 650, 1050, 300);
                        }
                        else
                        {
                            PdfImage coesiImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                            mypdfpage.Add(coesiImage2, 650, 1050, 300);
                        }

                        #endregion





                        Gios.Pdf.PdfTablePage myprov_pdfpage4 = tblsemwisegpa.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, -10, 895, 758, 648));
                        mypdfpage.Add(myprov_pdfpage4);

                        mypdfpage.SaveToDocument();
                        mypdfpage = mydoc.NewPage();
                    }
                }
            }
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                string szPath = appPath + "/Report/";
                string szFile = "Gradesheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
            }



        }
        catch (Exception ex)
        {
            da.sendErrorMail(ex, collegeCode, "statementofmarks");
        }


    }
    //magesh 16/2/18
    public void withLateralcalcsemwisegpa(DataSet ds, string coll_code, string degree_code, string batch_yr, string sem, ref string[] gpa, ref double[] totcredit, ref double[] earnedcredit, ref double[] gradfin)
    {
        int semester = 0;
        int.TryParse(sem, out semester);
        int prev_sem = semester - 1;
        string batchsetting = "0";
        double partsums = 0.000;
        double partwpmsum = 0.000;
        double cgpa = 0;
        //magesh 26/1/18
        double gradcrit = 0.0;//magesh 25/1/18
        int partrowcount = 0;
        double Credit_Points = 0.0;
        double grade_points = 0.0;
        double creditstotal = 0;
        double overallcredit = 0;
        double overalltotgrade = 0;
        double Marks = 0;
        DataTable dvallSubcount = new DataTable();
        DataView dvpassedsubcnt = new DataView();
        DataSet gradeds = new DataSet();
        string semester2 = string.Empty;

        for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
        {
            semester2 = Convert.ToString(ds.Tables[1].Rows[i]["current_semester"]);
        }
        int seme2 = Convert.ToInt32(semester2);
        string[] examcode = new string[seme2];
        totcredit = new double[prev_sem];
        gpa = new string[prev_sem];
        earnedcredit = new double[prev_sem];
        try
        {
            if (ds.Tables.Count > 1 && ds.Tables[1].Rows.Count > 0)
            {
                for (int ex = 0; ex < ds.Tables[1].Rows.Count; ex++)
                {
                    examcode[ex] = Convert.ToString(ds.Tables[1].Rows[ex]["exam_code"]);
                }
            }
            overalltotgrade = 0;
            overallcredit = 0;
            //magesh 16/2/18
            int cusem1;
            string cusem = Convert.ToString(ds.Tables[1].Rows[0]["current_semester"]).Trim();
            int.TryParse(cusem, out cusem1);
            int cur_sem = 0;
            //for (int cur_sem = 0; cur_sem < semester - 1; cur_sem++)
            for (int semee = cusem1; semee < semester; semee++)
            {
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    string sumpart = string.Empty;
                    string wpm = string.Empty;
                    //magesh 16/2/18
                    ds.Tables[0].DefaultView.RowFilter = "semester='" + Convert.ToString(ds.Tables[1].Rows[cur_sem]["current_semester"]) + "' and exam_code='" + examcode[cur_sem] + "'";
                    //ds.Tables[0].DefaultView.RowFilter = "semester='" + (cur_sem + 1) + "' and exam_code='" + examcode[cur_sem] + "'";
                    dvallSubcount = ds.Tables[0].DefaultView.ToTable();
                    partrowcount = dvallSubcount.Rows.Count;
                    ds.Tables[0].DefaultView.RowFilter = "semester='" + Convert.ToString(ds.Tables[1].Rows[cur_sem]["current_semester"]) + "' and result='pass'";
                    //ds.Tables[0].DefaultView.RowFilter = "semester='" + (cur_sem + 1) + "' and result='pass'";//and exam_code='" + examcode[cur_sem - 1] + "'
                    dvpassedsubcnt = ds.Tables[0].DefaultView;
                    if (partrowcount > 0)
                    {
                        double ttcredit = 0;
                        for (int rs = 0; rs < partrowcount; rs++)
                        {
                            double.TryParse(Convert.ToString(dvallSubcount.Rows[rs]["credit_points"]), out ttcredit);


                            totcredit[cur_sem] += ttcredit;
                        }
                    }
                    if (dvpassedsubcnt.Count > 0 && partrowcount == dvpassedsubcnt.Count)
                    {
                        for (int sum = 0; sum < dvpassedsubcnt.Count; sum++)
                        {
                            double checkmarkmm = Convert.ToDouble(dvpassedsubcnt[sum]["total"].ToString());
                            string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_yr + "' and '" + checkmarkmm + "' between frange and trange";//added by sridhar 16/aug 2014
                            gradeds.Clear();
                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                            {
                                gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_yr + "'  and '" + checkmarkmm + "' between frange and trange";//added by sridhar 
                                gradeds.Clear();
                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                            }
                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                            {
                                for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                {
                                    if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                    {
                                        #region magesh 25/1/18
                                        double.TryParse(Convert.ToString(gradeds.Tables[0].Rows[0]["credit_points"]), out gradcrit);
                                        gradfin[cur_sem] += gradcrit;//magesh 25/1/18
                                        #endregion
                                        //grade_points = Convert.ToDouble(Convert.ToString(dtPart1.Rows[sum]["total"]).Trim());
                                        double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["total"]), out grade_points);
                                        double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["total"]), out Marks);
                                        grade_points = grade_points / 10;
                                        //Credit_Points = Convert.ToDouble(Convert.ToString(dtPart1.Rows[sum]["credit_points"]).Trim());
                                        double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["credit_points"]), out Credit_Points);
                                        earnedcredit[cur_sem] += Credit_Points;
                                        partwpmsum += (Credit_Points * Marks);
                                        partsums = partsums + (grade_points * Credit_Points);
                                    }
                                }
                            }
                        }
                        overalltotgrade += partsums;
                        overallcredit += earnedcredit[cur_sem];
                        if (earnedcredit[cur_sem] == 0)
                        {
                            sumpart = "0.000";
                            wpm = "0.000";
                        }
                        else if (earnedcredit[cur_sem] > 0)
                        {
                            partsums = (partsums / earnedcredit[cur_sem]);
                            partsums = Math.Round(partsums, 3);
                            partwpmsum = (partwpmsum / earnedcredit[cur_sem]);
                            partwpmsum = Math.Round(partwpmsum, 3);
                            sumpart = String.Format("{0:0.000}", partsums);
                            wpm = string.Format("{0:0.000}", partwpmsum);
                        }
                        else
                        {
                            sumpart = "0.000";
                            wpm = "0.000";
                        }
                    }
                    else if (partrowcount > 0)
                    {
                        sumpart = "0.000";
                        wpm = "0.000";
                    }
                    else
                    {
                        sumpart = "--";
                        wpm = "--";
                    }
                    gpa[cur_sem] = sumpart;
                    //earnedcredit[cur_sem - 1] = creditstotal;
                    //magesh 16/2/18
                    cur_sem++;
                }

            }
            if (overallcredit > 0)
            {
                cgpa = overalltotgrade / overallcredit;
                cgpa = Math.Round(cgpa, 3);
            }
        }
        catch (Exception ex)
        {
            lblerror.Visible = true;
            lblerror.Text = Convert.ToString(ex).Trim();
        }
    }
    public void choicebased()
    {
        try
        {
            string monthstr = string.Empty;
            string monthandyear = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            Font fondColName = new Font("Comic Sans MS", 18, FontStyle.Bold);
            Font fontdegexam = new Font("Arial", 12, FontStyle.Bold);
            Font fondconsol = new Font("Comic Sans MS", 15, FontStyle.Bold);
            Font Fontco12 = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco11 = new Font("Comic Sans MS", 11, FontStyle.Bold);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontwma = new Font("Arial", 8, FontStyle.Bold);
            Font Font8bold = new Font("Arial", 8, FontStyle.Bold);
            Font Font10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font Fontarial9 = new Font("Arial", 9, FontStyle.Bold);
            Font Fontarial10b = new Font("Arial", 11, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(28.3, 40.3));
            PdfPage mypdfpage = mydoc.NewPage();

            string degree = string.Empty;
            string Collegename = string.Empty;
            string aff = string.Empty;
            string collacr = string.Empty;
            string dispin = string.Empty;
            string clgaddress = string.Empty;
            string univ = string.Empty;
            string pincode = string.Empty;
            string state = string.Empty;
            string dist = string.Empty;
            string studname = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string regno = string.Empty;
            string branch = string.Empty;
            string regulations = string.Empty;
            string dob = string.Empty;
            string follono = string.Empty;
            string gender = string.Empty;
            string publication = string.Empty;
            string category = string.Empty;
            string regulation = string.Empty;
            int month = 0;
            string coesign = string.Empty;
            string monandyr = string.Empty;
            string publicationdate = string.Empty;
            string dobdate = string.Empty;
            string pumonthname = string.Empty;
            string searialno = string.Empty;
            int togradee = 0;
            DataSet printds1 = new DataSet();
            DataSet printds1_new = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            DataSet semwisegpa = new DataSet();
            DataTable dvallSubcount = new DataTable();
            DataTable dvallSubcount1 = new DataTable();
            int partrowcount = 0;
            int partrowcount1 = 0;
            string courparttype = string.Empty;
            string courparttype1 = string.Empty;
            string batchYear = Convert.ToString(ddlbatch.SelectedValue);
            string degCode = Convert.ToString(ddlbranch.SelectedValue);
            string collCode = Convert.ToString(ddlCollege.SelectedValue);


            string strquery = "select *,district+' - '+pincode  as districtpin,coe_signature from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
            ds.Dispose();
            ds.Reset();
            ds = d2.select_method_wo_parameter(strquery, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                pincode = Convert.ToString(ds.Tables[0].Rows[0]["pincode"]).Trim();
                int pin = 0;
                int.TryParse(pincode, out pin);
                clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]) + " , " + Convert.ToString(ds.Tables[0].Rows[0]["district"]) + ((pin != 0) ? (" - " + pin.ToString()) : " - " + pincode);
                clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);
                collegeCode = Convert.ToString(ddlCollege.SelectedValue).Trim();
                coesign = Convert.ToString(ds.Tables[0].Rows[0]["coe_signature"]).Trim();

            }
            if (coesign == "")
            {
                coesign = "-";
            }
            //PdfTextArea pdfsign = new PdfTextArea(Fontarial7, System.Drawing.Color.Black, new PdfArea(mydoc, 535, 1030, 100, 50), System.Drawing.ContentAlignment.BottomRight, Convert.ToString(coesign).Trim());
            //mypdfpage.Add(pdfsign);

            FpSpread2.SaveChanges();
            for (int stmark = 1; stmark <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; stmark++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[stmark, 4].Value);
                if (isval == 1)
                {

                    printds1.Clear();
                    printds1.Dispose();
                    printds1_new.Clear();
                    printds1_new.Dispose();
                    rollnosub = FpSpread2.Sheets[0].Cells[stmark, 1].Text;
                    regno = FpSpread2.Sheets[0].Cells[stmark, 2].Text;
                    string sql1 = "SELECT Reg_No,r.batch_year,sex,r.app_no,r.degree_code,r.serialno,R.current_semester,G.regulation,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,c.edu_level,G.Acronym,D.Dept_Code FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';";
                    printds1 = da.select_method_wo_parameter(sql1, "Text");
                    if (printds1.Tables.Count > 0 && printds1.Tables[0].Rows.Count > 0)
                    {
                        studname = Convert.ToString(printds1.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        searialno = Convert.ToString(printds1.Tables[0].Rows[0]["serialno"]).Trim();
                        string appNo = Convert.ToString(printds1.Tables[0].Rows[0]["App_No"]).Trim();
                        string displayFolioNumber = string.Empty;
                        bool isHasFolioNumber = getFolioNumber(appNo, ref displayFolioNumber);
                        int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                        monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                        string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                        monthandyear = Convert.ToString(strMonthName).Trim() + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        monthandyear = monthandyear.ToUpper();
                        monandyr = Convert.ToString(monthandyear).Substring(0, 3) + " - " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        string acronym = Convert.ToString(printds1.Tables[0].Rows[0]["Acronym"]).Trim();
                        branch = Convert.ToString(printds1.Tables[0].Rows[0]["Dept_name"]).Trim();
                        string depcode = Convert.ToString(printds1.Tables[0].Rows[0]["Dept_Code"]).Trim();
                        degree_code = Convert.ToString(printds1.Tables[0].Rows[0]["degree_code"]).Trim();
                        if (degree_code == "109")
                        {
                            branch = "Mathematics with CA";
                        }
                        else if (degree_code == "107")
                        {
                            branch = "(CA) (Commerce with CA)";
                        }
                        else if (degree_code == "105")
                        {
                            branch = "(PA) (Professional Accounting)";
                        }
                        else if (degree_code == "104")
                        {
                            branch = "(Finance)";
                        }
                        else if (degree_code == "108")
                        {
                            branch = "(IT) (Information Technology)";
                        }
                        else if (degree_code == "123")
                        {
                            branch = "Bachelor of Business Administration";
                        }
                        else if (degree_code == "124")
                        {
                            branch = "(CA) (Bachelor of Business Admn.-CA)";
                        }
                        else if (degree_code == "116")
                        {
                            branch = "English Literature";
                        }
                        else if (degree_code == "120")
                        {
                            branch = "Bachelor of Computer Applications";
                        }
                        else if (degree_code == "122")
                        {
                            branch = "(CA) (Commerce with CA)";
                        }
                        else if (degree_code == "117")
                        {
                            branch = "English Literature";
                        }
                        else if (degree_code == "125")
                        {
                            branch = "Master of Business Administration";
                        }
                        else if (degree_code == "119")
                        {
                            branch = "Master of Computer Applications";
                        }


                        batch_year = Convert.ToString(printds1.Tables[0].Rows[0]["batch_year"]).Trim();

                        dob = Convert.ToString(printds1.Tables[0].Rows[0]["dob"]).Trim();
                        degree = Convert.ToString(printds1.Tables[0].Rows[0]["degree"]).Trim();


                        string degdep = Convert.ToString(degree).Trim() + "-" + Convert.ToString(branch).ToUpper().Trim();
                        string seme = Convert.ToString(printds1.Tables[0].Rows[0]["current_semester"]).Trim();
                        string eduLevel = Convert.ToString(printds1.Tables[0].Rows[0]["edu_level"]).Trim();
                        regulation = Convert.ToString(printds1.Tables[0].Rows[0]["regulation"]).Trim();
                        string ldate = txtdop.Text;
                        string[] spl = ldate.Split('/');
                        DateTime dtl = Convert.ToDateTime(spl[1] + '/' + spl[0] + '/' + spl[2]);
                        string pudate = dtl.ToString("dd");
                        string pumonth = dtl.ToString("MM");
                        string puyear = dtl.ToString("yyyy");
                        publicationdate = Convert.ToString(pudate + "-" + pumonth + "-" + puyear).Trim();
                        string dobdat = dob;
                        string[] spl1 = dobdat.Split('/');
                        DateTime dtl1 = Convert.ToDateTime(spl1[1] + '/' + spl1[0] + '/' + spl1[2]);
                        string dodate = dtl1.ToString("dd");
                        string dobmonth = dtl1.ToString("MM");
                        string dobyear = dtl1.ToString("yyyy");
                        dobdate = Convert.ToString(dodate + "-" + dobmonth + "-" + dobyear).Trim();
                        string medium = d2.GetFunctionv("select TextVal from TextValTable where TextCriteria='medi' and college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and TextCode in(select isnull(medium_ins,0) from applyn  where app_no='" + appNo + "')");
                        #region studetails
                        degdep = "PROGRAM:" + degdep + "";
                        PdfTextArea pdfcourname = new PdfTextArea(Fontco12, System.Drawing.Color.Black, new PdfArea(mydoc, 185, 258, 400, 50), System.Drawing.ContentAlignment.MiddleCenter, Convert.ToString(degdep));
                        mypdfpage.Add(pdfcourname);
                        PdfTable tblstatement = mydoc.NewTable(Fontco12, 2, 4, 12);
                        tblstatement.VisibleHeaders = false;
                        tblstatement.SetBorders(Color.Black, 1, BorderType.None);
                        tblstatement.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Columns[0].SetWidth(24);
                        tblstatement.Columns[1].SetWidth(9);
                        tblstatement.Columns[2].SetWidth(7);
                        tblstatement.Columns[3].SetWidth(8);



                        tblstatement.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);

                        tblstatement.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(0, 0).SetContent(Convert.ToString(studname).Trim());

                        tblstatement.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleRight);
                        tblstatement.Cell(0, 1).SetContent(Convert.ToString(regno).Trim());
                        foreach (PdfCell pr in tblstatement.CellRange(0, 1, 0, 1).Cells)
                        {
                            pr.RowSpan = 2;
                        }
                        tblstatement.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstatement.Cell(1, 0).SetContent(Convert.ToString(dobdate).Trim());
                        foreach (PdfCell pr in tblstatement.CellRange(0, 2, 0, 2).Cells)
                        {
                            pr.RowSpan = 2;
                        }
                        foreach (PdfCell pr in tblstatement.CellRange(0, 3, 0, 3).Cells)
                        {
                            pr.RowSpan = 2;
                        }

                        tblstatement.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleRight);
                        tblstatement.Cell(0, 2).SetContent(Convert.ToString(monandyr).Trim());
                        tblstatement.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleRight);
                        tblstatement.Cell(0, 3).SetContent(Convert.ToString(publicationdate).Trim());



                        //tblstatement.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        //tblstatement.Cell(2, 1).SetContent(Convert.ToString(degdep).Trim());
                        //foreach (PdfCell pr in tblstatement.CellRange(2, 1, 2, 1).Cells)
                        //{
                        //    pr.ColSpan = 2;
                        //}

                        Gios.Pdf.PdfTablePage myprov_pdfpage2 = tblstatement.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 15, 195, 748, 650));
                        mypdfpage.Add(myprov_pdfpage2);

                        #region(stud photo)

                        string stdphtsql = string.Empty;
                        stdphtsql = "select * from StdPhoto where app_no='" + appNo + "'";
                        MemoryStream memoryStream = new MemoryStream();
                        DataSet dsstdpho = new DataSet();
                        dsstdpho.Clear();
                        dsstdpho.Dispose();
                        dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                        if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                        {
                            byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                            memoryStream.Write(file, 0, file.Length);
                            if (file.Length > 0)
                            {
                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg")))
                                {
                                }
                                else
                                {
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                }
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg")))
                        {
                            PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg"));
                            mypdfpage.Add(LogoImage2, 675, 45, 198);
                        }
                        else
                        {
                            PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                            mypdfpage.Add(LogoImage2, 675, 45, 198);
                        }
                        #endregion
                        #endregion
                        #region semdetails
                        PdfTable tblMarkStmt = mydoc.NewTable(Fontarial7, 20, 11, 6);
                        tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                        tblMarkStmt.VisibleHeaders = false;
                        tblMarkStmt.Columns[0].SetWidth(6);
                        tblMarkStmt.Columns[1].SetWidth(6);
                        tblMarkStmt.Columns[2].SetWidth(19);
                        tblMarkStmt.Columns[3].SetWidth(75);
                        tblMarkStmt.Columns[4].SetWidth(9);
                        tblMarkStmt.Columns[5].SetWidth(9);
                        tblMarkStmt.Columns[6].SetWidth(9);
                        tblMarkStmt.Columns[7].SetWidth(9);
                        tblMarkStmt.Columns[8].SetWidth(9);
                        tblMarkStmt.Columns[9].SetWidth(9);
                        tblMarkStmt.Columns[10].SetWidth(9);
                        //tblMarkStmt.Columns[11].SetWidth(9);
                        //tblMarkStmt.Columns[12].SetWidth(9);
                        //tblMarkStmt.Columns[13].SetWidth(9);
                        string sql2 = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year=" + batch_year + " ";
                        printds_new = da.select_method_wo_parameter(sql2, "Text");
                        string sem = string.Empty;
                        string exam_code = string.Empty;
                        if (printds_new.Tables[0].Rows.Count > 0)
                        {
                            sem = Convert.ToString(printds_new.Tables[0].Rows[0]["current_semester"]).Trim();

                            exam_code = Convert.ToString(printds_new.Tables[0].Rows[0]["exam_code"]).Trim();
                        }
                        string sql3 = "Select semester,subject_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,Subject.Part_Type from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = '" + exam_code + "' and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester,Subject.Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;";
                        printds_rows.Clear();
                        printds_rows.Dispose();
                        printds_rows = da.select_method_wo_parameter(sql3, "Text");

                        int j = 0;
                        int i1 = 0;
                        int sheetno = 0;
                        int j1 = 0;
                        int RowA = 1;
                        int rowCnt = 0;
                        int tableRow = 0;
                        int modcount = 1;
                        bool isFirstPagePrinted = false;
                        int check = 0;

                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                            {
                                if (printds_new.Tables.Count > 0 && printds_new.Tables[0].Rows.Count > 0)
                                {


                                    string sem1 = Convert.ToString(printds_rows.Tables[0].Rows[i]["semester"]).Trim();



                                    string parttype = Convert.ToString(printds_rows.Tables[0].Rows[i]["Part_Type"]).Trim();

                                    if (parttype == "1")
                                    {
                                        parttype = "I";
                                    }
                                    else if (parttype == "2")
                                    {
                                        parttype = "II";
                                    }
                                    else if (parttype == "3")
                                    {
                                        parttype = "III";
                                    }
                                    else if (parttype == "4")
                                    {
                                        parttype = "IV";
                                    }
                                    else if (parttype == "5")
                                    {
                                        parttype = "V";
                                    }
                                    else if (parttype == "6")
                                    {
                                        parttype = "VI";
                                    }
                                    else if (parttype == "7")
                                    {
                                        parttype = "VII";
                                    }
                                    else if (parttype == "8")
                                    {
                                        parttype = "VIII";
                                    }
                                    else if (parttype == "9")
                                    {
                                        parttype = "IX";
                                    }
                                    else if (parttype == "10")
                                    {
                                        parttype = "X";
                                    }
                                    string parttypes = parttype;

                                    if (courparttype != parttype)
                                    {
                                        if (string.IsNullOrEmpty(courparttype))
                                            courparttype1 = parttype;
                                        else
                                            courparttype1 = courparttype1 + "," + parttype;
                                    }
                                    courparttype = parttype;

                                    string subjectccoden = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim();


                                    string subname = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim().ToUpper();


                                    double internalmmark = 0;
                                    double externalmark1 = 0;
                                    double totalintext = 0;
                                    string cpoint = Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim();




                                    double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]), out internalmmark);


                                    double extfinal = 0;
                                    double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]), out extfinal);


                                    double max_total = 0;
                                    string maxTotalMarks = Convert.ToString(printds_rows.Tables[0].Rows[i]["maxtotal"]).Trim();
                                    double.TryParse(Convert.ToString(maxTotalMarks).Trim(), out max_total);
                                    extfinal = Math.Round(extfinal, 0);
                                    externalmark1 = extfinal;
                                    string checkedmark = string.Empty;
                                    if (extfinal < 0)
                                    {
                                        checkedmark = loadmarkat(Convert.ToString(extfinal));
                                    }
                                    else
                                    {
                                        checkedmark = Convert.ToString(extfinal);
                                    }
                                    if (internalmmark >= 0)
                                    {
                                        if (extfinal > 0)
                                        {
                                            totalintext = internalmmark + externalmark1;
                                        }
                                        else
                                        {
                                            totalintext = internalmmark;
                                        }
                                    }
                                    else
                                    {
                                        if (extfinal > 0)
                                        {
                                            totalintext = externalmark1;
                                        }
                                        else
                                        {
                                            totalintext = 0;
                                        }
                                    }
                                    string totfi = string.Empty;
                                    double totfinal1 = 0;
                                    totfinal1 = totalintext;
                                    string totalmarks2 = Convert.ToString(totalintext);
                                    if (eduLevel.ToUpper() == "UG")
                                    {
                                        if (totfinal1 <= 39)
                                        {
                                            totfi = "0.0";
                                        }
                                        else
                                        {
                                            totfinal1 = totfinal1 / 10;
                                            totfi = Convert.ToString(totfinal1);
                                            string str = Convert.ToString(totfinal1);
                                            string point = "0";
                                            if (Convert.ToInt32(str.Length) == 1)
                                            {
                                                totfi = Convert.ToString(totfinal1) + "." + point;

                                            }
                                        }
                                    }
                                    else if (eduLevel.ToUpper() == "PG")
                                    {
                                        if (totfinal1 <= 49)
                                        {
                                            totfi = "0.0";
                                        }
                                        else
                                        {
                                            totfinal1 = totfinal1 / 10;
                                            totfi = Convert.ToString(totfinal1);
                                            string str = Convert.ToString(totfinal1);
                                            string point = "0";
                                            if (Convert.ToInt32(str.Length) == 1)
                                            {
                                                totfi = Convert.ToString(totfinal1) + "." + point;

                                            }
                                        }
                                    }



                                    double totfinal = totfinal1;
                                    double getval = totfinal1;
                                    if (max_total != 100)
                                    {
                                        getval = totfinal / max_total * 100;
                                        getval = Math.Round(getval, 1, MidpointRounding.AwayFromZero);
                                    }

                                    string grade = string.Empty;
                                    string grade_points = string.Empty;

                                    string q = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Semester='" + seme + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + totalintext + "' between Frange and Trange; select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + totalintext + "' between Frange and Trange;";
                                    DataSet dsgrade = new DataSet();
                                    dsgrade = d2.select_method_wo_parameter(q, "Text");
                                    if (dsgrade.Tables.Count > 0)
                                    {
                                        if (dsgrade.Tables[0].Rows.Count == 0)
                                        {
                                            if (dsgrade.Tables.Count > 1 && dsgrade.Tables[1].Rows.Count > 0)
                                            {
                                                grade = Convert.ToString(dsgrade.Tables[1].Rows[0]["Mark_Grade"]).Trim();
                                                grade_points = Convert.ToString(dsgrade.Tables[1].Rows[0]["Credit_points"]).Trim();
                                            }
                                        }
                                        else
                                        {
                                            grade = Convert.ToString(dsgrade.Tables[0].Rows[0]["Mark_Grade"]).Trim();
                                            grade_points = Convert.ToString(dsgrade.Tables[0].Rows[0]["Credit_points"]).Trim();
                                        }
                                    }

                                    string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).Trim();
                                    if (grade.ToString() == "REAPPEAR" || grade.ToString() == "Reappear")
                                    {
                                        grade = "U";
                                        result = "RE-APP";
                                    }
                                    if (grade.ToString() == "ABSENT" || grade.ToString() == "Absent")
                                    {
                                        grade = "U";
                                        result = "AB";
                                    }
                                    if (result.ToUpper() == "FAIL")
                                    {
                                        result = "RE-APP";
                                        totalmarks2 = "XXX";

                                    }


                                    if (isFirstPagePrinted == false ? j < 15 : (j < (tableRow < 15 ? tableRow : (15 * RowA) - check)))
                                    {


                                        j++;
                                        tblMarkStmt.Cell(j, 0).SetContent(parttypes);
                                        tblMarkStmt.Cell(j, 2).SetContent(subjectccoden);
                                        tblMarkStmt.Cell(j, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMarkStmt.Cell(j, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMarkStmt.Cell(j, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMarkStmt.Cell(j, 1).SetContent(sem1);
                                        tblMarkStmt.Cell(j, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMarkStmt.Cell(j, 3).SetContent(subname);
                                        tblMarkStmt.Cell(j, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        if (cpoint == "0")
                                        {
                                            tblMarkStmt.Cell(j, 4).SetContent("-");
                                        }
                                        else
                                        {
                                            tblMarkStmt.Cell(j, 4).SetContent(cpoint);
                                        }
                                        tblMarkStmt.Cell(j, 5).SetContent(extfinal);
                                        tblMarkStmt.Cell(j, 6).SetContent(internalmmark);
                                        tblMarkStmt.Cell(j, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(j, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(j, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(j, 7).SetContent(totalmarks2);
                                        tblMarkStmt.Cell(j, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(j, 8).SetContent(totfi);
                                        tblMarkStmt.Cell(j, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMarkStmt.Cell(j, 9).SetContent(grade);
                                        tblMarkStmt.Cell(j, 10).SetContentAlignment(ContentAlignment.MiddleRight);
                                        tblMarkStmt.Cell(j, 10).SetContent(result);
                                        check++;
                                        i1 = j;
                                    }
                                    #region Contionue On New Page
                                    else
                                    {
                                        tblMarkStmt.Cell(j + 1, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMarkStmt.Cell(j + 1, 3).SetContent("CONTINUES IN NEXT PAGE...");
                                        isFirstPagePrinted = true;
                                        Gios.Pdf.PdfTablePage myprov_pdfpage3 = tblMarkStmt.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, -7.1, 390, 795, 650));
                                        mypdfpage.Add(myprov_pdfpage3);
                                        mypdfpage.SaveToDocument();
                                        mypdfpage = mydoc.NewPage();
                                        RowA++;


                                        #region studetails
                                        degdep = "PROGRAM:" + degdep + "";
                                        PdfTextArea pdfcourname1 = new PdfTextArea(Fontarial7, System.Drawing.Color.Black, new PdfArea(mydoc, 185, 258, 400, 50), System.Drawing.ContentAlignment.MiddleCenter, Convert.ToString(degdep));
                                        mypdfpage.Add(pdfcourname1);
                                        tblstatement = mydoc.NewTable(Fontco12, 2, 4, 12);
                                        tblstatement.VisibleHeaders = false;
                                        tblstatement.SetBorders(Color.Black, 1, BorderType.None);
                                        tblstatement.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Columns[0].SetWidth(24);
                                        tblstatement.Columns[1].SetWidth(9);
                                        tblstatement.Columns[2].SetWidth(7);
                                        tblstatement.Columns[3].SetWidth(8);



                                        tblstatement.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);

                                        tblstatement.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblstatement.Cell(0, 0).SetContent(Convert.ToString(studname).Trim());

                                        tblstatement.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleRight);
                                        tblstatement.Cell(0, 1).SetContent(Convert.ToString(regno).Trim());
                                        foreach (PdfCell pr in tblstatement.CellRange(0, 1, 0, 1).Cells)
                                        {
                                            pr.RowSpan = 2;
                                        }
                                        tblstatement.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleRight);
                                        tblstatement.Cell(1, 0).SetContent(Convert.ToString(dobdate).Trim());
                                        foreach (PdfCell pr in tblstatement.CellRange(0, 2, 0, 2).Cells)
                                        {
                                            pr.RowSpan = 2;
                                        }
                                        foreach (PdfCell pr in tblstatement.CellRange(0, 3, 0, 3).Cells)
                                        {
                                            pr.RowSpan = 2;
                                        }

                                        tblstatement.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblstatement.Cell(0, 2).SetContent(Convert.ToString(monandyr).Trim());
                                        tblstatement.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblstatement.Cell(0, 3).SetContent(Convert.ToString(publicationdate).Trim());



                                        //tblstatement.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        //tblstatement.Cell(2, 1).SetContent(Convert.ToString(degdep).Trim());
                                        //foreach (PdfCell pr in tblstatement.CellRange(2, 1, 2, 1).Cells)
                                        //{
                                        //    pr.ColSpan = 2;
                                        //}


                                        Gios.Pdf.PdfTablePage myprov_pdfpage21 = tblstatement.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 15, 195, 748, 650));
                                        mypdfpage.Add(myprov_pdfpage21);

                                        #endregion
                                        #region(stud photo)

                                        string stdphtsql1 = string.Empty;
                                        stdphtsql1 = "select * from StdPhoto where app_no='" + appNo + "'";
                                        MemoryStream memoryStream1 = new MemoryStream();
                                        DataSet dsstdpho1 = new DataSet();
                                        dsstdpho1.Clear();
                                        dsstdpho1.Dispose();
                                        dsstdpho1 = da.select_method_wo_parameter(stdphtsql1, "Text");
                                        if (dsstdpho1.Tables.Count > 0 && dsstdpho1.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho1.Tables[0].Rows[0][1]).Trim()))
                                        {
                                            byte[] file = (byte[])dsstdpho1.Tables[0].Rows[0][1];
                                            memoryStream1.Write(file, 0, file.Length);
                                            if (file.Length > 0)
                                            {
                                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream1, true, true);
                                                System.Drawing.Image thumb = imgx.GetThumbnailImage(350, 350, null, IntPtr.Zero);
                                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg")))
                                                {
                                                }
                                                else
                                                {
                                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                                }
                                            }
                                        }
                                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg")))
                                        {
                                            PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg"));
                                            mypdfpage.Add(LogoImage2, 675, 45, 195);
                                        }
                                        else
                                        {
                                            PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                            mypdfpage.Add(LogoImage2, 675, 45, 195);
                                        }
                                        #endregion



                                        tblMarkStmt = mydoc.NewTable(Fontarial7, 35, 11, 6);
                                        tblMarkStmt.SetBorders(Color.Black, 1, BorderType.None);
                                        tblMarkStmt.VisibleHeaders = false;
                                        tblMarkStmt.Columns[0].SetWidth(6);
                                        tblMarkStmt.Columns[1].SetWidth(6);
                                        tblMarkStmt.Columns[2].SetWidth(19);
                                        tblMarkStmt.Columns[3].SetWidth(75);
                                        tblMarkStmt.Columns[4].SetWidth(9);
                                        tblMarkStmt.Columns[5].SetWidth(9);
                                        tblMarkStmt.Columns[6].SetWidth(9);
                                        tblMarkStmt.Columns[7].SetWidth(9);
                                        tblMarkStmt.Columns[8].SetWidth(9);
                                        tblMarkStmt.Columns[9].SetWidth(9);
                                        tblMarkStmt.Columns[10].SetWidth(9);

                                        tableRow = printds_rows.Tables[0].Rows.Count - j;
                                        j = 0;

                                    }
                                    #endregion

                                }
                            }
                            tblMarkStmt.Cell(i1 + 1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMarkStmt.Cell(i1 + 1, 0).SetFont(Fontpala12);
                            tblMarkStmt.Cell(i1 + 1, 0).SetContent("*** End of Statement ***");
                            foreach (PdfCell pr in tblMarkStmt.CellRange(i1 + 1, 0, i1 + 1, 0).Cells)
                            {
                                pr.ColSpan = 10;
                            }
                            Gios.Pdf.PdfTablePage myprov_pdfpage31 = tblMarkStmt.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, -7.1, 390, 795, 650));
                            mypdfpage.Add(myprov_pdfpage31);
                        }

                        #endregion


                        DataTable dtPart1 = printds_rows.Tables[0].DefaultView.ToTable(true, "Part_Type");
                        double partsums = 0.000;
                        double partwpmsum = 0.000;
                        int partrowcount3 = 0;
                        double Credit_Points = 0.0;
                        double grade_points2 = 0.0;
                        double creditstotal = 0;
                        double overalltotgrade = 0;
                        double Marks = 0;
                        string gp1 = string.Empty;
                        DataSet gradeds = new DataSet();
                        PdfTextArea pdfcouapp = new PdfTextArea(Fontarial7, System.Drawing.Color.Black, new PdfArea(mydoc, 170, 900, 400, 50), System.Drawing.ContentAlignment.MiddleCenter, "Courses Appeared in the Current Semester");
                        mypdfpage.Add(pdfcouapp);

                        #region PartType

                        dtPart1.DefaultView.Sort = "Part_Type ASC";
                        dtPart1 = dtPart1.DefaultView.ToTable();
                        if (dtPart1.Rows.Count > 0)
                        {
                            // PdfTable tblsemwisegpa = mydoc.NewTable(Fontarial7, 5, 3, 5);
                            PdfTable datecoe = mydoc.NewTable(Fontarial7, dtPart1.Rows.Count + 1, 3, 5);
                            datecoe.VisibleHeaders = false;
                            datecoe.SetBorders(Color.Black, 1, BorderType.None);
                            datecoe.Columns[0].SetWidth(5);
                            datecoe.Columns[1].SetWidth(5);
                            datecoe.Columns[2].SetWidth(5);


                            datecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            datecoe.Cell(0, 0).SetContent("PART");

                            datecoe.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            datecoe.Cell(0, 1).SetContent("CREDIT EARNED ");
                            datecoe.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            datecoe.Cell(0, 2).SetContent("GPA");

                            int row = 0;

                            foreach (DataRow dtpart in dtPart1.Rows)
                            {
                                double gpapoint = 0;
                                string patva = Convert.ToString(dtpart["Part_Type"]);
                                partsums = 0;
                                partrowcount3 = 0;
                                creditstotal = 0;
                                partwpmsum = 0;
                                overalltotgrade = 0;
                                grade_points2 = 0;
                                row++;
                                printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='" + patva + "' and result='pass'";
                                DataTable dtPartwise = printds_rows.Tables[0].DefaultView.ToTable();
                                string sumpart = string.Empty;
                                string wpm = string.Empty;

                                if (dtPartwise.Rows.Count > 0)
                                {

                                    for (int sum = 0; sum < dtPartwise.Rows.Count; sum++)
                                    {
                                        double checkmarkmm = 0;

                                        double.TryParse(Convert.ToString(dtPartwise.Rows[sum]["total"]).Trim(), out checkmarkmm);
                                        double gradept = checkmarkmm / 10;
                                        double maxsubbtotal = 0;
                                        double.TryParse(Convert.ToString(dtPartwise.Rows[sum]["maxtotal"]).Trim(), out maxsubbtotal);
                                        if (maxsubbtotal != 0)
                                            checkmarkmm = checkmarkmm / maxsubbtotal * 100;
                                        checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                        string gradesql1 = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degCode + "' and batch_year='" + batchYear + "' and '" + checkmarkmm + "' between frange and trange";
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesql1, "Text");
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                        {
                                            gradesql1 = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degCode + "' and batch_year='" + batchYear + "'  and '" + checkmarkmm + "' between frange and trange";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql1, "Text");
                                        }
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                        {
                                            for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                            {
                                                if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                {
                                                    grade_points2 = checkmarkmm;
                                                    grade_points2 = grade_points2 / 10;
                                                    grade_points2 = Math.Round(grade_points2, 3, MidpointRounding.AwayFromZero);
                                                    double.TryParse(Convert.ToString(dtPartwise.Rows[sum]["credit_points"]), out Credit_Points);
                                                    creditstotal = creditstotal + Credit_Points;
                                                    partwpmsum += (Credit_Points * gradept);
                                                    partsums = partsums + (gradept * Credit_Points);
                                                    gpapoint = partsums / creditstotal;

                                                    gpapoint = Math.Round(gpapoint, 3, MidpointRounding.AwayFromZero);
                                                    // gp1 = Convert.ToString(Math.Round(Convert.ToDouble(gpapoint), 3));
                                                    gp1 = string.Format("{0:0.000}", gpapoint);

                                                }
                                            }
                                        }
                                    }

                                }
                                if (patva == "1")
                                {
                                    patva = "I";
                                }
                                else if (patva == "2")
                                {
                                    patva = "II";
                                }
                                else if (patva == "3")
                                {
                                    patva = "III";
                                }
                                else if (patva == "4")
                                {
                                    patva = "IV";
                                }
                                else if (patva == "5")
                                {
                                    patva = "V";
                                }
                                else if (patva == "6")
                                {
                                    patva = "VI";
                                }
                                else if (patva == "7")
                                {
                                    patva = "VII";
                                }
                                else if (patva == "8")
                                {
                                    patva = "VIII";
                                }
                                else if (patva == "9")
                                {
                                    patva = "IX";
                                }
                                else if (patva == "10")
                                {
                                    patva = "X";
                                }


                                datecoe.Cell(row, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                datecoe.Cell(row, 0).SetContent(patva);

                                datecoe.Cell(row, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                datecoe.Cell(row, 1).SetContent(creditstotal);
                                if (gp1 == "")
                                {
                                    gp1 = "0.000";
                                }
                                else if (gp1.ToUpper() == "NAN")
                                {
                                    gp1 = "0.000";
                                }

                                datecoe.Cell(row, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                datecoe.Cell(row, 2).SetContent(Convert.ToString(gp1));

                            }
                            Gios.Pdf.PdfTablePage myprov_pdfpage4 = datecoe.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 15, 942, 700, 650));

                            mypdfpage.Add(myprov_pdfpage4);


                        }


                        #endregion




                        mypdfpage.SaveToDocument();
                        mypdfpage = mydoc.NewPage();
                    }
                }
            }

            string apppath = HttpContext.Current.Server.MapPath("~");
            if (apppath != "")
            {
                string sz1path = apppath + "/Report/";
                string sz1File = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                mydoc.SaveToFile(sz1path + sz1File);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + sz1File);
                Response.ContentType = "application1/pdf";
                Response.WriteFile(sz1path + sz1File);
            }
        }

        catch (Exception ex)
        {
            da.sendErrorMail(ex, collegeCode, "statementofmarks");
        }
    }
    #endregion SNS COLLEGE

    //mullai 3/8/18
    #region noorul
    public void marksheet()
    {
        try
        {
            string monthstr = string.Empty;
            string monthandyear = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            Font fondColName = new Font("Comic Sans MS", 18, FontStyle.Bold);
            Font fontdegexam = new Font("Arial", 12, FontStyle.Bold);
            Font fondconsol = new Font("Comic Sans MS", 15, FontStyle.Bold);
            Font Fontco12 = new Font("Comic Sans MS", 10, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco11 = new Font("Comic Sans MS", 11, FontStyle.Bold);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 11, FontStyle.Regular);
            Font Fontwma = new Font("Arial", 8, FontStyle.Bold);
            Font Font8bold = new Font("Arial", 8, FontStyle.Bold);
            Font Font10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font Fontarial9 = new Font("Arial", 9, FontStyle.Bold);
            Font Fontarial10b = new Font("Arial", 11, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            PdfDocument doc = new PdfDocument(PdfDocumentFormat.InCentimeters(29.5, 30.5));
            PdfPage pdfpage = doc.NewPage();

            string degree = string.Empty;
            string Collegename = string.Empty;
            string aff = string.Empty;
            string collacr = string.Empty;
            string dispin = string.Empty;
            string clgaddress = string.Empty;
            string univ = string.Empty;
            string pincode1 = string.Empty;
            string state = string.Empty;
            string dist = string.Empty;
            string studname = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string regno = string.Empty;
            string branch = string.Empty;
            string regulations = string.Empty;
            string dob = string.Empty;
            string follono = string.Empty;
            string gender = string.Empty;
            string publication = string.Empty;
            string category = string.Empty;
            string regulation = string.Empty;
            string grade = string.Empty;
            string grade_points = string.Empty;
            string coesign = string.Empty;
            int month = 0;
            string monandyr = string.Empty;
            string publicationdate = string.Empty;
            string dobdate = string.Empty;
            string pumonthname = string.Empty;
            string searialno = string.Empty;
            int togradee = 0;
            string folionumber = string.Empty;
            DataSet das1 = new DataSet();
            DataSet das2 = new DataSet();
            DataSet das3 = new DataSet();
            DataSet das4 = new DataSet();
            DataSet das5 = new DataSet();
            DataTable dt1 = new DataTable();
            DataTable dt2 = new DataTable();
            int partrowcount = 0;
            int partrowcount1 = 0;

            string str = "select *,district+' - '+pincode as distpin,coe_signature from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
            ds.Clear();
            ds.Dispose();
            ds = d2.select_method_wo_parameter(str, "text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                pincode1 = Convert.ToString(ds.Tables[0].Rows[0]["pincode"]).Trim();

                int pin = 0;
                int.TryParse(pincode1, out pin);
                clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]).Trim() + "," + Convert.ToString(ds.Tables[0].Rows[0]["district"]).Trim() + "-" + ((pin != 0) ? ("-" + pin.ToString()) : "-" + pincode1);
                clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]).Trim();
                coesign = Convert.ToString(ds.Tables[0].Rows[0]["coe_signature"]).Trim();
            }

            FpSpread2.SaveChanges();
            for (int smark = 1; smark <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; smark++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[smark, 4].Value);
                if (isval == 1)
                {
                    das1.Clear();
                    das1.Dispose();
                    das2.Clear();
                    das2.Dispose();
                    regno = FpSpread2.Sheets[0].Cells[smark, 2].Text;
                    rollnosub = FpSpread2.Sheets[0].Cells[smark, 1].Text;
                    string query = "SELECT r.Reg_No,r.batch_year,a.sex,r.app_no,r.degree_code,r.serialno,R.current_semester,r.regulation,R.Stud_Name,c.Course_Name as degree,d.Dept_name,CONVERT(VARCHAR, dob, 103) as dob,datepart(year, Adm_date) as adm_year FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code and roll_no='" + rollnosub + "'and r.college_code= '" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'; select coe from collinfo where college_code= '" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                    das1 = da.select_method_wo_parameter(query, "text");
                    if (das1.Tables.Count > 0 && das1.Tables[0].Rows.Count > 0)
                    {
                        studname = Convert.ToString(das1.Tables[0].Rows[0]["stud_name"]).Trim();
                        string appno = Convert.ToString(das1.Tables[0].Rows[0]["app_no"]).Trim();
                        bool ishasfolionumber = getFolioNumber(appno, ref folionumber);
                        int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                        monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                        string monthname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                        monthandyear = Convert.ToString(monthname).Trim() + "-" + Convert.ToString(ddlYear.SelectedItem.Text).Trim().ToUpper();
                        monandyr = Convert.ToString(monthandyear).Substring(0, 3) + "-" + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        // string sign = das1.Tables[0].Rows[0]["coe_signature"].ToString();

                        branch = das1.Tables[0].Rows[0]["dept_name"].ToString();
                        batch_year = Convert.ToString(das1.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = das1.Tables[0].Rows[0]["degree_code"].ToString();
                        //dob=das1.Tables[0].Rows[0]["dob"].ToString();
                        degree = Convert.ToString(das1.Tables[0].Rows[0]["degree"]).Trim();
                        string sem = das1.Tables[0].Rows[0]["current_semester"].ToString();
                        //regulation=Convert.ToString(das1.Tables[0].Rows[0]["regulations"]).Trim();
                        //string ldate = txtdop.Text;
                        //string[] spl1 = ldate.Split('/');
                        //DateTime datetim = Convert.ToDateTime(spl1[1] + '/' + spl1[0] + '/' + spl1[2]);
                        //string pudate="dd";
                        //string pumonth="mmm";
                        //string puyear="yyyy";
                        //publicationdate=Convert.ToString(pudate+"-"+pumonth+"-"+puyear).Trim();
                        string dobdat = das1.Tables[0].Rows[0]["dob"].ToString();
                        string[] spl2 = dobdat.Split('/');
                        DateTime dati = Convert.ToDateTime(spl2[1] + '/' + spl2[0] + '/' + spl2[2]);
                        string ddate = "dd";
                        string dmonth = "mmm";
                        string dyear = "yyyy";
                        dobdate = Convert.ToString(ddate + "-" + dmonth + "-" + dyear).Trim();
                        string yearofadm = Convert.ToString(das1.Tables[0].Rows[0]["adm_year"]).Trim();
                        string medium = d2.GetFunctionv("select TextVal from TextValTable where TextCriteria='medi' and college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and TextCode in(select isnull(medium_ins,0) from applyn  where app_no='" + appno + "')");



                        //studdetails
                        PdfTable pdtable = doc.NewTable(Fontco12, 5, 5, 3);
                        pdtable.VisibleHeaders = false;
                        pdtable.SetBorders(Color.Black, 1, BorderType.None);
                        pdtable.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        pdtable.Columns[0].SetWidth(8);
                        pdtable.Columns[1].SetWidth(25);
                        pdtable.Columns[2].SetWidth(8);
                        pdtable.Columns[3].SetWidth(12);
                        pdtable.Columns[4].SetWidth(15);
                        //pdtable.Columns[5].SetWidth(56);
                        // pdtable.Columns[6].SetWidth(30);


                        PdfTable studdetails = doc.NewTable(Fontco12, 7, 2, 1);
                        studdetails.VisibleHeaders = false;
                        studdetails.SetBorders(Color.Black, 1, BorderType.None);
                        studdetails.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        studdetails.Columns[0].SetWidth(2);
                        studdetails.Columns[1].SetWidth(10);
                        //studdetails.Columns[2].SetWidth(10);




                        if (ishasfolionumber)
                        {
                            studdetails.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            studdetails.Cell(0, 1).SetContent(Convert.ToString(folionumber).Trim());
                            pdtable.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdtable.Cell(0, 4).SetContent(Convert.ToString(folionumber).Trim());
                        }
                        else
                        {
                            studdetails.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            studdetails.Cell(0, 1).SetContent("");
                            pdtable.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdtable.Cell(0, 4).SetContent("");
                        }
                        studdetails.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        studdetails.Cell(1, 1).SetContent(Convert.ToString(studname).Trim());
                        pdtable.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        pdtable.Cell(1, 1).SetContent(Convert.ToString(studname).Trim());

                        //foreach (PdfCell pc in pdtable.CellRange(2, 3, 2, 6).Cells)
                        //{
                        //    pc.ColSpan = 3;

                        //}
                        pdtable.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        pdtable.Cell(2, 1).SetContent(Convert.ToString(regno).Trim());
                        studdetails.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        studdetails.Cell(2, 1).SetContent(Convert.ToString(regno).Trim());
                        pdtable.Cell(2, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                        pdtable.Cell(2, 3).SetContent(Convert.ToString(monandyr).Trim());
                        studdetails.Cell(6, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        studdetails.Cell(6, 1).SetContent(Convert.ToString(monandyr).Trim());
                        //foreach (PdfCell pc1 in pdtable.CellRange(2, 2, 2, 3).Cells)
                        //{
                        //    pc1.ColSpan = 4;

                        //}

                        pdtable.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        pdtable.Cell(3, 1).SetContent(Convert.ToString(degree).Trim());
                        studdetails.Cell(4, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        studdetails.Cell(4, 1).SetContent(Convert.ToString(degree).Trim());
                        //foreach (PdfCell pc0 in pdtable.CellRange(3, 0, 3, 1).Cells)
                        //{
                        //    pc0.ColSpan = 4;

                        //}

                        pdtable.Cell(4, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                        pdtable.Cell(4, 4).SetContent(Convert.ToString(yearofadm).Trim());
                        studdetails.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        studdetails.Cell(3, 1).SetContent(Convert.ToString(yearofadm).Trim());
                        //foreach (PdfCell pc2 in pdtable.CellRange(3, 3, 4, 3).Cells)
                        //{
                        //    pc2.ColSpan = 4;
                        //}
                        pdtable.Cell(4, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        pdtable.Cell(4, 1).SetContent(Convert.ToString(branch).Trim());
                        studdetails.Cell(5, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        studdetails.Cell(5, 1).SetContent(Convert.ToString(branch).Trim());
                        foreach (PdfCell pc2 in studdetails.CellRange(5, 1, 5, 1).Cells)
                        {
                            pc2.ColSpan = 1;
                        }



                        //semdetails

                        PdfTable tblMark = doc.NewTable(Fontarial7, 30, 13, 2);
                        tblMark.SetBorders(Color.Black, 1, BorderType.None);
                        tblMark.VisibleHeaders = false;
                        tblMark.Columns[0].SetWidth(50);
                        tblMark.Columns[1].SetWidth(25);
                        tblMark.Columns[2].SetWidth(30);
                        tblMark.Columns[3].SetWidth(15);

                        tblMark.Columns[4].SetWidth(25);
                        tblMark.Columns[5].SetWidth(40);
                        tblMark.Columns[6].SetWidth(35);
                        tblMark.Columns[7].SetWidth(70);
                        tblMark.Columns[8].SetWidth(250);
                        tblMark.Columns[9].SetWidth(35);
                        tblMark.Columns[10].SetWidth(45);
                        tblMark.Columns[11].SetWidth(45);
                        tblMark.Columns[12].SetWidth(35);


                        string sql = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year='" + batch_year + "' ";
                        das3 = da.select_method_wo_parameter(sql, "Text");
                        string exam_code = Convert.ToString(das3.Tables[0].Rows[0]["exam_code"]).Trim();
                        string sql1 = "Select semester,subject_code,subject_name,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points ,grade from mark_entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = '" + exam_code + "' and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester, subject_type, sub_sem.lab, subject.subjectpriority,subject.subject_no;";
                        das4.Clear();
                        das4.Dispose();
                        das4 = da.select_method_wo_parameter(sql1, "text");
                        if (das4.Tables.Count > 0 && das4.Tables[0].Rows.Count > 0)
                        {
                            for (int i = 0; i < das4.Tables[0].Rows.Count; i++)
                            {
                                if (das4.Tables.Count > 0 && das4.Tables[0].Rows.Count > 0)
                                {
                                    tblMark.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    string sem1 = Convert.ToString(das4.Tables[0].Rows[i]["semester"]).Trim();
                                    tblMark.Cell(i, 6).SetContent(sem1);
                                    tblMark.Cell(i, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    string sub_code = Convert.ToString(das4.Tables[0].Rows[i]["subject_code"]).Trim();
                                    tblMark.Cell(i, 7).SetContent(sub_code);
                                    tblMark.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMark.Cell(i, 0).SetContent(sub_code);

                                    tblMark.Cell(i, 8).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    tblMark.Cell(i, 8).SetContent(Convert.ToString(das4.Tables[0].Rows[i]["subject_name"]).Trim().ToUpper());
                                    double internalmmark = 0;
                                    double externalmark1 = 0;
                                    double totalinternal = 0;
                                    double totalexternal = 0;
                                    double.TryParse(Convert.ToString(das4.Tables[0].Rows[i]["internal_mark"]), out                                   internalmmark);
                                    double.TryParse(Convert.ToString(das4.Tables[0].Rows[i]["external_mark"]), out                                  totalexternal);
                                    totalexternal = Math.Round(totalexternal, 0);
                                    externalmark1 = totalexternal;
                                    string checkedmark = string.Empty;
                                    if (totalexternal < 0)
                                    {
                                        checkedmark = loadmarkat(Convert.ToString(totalexternal));
                                    }
                                    else
                                    {
                                        checkedmark = Convert.ToString(totalexternal);
                                    }
                                    if (internalmmark >= 0)
                                    {
                                        if (totalexternal > 0)
                                        {
                                            totalinternal = internalmmark + externalmark1;
                                        }
                                        else
                                        {
                                            totalinternal = internalmmark;
                                        }
                                    }
                                    else
                                    {
                                        if (totalexternal > 0)
                                        {
                                            totalinternal = externalmark1;
                                        }
                                        else
                                        {
                                            totalinternal = 0;
                                        }
                                    }
                                    double totfinal = 0;
                                    totfinal = Math.Round(totalinternal, 0);
                                    string t_final = Convert.ToString(totfinal);
                                    t_final = String.Format("{0:0}", t_final);
                                    tblMark.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    totfinal = Convert.ToDouble(das4.Tables[0].Rows[i]["total"]);
                                    tblMark.Cell(i, 9).SetContent(t_final);
                                    tblMark.Cell(i, 10).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMark.Cell(i, 10).SetContent(Convert.ToString(das4.Tables[0].Rows[i]["credit_points"]).Trim());
                                    tblMark.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMark.Cell(i, 1).SetContent(Convert.ToString(das4.Tables[0].Rows[i]["credit_points"]).Trim());

                                    string sql2 = "select*from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + totfinal + "' between Frange and Trange; select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + totfinal + "' between Frange and Trange;";
                                    DataSet dsgrade = new DataSet();
                                    dsgrade = d2.select_method_wo_parameter(sql2, "text");
                                    if (dsgrade.Tables.Count > 0)
                                    {
                                        if (dsgrade.Tables[0].Rows.Count == 0)
                                        {
                                            if (dsgrade.Tables.Count > 1 && dsgrade.Tables[1].Rows.Count > 0)
                                            {
                                                grade = Convert.ToString(dsgrade.Tables[1].Rows[0]["mark_grade"]).Trim();
                                                grade_points = Convert.ToString(dsgrade.Tables[1].Rows[0]["credit_points"]).Trim();

                                            }
                                        }
                                        else
                                        {
                                            grade = Convert.ToString(dsgrade.Tables[0].Rows[0]["Mark_Grade"]).Trim();
                                            grade_points = Convert.ToString(dsgrade.Tables[0].Rows[0]["Credit_points"]).Trim();
                                        }
                                    }
                                    if (grade.ToString().ToUpper() == "REAPPEAR" || grade.ToString() == "Reappear")
                                    {
                                        grade = "RA";
                                    }
                                    tblMark.Cell(i, 11).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMark.Cell(i, 11).SetContent(grade);
                                    tblMark.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMark.Cell(i, 2).SetContent(grade);
                                    tblMark.Cell(i, 12).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMark.Cell(i, 12).SetContent(grade_points);
                                    tblMark.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblMark.Cell(i, 4).SetContent(grade_points);


                                }
                            }


                            string semesgpa = d2.GetFunction("select distinct Current_Semester from Registration where Batch_Year='" + batch_year + "' and degree_code='" + degree_code + "' and CC=0 and DelFlag=0 and Exam_Flag<>'debar'");
                            int cur_sem = 0;
                            int.TryParse(semesgpa, out cur_sem);
                            string quryallsemgpa = "Select semester,subject_code,exam_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,Part_Type from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in(select exam_code from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semesgpa + "') and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester,Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;select exam_code,current_semester from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semesgpa + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "'and exam_month='" + month + "' order by exam_code,current_semester;";
                            DataSet semwisegpaycur_1 = new DataSet();
                            semwisegpaycur_1 = d2.select_method_wo_parameter(quryallsemgpa, "Text");
                            string currsemesy_1 = string.Empty;
                            string quryallsemgpa_1 = "Select semester,subject_code,exam_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,Part_Type from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in(select exam_code from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semesgpa + "' and exam_year<='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "') and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester,Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;select exam_code,current_semester from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semesgpa + "' order by exam_code,current_semester;";
                            DataSet semwisegpay_1 = new DataSet();
                            semwisegpay_1 = d2.select_method_wo_parameter(quryallsemgpa_1, "Text");
                            currsemesy_1 = Convert.ToInt32(semwisegpaycur_1.Tables[1].Rows[0]["current_semester"]).ToString();
                            int x = 0;
                            int.TryParse(currsemesy_1, out x);
                            x += 1;
                            int y1 = x - 1;
                            string[] gpa1 = new string[x - 1];

                            double[] totcredit1 = new double[x - 1];
                            double[] earnedcredit1 = new double[x - 1];
                            double[] gradfin1 = new double[x - 1];
                            currsemesy_1 = Convert.ToString(x).Trim();

                            string months_1 = Convert.ToString(month).Trim();
                            double cgpaove = 0.00;
                            withLateralcalcsemwisegpa(semwisegpay_1, Convert.ToString(ddlCollege.SelectedValue).Trim(), degree_code, batch_year, currsemesy_1, ref gpa1, ref totcredit1, ref earnedcredit1, ref gradfin1);
                            double totearnedcredit_1 = 0;

                            string currsemesysgpa_0 = Convert.ToInt32(semwisegpay_1.Tables[1].Rows[0]["current_semester"]).ToString();
                            int s1;
                            int rowcol1;
                            int gparow1 = 0;
                            int.TryParse(currsemesysgpa_0, out rowcol1);
                            for (s1 = rowcol1; s1 < x; s1++)
                            {

                                if (s1 < 6)
                                {
                                    double rgpa = Convert.ToDouble(gpa1[gparow1]);
                                    rgpa = Math.Round(rgpa, 2);


                                    tblMark.Cell(26, s1).SetContent(rgpa);
                                    totearnedcredit_1 += earnedcredit1[gparow1];
                                    gparow1++;
                                }
                                else
                                {
                                    int r = rowcol1;
                                    double rgpa = Convert.ToDouble(gpa1[gparow1]);
                                    rgpa = Math.Round(rgpa, 2);
                                    tblMark.Cell(29, r).SetContent(rgpa);
                                    totearnedcredit_1 += earnedcredit1[gparow1];
                                    gparow1++;
                                    r++;
                                }
                            }
                            tblMark.Cell(24, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblMark.Cell(24, 1).SetContent(totearnedcredit_1);
                            tblMark.Cell(das4.Tables[0].Rows.Count, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMark.Cell(das4.Tables[0].Rows.Count, 8).SetContent("*** End of the Statement ***");

                            foreach (PdfCell pc5 in tblMark.CellRange(das4.Tables[0].Rows.Count, 0, das4.Tables[0].Rows.Count, 0).Cells)
                            {
                                pc5.ColSpan = 6;
                            }
                        }

                        //cgpa

                        #region gpa cgpa details
                        PdfTable tblsemwisegpa = doc.NewTable(Fontarial7, 4, 10, 5);
                        tblsemwisegpa.VisibleHeaders = false;
                        tblsemwisegpa.SetBorders(Color.Black, 1, BorderType.None);
                        tblsemwisegpa.SetColumnsWidth(new int[] { 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 });

                        PdfTable countercgpa = doc.NewTable(Fontarial7, 1, 2, 1);
                        countercgpa.VisibleHeaders = false;

                        countercgpa.SetColumnsWidth(new int[] { 10, 15 });


                        string semes = d2.GetFunction("select distinct Current_Semester from Registration where Batch_Year='" + batch_year + "' and degree_code='" + degree_code + "' and CC=0 and DelFlag=0 and Exam_Flag<>'debar'");
                        int curr_sem = 0;
                        int.TryParse(semes, out curr_sem);
                        string quryallsemgpa2 = "Select semester,subject_code,exam_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,Part_Type from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in(select exam_code from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "') and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester,Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;select exam_code,current_semester from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "'and exam_month='" + month + "' order by exam_code,current_semester;";
                        DataSet semwisegpaycur = new DataSet();
                        semwisegpaycur = d2.select_method_wo_parameter(quryallsemgpa2, "Text");
                        string currsemesy = string.Empty;
                        string quryallsemgpa1 = "Select semester,subject_code,exam_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,Part_Type from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in(select exam_code from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "' and exam_year<='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "') and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester,Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;select exam_code,current_semester from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "' order by exam_code,current_semester;";
                        DataSet semwisegpay = new DataSet();
                        semwisegpay = d2.select_method_wo_parameter(quryallsemgpa1, "Text");
                        currsemesy = Convert.ToInt32(semwisegpaycur.Tables[1].Rows[0]["current_semester"]).ToString();
                        int x1 = 0;
                        int.TryParse(currsemesy, out x1);
                        x1 += 1;
                        int y = x1 - 1;
                        string[] gpa = new string[x1 - 1];

                        double[] totcredit = new double[x1 - 1];
                        double[] earnedcredit = new double[x1 - 1];
                        double[] gradfin = new double[x1 - 1];
                        currsemesy = Convert.ToString(x1).Trim();

                        string months1 = Convert.ToString(month).Trim();
                        // double cgpaove_1 = 0.00;
                        calcsemwisegpa(semwisegpay, Convert.ToString(ddlCollege.SelectedValue).Trim(), degree_code, batch_year, currsemesy, ref gpa, ref totcredit, ref earnedcredit, ref gradfin);
                        double totearnedcredit = 0;

                        string currsemesysgpa = Convert.ToInt32(semwisegpay.Tables[1].Rows[0]["current_semester"]).ToString();
                        int s;
                        int rowcol;
                        int gparow = 0;
                        int.TryParse(currsemesysgpa, out rowcol);
                        for (s = rowcol; s < x1; s++)
                        {

                            tblsemwisegpa.Cell(0, s).SetContent(totcredit[gparow]);
                            tblsemwisegpa.Cell(1, s).SetContent(earnedcredit[gparow]);
                            double rgpa1 = Convert.ToDouble(gpa[gparow]);
                            rgpa1 = Math.Round(rgpa1, 2);
                            tblsemwisegpa.Cell(2, s).SetContent(Convert.ToString(rgpa1));

                            totearnedcredit += earnedcredit[gparow];
                            gparow++;
                            tblsemwisegpa.Cell(3, s).SetContentAlignment(ContentAlignment.MiddleLeft);
                            // tblsemwisegpa.Cell(3, s).SetContent(totearnedcredit);

                        }
                        tblsemwisegpa.Cell(3, 1).SetContent(totearnedcredit);

                        string cgpa1 = string.Empty;
                        double overallearnedcredit = 0;
                        double overallcredit = 0;
                        string latemode = "1";
                        string exament = d2.GetFunction("select exam_code from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "'and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "'and exam_month='" + month + "'");
                        semwisegpay.Tables[0].DefaultView.RowFilter = "result='PASS' and exam_code=" + exament + "";
                        dt1 = semwisegpay.Tables[0].DefaultView.ToTable();
                        partrowcount = dt1.Rows.Count;
                        semwisegpay.Tables[0].DefaultView.RowFilter = "exam_code=" + exament + "";
                        dt2 = semwisegpay.Tables[0].DefaultView.ToTable();
                        partrowcount1 = dt2.Rows.Count;
                        if (partrowcount1 == partrowcount)
                        {

                            currsemesy = Convert.ToString(x1 - 1).Trim();
                            string cgpa = d2.Calculete_CGPA(rollnosub, currsemesy, degree_code, batch_year, latemode, Convert.ToString(ddlCollege.SelectedValue).Trim());
                            tblsemwisegpa.Cell(3, 9).SetContent(cgpa);
                            countercgpa.Cell(0, 1).SetContent(cgpa);

                        }

                        else
                        {
                            tblsemwisegpa.Cell(3, 9).SetContent("");
                            countercgpa.Cell(0, 1).SetContent("");

                        }
                        #endregion

                        #region (sign)



                        PdfTable addr = doc.NewTable(Fontarial7, 3, 8, 3);
                        addr.VisibleHeaders = false;
                        addr.SetBorders(Color.Black, 1, BorderType.None);

                        addr.Columns[0].SetWidth(8);
                        addr.Columns[1].SetWidth(6);
                        addr.Columns[2].SetWidth(3);
                        addr.Columns[3].SetWidth(2);
                        addr.Columns[4].SetWidth(10);
                        addr.Columns[5].SetWidth(5);
                        addr.Columns[6].SetWidth(10);
                        // addr.Columns[7].SetWidth(5);
                        addr.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        addr.Cell(1, 1).SetContent(coesign);
                        string monthName = DateTime.Today.ToString("MMM");
                        string date = DateTime.Today.ToString("dd");
                        string year = DateTime.Today.ToString("yy");
                        string FormatDate = Convert.ToString(date + "-" + monthName + "-" + year).Trim();
                        addr.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        addr.Cell(2, 0).SetContent(FormatDate);
                        addr.Cell(2, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                        addr.Cell(2, 4).SetContent(FormatDate);

                        #endregion

                        Gios.Pdf.PdfTablePage mypdfpage2 = pdtable.CreateTablePage(new Gios.Pdf.PdfArea(doc, 360, 148, 500, 650));
                        pdfpage.Add(mypdfpage2);
                        Gios.Pdf.PdfTablePage mypdfpage3 = tblMark.CreateTablePage(new Gios.Pdf.PdfArea(doc, 16.8, 291, 800, 650));
                        pdfpage.Add(mypdfpage3);
                        Gios.Pdf.PdfTablePage mypdfpage4 = tblsemwisegpa.CreateTablePage(new Gios.Pdf.PdfArea(doc, 400, 630, 400, 450));
                        pdfpage.Add(mypdfpage4);
                        Gios.Pdf.PdfTablePage mypdfpage5 = addr.CreateTablePage(new Gios.Pdf.PdfArea(doc, 25, 730, 800, 900));
                        pdfpage.Add(mypdfpage5);
                        Gios.Pdf.PdfTablePage mypdfpage6 = studdetails.CreateTablePage(new Gios.Pdf.PdfArea(doc, 1, 148, 200, 680));
                        pdfpage.Add(mypdfpage6);
                        Gios.Pdf.PdfTablePage mypdfpage7 = countercgpa.CreateTablePage(new Gios.Pdf.PdfArea(doc, -500, 630, 800, 650));
                        pdfpage.Add(mypdfpage7);


                        pdfpage.SaveToDocument();
                        pdfpage = doc.NewPage();
                    }
                }
            }


            string apppath = HttpContext.Current.Server.MapPath("~");
            if (apppath != "")
            {
                string sz1path = apppath + "/Report/";
                string sz1File = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                doc.SaveToFile(sz1path + sz1File);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + sz1File);
                Response.ContentType = "application1/pdf";
                Response.WriteFile(sz1path + sz1File);
            }
        }



        catch (Exception ex)
        {

            da.sendErrorMail(ex, collegeCode, "statementofmarks");
        }
    }


    //mullai 12/3/18
    //NIU Consolidate
    public void consolidatedgradesheet()
    {
        try
        {

            string lblerror1 = string.Empty;

            Boolean printpage1 = false;
            string edu_level = string.Empty;
            string degree = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string batch_year1 = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string roman = string.Empty;
            string semroman = string.Empty;
            string grade = string.Empty;
            string grade1 = string.Empty;
            string gradepoints = string.Empty;
            string gradepoints1 = string.Empty;
            string coe = string.Empty;
            string subjectcode_Part1 = string.Empty;
            string subjectcode_Part2 = string.Empty;
            string subjectcode_Part3 = string.Empty;
            string subjectcode_Part4 = string.Empty;
            string cal_gpa = string.Empty;
            string current_semester = string.Empty;
            string app_no = string.Empty;
            string subtype = string.Empty;
            string coesign = string.Empty;

            Font f1_cos10bold = new Font("Comic Sans MS", 10, FontStyle.Bold);
            Font f2_cos9bold = new Font("Comic Sans MS", 9, FontStyle.Bold);
            Font f3_arial10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font f4_arial7reg = new Font("Arial", 7, FontStyle.Regular);
            Font f5_pal10bold = new Font("Palatino Linotype", 10, FontStyle.Bold);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(42.1, 29.9));
            PdfPage mypdfpage;
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            DataSet gradeds = new DataSet();
            DataSet monyr = new DataSet();


            string str = "select *,coe_signature from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
            ds.Clear();
            ds.Dispose();
            ds = d2.select_method_wo_parameter(str, "text");
            coesign = Convert.ToString(ds.Tables[0].Rows[0]["coe_signature"]).Trim();

            FpSpread2.SaveChanges();
            for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                if (isval == 1)
                {
                    printds.Clear();
                    printds.Dispose();
                    printds_new.Clear();
                    printds_new.Dispose();
                    rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                    regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                    string sql = "SELECT Reg_No,r.batch_year,r.app_no,r.degree_code,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,c.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
                    sql = sql + "  select count(s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail'  and roll_no='" + rollnosub + "'";
                    printds = da.select_method_wo_parameter(sql, "Text");
                    int noofsubapplied = Convert.ToInt32(printds.Tables[3].Rows[0][0].ToString());
                    int noofsubpassed = Convert.ToInt32(printds.Tables[4].Rows[0][0].ToString());
                    int noofsubfailed = Convert.ToInt32(printds.Tables[5].Rows[0][0].ToString());
                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                    {
                        printpage1 = true;
                        string principal = string.Empty;
                        studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        branch = printds.Tables[0].Rows[0]["Dept_name"].ToString();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["degree"]).Trim();
                        regnumber = Convert.ToString(printds.Tables[0].Rows[0]["Reg_No"]).Trim();
                        edu_level = Convert.ToString(printds.Tables[0].Rows[0]["Edu_Level"]).Trim();
                        app_no = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]);
                        string displayfolionumber = string.Empty;
                        bool ishasfolionumber = getFolioNumber(app_no, ref displayfolionumber);
                        mypdfpage = mydoc.NewPage();
                        coe = printds.Tables[1].Rows[0]["coe"].ToString();
                        sem = printds.Tables[0].Rows[0]["current_semester"].ToString();
                        string strMonthName = string.Empty;
                        dob = printds.Tables[0].Rows[0]["dob"].ToString();
                        string stdappno = printds.Tables[0].Rows[0]["App_No"].ToString();
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        if (edu_level.Trim().ToLower() == "ug")
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 3));
                        }
                        else
                        {
                            batch_year1 = batch_year1 + Convert.ToString((Convert.ToInt32(batch_year) + 2));
                        }
                        int bat_yr = Convert.ToInt32(batch_year1);
                        degree_code = printds.Tables[0].Rows[0]["degree_code"].ToString();
                        monyr.Clear();
                        monyr.Dispose();
                        string sql5 = "select top 1 ed.Exam_Month,ed.Exam_year from mark_entry me,Exam_Details ed  where ed.exam_code=me.exam_code and roll_no='" + rollnosub + "' order by ed.Exam_year desc, ed.Exam_Month desc";
                        monyr = d2.select_method_wo_parameter(sql5, "text");
                        string m_name = monyr.Tables[0].Rows[0]["Exam_Month"].ToString();
                        string mon_name = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(m_name));
                        string exm_yr = monyr.Tables[0].Rows[0]["Exam_year"].ToString();
                        int ex_year = Convert.ToInt32(exm_yr);
                        if (ex_year > bat_yr)
                        {
                            exm_yr = Convert.ToString(mon_name) + '-' + Convert.ToString(exm_yr);
                        }




                        sql3 = "Select syllabus_master.semester,Subject_Type,subject_name,subject_code,subject.subject_no,result,max_int_marks,max_ext_marks,internal_mark,external_mark,total,maxtotal,grade,cp,credit_points,mark_entry.subject_no,semester,maxtotal,exam_code from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'  order by syllabus_master.semester,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no";
                        printds_rows.Clear();
                        printds_rows.Dispose();
                        printds_rows = da.select_method_wo_parameter(sql3, "text");
                        sem = printds_rows.Tables[0].Rows[0]["semester"].ToString();


                        //stud_details
                        PdfTable tblstuddetail = mydoc.NewTable(f1_cos10bold, 4, 8, 5);
                        tblstuddetail.VisibleHeaders = false;
                        tblstuddetail.SetBorders(Color.Black, 1, BorderType.None);
                        tblstuddetail.SetColumnsWidth(new int[] { 15, 10, 6, 45, 10, 10, 45, 25 });
                        tblstuddetail.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstuddetail.Cell(2, 1).SetContent(studname);
                        foreach (PdfCell pc in tblstuddetail.CellRange(2, 1, 2, 3).Cells)
                        {
                            pc.ColSpan = 3;
                        }
                        tblstuddetail.Cell(2, 6).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstuddetail.Cell(2, 6).SetContent(regnumber);

                        tblstuddetail.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstuddetail.Cell(3, 1).SetContent(degree);
                        tblstuddetail.Cell(3, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstuddetail.Cell(3, 3).SetContent(branch);
                        tblstuddetail.Cell(3, 6).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstuddetail.Cell(3, 6).SetContent(exm_yr);
                        if (ishasfolionumber)
                        {
                            tblstuddetail.Cell(0, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetail.Cell(0, 7).SetContent(Convert.ToString(displayfolionumber).Trim());

                        }
                        else
                        {
                            tblstuddetail.Cell(0, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetail.Cell(0, 7).SetContent("");

                        }


                        PdfTablePage tblpage1 = tblstuddetail.CreateTablePage(new PdfArea(mydoc, 2, 75, 1200, 800));
                        mypdfpage.Add(tblpage1);

                        //sem_details

                        PdfTable markdetailtbl = mydoc.NewTable(f4_arial7reg, 30, 8, 4);
                        markdetailtbl.VisibleHeaders = false;
                        markdetailtbl.SetBorders(Color.Black, 1, BorderType.None);
                        markdetailtbl.Columns[0].SetWidth(8);
                        markdetailtbl.Columns[1].SetWidth(20);
                        markdetailtbl.Columns[2].SetWidth(75);
                        markdetailtbl.Columns[3].SetWidth(15);
                        markdetailtbl.Columns[4].SetWidth(15);
                        markdetailtbl.Columns[5].SetWidth(15);
                        markdetailtbl.Columns[6].SetWidth(15);
                        markdetailtbl.Columns[7].SetWidth(20);


                        PdfTable markdetailtbl2 = mydoc.NewTable(f4_arial7reg, printds_rows.Tables[0].Rows.Count + 1, 8, 4);
                        markdetailtbl2.VisibleHeaders = false;
                        markdetailtbl2.SetBorders(Color.Black, 1, BorderType.None);
                        markdetailtbl2.Columns[0].SetWidth(8);
                        markdetailtbl2.Columns[1].SetWidth(20);
                        markdetailtbl2.Columns[2].SetWidth(75);
                        markdetailtbl2.Columns[3].SetWidth(15);
                        markdetailtbl2.Columns[4].SetWidth(15);
                        markdetailtbl2.Columns[5].SetWidth(15);
                        markdetailtbl2.Columns[6].SetWidth(15);
                        markdetailtbl2.Columns[7].SetWidth(20);


                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {

                            for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                            {
                                double internalmark = 0;
                                double externalmark1 = 0;
                                double totalintext = 0;
                                double extfinal = 0;
                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]), out internalmark);
                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]), out extfinal);
                                extfinal = Math.Round(extfinal, 0);
                                externalmark1 = extfinal;
                                string checkedmark = string.Empty;
                                if (extfinal < 0)
                                {
                                    checkedmark = loadmarkat(Convert.ToString(extfinal));
                                }
                                else
                                {
                                    checkedmark = Convert.ToString(extfinal);
                                }
                                if (internalmark >= 0)
                                {
                                    if (extfinal > 0)
                                    {
                                        totalintext = internalmark + externalmark1;
                                    }
                                    else
                                    {
                                        totalintext = internalmark;
                                    }
                                }
                                else
                                {
                                    if (extfinal > 0)
                                    {
                                        totalintext = externalmark1;
                                    }
                                    else
                                    {
                                        totalintext = 0;
                                    }
                                }
                                double totfinal = 0;
                                totfinal = Math.Round(totalintext, 0);
                                double checkmarkmm = 0;
                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]), out checkmarkmm);
                                string tot_mark = Convert.ToString(checkmarkmm);
                                tot_mark = string.Format("{0:0}", tot_mark);
                                string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";
                                gradeds.Clear();

                                gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                {
                                    gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";
                                    gradeds.Clear();
                                    gradeds = da.select_method_wo_parameter(gradesql, "Text");
                                }
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                {
                                    for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                    {
                                        if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                        {
                                            grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
                                            gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
                                        }
                                    }
                                }
                                double gradeibtpoint = 0;
                                double.TryParse(Convert.ToString(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim()), out gradeibtpoint);
                                gradeibtpoint = gradeibtpoint / 10;
                                gradeibtpoint = Math.Round(gradeibtpoint, 0);
                                gradepoints = Convert.ToString(gradeibtpoint);
                                gradepoints = Convert.ToString(Math.Round(Convert.ToDouble(gradeibtpoint), 0));
                                gradepoints = String.Format("{0:0}", gradepoints);
                                string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).ToLower();
                                if (result == "fail")
                                {
                                    result = "RA";
                                    grade = "U";
                                }
                                else if (result == "pass")
                                {
                                    result = "P";
                                }
                                else
                                {
                                    result = "AB";
                                    grade = "U";
                                }
                                //totfinal = totfinal * Convert.ToDouble(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
                                //totfinal = Math.Round(totfinal, 0);
                                DataView dv = new DataView();
                                printds.Tables[2].DefaultView.RowFilter = "exam_code='" + Convert.ToString(printds_rows.Tables[0].Rows[i]["exam_code"]).Trim() + "'";
                                dv = printds.Tables[2].DefaultView;
                                string strMonthName1 = string.Empty;
                                if (dv.Count > 0)
                                {
                                    string exam_y1 = Convert.ToString(dv[0]["Exam_year"]).Trim();
                                    string exam_m1 = Convert.ToString(dv[0]["Exam_Month"]).Trim();
                                    strMonthName1 = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m1));
                                    strMonthName1 = Convert.ToString(strMonthName1[0]).Trim() + Convert.ToString(strMonthName1[1]).Trim() + Convert.ToString(strMonthName1[2]).Trim();
                                    strMonthName1 = strMonthName1.ToUpper() + " " + exam_y1 + " ";
                                }
                                if (i < 30)
                                {
                                    markdetailtbl.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    markdetailtbl.Cell(i, 0).SetContent(printds_rows.Tables[0].Rows[i]["semester"].ToString());
                                    markdetailtbl.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    markdetailtbl.Cell(i, 1).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]));
                                    markdetailtbl.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    markdetailtbl.Cell(i, 2).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).ToUpper());
                                    markdetailtbl.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    markdetailtbl.Cell(i, 3).SetContent(tot_mark);
                                    markdetailtbl.Cell(i, 4).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]));
                                    markdetailtbl.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    markdetailtbl.Cell(i, 5).SetContent(grade);
                                    markdetailtbl.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    markdetailtbl.Cell(i, 6).SetContent(gradepoints);
                                    markdetailtbl.Cell(i, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    markdetailtbl.Cell(i, 7).SetContent(strMonthName1);
                                }
                                else
                                {
                                    markdetailtbl2.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    markdetailtbl2.Cell(i, 0).SetContent(printds_rows.Tables[0].Rows[i]["semester"].ToString());
                                    markdetailtbl2.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    markdetailtbl2.Cell(i, 1).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]));
                                    markdetailtbl2.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    markdetailtbl2.Cell(i, 2).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).ToUpper());
                                    markdetailtbl2.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    markdetailtbl2.Cell(i, 3).SetContent(totfinal);
                                    markdetailtbl2.Cell(i, 4).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]));
                                    markdetailtbl2.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    markdetailtbl2.Cell(i, 5).SetContent(grade);
                                    markdetailtbl2.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    markdetailtbl2.Cell(i, 6).SetContent(gradepoints);
                                    markdetailtbl2.Cell(i, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    markdetailtbl2.Cell(i, 7).SetContent(strMonthName1);

                                }
                            }
                        }
                        markdetailtbl2.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        markdetailtbl2.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContent("*** End of the Statement ***");
                        foreach (PdfCell pr in markdetailtbl2.CellRange(printds_rows.Tables[0].Rows.Count, 0, printds_rows.Tables[0].Rows.Count, 0).Cells)
                        {
                            pr.ColSpan = 4;
                        }

                        tblpage1 = markdetailtbl.CreateTablePage(new PdfArea(mydoc, 30, 200, 570, 700));
                        mypdfpage.Add(tblpage1);
                        tblpage1 = markdetailtbl2.CreateTablePage(new PdfArea(mydoc, 630, -40, 570, 700));
                        mypdfpage.Add(tblpage1);

                        //cgpaclass
                        PdfTable tblcgpaclass = mydoc.NewTable(f2_cos9bold, 1, 2, 3);
                        tblcgpaclass.VisibleHeaders = false;
                        tblcgpaclass.SetBorders(Color.Black, 1, BorderType.None);
                        tblcgpaclass.Columns[0].SetWidth(75);
                        tblcgpaclass.Columns[1].SetWidth(130);
                        double partsums = 0.00;
                        double Credit_Points = 0.0;
                        double grade_points = 0.0;
                        double creditstotal = 0;
                        double overalltotgrade = 0;
                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            string sumpart = string.Empty;
                            DataView dv_demand_data = new DataView();
                            DataView dv_demand_datadummy = new DataView();
                            printds_rows.Tables[0].DefaultView.RowFilter = "result='pass'";
                            dv_demand_data = printds_rows.Tables[0].DefaultView;
                            if (dv_demand_data.Count > 0)
                            {
                                for (int sum = 0; sum < dv_demand_data.Count; sum++)
                                {
                                    double.TryParse(Convert.ToString(dv_demand_data[sum]["total"]), out grade_points);
                                    double.TryParse(Convert.ToString(dv_demand_data[sum]["credit_points"]), out Credit_Points);
                                    grade_points = grade_points / 10;
                                    creditstotal = creditstotal + Credit_Points;
                                    partsums = partsums + (grade_points * Credit_Points);
                                }
                                if (creditstotal == 0)
                                {
                                    sumpart = "0";
                                }
                                else if (creditstotal > 0)
                                {
                                    partsums = (partsums / creditstotal);
                                    partsums = Math.Round(partsums, 2, MidpointRounding.AwayFromZero);
                                    sumpart = Convert.ToString(partsums);
                                }
                                else
                                {
                                    sumpart = "0";
                                }
                            }
                            else
                            {
                                sumpart = "--";
                            }
                            if (sumpart != "--")
                            {
                                double sumpartgrade = 0;
                                if (double.TryParse(sumpart, out sumpartgrade))
                                {
                                    overalltotgrade = overalltotgrade + sumpartgrade;
                                    overalltotgrade = Math.Round(overalltotgrade, 1);
                                }
                                else
                                {
                                    sumpartgrade = 0;
                                }
                                string batchsetting = "1";
                                if (noofsubfailed != 0 && overalltotgrade >= 8.5)
                                {
                                    string cclass = "FIRST CLASS WITH DISTINCTION";
                                    tblcgpaclass.Cell(0, 0).SetContent(sumpart);
                                    tblcgpaclass.Cell(0, 1).SetContent(cclass);
                                }
                                else
                                {

                                    string gradesqlclass = " select * from coe_classification where '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  markgradeflag='" + batchsetting + "'";
                                    gradeds.Clear();
                                    gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                    if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                    {
                                        tblcgpaclass.Cell(0, 0).SetContent(sumpart);
                                        tblcgpaclass.Cell(0, 1).SetContent(Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]).Trim());
                                    }
                                }
                            }
                            else
                            {
                                tblcgpaclass.Cell(0, 0).SetContent(sumpart);
                            }
                        }
                        else
                        {
                            tblcgpaclass.Cell(0, 0).SetContent("--");
                        }
                        tblpage1 = tblcgpaclass.CreateTablePage(new PdfArea(mydoc, 500, 730, 250, 50));
                        mypdfpage.Add(tblpage1);

                        //date
                        PdfTable tbldate = mydoc.NewTable(f2_cos9bold, 1, 2, 1);
                        tbldate.VisibleHeaders = false;
                        tbldate.Columns[0].SetWidth(20);
                        string date = DateTime.Today.ToString("dd");
                        string mon = DateTime.Today.ToString("MMM");
                        string year = DateTime.Today.ToString("yy");
                        string formatdate = Convert.ToString(date + "-" + mon + "-" + year).Trim();
                        tbldate.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tbldate.Cell(0, 1).SetContent(formatdate);

                        tblpage1 = tbldate.CreateTablePage(new PdfArea(mydoc, 38, 730, 100, 50));
                        mypdfpage.Add(tblpage1);

                        //coesign

                        PdfTable tblcoe = mydoc.NewTable(f2_cos9bold, 2, 1, 1);
                        tblcoe.VisibleHeaders = false;
                        tblcoe.Columns[0].SetWidth(25);
                        tblcoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        tblcoe.Cell(0, 0).SetContent(coesign);

                        tblpage1 = tblcoe.CreateTablePage(new PdfArea(mydoc, 1000, 750, 50, 50));
                        mypdfpage.Add(tblpage1);


                        mypdfpage.SaveToDocument();
                    }
                }
            }

            if (printpage1 == true)
            {

                string appPath = HttpContext.Current.Server.MapPath("~");
                if (appPath != "")
                {
                    string szPath = appPath + "/Report/";
                    string szFile = "consolidate" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                    mydoc.SaveToFile(szPath + szFile);
                    Response.ClearHeaders();
                    Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                    Response.ContentType = "application/pdf";
                    Response.WriteFile(szPath + szFile);
                }
            }
        }
        catch (Exception ex)
        {
            lblerror.Visible = true;
            lblerror.Text = Convert.ToString(ex).Trim();
        }

    }

    #endregion noorul

    #region SNS
    //mullai 2-04-2018
    public void ConsolidatedStatementOfGradeSheet()
    {
        try
        {
            string lblerror1 = string.Empty;
            Boolean printpage1 = false;
            string edu_level = string.Empty;
            string degree = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string roman = string.Empty;
            string semroman = string.Empty;
            string grade = string.Empty;
            string grade1 = string.Empty;
            string gradepoints = string.Empty;
            string gradepoints1 = string.Empty;
            string coe = string.Empty;
            string subjectcode_Part1 = string.Empty;
            string subjectcode_Part2 = string.Empty;
            string subjectcode_Part3 = string.Empty;
            string subjectcode_Part4 = string.Empty;
            string cal_gpa = string.Empty;
            string current_semester = string.Empty;
            string app_no = string.Empty;
            string subtype = string.Empty;
            string coesign = string.Empty;
            string gender = string.Empty;
            int month = 0;
            string regulation = string.Empty;
            string strMonthName = string.Empty;

            Font f1_cos10bold = new Font("Comic Sans MS", 10, FontStyle.Bold);
            Font f2_cos9bold = new Font("Comic Sans MS", 9, FontStyle.Bold);
            Font f3_arial10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font f4_arial7reg = new Font("Arial", 7, FontStyle.Regular);
            Font f5_pal10bold = new Font("Palatino Linotype", 10, FontStyle.Bold);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(42.1, 29.9));
            PdfPage mypdfpage;
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            DataSet gradeds = new DataSet();


            string sign = "select coe_signature from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
            ds.Clear();
            ds.Dispose();
            ds = da.select_method_wo_parameter(sign, "text");
            coesign = Convert.ToString(ds.Tables[0].Rows[0]["coe_signature"]).Trim();


            FpSpread2.SaveChanges();
            for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                if (isval == 1)
                {
                    printds.Clear();
                    printds.Dispose();
                    printds_new.Clear();
                    printds_new.Dispose();
                    rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                    regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                    string sql = "SELECT Reg_No,sex,r.batch_year,r.app_no,r.degree_code,r.regulation,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,c.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
                    sql = sql + "  select count(s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail'  and roll_no='" + rollnosub + "'";
                    printds = da.select_method_wo_parameter(sql, "text");

                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                    {
                        printpage1 = true;
                        studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        regnumber = Convert.ToString(printds.Tables[0].Rows[0]["Reg_No"]).Trim();
                        batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree = Convert.ToString(printds.Tables[0].Rows[0]["Degree"]).Trim();
                        degree_code = Convert.ToString(printds.Tables[0].Rows[0]["Degree_Code"]).Trim();
                        app_no = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();
                        branch = Convert.ToString(printds.Tables[0].Rows[0]["Dept_name"]).Trim();
                        string degreedept = Convert.ToString(degree).Trim() + "-" + Convert.ToString(branch).Trim();
                        //edu_level = Convert.ToString(printds.Tables[0].Rows[0][" edu_level"]).Trim();
                        string displayfolionumber = string.Empty;
                        bool ishasfolionumber = getFolioNumber(app_no, ref displayfolionumber);
                        sem = Convert.ToString(printds.Tables[0].Rows[0]["current_semester"]).Trim();
                        // coe = Convert.ToString(printds.Tables[0].Rows[0]["coe"]).Trim();
                        dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]).Trim();

                        string stdappno = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();

                        int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                        monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                        strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                        monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                        monthandyear = monthandyear.ToUpper();

                        // monthandyear = Convert.ToString(monthname).Substring(0, 3) + "-" + Convert.ToString(ddlYear.SelectedItem.Text).Trim().ToUpper();
                        regulation = Convert.ToString(printds.Tables[0].Rows[0]["regulation"]).Trim();
                        mypdfpage = mydoc.NewPage();
                        sql3 = "select sm.semester,Subject_Type,subject_name,subject_code,s.subject_no,result,max_int_marks,max_ext_marks,internal_mark,external_mark,total,maxtotal,grade,cp,credit_points,me.subject_no,semester,maxtotal,exam_code from Mark_Entry me,Subject s,sub_sem sem,syllabus_master sm  where sm.syll_code=s.syll_code and me.Subject_No = s.Subject_No and s.subtype_no= sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'  order by sm.semester,subject_type,sem.lab,s.subjectpriority,s.subject_no";

                        printds_rows.Clear();
                        printds_rows.Dispose();
                        printds_rows = da.select_method_wo_parameter(sql3, "text");
                        sem = Convert.ToString(printds_rows.Tables[0].Rows[0]["semester"]).Trim();


                        //student details
                        PdfTable tblstuddetails = mydoc.NewTable(f1_cos10bold, 4, 9, 4);
                        tblstuddetails.VisibleHeaders = false;
                        tblstuddetails.SetBorders(Color.Black, 1, BorderType.None);
                        tblstuddetails.Columns[0].SetWidth(30);
                        tblstuddetails.Columns[1].SetWidth(20);
                        tblstuddetails.Columns[2].SetWidth(30);
                        tblstuddetails.Columns[3].SetWidth(20);
                        tblstuddetails.Columns[4].SetWidth(40);
                        tblstuddetails.Columns[5].SetWidth(20);
                        tblstuddetails.Columns[6].SetWidth(20);
                        tblstuddetails.Columns[7].SetWidth(10);
                        tblstuddetails.Columns[8].SetWidth(40);

                        tblstuddetails.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstuddetails.Cell(0, 2).SetContent(app_no);
                        tblstuddetails.Cell(0, 8).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstuddetails.Cell(0, 8).SetContent(displayfolionumber);

                        tblstuddetails.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstuddetails.Cell(1, 1).SetContent(studname);
                        foreach (PdfCell pc in tblstuddetails.CellRange(1, 1, 1, 4).Cells)
                        {
                            pc.ColSpan = 3;
                        }
                        tblstuddetails.Cell(1, 6).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstuddetails.Cell(1, 6).SetContent(regnumber);
                        foreach (PdfCell pc1 in tblstuddetails.CellRange(1, 6, 1, 8).Cells)
                        {
                            pc1.ColSpan = 1;
                        }

                        tblstuddetails.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstuddetails.Cell(2, 1).SetContent(dob);
                        foreach (PdfCell pc2 in tblstuddetails.CellRange(2, 1, 2, 2).Cells)
                        {
                            pc2.ColSpan = 1;
                        }
                        if (Convert.ToString(printds.Tables[0].Rows[0]["sex"]) == "0")
                        {
                            gender = "MALE";
                        }
                        else if (Convert.ToString(printds.Tables[0].Rows[0]["sex"]) == "1")
                        {
                            gender = "Female";
                        }
                        else if (Convert.ToString(printds.Tables[0].Rows[0]["sex"]) == "2")
                        {
                            gender = "TransGender";
                        }
                        else
                        {
                            gender = "";
                        }
                        tblstuddetails.Cell(2, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstuddetails.Cell(2, 4).SetContent(gender);
                        tblstuddetails.Cell(2, 6).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstuddetails.Cell(2, 6).SetContent(monthandyear);
                        //foreach (PdfCell pc3 in tblstuddetails.CellRange(2, 6, 2, 8).Cells)
                        //{
                        //    pc3.ColSpan = 1;
                        //}

                        tblstuddetails.Cell(3, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstuddetails.Cell(3, 1).SetContent(degreedept);
                        foreach (PdfCell pc4 in tblstuddetails.CellRange(3, 1, 3, 4).Cells)
                        {
                            pc4.ColSpan = 3;
                        }
                        tblstuddetails.Cell(3, 6).SetContentAlignment(ContentAlignment.MiddleLeft);
                        tblstuddetails.Cell(3, 6).SetContent(regulation);
                        //foreach (PdfCell pc5 in tblstuddetails.CellRange(3, 6, 3, 8).Cells)
                        //{
                        //    pc5.ColSpan = 1;
                        //}

                        PdfTablePage tblpage = tblstuddetails.CreateTablePage(new PdfArea(mydoc, 2, 100, 1200, 800));
                        mypdfpage.Add(tblpage);


                        //sem details
                        PdfTable semdetails = mydoc.NewTable(f4_arial7reg, 31, 7, 2);
                        semdetails.VisibleHeaders = false;
                        semdetails.SetBorders(Color.Black, 1, BorderType.None);
                        semdetails.Columns[0].SetWidth(10);
                        semdetails.Columns[1].SetWidth(25);
                        semdetails.Columns[2].SetWidth(40);
                        semdetails.Columns[3].SetWidth(10);
                        semdetails.Columns[4].SetWidth(10);
                        semdetails.Columns[5].SetWidth(10);
                        semdetails.Columns[6].SetWidth(15);


                        PdfTable semdetails2 = mydoc.NewTable(f4_arial7reg, printds_rows.Tables[0].Rows.Count + 1, 7, 2);
                        semdetails2.VisibleHeaders = false;
                        semdetails2.SetBorders(Color.Black, 1, BorderType.None);
                        semdetails2.Columns[0].SetWidth(10);
                        semdetails2.Columns[1].SetWidth(25);
                        semdetails2.Columns[2].SetWidth(40);
                        semdetails2.Columns[3].SetWidth(10);
                        semdetails2.Columns[4].SetWidth(10);
                        semdetails2.Columns[5].SetWidth(10);
                        semdetails2.Columns[6].SetWidth(15);

                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {
                            for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                            {
                                double internalmark;
                                double externalmark;
                                double totalintext = 0;
                                double extfinal = 0;
                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]), out internalmark);
                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]), out extfinal);
                                extfinal = Math.Round(extfinal, 0);
                                externalmark = extfinal;
                                string checkedmark = string.Empty;
                                if (extfinal < 0)
                                {
                                    checkedmark = loadmarkat(Convert.ToString(extfinal));
                                }
                                else
                                {
                                    checkedmark = Convert.ToString(extfinal);
                                }
                                if (internalmark >= 0)
                                {
                                    if (extfinal > 0)
                                    {
                                        totalintext = internalmark + externalmark;
                                    }
                                    else
                                    {
                                        totalintext = internalmark;
                                    }

                                }
                                else
                                {
                                    if (extfinal > 0)
                                    {
                                        totalintext = externalmark;
                                    }
                                    else
                                    {
                                        totalintext = 0;
                                    }
                                }
                                double totfinal;
                                totfinal = Math.Round(totalintext, 0);
                                double checkmark1;
                                double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]), out checkmark1);
                                string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";
                                gradeds.Clear();
                                gradeds = da.select_method_wo_parameter(gradesql, "text");

                                if (gradeds.Tables.Count >= 0 && gradeds.Tables[0].Rows.Count == 0)
                                {
                                    gradesql = "select* from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "'";
                                    gradeds.Clear();
                                    gradeds = da.select_method_wo_parameter(gradesql, "text");
                                }
                                if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                {
                                    for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                    {
                                        if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmark1 && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) <= checkmark1)
                                        {
                                            grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
                                            gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
                                        }
                                    }
                                }
                                double gradeibtpoint = 0;
                                double.TryParse(Convert.ToString(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim()), out gradeibtpoint);
                                gradeibtpoint = gradeibtpoint / 10;
                                gradeibtpoint = Math.Round(gradeibtpoint, 1);
                                gradepoints = Convert.ToString(gradeibtpoint);
                                gradepoints = Convert.ToString(Math.Round(Convert.ToDouble(gradeibtpoint), 2));
                                gradepoints = String.Format("{0:0.00}", gradepoints);
                                string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).ToLower();
                                if (result == "fail")
                                {
                                    result = "RA";
                                    grade = "U";
                                }
                                else if (result == "pass")
                                {
                                    result = "P";
                                }
                                else
                                {
                                    result = "AB";
                                    grade = "U";
                                }
                                DataView dv = new DataView();
                                printds.Tables[2].DefaultView.RowFilter = "exam_code='" + Convert.ToString(printds_rows.Tables[0].Rows[i]["exam_code"]).Trim() + "'";
                                dv = printds.Tables[2].DefaultView;
                                string strMonthName1 = string.Empty;
                                if (dv.Count > 0)
                                {
                                    string exam_y1 = Convert.ToString(dv[0]["Exam_year"]).Trim();
                                    string exam_m1 = Convert.ToString(dv[0]["Exam_Month"]).Trim();
                                    strMonthName1 = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m1));
                                    strMonthName1 = Convert.ToString(strMonthName1[0]).Trim() + Convert.ToString(strMonthName1[1]).Trim() + Convert.ToString(strMonthName1[2]).Trim();
                                    strMonthName1 = strMonthName1.ToUpper() + " " + exam_y1 + " ";
                                }


                                if (i < 30)
                                {
                                    semdetails.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    semdetails.Cell(i, 0).SetContent(printds_rows.Tables[0].Rows[i]["semester"].ToString());
                                    semdetails.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    semdetails.Cell(i, 1).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim());
                                    semdetails.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    semdetails.Cell(i, 2).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim());
                                    semdetails.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    semdetails.Cell(i, 3).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
                                    semdetails.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    semdetails.Cell(i, 4).SetContent(grade);
                                    semdetails.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    semdetails.Cell(i, 5).SetContent(gradepoints);
                                    semdetails.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    semdetails.Cell(i, 6).SetContent(strMonthName1);
                                }
                                else
                                {

                                    semdetails2.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    semdetails2.Cell(i, 0).SetContent(printds_rows.Tables[0].Rows[i]["semester"].ToString());
                                    semdetails2.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    semdetails2.Cell(i, 1).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]).Trim());
                                    semdetails2.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    semdetails2.Cell(i, 2).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim());
                                    semdetails2.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    semdetails2.Cell(i, 3).SetContent(Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]).Trim());
                                    semdetails2.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    semdetails2.Cell(i, 4).SetContent(grade);
                                    semdetails2.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    semdetails2.Cell(i, 5).SetContent(gradepoints);
                                    semdetails2.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    semdetails2.Cell(i, 6).SetContent(strMonthName1);
                                }
                            }
                        }

                        semdetails2.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        semdetails2.Cell(printds_rows.Tables[0].Rows.Count, 0).SetContent("****End Of The Statement****");
                        foreach (PdfCell pc in semdetails2.CellRange(printds_rows.Tables[0].Rows.Count, 0, printds_rows.Tables[0].Rows.Count, 0).Cells)
                        {
                            pc.ColSpan = 4;
                        }
                        tblpage = semdetails.CreateTablePage(new PdfArea(mydoc, 30, 200, 570, 700));
                        mypdfpage.Add(tblpage);
                        tblpage = semdetails2.CreateTablePage(new PdfArea(mydoc, 600, 80, 570, 700));
                        mypdfpage.Add(tblpage);


                        //date coe_sign
                        PdfTable datecoe = mydoc.NewTable(f2_cos9bold, 4, 5, 3);
                        datecoe.VisibleHeaders = false;
                        datecoe.Columns[0].SetWidth(20);
                        datecoe.Columns[1].SetWidth(45);
                        datecoe.Columns[2].SetWidth(30);
                        datecoe.Columns[3].SetWidth(60);
                        datecoe.Columns[4].SetWidth(30);
                        string date = DateTime.Today.ToString("dd");
                        string mon = DateTime.Today.ToString("MMM");
                        string year = DateTime.Today.ToString("yyyy");
                        string datetoday = date + "/" + mon + "/" + year;
                        datecoe.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        datecoe.Cell(2, 1).SetContent(datetoday);
                        datecoe.Cell(2, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                        datecoe.Cell(2, 4).SetContent(coesign);
                        tblpage = datecoe.CreateTablePage(new PdfArea(mydoc, 30, 600, 885, 900));
                        mypdfpage.Add(tblpage);


                        mypdfpage.SaveToDocument();
                    }
                }
            }

            if (printpage1 == true)
            {
                string appath = HttpContext.Current.Server.MapPath("~");
                if (appath != "")
                {
                    string szpath = appath + "/Report/";
                    string szfile = "Consolidate" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmSS") + ".pdf";
                    mydoc.SaveToFile(szpath + szfile);
                    Response.ClearHeaders();
                    Response.AddHeader("content-Disposition", "attachment; filename=" + szfile);
                    Response.ContentType = "application/pdf";
                    Response.WriteFile(szpath + szfile);

                }
            }
        }

        catch (Exception ex)
        {
            lblerror.Visible = true;
            lblerror.Text = Convert.ToString(ex).Trim();
        }

    }
    #endregion

    #region sns Arts Consolidate
    public void ConsolidatedStatementOfchoicebased()
    {
        try
        {
            Font f1_cos10bold = new Font("Comic Sans MS", 8, FontStyle.Bold);
            Font f1_cos10reg = new Font("Comic Sans MS", 9, FontStyle.Regular);
            Font header = new Font("Comic Sans MS", 7, FontStyle.Regular);
            Font f1_cos5reg = new Font("Comic Sans MS", 8, FontStyle.Regular);
            Font f1_cos10end = new Font("Comic Sans MS", 10, FontStyle.Bold);
            Font f2_cos9bold = new Font("Comic Sans MS", 9, FontStyle.Bold);
            Font f3_arial10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font f4_arial7reg = new Font("Arial", 7, FontStyle.Regular);
            Font f5_pal10bold = new Font("Palatino Linotype", 10, FontStyle.Bold);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(21.3, 34.4));//25.5, 35.6
            PdfPage mypdfpage;
            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            DataSet gradeds = new DataSet();
            Boolean printpage1 = false;
            string batchYear = Convert.ToString(ddlbatch.SelectedValue);
            string degCode = Convert.ToString(ddlbranch.SelectedValue);
            string collCode = Convert.ToString(ddlCollege.SelectedValue);
            FpSpread2.SaveChanges();
            int month;
            string edulevel = string.Empty;
            for (int stmark = 1; stmark <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; stmark++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[stmark, 4].Value);
                if (isval == 1)
                {
                    printds.Clear();
                    printds.Dispose();
                    printds_new.Clear();
                    printds_new.Dispose();
                    string rollnosub = FpSpread2.Sheets[0].Cells[stmark, 1].Text;
                    string gradesql = "select* from Grade_Master where College_Code='" + collCode + "' and Degree_Code='" + degCode + "' and batch_year='" + batchYear + "'";
                    DataTable dtGradPoint = dirAcc.selectDataTable(gradesql);
                    //string regnumber = FpSpread2.Sheets[0].Cells[stmark, 2].Text;
                    string sql = "SELECT Reg_No,sex,r.batch_year,r.app_no,r.degree_code,r.regulation,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,c.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
                    sql = sql + "  select count(s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail'  and roll_no='" + rollnosub + "'";
                    printds = da.select_method_wo_parameter(sql, "text");

                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                    {
                        printpage1 = true;
                        string studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                        //string appNo = Convert.ToString(printds.Tables[0].Rows[0]["app_no"]).Trim();
                        string regnumber = Convert.ToString(printds.Tables[0].Rows[0]["Reg_No"]).Trim();
                        if (printds.Tables[3].Rows.Count == printds.Tables[4].Rows.Count)
                        {
                            string batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                            string degree = Convert.ToString(printds.Tables[0].Rows[0]["Degree"]).Trim();
                            string degree_code = Convert.ToString(printds.Tables[0].Rows[0]["Degree_Code"]).Trim();
                            string app_no = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();
                            string branch = Convert.ToString(printds.Tables[0].Rows[0]["Dept_name"]).Trim();
                            string degreedept = Convert.ToString(degree).Trim() + "-" + Convert.ToString(branch).Trim();
                            string edu_level = Convert.ToString(printds.Tables[0].Rows[0]["edu_level"]).Trim();
                            edulevel = edu_level;
                            string displayfolionumber = string.Empty;
                            bool ishasfolionumber = getFolioNumber(app_no, ref displayfolionumber);
                            string sem = Convert.ToString(printds.Tables[0].Rows[0]["current_semester"]).Trim();
                            // coe = Convert.ToString(printds.Tables[0].Rows[0]["coe"]).Trim();
                            string dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]).Trim();

                            string stdappno = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();

                            int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                            string monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                            month = 1;
                            string strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                            string monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                            monthandyear = monthandyear.ToUpper();

                            // monthandyear = Convert.ToString(monthname).Substring(0, 3) + "-" + Convert.ToString(ddlYear.SelectedItem.Text).Trim().ToUpper();
                            string regulation = Convert.ToString(printds.Tables[0].Rows[0]["regulation"]).Trim();

                            mypdfpage = mydoc.NewPage();
                            //string sql3 = "select sm.semester,Subject_Type,subject_name,subject_code,s.subject_no,result,max_int_marks,max_ext_marks,internal_mark,external_mark,total,maxtotal,grade,cp,credit_points,me.subject_no,semester,maxtotal,exam_code,s.Part_Type from Mark_Entry me,Subject s,sub_sem sem,syllabus_master sm  where sm.syll_code=s.syll_code and me.Subject_No = s.Subject_No and s.subtype_no= sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'  order by sm.semester,subject_type,sem.lab,s.subjectpriority,s.subject_no";

                            #region(stud photo)

                            string stdphtsql = string.Empty;
                            stdphtsql = "select * from StdPhoto where app_no='" + stdappno + "'";
                            MemoryStream memoryStream = new MemoryStream();
                            DataSet dsstdpho = new DataSet();
                            dsstdpho.Clear();
                            dsstdpho.Dispose();
                            dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                            if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                            {
                                byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                                memoryStream.Write(file, 0, file.Length);
                                if (file.Length > 0)
                                {
                                    System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                    System.Drawing.Image thumb = imgx.GetThumbnailImage(190, 190, null, IntPtr.Zero);
                                    if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                                    {
                                    }
                                    else
                                    {
                                        thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                    }
                                }
                            }
                            if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg")))
                            {
                                PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + stdappno + ".jpeg"));
                                mypdfpage.Add(LogoImage2, 500, 10, 190);
                            }
                            else
                            {
                                PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                mypdfpage.Add(LogoImage2, 500, 10, 190);
                            }
                            #endregion

                            string sql3 = "select sm.semester,Subject_Type,subject_name,subject_code,s.subject_no,result,max_int_marks,max_ext_marks,internal_mark,external_mark,total,grade,cp,credit_points,maxtotal,me.exam_code,s.Part_Type,ed.Exam_Month,ed.Exam_year from Mark_Entry me,Subject s,sub_sem sem,syllabus_master sm,Exam_Details ed  where me.exam_code=ed.exam_code and sm.syll_code=s.syll_code and me.Subject_No = s.Subject_No and s.subtype_no= sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "' order by sm.semester,subject_type,sem.lab,s.subjectpriority,s.subject_no,Part_Type";
                            printds_rows.Clear();
                            printds_rows.Dispose();
                            printds_rows = da.select_method_wo_parameter(sql3, "text");
                            //sem = Convert.ToString(printds_rows.Tables[0].Rows[0]["semester"]).Trim();
                            int rowCount = printds_rows.Tables[0].Rows.Count;
                            PdfTable tblstuddetails = mydoc.NewTable(f1_cos10bold, rowCount + 8, 14, 1);
                            tblstuddetails.VisibleHeaders = false;
                            tblstuddetails.SetBorders(Color.Black, 1, BorderType.CompleteGrid);

                            #region student Personal
                            tblstuddetails.Columns[0].SetWidth(7);
                            tblstuddetails.Columns[1].SetWidth(7);
                            tblstuddetails.Columns[2].SetWidth(10);
                            tblstuddetails.Columns[3].SetWidth(60);
                            tblstuddetails.Columns[4].SetWidth(8);
                            tblstuddetails.Columns[5].SetWidth(7);
                            tblstuddetails.Columns[6].SetWidth(7);
                            tblstuddetails.Columns[7].SetWidth(9);
                            tblstuddetails.Columns[8].SetWidth(7);
                            tblstuddetails.Columns[9].SetWidth(7);
                            tblstuddetails.Columns[10].SetWidth(9);
                            tblstuddetails.Columns[11].SetWidth(8);
                            tblstuddetails.Columns[12].SetWidth(8);
                            tblstuddetails.Columns[13].SetWidth(15);

                            tblstuddetails.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(0, 0).SetContent("Name of the Examinee & Date of Birth");
                            tblstuddetails.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblstuddetails.Cell(1, 0).SetContent(studname);
                            //tblstuddetails.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            //tblstuddetails.Cell(1, 0).SetContent(studname);
                            tblstuddetails.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblstuddetails.Cell(2, 0).SetContent("DATE OF BIRTH : " + dob);
                            tblstuddetails.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(3, 0).SetContent("Degree & Branch of Study");
                            tblstuddetails.Cell(4, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblstuddetails.Cell(4, 0).SetContent(degree + " - " + branch);
                            tblstuddetails.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(0, 4).SetContent("Register Number");
                            tblstuddetails.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(1, 4).SetContent(regnumber);
                            tblstuddetails.Cell(3, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(3, 4).SetContent("Academic Year of Admission");
                            tblstuddetails.Cell(4, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                            int acdYear = Convert.ToInt32(batch_year) + 1;
                            tblstuddetails.Cell(4, 4).SetContent(batch_year + "-" + acdYear);
                            tblstuddetails.Cell(0, 10).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(0, 10).SetContent("Month & year of Last Appearance");
                            tblstuddetails.Cell(1, 10).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(1, 10).SetContent("2018-May");//change

                            tblstuddetails.Cell(5, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(5, 0).SetContent("PART");
                            tblstuddetails.Cell(5, 0).SetFont(header);
                            tblstuddetails.Cell(5, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(5, 1).SetContent("SEM");
                            tblstuddetails.Cell(5, 1).SetFont(header);
                            tblstuddetails.Cell(5, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(5, 2).SetContent("COURSE CODE");
                            tblstuddetails.Cell(5, 2).SetFont(header);
                            tblstuddetails.Cell(5, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(5, 3).SetContent("COURSE TITLE");
                            tblstuddetails.Cell(5, 3).SetFont(header);
                            tblstuddetails.Cell(5, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(5, 4).SetContent("CREDIT");
                            tblstuddetails.Cell(5, 4).SetFont(header);
                            tblstuddetails.Cell(5, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(5, 5).SetContent("MAXIMUM MARKS");
                            tblstuddetails.Cell(5, 5).SetFont(header);
                            tblstuddetails.Cell(5, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(5, 8).SetContent("MARKS SCORED");
                            tblstuddetails.Cell(5, 8).SetFont(header);
                            tblstuddetails.Cell(5, 11).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(5, 11).SetContent("GRADE POINT");
                            tblstuddetails.Cell(5, 11).SetFont(header);
                            tblstuddetails.Cell(5, 12).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(5, 12).SetContent("GRADE");
                            tblstuddetails.Cell(5, 12).SetFont(header);
                            tblstuddetails.Cell(5, 13).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(5, 13).SetContent("MONTH & YEAR OF PASS");
                            tblstuddetails.Cell(5, 13).SetFont(header);
                            #endregion

                            tblstuddetails.Cell(6, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(6, 5).SetContent("ESE");
                            tblstuddetails.Cell(6, 5).SetFont(header);
                            tblstuddetails.Cell(6, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(6, 6).SetContent("CIA");
                            tblstuddetails.Cell(6, 6).SetFont(header);
                            tblstuddetails.Cell(6, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(6, 7).SetContent("TOTAL");
                            tblstuddetails.Cell(6, 7).SetFont(header);
                            tblstuddetails.Cell(6, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(6, 8).SetContent("ESE");
                            tblstuddetails.Cell(6, 8).SetFont(header);
                            tblstuddetails.Cell(6, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(6, 9).SetContent("CIA");
                            tblstuddetails.Cell(6, 9).SetFont(header);
                            tblstuddetails.Cell(6, 10).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblstuddetails.Cell(6, 10).SetContent("TOTAL");
                            tblstuddetails.Cell(6, 10).SetFont(header);

                            #region span
                            foreach (PdfCell pc in tblstuddetails.CellRange(0, 0, 0, 0).Cells)
                            {
                                pc.ColSpan = 4;
                            }
                            foreach (PdfCell pc in tblstuddetails.CellRange(1, 0, 1, 0).Cells)
                            {
                                pc.ColSpan = 4;
                            }
                            foreach (PdfCell pc in tblstuddetails.CellRange(2, 0, 2, 0).Cells)
                            {
                                pc.ColSpan = 4;
                            }
                            foreach (PdfCell pc in tblstuddetails.CellRange(3, 0, 3, 0).Cells)
                            {
                                pc.ColSpan = 4;
                            }
                            foreach (PdfCell pc in tblstuddetails.CellRange(4, 0, 4, 0).Cells)
                            {
                                pc.ColSpan = 4;
                            }
                            foreach (PdfCell pc in tblstuddetails.CellRange(0, 4, 0, 4).Cells)
                            {
                                pc.ColSpan = 6;
                            }

                            foreach (PdfCell pc in tblstuddetails.CellRange(1, 4, 1, 4).Cells)
                            {
                                pc.ColSpan = 6;
                            }
                            //
                            foreach (PdfCell pc in tblstuddetails.CellRange(3, 4, 3, 4).Cells)
                            {
                                pc.ColSpan = 10;
                            }
                            foreach (PdfCell pc in tblstuddetails.CellRange(4, 4, 4, 4).Cells)
                            {
                                pc.ColSpan = 10;
                            }
                            //
                            foreach (PdfCell pc in tblstuddetails.CellRange(1, 4, 1, 9).Cells)
                            {
                                pc.RowSpan = 2;
                            }

                            foreach (PdfCell pc in tblstuddetails.CellRange(0, 10, 0, 10).Cells)
                            {
                                pc.ColSpan = 4;
                            }
                            foreach (PdfCell pc in tblstuddetails.CellRange(1, 10, 1, 10).Cells)
                            {
                                pc.ColSpan = 4;
                            }
                            foreach (PdfCell pc in tblstuddetails.CellRange(1, 10, 1, 13).Cells)
                            {
                                pc.RowSpan = 2;
                            }

                            foreach (PdfCell pc in tblstuddetails.CellRange(5, 5, 5, 5).Cells)
                            {
                                pc.ColSpan = 3;
                            }
                            foreach (PdfCell pc in tblstuddetails.CellRange(5, 8, 5, 8).Cells)
                            {
                                pc.ColSpan = 3;
                            }
                            foreach (PdfCell pc in tblstuddetails.CellRange(5, 0, 5, 0).Cells)
                            {
                                pc.RowSpan = 2;
                            }
                            foreach (PdfCell pc in tblstuddetails.CellRange(5, 1, 5, 1).Cells)
                            {
                                pc.RowSpan = 2;
                            }
                            foreach (PdfCell pc in tblstuddetails.CellRange(5, 2, 5, 2).Cells)
                            {
                                pc.RowSpan = 2;
                            }
                            foreach (PdfCell pc in tblstuddetails.CellRange(5, 3, 5, 3).Cells)
                            {
                                pc.RowSpan = 2;
                            }
                            foreach (PdfCell pc in tblstuddetails.CellRange(5, 4, 5, 4).Cells)
                            {
                                pc.RowSpan = 2;
                            }
                            foreach (PdfCell pc in tblstuddetails.CellRange(5, 11, 5, 11).Cells)
                            {
                                pc.RowSpan = 2;
                            }
                            foreach (PdfCell pc in tblstuddetails.CellRange(5, 12, 5, 12).Cells)
                            {
                                pc.RowSpan = 2;
                            }
                            foreach (PdfCell pc in tblstuddetails.CellRange(5, 13, 5, 13).Cells)
                            {
                                pc.RowSpan = 2;
                            }
                            #endregion
                            int i = 6;

                            #region studMark
                            if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                            {
                                foreach (DataRow dtsub in printds_rows.Tables[0].Rows)
                                {
                                    i++;
                                    string PartNo = Convert.ToString(dtsub["Part_Type"]);
                                    string SubSem = Convert.ToString(dtsub["semester"]);
                                    string SubCode = Convert.ToString(dtsub["subject_code"]);
                                    string SubName = Convert.ToString(dtsub["subject_name"]);
                                    string Creditpoint = Convert.ToString(dtsub["credit_points"]);
                                    string maxESE = Convert.ToString(dtsub["max_ext_marks"]);
                                    string maxCIA = Convert.ToString(dtsub["max_int_marks"]);
                                    string maxTot = Convert.ToString(dtsub["maxtotal"]);
                                    string stuESE = Convert.ToString(dtsub["external_mark"]);
                                    string stuCIA = Convert.ToString(dtsub["internal_mark"]);
                                    string stTot = Convert.ToString(dtsub["total"]);
                                    string gradePoint = string.Empty;
                                    string Grade = Convert.ToString(dtsub["grade"]);
                                    string strMonthName1 = string.Empty;
                                    string exam_y1 = Convert.ToString(dtsub["Exam_year"]).Trim();
                                    string exam_m1 = Convert.ToString(dtsub["Exam_Month"]).Trim();
                                    strMonthName1 = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m1));
                                    strMonthName1 = Convert.ToString(strMonthName1[0]).Trim() + Convert.ToString(strMonthName1[1]).Trim() + Convert.ToString(strMonthName1[2]).Trim();
                                    strMonthName1 = strMonthName1.ToUpper() + "_" + exam_y1 + " ";
                                    double checkmark1;
                                    double.TryParse(stTot, out checkmark1);
                                    dtGradPoint.DefaultView.RowFilter = "semester='" + SubSem + "'";
                                    DataTable dvgradeP = dtGradPoint.DefaultView.ToTable();
                                    DataView dvgrade = new DataView();
                                    if (dvgradeP.Rows.Count > 0)
                                    {
                                        dvgradeP.DefaultView.RowFilter = "Frange<='" + checkmark1 + "' and Trange >='" + checkmark1 + "'";
                                        dvgrade = dvgradeP.DefaultView;
                                        if (dvgrade.Count > 0)
                                        {
                                            dvgrade.Sort = "Frange asc";
                                            gradePoint = Convert.ToString(dvgrade[0]["Credit_Points"]);
                                        }
                                        else
                                        {
                                            dtGradPoint.DefaultView.RowFilter = "Frange<='" + checkmark1 + "' and Trange >='" + checkmark1 + "'";
                                            dvgrade = dtGradPoint.DefaultView;
                                            if (dvgrade.Count > 0)
                                            {
                                                dvgrade.Sort = "Frange asc";
                                                gradePoint = Convert.ToString(dvgrade[0]["Credit_Points"]);
                                            }

                                        }

                                    }
                                    else if (dtGradPoint.Rows.Count > 0)
                                    {
                                        dtGradPoint.DefaultView.RowFilter = "Frange<='" + checkmark1 + "' and Trange >='" + checkmark1 + "'";
                                        dvgrade = dtGradPoint.DefaultView;
                                        if (dvgrade.Count > 0)
                                        {
                                            dvgrade.Sort = "Frange asc";
                                            gradePoint = Convert.ToString(dvgrade[0]["Credit_Points"]);
                                        }
                                    }


                                    double gradeibtpoint = 0;
                                    double.TryParse(Convert.ToString(Convert.ToString(stTot).Trim()), out gradeibtpoint);
                                    gradeibtpoint = gradeibtpoint / 10;
                                    gradeibtpoint = Math.Round(gradeibtpoint, 1);
                                    gradePoint = Convert.ToString(gradeibtpoint);
                                    gradePoint = Convert.ToString(Math.Round(Convert.ToDouble(gradeibtpoint), 2));
                                    gradePoint = String.Format("{0:0.00}", gradePoint);

                                    tblstuddetails.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblstuddetails.Cell(i, 0).SetContent(PartNo);
                                    tblstuddetails.Cell(i, 0).SetFont(header);
                                    tblstuddetails.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblstuddetails.Cell(i, 1).SetContent(SubSem);
                                    tblstuddetails.Cell(i, 1).SetFont(header);
                                    tblstuddetails.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblstuddetails.Cell(i, 2).SetContent(SubCode);
                                    tblstuddetails.Cell(i, 2).SetFont(header);
                                    tblstuddetails.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    tblstuddetails.Cell(i, 3).SetContent(SubName);
                                    tblstuddetails.Cell(i, 3).SetFont(header);
                                    tblstuddetails.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblstuddetails.Cell(i, 4).SetContent(Creditpoint);
                                    tblstuddetails.Cell(i, 4).SetFont(header);

                                    tblstuddetails.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblstuddetails.Cell(i, 5).SetContent(maxCIA != "0" ? maxCIA : "-");
                                    tblstuddetails.Cell(i, 5).SetFont(header);

                                    tblstuddetails.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblstuddetails.Cell(i, 6).SetContent(maxESE != "0" ? maxESE : "-");
                                    tblstuddetails.Cell(i, 6).SetFont(header);

                                    tblstuddetails.Cell(i, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblstuddetails.Cell(i, 7).SetContent(maxTot != "0" ? maxTot : "-");
                                    tblstuddetails.Cell(i, 7).SetFont(header);

                                    tblstuddetails.Cell(i, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblstuddetails.Cell(i, 8).SetContent(stuCIA != "0" ? stuCIA : "-");
                                    tblstuddetails.Cell(i, 8).SetFont(header);

                                    tblstuddetails.Cell(i, 9).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblstuddetails.Cell(i, 9).SetContent(stuESE != "0" ? stuESE : "-");
                                    tblstuddetails.Cell(i, 9).SetFont(header);

                                    tblstuddetails.Cell(i, 10).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblstuddetails.Cell(i, 10).SetContent(stTot != "0" ? stTot : "-");
                                    tblstuddetails.Cell(i, 10).SetFont(f1_cos10reg);

                                    tblstuddetails.Cell(i, 11).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblstuddetails.Cell(i, 11).SetContent(gradePoint != "0" ? gradePoint : "-");
                                    tblstuddetails.Cell(i, 11).SetFont(header);

                                    tblstuddetails.Cell(i, 12).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblstuddetails.Cell(i, 12).SetContent(Grade);
                                    tblstuddetails.Cell(i, 12).SetFont(header);

                                    tblstuddetails.Cell(i, 13).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblstuddetails.Cell(i, 13).SetContent(strMonthName1);
                                    tblstuddetails.Cell(i, 13).SetFont(header);
                                }
                                tblstuddetails.Cell(i + 1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblstuddetails.Cell(i + 1, 0).SetContent("*** END OF STATEMENT ***");
                                tblstuddetails.Cell(i + 1, 0).SetFont(f1_cos10end);
                                foreach (PdfCell pc in tblstuddetails.CellRange(i + 1, 0, i + 1, 0).Cells)
                                {
                                    pc.ColSpan = 14;
                                }
                            }
                            PdfTablePage tblpage = tblstuddetails.CreateTablePage(new PdfArea(mydoc, 10, 100, 580, 800));
                            mypdfpage.Add(tblpage);
                            #endregion


                            PdfTextArea ptc;
                            ptc = new PdfTextArea(f1_cos10end, System.Drawing.Color.Black,
                                                                        new PdfArea(mydoc, 30, 720, 580, 50), System.Drawing.ContentAlignment.MiddleCenter, "RESULTS AND CLASSIFICATION");
                            mypdfpage.Add(ptc);


                            DataTable dtPart1 = printds_rows.Tables[0].DefaultView.ToTable(true, "Part_Type");
                            double partsums = 0.000;
                            double partwpmsum = 0.000;
                            int partrowcount = 0;
                            double Credit_Points = 0.0;
                            double grade_points = 0.0;
                            double creditstotal = 0;
                            double overalltotgrade = 0;
                            double Marks = 0;

                            #region classification

                            dtPart1.DefaultView.Sort = "Part_Type ASC";
                            dtPart1 = dtPart1.DefaultView.ToTable();
                            if (dtPart1.Rows.Count > 0)
                            {
                                PdfTable datecoe = mydoc.NewTable(f2_cos9bold, dtPart1.Rows.Count + 1, 6, 3);
                                datecoe.VisibleHeaders = false;
                                datecoe.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
                                datecoe.Columns[0].SetWidth(20);
                                datecoe.Columns[1].SetWidth(60);
                                datecoe.Columns[2].SetWidth(40);
                                datecoe.Columns[3].SetWidth(20);
                                datecoe.Columns[4].SetWidth(20);
                                datecoe.Columns[5].SetWidth(40);
                                datecoe.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                datecoe.Cell(0, 0).SetContent("PART");
                                datecoe.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                datecoe.Cell(0, 1).SetContent("MANDATORY CREDITS");
                                datecoe.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                datecoe.Cell(0, 2).SetContent("EARNED CREDITS");
                                datecoe.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                datecoe.Cell(0, 3).SetContent("CGPA");
                                datecoe.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                datecoe.Cell(0, 4).SetContent("GRADE");
                                datecoe.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                datecoe.Cell(0, 5).SetContent("CLASSIFICATION");
                                int row = 0;

                                foreach (DataRow dtpart in dtPart1.Rows)
                                {
                                    string patva = Convert.ToString(dtpart["Part_Type"]);
                                    partsums = 0;
                                    partrowcount = 0;
                                    creditstotal = 0;
                                    partwpmsum = 0;
                                    overalltotgrade = 0;
                                    row++;
                                    printds_rows.Tables[0].DefaultView.RowFilter = "Part_Type='" + patva + "' and result='pass'";
                                    DataTable dtPartwise = printds_rows.Tables[0].DefaultView.ToTable();
                                    string sumpart = string.Empty;
                                    string wpm = string.Empty;

                                    if (dtPartwise.Rows.Count > 0)
                                    {
                                        for (int sum = 0; sum < dtPartwise.Rows.Count; sum++)
                                        {
                                            double checkmarkmm = 0;
                                            double.TryParse(Convert.ToString(dtPartwise.Rows[sum]["total"]).Trim(), out checkmarkmm);
                                            double maxsubbtotal = 0;
                                            double.TryParse(Convert.ToString(dtPartwise.Rows[sum]["maxtotal"]).Trim(), out maxsubbtotal);
                                            if (maxsubbtotal != 0)
                                                checkmarkmm = checkmarkmm / maxsubbtotal * 100;
                                            checkmarkmm = Math.Round(checkmarkmm, 0, MidpointRounding.AwayFromZero);
                                            string gradesql1 = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + sem + "' and Degree_Code='" + degCode + "' and batch_year='" + batchYear + "' and '" + checkmarkmm + "' between frange and trange";
                                            gradeds.Clear();
                                            gradeds = da.select_method_wo_parameter(gradesql1, "Text");
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count == 0)
                                            {
                                                gradesql1 = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degCode + "' and batch_year='" + batchYear + "'  and '" + checkmarkmm + "' between frange and trange";
                                                gradeds.Clear();
                                                gradeds = da.select_method_wo_parameter(gradesql1, "Text");
                                            }
                                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                            {
                                                for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                                {
                                                    if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                                    {
                                                        grade_points = checkmarkmm;
                                                        grade_points = grade_points / 10;
                                                        double.TryParse(Convert.ToString(dtPartwise.Rows[sum]["credit_points"]), out Credit_Points);
                                                        creditstotal = creditstotal + Credit_Points;
                                                        partwpmsum += (Credit_Points * checkmarkmm);
                                                        partsums = partsums + (grade_points * Credit_Points);
                                                    }
                                                }
                                            }
                                        }
                                        if (creditstotal == 0)
                                        {
                                            sumpart = "0.000";
                                            wpm = "0.00";
                                        }
                                        else if (creditstotal > 0)
                                        {
                                            partsums = (partsums / creditstotal);
                                            partsums = Math.Round(partsums, 3, MidpointRounding.AwayFromZero);
                                            partwpmsum = (partwpmsum / creditstotal);
                                            partwpmsum = Math.Round(partwpmsum, 2, MidpointRounding.AwayFromZero);
                                            sumpart = String.Format("{0:0.000}", partsums);
                                            wpm = string.Format("{0:0.00}", partwpmsum);
                                        }
                                        else
                                        {
                                            sumpart = "0.000";
                                            wpm = "0.00";
                                        }
                                        double sumpartgrade = 0;
                                        if (double.TryParse(sumpart, out sumpartgrade))
                                        {
                                            sumpartgrade = Convert.ToDouble(sumpart);
                                            overalltotgrade = overalltotgrade + sumpartgrade;
                                        }
                                        else
                                        {
                                            sumpartgrade = 0;
                                        }



                                        string gradesqlclass = "select * from coe_classification where '" + overalltotgrade + "'>= frompoint and '" + overalltotgrade + "'<= topoint and  edu_level='" + edulevel + "'";
                                        gradeds.Clear();
                                        gradeds = da.select_method_wo_parameter(gradesqlclass, "Text");
                                        string cclass = string.Empty;
                                        string letterGrade = string.Empty;
                                        if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                        {
                                            cclass = Convert.ToString(gradeds.Tables[0].Rows[0]["classification"]);
                                            letterGrade = Convert.ToString(gradeds.Tables[0].Rows[0]["grade"]);
                                        }

                                        overalltotgrade = Math.Round((overalltotgrade), 2, MidpointRounding.AwayFromZero);
                                        datecoe.Cell(row, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        datecoe.Cell(row, 0).SetContent(patva);
                                        datecoe.Cell(row, 0).SetFont(f1_cos10reg);
                                        datecoe.Cell(row, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        datecoe.Cell(row, 1).SetContent(creditstotal);
                                        datecoe.Cell(row, 1).SetFont(f1_cos10reg);
                                        datecoe.Cell(row, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        datecoe.Cell(row, 2).SetContent(creditstotal);
                                        datecoe.Cell(row, 2).SetFont(f1_cos10reg);
                                        datecoe.Cell(row, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        datecoe.Cell(row, 3).SetContent(overalltotgrade);
                                        datecoe.Cell(row, 3).SetFont(f1_cos10reg);
                                        datecoe.Cell(row, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        datecoe.Cell(row, 4).SetContent(letterGrade);
                                        datecoe.Cell(row, 4).SetFont(f1_cos10reg);
                                        datecoe.Cell(row, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        datecoe.Cell(row, 5).SetContent(cclass);
                                        datecoe.Cell(row, 5).SetFont(f1_cos10reg);
                                    }
                                }

                                tblpage = datecoe.CreateTablePage(new PdfArea(mydoc, 10, 752, 580, 95));
                                PdfTextArea ptc1;
                                ptc1 = new PdfTextArea(f1_cos5reg, System.Drawing.Color.Black,
                                                                            new PdfArea(mydoc, 10, 840, 580, 50), System.Drawing.ContentAlignment.MiddleCenter, "`@`- Stands for Improvement Appearance. Passing Minimum : For U.G Courses 40% and for P.G Courses 50% (in ESE and Total Separately). ESE - End Semester Examination , CIA - Continuous Internal Assessment.");
                                mypdfpage.Add(ptc1);
                            }
                            #endregion

                            mypdfpage.Add(tblpage);
                            mypdfpage.SaveToDocument();
                        }
                        else
                        {
                            lblerror.Text = lblerror.Text + regnumber;
                            lblerror.Visible = true;
                        }
                    }
                }
                if (printpage1 == true)
                {
                    string appath = HttpContext.Current.Server.MapPath("~");
                    if (appath != "")
                    {
                        string szpath = appath + "/Report/";
                        string szfile = "Consolidate" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmSS") + ".pdf";
                        mydoc.SaveToFile(szpath + szfile);
                        Response.ClearHeaders();
                        Response.AddHeader("content-Disposition", "attachment; filename=" + szfile);
                        Response.ContentType = "application/pdf";
                        Response.WriteFile(szpath + szfile);

                    }
                }
            }
        }
        catch
        {

        }
    }
    #endregion

    #region Adhiyamaan

    public void semwisegpacgpawitharrear(DataSet ds, string coll_code, string degree_code, string batch_yr, string semes, ref string[] gpa, ref double[] totcredit, ref double[] earnedcredit, ref double[] gradfin, ref string cgpa1)
    {
        int semester = 0;
        int.TryParse(semes, out semester);
        int prev_sem = semester - 1;
        // int prev_sem = semester;
        string batchsetting = "0";
        double partsums = 0.000;
        double partwpmsum = 0.000;
        double cgpa = 0;

        double gradcrit = 0.0;
        int partrowcount = 0;
        double Credit_Points = 0.0;
        double grade_points = 0.0;
        double creditstotal = 0;
        double overallcredit = 0;
        double overalltotgrade = 0;
        double Marks = 0;
        DataTable dvallSubcount = new DataTable();
        DataView dvpassedsubcnt = new DataView();
        DataSet gradeds = new DataSet();
        string semester2 = string.Empty;

        for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
        {
            semester2 = Convert.ToString(ds.Tables[1].Rows[i]["current_semester"]);
        }
        int seme2 = Convert.ToInt32(semester2);
        string[] examcode = new string[seme2];
        totcredit = new double[prev_sem];
        gpa = new string[prev_sem];
        earnedcredit = new double[prev_sem];
        try
        {
            if (ds.Tables.Count > 1 && ds.Tables[1].Rows.Count > 0)
            {
                for (int ex = 0; ex < ds.Tables[1].Rows.Count; ex++)
                {
                    examcode[ex] = Convert.ToString(ds.Tables[1].Rows[ex]["exam_code"]);
                }
            }
            overalltotgrade = 0;
            overallcredit = 0;

            int cusem1;
            string cusem = Convert.ToString(ds.Tables[1].Rows[0]["current_semester"]).Trim();
            int.TryParse(cusem, out cusem1);
            int cur_sem = 0;
            for (int semee = cusem1; semee < semester; semee++)
            {
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    string sumpart = string.Empty;
                    string wpm = string.Empty;
                    partsums = 0;
                    ds.Tables[0].DefaultView.RowFilter = "semester='" + Convert.ToString(ds.Tables[1].Rows[cur_sem]["current_semester"]) + "' and exam_code='" + examcode[cur_sem] + "'";
                    dvallSubcount = ds.Tables[0].DefaultView.ToTable();
                    partrowcount = dvallSubcount.Rows.Count;
                    //  string exmyr = "select Exam_Month,Exam_year from Exam_Details where exam_code='"+examcode[cur_sem]+"'";
                    // DataSet dsexmyr = d2.select_method_wo_parameter(exmyr, "text");

                    ds.Tables[0].DefaultView.RowFilter = " result='pass'   and exam_code='" + examcode[cur_sem] + "' and  semester='" + Convert.ToString(ds.Tables[1].Rows[cur_sem]["current_semester"]) + "'";
                    dvpassedsubcnt = ds.Tables[0].DefaultView;
                    if (partrowcount > 0)
                    {
                        double ttcredit = 0;
                        double internalmk = 0;
                        for (int rs = 0; rs < partrowcount; rs++)
                        {
                            double.TryParse(Convert.ToString(dvallSubcount.Rows[rs]["internal_mark"]), out internalmk);
                            double.TryParse(Convert.ToString(dvallSubcount.Rows[rs]["credit_points"]), out ttcredit);
                            if (ttcredit != 1 && internalmk != 0)
                                totcredit[cur_sem] += ttcredit;
                        }
                    }
                    if (dvpassedsubcnt.Count > 0)
                    {
                        for (int sum = 0; sum < dvpassedsubcnt.Count; sum++)
                        {
                            double checkmarkmm = Convert.ToDouble(dvpassedsubcnt[sum]["total"].ToString());
                            //string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + semes + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_yr + "' and '" + checkmarkmm + "' between frange and trange";
                            //gradeds.Clear();
                            //gradeds = da.select_method_wo_parameter(gradesql, "Text");
                            //if (gradeds.Tables.Count > 0 || gradeds.Tables[0].Rows.Count == 0)
                            //{
                            string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_yr + "'  and '" + checkmarkmm + "' between frange and trange";
                            gradeds.Clear();
                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                            // }
                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                            {
                                for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                {
                                    if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                    {

                                        double.TryParse(Convert.ToString(gradeds.Tables[0].Rows[0]["credit_points"]), out gradcrit);
                                        double grade2 = gradcrit;
                                        // gradfin[cur_sem] += gradcrit;

                                        double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["total"]), out grade_points);
                                        double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["total"]), out Marks);
                                        grade_points = grade_points / 10;
                                        double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["credit_points"]), out Credit_Points);
                                        double intmk = 0;
                                        double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["internal_mark"]), out intmk);
                                        if (Credit_Points != 1 && intmk != 0)
                                        {
                                            earnedcredit[cur_sem] += Credit_Points;
                                            partwpmsum += (Credit_Points * Marks);
                                            partsums = partsums + (gradcrit * Credit_Points);
                                        }
                                    }
                                }
                            }
                        }
                        overalltotgrade += partsums;
                        overallcredit += earnedcredit[cur_sem];
                        if (earnedcredit[cur_sem] == 0)
                        {
                            sumpart = "0.000";
                            wpm = "0.000";
                        }
                        else if (earnedcredit[cur_sem] > 0)
                        {
                            partsums = (partsums / earnedcredit[cur_sem]);
                            partsums = Math.Round(partsums, 3);
                            partwpmsum = (partwpmsum / earnedcredit[cur_sem]);
                            partwpmsum = Math.Round(partwpmsum, 3);
                            sumpart = String.Format("{0:0.000}", partsums);
                            wpm = string.Format("{0:0.000}", partwpmsum);
                        }
                        else
                        {
                            sumpart = "0.000";
                            wpm = "0.000";
                        }
                    }
                    else if (partrowcount > 0)
                    {
                        sumpart = "0.000";
                        wpm = "0.000";
                    }
                    else
                    {
                        sumpart = "--";
                        wpm = "--";
                    }
                    gpa[cur_sem] = sumpart;

                    cur_sem++;
                }

            }
            if (overallcredit > 0)
            {
                cgpa = overalltotgrade / overallcredit;
                cgpa = Math.Round(cgpa, 3);
                cgpa1 = Convert.ToString(cgpa);
            }
        }
        catch (Exception ex)
        {
            lblerror.Visible = true;
            lblerror.Text = Convert.ToString(ex).Trim();
        }
    }

    public void semwisecgpawitharrear(DataSet ds, string coll_code, string degree_code, string batch_yr, string semes, ref string[] gpa, ref double[] totcredit, ref double[] earnedcredit, ref double[] gradfin, ref string cgpa1)
    {
        int semester = 0;
        int.TryParse(semes, out semester);
        int prev_sem = semester - 1;
        // int prev_sem = semester;
        string batchsetting = "0";
        double partsums = 0.000;
        double partwpmsum = 0.000;
        double cgpa = 0;

        double gradcrit = 0.0;
        int partrowcount = 0;
        double Credit_Points = 0.0;
        double grade_points = 0.0;
        double creditstotal = 0;
        double overallcredit = 0;
        double overalltotgrade = 0;
        double Marks = 0;
        DataTable dvallSubcount = new DataTable();
        DataView dvpassedsubcnt = new DataView();
        DataSet gradeds = new DataSet();
        string semester2 = string.Empty;

        for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
        {
            semester2 = Convert.ToString(ds.Tables[1].Rows[i]["current_semester"]);
        }
        int seme2 = Convert.ToInt32(semester2);
        string[] examcode = new string[seme2];
        totcredit = new double[prev_sem];
        gpa = new string[prev_sem];
        earnedcredit = new double[prev_sem];
        try
        {
            if (ds.Tables.Count > 1 && ds.Tables[1].Rows.Count > 0)
            {
                for (int ex = 0; ex < ds.Tables[1].Rows.Count; ex++)
                {
                    examcode[ex] = Convert.ToString(ds.Tables[1].Rows[ex]["exam_code"]);
                }
            }
            overalltotgrade = 0;
            overallcredit = 0;

            int cusem1;
            string cusem = Convert.ToString(ds.Tables[1].Rows[0]["current_semester"]).Trim();
            int.TryParse(cusem, out cusem1);
            int cur_sem = 0;
            for (int semee = cusem1; semee < semester; semee++)
            {
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    string sumpart = string.Empty;
                    string wpm = string.Empty;
                    partsums = 0;
                    ds.Tables[0].DefaultView.RowFilter = "semester='" + Convert.ToString(ds.Tables[1].Rows[cur_sem]["current_semester"]) + "' and exam_code='" + examcode[cur_sem] + "'";
                    dvallSubcount = ds.Tables[0].DefaultView.ToTable();
                    partrowcount = dvallSubcount.Rows.Count;
                    //  string exmyr = "select Exam_Month,Exam_year from Exam_Details where exam_code='"+examcode[cur_sem]+"'";
                    // DataSet dsexmyr = d2.select_method_wo_parameter(exmyr, "text");

                    ds.Tables[0].DefaultView.RowFilter = " result='pass'  and  exam_code='" + examcode[cur_sem] + "' ";  //semester='" + Convert.ToString(ds.Tables[1].Rows[cur_sem]["current_semester"]) + "'
                    dvpassedsubcnt = ds.Tables[0].DefaultView;
                    if (partrowcount > 0)
                    {
                        double ttcredit = 0;
                        double internalmk = 0;
                        for (int rs = 0; rs < partrowcount; rs++)
                        {
                            double.TryParse(Convert.ToString(dvallSubcount.Rows[rs]["internal_mark"]), out internalmk);
                            double.TryParse(Convert.ToString(dvallSubcount.Rows[rs]["credit_points"]), out ttcredit);
                            if (ttcredit != 1 && internalmk != 0)
                            {
                                totcredit[cur_sem] += ttcredit;
                            }
                        }
                    }
                    if (dvpassedsubcnt.Count > 0)
                    {
                        for (int sum = 0; sum < dvpassedsubcnt.Count; sum++)
                        {
                            double checkmarkmm = Convert.ToDouble(dvpassedsubcnt[sum]["total"].ToString());
                            //string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'and semester='" + semes + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_yr + "' and '" + checkmarkmm + "' between frange and trange";
                            //gradeds.Clear();
                            //gradeds = da.select_method_wo_parameter(gradesql, "Text");
                            //if (gradeds.Tables.Count > 0 || gradeds.Tables[0].Rows.Count == 0)
                            //{
                            string gradesql = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_yr + "'  and '" + checkmarkmm + "' between frange and trange";
                            gradeds.Clear();
                            gradeds = da.select_method_wo_parameter(gradesql, "Text");
                            // }
                            if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                            {
                                for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                {
                                    if (Convert.ToInt32(gradeds.Tables[0].Rows[grd][1]) <= checkmarkmm && Convert.ToInt32(gradeds.Tables[0].Rows[grd][2]) >= checkmarkmm)
                                    {

                                        double.TryParse(Convert.ToString(gradeds.Tables[0].Rows[0]["credit_points"]), out gradcrit);
                                        double grade2 = gradcrit;
                                        // gradfin[cur_sem] += gradcrit;

                                        double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["total"]), out grade_points);
                                        double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["total"]), out Marks);
                                        grade_points = grade_points / 10;
                                        double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["credit_points"]), out Credit_Points);
                                        double intmk = 0;
                                        double.TryParse(Convert.ToString(dvpassedsubcnt[sum]["internal_mark"]), out intmk);
                                        if (Credit_Points != 1 && intmk != 0)
                                        {
                                            earnedcredit[cur_sem] += Credit_Points;
                                            partwpmsum += (Credit_Points * Marks);
                                            partsums = partsums + (gradcrit * Credit_Points);
                                        }
                                    }
                                }
                            }
                        }
                        overalltotgrade += partsums;
                        overallcredit += earnedcredit[cur_sem];
                        if (earnedcredit[cur_sem] == 0)
                        {
                            sumpart = "0.000";
                            wpm = "0.000";
                        }
                        else if (earnedcredit[cur_sem] > 0)
                        {
                            partsums = (partsums / earnedcredit[cur_sem]);
                            partsums = Math.Round(partsums, 3);
                            partwpmsum = (partwpmsum / earnedcredit[cur_sem]);
                            partwpmsum = Math.Round(partwpmsum, 3);
                            sumpart = String.Format("{0:0.000}", partsums);
                            wpm = string.Format("{0:0.000}", partwpmsum);
                        }
                        else
                        {
                            sumpart = "0.000";
                            wpm = "0.000";
                        }
                    }
                    else if (partrowcount > 0)
                    {
                        sumpart = "0.000";
                        wpm = "0.000";
                    }
                    else
                    {
                        sumpart = "--";
                        wpm = "--";
                    }
                    gpa[cur_sem] = sumpart;

                    cur_sem++;
                }

            }
            if (overallcredit > 0)
            {
                cgpa = overalltotgrade / overallcredit;
                cgpa = Math.Round(cgpa, 3);
                cgpa1 = Convert.ToString(cgpa);
            }
        }
        catch (Exception ex)
        {
            lblerror.Visible = true;
            lblerror.Text = Convert.ToString(ex).Trim();
        }
    }


    public void Degreemarksheet()
    {
        try
        {
            string monthstr = string.Empty;
            string monthandyear = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            Font fondColName = new Font("Comic Sans MS", 18, FontStyle.Bold);
            Font fontdegexam = new Font("Arial", 12, FontStyle.Bold);
            Font fondconsol = new Font("Comic Sans MS", 15, FontStyle.Bold);
            Font Fontco12 = new Font("Comic Sans MS", 10, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco11 = new Font("Comic Sans MS", 11, FontStyle.Bold);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial71 = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7 = new Font("Arial", 9, FontStyle.Regular);
            Font Fontwma = new Font("Arial", 8, FontStyle.Bold);
            Font Font8bold = new Font("Arial", 8, FontStyle.Bold);
            Font Font10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font Fontarial9 = new Font("Arial", 9, FontStyle.Bold);
            Font Fontarial10b = new Font("Arial", 11, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            PdfDocument doc = new PdfDocument(PdfDocumentFormat.InCentimeters(21, 29.8));
            PdfPage pdfpage = doc.NewPage();


            string degree = string.Empty;
            string Collegename = string.Empty;
            string aff = string.Empty;
            string collacr = string.Empty;
            string dispin = string.Empty;
            string clgaddress = string.Empty;
            string univ = string.Empty;
            string pincode1 = string.Empty;
            string state = string.Empty;
            string dist = string.Empty;
            string studname = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string regno = string.Empty;
            string branch = string.Empty;
            string regulations = string.Empty;
            string dob = string.Empty;
            string follono = string.Empty;
            string gender = string.Empty;
            string publication = string.Empty;
            string category = string.Empty;
            string regulation = string.Empty;
            string grade = string.Empty;
            string grade_points = string.Empty;
            string coesign = string.Empty;
            int month = 0;
            string monandyr = string.Empty;
            string publicationdate = string.Empty;
            string dobdate = string.Empty;
            string pumonthname = string.Empty;
            string searialno = string.Empty;
            int togradee = 0;
            string folionumber = string.Empty;
            DataSet das1 = new DataSet();
            DataSet das2 = new DataSet();
            DataSet das3 = new DataSet();
            DataSet das4 = new DataSet();
            DataSet das5 = new DataSet();
            DataTable dt1 = new DataTable();
            DataTable dt2 = new DataTable();
            DataSet printds1_new = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            DataSet semwisegpa = new DataSet();
            DataTable dvallSubcount = new DataTable();
            DataTable dvallSubcount1 = new DataTable();
            int partrowcount = 0;
            int partrowcount1 = 0;


            string strquery = "select *,district+' - '+pincode  as districtpin,coe_signature from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
            ds.Dispose();
            ds.Reset();
            ds = d2.select_method_wo_parameter(strquery, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                string pincode = Convert.ToString(ds.Tables[0].Rows[0]["pincode"]).Trim();
                int pin = 0;
                int.TryParse(pincode, out pin);
                clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]) + " , " + Convert.ToString(ds.Tables[0].Rows[0]["district"]) + ((pin != 0) ? (" - " + pin.ToString()) : " - " + pincode);
                clgaddress = Convert.ToString(ds.Tables[0].Rows[0]["address3"]);
                coesign = Convert.ToString(ds.Tables[0].Rows[0]["COE"]).Trim();
            }
            if (coesign == "")
            {
                coesign = "-";
            }

            FpSpread2.SaveChanges();
            for (int smark = 1; smark <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; smark++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[smark, 4].Value);
                if (isval == 1)
                {

                    das1.Clear();
                    das1.Dispose();
                    das2.Clear();
                    das2.Dispose();
                    regno = FpSpread2.Sheets[0].Cells[smark, 2].Text;
                    rollnosub = FpSpread2.Sheets[0].Cells[smark, 1].Text;
                    string query = "SELECT r.Reg_No,r.batch_year,a.sex,r.app_no,r.degree_code,r.serialno,R.current_semester,r.regulation,R.Stud_Name,c.Course_Name as degree,d.Dept_name,CONVERT(VARCHAR, dob, 103) as dob,datepart(year, Adm_date) as adm_year FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code and roll_no='" + rollnosub + "'and r.college_code= '" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'; select coe from collinfo where college_code= '" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                    das1 = da.select_method_wo_parameter(query, "text");
                    if (das1.Tables.Count > 0 && das1.Tables[0].Rows.Count > 0)
                    {
                        studname = Convert.ToString(das1.Tables[0].Rows[0]["stud_name"]).Trim();
                        string appno = Convert.ToString(das1.Tables[0].Rows[0]["app_no"]).Trim();
                        string displayFolioNumber = string.Empty;
                        bool isHasFolioNumber = getFolioNumber(appno, ref displayFolioNumber);


                        int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                        monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                        string monthname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                        monthandyear = Convert.ToString(monthname).Trim() + "-" + Convert.ToString(ddlYear.SelectedItem.Text).Trim().ToUpper();
                        monandyr = Convert.ToString(monthandyear).Substring(0, 3) + "-" + Convert.ToString(ddlYear.SelectedItem.Text).Trim();

                        branch = das1.Tables[0].Rows[0]["dept_name"].ToString().ToUpper();
                        batch_year = Convert.ToString(das1.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = das1.Tables[0].Rows[0]["degree_code"].ToString();

                        degree = Convert.ToString(das1.Tables[0].Rows[0]["degree"]).Trim().ToUpper();
                        if (branch != "ARCHITECTURE")
                        {
                            PdfTextArea pdfdegree = new PdfTextArea(Font10bold, System.Drawing.Color.Black, new PdfArea(doc, 100, 139, 100, 50), System.Drawing.ContentAlignment.TopRight, Convert.ToString(degree));
                            pdfpage.Add(pdfdegree);
                        }
                        string degbranch = degree + "  " + branch;
                        regulation = Convert.ToString(das1.Tables[0].Rows[0]["regulation"]).Trim();
                        string sem = das1.Tables[0].Rows[0]["current_semester"].ToString();
                        gender = Convert.ToString(das1.Tables[0].Rows[0]["sex"]).Trim();
                        if (gender == "0")
                        {
                            gender = "Male";
                        }
                        else if (gender == "1")
                        {
                            gender = "Female";
                        }
                        string dobdat = das1.Tables[0].Rows[0]["dob"].ToString();
                        string[] spl2 = dobdat.Split('/');
                        DateTime dati = Convert.ToDateTime(spl2[1] + '/' + spl2[0] + '/' + spl2[2]);
                        string DOB = dati.ToString();
                        string ddate = dati.ToString("dd");
                        string dmonth = dati.ToString("MM");
                        string dyear = dati.ToString("yyyy");
                        dobdate = Convert.ToString(ddate + "-" + dmonth + "-" + dyear).Trim();
                        string yearofadm = Convert.ToString(das1.Tables[0].Rows[0]["adm_year"]).Trim();
                        string medium = d2.GetFunctionv("select TextVal from TextValTable where TextCriteria='medi' and college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and TextCode in(select isnull(medium_ins,0) from applyn  where app_no='" + appno + "')");

                        PdfTextArea pdfcoename = new PdfTextArea(Fontarial7, System.Drawing.Color.Black, new PdfArea(doc, 420, 755, 500, 50), System.Drawing.ContentAlignment.BottomLeft, Convert.ToString(coesign).Trim());
                        pdfpage.Add(pdfcoename);

                        #region coesign
                        string coesignphtsql = string.Empty;
                        coesignphtsql = "select coe_signature from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                        MemoryStream memoryStream = new MemoryStream();
                        DataSet dscoesig = new DataSet();
                        // DataSet dsstdpho = new DataSet();
                        dscoesig.Clear();
                        dscoesig.Dispose();
                        dscoesig = da.select_method_wo_parameter(coesignphtsql, "Text");
                        if (dscoesig.Tables.Count > 0 && dscoesig.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dscoesig.Tables[0].Rows[0][0]).Trim()))
                        {
                            byte[] file = (byte[])dscoesig.Tables[0].Rows[0][0];
                            memoryStream.Write(file, 0, file.Length);
                            if (file.Length > 0)
                            {
                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                System.Drawing.Image thumb = imgx.GetThumbnailImage(250, 250, null, IntPtr.Zero);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                                {
                                }
                                else
                                {
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                }
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                        {
                            PdfImage coesiImage2 = doc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"));
                            pdfpage.Add(coesiImage2, 435, 695, 200);
                        }
                        else
                        {
                            PdfImage coesiImage2 = doc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                            pdfpage.Add(coesiImage2, 435, 695, 200);
                        }

                        #endregion

                        #region date
                        string currdate = DateTime.Now.ToString("dd-MM-yyyy");

                        PdfTextArea pdfcurrdate = new PdfTextArea(Fontarial7, System.Drawing.Color.Black, new PdfArea(doc, 69, 702, 100, 50), System.Drawing.ContentAlignment.BottomLeft, Convert.ToString(currdate).Trim());
                        pdfpage.Add(pdfcurrdate);

                        #endregion


                        #region(stud photo)

                        string stdphtsql = string.Empty;
                        stdphtsql = "select * from StdPhoto where app_no='" + appno + "'";
                        MemoryStream memoryStream1 = new MemoryStream();
                        DataSet dsstdpho = new DataSet();
                        dsstdpho.Clear();
                        dsstdpho.Dispose();
                        dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                        if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                        {
                            byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                            memoryStream1.Write(file, 0, file.Length);
                            if (file.Length > 0)
                            {
                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream1, true, true);
                                System.Drawing.Image thumb = imgx.GetThumbnailImage(250, 250, null, IntPtr.Zero);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appno + ".jpeg")))
                                {
                                }
                                else
                                {
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + appno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                }
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appno + ".jpeg")))
                        {
                            PdfImage LogoImage2 = doc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + appno + ".jpeg"));
                            pdfpage.Add(LogoImage2, 475, 128, 295);
                        }
                        else
                        {
                            PdfImage LogoImage2 = doc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                            pdfpage.Add(LogoImage2, 475, 128, 295);
                        }
                        #endregion

                        #region studentDetails

                        //studdetails
                        if (chkenrolmentno.Checked == true)
                        {
                            PdfTable pdtable = doc.NewTable(Fontarial7, 3, 8, 4.5);
                            pdtable.VisibleHeaders = false;
                            pdtable.SetBorders(Color.Black, 1, BorderType.None);
                            pdtable.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdtable.Columns[0].SetWidth(45);
                            pdtable.Columns[1].SetWidth(48);
                            pdtable.Columns[2].SetWidth(8);
                            pdtable.Columns[3].SetWidth(30);
                            pdtable.Columns[4].SetWidth(30);
                            pdtable.Columns[5].SetWidth(30);
                            pdtable.Columns[6].SetWidth(30);
                            pdtable.Columns[7].SetWidth(35);
                            // pdtable.Rows[2].SetRowHeight(30);

                            pdtable.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdtable.Cell(0, 1).SetContent(Convert.ToString(studname).Trim().ToUpper());
                            foreach (PdfCell pr in pdtable.CellRange(0, 1, 0, 1).Cells)
                            {
                                pr.ColSpan = 5;
                            }
                            pdtable.Cell(0, 7).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdtable.Cell(0, 7).SetContent(Convert.ToString(regno).Trim());

                            pdtable.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdtable.Cell(1, 1).SetContent(Convert.ToString(dobdate).Trim());

                            pdtable.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdtable.Cell(1, 3).SetContent(Convert.ToString(gender).Trim());




                            pdtable.Cell(1, 7).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdtable.Cell(1, 7).SetContent(Convert.ToString(regulation).Trim());

                            pdtable.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdtable.Cell(2, 1).SetContent(Convert.ToString(degbranch).Trim());
                            foreach (PdfCell pr in pdtable.CellRange(2, 1, 2, 1).Cells)
                            {
                                pr.ColSpan = 5;
                            }


                            pdtable.Cell(2, 7).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdtable.Cell(2, 7).SetContent(Convert.ToString(monandyr).Trim().ToUpper());

                            Gios.Pdf.PdfTablePage mypdfpage2 = pdtable.CreateTablePage(new Gios.Pdf.PdfArea(doc, 28, 223, 550, 650));
                            pdfpage.Add(mypdfpage2);
                        }

                        else
                        {

                            PdfTable pdtable = doc.NewTable(Fontarial7, 3, 5, 4.5);
                            pdtable.VisibleHeaders = false;
                            pdtable.SetBorders(Color.Black, 1, BorderType.None);
                            pdtable.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdtable.Columns[0].SetWidth(15);
                            pdtable.Columns[1].SetWidth(36);
                            pdtable.Columns[2].SetWidth(15);
                            pdtable.Columns[3].SetWidth(10);
                            pdtable.Columns[4].SetWidth(15);

                            pdtable.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdtable.Cell(0, 1).SetContent(Convert.ToString(studname).Trim().ToUpper());
                            foreach (PdfCell pr in pdtable.CellRange(0, 1, 0, 1).Cells)
                            {
                                pr.ColSpan = 2;
                            }
                            pdtable.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdtable.Cell(0, 4).SetContent(Convert.ToString(regno).Trim());

                            pdtable.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdtable.Cell(1, 1).SetContent(Convert.ToString(dobdate).Trim());

                            pdtable.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdtable.Cell(1, 2).SetContent(Convert.ToString(gender).Trim());

                            pdtable.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdtable.Cell(1, 4).SetContent(Convert.ToString(regulation).Trim());

                            pdtable.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdtable.Cell(2, 1).SetContent(Convert.ToString(degbranch).Trim());
                            foreach (PdfCell pr in pdtable.CellRange(2, 1, 2, 1).Cells)
                            {
                                pr.ColSpan = 2;
                            }

                            pdtable.Cell(2, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdtable.Cell(2, 4).SetContent(Convert.ToString(monandyr).Trim().ToUpper());

                            Gios.Pdf.PdfTablePage mypdfpage2 = pdtable.CreateTablePage(new Gios.Pdf.PdfArea(doc, 33, 223, 558, 650));
                            pdfpage.Add(mypdfpage2);
                        }

                        #endregion

                        #region semdetails


                        string sql = "select * from exam_details where degree_code='" + degree_code + "'  and exam_month='" + month + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year='" + batch_year + "' ";
                        das3 = da.select_method_wo_parameter(sql, "Text");
                        string exam_code = Convert.ToString(das3.Tables[0].Rows[0]["exam_code"]).Trim();
                        string sql1 = "Select semester,subject_code,subject_name,max_int_marks,isnull(internal_mark,0) as internal_mark,min_int_marks,max_ext_marks,isnull(external_mark,0) as external_mark,min_ext_marks,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points ,grade,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result from mark_entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = '" + exam_code + "' and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester desc,subject.subjectpriority;";
                        sql1 = sql1 + "select r.Roll_no,sm.Batch_year,sm.degree_code,CAST('" + examYear + "' as smallint) as Exam_year,CAST('" + examMonth + "' as smallint) as Exam_Month,cast(0 as smallint) as Current_Semester,sm.semester,s.subject_code,s.subject_name,s.acronym as SubjectAcronymn,ss.subject_type,s.max_int_marks,s.min_int_marks,CAST('0' as float) as internal_mark,s.max_ext_marks,s.min_ext_marks,CAST('0' as float) external_mark,s.maxtotal,s.mintotal,CAST('0' as float) as total,CAST('0' as float) as OutOf100,CAST('0' as float) as OutOf10,s.credit_points,'' as result,cast('1' as bit) as passorfail,s.Part_Type,ISNULL(ss.ElectivePap,'0') as Elective,ISNULL(ss.lab,'0') Lab,'' as Grade,ISNULL(ss.projThe,'0') projThe,s.subjectpriority,CAST('0' as float) as BeforeReTotINT,CAST('0' as float) as BeforeRevalEXT,CAST('0' as float) as BeforeTOT,'' as BeforeResult,CAST('0' as float) as AfterReTotINT,CAST('0' as float) as AfterRevalEXT,CAST('0' as float) as AfterTOT,'' as AfterRevalResult,'1' as MarkOrExempted,sg.grade as Message,sg.description,SUBSTRING(s.subject_code,LEN(s.subject_code)-2,2) as ExtraCreditSubject from subject s,sub_sem ss,syllabus_master sm,SpecialCourseSubject scs,SpecialCourseGradeDetail sg,Registration r where sg.MarkType=scs.MarkType and r.App_No=scs.app_no and s.subject_no=scs.subject_no and scs.CurrentSem=sm.semester and ss.syll_code=sm.syll_code and ss.syll_code=s.syll_code and s.subType_no=ss.subType_no and s.syll_code=sm.syll_code and sm.Batch_Year=r.Batch_Year and sm.degree_code=r.degree_code and r.roll_no in('" + rollnosub + "') order by sm.semester,subject_type,ss.lab,s.subjectpriority";

                        das4.Clear();
                        das4.Dispose();
                        das4 = da.select_method_wo_parameter(sql1, "text");
                        int rowcount = das4.Tables[0].Rows.Count;
                        int rowc = 20;
                        PdfTable tblMark = doc.NewTable(Fontarial7, rowc, 7, 3);
                        tblMark.SetBorders(Color.Black, 1, BorderType.None);
                        tblMark.VisibleHeaders = false;
                        tblMark.Columns[0].SetWidth(32);
                        tblMark.Columns[1].SetWidth(52);
                        tblMark.Columns[2].SetWidth(288);
                        tblMark.Columns[3].SetWidth(24);
                        tblMark.Columns[4].SetWidth(20);
                        tblMark.Columns[5].SetWidth(22);
                        tblMark.Columns[6].SetWidth(31);




                        string displayPartWiseGPA = string.Empty;
                        double sumofcrdit = 0;
                        double sumofGPA = 0;
                        double gpa = 0;
                        double CGPA = 0;
                        double gpvAl = 0;
                        double overallCredit = 0;
                        string gradepoint = string.Empty;
                        string semest1 = string.Empty;
                        string sem2 = string.Empty;
                        string sem1 = string.Empty;
                        int j = 0;
                        int i1 = 0;
                        int sheetno = 0;
                        int j1 = 0;
                        int RowA = 1;
                        int rowCnt = 0;
                        int tableRow = 0;
                        int modcount = 1;
                        bool isFirstPagePrinted = false;
                        int check = 0;
                        if (das4.Tables.Count > 0 && das4.Tables[0].Rows.Count > 0)
                        {
                            for (int i = 0; i < das4.Tables[0].Rows.Count; i++)
                            {
                                if (das4.Tables.Count > 0 && das4.Tables[0].Rows.Count > 0)
                                {
                                    sem1 = Convert.ToString(das4.Tables[0].Rows[i]["semester"]).Trim();
                                    sem2 = Convert.ToString(das4.Tables[0].Rows[0]["semester"]).Trim();
                                    if (sem2 == "1")
                                    {
                                        sem2 = "I";
                                    }
                                    else if (sem2 == "2")
                                    {
                                        sem2 = "II";
                                    }
                                    else if (sem2 == "3")
                                    {
                                        sem2 = "III";
                                    }
                                    else if (sem2 == "4")
                                    {
                                        sem2 = "IV";
                                    }
                                    else if (sem2 == "5")
                                    {
                                        sem2 = "V";
                                    }
                                    else if (sem2 == "6")
                                    {
                                        sem2 = "VI";
                                    }
                                    else if (sem2 == "7")
                                    {
                                        sem2 = "VII";
                                    }
                                    else if (sem2 == "8")
                                    {
                                        sem2 = "VIII";
                                    }
                                    else if (sem2 == "9")
                                    {
                                        sem2 = "IX";
                                    }
                                    else if (sem2 == "10")
                                    {
                                        sem2 = "X";
                                    }
                                    if (sem1 == "1")
                                    {
                                        sem1 = "I";
                                    }
                                    else if (sem1 == "2")
                                    {
                                        sem1 = "II";
                                    }
                                    else if (sem1 == "3")
                                    {
                                        sem1 = "III";
                                    }
                                    else if (sem1 == "4")
                                    {
                                        sem1 = "IV";
                                    }
                                    else if (sem1 == "5")
                                    {
                                        sem1 = "V";
                                    }
                                    else if (sem1 == "6")
                                    {
                                        sem1 = "VI";
                                    }
                                    else if (sem1 == "7")
                                    {
                                        sem1 = "VII";
                                    }
                                    else if (sem2 == "8")
                                    {
                                        sem1 = "VIII";
                                    }
                                    else if (sem2 == "9")
                                    {
                                        sem1 = "IX";
                                    }
                                    else if (sem1 == "10")
                                    {
                                        sem1 = "X";
                                    }

                                    string sub_code = Convert.ToString(das4.Tables[0].Rows[i]["subject_code"]).Trim();
                                    string subname = Convert.ToString(das4.Tables[0].Rows[i]["subject_name"]).Trim().ToUpper();
                                    double internalmmark = 0;
                                    double externalmark1 = 0;
                                    double totalinternal = 0;
                                    double totalexternal = 0;
                                    double mininternalmar = 0;
                                    double minexternalmar = 0;
                                    double.TryParse(Convert.ToString(das4.Tables[0].Rows[i]["internal_mark"]), out internalmmark);
                                    double.TryParse(Convert.ToString(das4.Tables[0].Rows[i]["external_mark"]), out totalexternal);
                                    double.TryParse(Convert.ToString(das4.Tables[0].Rows[i]["min_int_marks"]).Trim(), out mininternalmar);
                                    double.TryParse(Convert.ToString(das4.Tables[0].Rows[i]["min_ext_marks"]).Trim(), out minexternalmar);
                                    totalexternal = Math.Round(totalexternal, 0);
                                    externalmark1 = totalexternal;
                                    string checkedmark = string.Empty;
                                    if (totalexternal < 0)
                                    {
                                        checkedmark = loadmarkat(Convert.ToString(totalexternal));
                                    }
                                    else
                                    {
                                        checkedmark = Convert.ToString(totalexternal);
                                    }
                                    if (internalmmark >= mininternalmar && externalmark1 >= minexternalmar)
                                    {
                                        if (internalmmark >= 0)
                                        {
                                            if (totalexternal > 0)
                                            {
                                                totalinternal = internalmmark + externalmark1;
                                            }
                                            else
                                            {
                                                totalinternal = internalmmark;
                                            }
                                        }
                                        else
                                        {
                                            if (totalexternal > 0)
                                            {
                                                totalinternal = externalmark1;
                                            }
                                            else
                                            {
                                                totalinternal = 0;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        totalinternal = 0;
                                    }
                                    double totfinal = 0;
                                    totfinal = Math.Round(totalinternal, 0);
                                    string t_final = Convert.ToString(totfinal);
                                    t_final = String.Format("{0:0}", t_final);
                                    string sql2 = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Semester='" + sem + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + totfinal + "' between Frange and Trange; select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + totfinal + "' between Frange and Trange;";
                                    DataSet dsgrade = new DataSet();
                                    dsgrade = d2.select_method_wo_parameter(sql2, "text");
                                    if (dsgrade.Tables.Count > 0)
                                    {
                                        if (dsgrade.Tables[0].Rows.Count == 0)
                                        {
                                            if (dsgrade.Tables.Count > 1 && dsgrade.Tables[1].Rows.Count > 0)
                                            {
                                                grade = Convert.ToString(dsgrade.Tables[1].Rows[0]["mark_grade"]).Trim();
                                                grade_points = Convert.ToString(dsgrade.Tables[1].Rows[0]["credit_points"]).Trim();
                                            }
                                        }
                                        else
                                        {
                                            grade = Convert.ToString(dsgrade.Tables[0].Rows[0]["Mark_Grade"]).Trim();
                                            grade_points = Convert.ToString(dsgrade.Tables[0].Rows[0]["Credit_points"]).Trim();
                                        }
                                    }
                                    double gradeibtpoint = 0;
                                    double.TryParse(Convert.ToString(Convert.ToString(das4.Tables[0].Rows[i]["total"]).Trim()), out gradeibtpoint);
                                    gradeibtpoint = gradeibtpoint / 10;
                                    gradeibtpoint = Math.Round(gradeibtpoint, 1);
                                    gradepoint = Convert.ToString(gradeibtpoint);
                                    gradepoint = Convert.ToString(Math.Round(Convert.ToDouble(gradeibtpoint), 2));
                                    gradepoint = String.Format("{0:0.00}", gradepoint);

                                    semest1 = Convert.ToString(das4.Tables[0].Rows[i]["semester"]).Trim();
                                    double earnedCredit = 0;
                                    double gp = 0;
                                    string creditPoint = string.Empty;
                                    creditPoint = Convert.ToString(das4.Tables[0].Rows[i]["credit_points"]).Trim();
                                    double.TryParse(creditPoint.Trim(), out earnedCredit);
                                    sumofcrdit = sumofcrdit + earnedCredit;

                                    double.TryParse(gradepoint.Trim(), out gp);
                                    gpvAl = gpvAl + gp * earnedCredit;
                                    string result = Convert.ToString(das4.Tables[0].Rows[i]["result"]).Trim();
                                    if (grade.ToString().ToUpper() == "REAPPEAR" || grade.ToString().ToUpper() == "RA")
                                    {
                                        grade = "-";

                                    }
                                    if (grade_points == "0")
                                    {
                                        grade_points = "-";
                                    }
                                    if (result.ToString().ToUpper() == "ABSENT")
                                    {
                                        result = "AB";
                                    }
                                    else if (result.ToString().ToUpper() == "FAIL")
                                    {
                                        result = "RA";
                                    }
                                    if (internalmmark == 0 && Convert.ToString(das4.Tables[0].Rows[i]["credit_points"]).Trim() == "1")
                                    {
                                        result = "SA";
                                    }



                                    if (isFirstPagePrinted == false ? j < 15 : (j < (tableRow < 15 ? tableRow : (15 * RowA) - check)))
                                    {
                                        //if (isFirstPagePrinted == false ? i % 16 == 0 : i == (RowA * 16))
                                        //{

                                        j++;
                                        tblMark.Cell(j, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMark.Cell(j, 0).SetContent(sem1);

                                        tblMark.Cell(j, 1).SetContent(sub_code);
                                        tblMark.Cell(j, 1).SetContentAlignment(ContentAlignment.MiddleCenter);

                                        tblMark.Cell(j, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMark.Cell(j, 2).SetContent(subname);

                                        tblMark.Cell(j, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMark.Cell(j, 3).SetContent(Convert.ToString(das4.Tables[0].Rows[i]["credit_points"]).Trim());

                                        tblMark.Cell(j, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMark.Cell(j, 5).SetContent(grade);

                                        tblMark.Cell(j, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMark.Cell(j, 4).SetContent(grade_points);

                                        tblMark.Cell(j, 6).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMark.Cell(j, 6).SetContent(result);
                                        i1 = j;
                                        check++;
                                    }
                                    #region Contionue On New Page
                                    else
                                    {
                                        tblMark.Cell(j + 1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMark.Cell(j + 1, 2).SetContent("CONTINUES IN NEXT PAGE...");
                                        isFirstPagePrinted = true;
                                        Gios.Pdf.PdfTablePage mypdfsemdetails = tblMark.CreateTablePage(new Gios.Pdf.PdfArea(doc, 20, 308, 550, 650));
                                        pdfpage.Add(mypdfsemdetails);
                                        pdfpage.SaveToDocument();
                                        pdfpage = doc.NewPage();
                                        RowA++;

                                        PdfTextArea pdfcoename1 = new PdfTextArea(Fontarial7, System.Drawing.Color.Black, new PdfArea(doc, 420, 755, 500, 50), System.Drawing.ContentAlignment.BottomLeft, Convert.ToString(coesign).Trim());
                                        pdfpage.Add(pdfcoename1);

                                        #region studentDetails

                                        //studdetails
                                        if (chkenrolmentno.Checked == true)
                                        {
                                            PdfTable pdtable = doc.NewTable(Fontarial7, 3, 8, 4);
                                            pdtable.VisibleHeaders = false;
                                            pdtable.SetBorders(Color.Black, 1, BorderType.None);
                                            pdtable.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdtable.Columns[0].SetWidth(29);
                                            pdtable.Columns[1].SetWidth(30);
                                            pdtable.Columns[2].SetWidth(28);
                                            pdtable.Columns[3].SetWidth(30);
                                            pdtable.Columns[4].SetWidth(30);
                                            pdtable.Columns[5].SetWidth(30);
                                            pdtable.Columns[6].SetWidth(35);
                                            pdtable.Columns[7].SetWidth(35);
                                            pdtable.Rows[2].SetRowHeight(30);

                                            pdtable.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdtable.Cell(0, 1).SetContent(Convert.ToString(studname).Trim().ToUpper());
                                            foreach (PdfCell pr in pdtable.CellRange(0, 1, 0, 1).Cells)
                                            {
                                                pr.ColSpan = 5;
                                            }
                                            pdtable.Cell(0, 7).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdtable.Cell(0, 7).SetContent(Convert.ToString(regno).Trim());

                                            pdtable.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdtable.Cell(1, 1).SetContent(Convert.ToString(dobdate).Trim());

                                            pdtable.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdtable.Cell(1, 3).SetContent(Convert.ToString(gender).Trim());




                                            pdtable.Cell(1, 7).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdtable.Cell(1, 7).SetContent(Convert.ToString(regulation).Trim());

                                            pdtable.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdtable.Cell(2, 1).SetContent(Convert.ToString(degbranch).Trim());
                                            foreach (PdfCell pr in pdtable.CellRange(2, 1, 2, 1).Cells)
                                            {
                                                pr.ColSpan = 5;
                                            }


                                            pdtable.Cell(2, 7).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdtable.Cell(2, 7).SetContent(Convert.ToString(monandyr).Trim().ToUpper());

                                            Gios.Pdf.PdfTablePage mypdfpage2 = pdtable.CreateTablePage(new Gios.Pdf.PdfArea(doc, 33, 223, 550, 650));
                                            pdfpage.Add(mypdfpage2);
                                        }

                                        else
                                        {

                                            PdfTable pdtable = doc.NewTable(Fontarial7, 3, 5, 4.5);
                                            pdtable.VisibleHeaders = false;
                                            pdtable.SetBorders(Color.Black, 1, BorderType.None);
                                            pdtable.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdtable.Columns[0].SetWidth(15);
                                            pdtable.Columns[1].SetWidth(36);
                                            pdtable.Columns[2].SetWidth(15);
                                            pdtable.Columns[3].SetWidth(10);
                                            pdtable.Columns[4].SetWidth(15);

                                            pdtable.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdtable.Cell(0, 1).SetContent(Convert.ToString(studname).Trim().ToUpper());
                                            foreach (PdfCell pr in pdtable.CellRange(0, 1, 0, 1).Cells)
                                            {
                                                pr.ColSpan = 2;
                                            }
                                            pdtable.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdtable.Cell(0, 4).SetContent(Convert.ToString(regno).Trim());

                                            pdtable.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdtable.Cell(1, 1).SetContent(Convert.ToString(dobdate).Trim());

                                            pdtable.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            pdtable.Cell(1, 2).SetContent(Convert.ToString(gender).Trim());

                                            pdtable.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdtable.Cell(1, 4).SetContent(Convert.ToString(regulation).Trim());

                                            pdtable.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdtable.Cell(2, 1).SetContent(Convert.ToString(degbranch).Trim());
                                            foreach (PdfCell pr in pdtable.CellRange(2, 1, 2, 1).Cells)
                                            {
                                                pr.ColSpan = 2;
                                            }

                                            pdtable.Cell(2, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                            pdtable.Cell(2, 4).SetContent(Convert.ToString(monandyr).Trim().ToUpper());

                                            Gios.Pdf.PdfTablePage mypdfpage2 = pdtable.CreateTablePage(new Gios.Pdf.PdfArea(doc, 33, 223, 558, 650));
                                            pdfpage.Add(mypdfpage2);
                                        }

                                        if (branch != "ARCHITECTURE")
                                        {
                                            PdfTextArea pdfdegree1 = new PdfTextArea(Font10bold, System.Drawing.Color.Black, new PdfArea(doc, 100, 144, 100, 50), System.Drawing.ContentAlignment.TopRight, Convert.ToString(degree));
                                            pdfpage.Add(pdfdegree1);
                                        }

                                        #endregion
                                        #region(stud photo)

                                        string stdphtsql3 = string.Empty;
                                        stdphtsql3 = "select * from StdPhoto where app_no='" + appno + "'";
                                        MemoryStream memoryStream3 = new MemoryStream();
                                        DataSet dsstdpho3 = new DataSet();
                                        dsstdpho3.Clear();
                                        dsstdpho3.Dispose();
                                        dsstdpho3 = da.select_method_wo_parameter(stdphtsql, "Text");
                                        if (dsstdpho3.Tables.Count > 0 && dsstdpho3.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho3.Tables[0].Rows[0][1]).Trim()))
                                        {
                                            byte[] file = (byte[])dsstdpho3.Tables[0].Rows[0][1];
                                            memoryStream3.Write(file, 0, file.Length);
                                            if (file.Length > 0)
                                            {
                                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream3, true, true);
                                                System.Drawing.Image thumb = imgx.GetThumbnailImage(250, 250, null, IntPtr.Zero);
                                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appno + ".jpeg")))
                                                {
                                                }
                                                else
                                                {
                                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + appno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                                }
                                            }
                                        }
                                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appno + ".jpeg")))
                                        {
                                            PdfImage LogoImage2 = doc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + appno + ".jpeg"));
                                            pdfpage.Add(LogoImage2, 475, 128, 210);
                                        }
                                        else
                                        {
                                            PdfImage LogoImage2 = doc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                            pdfpage.Add(LogoImage2, 475, 128, 210);
                                        }
                                        #endregion

                                        #region coesign
                                        string coesignphtsql1 = string.Empty;
                                        coesignphtsql1 = "select coe_signature from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                                        MemoryStream memoryStream2 = new MemoryStream();
                                        DataSet dscoesig1 = new DataSet();
                                        // DataSet dsstdpho = new DataSet();
                                        dscoesig1.Clear();
                                        dscoesig1.Dispose();
                                        dscoesig1 = da.select_method_wo_parameter(coesignphtsql1, "Text");
                                        if (dscoesig1.Tables.Count > 0 && dscoesig1.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dscoesig1.Tables[0].Rows[0][0]).Trim()))
                                        {
                                            byte[] file = (byte[])dscoesig1.Tables[0].Rows[0][0];
                                            memoryStream2.Write(file, 0, file.Length);
                                            if (file.Length > 0)
                                            {
                                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream2, true, true);
                                                System.Drawing.Image thumb = imgx.GetThumbnailImage(250, 250, null, IntPtr.Zero);
                                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                                                {
                                                }
                                                else
                                                {
                                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                                }
                                            }
                                        }
                                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                                        {
                                            PdfImage coesiImage2 = doc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"));
                                            pdfpage.Add(coesiImage2, 435, 698, 200);
                                        }
                                        else
                                        {
                                            PdfImage coesiImage2 = doc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                            pdfpage.Add(coesiImage2, 435, 698, 200);
                                        }

                                        #endregion

                                        #region date
                                        string currdate1 = DateTime.Now.ToString("dd-MM-yyyy");

                                        PdfTextArea pdfcurrdate1 = new PdfTextArea(Fontarial7, System.Drawing.Color.Black, new PdfArea(doc, 69, 702, 100, 50), System.Drawing.ContentAlignment.BottomLeft, Convert.ToString(currdate1).Trim());
                                        pdfpage.Add(pdfcurrdate1);

                                        #endregion


                                        tableRow = das4.Tables[0].Rows.Count - j;
                                        j = 0;


                                        tblMark = doc.NewTable(Fontarial7, 20, 7, 3);
                                        tblMark.SetBorders(Color.Black, 1, BorderType.None);
                                        tblMark.Columns[0].SetWidth(32);
                                        tblMark.Columns[1].SetWidth(52);
                                        tblMark.Columns[2].SetWidth(288);
                                        tblMark.Columns[3].SetWidth(24);
                                        tblMark.Columns[4].SetWidth(22);
                                        tblMark.Columns[5].SetWidth(22);
                                        tblMark.Columns[6].SetWidth(31);


                                        j++;
                                        tblMark.Cell(j, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMark.Cell(j, 0).SetContent(sem1);

                                        tblMark.Cell(j, 1).SetContent(sub_code);
                                        tblMark.Cell(j, 1).SetContentAlignment(ContentAlignment.MiddleCenter);

                                        tblMark.Cell(j, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMark.Cell(j, 2).SetContent(subname);

                                        tblMark.Cell(j, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMark.Cell(j, 3).SetContent(Convert.ToString(das4.Tables[0].Rows[i]["credit_points"]).Trim());

                                        tblMark.Cell(j, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMark.Cell(j, 5).SetContent(grade);

                                        tblMark.Cell(j, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMark.Cell(j, 4).SetContent(grade_points);

                                        tblMark.Cell(j, 6).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMark.Cell(j, 6).SetContent(result);
                                        i1 = j;
                                        check++;


                                    }

                                    #endregion
                                }
                            }


                            tblMark.Cell(i1 + 1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMark.Cell(i1 + 1, 0).SetContent("*** End of Statement ***");
                            foreach (PdfCell pc5 in tblMark.CellRange(i1 + 1, 0, i1 + 1, 0).Cells)
                            {
                                pc5.ColSpan = 6;
                            }
                            string creditpaper = txtcreditpap.Text;

                            tblMark.Cell(i1 + 2, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblMark.Cell(i1 + 2, 2).SetContent("Number of One Credit Courses Undergone : " + creditpaper + "");

                            Gios.Pdf.PdfTablePage newpdftabpage1 = tblMark.CreateTablePage(new Gios.Pdf.PdfArea(doc, 20, 308, 550, 650));
                            pdfpage.Add(newpdftabpage1);
                            //pdfpage.SaveToDocument();

                        }




                        #endregion

                        #region gpa cgpa details


                        string semes = d2.GetFunction("select distinct Current_Semester from Registration where Batch_Year='" + batch_year + "' and degree_code='" + degree_code + "' and CC=0 and DelFlag=0 and Exam_Flag<>'debar'");
                        int cur_sem = 0;
                        int.TryParse(semes, out cur_sem);
                        string quryallsemgpa2 = "Select semester,subject_code,exam_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,Part_Type from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in(select exam_code from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "') and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester,Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;select exam_code,current_semester from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "'and exam_month='" + month + "' order by exam_code,current_semester;";
                        DataSet semwisegpaycur = new DataSet();
                        semwisegpaycur = d2.select_method_wo_parameter(quryallsemgpa2, "Text");
                        string currsemesy = string.Empty;
                        string quryallsemgpa1 = "Select semester,subject_code,exam_code,subject_name,subject_type,max_int_marks,isnull(internal_mark,0) as internal_mark,max_ext_marks,isnull(external_mark,0) as external_mark,maxtotal, (case when isnull(internal_mark,0) >=0  then   isnull(internal_mark,0) else 0 end) +   (case when isnull(external_mark,0) >=0  then   isnull(external_mark,0) else 0 end) as total,  credit_points,case  result when 'Pass' Then 'PASS' when 'AAA' then 'ABSENT' when 'WHD' then 'WWW' else 'FAIL' end as result,Part_Type from Mark_Entry,Subject,sub_sem,syllabus_master   where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code in(select exam_code from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "' and exam_year<='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "') and roll_no='" + rollnosub + "' and external_mark is not null and total is not null and result is not null  order by syllabus_master.semester,Part_Type,subject_type,sub_sem.lab,subject.subjectpriority,subject.subject_no;select exam_code,current_semester from exam_details where degree_code='" + degree_code + "' and batch_year='" + batch_year + "' and current_semester<='" + semes + "' order by exam_code,current_semester;";
                        DataSet semwisegpay = new DataSet();
                        semwisegpay = d2.select_method_wo_parameter(quryallsemgpa1, "Text");
                        currsemesy = Convert.ToInt32(semwisegpaycur.Tables[1].Rows[0]["current_semester"]).ToString();
                        int x = 0;
                        int.TryParse(currsemesy, out x);
                        x += 1;
                        int y = x - 1;
                        string[] gpa2 = new string[x - 1];
                        double[] totcredit = new double[x - 1];
                        double[] earnedcredit = new double[x - 1];
                        double[] gradfin = new double[x - 1];
                        string cgpa5 = string.Empty;
                        currsemesy = Convert.ToString(x).Trim();

                        string month1 = Convert.ToString(month).Trim();

                        double cgpaove = 0.00;
                        semwisegpacgpawitharrear(semwisegpay, Convert.ToString(ddlCollege.SelectedValue).Trim(), degree_code, batch_year, currsemesy, ref gpa2, ref totcredit, ref earnedcredit, ref gradfin, ref cgpa5);
                        double totearnedcredit = 0;
                        double totalcredit = 0;
                        string gpafinal = string.Empty;
                        //double[] cp1=new double[x-1];
                        string currsemesys = Convert.ToInt32(semwisegpay.Tables[1].Rows[0]["current_semester"]).ToString();
                        int s;
                        int rowcol;
                        int gparow = 0;
                        int.TryParse(currsemesys, out rowcol);

                        for (s = rowcol; s < x; s++)
                        {


                            gpafinal = Convert.ToString(gpa2[gparow]);
                            totalcredit += Convert.ToDouble(totcredit[gparow]);
                            // totearnedcredit += earnedcredit[gparow];
                            gparow++;

                        }

                        double gpa1 = Convert.ToDouble(gpafinal);
                        gpa1 = Math.Round(gpa1, 2);
                        gpafinal = Convert.ToString(gpa1);
                        string cgpa1 = string.Empty;
                        double[] earnedcredit1 = new double[x - 1];
                        gparow = 0;
                        semwisecgpawitharrear(semwisegpay, Convert.ToString(ddlCollege.SelectedValue).Trim(), degree_code, batch_year, currsemesy, ref gpa2, ref totcredit, ref earnedcredit1, ref gradfin, ref cgpa1);
                        for (s = rowcol; s < x; s++)
                        {

                            totearnedcredit += earnedcredit1[gparow];
                            gparow++;

                        }
                        if (cgpa1 == "")
                        {
                            cgpa1 = "0";
                        }
                        double cgpa2 = Convert.ToDouble(cgpa1);
                        cgpa2 = Math.Round(cgpa2, 2);
                        string cgpa = Convert.ToString(cgpa2);
                        string creittxt = string.Empty;
                        string credittxt = txtcreditpap.Text;
                        if (credittxt.ToUpper() == "ONE")
                        {
                            creittxt = "1";
                        }
                        else if (credittxt.ToUpper() == "TWO")
                        {
                            creittxt = "2";
                        }
                        else if (credittxt.ToUpper() == "THREE")
                        {
                            creittxt = "3";
                        }
                        else if (credittxt.ToUpper() == "FOUR")
                        {
                            creittxt = "4";
                        }
                        else if (credittxt.ToUpper() == "FIVE")
                        {
                            creittxt = "5";
                        }
                        else if (credittxt.ToUpper() == "SIX")
                        {
                            creittxt = "6";
                        }
                        else if (credittxt.ToUpper() == "SEVEN")
                        {
                            creittxt = "7";
                        }
                        else if (credittxt.ToUpper() == "EIGHT")
                        {
                            creittxt = "8";
                        }
                        else if (credittxt.ToUpper() == "NINE")
                        {
                            creittxt = "9";
                        }
                        else if (credittxt.ToUpper() == "TEN")
                        {
                            creittxt = "10";
                        }

                        string totcred = string.Empty;
                        string earncrd = string.Empty;


                        if (creittxt != "")
                        {
                            totcred = "Semester" + "  " + sem2 + "  " + totalcredit + "+" + creittxt;
                            earncrd = "Semester" + "  " + sem2 + "  " + totearnedcredit + "+" + creittxt;
                        }
                        else
                        {
                            totcred = "Semester" + "  " + sem2 + "  " + totalcredit;
                            earncrd = "Semester" + "  " + sem2 + "  " + totearnedcredit;
                        }


                        string gpafn = "Semester" + "  " + sem2 + "  " + gpafinal;


                        PdfTextArea pdftotalcredits = new PdfTextArea(Fontarial7, System.Drawing.Color.Black, new PdfArea(doc, 150, 582, 100, 50), System.Drawing.ContentAlignment.BottomLeft, Convert.ToString(totcred).Trim());
                        pdfpage.Add(pdftotalcredits);

                        PdfTextArea pdfearnedcredits = new PdfTextArea(Fontarial7, System.Drawing.Color.Black, new PdfArea(doc, 150, 602, 100, 50), System.Drawing.ContentAlignment.BottomLeft, Convert.ToString(earncrd).Trim());
                        pdfpage.Add(pdfearnedcredits);

                        PdfTextArea pdfgpa = new PdfTextArea(Fontarial7, System.Drawing.Color.Black, new PdfArea(doc, 435, 580, 100, 50), System.Drawing.ContentAlignment.BottomLeft, Convert.ToString(gpafn).Trim());
                        pdfpage.Add(pdfgpa);

                        PdfTextArea pdfcgpa = new PdfTextArea(Fontarial7, System.Drawing.Color.Black, new PdfArea(doc, 485, 600, 100, 50), System.Drawing.ContentAlignment.BottomLeft, Convert.ToString(cgpa).Trim());
                        pdfpage.Add(pdfcgpa);


                        #endregion

                        pdfpage.SaveToDocument();
                        pdfpage = doc.NewPage();

                        // pdfpage.Add(pr1);
                    }
                }
            }

            string apppath = HttpContext.Current.Server.MapPath("~");
            if (apppath != "")
            {
                string sz1path = apppath + "/Report/";
                string sz1File = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                doc.SaveToFile(sz1path + sz1File);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + sz1File);
                Response.ContentType = "application1/pdf";
                Response.WriteFile(sz1path + sz1File);
            }
        }

        catch (Exception ex)
        {
            //da.sendErrorMail(ex, collegeCode, "statementofmarks");
        }
    }


    public void ConsolidatedGradeStatement()
    {
        try
        {
            string lblerror1 = string.Empty;
            Boolean printpage1 = false;
            string edu_level = string.Empty;
            string degree = string.Empty;
            string monthandyear = string.Empty;
            string studname = string.Empty;
            string dob = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string exam_code = string.Empty;
            string sem = string.Empty;
            string branch = string.Empty;
            string monthstr = string.Empty;
            string sql2 = string.Empty;
            string sql3 = string.Empty;
            string roman = string.Empty;
            string semroman = string.Empty;
            string grade = string.Empty;
            string grade1 = string.Empty;
            string gradepoints = string.Empty;
            string gradepoints1 = string.Empty;
            string coe = string.Empty;
            string subjectcode_Part1 = string.Empty;
            string subjectcode_Part2 = string.Empty;
            string subjectcode_Part3 = string.Empty;
            string subjectcode_Part4 = string.Empty;
            string cal_gpa = string.Empty;
            string current_semester = string.Empty;
            string app_no = string.Empty;
            string subtype = string.Empty;
            string coesign = string.Empty;
            string gender = string.Empty;
            int month = 0;
            string regulation = string.Empty;
            string strMonthName = string.Empty;

            Font f1_cos10bold = new Font("Comic Sans MS", 10, FontStyle.Bold);
            Font f2_cos9bold = new Font("Comic Sans MS", 9, FontStyle.Bold);
            Font f3_arial10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font f4_arial7reg = new Font("Arial", 7, FontStyle.Regular);
            Font f4_arial7reg1 = new Font("Arial", 10, FontStyle.Regular);
            Font f5_pal10bold = new Font("Palatino Linotype", 9, FontStyle.Regular);
            PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(42.1, 29.7));
            PdfPage mypdfpage = mydoc.NewPage();

            DataSet printds = new DataSet();
            DataSet printds_new = new DataSet();
            DataSet printds_rows = new DataSet();
            DataSet gradeds = new DataSet();


            string sign = "select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
            ds.Clear();
            ds.Dispose();
            ds = da.select_method_wo_parameter(sign, "text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                coesign = Convert.ToString(ds.Tables[0].Rows[0]["coe"]).Trim();
            }


            for (int res = 1; res <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; res++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[res, 4].Value);
                if (isval == 1)
                {


                    PdfTextArea pdfcoename = new PdfTextArea(f3_arial10bold, System.Drawing.Color.Black, new PdfArea(mydoc, 563, 799, 500, 200), System.Drawing.ContentAlignment.TopRight, coesign);
                    mypdfpage.Add(pdfcoename);


                    #region coesign
                    string coesignphtsql = string.Empty;
                    coesignphtsql = "select coe_signature from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                    MemoryStream memoryStream = new MemoryStream();
                    DataSet dscoesig = new DataSet();
                    // DataSet dsstdpho = new DataSet();
                    dscoesig.Clear();
                    dscoesig.Dispose();
                    dscoesig = da.select_method_wo_parameter(coesignphtsql, "Text");
                    if (dscoesig.Tables.Count > 0 && dscoesig.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dscoesig.Tables[0].Rows[0][0]).Trim()))
                    {
                        byte[] file = (byte[])dscoesig.Tables[0].Rows[0][0];
                        memoryStream.Write(file, 0, file.Length);
                        if (file.Length > 0)
                        {
                            System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                            System.Drawing.Image thumb = imgx.GetThumbnailImage(250, 250, null, IntPtr.Zero);
                            if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                            {
                            }
                            else
                            {
                                thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                            }
                        }
                    }
                    if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                    {
                        PdfImage coesiImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"));
                        mypdfpage.Add(coesiImage2, 935, 712, 230);
                    }
                    else
                    {
                        PdfImage coesiImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                        mypdfpage.Add(coesiImage2, 935, 712, 230);
                    }

                    #endregion

                    printds.Clear();
                    printds.Dispose();
                    printds_new.Clear();
                    printds_new.Dispose();
                    rollnosub = FpSpread2.Sheets[0].Cells[res, 1].Text;
                    regnumber = FpSpread2.Sheets[0].Cells[res, 2].Text;
                    string sql = "SELECT Reg_No,sex,r.batch_year,r.app_no,r.degree_code,r.regulation,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,c.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
                    sql = sql + "  select count(s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail'  and roll_no='" + rollnosub + "'";
                    printds = da.select_method_wo_parameter(sql, "text");

                    if (printds.Tables.Count > 0 && printds.Tables[0].Rows.Count > 0)
                    {
                        if (printds.Tables[3].Rows.Count == printds.Tables[4].Rows.Count)
                        {
                            printpage1 = true;
                            studname = Convert.ToString(printds.Tables[0].Rows[0]["Stud_Name"]).Trim();
                            regnumber = Convert.ToString(printds.Tables[0].Rows[0]["Reg_No"]).Trim();
                            batch_year = Convert.ToString(printds.Tables[0].Rows[0]["batch_year"]).Trim();
                            degree = Convert.ToString(printds.Tables[0].Rows[0]["Degree"]).Trim().ToUpper();
                            degree_code = Convert.ToString(printds.Tables[0].Rows[0]["degree_code"]).Trim();
                            PdfTextArea pdfdegree = new PdfTextArea(f3_arial10bold, System.Drawing.Color.Black, new PdfArea(mydoc, 403, 78, 100, 50), System.Drawing.ContentAlignment.TopRight, Convert.ToString(degree));
                            mypdfpage.Add(pdfdegree);


                            branch = Convert.ToString(printds.Tables[0].Rows[0]["Dept_name"]).Trim().ToUpper();
                            string degreedept = Convert.ToString(degree).Trim() + "  " + Convert.ToString(branch).Trim();
                            regulation = Convert.ToString(printds.Tables[0].Rows[0]["regulation"]).Trim();

                            string appNo = Convert.ToString(printds.Tables[0].Rows[0]["App_No"]).Trim();
                            string displayFolioNumber = string.Empty;
                            bool isHasFolioNumber = getFolioNumber(appNo, ref displayFolioNumber);
                            if (isHasFolioNumber)
                            {
                                PdfTextArea pdffoliono1 = new PdfTextArea(f4_arial7reg, System.Drawing.Color.Black, new PdfArea(mydoc, 1000, 35, 100, 50), System.Drawing.ContentAlignment.TopRight, Convert.ToString(displayFolioNumber));
                                mypdfpage.Add(pdffoliono1);
                            }

                            gender = Convert.ToString(printds.Tables[0].Rows[0]["sex"]).Trim();
                            if (gender == "0")
                            {
                                gender = "Male";
                            }
                            else if (gender == "1")
                            {
                                gender = "Female";
                            }

                            dob = Convert.ToString(printds.Tables[0].Rows[0]["dob"]).Trim();
                            string[] spl2 = dob.Split('/');
                            DateTime dati = Convert.ToDateTime(spl2[1] + '/' + spl2[0] + '/' + spl2[2]);
                            string DOB = dati.ToString();
                            string ddate = dati.ToString("dd");
                            string dmonth = dati.ToString("MM");
                            string dyear = dati.ToString("yyyy");
                            dob = Convert.ToString(ddate + "-" + dmonth + "-" + dyear).Trim();

                            int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                            monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();
                            strMonthName = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                            monthandyear = strMonthName + "  " + Convert.ToString(ddlYear.SelectedItem.Text).Trim();
                            monthandyear = monthandyear.ToUpper();


                            regulation = Convert.ToString(printds.Tables[0].Rows[0]["regulation"]).Trim();



                            #region(stud photo)

                            string stdphtsql = string.Empty;
                            stdphtsql = "select * from StdPhoto where app_no='" + appNo + "'";
                            MemoryStream memoryStream1 = new MemoryStream();
                            DataSet dsstdpho = new DataSet();
                            dsstdpho.Clear();
                            dsstdpho.Dispose();
                            dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                            if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dsstdpho.Tables[0].Rows[0][1]).Trim()))
                            {
                                byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                                memoryStream1.Write(file, 0, file.Length);
                                if (file.Length > 0)
                                {
                                    System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream1, true, true);
                                    System.Drawing.Image thumb = imgx.GetThumbnailImage(190, 190, null, IntPtr.Zero);
                                    if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg")))
                                    {
                                    }
                                    else
                                    {
                                        thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                    }
                                }
                            }
                            if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg")))
                            {
                                PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + appNo + ".jpeg"));
                                mypdfpage.Add(LogoImage2, 1060, 20, 260);
                            }
                            else
                            {
                                PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                mypdfpage.Add(LogoImage2, 1060, 20, 260);
                            }
                            #endregion



                            #region studdetails

                            PdfTable tblstuddetails = mydoc.NewTable(f4_arial7reg, 3, 6, 4);
                            tblstuddetails.VisibleHeaders = false;
                            tblstuddetails.SetBorders(Color.Blue, 1, BorderType.CompleteGrid);
                            tblstuddetails.Columns[0].SetWidth(25);
                            tblstuddetails.Columns[1].SetWidth(90);
                            tblstuddetails.Columns[2].SetWidth(10);
                            tblstuddetails.Columns[3].SetWidth(20);
                            tblstuddetails.Columns[4].SetWidth(30);
                            tblstuddetails.Columns[5].SetWidth(50);

                            tblstuddetails.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblstuddetails.Cell(0, 0).SetContent("Name of The Candidate");
                            tblstuddetails.Cell(0, 0).SetColors(Color.Blue, Color.White);
                            tblstuddetails.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblstuddetails.Cell(0, 1).SetContent(studname);
                            foreach (PdfCell pc in tblstuddetails.CellRange(0, 1, 0, 1).Cells)
                            {
                                pc.ColSpan = 3;
                            }
                            tblstuddetails.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblstuddetails.Cell(0, 4).SetContent("Registration Number");
                            tblstuddetails.Cell(0, 4).SetColors(Color.Blue, Color.White);
                            tblstuddetails.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblstuddetails.Cell(0, 5).SetContent(regnumber);

                            tblstuddetails.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblstuddetails.Cell(1, 0).SetContent("Date of Birth");
                            tblstuddetails.Cell(1, 0).SetColors(Color.Blue, Color.White);
                            tblstuddetails.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblstuddetails.Cell(1, 1).SetContent(dob);

                            tblstuddetails.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblstuddetails.Cell(1, 2).SetContent("Gender");
                            tblstuddetails.Cell(1, 2).SetColors(Color.Blue, Color.White);
                            tblstuddetails.Cell(1, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblstuddetails.Cell(1, 3).SetContent(gender);
                            tblstuddetails.Cell(2, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblstuddetails.Cell(2, 4).SetContent("Month & Year of Last Appearance");
                            tblstuddetails.Cell(2, 4).SetColors(Color.Blue, Color.White);
                            tblstuddetails.Cell(2, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblstuddetails.Cell(2, 5).SetContent(monthandyear);

                            tblstuddetails.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblstuddetails.Cell(2, 0).SetContent("Programme & Branch");
                            tblstuddetails.Cell(2, 0).SetColors(Color.Blue, Color.White);
                            tblstuddetails.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblstuddetails.Cell(2, 1).SetContent(degreedept);
                            foreach (PdfCell pc in tblstuddetails.CellRange(2, 1, 2, 1).Cells)
                            {
                                pc.ColSpan = 3;
                            }
                            tblstuddetails.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblstuddetails.Cell(1, 4).SetContent("Regulations");
                            tblstuddetails.Cell(1, 4).SetColors(Color.Blue, Color.White);
                            tblstuddetails.Cell(1, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                            tblstuddetails.Cell(1, 5).SetContent(regulation);


                            PdfTablePage tblpage = tblstuddetails.CreateTablePage(new PdfArea(mydoc, 28, 117, 1147, 770));
                            mypdfpage.Add(tblpage);

                            #endregion

                            #region semdetails

                            sql3 = "select sm.semester,Subject_Type,subject_name,subject_code,s.subject_no,result,max_int_marks,max_ext_marks,internal_mark,external_mark,total,maxtotal,grade,cp,credit_points,me.subject_no,semester,maxtotal,exam_code from Mark_Entry me,Subject s,sub_sem sem,syllabus_master sm  where sm.syll_code=s.syll_code and me.Subject_No = s.Subject_No and s.subtype_no= sem.subtype_no and  result in ('pass','sa')  and roll_no='" + rollnosub + "'  order by sm.semester,s.subjectpriority";

                            printds_rows.Clear();
                            printds_rows.Dispose();
                            printds_rows = da.select_method_wo_parameter(sql3, "text");


                            PdfTable studsemdetails = mydoc.NewTable(f4_arial7reg, 55, 9, 1.9);
                            studsemdetails.VisibleHeaders = false;
                            studsemdetails.SetBorders(Color.Black, 1, BorderType.None);
                            studsemdetails.Columns[0].SetWidth(10);
                            studsemdetails.Columns[1].SetWidth(15);
                            studsemdetails.Columns[2].SetWidth(80);
                            studsemdetails.Columns[3].SetWidth(10);
                            studsemdetails.Columns[4].SetWidth(10);
                            studsemdetails.Columns[5].SetWidth(10);
                            studsemdetails.Columns[6].SetWidth(23);
                            studsemdetails.Columns[7].SetWidth(15);
                            studsemdetails.Columns[8].SetWidth(15);

                            int rowcount = printds_rows.Tables[0].Rows.Count + 5;

                            PdfTable studsemdetails1 = mydoc.NewTable(f4_arial7reg, rowcount, 9, 1.9);
                            studsemdetails1.VisibleHeaders = false;
                            studsemdetails1.SetBorders(Color.Black, 1, BorderType.None);
                            studsemdetails1.Columns[0].SetWidth(10);
                            studsemdetails1.Columns[1].SetWidth(15);
                            studsemdetails1.Columns[2].SetWidth(80);
                            studsemdetails1.Columns[3].SetWidth(10);
                            studsemdetails1.Columns[4].SetWidth(10);
                            studsemdetails1.Columns[5].SetWidth(10);
                            studsemdetails1.Columns[6].SetWidth(23);
                            studsemdetails1.Columns[7].SetWidth(15);
                            studsemdetails1.Columns[8].SetWidth(15);

                            string semester1 = string.Empty;
                            sem = Convert.ToString(printds_rows.Tables[0].Rows[0]["semester"]).Trim();
                            int j = 0;
                            double sumofcrdit = 0;
                            double sumofGPA = 0;
                            double gpa = 0;
                            double CGPA = 0;
                            double gpvAl = 0;
                            string sems1 = string.Empty;
                            double earncredits = 0;
                            int i1 = 0;
                            int j1 = 0;
                            double partwpsum = 0;
                            double partsums = 0;
                            double overalltotgrade = 0;
                            double overallcredit = 0;
                            if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                            {

                                for (int i = 0; i < printds_rows.Tables[0].Rows.Count; i++)
                                {
                                    sems1 = Convert.ToString(printds_rows.Tables[0].Rows[i]["semester"]).Trim();
                                    double internalmark;
                                    double externalmark;
                                    double totalintext = 0;
                                    double extfinal = 0;
                                    double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["internal_mark"]), out internalmark);
                                    //double intnew = Math.Round(internalmark
                                    double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["external_mark"]), out extfinal);
                                    extfinal = Math.Round(extfinal, 0);
                                    externalmark = extfinal;
                                    string checkedmark = string.Empty;
                                    if (extfinal < 0)
                                    {
                                        checkedmark = loadmarkat(Convert.ToString(extfinal));
                                    }
                                    else
                                    {
                                        checkedmark = Convert.ToString(extfinal);
                                    }
                                    if (internalmark >= 0)
                                    {
                                        if (extfinal > 0)
                                        {
                                            totalintext = internalmark + externalmark;
                                        }
                                        else
                                        {
                                            totalintext = internalmark;
                                        }

                                    }
                                    else
                                    {
                                        if (extfinal > 0)
                                        {
                                            totalintext = externalmark;
                                        }
                                        else
                                        {
                                            totalintext = 0;
                                        }
                                    }
                                    double totfinal;
                                    totfinal = Math.Round(totalintext, 0);
                                    double checkmark1;
                                    string lettergrade = string.Empty;
                                    double.TryParse(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]), out checkmark1);
                                    string gradesql = string.Empty;

                                    gradesql = "select* from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + checkmark1 + "' between Frange and Trange ";
                                    gradeds.Clear();
                                    gradeds = da.select_method_wo_parameter(gradesql, "text");

                                    if (gradeds.Tables.Count > 0 && gradeds.Tables[0].Rows.Count > 0)
                                    {
                                        for (int grd = 0; grd < gradeds.Tables[0].Rows.Count; grd++)
                                        {

                                            grade = Convert.ToString(gradeds.Tables[0].Rows[grd][0]).Trim();
                                            gradepoints = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();
                                            lettergrade = Convert.ToString(gradeds.Tables[0].Rows[grd]["Credit_Points"]).Trim();

                                        }
                                    }
                                    double gradeibtpoint = 0;
                                    double.TryParse(Convert.ToString(Convert.ToString(printds_rows.Tables[0].Rows[i]["total"]).Trim()), out gradeibtpoint);

                                    string result = Convert.ToString(printds_rows.Tables[0].Rows[i]["result"]).ToLower();
                                    if (result == "fail")
                                    {
                                        result = "RA";
                                        grade = "U";
                                    }
                                    else if (result == "pass")
                                    {
                                        result = "P";
                                    }
                                    else
                                    {
                                        result = "AB";
                                        grade = "U";
                                    }



                                    DataView dv = new DataView();
                                    printds.Tables[2].DefaultView.RowFilter = "exam_code='" + Convert.ToString(printds_rows.Tables[0].Rows[i]["exam_code"]).Trim() + "'";
                                    dv = printds.Tables[2].DefaultView;
                                    string strMonthName1 = string.Empty;
                                    if (dv.Count > 0)
                                    {
                                        string exam_y1 = Convert.ToString(dv[0]["Exam_year"]).Trim();
                                        string exam_m1 = Convert.ToString(dv[0]["Exam_Month"]).Trim();
                                        strMonthName1 = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m1));
                                        strMonthName1 = Convert.ToString(strMonthName1[0]).Trim() + Convert.ToString(strMonthName1[1]).Trim() + Convert.ToString(strMonthName1[2]).Trim();
                                        strMonthName1 = strMonthName1 + " " + exam_y1 + " ";
                                    }

                                    string creditPoint = string.Empty;
                                    creditPoint = Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]);


                                    string coursecode = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]);
                                    string coursetitle = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim().ToUpper();
                                    string credit = Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]);


                                    if (i <= 44)
                                    {

                                        if (semester1 != sems1 && semester1 != "")
                                        {
                                            i1 = 0;
                                            double nosum = 0;
                                            double.TryParse(semester1, out nosum);

                                            overalltotgrade += partsums;
                                            overallcredit += earncredits;
                                            partsums = (partsums / earncredits);
                                            partsums = Math.Round(partsums, 3);
                                            partwpsum = (partwpsum / earncredits);
                                            partwpsum = Math.Round(partwpsum, 3);
                                            string sumpart = string.Format("{0:0.00}", partsums);

                                            CGPA = overalltotgrade / overallcredit;
                                            string displayPartWiseCGPA = string.Format("{0:0.00}", CGPA);
                                            studsemdetails.Cell(j1, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            studsemdetails.Cell(j1, 7).SetContent(sumpart);
                                            studsemdetails.Cell(j1, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            studsemdetails.Cell(j1, 8).SetContent(displayPartWiseCGPA);
                                            gpa = 0;
                                            gpvAl = 0;
                                            sumofcrdit = 0;
                                            partwpsum = 0;
                                            partsums = 0;
                                            // overalltotgrade = 0;
                                            earncredits = 0;
                                            i++;
                                            i1++;
                                            j1++;

                                        }

                                        string semester = Convert.ToString(printds_rows.Tables[0].Rows[i]["semester"]);
                                        if (semester == "1")
                                        {
                                            semester = "I";
                                        }
                                        else if (semester == "2")
                                        {
                                            semester = "II";
                                        }
                                        else if (semester == "3")
                                        {
                                            semester = "III";
                                        }
                                        else if (semester == "4")
                                        {
                                            semester = "IV";
                                        }
                                        else if (semester == "5")
                                        {
                                            semester = "V";

                                        }
                                        else if (semester == "6")
                                        {
                                            semester = "VI";
                                        }
                                        else if (semester == "7")
                                        {
                                            semester = "VII";

                                        }
                                        else if (semester == "8")
                                        {
                                            semester = "VIII";
                                        }
                                        else if (semester == "9")
                                        {
                                            semester = "IX";
                                        }
                                        else if (semester == "10")
                                        {
                                            semester = "X";
                                        }
                                        studsemdetails.Cell(j1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        studsemdetails.Cell(j1, 0).SetContent(semester);


                                        studsemdetails.Cell(j1, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        studsemdetails.Cell(j1, 1).SetContent(coursecode);


                                        studsemdetails.Cell(j1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        studsemdetails.Cell(j1, 2).SetContent(coursetitle);


                                        studsemdetails.Cell(j1, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        studsemdetails.Cell(j1, 3).SetContent(credit);
                                        if (credit == "1")
                                        {
                                            grade = "-";
                                            lettergrade = "-";
                                        }

                                        studsemdetails.Cell(j1, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        studsemdetails.Cell(j1, 4).SetContent(lettergrade);


                                        studsemdetails.Cell(j1, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        studsemdetails.Cell(j1, 5).SetContent(grade);

                                        studsemdetails.Cell(j1, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        studsemdetails.Cell(j1, 6).SetContent(strMonthName1);

                                        double earnedCredit = 0;
                                        double gp = 0;
                                        if (Convert.ToDouble(credit) != 1)
                                        {
                                            partwpsum += Convert.ToDouble(creditPoint) * gradeibtpoint;
                                            partsums += Convert.ToDouble(creditPoint) * Convert.ToDouble(gradepoints);
                                            double.TryParse(creditPoint.Trim(), out earnedCredit);
                                            sumofcrdit = sumofcrdit + earnedCredit;
                                            earncredits = earncredits + earnedCredit;
                                        }

                                        // i = i - i1;
                                        j1++;

                                    }
                                    else
                                    {

                                        if (semester1 != sems1 && semester1 != "")
                                        {
                                            double nosum = 0;
                                            double.TryParse(semester1, out nosum);

                                            overalltotgrade += partsums;
                                            overallcredit += earncredits;

                                            partsums = (partsums / earncredits);
                                            partsums = Math.Round(partsums, 3);
                                            partwpsum = (partwpsum / earncredits);
                                            partwpsum = Math.Round(partwpsum, 3);
                                            string sumpart = string.Format("{0:0.00}", partsums);


                                            //if (gpvAl > 0 && sumofcrdit > 0)
                                            //    gpa = (double)((double)gpvAl / (double)sumofcrdit);

                                            //gpa = Math.Round(gpa, 2, MidpointRounding.AwayFromZero);
                                            //string displayPartWiseGPA = string.Format("{0:0.0}", gpa);

                                            //sumofGPA = sumofGPA + gpa;
                                            //CGPA = sumofGPA / nosum;
                                            //CGPA = Math.Round(CGPA, 2, MidpointRounding.AwayFromZero);
                                            //string displayPartWiseCGPA = string.Format("{0:0.0}", CGPA);

                                            CGPA = overalltotgrade / overallcredit;
                                            string displayPartWiseCGPA = string.Format("{0:0.00}", CGPA);
                                            studsemdetails1.Cell(j, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            studsemdetails1.Cell(j, 7).SetContent(sumpart);
                                            studsemdetails1.Cell(j, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            studsemdetails1.Cell(j, 8).SetContent(displayPartWiseCGPA);


                                            gpa = 0;
                                            gpvAl = 0;
                                            sumofcrdit = 0;
                                            partwpsum = 0;
                                            partsums = 0;
                                            //  overalltotgrade = 0;
                                            earncredits = 0;
                                            j++;
                                            i++;
                                            i1++;
                                        }
                                        string semester = Convert.ToString(printds_rows.Tables[0].Rows[i]["semester"]);
                                        if (semester == "1")
                                        {
                                            semester = "I";
                                        }
                                        else if (semester == "2")
                                        {
                                            semester = "II";
                                        }
                                        else if (semester == "3")
                                        {
                                            semester = "III";
                                        }
                                        else if (semester == "4")
                                        {
                                            semester = "IV";
                                        }
                                        else if (semester == "5")
                                        {
                                            semester = "V";

                                        }
                                        else if (semester == "6")
                                        {
                                            semester = "VI";
                                        }
                                        else if (semester == "7")
                                        {
                                            semester = "VII";

                                        }
                                        else if (semester == "8")
                                        {
                                            semester = "VIII";
                                        }
                                        else if (semester == "9")
                                        {
                                            semester = "IX";
                                        }
                                        else if (semester == "10")
                                        {
                                            semester = "X";
                                        }
                                        studsemdetails1.Cell(j, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        studsemdetails1.Cell(j, 0).SetContent(semester);

                                        // string coursecode = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_code"]);
                                        studsemdetails1.Cell(j, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        studsemdetails1.Cell(j, 1).SetContent(coursecode);

                                        //string coursetitle = Convert.ToString(printds_rows.Tables[0].Rows[i]["subject_name"]).Trim().ToUpper();
                                        studsemdetails1.Cell(j, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        studsemdetails1.Cell(j, 2).SetContent(coursetitle);

                                        // string credit = Convert.ToString(printds_rows.Tables[0].Rows[i]["credit_points"]);
                                        studsemdetails1.Cell(j, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        studsemdetails1.Cell(j, 3).SetContent(credit);

                                        if (credit == "1")
                                        {
                                            grade = "-";
                                            lettergrade = "-";
                                        }

                                        studsemdetails1.Cell(j, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        studsemdetails1.Cell(j, 4).SetContent(lettergrade);



                                        studsemdetails1.Cell(j, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        studsemdetails1.Cell(j, 5).SetContent(grade);

                                        studsemdetails1.Cell(j, 6).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        studsemdetails1.Cell(j, 6).SetContent(strMonthName1);

                                        double earnedCredit = 0;
                                        double gp = 0;
                                        if (Convert.ToDouble(credit) != 1)
                                        {

                                            partwpsum += Convert.ToDouble(creditPoint) * gradeibtpoint;
                                            partsums += Convert.ToDouble(creditPoint) * Convert.ToDouble(gradepoints);
                                            double.TryParse(creditPoint.Trim(), out earnedCredit);
                                            sumofcrdit = sumofcrdit + earnedCredit;
                                            earncredits = earncredits + earnedCredit;
                                        }

                                        j = j + 1;
                                    }
                                    if (i1 != 0)
                                    {
                                        i--;
                                        i1 = 0;
                                    }
                                    semester1 = sems1;


                                }
                            }
                            double nosum1 = 0;
                            double.TryParse(sems1, out nosum1);
                            overalltotgrade += partsums;
                            overallcredit += earncredits;
                            partsums = (partsums / earncredits);
                            partsums = Math.Round(partsums, 3);
                            partwpsum = (partwpsum / earncredits);
                            partwpsum = Math.Round(partwpsum, 3);
                            string sumpart1 = string.Format("{0:0.00}", partsums);


                            CGPA = overalltotgrade / overallcredit;
                            string displayPartWiseCGPA1 = string.Format("{0:0.00}", CGPA);
                            //if (gpvAl > 0 && sumofcrdit > 0)
                            //    gpa = (double)((double)gpvAl / (double)sumofcrdit);

                            //gpa = Math.Round(gpa, 2, MidpointRounding.AwayFromZero);
                            //string displayPartWiseGPA1 = string.Format("{0:0.0}", gpa);

                            //sumofGPA = sumofGPA + gpa;
                            //CGPA = sumofGPA / nosum1;
                            //CGPA = Math.Round(CGPA, 2, MidpointRounding.AwayFromZero);
                            //string displayPartWiseCGPA1 = string.Format("{0:0.0}", CGPA);
                            studsemdetails1.Cell(j, 7).SetContentAlignment(ContentAlignment.MiddleCenter);
                            studsemdetails1.Cell(j, 7).SetContent(sumpart1);
                            studsemdetails1.Cell(j, 8).SetContentAlignment(ContentAlignment.MiddleCenter);
                            studsemdetails1.Cell(j, 8).SetContent(displayPartWiseCGPA1);

                            j++;
                            studsemdetails1.Cell(j, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                            studsemdetails1.Cell(j, 2).SetContent("***End of Statement***");

                            string creditpaper = txtcreditpap.Text;

                            studsemdetails1.Cell(j + 2, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                            studsemdetails1.Cell(j + 2, 2).SetContent("Number of One Credit Courses Undergone : " + creditpaper + "");

                            tblpage = studsemdetails.CreateTablePage(new PdfArea(mydoc, 25, 196, 570, 630));

                            mypdfpage.Add(tblpage);

                            tblpage = studsemdetails1.CreateTablePage(new PdfArea(mydoc, 610, 196, 570, 440));
                            mypdfpage.Add(tblpage);

                            #endregion

                            string class1 = string.Empty;


                            if (Convert.ToDouble(displayPartWiseCGPA1) >= 8.5 && Convert.ToDouble(displayPartWiseCGPA1) <= 10)
                            {
                                string atmpt = d2.GetFunctionv("select distinct me.attempts from Mark_Entry me,Subject s,sub_sem sem,syllabus_master sm  where sm.syll_code=s.syll_code and me.Subject_No = s.Subject_No and s.subtype_no= sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'  order by me.attempts desc");
                                if (Convert.ToInt32(atmpt) > 1)
                                {
                                    class1 = "First Class";
                                }
                                else
                                {
                                    class1 = "First Class With Distinction";
                                }
                            }
                            else if (Convert.ToDouble(displayPartWiseCGPA1) >= 6.5 && Convert.ToDouble(displayPartWiseCGPA1) <= 8.49)
                            {
                                class1 = "First Class";
                            }
                            else if (Convert.ToDouble(displayPartWiseCGPA1) <= 6.49)
                            {
                                class1 = "Second Class";
                            }
                            //else
                            //{
                            //    class1 = "Third Class";
                            //}


                            //horizontal line1
                            PdfLine p1 = new PdfLine(mydoc, new Point(28, 162), new Point(1175, 162), Color.Blue, 1);
                            mypdfpage.Add(p1);
                            //horizontal line2
                            PdfLine p4 = new PdfLine(mydoc, new Point(28, 190), new Point(590, 190), Color.Blue, 1);
                            mypdfpage.Add(p4);
                            //horizontal line3
                            PdfLine p24 = new PdfLine(mydoc, new Point(608, 190), new Point(1174, 190), Color.Blue, 1);
                            mypdfpage.Add(p24);
                            //horizontal line4
                            PdfLine p5 = new PdfLine(mydoc, new Point(28, 743), new Point(590, 743), Color.Blue, 1);
                            mypdfpage.Add(p5);
                            //horizontal line5
                            PdfLine p25 = new PdfLine(mydoc, new Point(608, 624), new Point(1175, 624), Color.Blue, 1);
                            mypdfpage.Add(p25);

                            //vertical line 20
                            PdfLine p6 = new PdfLine(mydoc, new Point(1175, 162), new Point(1175, 624), Color.Blue, 1);
                            mypdfpage.Add(p6);
                            //vertical line 1
                            PdfLine p2 = new PdfLine(mydoc, new Point(28, 162), new Point(28, 743), Color.Blue, 1);
                            mypdfpage.Add(p2);
                            //vertical line 2
                            PdfLine p3 = new PdfLine(mydoc, new Point(55, 162), new Point(55, 743), Color.Blue, 1);
                            mypdfpage.Add(p3);
                            //vertical line 3
                            PdfLine p7 = new PdfLine(mydoc, new Point(100, 162), new Point(100, 743), Color.Blue, 1);
                            mypdfpage.Add(p7);

                            //vertical line 4
                            PdfLine p8 = new PdfLine(mydoc, new Point(340, 162), new Point(340, 743), Color.Blue, 1);
                            mypdfpage.Add(p8);
                            //vertical line 5
                            PdfLine p10 = new PdfLine(mydoc, new Point(373, 162), new Point(373, 743), Color.Blue, 1);
                            mypdfpage.Add(p10);
                            //vertical line 6
                            PdfLine p9 = new PdfLine(mydoc, new Point(405, 162), new Point(405, 743), Color.Blue, 1);
                            mypdfpage.Add(p9);
                            //vertical line 7
                            PdfLine p11 = new PdfLine(mydoc, new Point(435, 162), new Point(435, 743), Color.Blue, 1);
                            mypdfpage.Add(p11);
                            //vertical line 8
                            PdfLine p12 = new PdfLine(mydoc, new Point(510, 162), new Point(510, 743), Color.Blue, 1);
                            mypdfpage.Add(p12);
                            //vertical line 9
                            PdfLine p13 = new PdfLine(mydoc, new Point(550, 162), new Point(550, 743), Color.Blue, 1);
                            mypdfpage.Add(p13);
                            //vertical line 10
                            PdfLine p14 = new PdfLine(mydoc, new Point(590, 162), new Point(590, 743), Color.Blue, 1);
                            mypdfpage.Add(p14);
                            //vertical line 11
                            PdfLine p15 = new PdfLine(mydoc, new Point(608, 162), new Point(608, 624), Color.Blue, 1);
                            mypdfpage.Add(p15);
                            //vertical line 12
                            PdfLine p16 = new PdfLine(mydoc, new Point(638, 162), new Point(638, 624), Color.Blue, 1);
                            mypdfpage.Add(p16);
                            //vertical line 13
                            PdfLine p17 = new PdfLine(mydoc, new Point(685, 162), new Point(685, 624), Color.Blue, 1);
                            mypdfpage.Add(p17);
                            //vertical line 14
                            PdfLine p18 = new PdfLine(mydoc, new Point(927, 162), new Point(927, 624), Color.Blue, 1);
                            mypdfpage.Add(p18);
                            //vertical line 15
                            PdfLine p19 = new PdfLine(mydoc, new Point(959, 162), new Point(959, 624), Color.Blue, 1);
                            mypdfpage.Add(p19);
                            //vertical line 16
                            PdfLine p20 = new PdfLine(mydoc, new Point(989, 162), new Point(989, 624), Color.Blue, 1);
                            mypdfpage.Add(p20);
                            //vertical line 17
                            PdfLine p21 = new PdfLine(mydoc, new Point(1019, 162), new Point(1019, 624), Color.Blue, 1);
                            mypdfpage.Add(p21);
                            //vertical line 18
                            PdfLine p22 = new PdfLine(mydoc, new Point(1088, 162), new Point(1088, 624), Color.Blue, 1);
                            mypdfpage.Add(p22);
                            //vertical line 18
                            PdfLine p23 = new PdfLine(mydoc, new Point(1130, 162), new Point(1130, 624), Color.Blue, 1);
                            mypdfpage.Add(p23);




                            PdfTextArea pdfheader = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 32, 149, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Sem."));
                            mypdfpage.Add(pdfheader);
                            PdfTextArea pdfheader1 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 60, 149, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Course"));
                            mypdfpage.Add(pdfheader1);
                            PdfTextArea pdfheader2 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 62, 158, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Code"));
                            mypdfpage.Add(pdfheader2);
                            PdfTextArea pdfheader3 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 180, 149, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Course Title"));
                            mypdfpage.Add(pdfheader3);
                            PdfTextArea pdfheader4 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 343, 149, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Credit"));
                            mypdfpage.Add(pdfheader4);
                            PdfTextArea pdfheader5 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 377, 149, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Grade"));
                            mypdfpage.Add(pdfheader5);
                            PdfTextArea pdfheader6 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 378, 158, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Point"));
                            mypdfpage.Add(pdfheader6);
                            PdfTextArea pdfheader7 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 408, 149, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Letter"));
                            mypdfpage.Add(pdfheader7);
                            PdfTextArea pdfheader8 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 407, 158, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Grade"));
                            mypdfpage.Add(pdfheader8);
                            PdfTextArea pdfheader9 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 445, 149, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Month & Year"));
                            mypdfpage.Add(pdfheader9);
                            PdfTextArea pdfheader10 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 449, 158, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("of Passing"));
                            mypdfpage.Add(pdfheader10);
                            PdfTextArea pdfheader11 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 519, 149, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("GPA"));
                            mypdfpage.Add(pdfheader11);
                            PdfTextArea pdfheader12 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 556, 149, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("CGPA"));
                            mypdfpage.Add(pdfheader12);
                            PdfTextArea pdfheader13 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 613, 149, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Sem."));
                            mypdfpage.Add(pdfheader13);
                            PdfTextArea pdfheader14 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 645, 149, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Course"));
                            mypdfpage.Add(pdfheader14);
                            PdfTextArea pdfheader15 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 647, 158, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Code"));
                            mypdfpage.Add(pdfheader15);
                            PdfTextArea pdfheader16 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 777, 149, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Course Title"));
                            mypdfpage.Add(pdfheader16);
                            PdfTextArea pdfheader17 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 929, 149, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Credit"));
                            mypdfpage.Add(pdfheader17);
                            PdfTextArea pdfheader18 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 960, 149, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Grade"));
                            mypdfpage.Add(pdfheader18);
                            PdfTextArea pdfheader19 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 960, 158, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Point"));
                            mypdfpage.Add(pdfheader19);
                            PdfTextArea pdfheader20 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 991, 149, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Letter"));
                            mypdfpage.Add(pdfheader20);
                            PdfTextArea pdfheader21 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 992, 158, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Grade"));
                            mypdfpage.Add(pdfheader21);
                            PdfTextArea pdfheader22 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 1025, 149, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("Month & Year"));
                            mypdfpage.Add(pdfheader22);
                            PdfTextArea pdfheader23 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 1027, 158, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("of Passing"));
                            mypdfpage.Add(pdfheader23);
                            PdfTextArea pdfheader24 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 1098, 149, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("GPA"));
                            mypdfpage.Add(pdfheader24);
                            PdfTextArea pdfheader25 = new PdfTextArea(f5_pal10bold, System.Drawing.Color.Blue, new PdfArea(mydoc, 1138, 149, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString("CGPA"));
                            mypdfpage.Add(pdfheader25);




                            PdfTextArea pdfclass = new PdfTextArea(f4_arial7reg1, System.Drawing.Color.Black, new PdfArea(mydoc, 795, 609, 500, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString(class1));
                            mypdfpage.Add(pdfclass);

                            string creittxt = string.Empty;
                            string credittxt = txtcreditpap.Text;
                            if (credittxt.ToUpper() == "ONE")
                            {
                                creittxt = "1";
                            }
                            else if (credittxt.ToUpper() == "TWO")
                            {
                                creittxt = "2";
                            }
                            else if (credittxt.ToUpper() == "THREE")
                            {
                                creittxt = "3";
                            }
                            else if (credittxt.ToUpper() == "FOUR")
                            {
                                creittxt = "4";
                            }
                            else if (credittxt.ToUpper() == "FIVE")
                            {
                                creittxt = "5";
                            }
                            else if (credittxt.ToUpper() == "SIX")
                            {
                                creittxt = "6";
                            }
                            else if (credittxt.ToUpper() == "SEVEN")
                            {
                                creittxt = "7";
                            }
                            else if (credittxt.ToUpper() == "EIGHT")
                            {
                                creittxt = "8";
                            }
                            else if (credittxt.ToUpper() == "NINE")
                            {
                                creittxt = "9";
                            }
                            else if (credittxt.ToUpper() == "TEN")
                            {
                                creittxt = "10";
                            }
                            string earncrd = string.Empty;
                            if (!string.IsNullOrEmpty(creittxt))
                            {
                                earncrd = Convert.ToString(overallcredit) + "+" + creittxt;
                            }
                            else
                            {
                                earncrd = Convert.ToString(overallcredit);
                            }
                            PdfTextArea pdfcgpa = new PdfTextArea(f4_arial7reg1, System.Drawing.Color.Black, new PdfArea(mydoc, 795, 626, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString(earncrd));
                            mypdfpage.Add(pdfcgpa);

                            string currdate = DateTime.Now.ToString("dd-MM-yyyy");

                            PdfTextArea pdfdate = new PdfTextArea(f4_arial7reg1, System.Drawing.Color.Black, new PdfArea(mydoc, 56, 730, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString(currdate));
                            mypdfpage.Add(pdfdate);

                            mypdfpage.SaveToDocument();
                            mypdfpage = mydoc.NewPage();

                        }
                    }
                }
            }
            if (printpage1 == true)
            {
                string appath = HttpContext.Current.Server.MapPath("~");
                if (appath != "")
                {
                    string szpath = appath + "/Report/";
                    string szfile = "Consolidate" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmSS") + ".pdf";
                    mydoc.SaveToFile(szpath + szfile);
                    Response.ClearHeaders();
                    Response.AddHeader("content-Disposition", "attachment; filename=" + szfile);
                    Response.ContentType = "application/pdf";
                    Response.WriteFile(szpath + szfile);

                }
            }


        }
        catch
        {
        }
    }

    public void PGConsolidatedGradeStatement()
    {
        try
        {
            string monthstr = string.Empty;
            string monthandyear = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            Font f1_cos10bold = new Font("Comic Sans MS", 10, FontStyle.Bold);
            Font f1_cos10reg = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font header = new Font("Comic Sans MS", 7, FontStyle.Regular);
            Font f1_cos5reg = new Font("Comic Sans MS", 8, FontStyle.Regular);
            Font f1_cos10end = new Font("Comic Sans MS", 8, FontStyle.Bold);
            Font f2_cos9bold = new Font("Comic Sans MS", 9, FontStyle.Bold);
            Font f3_arial10bold = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font f4_arial7reg = new Font("Arial", 7, FontStyle.Regular);
            Font f5_pal10bold = new Font("Palatino Linotype", 10, FontStyle.Bold);
            PdfDocument doc = new PdfDocument(PdfDocumentFormat.InCentimeters(21, 29.8));
            PdfPage pdfpage = doc.NewPage();
            PdfArea tete = new PdfArea(doc, 10, 10, 567, 825);
            PdfRectangle pr1 = new PdfRectangle(doc, tete, Color.Black);

            string degree = string.Empty;
            string Collegename = string.Empty;
            string aff = string.Empty;
            string collacr = string.Empty;
            string dispin = string.Empty;
            string clgaddress = string.Empty;
            string univ = string.Empty;
            string pincode1 = string.Empty;
            string state = string.Empty;
            string dist = string.Empty;
            string studname = string.Empty;
            string rollnosub = string.Empty;
            string regnumber = string.Empty;
            string regno = string.Empty;
            string branch = string.Empty;
            string regulations = string.Empty;
            string dob = string.Empty;
            string follono = string.Empty;
            string gender = string.Empty;
            string publication = string.Empty;
            string category = string.Empty;
            string regulation = string.Empty;
            string grade = string.Empty;
            string grade_points = string.Empty;
            string coesign = string.Empty;
            int month = 0;
            string monandyr = string.Empty;
            string publicationdate = string.Empty;
            string dobdate = string.Empty;
            string pumonthname = string.Empty;
            string searialno = string.Empty;
            int togradee = 0;
            string folionumber = string.Empty;
            DataSet das1 = new DataSet();
            DataSet das2 = new DataSet();
            DataSet das3 = new DataSet();
            DataSet das4 = new DataSet();
            DataSet das5 = new DataSet();
            DataTable dt1 = new DataTable();
            DataTable dt2 = new DataTable();
            int partrowcount = 0;
            int partrowcount1 = 0;
            string batchYear = Convert.ToString(ddlbatch.SelectedValue);
            string degCode = Convert.ToString(ddlbranch.SelectedValue);
            string collCode = Convert.ToString(ddlCollege.SelectedValue);
            FpSpread2.SaveChanges();

            string sign = "select coe from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
            ds.Clear();
            ds.Dispose();
            ds = da.select_method_wo_parameter(sign, "text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                coesign = Convert.ToString(ds.Tables[0].Rows[0]["coe"]).Trim();
            }

            for (int smark = 1; smark <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; smark++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[smark, 4].Value);
                if (isval == 1)
                {
                    das1.Clear();
                    das1.Dispose();
                    das2.Clear();
                    das2.Dispose();
                    regno = FpSpread2.Sheets[0].Cells[smark, 2].Text;
                    rollnosub = FpSpread2.Sheets[0].Cells[smark, 1].Text;
                    string Classification = " select * from coe_classification ";
                    DataTable dtClass = dirAcc.selectDataTable(Classification);
                    string gradesql = "select* from Grade_Master where College_Code='" + collCode + "' and Degree_Code='" + degCode + "' and batch_year='" + batchYear + "'";
                    DataTable dtGradPoint = dirAcc.selectDataTable(gradesql);
                    //string regnumber = FpSpread2.Sheets[0].Cells[stmark, 2].Text;
                    string sql = "SELECT Reg_No,sex,r.batch_year,r.app_no,r.degree_code,r.regulation,R.current_semester,R.Stud_Name,Course_Name as degree,Dept_name,CONVERT(VARCHAR, dob, 103) as dob,c.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code AND Roll_No = '" + rollnosub + "' and r.college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' ;  select coe,principal from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "';select * from exam_details";
                    sql = sql + "  select count(s.subject_no) as total from subjectchooser sc,subject s,registration r where sc.roll_no=r.roll_no and s.subject_no=sc.subject_no and r.roll_no='" + rollnosub + "'";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'";
                    sql = sql + "  Select count(subject.subject_no) as total from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  result='fail'  and roll_no='" + rollnosub + "'";
                    das1 = da.select_method_wo_parameter(sql, "text");
                    DataSet printds_rows = new DataSet();

                    if (das1.Tables.Count > 0 && das1.Tables[0].Rows.Count > 0)
                    {


                        PdfTextArea pdfcoename = new PdfTextArea(f3_arial10bold, System.Drawing.Color.Black, new PdfArea(doc, 60, 798, 500, 200), System.Drawing.ContentAlignment.TopRight, coesign);
                        pdfpage.Add(pdfcoename);




                        #region coesign
                        string coesignphtsql = string.Empty;
                        coesignphtsql = "select coe_signature from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                        MemoryStream memoryStream1 = new MemoryStream();
                        DataSet dscoesig = new DataSet();
                        // DataSet dsstdpho = new DataSet();
                        dscoesig.Clear();
                        dscoesig.Dispose();
                        dscoesig = da.select_method_wo_parameter(coesignphtsql, "Text");
                        if (dscoesig.Tables.Count > 0 && dscoesig.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dscoesig.Tables[0].Rows[0][0]).Trim()))
                        {
                            byte[] file = (byte[])dscoesig.Tables[0].Rows[0][0];
                            memoryStream1.Write(file, 0, file.Length);
                            if (file.Length > 0)
                            {
                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream1, true, true);
                                System.Drawing.Image thumb = imgx.GetThumbnailImage(250, 250, null, IntPtr.Zero);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                                {
                                }
                                else
                                {
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                }
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                        {
                            PdfImage coesiImage2 = doc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"));
                            pdfpage.Add(coesiImage2, 428, 718, 240);
                        }
                        else
                        {
                            PdfImage coesiImage2 = doc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                            pdfpage.Add(coesiImage2, 428, 718, 240);
                        }

                        #endregion

                        string coursename = Convert.ToString(das1.Tables[0].Rows[0]["degree"]).Trim();
                        studname = Convert.ToString(das1.Tables[0].Rows[0]["stud_name"]).Trim();
                        string appno = Convert.ToString(das1.Tables[0].Rows[0]["app_no"]).Trim();
                        int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                        monthstr = Convert.ToString(ddlMonth.SelectedValue).Trim();

                        string gender1 = Convert.ToString(das1.Tables[0].Rows[0]["sex"]).Trim();
                        if (gender1.Trim() == "0")
                            gender1 = "MALE";
                        else if (gender1.Trim() == "1")
                            gender1 = "FEMALE";


                        #region(stud photo)

                        string stdphtsql = string.Empty;
                        stdphtsql = "select * from StdPhoto where app_no='" + appno + "'";
                        MemoryStream memoryStream = new MemoryStream();
                        DataSet dsstdpho = new DataSet();
                        dsstdpho.Clear();
                        dsstdpho.Dispose();
                        dsstdpho = da.select_method_wo_parameter(stdphtsql, "Text");
                        if (dsstdpho.Tables.Count > 0 && dsstdpho.Tables[0].Rows.Count > 0)
                        {
                            byte[] file = (byte[])dsstdpho.Tables[0].Rows[0][1];
                            memoryStream.Write(file, 0, file.Length);
                            if (file.Length > 0)
                            {
                                System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                System.Drawing.Image thumb = imgx.GetThumbnailImage(300, 300, null, IntPtr.Zero);
                                if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appno + ".jpeg")))
                                {
                                }
                                else
                                {
                                    thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + appno + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                }
                            }
                        }
                        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + appno + ".jpeg")))
                        {
                            PdfImage LogoImage2 = doc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + appno + ".jpeg"));
                            pdfpage.Add(LogoImage2, 510, 109, 380);
                        }
                        else
                        {
                            PdfImage LogoImage2 = doc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpeg"));
                            pdfpage.Add(LogoImage2, 510, 109, 380);
                        }
                        #endregion

                        string regulations1 = das1.Tables[0].Rows[0]["regulation"].ToString();
                        branch = das1.Tables[0].Rows[0]["dept_name"].ToString();
                        batch_year = Convert.ToString(das1.Tables[0].Rows[0]["batch_year"]).Trim();
                        degree_code = das1.Tables[0].Rows[0]["degree_code"].ToString();
                        degree = Convert.ToString(das1.Tables[0].Rows[0]["degree"]).Trim();
                        string sem = das1.Tables[0].Rows[0]["current_semester"].ToString();
                        string DOB = das1.Tables[0].Rows[0]["dob"].ToString();
                        string edulevel = das1.Tables[0].Rows[0]["edu_level"].ToString();
                        string sql3 = "select sm.semester,Subject_Type,subject_name,subject_code,s.subject_no,result,max_int_marks,max_ext_marks,internal_mark,external_mark,total,grade,cp,credit_points,maxtotal,me.exam_code,s.Part_Type,ed.Exam_Month,ed.Exam_year from Mark_Entry me,Subject s,sub_sem sem,syllabus_master sm,Exam_Details ed  where me.exam_code=ed.exam_code and sm.syll_code=s.syll_code and me.Subject_No = s.Subject_No and s.subtype_no= sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "' order by sm.semester,s.subjectpriority";
                        printds_rows.Clear();
                        printds_rows.Dispose();
                        printds_rows = da.select_method_wo_parameter(sql3, "text");
                        int rowCount = printds_rows.Tables[0].Rows.Count;

                        string sql5 = "select distinct ed.Exam_Month,ed.Exam_year from mark_entry me,Exam_Details ed  where ed.exam_code=me.exam_code and roll_no='" + rollnosub + "' order by ed.Exam_year desc, ed.Exam_Month desc";
                        DataSet monyr = d2.select_method_wo_parameter(sql5, "text");
                        string m_name = monyr.Tables[0].Rows[0]["Exam_Month"].ToString();
                        string mon_name = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(m_name));
                        string exm_yr = monyr.Tables[0].Rows[0]["Exam_year"].ToString();
                        int ex_year = Convert.ToInt32(exm_yr);
                        if (ex_year > Convert.ToInt32(batch_year))
                        {
                            exm_yr = Convert.ToString(mon_name) + '-' + Convert.ToString(exm_yr);
                        }

                        PdfTextArea ptcedulevel = new PdfTextArea(f1_cos10bold, System.Drawing.Color.Black,
                                                                  new PdfArea(doc, 179, 90, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString(das1.Tables[0].Rows[0]["degree"]).Trim());
                        pdfpage.Add(ptcedulevel);

                        #region studdetails

                        PdfTable pdtable = doc.NewTable(f1_cos10reg, 3, 5, 6);
                        pdtable.VisibleHeaders = false;
                        pdtable.SetBorders(Color.Black, 1, BorderType.None);
                        pdtable.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        pdtable.Columns[0].SetWidth(26);
                        pdtable.Columns[1].SetWidth(55);
                        pdtable.Columns[2].SetWidth(30);
                        pdtable.Columns[3].SetWidth(15);
                        pdtable.Columns[4].SetWidth(16);

                        pdtable.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        pdtable.Cell(0, 1).SetContent(Convert.ToString(studname).Trim());

                        pdtable.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                        pdtable.Cell(0, 4).SetContent(Convert.ToString(regno).Trim());

                        pdtable.Cell(1, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        pdtable.Cell(1, 1).SetContent(Convert.ToString(DOB).Trim());

                        string gnd = " " + gender1;
                        pdtable.Cell(1, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        pdtable.Cell(1, 2).SetContent(Convert.ToString(gnd).Trim());

                        pdtable.Cell(1, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                        pdtable.Cell(1, 4).SetContent(Convert.ToString(regulations1).Trim());

                        string degbranch = coursename + " " + branch;

                        pdtable.Cell(2, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                        pdtable.Cell(2, 1).SetContent(Convert.ToString(degbranch).Trim());

                        pdtable.Cell(2, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                        pdtable.Cell(2, 4).SetContent(Convert.ToString(exm_yr).Trim());///monandyr

                        foreach (PdfCell pc in pdtable.CellRange(2, 1, 2, 1).Cells)
                        {
                            pc.ColSpan = 2;
                        }
                        ///
                        Gios.Pdf.PdfTablePage mypdfpage2 = pdtable.CreateTablePage(new Gios.Pdf.PdfArea(doc, 16, 178, 550, 650));
                        pdfpage.Add(mypdfpage2);

                        #endregion

                        DataTable dicsem = printds_rows.Tables[0].DefaultView.ToTable(true, "semester");
                        int countRow = rowCount + dicsem.Rows.Count + 10;
                        PdfTable pdMarks = doc.NewTable(f1_cos10bold, countRow, 9, 3);
                        pdMarks.VisibleHeaders = false;
                        pdMarks.SetBorders(Color.Black, 1, BorderType.None);
                        pdMarks.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        pdMarks.Columns[0].SetWidth(5);
                        pdMarks.Columns[1].SetWidth(18);
                        pdMarks.Columns[2].SetWidth(70);
                        pdMarks.Columns[3].SetWidth(8);
                        pdMarks.Columns[4].SetWidth(7);
                        pdMarks.Columns[5].SetWidth(8);
                        pdMarks.Columns[6].SetWidth(10);
                        pdMarks.Columns[7].SetWidth(8);
                        pdMarks.Columns[8].SetWidth(6);


                        int i = 0;

                        double sumofcrdit = 0;
                        double sumofGPA = 0;
                        double gpa = 0;
                        double CGPA = 0;
                        double gpvAl = 0;
                        double partsum = 0;
                        double partsum1 = 0;
                        double overallCredit = 0;
                        double overallearnedcd = 0;
                        double overalltotcd = 0;

                        #region semdetails

                        bool isFirstPagePrinted = false;
                        int check = 0;
                        int RowA = 1;
                        int rowCnt = 0;
                        int tableRow = 0;
                        int j = 0;

                        if (printds_rows.Tables.Count > 0 && printds_rows.Tables[0].Rows.Count > 0)
                        {

                            foreach (DataRow dtsem in dicsem.Rows)
                            {
                                sumofcrdit = 0;
                                gpa = 0;
                                gpvAl = 0;
                                string strSem = Convert.ToString(dtsem["semester"]);
                                printds_rows.Tables[0].DefaultView.RowFilter = "semester='" + strSem + "'";
                                DataTable dtsemsubject = printds_rows.Tables[0].DefaultView.ToTable();
                                foreach (DataRow dtsub in dtsemsubject.Rows)
                                {
                                    i++;
                                    string PartNo = Convert.ToString(dtsub["Part_Type"]);
                                    string SubSem = Convert.ToString(dtsub["semester"]);

                                    string SubCode = Convert.ToString(dtsub["subject_code"]);
                                    string SubName = Convert.ToString(dtsub["subject_name"]);
                                    string Creditpoint = Convert.ToString(dtsub["credit_points"]);
                                    string maxESE = Convert.ToString(dtsub["max_ext_marks"]);
                                    string maxCIA = Convert.ToString(dtsub["max_int_marks"]);
                                    string maxTot = Convert.ToString(dtsub["maxtotal"]);
                                    string stuESE = Convert.ToString(dtsub["external_mark"]);
                                    string stuCIA = Convert.ToString(dtsub["internal_mark"]);
                                    string stTot = Convert.ToString(dtsub["total"]);
                                    string gradePoint = string.Empty;
                                    string Grade = Convert.ToString(dtsub["grade"]);
                                    string strMonthName1 = string.Empty;
                                    string exam_y1 = Convert.ToString(dtsub["Exam_year"]).Trim();
                                    string exam_m1 = Convert.ToString(dtsub["Exam_Month"]).Trim();
                                    strMonthName1 = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(Convert.ToInt32(exam_m1));
                                    strMonthName1 = Convert.ToString(strMonthName1[0]).Trim() + Convert.ToString(strMonthName1[1]).Trim() + Convert.ToString(strMonthName1[2]).Trim();
                                    strMonthName1 = strMonthName1.ToUpper() + "-" + exam_y1 + " ";
                                    double checkmark1;
                                    double.TryParse(stTot, out checkmark1);
                                    dtGradPoint.DefaultView.RowFilter = "semester='" + SubSem + "'";
                                    DataTable dvgradeP = dtGradPoint.DefaultView.ToTable();
                                    DataView dvgrade = new DataView();

                                    string sql2 = "select * from Grade_Master where College_Code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "' and Degree_Code='" + degree_code + "' and batch_year='" + batch_year + "' and '" + stTot + "' between Frange and Trange;";
                                    DataSet dsgrade = new DataSet();
                                    dsgrade = d2.select_method_wo_parameter(sql2, "text");
                                    if (dsgrade.Tables.Count > 0 && dsgrade.Tables[0].Rows.Count > 0)
                                    {

                                        Grade = Convert.ToString(dsgrade.Tables[0].Rows[0]["mark_grade"]).Trim();
                                        grade_points = Convert.ToString(dsgrade.Tables[0].Rows[0]["credit_points"]).Trim();
                                        gradePoint = Convert.ToString(dsgrade.Tables[0].Rows[0]["credit_points"]).Trim();

                                    }

                                    double earnedCredit = 0;
                                    double gp = 0;
                                    string creditPoint = string.Empty;
                                    creditPoint = Convert.ToString(dtsub["credit_points"]).Trim();
                                    double.TryParse(creditPoint.Trim(), out earnedCredit);
                                    sumofcrdit = sumofcrdit + earnedCredit;

                                    double.TryParse(gradePoint.Trim(), out gp);
                                    partsum += earnedCredit * gp;
                                    partsum1 = partsum1 + earnedCredit;
                                    gpvAl = gpvAl + gp * earnedCredit;

                                    string semroman = string.Empty;

                                    if (SubSem == "1")
                                    {
                                        semroman = "I";
                                    }
                                    else if (SubSem == "2")
                                    {
                                        semroman = "II";
                                    }
                                    else if (SubSem == "3")
                                    {
                                        semroman = "III";
                                    }
                                    else if (SubSem == "4")
                                    {
                                        semroman = "IV";
                                    }
                                    else if (SubSem == "5")
                                    {
                                        semroman = "V";

                                    }
                                    else if (SubSem == "6")
                                    {
                                        semroman = "VI";
                                    }
                                    else if (SubSem == "7")
                                    {
                                        semroman = "VII";

                                    }
                                    else if (SubSem == "8")
                                    {
                                        semroman = "VIII";
                                    }
                                    else if (SubSem == "9")
                                    {
                                        semroman = "IX";
                                    }
                                    else if (SubSem == "10")
                                    {
                                        semroman = "X";
                                    }


                                    //if (isFirstPagePrinted == false ? i < 24 : (i < (tableRow < 24 ? tableRow : (24 * RowA) - check)))
                                    //{

                                    pdMarks.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    pdMarks.Cell(i, 0).SetContent(semroman);
                                    pdMarks.Cell(i, 0).SetFont(header);
                                    pdMarks.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    pdMarks.Cell(i, 1).SetContent(SubCode);
                                    pdMarks.Cell(i, 1).SetFont(header);
                                    pdMarks.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    pdMarks.Cell(i, 2).SetContent(SubName);
                                    pdMarks.Cell(i, 2).SetFont(header);
                                    pdMarks.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    pdMarks.Cell(i, 3).SetContent(Creditpoint);
                                    pdMarks.Cell(i, 3).SetFont(header);

                                    pdMarks.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    pdMarks.Cell(i, 4).SetContent(grade_points);
                                    pdMarks.Cell(i, 4).SetFont(header);

                                    pdMarks.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    pdMarks.Cell(i, 5).SetContent(Grade);
                                    pdMarks.Cell(i, 5).SetFont(header);

                                    pdMarks.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    pdMarks.Cell(i, 6).SetContent(strMonthName1);
                                    pdMarks.Cell(i, 6).SetFont(header);
                                    check++;
                                    // }
                                    //else
                                    //{
                                    //    pdMarks.Cell(i + 1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    //    pdMarks.Cell(i + 1, 2).SetContent("CONTINUES IN NEXT PAGE...");
                                    //    isFirstPagePrinted = true;
                                    //    Gios.Pdf.PdfTablePage mypdfpage211 = pdMarks.CreateTablePage(new Gios.Pdf.PdfArea(doc, 28, 270, 540, 650));
                                    //    pdfpage.Add(mypdfpage211);
                                    //    pdfpage.SaveToDocument();
                                    //    pdfpage = doc.NewPage();
                                    //    RowA++;

                                    //    tableRow = printds_rows.Tables[0].Rows.Count - i;
                                    //    i = 0;

                                    //    i++;

                                    //    pdMarks.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    //    pdMarks.Cell(i, 0).SetContent(semroman);
                                    //    pdMarks.Cell(i, 0).SetFont(header);
                                    //    pdMarks.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    //    pdMarks.Cell(i, 1).SetContent(SubCode);
                                    //    pdMarks.Cell(i, 1).SetFont(header);
                                    //    pdMarks.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    //    pdMarks.Cell(i, 2).SetContent(SubName);
                                    //    pdMarks.Cell(i, 2).SetFont(header);
                                    //    pdMarks.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    //    pdMarks.Cell(i, 3).SetContent(Creditpoint);
                                    //    pdMarks.Cell(i, 3).SetFont(header);

                                    //    pdMarks.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    //    pdMarks.Cell(i, 4).SetContent(grade_points);
                                    //    pdMarks.Cell(i, 4).SetFont(header);

                                    //    pdMarks.Cell(i, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    //    pdMarks.Cell(i, 5).SetContent(Grade);
                                    //    pdMarks.Cell(i, 5).SetFont(header);

                                    //    pdMarks.Cell(i, 6).SetContentAlignment(ContentAlignment.MiddleLeft);
                                    //    pdMarks.Cell(i, 6).SetContent(strMonthName1);
                                    //    pdMarks.Cell(i, 6).SetFont(header);

                                    //    check++;
                                    //}

                                }

                                overallearnedcd += partsum;
                                overalltotcd += partsum1;

                                double nosum = 0;
                                double.TryParse(strSem, out nosum);
                                i++;
                                if (gpvAl > 0 && sumofcrdit > 0)
                                    gpa = (double)((double)gpvAl / (double)sumofcrdit);

                                gpa = Math.Round(gpa, 2, MidpointRounding.AwayFromZero);
                                string displayPartWiseGPA = string.Format("{0:0.00}", gpa);

                                sumofGPA = sumofGPA + gpa;
                                //  CGPA = sumofGPA / nosum;
                                CGPA = overallearnedcd / overalltotcd;
                                CGPA = Math.Round(CGPA, 2, MidpointRounding.AwayFromZero);
                                string displayPartWiseCGPA = string.Format("{0:0.00}", CGPA);
                                overallCredit = overallCredit + sumofcrdit;
                                pdMarks.Cell(i, 7).SetContentAlignment(ContentAlignment.MiddleRight);
                                pdMarks.Cell(i, 7).SetContent(displayPartWiseGPA.ToString());
                                pdMarks.Cell(i, 7).SetFont(header);


                                pdMarks.Cell(i, 8).SetContentAlignment(ContentAlignment.MiddleRight);
                                pdMarks.Cell(i, 8).SetContent(displayPartWiseCGPA.ToString());
                                pdMarks.Cell(i, 8).SetFont(header);

                                partsum = 0;
                                partsum1 = 0;
                            }
                            pdMarks.Cell(i + 1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            pdMarks.Cell(i + 1, 0).SetContent("***End of Statement***");
                            pdMarks.Cell(i + 1, 0).SetFont(header);
                            foreach (PdfCell pc in pdMarks.CellRange(i + 1, 0, i + 1, 0).Cells)
                            {
                                pc.ColSpan = 9;
                            }

                            string creditpaper = txtcreditpap.Text;

                            pdMarks.Cell(i + 2, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                            pdMarks.Cell(i + 2, 2).SetFont(header);
                            pdMarks.Cell(i + 2, 2).SetContent("Number of One Credit Courses Undergone : " + creditpaper + "");

                        }

                        #endregion

                        string stuclassification = string.Empty;

                        if (Convert.ToDouble(CGPA) >= 8.5 && Convert.ToDouble(CGPA) <= 10)
                        {
                            string atmpt = d2.GetFunctionv("select distinct me.attempts from Mark_Entry me,Subject s,sub_sem sem,syllabus_master sm  where sm.syll_code=s.syll_code and me.Subject_No = s.Subject_No and s.subtype_no= sem.subtype_no and  result='pass'  and roll_no='" + rollnosub + "'  order by me.attempts desc");
                            if (Convert.ToInt32(atmpt) > 1)
                            {
                                stuclassification = "First Class";
                            }
                            else
                            {
                                stuclassification = "First Class With Distinction";
                            }
                        }
                        else if (Convert.ToDouble(CGPA) >= 6.5 && Convert.ToDouble(CGPA) <= 8.49)
                        {
                            stuclassification = "First Class";
                        }
                        else if (Convert.ToDouble(CGPA) <= 6.49)
                        {
                            stuclassification = "Second Class";
                        }


                        string creittxt = string.Empty;
                        string credittxt = txtcreditpap.Text;
                        if (credittxt.ToUpper() == "ONE")
                        {
                            creittxt = "1";
                        }
                        else if (credittxt.ToUpper() == "TWO")
                        {
                            creittxt = "2";
                        }
                        else if (credittxt.ToUpper() == "THREE")
                        {
                            creittxt = "3";
                        }
                        else if (credittxt.ToUpper() == "FOUR")
                        {
                            creittxt = "4";
                        }
                        else if (credittxt.ToUpper() == "FIVE")
                        {
                            creittxt = "5";
                        }
                        else if (credittxt.ToUpper() == "SIX")
                        {
                            creittxt = "6";
                        }
                        else if (credittxt.ToUpper() == "SEVEN")
                        {
                            creittxt = "7";
                        }
                        else if (credittxt.ToUpper() == "EIGHT")
                        {
                            creittxt = "8";
                        }
                        else if (credittxt.ToUpper() == "NINE")
                        {
                            creittxt = "9";
                        }
                        else if (credittxt.ToUpper() == "TEN")
                        {
                            creittxt = "10";
                        }
                        string earncrd = string.Empty;
                        if (!string.IsNullOrEmpty(creittxt))
                        {
                            earncrd = Convert.ToString(overallCredit) + "+" + creittxt;
                        }
                        else
                        {
                            earncrd = Convert.ToString(overallCredit);
                        }
                        Gios.Pdf.PdfTablePage mypdfpage21 = pdMarks.CreateTablePage(new Gios.Pdf.PdfArea(doc, 28, 260, 552, 650));
                        pdfpage.Add(mypdfpage21);

                        PdfTextArea ptc1;
                        ptc1 = new PdfTextArea(f1_cos5reg, System.Drawing.Color.Black,
                                                                    new PdfArea(doc, 194, 615, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, stuclassification);
                        pdfpage.Add(ptc1);
                        PdfTextArea ptc12;
                        ptc12 = new PdfTextArea(f1_cos5reg, System.Drawing.Color.Black,
                                                                    new PdfArea(doc, 194, 633, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, Convert.ToString(overallCredit));
                        pdfpage.Add(ptc12);

                        PdfTextArea ptc121 = new PdfTextArea(f1_cos5reg, System.Drawing.Color.Black,
                                                                     new PdfArea(doc, 62, 727, 100, 50), System.Drawing.ContentAlignment.MiddleLeft, DateTime.Now.ToString("dd-MM-yyyy"));
                        pdfpage.Add(ptc121);

                        pdfpage.SaveToDocument();
                        pdfpage = doc.NewPage();
                        pdfpage.Add(pr1);
                        // }
                    }
                }
            }

            string apppath = HttpContext.Current.Server.MapPath("~");
            if (apppath != "")
            {
                string sz1path = apppath + "/Report/";
                string sz1File = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                doc.SaveToFile(sz1path + sz1File);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + sz1File);
                Response.ContentType = "application1/pdf";
                Response.WriteFile(sz1path + sz1File);
            }
        }

        catch (Exception ex)
        {
            //da.sendErrorMail(ex, collegeCode, "statementofmarks");
        }
    }

    protected void txttorange_ontextchanged(object sender, EventArgs e)
    {
        try
        {
            string frmrng = Convert.ToString(txtfrmrange.Text);
            if (string.IsNullOrEmpty(frmrng))
                frmrng = "0";
            string torng = Convert.ToString(txttorange.Text);
            if (string.IsNullOrEmpty(torng))
                torng = "0";
            for (int smark = 1; smark <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; smark++)
            {
                if (Convert.ToInt32(smark) >= Convert.ToInt32(frmrng) && Convert.ToInt32(smark) <= Convert.ToInt32(torng))
                {
                    int isval = 0;
                    FpSpread2.Sheets[0].Cells[smark, 4].Value = 1;
                }
                else
                {
                    FpSpread2.Sheets[0].Cells[smark, 4].Value = 0;
                }
            }

        }
        catch
        {
        }
    }


    #endregion


    #region NEC gradesheet
    public void gradesheet1()
    {
        try
        {
            string monthstr = string.Empty;
            string monthandyear = string.Empty;
            string batch_year = string.Empty;
            string degree_code = string.Empty;
            string branch = string.Empty;
            string degree = string.Empty;
            string rollnosub = string.Empty;
            string regno = string.Empty;
            string studname = string.Empty;
            string degbranch = string.Empty;
            string regulation = string.Empty;
            int month = 0;
            string mode = string.Empty;
            string modename = string.Empty;
            string dateofpublication = string.Empty;
            string subjectno = string.Empty;
            string linkval = string.Empty;
            string grade = string.Empty;
            string credit = string.Empty;
            string mark = string.Empty;
            double grpoints = 0;
            string sem = string.Empty;
            string sem3 = string.Empty;
            string oldsem = string.Empty;
            string exmmon = string.Empty;
            string exmyr = string.Empty;
            double grcredit = 0;
            double grcredit1 = 0;
            double gpa = 0;
            double gpa1 = 0;
            double g = 0;
            string exmcode = string.Empty;
            string subname = string.Empty;
            string subno = string.Empty;
            string remark = string.Empty;
            string subcode = string.Empty;
            string result = string.Empty;
            string sem2 = string.Empty;
            string edulevel = string.Empty;
            string strbatchyr = string.Empty;
            string semdec = string.Empty;
            string cd1 = string.Empty;
            bool isFirstPagePrinted = false;
            int no = 0;

            Boolean flag = false;
            Boolean markflag = false;
            Boolean once = false;
            bool failflag = false;
            bool failflag1 = false;
            bool failflaggpa = false;
            string failsem = string.Empty;


            int intFail = 0;
            int intAbs = 0;

            Font fondColName = new Font("Comic Sans MS", 18, FontStyle.Bold);
            Font fontdegexam = new Font("Arial", 12, FontStyle.Bold);
            Font fondconsol = new Font("Comic Sans MS", 15, FontStyle.Bold);
            Font Fontco12 = new Font("Comic Sans MS", 10, FontStyle.Bold);
            Font Fontpala12 = new Font("Palatino Linotype", 10, FontStyle.Bold);
            Font Fontco10 = new Font("Comic Sans MS", 10, FontStyle.Regular);
            Font Fontco11 = new Font("Comic Sans MS", 11, FontStyle.Bold);
            Font Fontco12a = new Font("Comic Sans MS", 12, FontStyle.Bold);
            Font Fontarial71 = new Font("Arial", 10, FontStyle.Bold);
            Font Fontarial7 = new Font("Times New Roman", 11, FontStyle.Regular);
            Font Fontwma = new Font("Arial", 8, FontStyle.Bold);
            Font Font8bold = new Font("Arial", 8, FontStyle.Bold);
            Font Font10bold = new Font("Arial", 12, FontStyle.Bold);
            Font Fontarial7a = new Font("Arial", 7, FontStyle.Regular);
            Font Fontarial7r = new Font("Arial", 6, FontStyle.Bold);
            Font Fontarial9 = new Font("Arial", 9, FontStyle.Bold);
            Font Fontarial10b = new Font("Arial", 11, FontStyle.Bold);
            Font Fontarial10 = new Font("Arial", 10, FontStyle.Regular);
            Font Fontarial12 = new Font("Arial", 12, FontStyle.Regular);
            PdfDocument doc = new PdfDocument(PdfDocumentFormat.InCentimeters(22, 29.8));
            PdfPage pdfpage = doc.NewPage();



            DataSet ds = new DataSet();



            for (int smark = 1; smark <= Convert.ToInt32(FpSpread2.Sheets[0].RowCount) - 1; smark++)
            {
                int isval = 0;
                isval = Convert.ToInt32(FpSpread2.Sheets[0].Cells[smark, 4].Value);
                if (isval == 1)
                {
                    ds.Clear();
                    ds.Dispose();
                    ds.Clear();
                    ds.Dispose();
                    regno = FpSpread2.Sheets[0].Cells[smark, 2].Text;
                    rollnosub = FpSpread2.Sheets[0].Cells[smark, 1].Text;

                    string query = "SELECT r.Reg_No,r.batch_year,a.sex,r.app_no,r.degree_code,r.serialno,R.current_semester,r.regulation,R.Stud_Name,c.Course_Name as degree,d.Dept_name,CONVERT(VARCHAR, dob, 103) as dob,datepart(year, Adm_date) as adm_year,r.mode,c.edu_level FROM Registration R,Applyn A,Degree G,Course C,Department D WHERE R.App_No = A.App_No AND R.Degree_Code = G.Degree_Code AND G.Course_ID = C.Course_ID AND G.College_Code = C.College_Code AND G.Dept_Code = D.Dept_Code AND D.College_Code = G.College_Code and roll_no='" + rollnosub + "'and r.college_code= '" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                    exmcode = da.GetFunction("select exam_code from exam_details where degree_code='" + ddlbranch.SelectedValue.ToString() + "'  and exam_month='" + Convert.ToString(ddlMonth.SelectedValue).Trim() + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' ");
                    string IntGradeFlag = da.GetFunction("select grade_flag from grademaster where degree_code='" + ddlbranch.SelectedValue.ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' and exam_month='" + Convert.ToString(ddlMonth.SelectedValue).Trim() + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "'");

                    query = query + " Select subject_name,subject_code,subject.subject_no,result,total,ISNULL(grade,'') grade,cp,credit_points,mark_entry.subject_no,semester from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = '" + exmcode + "' and roll_no='" + rollnosub + "' and degree_code ='" + ddlbranch.SelectedValue.ToString() + "' and batch_year ='" + ddlbatch.SelectedItem.Text.ToString() + "' order by semester asc,subject_type desc,subject.subject_no asc";
                    query = query + " select linkvalue from inssettings where linkname='Corresponding Grade' and college_code='" + ddlCollege.SelectedValue.ToString() + "'";
                    query = query + " select * from grade_master where degree_code='" + ddlbranch.SelectedValue.ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' and college_code='" + ddlCollege.SelectedValue.ToString() + "'";
                    query = query + " select exam_month,Exam_year,current_semester from exam_details where Exam_Code='" + exmcode + "'";


                    ds = da.select_method_wo_parameter(query, "text");
                    if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                    {
                        studname = Convert.ToString(ds.Tables[0].Rows[0]["Stud_Name"]);
                        strbatchyr = Convert.ToString(ds.Tables[0].Rows[0]["batch_year"]);
                        edulevel = Convert.ToString(ds.Tables[0].Rows[0]["edu_level"]);
                        regno = Convert.ToString(ds.Tables[0].Rows[0]["Reg_No"]);
                        degree_code = Convert.ToString(ds.Tables[0].Rows[0]["degree_code"]);
                        branch = Convert.ToString(ds.Tables[0].Rows[0]["Dept_name"]);
                        degree = Convert.ToString(ds.Tables[0].Rows[0]["degree"]);
                        degbranch = degree + " " + branch;
                        int.TryParse(Convert.ToString(ddlMonth.SelectedValue).Trim(), out month);
                        string monthname = CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(month);
                        monthname = monthname.Substring(0, 3);
                        monthandyear = Convert.ToString(monthname) + " " + Convert.ToString(ddlYear.SelectedItem.Text);
                        regulation = Convert.ToString(ds.Tables[0].Rows[0]["regulation"]);

                        mode = txtmode.Text.ToUpper();
                        dateofpublication = Convert.ToString(txtdop.Text);
                        string degheader = degree.ToUpper() + " Degree Examinations";

                        if (ds.Tables[4].Rows.Count > 0)
                        {
                            sem = Convert.ToString(ds.Tables[4].Rows[0]["current_semester"]);
                            oldsem = Convert.ToString(ds.Tables[4].Rows[0]["current_semester"]);
                            exmmon = Convert.ToString(ds.Tables[4].Rows[0]["exam_month"]);
                            exmyr = Convert.ToString(ds.Tables[4].Rows[0]["Exam_year"]);
                            semdec = sem;
                            if (sem == "1")
                            {
                                sem3 = "I";
                            }
                            else if (sem == "2")
                            {
                                sem3 = "II";
                            }
                            else if (sem == "3")
                            {
                                sem3 = "III";
                            }
                            else if (sem == "4")
                            {
                                sem3 = "IV";
                            }
                            else if (sem == "5")
                            {
                                sem3 = "V";
                            }
                            else if (sem == "6")
                            {
                                sem3 = "VI";
                            }
                            else if (sem == "7")
                            {
                                sem3 = "VII";
                            }
                            else if (sem == "8")
                            {
                                sem3 = "VIII";
                            }
                            else if (sem == "9")
                            {
                                sem3 = "IX";
                            }
                            else if (sem == "10")
                            {
                                sem3 = "X";
                            }
                            PdfTextArea pdfdegree = new PdfTextArea(Font10bold, System.Drawing.Color.Black, new PdfArea(doc, 160, 35, 200, 50), System.Drawing.ContentAlignment.TopRight, Convert.ToString(degheader));
                            pdfpage.Add(pdfdegree);


                        }

                        #region coesign
                        //string coesignphtsql1 = string.Empty;
                        //coesignphtsql1 = "select coe_signature from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                        //MemoryStream memoryStream2 = new MemoryStream();
                        //DataSet dscoesig1 = new DataSet();
                        //// DataSet dsstdpho = new DataSet();
                        //dscoesig1.Clear();
                        //dscoesig1.Dispose();
                        //dscoesig1 = da.select_method_wo_parameter(coesignphtsql1, "Text");
                        //if (dscoesig1.Tables.Count > 0 && dscoesig1.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dscoesig1.Tables[0].Rows[0][0]).Trim()))
                        //{
                        //    byte[] file = (byte[])dscoesig1.Tables[0].Rows[0][0];
                        //    memoryStream2.Write(file, 0, file.Length);
                        //    if (file.Length > 0)
                        //    {
                        //        System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream2, true, true);
                        //        System.Drawing.Image thumb = imgx.GetThumbnailImage(250, 250, null, IntPtr.Zero);
                        //        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                        //        {
                        //        }
                        //        else
                        //        {
                        //            thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                        //        }
                        //    }
                        //}
                        //if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                        //{
                        //    PdfImage coesiImage2 = doc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"));
                        //    pdfpage.Add(coesiImage2, 455, 710, 260);
                        //}
                        //else
                        //{
                        //    PdfImage coesiImage2 = doc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                        //    pdfpage.Add(coesiImage2, 455, 710, 260);
                        //}

                        #endregion

                        #region date
                        string currdate1 = DateTime.Now.ToString("dd-MM-yyyy");

                        PdfTextArea pdfcurrdate1 = new PdfTextArea(Fontarial7, System.Drawing.Color.Black, new PdfArea(doc, 65, 749, 100, 50), System.Drawing.ContentAlignment.BottomLeft, Convert.ToString(currdate1).Trim());
                        pdfpage.Add(pdfcurrdate1);

                        #endregion

                        #region studentdetails

                        PdfTable studedetails = doc.NewTable(Fontarial7, 3, 1, 10);
                        studedetails.VisibleHeaders = false;
                        studedetails.SetBorders(Color.Black, 1, BorderType.None);

                        studedetails.Columns[0].SetWidth(150);

                        studedetails.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        studedetails.Cell(0, 0).SetContent(studname.ToUpper());
                        studedetails.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        studedetails.Cell(1, 0).SetContent(degbranch);
                        studedetails.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        studedetails.Cell(2, 0).SetContent(mode);

                        Gios.Pdf.PdfTablePage mypdfpage2 = studedetails.CreateTablePage(new Gios.Pdf.PdfArea(doc, 108, 73, 280, 1050));
                        pdfpage.Add(mypdfpage2);

                        PdfTable studetails1 = doc.NewTable(Fontarial7, 4, 1, 6);
                        studetails1.VisibleHeaders = false;
                        studetails1.SetBorders(Color.Black, 1, BorderType.None);

                        studetails1.Columns[0].SetWidth(100);

                        studetails1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        studetails1.Cell(0, 0).SetContent(regno.ToUpper());
                        studetails1.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        studetails1.Cell(1, 0).SetContent(monthandyear);

                        string reg = da.GetFunction("SELECT ISNULL(Regulation,'') FROM Degree WHERE Degree_Code ='" + ddlbranch.SelectedValue.ToString() + "'");

                        studetails1.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        studetails1.Cell(2, 0).SetContent(reg);
                        studetails1.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                        studetails1.Cell(3, 0).SetContent(dateofpublication);

                        Gios.Pdf.PdfTablePage mypdfpage3 = studetails1.CreateTablePage(new Gios.Pdf.PdfArea(doc, 490, 77, 150, 1050));
                        pdfpage.Add(mypdfpage3);

                        #endregion

                        #region semdetails

                        PdfTable tblMark = doc.NewTable(Fontarial7, 20, 6, 5);
                        tblMark.SetBorders(Color.Black, 1, BorderType.None);
                        tblMark.VisibleHeaders = false;
                        tblMark.Columns[0].SetWidth(10);
                        tblMark.Columns[1].SetWidth(52);
                        tblMark.Columns[2].SetWidth(254);
                        tblMark.Columns[3].SetWidth(31);
                        tblMark.Columns[4].SetWidth(29);
                        tblMark.Columns[5].SetWidth(30);



                        int j = 0;
                        int tableRow = 0;
                        int RowA = 1;
                        int check = 0;
                        int i1 = 0;
                        failsem = string.Empty;
                        if (ds.Tables[1].Rows.Count > 0) //subject
                        {
                            for (int i = 0; i < ds.Tables[1].Rows.Count; i++)
                            {
                                failflag = false;
                                subjectno = Convert.ToString(ds.Tables[1].Rows[i]["subject_no"]);
                                string subcod1 = Convert.ToString(ds.Tables[1].Rows[i]["subject_code"]);
                                if (subcod1.ToUpper().EndsWith("L"))
                                {
                                    string gdr = Convert.ToString(ds.Tables[1].Rows[i]["grade"]);
                                    if (gdr.ToUpper().Trim() == "RA" || gdr.ToUpper().Trim() == "SA" || gdr.Trim() == "-" || gdr.ToUpper().Trim() == "AAA" || gdr.ToUpper().Trim() == "AB" || gdr.ToUpper().Trim() == "W")
                                    {
                                        failflag = true;
                                        failflag1 = true;
                                    }
                                    else
                                    {
                                        failflag = false;
                                        //  failflag1 = false;
                                    }
                                }
                                if (failflag == false)
                                {
                                    if (ds.Tables[2].Rows.Count > 0)  //settings
                                    {
                                        linkval = Convert.ToString(ds.Tables[2].Rows[0]["linkvalue"]);
                                        if (linkval == "1")
                                        {
                                            if (ds.Tables[3].Rows.Count > 0)//grademaster
                                            {
                                                flag = true;
                                                if (IntGradeFlag == "3")
                                                {
                                                    if (cbregulation.Checked == true)
                                                    {
                                                        grade = Convert.ToString(ds.Tables[1].Rows[i]["grade"]);
                                                    }
                                                    else
                                                    {
                                                        gradecalculation(rollnosub, subjectno);
                                                        grade = gradenec;
                                                    }

                                                }
                                                else if (IntGradeFlag == "2")
                                                {
                                                    grade = Convert.ToString(ds.Tables[1].Rows[i]["grade"]);
                                                }
                                                credit = Convert.ToString(ds.Tables[1].Rows[i]["credit_points"]);
                                                mark = Convert.ToString(ds.Tables[1].Rows[i]["total"]);
                                            }
                                            else
                                            {
                                                markflag = true;
                                                mark = Convert.ToString(ds.Tables[1].Rows[i]["total"]);
                                            }
                                        }
                                        else
                                        {
                                            markflag = true;
                                            mark = Convert.ToString(ds.Tables[1].Rows[i]["total"]);
                                        }
                                    }
                                    else
                                    {
                                        string gd = Convert.ToString(ds.Tables[1].Rows[i]["grade"]);
                                        if (!string.IsNullOrEmpty(gd))
                                        {
                                            grade = Convert.ToString(ds.Tables[1].Rows[i]["grade"]);
                                            credit = Convert.ToString(ds.Tables[1].Rows[i]["credit_points"]);
                                        }
                                        else
                                        {
                                            markflag = true;
                                            mark = Convert.ToString(ds.Tables[1].Rows[i]["total"]);
                                        }

                                    }

                                    if (string.IsNullOrEmpty(grade))
                                    {
                                        string rsgrade = "select distinct credit_points from grade_master where degree_code='" + ddlbranch.SelectedValue.ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' and college_code='" + ddlCollege.SelectedValue.ToString() + "' and '" + mark + "' between frange and trange";
                                        DataSet ds2 = da.select_method_wo_parameter(rsgrade, "text");
                                        if (ds2.Tables.Count > 0 && ds2.Tables[0].Rows.Count > 0)
                                        {

                                            string grpt = Convert.ToString(ds2.Tables[0].Rows[0]["credit_points"]);
                                            grpoints = Convert.ToDouble(grpt);
                                        }
                                    }
                                    else
                                    {
                                        grpoints = 0;
                                    }

                                    string cd = " select credit_points from subject where subject_no='" + subjectno + "'";
                                    DataSet ds3 = da.select_method_wo_parameter(cd, "text");
                                    if (ds3.Tables.Count > 0 && ds3.Tables[0].Rows.Count > 0)
                                    {
                                        string cred = Convert.ToString(ds3.Tables[0].Rows[0]["credit_points"]);
                                        grcredit = Convert.ToDouble(cred);
                                        grcredit1 = grcredit1 + grcredit;
                                    }
                                    else
                                    {
                                        grcredit = 0;
                                    }
                                    gpa = grpoints * grcredit;
                                    gpa1 = gpa1 + gpa;
                                    if (grcredit1 > 0)
                                    {
                                        g = gpa1 / grcredit1;
                                    }
                                    else
                                    {
                                        g = 0;
                                    }

                                    sem = Convert.ToString(ds.Tables[1].Rows[i]["semester"]);
                                    if (oldsem != sem)
                                    {
                                        if (once == false)
                                        {
                                            string umcopm = "select distinct uncompulsory_subject.subject_no,subject_name,subject_code,remarks from uncompulsory_subject,subject where uncompulsory_subject.subject_no=subject.subject_no and degree_code='" + ddlbranch.SelectedValue.ToString() + "' and semester='" + ds.Tables[1].Rows[i]["semester"].ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' and roll_no='" + rollnosub + "' order by subject_code asc";
                                            DataSet ds6 = da.select_method_wo_parameter(umcopm, "text");
                                            if (ds6.Tables.Count > 0 && ds6.Tables[0].Rows.Count > 0)
                                            {
                                                for (int j2 = 0; j2 < ds6.Tables[0].Rows.Count; j2++)
                                                {
                                                    subname = Convert.ToString(ds6.Tables[0].Rows[j2]["subject_name"]);
                                                    subno = Convert.ToString(ds6.Tables[0].Rows[j2]["subject_no"]);
                                                    subcode = Convert.ToString(ds6.Tables[0].Rows[j2]["subject_code"]);
                                                    remark = Convert.ToString(ds6.Tables[0].Rows[j2]["remarks"]);
                                                }
                                            }
                                            once = true;
                                        }
                                    }
                                    subname = Convert.ToString(ds.Tables[1].Rows[i]["subject_name"]);
                                    subno = Convert.ToString(ds.Tables[1].Rows[i]["subject_no"]);
                                    subcode = Convert.ToString(ds.Tables[1].Rows[i]["subject_code"]);
                                    result = Convert.ToString(ds.Tables[1].Rows[i]["result"]);
                                    if (sem == "1")
                                    {
                                        sem2 = "I";
                                    }
                                    else if (sem == "2")
                                    {
                                        sem2 = "II";
                                    }
                                    else if (sem == "3")
                                    {
                                        sem2 = "III";
                                    }
                                    else if (sem == "4")
                                    {
                                        sem2 = "IV";
                                    }
                                    else if (sem == "5")
                                    {
                                        sem2 = "V";
                                    }
                                    else if (sem == "6")
                                    {
                                        sem2 = "VI";
                                    }
                                    else if (sem == "7")
                                    {
                                        sem2 = "VII";
                                    }
                                    else if (sem == "8")
                                    {
                                        sem2 = "VIII";
                                    }
                                    else if (sem == "9")
                                    {
                                        sem2 = "IX";
                                    }
                                    else if (sem == "10")
                                    {
                                        sem2 = "X";
                                    }
                                    if (credit == "0")
                                    {
                                        credit = "-";
                                    }
                                    if (markflag == true)
                                    {
                                        grade = mark;
                                    }
                                    else
                                    {
                                        if (result.ToLower() == "pass")
                                        {
                                        }
                                        else if (result.ToUpper() == "AAA" || result.ToUpper() == "AB" || result.ToUpper() == "W")
                                        {
                                            grade = "-";
                                        }
                                        else
                                        {
                                            if (cbregulation.Checked == false)
                                            {
                                                if (edulevel.ToUpper().Trim() == "UG")
                                                {
                                                    string grd1 = da.GetFunction("select value from COE_Master_Settings where settings='Fail Grade'");
                                                    if (string.IsNullOrEmpty(grd1))
                                                        grade = "-";
                                                    else
                                                        grade = grd1;
                                                }
                                                else
                                                {
                                                    if (Convert.ToInt32(strbatchyr) >= 2015)
                                                    {
                                                        string grpg = da.GetFunction("select value from COE_Master_Settings where settings='2015/PG/Fail Grade'");
                                                        if (string.IsNullOrEmpty(grpg))
                                                            grade = "-";
                                                        else
                                                            grade = grpg;
                                                    }
                                                    else
                                                    {
                                                        string gradebat = da.GetFunction("select value from COE_Master_Settings where settings='Fail Grade'");
                                                        if (string.IsNullOrEmpty(gradebat))
                                                            grade = "-";
                                                        else
                                                            grade = gradebat;
                                                    }
                                                }
                                            }
                                            else
                                            {

                                                if (edulevel.ToUpper().Trim() != "UG")
                                                {

                                                    string gdedu = da.GetFunction("select value from COE_Master_Settings where settings='2015/PG/Fail Grade'");
                                                    if (string.IsNullOrEmpty(gdedu))
                                                        grade = "-";
                                                    else
                                                        grade = gdedu;
                                                }
                                            }
                                        }
                                    }
                                    if (result.ToUpper() == "SA")
                                    {
                                        intFail = intFail + 1;
                                        result = "SA";
                                    }
                                    else if (result.ToUpper() == "AAA")
                                    {
                                        result = "AB";
                                        intAbs = intAbs + 1;
                                    }
                                    else if (result.ToUpper() == "MC")
                                    {
                                        result = "Fail";
                                        grade = "RA";
                                    }
                                    else
                                    {
                                        if (cbregulation.Checked == false)
                                        {
                                            intFail = intFail + 1;
                                            if (edulevel.ToUpper().Trim() == "UG")
                                            {
                                                if (credit == "0")
                                                    result = "SA";
                                                else
                                                    result = "RA";
                                            }
                                            else
                                            {
                                                if (Convert.ToInt32(strbatchyr) >= 2015)
                                                {
                                                }
                                                else
                                                {
                                                    if (credit == "0")
                                                        result = "SA";
                                                    else
                                                        result = "RA";
                                                }
                                            }
                                        }
                                        else
                                        {
                                            //  intFail = intFail + 1;

                                        }
                                    }
                                    if (result.ToLower().Trim() == "fail")
                                    {
                                        failflaggpa = true;
                                        if (string.IsNullOrEmpty(failsem))
                                        {
                                            failsem = Convert.ToString(sem);
                                        }
                                        else
                                        {
                                            if (failsem != sem)
                                            {
                                                failsem = failsem + "," + sem;
                                            }
                                        }

                                    }
                                    no = no + 1;

                                    if (isFirstPagePrinted == false ? j < 18 : (j < (tableRow < 18 ? tableRow : (18 * RowA) - check)))
                                    {

                                        j++;
                                        tblMark.Cell(j, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMark.Cell(j, 0).SetContent(sem2);
                                        tblMark.Cell(j, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMark.Cell(j, 1).SetContent(subcode);
                                        tblMark.Cell(j, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMark.Cell(j, 2).SetContent(subname);
                                        tblMark.Cell(j, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMark.Cell(j, 3).SetContent(credit);
                                        tblMark.Cell(j, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMark.Cell(j, 4).SetContent(grade);
                                        tblMark.Cell(j, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMark.Cell(j, 5).SetContent(result.ToUpper());
                                        i1 = j;
                                        check++;
                                    }
                                    else
                                    {
                                        #region nextpage
                                        tblMark.Cell(j + 1, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMark.Cell(j + 1, 2).SetContent("CONTINUES IN NEXT PAGE...");
                                        isFirstPagePrinted = true;
                                        Gios.Pdf.PdfTablePage mypdfsemdetails = tblMark.CreateTablePage(new Gios.Pdf.PdfArea(doc, 25, 202, 572, 650));
                                        pdfpage.Add(mypdfsemdetails);
                                        pdfpage.SaveToDocument();
                                        pdfpage = doc.NewPage();
                                        RowA++;

                                        #region studentdetails

                                        PdfTextArea pdfdegree1 = new PdfTextArea(Font10bold, System.Drawing.Color.Black, new PdfArea(doc, 160, 35, 200, 50), System.Drawing.ContentAlignment.TopRight, Convert.ToString(degheader));
                                        pdfpage.Add(pdfdegree1);

                                        PdfTable studedetails1 = doc.NewTable(Fontarial7, 3, 1, 8);
                                        studedetails1.VisibleHeaders = false;
                                        studedetails1.SetBorders(Color.Black, 1, BorderType.None);

                                        studedetails1.Columns[0].SetWidth(150);

                                        studedetails1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        studedetails1.Cell(0, 0).SetContent(studname.ToUpper());
                                        studedetails1.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        studedetails1.Cell(1, 0).SetContent(degbranch);
                                        studedetails1.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        studedetails1.Cell(2, 0).SetContent(mode);

                                        Gios.Pdf.PdfTablePage mypdfpage21 = studedetails1.CreateTablePage(new Gios.Pdf.PdfArea(doc, 108, 73, 280, 1050));
                                        pdfpage.Add(mypdfpage21);

                                        PdfTable studetails11 = doc.NewTable(Fontarial7, 4, 1, 6);
                                        studetails11.VisibleHeaders = false;
                                        studetails11.SetBorders(Color.Black, 1, BorderType.CompleteGrid);

                                        studetails11.Columns[0].SetWidth(100);

                                        studetails11.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        studetails11.Cell(0, 0).SetContent(regno.ToUpper());
                                        studetails11.Cell(1, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        studetails11.Cell(1, 0).SetContent(monthandyear);

                                        string reg1 = da.GetFunction("SELECT ISNULL(Regulation,'') FROM Degree WHERE Degree_Code ='" + ddlbranch.SelectedValue.ToString() + "'");

                                        studetails11.Cell(2, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        studetails11.Cell(2, 0).SetContent(reg1);
                                        studetails11.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        studetails11.Cell(3, 0).SetContent(dateofpublication);

                                        Gios.Pdf.PdfTablePage mypdfpage31 = studetails11.CreateTablePage(new Gios.Pdf.PdfArea(doc, 490, 77, 150, 1050));
                                        pdfpage.Add(mypdfpage31);

                                        #endregion

                                        //#region coesign
                                        //string coesignphtsql = string.Empty;
                                        //coesignphtsql = "select coe_signature from collinfo where college_code='" + Convert.ToString(ddlCollege.SelectedValue).Trim() + "'";
                                        //MemoryStream memoryStream = new MemoryStream();
                                        //DataSet dscoesig = new DataSet();
                                        //// DataSet dsstdpho = new DataSet();
                                        //dscoesig.Clear();
                                        //dscoesig.Dispose();
                                        //dscoesig = da.select_method_wo_parameter(coesignphtsql, "Text");
                                        //if (dscoesig.Tables.Count > 0 && dscoesig.Tables[0].Rows.Count > 0 && !string.IsNullOrEmpty(Convert.ToString(dscoesig.Tables[0].Rows[0][0]).Trim()))
                                        //{
                                        //    byte[] file = (byte[])dscoesig.Tables[0].Rows[0][0];
                                        //    memoryStream.Write(file, 0, file.Length);
                                        //    if (file.Length > 0)
                                        //    {
                                        //        System.Drawing.Image imgx = System.Drawing.Image.FromStream(memoryStream, true, true);
                                        //        System.Drawing.Image thumb = imgx.GetThumbnailImage(250, 250, null, IntPtr.Zero);
                                        //        if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                                        //        {
                                        //        }
                                        //        else
                                        //        {
                                        //            thumb.Save(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"), System.Drawing.Imaging.ImageFormat.Jpeg);
                                        //        }
                                        //    }
                                        //}
                                        //if (File.Exists(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg")))
                                        //{
                                        //    PdfImage coesiImage = doc.NewImage(HttpContext.Current.Server.MapPath("~/coeimages/" + Convert.ToString(ddlCollege.SelectedValue).Trim() + ".jpeg"));
                                        //    pdfpage.Add(coesiImage, 455, 710, 260);
                                        //}
                                        //else
                                        //{
                                        //    PdfImage coesiImage = doc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                                        //    pdfpage.Add(coesiImage, 455, 710, 260);
                                        //}

                                        //#endregion

                                        #region date
                                        string currdate = DateTime.Now.ToString("dd-MM-yyyy");

                                        PdfTextArea pdfcurrdate = new PdfTextArea(Fontarial7, System.Drawing.Color.Black, new PdfArea(doc, 65, 749, 100, 50), System.Drawing.ContentAlignment.BottomLeft, Convert.ToString(currdate).Trim());
                                        pdfpage.Add(pdfcurrdate);

                                        #endregion

                                        tableRow = ds.Tables[1].Rows.Count - j;
                                        j = 0;


                                        tblMark = doc.NewTable(Fontarial7, 20, 6, 3);
                                        tblMark.SetBorders(Color.Black, 1, BorderType.None);
                                        tblMark.Columns[0].SetWidth(20);
                                        tblMark.Columns[1].SetWidth(52);
                                        tblMark.Columns[2].SetWidth(258);
                                        tblMark.Columns[3].SetWidth(33);
                                        tblMark.Columns[4].SetWidth(30);
                                        tblMark.Columns[5].SetWidth(30);


                                        j++;
                                        tblMark.Cell(j, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMark.Cell(j, 0).SetContent(sem2);
                                        tblMark.Cell(j, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMark.Cell(j, 1).SetContent(subcode);
                                        tblMark.Cell(j, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                        tblMark.Cell(j, 2).SetContent(subname);
                                        tblMark.Cell(j, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMark.Cell(j, 3).SetContent(credit);
                                        tblMark.Cell(j, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMark.Cell(j, 4).SetContent(grade);
                                        tblMark.Cell(j, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblMark.Cell(j, 5).SetContent(result.ToUpper());
                                        i1 = j;
                                        check++;
                                        #endregion
                                    }
                                }



                            }
                            tblMark.Cell(i1 + 1, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblMark.Cell(i1 + 1, 0).SetContent("*** End of Statement ***");
                            foreach (PdfCell pc5 in tblMark.CellRange(i1 + 1, 0, i1 + 1, 0).Cells)
                            {
                                pc5.ColSpan = 6;
                            }
                            Gios.Pdf.PdfTablePage newpdftabpage1 = tblMark.CreateTablePage(new Gios.Pdf.PdfArea(doc, 26, 202, 572, 647));
                            pdfpage.Add(newpdftabpage1);
                        #endregion

                            PdfTable tblgpacgpa = doc.NewTable(Fontarial7, 4, 8, 3);
                            tblgpacgpa.SetBorders(Color.Black, 1, BorderType.None);
                            tblgpacgpa.VisibleHeaders = false;
                            tblgpacgpa.Columns[0].SetWidth(32);
                            tblgpacgpa.Columns[1].SetWidth(32);
                            tblgpacgpa.Columns[2].SetWidth(32);
                            tblgpacgpa.Columns[3].SetWidth(32);
                            tblgpacgpa.Columns[4].SetWidth(32);
                            tblgpacgpa.Columns[5].SetWidth(32);
                            tblgpacgpa.Columns[6].SetWidth(32);
                            tblgpacgpa.Columns[7].SetWidth(32);


                            string creditenrol = string.Empty;
                            string creditearn = string.Empty;

                            double creditearnedtot = 0;
                            double intTotSub = 0;
                            double intPassSub = 0;
                            string gpafinal = string.Empty;
                            double cumcreditearned = 0;
                            string grdae2 = string.Empty;
                            string sql3 = string.Empty;
                            DataSet dsat = new DataSet();
                            double strgrade = 0;
                            double creditval = 0;
                            double gpacal1 = 0;
                            double finalgpa1 = 0;
                            double totgpa = 0;
                            double gpacal = 0;
                            double GPAVal = 0;
                            double cgpa2 = 0;
                            double gpacal2 = 0;
                            double overallcredit = 0;
                            double cgpa1 = 0;

                            for (int k = 1; k <= Convert.ToInt32(semdec); k++)
                            {
                                grcredit1 = 0;
                                gpa1 = 0;
                                gpacal1 = 0;
                                grcredit1 = 0;
                                //-------------credits Registered-----------
                                creditearnedtot = 0;
                                if (failflag1 == false)
                                {
                                    creditenrol = da.GetFunction("select sum(s.credit_points) from syllabus_master as sy,subject as s,subjectchooser as sc where sy.syll_code=s.syll_code and sc.subject_no=s.subject_no and sy.batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' and sy.degree_code='" + ddlbranch.SelectedValue.ToString() + "' and sc.semester ='" + k.ToString() + "' and roll_no='" + rollnosub + "'");
                                }
                                else
                                {
                                    creditenrol = da.GetFunction("select sum(s.credit_points) from syllabus_master as sy,subject as s,subjectchooser as sc where sy.syll_code=s.syll_code and sc.subject_no=s.subject_no and sy.batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' and sy.degree_code='" + ddlbranch.SelectedValue.ToString() + "' and sc.semester ='" + k.ToString() + "' and roll_no='" + rollnosub + "' and s.subject_code not like '%L'");
                                }

                                if (string.IsNullOrEmpty(creditenrol))
                                    creditenrol = "-";

                                //   double creditenrol1 = Math.Round(Convert.ToDouble(creditenrol), 3, MidpointRounding.AwayFromZero);
                                string creditenrol1 = string.Empty;
                                if (creditenrol == "-")
                                {
                                    tblgpacgpa.Cell(0, k - 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblgpacgpa.Cell(0, k - 1).SetContent(Convert.ToString(creditenrol1));
                                    
                                }
                                else
                                {
                                    creditenrol1 = String.Format("{0:0.00}", Convert.ToDouble(creditenrol));
                                    tblgpacgpa.Cell(0, k - 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblgpacgpa.Cell(0, k - 1).SetContent(Convert.ToString(creditenrol1));
                                }
                                
                               

                                //---------------credits earned------------------

                                string sylcode = da.GetFunction("select distinct syll_code from syllabus_master where degree_code='" + ddlbranch.SelectedValue.ToString() + "' and semester ='" + k + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "'");
                                string ccva = da.GetFunction("select cc from registration where roll_no='" + rollnosub + "'");

                                if (!string.IsNullOrEmpty(sylcode))
                                {
                                    if (failflag1 == false)
                                    {
                                        cd1 = "Select S.Credit_Points,M.Total,attempts,external_mark,isnull(M.Grade,'') Grade FROM Mark_Entry M,Subject S,Syllabus_Master Y WHERE M.Subject_No = S.Subject_No AND S.Syll_Code = Y.Syll_Code AND S.Syll_Code = '" + sylcode + "' AND roll_no='" + rollnosub + "' AND Degree_Code ='" + ddlbranch.SelectedValue.ToString() + "' AND Y.Semester ='" + k.ToString() + "' AND Upper(Result) = 'PASS' AND Exam_Code IN (SELECT DISTINCT Exam_Code FROM Exam_Details WHERE Degree_Code ='" + ddlbranch.SelectedValue.ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' AND Exam_Year <='" + exmyr + "') AND Exam_Code NOT IN (SELECT Exam_Code FROM Exam_Details WHERE Degree_Code ='" + ddlbranch.SelectedValue.ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' AND Exam_Year ='" + exmyr + "' AND Exam_Month >'" + exmmon + "')";
                                    }
                                    else
                                    {
                                        cd1 = "Select S.Credit_Points,M.Total,attempts,external_mark,isnull(M.Grade,'') Grade FROM Mark_Entry M,Subject S,Syllabus_Master Y WHERE M.Subject_No = S.Subject_No AND S.Syll_Code = Y.Syll_Code AND S.Syll_Code = '" + sylcode + "' AND roll_no='" + rollnosub + "' AND Degree_Code ='" + ddlbranch.SelectedValue.ToString() + "' AND Y.Semester ='" + k.ToString() + "' AND Upper(Result) = 'PASS' AND Exam_Code IN (SELECT DISTINCT Exam_Code FROM Exam_Details WHERE Degree_Code ='" + ddlbranch.SelectedValue.ToString() + "' and s.subject_code not like '%L' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' AND Exam_Year <='" + exmyr + "') AND Exam_Code NOT IN (SELECT Exam_Code FROM Exam_Details WHERE Degree_Code ='" + ddlbranch.SelectedValue.ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' AND Exam_Year ='" + exmyr + "' AND Exam_Month >'" + exmmon + "')";
                                    }

                                    if (ccva == "0")
                                    {
                                        cd1 = cd1 + " AND Rej_Stat = 0";
                                    }
                                }
                                DataSet ds6 = da.select_method_wo_parameter(cd1, "text");
                                if (ds6.Tables.Count > 0 && ds6.Tables[0].Rows.Count > 0)
                                {
                                    for (int l = 0; l < ds6.Tables[0].Rows.Count; l++)
                                    {
                                        string atmpt = Convert.ToString(ds6.Tables[0].Rows[l]["attempts"]);
                                        string credipt = Convert.ToString(ds6.Tables[0].Rows[l]["credit_points"]);
                                        if (!string.IsNullOrEmpty(credipt))
                                            creditearnedtot += Convert.ToDouble(credipt);

                                        if (cbregulation.Checked == true)
                                        {
                                            sql3 = "SELECT * FROM COE_Attmaxmark WHERE CollegeCode ='" + ddlCollege.SelectedValue.ToString() + "'";
                                            dsat = da.select_method_wo_parameter(sql3, "text");
                                            if (dsat.Tables.Count > 0 && dsat.Tables[0].Rows.Count > 0)
                                            {
                                                string atmpt1 = Convert.ToString(dsat.Tables[0].Rows[0]["attempts"]);
                                                if (Convert.ToInt32(atmpt) >= Convert.ToInt32(atmpt1))
                                                {
                                                    grdae2 = da.GetFunction("select distinct credit_points from grade_master where degree_code='" + ddlbranch.SelectedValue.ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' and college_code='" + ddlCollege.SelectedValue.ToString() + "' and Mark_Grade ='" + Convert.ToString(ds6.Tables[0].Rows[l]["Grade"]) + "'");
                                                }
                                                else
                                                {
                                                    grdae2 = da.GetFunction("select distinct credit_points from grade_master where degree_code='" + ddlbranch.SelectedValue.ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' and college_code='" + ddlCollege.SelectedValue.ToString() + "' and Mark_Grade ='" + Convert.ToString(ds6.Tables[0].Rows[l]["Grade"]) + "'");
                                                }
                                            }
                                            else
                                            {
                                                grdae2 = da.GetFunction("select distinct credit_points from grade_master where degree_code='" + ddlbranch.SelectedValue.ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' and college_code='" + ddlCollege.SelectedValue.ToString() + "' and Mark_Grade ='" + Convert.ToString(ds6.Tables[0].Rows[l]["Grade"]) + "'");
                                            }
                                        }
                                        else
                                        {
                                            sql3 = "SELECT * FROM COE_Attmaxmark WHERE CollegeCode ='" + ddlCollege.SelectedValue.ToString() + "'";
                                            dsat = da.select_method_wo_parameter(sql3, "text");
                                            double totMark = 0;
                                            double.TryParse(Convert.ToString(ds6.Tables[0].Rows[l]["Total"]), out totMark);
                                            totMark = Math.Round(totMark, 0, MidpointRounding.AwayFromZero);
                                            if (dsat.Tables.Count > 0 && dsat.Tables[0].Rows.Count > 0)
                                            {
                                                string atmpt1 = Convert.ToString(dsat.Tables[0].Rows[0]["attempts"]);
                                                if (Convert.ToInt32(atmpt) >= Convert.ToInt32(atmpt1))
                                                {
                                                    grdae2 = da.GetFunction("select distinct credit_points from grade_master where degree_code='" + ddlbranch.SelectedValue.ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' and college_code='" + ddlCollege.SelectedValue.ToString() + "' and '" + Convert.ToString(ds6.Tables[0].Rows[l]["external_mark"]) + "' between frange and trange");
                                                }
                                                else
                                                {
                                                    grdae2 = da.GetFunction("select distinct credit_points from grade_master where degree_code='" + ddlbranch.SelectedValue.ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' and college_code='" + ddlCollege.SelectedValue.ToString() + "' and '" + totMark + "' between frange and trange");
                                                }
                                            }
                                            else
                                            {
                                                grdae2 = da.GetFunction("select distinct credit_points from grade_master where degree_code='" + ddlbranch.SelectedValue.ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' and college_code='" + ddlCollege.SelectedValue.ToString() + "' and '" + totMark + "' between frange and trange");
                                            }

                                        }

                                        if (!string.IsNullOrEmpty(grdae2) && Convert.ToInt32(grdae2) > 0)
                                        {
                                            strgrade = Convert.ToDouble(grdae2);  //grade point
                                        }
                                        creditval = Convert.ToDouble(credipt);  //credit point
                                        if (Convert.ToInt32(gpacal1) == 0)
                                        {
                                            gpacal1 = strgrade * creditval;
                                        }
                                        else
                                        {
                                            gpacal1 = gpacal1 + (strgrade * creditval);
                                        }
                                    }
                                    finalgpa1 = gpacal1 / creditearnedtot;
                                    finalgpa1 = Math.Round(finalgpa1, 2, MidpointRounding.AwayFromZero);
                                }
                                totgpa = totgpa + gpacal1;
                                cumcreditearned += creditearnedtot;
                                string creditearnedtot1 = String.Format("{0:0.00}", Convert.ToDouble(creditearnedtot));
                                tblgpacgpa.Cell(1, k - 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                tblgpacgpa.Cell(1, k - 1).SetContent(creditearnedtot1);



                                //-------------gpa------------------
                                if (intAbs == 0 && intFail == 0)
                                {

                                    if (flag == false)
                                    {
                                        //cgpa

                                        //string cal = "select exam_system,first_year_nonsemester from ndegree where degree_code='" + ddlbranch.SelectedValue.ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "'";
                                        //DataSet dscal = da.select_method_wo_parameter(cal, "text");
                                        //if (dscal.Tables.Count > 0 && dscal.Tables[0].Rows.Count > 0)
                                        //{
                                        //    if (dscal.Tables[0].Rows[0]["first_year_nonsemester"].ToString() == "0" || dscal.Tables[0].Rows[0]["first_year_nonsemester"].ToString().ToLower() == "false")
                                        //    {
                                        //        string qry3 = "Select mark_entry.*,maxtotal from Mark_Entry,Subject where Mark_Entry.Subject_No = Subject.Subject_No and Exam_Code = '" + exmcode + "' and ltrim(rtrim(type))='' and  Attempts =1 and roll_no='" + rollnosub + "'";
                                        //        DataSet dsqry3 = da.select_method_wo_parameter(qry3, "text");
                                        //        if (dsqry3.Tables.Count > 0 && dsqry3.Tables[0].Rows.Count > 0)
                                        //        {
                                        //            for (int j1 = 0; j1 < dsqry3.Tables[0].Rows.Count; j1++)
                                        //            {
                                        //                string mgrade = Convert.ToString(dsqry3.Tables[0].Rows[j1]["grade"]);
                                        //                if (string.IsNullOrEmpty(mgrade))
                                        //                    mgrade = "-";
                                        //                if (mgrade != "-")
                                        //                {
                                        //                    string crd = da.GetFunction("select credit_points from grade_master where mark_grade= '" + mgrade + "' and degree_code= '" + ddlbranch.SelectedValue.ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "'");
                                        //                    if(!string.IsNullOrEmpty(crd))
                                        //                         grpoints = Convert.ToDouble(crd);
                                        //                }
                                        //                else
                                        //                {
                                        //                    grpoints = 0;
                                        //                }
                                        //                string crdpt = da.GetFunction("select credit_points from subject where subject_no='" + Convert.ToString(dsqry3.Tables[0].Rows[j1]["subject_no"]) + "' ");
                                        //                if (!string.IsNullOrEmpty(crdpt))
                                        //                {
                                        //                    grcredit = Convert.ToDouble(crdpt);
                                        //                    grcredit1 = grcredit1 + grcredit;
                                        //                }
                                        //                else
                                        //                {
                                        //                    grcredit = 0;
                                        //                }
                                        //                gpa = (grpoints * grcredit);
                                        //                gpa1 = gpa1 + gpa;
                                        //            }
                                        //        }
                                        //        if (grcredit1 != 0)
                                        //        {
                                        //            gpacal = gpa1 / grcredit1;
                                        //        }
                                        //        else
                                        //        {
                                        //            gpacal = 0;
                                        //        }
                                        //        GPAVal = gpacal;
                                        //        cgpa2 = Math.Round(GPAVal, 2);
                                        //        gpafinal = Convert.ToString(cgpa2);




                                        //    }
                                        //    else if (dscal.Tables[0].Rows[0]["first_year_nonsemester"].ToString() == "1" || dscal.Tables[0].Rows[0]["first_year_nonsemester"].ToString().ToLower() == "true")
                                        //    {
                                        //         string qry3 = "Select mark_entry.*,maxtotal from Mark_Entry,Subject where Mark_Entry.Subject_No = Subject.Subject_No and Exam_Code = '" + exmcode + "' and ltrim(rtrim(type))='' and  Attempts =1 and roll_no='" + rollnosub + "'";
                                        //        DataSet dsqry3 = da.select_method_wo_parameter(qry3, "text");
                                        //        if (dsqry3.Tables.Count > 0 && dsqry3.Tables[0].Rows.Count > 0)
                                        //        {
                                        //            for (int j1 = 0; j1 < dsqry3.Tables[0].Rows.Count; j1++)
                                        //            {
                                        //                string mgrade = Convert.ToString(dsqry3.Tables[0].Rows[j1]["grade"]);
                                        //                if (string.IsNullOrEmpty(mgrade))
                                        //                    mgrade = "-";
                                        //                if (mgrade != "-")
                                        //                {
                                        //                    string crd = da.GetFunction("select credit_points from grade_master where mark_grade= '" + mgrade + "' and degree_code= '" + ddlbranch.SelectedValue.ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "'");
                                        //                    if (!string.IsNullOrEmpty(crd))
                                        //                        grpoints = Convert.ToDouble(crd);
                                        //                }
                                        //                else
                                        //                {
                                        //                    grpoints = 0;
                                        //                }
                                        //                string crdpt = da.GetFunction("select credit_points from subject where subject_no='" + Convert.ToString(dsqry3.Tables[0].Rows[j1]["subject_no"]) + "' ");
                                        //                if (!string.IsNullOrEmpty(crdpt))
                                        //                {
                                        //                    grcredit = Convert.ToDouble(crdpt);
                                        //                    grcredit1 = grcredit1 + grcredit;
                                        //                }
                                        //                else
                                        //                {
                                        //                    grcredit = 0;
                                        //                }
                                        //                gpa = grpoints * grcredit;
                                        //                gpa1 = gpa1 + gpa;

                                        //            }
                                        //        }
                                        //         gpacal = gpa1 / grcredit1;

                                        //         gpacal2 = gpacal2 + gpacal;

                                        //        cgpa1 = gpacal2 / (Convert.ToDouble(sem) - 1);
                                        //        GPAVal = cgpa1;
                                        //        cgpa2 = Math.Round(GPAVal,2);
                                        //        gpafinal = Convert.ToString(cgpa2);

                                        //    }
                                        //    overallcredit = grcredit1;
                                        //}

                                    }
                                    else
                                    {
                                        string cpa = da.GetFunction("SELECT COUNT(*) FROM Subject S,Syllabus_Master Y,SubjectChooser C Where s.syll_code = y.syll_code AND S.Subject_No = C.Subject_No AND Y.Semester = C.Semester AND batch_year ='" + ddlbatch.SelectedItem.Text.ToString() + "' AND Degree_Code ='" + ddlbranch.SelectedValue.ToString() + "' And C.semester ='" + k.ToString() + "' AND Roll_No ='" + rollnosub + "'  ");
                                        if (!string.IsNullOrEmpty(cpa))
                                            intTotSub = Convert.ToDouble(cpa);

                                        string sql1 = da.GetFunction("SELECT COUNT(*) FROM Mark_Entry M,Subject S,Syllabus_Master Y,Exam_Details E Where m.subject_no = s.subject_no And s.syll_code = y.syll_code AND Y.batch_year ='" + ddlbatch.SelectedItem.Text.ToString() + "' AND Y.Degree_Code ='" + ddlbranch.SelectedValue.ToString() + "' And semester ='" + k.ToString() + "' AND UPPER(Result) = 'PASS' AND Roll_No ='" + rollnosub + "' AND M.Exam_Code = E.Exam_Code");
                                        if (!string.IsNullOrEmpty(sql1))
                                            intPassSub = Convert.ToDouble(sql1);

                                        if (intTotSub == intPassSub)
                                        {
                                            //tblgpacgpa.Cell(2, k - 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                            //tblgpacgpa.Cell(2, k - 1).SetContent(finalgpa1.ToString());
                                            gpafinal = Convert.ToString(finalgpa1);
                                        }

                                        if (string.IsNullOrEmpty(gpafinal) || gpafinal == "0" || gpafinal.Trim() == "-")
                                        {
                                            gpafinal = "-";
                                        }
                                        else
                                        {
                                            double gparound = Convert.ToDouble(gpafinal);
                                            gparound = Math.Round(gparound, 2, MidpointRounding.AwayFromZero);
                                            gpafinal = Convert.ToString(gparound);
                                        }
                                    }

                                }
                                if (failsem.Contains(Convert.ToString(k)))
                                {
                                    if (failflaggpa == true)
                                    {
                                        tblgpacgpa.Cell(2, k - 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                        tblgpacgpa.Cell(2, k - 1).SetContent(string.Empty);
                                    }

                                }
                                else
                                {
                                    string finalgpa2 = String.Format("{0:0.00}", Convert.ToDouble(finalgpa1));
                                    tblgpacgpa.Cell(2, k - 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                    tblgpacgpa.Cell(2, k - 1).SetContent(finalgpa2.ToString());
                                }

                            }

                            //----------cumulative credit earned-------------
                            string cumcreditearned1 = string.Empty;
                            if (cumcreditearned == 0)
                                cumcreditearned1 = "-";
                            else
                                cumcreditearned1 = Convert.ToString(cumcreditearned);

                            tblgpacgpa.Cell(3, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                            tblgpacgpa.Cell(3, 0).SetContent(cumcreditearned1);
                            if (failflaggpa == false)
                            {
                                double cgpa = totgpa / cumcreditearned;
                                cgpa = Math.Round(cgpa, 2, MidpointRounding.AwayFromZero);
                                string cgpa3 = String.Format("{0:0.00}", Convert.ToDouble(cgpa));

                                tblgpacgpa.Cell(3, 7).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblgpacgpa.Cell(3, 7).SetContent(cgpa3.ToString());
                            }
                            else
                            {
                                tblgpacgpa.Cell(3, 7).SetContentAlignment(ContentAlignment.MiddleLeft);
                                tblgpacgpa.Cell(3, 7).SetContent(string.Empty);
                            }



                            Gios.Pdf.PdfTablePage mypdfpage4 = tblgpacgpa.CreateTablePage(new Gios.Pdf.PdfArea(doc, 187, 652, 390, 450));
                            pdfpage.Add(mypdfpage4);
                        }



                        pdfpage.SaveToDocument();
                        pdfpage = doc.NewPage();
                    }



                }
            }

            string apppath = HttpContext.Current.Server.MapPath("~");
            if (apppath != "")
            {
                string sz1path = apppath + "/Report/";
                string sz1File = "marksheet" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHmmss") + ".pdf";
                doc.SaveToFile(sz1path + sz1File);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + sz1File);
                Response.ContentType = "application1/pdf";
                Response.WriteFile(sz1path + sz1File);
            }

        }
        catch
        {
        }
    }

    public void gradecalculation(string rolno, string subno)
    {
        try
        {
            string grade = "";
            string exmcode = da.GetFunction("select exam_code from exam_details where degree_code='" + ddlbranch.SelectedValue.ToString() + "'  and exam_month='" + Convert.ToString(ddlMonth.SelectedValue).Trim() + "' and exam_year='" + Convert.ToString(ddlYear.SelectedItem.Text).Trim() + "' and  batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' ");
            string qry1 = "Select subject_name,subject_code,total,result,cp,credit_points,mark_entry.subject_no,attempts,external_mark from Mark_Entry,Subject,sub_sem where Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = '" + exmcode + "'  and roll_no='" + rolno + "' and subject.subject_no='" + subno + "'";
            qry1 = qry1 + "  SELECT * FROM COE_Attmaxmark WHERE CollegeCode ='" + ddlCollege.SelectedValue.ToString() + "'";
            DataSet ds1 = da.select_method_wo_parameter(qry1, "text");
            if (ds1.Tables.Count > 0 && ds1.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds1.Tables[0].Rows.Count; i++)
                {
                    double totMark = 0;
                    double.TryParse(Convert.ToString(ds1.Tables[0].Rows[i]["total"]), out totMark);
                    totMark = Math.Round(totMark, 0, MidpointRounding.AwayFromZero);
                    if (ds1.Tables[1].Rows.Count > 0)
                    {
                        string atmpt1 = Convert.ToString(ds1.Tables[0].Rows[i]["attempts"]);
                        string atmpt2 = Convert.ToString(ds1.Tables[1].Rows[0]["attempts"]);



                        if (Convert.ToInt32(atmpt1) >= Convert.ToInt32(atmpt2))
                        {
                            string markgarde = "select mark_grade from grade_master where degree_code='" + ddlbranch.SelectedValue.ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' and college_code='" + ddlCollege.SelectedValue.ToString() + "' and '" + Convert.ToString(ds1.Tables[0].Rows[i]["external_mark"]) + "' between frange and trange";
                            DataSet gd = da.select_method_wo_parameter(markgarde, "text");
                            if (gd.Tables.Count > 0 && gd.Tables[0].Rows.Count > 0)
                            {
                                gradenec = gd.Tables[0].Rows[0]["mark_grade"].ToString();
                            }

                        }
                        else
                        {
                            string mrlgd = "select mark_grade from grade_master where degree_code='" + ddlbranch.SelectedValue.ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' and college_code='" + ddlCollege.SelectedValue.ToString() + "' and '" + totMark + "' between frange and trange";
                            DataSet gd = da.select_method_wo_parameter(mrlgd, "text");
                            if (gd.Tables.Count > 0 && gd.Tables[0].Rows.Count > 0)
                            {
                                gradenec = gd.Tables[0].Rows[0]["mark_grade"].ToString();
                            }
                        }
                    }
                    else
                    {
                        string mrlgd = "select mark_grade from grade_master where degree_code='" + ddlbranch.SelectedValue.ToString() + "' and batch_year='" + ddlbatch.SelectedItem.Text.ToString() + "' and college_code='" + ddlCollege.SelectedValue.ToString() + "' and '" + totMark + "' between frange and trange";
                        DataSet gd = da.select_method_wo_parameter(mrlgd, "text");
                        if (gd.Tables.Count > 0 && gd.Tables[0].Rows.Count > 0)
                        {
                            gradenec = gd.Tables[0].Rows[0]["mark_grade"].ToString();
                        }
                    }
                }
            }
        }
        catch
        {
        }

    }

    #endregion







}
