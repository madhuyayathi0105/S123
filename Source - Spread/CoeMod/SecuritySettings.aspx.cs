using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Text.RegularExpressions;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Text;
using InsproDataAccess;
using System.Globalization;
using wc = System.Web.UI.WebControls;

public partial class SecuritySettings : System.Web.UI.Page
{
    string fin_startdate = string.Empty;
    string fin_enddate = string.Empty;
    string fin_endyear = string.Empty;
    string fin_startyear = string.Empty;
    Hashtable ht = new Hashtable();
    DAccess2 dasri = new DAccess2();
    DAccess2 d2 = new DAccess2();
    ReuasableMethods rs1 = new ReuasableMethods();
    DataSet dsbindv = new DataSet();
    DataSet dsbindv3 = new DataSet();
    DataSet ds = new DataSet();
    DataSet ds11 = new DataSet();
    ArrayList rights = new ArrayList();
    static ArrayList addlist = new ArrayList();

    InsproStoreAccess storeAcc = new InsproStoreAccess();
    InsproDirectAccess dir = new InsproDirectAccess();
    Dictionary<string, string> dicParam = new Dictionary<string, string>();

    int loop_val_col = 0;
    int loop_val_row = 0;
    int hours_val = 0;
    int count = 0;
    //IndReport
    string user_code;
    string collegecode1 = string.Empty;
    string hrandval = string.Empty;
    string str_hour = string.Empty;
    string day_val = string.Empty;
    string temp = string.Empty;
    string amt_val = string.Empty;
    string hr_val = string.Empty;
    string userorgropcode = string.Empty;
    string user_gropcode = string.Empty;
    string usergroup = string.Empty;
    string strusergruop = string.Empty;
    string struser_gruop = string.Empty;
    string folioexist = string.Empty;
    string prefixsuffix = string.Empty;
    string collegecode = string.Empty;
    string selected_userid = string.Empty;
    int selected_usercode = 0;
    int insupdvalue = 0;
    string singleuser = string.Empty;
    string group_user = string.Empty;
    string ddlformat2 = string.Empty;

    protected void lb2_Click(object sender, EventArgs e)
    {
        try
        {
            Session.Abandon();
            Session.Clear();
            Session.RemoveAll();
            System.Web.Security.FormsAuthentication.SignOut();
            Response.Redirect("default.aspx", false);
        }
        catch (Exception ex)
        {
        }
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        try
        {
            coemrksheeterror.Visible = false;
            errmsg.Visible = false;
            if (Session["collegecode"] == null) //Aruna For Back Button
            {
                Response.Redirect("Default.aspx");
            }
            singleuser = Session["single_user"].ToString();
            group_user = Session["group_code"].ToString();
            //------------------------------------------Muthu------------------------------------
            txt_stfone.Attributes.Add("readonly", "readonly");
            txt_stftwo.Attributes.Add("readonly", "readonly");
            ddlstaff.Visible = false;
            txt_search.Visible = false;
            lblsearchby.Visible = false;
            lblexamhearerr.Visible = false;
            fsstaff.Sheets[0].AutoPostBack = true;
            fsstaff.CommandBar.Visible = false;
            FarPoint.Web.Spread.StyleInfo styles = new FarPoint.Web.Spread.StyleInfo();
            styles.Font.Size = 10;
            styles.Font.Bold = true;
            fsstaff.Sheets[0].SheetCornerStyle = new FarPoint.Web.Spread.StyleInfo(styles);
            fsstaff.Sheets[0].AllowTableCorner = true;
            fsstaff.Sheets[0].RowHeader.Visible = false;
            fsstaff.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            fsstaff.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            fsstaff.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
            fsstaff.Sheets[0].DefaultColumnWidth = 50;
            fsstaff.Sheets[0].ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            fsstaff.Sheets[0].ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            fsstaff.Sheets[0].ColumnHeader.DefaultStyle.Font.Bold = true;
            fsstaff.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
            fsstaff.Sheets[0].DefaultStyle.Font.Name = "Book Antiqua";
            fsstaff.Sheets[0].DefaultStyle.Font.Bold = false;
            fsstaff.SheetCorner.Cells[0, 0].Font.Bold = true;
            fsstaff.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.AsNeeded;
            fsstaff.HorizontalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Always;
            //fsstaff.Sheets[0].AutoPostBack = true;
            fsstaff.Sheets[0].ColumnCount = 3;
            fsstaff.Sheets[0].ColumnHeader.Columns[0].Label = "S.No";
            fsstaff.Sheets[0].ColumnHeader.Columns[1].Label = "Staff Name";
            fsstaff.Sheets[0].ColumnHeader.Columns[2].Label = "Staff Code";
            fsstaff.Sheets[0].Columns[0].Width = 80;
            fsstaff.Sheets[0].Columns[1].Width = 300;
            fsstaff.Sheets[0].Columns[2].Width = 100;
            fsstaff.Sheets[0].Columns[0].Locked = true;
            fsstaff.Sheets[0].Columns[1].Locked = true;
            fsstaff.Sheets[0].Columns[2].Locked = true;
            //------------------------------------------Muthu------------------------------------



            if (!IsPostBack)
            {
                int a1 = 0;
                txt_attn_hour.Text = string.Empty;
                chkCAMBasedBatchRights.Checked = false;
                chkIncludeCondoUnpaid.Checked = false;
                chkIncMarkEntBatchRights.Checked = false;
                chkCoeSeatingArrangementLock.Checked = false;
                chkSerial.Checked = false;
                chkQpapertype.Checked = false;
                chkPresentAbsent.Checked = false;
                chkNeedReson.Checked = false;
                chkAttendanceCount.Checked = false;
                chkCIALock.Checked = false;
                chkShowDummy.Checked = false;
                txtNRNEMaxSubject.Text = string.Empty;
                txtOnPayMaxSubject.Text = string.Empty;
                chkNRNEMaxSubject.Checked = false;
                chkOnlinePaymentMaxSubject.Checked = false;
                chkShowGradeInCamCalulationDetails.Checked = false;
                rblSmsIndividualCommon.SelectedIndex = 0;
                DataSet dsload = dasri.select_method_wo_parameter("select distinct coll_acronymn,college_code from collinfo order by college_code", "Text");
                if (dsload.Tables[0].Rows.Count > 0)
                {
                    ddlcollege.Visible = true;
                    Label3.Visible = true;
                    // txtuser.Style.Value = "left:595px; top:195px; position: absolute;";
                    //  btnGo.Style.Value = "display: inline-block; color: Black; font-family: Book Antiqua; font-size: small; font-weight: bold; width: 50px; text-align: center; border-style: solid; border-width: 1px; border-color: gray; background-color: none; border-radius: 4px 4px 4px 4px; text-decoration: none; top:195px; left:900px; position:absolute;";
                    ddlcollege.DataSource = dsload;
                    ddlcollege.DataValueField = "college_code";
                    ddlcollege.DataTextField = "coll_acronymn";
                    ddlcollege.DataBind();
                }

                else
                {
                    ddlcollege.Visible = false;
                    Label3.Visible = false;
                    ddlcollege.SelectedIndex = 0;
                    // txtuser.Style.Value = "left: 460px; top:165px; position: absolute;";
                    // btnGo.Style.Value = "display: inline-block; color: Black; font-family: Book Antiqua; font-size: small; font-weight: bold; width: 50px; text-align: center; border-style: solid; border-width: 1px; border-color: gray; background-color: none; border-radius: 4px 4px 4px 4px; text-decoration: none; top:165px; left:600px; position:absolute;";
                }

                //if (dsload.Tables.Count > 0 && dsload.Tables[0].Rows.Count > 0)
                //{
                //    cblclg.DataSource = dsload;
                //    cblclg.DataTextField = "coll_acronymn";
                //    cblclg.DataValueField = "college_code";
                //    cblclg.DataBind();
                //    if (cblclg.Items.Count > 0)
                //    {
                //        for (int row = 0; row < cblclg.Items.Count; row++)
                //        {
                //            cblclg.Items[row].Selected = true;
                //        }
                //        cbclg.Checked = true;
                //        txtclg.Text = "(" + cblclg.Items.Count + ")";
                //    }
                //}
                if (dsload.Tables[0].Rows.Count > 0)
                {
                    ddlcollegename.Visible = true;
                    //Label3.Visible = true;
                    // txtuser.Style.Value = "left:595px; top:195px; position: absolute;";
                    //  btnGo.Style.Value = "display: inline-block; color: Black; font-family: Book Antiqua; font-size: small; font-weight: bold; width: 50px; text-align: center; border-style: solid; border-width: 1px; border-color: gray; background-color: none; border-radius: 4px 4px 4px 4px; text-decoration: none; top:195px; left:900px; position:absolute;";
                    ddlcollegename.DataSource = dsload;
                    ddlcollegename.DataValueField = "college_code";
                    ddlcollegename.DataTextField = "coll_acronymn";
                    ddlcollegename.DataBind();
                }
                BindClassifyBatchYear();
                bind_mess();
                BindReqType();
                string yeartrans = System.DateTime.Now.ToString("yyyy");
                // ddl_transyear.Items.Insert(0, "Year");
                for (int y = Convert.ToInt32(yeartrans); y >= 2005; y--)
                {
                    ddl_transyear.Items.Insert(a1, Convert.ToString(y));
                    a1++;
                }
                BindExamYear1();
                BindExamMonth1();
                collegebankAdmission();
                bindmonth();
                loadcriteria();




                cbletter.Items.Add(new ListItem("All", "0"));
                cbletter.Items.Add(new ListItem("Student", "1"));
                cbletter.Items.Add(new ListItem("Staff", "2"));
                cbletter.Items.Add(new ListItem("Parent", "3"));
                cbletter.Items.Add(new ListItem("Company", "4"));
                cbletter.Items.Add(new ListItem("Individual", "5"));
                cbletter.Items.Add(new ListItem("Magazines", "6"));
                cbletter.Items.Add(new ListItem("Others", "7"));
                cbl_gatepass.Items.Add(new ListItem("Student", "1"));
                cbl_gatepass.Items.Add(new ListItem("Staff", "2"));
                cbl_gatepass.Items.Add(new ListItem("Parent", "3"));
                cbl_gatepass.Items.Add(new ListItem("Visitor", "4"));
                cbl_gatepass.Items.Add(new ListItem("Material", "5"));
                cbl_gatepass.Items.Add(new ListItem("Vehicle", "6"));
                cbl_request.Items.Add(new ListItem("Item", "1"));
                cbl_request.Items.Add(new ListItem("Service", "2"));
                cbl_request.Items.Add(new ListItem("VisitorAppointment", "3"));
                cbl_request.Items.Add(new ListItem("Complaints", "4"));
                cbl_request.Items.Add(new ListItem("Leave", "5"));
                cbl_request.Items.Add(new ListItem("GatePass", "6"));
                cbl_request.Items.Add(new ListItem("Event", "7"));
                cb_reqHierarchy.Items.Add(new ListItem("Item", "1"));
                cb_reqHierarchy.Items.Add(new ListItem("Service", "2"));
                cb_reqHierarchy.Items.Add(new ListItem("VisitorAppointment", "3"));
                cb_reqHierarchy.Items.Add(new ListItem("Complaints", "4"));
                cb_reqHierarchy.Items.Add(new ListItem("Leave", "5"));
                cb_reqHierarchy.Items.Add(new ListItem("GatePass", "6"));
                cb_reqHierarchy.Items.Add(new ListItem("Event", "7"));
                cb_reqHierarchy.Items.Add(new ListItem("Payment", "8"));
                cb_reqHierarchy.Items.Add(new ListItem("Purchase", "9"));
                cb_reqHierarchy.Items.Add(new ListItem("Student Leave", "10"));

                cb_reqHierarchy.Items.Add(new ListItem("Certificate Request", "11"));
                cb_reqHierarchy.Items.Add(new ListItem("Inward Request", "12"));
                cb_hrscodesetting.Items.Add(new ListItem("Staff Code", "1"));
                cb_hrscodesetting.Items.Add(new ListItem("Application Number", "2"));
                cb_hrscodesetting.Items.Add(new ListItem("Designation Code", "3"));
                cb_hrscodesetting.Items.Add(new ListItem("Category Code", "4"));
                //smtabrights
                smtabrights.Items.Add(new ListItem("Application", "1"));
                smtabrights.Items.Add(new ListItem("Call Letter", "2"));
                smtabrights.Items.Add(new ListItem("Selection", "3"));
                smtabrights.Items.Add(new ListItem("Appointment", "4"));
                smtabrights.Items.Add(new ListItem("Transfer", "5"));
                smtabrights.Items.Add(new ListItem("Relieve", "6"));
                smtabrights.Items.Add(new ListItem("Appraisal", "7"));
                smtabrights.Items.Add(new ListItem("Promotion", "8"));
                smtabrights.Items.Add(new ListItem("Increment", "9"));
                smtabrights.Items.Add(new ListItem("Loan", "10"));
                //Tcformat settings
                //Cbl_tcformate.Items.Add(new ListItem("CBSE", "1"));
                //Cbl_tcformate.Items.Add(new ListItem("SSLC", "2"));
                //Cbl_tcformate.Items.Add(new ListItem("HSC", "3"));
                //Cbl_tcformate.Items.Add(new ListItem("TRANSFER CERTIFICATE", "4"));
                //Cbl_tcformate.Items.Add(new ListItem("MIGRATION CERTIFICATE", "5"));
                //Cbl_tcformate.Items.Add(new ListItem("TRANSFER CERTIFICATE Jamal", "6"));
                lblerrvel.Visible = false;
                txtpaydate1from.Text = System.DateTime.Now.ToString("dd.MM.yyyy");
                txtpaydate1to.Text = System.DateTime.Now.ToString("dd.MM.yyyy");
                txtpaydate2from.Text = System.DateTime.Now.ToString("dd.MM.yyyy");
                txtpaydate2to.Text = System.DateTime.Now.ToString("dd.MM.yyyy");
                string paydate = dasri.GetFunction("select value from Master_Settings where settings='without penalty'");
                if (paydate != "0" && paydate != "")
                {
                    string[] splitpaydate1 = paydate.Split('-');
                    txtpaydate1from.Text = Convert.ToString(splitpaydate1[0]);
                    txtpaydate1to.Text = Convert.ToString(splitpaydate1[1]);
                }
                paydate = dasri.GetFunction("select value from Master_Settings where settings='with penalty'");
                if (paydate != "0" && paydate != "")
                {
                    string[] splitpaydate1 = paydate.Split('-');
                    txtpaydate2from.Text = Convert.ToString(splitpaydate1[0]);
                    txtpaydate2to.Text = Convert.ToString(splitpaydate1[1]);
                }

                //
                string Examfeetype = dasri.GetFunction("select value from Master_Settings where settings='Fee obtained from Subject Type'");
                if (Examfeetype == "1")
                {
                    chksubtypeFee.Checked = true;
                }
                //
                txtpaydate1from.Attributes.Add("Readonly", "Readonly");
                txtpaydate1to.Attributes.Add("Readonly", "Readonly");
                txtpaydate2from.Attributes.Add("Readonly", "Readonly");
                txtpaydate2to.Attributes.Add("Readonly", "Readonly");
                rb_clg.Checked = true;
                FpSpreadsms.Visible = true;
                FpSpreadsms.Sheets[0].AutoPostBack = false;
                FpSpreadsms.CommandBar.Visible = false;
                FpSpreadsms.Sheets[0].RowHeader.Visible = false;
                FpSpreadsms.Sheets[0].ColumnHeader.RowCount = 1;
                FpSpreadsms.Sheets[0].ColumnCount = 4;
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 0].Font.Name = "Book Antiqua";
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 0].Font.Size = 12;
                FpSpreadsms.Columns[0].Width = 40;
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 1].Text = "Select";
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 1].Font.Name = "Book Antiqua";
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 1].Font.Size = 12;
                FpSpreadsms.Columns[1].Width = 80;
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Purpose";
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 2].HorizontalAlign = HorizontalAlign.Center;
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 2].Font.Name = "Book Antiqua";
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 2].Font.Size = 12;
                FpSpreadsms.Columns[2].Width = 100;
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 3].Text = "SMS Templete";
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 3].HorizontalAlign = HorizontalAlign.Center;
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 3].Font.Name = "Book Antiqua";
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 3].Font.Bold = true;
                FpSpreadsms.Sheets[0].ColumnHeader.Cells[0, 3].Font.Size = 12;
                FpSpreadsms.Columns[3].Width = 300;
                bindtemple();
                FpSpreadsms.Height = 300;
                FpSpreadsms.Width = 700;
                FpSpreadsms.Sheets[0].RowCount = 0;
                //------------------Bind Academic year (gowtham) -----------------------------------
                txt_smsday.Enabled = false;
                rbhour.Checked = true;
                pcesubjecttype.DynamicServicePath = string.Empty;
                //con.Close();
                //con.Open();
                int batchyear = 0;
                string bindbatchquery = "select distinct batch_year from Registration where batch_year<>'-1' and batch_year<>'' and cc=0 and delflag=0 and exam_flag<>'debar' order by batch_year";
                DataSet dsbatch = dasri.select_method_wo_parameter(bindbatchquery, "Text");
                if (dsbatch.Tables[0].Rows.Count > 0)
                {
                    for (int b = 0; b < dsbatch.Tables[0].Rows.Count; b++)
                    {
                        ddlacefromyear.Items.Add(new System.Web.UI.WebControls.ListItem(Convert.ToString(dsbatch.Tables[0].Rows[b]["batch_year"]), Convert.ToString(dsbatch.Tables[0].Rows[b]["batch_year"])));
                        ddlacetoyear.Items.Add(new System.Web.UI.WebControls.ListItem(Convert.ToString(dsbatch.Tables[0].Rows[b]["batch_year"]), Convert.ToString(dsbatch.Tables[0].Rows[b]["batch_year"])));
                        batchyear = Convert.ToInt32(Convert.ToString(dsbatch.Tables[0].Rows[b]["batch_year"]));
                    }
                }
                //SqlCommand cmdquery = new SqlCommand(bindbatchquery, con);
                //SqlDataReader sqldr;
                //sqldr = cmdquery.ExecuteReader();
                //while (sqldr.Read())
                //{
                //    ddlacefromyear.Items.Add(new System.Web.UI.WebControls.ListItem(Convert.ToString(sqldr["batch_year"]), Convert.ToString(sqldr["batch_year"])));
                //    ddlacetoyear.Items.Add(new System.Web.UI.WebControls.ListItem(Convert.ToString(sqldr["batch_year"]), Convert.ToString(sqldr["batch_year"])));
                //    batchyear = Convert.ToInt32(Convert.ToString(sqldr["batch_year"]));
                //}
                if (batchyear != 0)
                {
                    batchyear = batchyear + 1;
                    ddlacefromyear.Items.Add(new System.Web.UI.WebControls.ListItem(Convert.ToString(batchyear), Convert.ToString(batchyear)));
                    ddlacetoyear.Items.Add(new System.Web.UI.WebControls.ListItem(Convert.ToString(batchyear), Convert.ToString(batchyear)));
                }
                lockuser();
                fromdate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
                todate.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
                fromdate.Attributes.Add("readonly", "readonly");
                todate.Attributes.Add("readonly", "readonly");
                fromdatecode.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
                todatecode.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
                fromdatecode.Attributes.Add("readonly", "readonly");
                todatecode.Attributes.Add("readonly", "readonly");
                fromdateapplication.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
                todateapplication.Text = System.DateTime.Now.ToString("dd/MM/yyyy");
                fromdateapplication.Attributes.Add("readonly", "readonly");
                todateapplication.Attributes.Add("readonly", "readonly");
                string academicfromtoyear = dasri.GetFunctionv("select value from master_settings where settings='Academic year'");
                if (academicfromtoyear != "")
                {
                    string[] fromtoyear = academicfromtoyear.Split(',');
                    ddlacefromyear.SelectedValue = Convert.ToString(fromtoyear[0]);
                    ddlacetoyear.SelectedValue = Convert.ToString(fromtoyear[1]);
                }
                else
                {
                    int yearcount = ddlacefromyear.Items.Count;
                    ddlacefromyear.SelectedIndex = yearcount - 2;
                    ddlacetoyear.SelectedIndex = yearcount - 1;
                }
                chkcaldateentry.Checked = false;
                //-------------------- academic year end----------------------------------------------
                bindsmssetting();
                btnsave.Visible = true;
                btnfin_save.Visible = false;
                btnsave_coe.Visible = false;
                save_btn.Visible = true;
                bindAttendanceHourSetting();
                //=====================End==============================
                //========= start to add 070612 by mythili
                // con.Close();
                // con.Open();
                DataSet dssfin = dasri.select_method_wo_parameter("select value from master_settings where settings='Starting Date' and usercode=" + Convert.ToString(Session["usercode"]) + "", "Text");
                // SqlDataAdapter fin = new SqlDataAdapter("select value from master_settings where settings='Starting Date' and usercode=" + Convert.ToString(Session["usercode"]) + "", con);
                //  fin.Fill(dssfin);
                if (dssfin.Tables.Count > 0 && dssfin.Tables[0].Rows.Count > 0)
                {
                    if ((Convert.ToString(dssfin.Tables[0].Rows[0][0]) != null) && (Convert.ToString(dssfin.Tables[0].Rows[0][0]) != "0") && (Convert.ToString(dssfin.Tables[0].Rows[0][0]) != "") && (Convert.ToString(dssfin.Tables[0].Rows[0][0]) != "-"))
                    {
                        string fin_date = Convert.ToString(dssfin.Tables[0].Rows[0][0]);
                        string[] fin_datesplit = fin_date.Split(new Char[] { '-' });
                        if (fin_datesplit.GetUpperBound(0) > 0)
                        {
                            fin_startdate = Convert.ToString(fin_datesplit[0]);
                            string[] fin_datesplit1 = fin_startdate.Split(new Char[] { '/' });
                            fin_startyear = Convert.ToString(fin_datesplit1[2]);
                            fin_startdate = Convert.ToString(fin_datesplit1[1]) + "-" + Convert.ToString(fin_datesplit1[0]) + "-" + Convert.ToString(fin_datesplit1[2]);
                            fin_enddate = Convert.ToString(fin_datesplit[1]);
                            string[] fin_datesplit2 = fin_enddate.Split(new Char[] { '/' });
                            fin_endyear = Convert.ToString(fin_datesplit2[2]);
                            fin_enddate = Convert.ToString(fin_datesplit2[1]) + "-" + Convert.ToString(fin_datesplit2[0]) + "-" + Convert.ToString(fin_datesplit2[2]);
                        }
                    }
                }
                //==============================end added on 070612
                // added by anandan for setting order by
                string strorder = string.Empty;
                //con.Close();
                //con.Open();
                DataSet dsorder = dasri.select_method_wo_parameter("SELECT value FROM Master_Settings WHERE Settings ='order_by'", "Text");
                // SqlDataAdapter daorder = new SqlDataAdapter("SELECT value FROM Master_Settings WHERE Settings ='order_by'", con);
                //int.daorder.Fill(dsorder);
                if (dsorder.Tables[0].Rows.Count > 0)
                    strorder = Convert.ToString(dsorder.Tables[0].Rows[0]["value"]);
                if (strorder == "0")
                {
                    chkrollorder.Checked = true;
                    chkregorder.Checked = false;
                    chknameorder.Checked = false;
                }
                else if (strorder == "1")
                {
                    chkrollorder.Checked = false;
                    chkregorder.Checked = true;
                    chknameorder.Checked = false;
                }
                else if (strorder == "2")
                {
                    chkrollorder.Checked = false;
                    chkregorder.Checked = false;
                    chknameorder.Checked = true;
                }
                else if (strorder == "0,1,2")
                {
                    chkrollorder.Checked = true;
                    chkregorder.Checked = true;
                    chknameorder.Checked = true;
                }
                else if (strorder == "0,1")
                {
                    chkrollorder.Checked = true;
                    chkregorder.Checked = true;
                    chknameorder.Checked = false;
                }
                else if (strorder == "1,2")
                {
                    chkrollorder.Checked = false;
                    chkregorder.Checked = true;
                    chknameorder.Checked = true;
                }
                else if (strorder == "0,2")
                {
                    chkrollorder.Checked = true;
                    chkregorder.Checked = false;
                    chknameorder.Checked = true;
                }
                //pmonfee.Visible = false;
                //pgenfee.Visible = false;
                load_feetype();
                loadleave();
                //chbFather.Visible = false;
                //chbMother.Visible = false;
                //chbStudent.Visible = false;
                //  panelselecthours.Visible = false;
                bindspread();
                errlbl_cor.Visible = false;
                TabContainer1.SelectedIndex = 0;
                //con.Close();
                //con.Open();
                // SqlDataAdapter da201 = new SqlDataAdapter("select * from rcptprint_settings where collegecode=" + Convert.ToString(ddlcollege.SelectedValue) + "", con);
                DataSet ds201 = dasri.select_method_wo_parameter("select * from rcptprint_settings where collegecode=" + Convert.ToString(ddlcollege.SelectedValue) + "", "Text");
                // da201.Fill(ds201);
                if (ds201.Tables.Count > 0 && ds201.Tables[0].Rows.Count == 0)
                {
                    //string sqlstr = "insert into rcptprint_settings (collegecode,college_name,city ,rcpt_time ,degree_acr ,batch_year ,semester ,regno ,father_name ,rollas_adm ,rcpt_valid ,allot ,fine ,balance ,semoryear ,prev_paid ,stu_copy ,off_copy ,for_collname ,narration ,author_sign ,author_name,header_rcpt,priority,cur_sem_year,get_monthly_fee)values (" + Convert.ToString(ddlcollege.SelectedValue) + ",1,1 ,0 ,1 ,0 ,1 ,1 ,0 ,0 ,0 ,0 ,1 ,0 ,0 ,0 ,1,1,1,0 ,0,'',0,0,0,0)";
                    //SqlCommand cmd = new SqlCommand(sqlstr);
                    //cmd.Connection = con;
                    //cmd.ExecuteNonQuery();
                }
                //============start add 070612
                //con.Close();
                //con.Open();
                //SqlDataAdapter da207 = new SqlDataAdapter("select * from advance_payment_settings where collegecode=" + Convert.ToString(ddlcollege.SelectedValue) + "", con);
                DataSet ds207 = dasri.select_method_wo_parameter("select * from advance_payment_settings where collegecode=" + Convert.ToString(ddlcollege.SelectedValue) + "", "text");
                //  da207.Fill(ds207);
                if (ds207.Tables.Count > 0 && ds207.Tables[0].Rows.Count > 0)
                {
                    for (int newrsval = 0; newrsval < ds207.Tables[0].Rows.Count; newrsval++)
                    {
                        txt_advdate.Text = ds207.Tables[0].Rows[newrsval]["adv_date"].ToString();
                        if (Convert.ToString(ds207.Tables[0].Rows[newrsval]["mode"]) == "Monthwise")
                        {
                            for (int i = 0; i < ddlfeetype.Items.Count; i++)
                            {
                                if (Convert.ToString(ddlfeetype.Items[i].Value) == Convert.ToString(ds207.Tables[0].Rows[newrsval]["fee_code"]))
                                {
                                    ddlfeetype.Items[i].Selected = true;
                                }
                            }
                        }
                        else if (Convert.ToString(ds207.Tables[0].Rows[newrsval]["mode"]) == "Regular")
                        {
                            for (int i = 0; i < ddlfeetype1.Items.Count; i++)
                            {
                                if (Convert.ToString(ddlfeetype1.Items[i].Value) == Convert.ToString(ds207.Tables[0].Rows[newrsval]["fee_code"]))
                                {
                                    ddlfeetype1.Items[i].Selected = true;
                                }
                            }
                        }
                    }
                }
                //===================end add 070612
                //con.Close();
                //con.Open();
                //SqlDataAdapter da20 = new SqlDataAdapter("select * from rcptprint_settings where collegecode=" + Convert.ToString(ddlcollege.SelectedValue) + "", con);
                DataSet ds20 = dasri.select_method_wo_parameter("select * from rcptprint_settings where collegecode=" + Convert.ToString(ddlcollege.SelectedValue) + "", "Text");
                //da20.Fill(ds20);
                if (ds20.Tables[0].Rows.Count > 0)
                {
                    chk_clg.Checked = (ds20.Tables[0].Rows[0]["college_name"].ToString() == "True") ? true : false;
                    chk_city.Checked = (ds20.Tables[0].Rows[0]["city"].ToString() == "True") ? true : false;
                    chk_time.Checked = (ds20.Tables[0].Rows[0]["rcpt_time"].ToString() == "True") ? true : false;
                    chk_degree.Checked = (ds20.Tables[0].Rows[0]["degree_acr"].ToString() == "True") ? true : false;
                    chk_year.Checked = (ds20.Tables[0].Rows[0]["batch_year"].ToString() == "True") ? true : false;
                    chk_hsem.Checked = (ds20.Tables[0].Rows[0]["semester"].ToString() == "True") ? true : false;
                    chk_regno.Checked = (ds20.Tables[0].Rows[0]["regno"].ToString() == "True") ? true : false;
                    chk_fathername.Checked = (ds20.Tables[0].Rows[0]["father_name"].ToString() == "True") ? true : false;
                    chk_setrollno.Checked = (ds20.Tables[0].Rows[0]["rollas_adm"].ToString() == "True") ? true : false;
                    chk_allot.Checked = (ds20.Tables[0].Rows[0]["allot"].ToString() == "True") ? true : false;
                    chk_fine.Checked = (ds20.Tables[0].Rows[0]["fine"].ToString() == "True") ? true : false;
                    chk_bal.Checked = (ds20.Tables[0].Rows[0]["balance"].ToString() == "True") ? true : false;
                    chk_bsem.Checked = (ds20.Tables[0].Rows[0]["semoryear"].ToString() == "True") ? true : false;
                    chk_prev_paid.Checked = (ds20.Tables[0].Rows[0]["prev_paid"].ToString() == "True") ? true : false;
                    chk_singlepage.Checked = (ds20.Tables[0].Rows[0]["single_page"].ToString() == "True") ? true : false;
                    chk_studcopy.Checked = (ds20.Tables[0].Rows[0]["stu_copy"].ToString() == "True") ? true : false;
                    chk_officecopy.Checked = (ds20.Tables[0].Rows[0]["off_copy"].ToString() == "True") ? true : false;
                    chk_clgname.Checked = (ds20.Tables[0].Rows[0]["for_collname"].ToString() == "True") ? true : false;
                    chk_Narration.Checked = (ds20.Tables[0].Rows[0]["narration"].ToString() == "True") ? true : false;
                    chk_authorised_sign.Checked = (ds20.Tables[0].Rows[0]["author_sign"].ToString() == "True") ? true : false;
                    chk_countername.Checked = (ds20.Tables[0].Rows[0]["counter_name"].ToString() == "1") ? true : false;
                    chk_counterno.Checked = (ds20.Tables[0].Rows[0]["counter_no"].ToString() == "1") ? true : false;
                    chk_preprint.Checked = (Convert.ToString(ds20.Tables[0].Rows[0]["preprint"]) == "1") ? true : false;
                    chk_cash.Checked = (ds20.Tables[0].Rows[0]["cashier_sign"].ToString() == "True") ? true : false;
                    if (ds20.Tables[0].Rows[0]["rcpt_valid"].ToString() != "" && ds20.Tables[0].Rows[0]["rcpt_valid"].ToString() != "0")
                    {
                        txtrcpt_valid.Text = ds20.Tables[0].Rows[0]["rcpt_valid"].ToString();
                    }
                    else
                    {
                        txtrcpt_valid.Text = string.Empty;
                    }
                    if (ds20.Tables[0].Rows[0]["author_name"].ToString() != "")
                    {
                        txtauthor_name.Text = ds20.Tables[0].Rows[0]["author_name"].ToString();
                    }
                    else
                    {
                        txtauthor_name.Text = string.Empty;
                    }
                    if (ds20.Tables[0].Rows[0]["cashier_name"].ToString() != "")
                    {
                        txt_cash.Text = ds20.Tables[0].Rows[0]["cashier_name"].ToString();
                    }
                    else
                    {
                        txt_cash.Text = string.Empty;
                    }
                    chk_shw_mnt_name.Checked = (ds20.Tables[0].Rows[0]["show_month_name"].ToString() == "True") ? true : false;
                    Chk_header.Checked = (ds20.Tables[0].Rows[0]["header_rcpt"].ToString() == "True") ? true : false;
                    Chk_priority.Checked = (ds20.Tables[0].Rows[0]["priority"].ToString() == "True") ? true : false;
                    Chk_cursem.Checked = (ds20.Tables[0].Rows[0]["cur_sem_year"].ToString() == "True") ? true : false;
                    Chk_prevmonth.Checked = (ds20.Tables[0].Rows[0]["get_monthly_fee"].ToString() == "True") ? true : false;
                    if (ds20.Tables[0].Rows[0]["pay_demandordirect"].ToString() != "")
                    {
                        string setpaytype = ds20.Tables[0].Rows[0]["pay_demandordirect"].ToString();
                        if (setpaytype == "1")
                        {
                            rbpay.Items[1].Selected = true;
                        }
                        else
                        {
                            rbpay.Items[0].Selected = true;
                        }
                    }
                }
                TreeNode head_node = new TreeNode("Security Settings", "1");
                //0 attendence added by sudhagar on may 2016
                #region Attendence setting

                head_node.ChildNodes.Add(new TreeNode("Attendance", "100"));
                //
                head_node.ChildNodes[0].ChildNodes.Add(new TreeNode("Master", "999001"));
                head_node.ChildNodes[0].ChildNodes.Add(new TreeNode("Operation", "999002"));
                head_node.ChildNodes[0].ChildNodes.Add(new TreeNode("Report", "101"));

                //17-12-2016 Idhris
                //Master
                head_node.ChildNodes[0].ChildNodes[0].ChildNodes.Add(new TreeNode("Subject Allotments", "713"));
                head_node.ChildNodes[0].ChildNodes[0].ChildNodes.Add(new TreeNode("Batch Allocation", "714"));
                head_node.ChildNodes[0].ChildNodes[0].ChildNodes.Add(new TreeNode("Lesson Planner", "715"));
                head_node.ChildNodes[0].ChildNodes[0].ChildNodes.Add(new TreeNode("Semester Time Table", "717"));
                head_node.ChildNodes[0].ChildNodes[0].ChildNodes.Add(new TreeNode("Syllabus Entry", "719"));
                head_node.ChildNodes[0].ChildNodes[0].ChildNodes.Add(new TreeNode("Master Time Table", "721"));
                head_node.ChildNodes[0].ChildNodes[0].ChildNodes.Add(new TreeNode("Online Elective Subject Type Settings", "723"));
                head_node.ChildNodes[0].ChildNodes[0].ChildNodes.Add(new TreeNode("Special Hour Batch Allocation", "724"));
                head_node.ChildNodes[0].ChildNodes[0].ChildNodes.Add(new TreeNode("Master Subject Allotments", "727"));
                head_node.ChildNodes[0].ChildNodes[0].ChildNodes.Add(new TreeNode("Subject Allotments - A", "729"));//Aruna 22/jun/2017
                head_node.ChildNodes[0].ChildNodes[0].ChildNodes.Add(new TreeNode("Subject Wise Batch Allocation", "728"));

                //Operation
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Entry", "1001"));
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("OD Entry", "100001"));
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Consider Dayorder Changed", "722"));
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Special Hour Attendance", "100002"));
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Student Conduct", "100003"));
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Staff Attendance Entry With Out Timetable", "100004"));
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("All Student Attendance", "100005"));
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Attendance Entry New", "100006"));
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Student Condonation", "100007"));
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Special Day/Free Hour Entry", "100008"));
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Student Attendance New", "100009"));
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Special Hour Allotment", "100010"));
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Special Hour Student Selection", "100011"));
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Student Subject Allotment Conversion", "100012"));
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Late Entry Attendance", "100018"));
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Subject Room Allotment", "100020"));
                //magesh 23/2/18
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Overall College Attendance Percentage", "100013"));
                //kowshika 07.04.2018
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Class Section Wise Master Settings", "100015"));
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Elective Subject Student Count", "100016"));
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("TTSelection Settings", "100017"));
                //Report
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Hourwise/Daywise Absentees Report", "1002"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Cumulative Attendance Report", "1003"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Monthly Student Attendance Report", "1004"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Missing Hour Attendance Report", "1005"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("OverAll Attendance Report PerDay", "1006"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Consolidated Student Attendance Report.", "1007"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Overall Daily Attendance Report", "1008"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Subjectwise Attendance With Percentage Report", "1009"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Attendance Fine Report.", "1010"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Individual Student Attendance.", "1011"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Congratulations Report.", "1012"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Individual Subject Wise Attendance Report.", "1013"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Consolidate SubjectWise Attendance Report.", "1014"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Subject Wise Attendance Details – Splitup Report.", "1015"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Overall Attendance Details -Splitup Report.", "1016"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Attendance Shortage Details - Regulation Report.", "1017"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Overall College Attendance Percentage Report.", "1018"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Overall Persentagewise Attendance Report.", "1019"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Special Hour Report.", "1020"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Student Weekly Report.", "1021"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Daily Entry and Lesson Planner Report.", "1022"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Attendance Report.", "1023"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Attendance With Reason.", "1024"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Subject Notes", "1025"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Day Wise Staff Task Performance Report", "1026"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Student Letter Report", "1027"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Absentees Report", "1028"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Department & Period Wise Attendance Report", "1029"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Consolidated Cummulative Attendance Report", "1030"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Consolidated Absentees Report", "1031"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Attendance Period Master Settings", "1032"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Absentees Report of Board", "1033"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Day Wise Abseentees SMS", "1034"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Attendance Report PerDay", "1035"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("School Attendance Report", "1036"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("School Compartmentwise Report", "1037"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Subject Wise Attendance Report", "1038"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Staff Key List", "1039"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Student Previous Attendance Report", "1040"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Student Condonation Report", "1041"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Subject Selected Student Report", "720"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Individual Student Condonation Report", "1042"));
                //kowshika 07.04.2018
                head_node.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Elective Subject Count Report", "100014"));
                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Late Entry Attendance Report", "100019"));

                //head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Special Hour Master Setting", "1042"));
                //head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Special Hour Student Selection", "1043"));

                //head_node.ChildNodes[0].ChildNodes[0].ChildNodes.Add(new TreeNode("Tamil Name Import", "729"));

                #endregion
                //1 CAM
                #region CAM setting

                head_node.ChildNodes.Add(new TreeNode("CAM", "200"));
                head_node.ChildNodes[1].ChildNodes.Add(new TreeNode("Master", "999003"));
                head_node.ChildNodes[1].ChildNodes.Add(new TreeNode("Operation", "999004"));
                head_node.ChildNodes[1].ChildNodes.Add(new TreeNode("Reports", "201"));
                head_node.ChildNodes[1].ChildNodes.Add(new TreeNode("Report Card Master", "999005"));
                head_node.ChildNodes[1].ChildNodes.Add(new TreeNode("Report Card Operation", "999006"));
                head_node.ChildNodes[1].ChildNodes.Add(new TreeNode("Report Card Reports", "999007"));
                //Master
                head_node.ChildNodes[1].ChildNodes[0].ChildNodes.Add(new TreeNode("Criteria For Internal", "2037"));
                head_node.ChildNodes[1].ChildNodes[0].ChildNodes.Add(new TreeNode("Cam Calculation Lock Entry", "2030"));
                //Operation
                head_node.ChildNodes[1].ChildNodes[1].ChildNodes.Add(new TreeNode("Entry", "2001"));
                head_node.ChildNodes[1].ChildNodes[1].ChildNodes.Add(new TreeNode("Internal Mark Calculation", "716"));
                head_node.ChildNodes[1].ChildNodes[1].ChildNodes.Add(new TreeNode("CAM Planned Mark Entry", "2024"));
                head_node.ChildNodes[1].ChildNodes[1].ChildNodes.Add(new TreeNode("Direct Internal Mark Entry", "2036"));
                head_node.ChildNodes[1].ChildNodes[1].ChildNodes.Add(new TreeNode("Internal Seating Arrangement", "2053"));
                head_node.ChildNodes[1].ChildNodes[1].ChildNodes.Add(new TreeNode("Invigilation", "2054"));
                head_node.ChildNodes[1].ChildNodes[1].ChildNodes.Add(new TreeNode("Invigilation Schedule", "2055"));
                //---===-added by Deepali on 30.4.18
                head_node.ChildNodes[1].ChildNodes[1].ChildNodes.Add(new TreeNode("Internal Mark Entry", "2057"));
                head_node.ChildNodes[1].ChildNodes[1].ChildNodes.Add(new TreeNode("Laboratory Internal Mark Entry", "2058"));
                head_node.ChildNodes[1].ChildNodes[1].ChildNodes.Add(new TreeNode("Internal Exam Questions Settings", "2060"));
                //-------====--------end 30.4.18
                //Report
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Faculty Performance", "2002"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Monthly and Model Examination Fine Report", "2003"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Mark Analysis for Monthly/Model Examination Report", "2005"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("CAM Subject Range Analysis Report ", "2006"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("CAM Report", "2007"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("CAT Report ", "2008"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Overall Best Performance", "2009"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("CAM Result Analysis", "2010"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Letter Format Report", "2011"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Internal Assessment Marks", "2012"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Continuous Assessment Report", "2013"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Branchwise Result Analysis", "2014"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Student's Overall CAM Report", "2015"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Branchwise Subject Analysis", "2016"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("CAM-Subjectwise Performance", "2017"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Individual Student Performance", "2018"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Target Report", "2019"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Overall College Best Performance", "2020"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("CAM Voice Call Send ", "2021"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("CAM Report Format II ", "2022"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("CAM Failure Report", "2023"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Department Wise Performance Report", "2025"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Consolidated Mark Sheet Report", "2026"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Overall CAM Report", "2027"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Cummulative Mark Report", "2028"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Consolidate Mark Report", "2029"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Internal Performance Analysis Report", "2031"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Subject Analysis Report", "2032"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Faculty Wise Performance Report", "2033"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Internal Result Analysis Report", "2034"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Department Wise Internal Exam Result Analysis", "2035"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Yearwise Result Analysis", "2038"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Department Wise Result Analysis", "2039"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Subjectwise Multiple Test Report", "2041"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Consolidated Subject Wise Report", "2043"));//
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Overall College Faculty Wise Result Analysis Report", "2044"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Subject wise Test Result Analysis Report", "2045"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("CAM Consolidate Mark List Report", "2046"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("CAM Moderation Mark", "2047"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Student Previous Mark Report", "2048"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Individual Student Academic Performance", "2049"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Subject Wise Test Mark Report", "2050"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Consolidated Statement of Marks Report", "2051"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Class Wise Test Mark Statistical Analysis", "2052"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Invigilation Report", "2056"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Internal Mark Report", "2059"));//Deepali 30.4.18
                //Added By Saranyadevi 29.10.2018
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Course Outcomes Based Report 1", "999008"));
                head_node.ChildNodes[1].ChildNodes[2].ChildNodes.Add(new TreeNode("Course Outcomes Based Report 2", "999009"));

                //Report Card Master
                head_node.ChildNodes[1].ChildNodes[3].ChildNodes.Add(new TreeNode("Master Settings", "13001"));
                head_node.ChildNodes[1].ChildNodes[3].ChildNodes.Add(new TreeNode("Activity Settings", "13002"));
                //Report Card Operation
                head_node.ChildNodes[1].ChildNodes[4].ChildNodes.Add(new TreeNode("Activity Entry", "13003"));
                head_node.ChildNodes[1].ChildNodes[4].ChildNodes.Add(new TreeNode("Remark Entry", "13009"));
                //Report Card Reports
                //head_node.ChildNodes[1].ChildNodes.Add(new TreeNode("Report Card And Grade Sheet", "13004"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("Subjectwise Report", "13005"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("Cummulative Mark And Grade", "13006"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("Consolidated Mark And Grade Report", "13007"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("Class Register Mark And Grade Report", "13008"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("Report Card And Grade Sheet", "13010"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("CBSE PREKG", "13011"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("CBSE I-II", "13012"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("CBSE III-V", "13013"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("CBSE IX- X", "13014"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("Matric Report Card  VI- VIII", "13015"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("Matric Report Card IX & X", "13016"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("Matric Report Card XI - XII", "13017"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("Anglo Indian", "13018"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("Anglo Indian Report Card Xth,XIth & XIIth", "13019"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("ICSE Reportcard I - V", "13020"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("ICSE Reportcard VI - VIII", "13021"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("ICSE Reportcard IX - X", "13022"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("ICSE Reportcard XI - XII", "13023"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("Nursery PREKG", "13024"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("Performance Report Card ICSE I To III", "13025"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("Performance Report Card ICSE IV - VIII", "13026"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("Performance Report Card ICSE IX - X", "13027"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("Performance Report Card ICSE XI", "13028"));
                head_node.ChildNodes[1].ChildNodes[5].ChildNodes.Add(new TreeNode("Performance Report Card ICSE XII", "13029"));

                #endregion

                //2 Schedule
                #region schedule setting

                head_node.ChildNodes.Add(new TreeNode("Schedule", "300"));
                //
                head_node.ChildNodes[2].ChildNodes.Add(new TreeNode("Entry", "3001"));
                head_node.ChildNodes[2].ChildNodes.Add(new TreeNode("Schedule Report", "301"));
                head_node.ChildNodes[2].ChildNodes.Add(new TreeNode("Staff Time Table", "3012"));//Deepali 11.5.18
                head_node.ChildNodes[2].ChildNodes.Add(new TreeNode("New Staff Time Table", "3013"));//Raj 9-7-18
                //
                head_node.ChildNodes[2].ChildNodes.Add(new TreeNode("Double Day Order Entry", "3014"));//magesh 16.8.18
                //
                head_node.ChildNodes[2].ChildNodes[1].ChildNodes.Add(new TreeNode("Individual Class Report", "3002"));
                head_node.ChildNodes[2].ChildNodes[1].ChildNodes.Add(new TreeNode("Individual Staff Time Table", "3003"));
                head_node.ChildNodes[2].ChildNodes[1].ChildNodes.Add(new TreeNode("Staff WorkLoad Report", "3004"));
                head_node.ChildNodes[2].ChildNodes[1].ChildNodes.Add(new TreeNode("Time Table Changer Report", "3005"));
                head_node.ChildNodes[2].ChildNodes[1].ChildNodes.Add(new TreeNode("Staff Subject Details Report", "3006"));
                head_node.ChildNodes[2].ChildNodes[1].ChildNodes.Add(new TreeNode("Class Timetable", "3007")); //Aruna 22june2017
                head_node.ChildNodes[2].ChildNodes[1].ChildNodes.Add(new TreeNode("Staff Timetable", "3008"));
                head_node.ChildNodes[2].ChildNodes[1].ChildNodes.Add(new TreeNode("Room Timetable", "3009"));
                head_node.ChildNodes[2].ChildNodes[1].ChildNodes.Add(new TreeNode("Staff Workload", "3010"));
                head_node.ChildNodes[2].ChildNodes[1].ChildNodes.Add(new TreeNode("Alternate Schedule Change", "3011"));//Deepali 27.3.18
                head_node.ChildNodes[2].ChildNodes[1].ChildNodes.Add(new TreeNode("Detailed Semester TimeTable Report", "3012"));

                #endregion
                //3 Finance Added by Jeyaprakash on Feb25th
                #region Finance Setting

                head_node.ChildNodes.Add(new TreeNode("Finance", "9988776"));
                head_node.ChildNodes[3].ChildNodes.Add(new TreeNode("Master", "9988777"));
                head_node.ChildNodes[3].ChildNodes[0].ChildNodes.Add(new TreeNode("Financial Year", "102"));
                head_node.ChildNodes[3].ChildNodes[0].ChildNodes.Add(new TreeNode("Group Master", "103"));
                head_node.ChildNodes[3].ChildNodes[0].ChildNodes.Add(new TreeNode("Header Master", "104"));
                head_node.ChildNodes[3].ChildNodes[0].ChildNodes.Add(new TreeNode("Ledger Master", "105"));
                head_node.ChildNodes[3].ChildNodes[0].ChildNodes.Add(new TreeNode("Code Setting", "106"));
                head_node.ChildNodes[3].ChildNodes[0].ChildNodes.Add(new TreeNode("Bank Master", "107"));
                head_node.ChildNodes[3].ChildNodes[0].ChildNodes.Add(new TreeNode("Receipt / Challan Print Setting", "108"));
                head_node.ChildNodes[3].ChildNodes[0].ChildNodes.Add(new TreeNode("Part Payment Student Settings", "232017108"));
                //operation
                head_node.ChildNodes[3].ChildNodes.Add(new TreeNode("Operation", "109"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Journal", "110"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Journal Grid", "9110"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Receipt / Challan", "111"));
                // head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("New Receipt", "169"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("New Receipt Miscellaneous", "174"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Challan Confirm", "112"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Receipt Cancel and Duplicate", "113"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Bank Reconciliation", "114"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Transfer / Refund", "115"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Payment – Cash / Bank", "116"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Contra", "117"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Student Fee Due Extention", "118"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Bank Statment Import", "119"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Month Wise Import", "145"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Receipt", "120"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Challan No Update", "146"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Excess Receipt", "151"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Student Bank Statemnet Import", "162"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Student Transfer Without Fees", "182"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Student Transfer Report", "183"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Payment Reconciliation", "192"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Staff/Vendor/Other FeesEdit ", "196"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Actual FinanceYear Setting", "198"));
                head_node.ChildNodes[3].ChildNodes[1].ChildNodes.Add(new TreeNode("Fine Cancel Setting", "199"));//Added by saranya on 5Aril2018


                head_node.ChildNodes[3].ChildNodes.Add(new TreeNode("Reports", "121"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Student / Staff Fee Allotment , Paid, Concession and Balance", "122"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Credit and Debit Report", "123"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Bank Wise Collection Report", "124"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Daily Payment Report", "125"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Daily Fees Collection Report", "126"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Contra WithDraw Report", "127"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Fee Structure Report", "128"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Term Fee Report", "129"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Finance MIS Report", "130"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Individual Student Fee Status Report", "131"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Concession Report", "132"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Finance Concession Report", "133"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Finance Yearwise Header Report", "134"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Fees Structure Report", "135"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Finance Reconsilation Report", "147"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Refund Report", "148"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Consolidate Count Report", "149"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Transport Allot Report", "150"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Scholarship Report", "136"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("ExportXML Import Report", "152"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Finance MIS Budget Report", "153"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Sms Send To Student", "154"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Due Fine Amount Allot For Student", "155"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Transport And Hostel Allotment Report", "156"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Finance Collection Report", "157"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Cancel Receipt Report", "158"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Student Remove Hostel and Transport", "159"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Post Metric Scholarship", "160"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Receipt Amount Adjust", "161"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Financial Statement_Daily Collection Statement", "163"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Financial Statement_Daily Collection Detailed Statement", "164"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Financial Statement_Daily Collection Department Cumulative Statement", "165"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Financial Statement_Paymode Collection Report", "166"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Financial Statement_Departmentwise Collection Report", "167"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode(" Financial Daily Fees Collection Report", "168"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Student Scheme Admission Report", "170"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Feecategory Settings", "171"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Termwise Financial Daily Fees Collection Report", "172"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Student Log Detail Report", "173"));

                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Finance BillNowise Report", "175"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Finance Headerwise Paid Report", "176"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Finance Header Institutionwise Paid Report", "177"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Finance Institutionwise Paid Report", "178"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Denomination Report", "179"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Daily Fees Collection School Report", "180"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Consolidate Count Report School", "181"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Student Paid Count Report", "184"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Finance Universal Report", "185"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Finance Student Abstract Report", "186"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Finance Academic Year Settings", "187"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Finance Student Payment Voucher", "188"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Finance Universal Report Multiple", "189"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Receipt / Payment Cumulative Report", "190"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Trail Balance Sheet Report", "191"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Consolidated Demand Report", "193")); //Added by saranya on 7/2/2018
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Finance YearWise Allotment Report", "194"));//added by abarna on 16.02.2018
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Individual Header Detailed Report", "195")); //Added by saranya on 23/2/2018
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Student Wise Fee Concession Report", "197"));//Added by saranya on 26/3/2018
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Variation statement Report", "202"));//Added by saranya on 30/3/2018

                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Monthly Fees Report", "203"));//delsi 28/06
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("IOB payment Missing Updation", "204"));
                head_node.ChildNodes[3].ChildNodes[2].ChildNodes.Add(new TreeNode("Extension Report", "205"));
                //chart value
                head_node.ChildNodes[3].ChildNodes.Add(new TreeNode("Charts", "137"));
                head_node.ChildNodes[3].ChildNodes[3].ChildNodes.Add(new TreeNode("Student / Staff Fee Allotment , Paid, Concession and Balance Chart.", "138"));
                head_node.ChildNodes[3].ChildNodes[3].ChildNodes.Add(new TreeNode("Credit and Debit Report Chart.", "139"));
                head_node.ChildNodes[3].ChildNodes[3].ChildNodes.Add(new TreeNode("BankWise Deposit Chart.", "140"));
                head_node.ChildNodes[3].ChildNodes[3].ChildNodes.Add(new TreeNode("Daily Payment Report Chart.", "141"));
                //others
                head_node.ChildNodes[3].ChildNodes.Add(new TreeNode("Others", "142"));
                head_node.ChildNodes[3].ChildNodes[4].ChildNodes.Add(new TreeNode("Budget Master", "143"));
                head_node.ChildNodes[3].ChildNodes[4].ChildNodes.Add(new TreeNode("Concession Master", "144"));

                #endregion

                //4 Hr added by siva and sudhagar on Apr 13th Wed
                #region HR Setting
                head_node.ChildNodes.Add(new TreeNode("HR", "201600"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("HR Year", "201601"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Code Master", "201602"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Designation Master", "201603"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Category Master", "201604"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Leave Master", "201605"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Manpower Master", "201606"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Allowance & Deduction Master", "201607"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Slab Master Master", "201608"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Automatic SMS Settings", "201723"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("HourWise PayProcess Settings", "201726"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Staff Mandatory Bell Time Settings", "201729"));

                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Other Income and Deduction Head", "201738"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Income and Deduction Group Mapping", "201739"));

                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Staff Manager", "201609"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("GradePay Master", "201610"));
                //head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Pay Process", "201611"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("IT Calculation", "201611"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Pay Process", "201612"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Staff Attendance Entry", "201613"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Staff Manual Attendance", "201614"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Bio Device Information", "201724"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Staff FingerPrint Registration", "201725"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Staff Certificate Issue", "201615"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Staff Priority", "201616"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("HourWise Staff Attendance", "201727"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Staff Manual Grade Pay", "201728"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Additional Allowance And Deduction", "201742")); // poo 04.11.17
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Compensation Leave Setting", "201744"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Salary Hold Setting", "201746"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Gratuity Eligibility Setting", "201748"));



                //head_node.ChildNodes[4].ChildNodes[11].ChildNodes.Add(new TreeNode("Overall Salary Report", "201701"));
                //head_node.ChildNodes[4].ChildNodes[11].ChildNodes.Add(new TreeNode("Staff  Strength Master", "201702"));
                //head_node.ChildNodes[4].ChildNodes[11].ChildNodes.Add(new TreeNode("Staff Certificate Issue", "201703"));
                //head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Staff Attendance Entry", "201612"));
                //head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Staff Priority", "201613"));
                head_node.ChildNodes[4].ChildNodes.Add(new TreeNode("Reports"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Staff  Strength Master", "201617"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Overall / Individual Salary Report", "201701"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("PF & ESI Report", "201702"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Biometric Report", "201703"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Staff Attendance Strength Report", "201704"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Overall Monthly Salary", "201705"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Monthly Salary Statement", "201706"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Biocorrection Report", "201707"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Staff Cumulative Leave Report", "201708"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("IT Calculation Report", "201709"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Staff Report", "201710"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Staff Leave Report", "201711"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Staff Gender Wise Report", "201712"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Staff Attendance Report", "201713"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Departmentwise Cumulative Salary", "201714"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Individual Staff Attendance", "201715"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Staff Experience Report", "201716"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Staff Attendance Report", "201717"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("New & Relieved Staff Details", "201718"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("HR Salary Income & PF Report", "201719"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("HR-Finance Year Report", "201720"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("HR_Reconciliation", "201721"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Original Salary Report", "201722"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("PF Acquaintance Report", "201730"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("CL Salary Statement Report", "201731"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Staff Loan Details Report", "201732"));

                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Newly Joined & Relieved Staff Details", "201733"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Salary Comparative Statement", "201734"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Salary Comparative Report", "201735"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Month Wise Staff Strength Report", "201736"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Salary Abstract Report", "201737"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Quarterly Report", "201740"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Department Wise Attendance Report", "201741"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Bank And Cash Report", "201743"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Compensation Leave Reort", "201745"));
                head_node.ChildNodes[4].ChildNodes[29].ChildNodes.Add(new TreeNode("Full And Final Settlement", "201747"));


                #endregion

                //5 General Report
                #region General Report
                head_node.ChildNodes.Add(new TreeNode("General Reports", "600"));
                //
                // head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("Universal Report", "6001"));
                head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("Strength Report", "601"));
                //  Student Strength of College Report
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Strength of College Report", "6002"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Strength Based on Graduation Report", "6003"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Admitted Student List Report", "6004"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Form VIII Report", "6005"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Form B Diploma First Year Report", "6006"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Form C Report", "6007"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Form D Lateral Entry Report", "6008"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Overall College Strength Report", "6009"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Students Strength Report Based on Seat Category", "6010"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Form D First Year Students", "6011"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Form A Lateral Entry Students", "6012"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Blood Group Report", "6013"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Form A First Year Report", "6014"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Admission Statistics Report", "6015"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Tuition Fees Waiver Report", "6016"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("First Graduate Report", "6017"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Status List", "6018"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Form B-Lateral Entry Students", "6019"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Admission Particulars", "6020"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Form B-Diploma Lateral Entry Students", "6021"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Consolidated Report on list of Handicapped Students", "6022"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Biometric Report for Hostel Students", "6023"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Daily Admission Report", "6026"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Consolidated Admission Details", "6027"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("College Coursewise Student Admission as on date", "6028"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Address Slip", "6029"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Comparitive Report", "6030"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Consolidated Report", "6031"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Certificate Issue", "6032"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Admission Report", "6033"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Admission Vacancy Report", "6034"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Consolidate Admission Report", "6035"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Strength Based on Quota", "6036"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Strength Based on Relegion and Community Wise", "6037"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Report", "6038"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Over All Community Wise Student Strength Report", "6043"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Affairs", "6044"));
                head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("Placement Report", "602"));
                head_node.ChildNodes[5].ChildNodes[1].ChildNodes.Add(new TreeNode("Placement and Training Report", "6024"));
                head_node.ChildNodes[5].ChildNodes[1].ChildNodes.Add(new TreeNode("Departmentwise Placement Report", "6025"));
                head_node.ChildNodes[5].ChildNodes[1].ChildNodes.Add(new TreeNode("Company Registration", "6041"));
                head_node.ChildNodes[5].ChildNodes[1].ChildNodes.Add(new TreeNode("Placement Report", "6042"));
                //
                head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("Hostel Vs Campus", "603"));
                //
                head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("Hostel And Department Wise Expenses Report", "604"));
                //
                head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("Cumulative Mess Attendance Report", "605"));
                //
                head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("Individual Student Mess Attendance Report", "606"));
                head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("Question Addition", "607"));
                head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("Exam Schedule", "608"));
                head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("Mark Report", "609"));
                head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("Random - Questions Generation", "610"));
                head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("Student's Photo Status", "613"));
                head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("Gate Pass", "614"));
                head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("Bonafide Report", "615"));
                head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("Parents Meet", "616"));
                head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("Certificate Issue", "617"));
                head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("Login Count Detail Report", "6039"));
                head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("NRI Report", "6040"));
                //NBA REPORTS
                head_node.ChildNodes[5].ChildNodes.Add(new TreeNode("Accreditation  Report", "6045"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Performance - Strength Report", "6046"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Performance - Graduation Report", "6047"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Performance - Enrolment Ratio Report", "6048"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Performance - Success Rate Report", "6049"));
                head_node.ChildNodes[5].ChildNodes[0].ChildNodes.Add(new TreeNode("Accademic Performance Report", "6050"));
                //head_node.ChildNodes[5].ChildNodes[18].ChildNodes.Add(new TreeNode("Placement, Higher Studies and Entreprenurship Report", "6051"));
                #endregion

                //6 
                #region COE

                head_node.ChildNodes.Add(new TreeNode("COE", "1800")); // added by jairam 03-04-2015
                head_node.ChildNodes[6].ChildNodes.Add(new TreeNode("Mark Import/Entry", "8001"));
                head_node.ChildNodes[6].ChildNodes.Add(new TreeNode("COE Reports", "8002"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Examination Coordinators.", "80001"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam Fee Master Settings.", "80002"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Examination Application.", "80003"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam Fee Paid Status.", "80004"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Equal Paper Matching.", "80005"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Examination Time Table.", "80006"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam Time Table Generation - A", "80112"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam Time Table Report.", "80007"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Nominal Roll.", "80008"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Examination Hall Priority Master Setting.", "80009"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Hall Definition.", "80010"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Examination Seating Arrangement.", "80011"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Examination Hall Ticket.", "80012"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Hall Supervision.", "80013"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Question Paper Packing.", "80014"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Question Paper Packing With Seat Number", "80117"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Invigilator Setting.", "80015"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Attendance Sheet.", "80016"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam Attendance Entry.", "80017"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Batch Allocation For Laboratory.", "80018"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Dummy Number Generation.", "80019"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Dummy Number Matching.", "80020"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Evalvator Allotment.", "80021"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Mark Entry.", "80022"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Mark Sheet.", "80023"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Provisional Result Report - Before Moderation.", "80024"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Moderation.", "80025"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Provisional Result Report - After Moderation.", "80026"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Consolidated Mark Sheet.", "80027"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Tabulated Mark Statement.", "80028"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Provisional Result.", "80029"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Common Subjectwise Result Analysis.", "80030"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Branchwise(Subjectwise) Result Analysis.", "80031"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Degreewise Result Analysis.", "80032"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Range Analysis.", "80033"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Rank/Topper List.", "80034"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Over All Arrear List.", "80035"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Student Wise Arrear List.", "80036"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam Mark Convertion.", "80037"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Consolidated Grade Sheet.", "80038"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Branchwise Result Analysis.", "80039"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("TMR Report.", "80040"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Consolidated GPA and CGPA Details.", "80041"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Details of Candidates eligible for the award of Degree.", "80042"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Semester Grade Sheet and Result Analysis.", "80043"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Comparision Of Results (Before And After Revaluation).", "80044"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Subjectwise Student's List.", "80045"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Barcode Generation.", "80046"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Student Acedemic Report.", "80047"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Departmentwise Result Analysis.", "80048"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Moderation Analysis Report.", "80049"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Passing Board Reports.", "80050"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Foil Card.", "80051"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam Revaluation Application.", "80052"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("University Result Analysis Report.", "80053"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Overall Percentage Analysis Report.", "80054"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Departmentwise Arrear Statement.", "80055"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Third Valuation Eligible Students Report.", "80056"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Subjectwise Arrear Status Report.", "80057"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Consolidate Mark Sheet.", "80058"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Common Subjectwise Result Analysis.", "80059"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Subjectwise Analysis Report.", "80060"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Performance Comparison Report.", "80061"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Student Cout Wise Arrear List.", "80062"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Dummy Number Report.", "80063"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Over All Topper Count.", "80064"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Provisional Result Publication Statement (Before Moderation).", "80065"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Result Analysis Statement (After Revaluation).", "80066"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Cam & Coe Performance Analysis Report.", "80067"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam Time Table Alternate", "80068"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Hall Ticket", "80069"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Hall Wise Student Strength", "80070"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Manual Mark Sheet", "80071"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam Valuation Settings", "80072"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam ICA Application", "80073"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Subject Print Priority.", "80074"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Grade Master.", "80075"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("MARK SHEET / Consolidated MARK SHEET", "80076"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Subject Wise Rank List.", "80077"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Subject Wise Academic Report", "80078"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam Valuation & Question Paper Setter", "80079"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam Revaluation Request", "80080"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam Revaluation Mark Entry", "80081"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Publish Result Settings", "80082"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Subjectwise Toppers", "80083"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Semesterwise Result Analysis", "80084"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Degreewise Result Analysis", "80085"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Yearwise Result Analysis", "80086"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("University Result Analysis", "80087"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Tab Report", "80088"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Chart Arrear List", "80089"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Cumulative Report", "80090"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Supplementary Exam Result Analysis", "80091"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Subject Allotment With Mark Entry", "80092"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Optional Subject Creation", "80093"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Subject's Part Allocation", "80094"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Student Hall Ticket Report", "80095"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Equal Subject For Choice Based Grade System", "80096"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Choice Based Grade System", "80097"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Tab Design Report", "80098"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Mark Entry For Batch Wise", "80099"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Tabulated Mark Report", "80100"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("COE Exam Mark Entry II", "80101"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("COE Exam Mark Entry III", "80102"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Only ICA Mark Entry", "80103"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Condonation Fee Status Report", "80104"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Condonation Report", "80105"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Internal Mark Updation", "80106"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Student Redo/Repeat Semester Registartion", "80107"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Over All GPA And CGPA Calculation", "80108"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Overall Consolidate/Subject/Part Wise Rank List", "80109"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Semester Exam Pass Percentage Analysis Report", "80110"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam Revaluation Report", "80111"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Cover Sheet Generation Report", "80113"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Question Paper Packing Report", "80114"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Date Wise Student Strength & Summary Report", "80115"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Foil Sheet Generation Report", "80116"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Subject Wise Exam Eligibility", "80118"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Course Wise Max and Min Credits Entry", "80119"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Additional/Exempted Subject Entry", "80120"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("University Pass Percentage Report", "80121"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Studentwise Consolidate Report", "80122"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Studentwise Pass Percentage Report", "80123"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Revaluation and Xerox Application Report", "80124"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Question Paper Setter Master", "80125"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Question Paper Setter Report", "80126"));
                //magesh 23/1/18
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Despatch Of Answer Packets Report", "80127"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Individual Student Wise Marks/Grade Report", "80128")); //deepali 29.3.18
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam Laboratory Mark Entry", "80129"));//added by kowshika 05.04.2018
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Moduration Apply", "80130"));//added by kowshika 05.04.2018
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("SubjectWise Exam Attendance Sheet", "80131"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Supplymentary Exam Eligible Students Report", "80132"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Moderation Mark Settings", "80133"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam Sub-Subject Settings", "80137"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam Batch Allocation", "80136"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Fee Setting for Exam Invigilation", "80138"));//FeeSettingForInvigilation.aspx
               

                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Course/Programme wise Classification Report", "80134"));
                head_node.ChildNodes[6].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam Pre-Application Settings", "80135"));

                #endregion

                //7 Student added by sudhagar on apr 29th fridy
                #region student setting
                head_node.ChildNodes.Add(new TreeNode("Student", "41520"));
                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Application Manager", "41521"));
                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Application Manager-A", "41532"));
                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admission Process", "41522"));
                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Report Manager", "41523"));
                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Enrollment Selection ", "41524"));
                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admission Print Format", "41525"));
                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Id Card print", "41526"));
                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Certificate Master", "41527"));
                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Certificate Issue Return", "41528"));
                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Bank Reference Number Import", "41529"));
                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Application Number Generation", "41530"));
                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Declaration Form", "41531"));
                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Details", "41533"));
                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Section Allocation", "41534"));
                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Roll Number Generation", "41535"));
                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Register Number Mapping", "41536"));
                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Promotion", "41537"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Application Manager", "41521"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Application Manager-A", "41532"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admission Process", "41522"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Report Manager", "41523"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Scheme Admission", "41550"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admission Process - A", "41565"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admission Selection Process", "41570"));
                //master
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Housing Master", "41579"));

                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Enrollment Selection ", "41524"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admission Print Format", "41525"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Id Card print", "41526"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Certificate Master", "41527"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Certificate Issue Return", "41528"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Bank Reference Number Import", "41529"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Application Number Generation", "41530"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Declaration Form", "41531"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Tamil Name Import", "41538"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Details", "41533"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Section Allocation", "41534"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Roll Number Generation", "41535"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Register Number Mapping", "41536"));
                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Promotion", "41537"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Transfer", "41539"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Leave Request Setting", "41540"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Leave Request", "41541"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Promotion", "41566"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Alumni Report", "41586"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Eligibility Settings", "41593"));//added by Deepali on 5.4.18

                //operation
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("House Manual Allotment", "41580"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("House Auto Generation", "41581"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Tamil Name", "41583"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Degree Priority", "41584"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Discontinued\\Prolong Absent", "41589"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admission and Application Number Generation Setting", "41591"));

                //head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Scheme Admission Report", "41551"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admission Status - Enquiry Report", "41542"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admission Status - Counselling Report", "41543"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admission Status - Hostler and Transport Report", "41544"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admission Status - DistrictWise Report", "41545"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admission Status - Reference Type Report", "41546"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admission Status - Medium of Study Report", "41547"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admission Status - Certificate Received Status Report", "41548"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admission Status - DayWise Admission Comparison Report", "41549"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admission Status - Report", "41551"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Staff Children Details Report", "41561"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Applied and Admitted Student Details", "41562"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Attendance Certificate", "41563"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admitted Student Details Report", "41567"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Admission Count Report", "41568"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Overall Religion / Communitywise Student Strength Report", "41552"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Department Grouping", "41553"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Students Detailed Report", "41554"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Yearwise & Departmentwise Strength Report", "41555"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Languagewise Strength Report", "41556"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Schoolwise / University Student Strength Report", "41557"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("University Grouping", "41558"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Hall Report", "41559"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Mother Tongue Report", "41560"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Transfer Certificate Report", "41564"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Tc Issue", "41569"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Communitywise Report", "41571"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Strength Report", "41572"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Convocation Registration", "41573"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Readmission Process", "41574"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admission Report", "41575"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Admission Details Report", "41576"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Mentor", "41577"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Mentor Report", "41578"));
                //Added By Saranyadevi 31.7.2018
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student FingerPrint Registration", "41598"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Placement Report", "41599"));

                //report
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Housing Report", "41582"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Alumni Report", "41585"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Condonation Fees Status", "41587"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student Tc Remark", "41588"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Readmission Report", "41592"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Subject Selected Student Report", "41597"));//magesh 26.7.18
                // added by kowshika
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Biomentric Report For Students", "41594"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Address Slip", "41595"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Mark Range Analysis", "41596"));
                head_node.ChildNodes[7].ChildNodes.Add(new TreeNode("Student HomeWork Status Report", "41600"));

                head_node.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Student Updated Details", "41590"));



                #endregion
                //8
                #region Block Box setting
                head_node.ChildNodes.Add(new TreeNode("Black Box", "9001"));
                head_node.ChildNodes[8].ChildNodes.Add(new TreeNode("Black Box 1", "140001"));
                head_node.ChildNodes[8].ChildNodes.Add(new TreeNode("Black Box 2", "140002"));
                head_node.ChildNodes[8].ChildNodes.Add(new TreeNode("Dash Board", "140003"));
                head_node.ChildNodes[8].ChildNodes.Add(new TreeNode("Black Box 3", "140004"));
                #endregion
                //9 sms And mail setting
                #region sms and mail setting
                head_node.ChildNodes.Add(new TreeNode("SMS/Mail", "9002"));
                //master
                head_node.ChildNodes[9].ChildNodes.Add(new TreeNode("Settings", "90003"));
                head_node.ChildNodes[9].ChildNodes.Add(new TreeNode("SMS Group Creation", "90005"));
                head_node.ChildNodes[9].ChildNodes.Add(new TreeNode("Send", "90001"));
                head_node.ChildNodes[9].ChildNodes.Add(new TreeNode("College & Degree wise Circular", "90004"));

                //Report
                head_node.ChildNodes[9].ChildNodes.Add(new TreeNode("Report", "90002"));
                txt_CopySmsMobNo.Text = string.Empty;
                txt_CopyEmailid.Text = string.Empty;
                spnSmsError.Text = string.Empty;
                spnEmailError.Text = string.Empty;
                #endregion
                //10 transport 
                #region Transport setting
                head_node.ChildNodes.Add(new TreeNode("Transport", "703"));
                head_node.ChildNodes[10].ChildNodes.Add(new TreeNode("Vehicle Master", "704"));
                head_node.ChildNodes[10].ChildNodes.Add(new TreeNode("Stage Master", "800"));
                head_node.ChildNodes[10].ChildNodes.Add(new TreeNode("Route Master", "705"));
                head_node.ChildNodes[10].ChildNodes.Add(new TreeNode("Driver Allotment", "706"));
                head_node.ChildNodes[10].ChildNodes.Add(new TreeNode("Cost Master", "707"));
                head_node.ChildNodes[10].ChildNodes.Add(new TreeNode("Traveler Allotment", "708"));
                head_node.ChildNodes[10].ChildNodes.Add(new TreeNode("Vehicle Usage", "709"));
                head_node.ChildNodes[10].ChildNodes.Add(new TreeNode("Vehicle Monitor", "710"));
                head_node.ChildNodes[10].ChildNodes.Add(new TreeNode("Route Transfer", "7120"));


                head_node.ChildNodes[10].ChildNodes.Add(new TreeNode("Reports", "711"));
                head_node.ChildNodes[10].ChildNodes[9].ChildNodes.Add(new TreeNode("Vehicle Vacancy Report", "7121"));
                head_node.ChildNodes[10].ChildNodes[9].ChildNodes.Add(new TreeNode("Drivers Information Report", "7122"));
                head_node.ChildNodes[10].ChildNodes[9].ChildNodes.Add(new TreeNode("Travellers PhotoList Report", "7123"));
                head_node.ChildNodes[10].ChildNodes[9].ChildNodes.Add(new TreeNode("Transport - Bus Route Details", "7124"));
                head_node.ChildNodes[10].ChildNodes[9].ChildNodes.Add(new TreeNode("Student's Transport/Hostel Details", "7125"));
                head_node.ChildNodes[10].ChildNodes[9].ChildNodes.Add(new TreeNode("Fuel Consumption Report", "7126"));
                head_node.ChildNodes[10].ChildNodes[9].ChildNodes.Add(new TreeNode("Detailed Vehicles Report", "7127"));
                head_node.ChildNodes[10].ChildNodes[9].ChildNodes.Add(new TreeNode("Transport-Detailed Report", "7128"));
                head_node.ChildNodes[10].ChildNodes[9].ChildNodes.Add(new TreeNode("Vehicle Diesel Expenses Cumulative Report", "7129"));
                head_node.ChildNodes[10].ChildNodes[9].ChildNodes.Add(new TreeNode("Vehicle Expenses Abstract", "7130"));
                head_node.ChildNodes[10].ChildNodes[9].ChildNodes.Add(new TreeNode("Transport Fee status Report", "7131"));
                head_node.ChildNodes[10].ChildNodes[9].ChildNodes.Add(new TreeNode("GPS Tracking Status", "7132"));
                head_node.ChildNodes[10].ChildNodes[9].ChildNodes.Add(new TreeNode("GPS Map", "7133"));
                head_node.ChildNodes[10].ChildNodes[9].ChildNodes.Add(new TreeNode("Route & Time Wise Report", "7134"));
                head_node.ChildNodes[10].ChildNodes[9].ChildNodes.Add(new TreeNode("Trip Sheet", "7135"));
                head_node.ChildNodes[10].ChildNodes[9].ChildNodes.Add(new TreeNode("StageWise Student Details Report", "7136"));
                head_node.ChildNodes[10].ChildNodes[9].ChildNodes.Add(new TreeNode("Bus Pass Print", "7137"));
                head_node.ChildNodes[10].ChildNodes[9].ChildNodes.Add(new TreeNode("Cost Master Report", "7138"));

                #endregion
                //11 schedule manager
                #region schedule manager
                // head_node.ChildNodes.Add(new TreeNode("Schedule Manager", "712"));
                #endregion
                //12 Question 
                #region Question setting
                head_node.ChildNodes.Add(new TreeNode("Questions", "800"));
                //head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Bank", "801"));
                //head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Answer", "802"));
                //head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Question Wise Mark Entry", "803"));
                //head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Chapter And Question Wise Result Analysis Report", "804"));
                //head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Test Name", "805"));
                //head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Question Addititon", "806"));
                //head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Question Preparation", "807"));
                //head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Automatic Question Generation", "808"));
                //head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Question Generation Report", "809"));
                //head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Subject Wise Question Details", "810"));
                //head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Individual Student's Chapter And Question Wise Result Analysis Report", "811"));
                head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Internal And External Test Creation", "801"));
                head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Question Addititon", "802"));
                head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Consolidated Question Paper Master", "803"));
                head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Question Paper Genarator", "804"));
                head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Question Paper Type Setting", "805"));
                //head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Question Paper Master Report", "806"));
                head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Question Paper Mark Entry", "806"));
                head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("CAM Test Mapping Settings", "807"));
                head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("CAM Test Comparision Settings", "808"));
                head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Chapter And Question Wise Result Analysis Report", "809"));
                head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Individual Student's Chapter And Question Wise Result Analysis Report", "810"));
                head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Overall Subject Wise Test Analysis Report", "811"));
                head_node.ChildNodes[11].ChildNodes.Add(new TreeNode("Individual Student's Test Performance Analysis Report", "812"));

                #endregion
                //13 inventory added by sudhagar on Apr 13th Wed
                #region Inventory setting
                head_node.ChildNodes.Add(new TreeNode("Inventory Master", "900"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Code Master", "901"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Store Master", "902"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Item Master", "903"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Supplier Master", "904"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Opening Stock", "905"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Kit Master", "906"));

                //---------cmd saranyadevi24.3.2018-------------
                //head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Request Hierarchy", "906"));
                //head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Request", "907"));
                //head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Request Report", "908"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Approval for Request", "909"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Request to Vendor", "910"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Quotation Entry", "911"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Quotation Comparison", "912"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Purchase Order", "913"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Approval for Purchase Order", "914"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Inward", "915"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Return to Vendor", "916"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Issue from Store", "917"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Transfer", "918"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Item Usage", "919"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Item Missing, Scrap and Breakage", "920"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Student Kit Allotment", "907"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Department Stock Status Report", "921"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Purchase Order setting", "922"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Purchase Status Report", "923"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Stock Status Report", "924"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Purchase Order print Settings", "925"));
                head_node.ChildNodes[12].ChildNodes.Add(new TreeNode("Student Kit Report", "908"));
                #endregion
                #region Old Hostel
                //14 hostel setting added by sudhagar on Apr 13th Wed
                //#region Hostel
                //head_node.ChildNodes.Add(new TreeNode("Hostel", "1122334"));
                //head_node.ChildNodes[13].ChildNodes.Add(new TreeNode("Master", "1122335"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Hostel Master.", "110001"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Mess Master.", "110002"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Hostel Registration.", "110003"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Hostel Staff / Guest Registration.", "110004"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Mentor.", "110005"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("DayScholar Student / Staff Registration.", "110006"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Code Master.", "110007"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Store Master.", "110008"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Item Master.", "110009"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Supplier Master.", "110010"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Session Master.", "110011"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Menu Master.", "110012"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Menu Item Master.", "110013"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Menu Schedule.", "110013"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Hostel  Master Attendance.", "110015"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Mess Attendance.", "110016"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Hostel Settings.", "110017"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Strength Status.", "110018"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Opening Stock Entry.", "110019"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Stock Transfer.", "110020"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Daily Consumption Status.", "110021"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Daily Consumption-Item Return Entry .", "110022"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Purchase Order.", "110023"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Approval.", "110024"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Inward Entry.", "110025"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Hostel Income.", "110026"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Hostel Expenses.", "110027"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Rebate.", "110028"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Rebate Details.", "110029"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Additional Collection.", "110030"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Menu Cost Master .", "110031"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Individual Student Item Master .", "110032"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Individual Item Cost Master.", "110033"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Individual Student Item Request.", "110034"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Individual Student Item Request Approval.", "110035"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Token Details.", "110036"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Room Availability.", "110037"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Mess Bill Calculation.", "110038"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Mess Bill Report.", "110039"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Purchase Order Print Settings .", "110049"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Guest Attendance .", "110050"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Holiday Declaration.", "110051"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Room Rent Master.", "110052"));
                //head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Mess Bill Cost Sheet.", "110053"));
                //head_node.ChildNodes[13].ChildNodes.Add(new TreeNode("Reports", "110099"));//
                //head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Item History Report.", "110040"));
                //head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Supplier History Report.", "110041"));
                //head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Stock Status Report.", "110042"));
                //head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Room Stock Details.", "110043"));
                //head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Purchase Status Report.", "110044"));
                //head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Hostel Performance Report / Chart.", "110045"));
                //head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Hostel Expenses & Strength Report.", "110046"));
                //head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Hostel Absentees Attendance Report.", "110047"));
                //head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Mess Monthly Consumption Report .", "110048"));
                //#endregion
                #endregion
                //14 hostel setting added by sudhagar on Apr 13th Wed
                #region Hostel
                head_node.ChildNodes.Add(new TreeNode("Hostel", "1122334"));
                head_node.ChildNodes[13].ChildNodes.Add(new TreeNode("Master", "1122335"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Mess Master.", "110001"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Hostel Master.", "110002"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Session Master.", "110003"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Menu Master.", "110004"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Menu Item Master.", "110005"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Building Master.", "110006"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Gym Master", "999026"));//saranyadevi 13.3.2018
                //operation
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Hostel Admission Process.", "110047"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Hostel Registration.", "110007"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Hostel Staff / Guest Registration.", "110008"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Mentor.", "110009"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("DayScholar Student / Staff Registration.", "110010"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Menu Schedule.", "110011"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Hostel  Master Attendance.", "110012"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Mess Attendance.", "110013"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Hostel Settings.", "110014"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Strength Status.", "110015"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Daily Consumption Status.", "110016"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Daily Consumption-Item Return Entry .", "110017"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Hostel Income.", "110018"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Hostel Expenses.", "110019"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Rebate.", "110020"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Rebate Details.", "110021"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Additional Collection.", "110022"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Menu Cost Master .", "110023"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Individual Student Item Master .", "110024"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Individual Item Cost Master.", "110025"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Individual Student Item Request.", "110026"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Individual Student Item Request Approval.", "110027"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Token Details.", "110028"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Room Availability.", "110029"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Mess Bill Calculation.", "110030"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Room Rent Master.", "110031"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Purchase Menu Master.", "110045"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Gym Cost Master", "999027"));//saranyadevi 13.3.2018
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Gym Allotment", "999028"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Health Checkup Master", "999029"));
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Guest Attendance", "999030"));//magesh 20.3.18
                head_node.ChildNodes[13].ChildNodes[0].ChildNodes.Add(new TreeNode("Hostel Attendance Manual", "999031"));//magesh 19.4.18
                head_node.ChildNodes[13].ChildNodes.Add(new TreeNode("Reports", "110099"));//
                head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Mess Bill Report.", "110032"));
                head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Item History Report.", "110033"));
                head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Supplier History Report.", "110034"));
                head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Stock Status Report.", "110035"));
                head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Room Stock Details.", "110036"));
                head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Hostel Performance Report / Chart.", "110037"));
                head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Hostel Expenses & Strength Report.", "110038"));
                head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Hostel Absentees Attendance Report.", "110039"));
                head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Mess Monthly Consumption Report .", "110040"));
                head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Purchase Order Print Settings .", "110041"));
                head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Guest Attendance .", "110042"));
                head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Mess Bill Cost Sheet.", "110043"));
                head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Bio Metric Attendance.", "110044"));
                head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Menu Purchase Report.", "110046"));
                head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Cumulative Mess Attendance Report.", "110048"));
                head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("Hostel Attendance Manual Report.", "110049"));//magesh 19.4.18
                head_node.ChildNodes[13].ChildNodes[1].ChildNodes.Add(new TreeNode("StudentSearch.aspx.", "110050"));//magesh 10.5.18

                #endregion
                //15 chart 
                #region Chart setting
                head_node.ChildNodes.Add(new TreeNode("Chart", "1200"));
                head_node.ChildNodes[14].ChildNodes.Add(new TreeNode("Staff Cut-Off Chart", "1201"));
                head_node.ChildNodes[14].ChildNodes.Add(new TreeNode("Student Attendance Chart", "1202"));
                head_node.ChildNodes[14].ChildNodes.Add(new TreeNode("Degree & Departmentwise Chart", "1203"));
                head_node.ChildNodes[14].ChildNodes.Add(new TreeNode("Testwise & Subjectwise Chart", "1204"));
                head_node.ChildNodes[14].ChildNodes.Add(new TreeNode("Arrear Chart", "1205"));
                head_node.ChildNodes[14].ChildNodes.Add(new TreeNode("Overall Result With Internal and External Marks Comparison", "1206"));
                #endregion
                //16
                #region School setting
                //head_node.ChildNodes.Add(new TreeNode("School", "1300"));
                #endregion
                //17 Feedback added by sudhagar on Apr 13th Wed
                #region Feedback setting
                //head_node.ChildNodes.Add(new TreeNode("Feedback", "2500"));
                //head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("Type_Master", "2501"));
                //head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("Question_Master", "2502"));
                //head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("FeedBack_Master", "2503"));
                //head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("FeedBack_Question_Master", "2504"));
                //head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("FeedBack_Report", "2505"));
                //head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("Online_FeedBack", "2506"));
                #endregion
                #region Feedback setting
                head_node.ChildNodes.Add(new TreeNode("Feedback", "5555999"));
                head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("Type Master", "2501"));
                head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("Question Master", "2502"));
                head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("FeedBack Master", "2503"));
                head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("FeedBack Question_Master", "2504"));
                head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("FeedBackquestion Type", "2505"));
                head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("FeedBack Report", "2506"));
                head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("Uniquecode Generation", "2507"));
                head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("Anonymous Feedback Report", "2508"));
                head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("General Feedback Report", "2509"));
                head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("Feedback Report Consolidated", "2511"));
                head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("Online FeedBack", "2510"));
                head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("Anonymous Department Staff Report", "2512"));
                head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("General Descriptive Feedback Report", "2513"));
                head_node.ChildNodes[15].ChildNodes.Add(new TreeNode("Grievance Mail", "2514"));
                #endregion
                ////18 Request added by sudhagar on Apr 13th Wed
                //#region Request Setting
                //head_node.ChildNodes.Add(new TreeNode("Request", "1500"));
                //head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("HierarchySetting", "1501"));
                //head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("HierarchySettingReport", "1502"));
                //head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("Request", "1503"));
                //head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("Request Report", "1504"));
                //head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("GatePassEntryExit", "1505"));
                //head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("GateEntryExitReport", "1506"));
                //#endregion
                //16 Request added by sudhagar on Apr 13th Wed
                #region Request Setting
                head_node.ChildNodes.Add(new TreeNode("Request", "1500"));
                head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("HierarchySetting", "1501"));
                head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("HierarchySettingReport", "1502"));
                head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("Request", "1503"));
                head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("Request Report", "1504"));
                head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("GatePassEntryExit", "1505"));
                head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("GateEntryExitReport", "1506"));
                head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("Certificate Master Settings", "1511"));
                head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("Certificate Staff Request", "1512"));
                head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("CodeSettings", "1513"));//magesh 12.5.18
                //27.07.16
                //head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("Letter Inward /Exit Entry","1507"));
                //head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("Letter Inward /Exit Entry Report", "1508"));
                head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("EventReport", "1509"));
                head_node.ChildNodes[16].ChildNodes.Add(new TreeNode("GateEntryExitReport Others", "1510"));
                #endregion
                ////19 Office added by sudhagar on apr 21th thurdy
                //#region office setting
                //head_node.ChildNodes.Add(new TreeNode("Office", "31250"));
                //head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Letter Inward /Exit Entry", "31251"));
                //head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Letter Inward /Exit Entry Report", "31252"));
                //head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Cost Master", "31253"));
                //head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Transport Allotment", "31254"));
                //head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Alumni Report", "31255"));
                //#endregion
                //17 Office added by sudhagar on apr 21th thurdy
                #region office setting
                head_node.ChildNodes.Add(new TreeNode("Office", "31250"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Building Master", "72800"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Header Column Settings - ModuleWise", "72801"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Letter Inward /Exit Entry", "31251"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Letter Inward /Exit Entry Report", "31252"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Cost Master", "31253"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Transport Allotment", "31254"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Alumni Report", "31255"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("I Patch Master", "31256"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Room Allocation", "725"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Staff Room Allocation", "726"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Admin User Settings", "72799"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Holiday Entry", "72802"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Degree Priority Settings", "72803"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Department Vission,Mission Settings", "72804"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Smartcard Mapping", "72805"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Universal Report", "6001"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Student Tamil Name Import", "72806"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Admin Kit Report", "72807"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Code Setting", "72808"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Staff Universal Report", "6051"));
                head_node.ChildNodes[17].ChildNodes.Add(new TreeNode("Present and Absent Count Report", "6052"));
                #endregion

                #region AdmissionNew setting
                //Master
                head_node.ChildNodes.Add(new TreeNode("Admission", "88900"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Rank List Generation", "88901"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Date and Time Slot Settings", "88902"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Counselling Rank Range Settings - Slot Wise", "88903"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Admission Settings", "88904"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Hostel Master Settings", "88905"));
                //operation
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Degree Wise Seat Allotment - Sheet Matrix", "88906"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Counselling Student Registration", "88907"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Counselling Student Registration - Special Permission", "88908"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Slot Time Extention for Registration", "88909"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Counselling Student Certificate Verification", "88910"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Student Course Selection", "88911"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Student Selected Course Rejection", "88912"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Seat Availability", "88913"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Hostel Seat Availability", "88914"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Transport Seat Availability", "88915"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Student Hostel and Transport Selection Process", "88916"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Student Course Selection - Special Permission", "88928"));
                //Reports       
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Admission Status Report Detail", "88917"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Admission Status Report Count", "88918"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Admission Status Report Chart", "88919"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Counselling Student - SMS Alert", "88920"));
                //head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Elective Subject Student Strength Count", "88921"));
                //head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Class Wise and Section Wise Strength", "88922"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Subject Code and Subject Name Edit", "88923"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Branch Sliding / Change", "88924"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("CBCS Registration", "88925"));
                // head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("CBCS Report", "88926"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Admission Status Report", "88927"));

                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("College Information", "88929"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Department Creation", "88930"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Course Creation", "88931"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Degree Information", "88932"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Semester Information", "88933"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Bell Timings", "88934"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Subject Type Master", "88935"));
                head_node.ChildNodes[18].ChildNodes.Add(new TreeNode("Subject Master", "88936"));


                #endregion

                #region Backup
                head_node.ChildNodes.Add(new TreeNode("BackUp", "1900"));
                head_node.ChildNodes[19].ChildNodes.Add(new TreeNode("DataBase BackUp", "1901"));
                #endregion
                // Added By Saranyadevi 11.1.2018

                #region library
                head_node.ChildNodes.Add(new TreeNode("Library", "3000"));//Added By Saranyadevi 11.1.2017
                head_node.ChildNodes[20].ChildNodes.Add(new TreeNode("Master", "999010"));
                head_node.ChildNodes[20].ChildNodes.Add(new TreeNode("Operation", "999011"));
                head_node.ChildNodes[20].ChildNodes.Add(new TreeNode("Report", "999012"));

                //Master
                head_node.ChildNodes[20].ChildNodes[0].ChildNodes.Add(new TreeNode("Code Setting", "999037"));
                head_node.ChildNodes[20].ChildNodes[0].ChildNodes.Add(new TreeNode("Library Master", "999035"));
                head_node.ChildNodes[20].ChildNodes[0].ChildNodes.Add(new TreeNode("Rack Master", "999036"));
                head_node.ChildNodes[20].ChildNodes[0].ChildNodes.Add(new TreeNode("Periodicals", "999017"));
                head_node.ChildNodes[20].ChildNodes[0].ChildNodes.Add(new TreeNode("Inward Entries", "999016"));
                head_node.ChildNodes[20].ChildNodes[0].ChildNodes.Add(new TreeNode("Back Volume", "999025"));
                head_node.ChildNodes[20].ChildNodes[0].ChildNodes.Add(new TreeNode("Non Book Materials", "999066"));
                head_node.ChildNodes[20].ChildNodes[0].ChildNodes.Add(new TreeNode("Project Book", "999069"));
                head_node.ChildNodes[20].ChildNodes[0].ChildNodes.Add(new TreeNode("Proceedings Master", "999067"));
                head_node.ChildNodes[20].ChildNodes[0].ChildNodes.Add(new TreeNode("Standard Master", "999068"));
                head_node.ChildNodes[20].ChildNodes[0].ChildNodes.Add(new TreeNode("Library Norms", "999054"));
                head_node.ChildNodes[20].ChildNodes[0].ChildNodes.Add(new TreeNode("Rack Status Monitor", "999062"));
                head_node.ChildNodes[20].ChildNodes[0].ChildNodes.Add(new TreeNode("Library Card Master", "999018"));
                head_node.ChildNodes[20].ChildNodes[0].ChildNodes.Add(new TreeNode("Individual Card", "999019"));
                head_node.ChildNodes[20].ChildNodes[0].ChildNodes.Add(new TreeNode("Budget Master", "999063"));

                //Operation

                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("User In/Out Entry Screen", "999043"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("Library ID Card Generation", "999039"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("Non-Member Entry", "999041"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("Book Allocation", "999045"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("Periodical Entry", "999038"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("Book Reservation", "999044"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("New Book Request", "999022"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("Bind Books", "999047"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("Bind Book CheckList", "999023"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("Book Lock/Unlock", "999061"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("Card Lock/Unlock", "999056"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("Library Entry Correction", "999055"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("No Dues Entry", "999051"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("Book Photo", "999060"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("News Paper Entry", "999048"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("Book Availability", "999050"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("Book Issue And Return", "999015"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("Subscribe", "999065"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("Barcode Label Generation", "999901"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("Library Notification", "999070"));
                head_node.ChildNodes[20].ChildNodes[1].ChildNodes.Add(new TreeNode("Rack Allocation With CallNo", "999071"));

                //Reports
                head_node.ChildNodes[20].ChildNodes[2].ChildNodes.Add(new TreeNode("User In/Out Entry Report", "999042"));
                head_node.ChildNodes[20].ChildNodes[2].ChildNodes.Add(new TreeNode("Book Allocation Report", "999049"));
                head_node.ChildNodes[20].ChildNodes[2].ChildNodes.Add(new TreeNode("Book Issue Return-Transaction Report", "999064"));
                head_node.ChildNodes[20].ChildNodes[2].ChildNodes.Add(new TreeNode("Transaction Report", "999021"));
                head_node.ChildNodes[20].ChildNodes[2].ChildNodes.Add(new TreeNode("Book Circulation Report", "999040"));
                head_node.ChildNodes[20].ChildNodes[2].ChildNodes.Add(new TreeNode("Invoice Report", "999046"));
                head_node.ChildNodes[20].ChildNodes[2].ChildNodes.Add(new TreeNode("Library Information", "999053"));
                head_node.ChildNodes[20].ChildNodes[2].ChildNodes.Add(new TreeNode("Transfer Report", "999052"));
                head_node.ChildNodes[20].ChildNodes[2].ChildNodes.Add(new TreeNode("Title,Author And publisherwise Report", "999013"));
                head_node.ChildNodes[20].ChildNodes[2].ChildNodes.Add(new TreeNode("Card List and Card Holders", "999033"));
                head_node.ChildNodes[20].ChildNodes[2].ChildNodes.Add(new TreeNode("Fine Report", "999024"));
                head_node.ChildNodes[20].ChildNodes[2].ChildNodes.Add(new TreeNode("Book Statistic Report", "999014"));
                head_node.ChildNodes[20].ChildNodes[2].ChildNodes.Add(new TreeNode("Non Book Material Report", "999058"));
                head_node.ChildNodes[20].ChildNodes[2].ChildNodes.Add(new TreeNode("Library Books And Journal Details", "999057"));
                head_node.ChildNodes[20].ChildNodes[2].ChildNodes.Add(new TreeNode("Cummulative issued Report", "999034"));
                head_node.ChildNodes[20].ChildNodes[2].ChildNodes.Add(new TreeNode("Utilization Report", "999020"));
                head_node.ChildNodes[20].ChildNodes[2].ChildNodes.Add(new TreeNode("Journal Report", "999059"));
                head_node.ChildNodes[20].ChildNodes[2].ChildNodes.Add(new TreeNode("Individual Student Book Circulation Report", "999072"));

                #endregion

                #region Irun Rights Added by saranya on 8/10/2018

                head_node.ChildNodes.Add(new TreeNode("I Run Master", "3020"));//Added By Saranyadevi 11.1.2017
                head_node.ChildNodes[21].ChildNodes.Add(new TreeNode("Master Wizard", "910001"));
                head_node.ChildNodes[21].ChildNodes.Add(new TreeNode("Academic Master", "910002"));
                head_node.ChildNodes[21].ChildNodes.Add(new TreeNode("Hr Master", "910003"));
                head_node.ChildNodes[21].ChildNodes.Add(new TreeNode("Transport Master", "910004"));
                head_node.ChildNodes[21].ChildNodes.Add(new TreeNode("Library Master", "910005"));
                head_node.ChildNodes[21].ChildNodes.Add(new TreeNode("Hostel Master", "910006"));
                head_node.ChildNodes[21].ChildNodes.Add(new TreeNode("Inventory Master", "910007"));
                head_node.ChildNodes[21].ChildNodes.Add(new TreeNode("Finance Master", "910008"));

                //Master Wizard
                head_node.ChildNodes[21].ChildNodes[0].ChildNodes.Add(new TreeNode("Institution Import", "910009"));
                head_node.ChildNodes[21].ChildNodes[0].ChildNodes.Add(new TreeNode("Degree Import", "910010"));
                head_node.ChildNodes[21].ChildNodes[0].ChildNodes.Add(new TreeNode("Branch Import", "910011"));
                head_node.ChildNodes[21].ChildNodes[0].ChildNodes.Add(new TreeNode("Regulation Import", "910012"));
                head_node.ChildNodes[21].ChildNodes[0].ChildNodes.Add(new TreeNode("Seat Type Import", "910013"));
                head_node.ChildNodes[21].ChildNodes[0].ChildNodes.Add(new TreeNode("Semester Information Import", "910014"));
                head_node.ChildNodes[21].ChildNodes[0].ChildNodes.Add(new TreeNode("Bell Timing Import", "910015"));
                head_node.ChildNodes[21].ChildNodes[0].ChildNodes.Add(new TreeNode("Grade Master Import", "910016"));
                head_node.ChildNodes[21].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Import", "910017"));
                head_node.ChildNodes[21].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Enquiry/Application Import", "910018"));
                head_node.ChildNodes[21].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Enquiry/Application Import(A) ", "910019"));
                head_node.ChildNodes[21].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Previous Course Mark Import", "910020"));
                head_node.ChildNodes[21].ChildNodes[0].ChildNodes.Add(new TreeNode("TC NO & Date Update", "910021"));
                head_node.ChildNodes[21].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Tamil Name", "910022"));
                head_node.ChildNodes[21].ChildNodes[0].ChildNodes.Add(new TreeNode("Student photo", "910023"));
                head_node.ChildNodes[21].ChildNodes[0].ChildNodes.Add(new TreeNode("Student Bank Import", "910024"));
                head_node.ChildNodes[21].ChildNodes[0].ChildNodes.Add(new TreeNode("Class Room Details", "910025"));
                head_node.ChildNodes[21].ChildNodes[0].ChildNodes.Add(new TreeNode("User Creation", "910026"));

                //Academic Master
                head_node.ChildNodes[21].ChildNodes[1].ChildNodes.Add(new TreeNode("Subject Type Import", "910027"));
                head_node.ChildNodes[21].ChildNodes[1].ChildNodes.Add(new TreeNode("Subject Import", "910028"));
                head_node.ChildNodes[21].ChildNodes[1].ChildNodes.Add(new TreeNode("Syllabus Master Import", "910029"));
                head_node.ChildNodes[21].ChildNodes[1].ChildNodes.Add(new TreeNode("Subject Chooser Import", "910030"));
                head_node.ChildNodes[21].ChildNodes[1].ChildNodes.Add(new TreeNode("Class Time Table Import", "910031"));
                head_node.ChildNodes[21].ChildNodes[1].ChildNodes.Add(new TreeNode("Cam Time Table Import", "910032"));
                head_node.ChildNodes[21].ChildNodes[1].ChildNodes.Add(new TreeNode("University Exam Time Table Import", "910033"));
                head_node.ChildNodes[21].ChildNodes[1].ChildNodes.Add(new TreeNode("Exam Month and Year Master Settings Import", "910034"));
                head_node.ChildNodes[21].ChildNodes[1].ChildNodes.Add(new TreeNode("University Mark Import", "910035"));
                head_node.ChildNodes[21].ChildNodes[1].ChildNodes.Add(new TreeNode("Re-Valuation Marks Import", "910036"));
                head_node.ChildNodes[21].ChildNodes[1].ChildNodes.Add(new TreeNode("Batch Year Wise University Mark Import", "910037"));
                head_node.ChildNodes[21].ChildNodes[1].ChildNodes.Add(new TreeNode("Condonation Fee", "910038"));
                head_node.ChildNodes[21].ChildNodes[1].ChildNodes.Add(new TreeNode("Extension Activity & Project Paper", "910039"));
                head_node.ChildNodes[21].ChildNodes[1].ChildNodes.Add(new TreeNode("University Mark & Grade Import", "910040"));
                head_node.ChildNodes[21].ChildNodes[1].ChildNodes.Add(new TreeNode("Student Special Hour Import", "910041"));

                //Hr Master
                head_node.ChildNodes[21].ChildNodes[2].ChildNodes.Add(new TreeNode("Hr Year Import", "910042"));
                head_node.ChildNodes[21].ChildNodes[2].ChildNodes.Add(new TreeNode("Designation Import", "910043"));
                head_node.ChildNodes[21].ChildNodes[2].ChildNodes.Add(new TreeNode("Category Import", "910044"));
                head_node.ChildNodes[21].ChildNodes[2].ChildNodes.Add(new TreeNode("Allowance and Deduction Import", "910045"));
                head_node.ChildNodes[21].ChildNodes[2].ChildNodes.Add(new TreeNode("Leave Master Import", "910046"));
                head_node.ChildNodes[21].ChildNodes[2].ChildNodes.Add(new TreeNode("Leave Details Import", "910047"));
                head_node.ChildNodes[21].ChildNodes[2].ChildNodes.Add(new TreeNode("Staff Details Import", "910048"));
                head_node.ChildNodes[21].ChildNodes[2].ChildNodes.Add(new TreeNode("Staff Subject Selectors Import", "910049"));
                head_node.ChildNodes[21].ChildNodes[2].ChildNodes.Add(new TreeNode("Staff Additional Details Import", "910050"));
                head_node.ChildNodes[21].ChildNodes[2].ChildNodes.Add(new TreeNode("Staff Grade Pay Import", "910051"));
                head_node.ChildNodes[21].ChildNodes[2].ChildNodes.Add(new TreeNode("Staff Photo", "910052"));
                head_node.ChildNodes[21].ChildNodes[2].ChildNodes.Add(new TreeNode("Staff Code Import", "910053"));

                //Transport Master
                head_node.ChildNodes[21].ChildNodes[3].ChildNodes.Add(new TreeNode("Vehicle Master Import", "910054"));
                head_node.ChildNodes[21].ChildNodes[3].ChildNodes.Add(new TreeNode("Route Master Import", "910055"));
                head_node.ChildNodes[21].ChildNodes[3].ChildNodes.Add(new TreeNode("Stage Master Import", "910056"));
                head_node.ChildNodes[21].ChildNodes[3].ChildNodes.Add(new TreeNode("Driver Allotment Import", "910057"));
                head_node.ChildNodes[21].ChildNodes[3].ChildNodes.Add(new TreeNode("Cost Master Import", "910058"));
                head_node.ChildNodes[21].ChildNodes[3].ChildNodes.Add(new TreeNode("Student Transport Allotment Import", "910059"));

                //Library Master
                head_node.ChildNodes[21].ChildNodes[4].ChildNodes.Add(new TreeNode("Book Details Import", "910060"));
                head_node.ChildNodes[21].ChildNodes[4].ChildNodes.Add(new TreeNode("Publisher Details Import", "910061"));
                head_node.ChildNodes[21].ChildNodes[4].ChildNodes.Add(new TreeNode("Issued Book Import", "910062"));
                head_node.ChildNodes[21].ChildNodes[4].ChildNodes.Add(new TreeNode("Journal Import", "910063"));
                head_node.ChildNodes[21].ChildNodes[4].ChildNodes.Add(new TreeNode("Non Book Details Import", "910064"));
                head_node.ChildNodes[21].ChildNodes[4].ChildNodes.Add(new TreeNode("Rack Import", "910065"));
                head_node.ChildNodes[21].ChildNodes[4].ChildNodes.Add(new TreeNode("Binding Book Import", "910066"));
                head_node.ChildNodes[21].ChildNodes[4].ChildNodes.Add(new TreeNode("Fine Details Import", "910067"));
                head_node.ChildNodes[21].ChildNodes[4].ChildNodes.Add(new TreeNode("Project Book Details Import", "910068"));
                head_node.ChildNodes[21].ChildNodes[4].ChildNodes.Add(new TreeNode("Supplier Import", "910069"));
                head_node.ChildNodes[21].ChildNodes[4].ChildNodes.Add(new TreeNode("Return Book Details Import", "910070"));
                head_node.ChildNodes[21].ChildNodes[4].ChildNodes.Add(new TreeNode("Back Volume Import", "910071"));

                //Hostel Master
                head_node.ChildNodes[21].ChildNodes[5].ChildNodes.Add(new TreeNode("Mess Master", "910072"));
                head_node.ChildNodes[21].ChildNodes[5].ChildNodes.Add(new TreeNode("Hostel Master", "910073"));
                head_node.ChildNodes[21].ChildNodes[5].ChildNodes.Add(new TreeNode("Hostel Registration", "910074"));
                head_node.ChildNodes[21].ChildNodes[5].ChildNodes.Add(new TreeNode("Session Master", "910075"));
                head_node.ChildNodes[21].ChildNodes[5].ChildNodes.Add(new TreeNode("Menu Master", "910076"));
                head_node.ChildNodes[21].ChildNodes[5].ChildNodes.Add(new TreeNode("Building Master", "910077"));
                head_node.ChildNodes[21].ChildNodes[5].ChildNodes.Add(new TreeNode("Floor Master", "910078"));
                head_node.ChildNodes[21].ChildNodes[5].ChildNodes.Add(new TreeNode("Room Master", "910079"));

                //Inventory Master
                head_node.ChildNodes[21].ChildNodes[6].ChildNodes.Add(new TreeNode("Code Master", "910080"));
                head_node.ChildNodes[21].ChildNodes[6].ChildNodes.Add(new TreeNode("Item Master", "910081"));
                head_node.ChildNodes[21].ChildNodes[6].ChildNodes.Add(new TreeNode("Store Master", "910082"));
                head_node.ChildNodes[21].ChildNodes[6].ChildNodes.Add(new TreeNode("Supplier Master", "910083"));
                head_node.ChildNodes[21].ChildNodes[6].ChildNodes.Add(new TreeNode("Supplier Add Item and Add Supplier Details", "910084"));
                head_node.ChildNodes[21].ChildNodes[6].ChildNodes.Add(new TreeNode("Openning Stock", "910085"));
                head_node.ChildNodes[21].ChildNodes[6].ChildNodes.Add(new TreeNode("Direct Inward", "910086"));
                head_node.ChildNodes[21].ChildNodes[6].ChildNodes.Add(new TreeNode("Daily consumption", "910087"));

                //Finance Master
                head_node.ChildNodes[21].ChildNodes[7].ChildNodes.Add(new TreeNode("Finance Year", "910088"));
                head_node.ChildNodes[21].ChildNodes[7].ChildNodes.Add(new TreeNode("Header Master", "910089"));
                head_node.ChildNodes[21].ChildNodes[7].ChildNodes.Add(new TreeNode("Ledger Master", "910090"));
                head_node.ChildNodes[21].ChildNodes[7].ChildNodes.Add(new TreeNode("Bank Master", "910091"));
                head_node.ChildNodes[21].ChildNodes[7].ChildNodes.Add(new TreeNode("Due Fee For Allot", "910092"));
                head_node.ChildNodes[21].ChildNodes[7].ChildNodes.Add(new TreeNode("Fee For Allot", "910093"));
                head_node.ChildNodes[21].ChildNodes[7].ChildNodes.Add(new TreeNode("Fee For Paid", "910094"));
                head_node.ChildNodes[21].ChildNodes[7].ChildNodes.Add(new TreeNode("Duduction", "910095"));
                head_node.ChildNodes[21].ChildNodes[7].ChildNodes.Add(new TreeNode("Scholarship", "910096"));
                head_node.ChildNodes[21].ChildNodes[7].ChildNodes.Add(new TreeNode("Challan Paid", "910097"));
                head_node.ChildNodes[21].ChildNodes[7].ChildNodes.Add(new TreeNode("Receipt/Voucher Paid", "910098"));
                #endregion

                head_node.SelectAction = TreeNodeSelectAction.None;
                int t_node = 0;
                while (t_node < head_node.ChildNodes.Count)
                {
                    head_node.ChildNodes[t_node].SelectAction = TreeNodeSelectAction.None;
                    if (head_node.ChildNodes[t_node].ChildNodes.Count != 0)
                    {
                        for (int c = 0; c < head_node.ChildNodes[t_node].ChildNodes.Count; c++)
                        {
                            head_node.ChildNodes[t_node].ChildNodes[c].SelectAction = TreeNodeSelectAction.None;
                            if (head_node.ChildNodes[t_node].ChildNodes[c].ChildNodes.Count != 0)
                            {
                                for (int c_n = 0; c_n < head_node.ChildNodes[t_node].ChildNodes[c].ChildNodes.Count; c_n++)
                                {
                                    head_node.ChildNodes[t_node].ChildNodes[c].ChildNodes[c_n].SelectAction = TreeNodeSelectAction.None;
                                    if (head_node.ChildNodes[t_node].ChildNodes[c].ChildNodes[c_n].ChildNodes.Count != 0)
                                    {
                                        for (int cn = 0; cn < head_node.ChildNodes[t_node].ChildNodes[c].ChildNodes[c_n].ChildNodes.Count; cn++)
                                        {
                                            head_node.ChildNodes[t_node].ChildNodes[c].ChildNodes[c_n].ChildNodes[cn].SelectAction = TreeNodeSelectAction.None;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    t_node = t_node + 1;
                }
                TVset.Nodes.Add(head_node);
                //cmd1.Dispose();
                TVset.Attributes.Add("onclick", "OnCheckBoxCheckChanged(event)");
                TreeNode studentnode = new TreeNode("Student Security Settings", "16");
                studentnode.ChildNodes.Add(new TreeNode("Student Tab Rights", "160001"));
                studentnode.ChildNodes[0].ChildNodes.Add(new TreeNode("Personal Details", "160002"));
                studentnode.ChildNodes[0].ChildNodes[0].ChildNodes.Add(new TreeNode("Bio Data", "1600021"));
                studentnode.ChildNodes[0].ChildNodes[0].ChildNodes.Add(new TreeNode("Contact Details", "1600022"));
                studentnode.ChildNodes[0].ChildNodes[0].ChildNodes.Add(new TreeNode("Certificate Details", "1600023"));
                studentnode.ChildNodes[0].ChildNodes.Add(new TreeNode("Time table Details", "160003"));
                studentnode.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Today", "1600031"));
                studentnode.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("Semester", "1600032"));
                studentnode.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("CAM", "1600033"));
                studentnode.ChildNodes[0].ChildNodes[1].ChildNodes.Add(new TreeNode("External", "1600034"));
                studentnode.ChildNodes[0].ChildNodes.Add(new TreeNode("Mark Details", "160004"));
                studentnode.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Subject", "1600041"));
                studentnode.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Marks", "1600042"));
                studentnode.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Arrear Papers", "1600043"));
                studentnode.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("CAM", "1600044"));
                studentnode.ChildNodes[0].ChildNodes[2].ChildNodes.Add(new TreeNode("Subject Chooser", "1600045"));
                studentnode.ChildNodes[0].ChildNodes.Add(new TreeNode("Lesson status Details", "160005"));
                studentnode.ChildNodes[0].ChildNodes[3].ChildNodes.Add(new TreeNode("Conducted", "1600051"));
                studentnode.ChildNodes[0].ChildNodes[3].ChildNodes.Add(new TreeNode("Missed", "1600052"));
                studentnode.ChildNodes[0].ChildNodes[3].ChildNodes.Add(new TreeNode("Yet", "1600053"));
                studentnode.ChildNodes[0].ChildNodes.Add(new TreeNode("Attendance Details", "160006"));
                studentnode.ChildNodes[0].ChildNodes[4].ChildNodes.Add(new TreeNode("Today", "1600061"));
                studentnode.ChildNodes[0].ChildNodes[4].ChildNodes.Add(new TreeNode("Weekly", "1600062"));
                studentnode.ChildNodes[0].ChildNodes[4].ChildNodes.Add(new TreeNode("Semester", "1600063"));
                studentnode.ChildNodes[0].ChildNodes[4].ChildNodes.Add(new TreeNode("Semester Date", "1600064"));
                studentnode.ChildNodes[0].ChildNodes[4].ChildNodes.Add(new TreeNode("Events", "1600065"));
                studentnode.ChildNodes[0].ChildNodes[4].ChildNodes.Add(new TreeNode("Exam Date", "1600066"));
                studentnode.ChildNodes[0].ChildNodes.Add(new TreeNode("Library Details", "160007"));
                studentnode.ChildNodes[0].ChildNodes[5].ChildNodes.Add(new TreeNode("OPAC", "1600071"));
                studentnode.ChildNodes[0].ChildNodes[5].ChildNodes.Add(new TreeNode("Library Cards", "1600072"));
                studentnode.ChildNodes[0].ChildNodes[5].ChildNodes.Add(new TreeNode("Books Taken", "1600073"));
                studentnode.ChildNodes[0].ChildNodes[5].ChildNodes.Add(new TreeNode("Reminder", "1600074"));
                studentnode.ChildNodes[0].ChildNodes[5].ChildNodes.Add(new TreeNode("Books Return", "1600075"));
                studentnode.ChildNodes[0].ChildNodes[5].ChildNodes.Add(new TreeNode("Fine", "1600076"));
                studentnode.ChildNodes[0].ChildNodes.Add(new TreeNode("General Details", "160008"));
                studentnode.ChildNodes[0].ChildNodes[6].ChildNodes.Add(new TreeNode("Fees", "1600081"));
                studentnode.ChildNodes[0].ChildNodes[6].ChildNodes.Add(new TreeNode("Transport", "1600082"));
                studentnode.ChildNodes[0].ChildNodes[6].ChildNodes.Add(new TreeNode("Feedback", "1600083"));
                studentnode.ChildNodes[0].ChildNodes[6].ChildNodes.Add(new TreeNode("Notification", "1600084"));
                studentnode.ChildNodes[0].ChildNodes[6].ChildNodes.Add(new TreeNode("Mess Registration", "1600085"));
                studentnode.ChildNodes[0].ChildNodes[6].ChildNodes.Add(new TreeNode("Receipt Print", "1600086"));
                studentnode.ChildNodes[0].ChildNodes[6].ChildNodes.Add(new TreeNode("Grivevance", "1600087"));
                //studentnode.ChildNodes[0].ChildNodes[6].ChildNodes.Add(new TreeNode("Hostel", "1600085"));//barath 26.01.18
                studentnode.ChildNodes[0].ChildNodes.Add(new TreeNode("Hostel", "160013"));//barath 26.01.18
                studentnode.ChildNodes[0].ChildNodes[7].ChildNodes.Add(new TreeNode("Request", "160014"));
                studentnode.ChildNodes[0].ChildNodes[7].ChildNodes.Add(new TreeNode("Request Details", "160015"));
                studentnode.ChildNodes[0].ChildNodes[7].ChildNodes.Add(new TreeNode("Hostel Request", "160016"));
                studentnode.ChildNodes[0].ChildNodes.Add(new TreeNode("Online Examination", "160009"));
                studentnode.ChildNodes[0].ChildNodes.Add(new TreeNode("Student Conduct", "160010"));
                studentnode.ChildNodes[0].ChildNodes.Add(new TreeNode("Questions", "160011"));
                //studentnode.ChildNodes[0].ChildNodes.Add(new TreeNode("Charts", "160012"));//barath 26.01.18
                //studentnode.ChildNodes[0].ChildNodes[10].ChildNodes.Add(new TreeNode("Charts", "1600124"));
                TVStudentlog.Nodes.Add(studentnode);
                TVStudentlog.Attributes.Add("onclick", "OnCheckBoxCheckChanged(event)");
                studentnode.SelectAction = TreeNodeSelectAction.None;
                t_node = 0;
                while (t_node < studentnode.ChildNodes.Count)
                {
                    studentnode.ChildNodes[t_node].SelectAction = TreeNodeSelectAction.None;
                    if (studentnode.ChildNodes[t_node].ChildNodes.Count != 0)
                    {
                        for (int c = 0; c < studentnode.ChildNodes[t_node].ChildNodes.Count; c++)
                        {
                            studentnode.ChildNodes[t_node].ChildNodes[c].SelectAction = TreeNodeSelectAction.None;
                            if (studentnode.ChildNodes[t_node].ChildNodes[c].ChildNodes.Count != 0)
                            {
                                for (int c_n = 0; c_n < studentnode.ChildNodes[t_node].ChildNodes[c].ChildNodes.Count; c_n++)
                                {
                                    studentnode.ChildNodes[t_node].ChildNodes[c].ChildNodes[c_n].SelectAction = TreeNodeSelectAction.None;
                                    if (studentnode.ChildNodes[t_node].ChildNodes[c].ChildNodes[c_n].ChildNodes.Count != 0)
                                    {
                                        for (int cn = 0; cn < head_node.ChildNodes[t_node].ChildNodes[c].ChildNodes[c_n].ChildNodes.Count; cn++)
                                        {
                                            studentnode.ChildNodes[t_node].ChildNodes[c].ChildNodes[c_n].ChildNodes[cn].SelectAction = TreeNodeSelectAction.None;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    t_node = t_node + 1;
                }
                bindCollegeACR();
                loadfinyear();
                loadheader();
                loadled();
                loadtapal_header();
                loadtapal_ledger();
                loadFineHeader();
                loadFineHeaderreamd();
                // loadReadmHdFine();
                loadTransportHeader();
                loadchallanHeader();
                loadcoll();
                //  loadhrdept();//delsisref
                loadclgbank();
                loadMessHeader();
                loadMessLedger();
                loadMainJrHed();
                bindBtch();
                binddeg();
                binddept();
                bindBtchRe();
                binddegRe();
                binddeptRe();
                binddegree();
                loadfinanceyear();
                loadOnlineHeaders();
                loadOnlineLedgers();


                loadFinanceTypeCoe();
                loadfinanceyearCOE();
                loadOnlineHeadersCOE();
                loadOnlineLedgersCOE();
                bindyearproftax(); /*poomalar 24.10.17*/
                bindmonthproftax(); /*poomalar 24.10.17*/

                //loadchallanledger();
                //cmd1.CommandText = "select distinct coll_acronymn,college_code from collinfo order by coll_acronymn";
                //cmd1.Connection = mysql;
                //mysql.Open();
                //ddlcollege.DataSource = cmd1.ExecuteReader();
                //ddlcollege.DataValueField = "college_code";
                //ddlcollege.DataTextField = "coll_acronymn";
                //ddlcollege.DataBind();
                //mysql.Close();
                //if (ddlcollege.Items.Count > 1)
                //{
                //    ddlcollege.Visible = true;
                //    Label3.Visible = true;
                //    txtuser.Style.Value = "left:780px; top:165px; position: absolute;";
                //    btnGo.Style.Value = "display: inline-block; color: Black; font-family: Book Antiqua; font-size: small; font-weight: bold; width: 50px; text-align: center; border-style: solid; border-width: 1px; border-color: gray; background-color: none; border-radius: 4px 4px 4px 4px; text-decoration: none; top:165px; left:900px; position:absolute;";
                //}
                //else
                //{
                //    ddlcollege.Visible = false;
                //    Label3.Visible = false;
                //    ddlcollege.SelectedIndex = 0;
                //    txtuser.Style.Value = "left: 460px; top:165px; position: absolute;";
                //    btnGo.Style.Value = "display: inline-block; color: Black; font-family: Book Antiqua; font-size: small; font-weight: bold; width: 50px; text-align: center; border-style: solid; border-width: 1px; border-color: gray; background-color: none; border-radius: 4px 4px 4px 4px; text-decoration: none; top:165px; left:600px; position:absolute;";
                //}
                string staval = string.Empty;
                //ddluse items add
                if (rdb_ind.Checked == true)
                {
                    // cmd1.CommandText = "select distinct user_code,user_id from usermaster where college_code=" + ddlcollege.Items[0].Value.ToString() + "  and group_code in('0','-1','')  order by user_id";
                    staval = "select distinct user_code,user_id from usermaster where college_code=" + ddlcollege.Items[0].Value.ToString() + "  and group_code in('0','-1','')  order by user_id";
                }
                else if (rdb_grp.Checked == true)
                {
                    //cmd1.CommandText = "select distinct distinct group_code as user_code,groupname as user_code from groupmaster  order by groupname";
                    staval = "select distinct distinct group_code as user_code,groupname as user_code from groupmaster  order by groupname";
                }
                DataSet dsuse = dasri.select_method_wo_parameter(staval, "Text");
                ddluser.DataSource = dsuse;
                ddluser.DataValueField = "user_code";
                ddluser.DataTextField = "user_id";
                ddluser.DataBind();
                //cmd1.Connection = mysql;
                //mysql.Open();
                //ddluser.DataSource = cmd1.ExecuteReader();
                //ddluser.DataValueField = "user_code";
                //ddluser.DataTextField = "user_id";
                //ddluser.DataBind();
                //mysql.Close();
                //ddluser.Items.Insert(0, "---Select---");
                rbadmno.Enabled = false;
                rbregno.Enabled = false;
                rbrollno.Enabled = false;
                rbgeneral.Checked = false;
                rbadmno.Checked = false;
                rbrollno.Checked = false;
                rbregno.Checked = false;
                bindcolltype();
                txtmark.Visible = false;
                lblmark.Visible = false;
                int ori_value = 0;
                //SqlDataReader dr_coe;
                //con.Close();
                //con.Open();
                //cmd1 = new SqlCommand("select value from COE_Master_Settings where settings='Mark Conversion'", con);
                //dr_coe = cmd1.ExecuteReader();
                string getset = dasri.GetFunctionv("select value from COE_Master_Settings where settings='Mark Conversion'");
                if (getset.Trim() != "")
                {
                    btn_originalmark.Checked = false;
                    btn_convertmark.Checked = true;
                    lblmark.Visible = true;
                    txtmark.Visible = true;
                    string ferth = dasri.GetFunctionv("select value from COE_Master_Settings where settings='" + lblmark.Text + "'");
                    if (ferth.Trim() != "")
                    {
                        txtmark.Text = ferth.ToString();
                    }
                }
                else
                {
                    btn_originalmark.Checked = true;
                    btn_convertmark.Checked = false;
                    txtmark.Visible = false;
                    lblmark.Visible = false;
                }
                string stvfa = dasri.GetFunctionv("select value from COE_Master_Settings where settings='Fail Grade'");
                if (stvfa.Trim() != "")
                {
                    txt_grade.Text = stvfa;
                }
                //SqlCommand cmd_grade = new SqlCommand("select value from COE_Master_Settings where settings='Fail Grade'", con);
                //dr_grade = cmd_grade.ExecuteReader();
                //if (dr_grade.HasRows == true)
                //{
                //    if (dr_grade.Read())
                //    {
                //        if (dr_grade["value"].ToString() != "")
                //        {
                //            txt_grade.Text = dr_grade["value"].ToString();
                //        }
                //    }
                //}
                dsbindv3.Dispose();
                dsbindv3.Reset();
                dsbindv3 = dasri.select_method("select top 1 attempts,maxmark from coe_attmaxmark where collegecode='" + ddlcollege.SelectedItem.Value.ToString() + "'", ht, "");
                if (dsbindv3 != null && dsbindv3.Tables[0].Rows.Count > 0 && dsbindv3.Tables[0].Rows.Count < 2)
                {
                    txtattempts.Text = dsbindv3.Tables[0].Rows[0]["attempts"].ToString();
                    txtmaxmarkv.Text = dsbindv3.Tables[0].Rows[0]["maxmark"].ToString();
                }
                drp_edu.Items.Clear();
                drp_edulevel.Items.Clear();
                ddlmarksheetadd.Items.Clear();
                ddlmodedu.Items.Clear();
                ddlfialedu.Items.Clear();
                dsbindv.Dispose();
                dsbindv.Reset();
                string strquery = "select distinct edu_level from course where college_code=" + ddlcollege.SelectedItem.Value.ToString() + " order by edu_level desc";
                dsbindv = dasri.select_method(strquery, ht, "");
                if (dsbindv != null && dsbindv.Tables[0].Rows.Count > 0)
                {
                    DropDownList1.DataSource = dsbindv;
                    DropDownList1.DataTextField = "edu_level";
                    DropDownList1.DataBind();
                    drp_edu.DataSource = dsbindv;
                    drp_edu.DataTextField = "edu_level";
                    drp_edu.DataBind();
                    drp_edulevel.DataSource = dsbindv;
                    drp_edulevel.DataTextField = "edu_level";
                    drp_edulevel.DataBind();
                    ddlminicamode.DataSource = dsbindv;
                    ddlminicamode.DataTextField = "edu_level";
                    ddlminicamode.DataBind();
                    ddlmarksheetadd.DataSource = dsbindv;
                    ddlmarksheetadd.DataTextField = "edu_level";
                    ddlmarksheetadd.DataBind();
                    ddlmodedu.DataSource = dsbindv;
                    ddlmodedu.DataTextField = "edu_level";
                    ddlmodedu.DataBind();
                    ddlfialedu.DataSource = dsbindv;
                    ddlfialedu.DataTextField = "edu_level";
                    ddlfialedu.DataBind();
                    drp_edu.Items.Insert(0, " ");
                    drp_edulevel.Items.Insert(0, " ");
                    ddlmarksheetadd.Items.Insert(0, " ");
                }
                //added by srinath 20/12/2013
                txtminimumabsentdays.Text = string.Empty;
                txtrollsuffixlength.Text = string.Empty;
                txtbankdegit.Text = string.Empty;
                chkpersem.Checked = false;
                chkwottable.Checked = false;
                chksubatt.Checked = false;
                cblCombinedClsAlrt.Checked = false;
                cb_generalfee.Checked = false;
                cb_transport.Checked = false;
                cb_hostelfee.Checked = false;
                string strsubty = "select distinct subject_type from sub_sem where subject_type not like 'pra%' and subject_type not like 'the%' and subject_type not like 'lab%'  and subject_type not like 'oth%' and subject_type not like 'ele%'";
                DataSet dssubtype = dasri.select_method_wo_parameter(strsubty, "Text");
                if (dssubtype != null && dssubtype.Tables[0].Rows.Count > 0)
                {
                    chklssubjecttype.DataSource = dssubtype;
                    chklssubjecttype.DataTextField = "subject_type";
                    chklssubjecttype.DataBind();
                    chklssubjecttype.Items.Add("Theory");
                    chklssubjecttype.Items.Add("Practical");
                    chklssubjecttype.Items.Add("Others");
                    chklssubjecttype.Items.Add("Elective");
                    txtsubjecttype.Text = " ---Select---";
                    chksubjecttype.Checked = false;
                }
                loadbatch();
                //Added By Srinath 11/3/2015
                ddlemmonth.Items.Insert(0, new ListItem("  ", "0"));
                ddlemmonth.Items.Insert(1, new ListItem("Jan", "1"));
                ddlemmonth.Items.Insert(2, new ListItem("Feb", "2"));
                ddlemmonth.Items.Insert(3, new ListItem("Mar", "3"));
                ddlemmonth.Items.Insert(4, new ListItem("Apr", "4"));
                ddlemmonth.Items.Insert(5, new ListItem("May", "5"));
                ddlemmonth.Items.Insert(6, new ListItem("Jun", "6"));
                ddlemmonth.Items.Insert(7, new ListItem("Jul", "7"));
                ddlemmonth.Items.Insert(8, new ListItem("Aug", "8"));
                ddlemmonth.Items.Insert(9, new ListItem("Sep", "9"));
                ddlemmonth.Items.Insert(10, new ListItem("Oct", "10"));
                ddlemmonth.Items.Insert(11, new ListItem("Nov", "11"));
                ddlemmonth.Items.Insert(12, new ListItem("Dec", "12"));
                int year;
                year = Convert.ToInt16(DateTime.Today.Year);
                ddlemyear.Items.Clear();
                for (int l = 0; l <= 5; l++)
                {
                    ddlemyear.Items.Add(Convert.ToString(year - l));
                }
                ddlemyear.Items.Insert(0, new ListItem("  ", "0"));
                //End

                string setexammonthyear = dasri.GetFunction("select value from master_settings where settings='Exam year and month Valuation'");
                if (setexammonthyear != null && setexammonthyear.Trim() != "" && setexammonthyear.Trim() != "0")
                {
                    string[] stapv = setexammonthyear.Split(',');
                    if (stapv.GetUpperBound(0) == 1)
                    {
                        ddlemyear.Text = stapv[0].ToString();
                        ddlemmonth.Text = stapv[1].ToString();
                    }
                }

                ddlExamMonthResult.Items.Insert(0, new ListItem("  ", "0"));
                ddlExamMonthResult.Items.Insert(1, new ListItem("Jan", "1"));
                ddlExamMonthResult.Items.Insert(2, new ListItem("Feb", "2"));
                ddlExamMonthResult.Items.Insert(3, new ListItem("Mar", "3"));
                ddlExamMonthResult.Items.Insert(4, new ListItem("Apr", "4"));
                ddlExamMonthResult.Items.Insert(5, new ListItem("May", "5"));
                ddlExamMonthResult.Items.Insert(6, new ListItem("Jun", "6"));
                ddlExamMonthResult.Items.Insert(7, new ListItem("Jul", "7"));
                ddlExamMonthResult.Items.Insert(8, new ListItem("Aug", "8"));
                ddlExamMonthResult.Items.Insert(9, new ListItem("Sep", "9"));
                ddlExamMonthResult.Items.Insert(10, new ListItem("Oct", "10"));
                ddlExamMonthResult.Items.Insert(11, new ListItem("Nov", "11"));
                ddlExamMonthResult.Items.Insert(12, new ListItem("Dec", "12"));
                year = 0;
                year = Convert.ToInt16(DateTime.Today.Year);
                ddlExamYearResult.Items.Clear();
                for (int l = 0; l <= 5; l++)
                {
                    ddlExamYearResult.Items.Add(Convert.ToString(year - l));
                }
                ddlExamYearResult.Items.Insert(0, new ListItem("  ", "0"));

                string strExamYearExamMonthForResult = dasri.GetFunction("select value from master_settings where settings='Exam year and month Result Publish'");
                if (strExamYearExamMonthForResult != null && strExamYearExamMonthForResult.Trim() != "" && strExamYearExamMonthForResult.Trim() != "0")
                {
                    string[] resultMonthYear = strExamYearExamMonthForResult.Split(',');
                    if (resultMonthYear.GetUpperBound(0) == 1)
                    {
                        ddlExamYearResult.Text = Convert.ToString(resultMonthYear[0]).Trim();
                        ddlExamMonthResult.Text = Convert.ToString(resultMonthYear[1]).Trim();
                    }
                }

                //===================Loading Header
                //string straccheadquery = "select HeaderName,HeaderPK from fm_headermaster where HeaderName not in ('arrear')";
                string straccheadquery = "SELECT distinct HeaderPK,HeaderName FROM FM_HeaderMaster H WHERE CollegeCode = " + ddlcollege.SelectedValue + "";
                DataSet ds = dasri.select_method_wo_parameter(straccheadquery, "Text");
                ddleappheader.Items.Clear();
                ddleappledger.Items.Clear();
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    ddleappheader.DataSource = ds;
                    //ddleappheader.DataTextField = "header_name";
                    //ddleappheader.DataValueField = "header_id";
                    ddleappheader.DataTextField = "HeaderName";
                    ddleappheader.DataValueField = "HeaderPK";
                    ddleappheader.DataBind();
                    //barath 29.03.17
                    ddl_admissionH.DataSource = ds;
                    ddl_admissionH.DataTextField = "HeaderName";
                    ddl_admissionH.DataValueField = "HeaderPK";
                    ddl_admissionH.DataBind();
                    //string strquer = "select fee_type,fee_code from fee_info where fee_type not in ('Cash','Income & Expenditure','Misc') and fee_type not in (select bankname from bank_master1) and header_id = " + ddleappheader.SelectedValue.ToString() + " order by fee_code";
                    //string strquer = "select ledgername,ledgerpk from fm_ledgermaster where  ledgerpk = " + ddleappheader.SelectedValue.ToString() + "";
                    string strquer = "SELECT distinct LedgerPK,LedgerName FROM FM_LedgerMaster L WHERE  l.LedgerMode=0   AND L.CollegeCode = " + ddlcollege.SelectedValue + " and L.HeaderFK in (" + Convert.ToString(ddleappheader.SelectedItem.Value) + ")";
                    DataSet ds1 = dasri.select_method_wo_parameter(strquer, "text");
                    if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                    {
                        ddleappledger.DataSource = ds1;
                        //ddleappledger.DataTextField = "fee_type";
                        //ddleappledger.DataValueField = "fee_code";
                        ddleappledger.DataTextField = "ledgername";
                        ddleappledger.DataValueField = "ledgerpk";
                        ddleappledger.DataBind();
                    }
                    //barath 29.03.17
                    strquer = "SELECT distinct LedgerPK,LedgerName FROM FM_LedgerMaster L WHERE  l.LedgerMode=0   AND L.CollegeCode = " + ddlcollege.SelectedValue + " and L.HeaderFK in (" + Convert.ToString(ddl_admissionH.SelectedItem.Value) + ")";
                    ds1.Clear();
                    ds1 = dasri.select_method_wo_parameter(strquer, "text");
                    if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                    {
                        ddl_admissionL.DataSource = ds1;
                        ddl_admissionL.DataTextField = "ledgername";
                        ddl_admissionL.DataValueField = "ledgerpk";
                        ddl_admissionL.DataBind();
                    }
                }
                ddlexamapptype_SelectedIndexChanged(sender, e);
                if (ddlminicamode.Items.Count > 0)
                {
                    string getvald = dasri.GetFunctionv("select value from COE_Master_Settings where settings = 'min Ica Moderation " + ddlminicamode.SelectedItem.Text + "'");
                    txtminicamode.Text = getvald;
                }
                Fpmarksheetform.Sheets[0].RowCount = 0;
                Fpmarksheetform.Sheets[0].ColumnCount = 1;
                Fpmarksheetform.CommandBar.Visible = false;
                Fpmarksheetform.ColumnHeader.Cells[0, 0].Text = "Text";
                //Added by Idhris 08-08-2016
                BindCOmpCourse();
                BindCOmpType();
                ddlCOmpCOurse_IndexChange(sender, e);
                //================College Rights========================
                FarPoint.Web.Spread.CheckBoxCellType chkcoll = new FarPoint.Web.Spread.CheckBoxCellType();
                FpCollRight.Sheets[0].ColumnCount = 0;
                FpCollRight.Sheets[0].RowCount = 0;
                FpCollRight.SheetCorner.ColumnCount = 0;
                FpCollRight.CommandBar.Visible = false;
                FpCollRight.Sheets[0].RowHeader.Visible = false;
                FpCollRight.Sheets[0].ColumnCount = 3;
                FpCollRight.Sheets[0].ColumnHeader.Cells[0, 0].Text = "S.No";
                FpCollRight.Sheets[0].ColumnHeader.Cells[0, 1].Text = "College Name";
                FpCollRight.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Select";
                FpCollRight.Sheets[0].ColumnHeader.Cells[0, 0].Font.Bold = true;
                FpCollRight.Sheets[0].ColumnHeader.Cells[0, 1].Font.Bold = true;
                FpCollRight.Sheets[0].ColumnHeader.Cells[0, 2].Font.Bold = true;
                FpCollRight.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
                FpCollRight.Sheets[0].Columns[2].HorizontalAlign = HorizontalAlign.Center;
                FpCollRight.Sheets[0].Columns[0].Font.Name = "Book Antiqua";
                FpCollRight.Sheets[0].Columns[1].Font.Name = "Book Antiqua";
                FpCollRight.Sheets[0].Columns[2].Font.Name = "Book Antiqua";
                FpCollRight.Sheets[0].Columns[0].Locked = true;
                FpCollRight.Sheets[0].Columns[1].Locked = true;
                FpCollRight.Sheets[0].Columns[2].Locked = false;
                FpCollRight.Sheets[0].Columns[0].Width = 50;
                FpCollRight.Sheets[0].Columns[1].Width = 680;
                FpCollRight.Sheets[0].Columns[2].Width = 50;
                DataSet dsloadcoll = d2.select_method_wo_parameter("Select collname,college_code from collinfo order by college_code", "Text");
                for (int c = 0; c < dsloadcoll.Tables[0].Rows.Count; c++)
                {
                    FpCollRight.Sheets[0].RowCount++;
                    FpCollRight.Sheets[0].Cells[FpCollRight.Sheets[0].RowCount - 1, 0].Text = FpCollRight.Sheets[0].RowCount.ToString();
                    FpCollRight.Sheets[0].Cells[FpCollRight.Sheets[0].RowCount - 1, 1].Text = dsloadcoll.Tables[0].Rows[c]["collname"].ToString();
                    FpCollRight.Sheets[0].Cells[FpCollRight.Sheets[0].RowCount - 1, 1].Tag = dsloadcoll.Tables[0].Rows[c]["college_code"].ToString();
                    FpCollRight.Sheets[0].Cells[FpCollRight.Sheets[0].RowCount - 1, 2].CellType = chkcoll;
                }
                FpCollRight.Width = 800;
                FpCollRight.Height = 250;
                FpCollRight.Sheets[0].PageSize = FpCollRight.Sheets[0].RowCount;
                //Degree Rights
                TVDegreeRight.Nodes.Clear();
                TreeNode Collegenode = new TreeNode("College", "0");
                Collegenode.SelectAction = TreeNodeSelectAction.None;
                string strdegreerightquery = "select co.collname,co.college_code,c.Course_Name,c.Course_Id,de.Dept_Name,de.Dept_Code,d.Degree_Code from Degree d,Course c,Department de,collinfo co where d.Course_Id=c.Course_Id and d.Dept_Code=de.Dept_Code and co.college_code=d.college_code order by c.college_code,c.Course_Id,de.Dept_Name; select * from collinfo ;select * from Course";
                DataSet dsdegree = d2.select_method_wo_parameter(strdegreerightquery, "Text");
                if (dsdegree.Tables[0].Rows.Count > 0)
                {
                    for (int c = 0; c < dsdegree.Tables[1].Rows.Count; c++)
                    {
                        string collegename = dsdegree.Tables[1].Rows[c]["collname"].ToString();
                        string collcode = dsdegree.Tables[1].Rows[c]["college_code"].ToString();
                        Collegenode.ChildNodes.Add(new TreeNode(collegename, collcode));
                        Collegenode.ChildNodes[c].SelectAction = TreeNodeSelectAction.None;
                        dsdegree.Tables[2].DefaultView.RowFilter = "college_code='" + collcode + "'";
                        DataView dvdegree = dsdegree.Tables[2].DefaultView;
                        for (int d = 0; d < dvdegree.Count; d++)
                        {
                            string coursename = dvdegree[d]["Course_Name"].ToString();
                            string courseid = dvdegree[d]["Course_Id"].ToString();
                            Collegenode.ChildNodes[c].ChildNodes.Add(new TreeNode(coursename, courseid));
                            Collegenode.ChildNodes[c].ChildNodes[d].SelectAction = TreeNodeSelectAction.None;
                            dsdegree.Tables[0].DefaultView.RowFilter = "Course_Id='" + courseid + "'";
                            DataView dvdepartment = dsdegree.Tables[0].DefaultView;
                            for (int de = 0; de < dvdepartment.Count; de++)
                            {
                                string departname = dvdepartment[de]["Dept_Name"].ToString();
                                string degreecode = dvdepartment[de]["Degree_Code"].ToString();
                                Collegenode.ChildNodes[c].ChildNodes[d].ChildNodes.Add(new TreeNode(departname, degreecode));
                                Collegenode.ChildNodes[c].ChildNodes[d].ChildNodes[de].SelectAction = TreeNodeSelectAction.None;
                            }
                        }
                    }
                }
                TVDegreeRight.Nodes.Add(Collegenode);
                TVDegreeRight.Attributes.Add("onclick", "OnCheckBoxCheckChanged(event)");
                bind_store();
                drp_edulevel_SelectedIndexChanged(sender, e);
                bindalternatesubject();
                loadOtherCOlleges(sender, e);
                loadstream();
                educationLevel();
                loadAppLedger();
                ddlMin.Items.Clear();
                for (int tmin = 0; tmin <= 59; tmin++)
                {
                    if (Convert.ToString(tmin).Length == 1)
                        ddlMin.Items.Insert(tmin, new ListItem(Convert.ToString("0" + tmin), Convert.ToString(tmin)));
                    else
                        ddlMin.Items.Insert(tmin, new ListItem(Convert.ToString(tmin), Convert.ToString(tmin)));
                }
                popstype();
                BindTc_grid();
                loadfromyear();
                PFNo();
                CheckDate();
                GridBind();
                

                // btnadditset_click(sender, e);
            }



        }
        catch (Exception ex)
        {
        }
        if (ddlcollege.Items.Count > 0)
        {
            collegecode = Convert.ToString(ddlcollege.SelectedValue);
        }
        else
        {
            collegecode = "13";
        }


    }

    public void bindmonth()
    {
        try
        {
            string type = string.Empty;
            string[] transmonth = { "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JUL", "AUG", "SEP", "OCT", "NOV", "DEC" };
            for (int i = 0; i < 12; i++)
            {
                cbl_monthtrans.Items.Add(new System.Web.UI.WebControls.ListItem(transmonth[i], Convert.ToString(i + 1)));
            }
        }
        catch (Exception ex)
        {
        }
    }
    public void binddegree()
    {
        try
        {
            ds.Clear();
            txtDegree.Text = "---Select---";
            string batchCode = string.Empty;
            chkDegree.Checked = false;
            cblDegree.Items.Clear();
            string collegeCode = Convert.ToString(ddlCollegeAcr.SelectedValue);
            if (!string.IsNullOrEmpty(collegeCode))
            {
                string selDegree = "SELECT DISTINCT c.course_id,c.course_name,c.Priority,CASE WHEN c.Priority IS NULL THEN c.Course_Id ELSE c.Priority END OrderBy FROM Degree dg,Course c,Department dt,DeptPrivilages dp,Registration r WHERE r.degree_code = dg.Degree_Code AND dp.degree_code = dg.Degree_Code AND dg.Course_Id = c.Course_Id AND dg.Dept_Code = dt.Dept_Code AND r.college_code = c.college_code AND r.college_code = dg.college_code AND dt.college_code = r.college_code AND c.college_code = dg.college_code AND r.CC='0' and r.DelFlag='0' and r.Exam_Flag<>'debar' AND r.college_code in('" + collegeCode + "')  ORDER BY CASE WHEN c.Priority IS NULL THEN c.Course_Id ELSE c.Priority END ";
                ds = d2.select_method_wo_parameter(selDegree, "Text");
            }
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                cblDegree.DataSource = ds;
                cblDegree.DataTextField = "course_name";
                cblDegree.DataValueField = "course_id";
                cblDegree.DataBind();
                checkBoxListselectOrDeselect(cblDegree, true);
                CallCheckboxListChange(chkDegree, cblDegree, txtDegree, "Course", "--Select--");
            }
        }
        catch (Exception ex)
        {

        }
    }
    public void bindCollegeACR()
    {
        try
        {

            string SelectQ = "select college_code,Coll_acronymn from collinfo";
            DataTable dtacr = dir.selectDataTable(SelectQ);
            if (dtacr.Rows.Count > 0)
            {
                ddlCollegeAcr.DataSource = dtacr;
                ddlCollegeAcr.DataTextField = "Coll_acronymn";
                ddlCollegeAcr.DataValueField = "college_code";
                ddlCollegeAcr.DataBind();
            }
        }
        catch
        {

        }
    }
    protected void ddlCollegeAcr_IndexChange(object sender, EventArgs e)
    {
        try
        {
            binddegree();
        }
        catch
        {

        }
    }
    protected void chkDegree_CheckedChanged(object sender, EventArgs e)
    {
        try
        {

            CallCheckboxChange(chkDegree, cblDegree, txtDegree, "Course", "--Select--");

        }
        catch (Exception ex)
        {
        }
    }

    protected void cblDegree_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {

            CallCheckboxListChange(chkDegree, cblDegree, txtDegree, "Course", "--Select--");

        }
        catch (Exception ex)
        {
        }
    }

    public void rdo_transsem_CheckedChanged(object sender, EventArgs e)
    {
        txt_monthtrans.Enabled = false;
        ddl_transyear.Enabled = false;
        cbl_monthtrans.ClearSelection();
    }

    public void rdo_transyear_CheckedChanged(object sender, EventArgs e)
    {
        txt_monthtrans.Enabled = false;
        ddl_transyear.Enabled = false;
        cbl_monthtrans.ClearSelection();
    }

    protected void rb_transterm_CheckedChanged(object sender, EventArgs e)
    {
        txt_monthtrans.Enabled = false;
        ddl_transyear.Enabled = false;
        cbl_monthtrans.ClearSelection();
    }

    public void rdo_transmoth_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            txt_monthtrans.Enabled = true;
            ddl_transyear.Enabled = true;
            cbl_monthtrans.ClearSelection();
        }
        catch (Exception ex)
        {
        }
    }

    public void cb_monthtrans_checkedchange(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxChange(cb_monthtrans, cbl_monthtrans, txt_monthtrans, "Month", "--Select--");
        }
        catch (Exception ex)
        {
        }
    }

    public void cbl_monthtrans_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxListChange(cb_monthtrans, cbl_monthtrans, txt_monthtrans, "Month", "--Select--");
        }
        catch (Exception ex)
        {
        }
    }

    private void CallCheckboxChange(CheckBox cb, CheckBoxList cbl, TextBox txt, string dispst, string deft)
    {
        try
        {
            int sel = 0;
            string name = string.Empty;
            txt.Text = deft;
            if (cb.Checked == true)
            {
                for (sel = 0; sel < cbl.Items.Count; sel++)
                {
                    cbl.Items[sel].Selected = true;
                    name = Convert.ToString(cbl.Items[sel].Text);
                }
                if (cbl.Items.Count == 1)
                {
                    txt.Text = "" + name + "";
                }
                else
                {
                    txt.Text = dispst + "(" + cbl.Items.Count + ")";
                }
            }
            else
            {
                for (sel = 0; sel < cbl.Items.Count; sel++)
                {
                    cbl.Items[sel].Selected = false;
                }
                txt.Text = deft;
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void CallCheckboxListChange(CheckBox cb, CheckBoxList cbl, TextBox txt, string dipst, string deft)
    {
        try
        {
            int sel = 0;
            int count = 0;
            string name = string.Empty;
            cb.Checked = false;
            for (sel = 0; sel < cbl.Items.Count; sel++)
            {
                if (cbl.Items[sel].Selected == true)
                {
                    count++;
                    name = Convert.ToString(cbl.Items[sel].Text);
                }
            }
            if (count > 0)
            {
                if (count == 1)
                {
                    txt.Text = "" + name + "";
                }
                else
                {
                    txt.Text = dipst + "(" + count + ")";
                }
                if (cbl.Items.Count == count)
                {
                    cb.Checked = true;
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void drpmaxexternalmark(object sender, EventArgs e)
    {
        try
        {
            //con.Open();
            //SqlDataReader dr_convert1;//
            ////  string h = "select * from COE_Master_Settings where settings = 'MaxExternalMark " + DropDownList1.Items[0].Text + "') ";
            //SqlCommand cmd_convert1 = new SqlCommand("select * from COE_Master_Settings where settings = 'MaxExternalMark " + DropDownList1.SelectedItem.Text + "' ", con);
            //dr_convert1 = cmd_convert1.ExecuteReader();
            if (DropDownList1.Items.Count > 0)
            {
                string getvald = dasri.GetFunctionv("select value from COE_Master_Settings where settings = 'MaxExternalMark " + DropDownList1.SelectedItem.Text + "'");
                if (getvald.Trim() != "")
                {
                    TextBox1.Text = getvald;
                }
            }
            //if (dr_convert1.HasRows == true)
            //{
            //    while (dr_convert1.Read())
            //    {
            //        TextBox1.Text =Convert.ToString(dr_convert1["value"]);
            //    }
            //}
            //con.Close();
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnsavepaydate_click(object sender, EventArgs e)
    {
        try
        {
            string sql = "if exists(select * from Master_Settings where settings='without penalty') update Master_Settings set value='" + txtpaydate1from.Text + "-" + txtpaydate1to.Text + "' where settings='without penalty' else insert into Master_Settings (settings,value) values ('without penalty','" + txtpaydate1from.Text + "-" + txtpaydate1to.Text + "')";
            int soqla = dasri.update_method_wo_parameter(sql, "text");
            sql = "if exists(select * from Master_Settings where settings='with penalty') update Master_Settings set value='" + txtpaydate2from.Text + "-" + txtpaydate2to.Text + "' where settings='with penalty' else insert into Master_Settings (settings,value) values ('with penalty','" + txtpaydate2from.Text + "-" + txtpaydate2to.Text + "')";
            soqla = dasri.update_method_wo_parameter(sql, "text");
            // ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Saved successfully')", true);
            imgAlert.Visible = true;
            lbl_alert.Text = "Saved successfully";
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnfin_save_Click(object sender, EventArgs e)
    {
        try
        {
            string insupdquery = string.Empty;
            int insupdval = 0;
            string sqlstr = string.Empty;
            string show_mnth_name = string.Empty;
            string single_page = string.Empty;
            string double_pages = string.Empty;
            string college_name = string.Empty;
            string city = string.Empty;
            string rcpt_time = string.Empty;
            string degree_acr = string.Empty;
            string batch_year = string.Empty;
            string semester = string.Empty;
            string regno = string.Empty;
            string father_name = string.Empty;
            string rollas_adm = string.Empty;
            string rcpt_valid = string.Empty;
            string allot = string.Empty;
            string fine = string.Empty;
            string balance = string.Empty;
            string semoryear = string.Empty;
            string prev_paid = string.Empty;
            string stu_copy = string.Empty;
            string off_copy = string.Empty;
            string for_collname = string.Empty;
            string narration = string.Empty;
            string author_sign = string.Empty;
            string author_name = string.Empty;
            string header_rcpt = string.Empty;
            string priority = string.Empty;
            string cur_sem_year = string.Empty;
            string get_monthly_fee = string.Empty;
            string due_only = string.Empty;
            string counterno = string.Empty;
            string countername = string.Empty;
            string preprint = "0";
            string cashier_sign = string.Empty;
            string cashier_name = string.Empty;
            double dup_fineamt = 0;
            string paymentgeneral = string.Empty;
            if (rbpay.SelectedValue == "1")
            {
                paymentgeneral = "1";
            }
            else
            {
                paymentgeneral = "0";
            }
            rcpt_valid = txtrcpt_valid.Text.ToString();
            if (chk_clg.Checked == true)
            {
                college_name = "1";
            }
            else
            {
                college_name = "0";
            }
            if (chk_onlydue.Checked == true)
            {
                due_only = "1";
            }
            else
            {
                due_only = "1";
            }
            if (chk_preprint.Checked == true)
            {
                preprint = "1";
            }
            else
            {
                preprint = "0";
            }
            show_mnth_name = (chk_shw_mnt_name.Checked == true) ? "1" : "0";
            counterno = (chk_counterno.Checked == true) ? "1" : "0";
            countername = (chk_countername.Checked == true) ? "1" : "0";
            city = (chk_city.Checked == true) ? "1" : "0";
            rcpt_time = (chk_time.Checked == true) ? "1" : "0";
            degree_acr = (chk_degree.Checked == true) ? "1" : "0";
            batch_year = (chk_year.Checked == true) ? "1" : "0";
            semester = (chk_hsem.Checked == true) ? "1" : "0";
            regno = (chk_regno.Checked == true) ? "1" : "0";
            father_name = (chk_fathername.Checked == true) ? "1" : "0";
            rollas_adm = (chk_setrollno.Checked == true) ? "1" : "0";
            if (rcpt_valid != "")
            {
                rcpt_valid = txtrcpt_valid.Text.ToString();
            }
            else
            {
                rcpt_valid = "0";
            }
            allot = (chk_allot.Checked == true) ? "1" : "0";
            fine = (chk_fine.Checked == true) ? "1" : "0";
            balance = (chk_bal.Checked == true) ? "1" : "0";
            semoryear = (chk_bsem.Checked == true) ? "1" : "0";
            single_page = (chk_singlepage.Checked == true) ? "1" : "0";
            //double_pages = (chk_doublepage.Checked == true) ? "1" : "0";
            prev_paid = (chk_prev_paid.Checked == true) ? "1" : "0";
            stu_copy = (chk_studcopy.Checked == true) ? "1" : "0";
            off_copy = (chk_officecopy.Checked == true) ? "1" : "0";
            for_collname = (chk_clgname.Checked == true) ? "1" : "0";
            narration = (chk_Narration.Checked == true) ? "1" : "0";
            author_sign = (chk_authorised_sign.Checked == true) ? "1" : "0";
            author_name = txtauthor_name.Text;
            header_rcpt = (Chk_header.Checked == true) ? "1" : "0";
            priority = (Chk_priority.Checked == true) ? "1" : "0";
            cur_sem_year = (Chk_cursem.Checked == true) ? "1" : "0";
            get_monthly_fee = (Chk_prevmonth.Checked == true) ? "1" : "0";
            cashier_sign = (chk_cash.Checked == true) ? "1" : "0";
            cashier_name = txt_cash.Text;
            if (chk_fine_allot.Checked == true)
            {
                if (txt_duplicate_Fine.Text.Trim().ToString() != "")
                {
                    dup_fineamt = Convert.ToDouble(txt_duplicate_Fine.Text.Trim().ToString());
                }
                else
                {
                    dup_fineamt = 0;
                }
            }
            else
            {
                dup_fineamt = 0;
            }
            //con.Close();
            //con.Open();
            //SqlDataAdapter da20 = new SqlDataAdapter("select * from rcptprint_settings where collegecode=" + Convert.ToString(ddlcollege.SelectedValue) + "", con);
            DataSet ds20 = dasri.select_method_wo_parameter("select * from rcptprint_settings where collegecode=" + Convert.ToString(ddlcollege.SelectedValue) + "", "text");
            //da20.Fill(ds20);
            if (ds20.Tables[0].Rows.Count > 0)
            {
                sqlstr = "update rcptprint_settings set show_month_name=" + show_mnth_name + ",college_name=" + college_name + ",city=" + city + " ,rcpt_time=" + rcpt_time + " ,degree_acr=" + degree_acr + " ,batch_year=" + batch_year + " ,semester=" + semester + " ,regno=" + regno + " ,father_name=" + father_name + " ,rollas_adm=" + rollas_adm + " ,rcpt_valid='" + rcpt_valid + "' ,allot=" + allot + " ,fine=" + fine + " ,balance=" + balance + " ,semoryear=" + semoryear + " ,prev_paid=" + prev_paid + " ,stu_copy=" + stu_copy + ",off_copy=" + off_copy + ",for_collname=" + for_collname + ",narration=" + narration + " ,author_sign=" + author_sign + ",author_name='" + author_name + "',header_rcpt=" + header_rcpt + ",priority=" + priority + ",cur_sem_year=" + cur_sem_year + ",get_monthly_fee=" + get_monthly_fee + ",dup_fine_amt=" + dup_fineamt + ", due_only=" + due_only + ",counter_no=" + counterno + ",counter_name=" + countername + ",preprint='" + preprint + "',cashier_sign=" + cashier_sign + ",cashier_name='" + cashier_name + "',single_page='" + single_page + "',pay_demandordirect='" + paymentgeneral + "' where  collegecode=" + Convert.ToString(ddlcollege.SelectedValue) + "";
                insupdval = dasri.update_method_wo_parameter(sqlstr, "Text");
                //SqlCommand cmd = new SqlCommand(sqlstr);
                //cmd.Connection = con;
                //cmd.ExecuteNonQuery();
            }
            else
            {
                //"create table rcptprint_settings(college_name bit,city bit,rcpt_time bit,degree_acr bit,batch_year bit,semester bit,regno bit,father_name bit,rollas_adm bit,rcpt_valid numeric(10),allot bit,fine bit,balance bit,semoryear bit,prev_paid bit,stu_copy bit,off_copy bit,for_collname bit,narration bit,author_sign bit,author_name nvarchar(100),header_rcpt bit,priority bit,cur_sem_year bit,get_monthly_fee bit)
                sqlstr = "insert into rcptprint_settings (show_month_name,collegecode,college_name,city ,rcpt_time ,degree_acr ,batch_year ,semester ,regno ,father_name ,rollas_adm ,rcpt_valid ,allot ,fine ,balance ,semoryear ,prev_paid ,stu_copy ,off_copy ,for_collname ,narration ,author_sign ,author_name,header_rcpt,priority,cur_sem_year,get_monthly_fee,dup_fine_amt,due_only,counter_no,counter_name,preprint,cashier_sign,cashier_name,single_page,pay_demandordirect)values (" + show_mnth_name + "," + Convert.ToString(ddlcollege.SelectedValue) + "," + college_name + "," + city + " ," + rcpt_time + " ," + degree_acr + " ," + batch_year + " ," + semester + " ," + regno + " ," + father_name + " ," + rollas_adm + " ,'" + rcpt_valid + "' ," + allot + " ," + fine + " ," + balance + " ," + semoryear + " ," + prev_paid + " ," + stu_copy + "," + off_copy + "," + for_collname + "," + narration + " ," + author_sign + ",'" + author_name + "'," + header_rcpt + "," + priority + "," + cur_sem_year + "," + get_monthly_fee + "," + dup_fineamt + "," + due_only + "," + counterno + "," + countername + ",'" + preprint + "'," + cashier_sign + ",'" + cashier_name + "','" + single_page + "','" + paymentgeneral + "')";
                insupdval = dasri.update_method_wo_parameter(sqlstr, "Text");
                //SqlCommand cmd = new SqlCommand(sqlstr);
                //cmd.Connection = con;
                //cmd.ExecuteNonQuery();
            }
            //newly added by mythili on 070612 start ------------
            // con1.Close();
            // con1.Open();
            string sqlOthers = "select * from advance_payment_settings where collegecode=" + Convert.ToString(ddlcollege.SelectedValue) + "";
            //SqlDataAdapter rss = new SqlDataAdapter(sqlOthers, con1);
            DataSet rs = dasri.select_method_wo_parameter(sqlOthers, "text");
            //  rss.Fill(rs);
            if (rs.Tables[0].Rows.Count > 0)
            {
                //con.Close();
                //con.Open();
                //(this, typeof(Page), UniqueID, "alert('Record Save sucessfully')", true);
                sqlstr = "truncate table advance_payment_settings";
                insupdval = dasri.update_method_wo_parameter(sqlstr, "Text");
                //SqlCommand cmdd = new SqlCommand(sqlstr);
                //cmdd.Connection = con;
                //cmdd.ExecuteNonQuery();
            }
            for (int i = 0; i < ddlfeetype.Items.Count; i++)
            {
                if (ddlfeetype.Items[i].Selected == true)
                {
                    //con.Close();
                    //con.Open();
                    sqlstr = "insert into advance_payment_settings (collegecode,fee_code,adv_date,mode) values(" + Convert.ToString(ddlcollege.SelectedValue) + ",'" + ddlfeetype.Items[i].Value.ToString() + "','" + txt_advdate.Text + "','Monthwise')";
                    insupdval = dasri.update_method_wo_parameter(sqlstr, "Text");
                    //SqlCommand cmdd1 = new SqlCommand(sqlstr);
                    //cmdd1.Connection = con;
                    //cmdd1.ExecuteNonQuery();
                }
            }
            for (int i = 0; i < ddlfeetype1.Items.Count; i++)
            {
                if (ddlfeetype1.Items[i].Selected == true)
                {
                    //con.Close();
                    //con.Open();
                    sqlstr = "insert into advance_payment_settings (collegecode,fee_code,adv_date,mode) values(" + Convert.ToString(ddlcollege.SelectedValue) + ",'" + ddlfeetype1.Items[i].Value.ToString() + "','" + txt_advdate.Text + "','Regular')";
                    insupdval = dasri.update_method_wo_parameter(sqlstr, "Text");
                    //SqlCommand cmdd2 = new SqlCommand(sqlstr);
                    //cmdd2.Connection = con;
                    //cmdd2.ExecuteNonQuery();
                }
            }
            //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Saved Successfully')", true);
            imgAlert.Visible = true;
            lbl_alert.Text = "Saved successfully";
            //end-----------------------
        }
        catch (Exception ex)
        {
        }
    }

    public void load_feetype()
    {
        try
        {
            //SqlDataAdapter cmdbat;
            //cmdbat = new SqlDataAdapter("select distinct fee_code,fee_type,priority from fee_info where (fee_type not like 'Income & Expenditure' and fee_type not like 'Misc' and fee_type not like 'Cash' and fee_type not like 'Fine') and fee_type not in(select distinct bankname from bank_master1) and header_id in(select acctheader.header_id from account_info,acctheader where acctheader.acct_id=account_info.acct_id and  finyear_start='" + fin_startdate + "' and finyear_end='" + fin_enddate + "') order by fee_code ", mysql);
            DataSet dsfees = dasri.select_method_wo_parameter("select distinct fee_code,fee_type,priority from fee_info where (fee_type not like 'Income & Expenditure' and fee_type not like 'Misc' and fee_type not like 'Cash' and fee_type not like 'Fine') and fee_type not in(select distinct bankname from bank_master1) and header_id in(select acctheader.header_id from account_info,acctheader where acctheader.acct_id=account_info.acct_id and  finyear_start='" + fin_startdate + "' and finyear_end='" + fin_enddate + "') order by fee_code ", "text");
            //mysql.Close();
            //mysql.Open();
            DataSet dr = dasri.select_method_wo_parameter("select distinct fee_code,fee_type,priority from fee_info where (fee_type not like 'Income & Expenditure' and fee_type not like 'Misc' and fee_type not like 'Cash' and fee_type not like 'Fine') and fee_type not in(select distinct bankname from bank_master1) and header_id in(select acctheader.header_id from account_info,acctheader where acctheader.acct_id=account_info.acct_id and  finyear_start='" + fin_startdate + "' and finyear_end='" + fin_enddate + "') order by fee_code ", "text");
            //cmdbat.Fill(dr);
            if (dsfees.Tables[0].Rows.Count > 0)
            {
                ddlfeetype.DataSource = dr;
                ddlfeetype.DataValueField = "fee_code";
                ddlfeetype.DataTextField = "fee_type";
                ddlfeetype.DataBind();
                ddlfeetype1.DataSource = dr;
                ddlfeetype1.DataValueField = "fee_code";
                ddlfeetype1.DataTextField = "fee_type";
                ddlfeetype1.DataBind();
            }
            //  mysql.Close();
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnsave_Click(object sender, EventArgs e)
    {
        try
        {
            //  DAccess2 daa = new DAccess2();
            if (ddlacefromyear.Items.Count > 0)
            {
                if (ddlacefromyear.SelectedItem.Text != "" && ddlacetoyear.SelectedItem.Text != "")
                {
                    int fromyear = Convert.ToInt32(ddlacefromyear.SelectedItem.ToString());
                    int toyear = Convert.ToInt32(ddlacetoyear.SelectedItem.ToString());
                    if (fromyear > toyear)
                    {
                        lblfromyearerror.Visible = true;
                        lblfromyearerror.Text = "To year must be greater then from year";
                        return;
                    }
                }
            }
            lblfromyearerror.Visible = false;
            lblfromyearerror.Text = string.Empty;
            // ********************** Added by jairam ******************* 13-09-2014
            string attendvalue = string.Empty;
            if (txt_staffleavetype.Text != "---Select---")
            {
                for (int leave = 0; leave < cblstaffleavetype.Items.Count; leave++)
                {
                    if (cblstaffleavetype.Items[leave].Selected == true)
                    {
                        string value = cblstaffleavetype.Items[leave].Text;
                        if (attendvalue == "")
                        {
                            attendvalue = value;
                        }
                        else
                        {
                            attendvalue = attendvalue + "," + value;
                        }
                    }
                }
            }
            if (attendvalue == "")
            {
                attendvalue = "Empty";
            }
            if (rdb_grp.Checked == true)
            {
                if (cblcamuserlock.Items.Count > 0)
                {
                    for (int k = 0; k < cblcamuserlock.Items.Count; k++)
                    {
                        string usercode = cblcamuserlock.Items[k].Value;
                        if (cblcamuserlock.Items[k].Selected == true)
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='CAM Calculation Lock' and Usercode ='" + usercode + "' )update Master_Settings set value='1' where settings='CAM Calculation Lock' and Usercode ='" + usercode + "' else insert into Master_Settings (Usercode,settings,value) values('" + usercode + "','CAM Calculation Lock','1')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        else
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='CAM Calculation Lock' and Usercode='" + usercode + "' )update Master_Settings set value='0' where settings='CAM Calculation Lock' and Usercode= '" + usercode + "' else insert into Master_Settings (Usercode,settings,value) values('" + usercode + "','CAM Calculation Lock','0')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                    }
                }
            }
            //***************************** End ***********************************
            //#region Added By Kowshika on Dec 12 2017

            if (div13Invigilation.Visible == true)
            {
                string allowedsession = txt_allowed.Text;
                string fromDate = txt_from.Text;
                string toDate = txt_to.Text;
                string CycleTestNo = string.Empty;
                if (cbl_cycletest.Items.Count > 0)
                    CycleTestNo = Convert.ToString(getCblSelectedValue(cbl_cycletest));

                string datesession = allowedsession + "$" + fromDate + "$" + toDate + "$" + CycleTestNo;
                if (!string.IsNullOrEmpty(allowedsession) && !string.IsNullOrEmpty(fromDate) && !string.IsNullOrEmpty(toDate) && !string.IsNullOrEmpty(CycleTestNo))
                {
                    string invigilationQuery = "if exists(select * from textvaltable where TextCriteria='invig' " + userorgropcode + " )update textvaltable set TextVal ='" + datesession + "' where TextCriteria='invig' " + userorgropcode + " else insert into textvaltable (TextCriteria,TextVal) values('invig','" + datesession + "')";
                    int copy12 = dasri.update_method_wo_parameter(invigilationQuery, "text");

                }


            }
            //#endregion Added By Kowshika on Dec 12 2017

            for (int i = 0; i < ddluser.Items.Count; i++)
            {
                if (ddluser.Items[i].Selected == true)
                {
                    selected_userid = Convert.ToString(ddluser.Items[i].Text);
                    selected_usercode = Convert.ToInt16(ddluser.Items[i].Value);
                    //bindMulTerm(Convert.ToString(selected_usercode));
                    if (rdb_ind.Checked == true)
                    {
                        userorgropcode = " and usercode='" + selected_usercode.ToString() + "'";
                        user_gropcode = " and user_code='" + selected_usercode.ToString() + "'";
                        usergroup = "  usercode='" + selected_usercode.ToString() + "'";
                        strusergruop = "usercode";
                        struser_gruop = "user_code";
                    }
                    else if (rdb_grp.Checked == true)
                    {
                        userorgropcode = " and group_code='" + selected_usercode.ToString() + "'";
                        user_gropcode = " and group_code='" + selected_usercode.ToString() + "'";
                        usergroup = "  group_code='" + selected_usercode.ToString() + "'";
                        strusergruop = "group_code";
                        struser_gruop = "group_code";
                    }
                    user_code = selected_usercode.ToString();
                    //con.Close();
                    //con.Open();
                    int result = 0;
                    string sqlstr = string.Empty;
                    //-----------------Added By M.SakthiPriya 05/02/2015 //Mistake Modified By Srinath
                    if (chckcopy.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Copy Attendance' " + userorgropcode + " )update Master_Settings set value='1' where settings='Copy Attendance' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Copy Attendance','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Copy Attendance' " + userorgropcode + " )update Master_Settings set value='0' where settings='Copy Attendance' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Copy Attendance','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    if (cbIndualAttendance.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Individual Student Attendace Lock' " + userorgropcode + " )update Master_Settings set value='1' where settings='Individual Student Attendace Lock' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Individual Student Attendace Lock','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Individual Student Attendace Lock' " + userorgropcode + " )update Master_Settings set value='0' where settings='Individual Student Attendace Lock' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Individual Student Attendace Lock','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    if (cbprintedit.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Print Edit Option' " + userorgropcode + " )update Master_Settings set value='1' where settings='Print Edit Option' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Print Edit Option','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Print Edit Option' " + userorgropcode + " )update Master_Settings set value='0' where settings='Print Edit Option' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Print Edit Option','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    //added by sudhagar 14-06-2016 fine settings 
                    #region fine setting
                    if (txtuser.Text.Trim() != "--Select--")
                    {
                        if (Cb_hostelitem.Checked == true)
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Hostel Item Rights' " + userorgropcode + " )update Master_Settings set value='1' where settings='Hostel Item Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Hostel Item Rights','1')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        else
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Hostel Item Rights' " + userorgropcode + " )update Master_Settings set value='0' where settings='Hostel Item Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Hostel Item Rights','0')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        if (Cb_Allowadditional.Checked == true)
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Additional Item Rights' " + userorgropcode + " )update Master_Settings set value='1' where settings='Additional Item Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Additional Item Rights','1')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        else
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Additional Item Rights' " + userorgropcode + " )update Master_Settings set value='0' where settings='Additional Item Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Additional Item Rights','0')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        if (cballowretunitem.Checked == true)
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Return Item Rights' " + userorgropcode + " )update Master_Settings set value='1' where settings='Return Item Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Return Item Rights','1')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        else
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Return Item Rights' " + userorgropcode + " )update Master_Settings set value='0' where settings='Return Item Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Return Item Rights','0')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        string letter1 = string.Empty;
                        for (int k = 0; k < cbletter.Items.Count; k++)
                        {
                            if (cbletter.Items[k].Selected == true)
                            {
                                if (letter1 == "")
                                {
                                    letter1 = "" + cbletter.Items[k].Value.ToString() + "";
                                }
                                else
                                {
                                    letter1 = letter1 + "," + cbletter.Items[k].Value.ToString() + "";
                                }
                            }
                        }
                        if (txtuser.Text.Trim() != "--Select--")
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Letter Tap Rights' " + userorgropcode + " )update Master_Settings set value='" + letter1 + "' where settings='Letter Tap Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Letter Tap Rights','" + letter1 + "')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        //zzz 2.1.2016
                        if (txtuser.Text.Trim() != "--Select--")
                        {
                            if (ddl_tapal_header.Items.Count > 0)
                            {
                                string hd = Convert.ToString(ddl_tapal_header.SelectedItem.Value);
                                string led = Convert.ToString(ddl_tapal_ledger.SelectedItem.Value);
                                string con = hd + "," + led;
                                string savecopy = "if exists(select * from Master_Settings where settings='Letter HeaderLedger Rights' " + userorgropcode + " )update Master_Settings set value='" + con + "' where settings='Letter HeaderLedger Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Letter HeaderLedger Rights','" + con + "')";
                                int copy = dasri.update_method_wo_parameter(savecopy, "text");
                            }
                        }
                        //gate pass
                        string gatepass = string.Empty;
                        for (int k = 0; k < cbl_gatepass.Items.Count; k++)
                        {
                            if (cbl_gatepass.Items[k].Selected == true)
                            {
                                if (gatepass == "")
                                {
                                    gatepass = "" + cbl_gatepass.Items[k].Value.ToString() + "";
                                }
                                else
                                {
                                    gatepass = gatepass + "," + cbl_gatepass.Items[k].Value.ToString() + "";
                                }
                            }
                        }
                        if (txtuser.Text.Trim() != "--Select--")
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Gate Pass Tab Rights' " + userorgropcode + " )update Master_Settings set value='" + gatepass + "' where settings='Gate Pass Tab Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Gate Pass Tab Rights','" + gatepass + "')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        //................................Gatepass Hostler DaysScholar....................... zzz 11jan2016
                        string gatepassval = string.Empty;
                        if (cb_gatepass_hostler.Checked == true && cb_gatepass_DayScholar.Checked == true)
                        {
                            gatepassval = "1,2";
                        }
                        else if (cb_gatepass_hostler.Checked == false && cb_gatepass_DayScholar.Checked == true)
                        {
                            gatepassval = "2";
                        }
                        else if (cb_gatepass_hostler.Checked == true && cb_gatepass_DayScholar.Checked == false)
                        {
                            gatepassval = "1";
                        }
                        string query1 = "if exists(select * from Master_Settings where settings='Hostler DayScholar Rights' " + userorgropcode + " )update Master_Settings set value='" + gatepassval + "' where settings='Hostler DayScholar Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Hostler DayScholar Rights','" + gatepassval + "')";
                        int copy2 = dasri.update_method_wo_parameter(query1, "text");
                        //sms rights
                        string sms_val1 = string.Empty;
                        string sms_val2 = string.Empty;
                        string sms_val3 = string.Empty;
                        string sms_val4 = string.Empty;
                        string sms_value = string.Empty;
                        string reqtypevalue = string.Empty;
                        reqtypevalue = Convert.ToString(ddl_requesttype.SelectedItem.Value);
                        if (cb_request.Checked == true)
                        {
                            sms_val1 = "1";
                            sms_value = sms_val1;
                        }
                        if (cb_approval.Checked == true)
                        {
                            sms_val2 = "2";
                            if (sms_value == "")
                            {
                                sms_value = sms_val2;
                            }
                            else
                            {
                                sms_value = sms_value + "," + sms_val2;
                            }
                        }
                        if (cb_exit.Checked == true)
                        {
                            sms_val3 = "3";
                            if (sms_value == "")
                            {
                                sms_value = sms_val3;
                            }
                            else
                            {
                                sms_value = sms_value + "," + sms_val3;
                            }
                        }
                        if (cb_reject.Checked == true)
                        {
                            sms_val4 = "4";
                            if (sms_value == "")
                            {
                                sms_value = sms_val4;
                            }
                            else
                            {
                                sms_value = sms_value + "," + sms_val4;
                            }
                        }
                        if (sms_value == string.Empty)
                            sms_value = "0";
                        if (sms_value != "")
                        {
                            sms_value = sms_value + "-" + reqtypevalue;
                            string query = "if exists(select * from Master_Settings where settings='SMS Rights' " + userorgropcode + " )update Master_Settings set value='" + sms_value + "' where settings='SMS Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'SMS Rights','" + sms_value + "')";
                            int copy1 = dasri.update_method_wo_parameter(query, "text");
                        }
                        //send sms rights
                        string mob_val1 = string.Empty;
                        string mob_val2 = string.Empty;
                        string mob_val3 = string.Empty;
                        string mob_value = string.Empty;
                        if (cb_mother.Checked == true)
                        {
                            mob_val1 = "1";
                        }
                        if (cb_father.Checked == true)
                        {
                            mob_val2 = "2";
                        }
                        if (cb_student.Checked == true)
                        {
                            mob_val3 = "3";
                        }
                        if ((mob_val1 != "" && mob_val2 == "" && mob_val3 == "") || (mob_val2 != "" && mob_val3 == "" && mob_val1 == "") || (mob_val3 != "" && mob_val2 == "" && mob_val1 == ""))
                        {
                            if (mob_val1 != "")
                            {
                                mob_value = mob_val1;
                            }
                            else if (mob_val2 != "")
                            {
                                mob_value = mob_val2;
                            }
                            else if (mob_val3 != "")
                            {
                                mob_value = mob_val3;
                            }
                        }
                        else if (mob_val1 != "" && mob_val2 != "" && mob_val3 != "")
                        {
                            mob_value = mob_val1 + "," + mob_val2 + "," + mob_val3;
                        }
                        else if (mob_val1 != "" && mob_val2 != "")
                        {
                            mob_value = mob_val1 + "," + mob_val2;
                        }
                        else if (mob_val1 != "" && mob_val3 != "")
                        {
                            mob_value = mob_val1 + "," + mob_val3;
                        }
                        else if (mob_val2 != "" && mob_val3 != "")
                        {
                            mob_value = mob_val2 + "," + mob_val3;
                        }
                        string query2 = "if exists(select * from Master_Settings where settings='SMS Mobile Rights' " + userorgropcode + " )update Master_Settings set value='" + mob_value + "' where settings='SMS Mobile Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'SMS Mobile Rights','" + mob_value + "')";
                        int copyy = dasri.update_method_wo_parameter(query2, "text");
                        //reuqest tab rights
                        string request = string.Empty;
                        for (int k = 0; k < cbl_request.Items.Count; k++)
                        {
                            if (cbl_request.Items[k].Selected == true)
                            {
                                if (request == "")
                                {
                                    request = "" + cbl_request.Items[k].Value.ToString() + "";
                                }
                                else
                                {
                                    request = request + "," + cbl_request.Items[k].Value.ToString() + "";
                                }
                            }
                        }
                        if (txtuser.Text.Trim() != "--Select--")
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Request Tap Rights' " + userorgropcode + " )update Master_Settings set value='" + request + "' where settings='Request Tap Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Request Tap Rights','" + request + "')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        //................................Request - Gatepass................ zzz 04feb2016
                        string gatestaff_dept = string.Empty;
                        if (rdb_gatepass_staff.Checked == true)
                        {
                            gatestaff_dept = "1";
                        }
                        else if (rdb_gatepass_dept.Checked == true)
                        {
                            gatestaff_dept = "2";
                        }
                        if (gatestaff_dept != "")
                        {
                            query1 = "if exists(select * from Master_Settings where settings='Request Gatepass Rights' " + userorgropcode + " )update Master_Settings set value='" + gatestaff_dept + "' where settings='Request Gatepass Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Request Gatepass Rights','" + gatestaff_dept + "')";
                            copy2 = dasri.update_method_wo_parameter(query1, "text");
                        }
                        //staff permission count
                        if (txt_staff_per_count.Text != "")
                        {
                            query1 = "if exists(select * from Master_Settings where settings='Gatepass Staff Permission' " + userorgropcode + " )update Master_Settings set value='" + txt_staff_per_count.Text + "' where settings='Gatepass Staff Permission' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Gatepass Staff Permission','" + txt_staff_per_count.Text + "')";
                            copy2 = dasri.update_method_wo_parameter(query1, "text");
                        }
                        //16.03.17 barath gate pass with request without request
                        string gaterequesttype = "";
                        if (rdb_withreq.Checked == true)
                        {
                            gaterequesttype = "0";
                        }
                        else if (rdb_withoutreq.Checked == true)
                        {
                            gaterequesttype = "1";
                        }
                        if (gaterequesttype != "")
                        {
                            query1 = "if exists(select * from Master_Settings where settings='Gatepass Request Type' " + userorgropcode + " )update Master_Settings set value='" + gaterequesttype + "' where settings='Gatepass Request Type' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Gatepass Request Type','" + gaterequesttype + "')";
                            copy2 = dasri.update_method_wo_parameter(query1, "text");
                        }

                        //leave approval permission
                        string leavepermission = string.Empty;
                        if (rdo_leaveindiv.Checked == true)
                        {
                            leavepermission = "1";
                        }
                        else if (rdo_leavedirect.Checked == true)
                        {
                            leavepermission = "2";
                        }
                        else if (rdo_leavewithout.Checked == true)
                        {
                            leavepermission = "3";
                        }
                        if (leavepermission != "")
                        {
                            query1 = "if exists(select * from Master_Settings where settings='Leave Approval Permission' " + userorgropcode + " )update Master_Settings set value='" + leavepermission + "' where settings='Leave Approval Permission' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Leave Approval Permission','" + leavepermission + "')";
                            copy2 = dasri.update_method_wo_parameter(query1, "text");
                        }
                        string leavedeloption = string.Empty;//delsi--Leave Delete Permission Set--
                        if (rdb_delwoHierarchy.Checked == true)
                        {
                            leavedeloption = "1";
                        }
                        else if (rdb_delwHierarchy.Checked == true)
                        {
                            leavedeloption = "2";
                        }
                        if (leavedeloption != "")
                        {
                            query1 = "if exists(select * from Master_Settings where settings='Leave Delete Permission' " + userorgropcode + " )update Master_Settings set value='" + leavedeloption + "' where settings='Leave Delete Permission' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Leave Delete Permission','" + leavedeloption + "')";
                            copy2 = dasri.update_method_wo_parameter(query1, "text");
                        
                        }
                        //request  hierarchy
                        string hierarchy = string.Empty;
                        for (int k = 0; k < cb_reqHierarchy.Items.Count; k++)
                        {
                            if (cb_reqHierarchy.Items[k].Selected == true)
                            {
                                if (hierarchy == "")
                                {
                                    hierarchy = "" + cb_reqHierarchy.Items[k].Value.ToString() + "";
                                }
                                else
                                {
                                    hierarchy = hierarchy + "," + cb_reqHierarchy.Items[k].Value.ToString() + "";
                                }
                            }
                        }
                        if (txtuser.Text.Trim() != "--Select--")
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Request Hierarchy Rights' " + userorgropcode + " )update Master_Settings set value='" + hierarchy + "' where settings='Request Hierarchy Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Request Hierarchy Rights','" + hierarchy + "')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        //service plan
                        if (rdb_serviceplan.Checked == true)
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Service Item Rights' " + userorgropcode + " )update Master_Settings set value='1' where settings='Service Item Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Service Item Rights','1')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        else if (rdb_serviceallitem.Checked == true)
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Service Item Rights' " + userorgropcode + " )update Master_Settings set value='0' where settings='Service Item Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Service Item Rights','0')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        //daily consumption
                        if (cb_reconsumption.Checked == true)
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Daily Consumption Allow Reconsumption' " + userorgropcode + " )update Master_Settings set value='1' where settings='Daily Consumption Allow Reconsumption' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Daily Consumption Allow Reconsumption','1')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        else
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Daily Consumption Allow Reconsumption' " + userorgropcode + " )update Master_Settings set value='0' where settings='Daily Consumption Allow Reconsumption' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Daily Consumption Allow Reconsumption','0')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        //mess rights
                        string messmasterfk = string.Empty;
                        for (int k = 0; k < cbl_hos.Items.Count; k++)
                        {
                            if (cbl_hos.Items[k].Selected == true)
                            {
                                if (messmasterfk == "")
                                {
                                    messmasterfk = "" + cbl_hos.Items[k].Value.ToString() + "";
                                }
                                else
                                {
                                    messmasterfk = messmasterfk + "," + cbl_hos.Items[k].Value.ToString() + "";
                                }
                            }
                        }
                        if (txt_messname.Text.Trim() != "--Select--")
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Mess Rights' " + userorgropcode + " )update Master_Settings set value='" + messmasterfk + "' where settings='Mess Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Mess Rights','" + messmasterfk + "')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        //30.06.17
                        if (cb_messaffectedfinance.Checked)
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Mess Bill Include in Finance' " + userorgropcode + " )update Master_Settings set value='1' where settings='Mess Bill Include in Finance' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Mess Bill Include in Finance','1')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        else
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Mess Bill Include in Finance' " + userorgropcode + " )update Master_Settings set value='1' where settings='Mess Bill Include in Finance' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Mess Bill Include in Finance','0')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }

                        //Store rights 18.07.16
                        string storemasterpk = string.Empty;
                        for (int k = 0; k < cbl_store.Items.Count; k++)
                        {
                            if (cbl_store.Items[k].Selected == true)
                            {
                                if (storemasterpk == "")
                                {
                                    storemasterpk = "" + cbl_store.Items[k].Value.ToString() + "";
                                }
                                else
                                {
                                    storemasterpk = storemasterpk + "," + cbl_store.Items[k].Value.ToString() + "";
                                }
                            }
                        }
                        if (txt_Store.Text.Trim() != "--Select--")
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Store Rights' " + userorgropcode + " )update Master_Settings set value='" + storemasterpk + "' where settings='Store Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Store Rights','" + storemasterpk + "')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        //alternate subject added by sudhagar 29.12.2016
                        storemasterpk = string.Empty;
                        for (int sub = 0; sub < cblaltsub.Items.Count; sub++)
                        {
                            if (cblaltsub.Items[sub].Selected)
                            {
                                if (storemasterpk == "")
                                    storemasterpk = "" + cblaltsub.Items[sub].Value.ToString() + "";
                                else
                                    storemasterpk = storemasterpk + "," + cblaltsub.Items[sub].Value.ToString() + "";
                            }
                        }
                        string savesub = "if exists(select * from Master_Settings where settings='AlternateSubjectRights' " + userorgropcode + " )update Master_Settings set value='" + storemasterpk + "' where settings='AlternateSubjectRights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'AlternateSubjectRights','" + storemasterpk + "')";
                        int scopy = dasri.update_method_wo_parameter(savesub, "text");
                        //hrs code setting
                        string codesetting = string.Empty;
                        for (int k = 0; k < cb_hrscodesetting.Items.Count; k++)
                        {
                            if (cb_hrscodesetting.Items[k].Selected == true)
                            {
                                if (codesetting == "")
                                {
                                    codesetting = "" + cb_hrscodesetting.Items[k].Value.ToString() + "";
                                }
                                else
                                {
                                    codesetting = codesetting + "," + cb_hrscodesetting.Items[k].Value.ToString() + "";
                                }
                            }
                        }
                        string savecopyNew = string.Empty;
                        if (codesetting.Trim() != "")
                        {
                            savecopyNew = "if exists(select * from Master_Settings where settings='CodeSetting Rights' " + userorgropcode + " )update Master_Settings set value='" + codesetting + "' where settings='CodeSetting Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'CodeSetting Rights','" + codesetting + "')";
                        }
                        else
                        {
                            savecopyNew = "if exists(select * from Master_Settings where settings='CodeSetting Rights' " + userorgropcode + " )update Master_Settings set value='" + codesetting + "' where settings='CodeSetting Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'CodeSetting Rights','" + codesetting + "')";
                        }
                        int cpynew = dasri.update_method_wo_parameter(savecopyNew, "text");
                        //smtabrights 
                        string smrights = string.Empty;
                        for (int k = 0; k < smtabrights.Items.Count; k++)
                        {
                            if (smtabrights.Items[k].Selected == true)
                            {
                                if (smrights == "")
                                {
                                    smrights = "" + smtabrights.Items[k].Value.ToString() + "";
                                }
                                else
                                {
                                    smrights = smrights + "," + smtabrights.Items[k].Value.ToString() + "";
                                }
                            }
                        }
                        if (smrights.Trim() != "")
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='SM Tab Rights' " + userorgropcode + " )update Master_Settings set value='" + smrights + "' where settings='SM Tab Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'SM Tab Rights','" + smrights + "')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        //Tc formate rights barath 22.06.17
                        //string tcrights = string.Empty;
                        //for (int k = 0; k < Cbl_tcformate.Items.Count; k++)
                        //{
                        //    if (Cbl_tcformate.Items[k].Selected == true)
                        //    {
                        //        if (tcrights == "")
                        //        {
                        //            tcrights = "" + Cbl_tcformate.Items[k].Value.ToString() + "";
                        //        }
                        //        else
                        //        {
                        //            tcrights = tcrights + "," + Cbl_tcformate.Items[k].Value.ToString() + "";
                        //        }
                        //    }
                        //if (!string.IsNullOrEmpty(formattype))
                        //{
                        //    if (tcrights == "")
                        //    {
                        //        tcrights = "" + formattype + "";
                        //    }
                        //    else
                        //    {
                        //        tcrights = tcrights + "," + formattype + "";
                        //    }
                        //}
                        //} //if (tcrights.Trim() != "")
                        //{
                        //    string savecopy = "if exists(select * from Master_Settings where settings='TC Format Rights' " + userorgropcode + " )update Master_Settings set value='" + tcrights + "' where settings='TC Format Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'TC Format Rights','" + tcrights + "')";
                        //    int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        //}

                        //Tc formate rights barath 12.07.17
                        //foreach (GridViewRow gridrow in certificateformat_grid.Rows)
                        //{
                        //    string formattype = Convert.ToString((gridrow.FindControl("ddlFormattype") as DropDownList).SelectedValue);
                        //    string Certificate_ID = Convert.ToString((gridrow.FindControl("lbl_certificateId") as Label).Text);
                        //    string certificate_Name = Convert.ToString((gridrow.FindControl("lbl_certificatename") as Label).Text);
                        //    string update = string.Empty;
                        //    //string update = "if exists(select Certificate_ID from CertificateNameDetail where Collegecode='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "' and Certificate_ID='" + Certificate_ID + "' " + userorgropcode + ")update CertificateNameDetail set CertifcateFormat='" + formattype + "'," + usergroup + " where Collegecode='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "' and Certificate_ID='" + Certificate_ID + "' " + userorgropcode + " ";

                        //    update = "if exists (select * from Master_Settings where settings='CertificateFormatSetting' " + userorgropcode + ") update Master_settings set value='" + Certificate_ID + "$" + formattype + "' where settings='CertificateFormatSetting' " + userorgropcode + "  else insert into Master_settings (" + strusergruop + ",settings,value) values ('" + selected_usercode + "','CertificateFormatSetting','" + Certificate_ID + "$" + formattype + "')";  //modified by prabha 

                        //    int copy = dasri.update_method_wo_parameter(update, "text");
                        //}
                        ////25.06.16 barath
                        if (rdo_sailing.Checked == true)
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Consumption Rpu' " + userorgropcode + " )update Master_Settings set value='1' where settings='Consumption Rpu' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Consumption Rpu','1')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        else
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Consumption Rpu' " + userorgropcode + " )update Master_Settings set value='0' where settings='Consumption Rpu' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Consumption Rpu','0')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        //hostel sms
                        //25.01.17
                        if (cb_hostelsms.Checked == true)
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Hostel Admission sms' " + userorgropcode + " )update Master_Settings set value='1' where settings='Hostel Admission sms' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Hostel Admission sms','1')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        else
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Hostel Admission sms' " + userorgropcode + " )update Master_Settings set value='0' where settings='Hostel Admission sms' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Hostel Admission sms','0')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        if (cb_hostelvacatedsms.Checked == true)
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Hostel Vacated sms' " + userorgropcode + " )update Master_Settings set value='1' where settings='Hostel Vacated sms' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Hostel Vacated sms','1')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        else
                        {
                            string savecopy = "if exists(select * from Master_Settings where settings='Hostel Admission sms' " + userorgropcode + " )update Master_Settings set value='0' where settings='Hostel Admission sms' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Hostel Admission sms','0')";
                            int copy = dasri.update_method_wo_parameter(savecopy, "text");
                        }
                        //barath 15.03.17 Excel and Pdf Print Settings
                        string printrights = string.Empty;
                        for (int k = 0; k < cbl_excelpdf.Items.Count; k++)
                        {
                            if (cbl_excelpdf.Items[k].Selected == true)
                            {
                                if (printrights == "")
                                {
                                    printrights = "" + cbl_excelpdf.Items[k].Value.ToString() + "";
                                }
                                else
                                {
                                    printrights = printrights + "," + cbl_excelpdf.Items[k].Value.ToString() + "";
                                }
                            }
                        }
                        if (printrights.Trim() == "")
                            printrights = "0";

                        string printset = "if exists(select * from Master_Settings where settings='Excel and Pdf Print Settings' " + userorgropcode + " )update Master_Settings set value='" + printrights + "' where settings='Excel and Pdf Print Settings' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Excel and Pdf Print Settings','" + printrights + "')";
                        int print = dasri.update_method_wo_parameter(printset, "Text");



                        //challan no rights
                        if (chkreciept.Checked == true && chkchallan.Checked == false)
                        {
                            string savereptchal = "if exists(select * from Master_Settings where settings='Reciept/Challan No Rights' " + userorgropcode + " )update Master_Settings set value='1' where settings='Reciept/Challan No Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Reciept/Challan No Rights','1')";
                            int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                        }
                        if (chkchallan.Checked == true && chkreciept.Checked == false)
                        {
                            string savereptchal = "if exists(select * from Master_Settings where settings='Reciept/Challan No Rights' " + userorgropcode + " )update Master_Settings set value='2' where settings='Reciept/Challan No Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Reciept/Challan No Rights','2')";
                            int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                        }
                        if (chkchallan.Checked == true && chkreciept.Checked == true)
                        {
                            string savereptchal = "if exists(select * from Master_Settings where settings='Reciept/Challan No Rights' " + userorgropcode + " )update Master_Settings set value='3' where settings='Reciept/Challan No Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Reciept/Challan No Rights','3')";
                            int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                        }
                        if (chkchallan.Checked == false && chkreciept.Checked == false)
                        {
                            string savereptchal = "if exists(select * from Master_Settings where settings='Reciept/Challan No Rights' " + userorgropcode + " )update Master_Settings set value='0' where settings='Reciept/Challan No Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Reciept/Challan No Rights','0')";
                            int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                        }
                        //payment rights
                        ///////payment rights
                        if (chkpety.Checked == true && chkbank.Checked == false)
                        {
                            string savereptchal = "if exists(select * from Master_Settings where settings='Payment Rights' " + userorgropcode + " )update Master_Settings set value='1' where settings='Payment Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Payment Rights','1')";
                            int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                        }
                        if (chkbank.Checked == true && chkpety.Checked == false)
                        {
                            string savereptchal = "if exists(select * from Master_Settings where settings='Payment Rights' " + userorgropcode + " )update Master_Settings set value='2' where settings='Payment Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Payment Rights','2')";
                            int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                        }
                        if (chkpety.Checked == true && chkbank.Checked == true)
                        {
                            string savereptchal = "if exists(select * from Master_Settings where settings='Payment Rights' " + userorgropcode + " )update Master_Settings set value='3' where settings='Payment Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Payment Rights','3')";
                            int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                        }
                        if (chkpety.Checked == false && chkbank.Checked == false)
                        {
                            string savereptchal = "if exists(select * from Master_Settings where settings='Payment Rights' " + userorgropcode + " )update Master_Settings set value='0' where settings='Payment Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Payment Rights','0')";
                            int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                        }
                        //shift and stream
                        if (rb_shift.Checked == true)
                        {
                            string savestream = "if exists(select * from Master_Settings where settings='Stream/Shift Rights' " + userorgropcode + " )update Master_Settings set value='1' where settings='Stream/Shift Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Stream/Shift Rights','1')";
                            int save = dasri.update_method_wo_parameter(savestream, "Text");
                        }
                        if (rb_stream.Checked == true)
                        {
                            string savestream = "if exists(select * from Master_Settings where settings='Stream/Shift Rights' " + userorgropcode + " )update Master_Settings set value='2' where settings='Stream/Shift Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Stream/Shift Rights','2')";
                            int save = dasri.update_method_wo_parameter(savestream, "Text");
                        }
                        //consession and refund
                        if (rbwithdept.Checked == true)
                        {
                            string savereptchal = "if exists(select * from Master_Settings where settings='Consession And Refund Rights' " + userorgropcode + " )update Master_Settings set value='1' where settings='Consession And Refund Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Consession And Refund Rights','1')";
                            int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                        }
                        else if (rbwithoutdept.Checked == true)
                        {
                            string savereptchal = "if exists(select * from Master_Settings where settings='Consession And Refund Rights' " + userorgropcode + " )update Master_Settings set value='2' where settings='Consession And Refund Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Consession And Refund Rights','2')";
                            int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                        }
                        ///// student login fees rights
                        if (rb_detl.Checked == true)
                        {
                            string savefeerights = "if exists(select * from Master_Settings where settings='Fees Rights' " + userorgropcode + " )update Master_Settings set value='1' where settings='Fees Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Fees Rights','1')";
                            int save = dasri.update_method_wo_parameter(savefeerights, "Text");
                        }
                        if (rb_withledger.Checked == true)
                        {
                            string savefeerights = "if exists(select * from Master_Settings where settings='Fees Rights' " + userorgropcode + " )update Master_Settings set value='2' where settings='Fees Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Fees Rights','2')";
                            int save = dasri.update_method_wo_parameter(savefeerights, "Text");
                        }
                        if (rb_withoutledger.Checked == true)
                        {
                            string savefeerights = "if exists(select * from Master_Settings where settings='Fees Rights' " + userorgropcode + " )update Master_Settings set value='3' where settings='Fees Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Fees Rights','3')";
                            int save = dasri.update_method_wo_parameter(savefeerights, "Text");
                        }
                        //added by sudhagar Send sms rights
                        string sdsmsvalue = string.Empty;
                        string rights = string.Empty;
                        if (cbsmsrights.Checked == true)
                        {
                            rights = "1";
                            string savereptchal = "if exists(select * from Master_Settings where settings='Send Sms Right' " + userorgropcode + " )update Master_Settings set value='1' where settings='Send Sms Right' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Send Sms Right','1')";
                            int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                        }
                        else
                        {
                            rights = "0";
                            string savereptchal = "if exists(select * from Master_Settings where settings='Send Sms Right' " + userorgropcode + " )update Master_Settings set value='0' where settings='Send Sms Right' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Send Sms Right','0')";
                            int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                        }
                        if (cblsmsrights.Items.Count > 0)
                        {
                            for (int sel = 0; sel < cblsmsrights.Items.Count; sel++)
                            {
                                if (cblsmsrights.Items[sel].Selected == true)
                                {
                                    if (sdsmsvalue == "")
                                    {
                                        sdsmsvalue = "" + Convert.ToString(cblsmsrights.Items[sel].Value) + ""; ;
                                    }
                                    else
                                    {
                                        sdsmsvalue = sdsmsvalue + "," + Convert.ToString(cblsmsrights.Items[sel].Value);
                                    }
                                }
                            }
                            if (sdsmsvalue != "" && rights.Trim() == "1")
                            {
                                string savereptchal = "if exists(select * from Master_Settings where settings='Send Sms Rights' " + userorgropcode + " )update Master_Settings set value='" + sdsmsvalue + "' where settings='Send Sms Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Send Sms Rights','" + sdsmsvalue + "')";
                                int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                            }
                            else
                            {
                                sdsmsvalue = string.Empty;
                                string savereptchal = "if exists(select * from Master_Settings where settings='Send Sms Rights' " + userorgropcode + " )update Master_Settings set value='" + sdsmsvalue + "' where settings='Send Sms Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Send Sms Rights','" + sdsmsvalue + "')";
                                int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                            }
                        }
                    }
                    //Application no rights added by sudhagar 30-04 satday
                    string Query = string.Empty;
                    string Value = "0";
                    int Upd = 0;
                    if (chkappno.Checked == true)
                    {
                        Value = "1";
                        Query = "if not exists (select * from Master_Settings where usercode='" + selected_usercode + "' and settings='Application No Rights')insert into Master_Settings(usercode,settings,value)values ('" + selected_usercode + "','Application No Rights','" + Value + "')else update Master_Settings set value='" + Value + "' where settings='Application No Rights' and usercode='" + selected_usercode + "'";
                        Upd = dasri.update_method_wo_parameter(Query, "text");
                    }
                    else
                    {
                        Query = "if not exists (select * from Master_Settings where usercode='" + selected_usercode + "' and settings='Application No Rights')insert into Master_Settings(usercode,settings,value)values ('" + selected_usercode + "','Application No Rights','" + Value + "')else update Master_Settings set value='" + Value + "' where settings='Application No Rights' and usercode='" + selected_usercode + "'";
                        Upd = dasri.update_method_wo_parameter(Query, "text");
                    }
                    //zzz 28may 2016
                    if (chkadmino.Checked == true)
                    {
                        Value = "1";
                        Query = "if not exists (select * from Master_Settings where usercode='" + selected_usercode + "' and settings='Admission No Rights')insert into Master_Settings(usercode,settings,value)values ('" + selected_usercode + "','Admission No Rights','" + Value + "')else update Master_Settings set value='" + Value + "' where settings='Admission No Rights' and usercode='" + selected_usercode + "'";
                        Upd = dasri.update_method_wo_parameter(Query, "text");
                    }
                    else
                    {
                        Value = "0";
                        Query = "if not exists (select * from Master_Settings where usercode='" + selected_usercode + "' and settings='Admission No Rights')insert into Master_Settings(usercode,settings,value)values ('" + selected_usercode + "','Admission No Rights','" + Value + "')else update Master_Settings set value='" + Value + "' where settings='Admission No Rights' and usercode='" + selected_usercode + "'";
                        Upd = dasri.update_method_wo_parameter(Query, "text");
                    }
                    Query = string.Empty;
                    Value = "0";
                    Upd = 0;
                    if (chkappacr.Checked == true)
                    {
                        Value = "1";
                        Query = "if not exists (select * from Master_Settings where usercode='" + selected_usercode + "' and settings='Add Academic year')insert into Master_Settings(usercode,settings,value)values ('" + selected_usercode + "','Add Academic year','" + Value + "')else update Master_Settings set value='" + Value + "' where settings='Add Academic year' and usercode='" + selected_usercode + "'";
                        Upd = dasri.update_method_wo_parameter(Query, "text");
                    }
                    else
                    {
                        Query = "if not exists (select * from Master_Settings where usercode='" + selected_usercode + "' and settings='Add Academic year')insert into Master_Settings(usercode,settings,value)values ('" + selected_usercode + "','Add Academic year','" + Value + "')else update Master_Settings set value='" + Value + "' where settings='Add Academic year' and usercode='" + selected_usercode + "'";
                        Upd = dasri.update_method_wo_parameter(Query, "text");
                    }
                    // zzz 10.5.2016
                    string transallot = string.Empty;
                    string transmoth = string.Empty;
                    string transyr = string.Empty;
                    string appformate = string.Empty;
                    if (rdb_formate1.Checked == true)
                    {
                        appformate = "0";
                    }
                    else if (rdb_formate2.Checked == true)
                    {
                        appformate = "1";
                    }
                    if (appformate != "")
                    {
                        string appsave = "if exists(select * from Master_Settings where settings='Application Formate Setting' " + userorgropcode + " )update Master_Settings set value='" + appformate + "' where settings='Application Formate Setting' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Application Formate Setting','" + appformate + "')";
                        int cc = dasri.update_method_wo_parameter(appsave, "text");
                    }
                    //barath22.05.17
                    appformate = "";
                    if (rdb_viewformat1.Checked == true)
                    {
                        appformate = "0";
                    }
                    else if (rdb_viewformat2.Checked == true)
                    {
                        appformate = "1";
                    }
                    if (appformate != "")
                    {
                        string appsave = "if exists(select * from Master_Settings where settings='Application view format' " + userorgropcode + " )update Master_Settings set value='" + appformate + "' where settings='Application view format' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Application view format','" + appformate + "')";
                        int cc = dasri.update_method_wo_parameter(appsave, "text");
                    }
                    // zzz 15.6.2016
                    string acadamicdet = string.Empty;
                    if (cb_acadamicdetails.Checked == true)
                    {
                        acadamicdet = "1";
                    }
                    else
                    {
                        acadamicdet = "0";
                    }
                    if (acadamicdet != "")
                    {
                        string appsave = "if exists(select * from Master_Settings where settings='Academic Details Setting' " + userorgropcode + " )update Master_Settings set value='" + acadamicdet + "' where settings='Academic Details Setting' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Academic Details Setting','" + acadamicdet + "')";
                        int cc = dasri.update_method_wo_parameter(appsave, "text");
                    }
                    // zzz 17.6.2016
                    string Equivalent = string.Empty;
                    if (cb_Equalnthsc.Checked == true)
                    {
                        Equivalent = "1";
                    }
                    else
                    {
                        Equivalent = "0";
                    }
                    if (Equivalent != "")
                    {
                        string appsave = "if exists(select * from Master_Settings where settings='Equivalent To HSC' " + userorgropcode + " )update Master_Settings set value='" + Equivalent + "' where settings='Equivalent To HSC' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Equivalent To HSC','" + Equivalent + "')";
                        int cc = dasri.update_method_wo_parameter(appsave, "text");
                    }
                    string cutof = string.Empty;
                    if (cb_cutofmark.Checked == true)
                    {
                        cutof = "1";
                    }
                    else
                    {
                        cutof = "0";
                    }
                    if (cutof != "")
                    {
                        string appsave = "if exists(select * from Master_Settings where settings='CutOfMark' " + userorgropcode + " )update Master_Settings set value='" + cutof + "' where settings='CutOfMark' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'CutOfMark','" + cutof + "')";
                        int cc = dasri.update_method_wo_parameter(appsave, "text");
                    }
                    //........... zzz 29june2016.......................
                    string studatten = string.Empty;
                    if (cb_studentattendance.Checked == true)
                    {
                        studatten = "1";
                    }
                    else
                    {
                        studatten = "0";
                    }
                    if (studatten != "")
                    {
                        string appsave = "if exists(select * from Master_Settings where settings='AllStudentAttendance' " + userorgropcode + " )update Master_Settings set value='" + studatten + "' where settings='AllStudentAttendance' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'AllStudentAttendance','" + studatten + "')";
                        int cc = dasri.update_method_wo_parameter(appsave, "text");
                    }
                    // zzz july02 2016
                    string generalallot = string.Empty;
                    if (cb_generalfee.Checked == true)
                    {
                        generalallot = "1";
                    }
                    else
                    {
                        generalallot = "0";
                    }
                    if (generalallot != "")
                    {
                        string appsave = "if exists(select * from Master_Settings where settings='GeneralFeeAllot' " + userorgropcode + " )update Master_Settings set value='" + generalallot + "' where settings='GeneralFeeAllot' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'GeneralFeeAllot','" + generalallot + "')";
                        int cc = dasri.update_method_wo_parameter(appsave, "text");
                    }
                    transallot = string.Empty;
                    transmoth = string.Empty;
                    transyr = string.Empty;
                    if (cb_transport.Checked == true)
                    {
                        transallot = "1";
                    }
                    else
                    {
                        transallot = "0";
                    }
                    if (transallot != "")
                    {
                        string appsave = "if exists(select * from Master_Settings where settings='TransportFeeAllot' " + userorgropcode + " )update Master_Settings set value='" + transallot + "' where settings='TransportFeeAllot' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'TransportFeeAllot','" + transallot + "')";
                        int cc = dasri.update_method_wo_parameter(appsave, "text");
                    }
                    string hostelallot = string.Empty;
                    if (cb_hostelfee.Checked == true)
                    {
                        hostelallot = "1";
                    }
                    else
                    {
                        hostelallot = "0";
                    }
                    if (hostelallot != "")
                    {
                        string appsave = "if exists(select * from Master_Settings where settings='HostelFeeAllot' " + userorgropcode + " )update Master_Settings set value='" + hostelallot + "' where settings='HostelFeeAllot' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'HostelFeeAllot','" + hostelallot + "')";
                        int cc = dasri.update_method_wo_parameter(appsave, "text");
                    }
                    // 30july2016 zzz StudentAdmissionRegister
                    string admissionreg = string.Empty;
                    if (rdb_dynamicreg.Checked == true)
                    {
                        admissionreg = "1";
                    }
                    else
                    {
                        admissionreg = "0";
                    }
                    if (hostelallot != "")
                    {
                        string appsave = "if exists(select * from Master_Settings where settings='StudentAdmissionRegister' " + userorgropcode + " )update Master_Settings set value='" + admissionreg + "' where settings='StudentAdmissionRegister' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'StudentAdmissionRegister','" + admissionreg + "')";
                        int cc = dasri.update_method_wo_parameter(appsave, "text");
                    }
                    //------Added By Jeyaprakash------//
                    string orderby = string.Empty;
                    if (orderbymarks.Checked == true)
                    {
                        orderby = "0";
                    }
                    else
                    {
                        orderby = "1";
                    }
                    if (orderby != "")
                    {
                        string appsave = "if exists(select * from Master_Settings where settings='OrderBy Marks Setting' " + userorgropcode + " )update Master_Settings set value='" + orderby + "' where settings='OrderBy Marks Setting' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'OrderBy Marks Setting','" + orderby + "')";
                        int cc = dasri.update_method_wo_parameter(appsave, "text");
                    }
                    //added by sudhagar finance department acronym print 16/08/2016
                    int rightval = 0;
                    if (cbdeptacr.Checked == true)
                        rightval = 1;
                    string savtdeptacr = "if exists(select * from Master_Settings where settings='Finance Include Department Acronym' " + userorgropcode + " )update Master_Settings set value='" + rightval + "' where settings='Finance Include Department Acronym' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Finance Include Department Acronym','" + rightval + "')";
                    int savacr = dasri.update_method_wo_parameter(savtdeptacr, "Text");
                    //added by sudhagar finance user based reports 17/08/2016
                    int rtlval = 0;
                    if (cbuserrpt.Checked == true)
                        rtlval = 1;
                    string savtdeptuser = "if exists(select * from Master_Settings where settings='Finance Include User Based Report Settings' " + userorgropcode + " )update Master_Settings set value='" + rtlval + "' where settings='Finance Include User Based Report Settings' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Finance Include User Based Report Settings','" + rtlval + "')";
                    int savcr = dasri.update_method_wo_parameter(savtdeptuser, "Text");
                    #endregion
                    //added by sudhagar 14-06-2016 finance settings 
                    #region finance setting save
                    ///sudhagar-15-12-2015 financialyear save///////////
                    string selq = "  if exists (select * from FS_FinYearPrivilage where UserCode in ('" + selected_usercode + "') and CollegeCode ='" + ddlcollege.SelectedItem.Value + "') delete from  FS_FinYearPrivilage where UserCode in ('" + selected_usercode + "') and CollegeCode ='" + ddlcollege.SelectedItem.Value + "'";
                    int selup = d2.update_method_wo_parameter(selq, "Text");
                    string selqr = "  if exists (select * from FS_HeaderPrivilage where UserCode in ('" + selected_usercode + "') and CollegeCode ='" + ddlcollege.SelectedItem.Value + "') delete from  FS_HeaderPrivilage where UserCode in ('" + selected_usercode + "') and CollegeCode ='" + ddlcollege.SelectedItem.Value + "'";
                    int selupq = d2.update_method_wo_parameter(selqr, "Text");
                    string selqry = "  if exists (select * from FS_LedgerPrivilage where UserCode in ('" + selected_usercode + "') and CollegeCode ='" + ddlcollege.SelectedItem.Value + "') delete from  FS_LedgerPrivilage where UserCode in ('" + selected_usercode + "') and CollegeCode ='" + ddlcollege.SelectedItem.Value + "'";
                    int selupqu = d2.update_method_wo_parameter(selqry, "Text");
                    string finfk = string.Empty;
                    for (int ik = 0; ik < chkl_fin.Items.Count; ik++)
                    {
                        if (chkl_fin.Items[ik].Selected == true)
                        {
                            finfk = Convert.ToString(chkl_fin.Items[ik].Value);
                            if (finfk != "")
                            {
                                string insqry = " INSERT INTO  FS_FinYearPrivilage(UserCode,FinYearFK,CollegeCode) values( '" + selected_usercode + "', '" + finfk + "','" + ddlcollege.SelectedItem.Value + "') ";
                                int fin = d2.update_method_wo_parameter(insqry, "Text");
                            }
                        }
                    }
                    string strhead = string.Empty;
                    for (int ij = 0; ij < chkl_head.Items.Count; ij++)
                    {
                        if (chkl_head.Items[ij].Selected == true)
                        {
                            strhead = Convert.ToString(chkl_head.Items[ij].Value);
                            if (strhead != "")
                            {
                                string insheqry = " insert into FS_HeaderPrivilage(UserCode,HeaderFK,CollegeCode) values( '" + selected_usercode + "', '" + strhead + "','" + ddlcollege.SelectedItem.Value + "')";
                                int hed = d2.update_method_wo_parameter(insheqry, "Text");
                            }
                        }
                    }
                    string strledger = string.Empty;
                    for (int im = 0; im < chkl_ledg.Items.Count; im++)
                    {
                        if (chkl_ledg.Items[im].Selected == true)
                        {
                            strledger = Convert.ToString(chkl_ledg.Items[im].Value);
                            string headerfk = d2.GetFunction("select HeaderFK from FM_LedgerMaster where LedgerPK='" + strledger + "' and CollegeCode='" + ddlcollege.SelectedItem.Value + "'");
                            if (strledger != "")
                            {
                                string insledqry = " insert into  FS_LedgerPrivilage (UserCode,HeaderFK,LedgerFK,CollegeCode) values('" + selected_usercode + "','" + headerfk + "','" + strledger + "','" + ddlcollege.SelectedItem.Value + "') ";
                                int led = d2.update_method_wo_parameter(insledqry, "Text");
                            }
                        }
                    }
                    #region College On time setting 1
                    /////Display Cur sem/year in journal
                    int checkvalue = 0;
                    if (chk_yr.Checked == true)
                    {
                        checkvalue = 1;
                    }
                    string insqry1 = "if exists (select * from New_InsSettings where LinkName='Current Sem/Year' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Current Sem/Year' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Current Sem/Year','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    int save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //////Student Receipt//////////
                    checkvalue = 0;
                    if (chk_stud.Checked == true)
                    {
                        checkvalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Receipt For Student' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Receipt For Student' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Receipt For Student','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //////////////depulicate receipt////////////////////
                    checkvalue = 0;
                    if (chk_duplicate.Checked == true)
                    {
                        checkvalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Duplicate Receipt For Student' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Duplicate Receipt For Student' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Duplicate Receipt For Student','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //////////////Delete receipt////////////////////
                    checkvalue = 0;
                    if (chk_delRcpt.Checked == true)
                    {
                        checkvalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Delete Receipt' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Delete Receipt' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Delete Receipt','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    ////////////////////pre print///////////////////
                    checkvalue = 0;
                    if (chk_print.Checked == true)
                    {
                        checkvalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Preprint Receipt For Student' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Preprint Receipt For Student' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Preprint Receipt For Student','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //////////////////////////////edit receipt////////////////////
                    checkvalue = 0;
                    if (chk_editrpt.Checked == true)
                    {
                        checkvalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Edit Receipt Date' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Edit Receipt Date' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Edit Receipt Date','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    ///////////////////////////cancel receipt///////////////
                    checkvalue = 0;
                    if (chk_canrpt.Checked == true)
                    {
                        checkvalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Cancel Receipt' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Cancel Receipt' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Cancel Receipt','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    ///////////////////////////////locak start date///////////////////////////
                    checkvalue = 0;
                    if (chk_lsdate.Checked == true)
                    {
                        checkvalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Lock Start Date' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Lock Start Date' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Lock Start Date','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    ////////////////////////////fees year wise////////////////
                    //checkvalue = 0;
                    //if (rdbfeeyear.Checked == true)
                    //{
                    //    checkvalue = 1;
                    //}
                    //if (rdbfeeterm.Checked == true)
                    //{
                    //    checkvalue = 2;
                    //}
                    //insqry1 = "if exists (select * from New_InsSettings where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Fee Yearwise','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    //save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    foreach (ListItem li in cbl_Feecategory.Items)
                    {
                        string selValue = li.Value;
                        if (li.Selected)
                        {
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' and  LinkValue='" + selValue + "') update New_InsSettings set LinkValue ='" + selValue + "' where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' and  LinkValue='" + selValue + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Fee Yearwise','" + selValue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                        }
                        else
                        {
                            insqry1 = "delete from New_InsSettings where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' and  LinkValue='" + selValue + "'";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                        }
                    }
                    //////////////////////////////fees year wise////////////////
                    //checkvalue = 0;
                    //if (chk_fees.Checked == true)
                    //{
                    //    checkvalue = 1;
                    //}
                    //insqry1 = "if exists (select * from New_InsSettings where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Fee Yearwise','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    //save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    ///////////////////////////yet to be paid to selected date///////////////
                    checkvalue = 0;
                    if (chk_paid.Checked == true)
                    {
                        checkvalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Yet to be paid with date' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Yet to be paid with date' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Yet to be paid with date','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    ////////////////////////////bank statement page settings/////////////
                    checkvalue = 0;
                    if (chk_bank.Checked == true)
                    {
                        checkvalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Bank Statement Page Settings' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Bank Statement Page Settings' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Bank Statement Page Settings','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //////////////////////////challan page settings////////////
                    checkvalue = 0;
                    if (chk_chall.Checked == true)
                    {
                        checkvalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Challan Page Settings' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Challan Page Settings' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Challan Page Settings','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    /////////////////////////////selected header challan print/////////
                    checkvalue = 0;
                    if (chk_challhed.Checked == true)
                    {
                        checkvalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Selected Ledger in Challan Print' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Selected Ledger in Challan Print' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Selected Ledger in Challan Print','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    ////Transport Fee Setting
                    checkvalue = 0;
                    if (chk_transfee.Checked == true)
                    {
                        checkvalue = 1;
                    }
                    insqry1 = "if exists (select * from inssettings where LinkName='Transport Link'  and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update inssettings set LinkValue ='" + checkvalue + "' where LinkName='Transport Link'  and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into inssettings(LinkName,LinkValue,college_code) values ('Transport Link','" + checkvalue + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //sudhagar semesteranYear setting 14-04
                    checkvalue = 0;
                    if (chk_semyear.Checked == true)
                    {
                        checkvalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='SemesterandYear' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='SemesterandYear' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('SemesterandYear','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //sudhagar automatically clear dd
                    checkvalue = 0;
                    if (chk_dd.Checked == true)
                    {
                        checkvalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='AutomaticallyClearDD' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='AutomaticallyClearDD' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('AutomaticallyClearDD','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //added by sudhagar 06-06-2015 show all ledger
                    if (cballledger.Checked == true)
                    {
                        checkvalue = 1;
                        string insqry = "if exists (select * from New_InsSettings where LinkName='Show All Ledger' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Show All Ledger' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Show All Ledger','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                        int save = d2.update_method_wo_parameter(insqry, "Text");
                    }
                    else
                    {
                        checkvalue = 0;
                        string insqry = "if exists (select * from New_InsSettings where LinkName='Show All Ledger' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Show All Ledger' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Show All Ledger','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                        int save = d2.update_method_wo_parameter(insqry, "Text");
                    }
                    //cash deposit cumulative added by sudhagar 06/07/2016
                    string setname = "Cash Deposit Cumulative";
                    if (cbcontra.Checked == true)
                        checkvalue = 1;
                    else
                        checkvalue = 0;
                    string conTra = "if exists (select * from New_InsSettings where LinkName='" + setname + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='" + setname + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('" + setname + "','" + checkvalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    int saves = d2.update_method_wo_parameter(conTra, "Text");

                    #endregion

                    //clear dd to bounce 29.11.2016 by sudhagar
                    int cbclrval = 0;
                    setname = "Clear DD to Bounce";
                    if (cbclrddcnl.Checked == true)
                        cbclrval = 1;
                    string cbclrIns = "if exists (select * from New_InsSettings where LinkName='" + setname + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + cbclrval + "' where LinkName='" + setname + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('" + setname + "','" + cbclrval + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    int clrIns = d2.update_method_wo_parameter(cbclrIns, "Text");

                    //challan receipt 17.03.2017 by sudhagar
                    cbclrval = 0;
                    setname = "ChallanReceipt";
                    if (cbchlrcpt.Checked == true)
                        cbclrval = 1;
                    cbclrIns = "if exists (select * from New_InsSettings where LinkName='" + setname + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + cbclrval + "' where LinkName='" + setname + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('" + setname + "','" + cbclrval + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    clrIns = d2.update_method_wo_parameter(cbclrIns, "Text");

                    //edit receipt no 18.03.2017 by sudhagar
                    cbclrval = 0;
                    setname = "EditReceiptNo";
                    if (cbeditrcptno.Checked == true)
                        cbclrval = 1;
                    cbclrIns = "if exists (select * from New_InsSettings where LinkName='" + setname + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + cbclrval + "' where LinkName='" + setname + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('" + setname + "','" + cbclrval + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    clrIns = d2.update_method_wo_parameter(cbclrIns, "Text");

                    //include due amount to paid added by sudhagar 28.06.2017
                    cbclrval = 0;
                    setname = "IncludeDueAmount";
                    if (cbincDueAmt.Checked == true)
                        cbclrval = 1;
                    cbclrIns = "if exists (select * from New_InsSettings where LinkName='" + setname + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + cbclrval + "' where LinkName='" + setname + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('" + setname + "','" + cbclrval + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    clrIns = d2.update_method_wo_parameter(cbclrIns, "Text");

                    //include concession in journal added by sudhagar 06.10.2017
                    cbclrval = 0;
                    setname = "IncludeConcession";
                    if (cbdeduct.Checked == true)
                        cbclrval = 1;
                    cbclrIns = "if exists (select * from New_InsSettings where LinkName='" + setname + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + cbclrval + "' where LinkName='" + setname + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('" + setname + "','" + cbclrval + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    clrIns = d2.update_method_wo_parameter(cbclrIns, "Text");


                    saveWebsitePayment();
                    #region Added By Idhris 27-12-2016
                    byte saveVal = 0;
                    if (rblSmsIndividualCommon.SelectedIndex == 1)
                    {
                        saveVal = 1;
                    }
                    string saveValcopy = "if exists (select * from New_InsSettings where LinkName='SMSSettingIndividualCommon'  and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + saveVal + "' where LinkName='SMSSettingIndividualCommon' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,college_code) values ('SMSSettingIndividualCommon','" + saveVal + "','" + ddlcollege.SelectedItem.Value + "')";
                    d2.update_method_wo_parameter(saveValcopy, "text");
                    #endregion
                    int saveValueV = 0;
                    if (cbShowVerRegNo.Checked)
                    {
                        saveValueV = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='ShowRegisterNumberVerification' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + saveValueV + "' where LinkName='ShowRegisterNumberVerification' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ShowRegisterNumberVerification','" + saveValueV + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");


                    string saveUserCOl = "0";
                    if (chkUseCommonCol.Checked)
                    {
                        saveUserCOl = "1";
                    }

                    dasri.update_method_wo_parameter("if exists(select LinkValue from New_InsSettings where LinkName='UseCommonCollegeCode' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "') update New_InsSettings set LinkValue='" + saveUserCOl + "'  where LinkName='UseCommonCollegeCode' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "' else insert into New_InsSettings (LinkValue,LinkName,college_code,user_code) values('" + saveUserCOl + "','UseCommonCollegeCode','" + ddlcollege.SelectedItem.Value + "','" + selected_usercode.ToString() + "')", "Text");


                    string NewAttendanceRights = "0";
                    if (CbNewStaffAttendance.Checked)
                    {
                        NewAttendanceRights = "1";
                    }

                    dasri.update_method_wo_parameter("if exists (select LinkValue from inssettings where College_code ='" + ddlcollege.SelectedItem.Value + "' and LinkName ='Individual Staff Login Attendance New') update inssettings set LinkValue='" + NewAttendanceRights + "' where College_code ='" + ddlcollege.SelectedItem.Value + "' and LinkName ='Individual Staff Login Attendance New' else insert into inssettings (LinkName,LinkValue,college_code) values ('Individual Staff Login Attendance New','" + NewAttendanceRights + "','" + ddlcollege.SelectedItem.Value + "')", "Text");

                    //added by Mullai
                    string updegapp = "0";
                    if (cbdegapp.Checked)
                    {
                        updegapp = "1";
                    }
                    dasri.update_method_wo_parameter("if exists(select LinkValue from New_InsSettings where LinkName='Update Degree Code For Applyn' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "') update New_InsSettings set LinkValue='" + updegapp + "'  where LinkName='Update Degree Code For Applyn' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "' else insert into New_InsSettings (LinkValue,LinkName,college_code,user_code) values('" + updegapp + "','Update Degree Code For Applyn','" + ddlcollege.SelectedItem.Value + "','" + selected_usercode.ToString() + "')", "Text");
                    //***

                    #region Code to Save Challan Receipt Settings --Modified on 17-12-2016 by Idhris
                    //Staff App Tab Rights Save
                    for (int chkRow = 0; chkRow < chkStaffAppTabRights.Items.Count; chkRow++)
                    {
                        string linkName = chkStaffAppTabRights.Items[chkRow].Value + chkStaffAppTabRights.Items[chkRow].Text;
                        int saveValue = 0;
                        if (chkStaffAppTabRights.Items[chkRow].Selected)
                        {
                            saveValue = 1;
                        }
                        insqry1 = "if exists (select * from New_InsSettings where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + saveValue + "' where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('" + linkName + "','" + saveValue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                        save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    }
                    //Student App Tab Rights Save
                    for (int chkRow = 0; chkRow < chkStudentAppTabRights.Items.Count; chkRow++)
                    {
                        string linkName = chkStudentAppTabRights.Items[chkRow].Value + chkStudentAppTabRights.Items[chkRow].Text;
                        int saveValue = 0;
                        if (chkStudentAppTabRights.Items[chkRow].Selected)
                        {
                            saveValue = 1;
                        }
                        insqry1 = "if exists (select * from New_InsSettings where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + saveValue + "' where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('" + linkName + "','" + saveValue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                        save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    }
                    //Receipt or Challan or Both
                    int storevalue = 0;
                    if (cbl_RcptChln.Items[0].Selected == true)
                    {
                        //Receipt
                        storevalue = 1;
                    }
                    if (cbl_RcptChln.Items[1].Selected == true)
                    {
                        //Challan
                        storevalue = 2;
                    }
                    if (cbl_RcptChln.Items[0].Selected == true && cbl_RcptChln.Items[1].Selected == true)
                    {
                        //Receipt and Challan
                        storevalue = 3;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='ChallanOrReceiptOrBoth' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ChallanOrReceiptOrBoth' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ChallanOrReceiptOrBoth','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Challan Receipt Priority
                    storevalue = 0;
                    if (rbl_ChlRcptPriority.SelectedIndex == 0)
                    {
                        //Receipt as Default
                        storevalue = 0;
                    }
                    if (rbl_ChlRcptPriority.SelectedIndex == 1)
                    {
                        //Challan as Default
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='ChallanReceiptDefaultPriority' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ChallanReceiptDefaultPriority' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ChallanReceiptDefaultPriority','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Headerwise or Group Header wise or Ledger wise
                    storevalue = 0;
                    if (cbl_typeOfHdr.Items[0].Selected == true)
                    {
                        //Group Header
                        storevalue = 1;
                    }
                    if (cbl_typeOfHdr.Items[1].Selected == true)
                    {
                        //Header
                        storevalue = 2;
                    }
                    if (cbl_typeOfHdr.Items[2].Selected == true)
                    {
                        //Ledger
                        storevalue = 3;
                    }
                    if (cbl_typeOfHdr.Items[0].Selected == true && cbl_typeOfHdr.Items[1].Selected == true)
                    {
                        //GH and Ledger
                        storevalue = 5;
                    }
                    if (cbl_typeOfHdr.Items[1].Selected == true && cbl_typeOfHdr.Items[2].Selected == true)
                    {
                        //Ledger and Header
                        storevalue = 6;
                    }
                    if (cbl_typeOfHdr.Items[0].Selected == true && cbl_typeOfHdr.Items[2].Selected == true)
                    {
                        //GHeader and Ledger
                        storevalue = 7;
                    }
                    if (cbl_typeOfHdr.Items[0].Selected == true && cbl_typeOfHdr.Items[1].Selected == true && cbl_typeOfHdr.Items[2].Selected == true)
                    {
                        //All
                        storevalue = 4;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='GroupHeaderOrHeaderOrLedger' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='GroupHeaderOrHeaderOrLedger' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('GroupHeaderOrHeaderOrLedger','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Is Challan or Receipt Header wise ?
                    storevalue = 0;
                    if (cbl_HdrwiseChlnRcpt.Items[0].Selected)
                    {
                        //If Challan Selected
                        storevalue = 2;
                    }
                    if (cbl_HdrwiseChlnRcpt.Items[1].Selected)
                    {
                        //If Receipt Selected
                        storevalue = 1;
                    }
                    if (cbl_HdrwiseChlnRcpt.Items[0].Selected && cbl_HdrwiseChlnRcpt.Items[1].Selected)
                    {
                        storevalue = 3;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='HeaderWiseChallanorReceipt' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='HeaderWiseChallanorReceipt' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('HeaderWiseChallanorReceipt','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Roll Number or Reg Number or Admission No or Application Number
                    storevalue = 0;
                    if (cbl_RollRegAdmNo.Items[0].Selected)
                    {
                        //Roll No
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='ChallanReceiptRollNo' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ChallanReceiptRollNo' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ChallanReceiptRollNo','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    storevalue = 0;
                    if (cbl_RollRegAdmNo.Items[1].Selected)
                    {
                        //RegNo
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='ChallanReceiptRegNo' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ChallanReceiptRegNo' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ChallanReceiptRegNo','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    storevalue = 0;
                    if (cbl_RollRegAdmNo.Items[2].Selected)
                    {
                        //Admission No - Roll Admit
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='ChallanReceiptRollAdmit' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ChallanReceiptRollAdmit' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ChallanReceiptRollAdmit','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    storevalue = 0;
                    if (cbl_RollRegAdmNo.Items[3].Selected)
                    {
                        //App Form Number - Application Number
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='ChallanReceiptAppFormNo' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ChallanReceiptAppFormNo' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ChallanReceiptAppFormNo','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    storevalue = 0;
                    if (cbl_RollRegAdmNo.Items[4].Selected)
                    {
                        //Smart Card Number - smart_serial_no
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='ChallanReceiptSmartNo' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ChallanReceiptSmartNo' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ChallanReceiptSmartNo','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    storevalue = 0;
                    if (cbl_excessType.Items[0].Selected)
                    {
                        //Common
                        storevalue = 1;
                    }
                    else
                        if (cbl_excessType.Items[1].Selected)
                        {
                            //Ledgerwise
                            storevalue = 2;
                        }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='ExcessFeesType' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ExcessFeesType' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ExcessFeesType','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //FIne Type
                    storevalue = 0;
                    if (chkFineType.Checked)
                    {
                        //LedgerWIse
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='FineFeesType' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='FineFeesType' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('FineFeesType','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //SCholarship
                    storevalue = 0;
                    if (cblScholarship.Items[0].Selected)
                    {
                        //Common
                        storevalue = 0;
                    }
                    else
                        if (cblScholarship.Items[1].Selected)
                        {
                            //Ledgerwise
                            storevalue = 1;
                        }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='ScholarshipType' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ScholarshipType' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ScholarshipType','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    storevalue = 0;
                    if (rblShowBal.Items[0].Selected)
                    {
                        //Current Ledgers
                        storevalue = 0;
                    }
                    else
                        if (rblShowBal.Items[1].Selected)
                        {
                            //Total Ledgers
                            storevalue = 1;
                        }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='ShowBalanceType' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ShowBalanceType' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ShowBalanceType','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Disable Stream and Shift in Journal
                    storevalue = 0;
                    if (cb_StreamShift.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='JournalEnableStreamShift' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='JournalEnableStreamShift' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('JournalEnableStreamShift','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Move TO Registration from Challan
                    storevalue = 0;
                    if (cbMovetoReg.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='MoveFromChallanToReg' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='MoveFromChallanToReg' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('MoveFromChallanToReg','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Allow duplicate receipt from bank import
                    storevalue = 0;
                    if (cbAllowDupRcptBnkImpt.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='AllowDupReceiptBankimport' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='AllowDupReceiptBankimport' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('AllowDupReceiptBankimport','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    ////Automatically clear cheque
                    //insqry1 = "select LinkValue from New_InsSettings where LinkName='AutomaticallyClearCheque' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    //save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    //if (save1 == 1)
                    //{
                    //    cb_autoClrCheque.Checked = true;
                    //}
                    //else
                    //{
                    //    cb_autoClrCheque.Checked = false;
                    //}
                    //Automatically clear cheque
                    storevalue = 0;
                    if (cb_autoClrCheque.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='AutomaticallyClearCheque' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='AutomaticallyClearCheque' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('AutomaticallyClearCheque','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Include Finance Link In Admission
                    storevalue = 0;
                    if (cbIncFinLink.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='IncludeFinanceLinkInAdmission' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='IncludeFinanceLinkInAdmission' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('IncludeFinanceLinkInAdmission','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Include application fee for admission added by sudhagar 09.12.2016
                    storevalue = 0;
                    if (cbapplfee.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='IncludeApplicationFeeInAdmission' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='IncludeApplicationFeeInAdmission' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('IncludeApplicationFeeInAdmission','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //collegewise application no rights added by sudhagar 10.12.2016
                    storevalue = 0;

                    if (cbclgappl.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='CollegewiseApplicationNoRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='CollegewiseApplicationNoRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('CollegewiseApplicationNoRights','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //collegewise Admission no rights added by sudhagar 10.12.2016
                    storevalue = 0;
                    if (cbclgadm.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='CollegewiseAdmissionNoRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='CollegewiseAdmissionNoRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('CollegewiseAdmissionNoRights','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");


                    if (cb_edulevelappl.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='EdulevelApplicationNoRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='EdulevelApplicationNoRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('EdulevelApplicationNoRights','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //collegewise Admission no rights added by sudhagar 10.12.2016
                    storevalue = 0;
                    if (cb_eduleveladm.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='EdulevelAdmissionNoRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='EdulevelAdmissionNoRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('EdulevelAdmissionNoRights','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");


                    if (cb_DegSeatModeApp.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='DegreeSeatModewiseApplicationNoRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='DegreeSeatModewiseApplicationNoRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('DegreeSeatModewiseApplicationNoRights','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //collegewise Admission no rights added by sudhagar 10.12.2016
                    storevalue = 0;
                    if (cb_DegSeatModeAdm.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='DegreeSeatModewiseAdmissionNoRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='DegreeSeatModewiseAdmissionNoRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('DegreeSeatModewiseAdmissionNoRights','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");


                    //barath student feeconfirmation update or not in daily transation  04/08/17
                    storevalue = 0;
                    if (cbl_Feepaidconfirmation.Checked)
                        storevalue = 1;
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Feeconfirm DailyTransation update' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='Feeconfirm DailyTransation update' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Feeconfirm DailyTransation update','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");


                    storevalue = 0;
                    if (cbNewAppNumber.Checked)
                        storevalue = 1;
                    insqry1 = " if exists (select * from New_InsSettings where LinkName='Common Application Number Settings' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='Common Application Number Settings' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,college_code) values ('Common Application Number Settings','" + storevalue + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");

                    //admission fee editable option added by sudhagar 16.12.2016
                    storevalue = 0;
                    if (cbeditable.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='AdmissionFeeEditable' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='AdmissionFeeEditable' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('AdmissionFeeEditable','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //multiple term setting added by sudhagar 16.12.2016
                    storevalue = 0;
                    string Feeval = string.Empty;
                    if (cbincmulterm.Checked)
                    {
                        storevalue = 1;
                        for (int row = 0; row < cblmulterm.Items.Count; row++)
                        {
                            if (cblmulterm.Items[row].Selected)
                            {
                                if (Feeval == "")
                                    Feeval = Convert.ToString(cblmulterm.Items[row].Value);
                                else
                                    Feeval = Feeval + "," + Convert.ToString(cblmulterm.Items[row].Value);
                            }
                        }
                        if (Feeval == "")
                            Feeval = "0";
                    }
                    else
                        Feeval = "0";
                    if (!string.IsNullOrEmpty(Feeval))
                    {
                        //include setting
                        insqry1 = "if exists (select * from New_InsSettings where LinkName='IncludeMultipleTermSettings' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='IncludeMultipleTermSettings' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('IncludeMultipleTermSettings','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                        save1 = d2.update_method_wo_parameter(insqry1, "Text");
                        insqry1 = string.Empty;
                        //multiple feecatetgory
                        insqry1 = "if exists (select * from New_InsSettings where LinkName='SelectedMultipleFeecategoryCode' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + Feeval + "' where LinkName='SelectedMultipleFeecategoryCode' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('SelectedMultipleFeecategoryCode','" + Feeval + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                        save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    }
                    //Send SMS after application saved
                    storevalue = 0;
                    if (chkAdmSms.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='SendSMSafterapplicationsaved' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='SendSMSafterapplicationsaved' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('SendSMSafterapplicationsaved','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Students from Admission
                    storevalue = 0;
                    storevalue = ddlStudAppAdmShort.SelectedIndex;
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='StudentAppliedShorlistAdmit' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='StudentAppliedShorlistAdmit' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('StudentAppliedShorlistAdmit','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");

                    //Fine Ledger Setting added by sudhagar 08.09.2017
                    #region fine
                    bool boolBatch = getSelectedCount(cbl_batch);
                    bool boolDegree = getSelectedCount(cbl_dept);
                    if (boolBatch && boolDegree && ddl_hdrFine.Items.Count > 0 && ddl_lgrFine.Items.Count > 0)
                    {
                        //string batch = Convert.ToString(getCblSelectedValue(cbl_batch));
                        //string degree = Convert.ToString(getCblSelectedValue(cbl_dept));
                        string batch = string.Empty;
                        string degree = string.Empty;
                        string hdFK = Convert.ToString(ddl_hdrFine.SelectedItem.Value);
                        string ldFK = Convert.ToString(ddl_lgrFine.SelectedItem.Value);
                        string fine_ldfk = Convert.ToString(ddl_fineLedger.SelectedItem.Value);//delsi 29/06
                        for (int bat = 0; bat < cbl_batch.Items.Count; bat++)
                        {
                            if (!cbl_batch.Items[bat].Selected)
                                continue;
                            batch = Convert.ToString(cbl_batch.Items[bat].Value);
                            for (int deg = 0; deg < cbl_dept.Items.Count; deg++)
                            {
                                if (!cbl_dept.Items[deg].Selected)
                                    continue;
                                degree = Convert.ToString(cbl_dept.Items[deg].Value);
                                string store = batch + "~" + degree + "~" + hdFK + "~" + ldFK + "~" + fine_ldfk;// added by delsi + "~" + fine_ldfk
                                string linkName = batch + "-" + degree + "-" + "FineLedgerValue" + "-" + ldFK;
                                insqry1 = "if exists (select * from New_InsSettings where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' and linkvalue='" + store + "' ) update New_InsSettings set LinkValue ='" + store + "' where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('" + linkName + "','" + store + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                                save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            }
                        }
                    }
                    #endregion

                    //if (ddl_hdrFine.Items.Count > 0)
                    //{
                    //    if (ddl_lgrFine.Items.Count > 0)
                    //    {
                    //        string store = Convert.ToString(ddl_hdrFine.SelectedItem.Value) + "," + Convert.ToString(ddl_lgrFine.SelectedItem.Value);
                    //        insqry1 = "if exists (select * from New_InsSettings where LinkName='FineLedgerValue' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + store + "' where LinkName='FineLedgerValue' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('FineLedgerValue','" + store + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    //        save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //    }
                    //}


                    //re admission fees settings added by sudhagar 08.09.2017
                    #region re admission fees fine
                    boolBatch = getSelectedCount(cblreadmbatch);
                    boolDegree = getSelectedCount(cblreadmdegree);
                    if (boolBatch && boolDegree && ddlreadmfinehed.Items.Count > 0 && ddlreadmfineled.Items.Count > 0)
                    {
                        //string batch = Convert.ToString(getCblSelectedValue(cbl_batch));
                        //string degree = Convert.ToString(getCblSelectedValue(cbl_dept));
                        string batch = string.Empty;
                        string degree = string.Empty;
                        string hdFK = Convert.ToString(ddlreadmfinehed.SelectedItem.Value);
                        string ldFK = Convert.ToString(ddlreadmfineled.SelectedItem.Value);
                        for (int bat = 0; bat < cblreadmbatch.Items.Count; bat++)
                        {
                            if (!cblreadmbatch.Items[bat].Selected)
                                continue;
                            batch = Convert.ToString(cblreadmbatch.Items[bat].Value);
                            for (int deg = 0; deg < cblreadmdept.Items.Count; deg++)
                            {
                                if (!cblreadmdept.Items[deg].Selected)
                                    continue;
                                degree = Convert.ToString(cblreadmdept.Items[deg].Value);
                                string store = batch + "~" + degree + "~" + hdFK + "~" + ldFK;
                                string linkName = batch + "-" + degree + "-" + "ReAdmissionFessSettings";
                                insqry1 = "if exists (select * from New_InsSettings where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + store + "' where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('" + linkName + "','" + store + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                                save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            }
                        }
                    }
                    #endregion
                    //if (ddlreadmfinehed.Items.Count > 0)
                    //{
                    //    if (ddlreadmfineled.Items.Count > 0)
                    //    {
                    //        string store = Convert.ToString(ddlreadmfinehed.SelectedItem.Value) + "," + Convert.ToString(ddlreadmfineled.SelectedItem.Value);
                    //        insqry1 = "if exists (select * from New_InsSettings where LinkName='ReAdmissionFessSettings' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "' ) update New_InsSettings set LinkValue ='" + store + "' where LinkName='ReAdmissionFessSettings' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ReAdmissionFessSettings','" + store + "','" + selected_usercode + "','" + Convert.ToString(ddlcollege.SelectedItem.Value) + "')";
                    //        save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //    }
                    //}


                    //added by sudhagar 19.06.2017 for journal fees settings

                    if (ddlMainJrHed.Items.Count > 0)
                    {
                        if (ddlMainJrLed.Items.Count > 0)
                        {
                            string linkName = "JournalFessSettings";
                            string store = Convert.ToString(ddlMainJrHed.SelectedItem.Value) + "," + Convert.ToString(ddlMainJrLed.SelectedItem.Value);
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "' ) update New_InsSettings set LinkValue ='" + store + "' where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('" + linkName + "','" + store + "','" + selected_usercode + "','" + Convert.ToString(ddlcollege.SelectedItem.Value) + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                        }
                    }

                    //Admission Bank 
                    if (ddlAdmissionBank.Items.Count > 0)
                    {
                        string store = Convert.ToString(ddlAdmissionBank.SelectedItem.Value);
                        insqry1 = "if exists (select * from New_InsSettings where LinkName='AdmissionBankForChallan' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "' ) update New_InsSettings set LinkValue ='" + store + "' where LinkName='AdmissionBankForChallan' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('AdmissionBankForChallan','" + store + "','" + selected_usercode + "','" + Convert.ToString(ddlcollege.SelectedItem.Value) + "')";
                        save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    }
                    // Day Scholar Student Mess Setting zzz
                    if (ddl_studmessheader.Items.Count > 0)
                    {
                        if (ddl_studmessledger.Items.Count > 0)
                        {
                            double amt = 0;
                            double.TryParse(txt_messAmount.Text, out amt);
                            string store = Convert.ToString(ddl_studmessheader.SelectedItem.Value) + "," + Convert.ToString(ddl_studmessledger.SelectedItem.Value) + "," + amt;
                            insqry1 = "if exists (select * from InsSettings where LinkName='DayScholarStudentMessSetting' and college_code ='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "' ) update InsSettings set LinkValue ='" + store + "' where LinkName='DayScholarStudentMessSetting' and college_code ='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "' else insert into InsSettings(LinkName,LinkValue,college_code) values ('DayScholarStudentMessSetting','" + store + "','" + Convert.ToString(ddlcollege.SelectedItem.Value) + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                        }
                    }
                    //Call Letter Format
                    if (ddlCallLetter.Items.Count > 0)
                    {
                        string store = Convert.ToString(ddlCallLetter.SelectedIndex);
                        insqry1 = "if exists (select * from New_InsSettings where LinkName='AdmissionCallLetterSetting' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + store + "' where LinkName='AdmissionCallLetterSetting' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('AdmissionCallLetterSetting','" + store + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                        save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    }
                    ////Admission Confirmation
                    //storevalue = rblAdmConf.SelectedIndex;
                    //insqry1 = "if exists (select * from New_InsSettings where LinkName='AdmissionConfirmSetting' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='AdmissionConfirmSetting' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('AdmissionConfirmSetting','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    //save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Show fees structure on admission admit
                    //if (cbAdmFeeStuct.Checked)
                    //{
                    //    storevalue = 1;
                    //}
                    //else
                    //{
                    //    storevalue = 0;
                    //}
                    //insqry1 = "if exists (select * from New_InsSettings where LinkName='AdmissionShowFeeStructure' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='AdmissionShowFeeStructure' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('AdmissionShowFeeStructure','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    //save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Sudhagar 25-03-2016 Transport Ledger Setttings
                    if (ddlhdrtrans.Items.Count > 0)
                    {
                        if (ddllgrtrans.Items.Count > 0)
                        {
                            string store = Convert.ToString(ddlhdrtrans.SelectedItem.Value) + "," + Convert.ToString(ddllgrtrans.SelectedItem.Value);
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='TransportLedgerValue' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + store + "' where LinkName='TransportLedgerValue' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('TransportLedgerValue','" + store + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                        }
                    }
                    //Include Finance for Leave Request
                    storevalue = 0;
                    if (chkIncFinLeaveRequest.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='IncludeFinanceLeaveRequest' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='IncludeFinanceLeaveRequest' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('IncludeFinanceLeaveRequest','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Show Scheme Settings
                    storevalue = 0;
                    if (chkShowSchemeSettings.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='ShowSchemeSettings' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ShowSchemeSettings' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ShowSchemeSettings','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Include Discontinued and Course completed students in journal
                    storevalue = 0;
                    if (chkJourDisc.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='IncludeDiscontinuedInJournal' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='IncludeDiscontinuedInJournal' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('IncludeDiscontinuedInJournal','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    storevalue = 0;
                    if (chkJourCc.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='IncludeCompletedInJournal' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='IncludeCompletedInJournal' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('IncludeCompletedInJournal','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Show students display position in Journal
                    storevalue = 0;
                    if (chkStudDispPosJour.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='StudentsDisplayPositioninJournal' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='StudentsDisplayPositioninJournal' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('StudentsDisplayPositioninJournal','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //paymode setting added by sudhagar 24.12.2016
                    storevalue = 0;
                    string payValue = string.Empty;
                    if (cbinclpay.Checked)
                        storevalue = 1;
                    if (storevalue == 1)
                    {
                        for (int pay = 0; pay < cblpaymode.Items.Count; pay++)
                        {
                            if (cblpaymode.Items[pay].Selected == true)
                            {
                                if (payValue == string.Empty)
                                    payValue = Convert.ToString(cblpaymode.Items[pay].Value);
                                else
                                    payValue = payValue + "," + Convert.ToString(cblpaymode.Items[pay].Value);
                            }
                        }
                    }
                    if (payValue == string.Empty)
                        payValue = "0";
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='IncludePaymodeSettings' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='IncludePaymodeSettings' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('IncludePaymodeSettings','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    save1 = 0;
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='IncludePaymodeSettingsValue' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + payValue + "' where LinkName='IncludePaymodeSettingsValue' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('IncludePaymodeSettingsValue','" + payValue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    #endregion


                    #region tab rights
                    string strVal = string.Empty;
                    if (cbRcptStud.Checked)
                        strVal = "1";
                    else
                        strVal = "0";
                    if (cbRcptStaff.Checked)
                        strVal += "$" + "2";
                    else
                        strVal += "$" + "0";
                    if (cbRcptVendor.Checked)
                        strVal += "$" + "3";
                    else
                        strVal += "$" + "0";
                    if (cbRcptOther.Checked)
                        strVal += "$" + "4";
                    else
                        strVal += "$" + "0";
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='FinanceReceiptTabRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + strVal + "' where LinkName='FinanceReceiptTabRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('FinanceReceiptTabRights','" + strVal + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");

                    strVal = string.Empty;
                    if (cbPayStud.Checked)
                        strVal = "1";
                    else
                        strVal = "0";
                    if (cbPayStaff.Checked)
                        strVal += "$" + "2";
                    else
                        strVal += "$" + "0";
                    if (cbPayVendor.Checked)
                        strVal += "$" + "3";
                    else
                        strVal += "$" + "0";
                    if (cbPayOther.Checked)
                        strVal += "$" + "4";
                    else
                        strVal += "$" + "0";
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='FinancePaymentTabRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + strVal + "' where LinkName='FinancePaymentTabRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('FinancePaymentTabRights','" + strVal + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    #endregion

                    #region added by saranya for receipt cancel sms or mail on 06 Dec 2017

                    strVal = string.Empty;
                    if (cbSms.Checked)
                        strVal = "1";
                    else
                        strVal = "0";
                    if (cbMail.Checked)
                        strVal += "$" + "2";
                    else
                        strVal += "$" + "0";

                    insqry1 = "if exists (select * from New_InsSettings where LinkName='FinanceCancelReceiptSmsOrEmail' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + strVal + "' where LinkName='FinanceCancelReceiptSmsOrEmail' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('FinanceCancelReceiptSmsOrEmail','" + strVal + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");



                    #endregion



                    //SCholarship
                    storevalue = 0;
                    if (cblScholarship.Items[0].Selected)
                    {
                        //Common
                        storevalue = 0;
                    }
                    else
                        if (cblScholarship.Items[1].Selected)
                        {
                            //Ledgerwise
                            storevalue = 1;
                        }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='ScholarshipType' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ScholarshipType' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ScholarshipType','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //balance
                    storevalue = 0;
                    if (rblShowBal.Items[0].Selected)
                    {
                        //Current Ledgers
                        storevalue = 0;
                    }
                    else
                        if (rblShowBal.Items[1].Selected)
                        {
                            //Total Ledgers
                            storevalue = 1;
                        }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='ShowBalanceType' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ShowBalanceType' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ShowBalanceType','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Admission Bank 
                    if (ddlAdmissionBank.Items.Count > 0)
                    {
                        string store = Convert.ToString(ddlAdmissionBank.SelectedItem.Value);
                        insqry1 = "if exists (select * from New_InsSettings where LinkName='AdmissionBankForChallan' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + store + "' where LinkName='AdmissionBankForChallan' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('AdmissionBankForChallan','" + store + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                        save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    }
                    //Allow duplicate receipt from bank import
                    storevalue = 0;
                    if (cbAllowDupRcptBnkImpt.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='AllowDupReceiptBankimport' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='AllowDupReceiptBankimport' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('AllowDupReceiptBankimport','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Automatically clear cheque
                    storevalue = 0;
                    if (cb_autoClrCheque.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='AutomaticallyClearCheque' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='AutomaticallyClearCheque' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('AutomaticallyClearCheque','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Include Finance Link In Admission
                    storevalue = 0;
                    if (cbIncFinLink.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='IncludeFinanceLinkInAdmission' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='IncludeFinanceLinkInAdmission' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('IncludeFinanceLinkInAdmission','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Send SMS after application saved
                    storevalue = 0;
                    if (chkAdmSms.Checked)
                    {
                        storevalue = 1;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='SendSMSafterapplicationsaved' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='SendSMSafterapplicationsaved' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('SendSMSafterapplicationsaved','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Students from Admission
                    storevalue = 0;
                    storevalue = ddlStudAppAdmShort.SelectedIndex;
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='StudentAppliedShorlistAdmit' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='StudentAppliedShorlistAdmit' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('StudentAppliedShorlistAdmit','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Admission Confirmation
                    storevalue = rblAdmConf.SelectedIndex;
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='AdmissionConfirmSetting' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='AdmissionConfirmSetting' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('AdmissionConfirmSetting','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //addmission Confirmation fee paid structure challan or receipt
                    storevalue = rbfeesstr.SelectedIndex;
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='AdmissionConfirmFeesStructureSetting' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='AdmissionConfirmFeesStructureSetting' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('AdmissionConfirmFeesStructureSetting','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //Show fees structure on admission admit
                    if (cbAdmFeeStuct.Checked)
                    {
                        storevalue = 1;
                    }
                    else
                    {
                        storevalue = 0;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='AdmissionShowFeeStructure' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='AdmissionShowFeeStructure' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('AdmissionShowFeeStructure','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");

                    //Show Group Headerwise fees display
                    if (chkDispGhorHead.Checked)
                    {
                        storevalue = 1;
                    }
                    else
                    {
                        storevalue = 0;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='ShowDisplayGroupHeaderWise' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ShowDisplayGroupHeaderWise' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ShowDisplayGroupHeaderWise','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //abarna
                    //headerwise Added
                    if (chkheaderwise.Checked)
                    {
                        storevalue = 1;
                    }
                    else
                    {
                        storevalue = 0;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='ShowDisplayHeaderWise' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ShowDisplayHeaderWise' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ShowDisplayHeaderWise','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");

                    //ledgerwise
                    if (chkledgerwise.Checked)
                    {
                        storevalue = 1;
                    }
                    else
                    {
                        storevalue = 0;
                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='ShowDisplayLedgerWise' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ShowDisplayLedgerWise' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ShowDisplayLedgerWise','" + storevalue + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    // zzz may 26 2016
                    string pdfformate = string.Empty;
                    if (rdb_pdfFormat1.Checked == true)
                    {
                        pdfformate = "0";
                    }
                    if (pdfformate != "")
                    {
                        string appsave = "if exists(select * from Master_Settings where settings='Application Pdf Format Setting' " + userorgropcode + " )update Master_Settings set value='" + pdfformate + "' where settings='Application Pdf Format Setting' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Application Pdf Format Setting','" + pdfformate + "')";
                        int cc = dasri.update_method_wo_parameter(appsave, "text");
                    }
                    #endregion
                    //25.02.17 barath
                    int app_printformate = 0;
                    app_printformate = rdo_appprintformate.SelectedIndex;
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Online_Application_Print_Pdf_Format' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + app_printformate + "' where LinkName='Online_Application_Print_Pdf_Format' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Online_Application_Print_Pdf_Format','" + app_printformate + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //25.09.17 barath IT Calculation Form 16
                    if (cb_AllMonth.Checked == true)
                    {
                        string savecopy = "if exists(select linkValue from New_InsSettings where LinkName='Form16 Calculate All Month'  and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='1' where LinkName='Form16 Calculate All Month' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Form16 Calculate All Month','1','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select linkValue from New_InsSettings where LinkName='Form16 Calculate All Month'  and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='0' where LinkName='Form16 Calculate All Month' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Form16 Calculate All Month','0','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                        save1 = d2.update_method_wo_parameter(insqry1, "Text");
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }


                    //27.02.17 barath
                    string app_gensettings = "";
                    if (rdb_genderset.Items[3].Selected == true)
                    {
                        app_gensettings = "3";
                    }
                    else if (rdb_genderset.Items[0].Selected == true && rdb_genderset.Items[1].Selected == true)
                    {
                        app_gensettings = "0,1";
                    }
                    else if (rdb_genderset.Items[0].Selected == true && rdb_genderset.Items[2].Selected == true)
                    {
                        app_gensettings = "0,2";
                    }
                    else if (rdb_genderset.Items[1].Selected == true && rdb_genderset.Items[2].Selected == true)
                    {
                        app_gensettings = "1,2";
                    }
                    else if (rdb_genderset.Items[0].Selected == true)
                    {
                        app_gensettings = "0";
                    }
                    else if (rdb_genderset.Items[1].Selected == true)
                    {
                        app_gensettings = "1";
                    }
                    else if (rdb_genderset.Items[2].Selected == true)
                    {
                        app_gensettings = "2";
                    }

                    else
                    { app_gensettings = "3"; }//common settings
                    string collegecodelevel = ddlcollegename.SelectedItem.Value;//modified
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Online_Application_Gender_Settings' and user_code ='" + selected_usercode + "' and college_code in(" + collegecodelevel + ") ) update New_InsSettings set LinkValue ='" + app_gensettings + "' where LinkName='Online_Application_Gender_Settings' and user_code ='" + selected_usercode + "' and college_code in(" + collegecodelevel + ") else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Online_Application_Gender_Settings','" + app_gensettings + "','" + selected_usercode + "','" + collegecodelevel + "')";
                    //save1 = d2.update_method_wo_parameter(insqry1, "Text");

                    //03.08.17
                    string transferRefund = string.Empty;
                    for (int k = 0; k < cbl_transferrefund.Items.Count; k++)
                    {
                        if (cbl_transferrefund.Items[k].Selected == true)
                        {
                            transferRefund += "," + Convert.ToString(cbl_transferrefund.Items[k].Value);
                        }
                        else
                            transferRefund += "," + "0";
                    }
                    if (!string.IsNullOrEmpty(transferRefund))
                    {
                        insqry1 = "if exists (select * from New_InsSettings where LinkName='Transfer and Refund Settings' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + transferRefund.TrimStart(',') + "' where LinkName='Transfer and Refund Settings' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Transfer and Refund Settings','" + transferRefund.TrimStart(',') + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                        save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    }
                    //30.03.17 barath
                    if (ddl_admissionH.Items.Count > 0 && ddl_admissionL.Items.Count > 0)
                    {
                        app_gensettings = "";
                        if (cb_hosteladmissionformfee.Checked == true)
                            app_gensettings = "1";
                        else
                            app_gensettings = "0";
                        string hosteladmissionformfeeset = app_gensettings + "$" + Convert.ToString(ddl_admissionH.SelectedItem.Value + "," + ddl_admissionL.SelectedItem.Value + "$" + txt_admissionfee.Text);

                        insqry1 = "if exists (select * from New_InsSettings where LinkName='Hostel_Admission_Form_Fee' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + hosteladmissionformfeeset + "' where LinkName='Hostel_Admission_Form_Fee' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Hostel_Admission_Form_Fee','" + hosteladmissionformfeeset + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                        save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    }
                    //15.11.17 barath
                    app_gensettings = "0";
                    if (cbApprovalLeave.Checked == true)
                        app_gensettings = "1";
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Approval leave Cancel Rights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + app_gensettings + "' where LinkName='Approval leave Cancel Rights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Approval leave Cancel Rights','" + app_gensettings + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    string reqcancel = "0";
                    string qry = string.Empty;
                    if (cb_requestforcancel.Checked ==true)
                    {
                        reqcancel = "1";
                        qry = "if exists (select * from New_InsSettings where LinkName='Requestforcancel' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + reqcancel + "' where LinkName='Requestforcancel' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Requestforcancel','" + reqcancel + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                        int val = d2.update_method_wo_parameter(qry, "Text");
                    }
                    else if (cb_requestforcancel.Checked == false)
                    {
                        reqcancel = "0";
                        qry = "if exists (select * from New_InsSettings where LinkName='Requestforcancel' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + reqcancel + "' where LinkName='Requestforcancel' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Requestforcancel','" + reqcancel + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                        int val = d2.update_method_wo_parameter(qry, "Text");

                    }

                    // poomalar 29.11.17
                    app_gensettings = "0";
                    if (cb_allowfuture.Checked == true)
                        app_gensettings = "1";
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Allow Future Attendance' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + app_gensettings + "' where LinkName='Allow Future Attendance' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Allow Future Attendance','" + app_gensettings + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");

                    string smsrifhts = "0";
                    string smsrightsqry = string.Empty;
                    if (cb_sendsmswhilerequest.Checked == true)
                        smsrifhts = "1";
                    smsrightsqry = "if exists (select * from New_InsSettings where LinkName='smssendwhilerequest' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + smsrifhts + "' where LinkName='smssendwhilerequest' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('smssendwhilerequest','" + smsrifhts + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                    int vals = d2.update_method_wo_parameter(smsrightsqry, "Text");
                    #region delsi 23/dec/2017
                    //delsi 22.12.17
                    string EnquiryVal = string.Empty;
                    if (cb_EnquiryRights.Checked == true)
                    {
                        EnquiryVal = "1";

                    }
                    else
                    {
                        EnquiryVal = "0";


                    }
                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Enquiry to Apply'  and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + EnquiryVal + "' where LinkName='Enquiry to Apply' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,college_code) values ('Enquiry to Apply','" + EnquiryVal + "','" + ddlcollege.SelectedItem.Value + "')";
                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    //delsi 22.12.2017
                    appformate = "";
                    if (Radio_formate1.Checked == true)
                    {
                        appformate = "0";
                    }
                    else if (Radio_formate2.Checked == true)
                    {
                        appformate = "1";
                    }
                    else if (Radio_both.Checked == true)
                    {
                        appformate = "2";

                    }
                    if (appformate != "")
                    {
                        string appsave = "if exists(select * from New_InsSettings where LinkName='Application format'  and college_code ='" + ddlcollege.SelectedItem.Value + "' )update New_InsSettings set LinkValue='" + appformate + "' where LinkName='Application format'  and college_code ='" + ddlcollege.SelectedItem.Value + "'  else insert into New_InsSettings (LinkName,LinkValue,college_code) values('Application format','" + appformate + "','" + ddlcollege.SelectedItem.Value + "')";
                        int cc = dasri.update_method_wo_parameter(appsave, "text");
                    }

                    #endregion

                    #region transport fee allotment
                    //TransportFeeIncludeAllotmentSettings  added by sudhagar 22-07
                    #region include transport fees setting
                    string transfees = string.Empty;
                    if (cbtransfees.Checked == true)
                        transfees = "1";
                    else
                        transfees = "0";
                    if (transfees != "")
                    {
                        string appsave = "if exists(select * from Master_Settings where settings='TransportFeeIncludeAllotmentSettings' " + userorgropcode + " )update Master_Settings set value='" + transfees + "' where settings='TransportFeeIncludeAllotmentSettings' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'TransportFeeIncludeAllotmentSettings','" + transfees + "')";
                        int cc = dasri.update_method_wo_parameter(appsave, "text");
                    }
                    #endregion



                    string allotval = string.Empty;
                    transmoth = rs1.GetSelectedItemsValue(cbl_monthtrans);
                    if (rdo_transsem.Checked == true)
                        allotval = "1";
                    else if (rdo_transyear.Checked == true)
                        allotval = "2";
                    else if (rb_transterm.Checked == true)
                        allotval = "4";
                    else
                        allotval = "3";
                    if (allotval == "3")
                    {
                        transyr = Convert.ToString(ddl_transyear.SelectedItem.Text);
                        allotval = allotval + "-" + transmoth + ";" + transyr;
                    }
                    if (allotval != "")
                    {
                        string appsave = "if exists(select * from Master_Settings where settings='TransportFeeAllotmentSettings' " + userorgropcode + " )update Master_Settings set value='" + allotval + "' where settings='TransportFeeAllotmentSettings' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'TransportFeeAllotmentSettings','" + allotval + "')";
                        int cc = dasri.update_method_wo_parameter(appsave, "text");
                    }
                    #endregion
                    //if (rdb_ind.Checked == true)
                    //{
                    //    if (Cbcamcalculationlock.Checked == true)
                    //    {
                    //        string savecopy = "if exists(select * from Master_Settings where settings='CAM Calculation Lock' " + userorgropcode + " )update Master_Settings set value='1' where settings='CAM Calculation Lock' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'CAM Calculation Lock','1')";
                    //        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    //    }
                    //    else
                    //    {
                    //        string savecopy = "if exists(select * from Master_Settings where settings='CAM Calculation Lock' " + userorgropcode + " )update Master_Settings set value='0' where settings='CAM Calculation Lock' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'CAM Calculation Lock','0')";
                    //        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    //    }
                    //}
                    //--------End-------------------------------------
                    //Start Roll No---------------------------------------------------------------------------------------------------------------------------------------
                    // added by Sridharan 11 / mar / 2015
                    if (rb_clg.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='schoolorcollege' " + userorgropcode + " )update Master_Settings set value='1' where settings='schoolorcollege' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'schoolorcollege','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else if (rb_sch.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='schoolorcollege' " + userorgropcode + " )update Master_Settings set value='0' where settings='schoolorcollege' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'schoolorcollege','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    //
                    //Start Added By Malang Raja on 26/03/2016 For Kongu 

                    if (cbDayOrder.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='DayOrderWisePeriodAttendanceSettings' " + userorgropcode + " )update Master_Settings set value='1' where settings='DayOrderWisePeriodAttendanceSettings' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'DayOrderWisePeriodAttendanceSettings','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='DayOrderWisePeriodAttendanceSettings' " + userorgropcode + " )update Master_Settings set value='0' where settings='DayOrderWisePeriodAttendanceSettings' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'DayOrderWisePeriodAttendanceSettings','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }

                    #region Added By Malang Raja on Nov 30 2016
                    if (chkIncludeCondoUnpaid.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='IncludeCondonationUnpaidStudentsInCoeMarkEntry' " + userorgropcode + " )update Master_Settings set value='1' where settings='IncludeCondonationUnpaidStudentsInCoeMarkEntry' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'IncludeCondonationUnpaidStudentsInCoeMarkEntry','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='IncludeCondonationUnpaidStudentsInCoeMarkEntry' " + userorgropcode + " )update Master_Settings set value='0' where settings='IncludeCondonationUnpaidStudentsInCoeMarkEntry' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'IncludeCondonationUnpaidStudentsInCoeMarkEntry','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    #endregion Added By Malang Raja on Nov 30 2016

                    #region Added By Malang Raja on Mar 13 2017

                    if (chkCIALock.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='CAM CIA Mark Entry Lock' " + userorgropcode + " )update Master_Settings set value='1' where settings='CAM CIA Mark Entry Lock' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'CAM CIA Mark Entry Lock','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='CAM CIA Mark Entry Lock' " + userorgropcode + " )update Master_Settings set value='0' where settings='CAM CIA Mark Entry Lock' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'CAM CIA Mark Entry Lock','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }

                    #endregion Added By Malang Raja on Mar 13 2017

                    #region Added By Malang Raja on Dec 3 2016

                    if (chkShowGradeInCamCalulationDetails.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='ShowGradeInCamCalulationDetails' " + userorgropcode + " )update Master_Settings set value='1' where settings='ShowGradeInCamCalulationDetails' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'ShowGradeInCamCalulationDetails','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='ShowGradeInCamCalulationDetails' " + userorgropcode + " )update Master_Settings set value='0' where settings='ShowGradeInCamCalulationDetails' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'ShowGradeInCamCalulationDetails','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }

                    #endregion Added By Malang Raja on Dec 3 2016

                    #region Added by Prabha on Dec 12 2017

                    if (chk_AlertMsgForAttendance.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='AlertMessageForAttendance' " + userorgropcode + " )update Master_Settings set value='1' where settings='AlertMessageForAttendance' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'AlertMessageForAttendance','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='AlertMessageForAttendance' " + userorgropcode + " )update Master_Settings set value='0' where settings='AlertMessageForAttendance' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'AlertMessageForAttendance','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }

                    #endregion

                    if (cbRetestSettings.Checked == true)
                    {
                        //RetestMarkEntryBasedOnOptionalMinMarks
                        string savecopy = "if exists(select * from Master_Settings where settings='RetestMarkEntryBasedOnOptionalMinMarks' " + userorgropcode + " )update Master_Settings set value='1' where settings='RetestMarkEntryBasedOnOptionalMinMarks' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'RetestMarkEntryBasedOnOptionalMinMarks','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='RetestMarkEntryBasedOnOptionalMinMarks' " + userorgropcode + " )update Master_Settings set value='0' where settings='RetestMarkEntryBasedOnOptionalMinMarks' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'RetestMarkEntryBasedOnOptionalMinMarks','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }

                    #region  Added By Malang Raja on Oct 10 2017

                    insqry1 = "if exists(select * from Master_Settings where settings='CAM Entry Based On Batch And Section Rights' " + userorgropcode + " ) update Master_Settings set value=" + ((chkCAMBasedBatchRights.Checked) ? "'1'" : "'0'") + " where settings='CAM Entry Based On Batch And Section Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'CAM Entry Based On Batch And Section Rights'," + ((chkCAMBasedBatchRights.Checked) ? "'1'" : "'0'") + ")";
                    save1 = dasri.update_method_wo_parameter(insqry1, "text");

                    #endregion Added By Malang Raja on Oct 10 2017

                    #region Added By Malang Raja on Jun 23 2017

                    if (chkApplicationNo.Checked == true)
                    {
                        //RetestMarkEntryBasedOnOptionalMinMarks
                        string savecopy = "if exists(select * from Master_Settings where settings='Application No' " + userorgropcode + " ) update Master_Settings set value='1' where settings='Application No' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Application No','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Application No' " + userorgropcode + " )update Master_Settings set value='0' where settings='Application No' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Application No','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    //magesh 23.6.18
                    if (Chkhostelid.Checked == true)
                    {
                        //RetestMarkEntryBasedOnOptionalMinMarks
                        string savecopy = "if exists(select * from Master_Settings where settings='Hostel Id' " + userorgropcode + " ) update Master_Settings set value='1' where settings='Hostel Id' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Hostel Id','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Hostel Id' " + userorgropcode + " )update Master_Settings set value='0' where settings='Hostel Id' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Hostel Id','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }  //magesh 23.6.18
                    if (chkPresentAbsent.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Require Present/Absent Only' " + userorgropcode + " )update Master_Settings set value='1' where settings='Require Present/Absent Only' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Require Present/Absent Only','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Require Present/Absent Only' " + userorgropcode + " )update Master_Settings set value='0' where settings='Require Present/Absent Only' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Require Present/Absent Only','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }

                    if (chkNeedReson.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Require Reason in the Staff Attendance' " + userorgropcode + " )update Master_Settings set value='1' where settings='Require Reason in the Staff Attendance' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Require Reason in the Staff Attendance','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Require Reason in the Staff Attendance' " + userorgropcode + " )update Master_Settings set value='0' where settings='Require Reason in the Staff Attendance' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Require Reason in the Staff Attendance','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }

                    if (chkAttendanceCount.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Require Students Attendance Count' " + userorgropcode + " )update Master_Settings set value='1' where settings='Require Students Attendance Count' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Require Students Attendance Count','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Require Students Attendance Count' " + userorgropcode + " )update Master_Settings set value='0' where settings='Require Students Attendance Count' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Require Students Attendance Count','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }

                    string ODCheckValue = string.Empty; // Added by Jairam 14-08-2017
                    string IsFlage = string.Empty;
                    if (cbOdEnteryCheck.Checked == true)
                    {
                        IsFlage = "1";
                        ODCheckValue = Convert.ToString(txtODCount.Text);
                    }
                    else
                    {
                        IsFlage = "0";
                        ODCheckValue = "0";
                    }
                    ODCheckValue = IsFlage + ";" + ODCheckValue;
                    string insQuery = "if exists (select linkValue from inssettings where linkName='NoOfOdPerStudents' and College_code ='" + ddlcollege.SelectedValue + "') update inssettings set linkValue='" + ODCheckValue + "' where linkName='NoOfOdPerStudents' and College_code ='" + ddlcollege.SelectedValue + "' else insert into inssettings (linkName,LinkValue,College_code) values ('NoOfOdPerStudents','" + ODCheckValue + "','" + ddlcollege.SelectedValue + "')";
                    int InsFlag = dasri.update_method_wo_parameter(insQuery, "text");


                    //added by Mullai
                    string limitflag = string.Empty;
                    if (cbodlimitexceeds.Checked == true)
                    {
                        limitflag = "1";
                    }
                    else
                    {
                        limitflag = "0";
                    }
                    string qryod = "if exists (select linkValue from inssettings where linkName='OD Limit Exceeds' and College_code ='" + ddlcollege.SelectedValue + "') update inssettings set linkValue='" + limitflag + "' where linkName='OD Limit Exceeds' and College_code ='" + ddlcollege.SelectedValue + "' else insert into inssettings (linkName,LinkValue,College_code) values ('OD Limit Exceeds','" + limitflag + "','" + ddlcollege.SelectedValue + "')";
                    int odval = dasri.update_method_wo_parameter(qryod, "text");

                    #endregion Added By Malang Raja on Jun 23 2017

                    #region Copy SMS Save
                    string validMobNumber = string.Empty;
                    string invalidMobNumber = string.Empty;
                    string qrysmsemail = string.Empty;
                    int resultsms = 0;
                    bool succsms = false;
                    if (txt_CopySmsMobNo.Text != "")
                    {
                        string[] strMobnumber = txt_CopySmsMobNo.Text.Trim().Trim(',').Split(',');
                        if (strMobnumber.Length > 0)
                        {
                            bool invalid = false;
                            for (int smsno = 0; smsno < strMobnumber.Length; smsno++)
                            {
                                string number = string.Empty;
                                if (IsValidMobNo(strMobnumber[smsno].Trim().Trim(','), ref number))
                                {
                                    if (validMobNumber == "")
                                    {
                                        validMobNumber = number;
                                    }
                                    else
                                    {
                                        validMobNumber += "," + number;
                                    }
                                }
                                else
                                {
                                    invalid = true;
                                    if (invalidMobNumber == "")
                                    {
                                        invalidMobNumber = number;
                                    }
                                    else
                                    {
                                        invalidMobNumber += "," + number;
                                    }
                                }
                            }
                            qrysmsemail = "if exists(select * from Master_Settings where settings='Copy of SMS') update Master_Settings set value='" + validMobNumber + "' where settings='Copy of SMS' else insert into Master_Settings (settings,value) values('Copy of SMS','" + validMobNumber + "')";
                            if (invalid)
                            {
                                spnSmsError.Text = "Please Enter 10-Digits Mobile Numbers Seperated By Comma!!! Invalid Mobile Numbers Are " + invalidMobNumber;
                                spnSmsError.Visible = true;
                            }
                            else
                            {
                                spnSmsError.Text = string.Empty;
                                //spnSmsError.Visible = false;
                            }
                            txt_CopySmsMobNo.Text = validMobNumber;
                        }
                        else
                        {
                            qrysmsemail = "if exists(select * from Master_Settings where settings='Copy of SMS') update Master_Settings set value='' where settings='Copy of SMS' else insert into Master_Settings (settings,value) values('Copy of SMS','')";
                        }
                        resultsms = d2.update_method_wo_parameter(qrysmsemail, "text");
                    }
                    else
                    {
                        qrysmsemail = "if exists(select * from Master_Settings where settings='Copy of SMS') update Master_Settings set value='' where settings='Copy of SMS' else insert into Master_Settings (settings,value) values('Copy of SMS','')";
                        resultsms = d2.update_method_wo_parameter(qrysmsemail, "text");
                    }
                    if (resultsms > 0)
                    {
                        succsms = true;
                    }
                    #endregion Copy SMS Save

                    #region Copy EMAIL Save
                    int resultemail = 0;
                    bool succemail = false;
                    qrysmsemail = string.Empty;
                    string validEmailId = string.Empty;
                    string invalidEmailId = string.Empty;
                    if (txt_CopyEmailid.Text != "")
                    {
                        string[] strEmailId = txt_CopyEmailid.Text.Trim().Trim(',').Split(',');
                        if (strEmailId.Length > 0)
                        {
                            bool invalid = false;
                            for (int emailid = 0; emailid < strEmailId.Length; emailid++)
                            {
                                string emailids = string.Empty;
                                if (IsValidEmailId(strEmailId[emailid].Trim().Trim(','), ref emailids))
                                {
                                    if (validEmailId == "")
                                    {
                                        validEmailId = emailids;
                                    }
                                    else
                                    {
                                        validEmailId += "," + emailids;
                                    }
                                }
                                else
                                {
                                    invalid = true;
                                    if (invalidEmailId == "")
                                    {
                                        invalidEmailId = emailids;
                                    }
                                    else
                                    {
                                        invalidEmailId += "," + emailids;
                                    }
                                }
                            }
                            qrysmsemail = "if exists(select * from Master_Settings where settings='Copy of Email') update Master_Settings set value='" + validEmailId + "' where settings='Copy of Email' else insert into Master_Settings (settings,value) values('Copy of Email','" + validEmailId + "')";
                            if (invalid)
                            {
                                spnEmailError.Text = "Please Enter Valid Email Ids Seperated By Comma!!! Invalid Email Ids Are " + invalidEmailId;
                                spnEmailError.Visible = true;
                            }
                            else
                            {
                                spnEmailError.Text = string.Empty;
                                //spnEmailError.Visible = false;
                            }
                            txt_CopyEmailid.Text = validEmailId;
                        }
                        else
                        {
                            qrysmsemail = "if exists(select * from Master_Settings where settings='Copy of Email') update Master_Settings set value='' where settings='Copy of Email' else insert into Master_Settings (settings,value) values('Copy of Email','')";
                        }
                        resultemail = d2.update_method_wo_parameter(qrysmsemail, "text");
                    }
                    else
                    {
                        qrysmsemail = "if exists(select * from Master_Settings where settings='Copy of Email') update Master_Settings set value='' where settings='Copy of Email' else insert into Master_Settings (settings,value) values('Copy of Email','')";
                        resultemail = d2.update_method_wo_parameter(qrysmsemail, "text");
                    }
                    if (resultemail > 0)
                    {
                        succemail = true;
                    }
                    #endregion Copy EMAIL Save

                    //End Added By Malang Raja on 26/03/2016
                    if (txtmail.Text != "" && Txtpass.Text!="")
                    {
                        string[] spl = txtmail.Text.Split(',');
                        string sqlmail = "if exists ( select * from CO_MasterValues where MasterCriteria ='Grievance From Mail' and CollegeCode ='" + ddlcollege.SelectedItem.Value + "') update CO_MasterValues set MasterValue ='" + txtmail.Text + "' where  MasterCriteria ='Grievance From Mail' and CollegeCode ='" + ddlcollege.SelectedItem.Value + "' else insert into CO_MasterValues (MasterValue,MasterCriteria,CollegeCode) values ('" + txtmail.Text + "','Grievance From Mail','" + ddlcollege.SelectedItem.Value + "') ";
                        int insert = d2.update_method_wo_parameter(sqlmail, "text");
                        string[] spl1 = txtmail.Text.Split(',');
                        string sqlmail1 = "if exists ( select * from CO_MasterValues where MasterCriteria ='Grievance From Mail Password' and CollegeCode ='" + ddlcollege.SelectedItem.Value + "') update CO_MasterValues set MasterValue ='" + Txtpass.Text + "' where  MasterCriteria ='Grievance From Mail Password' and CollegeCode ='" + ddlcollege.SelectedItem.Value + "' else insert into CO_MasterValues (MasterValue,MasterCriteria,CollegeCode) values ('" + Txtpass.Text + "','Grievance From Mail Password','" + ddlcollege.SelectedItem.Value + "') ";
                        int insert1 = d2.update_method_wo_parameter(sqlmail1, "text");
                    }
                   
                    if (txttomail.Text != "")
                    {
                        string[] spl = txttomail.Text.Split(',');
                        string sqlmail = "if exists ( select * from CO_MasterValues where MasterCriteria ='Grievance To Mail' and CollegeCode ='" + ddlcollege.SelectedItem.Value + "') update CO_MasterValues set MasterValue ='" + txttomail.Text + "' where  MasterCriteria ='Grievance To Mail' and CollegeCode ='" + ddlcollege.SelectedItem.Value + "' else insert into CO_MasterValues (MasterValue,MasterCriteria,CollegeCode) values ('" + txttomail.Text + "','Grievance To Mail','" + ddlcollege.SelectedItem.Value + "') ";
                        int insert = d2.update_method_wo_parameter(sqlmail, "text");

                    }



                    #region Added By Deepali on Nov 6 2017
                    string attnHour = string.Empty;
                    if (!string.IsNullOrEmpty(txt_attn_hour.Text) && !txt_attn_hour.Text.Trim().ToLower().Contains("select"))
                    {
                        attnHour = txt_attn_hour.Text;
                    }

                    string savecopy11 = "if exists(select * from Master_Settings where settings='Admin Attendane Hour Rights' " + userorgropcode + " )update Master_Settings set value='" + attnHour + "' where settings='Admin Attendane Hour Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Admin Attendane Hour Rights','" + attnHour + "')";
                    int copy11 = dasri.update_method_wo_parameter(savecopy11, "text");
                    //}
                    //else
                    //{
                    //    string savecopy = "if exists(select * from Master_Settings where settings='Admin Attendane Hour Rights' " + userorgropcode + " )update Master_Settings set value='0' where settings='Admin Attendane Hour Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Admin Attendane Hour Rights','0')";
                    //    int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    //}

                    #endregion Added By Deepali on Nov 6 2017



                    if (rbadmno.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da16 = new SqlDataAdapter("select * from Master_Settings where settings='" + rbadmno.Text + "' " + userorgropcode + "", con);
                    DataSet ds16 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + rbadmno.Text + "' " + userorgropcode + "", "Text");
                    //da16.Fill(ds16);
                    if (ds16.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='" + rbadmno.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + rbadmno.Text + "', '" + result + "', '" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    if (rbrollno.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da26 = new SqlDataAdapter("select * from Master_Settings where settings='" + rbrollno.Text + "' " + userorgropcode + "", con);
                    DataSet ds26 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + rbrollno.Text + "' " + userorgropcode + "", "text");
                    //  da26.Fill(ds26);
                    if (ds26.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='" + rbrollno.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + rbrollno.Text + "', '" + result + "', '" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    if (rbregno.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da27 = new SqlDataAdapter("select * from Master_Settings where settings='" + rbregno.Text + "' " + userorgropcode + "", con);
                    DataSet ds27 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + rbregno.Text + "' " + userorgropcode + "", "Text");
                    //da27.Fill(ds27);
                    if (ds27.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='" + rbregno.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + rbregno.Text + "', '" + result + "', '" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    if (txtdummy.Text == "")
                    {
                        txtdummy.Text = "30000000";
                    }
                    //SqlDataAdapter dadummy = new SqlDataAdapter("select * from Master_Settings where settings='" + lbldummy.Text + "' " + userorgropcode + "", con);
                    DataSet dsdummy = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + lbldummy.Text + "' " + userorgropcode + "", "text");
                    // dadummy.Fill(dsdummy);
                    if (dsdummy.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + txtdummy.Text + "  where  settings='" + lbldummy.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + lbldummy.Text + "', '" + txtdummy.Text + "', '" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    if (Chkrollno.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da = new SqlDataAdapter("select * from Master_Settings where settings='" + Chkrollno.Text + "' " + userorgropcode + "", con);
                    DataSet ds = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + Chkrollno.Text + "' " + userorgropcode + "", "Text");
                    //da.Fill(ds);
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='" + Chkrollno.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + Chkrollno.Text + "', '" + result + "', '" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    //End  Roll No---------------------------------------------------------------------------------------------------------------------------------------------
                    //Start Regno----------------------------------------------------------------------------------------------------------------------------------------------
                    if (chkregno.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da1 = new SqlDataAdapter("select * from Master_Settings where settings='" + chkregno.Text + "' " + userorgropcode + "", con);
                    DataSet ds1 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + chkregno.Text + "' " + userorgropcode + "", "text");
                    //da1.Fill(ds1);
                    if (ds1.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='" + chkregno.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + chkregno.Text + "', '" + result + "','" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    //End  Regno 
                    //----------------------------------------------------------------------------------------------------------------
                    //added by sudhagar 10.03.2016
                    if (chkadmno.Checked == true)
                        result = 1;
                    else
                        result = 0;

                    ds1 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + chkadmno.Text + "' " + userorgropcode + "", "text");
                    if (ds1.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='" + chkadmno.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + chkadmno.Text + "', '" + result + "','" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                    }
                    //End  admission no
                    //-------------------------------------------------------------------
                    //Start Admin-----------------------------------------------------------------------------------------------------------------
                    if (chkstud.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da2 = new SqlDataAdapter("select * from Master_Settings where settings='Student_Type' " + userorgropcode + "", con);
                    DataSet ds2 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='Student_Type' " + userorgropcode + "", "Text");
                    //da2.Fill(ds2);
                    if (ds2.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='Student_Type' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('Student_Type', '" + result + "','" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    //rpt display
                    int res = -1;
                    if (rptind.Checked == true)
                    {
                        res = 1;
                    }
                    else if (rptgen.Checked == true)
                    {
                        res = 0;
                    }
                    if (res != -1)
                    {
                        //SqlDataAdapter da37 = new SqlDataAdapter("select * from Master_Settings where settings='Report Display' " + userorgropcode + "", con);
                        DataSet ds37 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='Report Display' " + userorgropcode + "", "Text");
                        //da37.Fill(ds37);
                        if (ds37.Tables[0].Rows.Count > 0)
                        {
                            sqlstr = "update Master_Settings set value=" + res + "  where  settings='Report Display' " + userorgropcode + "";
                            insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                            //SqlCommand cmd = new SqlCommand(sqlstr);
                            //cmd.Connection = con;
                            //cmd.ExecuteNonQuery();
                        }
                        else
                        {
                            sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('Report Display', '" + res + "', '" + user_code + "')";
                            insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                            //SqlCommand cmd = new SqlCommand(sqlstr);
                            //cmd.Connection = con;
                            //cmd.ExecuteNonQuery();
                        }
                    }
                    //---------------------daywise attnd
                    if (daywise.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da_day = new SqlDataAdapter("select * from Master_Settings where settings='" + daywise.Text + "'  " + userorgropcode + "", con);
                    DataSet ds_day = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + daywise.Text + "'  " + userorgropcode + "", "Text");
                    //da_day.Fill(ds_day);
                    if (ds_day.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='" + daywise.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + daywise.Text + "', '" + result + "', '" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    //----------end daywise
                    //---------------------hourwise attnd
                    if (hourwise.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da_hour = new SqlDataAdapter("select * from Master_Settings where settings='" + hourwise.Text + "' " + userorgropcode + "", con);
                    DataSet ds_hour = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + hourwise.Text + "' " + userorgropcode + "", "Text");
                    // da_hour.Fill(ds_hour);
                    if (ds_hour.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='" + hourwise.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + hourwise.Text + "', '" + result + "', '" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    // Start Days Scholor-----------------------------------------------------------------------------------------------------
                    if (chkdayssch.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da5 = new SqlDataAdapter("select * from Master_Settings where settings='" + chkdayssch.Text + "' " + userorgropcode + "", con);
                    DataSet ds5 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + chkdayssch.Text + "' " + userorgropcode + "", "Text");
                    //da5.Fill(ds5);
                    if (ds5.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='" + chkdayssch.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + chkdayssch.Text + "', '" + result + "', '" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    //End Days Scholor-------------------------------------------------------------------------------------------------------------
                    // Start Regular----------------------------------------------------------------------------------------------------------------
                    if (chkregular.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da6 = new SqlDataAdapter("select * from Master_Settings where settings='" + chkregular.Text + "' " + userorgropcode + "", con);
                    DataSet ds6 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + chkregular.Text + "' " + userorgropcode + "", "Text");
                    //da6.Fill(ds6);
                    if (ds6.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='" + chkregular.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + chkregular.Text + "', '" + result + "', '" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    //End Regular----------------------------------------------------------------------------------------------------------------
                    // Start Lateral-------------------------------------------------------------------------------------------------------------
                    if (chklateral.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da7 = new SqlDataAdapter("select * from Master_Settings where settings='" + chklateral.Text + "' " + userorgropcode + "", con);
                    DataSet ds7 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + chklateral.Text + "' " + userorgropcode + "", "text");
                    //da7.Fill(ds7);
                    if (ds7.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='" + chklateral.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + chklateral.Text + "', '" + result + "', '" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    //End Lateral-----------------------------------------------------------------------------------------------------------------
                    // Start Transfer-------------------------------------------------------------------------------------------------------------
                    if (chktrans.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da8 = new SqlDataAdapter("select * from Master_Settings where settings='" + chktrans.Text + "' " + userorgropcode + "", con);
                    DataSet ds8 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + chktrans.Text + "' " + userorgropcode + "", "text");
                    //da8.Fill(ds8);
                    if (ds8.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='" + chktrans.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + chktrans.Text + "', '" + result + "', '" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    //End Transfer---------------------------------------------------------------------------------------------------------------------
                    // Start Male----------------------------------------------------------------------------------------------------------------------
                    if (chkmale.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da9 = new SqlDataAdapter("select * from Master_Settings where settings='" + chkmale.Text + "' " + userorgropcode + "", con);
                    DataSet ds9 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + chkmale.Text + "' " + userorgropcode + "", "text");
                    //da9.Fill(ds9);
                    if (ds9.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='" + chkmale.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + chkmale.Text + "', '" + result + "', '" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    //End Male--------------------------------------------------------------------------------------------------------------------
                    // Start Female------------------------------------------------------------------------------------------------------------------
                    if (Chkfemale.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da10 = new SqlDataAdapter("select * from Master_Settings where settings='" + Chkfemale.Text + "' " + userorgropcode + "", con);
                    DataSet ds10 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + Chkfemale.Text + "' " + userorgropcode + "", "text");
                    //da10.Fill(ds10);
                    if (ds10.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='" + Chkfemale.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + Chkfemale.Text + "', '" + result + "', '" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    //End Female-------------------------------------------------------------------------------------------------------------------------
                    // Start Hostel-----------------------------------------------------------------------------------------------------------------
                    if (Chkhostel.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da17 = new SqlDataAdapter("select * from Master_Settings where settings='" + Chkhostel.Text + "' " + userorgropcode + "", con);
                    DataSet ds17 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + Chkhostel.Text + "' " + userorgropcode + "", "Text");
                    //da17.Fill(ds17);
                    if (ds17.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='" + Chkhostel.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + Chkhostel.Text + "', '" + result + "', '" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    string str = string.Empty;
                    str = "General attend";
                    if (rbgeneral.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da18 = new SqlDataAdapter("select * from Master_Settings where settings='" + str + "' " + userorgropcode + "", con);
                    DataSet ds18 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + str + "' " + userorgropcode + "", "Text");
                    //da18.Fill(ds18);
                    if (ds18.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where settings='" + str + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + str + "', '" + result + "', '" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    // End General----------------------------------------------------------------------------------------------------------------------------------------
                    // Start Individual--------------------------------------------------------------------------------------------------------------
                    if (rbabsentees.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da19 = new SqlDataAdapter("select * from Master_Settings where settings='" + rbabsentees.Text + "' " + userorgropcode + "", con);
                    DataSet ds19 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + rbabsentees.Text + "' " + userorgropcode + "", "Text");
                    //da19.Fill(ds19);
                    if (ds19.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='" + rbabsentees.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + rbabsentees.Text + "', '" + result + "', '" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    if (rblesson.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da20 = new SqlDataAdapter("select * from Master_Settings where settings='" + rblesson.Text + "' " + userorgropcode + "", con);
                    DataSet ds20 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + rblesson.Text + "' " + userorgropcode + "", "Text");
                    // da20.Fill(ds20);
                    if (ds20.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='" + rblesson.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + rblesson.Text + "', '" + result + "', '" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    if (rbgeneralstaff.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //SqlDataAdapter da21 = new SqlDataAdapter("select * from Master_Settings where settings='" + rbgeneralstaff.Text + "' " + userorgropcode + "", con);
                    DataSet ds21 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + rbgeneralstaff.Text + "' " + userorgropcode + "", "text");
                    // da21.Fill(ds21);
                    if (ds21.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value=" + result + "  where  settings='" + rbgeneralstaff.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + rbgeneralstaff.Text + "', '" + result + "', '" + user_code + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    // financial year--------------------
                    //SqlDataAdapter da24 = new SqlDataAdapter("select * from Master_Settings where settings='" + startdate.Text + "' " + userorgropcode + "", con);
                    DataSet ds24 = dasri.select_method_wo_parameter("select * from Master_Settings where settings='" + startdate.Text + "' " + userorgropcode + "", "text");
                    //da24.Fill(ds24);
                    if (ds24.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value='" + starttext.Text + "-" + endtext.Text + "'  where  settings='" + startdate.Text + "' " + userorgropcode + "";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('" + startdate.Text + "', '" + starttext.Text + "-" + endtext.Text + "', " + user_code + ")";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    {
                        int count = 0;
                        int strdehins = 0;
                        string strval = "select * from security_user_right where   college_code=" + ddlcollege.SelectedItem.Value.ToString() + " " + user_gropcode + "";
                        DataSet dsva = dasri.select_method_wo_parameter(strval, "text");
                        if (dsva.Tables[0].Rows.Count > 0)
                        {
                            strval = "delete from security_user_right where   college_code=" + ddlcollege.SelectedItem.Value.ToString() + "" + user_gropcode + "";
                            strdehins = dasri.update_method_wo_parameter(strval, "text");
                        }

                        foreach (TreeNode node in TVset.CheckedNodes)
                        {
                            if (node.ChildNodes.Count == 0)
                            {
                                string r_text = node.Text;
                                string r_code = node.Value;
                                count = count + 1;
                                //insert
                                string module = string.Empty;
                                module = r_text.Replace("'", "''");
                                strval = "insert into security_user_right(" + struser_gruop + ",user_id,rights_code,rights_desc,college_code)values(" + selected_usercode.ToString() + ",'" + selected_userid.ToString() + "'," + r_code + ",'" + module + "'," + ddlcollege.SelectedItem.Value.ToString() + ")";
                                strdehins = dasri.update_method_wo_parameter(strval, "text");
                            }
                        }
                        count = 0;
                        foreach (TreeNode node in TVStudentlog.CheckedNodes)
                        {
                            if (node.ChildNodes.Count == 0)
                            {
                                string r_text = node.Text;
                                string r_code = node.Value;
                                if (count == 0)
                                {
                                    strval = "select * from security_user_right where   college_code=" + ddlcollege.SelectedItem.Value.ToString() + " and rights_code ='" + r_code + "' and rights_desc ='" + r_text + "'";
                                    dsva = dasri.select_method_wo_parameter(strval, "text");
                                    if (dsva.Tables[0].Rows.Count > 0)
                                    {
                                        strval = "delete from security_user_right where   college_code=" + ddlcollege.SelectedItem.Value.ToString() + " and ISNULL(user_code,0)=0  and ISNULL(group_code,0)=0";
                                        strdehins = dasri.update_method_wo_parameter(strval, "text");
                                    }
                                }
                                count = count + 1;
                                //insert
                                string module = string.Empty;
                                module = r_text.Replace("'", "''");
                                strval = "insert into security_user_right (rights_code,rights_desc,college_code) values(" + r_code + ",'" + module + "'," + ddlcollege.SelectedItem.Value.ToString() + ")";
                                strdehins = dasri.update_method_wo_parameter(strval, "text");
                            }
                        }
                        strval = "delete from DeptPrivilages where isnull(degree_code,'0')<>'0' " + user_gropcode + "";
                        strdehins = dasri.update_method_wo_parameter(strval, "text");
                        foreach (TreeNode node in TVDegreeRight.CheckedNodes)
                        {
                            if (node.ChildNodes.Count == 0)
                            {
                                string r_text = node.Text;
                                string r_code = node.Value;
                                strval = "insert into DeptPrivilages(" + struser_gruop + ",degree_code) values (" + selected_usercode.ToString() + ",'" + r_code + "')";
                                strdehins = dasri.update_method_wo_parameter(strval, "text");
                            }
                        }
                        FpCollRight.SaveChanges();
                        strval = "delete from collegeprivilages where isnull(college_code,'0')<>'0' " + user_gropcode + "";
                        strdehins = dasri.update_method_wo_parameter(strval, "text");
                        for (int cl = 0; cl < FpCollRight.Sheets[0].Rows.Count; cl++)
                        {
                            int isval = Convert.ToInt32(FpCollRight.Sheets[0].Cells[cl, 2].Value);
                            if (isval == 1)
                            {
                                string collrgstcode = FpCollRight.Sheets[0].Cells[cl, 1].Tag.ToString();
                                strval = "insert into collegeprivilages(" + struser_gruop + ",college_code) values (" + selected_usercode.ToString() + ",'" + collrgstcode + "')";
                                strdehins = dasri.update_method_wo_parameter(strval, "text");
                            }
                        }
                        for (int admit = 0; admit < chcklist.Items.Count; admit++)
                        {
                            if (chcklist.Items[admit].Selected == true)
                            {
                                if (rdb_ind.Checked == true)
                                {
                                    string value = chcklist.Items[admit].Text;
                                    string vl = chcklist.Items[admit].Value;
                                    string insert11 = "if exists(select * from security_user_right where user_id='" + selected_userid + "' and rights_code='" + vl + "' and user_code='" + selected_usercode + "' and rights_desc='Online Admission' and college_code='" + Convert.ToString(ddlcollege.SelectedValue) + "') delete from security_user_right where user_id='" + selected_userid + "' and user_code='" + selected_usercode + "' and rights_code='" + vl + "' and rights_desc='Online Admission' and college_code='" + Convert.ToString(ddlcollege.SelectedValue) + "'  insert into security_user_right(user_code,user_id,rights_code,rights_desc,college_code)values('" + selected_usercode + "','" + selected_userid + "','" + vl + "','Online Admission','" + Convert.ToString(ddlcollege.SelectedValue) + "')";
                                    int k = dasri.update_method_wo_parameter(insert11, "text");
                                }
                                else if (rdb_grp.Checked == true)
                                {
                                    string value = chcklist.Items[admit].Text;
                                    string vl = chcklist.Items[admit].Value;
                                    string insert11 = "if exists(select * from security_user_right where user_id='" + selected_userid + "' and rights_code='" + vl + "' and group_code='" + selected_usercode + "'  and rights_desc='Online Admission' and college_code='" + Convert.ToString(ddlcollege.SelectedValue) + "') delete from security_user_right where user_id='" + selected_userid + "'  and rights_code='" + vl + "' and rights_desc='Online Admission' and college_code='" + Convert.ToString(ddlcollege.SelectedValue) + "' and group_code='" + selected_usercode + "' insert into security_user_right(user_id,rights_code,rights_desc,college_code,group_code)values('" + selected_userid + "','" + vl + "','Online Admission','" + Convert.ToString(ddlcollege.SelectedValue) + "','" + selected_usercode + "')";
                                    int k = dasri.update_method_wo_parameter(insert11, "text");
                                }
                            }
                        }
                        //added by sudhagar enrollment settings
                        for (int admit = 0; admit < cblenroll.Items.Count; admit++)
                        {
                            if (cblenroll.Items[admit].Selected == true)
                            {
                                if (rdb_ind.Checked == true)
                                {
                                    string value = cblenroll.Items[admit].Text;
                                    string vl = cblenroll.Items[admit].Value;
                                    string INSert = "if exists(select * from security_user_right where user_id='" + selected_userid + "' and rights_code='" + vl + "' and user_code='" + selected_usercode + "' and rights_desc='Enrollment Settings' and college_code='" + Convert.ToString(ddlcollege.SelectedValue) + "') delete from security_user_right where user_id='" + selected_userid + "' and user_code='" + selected_usercode + "' and rights_code='" + vl + "' and rights_desc='Enrollment Settings' and college_code='" + Convert.ToString(ddlcollege.SelectedValue) + "'  insert into security_user_right(user_code,user_id,rights_code,rights_desc,college_code)values('" + selected_usercode + "','" + selected_userid + "','" + vl + "','Enrollment Settings','" + Convert.ToString(ddlcollege.SelectedValue) + "')";
                                    int k = dasri.update_method_wo_parameter(INSert, "text");
                                }
                                else if (rdb_grp.Checked == true)
                                {
                                    string value = cblenroll.Items[admit].Text;
                                    string vl = cblenroll.Items[admit].Value;
                                    string INSert = "if exists(select * from security_user_right where user_id='" + selected_userid + "' and rights_code='" + vl + "' and group_code='" + selected_usercode + "'  and rights_desc='Enrollment Settings' and college_code='" + Convert.ToString(ddlcollege.SelectedValue) + "') delete from security_user_right where user_id='" + selected_userid + "'  and rights_code='" + vl + "' and rights_desc='Enrollment Settings' and college_code='" + Convert.ToString(ddlcollege.SelectedValue) + "' and group_code='" + selected_usercode + "' insert into security_user_right(user_id,rights_code,rights_desc,college_code,group_code)values('" + selected_userid + "','" + vl + "','Enrollment Settings','" + Convert.ToString(ddlcollege.SelectedValue) + "','" + selected_usercode + "')";
                                    int k = dasri.update_method_wo_parameter(INSert, "text");
                                }
                            }
                        }
                        if (cbconfirm.Checked == true)
                        {
                            string value = "1";
                            string query1 = string.Empty;
                            if (rdb_ind.Checked == true)
                            {
                                query1 = "if not exists (select * from Master_Settings where usercode='" + selected_usercode + "' and settings='appl_confirm')insert into Master_Settings(usercode,settings,value)values ('" + selected_usercode + "','appl_confirm','" + value + "')else update Master_Settings set value='" + value + "' where settings='appl_confirm' and usercode='" + selected_usercode + "'";
                            }
                            else if (rdb_grp.Checked == true)
                            {
                                query1 = "if not exists (select * from Master_Settings where group_code ='" + selected_usercode + "' and settings='appl_confirm') insert into Master_Settings(group_code,settings,value)values ('" + selected_usercode + "','appl_confirm','" + value + "')else update Master_Settings set value='" + value + "' where settings='appl_confirm' and group_code='" + selected_usercode + "'";
                            }
                            int k = dasri.update_method_wo_parameter(query1, "text");
                        }
                        else if (cbconfirm.Checked == false)
                        {
                            string value = "0";
                            string query1 = string.Empty;
                            if (rdb_ind.Checked == true)
                            {
                                query1 = "if not exists (select * from Master_Settings where usercode='" + selected_usercode + "' and settings='appl_confirm')insert into Master_Settings(usercode,settings,value)values ('" + selected_usercode + "','appl_confirm','" + value + "')else update Master_Settings set value='" + value + "' where settings='appl_confirm' and usercode='" + selected_usercode + "'";
                            }
                            else if (rdb_grp.Checked == true)
                            {
                                query1 = "if not exists (select * from Master_Settings where group_code ='" + selected_usercode + "' and settings='appl_confirm') insert into Master_Settings(group_code,settings,value)values ('" + selected_usercode + "','appl_confirm','" + value + "')else update Master_Settings set value='" + value + "' where settings='appl_confirm' and group_code='" + selected_usercode + "'";
                            }
                            int k = dasri.update_method_wo_parameter(query1, "text");
                        }
                        //==========================od master setting 
                        //con.Close();
                        //cmd.CommandText = "select rights from  OD_Master_Setting where " + usergroup + "";
                        //cmd.Connection = con;
                        //con.Open();
                        //SqlDataReader dr_rights_od = cmd.ExecuteReader();
                        //if (dr_rights_od.HasRows)
                        //    while (dr_rights_od.Read())
                        //    {
                        //cmd1.CommandText = "delete from  OD_Master_Setting where " + usergroup + "";
                        insupdvalue = dasri.update_method_wo_parameter("delete from  OD_Master_Setting where " + usergroup + "", "Text");
                        //mysql1.Close();
                        //cmd1.Connection = mysql1;
                        //mysql1.Open();
                        //cmd1.ExecuteNonQuery();
                        //mysql1.Close();
                        // }
                        //cmd1.CommandText = "insert into OD_Master_Setting(" + strusergruop + ",rights)values(" + selected_usercode.ToString() + ",'" + txtselect.Text + "')";
                        insupdvalue = dasri.update_method_wo_parameter("insert into OD_Master_Setting(" + strusergruop + ",rights)values(" + selected_usercode.ToString() + ",'" + txtselect.Text + "')", "Text");
                        //mysql1.Close();
                        //cmd1.Connection = mysql1;
                        //mysql1.Open();
                        //cmd1.ExecuteNonQuery();
                        //mysql1.Close();
                        //==============================================spl hour 12/5/12 PRABHA
                        //con.Close();
                        //cmd.CommandText = "select rights from  special_hr_rights where " + usergroup + "";
                        //cmd.Connection = con;
                        //con.Open();
                        //SqlDataReader dr_rights_spl = cmd.ExecuteReader();
                        //if (dr_rights_spl.HasRows)
                        //    while (dr_rights_spl.Read())
                        //    {
                        // cmd1.CommandText = "delete from  special_hr_rights where " + usergroup + "";
                        insupdvalue = dasri.update_method_wo_parameter("delete from  special_hr_rights where " + usergroup + "", "text");
                        //mysql1.Close();
                        //cmd1.Connection = mysql1;
                        //mysql1.Open();
                        //cmd1.ExecuteNonQuery();
                        //mysql1.Close();
                        // }
                        //cmd1.CommandText = "insert into special_hr_rights(" + strusergruop + ",rights)values(" + selected_usercode.ToString() + ",'" + splhr_check.Checked + "')";
                        insupdvalue = dasri.update_method_wo_parameter("insert into special_hr_rights(" + strusergruop + ",rights)values(" + selected_usercode.ToString() + ",'" + splhr_check.Checked + "')", "text");
                        //mysql1.Close();
                        //cmd1.Connection = mysql1;
                        //mysql1.Open();
                        //cmd1.ExecuteNonQuery();
                        //mysql1.Close();
                        //ADded by srinath 201/1/2014
                        string insert = "delete from Master_Settings where settings='Alternatesms'";
                        int alsms = dasri.update_method_wo_parameter(insert, "Text");
                        insert = "insert into Master_Settings(settings,value) values ('Alternatesms',1)";
                        if (chkaltnatesms.Checked == false)
                        {
                            insert = "insert into Master_Settings(settings,value) values ('Alternatesms',0)";
                        }
                        alsms = dasri.update_method_wo_parameter(insert, "Text");
                        alsms = dasri.update_method_wo_parameter("delete from Master_Settings where settings='Subject Type' and " + strusergruop + "='" + selected_usercode.ToString() + "' ", "Text");
                        string subjecttypecva = string.Empty;
                        for (int su = 0; su < chklssubjecttype.Items.Count; su++)
                        {
                            if (chklssubjecttype.Items[su].Selected == true)
                            {
                                if (subjecttypecva == "")
                                {
                                    subjecttypecva = chklssubjecttype.Items[su].Text;
                                }
                                else
                                {
                                    subjecttypecva = subjecttypecva + ',' + chklssubjecttype.Items[su].Text;
                                }
                            }
                        }
                        insert = " insert into Master_Settings(" + strusergruop + ",settings,value) values('" + selected_usercode.ToString() + "','Subject Type','" + subjecttypecva + "')";
                        alsms = dasri.update_method_wo_parameter(insert, "Text");
                        //============================================
                        alsms = 0;
                        if (chkdiscon.Checked == true)
                        {
                            alsms = 1;
                        }
                        //rajasekar
                        insert = "if not exists (select * from Master_Settings where " + strusergruop + "=" + selected_usercode.ToString() + " and settings='Attendance Discount')";
                        insert = insert + " insert into Master_Settings(" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Attendance Discount','" + alsms + "')";
                        insert = insert + " else update Master_Settings set value='" + alsms + "' where " + strusergruop + "=" + selected_usercode.ToString() + " and settings='Attendance Discount'";
                        alsms = dasri.update_method_wo_parameter(insert, "Text");
                        alsms = 0;
                        if (chkdebar.Checked == true)
                        {
                            alsms = 1;
                        }
                        insert = "if not exists (select * from Master_Settings where " + strusergruop + "=" + selected_usercode.ToString() + " and settings='Attendance Debar')";
                        insert = insert + " insert into Master_Settings(" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Attendance Debar','" + alsms + "')";
                        insert = insert + " else update Master_Settings set value='" + alsms + "' where " + strusergruop + "=" + selected_usercode.ToString() + " and settings='Attendance Debar'";
                        alsms = dasri.update_method_wo_parameter(insert, "Text");
                        alsms = 0;
                        if (chkattday.Checked == true)
                        {
                            alsms = 1;
                        }
                        insert = "if not exists (select * from Master_Settings where settings='Attendance Day Wise Calculation')";
                        insert = insert + " insert into Master_Settings(settings,value) values('Attendance Day Wise Calculation','" + alsms + "')";
                        insert = insert + " else update Master_Settings set value='" + alsms + "' where settings='Attendance Day Wise Calculation'";
                        alsms = dasri.update_method_wo_parameter(insert, "Text");
                        string order = string.Empty;
                        if (chkrollorder.Checked == true) //if 0 means order by rollno
                        {
                            if (order != "")
                            {
                                order = order + ",0";// order = "0";
                            }
                            else
                            {
                                order = "0";
                            }
                        }
                        if (chkregorder.Checked == true)//if 1 means order by regno
                        {
                            if (order != "")
                            {
                                order = order + ",1";// order = "1";
                            }
                            else
                            {
                                order = "1";
                            }
                        }
                        if (chknameorder.Checked == true)//if 2 means order by name
                        {
                            if (order != "")
                            {
                                order = order + ",2";// order = "2";
                            }
                            else
                            {
                                order = "2";
                            }
                        }
                        //con.Close();
                        //con.Open();
                        //SqlDataAdapter da32_order = new SqlDataAdapter("select * from Master_Settings where settings='order_by' ", con); //usercode=" + ddluser.SelectedItem.Value.ToString() + " and 
                        DataSet ds32_order = dasri.select_method_wo_parameter("select * from Master_Settings where settings='order_by' ", "Text");
                        // da32_order.Fill(ds32_order);
                        if (ds32_order.Tables[0].Rows.Count > 0)  //update the value for common
                        {
                            sqlstr = "update Master_Settings set value='" + order + "'  where  settings='order_by'"; //usercode=" + ddluser.SelectedItem.Value.ToString() + " and
                            alsms = dasri.update_method_wo_parameter(sqlstr, "Text");
                            //SqlCommand cmdx = new SqlCommand(sqlstr);
                            //cmdx.Connection = con;
                            //cmdx.ExecuteNonQuery();
                        }
                        else //insert the value for common
                        {
                            sqlstr = "insert into Master_Settings(settings,value)values('order_by','" + order + "')";
                            alsms = dasri.update_method_wo_parameter(sqlstr, "Text");
                            //SqlCommand cmdy = new SqlCommand(sqlstr);
                            //cmdy.Connection = con;
                            //cmdy.ExecuteNonQuery();
                        }
                        //---------end order by--- mythili 10.08.12------------------------------------------------------
                    }
                    //----------------------5/7/12 send mail for password
                    if (chkpassword.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //con.Close();
                    //con.Open();
                    //SqlDataAdapter da30_mail = new SqlDataAdapter("select * from Master_Settings where settings='mailforpassword' ", con);
                    DataSet ds30_mail = dasri.select_method_wo_parameter("select * from Master_Settings where settings='mailforpassword' ", "Text");
                    //da30_mail.Fill(ds30_mail);
                    if (ds30_mail.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value='" + chkpassword.Checked + "'  where  settings='mailforpassword'";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value)values('mailforpassword', '" + chkpassword.Checked + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    //========================================================
                    //@@@@@@@@ added on 21.07.12  print master setting visible  chkbx mythili @@@@@@@@@@@@@@@@
                    if (chkbx_printmaster.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //con.Close();
                    //con.Open();
                    //SqlDataAdapter da31_mail = new SqlDataAdapter("select * from Master_Settings where " + usergroup + " and settings='print_master_setting' ", con);
                    DataSet ds31_mail = dasri.select_method_wo_parameter("select * from Master_Settings where " + usergroup + " and settings='print_master_setting' ", "Text");
                    // da31_mail.Fill(ds31_mail);
                    if (ds31_mail.Tables[0].Rows.Count > 0)  //update the value for particular user
                    {
                        sqlstr = "update Master_Settings set value='" + result + "'  where " + usergroup + " and settings='print_master_setting'";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else //insert the value for particular user
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('print_master_setting', '" + result + "'," + selected_usercode.ToString() + ")";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    //@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                    //========================cam date entry lock=======================
                    if (chkcaldateentry.Checked == true)
                    {
                        result = 1;
                    }
                    else
                    {
                        result = 0;
                    }
                    //con.Close();
                    //con.Open();
                    //SqlDataAdapter dacamdate = new SqlDataAdapter("select * from Master_Settings  where " + usergroup + " and settings='Cam Date Lock'", con);
                    DataSet dscamdate = dasri.select_method_wo_parameter("select * from Master_Settings  where " + usergroup + " and settings='Cam Date Lock'", "Text");
                    //dacamdate.Fill(dscamdate);
                    if (dscamdate.Tables[0].Rows.Count > 0)
                    {
                        sqlstr = "update Master_Settings set value='" + result + "'  where " + usergroup + " and settings='Cam Date Lock'";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    else
                    {
                        sqlstr = "insert into Master_Settings(settings,value," + strusergruop + ")values('Cam Date Lock', '" + result + "'," + selected_usercode.ToString() + ")";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd = new SqlCommand(sqlstr);
                        //cmd.Connection = con;
                        //cmd.ExecuteNonQuery();
                    }
                    //=======================================SRINATH Schedule Settings===========================
                    //con.Close();
                    //con.Open();
                    string schedsetting = "0";
                    if (chklock.Checked == true)
                    {
                        schedsetting = "1";
                    }
                    string setlock = " if exists(select value from Master_Settings where settings='schedule_lock' and " + usergroup + ") update Master_Settings set value='" + schedsetting + "' where settings='schedule_lock' and " + usergroup + " else insert into master_settings(settings,value," + strusergruop + ") values('schedule_lock','" + schedsetting + "','" + selected_usercode.ToString() + "')";
                    int sedlock = dasri.update_method_wo_parameter(setlock, "Text");
                    //SqlCommand cmd_schedlock = new SqlCommand("select value from Master_Settings where settings='schedule_lock' and "+usergroup+"", con);
                    //string schedval = (string)cmd_schedlock.ExecuteScalar();
                    //if (string.IsNullOrEmpty(schedval))
                    //{
                    //    con.Close();
                    //    con.Open();
                    //    SqlCommand cmd_schedlockinsert = new SqlCommand("insert into master_settings(settings,value," + strusergruop + ") values('schedule_lock',0," + selected_usercode.ToString() + ")", con);
                    //    cmd_schedlockinsert.ExecuteNonQuery();
                    //}
                    //string schedsetting = string.Empty;
                    //if (chklock.Checked == true)
                    //{
                    //    schedsetting = "1";
                    //}
                    //else
                    //{
                    //    schedsetting = "0";
                    //}
                    //con.Close();
                    //con.Open();
                    //SqlCommand cmd_schedsetting = new SqlCommand("update Master_Settings set value='" + schedsetting + "' where settings='schedule_lock' and " + usergroup + "", con);
                    //cmd_schedsetting.ExecuteNonQuery();
                    // ********************** Added by jairam ******************* 10-10-2014
                    int count_flage = 0;
                    int count_Cam_flage = 0;
                    int count_finance_flage = 0;//added by saranya 13-11-2017
                    int count_University_Result_flag = 0;
                    int count_AttendanceCummulative_Result_flag = 0;
                    bool updateflage = false;
                    if (FpSpreadsms.Sheets[0].RowCount > 0)
                    {
                        for (int fp = 0; fp < FpSpreadsms.Sheets[0].RowCount; fp++)
                        {
                            string fp_value = Convert.ToString(FpSpreadsms.Sheets[0].Cells[fp, 1].Value);
                            string fp_temp_value = FpSpreadsms.Sheets[0].Cells[fp, 2].Text.ToString();
                            if (fp_value == "1" && fp_temp_value == "Attendance")
                            {
                                count_flage++;
                            }
                            if (fp_value == "1" && fp_temp_value == "CAM")
                            {
                                count_Cam_flage++;
                            }
                            if (fp_value == "1" && fp_temp_value == "Finance")//added by saranya 13-11-2017
                            {
                                count_finance_flage++;
                            }
                            if (fp_value == "1" && fp_temp_value.ToUpper() == "UNIVERSITY RESULT")//added by PRABHA 17-11-2017
                            {
                                count_University_Result_flag++;
                            }
                            if (fp_value == "1" && fp_temp_value == "Attendance Cummulative")//added by Saranyadevi19.1.2017
                            {
                                count_AttendanceCummulative_Result_flag++;
                            }
                        }
                        //if (count_flage == 1 && count_Cam_flage == 1 || count_flage == 0 && count_Cam_flage == 1 || count_flage == 1 && count_Cam_flage == 0)// saranya13-11-2017
                        if (count_flage == 1 || count_Cam_flage == 1 || count_finance_flage == 1 || count_University_Result_flag == 1 || count_AttendanceCummulative_Result_flag == 1)
                        {
                            string val_flage = string.Empty;
                            for (int fp = 0; fp < FpSpreadsms.Sheets[0].RowCount; fp++)
                            {
                                string fp_value = Convert.ToString(FpSpreadsms.Sheets[0].Cells[fp, 1].Value);
                                if (fp_value == "1")
                                {
                                    string fp_temp_value = FpSpreadsms.Sheets[0].Cells[fp, 2].Text.ToString();
                                    string fp_temp_template = FpSpreadsms.Sheets[0].Cells[fp, 3].Text.ToString();
                                    if (fp_temp_value == "Attendance")
                                    {
                                        val_flage = "1";
                                    }
                                    if (fp_temp_value == "CAM")
                                    {
                                        val_flage = "2";
                                    }
                                    if (fp_temp_value == "Finance")//added by saranya 13-11-2017
                                    {
                                        val_flage = "3";
                                    }
                                    if (fp_temp_value.ToUpper() == "UNIVERSITY RESULT")//added by PRABHA 17-11-2017
                                    {
                                        val_flage = "4";
                                    }
                                    if (fp_temp_value == "Attendance Cummulative")//added by saranyadevi 19.1.2018 
                                    {
                                        val_flage = "5";
                                    }
                                    string inst_update_query = string.Empty;
                                    if (rdb_ind.Checked == true)
                                    {

                                        updateflage = true;
                                        inst_update_query = "if not exists (select * from master_Settings where settings='SmsAttendanceTepmlate' and value='" + val_flage + "' " + userorgropcode + ") ";
                                        inst_update_query = inst_update_query + " insert into master_Settings (template,value,usercode,settings) values (N'" + fp_temp_template + "','" + val_flage + "','" + user_code + "','SmsAttendanceTepmlate')";
                                        inst_update_query = inst_update_query + " else";
                                        inst_update_query = inst_update_query + " update master_Settings set template=N'" + fp_temp_template + "' , value ='" + val_flage + "' where settings='SmsAttendanceTepmlate' " + userorgropcode + "";

                                    }
                                    if (rdb_grp.Checked == true)
                                    {
                                        updateflage = true;
                                        inst_update_query = "if not exists (select * from master_Settings where settings='SmsAttendanceTepmlate' and value='" + val_flage + "' " + userorgropcode + ") ";
                                        inst_update_query = inst_update_query + " insert into master_Settings (template,value,group_code,settings) values (N'" + fp_temp_template + "','" + val_flage + "','" + user_code + "','SmsAttendanceTepmlate')";
                                        inst_update_query = inst_update_query + " else";
                                        inst_update_query = inst_update_query + " update master_Settings set template=N'" + fp_temp_template + "' , value ='" + val_flage + "' where settings='SmsAttendanceTepmlate' " + userorgropcode + "";
                                    }
                                    int a = 0;
                                    a = dasri.update_method_wo_parameter(inst_update_query, "Text");
                                }
                            }
                            if (updateflage == false)
                            {
                                int a11 = 0;
                                string update_temp_query = string.Empty;
                                if (rdb_ind.Checked == true)
                                {
                                    update_temp_query = "update Master_Settings set template ='' where usercode='" + userorgropcode + "' and settings='SmsAttendanceTepmlate'";
                                    a11 = dasri.update_method_wo_parameter(update_temp_query, "Text");
                                }
                                if (rdb_grp.Checked == true)
                                {
                                    update_temp_query = "update Master_Settings set template ='' where usercode='" + userorgropcode + "' and settings='SmsAttendanceTepmlate'";
                                    a11 = dasri.update_method_wo_parameter(update_temp_query, "Text");
                                }
                            }
                        }
                    }
                    //************************ End ****************************************
                    //Added By Jeyaprakash on July 21st
                    string dept = string.Empty;
                    for (int ik = 0; ik < cblhrdept.Items.Count; ik++)
                    {
                        dept = Convert.ToString(cblhrdept.Items[ik].Value);
                        if (cblhrdept.Items[ik].Selected == true)
                        {
                            if (dept != "")
                            {
                                //delsi0706
                                string select_collcode = d2.GetFunction("select college_code from hrdept_master where dept_code='" + dept + "'");//delsi0706

                                //string insqry = " if exists (select * from hr_privilege where user_code='" + selected_usercode + "' and college_code='" + ddlcollege.SelectedItem.Value + "' and dept_code='" + dept + "') update hr_privilege set dept_code='" + dept + "' where user_code='" + selected_usercode + "' and college_code='" + ddlcollege.SelectedItem.Value + "' and dept_code='" + dept + "' else insert into hr_privilege (dept_code,user_code,college_code) values ('" + dept + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                                if (rdb_ind.Checked == true)
                                {
                                    string insqry = " if exists (select * from hr_privilege where user_code='" + selected_usercode + "' and college_code='" + select_collcode + "' and dept_code='" + dept + "') update hr_privilege set dept_code='" + dept + "' where user_code='" + selected_usercode + "' and college_code='" + select_collcode + "' and dept_code='" + dept + "' else insert into hr_privilege (dept_code,user_code,college_code) values ('" + dept + "','" + selected_usercode + "','" + select_collcode + "')";

                                    int fin = d2.update_method_wo_parameter(insqry, "Text");
                                }
                                if (rdb_grp.Checked == true)//Added by saranya on 27Aug2018
                                {
                                    string insqry = " if exists (select * from hr_privilege where college_code='" + select_collcode + "' " + userorgropcode + " and dept_code='" + dept + "') update hr_privilege set dept_code='" + dept + "' where  college_code='" + select_collcode + "' " + userorgropcode + " and dept_code='" + dept + "' else insert into hr_privilege (dept_code,group_code,college_code) values ('" + dept + "','" + selected_usercode + "','" + select_collcode + "')";

                                    int fin = d2.update_method_wo_parameter(insqry, "Text");
                                }
                            }
                        }
                        else
                        {
                            //  string delq = "delete from hr_privilege where user_code='" + selected_usercode + "' and college_code='" + ddlcollege.SelectedItem.Value + "' and dept_code='" + dept + "'";
                            string select_collcode = d2.GetFunction("select college_code from hrdept_master where dept_code='" + dept + "'");//delsi0706
                            if (rdb_ind.Checked == true)
                            {
                                string delq = "delete from hr_privilege where user_code='" + selected_usercode + "' and college_code='" + select_collcode + "' and dept_code='" + dept + "'";
                                int delcount = d2.update_method_wo_parameter(delq, "Text");
                            }
                            if (rdb_grp.Checked == true)//Added by saranya on 27Aug2018
                            {
                                string delq = "delete from hr_privilege where group_code='" + selected_usercode + "' and college_code='" + select_collcode + "' and dept_code='" + dept + "'";
                                int delcount = d2.update_method_wo_parameter(delq, "Text");
                            }
                        }
                    }



                    string bank = string.Empty;//delsi1106
                    for (int ic = 0; ic < cblclgbank.Items.Count; ic++)
                    {
                        bank = Convert.ToString(cblclgbank.Items[ic].Value);
                        if (cblclgbank.Items[ic].Selected == true)
                        {
                            if (bank != "")
                            {
                                string insqry = " if exists (select * from hr_bankrights where user_code='" + selected_usercode + "' and college_code='" + ddlcollege.SelectedItem.Value + "' and bankpk='" + bank + "') update hr_bankrights set bankpk='" + bank + "' where user_code='" + selected_usercode + "' and college_code='" + ddlcollege.SelectedItem.Value + "' and bankpk='" + bank + "' else insert into hr_bankrights (bankpk,user_code,college_code) values ('" + bank + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";

                                int fin = d2.update_method_wo_parameter(insqry, "Text");
                            }
                        }
                        else
                        {
                            string delq = "delete from hr_bankrights where user_code='" + selected_usercode + "' and college_code='" + ddlcollege.SelectedItem.Value + "' and bankpk='" + bank + "'";
                            int delcount = d2.update_method_wo_parameter(delq, "Text");
                        }
                    }


                    string hrset = string.Empty;
                    for (int ik = 0; ik < cblhrset.Items.Count; ik++)
                    {
                        if (cblhrset.Items[ik].Selected == true)
                        {
                            if (hrset.Trim() == "")
                            {
                                hrset = Convert.ToString(cblhrset.Items[ik].Value);
                            }
                            else
                            {
                                hrset = hrset + "," + Convert.ToString(cblhrset.Items[ik].Value);
                            }
                        }
                    }
                    string newupq = "if not exists (select * from Master_Settings where usercode='" + selected_usercode + "' and settings='HR_PanelSettings') insert into Master_Settings(usercode,settings,value) values ('" + selected_usercode + "','HR_PanelSettings','" + hrset + "') else update Master_Settings set value='" + hrset + "' where settings='HR_PanelSettings' and usercode='" + selected_usercode + "'";
                    int newupcount = d2.update_method_wo_parameter(newupq, "Text");
                    string stfupd = string.Empty;
                    if (chkupdstfcode.Checked == true)//delsiref
                    {
                        stfupd = "1";
                    }
                    else
                    {
                        stfupd = "0";
                    }
                    string upqstf = "if not exists (select * from Master_Settings where usercode='" + selected_usercode + "' and settings='HR_StaffUpdate') insert into Master_Settings(usercode,settings,value) values ('" + selected_usercode + "','HR_StaffUpdate','" + stfupd + "') else update Master_Settings set value='" + stfupd + "' where settings='HR_StaffUpdate' and usercode='" + selected_usercode + "'";
                    int upqcount = d2.update_method_wo_parameter(upqstf, "Text");

                    string payprocesslock = string.Empty;
                    if (cb_payprocesslock.Checked == true)//delsi1710
                    {
                        payprocesslock = "1";
                    }
                    else
                    {
                        payprocesslock = "0";
                    }
                    string lockqry = "if not exists (select * from Master_Settings where usercode='" + selected_usercode + "' and settings='payprocesslockset') insert into Master_Settings(usercode,settings,value) values ('" + selected_usercode + "','payprocesslockset','" + payprocesslock + "') else update Master_Settings set value='" + payprocesslock + "' where settings='payprocesslockset' and usercode='" + selected_usercode + "'";
                    int inscount = d2.update_method_wo_parameter(lockqry, "Text");
                    string generalpriority = string.Empty;//delsi 0108
                    if (cbgeneral_priority.Checked == true)
                    {
                        generalpriority = "0";

                    }
                    else
                    {
                        generalpriority = "1";

                    }
                    if (rdb_ind.Checked == true)
                    {
                        string uppriority = "if not exists (select * from Master_Settings where usercode='" + selected_usercode + "' and settings='HR_checkpriority') insert into Master_Settings(usercode,settings,value) values ('" + selected_usercode + "','HR_checkpriority','" + generalpriority + "') else update Master_Settings set value='" + generalpriority + "' where settings='HR_checkpriority' and usercode='" + selected_usercode + "'";
                        int upprioritycount = d2.update_method_wo_parameter(uppriority, "Text");
                    }
                    if (rdb_grp.Checked == true)//Added by saranya on 27Aug2018 for Groupuser TabRights
                    {
                        string uppriority = "if not exists (select * from Master_Settings where settings='HR_checkpriority' " + userorgropcode + ") insert into Master_Settings(group_code,settings,value) values ('" + selected_usercode + "','HR_checkpriority','" + generalpriority + "') else update Master_Settings set value='" + generalpriority + "' where settings='HR_checkpriority' " + userorgropcode + "";
                        int upprioritycount = d2.update_method_wo_parameter(uppriority, "Text");
                    }

                    string StfType = string.Empty;
                    string stfage = string.Empty;
                    if (ddlStfType.SelectedItem.Text.Trim() != "Select" && !String.IsNullOrEmpty(txtRetireAge.Text.Trim()))//delsis0201
                    {
                        StfType = Convert.ToString(ddlStfType.SelectedItem.Text);
                        stfage = Convert.ToString(txtRetireAge.Text.Trim());
                        string upqstfType = "if not exists (select * from Master_Settings where usercode='" + selected_usercode + "' and settings='Retire_Age_Settings' and value='" + StfType + "') insert into Master_Settings(usercode,settings,value,template) values ('" + selected_usercode + "','Retire_Age_Settings','" + StfType + "','" + stfage + "') else update Master_Settings set template='" + stfage + "' where settings='Retire_Age_Settings' and usercode='" + selected_usercode + "' and value='" + StfType + "'";//and value='" + StfType + "'
                        int upqStfTypecount = d2.update_method_wo_parameter(upqstfType, "Text");
                    }
                    string incmulstf = string.Empty;
                    if (chkfingerid.Checked == true)
                    {
                        incmulstf = "1";
                    }
                    else
                    {
                        incmulstf = "0";
                    }
                    string upqmulstf = "if not exists (select * from Master_Settings where usercode='" + selected_usercode + "' and settings='Include_StaffFinger') insert into Master_Settings(usercode,settings,value) values ('" + selected_usercode + "','Include_StaffFinger','" + incmulstf + "') else update Master_Settings set value='" + incmulstf + "' where settings='Include_StaffFinger' and usercode='" + selected_usercode + "'";
                    int upqmulstfcount = d2.update_method_wo_parameter(upqmulstf, "Text");
                    //Ended------------//
                    // ********************** Added by jairam ******************* 13-09-2014
                    int value1 = 0;
                    ht.Clear();
                    string insertquery = string.Empty;
                    if (rdb_ind.Checked == true)
                    {
                        insertquery = "if not exists ( select * from Staff_Attendance_Setting where usercode='" + user_code + "') insert into Staff_Attendance_Setting (usercode,Rights) values ('" + user_code + "','" + attendvalue + "') else update Staff_Attendance_Setting set Rights ='" + attendvalue + "' where usercode='" + user_code + "'";
                        value1 = dasri.insert_method(insertquery, ht, "Text");
                    }
                    if (rdb_grp.Checked == true)
                    {
                        insertquery = "if not exists ( select * from Staff_Attendance_Setting where group_code='" + user_code + "') insert into Staff_Attendance_Setting (group_code,Rights) values ('" + user_code + "','" + attendvalue + "') else update Staff_Attendance_Setting set Rights ='" + attendvalue + "' where group_code='" + user_code + "'";
                        value1 = dasri.insert_method(insertquery, ht, "Text");
                    }
                    value1 = 0;
                    if (chkpersem.Checked == true)
                    {
                        value1 = 1;
                    }
                    if (rdb_ind.Checked == true)
                    {
                        insertquery = "if not exists ( select * from Master_Settings where usercode='" + user_code + "' and settings='previous sem subject allotment') insert into Master_Settings (usercode,settings,value) values ('" + user_code + "','previous sem subject allotment','" + value1 + "') else update Master_Settings set value ='" + value1 + "' where usercode='" + user_code + "' and settings='previous sem subject allotment'";
                    }
                    if (rdb_grp.Checked == true)
                    {
                        insertquery = "if not exists ( select * from Master_Settings where group_code='" + user_code + "' and settings='previous sem subject allotment') insert into Master_Settings (group_code,settings,value) values ('" + user_code + "','previous sem subject allotment','" + value1 + "') else update Master_Settings set value ='" + value1 + "' where group_code='" + user_code + "' and settings='previous sem subject allotment'";
                    }
                    value1 = dasri.insert_method(insertquery, ht, "Text");
                    //Added by srinath 26 Sep 2016
                    value1 = 0;
                    //added by mullai
                    string batchyear3 = string.Empty;
                    string lockdayval3 = string.Empty;
                    if (cbbatlock.Checked == true)
                    {
                        lockdayval3 = "1";
                        foreach (GridViewRow gr4 in gridviewbatch.Rows)
                        {
                            Label bat1 = (Label)gr4.FindControl("lblbatch");
                            string batchyr = bat1.Text;
                            TextBox txday = (TextBox)gr4.FindControl("txtbatlock");
                            string dayval = txday.Text;
                            if (!string.IsNullOrEmpty(dayval) && Convert.ToInt32(dayval) > 0)
                            {
                                
                                    if (string.IsNullOrEmpty(batchyear3))
                                        batchyear3 = batchyr + "-" + dayval;
                                    else
                                        batchyear3 = batchyear3 + "," + batchyr + "-" + dayval;
                            }
                             
                        }
                        if (rdb_ind.Checked == true)
                        {
                            insertquery = "if not exists ( select * from Master_Settings where usercode='" + user_code + "' and settings='Attendance Lock Days') insert into Master_Settings (usercode,settings,value,template) values ('" + user_code + "','Attendance Lock Days','" + lockdayval3 + "','" + batchyear3 + "') else update Master_Settings set value ='" + lockdayval3 + "',template='" + batchyear3 + "' where usercode='" + user_code + "' and settings='Attendance Lock Days'";
                        }
                        if (rdb_grp.Checked == true)
                        {
                            insertquery = "if not exists ( select * from Master_Settings where group_code='" + user_code + "' and settings='Attendance Lock Days') insert into Master_Settings (group_code,settings,value,template) values ('" + user_code + "','Attendance Lock Days','" + lockdayval3 + "','" + batchyear3 + "') else update Master_Settings set value ='" + lockdayval3 + "',template='" + batchyear3 + "' where group_code='" + user_code + "' and settings='Attendance Lock Days'";
                        }
                        value1 = dasri.insert_method(insertquery, ht, "Text");
                    } //
                    else
                    {
                        lockdayval3 = "0";
                        string lockdays = txtattlock.Text.ToString();
                        if (lockdays.Trim() != "")
                        {
                            if (Convert.ToInt32(lockdays) > 0)
                            {
                                value1 = Convert.ToInt32(lockdays);
                            }
                        }
                        if (rdb_ind.Checked == true)
                        {
                            insertquery = "if not exists ( select * from Master_Settings where usercode='" + user_code + "' and settings='Attendance Lock Days') insert into Master_Settings (usercode,settings,value,template) values ('" + user_code + "','Attendance Lock Days','" + lockdayval3 + "','" + value1 + "') else update Master_Settings set value ='" + lockdayval3 + "',template='" + value1 + "' where usercode='" + user_code + "' and settings='Attendance Lock Days'";
                        }
                        if (rdb_grp.Checked == true)
                        {
                            insertquery = "if not exists ( select * from Master_Settings where group_code='" + user_code + "' and settings='Attendance Lock Days') insert into Master_Settings (group_code,settings,value,template) values ('" + user_code + "','Attendance Lock Days','" + lockdayval3 + "','" + value1 + "') else update Master_Settings set value ='" + lockdayval3 + "',template='" + value1 + "' where group_code='" + user_code + "' and settings='Attendance Lock Days'";
                        }
                        value1 = dasri.insert_method(insertquery, ht, "Text");
                    }
                    value1 = 0;
                    if (chkelevonlyvisible.Checked == true)
                    {
                        value1 = 1;
                    }
                    if (rdb_ind.Checked == true)
                    {
                        insertquery = "if not exists ( select * from Master_Settings where usercode='" + user_code + "' and settings='Elective Subject only allot') insert into Master_Settings (usercode,settings,value) values ('" + user_code + "','Elective Subject only allot','" + value1 + "') else update Master_Settings set value ='" + value1 + "' where usercode='" + user_code + "' and settings='Elective Subject only allot'";
                    }
                    if (rdb_grp.Checked == true)
                    {
                        insertquery = "if not exists ( select * from Master_Settings where group_code='" + user_code + "' and settings='Elective Subject only allot') insert into Master_Settings (group_code,settings,value) values ('" + user_code + "','Elective Subject only allot','" + value1 + "') else update Master_Settings set value ='" + value1 + "' where group_code='" + user_code + "' and settings='Elective Subject only allot'";
                    }
                    value1 = dasri.insert_method(insertquery, ht, "Text");
                    value1 = 0;
                    if (chkwottable.Checked == true)
                    {
                        value1 = 1;
                    }
                    insertquery = "if not exists ( select * from Master_Settings where  settings='Attendance with out timetable') insert into Master_Settings (settings,value) values ('Attendance with out timetable','" + value1 + "') else update Master_Settings set value ='" + value1 + "' where settings='Attendance with out timetable'";
                    value1 = dasri.insert_method(insertquery, ht, "Text");
                    value1 = 0;
                    if (chksubatt.Checked == true)
                    {
                        value1 = 1;
                    }
                    insertquery = "if not exists ( select * from Master_Settings where  settings='Subject Based on Department Rights') insert into Master_Settings (settings,value) values ('Subject Based on Department Rights','" + value1 + "') else update Master_Settings set value ='" + value1 + "' where settings='Subject Based on Department Rights'";
                    value1 = dasri.insert_method(insertquery, ht, "Text");
                    value1 = 0;
                    if (cblCombinedClsAlrt.Checked == true)  //Added By Jeyaprakash on Jan 12th,2017
                    {
                        value1 = 1;
                    }
                    insertquery = "if not exists ( select * from Master_Settings where  settings='Time Table Alert Rights') insert into Master_Settings (settings,value) values ('Time Table Alert Rights','" + value1 + "') else update Master_Settings set value ='" + value1 + "' where settings='Time Table Alert Rights'";
                    value1 = dasri.insert_method(insertquery, ht, "Text");
                    string strwbsite = txtatwebaddress.Text.ToString();
                    insertquery = "if not exists ( select * from Master_Settings where  settings='Letter Web Site') insert into Master_Settings (settings,value) values ('Letter Web Site','" + strwbsite + "') else update Master_Settings set value ='" + strwbsite + "' where settings='Letter Web Site'";
                    value1 = dasri.insert_method(insertquery, ht, "Text");

                    string Min = Convert.ToString(ddlHour.SelectedItem.Text);
                    string Hour = Convert.ToString(ddlMin.SelectedItem.Text);
                    string InsHour = Min + ":" + Hour + ":00";
                    insertquery = "if not exists ( select * from Master_Settings where  settings='PerTimeMark') insert into Master_Settings (settings,value) values ('PerTimeMark','" + InsHour + "') else update Master_Settings set value ='" + InsHour + "' where settings='PerTimeMark'";
                    value1 = dasri.insert_method(insertquery, ht, "Text");
                    //************************ End ****************************************
                    //==========================cam date entry end======================
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Saved successfully')", true);
                    subjectSave(Convert.ToString(selected_usercode));

                    insertquery = " if exists( select com_name from collinfo where college_code='" + ddlcollege.SelectedItem.Value + "') update collinfo set com_name='" + txt_common_collegename.Text + "' where college_code='" + ddlcollege.SelectedItem.Value + "'";
                    d2.update_method_wo_parameter(insertquery, "text");
                    imgAlert.Visible = true;
                    lbl_alert.Text = "Saved successfully";
                }
            }
            //--------------------------------Muthu Transport Settings---------------------------------------
            if (txt_remainder.Text != "" && txt_stfone.Text != "")
            {
                //con.Close();
                //con.Open();
                //SqlCommand cmd_delete_exist = new SqlCommand("delete from transport_settings where college_code='" + ddl_college.SelectedValue.ToString() + "'", con);
                //cmd_delete_exist.ExecuteNonQuery();
                insupdvalue = dasri.update_method_wo_parameter("delete from transport_settings where college_code='" + ddl_college.SelectedValue.ToString() + "'", "Text");
                //con.Close();
                //con.Open();
                //SqlCommand cmd_save_settings = new SqlCommand("insert into transport_settings(college_code,remain_days,staff_one,staff_two) values('" + ddl_college.SelectedValue.ToString() + "','" + txt_remainder.Text + "','" + txt_stfone.Text + "','" + txt_stftwo.Text + "')", con);
                //cmd_save_settings.ExecuteNonQuery();
                insupdvalue = dasri.update_method_wo_parameter("insert into transport_settings(college_code,remain_days,staff_one,staff_two) values('" + ddl_college.SelectedValue.ToString() + "','" + txt_remainder.Text + "','" + txt_stfone.Text + "','" + txt_stftwo.Text + "')", "Text");
                //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Saved successfully')", true);
                imgAlert.Visible = true;
                lbl_alert.Text = "Saved successfully";
            }
            //--------------------------------Muthu Transport Settings---------------------------------------
            //=============================================== Academic year setting (gowtham) ================================
            //con.Close();
            //con.Open();
            string academicsetquery = "delete from master_settings where settings='Academic year' ";
            insupdvalue = dasri.update_method_wo_parameter(academicsetquery, "Text");
            //SqlCommand sqlcmd = new SqlCommand(academicsetquery, con);
            //sqlcmd.ExecuteNonQuery();
            //con.Close();
            //con.Open();
            if (ddlacefromyear.Items.Count > 0)
            {
                string yearvalue = ddlacefromyear.SelectedItem.Text + ',' + ddlacetoyear.SelectedItem.Text;
                string academicinsquery = "insert into master_settings (settings,value) values ('Academic year','" + yearvalue + "') ";
                insupdvalue = dasri.update_method_wo_parameter(academicinsquery, "Text");
                //SqlCommand sqlinsertcmd = new SqlCommand(academicinsquery, con);
                //sqlinsertcmd.ExecuteNonQuery();
                //con.Close();
            }
            //Added by Srinath 20/12/2013
            string strabsentsm = txtminimumabsentdays.Text.ToString();
            string strquery = "delete Master_Settings where settings='Minimum_days_Absent_Sms'";
            int del = dasri.update_method_wo_parameter(strquery, "Text");
            if (strabsentsm.Trim() != "" && strabsentsm != null && strabsentsm.Trim() != "0")
            {
                strquery = "insert into Master_Settings(settings,value) values	('Minimum_days_Absent_Sms','" + strabsentsm + "')";
                del = dasri.update_method_wo_parameter(strquery, "Text");
            }
            strabsentsm = txtrollsuffixlength.Text.ToString();
            strquery = "delete Master_Settings where settings='roll_no_suffix'";
            del = dasri.update_method_wo_parameter(strquery, "Text");
            if (strabsentsm.Trim() != "" && strabsentsm != null && strabsentsm.Trim() != "0")
            {
                strquery = "insert into Master_Settings(settings,value) values	('roll_no_suffix','" + strabsentsm + "')";
                del = dasri.update_method_wo_parameter(strquery, "Text");
            }
            strabsentsm = txtbankdegit.Text.ToString();
            strquery = "delete Master_Settings where settings='Bank Foramte Fixed Digits'";
            del = dasri.update_method_wo_parameter(strquery, "Text");
            if (strabsentsm.Trim() != "" && strabsentsm != null && strabsentsm.Trim() != "0")
            {
                strquery = "insert into Master_Settings(settings,value) values	('Bank Foramte Fixed Digits','" + strabsentsm + "')";
                del = dasri.update_method_wo_parameter(strquery, "Text");
            }
            strabsentsm = "0";
            if (chkcamattendance.Checked == true)
            {
                strabsentsm = "1";
            }
            strquery = "delete Master_Settings where settings='cam mark attendance'";
            del = dasri.update_method_wo_parameter(strquery, "Text");
            if (strabsentsm.Trim() != "" && strabsentsm != null && strabsentsm.Trim() != "0")
            {
                strquery = "insert into Master_Settings(settings,value) values	('cam mark attendance','" + strabsentsm + "')";
                del = dasri.update_method_wo_parameter(strquery, "Text");
            }
            //****************ADDED BY SRINATH 28/JAN/2015 *****************************88
            strabsentsm = "0";
            string coll_codeNew = ddlcollege.SelectedValue;
            if (chkstaustaffreport.Checked == true)
            {
                strabsentsm = "1" + "-" + ddlsetbatch.SelectedItem.Text.ToString();
            }
            //modified on 19/12/2017 by prabha
            //strquery = "delete Master_Settings where settings='Studnet Staff Selector' ";
            //del = dasri.update_method_wo_parameter(strquery, "Text");
            //strquery = "insert into Master_Settings (settings,value) values('Studnet Staff Selector','" + strabsentsm + "')";
            //del = dasri.update_method_wo_parameter(strquery, "Text");
            //insert into New_InsSettings(LinkName,LinkValue,college_code) values('sampleValue','sdfsdf','13')
            strquery = "delete New_InsSettings where LinkName='Studnet Staff Selector' and college_code='" + coll_codeNew + "'";
            del = dasri.update_method_wo_parameter(strquery, "Text");
            strquery = "insert into New_InsSettings(LinkName,LinkValue,college_code) values('Studnet Staff Selector','" + strabsentsm + "','" + coll_codeNew + "')";
            del = dasri.update_method_wo_parameter(strquery, "Text");

            //alternate period or staff
            strabsentsm = "0";
            string alterval = "0";
            if (chkaltenateleaveapply.Checked == true)
            {
                strabsentsm = "1";
                if (rblalterPeriod.SelectedIndex == 0)
                    alterval = "1";
                else
                    alterval = "2";
            }
            strquery = "delete Master_Settings where settings='Include Alternate Schedule'";
            del = dasri.update_method_wo_parameter(strquery, "Text");
            strquery = "insert into Master_Settings (settings,value) values('Include Alternate Schedule','" + strabsentsm + "')";
            del = dasri.update_method_wo_parameter(strquery, "Text");
            // alternate type
            strquery = "delete Master_Settings where settings='Leave Apply in Alternate Schedule'";
            del = dasri.update_method_wo_parameter(strquery, "Text");
            strquery = "insert into Master_Settings (settings,value) values('Leave Apply in Alternate Schedule','" + alterval + "')";
            del = dasri.update_method_wo_parameter(strquery, "Text");
            strabsentsm = "0";
            if (chkblackboxacademic.Checked == true)
            {
                strabsentsm = "1";
            }
            strquery = "delete Master_Settings where settings='Black Box Academic'";
            del = dasri.update_method_wo_parameter(strquery, "Text");
            strquery = "insert into Master_Settings (settings,value) values('Black Box Academic','" + strabsentsm + "')";
            del = dasri.update_method_wo_parameter(strquery, "Text");
            strabsentsm = "0";
            if (CheckBoxschool.Checked == true)
            {
                strabsentsm = "1";
            }
            strquery = "delete Master_Settings where settings='Report Throw Cam Calculation'";
            del = dasri.update_method_wo_parameter(strquery, "Text");
            strquery = "insert into Master_Settings (settings,value) values('Report Throw Cam Calculation','" + strabsentsm + "')";
            del = dasri.update_method_wo_parameter(strquery, "Text");
            strabsentsm = "0";
            if (Chkcamstaff.Checked == true)
            {
                strabsentsm = "1";
            }
            strquery = "delete Master_Settings where settings='Cam Entry Staff'";
            del = dasri.update_method_wo_parameter(strquery, "Text");
            strquery = "insert into Master_Settings (settings,value) values('Cam Entry Staff','" + strabsentsm + "')";
            del = dasri.update_method_wo_parameter(strquery, "Text");
            strabsentsm = "0";
            string strusergr = "usercode";
            if (rdb_ind.Checked == false)
            {
                strusergr = "Group_code";
            }
            strquery = "delete Master_Settings where settings='Staff Leave Report Visible Department Wise' " + userorgropcode + "";
            del = dasri.update_method_wo_parameter(strquery, "Text");
            if (chkstaffleavereport.Checked == true)
            {
                strabsentsm = "1";
                strquery = "insert into Master_Settings (settings,value," + strusergr + ") values('Staff Leave Report Visible Department Wise','" + strabsentsm + "','" + user_code + "')";
                del = dasri.update_method_wo_parameter(strquery, "Text");
            }
            strabsentsm = "0";
            //barath 27.02.18
            string Linkval = txtRebateAmt.Text + "-" + txtRebateDeductAmt.Text;
            string q1 = "if exists(select * from New_InsSettings where LinkName='RebateDeductAmount' and college_code='" + ddlcollege.SelectedValue + "') update New_InsSettings set LinkValue='" + Linkval + "' where LinkName='RebateDeductAmount' and college_code='" + ddlcollege.SelectedValue + "' else insert into New_InsSettings (LinkValue,LinkName,college_code) values ('" + Linkval + "','RebateDeductAmount','" + ddlcollege.SelectedValue + "')";
            int ins = d2.update_method_wo_parameter(q1, "Text");

            string educess = txteducess.Text;
            string qrys = "if exists(select * from New_InsSettings where LinkName='Educess' and college_code='" + ddlcollege.SelectedValue + "') update New_InsSettings set LinkValue='" + educess + "' where LinkName='Educess' and college_code='" + ddlcollege.SelectedValue + "' else insert into New_InsSettings (LinkValue,LinkName,college_code) values ('" + educess + "','Educess','" + ddlcollege.SelectedValue + "')";
            int qry1 = d2.update_method_wo_parameter(qrys, "Text");


            //poo 28.10.17
            string linkname = "Round off Basic and Grade Pay";
            string linkvalue = txtgradepay.Text + "-" + txtbasicpay.Text;
            string round = "if exists(select * from New_InsSettings where LinkName='" + linkname + "' and college_code='" + ddlcollege.SelectedValue + "') update New_InsSettings set LinkValue='" + linkvalue + "' where LinkName='" + linkname + "' and college_code='" + ddlcollege.SelectedValue + "' else insert into New_InsSettings (LinkValue,LinkName,college_code) values ('" + linkvalue + "','" + linkname + "','" + ddlcollege.SelectedValue + "')";
            int roundoff = d2.update_method_wo_parameter(round, "Text");
            if (roundoff > 0)
            {
                imgAlert.Visible = true;
                lbl_alert.Text = "Saved Successfully!";
            }
            else
            {
                imgAlert.Visible = true;
                lbl_alert.Text = "Not Saved";
            }
            //Added by saranya on 12/9/2018
            string applystfLvforPastDt = string.Empty;
            if (ChkStafLeaveapply.Checked == true)
            {
                applystfLvforPastDt = "1";
            }
            else
            {
                applystfLvforPastDt = "0";
            }
            string upApplystf = "if not exists (select * from Master_Settings where usercode='" + selected_usercode + "' and settings='StaffLeaveApplyForPastDt') insert into Master_Settings(usercode,settings,value) values ('" + selected_usercode + "','StaffLeaveApplyForPastDt','" + applystfLvforPastDt + "') else update Master_Settings set value='" + applystfLvforPastDt + "' where settings='StaffLeaveApplyForPastDt' and usercode='" + selected_usercode + "'";
            int upqapplycount = d2.update_method_wo_parameter(upApplystf, "Text");
            //==============================//

            //if (chkalterdelete.Checked == true)
            //{
            //    strabsentsm = "1";
            //}
            //strquery = "delete Master_Settings where settings='Delete Alternate Periods For Reject'";
            //del = dasri.update_method_wo_parameter(strquery, "Text");
            //strquery = "insert into Master_Settings (settings,value) values('Delete Alternate Periods For Reject','" + strabsentsm + "')";
            //del = dasri.update_method_wo_parameter(strquery, "Text");
            //===================================================end============================================
            // ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Saved successfully')", true);
            imgAlert.Visible = true;
            lbl_alert.Text = "Saved successfully";
            //=================================================Schedule Settings End========================
        }





        catch (Exception ex)
        {
            errmsg.Visible = true;
            errmsg.Text = ex.ToString();
        }
    }

    protected void rbabsentees_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            rbadmno.Enabled = true;
            rbregno.Enabled = true;
            rbrollno.Enabled = true;
        }
        catch (Exception ex)
        {
        }
    }

    protected void rbgeneral_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            rbadmno.Enabled = false;
            rbregno.Enabled = false;
            rbrollno.Enabled = false;
            rbadmno.Checked = false;
            rbregno.Checked = false;
            rbrollno.Checked = false;
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddlcollege_SelectedIndexChanged(object sender, EventArgs e)
    {
        txt_attn_hour.Text = string.Empty;
        try
        {
            string strcoll = string.Empty;
            ddluser.Items.Clear();
            if (rdb_ind.Checked == true)
            {
                //cmd1.CommandText = "select distinct user_code,user_id from usermaster where college_code=" + ddlcollege.SelectedItem.Value.ToString() + "  and group_code in('0','-1','')  order by user_id";
                strcoll = "select distinct user_code,user_id from usermaster where college_code=" + ddlcollege.SelectedItem.Value.ToString() + "  and group_code in('0','-1','')  order by user_id";
            }
            else if (rdb_grp.Checked == true)
            {
                //cmd1.CommandText = "select distinct group_code as user_code,groupname as user_id from groupmaster  order by groupname";
                strcoll = "select distinct group_code as user_code,groupname as user_id from groupmaster  order by groupname";
            }
            DataSet dsufse = dasri.select_method_wo_parameter(strcoll, "Text");
            if (dsufse.Tables[0].Rows.Count > 0)
            {
                //cmd1.Connection = mysql;
                //mysql.Open();
                ddluser.DataSource = dsufse;
                ddluser.DataValueField = "user_code";
                ddluser.DataTextField = "user_id";
                ddluser.DataBind();
                // mysql.Close();
            }
            //ddluser.Items.Insert(0, "---Select---");
            loadbatch();
            string straccheadquery = "SELECT distinct HeaderPK,HeaderName FROM FM_HeaderMaster H WHERE CollegeCode = " + ddlcollege.SelectedValue + "";
            DataSet ds = dasri.select_method_wo_parameter(straccheadquery, "Text");
            ddleappheader.Items.Clear();
            ddleappledger.Items.Clear();
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddleappheader.DataSource = ds;
                ddleappheader.DataTextField = "HeaderName";
                ddleappheader.DataValueField = "HeaderPK";
                ddleappheader.DataBind();
                string strquer = "SELECT distinct LedgerPK,LedgerName FROM FM_LedgerMaster L WHERE  l.LedgerMode=0   AND L.CollegeCode = " + ddlcollege.SelectedValue + " and L.HeaderFK in (" + Convert.ToString(ddleappheader.SelectedItem.Value) + ")";
                DataSet ds1 = dasri.select_method_wo_parameter(strquer, "text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    ddleappledger.DataSource = ds1;
                    ddleappledger.DataTextField = "ledgername";
                    ddleappledger.DataValueField = "ledgerpk";
                    ddleappledger.DataBind();
                }
            }
            binddegree();
            loadfinyear();
            loadheader();
            loadled();
            loadtapal_header();
            loadtapal_ledger();
            loadFineHeader();
            loadFineLedger();
            bindBtch();
            binddeg();
            binddept();
            loadTransportHeader();
            loadTransportLedger();
            loadMessHeader();
            loadMessLedger();
            loadOtherCOlleges(sender, e);
            bindcolltype();
            collegebankAdmission();
            ddltype_college_Changed(sender, e);
            ddlapplicationcode_colltype_college_Changed(sender, e);
            ddlapplicatonno_colltype_changed(sender, e);
            educationLevel();
            loadAppLedger();
            ////application fee
            loadstream();
            educationLevel();
            loadAppLedger();
            bind_mess();
            loadcoll();//delsi0706

            //  loadhrdept();
            loadclgbank();
            cbhrdept.Checked = false;
            txthrdept.Text = "--Select--";
            //Added by Idhris 08-08-2016
            BindCOmpCourse();
            BindCOmpType();
            ddlCOmpCOurse_IndexChange(sender, e);
            bindModerEduLevel();
            bindModerBatch();
            bindModerSem();
            loadMainJrHed();
            BindClassifyBatchYear();
            loadfromyear();

            loadfinanceyear();
            loadOnlineHeaders();
            loadOnlineLedgers();
            bindAttendanceHourSetting();
        }
        catch (Exception ex)
        {
        }
    }

    protected void delete_btn_Click(object sender, EventArgs e)
    {
        try
        {
            str_hour = dasri.GetFunctionv("select max(No_of_hrs_per_day) from PeriodAttndSchedule");
            hours_val = Convert.ToInt16(str_hour);
            for (loop_val_row = 0; loop_val_row < 6; loop_val_row++)
            {
                for (loop_val_col = 1; loop_val_col <= hours_val; loop_val_col++)
                {
                    fine_spread.Sheets[0].Cells[loop_val_row, loop_val_col].Text = string.Empty;
                }
            }
            //SqlDataReader save_dr;
            //con.Close();
            //con.Open();
            //cmd = new SqlCommand("delete from absent_fine_amt ", con);
            insupdvalue = dasri.update_method_wo_parameter("delete from absent_fine_amt ", "Text");
            //save_dr = cmd.ExecuteReader();
            //save_dr.Read();
            bindspread();
            //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Deleted successfully')", true);
            imgAlert.Visible = true;
            lbl_alert.Text = "Deleted successfully";
        }
        catch (Exception ex)
        {
        }
    }

    protected void TabContainer1_ActiveTabChanged(object sender, EventArgs e)
    {
        clearDivisions();
        try
        {
            btnsave.Visible = true;
            btnfin_save.Visible = false;
            btnsave_coe.Visible = false;
            save_btn.Visible = true;
            if (TabContainer1.SelectedIndex == 2)
            {
                btnsave.Visible = true;
                btnsave_coe.Visible = false;
            }
            else if (TabContainer1.SelectedIndex == 5)
            {
                btnsave.Visible = true;
            }
            else
            {
                btnsave.Visible = true;
            }
            if (TabContainer1.SelectedIndex == 1 || TabContainer1.SelectedIndex == 2)
            {
            }
            else
            {
            }
            if (TabContainer1.SelectedIndex == 3)
            {
                btnsave.Visible = true;
                btnfin_save.Visible = true;
                save_btn.Visible = false;
                btnsave_coe.Visible = false;
            }
            if (TabContainer1.SelectedIndex == 4)
            {
                btnsave.Visible = false;
                btnfin_save.Visible = false;
                save_btn.Visible = false;
                btnsave_coe.Visible = true;
            }
            if (TabContainer1.SelectedIndex == 0)
            {
            }
            if (TabContainer1.SelectedIndex == 7)
            {
                ddlmainpurpose.Items.Clear();
                ddlmainpurpose.Items.Add("---Select---");
                ddlmainpurpose.Items.Add("Attendance");
                ddlmainpurpose.Items.Add("CAM");
                ddlmainpurpose.Items.Add("Finance");
                ddlmainpurpose.Items.Add("University Result");
                ddlmainpurpose.Items.Add("Attendance Cummulative");
                bindtemple();
            }
            if (TabContainer1.SelectedIndex == 8)
            {
                setLabelText();
            }
            if (TabContainer1.SelectedIndex == 9)
            {
            }
            if (TabContainer1.SelectedIndex == 10)
            {
            }
            if (TabContainer1.SelectedIndex == 11)
            {
            }
            if (TabContainer1.SelectedIndex == 12)  //modified by kowshika on 11/12/2017
            {
                div13Invigilation.Visible = true;
                CycleTest();
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void clearDivisions()
    {
        div1WebFormRights.Visible = false;
        div2Settings.Visible = false;
        div3FineAmount.Visible = false;
        div4FinPrintSet.Visible = false;
        div5COE.Visible = false;
        div6Attendance.Visible = false;
        div7TransRemind.Visible = false;
        div8SMS.Visible = false;
        div9Admission.Visible = false;
        div10Hr.Visible = false;
        div11UserDeg.Visible = false;
        div12WebPay.Visible = false;
        div13Invigilation.Visible = false;  //modified by kowshika 11/12/2017
        btnWebRights_0.BackColor = ColorTranslator.FromHtml("#A537D1");
        btnSettings_1.BackColor = ColorTranslator.FromHtml("#A537D1");
        btnFineAmt_2.BackColor = ColorTranslator.FromHtml("#A537D1");
        btnFinancePrint_3.BackColor = ColorTranslator.FromHtml("#A537D1");
        btnCOE_4.BackColor = ColorTranslator.FromHtml("#A537D1");
        btnAttendance_5.BackColor = ColorTranslator.FromHtml("#A537D1");
        btnTransRemind_6.BackColor = ColorTranslator.FromHtml("#A537D1");
        btnSMSTemp_7.BackColor = ColorTranslator.FromHtml("#A537D1");
        btnAdmissionProc_8.BackColor = ColorTranslator.FromHtml("#A537D1");
        btnHRSettings_9.BackColor = ColorTranslator.FromHtml("#A537D1");
        btnUserDegRights_10.BackColor = ColorTranslator.FromHtml("#A537D1");
        btnWebsitePayment_11.BackColor = ColorTranslator.FromHtml("#A537D1");
        btninvigilation_12.BackColor = ColorTranslator.FromHtml("#A537D1");//added by kowshi
        switch (TabContainer1.SelectedIndex)
        {
            case 0:
                div1WebFormRights.Visible = true;
                btnWebRights_0.BackColor = ColorTranslator.FromHtml("#EB162C");
                break;
            case 1:
                div2Settings.Visible = true;
                btnSettings_1.BackColor = ColorTranslator.FromHtml("#EB162C");
                break;
            case 2:
                div3FineAmount.Visible = true;
                btnFineAmt_2.BackColor = ColorTranslator.FromHtml("#EB162C");
                break;
            case 3:
                div4FinPrintSet.Visible = true;
                btnFinancePrint_3.BackColor = ColorTranslator.FromHtml("#EB162C");
                break;
            case 4:
                div5COE.Visible = true;
                btnCOE_4.BackColor = ColorTranslator.FromHtml("#EB162C");
                break;
            case 5:
                div6Attendance.Visible = true;
                btnAttendance_5.BackColor = ColorTranslator.FromHtml("#EB162C");
                break;
            case 6:
                div7TransRemind.Visible = true;
                btnTransRemind_6.BackColor = ColorTranslator.FromHtml("#EB162C");
                break;
            case 7:
                div8SMS.Visible = true;
                btnSMSTemp_7.BackColor = ColorTranslator.FromHtml("#EB162C");
                break;
            case 8:
                div9Admission.Visible = true;
                btnAdmissionProc_8.BackColor = ColorTranslator.FromHtml("#EB162C");
                break;
            case 9:
                div10Hr.Visible = true;
                btnHRSettings_9.BackColor = ColorTranslator.FromHtml("#EB162C");
                break;
            case 10:
                div11UserDeg.Visible = true;
                btnUserDegRights_10.BackColor = ColorTranslator.FromHtml("#EB162C");
                break;
            case 11:
                div12WebPay.Visible = true;
                btnWebsitePayment_11.BackColor = ColorTranslator.FromHtml("#EB162C");
                break;
            case 12://added by Kowshi
                div13Invigilation.Visible = true;
                btninvigilation_12.BackColor = ColorTranslator.FromHtml("#EB162C");
                break;
        }
    }

    protected void save_btn_Click(object sender, EventArgs e)
    {
        try
        {
            //---------------------------------save fine amount
            fine_spread.SaveChanges();
            str_hour = dasri.GetFunctionv("select max(No_of_hrs_per_day) from PeriodAttndSchedule");
            hours_val = Convert.ToInt16(str_hour);
            for (loop_val_row = 0; loop_val_row < 6; loop_val_row++)
            {
                temp = string.Empty;
                hrandval = string.Empty;
                hr_val = string.Empty;
                count = 0;
                // day_val = fine_spread.Sheets[0].RowHeader.Cells[loop_val_row, 1].Text;
                day_val = fine_spread.Sheets[0].Cells[loop_val_row, 0].Text; //modified by Mullai
                for (loop_val_col = 1; loop_val_col <= hours_val; loop_val_col++)
                {
                    count++;
                    amt_val = fine_spread.Sheets[0].Cells[loop_val_row, loop_val_col].Text;
                    if (amt_val.ToString().Trim() == "")
                    {
                        amt_val = "0";
                    }
                    if (temp == "")
                    {
                        hr_val = "hr" + count;
                        temp = amt_val;
                        hrandval = "hr" + count + "=" + amt_val;
                    }
                    else
                    {
                        hr_val = hr_val + "," + "hr" + count;
                        temp = temp + "," + amt_val;
                        hrandval = hrandval + "," + "hr" + count + "=" + amt_val;
                    }
                }
                if (temp != "")
                {
                    DataSet dsabfin = dasri.select_method_wo_parameter("select * from absent_fine_amt where day_value='" + day_val + "'", "Text");
                    if (dsabfin.Tables[0].Rows.Count > 0)
                    {
                        insupdvalue = dasri.update_method_wo_parameter("update absent_fine_amt set " + hrandval + " where day_value='" + day_val + "'", "Text");
                    }
                    else
                    {
                        insupdvalue = dasri.update_method_wo_parameter("insert into absent_fine_amt(day_value," + hr_val + ") values('" + day_val + "'," + temp + ")", "Text");
                    }
                    //SqlDataReader select_dr;
                    //con1.Close();
                    //con1.Open();
                    //cmd1 = new SqlCommand("select *from absent_fine_amt where day_value='" + day_val + "'", con1);
                    //select_dr = cmd1.ExecuteReader();
                    //if (select_dr.HasRows == true)
                    //{
                    //    while (select_dr.Read())
                    //    {
                    //        SqlDataReader save_dr;
                    //        con.Close();
                    //        con.Open();
                    //        cmd = new SqlCommand("update absent_fine_amt set " + hrandval + " where day_value='" + day_val + "' ", con);
                    //        save_dr = cmd.ExecuteReader();
                    //        save_dr.Read();
                    //    }
                    //}
                    //else
                    //{
                    //    if (temp != "")
                    //    {
                    //        SqlDataReader save_dr;
                    //        con.Close();
                    //        con.Open();
                    //        cmd = new SqlCommand("insert into absent_fine_amt(day_value," + hr_val + ") values('" + day_val + "'," + temp + ")", con);
                    //        save_dr = cmd.ExecuteReader();
                    //        save_dr.Read();
                    //    }
                    //}
                }
            }
            //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Save successfully')", true);
            imgAlert.Visible = true;
            lbl_alert.Text = "Saved successfully";
        }
        catch (Exception ex)
        {
        }
    }
    //added by mullai
    public void formatsave_Click(object sender, EventArgs e)
    {
        try
        {
            if (ddl_otColleges.Items.Count > 0)
            {
                string college = ddl_otColleges.SelectedItem.Value;
                for (int i = 0; i < ddluser.Items.Count; i++)
                {
                    if (ddluser.Items[i].Selected == true)
                    {
                        selected_userid = Convert.ToString(ddluser.Items[i].Text);
                        selected_usercode = Convert.ToInt16(ddluser.Items[i].Value);
                        //bindMulTerm(Convert.ToString(selected_usercode));
                        if (rdb_ind.Checked == true)
                        {
                            userorgropcode = " and usercode='" + selected_usercode.ToString() + "'";
                            user_gropcode = " and user_code='" + selected_usercode.ToString() + "'";
                            usergroup = "  usercode='" + selected_usercode.ToString() + "'";
                            strusergruop = "usercode";
                            struser_gruop = "user_code";
                        }
                        else if (rdb_grp.Checked == true)
                        {
                            userorgropcode = " and group_code='" + selected_usercode.ToString() + "'";
                            user_gropcode = " and group_code='" + selected_usercode.ToString() + "'";
                            usergroup = "  group_code='" + selected_usercode.ToString() + "'";
                            strusergruop = "group_code";
                            struser_gruop = "group_code";
                        }
                        user_code = selected_usercode.ToString();
                        foreach (GridViewRow gridrow in certificateformat_grid.Rows)
                        {
                            string formattype = Convert.ToString((gridrow.FindControl("ddlFormattype") as DropDownList).SelectedValue);
                            string Certificate_ID = Convert.ToString((gridrow.FindControl("lbl_certificateId") as Label).Text);
                            string certificate_Name = Convert.ToString((gridrow.FindControl("lbl_certificatename") as Label).Text);
                            string update = string.Empty;
                            update = "if exists (select * from Master_Settings where settings='CertificateFormatSetting' " + userorgropcode + ") update Master_settings set value='" + Certificate_ID + "$" + formattype + "' where settings='CertificateFormatSetting' " + userorgropcode + "  else insert into Master_settings (" + strusergruop + ",settings,value) values ('" + selected_usercode + "','CertificateFormatSetting','" + Certificate_ID + "$" + formattype + "')";

                            int copy = dasri.update_method_wo_parameter(update, "text");

                            if (copy > 0)
                            {

                                imgAlert.Visible = true;
                                lbl_alert.Text = "Saved successfully";
                            }
                        }
                    }
                }
            }
        }
        catch
        {
        }

    }
    ////////

    public void bindspread()
    {
        try
        {
            // fine_spread.Sheets[0].AutoPostBack = true;
            fine_spread.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Name = "Book Antiqua";
            fine_spread.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            fine_spread.ActiveSheetView.ColumnHeader.DefaultStyle.Font.Bold = true;
            fine_spread.ActiveSheetView.RowHeader.DefaultStyle.Font.Name = "Book Antiqua";
            fine_spread.ActiveSheetView.RowHeader.DefaultStyle.Font.Size = FontUnit.Medium;
            fine_spread.ActiveSheetView.RowHeader.DefaultStyle.Font.Bold = true;
            fine_spread.ActiveSheetView.DefaultStyle.Font.Name = "Book Antiqua";
            fine_spread.ActiveSheetView.DefaultStyle.Font.Size = FontUnit.Medium;
            fine_spread.Sheets[0].SheetCorner.Cells[0, 0].Text = "S.No";
            FarPoint.Web.Spread.StyleInfo style1 = new FarPoint.Web.Spread.StyleInfo();
            style1.Font.Size = 10;
            style1.Font.Bold = true;
            fine_spread.Sheets[0].SheetCornerStyle = new FarPoint.Web.Spread.StyleInfo(style1);
            fine_spread.Sheets[0].AllowTableCorner = true;
            fine_spread.Sheets[0].AutoPostBack = false;
            fine_spread.Sheets[0].RowHeader.Visible = false;
            fine_spread.Sheets[0].SheetCorner.Cells[0, 0].HorizontalAlign = HorizontalAlign.Center;
            fine_spread.Sheets[0].Columns[0].Width = 100;
            fine_spread.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Left;
            fine_spread.Sheets[0].ColumnHeader.Cells[0, 0].Text = " ";
            fine_spread.CommandBar.Visible = false;
            fine_spread.Sheets[0].SheetCorner.Columns[0].Width = 100;
            int row_cnt = 0;
            int hour_val = 0;
            int order_val = 0;
            int loop_val = 0;
            string str_hour_val = string.Empty;
            string str_order_val = string.Empty;
            str_hour_val = dasri.GetFunctionv("select max(No_of_hrs_per_day) from PeriodAttndSchedule");
            if (str_hour_val.Trim() != "" && str_hour_val != " ")//condition added on 21.07.12
            {
                hour_val = Convert.ToInt16(str_hour_val);
            }
            str_order_val = dasri.GetFunctionv("select schorder from PeriodAttndSchedule");
            if (str_order_val.Trim() != "" && str_order_val != " ")//condition added on 21.07.12
            {
                order_val = Convert.ToInt16(str_order_val);
            }
            fine_spread.Sheets[0].ColumnCount = hour_val + 1;
            fine_spread.Sheets[0].DefaultStyle.HorizontalAlign = HorizontalAlign.Center;
            FarPoint.Web.Spread.DoubleCellType intgrcel = new FarPoint.Web.Spread.DoubleCellType();
            intgrcel.ErrorMessage = "Enter Valid Amount";
            for (loop_val = 1; loop_val <= hour_val; loop_val++)
            {
                fine_spread.Sheets[0].ColumnHeader.Cells[0, (loop_val)].Text = loop_val.ToString();
                fine_spread.Sheets[0].ColumnHeader.Columns[loop_val].Width = 40;
                fine_spread.Sheets[0].Columns[loop_val].CellType = intgrcel;
            }
            fine_spread.Sheets[0].RowHeader.DefaultStyle.HorizontalAlign = HorizontalAlign.Left;
            fine_spread.Sheets[0].RowCount = 6;
            fine_spread.Sheets[0].Cells[0, 0].Text = "Monday";
            fine_spread.Sheets[0].Cells[1, 0].Text = "Tuesday";
            fine_spread.Sheets[0].Cells[2, 0].Text = "Wednesday";
            fine_spread.Sheets[0].Cells[3, 0].Text = "Thursday";
            fine_spread.Sheets[0].Cells[4, 0].Text = "Friday";
            fine_spread.Sheets[0].Cells[5, 0].Text = "Saturday";
            //SqlDataReader get_dr;
            //con.Close();
            //con.Open();
            //cmd = new SqlCommand("select *from absent_fine_amt", con);
            row_cnt = 0;
            DataSet dsabsfin = dasri.select_method_wo_parameter("select *from absent_fine_amt", "Text");
            for (int r = 0; r < dsabsfin.Tables[0].Rows.Count; r++)
            {
                for (loop_val = 1; loop_val <= hour_val; loop_val++)
                {
                    if (dsabsfin.Tables[0].Rows[r][loop_val].ToString() != "0")
                    {
                        fine_spread.Sheets[0].Cells[r, loop_val].Text = dsabsfin.Tables[0].Rows[r][loop_val].ToString();
                    }
                }
            }
            //get_dr = cmd.ExecuteReader();
            //while (get_dr.Read())
            //{
            //    if (get_dr.HasRows == true)
            //    {
            //        for (loop_val = 0; loop_val < hour_val; loop_val++)
            //        {
            //            fine_spread.Sheets[0].Cells[row_cnt, loop_val].Text = get_dr[loop_val + 1].ToString();
            //        }
            //        row_cnt++;
            //    }
            //}
        }
        catch (Exception ex)
        {
        }
    }

    //--------------------getfunction
    //public string GetFunction(string Att_strqueryst)
    //{
    //    string sqlstr;
    //    sqlstr = Att_strqueryst;
    //    getsql.Close();
    //    getsql.Open();
    //    SqlDataAdapter sqlAdapter1 = new SqlDataAdapter(sqlstr, getsql);
    //    SqlDataReader dr_get;
    //    SqlCommand cmd_get = new SqlCommand(sqlstr);
    //    cmd_get.Connection = getsql;
    //    dr_get = cmd_get.ExecuteReader();
    //    dr_get.Read();
    //    if (dr_get.HasRows == true)
    //    {
    //        return dr_get[0].ToString();
    //    }
    //    else
    //    {
    //        return "";
    //    }
    //}

    protected void btn_originalmark_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            lblmark.Visible = false;
            txtmark.Visible = false;
            //btn_convertmark.Checked = false;
            //btn_originalmark.Checked = true;
        }
        catch (Exception ex)
        {
        }
    }

    protected void btn_convertmark_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            lblmark.Visible = true;
            txtmark.Visible = true;
            //btn_originalmark.Checked = false;
            //btn_convertmark.Checked = true;
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnsave_coe_Click(object sender, EventArgs e)//---------------on 28/12/2011
    {
        //---------------------------------------------COE Mark Type original
        try
        {
            if (btn_originalmark.Checked == true || (btn_convertmark.Checked == true && txtmark.Text.Trim() != ""))
            {
                errlbl_cor.Visible = false;
                int ori_mark = 0;
                int con_mark = 0;
                int mark_val = 0;
                if (btn_originalmark.Checked == true)
                {
                    ori_mark = 1;
                }
                else
                {
                    ori_mark = 0;
                }
                //SqlDataReader dr_coe;
                //con.Close();
                //con.Open();
                //cmd = new SqlCommand("select *from COE_Master_Settings where settings='Mark Conversion'", con);
                //dr_coe = cmd.ExecuteReader();
                DataSet dsmarkc = dasri.select_method_wo_parameter("select *from COE_Master_Settings where settings='Mark Conversion'", "text");
                if (dsmarkc.Tables[0].Rows.Count > 0)
                //if (dr_coe.HasRows == true)
                {
                    //dr_coe.Read();
                    //{
                    //SqlDataReader save_dr_coe;
                    //con.Close();
                    //con.Open();
                    //cmd = new SqlCommand("update COE_Master_Settings set value=" + ori_mark + " where settings='Mark Conversion'", con);
                    //save_dr_coe = cmd.ExecuteReader();
                    //save_dr_coe.Read();
                    //}
                    insupdvalue = dasri.update_method_wo_parameter("update COE_Master_Settings set value=" + ori_mark + " where settings='Mark Conversion'", "Text");
                }
                else
                {
                    insupdvalue = dasri.update_method_wo_parameter("insert into COE_Master_Settings(settings,value) values('Mark Conversion'," + ori_mark + ")", "Text");
                    //SqlDataReader save_dr_coe;
                    //con.Close();
                    //con.Open();
                    //cmd = new SqlCommand("insert into COE_Master_Settings(settings,value) values('Mark Conversion'," + ori_mark + ")", con);
                    //save_dr_coe = cmd.ExecuteReader();
                    //save_dr_coe.Read();
                }
                //-------------------------COE mark
                if (ori_mark == 0)
                {
                    mark_val = int.Parse(txtmark.Text.ToString());
                    //SqlDataReader dr_coe3;
                    //con.Close();
                    //con.Open();
                    //cmd = new SqlCommand("select *from COE_Master_Settings where settings='" + lblmark.Text + "'", con);
                    //dr_coe3 = cmd.ExecuteReader();
                    DataSet dsmarkc1 = dasri.select_method_wo_parameter("select *from COE_Master_Settings where settings='" + lblmark.Text + "'", "text");
                    if (dsmarkc1.Tables[0].Rows.Count > 0)
                    // if (dr_coe3.HasRows == true)
                    {
                        //if (dr_coe3.Read())
                        {
                            //SqlDataReader save_dr_coe3;
                            //con.Close();
                            //con.Open();
                            //cmd = new SqlCommand("update COE_Master_Settings set value=" + mark_val + " where settings='" + lblmark.Text + "'", con);
                            //save_dr_coe3 = cmd.ExecuteReader();
                            //save_dr_coe3.Read();
                            insupdvalue = dasri.update_method_wo_parameter("update COE_Master_Settings set value=" + mark_val + " where settings='" + lblmark.Text + "'", "Text");
                        }
                    }
                    else
                    {
                        //SqlDataReader save_dr_coe4;
                        //con.Close();
                        //con.Open();
                        //cmd = new SqlCommand("insert into COE_Master_Settings(settings,value) values('" + lblmark.Text + "'," + mark_val + ")", con);
                        //save_dr_coe4 = cmd.ExecuteReader();
                        //save_dr_coe4.Read();
                        insupdvalue = dasri.update_method_wo_parameter("insert into COE_Master_Settings(settings,value) values('" + lblmark.Text + "'," + mark_val + ")", "Text");
                    }
                }
            }
            else
            {
                errlbl_cor.Visible = true;
            }
            int flag = 0;
            string theoryinternal = "0";
            string theoryexternal = "0";
            string practicalinternal = "0";
            string practicalexternal = "0";
            if (txttheoryinternal.Text != "")
            {
                theoryinternal = txttheoryinternal.Text;
            }
            if (txttheorypractical.Text != "")
            {
                theoryexternal = txttheorypractical.Text;
                string tottal = Convert.ToString((Convert.ToInt32(theoryinternal)) + Convert.ToInt32(theoryexternal));
                if (Convert.ToInt32(tottal) > 100)
                {
                    flag = 1;
                    lbltheory.Visible = true;
                    lbltheory.Text = "Mark Should be less than 100";
                }
            }
            if (txtpracticalinternal.Text != "")
            {
                practicalinternal = txtpracticalinternal.Text;
            }
            if (txtpracticalexternal.Text != "")
            {
                practicalexternal = txtpracticalexternal.Text;
                string tottal = Convert.ToString((Convert.ToInt32(practicalinternal)) + Convert.ToInt32(practicalexternal));
                if (Convert.ToInt32(tottal) > 100)
                {
                    flag = 1;
                    lblpractical.Visible = true;
                    lblpractical.Text = "Mark Should be less than 100";
                }
            }
            if (flag == 0)
            {
                lbltheory.Visible = false;
                lblpractical.Visible = false;
                string sqlstr = string.Empty;
                //SqlDataAdapter dathint = new SqlDataAdapter("select * from COE_Master_Settings where settings='convert_th_internal'", con);
                DataSet dsthint = dasri.select_method_wo_parameter("select * from COE_Master_Settings where settings='convert_th_internal'", "Text");
                //con.Close();
                //con.Open();
                //dathint.Fill(dsthint);
                if (dsthint.Tables[0].Rows.Count > 0)
                {
                    sqlstr = "update COE_Master_Settings set value=" + theoryinternal + "  where  settings='convert_th_internal'";
                    //SqlCommand cmd = new SqlCommand(sqlstr);
                    //cmd.Connection = con;
                    //cmd.ExecuteNonQuery();
                    insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                }
                else
                {
                    sqlstr = "insert into COE_Master_Settings(settings,value)values('convert_th_internal', '" + theoryinternal + "')";
                    //SqlCommand cmd = new SqlCommand(sqlstr);
                    //cmd.Connection = con;
                    //cmd.ExecuteNonQuery();
                    insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                }
                //SqlDataAdapter dathext = new SqlDataAdapter("select * from COE_Master_Settings where settings='convert_th_external'", con);
                DataSet dsthext = dasri.select_method_wo_parameter("select * from COE_Master_Settings where settings='convert_th_external'", "Text");
                //con.Close();
                //con.Open();
                //dathext.Fill(dsthext);
                if (dsthext.Tables[0].Rows.Count > 0)
                {
                    sqlstr = "update COE_Master_Settings set value=" + theoryexternal + "  where  settings='convert_th_external'";
                    //SqlCommand cmd = new SqlCommand(sqlstr);
                    //cmd.Connection = con;
                    //cmd.ExecuteNonQuery();
                    insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                }
                else
                {
                    sqlstr = "insert into COE_Master_Settings(settings,value)values('convert_th_external', '" + theoryexternal + "')";
                    //SqlCommand cmd = new SqlCommand(sqlstr);
                    //cmd.Connection = con;
                    //cmd.ExecuteNonQuery();
                    insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                }
                //SqlDataAdapter dapracint = new SqlDataAdapter("select * from COE_Master_Settings where settings='convert_prac_internal' ", con);
                DataSet dspracint = dasri.select_method_wo_parameter("select * from COE_Master_Settings where settings='convert_prac_internal' ", "Text");
                //con.Close();
                //con.Open();
                //dapracint.Fill(dspracint);
                if (dspracint.Tables[0].Rows.Count > 0)
                {
                    sqlstr = "update COE_Master_Settings set value=" + practicalinternal + "  where  settings='convert_prac_internal'";
                    //SqlCommand cmd = new SqlCommand(sqlstr);
                    //cmd.Connection = con;
                    //cmd.ExecuteNonQuery();
                    insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                }
                else
                {
                    sqlstr = "insert into COE_Master_Settings(settings,value)values('convert_prac_internal', '" + practicalinternal + "')";
                    //SqlCommand cmd = new SqlCommand(sqlstr);
                    //cmd.Connection = con;
                    //cmd.ExecuteNonQuery();
                    insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                }
                //SqlDataAdapter dapracext = new SqlDataAdapter("select * from COE_Master_Settings where settings='convert_prac_external' ", con);
                DataSet dspracext = dasri.select_method_wo_parameter("select * from COE_Master_Settings where settings='convert_prac_external' ", "Text");
                //con.Close();
                //con.Open();
                //dapracext.Fill(dspracext);
                if (dspracext.Tables[0].Rows.Count > 0)
                {
                    sqlstr = "update COE_Master_Settings set value=" + practicalexternal + "  where  settings='convert_prac_external'";
                    //SqlCommand cmd = new SqlCommand(sqlstr);
                    //cmd.Connection = con;
                    //cmd.ExecuteNonQuery();
                    insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                }
                else
                {
                    sqlstr = "insert into COE_Master_Settings(settings,value)values('convert_prac_external', '" + practicalexternal + "')";
                    //SqlCommand cmd = new SqlCommand(sqlstr);
                    //cmd.Connection = con;
                    //cmd.ExecuteNonQuery();
                    insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                }
                //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Save successfully')", true);
                imgAlert.Visible = true;
                lbl_alert.Text = "Saved successfully";
            }
            else
            {
            }
            if (txt_grade.Text.ToString().Trim() != "")
            {
                //con.Close();
                //con.Open();
                string sqlstr_var = string.Empty;
                sqlstr_var = "delete from COE_Master_Settings where settings='Fail Grade'";
                insupdvalue = dasri.update_method_wo_parameter(sqlstr_var, "text");
                //SqlCommand cmd_gr = new SqlCommand(sqlstr_var);
                //cmd_gr.Connection = con;
                //cmd_gr.ExecuteNonQuery();
                //con.Close();
                //con.Open();
                sqlstr_var = "insert into COE_Master_Settings(settings,value) values('Fail Grade','" + txt_grade.Text.ToString() + "')";
                insupdvalue = dasri.update_method_wo_parameter(sqlstr_var, "text");
                //SqlCommand cmd_coe = new SqlCommand(sqlstr_var);
                //cmd_coe.Connection = con;
                //cmd_coe.ExecuteNonQuery();
            }
            if (FpSpread1.Sheets[0].RowCount > 0)
            {
                FpSpread1.SaveChanges();
                FpSpread1.Sheets[0].ColumnCount = 5;
                string querystr = string.Empty;
                string qryBatchYear = string.Empty;
                string batch = string.Empty;
                if (ddlBatchYear.Items.Count > 0)
                {
                    batch = Convert.ToString(ddlBatchYear.SelectedValue).Trim();
                    if (!string.IsNullOrEmpty(batch) && batch.Trim().ToLower() != "-1" && batch.Trim().ToLower() != "0" && batch.Trim().ToLower() != "all" && batch.Trim().ToLower() != "--select--")
                    {
                        qryBatchYear = " and batch_year='" + batch + "'";
                    }
                }
                querystr = "Delete from coe_classification where collegecode=" + ddlcollege.SelectedItem.Value.ToString() + " and edu_level='" + drp_edulevel.SelectedItem.ToString() + "' " + qryBatchYear;
                dasri.select_method(querystr, ht, "");
                double from = 0;
                double to = 0;
                string classification = string.Empty;
                string grade = string.Empty;
                // batch = string.Empty;
                for (int v = 0; v < FpSpread1.Sheets[0].RowCount; v++)
                {
                    if (FpSpread1.Sheets[0].Cells[v, 0].Text.ToString() != "" && FpSpread1.Sheets[0].Cells[v, 1].Text.ToString() != "" && FpSpread1.Sheets[0].Cells[v, 2].Text.ToString() != "")
                    {
                        from = Math.Round((Convert.ToDouble(FpSpread1.Sheets[0].Cells[v, 0].Text.ToString())), 2);
                        to = Math.Round((Convert.ToDouble(FpSpread1.Sheets[0].Cells[v, 1].Text.ToString())), 2);
                        classification = Convert.ToString(FpSpread1.Sheets[0].Cells[v, 2].Text.ToString());
                        grade = Convert.ToString(FpSpread1.Sheets[0].Cells[v, 3].Text.ToString());
                        batch = Convert.ToString(FpSpread1.Sheets[0].Cells[v, 4].Text.ToString());
                        bool isBatchVisible = FpSpread1.Sheets[0].Columns[4].Visible;
                        if (from != null && to != null && classification != "")
                        {
                            string strinsert = "insert into coe_classification(frompoint,topoint,classification,collegecode,edu_level,grade" + ((isBatchVisible) ? ",batch_year" : "") + ") values('" + from + "','" + to + "','" + classification + "','" + ddlcollege.SelectedItem.Value.ToString() + "','" + drp_edulevel.SelectedItem.ToString() + "','" + grade + "'" + ((isBatchVisible) ? ",'" + batch + "'" : "") + ")";
                            dasri.insert_method(strinsert, ht, "");
                        }
                        else
                        {
                            lblerrvel.Visible = true;
                        }
                    }
                    else
                    {
                        lblerrvel.Visible = true;
                    }
                }
            }
            if (txtattempts.Text != "" && txtmaxmarkv.Text != "")
            {
                dasri.select_method("delete from coe_attmaxmark where collegecode='" + ddlcollege.SelectedItem.Value.ToString() + "'", ht, "");
                string strinsert = "insert into coe_attmaxmark(attempts,maxmark,collegecode) values('" + txtattempts.Text + "','" + txtmaxmarkv.Text + "','" + ddlcollege.SelectedItem.Value.ToString() + "')";
                dasri.insert_method(strinsert, ht, "");
            }
            else
            {
                dasri.select_method("delete from coe_attmaxmark where collegecode='" + ddlcollege.SelectedItem.Value.ToString() + "'", ht, "");
            }
            if ((txt_cgpa.Text.Trim().ToString() != "") && (txt_clasfi.Text.Trim().ToString() != ""))
            {
                string querystr = string.Empty;
                querystr = "Delete from coe_classification_allpass where college_code=" + ddlcollege.SelectedItem.Value.ToString() + " and edu_level='" + drp_edu.SelectedItem.ToString() + "' ";
                dasri.select_method(querystr, ht, "");
                querystr = "Insert into coe_classification_allpass(college_code,edu_level,cgpa,classification) values(" + ddlcollege.SelectedItem.Value.ToString() + ",'" + drp_edu.SelectedItem.ToString() + "'," + txt_cgpa.Text.ToString() + ",'" + txt_clasfi.Text.ToString() + "')";
                dasri.insert_method(querystr, ht, "");
            }
            //Start Aruna 17Apr2014 ===============================================
            //con.Close();
            //con.Open();
            string sqlstring = "delete from COE_Master_Settings where settings='Evaluation'";
            insupdvalue = dasri.update_method_wo_parameter(sqlstring, "text");
            //SqlCommand cmdeve = new SqlCommand(sqlstring);
            //cmdeve.Connection = con;
            //cmdeve.ExecuteNonQuery();
            if (txt_ev.Text.ToString() != "")
            {
                //con.Close();
                //con.Open();
                sqlstring = "insert into COE_Master_Settings(settings,value) values('Evaluation','" + txt_ev.Text.ToString() + "')";
                insupdvalue = dasri.update_method_wo_parameter(sqlstring, "text");
                //SqlCommand cmdeve1 = new SqlCommand(sqlstring);
                //cmdeve1.Connection = con;
                //cmdeve1.ExecuteNonQuery();
            }
            //con.Close();
            //con.Open();
            sqlstring = "delete from COE_Master_Settings where settings='MaxExternalMark " + DropDownList1.SelectedItem.Text + "'";
            insupdvalue = dasri.update_method_wo_parameter(sqlstring, "text");
            //SqlCommand cmddef14 = new SqlCommand(sqlstring);
            //cmddef14.Connection = con;
            //cmddef14.ExecuteNonQuery();
            if (TextBox1.Text.ToString() != "")
            {
                //con.Close();
                //con.Open();
                sqlstring = "insert into COE_Master_Settings(settings,value) values('MaxExternalMark " + DropDownList1.SelectedItem.Text + "','" + TextBox1.Text.ToString() + "')";
                insupdvalue = dasri.update_method_wo_parameter(sqlstring, "text");
                //SqlCommand cmdeve11 = new SqlCommand(sqlstring);
                //cmdeve11.Connection = con;
                //cmdeve11.ExecuteNonQuery();
            }
            sqlstring = "delete from COE_Master_Settings where settings='Direct_CIA'";
            insupdvalue = dasri.update_method_wo_parameter(sqlstring, "text");
            //SqlCommand cmddef14 = new SqlCommand(sqlstring);
            //cmddef14.Connection = con;
            //cmddef14.ExecuteNonQuery();
            if (chk_onlycia.Checked == true)
            {
                sqlstring = "insert into COE_Master_Settings(settings,value) values('Direct_CIA','1')";
                insupdvalue = dasri.update_method_wo_parameter(sqlstring, "text");
            }
            else
            {
                sqlstring = "insert into COE_Master_Settings(settings,value) values('Direct_CIA','0')";
                insupdvalue = dasri.update_method_wo_parameter(sqlstring, "text");
            }
            //con.Close();
            //con.Open();
            sqlstring = "delete from COE_Master_Settings where settings='Mark Difference'";
            insupdvalue = dasri.update_method_wo_parameter(sqlstring, "text");
            //SqlCommand cmddef = new SqlCommand(sqlstring);
            //cmddef.Connection = con;
            //cmddef.ExecuteNonQuery();
            if (txt_difmark.Text.ToString() != "")
            {
                //con.Close();
                //con.Open();
                sqlstring = "insert into COE_Master_Settings(settings,value) values('Mark Difference','" + txt_difmark.Text.ToString() + "')";
                insupdvalue = dasri.update_method_wo_parameter(sqlstring, "text");
                //SqlCommand cmdeve1 = new SqlCommand(sqlstring);
                //cmdeve1.Connection = con;
                //cmdeve1.ExecuteNonQuery();
            }
            //con.Close();
            //con.Open();
            sqlstring = "delete from COE_Master_Settings where settings='Mark Moderation'";
            insupdvalue = dasri.update_method_wo_parameter(sqlstring, "text");
            //SqlCommand cmddef1 = new SqlCommand(sqlstring);
            //cmddef1.Connection = con;
            //cmddef1.ExecuteNonQuery();
            if (txtmoder.Text.ToString() != "")
            {
                //con.Close();
                //con.Open();
                sqlstring = "insert into COE_Master_Settings(settings,value) values('Mark Moderation','" + txtmoder.Text.ToString() + "')";
                insupdvalue = dasri.update_method_wo_parameter(sqlstring, "text");
                //SqlCommand cmdeve1 = new SqlCommand(sqlstring);
                //cmdeve1.Connection = con;
                //cmdeve1.ExecuteNonQuery();
            }
            //End =================================================================


            #region Added by Idhris 12-05-2017

            byte moderApplicable = 0;
            if (chkModerApplicable.Checked)
            {
                moderApplicable = 1;
            }
            d2.update_method_wo_parameter("if exists(select LinkValue from New_InsSettings where LinkName='MaximumModerationApplicable' and college_code ='" + ddlcollege.SelectedItem.Value + "') update New_InsSettings set LinkValue='" + moderApplicable + "'  where LinkName='MaximumModerationApplicable' and college_code ='" + ddlcollege.SelectedItem.Value + "'  else insert into New_InsSettings (LinkValue,LinkName,college_code) values('" + moderApplicable + "','MaximumModerationApplicable','" + ddlcollege.SelectedItem.Value + "')", "TEXT");
            string eduLevel = string.Empty;
            if (ddlModerApplicableEduLevel.Items.Count > 0)
            {
                eduLevel = Convert.ToString(ddlModerApplicableEduLevel.SelectedValue).Trim();
                d2.update_method_wo_parameter("if exists(select LinkValue from New_InsSettings where LinkName='MaximumModerationAppEdulevel' and college_code ='" + ddlcollege.SelectedItem.Value + "') update New_InsSettings set LinkValue='" + eduLevel + "'  where LinkName='MaximumModerationAppEdulevel' and college_code ='" + ddlcollege.SelectedItem.Value + "'  else insert into New_InsSettings (LinkValue,LinkName,college_code) values('" + eduLevel + "','MaximumModerationAppEdulevel','" + ddlcollege.SelectedItem.Value + "')", "TEXT");
            }

            if (ddlModerApplicableBatch.Items.Count > 0)
            {
                string batch = ddlModerApplicableBatch.SelectedValue;
                if (!string.IsNullOrEmpty(eduLevel))
                {
                    d2.update_method_wo_parameter("if exists(select LinkValue from New_InsSettings where LinkName='MaximumModerationAppBatch@" + eduLevel + "' and college_code ='" + ddlcollege.SelectedItem.Value + "') update New_InsSettings set LinkValue='" + batch + "'  where LinkName='MaximumModerationAppBatch@" + eduLevel + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'  else insert into New_InsSettings (LinkValue,LinkName,college_code) values('" + batch + "','MaximumModerationAppBatch@" + eduLevel + "','" + ddlcollege.SelectedItem.Value + "')", "TEXT");
                }
            }

            if (ddlModerApplicableSem.Items.Count > 0)
            {
                string sem = ddlModerApplicableSem.SelectedValue;
                if (!string.IsNullOrEmpty(eduLevel))
                {
                    d2.update_method_wo_parameter("if exists(select LinkValue from New_InsSettings where LinkName='MaximumModerationAppSem@" + eduLevel + "' and college_code ='" + ddlcollege.SelectedItem.Value + "') update New_InsSettings set LinkValue='" + sem + "'  where LinkName='MaximumModerationAppSem@" + eduLevel + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'  else insert into New_InsSettings (LinkValue,LinkName,college_code) values('" + sem + "','MaximumModerationAppSem@" + eduLevel + "','" + ddlcollege.SelectedItem.Value + "')", "TEXT");
                }
            }

            if (txtModerMaxMark.Text.Trim() != string.Empty)
            {
                string mark = txtModerMaxMark.Text.Trim();
                if (!string.IsNullOrEmpty(eduLevel))
                {
                    d2.update_method_wo_parameter("if exists(select LinkValue from New_InsSettings where LinkName='MaximumModerationAppMark@" + eduLevel + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue='" + mark + "'  where LinkName='MaximumModerationAppMark@" + eduLevel + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'  else insert into New_InsSettings (LinkValue,LinkName,college_code) values('" + mark + "','MaximumModerationAppMark@" + eduLevel + "','" + ddlcollege.SelectedItem.Value + "')", "TEXT");
                }
            }

            #endregion

            //Added By Srinath 11/3/2015
            if (ddlemyear.Text != "" && ddlemmonth.Text != "")
            {
                string stag = "delete from master_settings where settings='Exam year and month'";
                int coemom = dasri.update_method_wo_parameter(stag, "text");
                string stvalue = ddlemyear.SelectedValue.ToString() + ',' + ddlemmonth.SelectedValue.ToString();
                stag = "if Exists (select value from master_settings where settings='Exam year and month') Update master_settings set value='" + stvalue + "' where settings='Exam year and month' else insert into master_settings(settings,value) values('Exam year and month','" + stvalue + "')";
                coemom = dasri.update_method_wo_parameter(stag, "text");
            }
            if (txt_bundnumber.Text.Trim() != "") // added by jairam 03-04-2015
            {
                string number = Convert.ToString(txt_bundnumber.Text);
                string query = "if exists(select * from COE_Master_Settings where settings='Bundle Number Generation' )update COE_Master_Settings set value='" + number + "' where settings='Bundle Number Generation'  else insert into COE_Master_Settings (settings,value) values('Bundle Number Generation','" + number + "')";
                int su = dasri.update_method_wo_parameter(query, "Text");
            }
            else
            {
                string query = "if exists(select * from COE_Master_Settings where settings='Bundle Number Generation' )update COE_Master_Settings set value='' where settings='Bundle Number Generation'  else insert into COE_Master_Settings (settings,value) values('Bundle Number Generation','')";
                int su = dasri.update_method_wo_parameter(query, "Text");
            }
            if (txt_prestudentbundle.Text.Trim() != "") // added by jairam 03-04-2015
            {
                string number = Convert.ToString(txt_prestudentbundle.Text);
                string query = "if exists(select * from COE_Master_Settings where settings='Bundle Per Student' )update COE_Master_Settings set value='" + number + "' where settings='Bundle Per Student'  else insert into COE_Master_Settings (settings,value) values('Bundle Per Student','" + number + "')";
                int su = dasri.update_method_wo_parameter(query, "Text");
            }
            else
            {
                string query = "if exists(select * from COE_Master_Settings where settings='Bundle Per Student' )update COE_Master_Settings set value='' where settings='Bundle Per Student'  else insert into COE_Master_Settings (settings,value) values('Bundle Per Student','')";
                int su = dasri.update_method_wo_parameter(query, "Text");
            }
            string chakatva = "0";
            if (chkattmark.Checked == true)
            {
                chakatva = "1";
            }
            string strattmark = "if exists(select * from COE_Master_Settings where settings='Attendance Link mark')";
            strattmark = strattmark + " update COE_Master_Settings set value='" + chakatva + "' where settings='Attendance Link mark'";
            strattmark = strattmark + " else insert into COE_Master_Settings (settings,value) values('Attendance Link mark','" + chakatva + "')";
            int val = dasri.update_method_wo_parameter(strattmark, "Text");
            chakatva = txtmarkentryround.Text.ToString();
            strattmark = "if exists(select * from COE_Master_Settings where settings='Mark Round of')";
            strattmark = strattmark + " update COE_Master_Settings set value='" + chakatva + "' where settings='Mark Round of'";
            strattmark = strattmark + " else insert into COE_Master_Settings (settings,value) values('Mark Round of','" + chakatva + "')";
            val = dasri.update_method_wo_parameter(strattmark, "Text");
            chakatva = "0";
            if (chkresultcurr.Checked == true)
            {
                chakatva = "1";
            }
            strattmark = "if exists(select * from COE_Master_Settings where settings='Result In Current Only')";
            strattmark = strattmark + " update COE_Master_Settings set value='" + chakatva + "' where settings='Result In Current Only'";
            strattmark = strattmark + " else insert into COE_Master_Settings (settings,value) values('Result In Current Only','" + chakatva + "')";
            val = dasri.update_method_wo_parameter(strattmark, "Text");
            chakatva = "0";
            if (chkmoderationupdate.Checked == true)
            {
                chakatva = "1";
            }
            strattmark = "if exists(select * from COE_Master_Settings where settings='Moderation Automatic') update COE_Master_Settings set value='" + chakatva + "' where settings='Moderation Automatic' " + userorgropcode + " else insert into COE_Master_Settings (settings,value) values('Moderation Automatic','" + chakatva + "')";
            val = dasri.update_method_wo_parameter(strattmark, "text");
            for (int i = 0; i < ddluser.Items.Count; i++) // added by jairam 03-04-2015
            {
                if (ddluser.Items[i].Selected == true)
                {
                    selected_userid = Convert.ToString(ddluser.Items[i].Text);
                    selected_usercode = Convert.ToInt16(ddluser.Items[i].Value);
                    if (rdb_ind.Checked == true)
                    {
                        userorgropcode = " and usercode='" + selected_usercode.ToString() + "'";
                        user_gropcode = " and user_code='" + selected_usercode.ToString() + "'";
                        usergroup = "  usercode='" + selected_usercode.ToString() + "'";
                        strusergruop = "usercode";
                        struser_gruop = "user_code";
                    }
                    else if (rdb_grp.Checked == true)
                    {
                        userorgropcode = " and group_code='" + selected_usercode.ToString() + "'";
                        user_gropcode = " and group_code='" + selected_usercode.ToString() + "'";
                        usergroup = "  group_code='" + selected_usercode.ToString() + "'";
                        strusergruop = "group_code";
                        struser_gruop = "group_code";
                    }




                    #region SHow DUmmy NUmber -- Idhris 22-02-2017
                    int showDummy = 0;
                    if (chkShowDummy.Checked == true)
                    {
                        showDummy = 1;
                    }



                    dasri.update_method_wo_parameter("if exists(select LinkValue from New_InsSettings where LinkName='ShowDummyNumberOnMarkEntryCOE' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "') update New_InsSettings set LinkValue='" + showDummy + "'  where LinkName='ShowDummyNumberOnMarkEntryCOE' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "' else insert into New_InsSettings (LinkValue,LinkName,college_code,user_code) values('" + showDummy + "','ShowDummyNumberOnMarkEntryCOE','" + ddlcollege.SelectedItem.Value + "','" + selected_usercode.ToString() + "')", "Text");

                    int typeDummy = 0;
                    if (rblDummyCommonSub.SelectedIndex == 1)
                    {
                        typeDummy = 1;
                    }

                    dasri.update_method_wo_parameter("if exists(select LinkValue from New_InsSettings where LinkName='DummyNumberTypeOnMarkEntryCOE' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "') update New_InsSettings set LinkValue='" + typeDummy + "'  where LinkName='DummyNumberTypeOnMarkEntryCOE' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "' else insert into New_InsSettings (LinkValue,LinkName,college_code,user_code) values('" + typeDummy + "','DummyNumberTypeOnMarkEntryCOE','" + ddlcollege.SelectedItem.Value + "','" + selected_usercode.ToString() + "')", "Text");


                    int modeDummy = 0;
                    if (rblDummyMode.SelectedIndex == 1)
                    {
                        modeDummy = 1;
                    }

                    dasri.update_method_wo_parameter("if exists(select LinkValue from New_InsSettings where LinkName='DummyNumberModeOnMarkEntryCOE' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "') update New_InsSettings set LinkValue='" + modeDummy + "'  where LinkName='DummyNumberModeOnMarkEntryCOE' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "' else insert into New_InsSettings (LinkValue,LinkName,college_code,user_code) values('" + modeDummy + "','DummyNumberModeOnMarkEntryCOE','" + ddlcollege.SelectedItem.Value + "','" + selected_usercode.ToString() + "')", "Text");


                    //Include Batch Year RIghts
                    int incBat = 0;
                    if (chkIncMarkEntBatchRights.Checked == true)
                    {
                        incBat = 1;
                    }

                    dasri.update_method_wo_parameter("if exists(select LinkValue from New_InsSettings where LinkName='IncludeBatchRightsInMarkEntry' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "') update New_InsSettings set LinkValue='" + incBat + "'  where LinkName='IncludeBatchRightsInMarkEntry' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "' else insert into New_InsSettings (LinkValue,LinkName,college_code,user_code) values('" + incBat + "','IncludeBatchRightsInMarkEntry','" + ddlcollege.SelectedItem.Value + "','" + selected_usercode.ToString() + "')", "Text");

                    #endregion

                    #region Added By Malang Raja on Nov 30 2016

                    if (chkIncludeCondoUnpaid.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='IncludeCondonationUnpaidStudentsInCoeMarkEntry' " + userorgropcode + " )update Master_Settings set value='1' where settings='IncludeCondonationUnpaidStudentsInCoeMarkEntry' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'IncludeCondonationUnpaidStudentsInCoeMarkEntry','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='IncludeCondonationUnpaidStudentsInCoeMarkEntry' " + userorgropcode + " )update Master_Settings set value='0' where settings='IncludeCondonationUnpaidStudentsInCoeMarkEntry' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'IncludeCondonationUnpaidStudentsInCoeMarkEntry','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }

                    #endregion Added By Malang Raja on Nov 30 2016

                    #region Added By Malang Raja on Mar 13 2017

                    if (chkCIALock.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='CAM CIA Mark Entry Lock' " + userorgropcode + " )update Master_Settings set value='1' where settings='CAM CIA Mark Entry Lock' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'CAM CIA Mark Entry Lock','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='CAM CIA Mark Entry Lock' " + userorgropcode + " )update Master_Settings set value='0' where settings='CAM CIA Mark Entry Lock' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'CAM CIA Mark Entry Lock','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }

                    #endregion Added By Malang Raja on Mar 13 2017

                    #region Added By Malang Raja on Apr 6 2017

                    if (chkCoeSeatingArrangementLock.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='COE Exam Seating Arrangement Generation Lock') update Master_Settings set value='1' where settings='COE Exam Seating Arrangement Generation Lock' else insert into Master_Settings (settings,value) values('COE Exam Seating Arrangement Generation Lock','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='COE Exam Seating Arrangement Generation Lock' )update Master_Settings set value='0' where settings='COE Exam Seating Arrangement Generation Lock' else insert into Master_Settings (settings,value) values('COE Exam Seating Arrangement Generation Lock','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    //rajkumar 2/2/2018=================
                    if (chkSerial.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Seating Arrangement Serial no order' " + userorgropcode + " )  update Master_Settings set value='1' where settings='Seating Arrangement Serial no order' else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Seating Arrangement Serial no order','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Seating Arrangement Serial no order' " + userorgropcode + "  )  update Master_Settings set value='0' where settings='Seating Arrangement Serial no order' else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Seating Arrangement Serial no order','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }

                    if (chkQpapertype.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Seating Arrangement Qpaper order' " + userorgropcode + " ) update Master_Settings set value='1' where settings='Seating Arrangement Qpaper order' else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Seating Arrangement Qpaper order','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Seating Arrangement Qpaper order' " + userorgropcode + "  ) update Master_Settings set value='0' where settings='Seating Arrangement Qpaper order' else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Seating Arrangement Qpaper order','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    //===============================

                    #endregion Added By Malang Raja on Apr 6 2017

                    #region Added By Malang Raja on Jul 03 2017
                    if (chkNRNEMaxSubject.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Check NR NE Max Count') update Master_Settings set value='1' where settings='Check NR NE Max Count' else insert into Master_Settings (settings,value) values('Check NR NE Max Count','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Check NR NE Max Count' )update Master_Settings set value='0' where settings='Check NR NE Max Count' else insert into Master_Settings (settings,value) values('Check NR NE Max Count','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    string maxSubjectApplied = txtNRNEMaxSubject.Text.Trim();
                    double maxAppliedSubject = 0;
                    if (string.IsNullOrEmpty(maxSubjectApplied) || maxSubjectApplied == "0")
                    {
                        maxSubjectApplied = "0";
                    }
                    bool isSuc = double.TryParse(maxSubjectApplied.Trim(), out  maxAppliedSubject);
                    if (!isSuc)
                        maxAppliedSubject = 0;
                    string subApp = "if exists(select * from Master_Settings where settings='NR NE Subject Applied Count' " + userorgropcode + " )update Master_Settings set value='" + maxAppliedSubject + "' where settings='NR NE Subject Applied Count' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values('" + selected_usercode.ToString() + "','NR NE Subject Applied Count','" + maxAppliedSubject + "')";
                    int subApp1 = dasri.update_method_wo_parameter(subApp, "text");

                    #endregion Added By Malang Raja on Apr 6 2017

                    #region Added By Malang Raja on Jul 03 2017

                    if (chkOnlinePaymentMaxSubject.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Check Online Payment Max Count') update Master_Settings set value='1' where settings='Check Online Payment Max Count' else insert into Master_Settings (settings,value) values('Check Online Payment Max Count','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='Check Online Payment Max Count' )update Master_Settings set value='0' where settings='Check Online Payment Max Count' else insert into Master_Settings (settings,value) values('Check Online Payment Max Count','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    string maxSubjectAppliedO = txtOnPayMaxSubject.Text.Trim();
                    double maxAppliedSubjectO = 0;
                    if (string.IsNullOrEmpty(maxSubjectAppliedO) || maxSubjectAppliedO == "0")
                    {
                        maxSubjectAppliedO = "0";
                    }
                    isSuc = double.TryParse(maxSubjectAppliedO.Trim(), out  maxAppliedSubjectO);
                    if (!isSuc)
                        maxAppliedSubjectO = 0;
                    subApp = "if exists(select * from Master_Settings where settings='Online Payment Maximum Subject Applied Count' " + userorgropcode + " )update Master_Settings set value='" + maxAppliedSubjectO + "' where settings='Online Payment Maximum Subject Applied Count' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values('" + selected_usercode.ToString() + "','Online Payment Maximum Subject Applied Count','" + maxAppliedSubjectO + "')";
                    subApp1 = dasri.update_method_wo_parameter(subApp, "text");

                    #endregion Added By Malang Raja on Apr 6 2017

                    #region Added By Malang On Apr 24 2017

                    string stag = "delete from master_settings where settings='Exam year and month Valuation' " + userorgropcode;
                    int coemom = dasri.update_method_wo_parameter(stag, "text");
                    if (ddlemyear.Text.Trim() != "" && ddlemyear.Text.Trim() != "0" && ddlemmonth.Text.Trim() != "" && ddlemmonth.Text != "0".Trim())
                    {
                        string stvalue = ddlemyear.SelectedValue.ToString() + ',' + ddlemmonth.SelectedValue.ToString();
                        stag = "if Exists (select value from master_settings where settings='Exam year and month Valuation' " + userorgropcode + ") Update master_settings set value='" + stvalue + "' where settings='Exam year and month Valuation'" + userorgropcode + " else insert into master_settings(settings,value," + strusergruop + ") values('Exam year and month Valuation','" + stvalue + "','" + selected_usercode + "')";
                        coemom = dasri.update_method_wo_parameter(stag, "text");
                    }
                    stag = "delete from master_settings where settings='Exam year and month Result Publish' " + userorgropcode;
                    coemom = dasri.update_method_wo_parameter(stag, "text");
                    if (ddlExamYearResult.Items.Count > 0 && ddlExamMonthResult.Items.Count > 0)
                    {
                        string resultExamMonth = Convert.ToString(ddlExamMonthResult.SelectedValue).Trim();
                        string resultExamYear = Convert.ToString(ddlExamYearResult.SelectedValue).Trim();
                        string stvalue = resultExamYear + ',' + resultExamMonth;
                        if (!string.IsNullOrEmpty(resultExamMonth) && !string.IsNullOrEmpty(resultExamYear) && resultExamYear.Trim() != "0" && resultExamMonth.Trim() != "0")
                        {
                            stag = "if Exists (select value from master_settings where settings='Exam year and month Result Publish' " + userorgropcode + ") Update master_settings set value='" + stvalue + "' where settings='Exam year and month Result Publish' " + userorgropcode + " else insert into master_settings(settings,value," + strusergruop + ") values('Exam year and month Result Publish','" + stvalue + "','" + selected_usercode + "')";
                            coemom = dasri.update_method_wo_parameter(stag, "text");
                        }
                    }

                    #endregion

                    if (cbthirdevaluation.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='III Evaluation' " + userorgropcode + " )update Master_Settings set value='1' where settings='III Evaluation' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'III Evaluation','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='III Evaluation' " + userorgropcode + " )update Master_Settings set value='0' where settings='III Evaluation' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'III Evaluation','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    if (chk_secuirty.Checked == true)
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='cia_security' " + userorgropcode + " )update Master_Settings set value='1' where settings='cia_security' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'cia_security','1')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                    else
                    {
                        string savecopy = "if exists(select * from Master_Settings where settings='cia_security' " + userorgropcode + " )update Master_Settings set value='0' where settings='cia_security' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'cia_security','0')";
                        int copy = dasri.update_method_wo_parameter(savecopy, "text");
                    }
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void chk_fine_allot_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (chk_fine_allot.Checked == true)
            {
                txt_duplicate_Fine.Visible = true;
                txt_duplicate_Fine.Focus();
            }
            else
            {
                txt_duplicate_Fine.Text = string.Empty;
                txt_duplicate_Fine.Visible = false;
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void AttendanceSave(object sender, EventArgs e)
    {
        try
        {
            //DAccess2 daa = new DAccess2();
            for (int i = 0; i < ddluser.Items.Count; i++)
            {
                if (ddluser.Items[i].Selected == true)
                {
                    selected_userid = Convert.ToString(ddluser.Items[i].Text);
                    selected_usercode = Convert.ToInt16(ddluser.Items[i].Value);
                    string college_value = Convert.ToString(ddlcollege.SelectedValue);// ********* Added by Jairam ********* // 09-09-2014
                    if (chbAttendanceSms.Checked == true)
                    {
                        ht.Clear();
                        ht.Add("UserId", selected_usercode.ToString());
                        ht.Add("TextName", chbAttendanceSms.Text.ToString());
                        ht.Add("TextVal", "1");
                        ht.Add("College_Code", college_value.ToString());
                        int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                    }
                    else
                    {
                        ht.Clear();
                        ht.Add("UserId", selected_usercode.ToString());
                        ht.Add("TextName", chbAttendanceSms.Text.ToString());
                        ht.Add("TextVal", "0");
                        ht.Add("College_Code", college_value.ToString());
                        int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                    }
                    if (chbvoicecall.Enabled == true)
                    {
                        if (chbvoicecall.Checked == true)
                        {
                            ht.Clear();
                            ht.Add("UserId", selected_usercode.ToString());
                            ht.Add("TextName", chbvoicecall.Text.ToString());
                            ht.Add("TextVal", "1");
                            ht.Add("College_Code", college_value.ToString());
                            int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                        }
                        else
                        {
                            ht.Clear();
                            ht.Add("UserId", selected_usercode.ToString());
                            ht.Add("TextName", chbvoicecall.Text.ToString());
                            ht.Add("TextVal", "0");
                            ht.Add("College_Code", college_value.ToString());
                            int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                        }
                    }
                    if (chbFather.Checked == true)
                    {
                        ht.Clear();
                        ht.Add("UserId", selected_usercode.ToString());
                        ht.Add("TextName", chbFather.Text.ToString());
                        ht.Add("TextVal", "1");
                        ht.Add("College_Code", college_value.ToString());
                        int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                    }
                    else
                    {
                        ht.Clear();
                        ht.Add("UserId", selected_usercode.ToString());
                        ht.Add("TextName", chbFather.Text.ToString());
                        ht.Add("TextVal", "0");
                        ht.Add("College_Code", college_value.ToString());
                        int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                    }
                    if (chbMother.Checked == true)
                    {
                        ht.Clear();
                        ht.Add("UserId", selected_usercode.ToString());
                        ht.Add("TextName", chbMother.Text.ToString());
                        ht.Add("TextVal", "1");
                        ht.Add("College_Code", college_value.ToString());
                        int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                    }
                    else
                    {
                        ht.Clear();
                        ht.Add("UserId", selected_usercode.ToString());
                        ht.Add("TextName", chbMother.Text.ToString());
                        ht.Add("TextVal", "0");
                        ht.Add("College_Code", college_value.ToString());
                        int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                    }
                    if (chbStudent.Checked == true)
                    {
                        ht.Clear();
                        ht.Add("UserId", selected_usercode.ToString());
                        ht.Add("TextName", chbStudent.Text.ToString());
                        ht.Add("TextVal", "1");
                        ht.Add("College_Code", college_value.ToString());
                        int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                    }
                    else
                    {
                        ht.Clear();
                        ht.Add("UserId", selected_usercode.ToString());
                        ht.Add("TextName", chbStudent.Text.ToString());
                        ht.Add("TextVal", "0");
                        ht.Add("College_Code", college_value.ToString());
                        int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                    }
                    if (chbSMS.Checked == true)
                    {
                        ht.Clear();
                        ht.Add("UserId", selected_usercode.ToString());
                        ht.Add("TextName", chbSMS.Text.ToString());
                        ht.Add("TextVal", "1");
                        ht.Add("College_Code", college_value.ToString());
                        int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                    }
                    else
                    {
                        ht.Clear();
                        ht.Add("UserId", selected_usercode.ToString());
                        ht.Add("TextName", chbSMS.Text.ToString());
                        ht.Add("TextVal", "0");
                        ht.Add("College_Code", college_value.ToString());
                        int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                    }
                    if (rbhour.Checked == true)
                    {
                        ht.Clear();
                        ht.Add("UserId", selected_usercode.ToString());
                        ht.Add("TextName", rbhour.Text.ToString());
                        ht.Add("TextVal", "1");
                        ht.Add("College_Code", college_value.ToString());
                        int ns = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                        if (txtsms.Text != "")
                        {
                            ht.Clear();
                            ht.Add("UserId", selected_usercode.ToString());
                            ht.Add("TextName", "Period");
                            ht.Add("TextVal", txtsms.Text);
                            ht.Add("College_Code", college_value.ToString());
                            int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                        }
                        else
                        {
                            //sankar modify............july'2013.....Changes
                            ht.Clear();
                            ht.Add("UserId", selected_usercode.ToString());
                            ht.Add("TextName", "Period");
                            ht.Add("TextVal", txtsms.Text);
                            ht.Add("College_Code", college_value.ToString());
                            int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                        }
                    }
                    else
                    {
                        ht.Clear();
                        ht.Add("UserId", selected_usercode.ToString());
                        ht.Add("TextName", rbhour.Text.ToString());
                        ht.Add("TextVal", "0");
                        ht.Add("College_Code", college_value.ToString());
                        int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                    }
                    if (rbday.Checked == true)
                    {
                        ht.Clear();
                        ht.Add("UserId", selected_usercode.ToString());
                        ht.Add("TextName", rbday.Text.ToString());
                        ht.Add("TextVal", "1");
                        ht.Add("College_Code", college_value.ToString());
                        int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                    }
                    else
                    {
                        ht.Clear();
                        ht.Add("UserId", selected_usercode.ToString());
                        ht.Add("TextName", rbday.Text.ToString());
                        ht.Add("TextVal", "0");
                        ht.Add("College_Code", college_value.ToString());
                        int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                    }
                    if (chkminimumabsent.Checked == true)
                    {
                        ht.Clear();
                        ht.Add("UserId", selected_usercode.ToString());
                        ht.Add("TextName", chkminimumabsent.Text.ToString());
                        ht.Add("TextVal", "1");
                        ht.Add("College_Code", college_value.ToString());
                        int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                    }
                    else
                    {
                        ht.Clear();
                        ht.Add("UserId", selected_usercode.ToString());
                        ht.Add("TextName", chkminimumabsent.Text.ToString());
                        ht.Add("TextVal", "0");
                        ht.Add("College_Code", college_value.ToString());
                        int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                    }
                    if (txt_smsday.Text != "")
                    {
                        ht.Clear();
                        ht.Add("UserId", selected_usercode.ToString());
                        ht.Add("TextName", "Minimun Days");
                        ht.Add("TextVal", txt_smsday.Text.ToString());
                        ht.Add("College_Code", college_value.ToString());
                        int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                    }
                    else
                    {
                        ht.Clear();
                        ht.Add("UserId", selected_usercode.ToString());
                        ht.Add("TextName", "Minimun Days");
                        ht.Add("TextVal", "0");
                        ht.Add("College_Code", college_value.ToString());
                        int n = dasri.insert_method("ProcAttendanceSettingSave", ht, "sp");
                    }
                }
            }
            if (rdb_ind.Checked == true)
            {
                userorgropcode = " and usercode='" + selected_usercode.ToString() + "'";
                user_gropcode = " and user_code='" + selected_usercode.ToString() + "'";
                usergroup = "  usercode='" + selected_usercode.ToString() + "'";
                strusergruop = "usercode";
                struser_gruop = "user_code";
            }
            else if (rdb_grp.Checked == true)
            {
                userorgropcode = " and group_code='" + selected_usercode.ToString() + "'";
                user_gropcode = " and group_code='" + selected_usercode.ToString() + "'";
                usergroup = "  group_code='" + selected_usercode.ToString() + "'";
                strusergruop = "group_code";
                struser_gruop = "group_code";
            }
            //added by Mullai
            string currdtsms = string.Empty;
            if (chbcurrentdayaatnd.Checked == true)
            {
                currdtsms = "if exists(select * from Master_Settings where settings='SMS For Current Date Only' " + userorgropcode + ")update Master_Settings set value='1' where settings='SMS For Current Date Only' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'SMS For Current Date Only','1')";
            }
            else
            {
                currdtsms = "if exists(select * from Master_Settings where settings='SMS For Current Date Only' " + userorgropcode + ")update Master_Settings set value='0' where settings='SMS For Current Date Only' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'SMS For Current Date Only','0')";
            }
            int smscurrdt = dasri.update_method_wo_parameter(currdtsms, "text");

        }
        catch (Exception ex)
        {
        }
    }

    public void AttendanceChecked(object sender, EventArgs e) // added by jairam 05-11-2014
    {
        try
        {
            if (chbAttendanceSms.Checked == true || chbvoicecall.Checked == true)
            {
                chbMother.Visible = true;
                chbStudent.Visible = true;
                chbFather.Visible = true;
            }
            else if (chbAttendanceSms.Checked == false && chbvoicecall.Checked == false)
            {
                chbMother.Visible = false;
                chbStudent.Visible = false;
                chbFather.Visible = false;
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void Chkselecthours_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            txtselect.Text = string.Empty;
            string value = string.Empty;
            for (int i = 0; i < Chkselecthours.Items.Count; i++)
            {
                if (Chkselecthours.Items[i].Selected == true)
                {
                    value = Chkselecthours.Items[i].Text;
                    if (txtselect.Text == "")
                    {
                        txtselect.Text = value;
                    }
                    else
                    {
                        txtselect.Text = txtselect.Text + "," + value;
                    }
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void chkbat_selectall_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (chkbat_selectall.Checked == true)
            {
                foreach (System.Web.UI.WebControls.ListItem li in ddlfeetype.Items)
                {
                    li.Selected = true;
                    txtmonfee.Text = "Fee Type(" + (ddlfeetype.Items.Count) + ")";
                }
            }
            else
            {
                foreach (System.Web.UI.WebControls.ListItem li in ddlfeetype.Items)
                {
                    li.Selected = false;
                    txtmonfee.Text = "- - Select - -";
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void chkbat_selectall1_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (chkbat_selectall1.Checked == true)
            {
                foreach (System.Web.UI.WebControls.ListItem li in ddlfeetype1.Items)
                {
                    li.Selected = true;
                    txtgenfee.Text = "Fee Type(" + (ddlfeetype1.Items.Count) + ")";
                }
            }
            else
            {
                foreach (System.Web.UI.WebControls.ListItem li in ddlfeetype1.Items)
                {
                    li.Selected = false;
                    txtgenfee.Text = "- - Select - -";
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddlfeetype_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int commcount = 0;
            string value = string.Empty;
            string code = string.Empty;
            // LinkButtondep.Visible = true;
            for (int i = 0; i < ddlfeetype.Items.Count; i++)
            {
                if (ddlfeetype.Items[i].Selected == true)
                {
                    value = ddlfeetype.Items[i].Text;
                    code = ddlfeetype.Items[i].Value.ToString();
                    commcount = commcount + 1;
                    txtmonfee.Text = "Fee Type(" + commcount.ToString() + ")";
                }
            }
            if (commcount == 0)
                txtmonfee.Text = "- - Select - -";
            // commcnt = commcount;
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddlfeetype1_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int commcount = 0;
            string value = string.Empty;
            string code = string.Empty;
            // LinkButtondep.Visible = true;
            for (int i = 0; i < ddlfeetype1.Items.Count; i++)
            {
                if (ddlfeetype1.Items[i].Selected == true)
                {
                    value = ddlfeetype1.Items[i].Text;
                    code = ddlfeetype1.Items[i].Value.ToString();
                    commcount = commcount + 1;
                    txtgenfee.Text = "Fee Type(" + commcount.ToString() + ")";
                }
            }
            if (commcount == 0)
                txtgenfee.Text = "- - Select - -";
            // commcnt = commcount;
        }
        catch (Exception ex)
        {
        }
    }

    //protected void txtmonfee_TextChanged(object sender, EventArgs e)
    //{
    //    pmonfee.Visible = true;
    //}
    //protected void txtgenfee_TextChanged(object sender, EventArgs e)
    //{
    //    pgenfee.Visible = true;
    //}

    protected void rdb_ind_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            ddlcollege_SelectedIndexChanged(sender, e);
            bindAttendanceHourSetting();
        }
        catch (Exception ex)
        {
        }
    }

    protected void rdb_grp_CheckedChanged(object sender, EventArgs e)
    {
        txt_attn_hour.Text = string.Empty;
        try
        {
            ddlcollege_SelectedIndexChanged(sender, e);
            lockuser();
            bindAttendanceHourSetting();

        }
        catch (Exception ex)
        {
        }
    }

    protected void chk_alluser_CheckedChanged(object sender, EventArgs e)
    {
        txt_attn_hour.Text = string.Empty;
        try
        {
            if (chk_alluser.Checked == true)
            {
                foreach (System.Web.UI.WebControls.ListItem li in ddluser.Items)
                {
                    li.Selected = true;
                    txtuser.Text = "User(" + (ddluser.Items.Count) + ")";
                }
            }
            else
            {
                foreach (System.Web.UI.WebControls.ListItem li in ddluser.Items)
                {
                    li.Selected = false;
                    txtuser.Text = "- - Select - -";
                }
            }
            bindAttendanceHourSetting();
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddluser_SelectedIndexChanged(object sender, EventArgs e)
    {
        txt_attn_hour.Text = string.Empty;
        try
        {
            txtNRNEMaxSubject.Text = string.Empty;
            txtOnPayMaxSubject.Text = string.Empty;
            chkNRNEMaxSubject.Checked = false;
            chkOnlinePaymentMaxSubject.Checked = false;
            int count = 0;
            for (int i = 0; i < ddluser.Items.Count; i++)
            {
                if (ddluser.Items[i].Selected == true)
                {
                    count++;
                }
            }
            if (count == 0)
            {
                chk_alluser.Checked = false;
            }
            else if (count == ddluser.Items.Count)
            {
                chk_alluser.Checked = true;
                txtuser.Text = "User(" + (ddluser.Items.Count) + ")";
            }
            else
            {
                chk_alluser.Checked = false;
                txtuser.Text = "User(" + count + ")";
            }
            bindAttendanceHourSetting();
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnGo_Click(object sender, EventArgs e)
    {
        try
        {
            txt_attn_hour.Text = string.Empty;
            chkCAMBasedBatchRights.Checked = false;
            //Added by idhris 05-05-2017
            loadTcCollege();
            loadTcHeaders();
            loadTcLedgers();
            loadTcSelectedHeadersAndLedgers();
            bindsubject();
            loadleave();
            popstype();
            ExamAppCheck();//Idhris 18-10-2016
            cb_studentattendance.Checked = false;
            //con.Close();
            //con.Open();
            spnEmailError.Text = string.Empty;
            spnSmsError.Text = string.Empty;
            cbIndualAttendance.Checked = false;
            cbprintedit.Checked = false;
            Cbcamcalculationlock.Checked = false;
            lockuser();
            collegebankAdmission();
            // SqlCommand cmd_get_settings = new SqlCommand("Select * from transport_settings where college_code='" + Convert.ToString(ddlcollege.SelectedValue) + "'", con);
            //SqlCommand cmd_get_settings = new SqlCommand("Select * from transport_settings where college_code='" + Convert.ToString(ddlcollege.SelectedValue) + "'", con);
            //SqlDataAdapter ad_get_settings = new SqlDataAdapter(cmd_get_settings);
            DataTable dt_get_settings = dasri.select_method_wop_table("Select * from transport_settings where college_code='" + Convert.ToString(ddlcollege.SelectedValue) + "'", "Text");
            DataSet ds1 = new DataSet();
            //ad_get_settings.Fill(dt_get_settings);
            if (dt_get_settings.Rows.Count > 0)
            {
                txt_remainder.Text = dt_get_settings.Rows[0][1].ToString();
                txt_stfone.Text = dt_get_settings.Rows[0][2].ToString();
                txt_stftwo.Text = dt_get_settings.Rows[0][3].ToString();
            }
            // con.Close();
            for (int i = 0; i < ddluser.Items.Count; i++)
            {
                if (ddluser.Items[i].Selected == true)
                {
                    selected_userid = Convert.ToString(ddluser.Items[i].Text);
                    selected_usercode = Convert.ToInt16(ddluser.Items[i].Value);
                    DataSet ds = new DataSet();
                    bindMulTerm(Convert.ToString(selected_usercode));
                    loadPaymode();
                    //added by sudhagar 14-06-2016 finance setting
                    #region new finance Setting go

                    // sudhagar changes 15-12-2015 *******************************
                    #region

                    string selqry = "select FinYearFK from FS_FinYearPrivilage where UserCode in('" + selected_usercode + "')";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(selqry, "Text");
                    string finyrfk = string.Empty;
                    string finyrfkvalue = string.Empty;
                    string hedfk = string.Empty;
                    string hedfkvalue = string.Empty;
                    string ledfk = string.Empty;
                    string ledfkvalue = string.Empty;
                    DataSet dsled = new DataSet();
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int sss = 0; sss < ds.Tables[0].Rows.Count; sss++)
                        {
                            finyrfk = Convert.ToString(ds.Tables[0].Rows[sss]["FinYearFK"]);
                            for (int s = 0; s < chkl_fin.Items.Count; s++)
                            {
                                finyrfkvalue = Convert.ToString(chkl_fin.Items[s].Value);
                                if (finyrfkvalue == finyrfk)
                                {
                                    chkl_fin.Items[s].Selected = true;
                                }
                                //else
                                //{
                                //    chkl_fin.Items[s].Selected = false;
                                //}
                            }
                            int ccount = 0;
                            for (int c = 0; c < chkl_fin.Items.Count; c++)
                            {
                                if (chkl_fin.Items[c].Selected == true)
                                {
                                    ccount = ccount + 1;
                                }
                            }
                            txt_finname.Text = " Financial Year(" + ccount.ToString() + ")";
                        }
                    }
                    else
                    {
                        for (int c = 0; c < chkl_fin.Items.Count; c++)
                        {
                            chkl_fin.Items[c].Selected = false;
                        }
                        txt_finname.Text = "--Select--";
                    }
                    string selqryheder = "select HeaderFK from FS_HeaderPrivilage where UserCode in('" + selected_usercode + "')";
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(selqryheder, "Text");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int h = 0; h < ds.Tables[0].Rows.Count; h++)
                        {
                            hedfk = Convert.ToString(ds.Tables[0].Rows[h]["HeaderFK"]);
                            for (int a = 0; a < chkl_head.Items.Count; a++)
                            {
                                hedfkvalue = Convert.ToString(chkl_head.Items[a].Value);
                                if (hedfkvalue == hedfk)
                                {
                                    chkl_head.Items[a].Selected = true;
                                }
                                //else
                                //{
                                //    chkl_head.Items[a].Selected = false;
                                //}
                            }
                            int ccount = 0;
                            for (int c = 0; c < chkl_head.Items.Count; c++)
                            {
                                if (chkl_head.Items[c].Selected == true)
                                {
                                    ccount = ccount + 1;
                                }
                            }
                            txt_head.Text = "Header (" + ccount.ToString() + ")";
                        }
                        loadled();
                    }
                    else
                    {
                        for (int c = 0; c < chkl_head.Items.Count; c++)
                        {
                            chkl_head.Items[c].Selected = false;
                        }
                        txt_head.Text = "--Select--";
                    }
                    #endregion

                    #region delsi 23/dec/2017
                    //delsi 21.12.17
                    string Value_Enquiry = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Enquiry to Apply' and college_code ='" + ddlcollege.SelectedItem.Value + "'");
                    if (Value_Enquiry == "1")
                    {
                        cb_EnquiryRights.Checked = true;
                    }
                    else
                    {
                        cb_EnquiryRights.Checked = false;
                    }


                    //delsi 22.12.17
                    string app_formate = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Application format' and college_code ='" + ddlcollege.SelectedItem.Value + "'");
                    if (app_formate == "0")
                    {
                        Radio_formate1.Checked = true;
                    }
                    else if (app_formate == "1")
                    {
                        Radio_formate2.Checked = true;
                    }
                    else if (app_formate == "2")
                    {
                        Radio_both.Checked = true;

                    }
                    #endregion
                    string saveUserCOl = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='UseCommonCollegeCode' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "'  ").Trim();
                    if (saveUserCOl == "1")
                    {
                        chkUseCommonCol.Checked = true;
                    }
                    else
                    {
                        chkUseCommonCol.Checked = false;
                    }

                    string saveCOl = d2.GetFunction("select LinkValue from inssettings where College_code ='" + ddlcollege.SelectedItem.Value + "' and LinkName ='Individual Staff Login Attendance New'").Trim();
                    if (saveCOl == "1")
                    {
                        CbNewStaffAttendance.Checked = true;
                    }
                    else
                    {
                        CbNewStaffAttendance.Checked = false;
                    }
                    //added BY Mullai
                    string savedegreeapplyn = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Update Degree Code For Applyn' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "'");
                    if (savedegreeapplyn == "1")
                    {
                        cbdegapp.Checked = true;
                    }
                    else
                    {
                        cbdegapp.Checked = false;
                    }

                    //***

                    #region Added by idhris 22-02-2017 Dummy Number
                    string saveDummy = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='ShowDummyNumberOnMarkEntryCOE' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "'  ").Trim();
                    if (saveDummy == "1")
                    {
                        chkShowDummy.Checked = true;
                    }
                    else
                    {
                        chkShowDummy.Checked = false;
                    }

                    string typeDummy = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='DummyNumberTypeOnMarkEntryCOE' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "'  ").Trim();
                    if (typeDummy == "1")
                    {
                        rblDummyCommonSub.SelectedIndex = 1;
                    }
                    else
                    {
                        rblDummyCommonSub.SelectedIndex = 0;
                    }


                    string modeDummy = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='DummyNumberModeOnMarkEntryCOE' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "'  ").Trim();
                    if (modeDummy == "1")
                    {
                        rblDummyMode.SelectedIndex = 1;
                    }
                    else
                    {
                        rblDummyMode.SelectedIndex = 0;
                    }


                    //Include Batch Year RIghts

                    string incBat = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='IncludeBatchRightsInMarkEntry' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "'  ").Trim();
                    if (incBat == "1")
                    {
                        chkIncMarkEntBatchRights.Checked = true;
                    }
                    else
                    {
                        chkIncMarkEntBatchRights.Checked = false;
                    }
                    #endregion

                    #region Added By Idhris 27-12-2016
                    string saveValcopy = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='SMSSettingIndividualCommon' and college_code ='" + ddlcollege.SelectedItem.Value + "'  ").Trim();
                    if (saveValcopy == "1")
                    {
                        rblSmsIndividualCommon.SelectedIndex = 1;
                    }
                    else
                    {
                        rblSmsIndividualCommon.SelectedIndex = 0;
                    }
                    #endregion

                    #region Code modified by Idhris 17-12-2016
                    //Staff App Tab Rights Save
                    for (int chkRow = 0; chkRow < chkStaffAppTabRights.Items.Count; chkRow++)
                    {
                        string linkName = chkStaffAppTabRights.Items[chkRow].Value + chkStaffAppTabRights.Items[chkRow].Text;
                        chkStaffAppTabRights.Items[chkRow].Selected = false;
                        if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'").Trim() == "1")
                        {
                            chkStaffAppTabRights.Items[chkRow].Selected = true;
                        }
                    }
                    //Student App Tab Rights Save
                    for (int chkRow = 0; chkRow < chkStudentAppTabRights.Items.Count; chkRow++)
                    {
                        string linkName = chkStudentAppTabRights.Items[chkRow].Value + chkStudentAppTabRights.Items[chkRow].Text;
                        chkStudentAppTabRights.Items[chkRow].Selected = false;
                        if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'").Trim() == "1")
                        {
                            chkStudentAppTabRights.Items[chkRow].Selected = true;
                        }
                    }
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Current Sem/Year' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        chk_yr.Checked = false;
                    }
                    else
                    {
                        chk_yr.Checked = true;
                    }
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Receipt For Student' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        chk_stud.Checked = false;
                    }
                    else
                    {
                        chk_stud.Checked = true;
                    }
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Duplicate Receipt For Student' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        chk_duplicate.Checked = false;
                    }
                    else
                    {
                        chk_duplicate.Checked = true;
                    }
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Delete Receipt' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'").Trim() == "0")
                    {
                        chk_delRcpt.Checked = false;
                    }
                    else
                    {
                        chk_delRcpt.Checked = true;
                    }
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Preprint Receipt For Student' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        chk_print.Checked = false;
                    }
                    else
                    {
                        chk_print.Checked = true;
                    }
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Edit Receipt Date' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        chk_editrpt.Checked = false;
                    }
                    else
                    {
                        chk_editrpt.Checked = true;
                    }
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Cancel Receipt' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        chk_canrpt.Checked = false;
                    }
                    else
                    {
                        chk_canrpt.Checked = true;
                    }
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Lock Start Date' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        chk_lsdate.Checked = false;
                    }
                    else
                    {
                        chk_lsdate.Checked = true;
                    }
                    if (cbl_Feecategory.Items.Count > 0)
                    {
                        foreach (ListItem li in cbl_Feecategory.Items)
                        {
                            li.Selected = false;
                            string checkValue = d2.GetFunctionv("select LinkValue from New_InsSettings where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "' and LinkValue='" + li.Value + "'");
                            if (!string.IsNullOrEmpty(checkValue))
                            {
                                li.Selected = true;
                            }
                        }
                    }
                    //if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    //{
                    //    rdbfeesem.Checked = true;
                    //    rdbfeeterm.Checked = false;
                    //    rdbfeeyear.Checked = false;
                    //}
                    //if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "1")
                    //{
                    //    rdbfeeterm.Checked = false;
                    //    rdbfeesem.Checked = false;
                    //    rdbfeeyear.Checked = true;
                    //}
                    //if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "2")
                    //{
                    //    rdbfeeterm.Checked = true;
                    //    rdbfeesem.Checked = false;
                    //    rdbfeeyear.Checked = false;
                    //}
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        chk_fees.Checked = false;
                    }
                    else
                    {
                        chk_fees.Checked = true;
                    }
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Yet to be paid with date' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        chk_paid.Checked = false;
                    }
                    else
                    {
                        chk_paid.Checked = true;
                    }
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Bank Statement Page Settings' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        chk_bank.Checked = false;
                    }
                    else
                    {
                        chk_bank.Checked = true;
                    }
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Challan Page Settings' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        chk_chall.Checked = false;
                    }
                    else
                    {
                        chk_chall.Checked = true;
                    }
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Selected Ledger in Challan Print' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        chk_challhed.Checked = false;
                    }
                    else
                    {
                        chk_challhed.Checked = true;
                    }
                    if (d2.GetFunction("select LinkValue from inssettings where LinkName='Transport Link'  and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        chk_transfee.Checked = false;
                    }
                    else
                    {
                        chk_transfee.Checked = true;
                    }
                    //sudhagar semesterandyear setting
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='SemesterandYear' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        chk_semyear.Checked = false;
                    }
                    else
                    {
                        chk_semyear.Checked = true;
                    }
                    //sudhagar automaticall clear dd setting 29-04 friday
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='AutomaticallyClearDD' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        chk_dd.Checked = false;
                    }
                    else
                    {
                        chk_dd.Checked = true;
                    }
                    //added by sudhagar show all ledger
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Show All Ledger' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        cballledger.Checked = false;
                    }
                    else
                    {
                        cballledger.Checked = true;
                    }
                    //added by sudhagar cash deposit cumulative 06/07/2016
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Cash Deposit Cumulative' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        cbcontra.Checked = false;
                    }
                    else
                    {
                        cbcontra.Checked = true;
                    }
                    //clear dd to bounce 29.11.2016 by sudhagar
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Clear DD to Bounce' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        cbclrddcnl.Checked = false;
                    }
                    else
                    {
                        cbclrddcnl.Checked = true;
                    }

                    //challan receipt 17.03.2017 by sudhagar
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='ChallanReceipt' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        cbchlrcpt.Checked = false;
                    }
                    else
                    {
                        cbchlrcpt.Checked = true;
                    }

                    //edit receipt no 18.03.2017 by sudhagar
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='EditReceiptNo' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        cbeditrcptno.Checked = false;
                    }
                    else
                    {
                        cbeditrcptno.Checked = true;
                    }
                    //include paid amount to paid added by sudhagar 28.06.2017
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='IncludeDueAmount' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        cbincDueAmt.Checked = false;
                    }
                    else
                    {
                        cbincDueAmt.Checked = true;
                    }

                    //include concession in  journal added by sudhagar 06.10.2017
                    if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='IncludeConcession' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "'") == "0")
                    {
                        cbdeduct.Checked = false;
                    }
                    else
                    {
                        cbdeduct.Checked = true;
                    }
                    #endregion

                    string newinsqry1 = "select LinkValue from New_InsSettings where LinkName='ShowRegisterNumberVerification' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    string nsave1 = d2.GetFunction(newinsqry1).Trim();
                    if (nsave1 == "1")
                    {
                        cbShowVerRegNo.Checked = true;
                    }
                    else
                    {
                        cbShowVerRegNo.Checked = false;
                    }

                    #region Code to Save Challan Receipt Settings --Modified on 17-12-2016 by Idhris
                    //Receipt or Challan or Both
                    string insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanOrReceiptOrBoth' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    int save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        //Receipt
                        cbl_RcptChln.Items[0].Selected = true;
                    }
                    if (save1 == 2)
                    {
                        //Challan
                        cbl_RcptChln.Items[1].Selected = true;
                    }
                    if (save1 == 3)
                    {
                        //Receipt and Challan
                        cbl_RcptChln.Items[0].Selected = true;
                        cbl_RcptChln.Items[1].Selected = true;
                    }
                    //Challan Receipt Priority
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptDefaultPriority' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 0)
                    {
                        //Receipt as Default
                        rbl_ChlRcptPriority.SelectedIndex = 0;
                    }
                    if (save1 == 1)
                    {
                        //Challan as Default
                        rbl_ChlRcptPriority.SelectedIndex = 1;
                    }
                    //Headerwise or Group Header wise or Ledger wise
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='GroupHeaderOrHeaderOrLedger' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        //Group Header
                        cbl_typeOfHdr.Items[0].Selected = true;
                    }
                    if (save1 == 2)
                    {
                        //Header
                        cbl_typeOfHdr.Items[1].Selected = true;
                    }
                    if (save1 == 3)
                    {
                        //Ledger
                        cbl_typeOfHdr.Items[2].Selected = true;
                    }
                    if (save1 == 4)
                    {
                        //All
                        cbl_typeOfHdr.Items[0].Selected = true;
                        cbl_typeOfHdr.Items[1].Selected = true;
                        cbl_typeOfHdr.Items[2].Selected = true;
                    }
                    if (save1 == 5)
                    {
                        //GH and Ledger
                        cbl_typeOfHdr.Items[0].Selected = true;
                        cbl_typeOfHdr.Items[1].Selected = true;
                    }
                    if (save1 == 6)
                    {
                        //Ledger and Header                        
                        cbl_typeOfHdr.Items[1].Selected = true;
                        cbl_typeOfHdr.Items[2].Selected = true;
                    }
                    if (save1 == 7)
                    {
                        //GHeader and Ledger
                        cbl_typeOfHdr.Items[0].Selected = true;
                        cbl_typeOfHdr.Items[2].Selected = true;
                    }
                    //Is Challan or Receipt Header wise ?
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='HeaderWiseChallanorReceipt' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 2)
                    {
                        //If Challan Selected
                        cbl_HdrwiseChlnRcpt.Items[0].Selected = true;
                    }
                    if (save1 == 1)
                    {
                        //If Receipt Selected
                        cbl_HdrwiseChlnRcpt.Items[1].Selected = true;
                    }
                    if (save1 == 3)
                    {
                        cbl_HdrwiseChlnRcpt.Items[0].Selected = true;
                        cbl_HdrwiseChlnRcpt.Items[1].Selected = true;
                    }
                    //Roll Number or Reg Number or Admission No or Application Number or Smart card number
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptRollNo' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        //Roll No
                        cbl_RollRegAdmNo.Items[0].Selected = true;
                    }
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptRegNo' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        //RegNo
                        cbl_RollRegAdmNo.Items[1].Selected = true;
                    }
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptRollAdmit' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        //Admission No - Roll Admit
                        cbl_RollRegAdmNo.Items[2].Selected = true;
                    }
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptAppFormNo' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        //App Form Number - Application Number
                        cbl_RollRegAdmNo.Items[3].Selected = true;
                    }
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptSmartNo' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        //Smart card Number - smart_serial_no
                        cbl_RollRegAdmNo.Items[4].Selected = true;
                    }
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='ExcessFeesType' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        //Common
                        cbl_excessType.Items[0].Selected = true;
                        cbl_excessType.Items[1].Selected = false;
                    }
                    if (save1 == 2)
                    {
                        //Ledgerwise
                        cbl_excessType.Items[0].Selected = false;
                        cbl_excessType.Items[1].Selected = true;
                    }
                    //Fine TYpe 
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='FineFeesType' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        //Common
                        chkFineType.Checked = true;
                    }
                    else
                    {
                        chkFineType.Checked = false;
                    }

                    //SCholarship
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='ScholarshipType' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 0)
                    {
                        //Common
                        cblScholarship.Items[0].Selected = true;
                        cblScholarship.Items[1].Selected = false;
                    }
                    if (save1 == 1)
                    {
                        //Ledgerwise
                        cblScholarship.Items[1].Selected = true;
                        cblScholarship.Items[0].Selected = false;
                    }
                    //SHow Balance
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='ShowBalanceType' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 0)
                    {
                        //Current Ledgers
                        rblShowBal.Items[0].Selected = true;
                        rblShowBal.Items[1].Selected = false;
                    }
                    if (save1 == 1)
                    {
                        //Total Ledgers
                        rblShowBal.Items[1].Selected = true;
                        rblShowBal.Items[0].Selected = false;
                    }
                    //Disable Stream and Shift in Journal
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='JournalEnableStreamShift' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        cb_StreamShift.Checked = true;
                    }
                    else
                    {
                        cb_StreamShift.Checked = false;
                    }
                    //Move TO Registration from Challan
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='MoveFromChallanToReg' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        cbMovetoReg.Checked = true;
                    }
                    else
                    {
                        cbMovetoReg.Checked = false;
                    }
                    //Allow duplicate receipt from bank import
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='AllowDupReceiptBankimport' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        cbAllowDupRcptBnkImpt.Checked = true;
                    }
                    else
                    {
                        cbAllowDupRcptBnkImpt.Checked = false;
                    }
                    //Automatically clear cheque
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='AutomaticallyClearCheque' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        cb_autoClrCheque.Checked = true;
                    }
                    else
                    {
                        cb_autoClrCheque.Checked = false;
                    }
                    //Students from Admission
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='StudentAppliedShorlistAdmit' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    ddlStudAppAdmShort.SelectedIndex = save1;

                    //Fine Ledger and Header Retrieve added by sudhagar 08.09.2017
                    #region fine
                    string save0 = string.Empty;
                    ArrayList arCourse = new ArrayList();
                    bindBtch();
                    binddeg();
                    Hashtable htCourse = getDepartment(Convert.ToString(ddlcollege.SelectedItem.Value));
                    for (int bat = 0; bat < cbl_batch.Items.Count; bat++)
                    {
                        string batch = Convert.ToString(cbl_batch.Items[bat].Value);
                        for (int deg = 0; deg < cbl_dept.Items.Count; deg++)
                        {
                            string degree = Convert.ToString(cbl_dept.Items[deg].Value);
                            string linkName = batch + "-" + degree + "-" + "FineLedgerValue";
                            insqry1 = " select LinkValue from New_InsSettings where LinkName='" + linkName + "'  and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                            save0 = Convert.ToString(d2.GetFunction(insqry1));
                            if (save0 != "0")
                            {
                                if (ddl_hdrFine.Items.Count > 0)
                                {
                                    for (int hdri = 0; hdri < ddl_hdrFine.Items.Count; hdri++)
                                    {
                                        if (Convert.ToString(ddl_hdrFine.Items[hdri].Value) != save0.Split('~')[2])
                                            continue;
                                        ddl_hdrFine.SelectedIndex = hdri;
                                    }
                                    loadFineLedger();
                                    if (ddl_lgrFine.Items.Count > 0)
                                    {
                                        for (int lgri = 0; lgri < ddl_lgrFine.Items.Count; lgri++)
                                        {
                                            if (Convert.ToString(ddl_lgrFine.Items[lgri].Value) != save0.Split('~')[3])
                                                continue;
                                            ddl_lgrFine.SelectedIndex = lgri;
                                            for (int finelgr = 0; finelgr < ddl_fineLedger.Items.Count; finelgr++)//delsi 29/06
                                            {
                                                string[] s2 = save0.Split('~'); //added by Mullai
                                                if (s2.Length > 4)
                                                {
                                                    if (Convert.ToString(ddl_fineLedger.Items[finelgr].Value) != save0.Split('~')[4])
                                                        continue;
                                                    ddl_fineLedger.SelectedIndex = finelgr;
                                                }


                                            }

                                            cbl_batch.Items[bat].Selected = true;
                                            cbl_dept.Items[deg].Selected = true;
                                            if (htCourse.ContainsKey(degree))
                                            {
                                                string course = Convert.ToString(htCourse[degree]);
                                                if (!arCourse.Contains(course))
                                                    arCourse.Add(course);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (arCourse.Count > 0)
                    {
                        for (int arc = 0; arc < arCourse.Count; arc++)
                        {
                            for (int cour = 0; cour < cbl_degree.Items.Count; cour++)
                            {
                                if (Convert.ToString(cbl_degree.Items[cour].Value) != Convert.ToString(arCourse[arc]))
                                    continue;
                                cbl_degree.Items[cour].Selected = true;
                            }
                        }
                    }
                    #endregion

                    //insqry1 = " select LinkValue from New_InsSettings where LinkName='FineLedgerValue'  and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    //string save0 = Convert.ToString(d2.GetFunction(insqry1));
                    //if (save0 != "0")
                    //{
                    //    if (ddl_hdrFine.Items.Count > 0)
                    //    {
                    //        for (int hdri = 0; hdri < ddl_hdrFine.Items.Count; hdri++)
                    //        {
                    //            if (Convert.ToString(ddl_hdrFine.Items[hdri].Value) == save0.Split(',')[0])
                    //            {
                    //                ddl_hdrFine.SelectedIndex = hdri;
                    //            }
                    //        }
                    //        loadFineLedger();
                    //        if (ddl_lgrFine.Items.Count > 0)
                    //        {
                    //            for (int lgri = 0; lgri < ddl_lgrFine.Items.Count; lgri++)
                    //            {
                    //                if (Convert.ToString(ddl_lgrFine.Items[lgri].Value) == save0.Split(',')[1])
                    //                {
                    //                    ddl_lgrFine.SelectedIndex = lgri;
                    //                }
                    //            }
                    //        }
                    //    }
                    //}


                    //re admission fees setting  added by sudhagar 08.09.2017                 
                    #region re admission fine
                    save0 = string.Empty;
                    arCourse = new ArrayList();
                    bindBtchRe();
                    binddegRe();
                    htCourse = getDepartment(Convert.ToString(ddlcollege.SelectedItem.Value));
                    for (int bat = 0; bat < cblreadmbatch.Items.Count; bat++)
                    {
                        string batch = Convert.ToString(cblreadmbatch.Items[bat].Value);
                        for (int deg = 0; deg < cblreadmdept.Items.Count; deg++)
                        {
                            string degree = Convert.ToString(cblreadmdept.Items[deg].Value);
                            string linkName = batch + "-" + degree + "-" + "ReAdmissionFessSettings";
                            insqry1 = " select LinkValue from New_InsSettings where LinkName='" + linkName + "'  and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                            save0 = Convert.ToString(d2.GetFunction(insqry1));
                            if (save0 != "0")
                            {
                                if (ddlreadmfinehed.Items.Count > 0)
                                {
                                    for (int hdri = 0; hdri < ddlreadmfinehed.Items.Count; hdri++)
                                    {
                                        if (Convert.ToString(ddlreadmfinehed.Items[hdri].Value) != save0.Split('~')[2])
                                            continue;
                                        ddlreadmfinehed.SelectedIndex = hdri;
                                    }
                                    loadFineLedgerreamd();
                                    if (ddlreadmfineled.Items.Count > 0)
                                    {
                                        for (int lgri = 0; lgri < ddlreadmfineled.Items.Count; lgri++)
                                        {
                                            if (Convert.ToString(ddlreadmfineled.Items[lgri].Value) != save0.Split('~')[3])
                                                continue;
                                            ddlreadmfineled.SelectedIndex = lgri;
                                            cblreadmbatch.Items[bat].Selected = true;
                                            cblreadmdept.Items[deg].Selected = true;
                                            if (htCourse.ContainsKey(degree))
                                            {
                                                string course = Convert.ToString(htCourse[degree]);
                                                if (!arCourse.Contains(course))
                                                    arCourse.Add(course);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (arCourse.Count > 0)
                    {
                        for (int arc = 0; arc < arCourse.Count; arc++)
                        {
                            for (int cour = 0; cour < cblreadmdegree.Items.Count; cour++)
                            {
                                if (Convert.ToString(cblreadmdegree.Items[cour].Value) != Convert.ToString(arCourse[arc]))
                                    continue;
                                cblreadmdegree.Items[cour].Selected = true;
                            }
                        }
                    }
                    #endregion
                    //insqry1 = " select LinkValue from New_InsSettings where LinkName='ReAdmissionFessSettings'  and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    //string save01 = Convert.ToString(d2.GetFunction(insqry1));
                    //if (save01 != "0")
                    //{
                    //    if (ddlreadmfinehed.Items.Count > 0)
                    //    {
                    //        for (int hdri = 0; hdri < ddlreadmfinehed.Items.Count; hdri++)
                    //        {
                    //            if (Convert.ToString(ddlreadmfinehed.Items[hdri].Value) == save01.Split(',')[0])
                    //            {
                    //                ddlreadmfinehed.SelectedIndex = hdri;
                    //            }
                    //        }
                    //        loadFineLedgerreamd();
                    //        if (ddlreadmfineled.Items.Count > 0)
                    //        {
                    //            for (int lgri = 0; lgri < ddlreadmfineled.Items.Count; lgri++)
                    //            {
                    //                if (Convert.ToString(ddlreadmfineled.Items[lgri].Value) == save01.Split(',')[1])
                    //                {
                    //                    ddlreadmfineled.SelectedIndex = lgri;
                    //                }
                    //            }
                    //        }
                    //    }
                    //}

                    //added by sudhagar 19.06.2017
                    insqry1 = " select LinkValue from New_InsSettings where LinkName='JournalFessSettings'  and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    string sav01 = Convert.ToString(d2.GetFunction(insqry1));
                    if (sav01 != "0")
                    {
                        if (ddlMainJrHed.Items.Count > 0)
                        {
                            for (int hdri = 0; hdri < ddlMainJrHed.Items.Count; hdri++)
                            {
                                if (Convert.ToString(ddlMainJrHed.Items[hdri].Value) == sav01.Split(',')[0])
                                {
                                    ddlMainJrHed.SelectedIndex = hdri;
                                }
                            }
                            loadMainJrLed();
                            if (ddlMainJrLed.Items.Count > 0)
                            {
                                for (int lgri = 0; lgri < ddlMainJrLed.Items.Count; lgri++)
                                {
                                    if (Convert.ToString(ddlMainJrLed.Items[lgri].Value) == sav01.Split(',')[1])
                                    {
                                        ddlMainJrLed.SelectedIndex = lgri;
                                    }
                                }
                            }
                        }
                    }

                    //Day Scholar Student Mess Setting zzz
                    insqry1 = " select LinkValue from InsSettings where LinkName='DayScholarStudentMessSetting'  and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    string save11 = Convert.ToString(d2.GetFunction(insqry1));
                    txt_messAmount.Text = "0.00";
                    if (save11.Trim() != "0" && save11.Trim() != "")
                    {
                        if (ddl_studmessheader.Items.Count > 0)
                        {
                            for (int hdri = 0; hdri < ddl_studmessheader.Items.Count; hdri++)
                            {
                                if (Convert.ToString(ddl_studmessheader.Items[hdri].Value) == save11.Split(',')[0])
                                {
                                    ddl_studmessheader.SelectedIndex = hdri;
                                }
                            }
                            loadMessLedger();
                            if (ddl_studmessledger.Items.Count > 0)
                            {
                                for (int lgri = 0; lgri < ddl_studmessledger.Items.Count; lgri++)
                                {
                                    if (Convert.ToString(ddl_studmessledger.Items[lgri].Value) == save11.Split(',')[1])
                                    {
                                        ddl_studmessledger.SelectedIndex = lgri;
                                    }
                                }
                            }
                            txt_messAmount.Text = save11.Split(',')[2];
                        }
                    }
                    //Admission Bank 
                    save0 = string.Empty;
                    insqry1 = " select LinkValue from New_InsSettings where LinkName='AdmissionBankForChallan'  and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    save0 = Convert.ToString(d2.GetFunction(insqry1));
                    if (ddlAdmissionBank.Items.Count > 0)
                    {
                        for (int lgri = 0; lgri < ddlAdmissionBank.Items.Count; lgri++)
                        {
                            if (Convert.ToString(ddlAdmissionBank.Items[lgri].Value) == save0)
                            {
                                ddlAdmissionBank.SelectedIndex = lgri;
                            }
                        }
                    }
                    //Call Letter Format
                    save0 = string.Empty;
                    insqry1 = " select LinkValue from New_InsSettings where LinkName='AdmissionCallLetterSetting'  and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    save0 = Convert.ToString(d2.GetFunction(insqry1));
                    if (ddlCallLetter.Items.Count > 0)
                    {
                        ddlCallLetter.SelectedIndex = Convert.ToInt32(save0);
                    }
                    ////Admission Confirmation
                    //save0 = string.Empty;
                    //insqry1 = " select LinkValue from New_InsSettings where LinkName='AdmissionConfirmSetting'  and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    //save0 = Convert.ToString(d2.GetFunction(insqry1));
                    //rblAdmConf.SelectedIndex = Convert.ToInt32(save0);
                    ////Show fees structure on admission admit
                    //insqry1 = "select LinkValue from New_InsSettings where LinkName='AdmissionShowFeeStructure' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    //save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    //if (save1 == 1)
                    //{
                    //    cbAdmFeeStuct.Checked = true;
                    //}
                    //else
                    //{
                    //    cbAdmFeeStuct.Checked = false;
                    //}
                    //sudhagar Transport header and ledger value retrive                    
                    insqry1 = " select LinkValue from New_InsSettings where LinkName='TransportLedgerValue'  and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    string trnsave = Convert.ToString(d2.GetFunction(insqry1));
                    if (trnsave != "0")
                    {
                        if (ddlhdrtrans.Items.Count > 0)
                        {
                            for (int hdri = 0; hdri < ddlhdrtrans.Items.Count; hdri++)
                            {
                                if (Convert.ToString(ddlhdrtrans.Items[hdri].Value) == trnsave.Split(',')[0])
                                {
                                    ddlhdrtrans.SelectedIndex = hdri;
                                }
                            }
                            loadTransportLedger();
                            if (ddllgrtrans.Items.Count > 0)
                            {
                                for (int lgri = 0; lgri < ddllgrtrans.Items.Count; lgri++)
                                {
                                    if (Convert.ToString(ddllgrtrans.Items[lgri].Value) == trnsave.Split(',')[1])
                                    {
                                        ddllgrtrans.SelectedIndex = lgri;
                                    }
                                }
                            }
                        }
                    }
                    //Include Finance for Leave Request
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='IncludeFinanceLeaveRequest' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        chkIncFinLeaveRequest.Checked = true;
                    }
                    else
                    {
                        chkIncFinLeaveRequest.Checked = false;
                    }
                    //Show Scheme Settings
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='ShowSchemeSettings' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        chkShowSchemeSettings.Checked = true;
                    }
                    else
                    {
                        chkShowSchemeSettings.Checked = false;
                    }
                    //Include Discontinued and Course completed students in journal
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='IncludeDiscontinuedInJournal' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        chkJourDisc.Checked = true;
                    }
                    else
                    {
                        chkJourDisc.Checked = false;
                    }
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='IncludeCompletedInJournal' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        chkJourCc.Checked = true;
                    }
                    else
                    {
                        chkJourCc.Checked = false;
                    }
                    //Show students display position in Journal
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='StudentsDisplayPositioninJournal' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        chkStudDispPosJour.Checked = true;
                    }
                    else
                    {
                        chkStudDispPosJour.Checked = false;
                    }
                    //paymode setting added by sudhagar 24.12.2016
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='IncludePaymodeSettings' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        string payValue = string.Empty;
                        cbinclpay.Checked = true;
                        insqry1 = "select LinkValue from New_InsSettings where LinkName='IncludePaymodeSettingsValue' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                        payValue = Convert.ToString(d2.GetFunction(insqry1));
                        if (payValue != "0")
                        {
                            string[] splcode = payValue.Split(',');
                            if (splcode.Length > 0)
                            {
                                for (int sp = 0; sp < splcode.Length; sp++)
                                {
                                    for (int sel = 0; sel < cblpaymode.Items.Count; sel++)
                                    {
                                        if (splcode[sp].Trim() == cblpaymode.Items[sel].Value)
                                        {
                                            cblpaymode.Items[sel].Selected = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                        cbinclpay.Checked = false;
                    #endregion


                    #region tab rights

                    cbRcptStud.Checked = false;
                    cbRcptStaff.Checked = false;
                    cbRcptVendor.Checked = false;
                    cbRcptOther.Checked = false;
                    //added by sudhagar 10.11.2017 for payment and receipt tab rights
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='FinanceReceiptTabRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    string strVal = Convert.ToString(d2.GetFunction(insqry1));
                    if (!string.IsNullOrEmpty(strVal) && strVal != "0")
                    {
                        string[] strSpltVal = strVal.Split('$');
                        if (strSpltVal.Length > 0)
                        {
                            for (int rcpt = 0; rcpt < strSpltVal.Length; rcpt++)
                            {
                                switch (Convert.ToInt32(strSpltVal[rcpt]))
                                {
                                    case 1:
                                        cbRcptStud.Checked = true;
                                        break;
                                    case 2:
                                        cbRcptStaff.Checked = true;
                                        break;
                                    case 3:
                                        cbRcptVendor.Checked = true;
                                        break;
                                    case 4:
                                        cbRcptOther.Checked = true;
                                        break;
                                }
                            }
                        }
                    }

                    cbPayStud.Checked = false;
                    cbPayStaff.Checked = false;
                    cbPayVendor.Checked = false;
                    cbPayOther.Checked = false;
                    strVal = string.Empty;
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='FinancePaymentTabRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";

                    strVal = Convert.ToString(d2.GetFunction(insqry1));
                    if (!string.IsNullOrEmpty(strVal) && strVal != "0")
                    {
                        string[] strSpltVal = strVal.Split('$');
                        if (strSpltVal.Length > 0)
                        {
                            for (int rcpt = 0; rcpt < strSpltVal.Length; rcpt++)
                            {
                                switch (Convert.ToInt32(strSpltVal[rcpt]))
                                {
                                    case 1:
                                        cbPayStud.Checked = true;
                                        break;
                                    case 2:
                                        cbPayStaff.Checked = true;
                                        break;
                                    case 3:
                                        cbPayVendor.Checked = true;
                                        break;
                                    case 4:
                                        cbPayOther.Checked = true;
                                        break;
                                }
                            }
                        }
                    }
                    #endregion

                    #region Added By saranya on 06 Dec 2017 Receiptcancel sms Or mail

                    cbSms.Checked = false;
                    cbMail.Checked = false;

                    strVal = string.Empty;
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='FinanceCancelReceiptSmsOrEmail' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    strVal = Convert.ToString(d2.GetFunction(insqry1));
                    if (!string.IsNullOrEmpty(strVal) && strVal != "0")
                    {
                        string[] strSpltVal = strVal.Split('$');
                        if (strSpltVal.Length > 0)
                        {
                            for (int rcpt = 0; rcpt < strSpltVal.Length; rcpt++)
                            {
                                switch (Convert.ToInt32(strSpltVal[rcpt]))
                                {
                                    case 1:
                                        cbSms.Checked = true;
                                        break;
                                    case 2:
                                        cbMail.Checked = true;
                                        break;
                                }
                            }
                        }
                    }

                    #endregion

                    //SCholarship
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='ScholarshipType' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 0)
                    {
                        //Common
                        cblScholarship.Items[0].Selected = true;
                        cblScholarship.Items[1].Selected = false;
                    }
                    if (save1 == 1)
                    {
                        //Ledgerwise
                        cblScholarship.Items[1].Selected = true;
                        cblScholarship.Items[0].Selected = false;
                    }
                    //SHow Balance
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='ShowBalanceType' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 0)
                    {
                        //Current Ledgers
                        rblShowBal.Items[0].Selected = true;
                        rblShowBal.Items[1].Selected = false;
                    }
                    if (save1 == 1)
                    {
                        //Total Ledgers
                        rblShowBal.Items[1].Selected = true;
                        rblShowBal.Items[0].Selected = false;
                    }
                    //Admission Bank 
                    save0 = string.Empty;
                    insqry1 = " select LinkValue from New_InsSettings where LinkName='AdmissionBankForChallan'  and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    save0 = Convert.ToString(d2.GetFunction(insqry1));
                    if (ddlAdmissionBank.Items.Count > 0)
                    {
                        for (int lgri = 0; lgri < ddlAdmissionBank.Items.Count; lgri++)
                        {
                            if (Convert.ToString(ddlAdmissionBank.Items[lgri].Value) == save0)
                            {
                                ddlAdmissionBank.SelectedIndex = lgri;
                            }
                        }
                    }
                    //Allow duplicate receipt from bank import
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='AllowDupReceiptBankimport' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        cbAllowDupRcptBnkImpt.Checked = true;
                    }
                    else
                    {
                        cbAllowDupRcptBnkImpt.Checked = false;
                    }
                    //Students from Admission
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='StudentAppliedShorlistAdmit' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    ddlStudAppAdmShort.SelectedIndex = save1;
                    //Admission Confirmation
                    save0 = string.Empty;
                    insqry1 = " select LinkValue from New_InsSettings where LinkName='AdmissionConfirmSetting'  and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    save0 = Convert.ToString(d2.GetFunction(insqry1));
                    rblAdmConf.SelectedIndex = Convert.ToInt32(save0);
                    //addmission Confirmation fee paid structure challan or receipt
                    save0 = string.Empty;
                    insqry1 = " select LinkValue from New_InsSettings where LinkName='AdmissionConfirmFeesStructureSetting'  and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    save0 = Convert.ToString(d2.GetFunction(insqry1));
                    rbfeesstr.SelectedIndex = Convert.ToInt32(save0);
                    //Show fees structure on admission admit
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='AdmissionShowFeeStructure' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        cbAdmFeeStuct.Checked = true;
                    }
                    else
                    {
                        cbAdmFeeStuct.Checked = false;
                    }

                    //Show Groupheader wise fees display in online fees
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='ShowDisplayGroupHeaderWise' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        chkDispGhorHead.Checked = true;
                    }
                    else
                    {
                        chkDispGhorHead.Checked = false;
                    }
                    //header
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='ShowDisplayHeaderWise' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        chkheaderwise.Checked = true;
                    }
                    else
                    {
                        chkheaderwise.Checked = false;
                    }
                    //ledger

                    insqry1 = "select LinkValue from New_InsSettings where LinkName='ShowDisplayLedgerWise' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        chkledgerwise.Checked = true;
                    }
                    else
                    {
                        chkledgerwise.Checked = false;
                    }

                    //Online_Application_Print_Pdf_Format barath 25.02.17
                    save0 = string.Empty;
                    insqry1 = " select LinkValue from New_InsSettings where LinkName='Online_Application_Print_Pdf_Format'  and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    save0 = Convert.ToString(d2.GetFunction(insqry1));
                    rdo_appprintformate.SelectedIndex = Convert.ToInt32(save0);
                    //Form16 barath 25.09.17
                    save0 = string.Empty;
                    insqry1 = "select linkValue from New_InsSettings where LinkName='Form16 Calculate All Month'  and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    save0 = Convert.ToString(d2.GetFunction(insqry1));
                    if (save0 == "1" || save0 == "True")
                        cb_AllMonth.Checked = true;
                    else
                        cb_AllMonth.Checked = false;
                    //Online_Application_gender settings barath 27.02.17
                    save0 = string.Empty;
                    string collegecodelevel = ddlcollegename.SelectedItem.Value;
                    insqry1 = " select LinkValue from New_InsSettings where LinkName='Online_Application_Gender_Settings'  and user_code ='" + selected_usercode + "' and college_code in('" + collegecodelevel + "')";
                    save0 = Convert.ToString(d2.GetFunction(insqry1));

                    if (save0 == "3")
                    {
                        rdb_genderset.Items[3].Selected = true;
                    }
                    else if (save0.Trim() == "0,1")
                    {
                        rdb_genderset.Items[0].Selected = true;
                        rdb_genderset.Items[1].Selected = true;
                    }
                    else if (save0.Trim() == "0,2")
                    {
                        rdb_genderset.Items[0].Selected = true;
                        rdb_genderset.Items[2].Selected = true;
                    }
                    else if (save0.Trim() == "1,2")
                    {
                        rdb_genderset.Items[1].Selected = true;
                        rdb_genderset.Items[2].Selected = true;
                    }
                    else if (save0.Trim() == "0")
                    {
                        rdb_genderset.Items[0].Selected = true;
                    }
                    else if (save0.Trim() == "1")
                    {
                        rdb_genderset.Items[1].Selected = true;
                    }
                    else if (save0.Trim() == "2")
                    {
                        rdb_genderset.Items[2].Selected = true;
                    }
                    else { rdb_genderset.Items[3].Selected = true; }
                    //new college 
                    save0 = string.Empty;
                    if (ddl_genderset.Items.Count > 0)
                    {

                        insqry1 = " select mastervalue from co_mastervalues where MasterCriteriaValue1='Online_Application_Gender_Settings' and MasterCriteria='" + Convert.ToString(ddl_genderset.SelectedItem.Value) + "' and mastercriteria1='" + selected_usercode + "' and college_code in('" + collegecodelevel + "')";
                        save0 = Convert.ToString(d2.GetFunction(insqry1));
                        rdb_genderset.ClearSelection();
                        if (save0 == "3")
                        {
                            rdb_genderset.Items[3].Selected = true;
                        }
                        else if (save0.Trim() == "0,1")
                        {
                            rdb_genderset.Items[0].Selected = true;
                            rdb_genderset.Items[1].Selected = true;
                        }
                        else if (save0.Trim() == "0,2")
                        {
                            rdb_genderset.Items[0].Selected = true;
                            rdb_genderset.Items[2].Selected = true;
                        }
                        else if (save0.Trim() == "1,2")
                        {
                            rdb_genderset.Items[1].Selected = true;
                            rdb_genderset.Items[2].Selected = true;
                        }
                        else if (save0.Trim() == "0")
                            rdb_genderset.Items[0].Selected = true;
                        else if (save0.Trim() == "1")
                            rdb_genderset.Items[1].Selected = true;
                        else if (save0.Trim() == "2")
                            rdb_genderset.Items[2].Selected = true;
                        else
                            rdb_genderset.Items[3].Selected = true;
                    }

                    save0 = string.Empty;
                    cbl_transferrefund.ClearSelection();
                    insqry1 = " select LinkValue from New_InsSettings where LinkName='Transfer and Refund Settings'  and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    save0 = Convert.ToString(d2.GetFunction(insqry1));
                    if (save0.Contains("1"))
                        cbl_transferrefund.Items[0].Selected = true;
                    if (save0.Contains("2"))
                        cbl_transferrefund.Items[1].Selected = true;
                    if (save0.Contains("3"))
                        cbl_transferrefund.Items[2].Selected = true;
                    if (save0.Contains("4"))
                        cbl_transferrefund.Items[3].Selected = true;
                    /* poomalar */
                    if (save0.Contains("5"))
                        cbl_transferrefund.Items[4].Selected = true;
                    //30.03.17
                    save0 = string.Empty;
                    insqry1 = "  select LinkValue from New_InsSettings where LinkName='Hostel_Admission_Form_Fee' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
                    save0 = Convert.ToString(d2.GetFunction(insqry1));
                    if (save0.Trim() != "")
                    {
                        string[] admissionformfee = save0.Split('$');//1$9,10$500
                        if (admissionformfee.Length > 1)
                        {
                            if (Convert.ToString(admissionformfee[0]) == "1")
                            {
                                cb_hosteladmissionformfee.Checked = true;
                                if (Convert.ToString(admissionformfee[1]).Trim() != "")
                                {
                                    string[] headled = Convert.ToString(admissionformfee[1]).Split(',');
                                    if (headled.Length > 1)
                                    {
                                        ddl_admissionH.SelectedIndex = ddl_admissionH.Items.IndexOf(ddl_admissionH.Items.FindByValue(headled[0]));
                                        ddl_admissionL.SelectedIndex = ddl_admissionL.Items.IndexOf(ddl_admissionL.Items.FindByValue(headled[1]));
                                    }
                                }
                                if (Convert.ToString(admissionformfee[2]).Trim() != "")
                                {
                                    txt_admissionfee.Text = Convert.ToString(admissionformfee[2]);
                                }
                            }
                            else
                                cb_hosteladmissionformfee.Checked = false;
                        }
                    }
                    //15.11.17 barath
                    int approvalrights = 0;
                    cbApprovalLeave.Checked = false;
                    int.TryParse(Convert.ToString(d2.GetFunction(" select LinkValue from New_InsSettings where LinkName='Approval leave Cancel Rights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'")), out approvalrights);
                    if (approvalrights == 1)
                        cbApprovalLeave.Checked = true;
                    int delreq = 0;
                    cb_requestforcancel.Checked = false;
                    int.TryParse(Convert.ToString(d2.GetFunction(" select LinkValue from New_InsSettings where LinkName='Requestforcancel' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'")), out delreq);
                    if (delreq == 1)
                        cb_requestforcancel.Checked = true;
                    int requestsms = 0;
                    cb_sendsmswhilerequest.Checked = false;

                    int.TryParse(Convert.ToString(d2.GetFunction(" select LinkValue from New_InsSettings where LinkName='smssendwhilerequest' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "'")), out requestsms);
                    if (requestsms == 1)
                        cb_sendsmswhilerequest.Checked = true;
                    //Include Finance Link In Admission
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='IncludeFinanceLinkInAdmission' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        cbIncFinLink.Checked = true;
                    }
                    else
                    {
                        cbIncFinLink.Checked = false;
                    }
                    //Include application fee for admission  added by sudhagar 09.12.2016
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='IncludeApplicationFeeInAdmission' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        cbapplfee.Checked = true;
                    }
                    else
                    {
                        cbapplfee.Checked = false;
                    }
                    //collegewise application no rights  added by sudhagar 10.12.2016
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='CollegewiseApplicationNoRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                        cbclgappl.Checked = true;
                    else
                        cbclgappl.Checked = false;
                    //collegewise admission no rights  added by sudhagar 10.12.2016
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='CollegewiseAdmissionNoRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                        cbclgadm.Checked = true;
                    else
                        cbclgadm.Checked = false;

                    //collegewise application no rights  added by Barath 09.03.17
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='EdulevelApplicationNoRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                        cb_edulevelappl.Checked = true;
                    else
                        cb_edulevelappl.Checked = false;
                    //collegewise admission no rights  added by Barath 09.03.17
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='EdulevelAdmissionNoRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                        cb_eduleveladm.Checked = true;
                    else
                        cb_eduleveladm.Checked = false;

                    //Degreewise seatwise application no rights  
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='DegreeSeatModewiseApplicationNoRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                        cb_DegSeatModeApp.Checked = true;
                    else
                        cb_DegSeatModeApp.Checked = false;
                    //Degreewise seatwise  admission no rights  
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='DegreeSeatModewiseAdmissionNoRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                        cb_DegSeatModeAdm.Checked = true;
                    else
                        cb_DegSeatModeAdm.Checked = false;
                    //feeconfirmation update or not in daily transation 
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='Feeconfirm DailyTransation update' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                        cbl_Feepaidconfirmation.Checked = true;
                    else
                        cbl_Feepaidconfirmation.Checked = false;
                    //Paavai new Application Number settings Barath 10.01.18 removed usercode 01/02/2018 barath
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='Common Application Number Settings' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                        cbNewAppNumber.Checked = true;
                    else
                        cbNewAppNumber.Checked = false;
                    //admission fee editable option added by sudhagar 16.12.2016
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='AdmissionFeeEditable' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                        cbeditable.Checked = true;
                    else
                        cbeditable.Checked = false;
                    //multiple term setting added by sudhagar 16.12.2016
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='IncludeMultipleTermSettings' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        cbincmulterm.Checked = true;
                        insqry1 = string.Empty;
                        insqry1 = "select LinkValue from New_InsSettings where LinkName='SelectedMultipleFeecategoryCode' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                        string feeCode = Convert.ToString(d2.GetFunction(insqry1));
                        if (feeCode != "0" && feeCode.Contains(","))
                        {
                            string[] splcode = feeCode.Split(',');
                            if (splcode.Length > 0)
                            {
                                for (int sp = 0; sp < splcode.Length; sp++)
                                {
                                    for (int sel = 0; sel < cblmulterm.Items.Count; sel++)
                                    {
                                        if (splcode[sp].Trim() == cblmulterm.Items[sel].Value)
                                        {
                                            cblmulterm.Items[sel].Selected = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    else
                        cbincmulterm.Checked = false;

                    //subject priority setting added by sudhagar modify barath 07.03.17
                    string lnkname = "";
                    if (rbVocation.Checked == false)
                    {
                        lnkname = "SubjectPriority";
                    }
                    else
                    {
                        lnkname = "SubjectPriorityVocational";
                    }
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='" + lnkname + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    string feesCode = Convert.ToString(d2.GetFunction(insqry1));

                    if (!string.IsNullOrEmpty(feesCode))
                    {
                        string[] splscode = feesCode.Split(',');
                        if (splscode.Length > 0)
                        {
                            int count = 0;
                            txtsubj.Text = "--Select--";
                            for (int sp = 0; sp < splscode.Length; sp++)
                            {
                                for (int sel = 0; sel < cblsubj.Items.Count; sel++)
                                {
                                    if (splscode[sp].Trim() == cblsubj.Items[sel].Value)
                                    {
                                        cblsubj.Items[sel].Selected = true;
                                        count++;
                                    }
                                }
                            }
                            txtsubj.Text = "Subject(" + count + ")";
                        }
                    }
                    //Send SMS after application saved
                    insqry1 = "select LinkValue from New_InsSettings where LinkName='SendSMSafterapplicationsaved' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                    save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                    if (save1 == 1)
                    {
                        chkAdmSms.Checked = true;
                    }
                    else
                    {
                        chkAdmSms.Checked = false;
                    }
                    //Added by Idhris
                    getSALTandKEY();
                    getAdmGenOnRcpt();
                    getWebsitePayment();

                    #endregion

                    if (rdb_ind.Checked == true)
                    {
                        string set = "select * from security_user_right where rights_desc='Online Admission' and user_id='" + selected_userid + "' and user_code='" + selected_usercode + "'  and college_code='" + Convert.ToString(ddlcollege.SelectedValue) + "' ";
                        ds1 = dasri.select_method_wo_parameter(set, "text");
                        if (ds1.Tables[0].Rows.Count > 0)
                        {
                            for (int admit = 0; admit < ds1.Tables[0].Rows.Count; admit++)
                            {
                                for (int cn = 0; cn < chcklist.Items.Count; cn++)
                                {
                                    string vl = chcklist.Items[cn].Value;
                                    if (vl == ds1.Tables[0].Rows[admit]["rights_code"].ToString())
                                    {
                                        chcklist.Items[cn].Selected = true;
                                    }
                                }
                            }
                        }
                    }
                    else if (rdb_grp.Checked == true)
                    {
                        string set = "select * from security_user_right where rights_desc='Online Admission' and user_id='" + selected_userid + "'   and college_code='" + Convert.ToString(ddlcollege.SelectedValue) + "' and group_code='" + selected_usercode + "'";
                        ds1 = dasri.select_method_wo_parameter(set, "text");
                        if (ds1.Tables[0].Rows.Count > 0)
                        {
                            for (int admit = 0; admit < ds1.Tables[0].Rows.Count; admit++)
                            {
                                for (int cn = 0; cn < chcklist.Items.Count; cn++)
                                {
                                    string vl = chcklist.Items[cn].Value;
                                    if (vl == ds1.Tables[0].Rows[admit]["rights_code"].ToString())
                                    {
                                        chcklist.Items[cn].Selected = true;
                                    }
                                }
                            }
                        }
                    }
                    //added by sudhagar Enrollment settings
                    if (rdb_ind.Checked == true)
                    {
                        string set = "select * from security_user_right where rights_desc='Enrollment Settings' and user_id='" + selected_userid + "' and user_code='" + selected_usercode + "'  and college_code='" + Convert.ToString(ddlcollege.SelectedValue) + "' ";
                        ds1 = dasri.select_method_wo_parameter(set, "text");
                        if (ds1.Tables[0].Rows.Count > 0)
                        {
                            for (int admit = 0; admit < ds1.Tables[0].Rows.Count; admit++)
                            {
                                for (int cn = 0; cn < cblenroll.Items.Count; cn++)
                                {
                                    string vl = cblenroll.Items[cn].Value;
                                    if (vl == ds1.Tables[0].Rows[admit]["rights_code"].ToString())
                                    {
                                        cblenroll.Items[cn].Selected = true;
                                    }
                                }
                            }
                        }
                    }
                    else if (rdb_grp.Checked == true)
                    {
                        string set = "select * from security_user_right where rights_desc='Enrollment Settings' and user_id='" + selected_userid + "'   and college_code='" + Convert.ToString(ddlcollege.SelectedValue) + "' and group_code='" + selected_usercode + "'";
                        ds1 = dasri.select_method_wo_parameter(set, "text");
                        if (ds1.Tables[0].Rows.Count > 0)
                        {
                            for (int admit = 0; admit < ds1.Tables[0].Rows.Count; admit++)
                            {
                                for (int cn = 0; cn < cblenroll.Items.Count; cn++)
                                {
                                    string vl = cblenroll.Items[cn].Value;
                                    if (vl == ds1.Tables[0].Rows[admit]["rights_code"].ToString())
                                    {
                                        cblenroll.Items[cn].Selected = true;
                                    }
                                }
                            }
                        }
                    }
                    if (rdb_ind.Checked == true)
                    {
                        userorgropcode = " and usercode=" + selected_usercode.ToString() + "";
                        user_gropcode = " and user_code=" + selected_usercode.ToString() + "";
                        usergroup = "  usercode=" + selected_usercode.ToString() + "";
                        strusergruop = "usercode";
                        struser_gruop = "usercode";
                    }
                    else if (rdb_grp.Checked == true)
                    {
                        userorgropcode = " and group_code=" + selected_usercode.ToString() + "";
                        user_gropcode = " and group_code=" + selected_usercode.ToString() + "";
                        usergroup = "  group_code=" + selected_usercode.ToString() + "";
                        strusergruop = "group_code";
                        struser_gruop = "group_code";
                    }
                    //Added By Jeyaprakash on July 21st
                    //   string selhrdept = "select dept_code from hr_privilege where user_code='" + selected_usercode + "' and college_code='" + ddlcollege.SelectedItem.Value + "'";
                    string selhrdept = "select dept_code,college_code from hr_privilege where user_code='" + selected_usercode + "'";//delsi0706
                    int hdcount = 0;
                    int clgcnt = 0;
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(selhrdept, "Text");

                    if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                    {
                        for (int hd = 0; hd < ds.Tables[0].Rows.Count; hd++)
                        {

                            string college_code = Convert.ToString(ds.Tables[0].Rows[hd]["college_code"]);
                            for (int j = 0; j < Cblcollege.Items.Count; j++)
                            {
                                string collcode = Convert.ToString(Cblcollege.Items[j].Value);
                                if (collcode == college_code)
                                {
                                    clgcnt++;
                                    Cblcollege.Items[j].Selected = true;
                                }
                                loadhrdept();
                            }
                        }
                    }

                    //if (clgcnt > 0)
                    //{
                    //    txt_college.Text = "College(" + clgcnt + ")";
                    //    if (clgcnt == Cblcollege.Items.Count)
                    //    {
                    //        Cbcollege.Checked = true;
                    //    }
                    //    else
                    //    {
                    //        Cbcollege.Checked = false;
                    //    }
                    //}
                    //else
                    //{
                    //    txt_college.Text = "--Select--";
                    //    Cbcollege.Checked = false;
                    //}




                    if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                    {
                        for (int hd = 0; hd < ds.Tables[0].Rows.Count; hd++)
                        {
                            string deptpr = Convert.ToString(ds.Tables[0].Rows[hd]["dept_code"]);


                            for (int ik = 0; ik < cblhrdept.Items.Count; ik++)
                            {
                                string deptcb = Convert.ToString(cblhrdept.Items[ik].Value);
                                if (deptpr == deptcb)
                                {
                                    hdcount++;
                                    cblhrdept.Items[ik].Selected = true;
                                }
                            }
                        }
                        if (hdcount > 0)
                        {
                            txthrdept.Text = "Department(" + hdcount + ")";
                            if (hdcount == cblhrdept.Items.Count)
                            {
                                cbhrdept.Checked = true;
                            }
                            else
                            {
                                cbhrdept.Checked = false;
                            }
                        }
                        else
                        {
                            txthrdept.Text = "--Select--";
                            cbhrdept.Checked = false;
                        }
                    }
                    else
                    {
                        for (int no = 0; no < cblhrdept.Items.Count; no++)
                        {
                            cblhrdept.Items[no].Selected = false;
                        }
                        txthrdept.Text = "--Select--";
                        cbhrdept.Checked = false;
                    }




                    //delsi1106
                    string selbank = "select bankpk,college_code from hr_bankrights where user_code='" + selected_usercode + "'";
                    int bankcount = 0;
                    ds.Clear();
                    ds = d2.select_method_wo_parameter(selbank, "Text");

                    if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                    {
                        for (int bk = 0; bk < ds.Tables[0].Rows.Count; bk++)
                        {
                            string bnk_pk = Convert.ToString(ds.Tables[0].Rows[bk]["bankpk"]);
                            string college_code = Convert.ToString(ds.Tables[0].Rows[bk]["college_code"]);


                            for (int ik = 0; ik < cblclgbank.Items.Count; ik++)
                            {
                                string bankpkk = Convert.ToString(cblclgbank.Items[ik].Value);
                                if (bnk_pk == bankpkk)
                                {
                                    bankcount++;
                                    cblclgbank.Items[ik].Selected = true;
                                }
                            }
                        }
                        if (bankcount > 0)
                        {
                            txtclgbank.Text = "Bank Name(" + bankcount + ")";
                            if (bankcount == cblclgbank.Items.Count)
                            {
                                cbclgbank.Checked = true;
                            }
                            else
                            {
                                cbclgbank.Checked = false;
                            }
                        }
                        else
                        {
                            txtclgbank.Text = "--Select--";
                            cbclgbank.Checked = false;
                        }
                    }
                    else
                    {
                        for (int no = 0; no < cblclgbank.Items.Count; no++)
                        {
                            cblclgbank.Items[no].Selected = false;
                        }
                        txtclgbank.Text = "--Select--";
                        cbclgbank.Checked = false;
                    }

                    string selhrset = d2.GetFunction("select value from Master_Settings where settings='HR_PanelSettings' and usercode='" + selected_usercode + "'");
                    if (selhrset.Trim() != "" && selhrset.Trim() != "0")
                    {
                        string[] splval = selhrset.Split(',');
                        if (splval.Length > 0)
                        {
                            for (int ik = 0; ik < splval.Length; ik++)
                            {
                                if (splval[ik] == "1")
                                {
                                    cblhrset.Items[0].Selected = true;
                                }
                                if (splval[ik] == "2")
                                {
                                    cblhrset.Items[1].Selected = true;
                                }
                                if (splval[ik] == "3")
                                {
                                    cblhrset.Items[2].Selected = true;
                                }
                                if (splval[ik] == "4")
                                {
                                    cblhrset.Items[3].Selected = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        for (int ik = 0; ik < cblhrset.Items.Count; ik++)
                        {
                            cblhrset.Items[ik].Selected = false;
                        }
                    }
                    string selstfupd = d2.GetFunction("select value from Master_Settings where settings='HR_StaffUpdate' and usercode='" + selected_usercode + "'");
                    if (selstfupd.Trim() != "" && selstfupd.Trim() != "0" && selstfupd.Trim() == "1")
                    {
                        chkupdstfcode.Checked = true;
                    }
                    else
                    {
                        chkupdstfcode.Checked = false;
                    }

                    string getlocval = d2.GetFunction("select value from Master_Settings where settings='payprocesslockset' and usercode='" + selected_usercode + "'");
                    if (getlocval.Trim() != "" && getlocval.Trim() != "0" && getlocval.Trim() == "1")//delsi1710
                    {
                        cb_payprocesslock.Checked = true;
                    }
                    else
                    {
                        cb_payprocesslock.Checked = false;
                    }
                    //Added by saranya 12/9/2018
                    string selstfLeaveApply = d2.GetFunction("select value from Master_Settings where settings='StaffLeaveApplyForPastDt' and usercode='" + selected_usercode + "'");
                    if (selstfLeaveApply.Trim() != "" && selstfLeaveApply.Trim() != "0" && selstfLeaveApply.Trim() == "1")
                    {
                        ChkStafLeaveapply.Checked = true;
                    }
                    else
                    {
                        ChkStafLeaveapply.Checked = false;
                    }

                    string selstfpriority = d2.GetFunction("select value from Master_Settings where settings='HR_checkpriority' and usercode='" + selected_usercode + "'");//delsi 0108
                    if (selstfpriority.Trim() != "" && selstfpriority.Trim() != "1" && selstfpriority.Trim() == "0")
                    {
                        cbgeneral_priority.Checked = true;
                    }
                    else
                    {
                        cbgeneral_priority.Checked = false;
                    }


                    string selstffin = d2.GetFunction("select value from Master_Settings where settings='Include_StaffFinger' and usercode='" + selected_usercode + "'");
                    if (selstffin.Trim() != "" && selstffin.Trim() != "0" && selstffin.Trim() == "1")
                        chkfingerid.Checked = true;
                    else
                        chkfingerid.Checked = false;

                    string selStfType = d2.GetFunction("select template from Master_Settings where settings='Retire_Age_Settings' and usercode='" + selected_usercode + "' and value like '" + Convert.ToString(ddlStfType.SelectedItem.Text) + "%'");//delsis0201
                    if (!String.IsNullOrEmpty(selStfType.Trim()) && selStfType.Trim() != "0")
                    {

                    }
                    else
                    {
                        ddlStfType.SelectedIndex = 0;
                        txtRetireAge.Text = "";
                    }
                    //-------------Ended-----------------//
                    TabContainer1.Visible = true;
                    SqlCommand cmd = new SqlCommand();
                    rbabsentees.Checked = false;
                    rbadmno.Checked = false;
                    rbregno.Checked = false;
                    rbrollno.Checked = false;
                    rbgeneral.Checked = false;
                    chkdayssch.Checked = false;
                    Chkfemale.Checked = false;
                    chkmale.Checked = false;
                    Chkhostel.Checked = false;
                    chklateral.Checked = false;
                    chktrans.Checked = false;
                    chkregular.Checked = false;
                    Chkrollno.Checked = false;
                    chkregno.Checked = false;
                    chkstud.Checked = false;
                    rptgen.Checked = false;
                    rptind.Checked = false;
                    starttext.Text = string.Empty;
                    endtext.Text = string.Empty;
                    chkcaldateentry.Checked = false;
                    //cmd.CommandText = "select * from Master_Settings where " + usergroup + "";
                    //cmd.Connection = con;
                    //con.Open();
                    //SqlDataReader dr = cmd.ExecuteReader();
                    #region SEND SMS AND EMAIL COPY ADDED BY MALANG RAJA
                    txt_CopySmsMobNo.Text = d2.GetFunctionv("select value from Master_Settings where settings='Copy of SMS'");
                    txt_CopyEmailid.Text = d2.GetFunctionv("select value from Master_Settings where settings='Copy of Email'");
                    txtmail.Text = d2.GetFunctionv("select MasterValue from CO_MasterValues where MasterCriteria ='Grievance From Mail' and CollegeCode ='" + ddlcollege.SelectedItem.Value + "'");
                    Txtpass.Text = d2.GetFunctionv("select MasterValue from CO_MasterValues where MasterCriteria ='Grievance From Mail Password' and CollegeCode ='" + ddlcollege.SelectedItem.Value + "'");
                    txttomail.Text = d2.GetFunctionv("select MasterValue from CO_MasterValues where MasterCriteria ='Grievance To Mail' and CollegeCode ='" + ddlcollege.SelectedItem.Value + "'");
                    #endregion SEND SMS AND EMAIL COPY ADDED BY MALANG RAJA
                    DataSet dsmas = dasri.select_method_wo_parameter("select * from Master_Settings where " + usergroup + "", "text");
                    //if (dr.HasRows)
                    if (dsmas.Tables[0].Rows.Count > 0)
                    {
                        // while (dr.Read())
                        for (int m = 0; m < dsmas.Tables[0].Rows.Count; m++)
                        {
                            //if (rdb_ind.Checked == true)
                            //{
                            //    if ((dr["settings"].ToString()) == "CAM Calculation Lock")
                            //    {
                            //        if ((dr["value"].ToString()) == "1")
                            //        {
                            //            Cbcamcalculationlock.Checked = true;
                            //        }
                            //    }
                            //}
                            //if (cbDayOrder.Checked == true)
                            //{
                            //    string savecopy = "if exists(select * from Master_Settings where settings='DayOrderWisePeriodAttendanceSettings' " + userorgropcode + " )update Master_Settings set value='1' where settings='schoolorcollege' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'DayOrderWisePeriodAttendanceSettings','1')";
                            //    int copy = dasri.update_method_wo_parameter(savecopy, "text");
                            //}
                            //else
                            //{
                            //    string savecopy = "if exists(select * from Master_Settings where settings='DayOrderWisePeriodAttendanceSettings' " + userorgropcode + " )update Master_Settings set value='0' where settings='schoolorcollege' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'DayOrderWisePeriodAttendanceSettings','0')";
                            //    int copy = dasri.update_method_wo_parameter(savecopy, "text");
                            //}
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "General attend")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    rbgeneral.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "cia_security") // added by jairam 03-04-2015
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chk_secuirty.Checked = true;
                                }
                                else
                                {
                                    chk_secuirty.Checked = false;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "DayOrderWisePeriodAttendanceSettings") //added By malang raja
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    cbDayOrder.Checked = true;
                                }
                                else
                                {
                                    cbDayOrder.Checked = false;
                                }
                            }

                            #region Added By Malang Raja on Oct 10 2017

                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "CAM Entry Based On Batch And Section Rights") //added By malang raja
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chkCAMBasedBatchRights.Checked = true;
                                }
                                else
                                {
                                    chkCAMBasedBatchRights.Checked = false;
                                }
                            }

                            #endregion Added By Malang Raja on Oct 10 2017

                            #region Added By Malang Raja on Nov 30 2016

                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString().Trim()) == "IncludeCondonationUnpaidStudentsInCoeMarkEntry") //added By malang raja
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString().Trim()) == "1")
                                {
                                    chkIncludeCondoUnpaid.Checked = true;
                                }
                                else
                                {
                                    chkIncludeCondoUnpaid.Checked = false;
                                }
                            }

                            #endregion  Added By Malang Raja on Nov 30 2016

                            #region Added By Malang Raja on Mar 13 2017

                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString().Trim()) == "CAM CIA Mark Entry Lock") //added By malang raja
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString().Trim()) == "1")
                                {
                                    chkCIALock.Checked = true;
                                }
                                else
                                {
                                    chkCIALock.Checked = false;
                                }
                            }

                            #endregion  Added By Malang Raja on Mar 13 2017

                            #region Added By Malang Raja on Apr 6 2017

                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString().Trim()) == "COE Exam Seating Arrangement Generation Lock") //added By malang raja
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString().Trim()) == "1")
                                {
                                    chkCoeSeatingArrangementLock.Checked = true;
                                }
                                else
                                {
                                    chkCoeSeatingArrangementLock.Checked = false;
                                }
                            }
                            //Rajkumar 02/01/2018================
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString().Trim()) == "Seating Arrangement Serial no order") //added By malang raja
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString().Trim()) == "1")
                                {
                                    chkSerial.Checked = true;
                                }
                                else
                                {
                                    chkSerial.Checked = false;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString().Trim()) == "Seating Arrangement Qpaper order") //added By malang raja
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString().Trim()) == "1")
                                {
                                    chkQpapertype.Checked = true;
                                }
                                else
                                {
                                    chkQpapertype.Checked = false;
                                }
                            }
                            //=================================

                            #endregion Added By Malang Raja on Apr 6 2017

                            #region Added By Malang Raja on Jul 03 2017

                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString().Trim()) == "Check NR NE Max Count") //added By malang raja
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString().Trim()) == "1")
                                {
                                    chkNRNEMaxSubject.Checked = true;
                                }
                                else
                                {
                                    chkNRNEMaxSubject.Checked = false;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString().Trim()) == "NR NE Subject Applied Count") //added By malang raja
                            {
                                if (string.IsNullOrEmpty(Convert.ToString(dsmas.Tables[0].Rows[m]["value"]).Trim()) || Convert.ToString(dsmas.Tables[0].Rows[m]["value"]).Trim() == "0")
                                {
                                    txtNRNEMaxSubject.Text = "0";
                                }
                                else
                                {
                                    txtNRNEMaxSubject.Text = Convert.ToString(dsmas.Tables[0].Rows[m]["value"]).Trim();
                                }
                            }

                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString().Trim()) == "Check Online Payment Max Count") //added By malang raja
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString().Trim()) == "1")
                                {
                                    chkOnlinePaymentMaxSubject.Checked = true;
                                }
                                else
                                {
                                    chkOnlinePaymentMaxSubject.Checked = false;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString().Trim()) == "Online Payment Maximum Subject Applied Count") //added By malang raja
                            {
                                if (string.IsNullOrEmpty(Convert.ToString(dsmas.Tables[0].Rows[m]["value"]).Trim()) || Convert.ToString(dsmas.Tables[0].Rows[m]["value"]).Trim() == "0")
                                {
                                    txtOnPayMaxSubject.Text = "0";
                                }
                                else
                                {
                                    txtOnPayMaxSubject.Text = Convert.ToString(dsmas.Tables[0].Rows[m]["value"]).Trim();
                                }
                            }
                            #endregion Added By Malang Raja on Apr 6 2017

                            #region Added By Malang Raja on Dec 3 2016

                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString().Trim()) == "ShowGradeInCamCalulationDetails") //added By malang raja
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString().Trim()) == "1")
                                {
                                    chkShowGradeInCamCalulationDetails.Checked = true;
                                }
                                else
                                {
                                    chkShowGradeInCamCalulationDetails.Checked = false;
                                }
                            }

                            #endregion Added By Malang Raja on Dec 3 2016

                            #region Added By Malang Raja on Jun 23 2017

                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString().Trim()) == "Require Present/Absent Only") //added By malang raja
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString().Trim()) == "1")
                                {
                                    chkPresentAbsent.Checked = true;
                                }
                                else
                                {
                                    chkPresentAbsent.Checked = false;
                                }
                            }

                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString().Trim()) == "Require Reason in the Staff Attendance") //added By malang raja
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString().Trim()) == "1")
                                {
                                    chkNeedReson.Checked = true;
                                }
                                else
                                {
                                    chkNeedReson.Checked = false;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString().Trim()) == "Require Students Attendance Count") //added By malang raja
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString().Trim()) == "1")
                                {
                                    chkAttendanceCount.Checked = true;
                                }
                                else
                                {
                                    chkAttendanceCount.Checked = false;
                                }
                            }

                            #endregion Added By Malang Raja on Jun 23 2017

                            #region Added By Malang Raja on Apr 24 2017

                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString().Trim()) == "Exam year and month Valuation") //added By malang raja
                            {
                                string strExamYearExamMonthForResult = Convert.ToString(dsmas.Tables[0].Rows[m]["value"]).Trim();
                                if (strExamYearExamMonthForResult != null && strExamYearExamMonthForResult.Trim() != "" && strExamYearExamMonthForResult.Trim() != "0")
                                {
                                    string[] resultMonthYear = strExamYearExamMonthForResult.Split(',');
                                    if (resultMonthYear.GetUpperBound(0) == 1)
                                    {
                                        ddlemyear.Text = Convert.ToString(resultMonthYear[0]).Trim();
                                        ddlemmonth.Text = Convert.ToString(resultMonthYear[1]).Trim();
                                    }
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString().Trim()) == "Exam year and month Result Publish") //added By malang raja
                            {
                                string strExamYearExamMonthForResult = Convert.ToString(dsmas.Tables[0].Rows[m]["value"]).Trim();
                                if (strExamYearExamMonthForResult != null && strExamYearExamMonthForResult.Trim() != "" && strExamYearExamMonthForResult.Trim() != "0")
                                {
                                    string[] resultMonthYear = strExamYearExamMonthForResult.Split(',');
                                    if (resultMonthYear.GetUpperBound(0) == 1)
                                    {
                                        ddlExamYearResult.Text = Convert.ToString(resultMonthYear[0]).Trim();
                                        ddlExamMonthResult.Text = Convert.ToString(resultMonthYear[1]).Trim();
                                    }
                                }
                            }
                            #endregion Added By Malang Raja on Apr 24 2017

                            #region Added By Prabha on Dec 12 2017

                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString().Trim()) == "AlertMessageForAttendance")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chk_AlertMsgForAttendance.Checked = true;
                                }
                                else
                                {
                                    chk_AlertMsgForAttendance.Checked = false;
                                }
                            }

                            #endregion

                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "RetestMarkEntryBasedOnOptionalMinMarks") //added By malang raja
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    cbRetestSettings.Checked = true;
                                }
                                else
                                {
                                    cbRetestSettings.Checked = false;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "cia_security") // added by jairam 03-04-2015
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chk_secuirty.Checked = true;
                                }
                                else
                                {
                                    chk_secuirty.Checked = false;
                                }
                            }
                            //-------------Added By M.SakthiPriya 05/02/2015
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Copy Attendance")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chckcopy.Checked = true;
                                }
                                else
                                {
                                    chckcopy.Checked = false;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Individual Student Attendace Lock")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    cbIndualAttendance.Checked = true;
                                }
                                else
                                {
                                    cbIndualAttendance.Checked = false;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Print Edit Option")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    cbprintedit.Checked = true;
                                }
                                else
                                {
                                    cbprintedit.Checked = false;
                                }
                            }
                            //-------------End------------------
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Roll No")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    Chkrollno.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Register No")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chkregno.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Admission No")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chkadmno.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Student_Type")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chkstud.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Application No")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chkApplicationNo.Checked = true;
                                }
                            }
                            //magesh 23.6.18
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Hostel Id")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    Chkhostelid.Checked = true;
                                }
                            }//magesh 23.6.18
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Admin Attendane Hour Rights")
                            {
                                //if ((dsmas.Tables[0].Rows[m]["value"].ToString()))
                                //{
                                txt_attn_hour.Text = Convert.ToString(dsmas.Tables[0].Rows[m]["value"]).Trim();
                                //}
                                string[] strAttnHour = txt_attn_hour.Text.Split(',');
                                foreach (ListItem li in cbl_attn_hour.Items)
                                {
                                    li.Selected = false;
                                    if (txt_attn_hour.Text.Trim().Contains(li.Text))
                                    {
                                        li.Selected = true;
                                    }
                                }

                            }
                            //Added by sridharan 11 / mar / 2015
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "schoolorcollege")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    rb_clg.Checked = true;
                                }
                                else
                                {
                                    rb_sch.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Hour Wise")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    hourwise.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Day Wise")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    daywise.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Days Scholor")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chkdayssch.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Regular")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chkregular.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Lateral")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chklateral.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Transfer")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chktrans.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Male")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chkmale.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Female")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    Chkfemale.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Hostel")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    Chkhostel.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Report Display")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "0")
                                {
                                    rptgen.Checked = true;
                                }
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    rptind.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "General")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    rbgeneralstaff.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Admission No")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    rbadmno.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "RollNo")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    rbrollno.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "RegisterNo")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    rbregno.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Absentees")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    rbabsentees.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "As Per Lesson")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    rblesson.Checked = true;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "General")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    rbgeneralstaff.Checked = true;
                                }
                            }
                            //else if ((dr["settings"].ToString()) == "From Date")
                            //{
                            //    //txtFromDate.Text = dr["value"].ToString();
                            //}
                            //else if ((dr["settings"].ToString()) == "To Date")
                            //{
                            //    //txtToDate.Text = dr["value"].ToString();
                            //}
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Starting Date")
                            {
                                string[] splitdate = dsmas.Tables[0].Rows[m]["value"].ToString().Split('-');
                                if (splitdate.GetUpperBound(0) >= 1)
                                {
                                    starttext.Text = splitdate[0];
                                    endtext.Text = splitdate[1];
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "print_master_setting")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chkbx_printmaster.Checked = false;// true;
                                }
                                else
                                {
                                    chkbx_printmaster.Checked = false;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Cam Date Lock")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chkcaldateentry.Checked = true;// true;
                                }
                                else
                                {
                                    chkcaldateentry.Checked = false;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "SmsAttendanceTepmlate")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    string template = dsmas.Tables[0].Rows[m]["template"].ToString();
                                    if (FpSpreadsms.Sheets[0].RowCount > 0)
                                    {
                                        for (int jr = 0; jr < FpSpreadsms.Sheets[0].RowCount; jr++)
                                        {
                                            if (template.Trim() != "")
                                            {
                                                string sp_temp_Value = FpSpreadsms.Sheets[0].Cells[jr, 3].Text.ToString();
                                                if (sp_temp_Value.Trim() == template.Trim())
                                                {
                                                    FpSpreadsms.Sheets[0].Cells[jr, 1].Value = 1;
                                                }
                                                else
                                                {
                                                    if (Convert.ToInt32(FpSpreadsms.Sheets[0].Cells[jr, 1].Value) == 1)
                                                    {
                                                        FpSpreadsms.Sheets[0].Cells[jr, 1].Value = 1;
                                                    }
                                                    else
                                                    {
                                                        FpSpreadsms.Sheets[0].Cells[jr, 1].Value = 0;
                                                    }
                                                }
                                            }
                                            else
                                            {
                                                FpSpreadsms.Sheets[0].Cells[jr, 1].Value = 0;
                                            }
                                        }
                                    }
                                }
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "2")
                                {
                                    string template = dsmas.Tables[0].Rows[m]["template"].ToString();
                                    if (FpSpreadsms.Sheets[0].RowCount > 0)
                                    {
                                        for (int jr = 0; jr < FpSpreadsms.Sheets[0].RowCount; jr++)
                                        {
                                            string sp_temp_Value = FpSpreadsms.Sheets[0].Cells[jr, 3].Text.ToString();
                                            if (sp_temp_Value.Trim() == template.Trim())
                                            {
                                                FpSpreadsms.Sheets[0].Cells[jr, 1].Value = 1;
                                            }
                                            else
                                            {
                                                if (Convert.ToInt32(FpSpreadsms.Sheets[0].Cells[jr, 1].Value) == 1)
                                                {
                                                    FpSpreadsms.Sheets[0].Cells[jr, 1].Value = 1;
                                                }
                                                else
                                                {
                                                    FpSpreadsms.Sheets[0].Cells[jr, 1].Value = 0;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            //added by sudhagar 14-06-2016 fine setting
                            #region Fine Setting
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Hostel Item Rights")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    Cb_hostelitem.Checked = true;
                                }
                                else
                                {
                                    Cb_hostelitem.Checked = false;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Inventory Item Rights")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    Cb_otheritems.Checked = true;
                                }
                                else
                                {
                                    Cb_otheritems.Checked = false;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Additional Item Rights")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    Cb_Allowadditional.Checked = true;
                                }
                                else
                                {
                                    Cb_Allowadditional.Checked = false;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Return Item Rights")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    cballowretunitem.Checked = true;
                                }
                                else
                                {
                                    cballowretunitem.Checked = false;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Letter Tap Rights")
                            {
                                string letter = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                string[] let;
                                if (letter != "")
                                {
                                    let = letter.Split(',');
                                    for (int z = 0; z < cbletter.Items.Count; z++)
                                    {
                                        for (int y = 0; y < let.Length; y++)
                                        {
                                            if (let[y] == cbletter.Items[z].Value)
                                            {
                                                cbletter.Items[z].Selected = true;
                                            }
                                        }
                                    }
                                }
                            }
                            ///zzz 1.2.2016
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Letter HeaderLedger Rights")
                            {
                                string letter = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                string[] let;
                                if (letter != "")
                                {
                                    string[] split = letter.Split(',');
                                    string hd = split[0];
                                    string led = split[1];
                                    //  string headerpk=d2.GetFunction("SELECT HeaderPK,HeaderName FROM FM_HeaderMaster H,FM_LedgerMaster L WHERE H.HeaderPK = L.HeaderFK AND L.LedgerPK = '"+letter+"' AND LedgerMode = 1");
                                    if (ddl_tapal_header.Items.Count > 0)
                                    {
                                        //ddl_tapal_header.SelectedItem.Value = hd;
                                        ddl_tapal_header.SelectedIndex = ddl_tapal_header.Items.IndexOf(ddl_tapal_header.Items.FindByValue(hd));
                                    }
                                    if (ddl_tapal_ledger.Items.Count > 0)
                                    {
                                        //ddl_tapal_ledger.SelectedItem.Value = led;
                                        ddl_tapal_ledger.SelectedIndex = ddl_tapal_ledger.Items.IndexOf(ddl_tapal_ledger.Items.FindByValue(led));
                                    }
                                }
                            }
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Gate Pass Tab Rights")
                            {
                                string gate = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                string[] gatepass;
                                if (gate != "")
                                {
                                    gatepass = gate.Split(',');
                                    for (int z = 0; z < cbl_gatepass.Items.Count; z++)
                                    {
                                        for (int y = 0; y < gatepass.Length; y++)
                                        {
                                            if (gatepass[y] == cbl_gatepass.Items[z].Value)
                                            {
                                                cbl_gatepass.Items[z].Selected = true;
                                            }
                                        }
                                    }
                                }
                            }
                            // zzz 11jan2016
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Hostler DayScholar Rights")
                            {
                                string val = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (val == "1,2")
                                {
                                    cb_gatepass_DayScholar.Checked = true;
                                    cb_gatepass_hostler.Checked = true;
                                }
                                else if (val == "1")
                                {
                                    cb_gatepass_hostler.Checked = true;
                                }
                                else if (val == "2")
                                {
                                    cb_gatepass_DayScholar.Checked = true;
                                }
                            }
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "SMS Rights")
                            {
                                string SMS = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (SMS != "")
                                {
                                    //zzz 28.4.16
                                    string[] split = SMS.Split('-');
                                    string rqval = Convert.ToString(split[1]);
                                    string requestname = string.Empty;
                                    if (rqval == "1")
                                        requestname = "Item Request";
                                    else if (rqval == "2")
                                        requestname = "Service";
                                    else if (rqval == "3")
                                        requestname = "Visitor Appointment";
                                    else if (rqval == "4")
                                        requestname = "Complaints";
                                    else if (rqval == "5")
                                        requestname = "Leave Request";
                                    else if (rqval == "6")
                                        requestname = "GatePass Request";
                                    else if (rqval == "7")
                                        requestname = "Event Request";
                                    else if (rqval == "8")
                                        requestname = "Payment Request";
                                    else if (rqval == "9")
                                        requestname = "Purchase Request";

                                    // ddl_requesttype.SelectedItem.Text = requestname;
                                    ddl_requesttype.SelectedIndex = ddl_requesttype.Items.IndexOf(ddl_requesttype.Items.FindByText(requestname));
                                    cb_request.Checked = false;
                                    cb_approval.Checked = false;
                                    cb_exit.Checked = false;
                                    cb_reject.Checked = false;
                                    string smsval = split[0];
                                    string[] split1 = smsval.Split(',');
                                    for (int u = 0; u < split1.Length; u++)
                                    {
                                        if (split1[u] == "1")
                                            cb_request.Checked = true;
                                        if (split1[u] == "2")
                                            cb_approval.Checked = true;
                                        if (split1[u] == "3")
                                            cb_exit.Checked = true;
                                        if (split1[u] == "4")
                                            cb_reject.Checked = true;
                                    }
                                }
                            }
                            //zzz 9/1/2016
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "SMS Mobile Rights")
                            {
                                string SMS = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (SMS != "")
                                {
                                    string mob = string.Empty;
                                    string stud = string.Empty;
                                    string[] split = SMS.Split(',');
                                    if (split.Length == 1)
                                    {
                                        mob = split[0];
                                        if (mob == "1")
                                        {
                                            cb_mother.Checked = true;
                                        }
                                        else if (mob == "2")
                                        {
                                            cb_father.Checked = true;
                                        }
                                        else if (mob == "3")
                                        {
                                            cb_student.Checked = true;
                                        }
                                    }
                                    else if (split.Length == 2)
                                    {
                                        mob = split[0];
                                        stud = split[1];
                                        if (mob == "1")
                                        {
                                            cb_mother.Checked = true;
                                        }
                                        else if (mob == "2")
                                        {
                                            cb_father.Checked = true;
                                        }
                                        else if (mob == "3")
                                        {
                                            cb_student.Checked = true;
                                        }
                                        if (stud == "1")
                                        {
                                            cb_mother.Checked = true;
                                        }
                                        else if (stud == "2")
                                        {
                                            cb_father.Checked = true;
                                        }
                                        else if (stud == "3")
                                        {
                                            cb_student.Checked = true;
                                        }
                                    }
                                    else
                                    {
                                        cb_mother.Checked = true;
                                        cb_father.Checked = true;
                                        cb_student.Checked = true;
                                    }
                                }
                            }
                            //request tab rights
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Request Tap Rights")
                            {
                                string request = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                string[] let;
                                if (request != "")
                                {
                                    let = request.Split(',');
                                    for (int z = 0; z < cbl_request.Items.Count; z++)
                                    {
                                        for (int y = 0; y < let.Length; y++)
                                        {
                                            if (let[y] == cbl_request.Items[z].Value)
                                            {
                                                cbl_request.Items[z].Selected = true;
                                            }
                                        }
                                    }
                                }
                            }
                            //gate pass request
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Request Gatepass Rights")
                            {
                                string val = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (val == "1")
                                {
                                    rdb_gatepass_staff.Checked = true;
                                }
                                else
                                {
                                    rdb_gatepass_dept.Checked = true;
                                }
                            }
                            //staff count zzz mar5-2016
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Gatepass Staff Permission")
                            {
                                string staffcount = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                txt_staff_per_count.Text = staffcount;
                            }
                            //barath 16.03.17 gatepass without request 
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Gatepass Request Type")
                            {
                                string val = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (val == "1")
                                {
                                    rdb_withoutreq.Checked = true;
                                    rdb_withreq.Checked = false;
                                }
                                else
                                {
                                    rdb_withoutreq.Checked = false;
                                    rdb_withreq.Checked = true;
                                }
                            }

                            //leave approval permisssion
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Leave Approval Permission")
                            {
                                string val = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (val == "1")
                                {
                                    rdo_leaveindiv.Checked = true;
                                }
                                else if (val == "2")
                                {
                                    rdo_leavedirect.Checked = true;
                                }
                                else if (val == "3")
                                {
                                    rdo_leavewithout.Checked = true;
                                }
                                else
                                {
                                    rdo_leaveindiv.Checked = false;
                                    rdo_leavedirect.Checked = false;
                                    rdo_leavewithout.Checked = false;
                                }
                            }
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Leave Delete Permission")
                            {
                                string val = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (val == "1")
                                {
                                    rdb_delwoHierarchy.Checked = true;
                                }
                                else if (val == "2")
                                {
                                    rdb_delwHierarchy.Checked = true;

                                }
                                else
                                {
                                    rdb_delwoHierarchy.Checked = false;
                                    rdb_delwHierarchy.Checked = false;
                                
                                }
                            }
                            //request hierarchy
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Request Hierarchy Rights")
                            {
                                string Hierarchy = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                string[] let;
                                if (Hierarchy != "")
                                {
                                    let = Hierarchy.Split(',');
                                    for (int z = 0; z < cb_reqHierarchy.Items.Count; z++)
                                    {
                                        for (int y = 0; y < let.Length; y++)
                                        {
                                            if (let[y] == cb_reqHierarchy.Items[z].Value)
                                            {
                                                cb_reqHierarchy.Items[z].Selected = true;
                                            }
                                        }
                                    }
                                }
                            }
                            //service plan
                            //barath 14.04.16
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Service Item Rights")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    rdb_serviceplan.Checked = true;
                                    rdb_serviceallitem.Checked = false;
                                }
                                else
                                {
                                    rdb_serviceallitem.Checked = true;
                                    rdb_serviceplan.Checked = false;
                                }
                            }
                            //daily consumption
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Daily Consumption Allow Reconsumption")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    cb_reconsumption.Checked = true;
                                }
                                else
                                {
                                    cb_reconsumption.Checked = false;
                                }
                            }
                            //30.06.17 mess bill include finance
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Mess Bill Include in Finance")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    cb_messaffectedfinance.Checked = true;
                                }
                                else
                                {
                                    cb_messaffectedfinance.Checked = false;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Hostel Admission sms")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    cb_hostelsms.Checked = true;
                                }
                                else
                                {
                                    cb_hostelsms.Checked = false;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Hostel Vacated sms")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    cb_hostelvacatedsms.Checked = true;
                                }
                                else
                                {
                                    cb_hostelvacatedsms.Checked = false;
                                }
                            }
                            //mess rights
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Mess Rights")
                            {
                                string messmasterfk = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                string[] let;
                                if (messmasterfk != "")
                                {
                                    int hostelcount = 0;
                                    let = messmasterfk.Split(',');
                                    for (int c = 0; c < cbl_hos.Items.Count; c++)
                                    {
                                        for (int a = 0; a < let.Length; a++)
                                        {
                                            if (let[a] == cbl_hos.Items[c].Value)
                                            {
                                                cbl_hos.Items[c].Selected = true;
                                                hostelcount++;
                                            }
                                        }
                                    }
                                    txt_messname.Text = "Mess Name(" + hostelcount + ")";
                                }
                            }
                            //store rights
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Store Rights")
                            {
                                string messmasterfk = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                string[] let;
                                if (messmasterfk != "")
                                {
                                    int hostelcount = 0;
                                    let = messmasterfk.Split(',');
                                    for (int c = 0; c < cbl_store.Items.Count; c++)
                                    {
                                        for (int a = 0; a < let.Length; a++)
                                        {
                                            if (let[a] == cbl_store.Items[c].Value)
                                            {
                                                cbl_store.Items[c].Selected = true;
                                                hostelcount++;
                                            }
                                        }
                                    }
                                    txt_Store.Text = "Store Name(" + hostelcount + ")";
                                }
                            }
                            //15.03.17 barath 
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Excel and Pdf Print Settings")
                            {
                                string printset = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                string[] let;
                                if (printset != "")
                                {
                                    let = printset.Split(',');
                                    for (int c = 0; c < cbl_excelpdf.Items.Count; c++)
                                    {
                                        for (int a = 0; a < let.Length; a++)
                                        {
                                            if (let[a] == cbl_excelpdf.Items[c].Value)
                                            {
                                                cbl_excelpdf.Items[c].Selected = true;
                                            }
                                        }
                                    }
                                }
                            }
                            //alternate subject rights added by sudhagar 29.12.2016
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "AlternateSubjectRights")
                            {
                                string messmasterfk = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                string[] let;
                                if (messmasterfk != "")
                                {
                                    int hostelcount = 0;
                                    let = messmasterfk.Split(',');
                                    for (int c = 0; c < cblaltsub.Items.Count; c++)
                                    {
                                        for (int a = 0; a < let.Length; a++)
                                        {
                                            if (let[a] == cblaltsub.Items[c].Value)
                                            {
                                                cblaltsub.Items[c].Selected = true;
                                                hostelcount++;
                                            }
                                        }
                                    }
                                    txtaltsub.Text = "Subject(" + hostelcount + ")";
                                }
                            }
                            //hrs code settings
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "CodeSetting Rights")
                            {
                                string val = dsmas.Tables[0].Rows[m]["value"].ToString();
                                if (val.Trim() != "")
                                {
                                    string[] value = val.Split(',');
                                    for (int s = 0; s < cb_hrscodesetting.Items.Count; s++)
                                    {
                                        for (int k = 0; k < value.Length; k++)
                                        {
                                            if (value[k] == cb_hrscodesetting.Items[s].Value)
                                            {
                                                cb_hrscodesetting.Items[s].Selected = true;
                                            }
                                        }
                                    }
                                }
                            }
                            //smtabrights Siva 10-05-2016
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "SM Tab Rights")
                            {
                                string val = dsmas.Tables[0].Rows[m]["value"].ToString();
                                if (val.Trim() != "")
                                {
                                    string[] value = val.Split(',');
                                    for (int s = 0; s < smtabrights.Items.Count; s++)
                                    {
                                        for (int k = 0; k < value.Length; k++)
                                        {
                                            if (value[k] == smtabrights.Items[s].Value)
                                            {
                                                smtabrights.Items[s].Selected = true;
                                            }
                                        }
                                    }
                                }
                            }
                            //tc settings 22.06.17
                            //else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "TC Format Rights")
                            //{
                            //    string val = dsmas.Tables[0].Rows[m]["value"].ToString();
                            //    if (val.Trim() != "")
                            //    {
                            //        string[] value = val.Split(','); Cbl_tcformate.ClearSelection();
                            //        for (int s = 0; s < Cbl_tcformate.Items.Count; s++)
                            //        {
                            //            for (int k = 0; k < value.Length; k++)
                            //            {
                            //                if (value[k] == Cbl_tcformate.Items[s].Value)
                            //                {
                            //                    Cbl_tcformate.Items[s].Selected = true;
                            //                }
                            //            }
                            //        }
                            //    }
                            //}
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Consumption Rpu")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    rdo_sailing.Checked = true;
                                    rdo_rpu.Checked = false;
                                }
                                else
                                {
                                    rdo_rpu.Checked = true;
                                    rdo_sailing.Checked = false;
                                }
                            }
                            #endregion
                            //finance 
                            #region finance
                            ////////////////////////////sudhagar reciept/challan no rights
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Reciept/Challan No Rights")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chkreciept.Checked = true;
                                }
                            }
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Reciept/Challan No Rights")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "2")
                                {
                                    chkchallan.Checked = true;
                                }
                            }
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Reciept/Challan No Rights")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "3")
                                {
                                    chkreciept.Checked = true;
                                    chkchallan.Checked = true;
                                }
                            }
                            //payment rights
                            //sudhagar 16-02-2016 payment rights
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Payment Rights")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chkpety.Checked = true;
                                }
                            }
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Payment Rights")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "2")
                                {
                                    chkbank.Checked = true;
                                }
                            }
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Payment Rights")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "3")
                                {
                                    chkpety.Checked = true;
                                    chkbank.Checked = true;
                                }
                            }
                            //-----------Added by Jeyaprakash on Feb 18th-----------//
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Stream/Shift Rights")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    rb_shift.Checked = true;
                                    rb_stream.Checked = false;
                                }
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "2")
                                {
                                    rb_shift.Checked = false;
                                    rb_stream.Checked = true;
                                }
                            }
                            /////sudhagar 24-3-2016 Refund Setting rights
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Consession And Refund Rights")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    rbwithdept.Checked = true;
                                }
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "2")
                                {
                                    rbwithoutdept.Checked = true;
                                }
                            }
                            //student fees rights
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Fees Rights")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    rb_detl.Checked = true;
                                    rb_withledger.Checked = false;
                                    rb_withoutledger.Checked = false;
                                }
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "2")
                                {
                                    rb_detl.Checked = false;
                                    rb_withledger.Checked = true;
                                    rb_withoutledger.Checked = false;
                                }
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "3")
                                {
                                    rb_detl.Checked = false;
                                    rb_withledger.Checked = false;
                                    rb_withoutledger.Checked = true;
                                }
                            }
                            //added by sudhagar 01-06-2016 Send sms rights
                            string setval = d2.GetFunction("select value from master_settings where settings='Send Sms Right' and " + usergroup + "");
                            if (setval == "1")
                            {
                                cbsmsrights.Checked = true;
                                if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Send Sms Rights")
                                {
                                    string value = Convert.ToString(dsmas.Tables[0].Rows[m]["value"]);
                                    if (value != "")
                                    {
                                        string[] valsplit = value.Split(',');
                                        for (int r = 0; r < valsplit.Length; r++)
                                        {
                                            if (valsplit[r] == "1")
                                            {
                                                cblsmsrights.Items[0].Selected = true;
                                            }
                                            if (valsplit[r] == "2")
                                            {
                                                cblsmsrights.Items[1].Selected = true;
                                            }
                                            if (valsplit[r] == "3")
                                            {
                                                cblsmsrights.Items[2].Selected = true;
                                            }
                                        }
                                    }
                                }
                            }
                            else
                            {
                                cbsmsrights.Checked = false;
                                for (int sel = 0; sel < cblsmsrights.Items.Count; sel++)
                                {
                                    cblsmsrights.Items[sel].Selected = false;
                                }
                            }
                            //application no rights
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Application No Rights")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chkappno.Checked = true;
                                }
                                else
                                {
                                    chkappno.Checked = false;
                                }
                            }
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Admission No Rights")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chkadmino.Checked = true;
                                }
                                else
                                {
                                    chkadmino.Checked = false;
                                }
                            }
                            else if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Add Academic year")
                            {
                                if ((dsmas.Tables[0].Rows[m]["value"].ToString()) == "1")
                                {
                                    chkappacr.Checked = true;
                                }
                                else
                                {
                                    chkappacr.Checked = false;
                                }
                            }
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Application Formate Setting")
                            {
                                string formate = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (formate == "0")
                                {
                                    rdb_formate1.Checked = true;
                                }
                                else
                                {
                                    rdb_formate2.Checked = true;
                                }
                            }
                            //barath 22.05.17
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Application view format")
                            {
                                string formate = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (formate == "0")
                                {
                                    rdb_viewformat1.Checked = true;
                                }
                                else
                                {
                                    rdb_viewformat2.Checked = true;
                                }
                            }
                            //zzz 15.6.16
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Academic Details Setting")
                            {
                                string formate = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (formate == "1")
                                {
                                    cb_acadamicdetails.Checked = true;
                                }
                                else
                                {
                                    cb_acadamicdetails.Checked = false;
                                }
                            }
                            //zzz 17.6.16
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Equivalent To HSC")
                            {
                                string formate = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (formate == "1")
                                {
                                    cb_Equalnthsc.Checked = true;
                                }
                                else
                                {
                                    cb_Equalnthsc.Checked = false;
                                }
                            }
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "CutOfMark")
                            {
                                string formate = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (formate == "1")
                                {
                                    cb_cutofmark.Checked = true;
                                }
                                else
                                {
                                    cb_cutofmark.Checked = false;
                                }
                            }
                            // zzz 02 july 2016
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "GeneralFeeAllot")
                            {
                                string formate = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (formate == "1")
                                {
                                    cb_generalfee.Checked = true;
                                }
                                else
                                {
                                    cb_generalfee.Checked = false;
                                }
                            }
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "TransportFeeAllot")
                            {
                                string formate = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (formate == "1")
                                {
                                    cb_transport.Checked = true;
                                }
                                else
                                {
                                    cb_transport.Checked = false;
                                }
                            }
                            // zzz 30 july 2016
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "StudentAdmissionRegister")
                            {
                                string formate = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (formate == "0")
                                {
                                    rdb_staticreg.Checked = true;
                                }
                                else if (formate == "1")
                                {
                                    rdb_dynamicreg.Checked = true;
                                }
                                else
                                {
                                    rdb_staticreg.Checked = false;
                                    rdb_dynamicreg.Checked = false;
                                }
                            }
                            #region old
                            //if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "TransportFeeAllotmentSettings")
                            //{
                            //    string formate = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                            //    string[] getv = formate.Split('-');
                            //    if (getv[0] == "3")
                            //    {
                            //        if (getv[1].Contains("-") == true)
                            //        {
                            //            string[] year = getv[1].Split('-');
                            //            if (year[0] == "3")
                            //            {
                            //                cb_transport.Checked = true;
                            //                rdo_transmoth.Checked = true;
                            //            }
                            //            if (year.Length > 1)
                            //            {
                            //                if (year[1].Contains(";") == true)
                            //                {
                            //                    string[] year1 = year[1].Split(';');
                            //                    if (year1.Length > 1)
                            //                    {
                            //                        ddl_transyear.SelectedIndex = ddl_transyear.Items.IndexOf(ddl_transyear.Items.FindByValue(Convert.ToString(year[1])));
                            //                        ddl_transyear.Enabled = true;
                            //                    }
                            //                    if (year1[0].Contains(",") == true)
                            //                    {
                            //                        string[] year2 = year1[0].Split(',');
                            //                        if (year2.Length > 0)
                            //                        {
                            //                            ArrayList addnewarray = new ArrayList();
                            //                            for (int row = 0; row < year2.Length; row++)
                            //                            {
                            //                                addnewarray.Add(year2[row]);
                            //                            }
                            //                            if (addnewarray.Count > 0)
                            //                            {
                            //                                for (int cbl = 0; cbl < cbl_monthtrans.Items.Count; cbl++)
                            //                                {
                            //                                    if (addnewarray.Contains(cbl_monthtrans.Items[cbl].Value) == true)
                            //                                    {
                            //                                        cbl_monthtrans.Items[cbl].Selected = true;
                            //                                    }
                            //                                    else
                            //                                    {
                            //                                        cbl_monthtrans.Items[cbl].Selected = false;
                            //                                    }
                            //                                }
                            //                                txt_monthtrans.Enabled = true;
                            //                            }
                            //                        }
                            //                    }
                            //                }
                            //            }
                            //            //ddl_transyear.SelectedIndex = ddl_transyear.Items.IndexOf(ddl_transyear.Items.FindByValue(Convert.ToString(year[1])));                                      
                            //        }
                            //        else if (getv[1] == "2")
                            //        {
                            //            cb_transport.Checked = true;
                            //            rdo_transyear.Checked = true;
                            //        }
                            //        else if (getv[1] == "1")
                            //        {
                            //            cb_transport.Checked = true;
                            //            rdo_transsem.Checked = true;
                            //        }
                            //    }
                            //    else
                            //    {
                            //        cb_transport.Checked = false;
                            //    }
                            //}
                            #endregion
                            //added by sudhagar 22-07   TransportFeeIncludeAllotmentSettings
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "TransportFeeIncludeAllotmentSettings")
                            {
                                string formate = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (formate == "1")
                                {
                                    cbtransfees.Checked = true;
                                }
                                else
                                {
                                    cbtransfees.Checked = false;
                                }
                            }
                            //added by sudhagar Finance department Acronym setting
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Finance Include Department Acronym")
                            {
                                string formate = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (formate == "1")
                                {
                                    cbdeptacr.Checked = true;
                                }
                                else
                                {
                                    cbdeptacr.Checked = false;
                                }
                            }
                            //added by sudhagar Finance user based report rights
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Finance Include User Based Report Settings")
                            {
                                string formate = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (formate == "1")
                                {
                                    cbuserrpt.Checked = true;
                                }
                                else
                                {
                                    cbuserrpt.Checked = false;
                                }
                            }
                            //transport fee allotment setting added by sudhagar
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "TransportFeeAllotmentSettings")
                            {
                                string value = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                string[] splitval = value.Split('-');
                                if (splitval[0] == "1")
                                    rdo_transsem.Checked = true;
                                else if (splitval[0] == "2")
                                    rdo_transyear.Checked = true;
                                else if (splitval[0] == "4")
                                    rb_transterm.Checked = true;
                                else
                                {
                                    rdo_transmoth.Checked = true;
                                    if (splitval[1].Contains(";") == true)
                                    {
                                        string[] year1 = splitval[1].Split(';');
                                        if (year1.Length > 1)
                                        {
                                            ddl_transyear.SelectedIndex = ddl_transyear.Items.IndexOf(ddl_transyear.Items.FindByValue(Convert.ToString(year1[1])));
                                            ddl_transyear.Enabled = true;
                                        }
                                        if (year1[0].Contains(",") == true)
                                        {
                                            string[] year2 = year1[0].Split(',');
                                            if (year2.Length > 0)
                                            {
                                                ArrayList addnewarray = new ArrayList();
                                                for (int row = 0; row < year2.Length; row++)
                                                {
                                                    addnewarray.Add(year2[row]);
                                                }
                                                if (addnewarray.Count > 0)
                                                {
                                                    for (int cbl = 0; cbl < cbl_monthtrans.Items.Count; cbl++)
                                                    {
                                                        if (addnewarray.Contains(cbl_monthtrans.Items[cbl].Value) == true)
                                                            cbl_monthtrans.Items[cbl].Selected = true;
                                                        else
                                                            cbl_monthtrans.Items[cbl].Selected = false;
                                                    }
                                                    txt_monthtrans.Enabled = true;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "HostelFeeAllot")
                            {
                                string formate = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (formate == "1")
                                {
                                    cb_hostelfee.Checked = true;
                                }
                                else
                                {
                                    cb_hostelfee.Checked = false;
                                }
                            }
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "AllStudentAttendance")
                            {
                                string formate = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (formate == "1")
                                {
                                    cb_studentattendance.Checked = true;
                                }
                                else
                                {
                                    cb_studentattendance.Checked = false;
                                }
                            }
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "OrderBy Marks Setting")
                            {
                                string orderby = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (orderby == "0")
                                {
                                    orderbymarks.Checked = true;
                                }
                                else
                                {
                                    orderbymarks.Checked = false;
                                }
                            }
                            // zzz may 25 2016
                            if ((dsmas.Tables[0].Rows[m]["settings"].ToString()) == "Application Pdf Format Setting")
                            {
                                string formate = Convert.ToString(dsmas.Tables[0].Rows[m]["value"].ToString());
                                if (formate == "0")
                                {
                                    rdb_pdfFormat1.Checked = true;
                                }
                                else
                                {
                                    rdb_pdfFormat1.Checked = false;
                                }
                            }
                            #endregion
                        }
                    }
                    DataSet certFromat = d2.select_method_wo_parameter("select distinct Certificate_ID,CertificateName,CertifcateFormat from CertificateNameDetail where Collegecode='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "'", "text");
                    if (certFromat.Tables[0].Rows.Count > 0)
                    {
                        certificateformat_grid.DataSource = certFromat.Tables[0];
                        certificateformat_grid.DataBind();
                        DataTable dt = new DataTable();
                        DataRow dr;
                        dt.Columns.Add("Text");
                        dt.Columns.Add("value");
                        for (int k = 0; k < certificateformat_grid.Rows.Count; k++)
                        {
                            dt.Clear();
                            for (int j = 0; j < 9; j++)//certFromat.Tables[0].Rows.Count
                            {
                                dr = dt.NewRow();
                                dr[0] = "Format " + Convert.ToString(j + 1);//BindTc_grid 
                                dr[1] = Convert.ToString(j);
                                dt.Rows.Add(dr);
                            }
                            DropDownList ddlFormat = (certificateformat_grid.Rows[k].FindControl("ddlFormattype") as DropDownList);
                            ddlFormat.Items.Clear();
                            ddlFormat.DataSource = dt;
                            ddlFormat.DataTextField = "Text";
                            ddlFormat.DataValueField = "value";
                            ddlFormat.DataBind();
                        }
                        for (int k = 0; k < certificateformat_grid.Rows.Count; k++)
                        {
                            DropDownList ddlFormat = (certificateformat_grid.Rows[k].FindControl("ddlFormattype") as DropDownList);
                            string formate = Convert.ToString(certFromat.Tables[0].Rows[k]["Certificate_ID"]);
                            string selectedfromat = "select * from Master_Settings where settings='CertificateFormatSetting' and value like '" + formate + "$%'";
                            if (!string.IsNullOrEmpty(selectedfromat))
                                ddlFormat.SelectedIndex = ddlFormat.Items.IndexOf(ddlFormat.Items.FindByValue(selectedfromat));
                        }
                    }

                    string fineamount = dasri.GetFunction("select value from master_settings where settings='I Half Absent Fine'");
                    if (fineamount.Trim() != "")
                    {
                        txtflabfine.Text = fineamount;
                    }
                    fineamount = dasri.GetFunction("select value from master_settings where settings='II Half Absent Fine'");
                    if (fineamount.Trim() != "")
                    {
                        txtslabfine.Text = fineamount;
                    }
                    chkfinelesslave.Checked = false;
                    fineamount = dasri.GetFunction("select value from master_settings where settings='Fine Amount Not For Leave'");
                    if (fineamount.Trim() == "1")
                    {
                        chkfinelesslave.Checked = true;
                    }
                    string strsetval = dasri.GetFunction("select value from COE_Master_Settings where settings='Attendance Link mark'");
                    if (strsetval.Trim() == "1")
                    {
                        chkattmark.Checked = true;
                    }
                    else
                    {
                        chkattmark.Checked = false;
                    }
                    strsetval = dasri.GetFunction("select value from COE_Master_Settings where settings='Mark Round of'");
                    txtmarkentryround.Text = strsetval;
                    strsetval = dasri.GetFunction("select value from Master_Settings where settings='Report Throw Cam Calculation'");
                    if (strsetval.Trim() == "1")
                    {
                        CheckBoxschool.Checked = true;
                    }
                    else
                    {
                        CheckBoxschool.Checked = false;
                    }
                    strsetval = dasri.GetFunction("select value from COE_Master_Settings where settings='Result In Current Only'");
                    if (strsetval.Trim() == "1")
                    {
                        chkresultcurr.Checked = true;
                    }
                    else
                    {
                        chkresultcurr.Checked = false;
                    }
                    strsetval = dasri.GetFunction("select value from COE_Master_Settings where settings='Moderation Automatic'");
                    if (strsetval.Trim() == "1")
                    {
                        chkmoderationupdate.Checked = true;
                    }
                    else
                    {
                        chkmoderationupdate.Checked = false;
                    }
                    string coebundquery = "select * from COE_Master_Settings where settings ='Bundle Number Generation'"; // added by jairam 03-04-2015
                    coebundquery = coebundquery + " select * from COE_Master_Settings where settings ='Bundle Per Student'";
                    ds1.Clear();
                    ds1 = dasri.select_method_wo_parameter(coebundquery, "Text");
                    if (ds1.Tables[0].Rows.Count > 0)
                    {
                        if (Convert.ToString(ds1.Tables[0].Rows[0]["value"]).Trim() != "")
                        {
                            txt_bundnumber.Text = Convert.ToString(ds1.Tables[0].Rows[0]["value"]);
                        }
                        else
                        {
                            txt_bundnumber.Text = string.Empty;
                        }
                    }
                    else
                    {
                        txt_bundnumber.Text = string.Empty;
                    }
                    if (ds1.Tables[1].Rows.Count > 0)
                    {
                        if (Convert.ToString(ds1.Tables[1].Rows[0]["value"]).Trim() != "")
                        {
                            txt_prestudentbundle.Text = Convert.ToString(ds1.Tables[1].Rows[0]["value"]);
                        }
                        else
                        {
                            txt_prestudentbundle.Text = string.Empty;
                        }
                    }
                    else
                    {
                        txt_prestudentbundle.Text = string.Empty;
                    }
                    // ********************** Added by jairam ******************* 13-09-2014
                    for (int lk = 0; lk < cblstaffleavetype.Items.Count; lk++)
                    {
                        cblstaffleavetype.Items[lk].Selected = false;
                    }
                    string staff_attend_setting_query = string.Empty;
                    if (rdb_ind.Checked == true)
                    {
                        staff_attend_setting_query = "select Rights  from Staff_Attendance_Setting where usercode='" + selected_usercode + "'";
                    }
                    else if (rdb_grp.Checked == true)
                    {
                        staff_attend_setting_query = "select Rights from Staff_Attendance_Setting where group_code=" + selected_usercode + "";
                    }
                    ds1.Clear();
                    ds1 = dasri.select_method_wo_parameter(staff_attend_setting_query, "Text");
                    if (ds1.Tables[0].Rows.Count > 0)
                    {
                        string attendance_rights = Convert.ToString(ds1.Tables[0].Rows[0]["Rights"]);
                        if (attendance_rights != "Empty")
                        {
                            string[] split_Attendance = attendance_rights.Split(',');
                            if (split_Attendance.Length > 0)
                            {
                                for (int ik = 0; ik <= split_Attendance.GetUpperBound(0); ik++)
                                {
                                    for (int lk = 0; lk < cblstaffleavetype.Items.Count; lk++)
                                    {
                                        if (cblstaffleavetype.Items[lk].Text == split_Attendance[ik].ToString())
                                        {
                                            cblstaffleavetype.Items[lk].Selected = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    // ******************************* End ******************************
                    //dr.Close();
                    //con.Close();
                    foreach (TreeNode node in TVset.Nodes)
                    {
                        node.Checked = false;
                    }
                    rights.Clear();
                    //Modified by srinath 6/6/2014
                    //cmd.CommandText = "select rights_code from security_user_right where college_code=" + Convert.ToString(ddlcollege.SelectedValue) + " " + user_gropcode + "";
                    //cmd.CommandText = "select rights_code from security_user_right where college_code=" + Convert.ToString(ddlcollege.SelectedValue) + " " + user_gropcode + "";
                    DataSet dsrisj = dasri.select_method_wo_parameter("select rights_code from security_user_right where college_code=" + Convert.ToString(ddlcollege.SelectedValue) + " " + user_gropcode + "", "Text");
                    for (int r = 0; r < dsrisj.Tables[0].Rows.Count; r++)
                    {
                        rights.Add(dsrisj.Tables[0].Rows[r]["rights_code"].ToString());
                    }
                    //cmd.Connection = con;
                    //con.Open();
                    //SqlDataReader dr_rights = cmd.ExecuteReader();
                    //if (dr_rights.HasRows)
                    //    while (dr_rights.Read())
                    //    {
                    //        rights.Add(dr_rights.GetValue(0).ToString());
                    //    }
                    //dr_rights.Close();
                    //con.Close();
                    TreeNodeCollection childNodes;
                    TreeNodeCollection subchildNodes;
                    TreeNodeCollection sub_childNodes;
                    TreeNodeCollection sub_subchildNodes;
                    //
                    foreach (TreeNode node in TVset.Nodes)
                    {
                        childNodes = node.ChildNodes;
                        foreach (TreeNode childNode in childNodes)
                        {
                            childNode.Checked = false;
                            if (childNode.ChildNodes.Count != 0)
                            {
                                subchildNodes = childNode.ChildNodes;
                                foreach (TreeNode subchildNode in subchildNodes)
                                {
                                    subchildNode.Checked = false;
                                    if (subchildNode.ChildNodes.Count != 0)
                                    {
                                        sub_childNodes = subchildNode.ChildNodes;
                                        foreach (TreeNode sub_childNode in sub_childNodes)
                                        {
                                            sub_childNode.Checked = false;
                                            if (sub_childNode.ChildNodes.Count != 0)
                                            {
                                                sub_subchildNodes = sub_childNode.ChildNodes;
                                                foreach (TreeNode sub_subchildNode in sub_subchildNodes)
                                                {
                                                    sub_subchildNode.Checked = false;
                                                    //if (sub_subchildNode.ChildNodes.Count!=0)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //
                    foreach (TreeNode node in TVset.Nodes)
                    {
                        childNodes = node.ChildNodes;
                        // iterate through the child nodes
                        foreach (TreeNode childNode in childNodes)
                        {
                            if (rights.Contains(childNode.Value))
                                childNode.Checked = true;
                            subchildNodes = childNode.ChildNodes;
                            foreach (TreeNode subchildNode in subchildNodes)
                            {
                                if (rights.Contains(subchildNode.Value))
                                    subchildNode.Checked = true;
                                sub_childNodes = subchildNode.ChildNodes;
                                foreach (TreeNode sub_childNode in sub_childNodes)
                                {
                                    if (rights.Contains(sub_childNode.Value))
                                        sub_childNode.Checked = true;
                                    sub_subchildNodes = sub_childNode.ChildNodes;
                                    foreach (TreeNode sub_subchildNode in sub_subchildNodes)
                                    {
                                        if (rights.Contains(sub_subchildNode.Value))
                                            sub_subchildNode.Checked = true;
                                    }
                                }
                            }
                        }
                    }
                    rights.Clear();
                    DataSet dsrightss = dasri.select_method_wo_parameter("select rights_code from security_user_right where college_code=" + Convert.ToString(ddlcollege.SelectedValue) + " and ISNULL(user_code,0)=0", "Text");
                    for (int r = 0; r < dsrightss.Tables[0].Rows.Count; r++)
                    {
                        rights.Add(dsrightss.Tables[0].Rows[r]["rights_code"].ToString());
                    }
                    foreach (TreeNode node in TVStudentlog.Nodes)
                    {
                        childNodes = node.ChildNodes;
                        foreach (TreeNode childNode in childNodes)
                        {
                            childNode.Checked = false;
                            if (childNode.ChildNodes.Count != 0)
                            {
                                subchildNodes = childNode.ChildNodes;
                                foreach (TreeNode subchildNode in subchildNodes)
                                {
                                    subchildNode.Checked = false;
                                    if (subchildNode.ChildNodes.Count != 0)
                                    {
                                        sub_childNodes = subchildNode.ChildNodes;
                                        foreach (TreeNode sub_childNode in sub_childNodes)
                                        {
                                            sub_childNode.Checked = false;
                                            if (sub_childNode.ChildNodes.Count != 0)
                                            {
                                                sub_subchildNodes = sub_childNode.ChildNodes;
                                                foreach (TreeNode sub_subchildNode in sub_subchildNodes)
                                                {
                                                    sub_subchildNode.Checked = false;
                                                    //if (sub_subchildNode.ChildNodes.Count!=0)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    //
                    foreach (TreeNode node in TVStudentlog.Nodes)
                    {
                        childNodes = node.ChildNodes;
                        // iterate through the child nodes
                        foreach (TreeNode childNode in childNodes)
                        {
                            if (rights.Contains(childNode.Value))
                                childNode.Checked = true;
                            subchildNodes = childNode.ChildNodes;
                            foreach (TreeNode subchildNode in subchildNodes)
                            {
                                if (rights.Contains(subchildNode.Value))
                                    subchildNode.Checked = true;
                                sub_childNodes = subchildNode.ChildNodes;
                                foreach (TreeNode sub_childNode in sub_childNodes)
                                {
                                    if (rights.Contains(sub_childNode.Value))
                                        sub_childNode.Checked = true;
                                    sub_subchildNodes = sub_childNode.ChildNodes;
                                    foreach (TreeNode sub_subchildNode in sub_subchildNodes)
                                    {
                                        if (rights.Contains(sub_subchildNode.Value))
                                            sub_subchildNode.Checked = true;
                                    }
                                }
                            }
                        }
                    }
                    rights.Clear();
                    dsrisj = dasri.select_method_wo_parameter("select * from DeptPrivilages where isnull(degree_code,'0')<>'0' " + user_gropcode + "", "Text");
                    for (int r = 0; r < dsrisj.Tables[0].Rows.Count; r++)
                    {
                        rights.Add(dsrisj.Tables[0].Rows[r]["degree_code"].ToString());
                    }
                    foreach (TreeNode node in TVDegreeRight.Nodes)
                    {
                        node.Checked = false;
                    }
                    foreach (TreeNode node in TVDegreeRight.Nodes)
                    {
                        childNodes = node.ChildNodes;
                        foreach (TreeNode childNode in childNodes)
                        {
                            childNode.Checked = false;
                            if (childNode.ChildNodes.Count != 0)
                            {
                                subchildNodes = childNode.ChildNodes;
                                foreach (TreeNode subchildNode in subchildNodes)
                                {
                                    subchildNode.Checked = false;
                                    if (subchildNode.ChildNodes.Count != 0)
                                    {
                                        sub_childNodes = subchildNode.ChildNodes;
                                        foreach (TreeNode sub_childNode in sub_childNodes)
                                        {
                                            sub_childNode.Checked = false;
                                            if (sub_childNode.ChildNodes.Count != 0)
                                            {
                                                sub_subchildNodes = sub_childNode.ChildNodes;
                                                foreach (TreeNode sub_subchildNode in sub_subchildNodes)
                                                {
                                                    sub_subchildNode.Checked = false;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    foreach (TreeNode node in TVDegreeRight.Nodes)
                    {
                        childNodes = node.ChildNodes;
                        foreach (TreeNode childNode in childNodes)
                        {
                            if (rights.Contains(childNode.Value))
                                childNode.Checked = true;
                            subchildNodes = childNode.ChildNodes;
                            foreach (TreeNode subchildNode in subchildNodes)
                            {
                                if (rights.Contains(subchildNode.Value))
                                    subchildNode.Checked = true;
                                sub_childNodes = subchildNode.ChildNodes;
                                foreach (TreeNode sub_childNode in sub_childNodes)
                                {
                                    if (rights.Contains(sub_childNode.Value))
                                        sub_childNode.Checked = true;
                                    sub_subchildNodes = sub_childNode.ChildNodes;
                                    foreach (TreeNode sub_subchildNode in sub_subchildNodes)
                                    {
                                        if (rights.Contains(sub_subchildNode.Value))
                                            sub_subchildNode.Checked = true;
                                    }
                                }
                            }
                        }
                    }
                    for (int cl = 0; cl < FpCollRight.Sheets[0].Rows.Count; cl++)
                    {
                        FpCollRight.Sheets[0].Cells[cl, 2].Value = 0;
                    }
                    rights.Clear();
                    dsrisj = dasri.select_method_wo_parameter("select * from collegeprivilages where isnull(college_code,'0')<>'0' " + user_gropcode + "", "Text");
                    for (int r = 0; r < dsrisj.Tables[0].Rows.Count; r++)
                    {
                        rights.Add(dsrisj.Tables[0].Rows[r]["college_code"].ToString());
                    }
                    for (int cl = 0; cl < FpCollRight.Sheets[0].Rows.Count; cl++)
                    {
                        if (rights.Contains(FpCollRight.Sheets[0].Cells[cl, 1].Tag.ToString()))
                        {
                            FpCollRight.Sheets[0].Cells[cl, 2].Value = 1;
                        }
                    }
                    //Modified by srinath 6/6/2014
                    // string ss = "select distinct TextName,Taxtval from Attendance_Settings where college_code='" + Convert.ToString(ddlcollege.SelectedValue) + "' and user_id='" + selected_usercode.ToString() + "'";
                    string ss = "select distinct TextName,Taxtval from Attendance_Settings where college_code='" + Convert.ToString(ddlcollege.SelectedValue) + "' and user_id='" + selected_usercode.ToString() + "'";
                    // DataSet ds;
                    ds = dasri.select_method_wo_parameter(ss, "txt");
                    if (ds.Tables[0].Rows.Count > 0)
                    {
                        for (int bb = 0; bb < ds.Tables[0].Rows.Count; bb++)
                        {
                            if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Attendance Sms for Absent" && Convert.ToInt16(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 1)
                            {
                                chbAttendanceSms.Checked = true;
                                chbFather.Visible = true;
                                chbMother.Visible = true;
                                chbStudent.Visible = true;
                            }
                            else if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Attendance Sms for Absent" && Convert.ToInt16(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 0)
                            {
                                chbAttendanceSms.Checked = false;
                                chbFather.Visible = false;
                                chbMother.Visible = false;
                                chbStudent.Visible = false;
                            }
                            if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Voice Call for Absent" && Convert.ToInt16(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 1)
                            {
                                chbvoicecall.Checked = true;
                                chbFather.Visible = true;
                                chbMother.Visible = true;
                                chbStudent.Visible = true;
                            }
                            else if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Voice Call for Absent" && Convert.ToInt16(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 0)
                            {
                                chbvoicecall.Checked = false;
                                chbFather.Visible = false;
                                chbMother.Visible = false;
                                chbStudent.Visible = false;
                            }
                            if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Father" && Convert.ToInt16(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 1)
                            {
                                chbFather.Checked = true;
                            }
                            else if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Father" && Convert.ToInt16(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 0)
                            {
                                chbFather.Checked = false;
                            }
                            if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Mother" && Convert.ToInt16(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 1)
                            {
                                chbMother.Checked = true;
                            }
                            else if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Mother" && Convert.ToInt16(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 0)
                            {
                                chbMother.Checked = false;
                            }
                            if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Student" && Convert.ToInt16(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 1)
                            {
                                chbStudent.Checked = true;
                            }
                            else if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Student" && Convert.ToInt16(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 0)
                            {
                                chbStudent.Checked = false;
                            }
                            if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "SMS User Id" && Convert.ToInt16(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 1)
                            {
                                chbSMS.Checked = true;
                            }
                            else if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "SMS User Id" && Convert.ToInt16(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 0)
                            {
                                chbSMS.Checked = false;
                            }
                            if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Period" && ds.Tables[0].Rows[bb]["Taxtval"].ToString() != "")
                            {
                                string period = string.Empty, temp1 = string.Empty;
                                period = ds.Tables[0].Rows[bb]["Taxtval"].ToString();
                                Hashtable sms_has = new Hashtable();
                                if (period != string.Empty)
                                {
                                    string[] split_sms_rights = period.Split(',');
                                    for (int od_temp = 0; od_temp <= split_sms_rights.GetUpperBound(0); od_temp++)
                                    {
                                        sms_has.Add(split_sms_rights[od_temp].ToString(), split_sms_rights[od_temp].ToString());
                                    }
                                    for (int od_temp = 0; od_temp < chklistsms.Items.Count; od_temp++)
                                    {
                                        if (sms_has.ContainsKey(chklistsms.Items[od_temp].Text))
                                        {
                                            chklistsms.Items[od_temp].Selected = true;
                                            if (temp1 == "")
                                            {
                                                temp1 = chklistsms.Items[od_temp].Text;
                                            }
                                            else
                                            {
                                                temp1 = temp1 + "," + chklistsms.Items[od_temp].Text;
                                            }
                                        }
                                    }
                                    txtsms.Text = temp1;
                                }
                            }
                            else if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Period" && ds.Tables[0].Rows[bb]["Taxtval"].ToString() == "")
                            {
                                for (int od_temp = 0; od_temp < chklistsms.Items.Count; od_temp++)
                                {
                                    chklistsms.Items[od_temp].Selected = false;
                                    txtsms.Text = string.Empty;
                                }
                            }
                            if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Hour" && Convert.ToInt16(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 1)
                            {
                                rbhour.Checked = true;
                                txtsms.Enabled = true;
                                //ddlsms.Enabled = true;
                                psms.Enabled = true;
                                chksms.Enabled = true;
                                rbhour.Checked = true;
                            }
                            else if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Hour" && Convert.ToInt16(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 0)
                            {
                                for (int od_temp = 0; od_temp < chklistsms.Items.Count; od_temp++)
                                {
                                    chklistsms.Items[od_temp].Selected = false;
                                    txtsms.Text = string.Empty;
                                }
                                txtsms.Enabled = false;
                                //ddlsms.Enabled = false;
                                psms.Enabled = false;
                                chksms.Enabled = false;
                                rbhour.Checked = false;
                            }
                            if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Day" && Convert.ToInt16(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 1)
                            {
                                rbday.Checked = true;
                            }
                            else if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Day" && Convert.ToInt16(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 0)
                            {
                                rbday.Checked = false;
                            }
                            if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Minimun Absent Day" && Convert.ToInt16(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 1)
                            {
                                chkminimumabsent.Checked = true;
                                txt_smsday.Enabled = true;
                                chbvoicecall.Enabled = false;
                            }
                            else if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Minimun Absent Day" && Convert.ToInt16(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 0)
                            {
                                chkminimumabsent.Checked = false;
                                txt_smsday.Enabled = false;
                                chbvoicecall.Enabled = true;
                            }
                            if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Minimun Days" && Convert.ToInt32(ds.Tables[0].Rows[bb]["Taxtval"].ToString()) == 0)
                            {
                                txt_smsday.Text = string.Empty;
                            }
                            else if (ds.Tables[0].Rows[bb]["TextName"].ToString() == "Minimun Days" && Convert.ToString(ds.Tables[0].Rows[bb]["Taxtval"]) != "")
                            {
                                txt_smsday.Text = Convert.ToString(ds.Tables[0].Rows[bb]["Taxtval"]);
                            }
                        }
                    }
                    else
                    {
                        chbSMS.Checked = false;
                        chbMother.Checked = false;
                        chbFather.Checked = false;
                        chbStudent.Checked = false;
                        chbAttendanceSms.Checked = false;
                        chbvoicecall.Checked = false;
                    }
                    //added by Mullai
                    string currdtsms = string.Empty;

                    currdtsms = d2.GetFunctionv("select distinct value from Master_Settings where settings='SMS For Current Date Only' " + userorgropcode + "");
                    if (currdtsms == "1")
                    {
                        chbcurrentdayaatnd.Checked = true;
                    }
                    else
                    {
                        chbcurrentdayaatnd.Checked = false;
                    }




                    txtselect.Text = string.Empty;
                    //cmd.CommandText = "select rights from  OD_Master_Setting where " + usergroup + "";
                    //cmd.Connection = con;
                    //con.Open();
                    //SqlDataReader dr_rights_od = cmd.ExecuteReader();
                    //if (dr_rights_od.HasRows)
                    //{
                    //    while (dr_rights_od.Read())
                    //    {
                    //        string od_rights = string.Empty, temp1 = string.Empty;
                    //        Hashtable od_has = new Hashtable();
                    //        od_rights = dr_rights_od["rights"].ToString();
                    //        if (od_rights != string.Empty)
                    //        {
                    //            string[] split_od_rights = od_rights.Split(',');
                    //            for (int od_temp = 0; od_temp <= split_od_rights.GetUpperBound(0); od_temp++)
                    //            {
                    //                od_has.Add(split_od_rights[od_temp].ToString(), split_od_rights[od_temp].ToString());
                    //            }
                    //            for (int od_temp = 0; od_temp < Chkselecthours.Items.Count; od_temp++)
                    //            {
                    //                if (od_has.ContainsKey(Chkselecthours.Items[od_temp].Text))
                    //                {
                    //                    Chkselecthours.Items[od_temp].Selected = true;
                    //                    if (temp1 == "")
                    //                    {
                    //                        temp1 = Chkselecthours.Items[od_temp].Text;
                    //                    }
                    //                    else
                    //                    {
                    //                        temp1 = temp1 + "," + Chkselecthours.Items[od_temp].Text;
                    //                    }
                    //                }
                    //            }
                    //            txtselect.Text = temp1;
                    //        }
                    //    }
                    //}
                    //else
                    //{
                    //    for (int od_temp = 0; od_temp < Chkselecthours.Items.Count; od_temp++)
                    //    {
                    //        Chkselecthours.Items[od_temp].Selected = false;
                    //        txtselect.Text = string.Empty;
                    //    }
                    //}
                    string odrightsva = dasri.GetFunction("select rights from  OD_Master_Setting where " + usergroup + "");
                    if (odrightsva.Trim() != "" && odrightsva.Trim() != "0")
                    {
                        string od_rights = string.Empty, temp1 = string.Empty;
                        Hashtable od_has = new Hashtable();
                        od_rights = odrightsva;
                        if (od_rights != string.Empty)
                        {
                            string[] split_od_rights = od_rights.Split(',');
                            for (int od_temp = 0; od_temp <= split_od_rights.GetUpperBound(0); od_temp++)
                            {
                                od_has.Add(split_od_rights[od_temp].ToString(), split_od_rights[od_temp].ToString());
                            }
                            for (int od_temp = 0; od_temp < Chkselecthours.Items.Count; od_temp++)
                            {
                                if (od_has.ContainsKey(Chkselecthours.Items[od_temp].Text))
                                {
                                    Chkselecthours.Items[od_temp].Selected = true;
                                    if (temp1 == "")
                                    {
                                        temp1 = Chkselecthours.Items[od_temp].Text;
                                    }
                                    else
                                    {
                                        temp1 = temp1 + "," + Chkselecthours.Items[od_temp].Text;
                                    }
                                }
                            }
                            txtselect.Text = temp1;
                        }
                    }
                    else
                    {
                        for (int od_temp = 0; od_temp < Chkselecthours.Items.Count; od_temp++)
                        {
                            Chkselecthours.Items[od_temp].Selected = false;
                            txtselect.Text = string.Empty;
                        }
                    }
                    //======================spl hours master setting PRABHA
                    //con.Close();
                    //splhr_check.Checked = false;
                    //cmd.CommandText = "select rights from  special_hr_rights where " + usergroup + "";
                    DataSet dssplreu = dasri.select_method_wo_parameter("select rights from  special_hr_rights where " + usergroup + "", "text");
                    if (dssplreu.Tables[0].Rows.Count > 0)
                    {
                        for (int spl = 0; spl < dssplreu.Tables[0].Rows.Count; spl++)
                        {
                            string spl_hr_rights = string.Empty;
                            Hashtable od_has = new Hashtable();
                            spl_hr_rights = dssplreu.Tables[0].Rows[spl]["rights"].ToString();
                            splhr_check.Checked = Convert.ToBoolean(spl_hr_rights);
                        }
                    }
                    else
                    {
                        splhr_check.Checked = false;
                    }
                    //cmd.Connection = con;
                    //con.Open();
                    //SqlDataReader dr_rights_spl_hr = cmd.ExecuteReader();
                    //if (dr_rights_spl_hr.HasRows)
                    //{
                    //    while (dr_rights_spl_hr.Read())
                    //    {
                    //        string spl_hr_rights = string.Empty;
                    //        Hashtable od_has = new Hashtable();
                    //        spl_hr_rights = dr_rights_spl_hr["rights"].ToString();
                    //        splhr_check.Checked = Convert.ToBoolean(spl_hr_rights);
                    //    }
                    //}
                    //else
                    //{
                    //    splhr_check.Checked = false;
                    //}
                    //====================================
                    //============================================send password check 5/7/12 PRABHA
                    //con.Close();
                    //con.Open();
                    //SqlDataAdapter da30_mail = new SqlDataAdapter("select * from Master_Settings where settings='mailforpassword' ", con);
                    DataSet ds30_mail = dasri.select_method_wo_parameter("select * from Master_Settings where settings='mailforpassword' ", "text");
                    // da30_mail.Fill(ds30_mail);
                    if (ds30_mail.Tables[0].Rows.Count > 0)
                    {
                    }
                    else
                    {
                        string sqlstr = "insert into Master_Settings(settings,value)values('mailforpassword', '" + chkpassword.Checked + "')";
                        insupdvalue = dasri.update_method_wo_parameter(sqlstr, "Text");
                        //SqlCommand cmd_pass = new SqlCommand(sqlstr);
                        //cmd_pass.Connection = con;
                        //cmd_pass.ExecuteNonQuery();
                    }
                    chkpassword.Checked = false;
                    string strgetmailpass = dasri.GetFunctionv("select value From Master_Settings where settings ='mailforpassword'");
                    if (strgetmailpass.Trim() != "")
                    {
                        if (strgetmailpass == "1" || strgetmailpass.Trim().ToLower() == "true")
                        {
                            chkpassword.Checked = true;
                        }
                    }
                    //con.Close();
                    //con.Open();
                    //chkpassword.Checked = false;
                    //cmd.CommandText = "select value From Master_Settings where settings ='mailforpassword'";
                    //cmd.Connection = con;
                    //SqlDataReader dr_password = cmd.ExecuteReader();
                    //if (dr_password.HasRows)
                    //{
                    //    while (dr_password.Read())
                    //    {
                    //        string send_pw = string.Empty;
                    //        //  Hashtable od_has = new Hashtable();
                    //        send_pw = dr_password["value"].ToString();
                    //        if (send_pw == "1" || send_pw == "True" || send_pw == "TRUE" || send_pw == "true")
                    //        {
                    //            chkpassword.Checked = true;
                    //        }
                    //        else
                    //        {
                    //            chkpassword.Checked = false;
                    //        }
                    //    }
                    //}
                    //else
                    //{
                    //    splhr_check.Checked = false;
                    //}
                    //===============================load convert mark
                    //con.Close();
                    //con.Open();
                    //SqlDataReader dr_convert;//
                    //SqlCommand cmd_convert = new SqlCommand("select * from COE_Master_Settings where settings in('convert_th_internal','convert_th_external','convert_prac_internal','convert_prac_external') ", con);
                    //dr_convert = cmd_convert.ExecuteReader();
                    DataSet dscoes = dasri.select_method_wo_parameter("select * from COE_Master_Settings where settings in('convert_th_internal','convert_th_external','convert_prac_internal','convert_prac_external') ", "text");
                    //if (dr_convert.HasRows == true)
                    if (dscoes.Tables[0].Rows.Count > 0)
                    {
                        //while (dr_convert.Read())
                        for (int co = 0; co < dscoes.Tables[0].Rows.Count; co++)
                        {
                            if (dscoes.Tables[0].Rows[co]["settings"].ToString() == "convert_th_internal")
                            {
                                txttheoryinternal.Text = dscoes.Tables[0].Rows[co]["value"].ToString();
                            }
                            if (dscoes.Tables[0].Rows[co]["settings"].ToString() == "convert_th_external")
                            {
                                txttheorypractical.Text = dscoes.Tables[0].Rows[co]["value"].ToString();
                            }
                            if (dscoes.Tables[0].Rows[co]["settings"].ToString() == "convert_prac_internal")
                            {
                                txtpracticalinternal.Text = dscoes.Tables[0].Rows[co]["value"].ToString();
                            }
                            if (dscoes.Tables[0].Rows[co]["settings"].ToString() == "convert_prac_external")
                            {
                                txtpracticalexternal.Text = dscoes.Tables[0].Rows[co]["value"].ToString();
                            }
                        }
                    }
                    else
                    {
                        txttheoryinternal.Text = "0";
                        txttheorypractical.Text = "0";
                        txtpracticalinternal.Text = "0";
                        txtpracticalexternal.Text = "0";
                    }
                    //con.Close();
                    //con.Open();
                    //SqlDataReader dr_convert1;//
                    ////  string h = "select * from COE_Master_Settings where settings = 'MaxExternalMark " + DropDownList1.Items[0].Text + "') ";
                    //SqlCommand cmd_convert1 = new SqlCommand("select * from COE_Master_Settings where settings = 'MaxExternalMark " + DropDownList1.Items[0].Text + "' ", con);
                    //dr_convert1 = cmd_convert1.ExecuteReader();
                    //if (dr_convert1.HasRows == true)
                    //{
                    //    while (dr_convert1.Read())
                    //    {
                    //        TextBox1.Text = dr_convert1["value"].ToString();
                    //    }
                    //}
                    //con.Close();
                    string getcodeba = string.Empty;
                    if (DropDownList1.Items.Count > 0)
                    {
                        getcodeba = dasri.GetFunctionv("select value from COE_Master_Settings where settings = 'MaxExternalMark " + DropDownList1.Items[0].Text + "'");
                        if (getcodeba.Trim() != "")
                        {
                            TextBox1.Text = getcodeba.ToString();
                        }
                    }
                    getcodeba = dasri.GetFunctionv("select value from COE_Master_Settings where settings = 'Mark Difference'");
                    if (getcodeba.Trim() != "")
                    {
                        txt_difmark.Text = getcodeba.ToString();
                    }
                    getcodeba = dasri.GetFunctionv("select value from COE_Master_Settings where settings = 'Direct_CIA'");
                    if (getcodeba.Trim() != "")
                    {
                        if (getcodeba.Trim() == "1")
                        {
                            chk_onlycia.Checked = true;
                        }
                        else
                        {
                            chk_onlycia.Checked = false;
                        }
                    }
                    //con.Open();
                    //SqlDataReader dr_convert11;//
                    ////  string h = "select * from COE_Master_Settings where settings = 'MaxExternalMark " + DropDownList1.Items[0].Text + "') ";
                    //SqlCommand cmd_convert11 = new SqlCommand("select * from COE_Master_Settings where settings = 'Mark Difference'", con);
                    //dr_convert11 = cmd_convert11.ExecuteReader();
                    //if (dr_convert11.HasRows == true)
                    //{
                    //    while (dr_convert11.Read())
                    //    {
                    //        txt_difmark.Text = dr_convert11["value"].ToString();
                    //    }
                    //}
                    //con.Close();
                    //con.Open();
                    //SqlDataReader dr_convert111;//
                    ////  string h = "select * from COE_Master_Settings where settings = 'MaxExternalMark " + DropDownList1.Items[0].Text + "') ";
                    //SqlCommand cmd_convert111 = new SqlCommand("select * from COE_Master_Settings where settings = 'Mark Moderation'", con);
                    //dr_convert111 = cmd_convert111.ExecuteReader();
                    //if (dr_convert111.HasRows == true)
                    //{
                    //    while (dr_convert111.Read())
                    //    {
                    //        txtmoder.Text = dr_convert111["value"].ToString();
                    //    }
                    //}
                    //con.Close();
                    getcodeba = dasri.GetFunctionv("select value from COE_Master_Settings where settings = 'Mark Moderation'");
                    if (getcodeba.Trim() != "")
                    {
                        txtmoder.Text = getcodeba.ToString();
                    }

                    #region Added by Idhris 12-05-2017

                    byte moderApplicable = Convert.ToByte(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='MaximumModerationApplicable' and college_code ='" + ddlcollege.SelectedItem.Value + "'"));
                    chkModerApplicable.Checked = false;
                    if (moderApplicable == 1)
                    {
                        chkModerApplicable.Checked = true;
                    }
                    bindModerEduLevel();
                    bindModerBatch();
                    txtModerMaxMark.Text = string.Empty;

                    string eduLevel = string.Empty;
                    if (ddlModerApplicableEduLevel.Items.Count > 0)
                    {
                        eduLevel = Convert.ToString(ddlModerApplicableEduLevel.SelectedValue).Trim();
                        string batch = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='MaximumModerationAppBatch@" + eduLevel + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ").Trim();
                        if (batch != string.Empty && batch != "0")
                        {
                            if (ddlModerApplicableBatch.Items.Count > 0)
                                ddlModerApplicableBatch.SelectedIndex = ddlModerApplicableBatch.Items.IndexOf(ddlModerApplicableBatch.Items.FindByValue(batch));
                        }
                        bindModerSem();
                        string sem = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='MaximumModerationAppSem@" + eduLevel + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ").Trim();
                        if (sem != string.Empty && sem != "0")
                        {
                            if (ddlModerApplicableSem.Items.Count > 0)
                                ddlModerApplicableSem.SelectedIndex = ddlModerApplicableSem.Items.IndexOf(ddlModerApplicableSem.Items.FindByValue(sem));
                        }

                        string mark = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='MaximumModerationAppMark@" + eduLevel + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ").Trim();
                        if (mark != string.Empty && mark != "0")
                        {
                            txtModerMaxMark.Text = mark;
                        }
                    }

                    #endregion

                    //con.Open();
                    //SqlDataReader dr_convert1111;//
                    ////  string h = "select * from COE_Master_Settings where settings = 'MaxExternalMark " + DropDownList1.Items[0].Text + "') ";
                    //SqlCommand cmd_convert1111 = new SqlCommand("select * from COE_Master_Settings where settings = 'Evaluation'", con);
                    //dr_convert1111 = cmd_convert1111.ExecuteReader();
                    //if (dr_convert1111.HasRows == true)
                    //{
                    //    while (dr_convert1111.Read())
                    //    {
                    //        txt_ev.Text = dr_convert1111["value"].ToString();
                    //    }
                    //}
                    //con.Close();
                    getcodeba = dasri.GetFunctionv("select value from COE_Master_Settings where settings = 'Evaluation'");
                    if (getcodeba.Trim() != "")
                    {
                        txt_ev.Text = getcodeba.ToString();
                    }
                    //added by srinath
                    string minimumabsentsms = dasri.GetFunction("select value from Master_Settings where settings='Minimum_days_Absent_Sms'");
                    if (minimumabsentsms.Trim() != "" && minimumabsentsms != null && minimumabsentsms.Trim() != "0")
                    {
                        txtminimumabsentdays.Text = minimumabsentsms;
                    }
                    else
                    {
                        txtminimumabsentdays.Text = string.Empty;
                    }
                    minimumabsentsms = dasri.GetFunction("select value from Master_Settings where settings='roll_no_suffix'");
                    if (minimumabsentsms.Trim() != "" && minimumabsentsms != null && minimumabsentsms.Trim() != "0")
                    {
                        txtrollsuffixlength.Text = minimumabsentsms;
                    }
                    else
                    {
                        txtrollsuffixlength.Text = string.Empty;
                    }
                    minimumabsentsms = dasri.GetFunction("select value from Master_Settings where settings='Alternatesms'");
                    if (minimumabsentsms.Trim() != "" && minimumabsentsms != null && minimumabsentsms.Trim() != "0")
                    {
                        chkaltnatesms.Checked = true;
                    }
                    else
                    {
                        chkaltnatesms.Checked = false;
                    }
                    minimumabsentsms = dasri.GetFunction("select value from Master_Settings where settings='cam mark attendance'");
                    if (minimumabsentsms.Trim() != "" && minimumabsentsms != null && minimumabsentsms.Trim() != "0")
                    {
                        chkcamattendance.Checked = true;
                    }
                    else
                    {
                        chkcamattendance.Checked = false;
                    }
                    //modified by prabha on 19/12/2017
                    string Coll_Code = ddlcollege.SelectedValue;
                    minimumabsentsms = dasri.GetFunction("select LinkValue from New_InsSettings where LinkName='Studnet Staff Selector' and college_code='" + Coll_Code + "'");
                    if (minimumabsentsms.Trim() != "" && minimumabsentsms != null && minimumabsentsms.Trim() != "0")
                    {
                        chkstaustaffreport.Checked = true;
                        string[] splitminimumabsentsms = minimumabsentsms.Split('-');
                        //ddlsetbatch.SelectedItem.Value = splitminimumabsentsms[1].ToString();
                        ddlsetbatch.Text = splitminimumabsentsms[1].ToString();
                    }
                    else
                    {
                        chkstaustaffreport.Checked = false;
                    }
                    minimumabsentsms = dasri.GetFunction("select value from Master_Settings where settings='Include Alternate Schedule'");
                    if (minimumabsentsms.Trim() != "" && minimumabsentsms != null && minimumabsentsms.Trim() != "0")
                    {
                        chkaltenateleaveapply.Checked = true;
                        string alterVal = dasri.GetFunction("select value from Master_Settings where settings='Leave Apply in Alternate Schedule'");
                        if (!string.IsNullOrEmpty(alterVal) && alterVal != "0")
                        {
                            if (alterVal == "1")
                                rblalterPeriod.SelectedIndex = 0;
                            else
                                rblalterPeriod.SelectedIndex = 1;
                            // rblalterPeriod.Enabled = true;
                        }
                    }
                    else
                    {
                        chkaltenateleaveapply.Checked = false;
                        // rblalterPeriod.Enabled = false;
                    }
                    minimumabsentsms = dasri.GetFunction("select value from Master_Settings where settings='Black Box Academic'");
                    if (minimumabsentsms.Trim() != "" && minimumabsentsms != null && minimumabsentsms.Trim() != "0")
                    {
                        chkblackboxacademic.Checked = true;
                    }
                    else
                    {
                        chkblackboxacademic.Checked = false;
                    }
                    minimumabsentsms = dasri.GetFunction("select value from Master_Settings where settings='Cam Entry Staff'");
                    if (minimumabsentsms.Trim() != "" && minimumabsentsms != null && minimumabsentsms.Trim() != "0")
                    {
                        Chkcamstaff.Checked = true;
                    }
                    else
                    {
                        Chkcamstaff.Checked = false;
                    }
                    minimumabsentsms = dasri.GetFunction("select value from Master_Settings where settings='Staff Leave Report Visible Department Wise'  and " + usergroup + "");
                    if (minimumabsentsms.Trim() == "1")
                    {
                        chkstaffleavereport.Checked = true;
                    }
                    else
                    {
                        chkstaffleavereport.Checked = false;
                    }
                    txtbankdegit.Text = string.Empty;
                    minimumabsentsms = dasri.GetFunction("select value from Master_Settings where settings='Bank Foramte Fixed Digits'");
                    if (minimumabsentsms.Trim() != "" && minimumabsentsms != null && minimumabsentsms.Trim() != "0")
                    {
                        txtbankdegit.Text = minimumabsentsms;
                    }
                    //minimumabsentsms = da.GetFunction("select value from Master_Settings where settings='Delete Alternate Periods For Reject'");
                    //if (minimumabsentsms.Trim() != "" && minimumabsentsms != null && minimumabsentsms.Trim() != "0")
                    //{
                    //    chkalterdelete.Checked = true;
                    //}
                    //else
                    //{
                    //    chkalterdelete.Checked = false;
                    //}
                    //===========Added by Manikandan 30/08/2013=============
                    //con.Close();
                    //con.Open();
                    //chklock.Checked = false;
                    //SqlCommand cmd_schedlock = new SqlCommand("select value from Master_Settings where settings='schedule_lock' and " + usergroup + "", con);
                    //string schedval = (string)cmd_schedlock.ExecuteScalar();
                    //if (!string.IsNullOrEmpty(schedval))
                    //{
                    //    if (schedval.Trim() == "1" || schedval.Trim().ToLower() == "true")
                    //    {
                    //        chklock.Checked = true;
                    //    }
                    //}
                    chklock.Checked = false;
                    string getshedulockva = dasri.GetFunctionv("select value from Master_Settings where settings='schedule_lock' and " + usergroup + "");
                    if (getshedulockva.Trim() == "1" || getshedulockva.Trim().ToLower() == "true")
                    {
                        chklock.Checked = true;
                    }
                    chkpersem.Checked = false;
                    getshedulockva = dasri.GetFunctionv("select value from Master_Settings where settings='previous sem subject allotment' and " + usergroup + "");
                    if (getshedulockva.Trim() == "1" || getshedulockva.Trim().ToLower() == "true")
                    {
                        chkpersem.Checked = true;
                    }
                    chkelevonlyvisible.Checked = false;
                    getshedulockva = dasri.GetFunctionv("select value from Master_Settings where settings='Elective Subject only allot' and " + usergroup + "");
                    if (getshedulockva.Trim() == "1" || getshedulockva.Trim().ToLower() == "true")
                    {
                        chkelevonlyvisible.Checked = true;
                    }
                    //added by Mullai
                    txtattlock.Text = string.Empty;
                    string chkval = string.Empty;
                    getshedulockva = dasri.GetFunctionv("select value from Master_Settings where settings='Attendance Lock Days' and " + usergroup + "");
                    if (getshedulockva == "1")
                    {
                        cbbatlock.Checked = true;
                        gridviewbatch.Visible = true;
                       
                        cbbatlock_OnCheckedIndexChange(sender, e);

                    }
                    else
                    {
                        getshedulockva = dasri.GetFunctionv("select template from Master_Settings where settings='Attendance Lock Days' and " + usergroup + "");
                        gridviewbatch.Visible = false;
                        cbbatlock.Checked = false;
                        if (getshedulockva.Trim().ToLower() != "")
                        {
                            txtattlock.Text = getshedulockva;
                        }
                        txtattlock.Enabled = true;
                    }
                    chkdiscon.Checked = false;
                    getshedulockva = dasri.GetFunctionv("select value from Master_Settings where " + strusergruop + "=" + selected_usercode.ToString() + " and settings='Attendance Discount'");
                    if (getshedulockva.Trim() == "1" || getshedulockva.Trim().ToLower() == "true")
                    {
                        chkdiscon.Checked = true;
                    }
                    chkdebar.Checked = false;
                    getshedulockva = dasri.GetFunctionv("select value from Master_Settings where " + strusergruop + "=" + selected_usercode.ToString() + " and settings='Attendance Debar'");
                    if (getshedulockva.Trim() == "1" || getshedulockva.Trim().ToLower() == "true")
                    {
                        chkdebar.Checked = true;
                    }
                    chkattday.Checked = false;
                    getshedulockva = dasri.GetFunctionv("select value from Master_Settings where settings='Attendance Day Wise Calculation'");
                    if (getshedulockva.Trim() == "1" || getshedulockva.Trim().ToLower() == "true")
                    {
                        chkattday.Checked = true;
                    }
                    chkwottable.Checked = false;
                    getshedulockva = dasri.GetFunctionv("select value from Master_Settings where  settings='Attendance with out timetable'");
                    if (getshedulockva.Trim() == "1" || getshedulockva.Trim().ToLower() == "true")
                    {
                        chkwottable.Checked = true;
                    }
                    chksubatt.Checked = false;
                    getshedulockva = dasri.GetFunctionv("select value from Master_Settings where  settings='Subject Based on Department Rights'");
                    if (getshedulockva.Trim() == "1" || getshedulockva.Trim().ToLower() == "true")
                    {
                        chksubatt.Checked = true;
                    }
                    cblCombinedClsAlrt.Checked = false;  //Added By Jeyaprakash on Jan 12th,2017
                    getshedulockva = dasri.GetFunctionv("select value from Master_Settings where  settings='Time Table Alert Rights'");
                    if (getshedulockva.Trim() == "1" || getshedulockva.Trim().ToLower() == "true")
                    {
                        cblCombinedClsAlrt.Checked = true;
                    }
                    txtatwebaddress.Text = string.Empty;
                    getshedulockva = dasri.GetFunctionv("select value from Master_Settings where  settings='Letter Web Site'");
                    if (getshedulockva.Trim() != "" && getshedulockva != "0")
                    {
                        txtatwebaddress.Text = getshedulockva;
                    }
                    //Added by Srinath 18/3/2014
                    for (int stup = 0; stup < chklssubjecttype.Items.Count; stup++)
                    {
                        chklssubjecttype.Items[stup].Selected = false;
                    }
                    int subcou = 0;
                    string strsubtype = dasri.GetFunction("select value from Master_Settings where settings='Subject Type' and " + usergroup + "");
                    if (strsubtype != null && strsubtype.Trim() != "0" && strsubtype.Trim() != "")
                    {
                        string[] spsubt = strsubtype.Split(',');
                        for (int stu = 0; stu <= spsubt.GetUpperBound(0); stu++)
                        {
                            string val = spsubt[stu].ToString();
                            for (int stup = 0; stup < chklssubjecttype.Items.Count; stup++)
                            {
                                string cshg = chklssubjecttype.Items[stup].Text;
                                if (cshg == val)
                                {
                                    subcou++;
                                    chklssubjecttype.Items[stup].Selected = true;
                                    stup = chklssubjecttype.Items.Count;
                                }
                            }
                        }
                    }
                    if (subcou == chklssubjecttype.Items.Count)
                    {
                        txtsubjecttype.Text = "Type(" + chklssubjecttype.Items.Count + ")";
                        chksubjecttype.Checked = true;
                    }
                    else if (subcou == 0)
                    {
                        txtsubjecttype.Text = "---Select---";
                        chksubjecttype.Checked = false;
                    }
                    else
                    {
                        txtsubjecttype.Text = "Type(" + subcou + ")";
                        chksubjecttype.Checked = false;
                    }
                    break;
                }
            }
            for (int i = 0; i < ddluser.Items.Count; i++)
            {
                if (ddluser.Items[i].Selected == true)
                {
                    string stream = string.Empty;
                    for (int ink = 0; ink < chkl_head.Items.Count; ink++)
                    {
                        if (chkl_head.Items[ink].Selected == true)
                        {
                            if (stream == "")
                            {
                                stream = chkl_head.Items[ink].Value.ToString();
                            }
                            else
                            {
                                stream = stream + "','" + "" + chkl_head.Items[ink].Value.ToString() + "";
                            }
                        }
                    }
                    if (stream.Trim() != "")
                    {
                        string selqryledger = "select LedgerFK from FS_LedgerPrivilage where HeaderFK in('" + stream + "') and UserCode ='" + ddluser.Items[i].Value + "'";
                        DataSet dsled_new = new DataSet();
                        dsled_new = d2.select_method_wo_parameter(selqryledger, "Text");
                        if (dsled_new.Tables[0].Rows.Count > 0)
                        {
                            // chkl_ledg.ClearSelection();
                            for (int p = 0; p < dsled_new.Tables[0].Rows.Count; p++)
                            {
                                string ledfk = Convert.ToString(dsled_new.Tables[0].Rows[p]["LedgerFK"]);
                                for (int b = 0; b < chkl_ledg.Items.Count; b++)
                                {
                                    string ledfkvalue = Convert.ToString(chkl_ledg.Items[b].Value);
                                    if (ledfkvalue == ledfk)
                                    {
                                        chkl_ledg.Items[b].Selected = true;
                                    }
                                    //else
                                    //{
                                    //    chkl_ledg.Items[b].Selected = false;
                                    //}
                                }
                                int ccount = 0;
                                for (int c = 0; c < chkl_ledg.Items.Count; c++)
                                {
                                    if (chkl_ledg.Items[c].Selected == true)
                                    {
                                        ccount = ccount + 1;
                                    }
                                }
                                txt_ledg.Text = "Ledger (" + ccount.ToString() + ")";
                            }
                        }
                        else
                        {
                            for (int c = 0; c < chkl_ledg.Items.Count; c++)
                            {
                                chkl_ledg.Items[c].Selected = false;
                            }
                            txt_ledg.Text = "--Select--";
                        }
                    }
                }
            }
            ddlattbatch_SelectedIndexChanged(sender, e);
            loadUserRightsOtCol();
            //string setexammonthyear = dasri.GetFunction("select value from master_settings where settings='Exam year and month'");
            //if (setexammonthyear != null && setexammonthyear.Trim() != "" && setexammonthyear.Trim() != "0")
            //{
            //    string[] stapv = setexammonthyear.Split(',');
            //    if (stapv.GetUpperBound(0) == 1)
            //    {
            //        ddlemyear.Text = stapv[0].ToString();
            //        ddlemmonth.Text = stapv[1].ToString();
            //    }
            //}
            //Added by Jeyaprakash on Feb 17th,2017

            string GetOdHour = dasri.GetFunction("select linkValue from inssettings where linkName='NoOfOdPerStudents' and College_code ='" + ddlcollege.SelectedValue + "'"); // Added by Jairam 14-08-2017
            if (GetOdHour.Trim() != "")
            {
                string[] SpltGet = GetOdHour.Split(';');
                if (SpltGet[0].Trim() == "1")
                {
                    cbOdEnteryCheck.Checked = true;
                    txtODCount.Text = Convert.ToString(SpltGet[1]);
                }
                else
                {
                    cbOdEnteryCheck.Checked = false;
                    txtODCount.Text = "";
                }
            }


            //added by mullai
            string GetOdlimitval = dasri.GetFunction("select linkValue from inssettings where linkName='OD Limit Exceeds' and College_code ='" + ddlcollege.SelectedValue + "'");
            string limitflag = string.Empty;
            if (GetOdlimitval == "1")
            {
                cbodlimitexceeds.Checked = true;
            }
            else
            {
                cbodlimitexceeds.Checked = false;
            }


            string GetHourMin = dasri.GetFunction("select value from Master_Settings where settings='PerTimeMark'");
            if (GetHourMin.Trim() != "0" && !String.IsNullOrEmpty(GetHourMin))
            {
                ddlHour.SelectedIndex = ddlHour.Items.IndexOf(ddlHour.Items.FindByText(GetHourMin.Split(':')[0]));
                ddlMin.SelectedIndex = ddlMin.Items.IndexOf(ddlMin.Items.FindByText(GetHourMin.Split(':')[1]));
            }
            else
            {
                ddlHour.SelectedIndex = 0;
                ddlMin.SelectedIndex = 0;
            }
            string collegename = dasri.GetFunction("select com_name from collinfo where college_code='" + ddlcollege.SelectedItem.Value + "'");
            if (collegename.Trim() == "")
                txt_common_collegename.Text = "";
            else
                txt_common_collegename.Text = collegename;

            //poomalar selected_usercode 24.10.17
            string query = "select LinkValue from New_InsSettings where LinkName='Professional Tax Calculation Month' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code ='" + selected_usercode + "'";
            DataSet daset = new DataSet();
            daset = d2.select_method_wo_parameter(query, "Text");

            string sql = d2.GetFunction(query).Trim();

            if (sql != "0" && sql != "" && sql.Length > 0)
            {
                string[] det = sql.Split(';');

                string monthyear = det[0];
                string endmonthyear = det[1];

                ddlfrommonthpt.SelectedIndex = ddlfrommonthpt.Items.IndexOf(ddlfrommonthpt.Items.FindByValue(monthyear.Split('-')[0]));
                ddltomonthpt.SelectedIndex = ddltomonthpt.Items.IndexOf(ddltomonthpt.Items.FindByValue(endmonthyear.Split('-')[0]));

                ddlfromyearpt.SelectedIndex = ddlfromyearpt.Items.IndexOf(ddlfromyearpt.Items.FindByValue(monthyear.Split('-')[1]));
                ddltoyearpt.SelectedIndex = ddltoyearpt.Items.IndexOf(ddltoyearpt.Items.FindByValue(endmonthyear.Split('-')[1]));
            }
            else
            {
                ddlfromyearpt.SelectedItem.Text = "Select";
                ddltoyearpt.SelectedItem.Text = "Select";
                ddlfrommonthpt.SelectedItem.Text = "Select";
                ddltomonthpt.SelectedItem.Text = "Select";
            }
            //barath 27.02.18
            string rebateAmt = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='RebateDeductAmount' and college_code='" + ddlcollege.SelectedItem.Value + "'");
            string[] Rebate = rebateAmt.Split('-');
            if (Rebate.Length == 2)
            {
                txtRebateAmt.Text = Convert.ToString(Rebate[0]);
                txtRebateDeductAmt.Text = Convert.ToString(Rebate[1]);
            }
            else
            {
                txtRebateAmt.Text = "0";
                txtRebateDeductAmt.Text = "0";
            }
            string educ_cess = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Educess' and college_code='" + ddlcollege.SelectedItem.Value + "'");
            if (educ_cess != "0" || educ_cess != "")
            {
                txteducess.Text = Convert.ToString(educ_cess);
            
            }
            //poo 28.10.17
            string round = "select LinkValue from New_InsSettings where LinkName='Round off Basic and Grade Pay' and college_code ='" + ddlcollege.SelectedItem.Value + "'";
            DataSet roundoff = new DataSet();
            roundoff = d2.select_method_wo_parameter(round, "Text");

            string roundoffvalue = d2.GetFunction(round).Trim();

            if (roundoffvalue != "0" && roundoffvalue != "" && roundoffvalue.Length > 0)
            {
                string[] rf = roundoffvalue.Split('-');

                txtgradepay.Text = rf[0];
                txtbasicpay.Text = rf[1];
            }
            else
            {
                txtgradepay.Text = "";
                txtbasicpay.Text = "";
            }

        }
        catch (Exception ex)
        {
            errmsg.Text = ex.ToString();
            errmsg.Visible = true;
        }
    }

    public void loadfinyearOtCol()
    {
        try
        {
            txt_OtColfin.Text = "Finance Year";
            chk_finOt.Checked = false;
            chkl_finOt.Items.Clear();
            if (ddl_otColleges.Items.Count > 0)
            {
                string collcode = ddl_otColleges.SelectedItem.Value.Trim();
                string selqry = "select (CONVERT(varchar(20), FinYearStart,103)+'-'+ CONVERT(varchar(20), FinYearEnd,103)) as financialyear,FinYearPK,FinYearName FROM FM_FinYearMaster  where CollegeCode=" + collcode + " ";
                ds.Clear();
                ds = d2.select_method_wo_parameter(selqry, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    chkl_finOt.DataSource = ds;
                    chkl_finOt.DataTextField = "financialyear";
                    chkl_finOt.DataValueField = "FinYearPK";
                    chkl_finOt.DataBind();
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void loadheaderOtCol()
    {
        try
        {
            chkl_headOt.Items.Clear();
            txt_OtColhdr.Text = "Header";
            chk_headOt.Checked = false;
            if (ddl_otColleges.Items.Count > 0)
            {
                string collcode = ddl_otColleges.SelectedItem.Value.Trim();
                string selqry = "select HeaderPK,HeaderName  from FM_HeaderMaster  where CollegeCode=" + collcode + " ";
                ds.Clear();
                ds = d2.select_method_wo_parameter(selqry, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    chkl_headOt.DataSource = ds;
                    chkl_headOt.DataTextField = "HeaderName";
                    chkl_headOt.DataValueField = "HeaderPK";
                    chkl_headOt.DataBind();
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void loadledOtCol()
    {
        try
        {
            txt_OtColLdg.Text = "Ledger";
            chk_ledgOt.Checked = false;
            chkl_ledgOt.Items.Clear();
            if (ddl_otColleges.Items.Count > 0)
            {
                string collcode = ddl_otColleges.SelectedItem.Value.Trim();
                string stream = GetSelectedItemsValueAsString(chkl_headOt);
                string selqry = "select LedgerPK,LedgerName  from FM_LedgerMaster where HeaderFK in ('" + stream + "') and CollegeCode=" + collcode + "";
                ds.Clear();
                ds = d2.select_method_wo_parameter(selqry, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    chkl_ledgOt.DataSource = ds;
                    chkl_ledgOt.DataTextField = "LedgerName";
                    chkl_ledgOt.DataValueField = "LedgerPK";
                    chkl_ledgOt.DataBind();
                }
                else
                {
                    chk_ledg.Checked = false; ;
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddl_otCol_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            loadfinyearOtCol();
            loadheaderOtCol();
            loadledOtCol();
            loadTransportHeaderot();
            loadTransportLedgerot();
            loadFineHeaderot();
            loadFineLedgerot();
            loadReadmHdFine();
            loadReadmLdFine();
            loadOtherJrHed();
            bindBtchO();
            binddegO(ddl_otColleges.SelectedValue);
            binddeptO(ddl_otColleges.SelectedValue);
            bindBtchRO();
            binddegRO(ddl_otColleges.SelectedValue);
            binddeptRO(ddl_otColleges.SelectedValue);
            loadUserRightsOtCol();


            #region Transfer refund settings
            string save0 = string.Empty;
            cbl_transferrefund.ClearSelection();//delsi1108
            string insqry1 = " select LinkValue from New_InsSettings where LinkName='Transfer and Refund Settings'  and user_code ='" + selected_usercode + "' and college_code ='" + ddl_otColleges.SelectedValue + "'";
            save0 = Convert.ToString(d2.GetFunction(insqry1));
            if (save0.Contains("1"))
                cbl_transferrefund.Items[0].Selected = true;
            if (save0.Contains("2"))
                cbl_transferrefund.Items[1].Selected = true;
            if (save0.Contains("3"))
                cbl_transferrefund.Items[2].Selected = true;
            if (save0.Contains("4"))
                cbl_transferrefund.Items[3].Selected = true;
            /* poomalar */
            if (save0.Contains("5"))
                cbl_transferrefund.Items[4].Selected = true;
            #endregion

            if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Current Sem/Year' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddl_otColleges.SelectedValue) + "'") == "0")
            {
                chk_yr.Checked = false;
            }
            else
            {
                chk_yr.Checked = true;
            }

            if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Duplicate Receipt For Student' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddl_otColleges.SelectedValue) + "'") == "0")
            {
                chk_duplicate.Checked = false;
            }
            else
            {
                chk_duplicate.Checked = true;
            }


            if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Receipt For Student' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddl_otColleges.SelectedValue) + "'") == "0")
            {
                chk_stud.Checked = false;
            }
            else
            {
                chk_stud.Checked = true;
            }


            if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Delete Receipt' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddl_otColleges.SelectedValue) + "'").Trim() == "0")
            {
                chk_delRcpt.Checked = false;
            }
            else
            {
                chk_delRcpt.Checked = true;
            }
            if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Preprint Receipt For Student' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddl_otColleges.SelectedValue) + "'") == "0")
            {
                chk_print.Checked = false;
            }
            else
            {
                chk_print.Checked = true;
            }
            if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Edit Receipt Date' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddl_otColleges.SelectedValue) + "'") == "0")
            {
                chk_editrpt.Checked = false;
            }
            else
            {
                chk_editrpt.Checked = true;
            }
            if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Cancel Receipt' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddl_otColleges.SelectedValue) + "'") == "0")
            {
                chk_canrpt.Checked = false;
            }
            else
            {
                chk_canrpt.Checked = true;
            }
            if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Lock Start Date' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddl_otColleges.SelectedValue) + "'") == "0")
            {
                chk_lsdate.Checked = false;
            }
            else
            {
                chk_lsdate.Checked = true;
            }


            if (cbl_Feecategory.Items.Count > 0)
            {
                foreach (ListItem li in cbl_Feecategory.Items)
                {
                    li.Selected = false;
                    string checkValue = d2.GetFunctionv("select LinkValue from New_InsSettings where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddl_otColleges.SelectedValue) + "' and LinkValue='" + li.Value + "'");
                    if (!string.IsNullOrEmpty(checkValue))
                    {
                        li.Selected = true;
                    }
                }
            }

            if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddl_otColleges.SelectedValue) + "'") == "0")
            {
                chk_fees.Checked = false;
            }
            else
            {
                chk_fees.Checked = true;
            }

            if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Yet to be paid with date' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddl_otColleges.SelectedValue) + "'") == "0")
            {
                chk_paid.Checked = false;
            }
            else
            {
                chk_paid.Checked = true;
            }
            if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Bank Statement Page Settings' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddl_otColleges.SelectedValue) + "'") == "0")
            {
                chk_bank.Checked = false;
            }
            else
            {
                chk_bank.Checked = true;
            }
            if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Challan Page Settings' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddl_otColleges.SelectedValue) + "'") == "0")
            {
                chk_chall.Checked = false;
            }
            else
            {
                chk_chall.Checked = true;
            }
            if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Selected Ledger in Challan Print' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddl_otColleges.SelectedValue) + "'") == "0")
            {
                chk_challhed.Checked = false;
            }
            else
            {
                chk_challhed.Checked = true;
            }
            if (d2.GetFunction("select LinkValue from inssettings where LinkName='Transport Link'  and college_code ='" + Convert.ToString(ddl_otColleges.SelectedValue) + "'") == "0")
            {
                chk_transfee.Checked = false;
            }
            else
            {
                chk_transfee.Checked = true;
            }
            //sudhagar semesterandyear setting
            if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='SemesterandYear' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddl_otColleges.SelectedValue) + "'") == "0")
            {
                chk_semyear.Checked = false;
            }
            else
            {
                chk_semyear.Checked = true;
            }
            //sudhagar automaticall clear dd setting 29-04 friday
            if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='AutomaticallyClearDD' and user_code ='" + selected_usercode + "' and college_code ='" + Convert.ToString(ddl_otColleges.SelectedValue) + "'") == "0")
            {
                chk_dd.Checked = false;
            }
            else
            {
                chk_dd.Checked = true;
            }



            insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanOrReceiptOrBoth' and user_code ='" + selected_usercode + "' and college_code ='" + ddl_otColleges.SelectedItem.Value + "' ";
            int save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 1)
            {
                //Receipt
                cbl_RcptChln.Items[0].Selected = true;
            }
            if (save1 == 2)
            {
                //Challan
                cbl_RcptChln.Items[1].Selected = true;
            }
            if (save1 == 3)
            {
                //Receipt and Challan
                cbl_RcptChln.Items[0].Selected = true;
                cbl_RcptChln.Items[1].Selected = true;
            }
            //Challan Receipt Priority
            insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptDefaultPriority' and user_code ='" + selected_usercode + "' and college_code ='" + ddl_otColleges.SelectedItem.Value + "'";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 0)
            {
                //Receipt as Default
                rbl_ChlRcptPriority.SelectedIndex = 0;
            }
            if (save1 == 1)
            {
                //Challan as Default
                rbl_ChlRcptPriority.SelectedIndex = 1;
            }
            //Headerwise or Group Header wise or Ledger wise
            insqry1 = "select LinkValue from New_InsSettings where LinkName='GroupHeaderOrHeaderOrLedger' and user_code ='" + selected_usercode + "' and college_code ='" + ddl_otColleges.SelectedItem.Value + "'";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 1)
            {
                //Group Header
                cbl_typeOfHdr.Items[0].Selected = true;
            }
            if (save1 == 2)
            {
                //Header
                cbl_typeOfHdr.Items[1].Selected = true;
            }
            if (save1 == 3)
            {
                //Ledger
                cbl_typeOfHdr.Items[2].Selected = true;
            }
            if (save1 == 4)
            {
                //All
                cbl_typeOfHdr.Items[0].Selected = true;
                cbl_typeOfHdr.Items[1].Selected = true;
                cbl_typeOfHdr.Items[2].Selected = true;
            }
            if (save1 == 5)
            {
                //GH and Ledger
                cbl_typeOfHdr.Items[0].Selected = true;
                cbl_typeOfHdr.Items[1].Selected = true;
            }
            if (save1 == 6)
            {
                //Ledger and Header                        
                cbl_typeOfHdr.Items[1].Selected = true;
                cbl_typeOfHdr.Items[2].Selected = true;
            }
            if (save1 == 7)
            {
                //GHeader and Ledger
                cbl_typeOfHdr.Items[0].Selected = true;
                cbl_typeOfHdr.Items[2].Selected = true;
            }
            //Is Challan or Receipt Header wise ?
            insqry1 = "select LinkValue from New_InsSettings where LinkName='HeaderWiseChallanorReceipt' and user_code ='" + selected_usercode + "' and college_code ='" + ddl_otColleges.SelectedItem.Value + "' ";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 2)
            {
                //If Challan Selected
                cbl_HdrwiseChlnRcpt.Items[0].Selected = true;
            }
            if (save1 == 1)
            {
                //If Receipt Selected
                cbl_HdrwiseChlnRcpt.Items[1].Selected = true;
            }
            if (save1 == 3)
            {
                cbl_HdrwiseChlnRcpt.Items[0].Selected = true;
                cbl_HdrwiseChlnRcpt.Items[1].Selected = true;
            }
            //Roll Number or Reg Number or Admission No or Application Number or Smart card number
            insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptRollNo' and user_code ='" + selected_usercode + "' and college_code ='" + ddl_otColleges.SelectedItem.Value + "'";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 1)
            {
                //Roll No
                cbl_RollRegAdmNo.Items[0].Selected = true;
            }
            insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptRegNo' and user_code ='" + selected_usercode + "' and college_code ='" + ddl_otColleges.SelectedItem.Value + "'";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 1)
            {
                //RegNo
                cbl_RollRegAdmNo.Items[1].Selected = true;
            }
            insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptRollAdmit' and user_code ='" + selected_usercode + "' and college_code ='" + ddl_otColleges.SelectedItem.Value + "'";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 1)
            {
                //Admission No - Roll Admit
                cbl_RollRegAdmNo.Items[2].Selected = true;
            }
            insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptAppFormNo' and user_code ='" + selected_usercode + "' and college_code ='" + ddl_otColleges.SelectedItem.Value + "' ";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 1)
            {
                //App Form Number - Application Number
                cbl_RollRegAdmNo.Items[3].Selected = true;
            }
            insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptSmartNo' and user_code ='" + selected_usercode + "' and college_code ='" + ddl_otColleges.SelectedItem.Value + "' ";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 1)
            {
                //Smart card Number - smart_serial_no
                cbl_RollRegAdmNo.Items[4].Selected = true;
            }
            insqry1 = "select LinkValue from New_InsSettings where LinkName='ExcessFeesType' and user_code ='" + selected_usercode + "' and college_code ='" + ddl_otColleges.SelectedItem.Value + "' ";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 1)
            {
                //Common
                cbl_excessType.Items[0].Selected = true;
                cbl_excessType.Items[1].Selected = false;
            }
            if (save1 == 2)
            {
                //Ledgerwise
                cbl_excessType.Items[0].Selected = false;
                cbl_excessType.Items[1].Selected = true;
            }
            insqry1 = "select LinkValue from New_InsSettings where LinkName='FineFeesType' and user_code ='" + selected_usercode + "' and college_code ='" + ddl_otColleges.SelectedItem.Value + "' ";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 1)
            {
                //Common
                chkFineType.Checked = true;
            }
            else
            {
                chkFineType.Checked = false;
            }

            //SCholarship
            insqry1 = "select LinkValue from New_InsSettings where LinkName='ScholarshipType' and user_code ='" + selected_usercode + "' and college_code ='" + ddl_otColleges.SelectedItem.Value + "' ";
            save1 = Convert.ToInt32(d2.GetFunction(insqry1));
            if (save1 == 0)
            {
                //Common
                cblScholarship.Items[0].Selected = true;
                cblScholarship.Items[1].Selected = false;
            }
            if (save1 == 1)
            {
                //Ledgerwise
                cblScholarship.Items[1].Selected = true;
                cblScholarship.Items[0].Selected = false;
            }


            insqry1 = "select LinkValue from New_InsSettings where LinkName='FinanceReceiptTabRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddl_otColleges.SelectedItem.Value + "' ";
            string strVal = Convert.ToString(d2.GetFunction(insqry1));
            if (!string.IsNullOrEmpty(strVal) && strVal != "0")
            {
                string[] strSpltVal = strVal.Split('$');
                if (strSpltVal.Length > 0)
                {
                    for (int rcpt = 0; rcpt < strSpltVal.Length; rcpt++)
                    {
                        switch (Convert.ToInt32(strSpltVal[rcpt]))
                        {
                            case 1:
                                cbRcptStud.Checked = true;
                                break;
                            case 2:
                                cbRcptStaff.Checked = true;
                                break;
                            case 3:
                                cbRcptVendor.Checked = true;
                                break;
                            case 4:
                                cbRcptOther.Checked = true;
                                break;
                        }
                    }
                }
            }

            cbPayStud.Checked = false;
            cbPayStaff.Checked = false;
            cbPayVendor.Checked = false;
            cbPayOther.Checked = false;
            strVal = string.Empty;
            insqry1 = "select LinkValue from New_InsSettings where LinkName='FinancePaymentTabRights' and user_code ='" + selected_usercode + "' and college_code ='" + ddl_otColleges.SelectedItem.Value + "' ";

            strVal = Convert.ToString(d2.GetFunction(insqry1));
            if (!string.IsNullOrEmpty(strVal) && strVal != "0")
            {
                string[] strSpltVal = strVal.Split('$');
                if (strSpltVal.Length > 0)
                {
                    for (int rcpt = 0; rcpt < strSpltVal.Length; rcpt++)
                    {
                        switch (Convert.ToInt32(strSpltVal[rcpt]))
                        {
                            case 1:
                                cbPayStud.Checked = true;
                                break;
                            case 2:
                                cbPayStaff.Checked = true;
                                break;
                            case 3:
                                cbPayVendor.Checked = true;
                                break;
                            case 4:
                                cbPayOther.Checked = true;
                                break;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void chk_finOt_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckBoxChangedEvent(chkl_finOt, chk_finOt, txt_OtColfin, "Finance Year");
        }
        catch (Exception ex)
        {
        }
    }

    protected void chkl_finOt_OnIndexChange(object sender, EventArgs e)
    {
        try
        {
            CallCheckBoxListChangedEvent(chkl_finOt, chk_finOt, txt_OtColfin, "Finance Year");
        }
        catch (Exception ex)
        {
        }
    }

    protected void chk_headOt_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckBoxChangedEvent(chkl_headOt, chk_headOt, txt_OtColhdr, "Header");
            loadledOtCol();
            for (int i = 0; i < chkl_ledgOt.Items.Count; i++)
            {
                chkl_ledgOt.Items[i].Selected = true;
            }
            CallCheckBoxListChangedEvent(chkl_ledgOt, chk_ledgOt, txt_OtColLdg, "Ledger");
        }
        catch (Exception ex)
        {
        }
    }

    protected void chkl_headOt_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckBoxListChangedEvent(chkl_headOt, chk_headOt, txt_OtColhdr, "Header");
            loadledOtCol();
            for (int i = 0; i < chkl_ledgOt.Items.Count; i++)
            {
                chkl_ledgOt.Items[i].Selected = true;
            }
            CallCheckBoxListChangedEvent(chkl_ledgOt, chk_ledgOt, txt_OtColLdg, "Ledger");
        }
        catch (Exception ex)
        {
        }
    }

    protected void chk_ledgOt_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckBoxChangedEvent(chkl_ledgOt, chk_ledgOt, txt_OtColLdg, "Ledger");
        }
        catch (Exception ex)
        {
        }
    }

    protected void chkl_ledgOt_Indexchanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckBoxListChangedEvent(chkl_ledgOt, chk_ledgOt, txt_OtColLdg, "Ledger");
        }
        catch (Exception ex)
        {
        }
    }

    protected void cb_otCol_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
        }
        catch (Exception ex)
        {
        }
    }

    private string GetSelectedItemsValue(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder sbSelected = new System.Text.StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (sbSelected.Length == 0)
                    {
                        sbSelected.Append(Convert.ToString(cblSelected.Items[sel].Value));
                    }
                    else
                    {
                        sbSelected.Append("," + Convert.ToString(cblSelected.Items[sel].Value));
                    }
                }
            }
        }
        catch { sbSelected.Clear(); }
        return sbSelected.ToString();
    }

    private string GetSelectedItemsValueAsString(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder sbSelected = new System.Text.StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (sbSelected.Length == 0)
                    {
                        sbSelected.Append(Convert.ToString(cblSelected.Items[sel].Value));
                    }
                    else
                    {
                        sbSelected.Append("','" + Convert.ToString(cblSelected.Items[sel].Value));
                    }
                }
            }
        }
        catch { sbSelected.Clear(); }
        return sbSelected.ToString();
    }

    private string GetSelectedItemsText(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder sbSelected = new System.Text.StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (sbSelected.Length == 0)
                    {
                        sbSelected.Append(Convert.ToString(cblSelected.Items[sel].Text));
                    }
                    else
                    {
                        sbSelected.Append("','" + Convert.ToString(cblSelected.Items[sel].Text));
                    }
                }
            }
        }
        catch { sbSelected.Clear(); }
        return sbSelected.ToString();
    }

    private List<string> GetSelectedItemsValueList(CheckBoxList cblSelected)
    {
        System.Collections.Generic.List<string> lsSelected = new System.Collections.Generic.List<string>();
        try
        {
            for (int list = 0; list < cblSelected.Items.Count; list++)
            {
                if (cblSelected.Items[list].Selected)
                {
                    lsSelected.Add(cblSelected.Items[list].Value);
                }
            }
        }
        catch { lsSelected.Clear(); }
        return lsSelected;
    }

    private List<string> GetSelectedItemsTextList(CheckBoxList cblSelected)
    {
        System.Collections.Generic.List<string> lsSelected = new System.Collections.Generic.List<string>();
        try
        {
            for (int list = 0; list < cblSelected.Items.Count; list++)
            {
                if (cblSelected.Items[list].Selected)
                {
                    lsSelected.Add(cblSelected.Items[list].Text);
                }
            }
        }
        catch { lsSelected.Clear(); }
        return lsSelected;
    }

    private List<string> GetItemsValueList(CheckBoxList cblItems)
    {
        System.Collections.Generic.List<string> lsItems = new System.Collections.Generic.List<string>();
        try
        {
            for (int list = 0; list < cblItems.Items.Count; list++)
            {
                lsItems.Add(cblItems.Items[list].Value);
            }
        }
        catch { lsItems.Clear(); }
        return lsItems;
    }

    private void CallCheckBoxChangedEvent(CheckBoxList cbl, CheckBox cb, TextBox tb, string dispString)
    {
        try
        {
            tb.Text = dispString;
            if (cb.Checked)
            {
                for (int i = 0; i < cbl.Items.Count; i++)
                {
                    cbl.Items[i].Selected = true;
                }
                tb.Text = dispString + "(" + cbl.Items.Count + ")";
            }
            else
            {
                for (int i = 0; i < cbl.Items.Count; i++)
                {
                    cbl.Items[i].Selected = false;
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void CallCheckBoxListChangedEvent(CheckBoxList cbl, CheckBox cb, TextBox tb, string dispString)
    {
        try
        {
            cb.Checked = false;
            tb.Text = dispString;
            int count = 0;
            for (int i = 0; i < cbl.Items.Count; i++)
            {
                if (cbl.Items[i].Selected == true)
                {
                    count++;
                }
            }
            tb.Text = dispString + "(" + count + ")";
            if (count == cbl.Items.Count)
            {
                cb.Checked = true;
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void loadOtherCOlleges(object sender, EventArgs e)
    {
        try
        {
            DataSet dsload = dasri.select_method_wo_parameter("select distinct coll_acronymn,college_code from collinfo order by coll_acronymn", "Text");
            if (dsload.Tables[0].Rows.Count > 0)
            {
                ddl_otColleges.DataSource = dsload;
                ddl_otColleges.DataValueField = "college_code";
                ddl_otColleges.DataTextField = "coll_acronymn";
                ddl_otColleges.DataBind();
                for (int i = 0; i < ddl_otColleges.Items.Count; i++)
                {
                    if (ddl_otColleges.Items[i].Value.Trim() == ddlcollege.SelectedItem.Value.Trim())
                    {
                        ddl_otColleges.Items.RemoveAt(i);
                    }
                }
                ddl_otCol_CheckedChanged(sender, e);
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnOtCollSave_OnClick(object sender, EventArgs e)
    {
        imgAlert.Visible = true;
        try
        {
            //Rights for Users to various colleges
            bool saved = false;
            if (cb_AllowOtCol.Checked)
            {
                if (ddl_otColleges.Items.Count > 0)
                {
                    string college = ddl_otColleges.SelectedItem.Value;
                    for (int i = 0; i < ddluser.Items.Count; i++)
                    {
                        if (ddluser.Items[i].Selected == true)
                        {
                            selected_usercode = Convert.ToInt16(ddluser.Items[i].Value);
                            if (rdb_ind.Checked == true)
                            {
                                userorgropcode = " and usercode='" + selected_usercode.ToString() + "'";
                                user_gropcode = " and user_code='" + selected_usercode.ToString() + "'";
                                usergroup = "  usercode='" + selected_usercode.ToString() + "'";
                                strusergruop = "usercode";
                                struser_gruop = "user_code";
                            }
                            else if (rdb_grp.Checked == true)
                            {
                                userorgropcode = " and group_code='" + selected_usercode.ToString() + "'";
                                user_gropcode = " and group_code='" + selected_usercode.ToString() + "'";
                                usergroup = "  group_code='" + selected_usercode.ToString() + "'";
                                strusergruop = "group_code";
                                struser_gruop = "group_code";
                            }
                            #region FinYear, Headers and Ledgers
                            string finfk = string.Empty;
                            for (int ik = 0; ik < chkl_finOt.Items.Count; ik++)
                            {
                                finfk = Convert.ToString(chkl_finOt.Items[ik].Value);
                                if (finfk != "")
                                {
                                    if (chkl_finOt.Items[ik].Selected == true)
                                    {
                                        string insqry = "if not exists (select * from FS_FinYearPrivilage where UserCode='" + selected_usercode + "' and FinYearFK='" + finfk + "' and CollegeCode='" + ddl_otColleges.SelectedItem.Value + "' ) INSERT INTO  FS_FinYearPrivilage(UserCode,FinYearFK,CollegeCode) values( '" + selected_usercode + "', '" + finfk + "','" + ddl_otColleges.SelectedItem.Value + "') ";
                                        int fin = d2.update_method_wo_parameter(insqry, "Text");
                                    }
                                    else
                                    {
                                        string insqry = "if exists (select * from FS_FinYearPrivilage where UserCode='" + selected_usercode + "' and FinYearFK='" + finfk + "' and CollegeCode='" + ddl_otColleges.SelectedItem.Value + "' ) delete from  FS_FinYearPrivilage where UserCode='" + selected_usercode + "' and FinYearFK='" + finfk + "' and CollegeCode='" + ddl_otColleges.SelectedItem.Value + "' ";
                                        int fin = d2.update_method_wo_parameter(insqry, "Text");
                                    }
                                }
                            }
                            string strhead = string.Empty;
                            for (int ij = 0; ij < chkl_headOt.Items.Count; ij++)
                            {
                                strhead = Convert.ToString(chkl_headOt.Items[ij].Value);
                                if (strhead != "")
                                {
                                    if (chkl_headOt.Items[ij].Selected == true)
                                    {
                                        string insheqry = "if not exists (select * from FS_HeaderPrivilage where UserCode='" + selected_usercode + "' and HeaderFK='" + strhead + "' and CollegeCode='" + ddl_otColleges.SelectedItem.Value + "' ) insert into FS_HeaderPrivilage(UserCode,HeaderFK,CollegeCode) values( '" + selected_usercode + "', '" + strhead + "','" + ddl_otColleges.SelectedItem.Value + "')";
                                        int hed = d2.update_method_wo_parameter(insheqry, "Text");
                                    }
                                    else
                                    {
                                        string insqry = "if exists (select * from FS_HeaderPrivilage where UserCode='" + selected_usercode + "' and HeaderFK='" + strhead + "' and CollegeCode='" + ddl_otColleges.SelectedItem.Value + "' ) delete from  FS_HeaderPrivilage where UserCode='" + selected_usercode + "' and HeaderFK='" + strhead + "' and CollegeCode='" + ddl_otColleges.SelectedItem.Value + "' ";
                                        int fin = d2.update_method_wo_parameter(insqry, "Text");
                                    }
                                }
                            }
                            string strledger = string.Empty;
                            for (int im = 0; im < chkl_ledgOt.Items.Count; im++)
                            {
                                strledger = Convert.ToString(chkl_ledgOt.Items[im].Value);
                                string headerfk = d2.GetFunction("select HeaderFK from FM_LedgerMaster where LedgerPK='" + strledger + "' ");
                                if (strledger != "")
                                {
                                    if (chkl_ledgOt.Items[im].Selected == true)
                                    {
                                        string insledqry = "if not exists (select * from FS_LedgerPrivilage where UserCode='" + selected_usercode + "' and HeaderFK='" + headerfk + "' and CollegeCode='" + college + "'  and LedgerFK='" + strledger + "')  insert into  FS_LedgerPrivilage (UserCode,HeaderFK,LedgerFK,CollegeCode) values('" + selected_usercode + "','" + headerfk + "','" + strledger + "','" + college + "') ";
                                        int led = d2.update_method_wo_parameter(insledqry, "Text");
                                    }
                                    else
                                    {
                                        string insledqry = "if exists (select * from FS_LedgerPrivilage where UserCode='" + selected_usercode + "' and HeaderFK='" + headerfk + "' and CollegeCode='" + college + "'  and LedgerFK='" + strledger + "')  delete from  FS_LedgerPrivilage where UserCode='" + selected_usercode + "' and HeaderFK='" + headerfk + "' and CollegeCode='" + college + "'  and LedgerFK='" + strledger + "' ";
                                        int led = d2.update_method_wo_parameter(insledqry, "Text");
                                    }
                                }
                            }
                            #endregion
                            #region College On time setting 1
                            /////Display Cur sem/year in journal
                            int checkvalue = 0;
                            if (chk_yr.Checked == true)
                            {
                                checkvalue = 1;
                            }
                            string insqry1 = "if exists (select * from New_InsSettings where LinkName='Current Sem/Year' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Current Sem/Year' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Current Sem/Year','" + checkvalue + "','" + selected_usercode + "','" + college + "')";
                            int save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            //////Student Receipt//////////
                            checkvalue = 0;
                            if (chk_stud.Checked == true)
                            {
                                checkvalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='Receipt For Student' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Receipt For Student' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Receipt For Student','" + checkvalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            //////////////depulicate receipt////////////////////
                            checkvalue = 0;
                            if (chk_duplicate.Checked == true)
                            {
                                checkvalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='Duplicate Receipt For Student' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Duplicate Receipt For Student' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Duplicate Receipt For Student','" + checkvalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            //////////////Duplicate receipt////////////////////
                            checkvalue = 0;
                            if (chk_delRcpt.Checked == true)
                            {
                                checkvalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='Delete Receipt' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Delete Receipt' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Delete Receipt','" + checkvalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            ////////////////////pre print///////////////////
                            checkvalue = 0;
                            if (chk_print.Checked == true)
                            {
                                checkvalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='Preprint Receipt For Student' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Preprint Receipt For Student' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Preprint Receipt For Student','" + checkvalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            //////////////////////////////edit receipt////////////////////
                            checkvalue = 0;
                            if (chk_editrpt.Checked == true)
                            {
                                checkvalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='Edit Receipt Date' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Edit Receipt Date' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Edit Receipt Date','" + checkvalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            ///////////////////////////cancel receipt///////////////
                            checkvalue = 0;
                            if (chk_canrpt.Checked == true)
                            {
                                checkvalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='Cancel Receipt' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Cancel Receipt' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Cancel Receipt','" + checkvalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            ///////////////////////////////locak start date///////////////////////////
                            checkvalue = 0;
                            if (chk_lsdate.Checked == true)
                            {
                                checkvalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='Lock Start Date' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Lock Start Date' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Lock Start Date','" + checkvalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            ////////////////////////////fees year wise////////////////
                            checkvalue = 0;
                            foreach (ListItem li in cbl_Feecategory.Items)
                            {
                                string selValue = li.Value;
                                if (li.Selected)
                                {
                                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' and  LinkValue='" + selValue + "') update New_InsSettings set LinkValue ='" + selValue + "' where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' and  LinkValue='" + selValue + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Fee Yearwise','" + selValue + "','" + selected_usercode + "','" + college + "')";
                                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                                }
                                else
                                {
                                    insqry1 = "delete from New_InsSettings where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' and  LinkValue='" + selValue + "'";
                                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                                }
                            }
                            //////////////////////////////fees year wise////////////////
                            //checkvalue = 0;
                            //if (chk_fees.Checked == true)
                            //{
                            //    checkvalue = 1;
                            //}
                            //insqry1 = "if exists (select * from New_InsSettings where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Fee Yearwise','" + checkvalue + "','" + selected_usercode + "','" + college + "')";
                            //save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            ///////////////////////////yet to be paid to selected date///////////////
                            checkvalue = 0;
                            if (chk_paid.Checked == true)
                            {
                                checkvalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='Yet to be paid with date' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Yet to be paid with date' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Yet to be paid with date','" + checkvalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            ////////////////////////////bank statement page settings/////////////
                            checkvalue = 0;
                            if (chk_bank.Checked == true)
                            {
                                checkvalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='Bank Statement Page Settings' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Bank Statement Page Settings' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Bank Statement Page Settings','" + checkvalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            //////////////////////////challan page settings////////////
                            checkvalue = 0;
                            if (chk_chall.Checked == true)
                            {
                                checkvalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='Challan Page Settings' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Challan Page Settings' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Challan Page Settings','" + checkvalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            /////////////////////////////selected header challan print/////////
                            checkvalue = 0;
                            if (chk_challhed.Checked == true)
                            {
                                checkvalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='Selected Ledger in Challan Print' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='Selected Ledger in Challan Print' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Selected Ledger in Challan Print','" + checkvalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            ////Transport Fee Setting
                            checkvalue = 0;
                            if (chk_transfee.Checked == true)
                            {
                                checkvalue = 1;
                            }
                            insqry1 = "if exists (select * from inssettings where LinkName='Transport Link'  and college_code ='" + college + "' ) update inssettings set LinkValue ='" + checkvalue + "' where LinkName='Transport Link'  and college_code ='" + college + "' else insert into inssettings(LinkName,LinkValue,college_code) values ('Transport Link','" + checkvalue + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            //sudhagar semesteranYear setting 14-04
                            checkvalue = 0;
                            if (chk_semyear.Checked == true)
                            {
                                checkvalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='SemesterandYear' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='SemesterandYear' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('SemesterandYear','" + checkvalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            //sudhagar automatically clear dd
                            checkvalue = 0;
                            if (chk_dd.Checked == true)
                            {
                                checkvalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='AutomaticallyClearDD' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='AutomaticallyClearDD' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('AutomaticallyClearDD','" + checkvalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            #endregion
                            #region Transport ledger Settings
                            //Transport Ledger Setttings
                            if (ddl_otTransHeader.Items.Count > 0)
                            {
                                if (ddl_otTransLedger.Items.Count > 0)
                                {
                                    string store = Convert.ToString(ddl_otTransHeader.SelectedItem.Value) + "," + Convert.ToString(ddl_otTransLedger.SelectedItem.Value);
                                    insqry1 = "if exists (select * from New_InsSettings where LinkName='TransportLedgerValue' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + store + "' where LinkName='TransportLedgerValue' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('TransportLedgerValue','" + store + "','" + selected_usercode + "','" + college + "')";
                                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                                }
                            }
                            #endregion
                            #region Save Challan Receipt, Excess, Scholarship, Roll Number
                            //Receipt or Challan or Both
                            int storevalue = 0;
                            if (cbl_RcptChln.Items[0].Selected == true)
                            {
                                //Receipt
                                storevalue = 1;
                            }
                            if (cbl_RcptChln.Items[1].Selected == true)
                            {
                                //Challan
                                storevalue = 2;
                            }
                            if (cbl_RcptChln.Items[0].Selected == true && cbl_RcptChln.Items[1].Selected == true)
                            {
                                //Receipt and Challan
                                storevalue = 3;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='ChallanOrReceiptOrBoth' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ChallanOrReceiptOrBoth' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ChallanOrReceiptOrBoth','" + storevalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            //Challan Receipt Priority
                            storevalue = 0;
                            if (rbl_ChlRcptPriority.SelectedIndex == 0)
                            {
                                //Receipt as Default
                                storevalue = 0;
                            }
                            if (rbl_ChlRcptPriority.SelectedIndex == 1)
                            {
                                //Challan as Default
                                storevalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='ChallanReceiptDefaultPriority' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ChallanReceiptDefaultPriority' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ChallanReceiptDefaultPriority','" + storevalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            //Headerwise or Group Header wise or Ledger wise
                            storevalue = 0;
                            if (cbl_typeOfHdr.Items[0].Selected == true)
                            {
                                //Group Header
                                storevalue = 1;
                            }
                            if (cbl_typeOfHdr.Items[1].Selected == true)
                            {
                                //Header
                                storevalue = 2;
                            }
                            if (cbl_typeOfHdr.Items[2].Selected == true)
                            {
                                //Ledger
                                storevalue = 3;
                            }
                            if (cbl_typeOfHdr.Items[0].Selected == true && cbl_typeOfHdr.Items[1].Selected == true)
                            {
                                //GH and Ledger
                                storevalue = 5;
                            }
                            if (cbl_typeOfHdr.Items[1].Selected == true && cbl_typeOfHdr.Items[2].Selected == true)
                            {
                                //Ledger and Header
                                storevalue = 6;
                            }
                            if (cbl_typeOfHdr.Items[0].Selected == true && cbl_typeOfHdr.Items[2].Selected == true)
                            {
                                //GHeader and Ledger
                                storevalue = 7;
                            }
                            if (cbl_typeOfHdr.Items[0].Selected == true && cbl_typeOfHdr.Items[1].Selected == true && cbl_typeOfHdr.Items[2].Selected == true)
                            {
                                //All
                                storevalue = 4;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='GroupHeaderOrHeaderOrLedger' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='GroupHeaderOrHeaderOrLedger' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('GroupHeaderOrHeaderOrLedger','" + storevalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");


                            //Is Challan or Receipt Header wise ?
                            storevalue = 0;
                            if (cbl_HdrwiseChlnRcpt.Items[0].Selected)
                            {
                                //If Challan Selected
                                storevalue = 2;
                            }
                            if (cbl_HdrwiseChlnRcpt.Items[1].Selected)
                            {
                                //If Receipt Selected
                                storevalue = 1;
                            }
                            if (cbl_HdrwiseChlnRcpt.Items[0].Selected && cbl_HdrwiseChlnRcpt.Items[1].Selected)
                            {
                                storevalue = 3;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='HeaderWiseChallanorReceipt' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='HeaderWiseChallanorReceipt' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('HeaderWiseChallanorReceipt','" + storevalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            //Roll Number or Reg Number or Admission No or Application Number
                            storevalue = 0;
                            if (cbl_RollRegAdmNo.Items[0].Selected)
                            {
                                //Roll No
                                storevalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='ChallanReceiptRollNo' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ChallanReceiptRollNo' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ChallanReceiptRollNo','" + storevalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            storevalue = 0;
                            if (cbl_RollRegAdmNo.Items[1].Selected)
                            {
                                //RegNo
                                storevalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='ChallanReceiptRegNo' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ChallanReceiptRegNo' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ChallanReceiptRegNo','" + storevalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            storevalue = 0;
                            if (cbl_RollRegAdmNo.Items[2].Selected)
                            {
                                //Admission No - Roll Admit
                                storevalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='ChallanReceiptRollAdmit' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ChallanReceiptRollAdmit' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ChallanReceiptRollAdmit','" + storevalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            storevalue = 0;
                            if (cbl_RollRegAdmNo.Items[3].Selected)
                            {
                                //App Form Number - Application Number
                                storevalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='ChallanReceiptAppFormNo' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ChallanReceiptAppFormNo' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ChallanReceiptAppFormNo','" + storevalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            storevalue = 0;
                            if (cbl_RollRegAdmNo.Items[4].Selected)
                            {
                                //Smart Card Number - smart_serial_no
                                storevalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='ChallanReceiptSmartNo' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ChallanReceiptSmartNo' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ChallanReceiptSmartNo','" + storevalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            storevalue = 0;
                            if (cbl_excessType.Items[0].Selected)
                            {
                                //Common
                                storevalue = 1;
                            }
                            else
                                if (cbl_excessType.Items[1].Selected)
                                {
                                    //Ledgerwise
                                    storevalue = 2;
                                }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='ExcessFeesType' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ExcessFeesType' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ExcessFeesType','" + storevalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            //FIne Type
                            storevalue = 0;
                            if (chkFineType.Checked)
                            {
                                //LedgerWIse
                                storevalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='FineFeesType' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='FineFeesType' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('FineFeesType','" + storevalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            //SCholarship
                            storevalue = 0;
                            if (cblScholarship.Items[0].Selected)
                            {
                                //Common
                                storevalue = 0;
                            }
                            else
                                if (cblScholarship.Items[1].Selected)
                                {
                                    //Ledgerwise
                                    storevalue = 1;
                                }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='ScholarshipType' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='ScholarshipType' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ScholarshipType','" + storevalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            #endregion
                            #region Others
                            ////////////////////////////reciept/challan no rights
                            if (chkreciept.Checked == true && chkchallan.Checked == false)
                            {
                                string savereptchal = "if exists(select * from Master_Settings where settings='Reciept/Challan No Rights' " + userorgropcode + " )update Master_Settings set value='1' where settings='Reciept/Challan No Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Reciept/Challan No Rights','1')";
                                int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                            }
                            if (chkchallan.Checked == true && chkreciept.Checked == false)
                            {
                                string savereptchal = "if exists(select * from Master_Settings where settings='Reciept/Challan No Rights' " + userorgropcode + " )update Master_Settings set value='2' where settings='Reciept/Challan No Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Reciept/Challan No Rights','2')";
                                int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                            }
                            if (chkchallan.Checked == true && chkreciept.Checked == true)
                            {
                                string savereptchal = "if exists(select * from Master_Settings where settings='Reciept/Challan No Rights' " + userorgropcode + " )update Master_Settings set value='3' where settings='Reciept/Challan No Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Reciept/Challan No Rights','3')";
                                int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                            }
                            if (chkchallan.Checked == false && chkreciept.Checked == false)
                            {
                                string savereptchal = "if exists(select * from Master_Settings where settings='Reciept/Challan No Rights' " + userorgropcode + " )update Master_Settings set value='0' where settings='Reciept/Challan No Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Reciept/Challan No Rights','0')";
                                int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                            }
                            ///////payment rights
                            if (chkpety.Checked == true && chkbank.Checked == false)
                            {
                                string savereptchal = "if exists(select * from Master_Settings where settings='Payment Rights' " + userorgropcode + " )update Master_Settings set value='1' where settings='Payment Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Payment Rights','1')";
                                int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                            }
                            if (chkbank.Checked == true && chkpety.Checked == false)
                            {
                                string savereptchal = "if exists(select * from Master_Settings where settings='Payment Rights' " + userorgropcode + " )update Master_Settings set value='2' where settings='Payment Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Payment Rights','2')";
                                int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                            }
                            if (chkpety.Checked == true && chkbank.Checked == true)
                            {
                                string savereptchal = "if exists(select * from Master_Settings where settings='Payment Rights' " + userorgropcode + " )update Master_Settings set value='3' where settings='Payment Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Payment Rights','3')";
                                int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                            }
                            if (chkpety.Checked == false && chkbank.Checked == false)
                            {
                                string savereptchal = "if exists(select * from Master_Settings where settings='Payment Rights' " + userorgropcode + " )update Master_Settings set value='0' where settings='Payment Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Payment Rights','0')";
                                int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                            }
                            if (rb_shift.Checked == true)
                            {
                                string savestream = "if exists(select * from Master_Settings where settings='Stream/Shift Rights' " + userorgropcode + " )update Master_Settings set value='1' where settings='Stream/Shift Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Stream/Shift Rights','1')";
                                int save = dasri.update_method_wo_parameter(savestream, "Text");
                            }
                            if (rb_stream.Checked == true)
                            {
                                string savestream = "if exists(select * from Master_Settings where settings='Stream/Shift Rights' " + userorgropcode + " )update Master_Settings set value='2' where settings='Stream/Shift Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Stream/Shift Rights','2')";
                                int save = dasri.update_method_wo_parameter(savestream, "Text");
                            }
                            //// Refund Setting rights
                            if (rbwithdept.Checked == true)
                            {
                                string savereptchal = "if exists(select * from Master_Settings where settings='Consession And Refund Rights' " + userorgropcode + " )update Master_Settings set value='1' where settings='Consession And Refund Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Consession And Refund Rights','1')";
                                int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                            }
                            else if (rbwithoutdept.Checked == true)
                            {
                                string savereptchal = "if exists(select * from Master_Settings where settings='Consession And Refund Rights' " + userorgropcode + " )update Master_Settings set value='2' where settings='Consession And Refund Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Consession And Refund Rights','2')";
                                int save = dasri.update_method_wo_parameter(savereptchal, "Text");
                            }
                            if (rb_detl.Checked == true)
                            {
                                string savefeerights = "if exists(select * from Master_Settings where settings='Fees Rights' " + userorgropcode + " )update Master_Settings set value='1' where settings='Fees Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Fees Rights','1')";
                                int save = dasri.update_method_wo_parameter(savefeerights, "Text");
                            }
                            if (rb_withledger.Checked == true)
                            {
                                string savefeerights = "if exists(select * from Master_Settings where settings='Fees Rights' " + userorgropcode + " )update Master_Settings set value='2' where settings='Fees Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Fees Rights','2')";
                                int save = dasri.update_method_wo_parameter(savefeerights, "Text");
                            }
                            if (rb_withoutledger.Checked == true)
                            {
                                string savefeerights = "if exists(select * from Master_Settings where settings='Fees Rights' " + userorgropcode + " )update Master_Settings set value='3' where settings='Fees Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Fees Rights','3')";
                                int save = dasri.update_method_wo_parameter(savefeerights, "Text");
                            }
                            if (chkmacadd.Checked == true)
                            {
                                string savemac = "if exists(select * from Master_Settings where settings='Check for MacAddress' " + userorgropcode + " )update Master_Settings set value='1' where settings='Check for MacAddress' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Check for MacAddress','1')";
                                int savecount = dasri.update_method_wo_parameter(savemac, "text");
                            }
                            else
                            {
                                string savemac = "if exists(select * from Master_Settings where settings='Check for MacAddress' " + userorgropcode + " )update Master_Settings set value='0' where settings='Check for MacAddress' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Check for MacAddress','0')";
                                savemac = savemac + "if exists(select * from Master_Settings where settings='Mac Address Rights' " + userorgropcode + " )update Master_Settings set value='0' where settings='Mac Address Rights' " + userorgropcode + " else insert into Master_Settings (" + strusergruop + ",settings,value) values(" + selected_usercode.ToString() + ",'Mac Address Rights','0')";
                                int savecount = dasri.update_method_wo_parameter(savemac, "text");
                            }
                            #endregion

                            #region readmission fee fine setting
                            ////added by sudhagar 12.03.2017
                            //if (ddlreadmhdsnd.Items.Count > 0)
                            //{
                            //    if (ddlreadmldsnd.Items.Count > 0)
                            //    {
                            //        string store = Convert.ToString(ddlreadmhdsnd.SelectedItem.Value) + "," + Convert.ToString(ddlreadmldsnd.SelectedItem.Value);
                            //        insqry1 = "if exists (select * from New_InsSettings where LinkName='ReAdmissionFessSettings' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + store + "' where LinkName='ReAdmissionFessSettings' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ReAdmissionFessSettings','" + store + "','" + selected_usercode + "','" + college + "')";
                            //        save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            //    }
                            //}

                            storevalue = 0;
                            string payValue = string.Empty;
                            if (cbinclpay.Checked)
                                storevalue = 1;
                            if (storevalue == 1)
                            {
                                for (int pay = 0; pay < cblpaymode.Items.Count; pay++)
                                {
                                    if (cblpaymode.Items[pay].Selected == true)
                                    {
                                        if (payValue == string.Empty)
                                            payValue = Convert.ToString(cblpaymode.Items[pay].Value);
                                        else
                                            payValue = payValue + "," + Convert.ToString(cblpaymode.Items[pay].Value);
                                    }
                                }
                            }
                            if (payValue == string.Empty)
                                payValue = "0";
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='IncludePaymodeSettings' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='IncludePaymodeSettings' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('IncludePaymodeSettings','" + storevalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            save1 = 0;
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='IncludePaymodeSettingsValue' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + payValue + "' where LinkName='IncludePaymodeSettingsValue' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('IncludePaymodeSettingsValue','" + payValue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            #endregion

                            //added by sudhagar 19.06.2017 for journal fees settings to other colleges                          
                            if (ddlOtherJrHed.Items.Count > 0)
                            {
                                if (ddlOtherJrLed.Items.Count > 0)
                                {
                                    string linkName = "JournalFessSettings";
                                    string store = Convert.ToString(ddlOtherJrHed.SelectedItem.Value) + "," + Convert.ToString(ddlOtherJrLed.SelectedItem.Value);
                                    insqry1 = "if exists (select * from New_InsSettings where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + store + "' where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('" + linkName + "','" + store + "','" + selected_usercode + "','" + college + "')";
                                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                                }
                            }

                            //added by sudhagar 23.08.2017
                            #region transfer refund settings
                            //03.08.17
                            string transferRefund = string.Empty;
                            for (int k = 0; k < cbl_transferrefund.Items.Count; k++)
                            {
                                if (cbl_transferrefund.Items[k].Selected == true)
                                {
                                    transferRefund += "," + Convert.ToString(cbl_transferrefund.Items[k].Value);
                                }
                            }
                            if (!string.IsNullOrEmpty(transferRefund))
                            {
                                insqry1 = "if exists (select * from New_InsSettings where LinkName='Transfer and Refund Settings' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + transferRefund.TrimStart(',') + "' where LinkName='Transfer and Refund Settings' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Transfer and Refund Settings','" + transferRefund.TrimStart(',') + "','" + selected_usercode + "','" + college + "')";
                                save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            }
                            #endregion

                            //cash deposit cumulative added by sudhagar 06/07/2016
                            #region
                            string setname = "Cash Deposit Cumulative";
                            if (cbcontra.Checked == true)
                                checkvalue = 1;
                            else
                                checkvalue = 0;
                            string conTra = "if exists (select * from New_InsSettings where LinkName='" + setname + "' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + checkvalue + "' where LinkName='" + setname + "' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('" + setname + "','" + checkvalue + "','" + selected_usercode + "','" + college + "')";
                            int saves = d2.update_method_wo_parameter(conTra, "Text");

                            //edit receipt no 18.03.2017 by sudhagar
                            int cbclrval = 0;
                            setname = "EditReceiptNo";
                            if (cbeditrcptno.Checked == true)
                                cbclrval = 1;
                            string cbclrIns = "if exists (select * from New_InsSettings where LinkName='" + setname + "' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + cbclrval + "' where LinkName='" + setname + "' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('" + setname + "','" + cbclrval + "','" + selected_usercode + "','" + college + "')";
                            saves = d2.update_method_wo_parameter(cbclrIns, "Text");
                            #endregion

                            #region fine added by sudhagar 08.09.2017
                            //Fine Ledger Setting added by sudhagar 08.09.2017

                            bool boolBatch = getSelectedCount(cblObatch);
                            bool boolDegree = getSelectedCount(cblOdept);
                            if (boolBatch && boolDegree && ddl_otFineHeader.Items.Count > 0 && ddl_otFineLedger.Items.Count > 0)
                            {
                                //string batch = Convert.ToString(getCblSelectedValue(cbl_batch));
                                //string degree = Convert.ToString(getCblSelectedValue(cbl_dept));
                                string batch = string.Empty;
                                string degree = string.Empty;
                                string hdFK = Convert.ToString(ddl_otFineHeader.SelectedItem.Value);
                                string ldFK = Convert.ToString(ddl_otFineLedger.SelectedItem.Value);
                                string fineldfk = Convert.ToString(ddl_Fineledger2.SelectedItem.Value);//delsi 29/06
                                for (int bat = 0; bat < cblObatch.Items.Count; bat++)
                                {
                                    if (!cblObatch.Items[bat].Selected)
                                        continue;
                                    batch = Convert.ToString(cblObatch.Items[bat].Value);
                                    for (int deg = 0; deg < cblOdept.Items.Count; deg++)
                                    {
                                        if (!cblOdept.Items[deg].Selected)
                                            continue;
                                        degree = Convert.ToString(cblOdept.Items[deg].Value);
                                        string store = batch + "~" + degree + "~" + hdFK + "~" + ldFK + "~" + fineldfk;
                                        string linkName = batch + "-" + degree + "-" + "FineLedgerValue" + "-" + ldFK;
                                        insqry1 = "if exists (select * from New_InsSettings where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' and linkvalue='" + store + "' ) update New_InsSettings set LinkValue ='" + store + "' where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('" + linkName + "','" + store + "','" + selected_usercode + "','" + college + "')";
                                        save1 = d2.update_method_wo_parameter(insqry1, "Text");
                                    }
                                }
                            }
                            ////Fine Ledger Setting
                            //if (ddl_otFineHeader.Items.Count > 0)
                            //{
                            //    if (ddl_otFineLedger.Items.Count > 0)
                            //    {
                            //        string store = Convert.ToString(ddl_otFineHeader.SelectedItem.Value) + "," + Convert.ToString(ddl_otFineLedger.SelectedItem.Value);
                            //        insqry1 = "if exists (select * from New_InsSettings where LinkName='FineLedgerValue' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + store + "' where LinkName='FineLedgerValue' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('FineLedgerValue','" + store + "','" + selected_usercode + "','" + college + "')";
                            //        save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            //    }
                            //}
                            #endregion

                            #region readmission fine added by sudhagar 08.09.2017
                            //Fine Ledger Setting added by sudhagar 08.09.2017
                            //added by sudhagar 12.03.2017
                            //if (ddlreadmhdsnd.Items.Count > 0)
                            //{
                            //    if (ddlreadmldsnd.Items.Count > 0)
                            //    {
                            //        string store = Convert.ToString(ddlreadmhdsnd.SelectedItem.Value) + "," + Convert.ToString(ddlreadmldsnd.SelectedItem.Value);
                            //        insqry1 = "if exists (select * from New_InsSettings where LinkName='ReAdmissionFessSettings' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + store + "' where LinkName='ReAdmissionFessSettings' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('ReAdmissionFessSettings','" + store + "','" + selected_usercode + "','" + college + "')";
                            //        save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            //    }
                            //}

                            boolBatch = getSelectedCount(cblORbatch);
                            boolDegree = getSelectedCount(cblORdept);
                            if (boolBatch && boolDegree && ddlreadmhdsnd.Items.Count > 0 && ddlreadmldsnd.Items.Count > 0)
                            {
                                //string batch = Convert.ToString(getCblSelectedValue(cbl_batch));
                                //string degree = Convert.ToString(getCblSelectedValue(cbl_dept));
                                string batch = string.Empty;
                                string degree = string.Empty;
                                string hdFK = Convert.ToString(ddlreadmhdsnd.SelectedItem.Value);
                                string ldFK = Convert.ToString(ddlreadmldsnd.SelectedItem.Value);
                                for (int bat = 0; bat < cblORbatch.Items.Count; bat++)
                                {
                                    if (!cblORbatch.Items[bat].Selected)
                                        continue;
                                    batch = Convert.ToString(cblORbatch.Items[bat].Value);
                                    for (int deg = 0; deg < cblORdept.Items.Count; deg++)
                                    {
                                        if (!cblORdept.Items[deg].Selected)
                                            continue;
                                        degree = Convert.ToString(cblORdept.Items[deg].Value);
                                        string store = batch + "~" + degree + "~" + hdFK + "~" + ldFK;
                                        string linkName = batch + "-" + degree + "-" + "ReAdmissionFessSettings";
                                        insqry1 = "if exists (select * from New_InsSettings where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + store + "' where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('" + linkName + "','" + store + "','" + selected_usercode + "','" + college + "')";
                                        save1 = d2.update_method_wo_parameter(insqry1, "Text");
                                    }
                                }
                            }
                            ////Fine Ledger Setting
                            //if (ddl_otFineHeader.Items.Count > 0)
                            //{
                            //    if (ddl_otFineLedger.Items.Count > 0)
                            //    {
                            //        string store = Convert.ToString(ddl_otFineHeader.SelectedItem.Value) + "," + Convert.ToString(ddl_otFineLedger.SelectedItem.Value);
                            //        insqry1 = "if exists (select * from New_InsSettings where LinkName='FineLedgerValue' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + store + "' where LinkName='FineLedgerValue' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('FineLedgerValue','" + store + "','" + selected_usercode + "','" + college + "')";
                            //        save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            //    }
                            //}
                            #endregion

                            //common fine type added by sudhagar 14.09.2017
                            storevalue = 0;
                            if (cbFineTypeSnd.Checked)
                            {
                                //LedgerWIse
                                storevalue = 1;
                            }
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='FineFeesType' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='FineFeesType' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('FineFeesType','" + storevalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");


                            //added by sudhagar by concession in journal 06.10.2017
                            storevalue = 0;
                            if (cbdeduct.Checked)
                                storevalue = 1;

                            insqry1 = "if exists (select * from New_InsSettings where LinkName='IncludeConcession' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + storevalue + "' where LinkName='IncludeConcession' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('IncludeConcession','" + storevalue + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            saved = true;
                            foreach (ListItem li in cbl_Feecategory.Items)
                            {
                                string selValue = li.Value;
                                if (li.Selected)
                                {
                                    insqry1 = "if exists (select * from New_InsSettings where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' and  LinkValue='" + selValue + "') update New_InsSettings set LinkValue ='" + selValue + "' where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' and  LinkValue='" + selValue + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Fee Yearwise','" + selValue + "','" + selected_usercode + "','" + college + "')";
                                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                                }
                                else
                                {
                                    insqry1 = "delete from New_InsSettings where LinkName='Fee Yearwise' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' and  LinkValue='" + selValue + "'";
                                    save1 = d2.update_method_wo_parameter(insqry1, "Text");
                                }
                            }

                            #region tab rights
                            string strVal = string.Empty;
                            if (cbRcptStudO.Checked)
                                strVal = "1";
                            else
                                strVal = "0";
                            if (cbRcptStaffO.Checked)
                                strVal += "$" + "2";
                            else
                                strVal += "$" + "0";
                            if (cbRcptVendorO.Checked)
                                strVal += "$" + "3";
                            else
                                strVal += "$" + "0";
                            if (cbRcptOtherO.Checked)
                                strVal += "$" + "4";
                            else
                                strVal += "$" + "0";
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='FinanceReceiptTabRights' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + strVal + "' where LinkName='FinanceReceiptTabRights' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('FinanceReceiptTabRights','" + strVal + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");

                            strVal = string.Empty;
                            if (cbPayStudO.Checked)
                                strVal = "1";
                            else
                                strVal = "0";
                            if (cbPayStaffO.Checked)
                                strVal += "$" + "2";
                            else
                                strVal += "$" + "0";
                            if (cbPayVendorO.Checked)
                                strVal += "$" + "3";
                            else
                                strVal += "$" + "0";
                            if (cbPayOtherO.Checked)
                                strVal += "$" + "4";
                            else
                                strVal += "$" + "0";
                            insqry1 = "if exists (select * from New_InsSettings where LinkName='FinancePaymentTabRights' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' ) update New_InsSettings set LinkValue ='" + strVal + "' where LinkName='FinancePaymentTabRights' and user_code ='" + selected_usercode + "' and college_code ='" + college + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('FinancePaymentTabRights','" + strVal + "','" + selected_usercode + "','" + college + "')";
                            save1 = d2.update_method_wo_parameter(insqry1, "Text");
                            #endregion
                        }
                    }
                    if (saved)
                    {
                        lbl_alert.Text = "Saved Successfully";
                    }
                    else
                    {
                        lbl_alert.Text = "Not Saved";
                    }
                }
                else
                {
                    lbl_alert.Text = "No Other Colleges Available";
                }
            }
            else
            {
                lbl_alert.Text = "Please Check Allow Other Colleges";
            }
        }
        catch { lbl_alert.Text = "Try Later!."; }
    }

    private void loadUserRightsOtCol()
    {
        try
        {
            if (ddl_otColleges.Items.Count > 0)
            {
                string collcode = ddl_otColleges.SelectedItem.Value.Trim();
                for (int i = 0; i < ddluser.Items.Count; i++)
                {
                    if (ddluser.Items[i].Selected == true)
                    {
                        selected_usercode = Convert.ToInt16(ddluser.Items[i].Value);
                        #region Finyear, Headers and Ledgers
                        string selqry = "select FinYearFK from FS_FinYearPrivilage where UserCode in('" + selected_usercode + "') and collegecode='" + collcode + "'";
                        ds.Clear();
                        ds = d2.select_method_wo_parameter(selqry, "Text");
                        string finyrfk = string.Empty;
                        string finyrfkvalue = string.Empty;
                        string hedfk = string.Empty;
                        string hedfkvalue = string.Empty;
                        DataSet dsled = new DataSet1();
                        if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                        {
                            for (int sss = 0; sss < ds.Tables[0].Rows.Count; sss++)
                            {
                                finyrfk = Convert.ToString(ds.Tables[0].Rows[sss]["FinYearFK"]);
                                for (int s = 0; s < chkl_finOt.Items.Count; s++)
                                {
                                    finyrfkvalue = Convert.ToString(chkl_finOt.Items[s].Value);
                                    if (finyrfkvalue == finyrfk)
                                    {
                                        chkl_finOt.Items[s].Selected = true;
                                    }
                                }
                                int ccount = 0;
                                for (int c = 0; c < chkl_finOt.Items.Count; c++)
                                {
                                    if (chkl_finOt.Items[c].Selected == true)
                                    {
                                        ccount = ccount + 1;
                                    }
                                }
                                txt_OtColfin.Text = " Financial Year(" + ccount.ToString() + ")";
                            }
                        }
                        else
                        {
                            for (int c = 0; c < chkl_finOt.Items.Count; c++)
                            {
                                chkl_finOt.Items[c].Selected = false;
                            }
                            txt_OtColfin.Text = "Financial Year";
                        }
                        string selqryheder = "select HeaderFK from FS_HeaderPrivilage where UserCode in('" + selected_usercode + "') and collegecode='" + collcode + "'";
                        ds.Clear();
                        ds = d2.select_method_wo_parameter(selqryheder, "Text");
                        if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                        {
                            for (int h = 0; h < ds.Tables[0].Rows.Count; h++)
                            {
                                hedfk = Convert.ToString(ds.Tables[0].Rows[h]["HeaderFK"]);
                                for (int a = 0; a < chkl_headOt.Items.Count; a++)
                                {
                                    hedfkvalue = Convert.ToString(chkl_headOt.Items[a].Value);
                                    if (hedfkvalue == hedfk)
                                    {
                                        chkl_headOt.Items[a].Selected = true;
                                    }
                                }
                                int ccount = 0;
                                for (int c = 0; c < chkl_headOt.Items.Count; c++)
                                {
                                    if (chkl_headOt.Items[c].Selected == true)
                                    {
                                        ccount = ccount + 1;
                                    }
                                }
                                txt_OtColhdr.Text = "Header (" + ccount.ToString() + ")";
                            }
                            loadledOtCol();
                            chk_ledgOt.Checked = false;
                            txt_OtColLdg.Text = "Ledger";
                            if (chkl_ledgOt.Items.Count > 0)
                            {
                                int count = 0;
                                for (int ld = 0; ld < chkl_ledgOt.Items.Count; ld++)
                                {
                                    string ledger = chkl_ledgOt.Items[ld].Value.ToString();
                                    string headerfk = d2.GetFunction("select HeaderFK from FM_LedgerMaster where LedgerPK='" + ledger + "' ");
                                    string res = d2.GetFunction("select * from FS_LedgerPrivilage where UserCode='" + selected_usercode + "'  and CollegeCode='" + collcode + "'  and LedgerFK='" + ledger + "' and headerfk='" + headerfk + "'").Trim();
                                    if (res == "" || res == "0")
                                    {
                                        chkl_ledgOt.Items[ld].Selected = false;
                                    }
                                    else
                                    {
                                        chkl_ledgOt.Items[ld].Selected = true;
                                        count++;
                                    }
                                }
                                if (count == chkl_ledgOt.Items.Count)
                                {
                                    chk_ledgOt.Checked = true;
                                }
                                txt_OtColLdg.Text = "Ledger(" + count + ")";
                            }
                        }
                        else
                        {
                            for (int c = 0; c < chkl_headOt.Items.Count; c++)
                            {
                                chkl_headOt.Items[c].Selected = false;
                            }
                            txt_OtColhdr.Text = "Header";
                        }
                        #endregion
                        #region FIne and Transport Ledger

                        // Transport header and ledger value retrive                    
                        string insqry1 = " select LinkValue from New_InsSettings where LinkName='TransportLedgerValue'  and user_code ='" + selected_usercode + "' and college_code ='" + collcode + "'";
                        string trnsave = Convert.ToString(d2.GetFunction(insqry1));
                        if (trnsave != "0")
                        {
                            if (ddl_otTransHeader.Items.Count > 0)
                            {
                                for (int hdri = 0; hdri < ddl_otTransHeader.Items.Count; hdri++)
                                {
                                    if (Convert.ToString(ddl_otTransHeader.Items[hdri].Value) == trnsave.Split(',')[0])
                                    {
                                        ddl_otTransHeader.SelectedIndex = hdri;
                                    }
                                }
                                loadTransportLedgerot();
                                if (ddl_otTransLedger.Items.Count > 0)
                                {
                                    for (int lgri = 0; lgri < ddl_otTransLedger.Items.Count; lgri++)
                                    {
                                        if (Convert.ToString(ddl_otTransLedger.Items[lgri].Value) == trnsave.Split(',')[1])
                                        {
                                            ddl_otTransLedger.SelectedIndex = lgri;
                                        }
                                    }
                                }
                            }
                        }
                        #endregion
                        #region Save Challan Receipt, Excess, Scholarship , Roll Number
                        ////Receipt or Challan or Both
                        //insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanOrReceiptOrBoth' and user_code ='" + selected_usercode + "' and collcode_code ='" + collcode+ "' ";
                        //int save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                        //if (save1 == 1)
                        //{
                        //    //Receipt
                        //    cbl_RcptChln.Items[0].Selected = true;
                        //}
                        //if (save1 == 2)
                        //{
                        //    //Challan
                        //    cbl_RcptChln.Items[1].Selected = true;
                        //}
                        //if (save1 == 3)
                        //{
                        //    //Receipt and Challan
                        //    cbl_RcptChln.Items[0].Selected = true;
                        //    cbl_RcptChln.Items[1].Selected = true;
                        //}
                        ////Challan Receipt Priority
                        //insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptDefaultPriority' and user_code ='" + selected_usercode + "' and collcode_code ='" + collcode+ "'";
                        //save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                        //if (save1 == 0)
                        //{
                        //    //Receipt as Default
                        //    rbl_ChlRcptPriority.SelectedIndex = 0;
                        //}
                        //if (save1 == 1)
                        //{
                        //    //Challan as Default
                        //    rbl_ChlRcptPriority.SelectedIndex = 1;
                        //}
                        ////Headerwise or Group Header wise or Ledger wise
                        //insqry1 = "select LinkValue from New_InsSettings where LinkName='GroupHeaderOrHeaderOrLedger' and user_code ='" + selected_usercode + "' and collcode_code ='" + collcode+ "'";
                        //save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                        //if (save1 == 1)
                        //{
                        //    //Group Header
                        //    cbl_typeOfHdr.Items[0].Selected = true;
                        //}
                        //if (save1 == 2)
                        //{
                        //    //Header
                        //    cbl_typeOfHdr.Items[1].Selected = true;
                        //}
                        //if (save1 == 3)
                        //{
                        //    //Ledger
                        //    cbl_typeOfHdr.Items[2].Selected = true;
                        //}
                        //if (save1 == 4)
                        //{
                        //    //All
                        //    cbl_typeOfHdr.Items[0].Selected = true;
                        //    cbl_typeOfHdr.Items[1].Selected = true;
                        //    cbl_typeOfHdr.Items[2].Selected = true;
                        //}
                        //if (save1 == 5)
                        //{
                        //    //GH and Ledger
                        //    cbl_typeOfHdr.Items[0].Selected = true;
                        //    cbl_typeOfHdr.Items[1].Selected = true;
                        //}
                        //if (save1 == 6)
                        //{
                        //    //Ledger and Header                        
                        //    cbl_typeOfHdr.Items[1].Selected = true;
                        //    cbl_typeOfHdr.Items[2].Selected = true;
                        //}
                        //if (save1 == 7)
                        //{
                        //    //GHeader and Ledger
                        //    cbl_typeOfHdr.Items[0].Selected = true;
                        //    cbl_typeOfHdr.Items[2].Selected = true;
                        //}
                        ////Is Challan or Receipt Header wise ?
                        //insqry1 = "select LinkValue from New_InsSettings where LinkName='HeaderWiseChallanorReceipt' and user_code ='" + selected_usercode + "' and collcode_code ='" + collcode+ "' ";
                        //save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                        //if (save1 == 2)
                        //{
                        //    //If Challan Selected
                        //    cbl_HdrwiseChlnRcpt.Items[0].Selected = true;
                        //}
                        //if (save1 == 1)
                        //{
                        //    //If Receipt Selected
                        //    cbl_HdrwiseChlnRcpt.Items[1].Selected = true;
                        //}
                        //if (save1 == 3)
                        //{
                        //    cbl_HdrwiseChlnRcpt.Items[0].Selected = true;
                        //    cbl_HdrwiseChlnRcpt.Items[1].Selected = true;
                        //}
                        ////Roll Number or Reg Number or Admission No or Application Number or Smart card number
                        //insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptRollNo' and user_code ='" + selected_usercode + "' and collcode_code ='" + collcode+ "'";
                        //save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                        //if (save1 == 1)
                        //{
                        //    //Roll No
                        //    cbl_RollRegAdmNo.Items[0].Selected = true;
                        //}
                        //insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptRegNo' and user_code ='" + selected_usercode + "' and collcode_code ='" + collcode+ "'";
                        //save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                        //if (save1 == 1)
                        //{
                        //    //RegNo
                        //    cbl_RollRegAdmNo.Items[1].Selected = true;
                        //}
                        //insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptRollAdmit' and user_code ='" + selected_usercode + "' and collcode_code ='" + collcode+ "'";
                        //save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                        //if (save1 == 1)
                        //{
                        //    //Admission No - Roll Admit
                        //    cbl_RollRegAdmNo.Items[2].Selected = true;
                        //}
                        //insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptAppFormNo' and user_code ='" + selected_usercode + "' and collcode_code ='" + collcode+ "' ";
                        //save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                        //if (save1 == 1)
                        //{
                        //    //App Form Number - Application Number
                        //    cbl_RollRegAdmNo.Items[3].Selected = true;
                        //}
                        //insqry1 = "select LinkValue from New_InsSettings where LinkName='ChallanReceiptSmartNo' and user_code ='" + selected_usercode + "' and collcode_code ='" + collcode+ "' ";
                        //save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                        //if (save1 == 1)
                        //{
                        //    //Smart card Number - smart_serial_no
                        //    cbl_RollRegAdmNo.Items[4].Selected = true;
                        //}
                        //insqry1 = "select LinkValue from New_InsSettings where LinkName='ExcessFeesType' and user_code ='" + selected_usercode + "' and collcode_code ='" + collcode+ "' ";
                        //save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                        //if (save1 == 1)
                        //{
                        //    //Common
                        //    cbl_excessType.Items[0].Selected = true;
                        //    cbl_excessType.Items[1].Selected = false;
                        //}
                        //if (save1 == 2)
                        //{
                        //    //Ledgerwise
                        //    cbl_excessType.Items[0].Selected = false;
                        //    cbl_excessType.Items[1].Selected = true;
                        //}
                        ////SCholarship
                        //insqry1 = "select LinkValue from New_InsSettings where LinkName='ScholarshipType' and user_code ='" + selected_usercode + "' and collcode_code ='" + collcode+ "' ";
                        //save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                        //if (save1 == 0)
                        //{
                        //    //Common
                        //    cblScholarship.Items[0].Selected = true;
                        //    cblScholarship.Items[1].Selected = false;
                        //}
                        //if (save1 == 1)
                        //{
                        //    //Ledgerwise
                        //    cblScholarship.Items[1].Selected = true;
                        //    cblScholarship.Items[0].Selected = false;
                        //}
                        #endregion

                        #region readmission fees fine settings
                        ////Fine Ledger and Header Retrieve
                        //string inSQry = " select LinkValue from New_InsSettings where LinkName='ReAdmissionFessSettings'  and user_code ='" + selected_usercode + "' and college_code ='" + collcode + "'";
                        //string save1 = Convert.ToString(d2.GetFunction(inSQry));
                        //if (save1 != "0")
                        //{
                        //    if (ddlreadmhdsnd.Items.Count > 0)
                        //    {
                        //        for (int hdri = 0; hdri < ddlreadmhdsnd.Items.Count; hdri++)
                        //        {
                        //            if (Convert.ToString(ddlreadmhdsnd.Items[hdri].Value) == save1.Split(',')[0])
                        //            {
                        //                ddlreadmhdsnd.SelectedIndex = hdri;
                        //            }
                        //        }
                        //        loadReadmLdFine();
                        //        if (ddlreadmldsnd.Items.Count > 0)
                        //        {
                        //            for (int lgri = 0; lgri < ddlreadmldsnd.Items.Count; lgri++)
                        //            {
                        //                if (Convert.ToString(ddlreadmldsnd.Items[lgri].Value) == save1.Split(',')[1])
                        //                {
                        //                    ddlreadmldsnd.SelectedIndex = lgri;
                        //                }
                        //            }
                        //        }
                        //    }
                        //}
                        #endregion

                        #region journal fees fine settings to other colleges

                        string inSQury = " select LinkValue from New_InsSettings where LinkName='JournalFessSettings'  and user_code ='" + selected_usercode + "' and college_code ='" + collcode + "'";
                        string save10 = Convert.ToString(d2.GetFunction(inSQury));
                        if (save10 != "0")
                        {
                            if (ddlOtherJrHed.Items.Count > 0)
                            {
                                for (int hdri = 0; hdri < ddlOtherJrHed.Items.Count; hdri++)
                                {
                                    if (Convert.ToString(ddlOtherJrHed.Items[hdri].Value) == save10.Split(',')[0])
                                    {
                                        ddlOtherJrHed.SelectedIndex = hdri;
                                    }
                                }
                                loadOtherJrLed();
                                if (ddlOtherJrLed.Items.Count > 0)
                                {
                                    for (int lgri = 0; lgri < ddlOtherJrLed.Items.Count; lgri++)
                                    {
                                        if (Convert.ToString(ddlOtherJrLed.Items[lgri].Value) == save10.Split(',')[1])
                                        {
                                            ddlOtherJrLed.SelectedIndex = lgri;
                                        }
                                    }
                                }
                            }
                        }
                        #endregion

                        //added by sudhagar 23.08.2017 transfer refund settings

                        string save0 = string.Empty;


                        //added by sudhagar 23.08.2017 contra cash,cumulative settings
                        if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='Cash Deposit Cumulative' and user_code ='" + selected_usercode + "' and college_code ='" + collcode + "'") == "0")
                            cbcontra.Checked = false;
                        else
                            cbcontra.Checked = true;
                        //edit receipt no 18.03.2017 by sudhagar
                        if (d2.GetFunction("select LinkValue from New_InsSettings where LinkName='EditReceiptNo' and user_code ='" + selected_usercode + "' and college_code ='" + collcode + "'") == "0")
                            cbeditrcptno.Checked = false;
                        else
                            cbeditrcptno.Checked = true;

                        #region fine added by sudhagar 08.09.2017
                        //Fine Ledger and Header Retrieve added by sudhagar 08.09.2017
                        #region fine
                        //Fine Ledger and Header Retrieve
                        //string insqry1 = " select LinkValue from New_InsSettings where LinkName='FineLedgerValue'  and user_code ='" + selected_usercode + "' and college_code ='" + collcode + "'";
                        //string save0 = Convert.ToString(d2.GetFunction(insqry1));
                        //if (save0 != "0")
                        //{
                        //    if (ddl_otFineHeader.Items.Count > 0)
                        //    {
                        //        for (int hdri = 0; hdri < ddl_otFineHeader.Items.Count; hdri++)
                        //        {
                        //            if (Convert.ToString(ddl_otFineHeader.Items[hdri].Value) == save0.Split(',')[0])
                        //            {
                        //                ddl_otFineHeader.SelectedIndex = hdri;
                        //            }
                        //        }
                        //        loadFineLedgerot();
                        //        if (ddl_otFineLedger.Items.Count > 0)
                        //        {
                        //            for (int lgri = 0; lgri < ddl_otFineLedger.Items.Count; lgri++)
                        //            {
                        //                if (Convert.ToString(ddl_otFineLedger.Items[lgri].Value) == save0.Split(',')[1])
                        //                {
                        //                    ddl_otFineLedger.SelectedIndex = lgri;
                        //                }
                        //            }
                        //        }
                        //    }
                        //}
                        #endregion

                        save0 = string.Empty;
                        ArrayList arCourse = new ArrayList();
                        bindBtchO();
                        binddeptO(ddl_otColleges.SelectedItem.Value);
                        Hashtable htCourse = getDepartment(Convert.ToString(ddl_otColleges.SelectedItem.Value));
                        for (int bat = 0; bat < cblObatch.Items.Count; bat++)
                        {
                            string batch = Convert.ToString(cblObatch.Items[bat].Value);
                            for (int deg = 0; deg < cblOdept.Items.Count; deg++)
                            {
                                string degree = Convert.ToString(cblOdept.Items[deg].Value);
                                string linkName = batch + "-" + degree + "-" + "ReAdmissionFessSettings";
                                insqry1 = " select LinkValue from New_InsSettings where LinkName='" + linkName + "'  and user_code ='" + selected_usercode + "' and college_code ='" + ddl_otColleges.SelectedItem.Value + "'";
                                save0 = Convert.ToString(d2.GetFunction(insqry1));
                                if (save0 != "0")
                                {
                                    if (ddl_otFineHeader.Items.Count > 0)
                                    {
                                        for (int hdri = 0; hdri < ddl_otFineHeader.Items.Count; hdri++)
                                        {
                                            if (Convert.ToString(ddl_otFineHeader.Items[hdri].Value) != save0.Split('~')[2])
                                                continue;
                                            ddl_otFineHeader.SelectedIndex = hdri;
                                        }
                                        loadFineLedgerot();
                                        if (ddl_otFineLedger.Items.Count > 0)
                                        {
                                            for (int lgri = 0; lgri < ddl_otFineLedger.Items.Count; lgri++)
                                            {
                                                if (Convert.ToString(ddl_otFineLedger.Items[lgri].Value) != save0.Split('~')[3])
                                                    continue;

                                                ddl_otFineLedger.SelectedIndex = lgri;
                                                for (int fineLdgr = 0; fineLdgr < ddl_Fineledger2.Items.Count; fineLdgr++)
                                                {
                                                    if (save0.Split('~').Length > 4)//delsi 0507
                                                    {
                                                        if (Convert.ToString(ddl_Fineledger2.Items[fineLdgr].Value) != save0.Split('~')[4])
                                                            continue;
                                                        ddl_Fineledger2.SelectedIndex = fineLdgr;
                                                    }

                                                }
                                                cblObatch.Items[bat].Selected = true;
                                                cblOdept.Items[deg].Selected = true;
                                                if (htCourse.ContainsKey(degree))
                                                {
                                                    string course = Convert.ToString(htCourse[degree]);
                                                    if (!arCourse.Contains(course))
                                                        arCourse.Add(course);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (arCourse.Count > 0)
                        {
                            for (int arc = 0; arc < arCourse.Count; arc++)
                            {
                                for (int cour = 0; cour < cblOdegree.Items.Count; cour++)
                                {
                                    if (Convert.ToString(cblOdegree.Items[cour].Value) != Convert.ToString(arCourse[arc]))
                                        continue;
                                    cblOdegree.Items[cour].Selected = true;
                                }
                            }
                        }

                        #endregion

                        #region readmission  fine added by sudhagar 08.09.2017
                        //Fine Ledger and Header Retrieve added by sudhagar 08.09.2017
                        //Fine Ledger and Header Retrieve
                        //string inSQry = " select LinkValue from New_InsSettings where LinkName='ReAdmissionFessSettings'  and user_code ='" + selected_usercode + "' and college_code ='" + collcode + "'";
                        //string save1 = Convert.ToString(d2.GetFunction(inSQry));
                        //if (save1 != "0")
                        //{
                        //    if (ddlreadmhdsnd.Items.Count > 0)
                        //    {
                        //        for (int hdri = 0; hdri < ddlreadmhdsnd.Items.Count; hdri++)
                        //        {
                        //            if (Convert.ToString(ddlreadmhdsnd.Items[hdri].Value) == save1.Split(',')[0])
                        //            {
                        //                ddlreadmhdsnd.SelectedIndex = hdri;
                        //            }
                        //        }
                        //        loadReadmLdFine();
                        //        if (ddlreadmldsnd.Items.Count > 0)
                        //        {
                        //            for (int lgri = 0; lgri < ddlreadmldsnd.Items.Count; lgri++)
                        //            {
                        //                if (Convert.ToString(ddlreadmldsnd.Items[lgri].Value) == save1.Split(',')[1])
                        //                {
                        //                    ddlreadmldsnd.SelectedIndex = lgri;
                        //                }
                        //            }
                        //        }
                        //    }
                        //}

                        save0 = string.Empty;
                        arCourse = new ArrayList();
                        bindBtchRO();
                        binddeptRO(ddl_otColleges.SelectedItem.Value);
                        htCourse = getDepartment(Convert.ToString(ddl_otColleges.SelectedItem.Value));
                        for (int bat = 0; bat < cblORbatch.Items.Count; bat++)
                        {
                            string batch = Convert.ToString(cblORbatch.Items[bat].Value);
                            for (int deg = 0; deg < cblORdept.Items.Count; deg++)
                            {
                                string degree = Convert.ToString(cblORdept.Items[deg].Value);
                                string linkName = batch + "-" + degree + "-" + "ReAdmissionFessSettings";
                                insqry1 = " select LinkValue from New_InsSettings where LinkName='" + linkName + "'  and user_code ='" + selected_usercode + "' and college_code ='" + ddl_otColleges.SelectedItem.Value + "'";
                                save0 = Convert.ToString(d2.GetFunction(insqry1));
                                if (save0 != "0")
                                {
                                    if (ddlreadmldsnd.Items.Count > 0)
                                    {
                                        for (int hdri = 0; hdri < ddlreadmldsnd.Items.Count; hdri++)
                                        {
                                            if (Convert.ToString(ddlreadmldsnd.Items[hdri].Value) != save0.Split('~')[2])
                                                continue;
                                            ddlreadmldsnd.SelectedIndex = hdri;
                                        }
                                        loadReadmLdFine();
                                        if (ddlreadmldsnd.Items.Count > 0)
                                        {
                                            for (int lgri = 0; lgri < ddlreadmldsnd.Items.Count; lgri++)
                                            {
                                                if (Convert.ToString(ddlreadmldsnd.Items[lgri].Value) != save0.Split('~')[3])
                                                    continue;
                                                ddlreadmldsnd.SelectedIndex = lgri;

                                                cblORbatch.Items[bat].Selected = true;
                                                cblORdept.Items[deg].Selected = true;
                                                if (htCourse.ContainsKey(degree))
                                                {
                                                    string course = Convert.ToString(htCourse[degree]);
                                                    if (!arCourse.Contains(course))
                                                        arCourse.Add(course);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        if (arCourse.Count > 0)
                        {
                            for (int arc = 0; arc < arCourse.Count; arc++)
                            {
                                for (int cour = 0; cour < cblORdegree.Items.Count; cour++)
                                {
                                    if (Convert.ToString(cblORdegree.Items[cour].Value) != Convert.ToString(arCourse[arc]))
                                        continue;
                                    cblORdegree.Items[cour].Selected = true;
                                }
                            }
                        }

                        #endregion

                        //added by sudhagar 14.09.2017
                        //Fine TYpe 
                        insqry1 = "select LinkValue from New_InsSettings where LinkName='FineFeesType' and user_code ='" + selected_usercode + "' and college_code ='" + collcode + "' ";
                        int save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                        if (save1 == 1)
                        {
                            //Common
                            cbFineTypeSnd.Checked = true;
                        }
                        else
                        {
                            cbFineTypeSnd.Checked = false;
                        }

                        //added by sudhagar 06.10.2017
                        insqry1 = "select LinkValue from New_InsSettings where LinkName='IncludeConcession' and user_code ='" + selected_usercode + "' and college_code ='" + collcode + "' ";
                        save1 = Convert.ToInt32(d2.GetFunction(insqry1));
                        if (save1 == 1)
                        {
                            cbdeduct.Checked = true;
                        }
                        else
                        {
                            cbdeduct.Checked = false;
                        }

                        #region tab rights

                        cbRcptStudO.Checked = false;
                        cbRcptStaffO.Checked = false;
                        cbRcptVendorO.Checked = false;
                        cbRcptOtherO.Checked = false;
                        //added by sudhagar 10.11.2017 for payment and receipt tab rights
                        insqry1 = "select LinkValue from New_InsSettings where LinkName='FinanceReceiptTabRights' and user_code ='" + selected_usercode + "' and college_code ='" + collcode + "' ";
                        string strVal = Convert.ToString(d2.GetFunction(insqry1));
                        if (!string.IsNullOrEmpty(strVal) && strVal != "0")
                        {
                            string[] strSpltVal = strVal.Split('$');
                            if (strSpltVal.Length > 0)
                            {
                                for (int rcpt = 0; rcpt < strSpltVal.Length; rcpt++)
                                {
                                    switch (Convert.ToInt32(strSpltVal[rcpt]))
                                    {
                                        case 1:
                                            cbRcptStudO.Checked = true;
                                            break;
                                        case 2:
                                            cbRcptStaffO.Checked = true;
                                            break;
                                        case 3:
                                            cbRcptVendorO.Checked = true;
                                            break;
                                        case 4:
                                            cbRcptOtherO.Checked = true;
                                            break;
                                    }
                                }
                            }
                        }

                        cbPayStudO.Checked = false;
                        cbPayStaffO.Checked = false;
                        cbPayVendorO.Checked = false;
                        cbPayOtherO.Checked = false;
                        strVal = string.Empty;
                        insqry1 = "select LinkValue from New_InsSettings where LinkName='FinancePaymentTabRights' and user_code ='" + selected_usercode + "' and college_code ='" + collcode + "' ";

                        strVal = Convert.ToString(d2.GetFunction(insqry1));
                        if (!string.IsNullOrEmpty(strVal) && strVal != "0")
                        {
                            string[] strSpltVal = strVal.Split('$');
                            if (strSpltVal.Length > 0)
                            {
                                for (int rcpt = 0; rcpt < strSpltVal.Length; rcpt++)
                                {
                                    switch (Convert.ToInt32(strSpltVal[rcpt]))
                                    {
                                        case 1:
                                            cbPayStudO.Checked = true;
                                            break;
                                        case 2:
                                            cbPayStaffO.Checked = true;
                                            break;
                                        case 3:
                                            cbPayVendorO.Checked = true;
                                            break;
                                        case 4:
                                            cbPayOtherO.Checked = true;
                                            break;
                                    }
                                }
                            }
                        }
                        #endregion

                    }
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void txtuser_TextChanged(object sender, EventArgs e)
    {
        try
        {
        }
        catch (Exception ex)
        {
        }
    }

    protected void Button1_Click1(object sender, EventArgs e)
    {
        try
        {
            lblerrvel.Visible = false;
            FpSpread1.SaveChanges();
            int rcount = FpSpread1.Sheets[0].RowCount++;
            FpSpread1.Sheets[0].ColumnCount = 5;
            lblerrvel.Visible = false;
            FpSpread1.Sheets[0].Columns[0].HorizontalAlign = HorizontalAlign.Center;
            FpSpread1.Sheets[0].Columns[1].HorizontalAlign = HorizontalAlign.Center;
            FarPoint.Web.Spread.DoubleCellType intgrcell = new FarPoint.Web.Spread.DoubleCellType();
            intgrcell.FormatString = System.Windows.Forms.MaskFormat.ExcludePromptAndLiterals.ToString();
            intgrcell.MaximumValue = Convert.ToInt32(100);
            intgrcell.MinimumValue = 0;
            intgrcell.ErrorMessage = "Enter valid Number";
            FpSpread1.Sheets[0].Columns[0].CellType = intgrcell;
            FpSpread1.Sheets[0].Columns[1].CellType = intgrcell;
            FpSpread1.Sheets[0].Columns[4].Visible = false;
            FpSpread1.Sheets[0].Columns[4].Locked = true;
            int minustwo = FpSpread1.Sheets[0].RowCount - 2;
            if (rcount != 0)
            {
                if (FpSpread1.Sheets[0].Cells[minustwo, 1].Text.ToString() != "" && FpSpread1.Sheets[0].Cells[minustwo, 0].Text.ToString() != "" && FpSpread1.Sheets[0].Cells[minustwo, 2].Text.ToString() != "")
                {
                    double temp = Convert.ToDouble(FpSpread1.Sheets[0].Cells[minustwo, 1].Text.ToString());
                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].CellType = intgrcell;
                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(temp + 0.01);
                }
                else
                {
                    FpSpread1.Sheets[0].RowCount--;
                    lblerrvel.Visible = true;
                }
            }
            else
            {
                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].CellType = intgrcell;
                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "00.00";
                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].CellType = intgrcell;
                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = "00.00";
            }
            if (ddlBatchYear.Items.Count > 0)
            {
                string batch = Convert.ToString(ddlBatchYear.SelectedValue).Trim();
                if (!string.IsNullOrEmpty(batch) && batch.Trim().ToLower() != "-1" && batch.Trim().ToLower() != "0" && batch.Trim().ToLower() != "all" && batch.Trim().ToLower() != "--select--")
                {
                    FpSpread1.Sheets[0].Columns[4].Visible = true;
                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text = batch;
                }
                else
                {
                    FpSpread1.Sheets[0].Columns[4].Visible = false;
                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text = string.Empty;
                }
            }
            FpSpread1.Sheets[0].PageSize = FpSpread1.Sheets[0].RowCount;
            FpSpread1.SaveChanges();
            //FarPoint.Web.Spread.DoubleCellType dblcell = new FarPoint.Web.Spread.DoubleCellType();
            //FpSpread1.ActiveSheetView.Cells[0, 1].CellType = dblcell;
        }
        catch (Exception ex)
        {
        }
    }

    protected void drp_edu_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            txt_cgpa.Text = string.Empty;
            txt_clasfi.Text = string.Empty;
            if (drp_edu.Items.Count > 0)
            {
                dsbindv.Dispose();
                dsbindv.Reset();
                string strquery1 = "select * from coe_classification_allpass where college_code=" + ddlcollege.SelectedItem.Value.ToString() + " and edu_level='" + drp_edu.SelectedItem.Text.ToString() + "'";
                dsbindv = dasri.select_method(strquery1, ht, "");
                if (dsbindv != null && dsbindv.Tables[0].Rows.Count > 0)
                {
                    txt_cgpa.Text = Convert.ToString(dsbindv.Tables[0].Rows[0]["cgpa"]);
                    txt_clasfi.Text = Convert.ToString(dsbindv.Tables[0].Rows[0]["classification"]);
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void BindClassifyBatchYear()
    {
        try
        {
            lblerrvel.Visible = false;
            ddlBatchYear.Items.Clear();
            ddlBatchYear.Enabled = false;
            string qry = string.Empty;
            string qryCollege = string.Empty;
            string qryEduLevel = string.Empty;
            if (ddlcollege.Items.Count > 0)
            {
                qryCollege = " and r.college_code='" + Convert.ToString(ddlcollege.SelectedValue).Trim() + "'";
            }
            if (drp_edulevel.Items.Count > 0)
            {
                string edulevel = Convert.ToString(drp_edulevel.SelectedValue).Trim();
                if (!string.IsNullOrEmpty(edulevel))
                    qryEduLevel = " and c.Edu_Level='" + edulevel + "'";
            }
            qry = "select distinct batch_year from registration r,Degree dg,Course c,Department dt where r.degree_code=dg.Degree_Code and dg.Course_Id=c.Course_Id and dg.Dept_Code=dt.Dept_Code and  ISNULL(r.batch_year,'')<>'' and r.batch_year<>'-1' " + qryCollege + qryEduLevel + " order by batch_year desc";
            DataSet dsBatch = d2.select_method_wo_parameter(qry, "text");
            if (dsBatch.Tables.Count > 0 && dsBatch.Tables[0].Rows.Count > 0)
            {
                ddlBatchYear.DataSource = dsBatch;
                ddlBatchYear.DataTextField = "batch_year";
                ddlBatchYear.DataValueField = "batch_year";
                ddlBatchYear.DataBind();
                ddlBatchYear.Enabled = true;
                ddlBatchYear.Items.Insert(0, new ListItem("", "-1"));
            }

        }
        catch
        {
        }
    }

    protected void drp_edulevel_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            BindClassifyBatchYear();
            lblerrvel.Visible = false;
            FpSpread1.Sheets[0].RowCount = 0;
            FpSpread1.Sheets[0].RowHeader.Visible = false;
            FpSpread1.Sheets[0].ColumnCount = 5;
            FpSpread1.Sheets[0].ColumnHeader.Cells[0, 0].Text = "From";
            FpSpread1.Sheets[0].ColumnHeader.Cells[0, 1].Text = "To";
            FpSpread1.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Classification";
            FpSpread1.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Grade";
            FpSpread1.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Batch_year";
            FpSpread1.Sheets[0].Columns[0].Width = 70;
            FpSpread1.Sheets[0].Columns[1].Width = 70;
            FpSpread1.CommandBar.Visible = false;
            FpSpread1.Sheets[0].Columns[4].Visible = false;
            FpSpread1.Sheets[0].Columns[4].Locked = true;
            string qryBatchYear = string.Empty;
            if (ddlBatchYear.Items.Count > 0)
            {
                string batch = Convert.ToString(ddlBatchYear.SelectedValue).Trim();
                if (!string.IsNullOrEmpty(batch) && batch.Trim().ToLower() != "-1" && batch.Trim().ToLower() != "0" && batch.Trim().ToLower() != "all" && batch.Trim().ToLower() != "--select--")
                {
                    FpSpread1.Sheets[0].Columns[4].Visible = true;
                    qryBatchYear = " and batch_year='" + batch + "'";
                }
            }
            dsbindv.Dispose();
            dsbindv.Reset();
            string strq3 = "select frompoint,topoint,classification,grade,LTRIM(RTRIM(ISNULL(batch_year,''))) as Batch_year from coe_classification where collegecode='" + ddlcollege.SelectedItem.Value.ToString() + "' and edu_level='" + drp_edulevel.SelectedItem.ToString() + "' " + qryBatchYear;
            dsbindv = dasri.select_method_wo_parameter(strq3, "");
            if (dsbindv.Tables.Count > 0 && dsbindv.Tables[0].Rows.Count > 0)
            {
                FpSpread1.DataSource = dsbindv;
                FpSpread1.DataBind();
                FpSpread1.Sheets[0].PageSize = FpSpread1.Sheets[0].RowCount;
                FpSpread1.SaveChanges();
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddlBatchYear_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            lblerrvel.Visible = false;
            FpSpread1.Sheets[0].RowCount = 0;
            FpSpread1.Sheets[0].RowHeader.Visible = false;
            FpSpread1.Sheets[0].ColumnCount = 5;
            FpSpread1.Sheets[0].ColumnHeader.Cells[0, 0].Text = "From";
            FpSpread1.Sheets[0].ColumnHeader.Cells[0, 1].Text = "To";
            FpSpread1.Sheets[0].ColumnHeader.Cells[0, 2].Text = "Classification";
            FpSpread1.Sheets[0].ColumnHeader.Cells[0, 3].Text = "Grade";
            FpSpread1.Sheets[0].ColumnHeader.Cells[0, 4].Text = "Batch_year";
            FpSpread1.Sheets[0].Columns[0].Width = 70;
            FpSpread1.Sheets[0].Columns[1].Width = 70;
            FpSpread1.CommandBar.Visible = false;
            FpSpread1.Sheets[0].Columns[4].Visible = false;
            FpSpread1.Sheets[0].Columns[4].Locked = true;
            string qryBatchYear = string.Empty;
            if (ddlBatchYear.Items.Count > 0)
            {
                string batch = Convert.ToString(ddlBatchYear.SelectedValue).Trim();
                if (!string.IsNullOrEmpty(batch) && batch.Trim().ToLower() != "-1" && batch.Trim().ToLower() != "0" && batch.Trim().ToLower() != "all" && batch.Trim().ToLower() != "--select--")
                {
                    FpSpread1.Sheets[0].Columns[4].Visible = true;
                    qryBatchYear = " and batch_year='" + batch + "'";
                }
            }
            dsbindv.Dispose();
            dsbindv.Reset();
            string strq3 = "select frompoint,topoint,classification,grade,LTRIM(RTRIM(ISNULL(batch_year,''))) as Batch_year from coe_classification where collegecode='" + ddlcollege.SelectedItem.Value.ToString() + "' and edu_level='" + drp_edulevel.SelectedItem.ToString() + "' " + qryBatchYear;
            dsbindv = dasri.select_method_wo_parameter(strq3, "");
            if (dsbindv.Tables.Count > 0 && dsbindv.Tables[0].Rows.Count > 0)
            {
                FpSpread1.DataSource = dsbindv;
                FpSpread1.DataBind();
                FpSpread1.Sheets[0].PageSize = FpSpread1.Sheets[0].RowCount;
                FpSpread1.SaveChanges();
            }
        }
        catch (Exception ex)
        {
        }
    }

    //-------------------------------------------Muthu--------------------------------
    bool Cellclick;
    protected void fsstaff_CellClick(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        try
        {
            string activerow = fsstaff.ActiveSheetView.ActiveRow.ToString();
            string activecol = fsstaff.ActiveSheetView.ActiveColumn.ToString();
            Cellclick = true;
            //mpedirect.Show();
            panel8.Visible = true;
        }
        catch (Exception ex)
        {
        }
    }

    protected void fsstaff_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            if (Cellclick == true)
            {
                if (fsstaff.Sheets[0].RowCount == 0)
                {
                    return;
                }
                //mpedirect.Hide();
                panel8.Visible = false;
                FpSpread1.Sheets[0].ColumnCount = 0;
                FpSpread1.Sheets[0].RowCount = 0;
                FpSpread1.Visible = true;
                FpSpread1.Sheets[0].AutoPostBack = false;
                string activerow = fsstaff.ActiveSheetView.ActiveRow.ToString();
                string activecol = fsstaff.ActiveSheetView.ActiveColumn.ToString();
                string stf_code = fsstaff.Sheets[0].Cells[Convert.ToInt32(activerow), 2].Text;
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddldepratstaff_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            fsstaff.Sheets[0].RowCount = 0;
            loadfsstaff();
            //mpedirect.Show();
            panel8.Visible = true;
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddl_stftype_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            fsstaff.Sheets[0].RowCount = 0;
            //loadfsstaff();
            bind_design();
            loadfsstaff();
            //mpedirect.Show();
            panel8.Visible = true;
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddl_design_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            fsstaff.Sheets[0].RowCount = 0;
            loadfsstaff();
            //mpedirect.Show();
            panel8.Visible = true;
            //bind_design();
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddlstaff_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            fsstaff.Sheets[0].RowCount = 0;
            //loadfsstaff();
        }
        catch (Exception ex)
        {
        }
    }

    protected void txt_search_TextChanged(object sender, EventArgs e)
    {
        try
        {
            fsstaff.Sheets[0].RowCount = 0;
            loadfsstaff();
        }
        catch (Exception ex)
        {
        }
    }

    protected void fsstaff_UpdateCommand(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    {
        try
        {
        }
        catch (Exception ex)
        {
        }
    }

    protected void Btn_stfone_Click(object sender, EventArgs e)
    {
        try
        {
            //mpedirect.Show();
            panel8.Visible = true;
            fsstaff.Visible = true;
            btnstaffadd.Text = "Ok";
            fsstaff.Sheets[0].RowCount = 0;
            BindCollege();
            loadstaffdep(collegecode);
            bind_stafType();
            bind_design();
            loadfsstaff();
        }
        catch (Exception ex)
        {
        }
    }

    protected void Btn_stftwo_Click(object sender, EventArgs e)
    {
        try
        {
            //mpedirect.Show();
            panel8.Visible = true;
            fsstaff.Visible = true;
            btnstaffadd.Text = " Ok";
            fsstaff.Sheets[0].RowCount = 0;
            BindCollege();
            loadstaffdep(collegecode);
            bind_stafType();
            bind_design();
            loadfsstaff();
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnstaffadd_Click(object sender, EventArgs e)
    {
        try
        {
            //if (Cellclick == true)
            //{
            if (fsstaff.Sheets[0].RowCount == 0)
            {
                return;
            }
            //mpedirect.Hide();
            panel8.Visible = false;
            FpSpread1.Sheets[0].ColumnCount = 0;
            FpSpread1.Sheets[0].RowCount = 0;
            FpSpread1.Visible = true;
            FpSpread1.Sheets[0].AutoPostBack = false;
            string activerow = fsstaff.ActiveSheetView.ActiveRow.ToString();
            string activecol = fsstaff.ActiveSheetView.ActiveColumn.ToString();
            string stf_code = fsstaff.Sheets[0].Cells[Convert.ToInt32(activerow), 2].Text;
            if (btnstaffadd.Text == "Ok")
            {
                txt_stfone.Text = stf_code;
            }
            else
            {
                txt_stftwo.Text = stf_code;
            }
            //}
        }
        catch (Exception ex)
        {
        }
    }

    protected void exitpop_Click(object sender, EventArgs e)
    {
        try
        {
            panel8.Visible = false;
        }
        catch (Exception ex)
        {
        }
    }

    void BindCollege()
    {
        try
        {
            //con.Close();
            //con.Open();
            //SqlCommand cmd = new SqlCommand("select collname,college_code from collinfo", con);
            //SqlDataAdapter da = new SqlDataAdapter(cmd);
            DataSet ds = dasri.select_method_wo_parameter("select collname,college_code from collinfo", "Text");
            // da.Fill(ds);
            ddl_college.DataSource = ds;
            ddl_college.DataTextField = "collname";
            ddl_college.DataValueField = "college_code";
            ddl_college.DataBind();
        }
        catch (Exception ex)
        {
        }
    }

    void loadstaffdep(string collegecode)
    {
        try
        {
            //con.Close();
            //con.Open();
            //SqlCommand cmd = new SqlCommand("select distinct dept_name,dept_code from hrdept_master where college_code=" + Convert.ToString(ddlcollege.SelectedValue) + "", con);
            //SqlDataAdapter da = new SqlDataAdapter(cmd);
            DataSet ds = dasri.select_method_wo_parameter("select distinct dept_name,dept_code from hrdept_master where college_code=" + Convert.ToString(ddlcollege.SelectedValue) + "", "text");
            //da.Fill(ds);
            ddldepratstaff.DataSource = ds;
            ddldepratstaff.DataTextField = "dept_name";
            ddldepratstaff.DataValueField = "dept_code";
            ddldepratstaff.DataBind();
            ddldepratstaff.Items.Insert(0, "All");
        }
        catch (Exception ex)
        {
        }
    }

    void bind_stafType()
    {
        try
        {
            //con.Close();
            //con.Open();
            //SqlCommand cmd_get_stftype = new SqlCommand("SELECT DISTINCT StfType FROM StaffTrans T,HrDept_Master D WHERE T.Dept_Code = D.Dept_Code AND T.Latestrec = 1 and d.college_code=" + Convert.ToString(ddlcollege.SelectedValue) + "", con);
            //SqlDataAdapter ad_get_stftype = new SqlDataAdapter(cmd_get_stftype);
            DataTable dt_get_stftype = dasri.select_method_wop_table("SELECT DISTINCT StfType FROM StaffTrans T,HrDept_Master D WHERE T.Dept_Code = D.Dept_Code AND T.Latestrec = 1 and d.college_code=" + Convert.ToString(ddlcollege.SelectedValue) + "", "Text");
            //ad_get_stftype.Fill(dt_get_stftype);
            if (dt_get_stftype.Rows.Count > 0)
            {
                ddl_stftype.DataSource = dt_get_stftype;
                ddl_stftype.DataTextField = "StfType";
                ddl_stftype.DataValueField = "StfType";
                ddl_stftype.DataBind();
                ddl_stftype.Items.Insert(0, "All");
            }
        }
        catch (Exception ex)
        {
        }
    }

    void bind_design()
    {
        try
        {
            string sql = string.Empty;
            if (ddl_stftype.SelectedItem.ToString() == "All")
            {
                sql = "SELECT distinct Desig_Name FROM StaffTrans T,staffmaster m,Desig_Master G WHERE t.staff_code = m.staff_code and T.Desig_Code = G.Desig_Code AND Latestrec = 1 and G.collegecode=" + Convert.ToString(ddlcollege.SelectedValue) + "";
            }
            else
            {
                sql = "SELECT distinct Desig_Name FROM StaffTrans T,staffmaster m,Desig_Master G WHERE t.staff_code = m.staff_code and T.Desig_Code = G.Desig_Code AND Latestrec = 1 and G.collegecode=" + Convert.ToString(ddlcollege.SelectedValue) + " and stftype='" + ddl_stftype.Text + "'";
            }
            //con.Close();
            //con.Open();
            //SqlCommand cmd_get_design = new SqlCommand(sql, con);
            //SqlDataAdapter ad_get_design = new SqlDataAdapter(cmd_get_design);
            DataTable dt_get_design = dasri.select_method_wop_table(sql, "Text");
            //ad_get_design.Fill(dt_get_design);
            if (dt_get_design.Rows.Count > 0)
            {
                ddl_design.DataSource = dt_get_design;
                ddl_design.DataTextField = "Desig_Name";
                ddl_design.DataValueField = "Desig_Name";
                ddl_design.DataBind();
                ddl_design.Items.Insert(0, "All");
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void loadfsstaff()
    {
        try
        {
            string sql = string.Empty;
            if (ddldepratstaff.SelectedIndex != 0)
            {
                if (txt_search.Text != "")
                {
                    if (ddlstaff.SelectedIndex == 0)
                    {
                        sql = "SELECT distinct staffmaster.staff_code, staffmaster.staff_name FROM staffmaster INNER JOIN stafftrans ON staffmaster.staff_code = stafftrans.staff_code INNER JOIN hrdept_master ON stafftrans.dept_code = hrdept_master.dept_code WHERE (stafftrans.latestrec <> 0) AND (staffmaster.resign = 0)and  (staffmaster.settled = 0)  and (staff_name like '" + txt_search.Text + "%') and (hrdept_master.dept_code = '" + ddldepratstaff.SelectedValue + "') and (staffmaster.college_code =hrdept_master.college_code)";
                    }
                    else if (ddlstaff.SelectedIndex == 1)
                    {
                        sql = "SELECT distinct staffmaster.staff_code, staffmaster.staff_name FROM staffmaster INNER JOIN stafftrans ON staffmaster.staff_code = stafftrans.staff_code INNER JOIN hrdept_master ON stafftrans.dept_code = hrdept_master.dept_code WHERE (stafftrans.latestrec <> 0) AND (staffmaster.resign = 0) and (staffmaster.settled = 0) and (staffmaster.staff_code like '" + txt_search.Text + "%') and (hrdept_master.dept_code = '" + ddldepratstaff.SelectedValue + "') and (staffmaster.college_code =hrdept_master.college_code)";
                    }
                }
                else
                {
                    //sql = "SELECT staffmaster.staff_code, staffmaster.staff_name FROM staffmaster INNER JOIN stafftrans ON staffmaster.staff_code = stafftrans.staff_code INNER JOIN hrdept_master ON stafftrans.dept_code = hrdept_master.dept_code WHERE (stafftrans.latestrec <> 0) AND (staffmaster.resign = 0) and (staffmaster.settled = 0) and (hrdept_master.dept_name = '" + ddldepratstaff.Text + "') AND (staffmaster.college_code = '" + ddl_college.SelectedValue + "' and (staffmaster.college_code =hrdept_master.college_code)";
                    sql = "SELECT staffmaster.staff_code, staffmaster.staff_name FROM staffmaster INNER JOIN stafftrans ON staffmaster.staff_code = stafftrans.staff_code INNER JOIN hrdept_master ON stafftrans.dept_code = hrdept_master.dept_code WHERE (stafftrans.latestrec <> 0) AND (staffmaster.resign = 0) and (staffmaster.settled = 0) and (hrdept_master.dept_code = '" + ddldepratstaff.SelectedValue + "') AND (staffmaster.college_code = '" + ddl_college.SelectedValue + "') and (staffmaster.college_code =hrdept_master.college_code)";
                }
            }
            else if (txt_search.Text != "")
            {
                if (ddlstaff.SelectedIndex == 0)
                {
                    sql = "SELECT distinct staffmaster.staff_code, staffmaster.staff_name FROM staffmaster INNER JOIN stafftrans ON staffmaster.staff_code = stafftrans.staff_code INNER JOIN hrdept_master ON stafftrans.dept_code = hrdept_master.dept_code WHERE (stafftrans.latestrec <> 0) AND (staffmaster.resign = 0) and (staffmaster.settled = 0) and (staffmaster.staff_name like '" + txt_search.Text + "%') and (staffmaster.college_code =hrdept_master.college_code)";
                }
                else if (ddlstaff.SelectedIndex == 1)
                {
                    sql = "SELECT distinct staffmaster.staff_code, staffmaster.staff_name FROM staffmaster INNER JOIN stafftrans ON staffmaster.staff_code = stafftrans.staff_code INNER JOIN hrdept_master ON stafftrans.dept_code = hrdept_master.dept_code WHERE (stafftrans.latestrec <> 0) AND (staffmaster.resign = 0) and (staffmaster.settled = 0) and (staffmaster.staff_code like '" + txt_search.Text + "%') and (staffmaster.college_code =hrdept_master.college_code)";
                }
                else if (ddl_college.SelectedIndex != -1)
                {
                    sql = "select distinct staffmaster.staff_code, staff_name  from stafftrans,staffmaster where stafftrans.staff_code=staffmaster.staff_code and latestrec<>0 and resign=0 and settled=0 and staffmaster.college_code='" + ddl_college.SelectedValue + "'";
                }
                else
                {
                    sql = "select distinct staffmaster.staff_code, staff_name from stafftrans,staffmaster,hrdept_master.dept_name where stafftrans.staff_code=staffmaster.staff_code and latestrec<>0 and resign=0";
                }
            }
            else
                if (ddldepratstaff.SelectedValue.ToString() == "All")
                {
                    sql = "select distinct staffmaster.staff_code, staff_name  from stafftrans,staffmaster where stafftrans.staff_code=staffmaster.staff_code and latestrec<>0 and resign=0 and settled=0 and staffmaster.college_code='" + ddl_college.SelectedValue + "'";
                }
            fsstaff.Sheets[0].RowCount = 0;
            fsstaff.SaveChanges();
            FarPoint.Web.Spread.CheckBoxCellType chkcell1 = new FarPoint.Web.Spread.CheckBoxCellType();
            FarPoint.Web.Spread.CheckBoxCellType chkcell = new FarPoint.Web.Spread.CheckBoxCellType();
            fsstaff.Sheets[0].RowCount = fsstaff.Sheets[0].RowCount + 1;
            fsstaff.Sheets[0].SpanModel.Add(fsstaff.Sheets[0].RowCount - 1, 0, 1, 3);
            //fsstaff.Sheets[0].AutoPostBack = false;
            string bindspread = sql;
            string design_name = string.Empty;
            string dept_all = string.Empty;
            string design_all = string.Empty;
            if (ddl_design.Items.Count > 0)
            {
                design_name = ddl_design.SelectedItem.ToString();
            }
            for (int cnt = 1; cnt < ddldepratstaff.Items.Count; cnt++)
            {
                if (dept_all == "")
                {
                    dept_all = ddldepratstaff.Items[cnt].Value;
                }
                else
                {
                    dept_all = dept_all + "','" + ddldepratstaff.Items[cnt].Value;
                }
            }
            for (int cnt = 1; cnt < ddl_design.Items.Count; cnt++)
            {
                if (dept_all == "")
                {
                    design_all = ddl_design.Items[cnt].Value;
                }
                else
                {
                    design_all = design_all + "','" + ddl_design.Items[cnt].Value;
                }
            }
            string Sql_Query = "select distinct s.staff_code,s.staff_name from staffmaster s,hrdept_master h,desig_master d,stafftrans st where s.staff_code=st.staff_code and st.Dept_Code = h.Dept_Code and d.desig_code=st.desig_code and h.dept_code = '" + ddldepratstaff.SelectedValue.ToString() + "' and d.desig_name='" + design_name + "' and s.college_code='" + ddl_college.SelectedValue.ToString() + "' and resign = 0 and settled = 0 and latestrec=1";
            if (ddldepratstaff.SelectedItem.ToString() == "All" && ddl_design.SelectedItem.ToString() == "All")
            {
                Sql_Query = "select distinct s.staff_code,s.staff_name from staffmaster s,hrdept_master h,desig_master d,stafftrans st where s.staff_code=st.staff_code and st.Dept_Code = h.Dept_Code and d.desig_code=st.desig_code  and h.dept_code in ('" + dept_all + "') and d.desig_name in ('" + design_all + "') and s.college_code='" + ddl_college.SelectedValue.ToString() + "' and resign = 0 and settled = 0 and latestrec=1";
            }
            else if (ddldepratstaff.SelectedItem.ToString() == "All")
            {
                Sql_Query = "select distinct s.staff_code,s.staff_name from staffmaster s,hrdept_master h,desig_master d,stafftrans st where s.staff_code=st.staff_code and st.Dept_Code = h.Dept_Code and d.desig_code=st.desig_code and s.college_code = h.college_code and s.college_code = d.collegecode and h.dept_code in ('" + dept_all + "') and d.desig_name='" + design_name + "' and s.college_code='" + ddl_college.SelectedValue.ToString() + "' and resign = 0 and settled = 0 and latestrec=1";
            }
            else if (ddl_design.SelectedItem.ToString() == "All")
            {
                Sql_Query = "select distinct s.staff_code,s.staff_name from staffmaster s,hrdept_master h,desig_master d,stafftrans st where s.staff_code=st.staff_code and st.Dept_Code = h.Dept_Code and d.desig_code=st.desig_code and s.college_code = h.college_code and s.college_code = d.collegecode and h.dept_code = '" + ddldepratstaff.SelectedValue.ToString() + "' and d.desig_name in ('" + design_all + "') and s.college_code='" + ddl_college.SelectedValue.ToString() + "' and resign = 0 and settled = 0 and latestrec=1";
            }
            if (ddl_stftype.SelectedItem.ToString() != "All")
            {
                Sql_Query = "select distinct s.staff_code,s.staff_name from staffmaster s,hrdept_master h,desig_master d,stafftrans st where s.staff_code=st.staff_code and st.Dept_Code = h.Dept_Code and d.desig_code=st.desig_code and s.college_code = h.college_code and s.college_code = d.collegecode and h.dept_code = '" + ddldepratstaff.SelectedValue.ToString() + "' and d.desig_name in ('" + design_all + "') and s.college_code='" + ddl_college.SelectedValue.ToString() + "' and stftype = '" + ddl_stftype.SelectedItem.ToString() + "' and resign = 0 and settled = 0 and latestrec=1";
            }
            //con.Close();
            //con.Open();
            //SqlCommand cmd_get_stafflist = new SqlCommand(Sql_Query, con);
            //SqlDataAdapter dabindspread = new SqlDataAdapter(cmd_get_stafflist);
            DataSet dsbindspread = dasri.select_method_wo_parameter(Sql_Query, "text");
            //dabindspread.Fill(dsbindspread);
            //con.Close();
            //con.Open();
            //mpedirect.Show();
            panel8.Visible = true;
            if (dsbindspread.Tables[0].Rows.Count > 0)
            {
                int sno = 0;
                for (int rolcount = 0; rolcount < dsbindspread.Tables[0].Rows.Count; rolcount++)
                {
                    sno++;
                    string name = dsbindspread.Tables[0].Rows[rolcount]["staff_name"].ToString();
                    string code = dsbindspread.Tables[0].Rows[rolcount]["staff_code"].ToString();
                    fsstaff.Sheets[0].RowCount = fsstaff.Sheets[0].RowCount + 1;
                    fsstaff.Sheets[0].Rows[fsstaff.Sheets[0].RowCount - 1].Font.Bold = false;
                    fsstaff.Sheets[0].Cells[fsstaff.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(sno);
                    fsstaff.Sheets[0].Cells[fsstaff.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                    fsstaff.Sheets[0].Cells[fsstaff.Sheets[0].RowCount - 1, 1].Text = name;
                    fsstaff.Sheets[0].Cells[fsstaff.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Left;
                    fsstaff.Sheets[0].Cells[fsstaff.Sheets[0].RowCount - 1, 2].Text = code;
                    fsstaff.Sheets[0].Cells[fsstaff.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Left;
                    fsstaff.Sheets[0].AutoPostBack = false;
                }
                int rowcount = fsstaff.Sheets[0].RowCount;
                fsstaff.Sheets[0].PageSize = 25 + (rowcount * 20);
                fsstaff.SaveChanges();
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void bindsmssetting()
    {
        try
        {
            string smsperiodcount = string.Empty;
            smsperiodcount = dasri.GetFunctionv("select distinct max(No_of_hrs_per_day) from PeriodAttndSchedule");
            if (smsperiodcount.Trim() != "")
            {
                chklistsms.Items.Clear();
                ArrayList ar = new ArrayList();
                for (int i = 1; i <= Convert.ToInt32(smsperiodcount); i++)
                {
                    int val = i;
                    ar.Add(i);
                }
                for (int j = 0; j < ar.Count; j++)
                {
                    chklistsms.Items.Add(ar[j].ToString());
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    //sankar added july'2013..........................
    public void chksms_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            txtsms.Text = string.Empty;
            string value = string.Empty;
            if (chksms.Checked == true)
            {
                for (int i = 0; i < chklistsms.Items.Count; i++)
                {
                    chklistsms.Items[i].Selected = true;
                    value = chklistsms.Items[i].Text;
                    if (txtsms.Text == "")
                    {
                        txtsms.Text = value;
                    }
                    else
                    {
                        txtsms.Text = txtsms.Text + "," + value;
                    }
                }
                txtsms.Text = txtsms.Text;
            }
            else
            {
                for (int i = 0; i < chklistsms.Items.Count; i++)
                {
                    chklistsms.Items[i].Selected = false;
                    txtsms.Text = string.Empty;
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    //sankar added july'2013..........................
    public void chklistsms_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            txtsms.Text = string.Empty;
            string value = string.Empty;
            for (int i = 0; i < chklistsms.Items.Count; i++)
            {
                if (chklistsms.Items[i].Selected == true)
                {
                    value = chklistsms.Items[i].Text;
                    if (txtsms.Text == "")
                    {
                        txtsms.Text = value;
                    }
                    else
                    {
                        txtsms.Text = txtsms.Text + "," + value;
                    }
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void chklssubjecttype_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int icou = 0;
            for (int i = 0; i < chklssubjecttype.Items.Count; i++)
            {
                if (chklssubjecttype.Items[i].Selected == true)
                {
                    icou++;
                }
            }
            if (icou == chklssubjecttype.Items.Count)
            {
                txtsubjecttype.Text = "Type(" + chklssubjecttype.Items.Count + ")";
                chksubjecttype.Checked = true;
            }
            else if (icou == 0)
            {
                txtsubjecttype.Text = "---Select---";
                chksubjecttype.Checked = false;
            }
            else
            {
                txtsubjecttype.Text = "Type(" + icou + ")";
                chksubjecttype.Checked = false;
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void chksubjecttype_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (chksubjecttype.Checked == true)
            {
                for (int i = 0; i < chklssubjecttype.Items.Count; i++)
                {
                    chklssubjecttype.Items[i].Selected = true;
                }
                txtsubjecttype.Text = "Type(" + chklssubjecttype.Items.Count + ")";
            }
            else
            {
                for (int i = 0; i < chklssubjecttype.Items.Count; i++)
                {
                    chklssubjecttype.Items[i].Selected = false;
                }
                txtsubjecttype.Text = "---Select---";
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void rbhour_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            txtsms.Enabled = true;
            //ddlsms.Enabled = true;
            psms.Enabled = true;
            chksms.Enabled = true;
        }
        catch (Exception ex)
        {
        }
    }

    protected void rbday_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            txtsms.Enabled = false;
            //ddlsms.Enabled = false;
            psms.Enabled = false;
            chksms.Enabled = false;
        }
        catch (Exception ex)
        {
        }
    }

    protected void chkminimumabsent_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (chkminimumabsent.Checked == true)
            {
                txt_smsday.Enabled = true;
                chbvoicecall.Enabled = false;
            }
            else
            {
                txt_smsday.Enabled = false;
                txt_smsday.Text = string.Empty;
                chbvoicecall.Enabled = true;
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void ddlattbatch_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            count = 0;
            chksecall.Checked = false;
            txtattsec.Text = "---Select---";
            loadattsec();
            collegecode = Convert.ToString(ddlcollege.SelectedValue);
            string ucode = string.Empty;
            for (int i = 0; i < ddluser.Items.Count; i++)
            {
                if (ddluser.Items[i].Selected == true)
                {
                    user_code = ddluser.Items[i].Value;
                    if (ucode == "")
                    {
                        ucode = "'" + user_code + "'";
                    }
                    else
                    {
                        ucode = ucode + ',' + "'" + user_code + "'";
                    }
                }
            }
            if (ucode.Trim() != "")
            {
                //----------------------------Added By M.SakthiPriya 05/02/2015
                string strgetsec = string.Empty;
                if (ddlattbatch.SelectedItem.Text == "Select")
                {
                    strgetsec = dasri.GetFunction("select sections from tbl_attendance_rights where  user_id in(" + ucode + ") and college_code='" + collegecode + "'");
                }
                else
                {
                    strgetsec = dasri.GetFunction("select sections from tbl_attendance_rights where batch_year='" + ddlattbatch.SelectedItem.ToString() + "' and user_id in(" + ucode + ") and college_code='" + collegecode + "'");
                }
                //----------------------------End----------------------------
                if (strgetsec.Trim() != null && strgetsec.Trim() != "0")
                {
                    string[] spsec = strgetsec.Split(',');
                    for (int sp = 0; sp <= spsec.GetUpperBound(0); sp++)
                    {
                        string valu = spsec[sp].ToString();
                        if (valu.Trim() == "")
                        {
                            valu = "Empty";
                        }
                        for (int i = 0; i < chkattsec.Items.Count; i++)
                        {
                            if (chkattsec.Items[i].Text.ToString().ToLower().Trim() == valu.Trim().ToLower())
                            {
                                chkattsec.Items[i].Selected = true;
                                count++;
                            }
                        }
                        if (count > 0)
                        {
                            txtattsec.Text = "Sec (" + count + ")";
                            if (count == chkattsec.Items.Count)
                            {
                                chksecall.Checked = true;
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void loadattsec()
    {
        try
        {
            chkattsec.Items.Clear();
            txtattsec.Text = "---Select---";
            if (ddlattbatch.Items.Count > 0)
            {
                string strbatch = ddlattbatch.SelectedItem.ToString();
                string strsec = "select distinct sections from registration where cc=0 and delflag=0 and exam_flag<>'debar' and batch_year='" + strbatch + "' and sections is not null and sections<>'' and sections<>'-1' order by sections asc";
                DataSet dssec = dasri.select_method_wo_parameter(strsec, "Text");
                if (dssec.Tables[0].Rows.Count > 0)
                {
                    chkattsec.DataSource = dssec;
                    chkattsec.DataTextField = "sections";
                    chkattsec.DataBind();
                }
                chkattsec.Items.Insert(0, "Empty");
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void chkattsec_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int count = 0;
            chksecall.Checked = false;
            for (int i = 0; i < chkattsec.Items.Count; i++)
            {
                if (chkattsec.Items[i].Selected == true)
                {
                    count++;
                }
            }
            if (count > 0)
            {
                txtattsec.Text = "Sec (" + count + ")";
                if (count == chkattsec.Items.Count)
                {
                    chksecall.Checked = true;
                }
            }
            else
            {
                txtattsec.Text = "---Select---";
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void chkallsec_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (chksecall.Checked == true)
            {
                for (int i = 0; i < chkattsec.Items.Count; i++)
                {
                    chkattsec.Items[i].Selected = true;
                }
                txtattsec.Text = "Sec (" + chkattsec.Items.Count + ")";
            }
            else
            {
                for (int i = 0; i < chkattsec.Items.Count; i++)
                {
                    chkattsec.Items[i].Selected = false;
                }
                txtattsec.Text = "---Select---";
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnattsave_Click(object sender, EventArgs e)
    {
        try
        {
            count = 0;
            string secvalues = "test";
            for (int i = 0; i < chkattsec.Items.Count; i++)
            {
                if (chkattsec.Items[i].Selected == true)
                {
                    count++;
                    string getval = chkattsec.Items[i].Text.ToString();
                    if (getval.Trim() == "Empty")
                    {
                        getval = string.Empty;
                    }
                    if (secvalues == "test")
                    {
                        secvalues = getval;
                    }
                    else
                    {
                        secvalues = secvalues + ',' + getval;
                    }
                }
            }
            string byear = ddlattbatch.SelectedItem.ToString();
            collegecode = Convert.ToString(ddlcollege.SelectedValue);
            if (count > 0)
            {
                for (int i = 0; i < ddluser.Items.Count; i++)
                {
                    if (ddluser.Items[i].Selected == true)
                    {
                        user_code = ddluser.Items[i].Value;
                        try
                        {
                            string insertquery = "if exists(select * from tbl_attendance_rights where user_id='" + user_code + "' and batch_year='" + byear + "' and college_code='" + collegecode + "')";
                            insertquery = insertquery + " update tbl_attendance_rights set sections='" + secvalues + "' where user_id='" + user_code + "' and batch_year='" + byear + "' and college_code='" + collegecode + "'";
                            insertquery = insertquery + "else insert into tbl_attendance_rights (user_id,batch_year,sections,college_code) values('" + user_code + "','" + byear + "','" + secvalues + "','" + collegecode + "')";
                            int insertvalues = dasri.update_method_wo_parameter(insertquery, "Text");
                        }
                        catch
                        {
                        }
                    }
                }
                //ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Saved successfully')", true);
                imgAlert.Visible = true;
                lbl_alert.Text = "Saved successfully";
            }
            else
            {
                for (int i = 0; i < ddluser.Items.Count; i++)
                {
                    if (ddluser.Items[i].Selected == true)
                    {
                        user_code = ddluser.Items[i].Value;
                        try
                        {
                            string insertquery = "Delete from tbl_attendance_rights where user_id='" + user_code + "' and batch_year='" + byear + "' and college_code='" + collegecode + "'";
                            int insertvalues = dasri.update_method_wo_parameter(insertquery, "Text");
                        }
                        catch
                        { }
                    }
                }
                //ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Deleted Successfully')", true);
                imgAlert.Visible = true;
                lbl_alert.Text = "Deleted successfully";
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void loadbatch()
    {
        try
        {
            ddlfailbatch.Items.Clear();
            ddlmodbatch.Items.Clear();
            string collval = ddlcollege.SelectedItem.Value.ToString();
            ddlattbatch.Items.Clear();
            chkattsec.Items.Clear();
            txtattsec.Text = "---Select---";
            string strattsec = "select distinct batch_year from registration where delflag=0 and exam_flag<>'debar' and college_code='" + collval + "' order by batch_year desc";
            DataSet dsattrights = dasri.select_method_wo_parameter(strattsec, "Text");
            if (dsattrights.Tables[0].Rows.Count > 0)
            {
                ddlattbatch.DataSource = dsattrights;
                ddlattbatch.DataTextField = "batch_year";
                ddlattbatch.DataBind();
                ddlsetbatch.DataSource = dsattrights;
                ddlsetbatch.DataTextField = "batch_year";
                ddlsetbatch.DataBind();
                ddlmodbatch.DataSource = dsattrights;
                ddlmodbatch.DataTextField = "batch_year";
                ddlmodbatch.DataBind();
                ddlfailbatch.DataSource = dsattrights;
                ddlfailbatch.DataTextField = "batch_year";
                ddlfailbatch.DataBind();
                loadattsec();
            }
            //----------Added By M.SakthiPriya 05/02/2015
            else
            {
                ddlattbatch.Items.Insert(0, "Select");
            }
            //-----------------End---------------------
        }
        catch (Exception ex)
        {
        }
    }

    protected void Add_Templete_Click(object sender, EventArgs e)
    {
        try
        {
            // bindpupose();
            list2.Items.Clear();
            // addlist.Clear();
            panelsms.Visible = true;
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnSingleAdd_Click(object sender, EventArgs e)
    {
        try
        {
            bool val_flage = false;
            string value = list1.SelectedItem.Text;
            //if (addlist.Contains(value) == false)
            //{
            if (value != "")
            {
                list2.Items.Add(value);
                if (value == "Your Text")
                {
                    val_flage = true;
                }
                //addlist.Add(value);
            }
            if (val_flage == true)
            {
                txt_temple_value.Text = "Your Text";
                panel_show.Visible = true;
            }
            // }
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnMultipleAdd_Click(object sender, EventArgs e)
    {
        try
        {
            bool val_flage = false;
            for (int j = 0; j < list1.Items.Count; j++)
            {
                //if (addlist.Contains(list1.Items[j].Text.ToString()) == false)
                //{
                list2.Items.Add(list1.Items[j].Text.ToString());
                // addlist.Add(list1.Items[j].Text.ToString());
                if (list1.Items[j].Text.ToString() == "Your Text")
                {
                    val_flage = true;
                }
                //}
            }
            if (val_flage == true)
            {
                txt_temple_value.Text = "Your Text";
                panel_show.Visible = true;
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnSingleRemove_Click(object sender, EventArgs e)
    {
        try
        {
            string removevalue = list2.SelectedItem.Value;
            if (removevalue.Trim() != "")
            {
                list2.Items.Remove(removevalue);
                // addlist.Remove(removevalue);
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnMulitpleRemove_Click(object sender, EventArgs e)
    {
        try
        {
            list2.Items.Clear();
            //  addlist.Clear();
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnsavetemplete_Click(object sender, EventArgs e)
    {
        try
        {
            if (purposeddl.SelectedItem.Text != "" && purposeddl.SelectedItem.Text != "---Select---")
            {
                string istemple = string.Empty;
                string list_add_Value = string.Empty;
                if (list2.Items.Count > 0)
                {
                    for (int i = 0; i < list2.Items.Count; i++)
                    {
                        string value = list2.Items[i].ToString();
                        if (value.Trim() != "")
                        {
                            if (list_add_Value == "")
                            {
                                list_add_Value = value;
                            }
                            else
                            {
                                list_add_Value = list_add_Value + "$" + value;
                            }
                        }
                    }
                }
                string purposevalue = purposeddl.SelectedItem.Text.ToString();
                if (purposevalue.ToString().Trim() == "Attendance")
                {
                    istemple = "0";
                }
                if (purposevalue.ToString().Trim() == "CAM")
                {
                    istemple = "1";
                }
                if (purposevalue.ToString().Trim() == "Finance")
                {
                    istemple = "2";
                }
                if (purposevalue.ToString().Trim() == "University Result")
                {
                    istemple = "3";
                }
                if (purposevalue.ToString().Trim() == "Attendance Cummulative")
                {
                    istemple = "4";
                }
                if (list_add_Value != "")
                {
                    insertvaluetemp(list_add_Value, istemple);
                    panelsms.Visible = false;
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Saved Successfully')", true);
                    imgAlert.Visible = true;
                    lbl_alert.Text = "Saved successfully";
                }
                else
                {
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Select Any One From of Template')", true);
                    imgAlert.Visible = true;
                    lbl_alert.Text = "Select Any One From Template";
                }
            }
            else
            {
                //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Select Any One Purpose')", true);
                imgAlert.Visible = true;
                lbl_alert.Text = "Select Any One Purpose";
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void insertvaluetemp(string listvalue, string temp)
    {
        try
        {
            string insert_query = string.Empty;
            insert_query = "insert into sms_template (Template,college_code,istemplate) values (N'" + listvalue + "','" + Convert.ToString(ddlcollege.SelectedValue) + "','" + temp + "') ";
            int ins = dasri.update_method_wo_parameter(insert_query, "Text");
            bindtemple();
        }
        catch (Exception ex)
        {
        }
    }

    public void bindtemple()
    {
        try
        {
            FpSpreadsms.Sheets[0].AutoPostBack = false;
            FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
            cb.AutoPostBack = true;
            string select_query = string.Empty;
            select_query = "select Template,istemplate from sms_template where istemplate<>'' and college_code=" + Convert.ToString(ddlcollege.SelectedValue) + "";
            dsbindv.Clear();
            dsbindv = dasri.select_method_wo_parameter(select_query, "Text");
            if (dsbindv.Tables[0].Rows.Count > 0)
            {
                int sno = 0;
                FpSpreadsms.Sheets[0].RowCount = 0;
                for (int jk = 0; jk < dsbindv.Tables[0].Rows.Count; jk++)
                {
                    sno++;
                    FpSpreadsms.Sheets[0].RowCount++;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(sno);
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 0].Locked = true;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 1].CellType = cb;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                    string value = string.Empty;
                    if (dsbindv.Tables[0].Rows[jk]["istemplate"].ToString() == "0")
                    {
                        value = "Attendance";
                    }
                    if (dsbindv.Tables[0].Rows[jk]["istemplate"].ToString() == "1")
                    {
                        value = "CAM";
                    }
                    if (dsbindv.Tables[0].Rows[jk]["istemplate"].ToString() == "2")//added by saranya 13-11-2017
                    {
                        value = "Finance";
                    }
                    if (dsbindv.Tables[0].Rows[jk]["istemplate"].ToString() == "3")//added by prabha 17-11-2017
                    {
                        value = "University Result";
                    }
                    if (dsbindv.Tables[0].Rows[jk]["istemplate"].ToString() == "4")//added by saranya devi 19.1.2018
                    {
                        value = "Attendance Cummulative";
                    }
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 2].Text = value.ToString();
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 2].Locked = true;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 3].Text = dsbindv.Tables[0].Rows[jk]["Template"].ToString();
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Medium;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 3].Locked = true;
                }
                FpSpreadsms.Sheets[0].PageSize = FpSpreadsms.Sheets[0].RowCount;
                string select_query_template = string.Empty;
                if (ddluser.Items.Count > 0)
                {
                    for (int val = 0; val < ddluser.Items.Count; val++)
                    {
                        if (ddluser.Items[val].Selected == true)
                        {
                            if (rdb_ind.Checked == true)
                            {
                                select_query_template = "select * from master_Settings where settings='SmsAttendanceTepmlate' and usercode='" + ddluser.Items[val].Value.ToString() + "'";
                            }
                            if (rdb_grp.Checked == true)
                            {
                                select_query_template = "select * from master_Settings where settings='SmsAttendanceTepmlate' and group_code='" + ddluser.Items[val].Value.ToString() + "'";
                            }
                            dsbindv.Clear();
                            dsbindv = dasri.select_method_wo_parameter(select_query_template, "Text");
                            if (dsbindv.Tables[0].Rows.Count > 0)
                            {
                                for (int jr = 0; jr < dsbindv.Tables[0].Rows.Count; jr++)
                                {
                                    string temp_value_data = dsbindv.Tables[0].Rows[jr]["template"].ToString();
                                    if (FpSpreadsms.Sheets[0].Rows.Count > 0)
                                    {
                                        for (int fp = 0; fp < FpSpreadsms.Sheets[0].Rows.Count; fp++)
                                        {
                                            string spread_temp = FpSpreadsms.Sheets[0].Cells[fp, 3].Text.ToString();
                                            if (spread_temp.Trim() == temp_value_data.Trim())
                                            {
                                                FpSpreadsms.Sheets[0].Cells[fp, 1].Value = 1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                FpSpreadsms.Sheets[0].RowCount = 0;
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnexittemplete_Click(object sender, EventArgs e)
    {
        try
        {
            panelsms.Visible = false;
        }
        catch (Exception ex)
        {
        }
    }

    //protected void btnaddpurpose_Click(object sender, EventArgs e)
    //{
    //    panel_show.Visible = true;
    //}

    protected void btnsavetemple_Click(object sender, EventArgs e)
    {
        try
        {
            if (txt_temple_value.Text.Trim() != "" && txt_temple_value.Text != "Your Text")
            {
                if (list2.Items.Count > 0)
                {
                    for (int i = 0; i < list2.Items.Count; i++)
                    {
                        string value = list2.Items[i].Text.ToString();
                        if (value == "Your Text")
                        {
                            list2.Items.RemoveAt(i);
                            list2.Items.Insert(i, txt_temple_value.Text.ToString());
                            addlist.Add(txt_temple_value.Text.ToString());
                        }
                    }
                }
                panel_show.Visible = false;
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void btncanceltemple_Click(object sender, EventArgs e)
    {
        try
        {
            panel_show.Visible = false;
        }
        catch (Exception ex)
        {
        }
    }

    //public void bindpupose()
    //{
    //    try
    //    {
    //        string select_query = string.Empty;
    //        select_query = "select * from textvaltable where Textcriteria='smst' and college_code=" + Convert.ToString(ddlcollege.SelectedValue) + "";
    //        dsbindv.Clear();
    //        dsbindv =dasri.select_method_wo_parameter(select_query, "Text");
    //        if (dsbindv.Tables[0].Rows.Count > 0)
    //        {
    //            purposeddl.DataSource = dsbindv;
    //            purposeddl.DataTextField = "TextVal";
    //            purposeddl.DataValueField = "TextCode";
    //            purposeddl.DataBind();
    //        }
    //        purposeddl.Items.Insert(0, "---Select---");
    //    }
    //    catch
    //    {
    //    }
    //}
    //protected void btnremovepurpose_Click(object sender, EventArgs e)
    //{
    //    try
    //    {
    //        if (purposeddl.SelectedItem.Text != "" && purposeddl.SelectedItem.Text != "---Select---")
    //        {
    //            string delete_query = string.Empty;
    //            delete_query = "delete textvaltable where Textcriteria='smst' and college_code=" + Convert.ToString(ddlcollege.SelectedValue) + " and TextVal='" + purposeddl.SelectedItem.Text + "'";
    //            int del = 0;
    //            del =dasri.update_method_wo_parameter(delete_query, "Text");
    //            bindpupose();
    //        }
    //        else
    //        {
    //        }
    //    }
    //    catch
    //    {
    //    }
    //}

    protected void Delete_Templete_Click(object sender, EventArgs e)
    {
        try
        {
            string value_temp = string.Empty;
            bool del_flage = false;
            for (int h = 0; h < FpSpreadsms.Sheets[0].RowCount; h++)
            {
                string value = Convert.ToString(FpSpreadsms.Sheets[0].Cells[h, 1].Value);
                if (value == "1")
                {
                    string purpose = FpSpreadsms.Sheets[0].Cells[h, 2].Text.ToString();
                    string template = FpSpreadsms.Sheets[0].Cells[h, 3].Text.ToString();
                    if (purpose == "Attendance")
                    {
                        value_temp = "0";
                    }
                    if (purpose == "CAM")
                    {
                        value_temp = "1";
                    }
                    if (purpose == "Finance")//added by saranya 11-11-2017
                    {
                        value_temp = "2";
                    }
                    if (purpose == "University Result")//added by prabha 17-11-2017
                    {
                        value_temp = "3";
                    }
                    if (purpose == "Attendance Cummulative")//added by SaranyaDevi 19.1.2018
                    {
                        value_temp = "4";
                    }
                    removetemple(value_temp, template);
                    del_flage = true;
                }
            }
            if (del_flage == true)
            {
                bindtemple();
                //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Delete Successfully')", true);
                imgAlert.Visible = true;
                lbl_alert.Text = "Deleted successfully";
            }
            if (del_flage == false)
            {
                //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Please Select Any One Template')", true);
                imgAlert.Visible = true;
                lbl_alert.Text = "Please Select Any One Template";
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void removetemple(string value, string temp)
    {
        try
        {
            string delete_query = string.Empty;
            delete_query = "delete sms_template where istemplate='" + value + "'and Template ='" + temp + "' and college_code=" + Convert.ToString(ddlcollege.SelectedValue) + "";
            int del = dasri.update_method_wo_parameter(delete_query, "Text");
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddlmainpurpose_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            string temp_value = string.Empty;
            if (ddlmainpurpose.SelectedItem.Text == "Attendance")
            {
                temp_value = "0";
                bindtemp1(temp_value);
            }
            else if (ddlmainpurpose.SelectedItem.Text == "CAM")
            {
                temp_value = "1";
                bindtemp1(temp_value);
            }
            else if (ddlmainpurpose.SelectedItem.Text == "Finance")//added by saranya 11-11-2017
            {
                temp_value = "2";
                bindtemp1(temp_value);
            }
            else if (ddlmainpurpose.SelectedItem.Text == "Attendance Cummulative")//added by saranyadevi 19.1.2018
            {
                temp_value = "4";
                bindtemp1(temp_value);
            }
            else
            {
                bindtemple();
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void bindtemp1(string temp)
    {
        try
        {
            FpSpreadsms.Sheets[0].AutoPostBack = false;
            FarPoint.Web.Spread.CheckBoxCellType cb = new FarPoint.Web.Spread.CheckBoxCellType();
            cb.AutoPostBack = true;
            string select_query = string.Empty;
            if (temp == "0")
            {
                select_query = "select Template,istemplate from sms_template where istemplate='" + temp + "' and college_code=" + Convert.ToString(ddlcollege.SelectedValue) + "";
            }
            if (temp == "1")
            {
                select_query = "select Template,istemplate from sms_template where istemplate='" + temp + "' and college_code=" + Convert.ToString(ddlcollege.SelectedValue) + "";
            }
            if (temp == "2")
            {
                select_query = "select Template,istemplate from sms_template where istemplate='" + temp + "' and college_code=" + Convert.ToString(ddlcollege.SelectedValue) + "";
            }
            if (temp == "4")
            {
                select_query = "select Template,istemplate from sms_template where istemplate='" + temp + "' and college_code=" + Convert.ToString(ddlcollege.SelectedValue) + "";
            }
            dsbindv.Clear();
            dsbindv = dasri.select_method_wo_parameter(select_query, "Text");
            if (dsbindv.Tables[0].Rows.Count > 0)
            {
                int sno = 0;
                FpSpreadsms.Sheets[0].RowCount = 0;
                for (int jk = 0; jk < dsbindv.Tables[0].Rows.Count; jk++)
                {
                    sno++;
                    FpSpreadsms.Sheets[0].RowCount++;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 0].Text = Convert.ToString(sno);
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 0].Font.Name = "Book Antiqua";
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 0].Locked = true;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 1].CellType = cb;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 1].Font.Name = "Book Antiqua";
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
                    string value = string.Empty;
                    if (dsbindv.Tables[0].Rows[jk]["istemplate"].ToString() == "0")
                    {
                        value = "Attendance";
                    }
                    if (dsbindv.Tables[0].Rows[jk]["istemplate"].ToString() == "1")
                    {
                        value = "CAM";
                    }
                    if (dsbindv.Tables[0].Rows[jk]["istemplate"].ToString() == "2")
                    {
                        value = "Finance";
                    }
                    if (dsbindv.Tables[0].Rows[jk]["istemplate"].ToString() == "4")
                    {
                        value = "Attendance Cummulative";
                    }
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 2].Text = value.ToString();
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 2].Font.Name = "Book Antiqua";
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 2].Locked = true;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 3].Text = dsbindv.Tables[0].Rows[jk]["Template"].ToString();
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 3].Font.Name = "Book Antiqua";
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Medium;
                    FpSpreadsms.Sheets[0].Cells[FpSpreadsms.Sheets[0].RowCount - 1, 3].Locked = true;
                }
                FpSpreadsms.Sheets[0].PageSize = FpSpreadsms.Sheets[0].RowCount;
                string select_query_template = string.Empty;
                if (ddluser.Items.Count > 0)
                {
                    for (int val = 0; val < ddluser.Items.Count; val++)
                    {
                        if (ddluser.Items[val].Selected == true)
                        {
                            if (rdb_ind.Checked == true)
                            {
                                select_query_template = "select * from master_Settings where settings='SmsAttendanceTepmlate' and usercode='" + ddluser.Items[val].Value.ToString() + "'";
                            }
                            if (rdb_grp.Checked == true)
                            {
                                select_query_template = "select * from master_Settings where settings='SmsAttendanceTepmlate' and group_code='" + ddluser.Items[val].Value.ToString() + "'";
                            }
                            dsbindv.Clear();
                            dsbindv = dasri.select_method_wo_parameter(select_query_template, "Text");
                            if (dsbindv.Tables[0].Rows.Count > 0)
                            {
                                for (int jr = 0; jr < dsbindv.Tables[0].Rows.Count; jr++)
                                {
                                    string temp_value_data = dsbindv.Tables[0].Rows[jr]["template"].ToString();
                                    if (FpSpreadsms.Sheets[0].Rows.Count > 0)
                                    {
                                        for (int fp = 0; fp < FpSpreadsms.Sheets[0].Rows.Count; fp++)
                                        {
                                            string spread_temp = FpSpreadsms.Sheets[0].Cells[fp, 3].Text.ToString();
                                            if (spread_temp.Trim() == temp_value_data.Trim())
                                            {
                                                FpSpreadsms.Sheets[0].Cells[fp, 1].Value = 1;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                FpSpreadsms.Sheets[0].RowCount = 0;
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void list1_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            string list_value = list1.SelectedItem.Text.ToString();
            if (list_value == "Your Text")
            {
                txt_temple_value.Text = list_value.ToString();
                panel_show.Visible = true;
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void cbstaffleavetype_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (cbstaffleavetype.Checked == true)
            {
                for (int i = 0; i < cblstaffleavetype.Items.Count; i++)
                {
                    cblstaffleavetype.Items[i].Selected = true;
                    txt_staffleavetype.Text = "Leave Type(" + (cblstaffleavetype.Items.Count) + ")";
                }
                panelstaffleavetype.Focus();
            }
            else
            {
                for (int i = 0; i < cblstaffleavetype.Items.Count; i++)
                {
                    cblstaffleavetype.Items[i].Selected = false;
                    txt_staffleavetype.Text = "---Select---";
                }
            }
            //  txt_staffleavetype.Focus();
        }
        catch (Exception ex)
        {
        }
    }

    protected void cblstaffleavetype_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            panelstaffleavetype.Focus();
            int desigcount = 0;
            for (int i = 0; i < cblstaffleavetype.Items.Count; i++)
            {
                if (cblstaffleavetype.Items[i].Selected == true)
                {
                    desigcount = desigcount + 1;
                    txt_staffleavetype.Text = "Leave Type(" + desigcount.ToString() + ")";
                }
            }
            if (desigcount == 0)
            {
                txt_staffleavetype.Text = "---Select---";
            }
            cbstaffleavetype.Checked = false;
            // txt_staffleavetype.Focus();
        }
        catch (Exception ex)
        {
        }
    }

    public void loadleave()
    {
        try
        {
            DataSet dleave = new DataSet();
            string leavequery = string.Empty;
            leavequery = "select shortname  from leave_category where college_code='" + Convert.ToString(ddlcollege.SelectedValue) + "'";
            dleave.Clear();
            dleave = dasri.select_method_wo_parameter(leavequery, "Text");
            if (dleave.Tables[0].Rows.Count > 0)
            {
                cblstaffleavetype.DataSource = dleave;
                cblstaffleavetype.DataTextField = "shortname";
                cblstaffleavetype.DataValueField = "shortname";
                cblstaffleavetype.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void chbvoicecall_OnCheckedChanged(object sender, EventArgs e) // added by jairam 05-11-2014
    {
        try
        {
            if (chbAttendanceSms.Checked == true || chbvoicecall.Checked == true)
            {
                chbMother.Visible = true;
                chbStudent.Visible = true;
                chbFather.Visible = true;
            }
            else if (chbAttendanceSms.Checked == false && chbvoicecall.Checked == false)
            {
                chbMother.Visible = false;
                chbStudent.Visible = false;
                chbFather.Visible = false;
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void loadheadre()
    {
        try
        {
            string straccheadquery = "select header_name,header_id from Acctheader where header_name not in ('arrear')";
            DataSet ds = dasri.select_method_wo_parameter(straccheadquery, "Text");
            ddleappheader.Items.Clear();
            ddleappledger.Items.Clear();
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddleappheader.DataSource = ds;
                ddleappheader.DataTextField = "header_name";
                ddleappheader.DataValueField = "header_id";
                ddleappheader.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void loadledger()
    {
        try
        {
            ddleappledger.Items.Clear();
            if (ddleappheader.Items.Count > 0) // added by jairam 24-03-2015
            {
                string strquer = "select fee_type,fee_code from fee_info where fee_type not in ('Cash','Income & Expenditure','Misc') and fee_type not in (select bankname from bank_master1) and header_id = " + ddleappheader.SelectedValue.ToString() + " order by fee_code";
                DataSet ds = dasri.select_method_wo_parameter(strquer, "text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    ddleappledger.DataSource = ds;
                    ddleappledger.DataTextField = "fee_type";
                    ddleappledger.DataValueField = "fee_code";
                    ddleappledger.DataBind();
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddlexamapptype_SelectedIndexChanged(object sender, EventArgs e) // added by Srinath 05-11-2014
    {
        try
        {
            txtappfee.Visible = false;
            if (ddlexamapptype.SelectedItem.ToString() == "Application Form" || ddlexamapptype.SelectedItem.ToString() == "Semester Mark Sheet" || ddlexamapptype.SelectedItem.ToString() == "Course Completaion" || ddlexamapptype.SelectedItem.ToString() == "Consolidate Mark Sheet" || ddlexamapptype.SelectedItem.ToString() == "Online Application Fee" || ddlexamapptype.SelectedItem.ToString() == "Central Valuation" || ddlexamapptype.SelectedItem.ToString() == "Syllabi & Curricular")
            {
                txtappfee.Visible = true;
            }
            txtappfee.Text = string.Empty;
            string strquery = dasri.GetFunction("select value from Master_Settings where settings='" + ddlexamapptype.SelectedItem.ToString() + "'");
            if (strquery.Trim() != "" && strquery.Trim() != "0" && strquery != null)
            {
                string[] strval = strquery.Split(';');
                if (strval.GetUpperBound(0) > 0)
                {
                    ddleappheader.Text = strval[0].ToString();
                    ddleappledger.Text = strval[1].ToString();
                    if (strval.GetUpperBound(0) == 2)
                    {
                        txtappfee.Text = strval[2].ToString();
                    }
                    loadchallanHeader();
                    loadchallanledger();
                }
            }
            else
            {
                loadchallanHeader();
                loadchallanledger();
            }
        }
        catch (Exception ex)
        {
            lblexamhearerr.Visible = true;
            lblexamhearerr.Text = ex.ToString();
        }
    }

    protected void ddleappheader_SelectedIndexChanged(object sender, EventArgs e) // added by Srinath 05-11-2014
    {
        try
        {
            loadledger();
            loadchallanledger();
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnexamfeessave_Save(object sender, EventArgs e) // added by Srinath 05-11-2014
    {
        try
        {
            string strsettings = ddlexamapptype.SelectedItem.ToString();
            string strexafeevalue = string.Empty;
            if (txtappfee.Visible == true)
            {
                strexafeevalue = "" + ddleappheader.SelectedValue.ToString() + ";" + ddleappledger.SelectedValue.ToString() + ";" + txtappfee.Text.ToString() + "";
            }
            else
            {
                strexafeevalue = "" + ddleappheader.SelectedValue.ToString() + ";" + ddleappledger.SelectedValue.ToString() + "";
            }
            string str = string.Empty;//Fee obtained from Subject Type
            if (chksubtypeFee.Checked)
                str = "1";
            else
                str = "0";
            int ne = 0;
            if (!string.IsNullOrEmpty(str))
            {
                ne = dasri.update_method_wo_parameter("if exists (select * from Master_Settings where settings='Fee obtained from Subject Type') update Master_Settings set value='" + str + "'  where settings='Fee obtained from Subject Type' else insert into Master_Settings(settings,value) values('Fee obtained from Subject Type','" + str + "')", "text");
            }
            int a = 0;
            for (int i = 0; i < ddluser.Items.Count; i++)
            {
                if (ddluser.Items[i].Selected == true)
                {
                    user_code = ddluser.Items[i].Value;

                    string inseupvalues = "if exists (select * from Master_Settings where settings='" + strsettings + "' and usercode='" + user_code + "' )";
                    inseupvalues = inseupvalues + "update Master_Settings set value='" + strexafeevalue + "'  where settings='" + strsettings + "' and usercode='" + user_code + "' ";
                    inseupvalues = inseupvalues + " else";
                    inseupvalues = inseupvalues + " insert into Master_Settings(settings,value,usercode) values('" + strsettings + "','" + strexafeevalue + "','" + user_code + "')";
                    a = dasri.update_method_wo_parameter(inseupvalues, "text");
                }
            }

            imgAlert.Visible = true;
            lbl_alert.Text = "Saved successfully";


        }
        catch (Exception ex)
        {
            lblexamhearerr.Visible = true;
            lblexamhearerr.Text = ex.ToString();
        }
    }

    protected void ddltype_college_Changed(object sender, EventArgs e)
    {
        try
        {
            string apply = "apply";
            string type = ddltypecollege.SelectedItem.Text;
            eduleve(type, apply);
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddlapplicationcode_colltype_college_Changed(object sender, EventArgs e)
    {
        try
        {
            string apply = "code";
            string type = ddlapplicationcode_colltype.SelectedItem.Text;
            eduleve(type, apply);
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddlapplicatonno_colltype_changed(object sender, EventArgs e)
    {
        try
        {
            string apply = "application";
            string type = ddlapplicatonno_colltype.SelectedItem.Text;
            eduleve(type, apply);
        }
        catch (Exception ex)
        {
        }
    }

    public void bindcolltype()
    {
        try
        {
            ds11.Clear();
            string typequery = "select distinct type  from course where college_code =" + ddlcollege.SelectedItem.Value + "";
            ds11 = dasri.select_method_wo_parameter(typequery, "Text");
            if (ds11.Tables[0].Rows.Count > 0)
            {
                ddltypecollege.DataSource = ds11;
                ddltypecollege.DataTextField = "type";
                ddltypecollege.DataValueField = "type";
                ddltypecollege.DataBind();
                ddlapplicationcode_colltype.DataSource = ds11;
                ddlapplicationcode_colltype.DataTextField = "type";
                ddlapplicationcode_colltype.DataValueField = "type";
                ddlapplicationcode_colltype.DataBind();
                ddlapplicatonno_colltype.DataSource = ds11;
                ddlapplicatonno_colltype.DataTextField = "type";
                ddlapplicatonno_colltype.DataValueField = "type";
                ddlapplicatonno_colltype.DataBind();
            }
            ddltypecollege.Items.Insert(0, "---Select---");
            ddlapplicationcode_colltype.Items.Insert(0, "---Select---");
            ddlapplicatonno_colltype.Items.Insert(0, "---Select---");
        }
        catch (Exception ex)
        {
        }
    }

    public void eduleve(string type, string value)
    {
        try
        {
            ds11.Clear();
            string query = " select distinct Edu_Level  from course where type='" + type + "' and college_code=" + ddlcollege.SelectedItem.Value + " order by Edu_Level desc";
            ds11 = dasri.select_method_wo_parameter(query, "Text");
            if (ds11.Tables[0].Rows.Count > 0)
            {
                if (value == "apply")
                {
                    ddleduction_level.DataSource = ds11;
                    ddleduction_level.DataTextField = "Edu_Level";
                    ddleduction_level.DataValueField = "Edu_Level";
                    ddleduction_level.DataBind();
                }
                else if (value == "code")
                {
                    ddlapplicationcode_edulevel.DataSource = ds11;
                    ddlapplicationcode_edulevel.DataTextField = "Edu_Level";
                    ddlapplicationcode_edulevel.DataValueField = "Edu_Level";
                    ddlapplicationcode_edulevel.DataBind();
                }
                else if (value == "application")
                {
                    ddlapplicatonno_edulevel.DataSource = ds11;
                    ddlapplicatonno_edulevel.DataTextField = "Edu_Level";
                    ddlapplicatonno_edulevel.DataValueField = "Edu_Level";
                    ddlapplicatonno_edulevel.DataBind();
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void btntypesave_Click(object sender, EventArgs e)
    {
        try
        {
            string type = ddltypecollege.SelectedItem.Text;
            if (type.ToString() != "---Select---")
            {
                string edulevel = ddleduction_level.SelectedItem.Text;
                string fromdate1 = fromdate.Text;
                string todate1 = todate.Text;
                string[] splitfrom = fromdate1.Split('/');
                string[] splitto = todate1.Split('/');
                DateTime dt1 = Convert.ToDateTime(splitfrom[1] + "/" + splitfrom[0] + "/" + splitfrom[2]);
                DateTime dt2 = Convert.ToDateTime(splitto[1] + "/" + splitto[0] + "/" + splitto[2]);
                if (dt2 >= dt1)
                {
                    string applyquery = "if not exists (select * from setting_application where type_College ='" + type + "' and Edu_level ='" + edulevel + "' and college_code='" + ddlcollege.SelectedItem.Value + "' and setting_type='Apply Settings')insert into setting_application(type_College,Edu_level,fromdate,todate,college_Code,setting_type)values('" + type + "','" + edulevel + "','" + dt1.ToString("MM/dd/yyyy") + "','" + dt2.ToString("MM/dd/yyyy") + "','" + ddlcollege.SelectedItem.Value + "','Apply Settings') else  update setting_application set fromdate ='" + dt1.ToString("MM/dd/yyyy") + "' ,todate ='" + dt2.ToString("MM/dd/yyyy") + "' where type_College ='" + type + "' and Edu_level ='" + edulevel + "' and college_code='" + ddlcollege.SelectedItem.Value + "' and setting_type='Apply Settings'";
                    int insert = dasri.update_method_wo_parameter(applyquery, "Text");
                    if (insert != 0)
                    {
                        //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Saved Successfully')", true);
                        imgAlert.Visible = true;
                        lbl_alert.Text = "Saved successfully";
                    }
                }
                else
                {
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('To Date Must be Greater Then From Date')", true);
                    imgAlert.Visible = true;
                    lbl_alert.Text = "To Date Must Be Greater Than From Date";
                }
            }
            else
            {
                // ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Please Select Type')", true);
                imgAlert.Visible = true;
                lbl_alert.Text = "Please Select Type";
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void btncodegensave_Click(object sender, EventArgs e)
    {
        try
        {
            string type = ddlapplicationcode_colltype.SelectedItem.Text;
            if (type.ToString() != "---Select---")
            {
                string edulevel = ddlapplicationcode_edulevel.SelectedItem.Text;
                string fromdate1 = fromdatecode.Text;
                string todate1 = todatecode.Text;
                string[] splitfrom = fromdate1.Split('/');
                string[] splitto = todate1.Split('/');
                DateTime dt1 = Convert.ToDateTime(splitfrom[1] + "/" + splitfrom[0] + "/" + splitfrom[2]);
                DateTime dt2 = Convert.ToDateTime(splitto[1] + "/" + splitto[0] + "/" + splitto[2]);
                if (dt2 >= dt1)
                {
                    string applyquery = "if not exists (select * from setting_application where type_College ='" + type + "' and Edu_level ='" + edulevel + "' and college_code='" + ddlcollege.SelectedItem.Value + "' and setting_type='Code Settings')insert into setting_application(type_College,Edu_level,fromdate,todate,college_Code,setting_type)values('" + type + "','" + edulevel + "','" + dt1.ToString("MM/dd/yyyy") + "','" + dt2.ToString("MM/dd/yyyy") + "','" + ddlcollege.SelectedItem.Value + "','Code Settings') else  update setting_application set fromdate ='" + dt1.ToString("MM/dd/yyyy") + "' ,todate ='" + dt2.ToString("MM/dd/yyyy") + "' where type_College ='" + type + "' and Edu_level ='" + edulevel + "' and college_code='" + ddlcollege.SelectedItem.Value + "' and setting_type='Code Settings'";
                    int insert = dasri.update_method_wo_parameter(applyquery, "Text");
                    if (insert != 0)
                    {
                        // ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Saved Successfully')", true);
                        imgAlert.Visible = true;
                        lbl_alert.Text = "Saved successfully";
                    }
                }
                else
                {
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('To Date Must be Greater Then From Date')", true);
                    imgAlert.Visible = true;
                    lbl_alert.Text = "To Date Must Be Greater Than From Date";
                }
            }
            else
            {
                //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Please Select Type')", true);
                imgAlert.Visible = true;
                lbl_alert.Text = "Please Select Type";
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnapplnosave_Click(object sender, EventArgs e)
    {
        try
        {
            string type = ddlapplicatonno_colltype.SelectedItem.Text;
            if (type.ToString() != "---Select---")
            {
                string edulevel = ddlapplicatonno_edulevel.SelectedItem.Text;
                string fromdate1 = fromdateapplication.Text;
                string todate1 = todateapplication.Text;
                string[] splitfrom = fromdate1.Split('/');
                string[] splitto = todate1.Split('/');
                DateTime dt1 = Convert.ToDateTime(splitfrom[1] + "/" + splitfrom[0] + "/" + splitfrom[2]);
                DateTime dt2 = Convert.ToDateTime(splitto[1] + "/" + splitto[0] + "/" + splitto[2]);
                if (dt2 >= dt1)
                {
                    string applyquery = "if not exists (select * from setting_application where type_College ='" + type + "' and Edu_level ='" + edulevel + "' and college_code='" + ddlcollege.SelectedItem.Value + "' and setting_type='Applno Settings')insert into setting_application(type_College,Edu_level,fromdate,todate,college_Code,setting_type)values('" + type + "','" + edulevel + "','" + dt1.ToString("MM/dd/yyyy") + "','" + dt2.ToString("MM/dd/yyyy") + "','" + ddlcollege.SelectedItem.Value + "','Applno Settings') else  update setting_application set fromdate ='" + dt1.ToString("MM/dd/yyyy") + "' ,todate ='" + dt2.ToString("MM/dd/yyyy") + "' where type_College ='" + type + "' and Edu_level ='" + edulevel + "' and college_code='" + ddlcollege.SelectedItem.Value + "' and setting_type='Applno Settings'";
                    int insert = dasri.update_method_wo_parameter(applyquery, "Text");
                    if (insert != 0)
                    {
                        //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Saved Successfully')", true);
                        imgAlert.Visible = true;
                        lbl_alert.Text = "Saved successfully";
                    }
                }
                else
                {
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('To Date Must be Greater Then From Date')", true);
                    imgAlert.Visible = true;
                    lbl_alert.Text = "To Date Must Be Greater Than From Date";
                }
            }
            else
            {
                //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Please Select Type')", true);
                imgAlert.Visible = true;
                lbl_alert.Text = "Please Select Type";
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void btn_folio(object sender, EventArgs e)   //////Added by jeyagandhi//////////
    {
        try
        {
            folioexist = string.Empty;
            prefixsuffix = txt_prefix.Text + "-" + txt_suffix.Text;
            if (txt_prefix.Text != "" && txt_suffix.Text != "")
            {
                folioexist = " if exists (select * from Master_Settings where settings='" + dropFolio.SelectedItem.Text + "') update Master_Settings set value='" + prefixsuffix + "' where settings='" + dropFolio.SelectedItem.Text + "' else insert into Master_Settings (settings,value) values ('" + dropFolio.SelectedItem.Text + "','" + prefixsuffix + "')";
                int foexist = dasri.update_method_wo_parameter(folioexist, "text");
                if (folioexist != "")
                {
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Saved Successfully')", true);
                    imgAlert.Visible = true;
                    lbl_alert.Text = "Saved successfully";
                }
            }
            else
            {
                //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Please Enter Both Text')", true);
                imgAlert.Visible = true;
                lbl_alert.Text = "Please Enter Both Text";
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void cblcamuserlock_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int icou = 0;
            for (int i = 0; i < cblcamuserlock.Items.Count; i++)
            {
                if (cblcamuserlock.Items[i].Selected == true)
                {
                    icou++;
                }
            }
            if (icou == cblcamuserlock.Items.Count)
            {
                txt_camlockusername.Text = "User Name(" + cblcamuserlock.Items.Count + ")";
                cbcamlockuser.Checked = true;
            }
            else if (icou == 0)
            {
                txt_camlockusername.Text = "---Select---";
                cbcamlockuser.Checked = false;
            }
            else
            {
                txt_camlockusername.Text = "User Name(" + icou + ")";
                cbcamlockuser.Checked = false;
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void cbcamlockuser_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (cbcamlockuser.Checked == true)
            {
                for (int i = 0; i < cblcamuserlock.Items.Count; i++)
                {
                    cblcamuserlock.Items[i].Selected = true;
                }
                txt_camlockusername.Text = "User Name(" + cblcamuserlock.Items.Count + ")";
            }
            else
            {
                for (int i = 0; i < cblcamuserlock.Items.Count; i++)
                {
                    cblcamuserlock.Items[i].Selected = false;
                }
                txt_camlockusername.Text = "---Select---";
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void lockuser()
    {
        try
        {
            if (rdb_ind.Checked == true)
            {
                txt_camlockusername.Enabled = false;
                Cbcamcalculationlock.Enabled = false;
                txt_camlockusername.Text = "---Select---";
            }
            if (rdb_grp.Checked == true)
            {
                bindstaffcode();
                Cbcamcalculationlock.Enabled = true;
                txt_camlockusername.Enabled = true;
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void bindstaffcode()
    {
        try
        {
            if (rdb_grp.Checked == true)
            {
                string majorvalue = string.Empty;
                for (int i = 0; i < ddluser.Items.Count; i++)
                {
                    if (ddluser.Items[i].Selected == true)
                    {
                        selected_userid = Convert.ToString(ddluser.Items[i].Text);
                        selected_usercode = Convert.ToInt16(ddluser.Items[i].Value);
                        string subvalue = "'" + selected_usercode + ";%'";
                        if (majorvalue.Trim() == "")
                        {
                            majorvalue = "group_code  like " + subvalue + "";
                        }
                        else
                        {
                            majorvalue = majorvalue + " or " + "group_code  like " + subvalue + "";
                        }
                    }
                }
                if (majorvalue.Trim() != "")
                {
                    string selectuserquery = "select user_code,user_id from UserMaster where (" + majorvalue + ") and college_code ='" + Convert.ToString(ddlcollege.SelectedValue) + "' order by user_id";
                    dsbindv.Clear();
                    dsbindv = dasri.select_method_wo_parameter(selectuserquery, "Text");
                    if (dsbindv.Tables[0].Rows.Count > 0)
                    {
                        cblcamuserlock.DataSource = dsbindv;
                        cblcamuserlock.DataTextField = "user_id";
                        cblcamuserlock.DataValueField = "user_code";
                        cblcamuserlock.DataBind();
                    }
                    int countvalue = 0;
                    if (cblcamuserlock.Items.Count > 0)
                    {
                        for (int k = 0; k < cblcamuserlock.Items.Count; k++)
                        {
                            string staffcode = cblcamuserlock.Items[k].Value;
                            string checkvalue = dasri.GetFunction("select value  from Master_Settings where settings='CAM Calculation Lock' and Usercode ='" + staffcode + "'");
                            if (checkvalue.Trim() == "1")
                            {
                                cblcamuserlock.Items[k].Selected = true;
                                Cbcamcalculationlock.Checked = true;
                                countvalue++;
                            }
                            else
                            {
                                cblcamuserlock.Items[k].Selected = false;
                            }
                        }
                        if (countvalue != 0)
                        {
                            txt_camlockusername.Text = "User Name(" + countvalue + ")";
                        }
                        else
                        {
                            txt_camlockusername.Text = "---Select---";
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnminicamoderation_Click(object sender, EventArgs e)
    {
        try
        {
            string valmark = txtminicamode.Text.ToString();
            string strquery = "if not exists (select * from COE_Master_Settings where settings = 'min Ica Moderation " + ddlminicamode.SelectedItem.Text + "')";
            strquery = strquery + " insert into COE_Master_Settings(settings,value) values('min Ica Moderation " + ddlminicamode.SelectedItem.Text + "','" + valmark + "')";
            strquery = strquery + " else update COE_Master_Settings set value='" + valmark + "' where settings = 'min Ica Moderation " + ddlminicamode.SelectedItem.Text + "'";
            int sava = dasri.update_method_wo_parameter(strquery, "Text");
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddlminicamode_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            string getvald = dasri.GetFunctionv("select value from COE_Master_Settings where settings = 'min Ica Moderation " + ddlminicamode.SelectedItem.Text + "'");
            txtminicamode.Text = getvald;
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddlmarksheetaddSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            Fpmarksheetform.Sheets[0].RowCount = 0;
            Fpmarksheetform.Sheets[0].ColumnCount = 1;
            Fpmarksheetform.Sheets[0].Columns[0].Width = 300;
            Fpmarksheetform.CommandBar.Visible = false;
            Fpmarksheetform.ColumnHeader.Cells[0, 0].Text = "Text";
            if (ddlmarksheetadd.Text.Trim() != "")
            {
                string gettext = dasri.GetFunction("select value from COE_Master_Settings where settings='" + ddlmarksheetadd.Text + " Passing Minimum'");
                if (gettext.Trim() != "" && gettext.Trim() != "0")
                {
                    string[] stva = gettext.Split('~');
                    for (int c = 0; c <= stva.GetUpperBound(0); c++)
                    {
                        Fpmarksheetform.Sheets[0].RowCount++;
                        Fpmarksheetform.Sheets[0].Cells[Fpmarksheetform.Sheets[0].RowCount - 1, 0].Text = stva[c].ToString();
                    }
                }
            }
            Fpmarksheetform.Sheets[0].PageSize = Fpmarksheetform.Sheets[0].RowCount;
        }
        catch (Exception ex)
        {
            coemrksheeterror.Text = ex.ToString();
            coemrksheeterror.Visible = true;
        }
    }

    protected void btnaddrowmark_Click1(object sender, EventArgs e)
    {
        try
        {
            if (ddlmarksheetadd.Text.Trim() != "")
            {
                Fpmarksheetform.Sheets[0].RowCount++;
            }
            else
            {
                coemrksheeterror.Text = "Please Select The Education Level";
                coemrksheeterror.Visible = true;
            }
            Fpmarksheetform.Sheets[0].PageSize = Fpmarksheetform.Sheets[0].RowCount;
        }
        catch (Exception ex)
        {
            coemrksheeterror.Text = ex.ToString();
            coemrksheeterror.Visible = true;
        }
    }

    protected void btnmarkshsave_Click1(object sender, EventArgs e)
    {
        try
        {
            Fpmarksheetform.SaveChanges();
            if (ddlmarksheetadd.Text.Trim() != "")
            {
                string strtexval = string.Empty;
                if (Fpmarksheetform.Sheets[0].RowCount > 0)
                {
                    for (int r = 0; r < Fpmarksheetform.Sheets[0].RowCount; r++)
                    {
                        if (strtexval == "")
                        {
                            strtexval = Fpmarksheetform.Sheets[0].Cells[r, 0].Text.ToString();
                        }
                        else
                        {
                            strtexval = strtexval + "~" + Fpmarksheetform.Sheets[0].Cells[r, 0].Text.ToString();
                        }
                    }
                    string strquery = "if not exists(select value from COE_Master_Settings where settings='" + ddlmarksheetadd.Text + " Passing Minimum')";
                    strquery = strquery + " insert into COE_Master_Settings (settings,value) values('" + ddlmarksheetadd.Text + " Passing Minimum','" + strtexval + "')";
                    strquery = strquery + " else update COE_Master_Settings set value='" + strtexval + "' where settings='" + ddlmarksheetadd.Text + " Passing Minimum'";
                    int a = dasri.update_method_wo_parameter(strquery, "Text");
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Saved Successfully')", true);
                    imgAlert.Visible = true;
                    lbl_alert.Text = "Saved successfully";
                }
                else
                {
                    coemrksheeterror.Text = "Please Add and Your Text";
                    coemrksheeterror.Visible = true;
                }
            }
            else
            {
                coemrksheeterror.Text = "Please Select The Education Level";
                coemrksheeterror.Visible = true;
            }
        }
        catch (Exception ex)
        {
            coemrksheeterror.Text = ex.ToString();
            coemrksheeterror.Visible = true;
        }
    }

    protected void btnmarkshdelete_Click1(object sender, EventArgs e)
    {
        try
        {
            if (ddlmarksheetadd.Text.Trim() != "")
            {
                string strquery = "delete from COE_Master_Settings where settings='" + ddlmarksheetadd.Text + " Passing Minimum'";
                int a = dasri.update_method_wo_parameter(strquery, "Text");
                ddlmarksheetaddSelectedIndexChanged(sender, e);
                //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Deleted Successfully')", true);
                imgAlert.Visible = true;
                lbl_alert.Text = "Deleted successfully";
            }
            else
            {
                coemrksheeterror.Text = "Please Select The Education Level";
                coemrksheeterror.Visible = true;
            }
        }
        catch (Exception ex)
        {
            coemrksheeterror.Text = ex.ToString();
            coemrksheeterror.Visible = true;
        }
    }

    protected void btnmodsave_Click1(object sender, EventArgs e)
    {
        try
        {
            string markval = ddlmodbatch.Text.ToString() + "/" + ddlmodedu.Text.ToString() + "/Moderation";
            string strquery = "delete from COE_Master_Settings where settings='" + markval + "'";
            int a = dasri.update_method_wo_parameter(strquery, "Text");
            string modeartionmark = txtmodmark.Text.ToString();
            if (modeartionmark.Trim() != "" && modeartionmark != null)
            {
                strquery = "if not exists(select * from COE_Master_Settings where settings='" + markval + "') insert into COE_Master_Settings(settings,value) values('" + markval + "','" + modeartionmark + "')";
                a = dasri.update_method_wo_parameter(strquery, "Text");
            }
            //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Saved Successfully')", true);
            imgAlert.Visible = true;
            lbl_alert.Text = "Saved successfully";
        }
        catch (Exception ex)
        {
            coemrksheeterror.Text = ex.ToString();
            coemrksheeterror.Visible = true;
        }
    }

    protected void ddlmodmarkchange(object sender, EventArgs e)
    {
        try
        {
            string markval = ddlmodbatch.Text.ToString() + "/" + ddlmodedu.Text.ToString() + "/Moderation";
            string modmark = dasri.GetFunction("select value from COE_Master_Settings where settings='" + markval + "'");
            if (modmark == "0")
            {
                modmark = string.Empty;
            }
            txtmodmark.Text = modmark;
        }
        catch (Exception ex)
        {
            coemrksheeterror.Text = ex.ToString();
            coemrksheeterror.Visible = true;
        }
    }

    protected void btnfailsave_Click1(object sender, EventArgs e)
    {
        try
        {
            string markval = ddlfailbatch.Text.ToString() + "/" + ddlfialedu.Text.ToString() + "/Fail Grade";
            string strquery = "delete from COE_Master_Settings where settings='" + markval + "'";
            int a = dasri.update_method_wo_parameter(strquery, "Text");
            string modeartionmark = txtfailgrade.Text.ToString();
            if (modeartionmark.Trim() != "" && modeartionmark != null)
            {
                strquery = "if not exists(select * from COE_Master_Settings where settings='" + markval + "') insert into COE_Master_Settings(settings,value) values('" + markval + "','" + modeartionmark + "')";
                a = dasri.update_method_wo_parameter(strquery, "Text");
            }
            //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Saved Successfully')", true);
            imgAlert.Visible = true;
            lbl_alert.Text = "Saved successfully";
        }
        catch (Exception ex)
        {
            coemrksheeterror.Text = ex.ToString();
            coemrksheeterror.Visible = true;
        }
    }

    protected void failgradechange(object sender, EventArgs e)
    {
        try
        {
            string markval = ddlfailbatch.Text.ToString() + "/" + ddlfialedu.Text.ToString() + "/Fail Grade";
            string modmark = dasri.GetFunction("select value from COE_Master_Settings where settings='" + markval + "'");
            if (modmark == "0")
            {
                modmark = string.Empty;
            }
            txtfailgrade.Text = modmark;
        }
        catch (Exception ex)
        {
            coemrksheeterror.Text = ex.ToString();
            coemrksheeterror.Visible = true;
        }
    }

    //added by sudhagar fine setting 14-06-2016
    //mess rights

    protected void cb_mess_CheckedChange(object sender, EventArgs e)
    {
        try
        {
            int cout = 0;
            txt_messname.Text = "--Select--";
            if (cb_hos.Checked == true)
            {
                cout++;
                for (int i = 0; i < cbl_hos.Items.Count; i++)
                {
                    cbl_hos.Items[i].Selected = true;
                }
                txt_messname.Text = "Mess Name(" + (cbl_hos.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < cbl_hos.Items.Count; i++)
                {
                    cbl_hos.Items[i].Selected = false;
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void cbl_mess_SelectedIndexChange(object sender, EventArgs e)
    {
        try
        {
            int i = 0;
            cb_hos.Checked = false;
            int commcount = 0;
            txt_messname.Text = "--Select--";
            for (i = 0; i < cbl_hos.Items.Count; i++)
            {
                if (cbl_hos.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                    cb_hos.Checked = false;
                }
            }
            if (commcount > 0)
            {
                if (commcount == cbl_hos.Items.Count)
                {
                    cb_hos.Checked = true;
                }
                txt_messname.Text = "Mess Name(" + commcount.ToString() + ")";
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void bind_mess()
    {
        try
        {
            ds.Clear();
            cbl_hos.Items.Clear();
            // ds = d2.Bindmess_inv(collegecode1);
            // where CollegeCode='" + ddlcollege.SelectedValue + "'
            string selectQuery = "select MessMasterPK,MessName,MessAcr from HM_MessMaster order by MessMasterPK asc";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selectQuery, "Text");
            //ds = d2.Bindmess_basedonrights(user_code, collegecode1);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                cbl_hos.DataSource = ds;
                cbl_hos.DataTextField = "MessName";
                cbl_hos.DataValueField = "MessMasterPK";
                cbl_hos.DataBind();
            }
            else
            {
                txt_messname.Text = "--Select--";
            }
        }
        catch (Exception ex)
        {
        }
    }

    //store rights
    protected void cb_store_all_CheckedChange(object sender, EventArgs e)
    {
        try
        {
            int cout = 0;
            txt_Store.Text = "--Select--";
            if (cb_store.Checked == true)
            {
                cout++;
                for (int i = 0; i < cbl_store.Items.Count; i++)
                {
                    cbl_store.Items[i].Selected = true;
                }
                txt_Store.Text = "Store Name(" + (cbl_store.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < cbl_store.Items.Count; i++)
                {
                    cbl_store.Items[i].Selected = false;
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void cbl_store_SelectedIndexChange(object sender, EventArgs e)
    {
        try
        {
            int i = 0;
            cb_store.Checked = false;
            int commcount = 0;
            txt_Store.Text = "--Select--";
            for (i = 0; i < cbl_store.Items.Count; i++)
            {
                if (cbl_store.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                    cb_store.Checked = false;
                }
            }
            if (commcount > 0)
            {
                if (commcount == cbl_store.Items.Count)
                {
                    cb_store.Checked = true;
                }
                txt_Store.Text = "Store Name(" + commcount.ToString() + ")";
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void bind_store()
    {
        try
        {
            ds.Clear();
            cbl_store.Items.Clear();
            string selectQuery = "   select StorePK,StoreName from IM_StoreMaster  order by StoreName";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selectQuery, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                cbl_store.DataSource = ds;
                cbl_store.DataTextField = "StoreName";
                cbl_store.DataValueField = "StorePK";
                cbl_store.DataBind();
            }
            else
            {
                txt_Store.Text = "--Select--";
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void BindReqType()
    {
        try
        {
            string[] reqname = { "Item Request", "Service", "Visitor Appointment", "Complaints", "Leave Request", "GatePass Request", "Event Request", "Payment Request", "Purchase Request" };
            for (int i = 0; i < 9; i++)
            {
                ddl_requesttype.Items.Add(new ListItem(reqname[i], Convert.ToString(i + 1)));
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void ddl_requesttype_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
        }
        catch (Exception ex)
        {
        }
    }

    public void loadtapal_header()
    {
        try
        {
            string query_select = "SELECT distinct HeaderPK,HeaderName FROM FM_HeaderMaster H,FM_LedgerMaster L WHERE H.HeaderPK = L.HeaderFK AND LedgerMode = 1";
            ds = d2.select_method_wo_parameter(query_select, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddl_tapal_header.DataSource = ds;
                ddl_tapal_header.DataTextField = "HeaderName";
                ddl_tapal_header.DataValueField = "HeaderPK";
                ddl_tapal_header.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void loadtapal_ledger()
    {
        try
        {
            if (ddl_tapal_header.Items.Count > 0)
            {
                string headerpk = Convert.ToString(ddl_tapal_header.SelectedItem.Value);
                string query_select = "SELECT LedgerPK,LedgerName FROM FM_HeaderMaster H,FM_LedgerMaster L WHERE H.HeaderPK = L.HeaderFK AND L.HeaderFK = '" + headerpk + "' AND LedgerMode = 1";
                ds = d2.select_method_wo_parameter(query_select, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    ddl_tapal_ledger.DataSource = ds;
                    ddl_tapal_ledger.DataTextField = "LedgerName";
                    ddl_tapal_ledger.DataValueField = "LedgerPK";
                    ddl_tapal_ledger.DataBind();
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void ddl_tapal_header_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            loadtapal_ledger();
        }
        catch (Exception ex)
        {
        }
    }

    public void ddl_tapal_ledger_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
        }
        catch (Exception ex)
        {
        }
    }

    //finance setting
    public void loadfinyear()
    {
        try
        {
            chkl_fin.Items.Clear();
            string selqry = "select (CONVERT(varchar(20), FinYearStart,103)+'-'+ CONVERT(varchar(20), FinYearEnd,103)) as financialyear,FinYearPK,FinYearName FROM FM_FinYearMaster  where collegecode='" + ddlcollege.SelectedItem.Value + "' ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                chkl_fin.DataSource = ds;
                chkl_fin.DataTextField = "financialyear";
                chkl_fin.DataValueField = "FinYearPK";
                chkl_fin.DataBind();
            }
            //for (int i = 0; i < chkl_fin.Items.Count; i++)
            //{
            //    chkl_fin.Items[i].Selected = true;
            //}
            //txt_finname.Text = "Financial Year(" + chkl_fin.Items.Count + ")";
            //chk_fin.Checked = true;
        }
        catch (Exception ex)
        {
        }
    }

    public void loadheader()
    {
        try
        {
            chkl_head.Items.Clear();
            string selqry = "select HeaderPK,HeaderName  from FM_HeaderMaster  where collegecode='" + ddlcollege.SelectedItem.Value + "' ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                chkl_head.DataSource = ds;
                chkl_head.DataTextField = "HeaderName";
                chkl_head.DataValueField = "HeaderPK";
                chkl_head.DataBind();
            }
            //for (int i = 0; i < chkl_head.Items.Count; i++)
            //{
            //    chkl_head.Items[i].Selected = true;
            //}
            //txt_head.Text = " Header(" + chkl_head.Items.Count + ")";
            //chk_head.Checked = true;
        }
        catch (Exception ex)
        {
        }
    }

    public void loadled()
    {
        try
        {
            chkl_ledg.Items.Clear();
            string stream = string.Empty;
            for (int i = 0; i < chkl_head.Items.Count; i++)
            {
                if (chkl_head.Items[i].Selected == true)
                {
                    if (stream == "")
                    {
                        stream = chkl_head.Items[i].Value.ToString();
                    }
                    else
                    {
                        stream = stream + "','" + "" + chkl_head.Items[i].Value.ToString() + "";
                    }
                }
            }
            string selqry = "select LedgerPK,LedgerName  from FM_LedgerMaster where HeaderFK in ('" + stream + "')  and collegecode='" + ddlcollege.SelectedItem.Value + "' ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                chkl_ledg.DataSource = ds;
                chkl_ledg.DataTextField = "LedgerName";
                chkl_ledg.DataValueField = "LedgerPK";
                chkl_ledg.DataBind();
            }
            else
            {
                chk_ledg.Checked = false; ;
            }
            //for (int i = 0; i < chkl_ledg.Items.Count; i++)
            //{
            //    chkl_ledg.Items[i].Selected = true;
            //    chk_ledg.Checked = true;
            //}
            //txt_ledg.Text = " Ledger(" + chkl_ledg.Items.Count + ")";
        }
        catch (Exception ex)
        {
        }
    }

    public void chk_fin_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            int cout = 0;
            txt_finname.Text = "--Select--";
            if (chk_fin.Checked == true)
            {
                cout++;
                for (int i = 0; i < chkl_fin.Items.Count; i++)
                {
                    chkl_fin.Items[i].Selected = true;
                }
                txt_finname.Text = "Finance Year(" + (chkl_fin.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < chkl_fin.Items.Count; i++)
                {
                    chkl_fin.Items[i].Selected = false;
                }
                txt_finname.Text = "--Select--";
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void chkl_fin_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int commcount = 0;
            txt_finname.Text = "--Select--";
            chk_fin.Checked = false;
            for (int i = 0; i < chkl_fin.Items.Count; i++)
            {
                if (chkl_fin.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                    chk_fin.Checked = false;
                }
            }
            if (commcount > 0)
            {
                if (commcount == chkl_fin.Items.Count)
                {
                    chk_fin.Checked = true;
                }
                txt_finname.Text = "Finance Year(" + commcount.ToString() + ")";
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void chk_head_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            int cout = 0;
            txt_head.Text = "--Select--";
            if (chk_head.Checked == true)
            {
                cout++;
                for (int i = 0; i < chkl_head.Items.Count; i++)
                {
                    chkl_head.Items[i].Selected = true;
                }
                txt_head.Text = "Header(" + (chkl_head.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < chkl_head.Items.Count; i++)
                {
                    chkl_head.Items[i].Selected = false;
                }
                txt_head.Text = "--Select--";
            }
            loadled();
        }
        catch (Exception ex)
        {
        }
    }

    public void chkl_head_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int commcount = 0;
            txt_head.Text = "--Select--";
            chk_head.Checked = false;
            for (int i = 0; i < chkl_head.Items.Count; i++)
            {
                if (chkl_head.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                    chk_head.Checked = false;
                }
            }
            if (commcount > 0)
            {
                if (commcount == chkl_head.Items.Count)
                {
                    chk_head.Checked = true;
                }
                txt_head.Text = "Header(" + commcount.ToString() + ")";
            }
            loadled();
        }
        catch (Exception ex)
        {
        }
    }

    public void chk_ledg_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            int cout = 0;
            txt_ledg.Text = "--Select--";
            if (chk_ledg.Checked == true)
            {
                cout++;
                for (int i = 0; i < chkl_ledg.Items.Count; i++)
                {
                    chkl_ledg.Items[i].Selected = true;
                }
                txt_ledg.Text = "Ledger(" + (chkl_ledg.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < chkl_ledg.Items.Count; i++)
                {
                    chkl_ledg.Items[i].Selected = false;
                }
                txt_ledg.Text = "--Select--";
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void chkl_ledg_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int commcount = 0;
            txt_ledg.Text = "--Select--";
            chk_ledg.Checked = false;
            for (int i = 0; i < chkl_ledg.Items.Count; i++)
            {
                if (chkl_ledg.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                    chk_ledg.Checked = false;
                }
            }
            if (commcount > 0)
            {
                if (commcount == chkl_ledg.Items.Count)
                {
                    chk_ledg.Checked = true;
                }
                txt_ledg.Text = "Ledger(" + commcount.ToString() + ")";
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddl_hdrFine_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            loadFineLedger();
        }
        catch (Exception ex)
        {
        }
    }

    public void loadFineHeader()
    {
        try
        {
            string usercode = Convert.ToString(Session["usercode"]);
            string collegecodeNew = collegecode1;
            if (ddlcollege.Items.Count > 0)
            {
                collegecodeNew = Convert.ToString(ddlcollege.SelectedItem.Value);
            }
            ddl_hdrFine.Items.Clear();
            string query = "SELECT distinct HeaderPK,HeaderName FROM FM_HeaderMaster H WHERE CollegeCode = " + collegecodeNew + "";
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddl_hdrFine.DataSource = ds;
                ddl_hdrFine.DataTextField = "HeaderName";
                ddl_hdrFine.DataValueField = "HeaderPK";
                ddl_hdrFine.DataBind();
                loadFineLedger();
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void loadFineLedger()
    {
        try
        {
            string usercode = Convert.ToString(Session["usercode"]);
            string collegecodeNew = collegecode1;
            if (ddlcollege.Items.Count > 0)
            {
                collegecodeNew = Convert.ToString(ddlcollege.SelectedItem.Value);
            }
            ddl_lgrFine.Items.Clear();
            ddl_fineLedger.Items.Clear();//delsi 29/06
            if (ddl_hdrFine.Items.Count > 0)
            {
                string query = "SELECT distinct LedgerPK,LedgerName FROM FM_LedgerMaster L WHERE  l.LedgerMode=0   AND L.CollegeCode = " + collegecodeNew + " and L.HeaderFK in (" + Convert.ToString(ddl_hdrFine.SelectedItem.Value) + ")";
                ds = d2.select_method_wo_parameter(query, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    ddl_lgrFine.DataSource = ds;
                    ddl_lgrFine.DataTextField = "LedgerName";
                    ddl_lgrFine.DataValueField = "LedgerPK";
                    ddl_lgrFine.DataBind();
                    ddl_fineLedger.DataSource = ds;//delsi 29/06
                    ddl_fineLedger.DataTextField = "LedgerName";
                    ddl_fineLedger.DataValueField = "LedgerPK";
                    ddl_fineLedger.DataBind();
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    //added by sudhagar 28-09-2016 readmission fees settings
    #region

    protected void ddlreadmfinehed_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            loadFineLedgerreamd();
        }
        catch { }
    }

    public void loadFineHeaderreamd()
    {
        try
        {
            string usercode = Convert.ToString(Session["usercode"]);
            string collegecodeNew = collegecode1;
            if (ddlcollege.Items.Count > 0)
            {
                collegecodeNew = Convert.ToString(ddlcollege.SelectedItem.Value);
            }
            ddlreadmfinehed.Items.Clear();
            string query = "SELECT distinct HeaderPK,HeaderName FROM FM_HeaderMaster H WHERE CollegeCode = " + collegecodeNew + "";
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddlreadmfinehed.DataSource = ds;
                ddlreadmfinehed.DataTextField = "HeaderName";
                ddlreadmfinehed.DataValueField = "HeaderPK";
                ddlreadmfinehed.DataBind();
                loadFineLedgerreamd();
            }
        }
        catch { }
    }

    public void loadFineLedgerreamd()
    {
        try
        {
            string usercode = Convert.ToString(Session["usercode"]);
            string collegecodeNew = collegecode1;
            if (ddlcollege.Items.Count > 0)
            {
                collegecodeNew = Convert.ToString(ddlcollege.SelectedItem.Value);
            }
            ddlreadmfineled.Items.Clear();
            if (ddlreadmfinehed.Items.Count > 0)
            {
                string query = "SELECT distinct LedgerPK,LedgerName FROM FM_LedgerMaster L WHERE  l.LedgerMode=0   AND L.CollegeCode = " + collegecodeNew + " and L.HeaderFK in (" + Convert.ToString(ddlreadmfinehed.SelectedItem.Value) + ")";
                ds = d2.select_method_wo_parameter(query, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    ddlreadmfineled.DataSource = ds;
                    ddlreadmfineled.DataTextField = "LedgerName";
                    ddlreadmfineled.DataValueField = "LedgerPK";
                    ddlreadmfineled.DataBind();
                }
            }
        }
        catch { }
    }

    #endregion

    //added by sudhagar thurday 28-04
    #region application fees

    protected void loadstream()
    {
        try
        {
            ddlstream.Items.Clear();
            string selqry = "select distinct type  from Course where college_code ='" + ddlcollege.SelectedItem.Value + "' and type<>''";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddlstream.DataSource = ds;
                ddlstream.DataTextField = "type";
                ddlstream.DataValueField = "type";
                ddlstream.DataBind();
                ddlstream.Enabled = true;
            }
            else
            {
                ddlstream.Enabled = false;
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void educationLevel()
    {
        try
        {
            ddledlevel.Items.Clear();
            string stream = string.Empty;
            if (ddlstream.Items.Count > 0)
            {
                stream = Convert.ToString(ddlstream.SelectedItem.Value);
            }
            string collegecodelevel = ddlcollegename.SelectedItem.Value;
            string SelectQ = "select distinct Edu_Level  from course  where  college_code in(" + collegecodelevel + ")";//modified by abarna
            if (stream != "" && stream != null)
            {
                SelectQ = SelectQ + " and type='" + stream + "'";
            }
            ds.Clear();
            ds = d2.select_method_wo_parameter(SelectQ, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddledlevel.DataSource = ds;
                ddledlevel.DataTextField = "Edu_Level";
                ddledlevel.DataValueField = "Edu_Level";
                ddledlevel.DataBind();

                ddl_genderset.DataSource = ds;
                ddl_genderset.DataTextField = "Edu_Level";
                ddl_genderset.DataValueField = "Edu_Level";
                ddl_genderset.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void loadAppLedger()
    {
        try
        {
            ddlledger.Items.Clear();
            string query = "SELECT distinct LedgerPK,LedgerName FROM FM_LedgerMaster L WHERE  l.LedgerMode=0   AND L.CollegeCode = " + ddlcollege.SelectedItem.Value + "";
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddlledger.DataSource = ds;
                ddlledger.DataTextField = "LedgerName";
                ddlledger.DataValueField = "LedgerPK";
                ddlledger.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void ddlstream_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            educationLevel();
        }
        catch (Exception ex)
        {
        }
    }

    public void ddledlevel_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
        }
        catch (Exception ex)
        {
        }
    }

    public void ddlledger_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
        }
        catch (Exception ex)
        {
        }
    }

    public void btnappsave_OnClick(object sender, EventArgs e)
    {
        try
        {
            string stream = string.Empty;
            string educlev = string.Empty;
            string ledgerid = string.Empty;
            double amount = 0;
            string headerid = string.Empty;
            string setting = string.Empty;
            string clgcode = string.Empty;
            string linkName = string.Empty;
            if (ddlstream.Items.Count > 0)
                stream = Convert.ToString(ddlstream.SelectedItem.Value);
            if (ddledlevel.Items.Count > 0)
                educlev = Convert.ToString(ddledlevel.SelectedItem.Value);
            if (ddlledger.Items.Count > 0)
            {
                ledgerid = Convert.ToString(ddlledger.SelectedItem.Value);
                headerid = d2.GetFunction("select headerfk from FM_LedgerMaster where LedgerPK='" + ledgerid + "' ");
            }
            double.TryParse(Convert.ToString(txtamt.Text.Trim()), out amount);
            if (rbfeesmode.SelectedIndex == 0)
                linkName = "Online Application Fees";
            else
                linkName = "Registration Fees";
            if (educlev != "" && ledgerid != "" && headerid != "" && amount != 0)
            {
                string value = headerid + ";" + ledgerid + ";" + amount;
                if (stream != "")
                    setting = stream + ";";
                setting = setting + educlev + ";" + linkName;
                // string insertQ = "insert into Master_Settings (settings,value) values('" + setting + "','" + value + "')";
                string insertQ = "if exists (select * from New_InsSettings where LinkName='" + setting + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' and LinkValue ='" + value + "') update New_InsSettings set LinkValue ='" + value + "' where LinkName='" + setting + "'  and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,college_code) values ('" + setting + "','" + value + "','" + ddlcollege.SelectedItem.Value + "')";
                int update = d2.update_method_wo_parameter(insertQ, "Text");
                if (update > 0)
                {
                    //lbloutput.Text = "Saved Successfully";
                    //lbloutput.Visible = true;
                    //ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Saved successfully')", true);
                    imgAlert.Visible = true;
                    lbl_alert.Text = "Saved successfully";
                }
                else
                {
                    //lbloutput.Text = "Not Saved";
                    //lbloutput.Visible = true;
                    //ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Not Saved')", true);
                    imgAlert.Visible = true;
                    lbl_alert.Text = "Not Saved ";
                }
            }
            else
            {
                //ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Not Saved')", true);
                imgAlert.Visible = true;
                lbl_alert.Text = "Not Saved";
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void selectedFeesMode()
    {
    }

    protected void rbfeesmode_Selected(object sender, EventArgs e)
    {
    }

    #endregion

    public void loadTransportHeaderot()
    {
        try
        {
            string usercode = Convert.ToString(Session["usercode"]);
            string collegecodeNew = string.Empty;
            if (ddl_otColleges.Items.Count > 0)
            {
                collegecodeNew = Convert.ToString(ddl_otColleges.SelectedItem.Value);
            }
            ddl_otTransHeader.Items.Clear();
            string query = "SELECT distinct HeaderPK,HeaderName FROM FM_HeaderMaster H WHERE CollegeCode = " + collegecodeNew + "";
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                ddl_otTransHeader.DataSource = ds;
                ddl_otTransHeader.DataTextField = "HeaderName";
                ddl_otTransHeader.DataValueField = "HeaderPK";
                ddl_otTransHeader.DataBind();
                loadTransportLedgerot();
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void loadTransportLedgerot()
    {
        try
        {
            string usercode = Convert.ToString(Session["usercode"]);
            string collegecodeNew = string.Empty;
            if (ddl_otColleges.Items.Count > 0)
            {
                collegecodeNew = Convert.ToString(ddl_otColleges.SelectedItem.Value);
            }
            ddl_otTransLedger.Items.Clear();
            if (ddl_otTransHeader.Items.Count > 0)
            {
                string query = "SELECT distinct LedgerPK,LedgerName FROM FM_LedgerMaster L WHERE  l.LedgerMode=0   AND L.CollegeCode = " + collegecodeNew + " and L.HeaderFK in (" + Convert.ToString(ddl_otTransHeader.SelectedItem.Value) + ")";
                ds = d2.select_method_wo_parameter(query, "Text");
                if (ds.Tables[0].Rows.Count > 0)
                {
                    ddl_otTransLedger.DataSource = ds;
                    ddl_otTransLedger.DataTextField = "LedgerName";
                    ddl_otTransLedger.DataValueField = "LedgerPK";
                    ddl_otTransLedger.DataBind();
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void loadFineHeaderot()
    {
        try
        {
            string usercode = Convert.ToString(Session["usercode"]);
            string collegecodeNew = string.Empty;
            if (ddl_otColleges.Items.Count > 0)
            {
                collegecodeNew = Convert.ToString(ddl_otColleges.SelectedItem.Value);
            }
            ddl_otFineHeader.Items.Clear();
            string query = "SELECT distinct HeaderPK,HeaderName FROM FM_HeaderMaster H WHERE CollegeCode = " + collegecodeNew + "";
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddl_otFineHeader.DataSource = ds;
                ddl_otFineHeader.DataTextField = "HeaderName";
                ddl_otFineHeader.DataValueField = "HeaderPK";
                ddl_otFineHeader.DataBind();
                loadFineLedgerot();
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void loadMessHeader()
    {
        try
        {
            string usercode = Convert.ToString(Session["usercode"]);
            string collegecodeNew = string.Empty;
            if (ddlcollege.Items.Count > 0)
            {
                collegecodeNew = Convert.ToString(ddlcollege.SelectedItem.Value);
            }
            ddl_studmessheader.Items.Clear();
            string query = "SELECT distinct HeaderPK,HeaderName FROM FM_HeaderMaster H WHERE CollegeCode = " + collegecodeNew + "";
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddl_studmessheader.DataSource = ds;
                ddl_studmessheader.DataTextField = "HeaderName";
                ddl_studmessheader.DataValueField = "HeaderPK";
                ddl_studmessheader.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void ddl_studmessheader_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            loadMessLedger();
        }
        catch (Exception ex)
        {
        }
    }

    public void loadMessLedger()
    {
        try
        {
            string usercode = Convert.ToString(Session["usercode"]);
            string collegecodeNew = string.Empty;
            if (ddlcollege.Items.Count > 0)
            {
                collegecodeNew = Convert.ToString(ddlcollege.SelectedItem.Value);
            }
            ddl_studmessledger.Items.Clear();
            if (ddl_studmessheader.Items.Count > 0)
            {
                string query = "SELECT distinct LedgerPK,LedgerName FROM FM_LedgerMaster L WHERE  l.LedgerMode=0   AND L.CollegeCode = " + collegecodeNew + " and L.HeaderFK in (" + Convert.ToString(ddl_studmessheader.SelectedItem.Value) + ")";
                ds = d2.select_method_wo_parameter(query, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    ddl_studmessledger.DataSource = ds;
                    ddl_studmessledger.DataTextField = "LedgerName";
                    ddl_studmessledger.DataValueField = "LedgerPK";
                    ddl_studmessledger.DataBind();
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void loadFineLedgerot()
    {
        try
        {
            string usercode = Convert.ToString(Session["usercode"]);
            string collegecodeNew = string.Empty;
            if (ddl_otColleges.Items.Count > 0)
            {
                collegecodeNew = Convert.ToString(ddl_otColleges.SelectedItem.Value);
            }
            ddl_otFineLedger.Items.Clear();
            ddl_Fineledger2.Items.Clear();
            if (ddl_otFineHeader.Items.Count > 0)
            {
                string query = "SELECT distinct LedgerPK,LedgerName FROM FM_LedgerMaster L WHERE  l.LedgerMode=0   AND L.CollegeCode = " + collegecodeNew + " and L.HeaderFK in (" + Convert.ToString(ddl_otFineHeader.SelectedItem.Value) + ")";
                ds = d2.select_method_wo_parameter(query, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    ddl_otFineLedger.DataSource = ds;
                    ddl_otFineLedger.DataTextField = "LedgerName";
                    ddl_otFineLedger.DataValueField = "LedgerPK";
                    ddl_otFineLedger.DataBind();

                    ddl_Fineledger2.DataSource = ds;//delsi 29/06
                    ddl_Fineledger2.DataTextField = "LedgerName";
                    ddl_Fineledger2.DataValueField = "LedgerPK";
                    ddl_Fineledger2.DataBind();
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void collegebankAdmission()
    {
        try
        {
            string queru = "SELECT DISTINCT BankName+'-'+AccNo+'-'+City as BankName,BankPk FROM FM_FinBankMaster where CollegeCode=" + ddlcollege.SelectedItem.Value + "";
            DataSet dsBank = d2.select_method_wo_parameter(queru, "Text");
            ddlAdmissionBank.Items.Clear();
            if (dsBank.Tables[0].Rows.Count > 0)
            {
                ddlAdmissionBank.DataSource = dsBank;
                ddlAdmissionBank.DataTextField = "BankName";
                ddlAdmissionBank.DataValueField = "BankPk";
                ddlAdmissionBank.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddl_otFineHeader_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            loadFineLedgerot();
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddl_otTransHeader_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            loadTransportLedgerot();
        }
        catch (Exception ex)
        {
        }
    }

    protected void chkmacadd_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (chkmacadd.Checked == true)
            {
                fieldrights.Visible = true;
            }
            else if (chkmacadd.Checked == false)
            {
                fieldrights.Visible = false;
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void chkrhtsmac_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            if (chkrhtsmac.Checked == true)
            {
                txtmac.Visible = true;
                txtmac.Text = string.Empty;
            }
            else if (chkrhtsmac.Checked == false)
            {
                txtmac.Text = string.Empty;
                txtmac.Visible = false;
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddlhdrtrans_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            loadTransportLedger();
        }
        catch (Exception ex)
        {
        }
    }

    protected void btn_alertclose_Click(object sender, EventArgs e)
    {
        try
        {
            imgAlert.Visible = false;
        }
        catch (Exception ex)
        {
        }
    }

    public void loadTransportHeader()
    {
        try
        {
            string usercode = Convert.ToString(Session["usercode"]);
            string collegecodeNew = collegecode1;
            if (ddlcollege.Items.Count > 0)
            {
                collegecodeNew = Convert.ToString(ddlcollege.SelectedItem.Value);
            }
            ddlhdrtrans.Items.Clear();
            string query = "SELECT distinct HeaderPK,HeaderName FROM FM_HeaderMaster H WHERE CollegeCode = " + collegecodeNew + "";
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddlhdrtrans.DataSource = ds;
                ddlhdrtrans.DataTextField = "HeaderName";
                ddlhdrtrans.DataValueField = "HeaderPK";
                ddlhdrtrans.DataBind();
                loadTransportLedger();
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void loadTransportLedger()
    {
        try
        {
            string usercode = Convert.ToString(Session["usercode"]);
            string collegecodeNew = collegecode1;
            if (ddlcollege.Items.Count > 0)
            {
                collegecodeNew = Convert.ToString(ddlcollege.SelectedItem.Value);
            }
            ddllgrtrans.Items.Clear();
            if (ddlhdrtrans.Items.Count > 0)
            {
                string query = "SELECT distinct LedgerPK,LedgerName FROM FM_LedgerMaster L WHERE  l.LedgerMode=0   AND L.CollegeCode = " + collegecodeNew + " and L.HeaderFK in (" + Convert.ToString(ddlhdrtrans.SelectedItem.Value) + ")";
                ds = d2.select_method_wo_parameter(query, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    ddllgrtrans.DataSource = ds;
                    ddllgrtrans.DataTextField = "LedgerName";
                    ddllgrtrans.DataValueField = "LedgerPK";
                    ddllgrtrans.DataBind();
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnexamsave_Click(object sender, EventArgs e)
    {
        try
        {
            string valDept = string.Empty;
            string collegeCode = Convert.ToString(ddlCollegeAcr.SelectedValue);
            if (cblDegree.Items.Count > 0)
                valDept = getCblSelectedValueNew(cblDegree);
            string applicationMark = string.Empty;
            if (rbdApplication.Checked)
                applicationMark = "Exam year and month for Application" + collegeCode.Trim();
            else if (rbdMarkEntry.Checked)
                applicationMark = "Exam year and month for mark" + collegeCode.Trim();
            else
                applicationMark = "Exam year and month Valuation";

            for (int i = 0; i < ddluser.Items.Count; i++) // added by jairam 03-04-2015
            {
                if (ddluser.Items[i].Selected == true)
                {
                    string stag = string.Empty;
                    int coemom = 0;
                    selected_userid = Convert.ToString(ddluser.Items[i].Text);
                    selected_usercode = Convert.ToInt16(ddluser.Items[i].Value);
                    if (rdb_ind.Checked == true)
                    {
                        strusergruop = "usercode";
                    }
                    else if (rdb_grp.Checked == true)
                    {
                        strusergruop = "group_code";
                    }
                    string[] dept = valDept.Split(',');
                    for (int di = 0; di < dept.Length; di++)
                    {
                        coemom = 0;
                        stag = "delete from master_settings where settings='" + applicationMark + "' and " + strusergruop + "='" + selected_usercode + "' and template='" + Convert.ToString(dept[di]) + "'";
                        coemom = dasri.update_method_wo_parameter(stag, "text");
                        if (ddlemyear.Text.Trim() != "" && ddlemyear.Text.Trim() != "0" && ddlemmonth.Text.Trim() != "" && ddlemmonth.Text != "0".Trim())
                        {
                            string stvalue = ddlemyear.SelectedValue.ToString() + ',' + ddlemmonth.SelectedValue.ToString();

                            stag = "if Exists (select value from master_settings where settings='" + applicationMark + "' and " + strusergruop + "='" + selected_usercode + "' and template='" + Convert.ToString(dept[di]) + "') Update master_settings set value='" + stvalue + "',template='" + Convert.ToString(dept[di]) + "' where settings='" + applicationMark + "' and " + strusergruop + "='" + selected_usercode + "' and template='" + Convert.ToString(dept[di]) + "'  else insert into master_settings(settings,value," + strusergruop + ",template) values('" + applicationMark + "','" + stvalue + "','" + selected_usercode + "','" + Convert.ToString(dept[di]) + "')";
                            coemom = dasri.update_method_wo_parameter(stag, "text");
                        }
                    }
                    stag = "delete from master_settings where settings='Exam year and month Result Publish' and " + strusergruop + "='" + selected_usercode + "'";
                    coemom = dasri.update_method_wo_parameter(stag, "text");
                    if (ddlExamYearResult.Items.Count > 0 && ddlExamMonthResult.Items.Count > 0)
                    {
                        string resultExamMonth = Convert.ToString(ddlExamMonthResult.SelectedValue).Trim();
                        string resultExamYear = Convert.ToString(ddlExamYearResult.SelectedValue).Trim();
                        string stvalue = resultExamYear + ',' + resultExamMonth;
                        if (!string.IsNullOrEmpty(resultExamMonth) && !string.IsNullOrEmpty(resultExamYear) && resultExamYear.Trim() != "0" && resultExamMonth.Trim() != "0")
                        {
                            stag = "if Exists (select value from master_settings where settings='Exam year and month Result Publish' and " + strusergruop + "='" + selected_usercode + "') Update master_settings set value='" + stvalue + "' where settings='Exam year and month Result Publish' and " + strusergruop + "='" + selected_usercode + "' else insert into master_settings(settings,value," + strusergruop + ") values('Exam year and month Result Publish','" + stvalue + "','" + selected_usercode + "')";
                            coemom = dasri.update_method_wo_parameter(stag, "text");
                        }
                    }
                    //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Saved Successfully')", true);
                    imgAlert.Visible = true;
                    lbl_alert.Text = "Saved successfully";
                }
            }
        }
        catch (Exception ex)
        {
            coemrksheeterror.Text = ex.ToString();
            coemrksheeterror.Visible = true;
        }
    }

    #region Validate EmailId

    private bool IsValidEmailId(string InputEmail, ref string validemail)
    {
        try
        {
            //Regex To validate Email Address
            Regex regex = new Regex(@"^([\w\.\-]+)@([\w\-]+)((\.(\w){2,3})+)$");
            Match match = regex.Match(InputEmail);
            if (match.Success)
            {
                validemail = InputEmail;
                return true;
            }
            else
            {
                validemail = InputEmail;
                return false;
            }
        }
        catch (Exception ex)
        {
            return false;
        }
    }

    #endregion  Validate EmailId

    #region  Validate MobileNo

    private bool IsValidMobNo(string InputMob, ref string validMob)
    {
        try
        {
            Regex regex = new Regex(@"^[0-9]{10}$");
            Match match = regex.Match(InputMob);
            if (match.Success)
            {
                validMob = InputMob;
                return true;
            }
            else
            {
                validMob = InputMob;
                return false;
            }
        }
        catch (Exception ex)
        {
            return false;
        }
    }

    #endregion Validate MobileNo

    protected void loadchallanHeader()
    {
        try
        {
            string straccheadquery = "SELECT distinct HeaderPK,HeaderName FROM FM_HeaderMaster H WHERE CollegeCode = " + ddlcollege.SelectedValue + "";
            DataSet ds = dasri.select_method_wo_parameter(straccheadquery, "Text");
            ddleappheader.Items.Clear();
            ddleappledger.Items.Clear();
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddleappheader.DataSource = ds;
                ddleappheader.DataTextField = "HeaderName";
                ddleappheader.DataValueField = "HeaderPK";
                ddleappheader.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void loadchallanledger()
    {
        try
        {
            string strquer = "SELECT distinct LedgerPK,LedgerName FROM FM_LedgerMaster L WHERE  l.LedgerMode=0   AND L.CollegeCode = " + ddlcollege.SelectedValue + " and L.HeaderFK in (" + Convert.ToString(ddleappheader.SelectedItem.Value) + ")";
            DataSet ds1 = dasri.select_method_wo_parameter(strquer, "text");
            if (ds1.Tables.Count > 0 && ds1.Tables[0].Rows.Count > 0)
            {
                ddleappledger.DataSource = ds1;
                ddleappledger.DataTextField = "ledgername";
                ddleappledger.DataValueField = "ledgerpk";
                ddleappledger.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnabfine_Click(object sender, EventArgs e)
    {
        try
        {
            string stag = "delete from master_settings where settings='I Half Absent Fine'";
            int coemom = dasri.update_method_wo_parameter(stag, "text");
            string stvalue = txtflabfine.Text.ToString();
            if (stvalue.Trim() != "")
            {
                stag = "if Exists (select value from master_settings where settings='I Half Absent Fine') Update master_settings set value='" + stvalue + "' where settings='I Half Absent Fine' else insert into master_settings(settings,value) values('I Half Absent Fine','" + stvalue + "')";
                coemom = dasri.update_method_wo_parameter(stag, "text");
            }
            stag = "delete from master_settings where settings='II Half Absent Fine'";
            coemom = dasri.update_method_wo_parameter(stag, "text");
            stvalue = txtslabfine.Text.ToString();
            if (stvalue.Trim() != "")
            {
                stag = "if Exists (select value from master_settings where settings='II Half Absent Fine') Update master_settings set value='" + stvalue + "' where settings='II Half Absent Fine' else insert into master_settings(settings,value) values('II Half Absent Fine','" + stvalue + "')";
                coemom = dasri.update_method_wo_parameter(stag, "text");
            }
            stag = "delete from master_settings where settings='Fine Amount Not For Leave'";
            coemom = dasri.update_method_wo_parameter(stag, "text");
            stvalue = "0";
            if (chkfinelesslave.Checked == true)
            {
                stvalue = "1";
            }
            if (stvalue.Trim() != "")
            {
                stag = "if Exists (select value from master_settings where settings='Fine Amount Not For Leave') Update master_settings set value='" + stvalue + "' where settings='Fine Amount Not For Leave' else insert into master_settings(settings,value) values('Fine Amount Not For Leave','" + stvalue + "')";
                coemom = dasri.update_method_wo_parameter(stag, "text");
            }
            //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Saved Successfully')", true);
            imgAlert.Visible = true;
            lbl_alert.Text = "Saved successfully";
        }
        catch (Exception ex)
        {
            lblerror.Visible = true;
            lblerror.Text = ex.ToString();
        }
    }

    //Load Compulsory Type Added by Idhris  08-08-2016
    protected void ddlCOmpCOurse_IndexChange(object sender, EventArgs e)
    {
        try
        {
            if (ddlCOmpCOurse.Items.Count > 0)
            {
                string LinkValue = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='CompulsoryType" + ddlCOmpCOurse.SelectedItem.Value.Trim() + "'  and college_code ='" + ddlcollege.SelectedItem.Value + "' ").Trim();
                ddlCOmpType.SelectedIndex = ddlCOmpType.Items.IndexOf(ddlCOmpType.Items.FindByValue(LinkValue));
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void BindCOmpCourse()
    {
        try
        {
            string strquery = "select distinct edu_level from course where college_code=" + ddlcollege.SelectedItem.Value.ToString() + " order by edu_level desc";
            DataSet comType = new DataSet();
            comType = d2.select_method_wo_parameter(strquery, "Text");
            ddlCOmpCOurse.Items.Clear();
            if (comType.Tables.Count > 0 && comType.Tables[0].Rows.Count > 0)
            {
                ddlCOmpCOurse.DataSource = comType;
                ddlCOmpCOurse.DataTextField = "edu_level";
                ddlCOmpCOurse.DataValueField = "edu_level";
                ddlCOmpCOurse.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }

    private void BindCOmpType()
    {
        try
        {
            ddlCOmpType.Items.Clear();
            string strquery = "select distinct subject_type from sub_sem order by subject_type desc";
            DataSet comType = new DataSet();
            comType = d2.select_method_wo_parameter(strquery, "Text");
            if (comType.Tables.Count > 0 && comType.Tables[0].Rows.Count > 0)
            {
                ddlCOmpType.DataSource = comType;
                ddlCOmpType.DataTextField = "subject_type";
                ddlCOmpType.DataValueField = "subject_type";
                ddlCOmpType.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void btnCOmpType_Click(object sender, EventArgs e)
    {
        try
        {
            string collCode = ddlcollege.Items.Count > 0 ? ddlcollege.SelectedItem.Value : "13";
            string compCourse = string.Empty;
            string compType = string.Empty;
            if (ddlCOmpCOurse.Items.Count > 0)
            {
                compCourse = ddlCOmpCOurse.SelectedItem.Value.Trim();
            }
            if (ddlCOmpType.Items.Count > 0)
            {
                compType = ddlCOmpType.SelectedItem.Value.Trim();
            }
            if (compCourse != string.Empty && compType != string.Empty)
            {
                string insqry = "if exists (select * from New_InsSettings where LinkName='CompulsoryType" + compCourse + "' and  college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + compType + "' where LinkName='CompulsoryType" + compCourse + "'  and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,college_code) values ('CompulsoryType" + compCourse + "','" + compType + "','" + ddlcollege.SelectedItem.Value + "')";
                int save = d2.update_method_wo_parameter(insqry, "Text");
                // ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Saved Successfully')", true);
                imgAlert.Visible = true;
                lbl_alert.Text = "Saved successfully";
            }
            else
            {
                //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Not Saved')", true);
                imgAlert.Visible = true;
                lbl_alert.Text = "Not Saved";
            }
        }
        catch
        {
            //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Not Saved')", true); 
            imgAlert.Visible = true;
            lbl_alert.Text = "Not Saved";
        }
    }

    protected void btnStudExAppSave_Click(object sender, EventArgs e)
    {
        try
        {
            int a = cblStudExApp.Items[0].Selected == true ? 1 : 0;
            int b = cblStudExApp.Items[1].Selected == true ? 1 : 0;
            int c = cblStudExApp.Items[2].Selected == true ? 1 : 0;
            string insqry = "if exists (select LinkName from New_InsSettings where LinkName='ApplyStudExamApp' and  college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + a + "' where LinkName='ApplyStudExamApp'  and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,college_code) values ('ApplyStudExamApp','" + a + "','" + ddlcollege.SelectedItem.Value + "')";
            int save = d2.update_method_wo_parameter(insqry, "Text");
            insqry = "if exists (select LinkName from New_InsSettings where LinkName='ChallanStudExamApp' and  college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + b + "' where LinkName='ChallanStudExamApp'  and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,college_code) values ('ChallanStudExamApp','" + b + "','" + ddlcollege.SelectedItem.Value + "')";
            save = d2.update_method_wo_parameter(insqry, "Text");
            insqry = "if exists (select LinkName from New_InsSettings where LinkName='HallTktStudExamApp' and  college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + c + "' where LinkName='HallTktStudExamApp'  and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,college_code) values ('HallTktStudExamApp','" + c + "','" + ddlcollege.SelectedItem.Value + "')";
            save = d2.update_method_wo_parameter(insqry, "Text");
            //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Saved Successfully')", true);
            imgAlert.Visible = true;
            lbl_alert.Text = "Saved successfully";
        }
        catch
        {
            //ScriptManager.RegisterStartupScript(this, typeof(Page), UniqueID, "alert('Not Saved')", true);
            imgAlert.Visible = true;
            lbl_alert.Text = "Not Saved";
        }
    }

    private void ExamAppCheck()
    {
        try
        {
            cblStudExApp.Items[0].Selected = Convert.ToInt16(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='ApplyStudExamApp' and  college_code ='" + ddlcollege.SelectedItem.Value + "'").Trim()) == 1 ? true : false;
            cblStudExApp.Items[1].Selected = Convert.ToInt16(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='ChallanStudExamApp' and  college_code ='" + ddlcollege.SelectedItem.Value + "'").Trim()) == 1 ? true : false;
            cblStudExApp.Items[2].Selected = Convert.ToInt16(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='HallTktStudExamApp' and  college_code ='" + ddlcollege.SelectedItem.Value + "'").Trim()) == 1 ? true : false;
        }
        catch { }
    }

    //code last modified by Idhris 18-10-2016
    //HR Settings Added By Jeyaprakash on July 21st

    public void loadhrdept()
    {
        try
        {
            cblhrdept.Items.Clear();

            string empty = "";
            for (int i = 0; i < Cblcollege.Items.Count; i++)
            {
                if (Cblcollege.Items[i].Selected == true)
                {
                    if (empty == "")
                    {
                        empty = Convert.ToString(Cblcollege.Items[i].Value);
                    }
                    else
                    {
                        empty = empty + "','" + Convert.ToString(Cblcollege.Items[i].Value);
                    }
                }
            }
            string selqry = "select dept_name,dept_code from hrdept_master where college_code in('" + empty + "')";
            //  string selqry = "select hm.dept_name,hm.dept_code from hrdept_master hm,department d  where hm.college_code in('" + empty + "') and d.dept_code=hm.dept_code and hm.college_code=d.college_code";//delsi3006


            // string selqry = "select dept_name,dept_code from hrdept_master where college_code='" + ddlcollege.SelectedItem.Value + "' ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                cblhrdept.DataSource = ds;
                cblhrdept.DataTextField = "dept_name";
                cblhrdept.DataValueField = "dept_code";
                cblhrdept.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void cbhrdept_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            int cout = 0;
            txthrdept.Text = "--Select--";
            if (cbhrdept.Checked == true)
            {
                cout++;
                for (int i = 0; i < cblhrdept.Items.Count; i++)
                {
                    cblhrdept.Items[i].Selected = true;
                }
                txthrdept.Text = "Department(" + (cblhrdept.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < cblhrdept.Items.Count; i++)
                {
                    cblhrdept.Items[i].Selected = false;
                }
                txthrdept.Text = "--Select--";
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void cblhrdept_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int commcount = 0;
            txthrdept.Text = "--Select--";
            cbhrdept.Checked = false;
            for (int i = 0; i < cblhrdept.Items.Count; i++)
            {
                if (cblhrdept.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                    cbhrdept.Checked = false;
                }
            }
            if (commcount > 0)
            {
                if (commcount == cblhrdept.Items.Count)
                {
                    cbhrdept.Checked = true;
                }
                txthrdept.Text = "Department(" + commcount.ToString() + ")";
            }
        }
        catch (Exception ex)
        {
        }
    }

    //added by sudhagar 24.11.2016
    protected void rblAdmConf_Selected(object sender, EventArgs e)
    {
        if (rblAdmConf.SelectedIndex == 0)
        {
            rbfeesstr.Enabled = false;
        }
        else
        {
            rbfeesstr.Enabled = true;
        }
    }

    //Added by Idhris 22-10-2016
    protected void btnWebRights_0_Click(object sender, EventArgs e)
    {
        TabContainer1.SelectedIndex = 0;
        TabContainer1_ActiveTabChanged(sender, e);
    }

    protected void btnSettings_1_Click(object sender, EventArgs e)
    {
        TabContainer1.SelectedIndex = 1;
        TabContainer1_ActiveTabChanged(sender, e);
    }

    protected void btnFineAmt_2_Click(object sender, EventArgs e)
    {
        TabContainer1.SelectedIndex = 2;
        TabContainer1_ActiveTabChanged(sender, e);
    }

    protected void btnFinancePrint_3_Click(object sender, EventArgs e)
    {
        TabContainer1.SelectedIndex = 3;
        TabContainer1_ActiveTabChanged(sender, e);
    }

    protected void btnCOE_4_Click(object sender, EventArgs e)
    {
        TabContainer1.SelectedIndex = 4;
        TabContainer1_ActiveTabChanged(sender, e);
    }

    protected void btnAttendance_5_Click(object sender, EventArgs e)
    {
        TabContainer1.SelectedIndex = 5;
        TabContainer1_ActiveTabChanged(sender, e);
    }

    protected void btnTransRemind_6_Click(object sender, EventArgs e)
    {
        TabContainer1.SelectedIndex = 6;
        TabContainer1_ActiveTabChanged(sender, e);
    }

    protected void btnSMSTemp_7_Click(object sender, EventArgs e)
    {
        TabContainer1.SelectedIndex = 7;
        TabContainer1_ActiveTabChanged(sender, e);
    }

    protected void btnAdmissionProc_8_Click(object sender, EventArgs e)
    {
        TabContainer1.SelectedIndex = 8;
        TabContainer1_ActiveTabChanged(sender, e);
    }

    protected void btnHRSettings_9_Click(object sender, EventArgs e)
    {
        TabContainer1.SelectedIndex = 9;
        TabContainer1_ActiveTabChanged(sender, e);
        GridBind();
        txtfrmsecamnt.Text = "";
        txttosecamnt.Text = "";
        txtuptosec.Text = "";
        txtItCalPk.Text = "";
    }

    protected void btnUserDegRights_10_Click(object sender, EventArgs e)
    {
        TabContainer1.SelectedIndex = 10;
        TabContainer1_ActiveTabChanged(sender, e);
    }

    protected void btnWebsitePayment_11_Click(object sender, EventArgs e)
    {
        TabContainer1.SelectedIndex = 11;
        TabContainer1_ActiveTabChanged(sender, e);
    }

    //added by Kowshika
    protected void btninvigilation_12_Click(object sender, EventArgs e)
    {
        TabContainer1.SelectedIndex = 12;
        TabContainer1_ActiveTabChanged(sender, e);

    }


    //added by Idhris 30-11-2016
    protected void saveOnlineMerchantKeySalt(object sender, EventArgs e)
    {
        try
        {
            //Online Merchant Key Value
            string merchKey = txtMerchKey.Text.Trim();
            string merchSalt = txtMerchantSalt.Text.Trim();
            string insqry1 = "if exists (select LinkName from New_InsSettings where LinkName='MerchantKEYvalue' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + merchKey + "' where LinkName='MerchantKEYvalue'  and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,college_code) values ('MerchantKEYvalue','" + merchKey + "','" + ddlcollege.SelectedItem.Value + "')";
            int save1 = d2.update_method_wo_parameter(insqry1, "Text");
            insqry1 = "if exists (select LinkName from New_InsSettings where LinkName='MerchantSALTvalue' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + merchSalt + "' where LinkName='MerchantSALTvalue'  and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,college_code) values ('MerchantSALTvalue','" + merchSalt + "','" + ddlcollege.SelectedItem.Value + "')";
            save1 = d2.update_method_wo_parameter(insqry1, "Text");
            ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Saved successfully')", true);
        }
        catch { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Not Saved')", true); }
    }

    private void getSALTandKEY()
    {
        txtMerchantSalt.Text = string.Empty;
        txtMerchKey.Text = string.Empty;
        try
        {
            string salt = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='MerchantSALTvalue'  and college_code ='" + ddlcollege.SelectedItem.Value + "' ").Trim();
            string key = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='MerchantKEYvalue'  and college_code ='" + ddlcollege.SelectedItem.Value + "' ").Trim();
            if (salt != "0" && salt != string.Empty && key != "0" && key != string.Empty)
            {
                txtMerchantSalt.Text = salt;
                txtMerchKey.Text = key;
            }
        }
        catch
        {
        }
    }

    //multiple term added by sudhagar 16.12.2016   
    protected void bindMulTerm(string usercodes)
    {
        try
        {
            cblmulterm.Items.Clear();
            // txtmulsem.Text = "--Select--";
            // cbmulterm.Checked = false;
            ds.Clear();
            string linkName = string.Empty;
            string cbltext = string.Empty;
            ds = d2.loadFeecategory(Convert.ToString(ddlcollege.SelectedItem.Value), usercodes, ref linkName);
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                cblmulterm.DataSource = ds;
                cblmulterm.DataTextField = "TextVal";
                cblmulterm.DataValueField = "TextCode";
                cblmulterm.DataBind();
                //if (cblmulterm.Items.Count > 0)
                //{
                //    for (int i = 0; i < cblmulterm.Items.Count; i++)
                //    {
                //        cblmulterm.Items[i].Selected = true;
                //        cbltext = Convert.ToString(cblmulterm.Items[i].Text);
                //    }
                //    if (cblmulterm.Items.Count == 1)
                //        txtmulsem.Text = "" + linkName + "(" + cbltext + ")";
                //    else
                //        txtmulsem.Text = "" + linkName + "(" + cblmulterm.Items.Count + ")";
                //    cbmulterm.Checked = true;
                //}
            }
        }
        catch { }
    }

    //protected void cbmulterm_CheckedChanged(object sender, EventArgs e)
    //{
    //    string sem =string.Empty;
    //    if (cbmulterm.Checked == true)
    //    {
    //        for (int i = 0; i < cblmulterm.Items.Count; i++)
    //        {
    //            cblmulterm.Items[i].Selected = true;
    //            sem = Convert.ToString(cblmulterm.Items[i].Text);
    //        }
    //        if (lbl_sem.Text == "Semester")
    //        {
    //            if (cblmulterm.Items.Count == 1)
    //            {
    //                txtmulsem.Text = "" + sem + "";
    //            }
    //            else
    //            {
    //                txtmulsem.Text = "Sem(" + (cblmulterm.Items.Count) + ")";
    //            }
    //        }
    //        if (lbl_sem.Text == "Year")
    //        {
    //            if (cblmulterm.Items.Count == 1)
    //            {
    //                txtmulsem.Text = "" + sem + "";
    //            }
    //            else
    //            {
    //                txtmulsem.Text = "Year(" + (cblmulterm.Items.Count) + ")";
    //            }
    //        }
    //    }
    //    else
    //    {
    //        for (int i = 0; i < cblmulterm.Items.Count; i++)
    //        {
    //            cblmulterm.Items[i].Selected = false;
    //        }
    //        txtmulsem.Text = "--Select--";
    //    }
    //}
    //protected void cblmulterm_SelectedIndexChanged(object sender, EventArgs e)
    //{
    //    txtmulsem.Text = "--Select--";
    //    cbmulterm.Checked = false;
    //    string sem =string.Empty;
    //    int commcount = 0;
    //    for (int i = 0; i < cblmulterm.Items.Count; i++)
    //    {
    //        if (cblmulterm.Items[i].Selected == true)
    //        {
    //            commcount = commcount + 1;
    //            sem = Convert.ToString(cblmulterm.Items[i].Text);
    //        }
    //    }
    //    if (commcount > 0)
    //    {
    //        if (lbl_sem.Text == "Semester")
    //        {
    //            if (commcount == 1)
    //            {
    //                txtmulsem.Text = "" + sem + "";
    //            }
    //            else
    //            {
    //                txtmulsem.Text = "Sem(" + commcount.ToString() + ")";
    //            }
    //        }
    //        if (lbl_sem.Text == "Year")
    //        {
    //            if (commcount == 1)
    //            {
    //                txtmulsem.Text = "" + sem + "";
    //            }
    //            else
    //            {
    //                txtmulsem.Text = "Year(" + commcount.ToString() + ")";
    //            }
    //        }
    //        if (commcount == cblmulterm.Items.Count)
    //        {
    //            cbmulterm.Checked = true;
    //        }
    //    }
    //}

    protected void btnsave_mulsem_Click(object sender, EventArgs e)
    {
        try
        {
            if (cbincmulterm.Checked)
            {
                string Feeval = string.Empty;
                for (int row = 0; row < cblmulterm.Items.Count; row++)
                {
                    if (cblmulterm.Items[row].Selected)
                    {
                        if (Feeval == "")
                            Feeval = Convert.ToString(cblmulterm.Items[row].Value);
                        else
                            Feeval = Feeval + "," + Convert.ToString(cblmulterm.Items[row].Value);
                    }
                }
                if (!string.IsNullOrEmpty(Feeval))
                {
                }
            }
        }
        catch { }
    }

    private void setLabelText()
    {
        string grouporusercode = string.Empty;
        if (Session["group_code"] != null && (Convert.ToString(Session["group_code"]).Trim() != "") && (Convert.ToString(Session["group_code"]).Trim() != "0") && (Convert.ToString(Session["group_code"]).Trim() != "-1"))
        {
            grouporusercode = " group_code=" + Convert.ToString(Session["group_code"]).Trim() + "";
        }
        else if (Session["usercode"] != null)
        {
            grouporusercode = " usercode=" + Convert.ToString(Session["usercode"]).Trim() + "";
        }
        List<Label> lbl = new List<Label>();
        List<byte> fields = new List<byte>();
        lbl.Add(lbl_sem);
        fields.Add(4);
        lbl.Add(lblmulterm);
        fields.Add(4);
        new HeaderLabelText().setLabels(grouporusercode, ref lbl, fields);
    }

    //added by Idhris 21-12-2016
    private void bindAdmGenOnRcptBatch()
    {
        ddlAdmGenOnRcpt.Items.Clear();
        for (int i = DateTime.Now.Year + 1; i > 1999; i--)
        {
            ddlAdmGenOnRcpt.Items.Add(i.ToString());
        }
    }

    protected void saveAdmGenOnRcpt(object sender, EventArgs e)
    {
        try
        {
            byte generateAdmNo = 0;
            int batchYear = 0;
            if (chkAdmGenOnRcpt.Checked)
            {
                generateAdmNo = 1;
                batchYear = Convert.ToInt32(ddlAdmGenOnRcpt.SelectedValue);
            }
            bool saved = false;
            for (int i = 0; i < ddluser.Items.Count; i++)
            {
                if (ddluser.Items[i].Selected == true)
                {
                    selected_userid = Convert.ToString(ddluser.Items[i].Text);
                    selected_usercode = Convert.ToInt16(ddluser.Items[i].Value);
                    string insqry = "if exists (select LinkName from New_InsSettings where LinkName='AdmissionNoGenerateOnReceipt' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code='" + selected_usercode + "' ) update New_InsSettings set LinkValue ='" + (generateAdmNo + "," + batchYear) + "' where LinkName='AdmissionNoGenerateOnReceipt'  and college_code ='" + ddlcollege.SelectedItem.Value + "'  and user_code='" + selected_usercode + "' else insert into New_InsSettings(LinkName,LinkValue,college_code,user_code) values ('AdmissionNoGenerateOnReceipt','" + (generateAdmNo + "," + batchYear) + "','" + ddlcollege.SelectedItem.Value + "','" + selected_usercode + "')";
                    int save = d2.update_method_wo_parameter(insqry, "Text");
                    if (save > 0)
                    {
                        saved = true;
                    }
                }
            }
            if (saved)
            {
                ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Saved successfully')", true);
            }
        }
        catch { ScriptManager.RegisterClientScriptBlock(this, this.GetType(), "clientScript", "alert('Not Saved')", true); }
    }

    private void getAdmGenOnRcpt()
    {
        chkAdmGenOnRcpt.Checked = false;
        bindAdmGenOnRcptBatch();
        try
        {
            for (int i = 0; i < ddluser.Items.Count; i++)
            {
                if (ddluser.Items[i].Selected == true)
                {
                    selected_userid = Convert.ToString(ddluser.Items[i].Text);
                    selected_usercode = Convert.ToInt16(ddluser.Items[i].Value);
                    string[] prevVal = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='AdmissionNoGenerateOnReceipt' and college_code ='" + ddlcollege.SelectedItem.Value + "' and user_code='" + selected_usercode + "' ").Trim().Split(',');
                    if (prevVal.Length == 2)
                    {
                        if (prevVal[0] == "1")
                        {
                            chkAdmGenOnRcpt.Checked = true;
                            ddlAdmGenOnRcpt.SelectedIndex = ddlAdmGenOnRcpt.Items.IndexOf(ddlAdmGenOnRcpt.Items.FindByValue(prevVal[1]));
                        }
                        return;
                    }
                }
            }
        }
        catch
        {
        }
    }

    //added by Idhris 22-12-2016
    private void saveWebsitePayment()
    {
        try
        {
            string saveval;
            string insqry;
            int save;
            //Online Application Login Mode
            for (int rgtI = 0; rgtI < rblOnlineAppLoginMode.Items.Count; rgtI++)
            {
                saveval = rblOnlineAppLoginMode.Items[rgtI].Selected ? "1" : "0";

                insqry = "if exists (select LinkName from New_InsSettings where LinkName='OnlineApplicationLoginMode" + rgtI + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + saveval + "' where LinkName='OnlineApplicationLoginMode" + rgtI + "'  and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,college_code) values ('OnlineApplicationLoginMode" + rgtI + "','" + saveval + "','" + ddlcollege.SelectedItem.Value + "')";
                save = d2.update_method_wo_parameter(insqry, "Text");
            }
            //Online Application Payment Gateway
            for (int payment = 0; payment < rblPaymentGateway.Items.Count; payment++)
            {
                if (rblPaymentGateway.Items[payment].Selected)
                {
                    saveval = rblPaymentGateway.Items[payment].Value;
                    insqry = "if exists (select LinkName from New_InsSettings where LinkName='OnlineApplicationPaymentGateway' and college_code ='" + ddlcollege.SelectedItem.Value + "' and LinkValue ='" + saveval + "') update New_InsSettings set LinkValue ='" + saveval + "' where LinkName='OnlineApplicationPaymentGateway'  and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,college_code) values ('OnlineApplicationPaymentGateway','" + saveval + "','" + ddlcollege.SelectedItem.Value + "')";
                    save = d2.update_method_wo_parameter(insqry, "Text");
                }
            }

            //WorldLine For Credit & Debit Card 24-02-2017

            saveval = chkWorldline.Checked ? "1" : "0";
            insqry = "if exists (select LinkName from New_InsSettings where LinkName='OnlineAppPayGatewayWorldLine' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + saveval + "' where LinkName='OnlineAppPayGatewayWorldLine'  and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,college_code) values ('OnlineAppPayGatewayWorldLine','" + saveval + "','" + ddlcollege.SelectedItem.Value + "')";
            save = d2.update_method_wo_parameter(insqry, "Text");


            saveval = Dob.Checked ? "1" : "0";//added by abarna 15.03.2018
            insqry = "if exists (select LinkName from New_InsSettings where LinkName='OnlineAppPayGatewayDOB' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + saveval + "' where LinkName='OnlineAppPayGatewayDOB'  and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,college_code) values ('OnlineAppPayGatewayDOB','" + saveval + "','" + ddlcollege.SelectedItem.Value + "')";
            save = d2.update_method_wo_parameter(insqry, "Text");
            //OnlineAppPayGatewayPartAmt
            saveval = EnablePartamt.Checked ? "1" : "0";//added by abarna 28.03.2018
            insqry = "if exists (select LinkName from New_InsSettings where LinkName='OnlineAppPayGatewayPartAmt' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + saveval + "' where LinkName='OnlineAppPayGatewayPartAmt'  and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,college_code) values ('OnlineAppPayGatewayPartAmt','" + saveval + "','" + ddlcollege.SelectedItem.Value + "')";
            save = d2.update_method_wo_parameter(insqry, "Text");
            //
            saveval = Pdfcheck.Checked ? "1" : "0";//added by abarna 28.03.2018
            insqry = "if exists (select LinkName from New_InsSettings where LinkName='OnlineAppPayGatewayPdf' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + saveval + "' where LinkName='OnlineAppPayGatewayPdf'  and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,college_code) values ('OnlineAppPayGatewayPdf','" + saveval + "','" + ddlcollege.SelectedItem.Value + "')";
            save = d2.update_method_wo_parameter(insqry, "Text");


            saveval = addfee.Checked ? "1" : "0";
            insqry = "if exists (select LinkName from New_InsSettings where LinkName='OnlineAppPayGatewayaddfee' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + saveval + "' where LinkName='OnlineAppPayGatewayaddfee'  and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,college_code) values ('OnlineAppPayGatewayaddfee','" + saveval + "','" + ddlcollege.SelectedItem.Value + "')";
            save = d2.update_method_wo_parameter(insqry, "Text");
            //Online Application date restriction
            bool saveDays = false;
            string appRestrictVal = txtAppLogRestrict.Text.Trim();
            if (chkAppLogRestrict.Checked)
            {
                if (appRestrictVal != string.Empty)
                {
                    saveDays = true;
                }
            }
            if (saveDays)
            {
                insqry = "if exists (select LinkName from New_InsSettings where LinkName='OnlineApplicationLoginRestrict' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + appRestrictVal + "' where LinkName='OnlineApplicationLoginRestrict'  and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,college_code) values ('OnlineApplicationLoginRestrict','" + appRestrictVal + "','" + ddlcollege.SelectedItem.Value + "')";
                save = d2.update_method_wo_parameter(insqry, "Text");
            }
            else
            {
                insqry = "if exists (select LinkName from New_InsSettings where LinkName='OnlineApplicationLoginRestrict' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) delete from New_InsSettings where LinkName='OnlineApplicationLoginRestrict'  and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
                save = d2.update_method_wo_parameter(insqry, "Text");
            }

        }
        catch { }
    }

    private void getWebsitePayment()
    {
        try
        {
            //Online Application Login Mode
            for (int rgtI = 0; rgtI < rblOnlineAppLoginMode.Items.Count; rgtI++)
            {
                string loginMode = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='OnlineApplicationLoginMode" + rgtI + "'  and college_code ='" + ddlcollege.SelectedItem.Value + "' ").Trim();
                if (loginMode.Trim() == "1")
                {
                    rblOnlineAppLoginMode.Items[rgtI].Selected = true;
                }
                else
                {
                    rblOnlineAppLoginMode.Items[rgtI].Selected = false;
                }
            }
            // rblOnlineAppLoginMode.SelectedIndex = rblOnlineAppLoginMode.Items.IndexOf(rblOnlineAppLoginMode.Items.FindByValue(loginMode));
            //Online Application Payment Gateway
            int pGate = 0;//abarna
            string payretrive = "select LinkValue from New_InsSettings where LinkName='OnlineApplicationPaymentGateway'  and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
            DataSet ds = d2.select_method_wo_parameter(payretrive, "Text");
            for (int k = 0; k < ds.Tables[0].Rows.Count; k++)
            {
                pGate = Convert.ToInt32(ds.Tables[0].Rows[k]["LinkValue"]);

                if (pGate == 0)
                    rblPaymentGateway.Items[pGate].Selected = true;
                else
                    rblPaymentGateway.Items[pGate - 1].Selected = true;
            }
            // rblPaymentGateway.SelectedIndex = rblPaymentGateway.Items.IndexOf(rblPaymentGateway.Items.FindByValue(pGate));
            // rblPaymentGateway.SelectedIndex = 0;


            //WorldLine For Credit & Debit Card 24-02-2017

            string pGateCreDebit = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='OnlineAppPayGatewayWorldLine'  and college_code ='" + ddlcollege.SelectedItem.Value + "' ").Trim();
            chkWorldline.Checked = pGateCreDebit == "1" ? true : false;

            string DOB = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='OnlineAppPayGatewayDOB'  and college_code ='" + ddlcollege.SelectedItem.Value + "' ").Trim();
            Dob.Checked = DOB == "1" ? true : false;//added by abarna 15.03.2018
            string partamt = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='OnlineAppPayGatewayPartAmt'  and college_code ='" + ddlcollege.SelectedItem.Value + "' ").Trim();
            EnablePartamt.Checked = partamt == "1" ? true : false;//added by abarna 28.03.2018
            string pdf = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='OnlineAppPayGatewayPdf'  and college_code ='" + ddlcollege.SelectedItem.Value + "' ").Trim();
            Pdfcheck.Checked = pdf == "1" ? true : false;//added by abarna 27.04.2018


            string addfees = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='OnlineAppPayGatewayaddfee'  and college_code ='" + ddlcollege.SelectedItem.Value + "' ").Trim();
            addfee.Checked = addfees == "1" ? true : false;//added by abarna 27.04.2018
            //Online Login Restrict
            int OnlineAppVal = Convert.ToInt32(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='OnlineApplicationLoginRestrict'  and college_code ='" + ddlcollege.SelectedItem.Value + "' "));
            if (OnlineAppVal > 0)
            {
                chkAppLogRestrict.Checked = true;
                txtAppLogRestrict.Text = OnlineAppVal.ToString();
            }
            else
            {
                chkAppLogRestrict.Checked = false;
                txtAppLogRestrict.Text = string.Empty;
            }
        }
        catch
        {
        }
    }

    private void loadPaymode()
    {
        try
        {
            cblpaymode.Items.Clear();
            cblpaymode.Items.Add(new ListItem("Cash", "1"));
            cblpaymode.Items.Add(new ListItem("Cheque", "2"));
            cblpaymode.Items.Add(new ListItem("DD", "3"));
            cblpaymode.Items.Add(new ListItem("Challan", "4"));
            cblpaymode.Items.Add(new ListItem("Online", "5"));
            cblpaymode.Items.Add(new ListItem("Card", "6"));
            cblpaymode.Items.Add(new ListItem("NEFT", "7"));
        }
        catch { }
    }

    //alternate subject rights
    //store rights

    protected void cbaltsub_CheckedChange(object sender, EventArgs e)
    {
        try
        {
            int cout = 0;
            txt_Store.Text = "--Select--";
            if (cbaltsub.Checked == true)
            {
                cout++;
                for (int i = 0; i < cblaltsub.Items.Count; i++)
                {
                    cblaltsub.Items[i].Selected = true;
                }
                txtaltsub.Text = "Subject(" + (cblaltsub.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < cblaltsub.Items.Count; i++)
                {
                    cblaltsub.Items[i].Selected = false;
                }
                txtaltsub.Text = "--Select--";
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void cblaltsub_SelectedIndexChange(object sender, EventArgs e)
    {
        try
        {
            int i = 0;
            cbaltsub.Checked = false;
            int commcount = 0;
            txtaltsub.Text = "--Select--";
            for (i = 0; i < cblaltsub.Items.Count; i++)
            {
                if (cblaltsub.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                    cbaltsub.Checked = false;
                }
            }
            if (commcount > 0)
            {
                if (commcount == cblaltsub.Items.Count)
                {
                    cbaltsub.Checked = true;
                }
                txtaltsub.Text = "Subject(" + commcount.ToString() + ")";
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void bindalternatesubject()
    {
        try
        {
            ds.Clear();
            cblaltsub.Items.Clear();
            string selectQuery = " select distinct subject_type from sub_sem ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selectQuery, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                cblaltsub.DataSource = ds;
                cblaltsub.DataTextField = "subject_type";
                cblaltsub.DataValueField = "subject_type";
                cblaltsub.DataBind();
            }
            else
            {
                txtaltsub.Text = "--Select--";
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void popstype()
    {
        ds.Clear();
        ddlStfType.Items.Clear();
        string item = "select distinct stftype from stafftrans where stftype is not null and stftype<>''";
        ds = d2.select_method_wo_parameter(item, "Text");
        if (ds.Tables[0].Rows.Count > 0)
        {
            ddlStfType.DataSource = ds;
            ddlStfType.DataTextField = "stftype";
            ddlStfType.DataBind();
            ddlStfType.Items.Insert(0, "Select");
        }
        else
        {
            ddlStfType.Items.Insert(0, "Select");
        }
    }

    protected void ddlStfType_Change(object sender, EventArgs e)
    {
        try
        {
            for (int ik = 0; ik < ddluser.Items.Count; ik++)
            {
                if (ddluser.Items[ik].Selected == true)
                {
                    selected_usercode = Convert.ToInt32(ddluser.Items[ik].Value);//delsis0201
                    string selStfType = d2.GetFunction("select template from Master_Settings where settings='Retire_Age_Settings' and usercode='" + selected_usercode + "' and value= '" + Convert.ToString(ddlStfType.SelectedItem.Text) + "'");
                    if (!String.IsNullOrEmpty(selStfType.Trim()) && selStfType.Trim() != "0")
                    {
                        //string[] splStfType = selStfType.Split('-');
                        // ddlStfType.SelectedIndex = ddlStfType.Items.IndexOf(ddlStfType.Items.FindByText(splStfType[0].Trim()));
                        txtRetireAge.Text = selStfType;
                    }
                    else
                    {
                        txtRetireAge.Text = "";
                    }
                }
            }
        }
        catch { }
    }

    protected void cbsubj_OnCheckedChanged(object sender, EventArgs e)
    {
        CallCheckboxChange(cbsubj, cblsubj, txtsubj, "Subject", "--Select--");
    }

    protected void cblsubj_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckboxListChange(cbsubj, cblsubj, txtsubj, "Subject", "--Select--");
    }

    public void bindsubject()
    {
        try
        {
            ds.Clear();
            cblsubj.Items.Clear();
            string selectQuery = " select textval,textcode from textvaltable where textcriteria='subje' and college_code='" + ddlcollege.SelectedValue + "' ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selectQuery, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                cblsubj.DataSource = ds;
                cblsubj.DataTextField = "textval";
                cblsubj.DataValueField = "textcode";
                cblsubj.DataBind();
            }
            else
            {
                txtsubj.Text = "--Select--";
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void subjectSave(string selected_usercode)
    {
        try
        {
            string subjCode = Convert.ToString(getCblSelectedValue(cblsubj));
            if (!string.IsNullOrEmpty(subjCode))
            {
                string insQ = ""; string linkName = "";
                if (rbVocation.Checked == false)//modify barath 07.03.17
                {
                    linkName = "SubjectPriority";
                }
                else
                {
                    linkName = "SubjectPriorityVocational";
                }
                insQ = "if exists (select * from New_InsSettings where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ) update New_InsSettings set LinkValue ='" + subjCode + "' where LinkName='" + linkName + "' and user_code ='" + selected_usercode + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('" + linkName + "','" + subjCode + "','" + selected_usercode + "','" + ddlcollege.SelectedItem.Value + "')";
                int save1 = d2.update_method_wo_parameter(insQ, "Text");
            }
        }
        catch { }
    }

    protected void rbVocation_Click(object sender, EventArgs e)
    {
        bindsubjectrights();
    }

    protected void bindsubjectrights()
    {
        try
        {
            string lnkname = "";
            if (rbVocation.Checked == false)
            {
                lnkname = "SubjectPriority";
            }
            else
            {
                lnkname = "SubjectPriorityVocational";
            }
            string user_code = rs1.GetSelectedItemsValueAsString(ddluser);
            string insqry1 = "select LinkValue from New_InsSettings where LinkName='" + lnkname + "' and user_code in('" + user_code + "') and college_code ='" + ddlcollege.SelectedItem.Value + "' ";
            string feesCode = Convert.ToString(d2.GetFunction(insqry1));
            cblsubj.ClearSelection(); txtsubj.Text = "--Select--";
            if (!string.IsNullOrEmpty(feesCode))
            {
                string[] splscode = feesCode.Split(',');
                if (splscode.Length > 0)
                {
                    int count = 0;
                    txtsubj.Text = "--Select--";
                    for (int sp = 0; sp < splscode.Length; sp++)
                    {
                        for (int sel = 0; sel < cblsubj.Items.Count; sel++)
                        {
                            if (splscode[sp].Trim() == cblsubj.Items[sel].Value)
                            {
                                cblsubj.Items[sel].Selected = true;
                                count++;
                            }
                        }
                    }
                    txtsubj.Text = "Subject(" + count + ")";
                }
            }
        }
        catch { }
    }

    private string getCblSelectedValue(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder selectedvalue = new System.Text.StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (selectedvalue.Length == 0)
                    {
                        selectedvalue.Append(Convert.ToString(cblSelected.Items[sel].Value));
                    }
                    else
                    {
                        selectedvalue.Append("," + Convert.ToString(cblSelected.Items[sel].Value));
                    }
                }
            }
        }
        catch { cblSelected.Items.Clear(); }
        return selectedvalue.ToString();
    }

    protected void ddl_admissionH_SelectedIndexChanged(object sender, EventArgs e)
    {
        //barath 29.03.17
        if (ddl_admissionH.Items.Count > 0)
        {
            string strquer = "SELECT distinct LedgerPK,LedgerName FROM FM_LedgerMaster L WHERE  l.LedgerMode=0   AND L.CollegeCode = " + ddlcollege.SelectedValue + " and L.HeaderFK in (" + Convert.ToString(ddl_admissionH.SelectedItem.Value) + ")";
            DataSet ds1 = new DataSet();
            ds1 = dasri.select_method_wo_parameter(strquer, "text");
            ddl_admissionL.Items.Clear();
            if (ds1.Tables.Count > 0 && ds1.Tables[0].Rows.Count > 0)
            {
                ddl_admissionL.DataSource = ds1;
                ddl_admissionL.DataTextField = "ledgername";
                ddl_admissionL.DataValueField = "ledgerpk";
                ddl_admissionL.DataBind();
            }
        }
    }

    //added by sudhagar another college readmission fees settings

    public void loadReadmHdFine()
    {
        try
        {
            string usercode = Convert.ToString(Session["usercode"]);
            string collegecodeNew = collegecode1;
            if (ddlcollege.Items.Count > 0)
            {
                collegecodeNew = Convert.ToString(ddl_otColleges.SelectedItem.Value);
            }
            ddlreadmhdsnd.Items.Clear();
            string query = "SELECT distinct HeaderPK,HeaderName FROM FM_HeaderMaster H WHERE CollegeCode = " + collegecodeNew + "";
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddlreadmhdsnd.DataSource = ds;
                ddlreadmhdsnd.DataTextField = "HeaderName";
                ddlreadmhdsnd.DataValueField = "HeaderPK";
                ddlreadmhdsnd.DataBind();
                loadReadmLdFine();
            }
        }
        catch { }
    }

    public void loadReadmLdFine()
    {
        try
        {
            string usercode = Convert.ToString(Session["usercode"]);
            string collegecodeNew = collegecode1;
            if (ddlcollege.Items.Count > 0)
            {
                collegecodeNew = Convert.ToString(ddl_otColleges.SelectedItem.Value);
            }
            ddlreadmldsnd.Items.Clear();
            if (ddlreadmhdsnd.Items.Count > 0)
            {
                string query = "SELECT distinct LedgerPK,LedgerName FROM FM_LedgerMaster L WHERE  l.LedgerMode=0   AND L.CollegeCode = " + collegecodeNew + " and L.HeaderFK in (" + Convert.ToString(ddlreadmhdsnd.SelectedItem.Value) + ")";
                ds = d2.select_method_wo_parameter(query, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    ddlreadmldsnd.DataSource = ds;
                    ddlreadmldsnd.DataTextField = "LedgerName";
                    ddlreadmldsnd.DataValueField = "LedgerPK";
                    ddlreadmldsnd.DataBind();
                }
            }
        }
        catch { }
    }

    protected void ddlreadmhdsnd_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        loadReadmLdFine();
    }

    //Added by Idhris  05-05-2017   

    private void loadTcCollege()
    {
        try
        {
            string curUserCode = string.Empty;
            for (int ucI = 0; ucI < ddluser.Items.Count; ucI++)
            {
                if (ddluser.Items[ucI].Selected)
                {
                    curUserCode = ddluser.Items[ucI].Value.Trim();
                    break;
                }
            }
            ddlTcCollege.Items.Clear();
            if (!string.IsNullOrEmpty(curUserCode))
            {
                string selectQuery = "select cp.college_code,cf.collname from collegeprivilages cp,collinfo cf where user_code=" + curUserCode + " and cp.college_code=cf.college_code";
                DataSet ds = d2.select_method_wo_parameter(selectQuery, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    ddlTcCollege.DataSource = ds;
                    ddlTcCollege.DataTextField = "collname";
                    ddlTcCollege.DataValueField = "college_code";
                    ddlTcCollege.DataBind();
                }
            }
        }
        catch { }
    }

    protected void ddlTcCollege_OnIndexChange(object sender, EventArgs e)
    {
        try
        {
            loadTcHeaders();
            loadTcLedgers();
            loadTcSelectedHeadersAndLedgers();
        }
        catch { }
    }

    private void loadTcHeaders()
    {
        try
        {
            string collegeCode = ddlTcCollege.Items.Count > 0 ? ddlTcCollege.SelectedValue : "13";
            cbTcHeader.Checked = false;
            cblTcHeader.Items.Clear();
            txtTcHeader.Text = "--Select--";
            DataSet dsHdrs = d2.select_method_wo_parameter("select HeaderPK,HeaderName from FM_HeaderMaster where CollegeCode ='" + collegeCode + "'", "TEXT");
            if (dsHdrs.Tables.Count > 0 && dsHdrs.Tables[0].Rows.Count > 0)
            {
                cblTcHeader.DataSource = dsHdrs.Tables[0];
                cblTcHeader.DataTextField = "HeaderName";
                cblTcHeader.DataValueField = "HeaderPK";
                cblTcHeader.DataBind();
            }
        }
        catch { }
    }

    protected void cbTcHeader_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            txtTcHeader.Text = "Header (" + ((cbTcHeader.Checked) ? cblTcHeader.Items.Count : 0) + ")";
            for (int hdrI = 0; hdrI < cblTcHeader.Items.Count; hdrI++)
            {
                cblTcHeader.Items[hdrI].Selected = cbTcHeader.Checked;
            }
            loadTcLedgers();
        }
        catch { }
    }

    protected void cblTcHeader_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int hdrCnt = 0;
            for (int hdrI = 0; hdrI < cblTcHeader.Items.Count; hdrI++)
            {
                if (cblTcHeader.Items[hdrI].Selected)
                {
                    hdrCnt++;
                }
            }
            txtTcHeader.Text = "Header (" + hdrCnt + ")";
            if (hdrCnt == cblTcHeader.Items.Count)
            {
                cbTcHeader.Checked = true;
            }
            else
            {
                cbTcHeader.Checked = false;
            }
            loadTcLedgers();
        }
        catch { }
    }

    private void loadTcLedgers()
    {
        try
        {
            cbTcLedger.Checked = false;
            cblTcLedger.Items.Clear();
            txtTcLedger.Text = "--Select--";

            string collegeCode = ddlTcCollege.Items.Count > 0 ? ddlTcCollege.SelectedValue : "13";
            StringBuilder headerCodes = new StringBuilder();
            for (int hdrI = 0; hdrI < cblTcHeader.Items.Count; hdrI++)
            {
                if (cblTcHeader.Items[hdrI].Selected)
                {
                    headerCodes.Append(cblTcHeader.Items[hdrI].Value + ",");
                }
            }
            if (headerCodes.Length > 1)
            {
                headerCodes.Remove(headerCodes.Length - 1, 1);

                DataSet dsLgrs = d2.select_method_wo_parameter("select LedgerPK,LedgerName from FM_LedgerMaster where CollegeCode ='" + collegeCode + "' and HeaderFk in (" + headerCodes.ToString() + ")", "TEXT");
                if (dsLgrs.Tables.Count > 0 && dsLgrs.Tables[0].Rows.Count > 0)
                {
                    cblTcLedger.DataSource = dsLgrs.Tables[0];
                    cblTcLedger.DataTextField = "LedgerName";
                    cblTcLedger.DataValueField = "LedgerPK";
                    cblTcLedger.DataBind();
                }
            }
        }
        catch { }
    }

    protected void cbTcLedger_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {

            txtTcLedger.Text = "Ledger (" + (cbTcLedger.Checked ? cblTcLedger.Items.Count : 0) + ")";
            for (int lgrI = 0; lgrI < cblTcLedger.Items.Count; lgrI++)
            {
                cblTcLedger.Items[lgrI].Selected = cbTcLedger.Checked;
            }
        }
        catch { }
    }

    protected void cblTcLedger_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int lgrCnt = 0;
            for (int lgrI = 0; lgrI < cblTcLedger.Items.Count; lgrI++)
            {
                if (cblTcLedger.Items[lgrI].Selected)
                {
                    lgrCnt++;
                }
            }
            txtTcLedger.Text = "Ledger (" + lgrCnt + ")";
            if (lgrCnt == cblTcLedger.Items.Count)
            {
                cbTcLedger.Checked = true;
            }
            else
            {
                cbTcLedger.Checked = false;
            }
        }
        catch { }
    }

    private void loadTcSelectedHeadersAndLedgers()
    {
        try
        {
            string collegeCode = ddlTcCollege.SelectedValue;
            string curUserCode = string.Empty;
            for (int ucI = 0; ucI < ddluser.Items.Count; ucI++)
            {
                if (ddluser.Items[ucI].Selected)
                {
                    curUserCode = ddluser.Items[ucI].Value.Trim();
                    break;
                }
            }

            if (!string.IsNullOrEmpty(curUserCode))
            {
                string savedValue = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='TCLedgersForUser' and college_code ='" + collegeCode + "' and user_code='" + curUserCode + "'").Trim();
                string[] hdrsLgrs = savedValue.Split('#');
                if (hdrsLgrs.Length == 2)
                {
                    ArrayList arrHdrs = new ArrayList();
                    ArrayList arrLgrs = new ArrayList();
                    string[] hdrs = hdrsLgrs[0].Split(',');
                    foreach (string hdr in hdrs)
                    {
                        arrHdrs.Add(hdr);
                    }
                    string[] lgrs = hdrsLgrs[1].Split(',');
                    foreach (string lgr in lgrs)
                    {
                        arrLgrs.Add(lgr);
                    }

                    for (int hdrI = 0; hdrI < cblTcHeader.Items.Count; hdrI++)
                    {
                        if (arrHdrs.Contains(cblTcHeader.Items[hdrI].Value))
                        {
                            cblTcHeader.Items[hdrI].Selected = true;
                        }
                    }
                    cblTcHeader_OnSelectedIndexChanged(new object(), new EventArgs());
                    for (int lgrI = 0; lgrI < cblTcLedger.Items.Count; lgrI++)
                    {
                        if (arrLgrs.Contains(cblTcLedger.Items[lgrI].Value))
                        {
                            cblTcLedger.Items[lgrI].Selected = true;
                        }
                    }
                    cblTcLedger_OnSelectedIndexChanged(new object(), new EventArgs());
                }
            }
        }
        catch { }

    }

    protected void btnTcSave_OnClick(object sender, EventArgs e)
    {
        try
        {
            string collegeCode = ddlTcCollege.SelectedValue;
            string curUserCode = string.Empty;
            for (int ucI = 0; ucI < ddluser.Items.Count; ucI++)
            {
                if (ddluser.Items[ucI].Selected)
                {
                    curUserCode = ddluser.Items[ucI].Value.Trim();
                    break;
                }
            }

            if (!string.IsNullOrEmpty(curUserCode))
            {
                StringBuilder sbHeaderCodes = new StringBuilder();
                for (int hdrI = 0; hdrI < cblTcHeader.Items.Count; hdrI++)
                {
                    if (cblTcHeader.Items[hdrI].Selected)
                    {
                        sbHeaderCodes.Append(cblTcHeader.Items[hdrI].Value + ",");
                    }
                }
                if (sbHeaderCodes.Length > 0)
                {
                    sbHeaderCodes.Remove(sbHeaderCodes.Length - 1, 1);
                }
                StringBuilder sbLedgerCodes = new StringBuilder();
                for (int lgrI = 0; lgrI < cblTcLedger.Items.Count; lgrI++)
                {
                    if (cblTcLedger.Items[lgrI].Selected)
                    {
                        sbLedgerCodes.Append(cblTcLedger.Items[lgrI].Value + ",");
                    }
                }
                if (sbLedgerCodes.Length > 0)
                {
                    sbLedgerCodes.Remove(sbLedgerCodes.Length - 1, 1);
                }

                string insval = sbHeaderCodes.ToString() + "#" + sbLedgerCodes.ToString();

                string insqry = "if exists (select LinkName from New_InsSettings where LinkName='TCLedgersForUser' and college_code ='" + collegeCode + "' and user_code='" + curUserCode + "' ) update New_InsSettings set LinkValue ='" + insval + "' where LinkName='TCLedgersForUser'  and college_code ='" + collegeCode + "'  and user_code='" + curUserCode + "'  else insert into New_InsSettings(LinkName,LinkValue,college_code,user_code) values ('TCLedgersForUser','" + insval + "','" + collegeCode + "','" + curUserCode + "')";

                int save = d2.update_method_wo_parameter(insqry, "Text");

                imgAlert.Visible = true;
                lbl_alert.Text = "Saved successfully";
            }
        }
        catch { }
    }

    //Code Ended by Idhris 05-05-2017

    //Added by Idhris 12-05-2017

    private void bindModerBatch()
    {
        try
        {
            ddlModerApplicableBatch.Items.Clear();
            //string curCollege = ddlcollege.SelectedValue;
            string curCollege = Convert.ToString(ddlcollege.SelectedValue).Trim();
            string curEduLevel = Convert.ToString(ddlModerApplicableEduLevel.SelectedValue).Trim();
            //DataSet dsBat = d2.select_method_wo_parameter("select distinct batch_year from Registration where college_code='" + curCollege + "' order by Batch_Year desc", "TEXT");
            DataSet dsBat = new DataSet();
            if (!string.IsNullOrEmpty(curCollege) && !string.IsNullOrEmpty(curEduLevel))
            {
                dsBat = d2.select_method_wo_parameter("select distinct r.batch_year from Registration r,Degree dg,Course c where c.Course_Id=dg.Course_Id and dg.Degree_Code=r.degree_code and c.college_code=r.college_code and r.college_code=dg.college_code and c.college_code=dg.college_code and r.college_code='" + curCollege + "'  and c.Edu_Level='" + curEduLevel + "' order by r.batch_year desc", "text");
            }
            if (dsBat.Tables.Count > 0 && dsBat.Tables[0].Rows.Count > 0)
            {
                ddlModerApplicableBatch.DataSource = dsBat;
                ddlModerApplicableBatch.DataTextField = "batch_year";
                ddlModerApplicableBatch.DataValueField = "batch_year";
                ddlModerApplicableBatch.DataBind();
            }
            string eduLevel = string.Empty;
            if (ddlModerApplicableEduLevel.Items.Count > 0)
            {
                eduLevel = Convert.ToString(ddlModerApplicableEduLevel.SelectedValue).Trim();
                string batch = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='MaximumModerationAppBatch@" + eduLevel + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ").Trim();
                if (batch != string.Empty && batch != "0")
                {
                    if (ddlModerApplicableBatch.Items.Count > 0)
                    {
                        ddlModerApplicableBatch.SelectedIndex = ddlModerApplicableBatch.Items.IndexOf(ddlModerApplicableBatch.Items.FindByValue(batch));
                    }
                }
            }
        }
        catch { }
    }

    protected void ddlModerApplicableBatch_IndexChange(object sender, EventArgs e)
    {
        try
        {
            bindModerSem();
            //txtModerMaxMark.Text = string.Empty;
        }
        catch { }
    }

    private void bindModerSem()
    {
        try
        {
            ddlModerApplicableSem.Items.Clear();

            string curCollege = Convert.ToString(ddlcollege.SelectedValue).Trim();
            string curEduLevel = Convert.ToString(ddlModerApplicableEduLevel.SelectedValue).Trim();
            string curBatch = Convert.ToString(ddlModerApplicableBatch.SelectedValue).Trim();

            //DataSet dsSem = d2.select_method_wo_parameter("select distinct current_Semester from Registration where college_code='" + curCollege + "' and batch_year ='" + curBatch + "' order by current_Semester asc", "TEXT");
            DataSet dsSem = new DataSet();
            if (!string.IsNullOrEmpty(curCollege) && !string.IsNullOrEmpty(curBatch) && !string.IsNullOrEmpty(curEduLevel))
            {
                dsSem = d2.select_method_wo_parameter("select distinct r.current_Semester from Registration r,Degree dg,Course c where c.Course_Id=dg.Course_Id and dg.Degree_Code=r.degree_code and c.college_code=r.college_code and r.college_code=dg.college_code and c.college_code=dg.college_code and r.college_code='" + curCollege + "' and r.batch_year ='" + curBatch + "' and c.Edu_Level='" + curEduLevel + "' order by r.current_Semester", "text");
            }
            if (dsSem.Tables.Count > 0 && dsSem.Tables[0].Rows.Count > 0)
            {
                ddlModerApplicableSem.DataSource = dsSem;
                ddlModerApplicableSem.DataTextField = "current_Semester";
                ddlModerApplicableSem.DataValueField = "current_Semester";
                ddlModerApplicableSem.DataBind();
            }
            string eduLevel = string.Empty;
            if (ddlModerApplicableEduLevel.Items.Count > 0)
            {
                eduLevel = Convert.ToString(ddlModerApplicableEduLevel.SelectedValue).Trim();
                string sem = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='MaximumModerationAppSem@" + eduLevel + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ").Trim();
                if (sem != string.Empty && sem != "0")
                {
                    if (ddlModerApplicableSem.Items.Count > 0)
                        ddlModerApplicableSem.SelectedIndex = ddlModerApplicableSem.Items.IndexOf(ddlModerApplicableSem.Items.FindByValue(sem));
                }
            }
        }
        catch
        {
        }
    }

    //Code ended by Idhris 12-05-2017

    private void bindModerEduLevel()
    {
        try
        {
            ddlModerApplicableEduLevel.Items.Clear();
            txtModerMaxMark.Text = string.Empty;
            string curCollege = ddlcollege.SelectedValue;
            DataSet dsEduLevel = d2.select_method_wo_parameter("select distinct c.Edu_Level from Course c where c.college_code='" + curCollege + "' order by c.Edu_Level desc", "TEXT");
            if (dsEduLevel.Tables.Count > 0 && dsEduLevel.Tables[0].Rows.Count > 0)
            {
                ddlModerApplicableEduLevel.DataSource = dsEduLevel;
                ddlModerApplicableEduLevel.DataTextField = "Edu_Level";
                ddlModerApplicableEduLevel.DataValueField = "Edu_Level";
                ddlModerApplicableEduLevel.DataBind();
            }
            if (ddlModerApplicableEduLevel.Items.Count > 0)
            {
                string eduLevel = Convert.ToString(ddlModerApplicableEduLevel.SelectedValue).Trim();
                string mark = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='MaximumModerationAppMark@" + eduLevel + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ").Trim();
                if (mark != string.Empty && mark != "0")
                {
                    txtModerMaxMark.Text = mark;
                }
            }
        }
        catch
        {
        }
    }

    protected void ddlModerApplicableEduLevel_IndexChange(object sender, EventArgs e)
    {
        try
        {
            bindModerBatch();
            bindModerSem();

            #region Added by Idhris 12-05-2017

            byte moderApplicable = Convert.ToByte(d2.GetFunction("select LinkValue from New_InsSettings where LinkName='MaximumModerationApplicable' and college_code ='" + ddlcollege.SelectedItem.Value + "'"));
            chkModerApplicable.Checked = false;
            if (moderApplicable == 1)
            {
                chkModerApplicable.Checked = true;
            }

            txtModerMaxMark.Text = string.Empty;

            string eduLevel = string.Empty;
            if (ddlModerApplicableEduLevel.Items.Count > 0)
            {
                eduLevel = Convert.ToString(ddlModerApplicableEduLevel.SelectedValue).Trim();
                string batch = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='MaximumModerationAppBatch@" + eduLevel + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ").Trim();
                if (batch != string.Empty && batch != "0")
                {
                    if (ddlModerApplicableBatch.Items.Count > 0)
                    {
                        ddlModerApplicableBatch.SelectedIndex = ddlModerApplicableBatch.Items.IndexOf(ddlModerApplicableBatch.Items.FindByValue(batch));
                    }
                }
                string sem = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='MaximumModerationAppSem@" + eduLevel + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ").Trim();
                if (sem != string.Empty && sem != "0")
                {
                    if (ddlModerApplicableSem.Items.Count > 0)
                        ddlModerApplicableSem.SelectedIndex = ddlModerApplicableSem.Items.IndexOf(ddlModerApplicableSem.Items.FindByValue(sem));
                }
                string mark = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='MaximumModerationAppMark@" + eduLevel + "' and college_code ='" + ddlcollege.SelectedItem.Value + "' ").Trim();
                if (mark != string.Empty && mark != "0")
                {
                    txtModerMaxMark.Text = mark;
                }
            }

            #endregion
        }
        catch { }
    }

    //added by sudhagar 19.06.2017 for journal entry settings   
    #region

    protected void ddlMainJrHed_OnSelected(object sender, EventArgs e)
    {
        try
        {
            loadMainJrLed();
        }
        catch { }
    }

    public void loadMainJrHed()
    {
        try
        {
            string usercode = Convert.ToString(Session["usercode"]);
            string collegecodeNew = collegecode1;
            if (ddlcollege.Items.Count > 0)
            {
                collegecodeNew = Convert.ToString(ddlcollege.SelectedItem.Value);
            }
            ddlMainJrHed.Items.Clear();
            string query = "SELECT distinct HeaderPK,HeaderName FROM FM_HeaderMaster H WHERE CollegeCode = " + collegecodeNew + "";
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddlMainJrHed.DataSource = ds;
                ddlMainJrHed.DataTextField = "HeaderName";
                ddlMainJrHed.DataValueField = "HeaderPK";
                ddlMainJrHed.DataBind();
                loadMainJrLed();
            }
        }
        catch { }
    }

    public void loadMainJrLed()
    {
        try
        {
            string usercode = Convert.ToString(Session["usercode"]);
            string collegecodeNew = collegecode1;
            if (ddlcollege.Items.Count > 0)
            {
                collegecodeNew = Convert.ToString(ddlcollege.SelectedItem.Value);
            }
            ddlMainJrLed.Items.Clear();
            if (ddlMainJrHed.Items.Count > 0)
            {
                string query = "SELECT distinct LedgerPK,LedgerName FROM FM_LedgerMaster L WHERE  l.LedgerMode=0   AND L.CollegeCode = " + collegecodeNew + " and L.HeaderFK in (" + Convert.ToString(ddlMainJrHed.SelectedItem.Value) + ")";
                ds = d2.select_method_wo_parameter(query, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    ddlMainJrLed.DataSource = ds;
                    ddlMainJrLed.DataTextField = "LedgerName";
                    ddlMainJrLed.DataValueField = "LedgerPK";
                    ddlMainJrLed.DataBind();
                }
            }
        }
        catch { }
    }

    #endregion

    //added by sudhagar 19.06.2017 for journal entry settings   
    #region

    protected void ddlOtherJrHed_OnSelected(object sender, EventArgs e)
    {
        try
        {
            loadOtherJrLed();
        }
        catch { }
    }

    public void loadOtherJrHed()
    {
        try
        {
            string usercode = Convert.ToString(Session["usercode"]);
            string collegecodeNew = collegecode1;
            if (ddl_otColleges.Items.Count > 0)
            {
                collegecodeNew = Convert.ToString(ddl_otColleges.SelectedItem.Value);
            }
            ddlOtherJrHed.Items.Clear();
            string query = "SELECT distinct HeaderPK,HeaderName FROM FM_HeaderMaster H WHERE CollegeCode = " + collegecodeNew + "";
            ds = d2.select_method_wo_parameter(query, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddlOtherJrHed.DataSource = ds;
                ddlOtherJrHed.DataTextField = "HeaderName";
                ddlOtherJrHed.DataValueField = "HeaderPK";
                ddlOtherJrHed.DataBind();
                loadOtherJrLed();
            }
        }
        catch { }
    }

    public void loadOtherJrLed()
    {
        try
        {
            string usercode = Convert.ToString(Session["usercode"]);
            string collegecodeNew = collegecode1;
            if (ddl_otColleges.Items.Count > 0)
            {
                collegecodeNew = Convert.ToString(ddl_otColleges.SelectedItem.Value);
            }
            ddlOtherJrLed.Items.Clear();
            if (ddlOtherJrHed.Items.Count > 0)
            {
                string query = "SELECT distinct LedgerPK,LedgerName FROM FM_LedgerMaster L WHERE  l.LedgerMode=0   AND L.CollegeCode = " + collegecodeNew + " and L.HeaderFK in (" + Convert.ToString(ddlOtherJrHed.SelectedItem.Value) + ")";
                ds = d2.select_method_wo_parameter(query, "Text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    ddlOtherJrLed.DataSource = ds;
                    ddlOtherJrLed.DataTextField = "LedgerName";
                    ddlOtherJrLed.DataValueField = "LedgerPK";
                    ddlOtherJrLed.DataBind();
                }
            }
        }
        catch { }
    }

    #endregion

    //Tc grid Barath 12.07.17
    protected void BindTc_grid()
    {
        try
        {
            string curCollege = ddlcollege.SelectedValue;
            DataSet tc_gridDs = d2.select_method_wo_parameter("select distinct Certificate_ID,CertificateName,CertifcateFormat from CertificateNameDetail where Collegecode='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "'", "TEXT");
            if (tc_gridDs.Tables.Count > 0 && tc_gridDs.Tables[0].Rows.Count > 0)
            {
                certificateformat_grid.DataSource = tc_gridDs.Tables[0];
                certificateformat_grid.DataBind();
                DataTable dt = new DataTable();
                DataRow dr;
                dt.Columns.Add("Text");
                dt.Columns.Add("value");
                for (int k = 0; k < certificateformat_grid.Rows.Count; k++)
                {
                    dt.Clear();
                    for (int i = 0; i < 8; i++)//tc_gridDs.Tables[0].Rows.Count
                    {
                        dr = dt.NewRow();
                        dr[0] = "Format " + Convert.ToString(i + 1);
                        dr[1] = Convert.ToString(i);
                        dt.Rows.Add(dr);
                    }
                    DropDownList ddlFormat = (certificateformat_grid.Rows[k].FindControl("ddlFormattype") as DropDownList);
                    ddlFormat.Items.Clear();
                    ddlFormat.DataSource = dt;
                    ddlFormat.DataTextField = "Text";
                    ddlFormat.DataValueField = "value";
                    ddlFormat.DataBind();
                }
            }


            DataSet certFromat = d2.select_method_wo_parameter("select distinct Certificate_ID,CertificateName,CertifcateFormat from CertificateNameDetail where Collegecode='" + Convert.ToString(ddlcollege.SelectedItem.Value) + "'", "text");
            if (certFromat.Tables[0].Rows.Count > 0)
            {
                certificateformat_grid.DataSource = certFromat.Tables[0];
                certificateformat_grid.DataBind();
                DataTable dt = new DataTable();
                DataRow dr;
                dt.Columns.Add("Text");
                dt.Columns.Add("value");
                for (int k = 0; k < certificateformat_grid.Rows.Count; k++)
                {
                    dt.Clear();
                    for (int j = 0; j < 9; j++)//certFromat.Tables[0].Rows.Count
                    {
                        dr = dt.NewRow();
                        dr[0] = "Format " + Convert.ToString(j + 1);//BindTc_grid 
                        dr[1] = Convert.ToString(j);
                        dt.Rows.Add(dr);
                    }
                    DropDownList ddlFormat = (certificateformat_grid.Rows[k].FindControl("ddlFormattype") as DropDownList);
                    ddlFormat.Items.Clear();
                    ddlFormat.DataSource = dt;
                    ddlFormat.DataTextField = "Text";
                    ddlFormat.DataValueField = "value";
                    ddlFormat.DataBind();
                }
                for (int k = 0; k < certificateformat_grid.Rows.Count; k++)
                {
                    DropDownList ddlFormat = (certificateformat_grid.Rows[k].FindControl("ddlFormattype") as DropDownList);

                    string formate = Convert.ToString(certFromat.Tables[0].Rows[k]["Certificate_ID"]);
                    string selectedfromat = "select * from Master_Settings where settings='CertificateFormatSetting' and value like '" + formate + "$%'";
                    if (!string.IsNullOrEmpty(selectedfromat))
                        ddlFormat.SelectedIndex = ddlFormat.Items.IndexOf(ddlFormat.Items.FindByValue(selectedfromat));
                }
            }
        }
        catch { }
    }

    #region HR IncomeTax Calcultion Settings

    protected void btnAccessYear_click(object sender, EventArgs e)
    {
        try
        {
            string linkvalue = "";
            string splvaldt = "";
            DateTime frmdt = new DateTime();
            DateTime todt = new DateTime();
            TimeSpan valdate = new TimeSpan();
            string startday = "1";
            if (ddlfrmyear.SelectedItem.Text.Trim() == "Select" || ddltoyear.SelectedItem.Text.Trim() == "Select")
            {
                imgAlert.Visible = true;
                lbl_alert.Text = "Please Select IT Year!";
                return;
            }
            string frmmon = Convert.ToString(ddlfrmmon.SelectedIndex + 1);
            string frmyear = Convert.ToString(ddlfrmyear.SelectedItem.Text);
            frmdt = Convert.ToDateTime(frmmon + "/" + startday + "/" + frmyear);
            string tomon = Convert.ToString(ddltomon.SelectedIndex + 1);
            string toyear = Convert.ToString(ddltoyear.SelectedItem.Text);
            string today = monthdays(tomon, toyear);
            todt = Convert.ToDateTime(tomon + "/" + today + "/" + toyear);
            valdate = todt - frmdt;
            splvaldt = Convert.ToString(valdate).Split('.')[0];
            //if (Convert.ToInt32(splvaldt) < 364)
            //{
            //    imgAlert.Visible = true;
            //    lbl_alert.Text = "Year Should be Exactly one year!";
            //    return;
            //}
            //else
            if (Convert.ToInt32(frmyear) > Convert.ToInt32(toyear))
            {
                imgAlert.Visible = true;
                lbl_alert.Text = "Start Year Should be greater than End Year!";
                return;
            }
            else if ((Convert.ToInt32(frmyear) == Convert.ToInt32(toyear)) && Convert.ToInt32(frmmon) >= Convert.ToInt32(tomon))
            {
                imgAlert.Visible = true;
                lbl_alert.Text = "Please Select a Month!";
                return;
            }
            else
            {
                linkvalue = Convert.ToString(frmmon + "," + frmyear + "-" + tomon + "," + toyear);
                string linkname = "IT Calculation Settings";
                string insq = "if exists(select * from New_InsSettings where LinkName='" + linkname + "' and college_code='" + ddlcollege.SelectedValue + "') update New_InsSettings set LinkValue='" + linkvalue + "' where LinkName='" + linkname + "' and college_code='" + ddlcollege.SelectedValue + "' else insert into New_InsSettings (LinkValue,LinkName,college_code) values ('" + linkvalue + "','" + linkname + "','" + ddlcollege.SelectedValue + "')";
                int inscount = d2.update_method_wo_parameter(insq, "Text");
                if (inscount > 0)
                {
                    imgAlert.Visible = true;
                    lbl_alert.Text = "Saved Successfully!";
                }
                else
                {
                    imgAlert.Visible = true;
                    lbl_alert.Text = "Not Saved";
                }
            }
        }
        catch
        {

        }
    }

    protected void btnSaveValues_click(object seder, EventArgs e)
    {
        try
        {
            string PANNo = Convert.ToString(txtPanNo.Text);
            string TAN = Convert.ToString(txtTanNo.Text);

            string insq = "if exists(select * from New_InsSettings where LinkName='IT Calculation PAN / GIR' and college_code='" + ddlcollege.SelectedValue + "') update New_InsSettings set LinkValue='" + PANNo + "' where LinkName='IT Calculation PAN / GIR' and college_code='" + ddlcollege.SelectedValue + "' else insert into New_InsSettings (LinkValue,LinkName,college_code) values ('" + PANNo + "','IT Calculation PAN / GIR','" + ddlcollege.SelectedValue + "')";
            int inscount = d2.update_method_wo_parameter(insq, "Text");
            insq = "if exists(select * from New_InsSettings where LinkName='IT Calculation TAN' and college_code='" + ddlcollege.SelectedValue + "') update New_InsSettings set LinkValue='" + TAN + "' where LinkName='IT Calculation TAN' and college_code='" + ddlcollege.SelectedValue + "' else insert into New_InsSettings (LinkValue,LinkName,college_code) values ('" + TAN + "','IT Calculation TAN','" + ddlcollege.SelectedValue + "')";
            inscount = d2.update_method_wo_parameter(insq, "Text");
            if (inscount > 0)
            {
                imgAlert.Visible = true;
                lbl_alert.Text = "Saved Successfully!";
            }
            else
            {
                imgAlert.Visible = true;
                lbl_alert.Text = "Not Saved";
            }
        }
        catch
        {

        }
    }

    public string monthdays(string month1, string year)
    {
        string pay_end = "";
        try
        {
            switch (month1)
            {
                case "1":
                    pay_end = "31";
                    break;
                case "2":
                    int yyear = Convert.ToInt32(year);
                    if ((yyear % 4) == 0)
                    {
                        pay_end = "29";
                    }
                    else
                    {
                        pay_end = "28";
                    }
                    break;
                case "3":
                    pay_end = "31";
                    break;
                case "4":
                    pay_end = "30";
                    break;
                case "5":
                    pay_end = "31";
                    break;
                case "6":
                    pay_end = "30";
                    break;
                case "7":
                    pay_end = "31";
                    break;
                case "8":
                    pay_end = "31";
                    break;
                case "9":
                    pay_end = "30";
                    break;
                case "10":
                    pay_end = "31";
                    break;
                case "11":
                    pay_end = "30";
                    break;
                case "12":
                    pay_end = "31";
                    break;
            }
        }
        catch { }
        return pay_end;
    }

    public void loadfromyear()
    {
        try
        {
            ds.Dispose();
            ds.Reset();
            ddltoyear.Items.Clear();
            ds = d2.select_method_wo_parameter("select distinct PayYear from HrPayMonths where College_Code='" + ddlcollege.SelectedValue + "' order by PayYear", "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                ddlfrmyear.DataSource = ds;
                ddlfrmyear.DataTextField = "PayYear";
                ddlfrmyear.DataValueField = "PayYear";
                ddlfrmyear.DataBind();
                ddlfrmyear.Items.Insert(0, "Select");

                ddltoyear.DataSource = ds;
                ddltoyear.DataTextField = "PayYear";
                ddltoyear.DataValueField = "PayYear";
                ddltoyear.DataBind();
                ddltoyear.Items.Insert(0, "Select");
            }

        }
        catch (Exception ex) { }
    }

    protected void bindyearproftax() /* poomalar 24.10.17*/
    {
        int year = Convert.ToInt32(System.DateTime.Now.ToString("yyyy")) + 1;
        for (int l = 0; l < 15; l++)
        {
            ddlfromyearpt.Items.Add(Convert.ToString(year));
            ddltoyearpt.Items.Add(Convert.ToString(year));
            year--;
        }
        ddlfromyearpt.Items.Insert(0, "Select");
        ddltoyearpt.Items.Insert(0, "Select");
    }
    protected void bindmonthproftax() /* poomalar 24.10.17*/
    {
        DateTime dt = new DateTime(2000, 1, 1);
        for (int m = 0; m < 12; m++)
        {
            ddlfrommonthpt.Items.Add(new ListItem(dt.AddMonths(m).ToString("MMMM"), (m + 1).ToString().TrimStart('0')));
            ddltomonthpt.Items.Add(new ListItem(dt.AddMonths(m).ToString("MMMM"), (m + 1).ToString().TrimStart('0')));

        }
        ddlfrommonthpt.Items.Insert(0, "Select");
        ddltomonthpt.Items.Insert(0, "Select");
    }
    protected void btnsavept_click(object sender, EventArgs e)  /* poomalar 24.10.17*/
    {
        try
        {
            string linkvalue = "";
            DateTime frmdt = new DateTime();
            DateTime todt = new DateTime();

            if (ddlfromyearpt.SelectedItem.Text.Trim() == "Select" || ddltoyearpt.SelectedItem.Text.Trim() == "Select")
            {
                imgAlert.Visible = true;
                lbl_alert.Text = "Please Select PF Year!";
                return;
            }
            string frmmon = Convert.ToString(ddlfrommonthpt.SelectedValue);
            string frmyear = Convert.ToString(ddlfromyearpt.SelectedItem.Text);
            frmdt = Convert.ToDateTime(frmmon + "-" + frmyear);
            string tomon = Convert.ToString(ddltomonthpt.SelectedValue);
            string toyear = Convert.ToString(ddltoyearpt.SelectedItem.Text);
            string today = monthdays(tomon, toyear);
            todt = Convert.ToDateTime(tomon + "-" + toyear);
            int inscount = 0;


            if (Convert.ToInt32(frmyear) > Convert.ToInt32(toyear))
            {
                imgAlert.Visible = true;
                lbl_alert.Text = "Start Year Should be greater than End Year!";
                return;
            }
            else if ((Convert.ToInt32(frmyear) == Convert.ToInt32(toyear)) && Convert.ToInt32(frmmon) >= Convert.ToInt32(tomon))
            {
                imgAlert.Visible = true;
                lbl_alert.Text = "Please Select a Month!";
                return;
            }
            else
            {

                for (int i = 0; i < ddluser.Items.Count; i++)
                {
                    if (ddluser.Items[i].Selected == true)
                    {
                        selected_userid = Convert.ToString(ddluser.Items[i].Text);
                        selected_usercode = Convert.ToInt16(ddluser.Items[i].Value);
                    }

                    linkvalue = Convert.ToString(frmmon + "-" + frmyear + ";" + tomon + "-" + toyear);
                    string linkname = "Professional Tax Calculation Month";
                    string insq = "if exists(select * from New_InsSettings where LinkName='" + linkname + "' and college_code='" + ddlcollege.SelectedValue + "' and User_code in('" + selected_usercode + "')) update New_InsSettings set LinkValue='" + linkvalue + "' where LinkName='" + linkname + "' and college_code='" + ddlcollege.SelectedValue + "' and User_code in('" + selected_usercode + "') else insert into New_InsSettings (LinkValue,LinkName,college_code,User_code) values ('" + linkvalue + "','" + linkname + "','" + ddlcollege.SelectedValue + "','" + selected_usercode + "')";
                    inscount = d2.update_method_wo_parameter(insq, "Text");
                }
                if (inscount > 0)
                {
                    imgAlert.Visible = true;
                    lbl_alert.Text = "Saved Successfully!";
                }
                else
                {
                    imgAlert.Visible = true;
                    lbl_alert.Text = "Not Saved";
                }
            }
        }
        catch
        {

        }

    }

    protected void btnadditset_click(object sender, EventArgs e)
    {
        int savecount = 0;
        string frmamntlimit = string.Empty;
        string toamntlimit = string.Empty;
        string gender = string.Empty;
        string itCalPk = string.Empty;
        string modeabovefromto = string.Empty;
        string amntfrmto = string.Empty;
        try
        {
            if (txtfrmsecamnt.Text.Trim() != "" && txttosecamnt.Text.Trim() != "" && txtuptosec.Text.Trim() != "")
            {
                string getfrstamnt = "";
                string getsecamnt = "";
                // string amntfrmto = "";
                string getgender = "";
                int rocount = 0;
                frmamntlimit = Convert.ToString(txtfrmsecamnt.Text);
                toamntlimit = Convert.ToString(txttosecamnt.Text);
                gender = Convert.ToString(ddlgender.SelectedItem.Text).Trim();
                itCalPk = Convert.ToString(txtItCalPk.Text);
                modeabovefromto = Convert.ToString(ddlamntorpersec.SelectedItem.Text);
                if (modeabovefromto.Trim() == "Amount")
                {
                    amntfrmto = Convert.ToString(txtuptosec.Text);
                }
                else
                {
                    amntfrmto = Convert.ToString(txtuptosec.Text) + "%";
                }

                divgrditset.Visible = true;
                grditset.Visible = true;

                if (string.IsNullOrEmpty(itCalPk))
                {
                    DataTable dt = new DataTable();
                    dt.Columns.Add("sno");
                    dt.Columns.Add("itfrmamnt");
                    dt.Columns.Add("ittoamnt");
                    dt.Columns.Add("itmode");
                    dt.Columns.Add("itamntorper");
                    dt.Columns.Add("gender");
                    dt.Columns.Add("itCalculationPK");
                    DataRow dr;

                    if (Session["dtitset"] != null)
                    {
                        DataTable dnew = new DataTable();
                        dnew = (DataTable)Session["dtitset"];
                        int dnewColCount = (dnew.Columns.Count);
                        if (dnew.Rows.Count > 0)
                        {
                            for (int ro = 0; ro < dnew.Rows.Count; ro++)
                            {
                                dr = dt.NewRow();
                                dr[0] = Convert.ToString(ro + 1);
                                for (int col = 1; col < dnewColCount; col++)
                                {
                                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                                }
                                dt.Rows.Add(dr);
                            }
                        }

                        if (dt.Rows.Count > 0)
                        {
                            for (int ro = 0; ro < dt.Rows.Count; ro++)
                            {
                                for (int co = 0; co < dt.Columns.Count; co++)
                                {
                                    getfrstamnt = Convert.ToString(Convert.ToString(dt.Rows[ro][1]).Trim());
                                    getsecamnt = Convert.ToString(Convert.ToString(dt.Rows[ro][2]).Trim());
                                    getgender = Convert.ToString(Convert.ToString(dt.Rows[ro][5]).Trim());
                                    if ((Convert.ToDouble(getfrstamnt) <= Convert.ToDouble(txtfrmsecamnt.Text.Trim()) && Convert.ToDouble(getsecamnt) >= Convert.ToDouble(txttosecamnt.Text.Trim()) && getgender == gender) || (Convert.ToDouble(txtfrmsecamnt.Text) <= Convert.ToDouble(getsecamnt) && Convert.ToDouble(txttosecamnt.Text) >= Convert.ToDouble(getfrstamnt) && getgender == gender))
                                    {
                                        imgAlert.Visible = true;
                                        lbl_alert.Text = "Amount Range Already Exists!";
                                        txtfrmsecamnt.Text = "";
                                        txttosecamnt.Text = "";
                                        txtuptosec.Text = "";
                                        ddlamntorpersec.SelectedIndex = 0;
                                        return;
                                    }
                                    else if (Convert.ToDouble(getfrstamnt) == Convert.ToDouble(txtfrmsecamnt.Text.Trim()) && getgender == gender)
                                    {
                                        imgAlert.Visible = true;
                                        lbl_alert.Text = "Amount Range Already Exists!";
                                        txtfrmsecamnt.Text = "";
                                        txttosecamnt.Text = "";
                                        txtuptosec.Text = "";
                                        ddlamntorpersec.SelectedIndex = 0;
                                        return;
                                    }
                                    else if (Convert.ToDouble(getsecamnt) == Convert.ToDouble(txttosecamnt.Text.Trim()) && getgender == gender)
                                    {
                                        imgAlert.Visible = true;
                                        lbl_alert.Text = "Amount Range Already Exists!";
                                        txtfrmsecamnt.Text = "";
                                        txttosecamnt.Text = "";
                                        txtuptosec.Text = "";
                                        ddlamntorpersec.SelectedIndex = 0;
                                        return;
                                    }
                                    else
                                    {
                                        rocount++;
                                    }
                                }
                            }
                        }

                        if (rocount == (dt.Rows.Count * dt.Columns.Count))
                        {
                            dr = dt.NewRow();
                            dr["sno"] = Convert.ToString(dt.Rows.Count + 1);
                            dr["itfrmamnt"] = Convert.ToString(frmamntlimit);
                            dr["ittoamnt"] = Convert.ToString(toamntlimit);
                            dr["itmode"] = Convert.ToString(modeabovefromto);
                            dr["itamntorper"] = Convert.ToString(amntfrmto);
                            dr["gender"] = Convert.ToString(gender);
                            //   dr["itCalculationPK"] = Convert.ToString(gender);
                            dt.Rows.Add(dr);
                            Session["dtitset"] = dt;
                        }
                    }
                    else
                    {
                        dr = dt.NewRow();
                        dr["sno"] = Convert.ToString("1");
                        dr["itfrmamnt"] = Convert.ToString(frmamntlimit);
                        dr["ittoamnt"] = Convert.ToString(toamntlimit);
                        dr["itmode"] = Convert.ToString(modeabovefromto);
                        dr["itamntorper"] = Convert.ToString(amntfrmto);
                        dr["gender"] = Convert.ToString(gender);
                        dt.Rows.Add(dr);
                        Session["dtitset"] = dt;
                    }
                    if (dt.Rows.Count > 0)
                    {
                        savecount++;
                        grditset.DataSource = dt;
                        grditset.HeaderStyle.BackColor = ColorTranslator.FromHtml("#0CA6CA");
                        grditset.DataBind();
                        txtfrmsecamnt.Text = "";
                        txttosecamnt.Text = "";
                        ddlamntorpersec.SelectedIndex = 0;
                        txtuptosec.Text = "";

                        grditset.Columns[0].HeaderStyle.Width = 75;
                        grditset.Columns[0].ItemStyle.Width = 75;
                        grditset.Columns[1].HeaderStyle.Width = 125;
                        grditset.Columns[1].ItemStyle.Width = 125;
                        grditset.Columns[2].HeaderStyle.Width = 125;
                        grditset.Columns[2].ItemStyle.Width = 125;
                        grditset.Columns[3].HeaderStyle.Width = 100;
                        grditset.Columns[3].ItemStyle.Width = 100;
                        grditset.Columns[4].HeaderStyle.Width = 125;
                        grditset.Columns[4].ItemStyle.Width = 125;
                        grditset.Columns[5].HeaderStyle.Width = 100;
                        grditset.Columns[5].ItemStyle.Width = 100;
                    }
                    else
                    {
                        grditset.DataSource = dt;
                        grditset.DataBind();
                    }
                    if (savecount > 0)
                    {
                        imgAlert.Visible = true;
                        lbl_alert.Text = "Added Successfully!";
                        grditset.Visible = true;
                        divgrditset.Visible = true;
                        txtfrmsecamnt.Text = "";
                        txttosecamnt.Text = "";
                        txtuptosec.Text = "";
                        txtItCalPk.Text = "";
                    }


                    else
                    {
                        imgAlert.Visible = true;
                        lbl_alert.Text = "Please Fill All the Values!";
                    }
                }
                else
                {
                    int mode;
                    if (modeabovefromto == "Amount")
                    { mode = 0; }
                    else { mode = 1; }
                    string query = "update HR_ITCalculationSettings set FromRange=" + frmamntlimit + ",ToRange=" + toamntlimit + ",Mode=" + mode + ",Amount='" + amntfrmto.Replace("%", "") + "',collegeCode=" + ddlcollege.SelectedValue + ",sex='" + gender + "' where ITCalculationPK=" + itCalPk;
                    int updatedRowCount = d2.update_method_wo_parameter(query, "Text");
                    //    lbl_alert.Text = "Updated Successfully!";
                    ScriptManager.RegisterClientScriptBlock(this, typeof(Page), UniqueID, "alert('Updated Successfully')", true);
                    GridBind();
                    txtfrmsecamnt.Text = "";
                    txttosecamnt.Text = "";
                    txtuptosec.Text = "";
                    txtItCalPk.Text = "";
                }
            }

        }
        catch { }
    }

    protected void btnview_click(object sender, EventArgs e)
    {
        divgrditset.Visible = true;
        grditset.Visible = true;
        btnview.Visible = false;
    }

    protected void ddlamntorpersec_change(object sender, EventArgs e)
    {
        txtuptosec.Text = "";
    }

    protected void grditset_rowbound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            e.Row.Cells[0].Attributes["onclick"] = Page.ClientScript.GetPostBackEventReference(this.grditset, "Index$" + e.Row.RowIndex);
            e.Row.Cells[1].Attributes["onclick"] = Page.ClientScript.GetPostBackEventReference(this.grditset, "Index$" + e.Row.RowIndex);
            e.Row.Cells[2].Attributes["onclick"] = Page.ClientScript.GetPostBackEventReference(this.grditset, "Index$" + e.Row.RowIndex);
            e.Row.Cells[3].Attributes["onclick"] = Page.ClientScript.GetPostBackEventReference(this.grditset, "Index$" + e.Row.RowIndex);
            e.Row.Cells[4].Attributes["onclick"] = Page.ClientScript.GetPostBackEventReference(this.grditset, "Index$" + e.Row.RowIndex);
            e.Row.Cells[5].Attributes["onclick"] = Page.ClientScript.GetPostBackEventReference(this.grditset, "Index$" + e.Row.RowIndex);

            Label lblPK = (Label)e.Row.Cells[0].FindControl("lbl_itCalPk");
            Button btnDel = (Button)e.Row.Cells[6].FindControl("btn_del");
            Button btnUpd = (Button)e.Row.Cells[7].FindControl("btn_update");
            btnDel.Enabled = true;
            btnUpd.Enabled = true;
            if (lblPK.Text.Trim() == string.Empty || lblPK.Text.Trim() == "0")
            {
                btnDel.Enabled = false;
                btnUpd.Enabled = false;
            }
        }
    }

    protected void grditset_rowcommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            string itfrmrange = "";
            string ittorange = "";
            string mode = "";
            string amountorper = "";
            string gender = "";
            string itCalPk = "";
            Session["entryit"] = "1";

            for (int rem = 0; rem < grditset.Rows.Count; rem++)
            {
                grditset.Rows[rem].BackColor = Color.White;
            }

            int idx = Convert.ToInt32(e.CommandArgument);
            if (e.CommandName == "Index")
            {
                divgrditset.Visible = true;
                grditset.Visible = true;

                itfrmrange = (grditset.Rows[idx].FindControl("lbl_frmamnt") as Label).Text;
                txtfrmsecamnt.Text = itfrmrange;
                ViewState["frmamnt"] = Convert.ToString(itfrmrange);
                ittorange = (grditset.Rows[idx].FindControl("lbl_toamnt") as Label).Text;
                txttosecamnt.Text = Convert.ToString(ittorange);
                ViewState["toamnt"] = Convert.ToString(ittorange);
                mode = (grditset.Rows[idx].FindControl("lbl_itmode") as Label).Text;
                ddlamntorpersec.SelectedIndex = ddlamntorpersec.Items.IndexOf(ddlamntorpersec.Items.FindByText(mode));
                amountorper = (grditset.Rows[idx].FindControl("lbl_itamntorper") as Label).Text;
                txtuptosec.Text = Convert.ToString(amountorper);
                gender = (grditset.Rows[idx].FindControl("lbl_gender") as Label).Text;
                ddlgender.SelectedIndex = ddlgender.Items.IndexOf(ddlgender.Items.FindByText(gender));
                itCalPk = (grditset.Rows[idx].FindControl("itCalculationPK") as Label).Text;
                txtItCalPk.Text = itCalPk;
                ViewState["itCalPk"] = Convert.ToString(itCalPk);
                grditset.Rows[idx].BackColor = Color.LightGreen;
            }
        }
        catch { }
    }

    protected void txttosecamnt_change(object sender, EventArgs e)
    {
        try
        {
            if (Session["entryit"] == null)
            {
                string getfrstamnt = "";
                string getsecamnt = "";
                if (txtfrmsecamnt.Text == "")
                {
                    txttosecamnt.Text = "";
                    imgAlert.Visible = true;
                    lbl_alert.Text = "Please Enter From Amount!";
                }
                else
                {
                    DataTable dt = new DataTable();
                    dt.Columns.Add("sno");
                    dt.Columns.Add("itfrmamnt");
                    dt.Columns.Add("ittoamnt");
                    dt.Columns.Add("itmode");
                    dt.Columns.Add("itamntorper");

                    DataTable dnew = new DataTable();
                    dnew = (DataTable)Session["dtitset"];
                    DataRow dr;

                    if (dnew.Rows.Count > 0)
                    {
                        for (int ro = 0; ro < dnew.Rows.Count; ro++)
                        {
                            dr = dt.NewRow();
                            dr[0] = Convert.ToString(ro + 1);
                            for (int col = 1; col < dnew.Columns.Count; col++)
                            {
                                dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                            }
                            dt.Rows.Add(dr);
                        }
                    }

                    if (dt.Rows.Count > 0)
                    {
                        for (int newro = 0; newro < dt.Rows.Count; newro++)
                        {
                            for (int col = 0; col < dt.Columns.Count; col++)
                            {
                                getfrstamnt = Convert.ToString(Convert.ToString(dt.Rows[newro][1]).Trim());
                                getsecamnt = Convert.ToString(Convert.ToString(dt.Rows[newro][2]).Trim());
                                if ((Convert.ToDouble(txtfrmsecamnt.Text) >= Convert.ToDouble(getfrstamnt) && Convert.ToDouble(txttosecamnt.Text) <= Convert.ToDouble(getsecamnt)) || (Convert.ToDouble(txtfrmsecamnt.Text) <= Convert.ToDouble(getsecamnt) && Convert.ToDouble(txttosecamnt.Text) >= Convert.ToDouble(getfrstamnt)))
                                {
                                    imgAlert.Visible = true;
                                    lbl_alert.Text = "Amount Range Already Exists!";
                                    txtfrmsecamnt.Text = "";
                                    txttosecamnt.Text = "";
                                    txtuptosec.Text = "";
                                    ddlamntorpersec.SelectedIndex = 0;
                                    return;
                                }
                                if (Convert.ToDouble(getfrstamnt) == Convert.ToDouble(txtfrmsecamnt.Text))
                                {
                                    imgAlert.Visible = true;
                                    lbl_alert.Text = "Amount Range Already Exists!";
                                    txtfrmsecamnt.Text = "";
                                    txttosecamnt.Text = "";
                                    txtuptosec.Text = "";
                                    ddlamntorpersec.SelectedIndex = 0;
                                    return;
                                }
                                if (Convert.ToDouble(getsecamnt) == Convert.ToDouble(txttosecamnt.Text))
                                {
                                    imgAlert.Visible = true;
                                    lbl_alert.Text = "Amount Range Already Exists!";
                                    txtfrmsecamnt.Text = "";
                                    txttosecamnt.Text = "";
                                    txtuptosec.Text = "";
                                    ddlamntorpersec.SelectedIndex = 0;
                                    return;
                                }
                            }
                        }
                    }

                }
            }
            if (Session["entryit"] == "1")
            {
                if (txtfrmsecamnt.Text.Trim() != "" && txttosecamnt.Text.Trim() != "" && txtuptosec.Text.Trim() != "")
                {
                    string amntfrmto = "";
                    string getfrstamnt = "";
                    string getsecamnt = "";
                    string frmamntlimit = Convert.ToString(ViewState["frmamnt"]);
                    string toamntlimit = Convert.ToString(ViewState["toamnt"]);
                    string itcalpk = Convert.ToString(ViewState["itCalPk"]);
                    string modeabovefromto = Convert.ToString(ddlamntorpersec.SelectedItem.Text);
                    if (modeabovefromto.Trim() == "Amount")
                    {
                        amntfrmto = Convert.ToString(txtuptosec.Text);
                    }
                    else
                    {
                        amntfrmto = Convert.ToString(txtuptosec.Text) + "%";
                    }

                    divgrditset.Visible = true;
                    grditset.Visible = true;

                    DataTable dt = new DataTable();
                    dt.Columns.Add("sno");
                    dt.Columns.Add("itfrmamnt");
                    dt.Columns.Add("ittoamnt");
                    dt.Columns.Add("itmode");
                    dt.Columns.Add("itamntorper");
                    DataRow dr;

                    if (Session["dtitset"] != null)
                    {
                        DataTable dnew = new DataTable();
                        dnew = (DataTable)Session["dtitset"];
                        if (dnew.Rows.Count > 0)
                        {
                            for (int ro = 0; ro < dnew.Rows.Count; ro++)
                            {
                                dr = dt.NewRow();
                                dr[0] = Convert.ToString(ro + 1);
                                for (int col = 1; col < dnew.Columns.Count; col++)
                                {
                                    dr[col] = Convert.ToString(dnew.Rows[ro][col]);
                                }
                                dt.Rows.Add(dr);
                            }
                        }
                        if (dt.Rows.Count > 0)
                        {
                            for (int newro = 0; newro < dt.Rows.Count; newro++)
                            {
                                if (Convert.ToString(dt.Rows[newro][1]).Trim() == Convert.ToString(frmamntlimit).Trim())
                                {
                                    dt.Rows.Remove(dt.Rows[newro]);
                                }
                            }
                        }

                        if (dt.Rows.Count > 0)
                        {
                            for (int ro = 0; ro < dt.Rows.Count; ro++)
                            {
                                for (int co = 0; co < dt.Columns.Count; co++)
                                {
                                    getfrstamnt = Convert.ToString(Convert.ToString(dt.Rows[ro][1]).Trim());
                                    getsecamnt = Convert.ToString(Convert.ToString(dt.Rows[ro][2]).Trim());
                                    if ((Convert.ToDouble(getfrstamnt) <= Convert.ToDouble(txtfrmsecamnt.Text.Trim()) && Convert.ToDouble(getsecamnt) >= Convert.ToDouble(txttosecamnt.Text.Trim())) || (Convert.ToDouble(txtfrmsecamnt.Text) <= Convert.ToDouble(getsecamnt) && Convert.ToDouble(txttosecamnt.Text) >= Convert.ToDouble(getfrstamnt)))
                                    {
                                        imgAlert.Visible = true;
                                        lbl_alert.Text = "Amount Range Already Exists!";
                                        txtfrmsecamnt.Text = "";
                                        txttosecamnt.Text = "";
                                        txtuptosec.Text = "";
                                        ddlamntorpersec.SelectedIndex = 0;
                                        return;
                                    }
                                    else if (Convert.ToDouble(getfrstamnt) == Convert.ToDouble(txtfrmsecamnt.Text.Trim()))
                                    {
                                        imgAlert.Visible = true;
                                        lbl_alert.Text = "Amount Range Already Exists!";
                                        txtfrmsecamnt.Text = "";
                                        txttosecamnt.Text = "";
                                        txtuptosec.Text = "";
                                        ddlamntorpersec.SelectedIndex = 0;
                                        return;
                                    }
                                    else if (Convert.ToDouble(getsecamnt) == Convert.ToDouble(txttosecamnt.Text.Trim()))
                                    {
                                        imgAlert.Visible = true;
                                        lbl_alert.Text = "Amount Range Already Exists!";
                                        txtfrmsecamnt.Text = "";
                                        txttosecamnt.Text = "";
                                        txtuptosec.Text = "";
                                        ddlamntorpersec.SelectedIndex = 0;
                                        return;
                                    }
                                }
                            }
                        }
                    }
                }
                Session["entryit"] = null;
            }
        }
        catch { }
    }

    protected void btnsaveallitset_Click(object sender, EventArgs e)
    {
        try
        {
            string frmrange = "";
            string torange = "";
            string mode = "";
            string amountorper = "";
            string totamnt = "";
            string gender = "";
            string modeval = "";
            int insertcount = 0;
            string itCalPk = "";
            string delq = "delete from HR_ITCalculationSettings where collegeCode='" + ddlcollege.SelectedValue + "'";
            int delcount = d2.update_method_wo_parameter(delq, "Text");
            if (grditset.Rows.Count > 0)
            {
                for (int ro = 0; ro < grditset.Rows.Count; ro++)
                {
                    Label lblfrmrange = (Label)grditset.Rows[ro].FindControl("lbl_frmamnt");
                    Label lbltorange = (Label)grditset.Rows[ro].FindControl("lbl_toamnt");
                    Label lblmode = (Label)grditset.Rows[ro].FindControl("lbl_itmode");
                    Label lblamntorper = (Label)grditset.Rows[ro].FindControl("lbl_itamntorper");
                    Label lblgender = (Label)grditset.Rows[ro].FindControl("lbl_gender");
                    Label lblitCalPk = (Label)grditset.Rows[ro].FindControl("lbl_itCalPk");
                    frmrange = Convert.ToString(lblfrmrange.Text);
                    torange = Convert.ToString(lbltorange.Text);
                    mode = Convert.ToString(lblmode.Text);
                    gender = Convert.ToString(lblgender.Text);
                    itCalPk = Convert.ToString(lblitCalPk.Text);

                    if (mode == "Amount")
                    {
                        modeval = "0";
                    }
                    else
                    {
                        modeval = "1";
                    }
                    amountorper = Convert.ToString(lblamntorper.Text);
                    if (amountorper.Contains("%"))
                    {
                        totamnt = amountorper.Split('%')[0];
                    }
                    else
                    {
                        totamnt = amountorper;
                    }

                    //   string insertq = " insert into HR_ITCalculationSettings (FromRange,ToRange,Mode,Amount,collegeCode,sex) values ('" + frmrange + "','" + torange + "','" + modeval + "','" + totamnt + "','" + ddlcollege.SelectedValue + "','" + gender + "')";
                    string insertq = "  if exists(select * from HR_ITCalculationSettings where ITCalculationPK='" + itCalPk + "') update HR_ITCalculationSettings set fromrange='" + frmrange + "',torange='" + torange + "',mode='" + modeval + "',amount='" + totamnt + "',collegecode='" + ddlcollege.SelectedValue + "',sex='" + gender + "' where itcalculationpk='" + itCalPk + "' else insert into HR_ITCalculationSettings (FromRange,ToRange,Mode,Amount,collegeCode,sex) values ('" + frmrange + "','" + torange + "','" + modeval + "','" + totamnt + "','" + ddlcollege.SelectedValue + "','" + gender + "')";
                    insertcount = d2.update_method_wo_parameter(insertq, "Text");
                }
            }
            if (insertcount > 0)
            {
                imgAlert.Visible = true;
                lbl_alert.Text = "Saved Successfully!";
                GridBind();
            }
            else
            {
                imgAlert.Visible = true;
                lbl_alert.Text = "Please Enter the From Range and To Range Amount!";

            }

        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, collegecode1, "IT_Calculation.aspx");
        }
    }

    public void CheckDate()
    {
        txtfrmsecamnt.Text = "";
        txttosecamnt.Text = "";
        txtuptosec.Text = "";
        ddlamntorpersec.SelectedIndex = 0;

        string[] splyear = new string[2];
        string[] splmonyearfrst = new string[2];
        string[] splmonyearsec = new string[2];

        btnview.Visible = false;

        loadfromyear();
        string selyear = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='IT Calculation Settings' and college_code='" + ddlcollege.SelectedValue + "'");
        if (selyear.Trim() != "0")
        {
            splyear = selyear.Split('-');
            splmonyearfrst = splyear[0].Split(',');
            splmonyearsec = splyear[1].Split(',');
            string frmmon = Convert.ToString(Convert.ToInt32(splmonyearfrst[0]));
            ddlfrmmon.SelectedIndex = Convert.ToInt32(frmmon) - 1;
            ddlfrmyear.SelectedIndex = ddlfrmyear.Items.IndexOf(ddlfrmyear.Items.FindByText(Convert.ToString(splmonyearfrst[1])));
            string tomon = Convert.ToString(Convert.ToInt32(splmonyearsec[0]));
            ddltomon.SelectedIndex = Convert.ToInt32(tomon) - 1;
            ddltoyear.SelectedIndex = ddltoyear.Items.IndexOf(ddltoyear.Items.FindByText(Convert.ToString(splmonyearsec[1])));
        }
    }

    public void PFNo()
    {
        string selyear = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='IT Calculation PAN / GIR' and college_code='" + ddlcollege.SelectedValue + "'");
        if (selyear.Trim() != "" && selyear.Trim() != "0")
        {
            txtPanNo.Text = selyear.Trim();
        }
        else
        {
            txtPanNo.Text = "";
        }

        selyear = d2.GetFunction("select LinkValue from New_InsSettings where LinkName='IT Calculation TAN' and college_code='" + ddlcollege.SelectedValue + "'");
        if (selyear.Trim() != "" && selyear.Trim() != "0")
        {
            txtTanNo.Text = selyear.Trim();
        }
        else
        {
            txtTanNo.Text = "";
        }
    }

    public void GridBind()
    {
        string selitcal = "select * from HR_ITCalculationSettings where collegeCode='" + ddlcollege.SelectedValue + "'";
        ds.Clear();
        ds = d2.select_method_wo_parameter(selitcal, "Text");
        {
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    divgrditset.Visible = true;
                    grditset.Visible = true;
                    bindgrditset();
                }
                else
                {
                    Session["dtitset"] = null;
                    divgrditset.Visible = false;
                    grditset.Visible = false;
                }
            }
            else
            {
                Session["dtitset"] = null;
                divgrditset.Visible = false;
                grditset.Visible = false;
            }
        }
    }

    protected void btn_del_Click(object sender, EventArgs e)
    {
        int rowindex = ((GridViewRow)((Button)sender).Parent.Parent).RowIndex;
        try
        {
            if (grditset.Rows.Count > 0)
            {
                string itCalPk = ((Label)grditset.Rows[rowindex].FindControl("lbl_itCalPk")).Text;
                string delQuery = "Delete  from HR_ITCalculationSettings where ITCalculationPK=" + itCalPk;
                int delcount = d2.update_method_wo_parameter(delQuery, "Text");
                ScriptManager.RegisterClientScriptBlock(this, typeof(Page), UniqueID, "alert('Deleted Successfully')", true);
            }
            GridBind();
        }
        catch { }
    }

    protected void btn_clear_Click(object sender, EventArgs e)
    {
        txtfrmsecamnt.Text = "";
        txttosecamnt.Text = "";
        txtuptosec.Text = "";
        txtItCalPk.Text = "";
    }

    protected void btn_update_Click(object sender, EventArgs e)
    {
        int rowindex = ((GridViewRow)((Button)sender).Parent.Parent).RowIndex;
        try
        {
            if (grditset.Rows.Count > 0)
            {
                string frmamntlimit = ((Label)grditset.Rows[rowindex].FindControl("lbl_frmamnt")).Text;
                string toamntlimit = ((Label)grditset.Rows[rowindex].FindControl("lbl_toamnt")).Text;
                string itMode = ((Label)grditset.Rows[rowindex].FindControl("lbl_itmode")).Text;
                string amtOrPer = ((Label)grditset.Rows[rowindex].FindControl("lbl_itamntorper")).Text;
                string gender = ((Label)grditset.Rows[rowindex].FindControl("lbl_gender")).Text;
                string itCalPk = ((Label)grditset.Rows[rowindex].FindControl("lbl_itCalPk")).Text;
                txtfrmsecamnt.Text = frmamntlimit;
                txttosecamnt.Text = toamntlimit;
                ddlamntorpersec.SelectedIndex = ddlamntorpersec.Items.IndexOf(ddlamntorpersec.Items.FindByText(itMode));
                txtuptosec.Text = amtOrPer;
                ddlgender.SelectedIndex = ddlgender.Items.IndexOf(ddlgender.Items.FindByText(gender));
                txtItCalPk.Text = itCalPk;
                // btnadditset_click(sender, e);
            }
            GridBind();
        }
        catch { }

    }

    public void bindgrditset()
    {
        try
        {
            string modeval = "";
            string amntorperval = "";
            string gender = "";

            DataTable dt = new DataTable();
            dt.Columns.Add("sno");
            dt.Columns.Add("itfrmamnt");
            dt.Columns.Add("ittoamnt");
            dt.Columns.Add("itmode");
            dt.Columns.Add("itamntorper");
            dt.Columns.Add("gender");
            dt.Columns.Add("itCalculationPK");
            gender = Convert.ToString(ddlgender.SelectedItem.Text);

            string selitset = "select * from HR_ITCalculationSettings where collegeCode='" + ddlcollege.SelectedValue + "' order by FromRange";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selitset, "Text");
            if (ds.Tables.Count > 0)
            {
                if (ds.Tables[0].Rows.Count > 0)
                {
                    DataRow dr;
                    for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                    {
                        dr = dt.NewRow();
                        dr["sno"] = Convert.ToString(i + 1);
                        dr["itfrmamnt"] = Convert.ToString(ds.Tables[0].Rows[i]["FromRange"]);
                        dr["ittoamnt"] = Convert.ToString(ds.Tables[0].Rows[i]["ToRange"]);
                        if (Convert.ToString(ds.Tables[0].Rows[i]["Mode"]) == "False")
                        {
                            modeval = "Amount";
                        }
                        else
                        {
                            modeval = "Percent";
                        }
                        dr["itmode"] = Convert.ToString(modeval);
                        if (modeval.Trim() == "Amount")
                        {
                            amntorperval = Convert.ToString(ds.Tables[0].Rows[i]["Amount"]);
                        }
                        else
                        {
                            amntorperval = Convert.ToString(ds.Tables[0].Rows[i]["Amount"]) + "%";
                        }
                        dr["itamntorper"] = Convert.ToString(amntorperval);
                        dr["gender"] = Convert.ToString(ds.Tables[0].Rows[i]["sex"]);
                        dr["itCalculationPK"] = Convert.ToString(ds.Tables[0].Rows[i]["ITCalculationPK"]);
                        dt.Rows.Add(dr);
                    }
                    Session["dtitset"] = dt;
                }
            }
            if (dt.Rows.Count > 0)
            {
                grditset.DataSource = dt;
                grditset.HeaderStyle.BackColor = ColorTranslator.FromHtml("#0CA6CA");
                grditset.DataBind();
            }
            grditset.Columns[0].HeaderStyle.Width = 75;
            grditset.Columns[0].ItemStyle.Width = 75;
            grditset.Columns[1].HeaderStyle.Width = 125;
            grditset.Columns[1].ItemStyle.Width = 125;
            grditset.Columns[2].HeaderStyle.Width = 125;
            grditset.Columns[2].ItemStyle.Width = 125;
            grditset.Columns[3].HeaderStyle.Width = 100;
            grditset.Columns[3].ItemStyle.Width = 100;
            grditset.Columns[4].HeaderStyle.Width = 125;
            grditset.Columns[4].ItemStyle.Width = 125;
            grditset.Columns[5].HeaderStyle.Width = 100;
            grditset.Columns[5].ItemStyle.Width = 100;
        }
        catch { }
    }

    #endregion

    protected void btn_GendersetSave_Click(object sender, EventArgs e)
    {
        for (int i = 0; i < ddluser.Items.Count; i++)
        {
            if (ddluser.Items[i].Selected == true)
            {
                selected_userid = Convert.ToString(ddluser.Items[i].Text);
                selected_usercode = Convert.ToInt16(ddluser.Items[i].Value);
                string collegecodelevel = ddlcollegename.SelectedItem.Value;
                if (ddl_genderset.Items.Count > 0)//newcollege
                {
                    string app_gensettings = "";
                    if (rdb_genderset.Items[3].Selected == true)
                    {
                        app_gensettings = "3";
                    }
                    else if (rdb_genderset.Items[0].Selected == true && rdb_genderset.Items[1].Selected == true)
                    {
                        app_gensettings = "0,1";
                    }
                    else if (rdb_genderset.Items[0].Selected == true && rdb_genderset.Items[2].Selected == true)
                    {
                        app_gensettings = "0,2";
                    }
                    else if (rdb_genderset.Items[1].Selected == true && rdb_genderset.Items[2].Selected == true)
                    {
                        app_gensettings = "1,2";
                    }
                    else if (rdb_genderset.Items[0].Selected == true)
                    {
                        app_gensettings = "0";
                    }
                    else if (rdb_genderset.Items[1].Selected == true)
                    {
                        app_gensettings = "1";
                    }
                    else if (rdb_genderset.Items[2].Selected == true)
                    {
                        app_gensettings = "2";
                    }
                    else
                    { app_gensettings = "3"; }
                    string Educationlevel = Convert.ToString(ddl_genderset.SelectedItem.Value);
                    //string Q1 = " if exists(select * from co_mastervalues where MasterCriteriaValue1='Online_Application_Gender_Settings' and MasterCriteria='" + Educationlevel + "' and mastercriteria1='" + selected_usercode + "' and collegecode='" + ddlcollege.SelectedItem.Value + "') update co_mastervalues set mastervalue='" + app_gensettings + "' where MasterCriteriaValue1='Online_Application_Gender_Settings' and MasterCriteria='" + Educationlevel + "' and mastercriteria1='" + selected_usercode + "' and collegecode='" + ddlcollege.SelectedItem.Value + "' else insert into co_mastervalues(mastervalue,MasterCriteriaValue1,mastercriteria1,MasterCriteria,collegecode) values ('" + app_gensettings + "','Online_Application_Gender_Settings','" + selected_usercode + "','" + Educationlevel + "','" + ddlcollege.SelectedItem.Value + "')";
                    string Q1 = " if exists(select * from co_mastervalues where MasterCriteriaValue1='Online_Application_Gender_Settings' and MasterCriteria='" + Educationlevel + "' and mastercriteria1='" + selected_usercode + "' and collegecode in(" + collegecodelevel + ")) update co_mastervalues set mastervalue='" + app_gensettings + "' where MasterCriteriaValue1='Online_Application_Gender_Settings' and MasterCriteria='" + Educationlevel + "' and mastercriteria1='" + selected_usercode + "' and collegecode in(" + collegecodelevel + ") else insert into co_mastervalues(mastervalue,MasterCriteriaValue1,mastercriteria1,MasterCriteria,collegecode) values ('" + app_gensettings + "','Online_Application_Gender_Settings','" + selected_usercode + "','" + Educationlevel + "'," + collegecodelevel + ")";
                    d2.update_method_wo_parameter(Q1, "text");
                    //string collegecodelevel = ddlcollegename.SelectedItem.Value;//modified
                    string insqry1 = "if exists (select * from New_InsSettings where LinkName='Online_Application_Gender_Settings' and user_code ='" + selected_usercode + "' and college_code in(" + collegecodelevel + ") ) update New_InsSettings set LinkValue ='" + app_gensettings + "' where LinkName='Online_Application_Gender_Settings' and user_code ='" + selected_usercode + "' and college_code in(" + collegecodelevel + ") else insert into New_InsSettings(LinkName,LinkValue,user_code,college_code) values ('Online_Application_Gender_Settings','" + app_gensettings + "','" + selected_usercode + "','" + collegecodelevel + "')";
                    int save1 = d2.update_method_wo_parameter(insqry1, "Text");
                    if (save1 == 1)
                    {
                        imgAlert.Visible = true;
                        lbl_alert.Text = "Saved successfully";
                    }
                }
            }
        }
    }

    protected void ddl_genderEducation_selectedindexchange(object sender, EventArgs e)
    {
        string save0 = string.Empty;
        for (int i = 0; i < ddluser.Items.Count; i++)
        {
            if (ddluser.Items[i].Selected == true)
            {
                selected_userid = Convert.ToString(ddluser.Items[i].Text);
                selected_usercode = Convert.ToInt16(ddluser.Items[i].Value);
                if (ddl_genderset.Items.Count > 0)
                {
                    string Q1 = " select mastervalue from co_mastervalues where MasterCriteriaValue1='Online_Application_Gender_Settings' and MasterCriteria='" + Convert.ToString(ddl_genderset.SelectedItem.Value) + "' and mastercriteria1='" + selected_usercode + "' and collegecode='" + ddlcollege.SelectedItem.Value + "'";
                    save0 = Convert.ToString(d2.GetFunction(Q1));
                    rdb_genderset.ClearSelection();
                    if (save0 == "3")
                    {
                        rdb_genderset.Items[3].Selected = true;
                    }
                    else if (save0.Trim() == "0,1")
                    {
                        rdb_genderset.Items[0].Selected = true;
                        rdb_genderset.Items[1].Selected = true;
                    }
                    else if (save0.Trim() == "0,2")
                    {
                        rdb_genderset.Items[0].Selected = true;
                        rdb_genderset.Items[2].Selected = true;
                    }
                    else if (save0.Trim() == "1,2")
                    {
                        rdb_genderset.Items[1].Selected = true;
                        rdb_genderset.Items[2].Selected = true;
                    }
                    else if (save0.Trim() == "0")
                        rdb_genderset.Items[0].Selected = true;
                    else if (save0.Trim() == "1")
                        rdb_genderset.Items[1].Selected = true;
                    else if (save0.Trim() == "2")
                        rdb_genderset.Items[2].Selected = true;
                    else
                        rdb_genderset.Items[3].Selected = true;
                }
            }
        }
    }

    //added by sudhagar 08.09.2017 for fine each department
    #region  fine

    #region batch

    public void bindBtch()
    {
        try
        {
            cbl_batch.Items.Clear();
            cb_batch.Checked = false;
            txt_batch.Text = "---Select---";
            ds.Reset();
            ds = d2.BindBatch();
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_batch.DataSource = ds;
                cbl_batch.DataTextField = "batch_year";
                cbl_batch.DataValueField = "batch_year";
                cbl_batch.DataBind();
                //if (cbl_batch.Items.Count > 0)
                //{
                //    for (int i = 0; i < cbl_batch.Items.Count; i++)
                //    {
                //        cbl_batch.Items[i].Selected = true;
                //    }
                //    txt_batch.Text = lblbatch.Text + "(" + cbl_batch.Items.Count + ")";
                //    cb_batch.Checked = true;
                //}
            }
        }
        catch { }
    }

    protected void cb_batch_OnCheckedChanged(object sender, EventArgs e)
    {
        CallCheckboxChange(cb_batch, cbl_batch, txt_batch, lblbatch.Text, "--Select--");
        //binddeg();
        //binddept();
    }

    protected void cbl_batch_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckboxListChange(cb_batch, cbl_batch, txt_batch, lblbatch.Text, "--Select--");
        //binddeg();
        //binddept();
    }

    #endregion

    #region degree

    public void binddeg()
    {
        try
        {
            cbl_degree.Items.Clear();
            cb_degree.Checked = false;
            txt_degree.Text = "---Select---";
            ds.Reset();
            string clgvalue = "";
            string selqry = "select distinct  c.Course_Name,c.Course_Id  from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + ddlcollege.SelectedValue + "'";
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_degree.DataSource = ds;
                cbl_degree.DataTextField = "course_name";
                cbl_degree.DataValueField = "course_id";
                cbl_degree.DataBind();
                binddept();
                //if (cbl_degree.Items.Count > 0)
                //{
                //    for (int i = 0; i < cbl_degree.Items.Count; i++)
                //    {
                //        cbl_degree.Items[i].Selected = true;
                //    }
                //    txt_degree.Text = lbldeg.Text + "(" + cbl_degree.Items.Count + ")";
                //    cb_degree.Checked = true;
                //}
            }

        }
        catch { }
    }

    protected void cb_degree_OnCheckedChanged(object sender, EventArgs e)
    {
        CallCheckboxChange(cb_degree, cbl_degree, txt_degree, lbldeg.Text, "--Select--");
        binddept();

    }

    protected void cbl_degree_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckboxListChange(cb_degree, cbl_degree, txt_degree, lbldeg.Text, "--Select--");
        binddept();

    }

    #endregion

    #region dept

    public void binddept()
    {
        try
        {
            cbl_dept.Items.Clear();
            cb_dept.Checked = false;
            txt_dept.Text = "---Select---";
            string batch = "";
            for (int i = 0; i < cbl_batch.Items.Count; i++)
            {
                //if (cbl_batch.Items[i].Selected == true)
                //{
                if (batch == "")
                    batch = Convert.ToString(cbl_batch.Items[i].Text);
                else
                    batch += "','" + Convert.ToString(cbl_batch.Items[i].Text);
                //}
            }
            string degree = "";
            for (int i = 0; i < cbl_degree.Items.Count; i++)
            {
                //if (cbl_degree.Items[i].Selected == true)
                // {
                if (degree == "")
                    degree = Convert.ToString(cbl_degree.Items[i].Value);

                else
                    degree += "," + Convert.ToString(cbl_degree.Items[i].Value);
                // }

            }

            // string collegecode = ddlcollegename.SelectedItem.Value.ToString();
            string usercode = Convert.ToString(Session["usercode"]);
            if (batch != "" && degree != "")
            {
                ds.Reset();
                ds = d2.BindBranchMultiple(singleuser, group_user, degree, ddlcollege.SelectedValue, usercode);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cbl_dept.DataSource = ds;
                    cbl_dept.DataTextField = "dept_name";
                    cbl_dept.DataValueField = "degree_code";
                    cbl_dept.DataBind();
                    //if (cbl_dept.Items.Count > 0)
                    //{
                    //    for (int i = 0; i < cbl_dept.Items.Count; i++)
                    //    {
                    //        cbl_dept.Items[i].Selected = true;
                    //    }
                    //    txt_dept.Text = lbldept.Text + "(" + cbl_dept.Items.Count + ")";
                    //    cb_dept.Checked = true;
                    //}
                }
            }

        }
        catch { }
    }

    protected void cb_dept_OnCheckedChanged(object sender, EventArgs e)
    {
        CallCheckboxChange(cb_dept, cbl_dept, txt_dept, lbldept.Text, "--Select--");
    }

    protected void cbl_dept_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckboxListChange(cb_dept, cbl_dept, txt_dept, "Department", "--Select--");
    }

    #endregion

    #endregion

    #region  re admission fine
    #region batch
    public void bindBtchRe()
    {
        try
        {
            cblreadmbatch.Items.Clear();
            cbreadmbatch.Checked = false;
            txtreadmbatch.Text = "---Select---";
            DataSet dsB = d2.BindBatch();
            if (dsB.Tables[0].Rows.Count > 0)
            {
                cblreadmbatch.DataSource = dsB;
                cblreadmbatch.DataTextField = "batch_year";
                cblreadmbatch.DataValueField = "batch_year";
                cblreadmbatch.DataBind();
                //if (cbl_batch.Items.Count > 0)
                //{
                //    for (int i = 0; i < cbl_batch.Items.Count; i++)
                //    {
                //        cbl_batch.Items[i].Selected = true;
                //    }
                //    txt_batch.Text = lblbatch.Text + "(" + cbl_batch.Items.Count + ")";
                //    cb_batch.Checked = true;
                //}
            }
        }
        catch { }
    }
    protected void cbreadmbatch_OnCheckedChanged(object sender, EventArgs e)
    {
        CallCheckboxChange(cbreadmbatch, cblreadmbatch, txtreadmbatch, "Batch", "--Select--");
        // binddegRe();
        // binddeptRe();
    }
    protected void cblreadmbatch_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckboxListChange(cbreadmbatch, cblreadmbatch, txtreadmbatch, "Batch", "--Select--");
        //binddegRe();
        //binddeptRe();
    }
    #endregion

    #region degree


    public void binddegRe()
    {
        try
        {
            cblreadmdegree.Items.Clear();
            cbreadmdegree.Checked = false;
            txtreadmdegree.Text = "---Select---";
            ds.Reset();
            string clgvalue = "";
            string selqry = "select distinct  c.Course_Name,c.Course_Id  from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + ddlcollege.SelectedValue + "'";
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cblreadmdegree.DataSource = ds;
                cblreadmdegree.DataTextField = "course_name";
                cblreadmdegree.DataValueField = "course_id";
                cblreadmdegree.DataBind();
                binddeptRe();
                //if (cbl_degree.Items.Count > 0)
                //{
                //    for (int i = 0; i < cbl_degree.Items.Count; i++)
                //    {
                //        cbl_degree.Items[i].Selected = true;
                //    }
                //    txt_degree.Text = lbldeg.Text + "(" + cbl_degree.Items.Count + ")";
                //    cb_degree.Checked = true;
                //}
            }

        }
        catch { }
    }
    protected void cbreadmdegree_OnCheckedChanged(object sender, EventArgs e)
    {
        CallCheckboxChange(cbreadmdegree, cblreadmdegree, txtreadmdegree, "Degree", "--Select--");
        binddeptRe();

    }
    protected void cblreadmdegree_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckboxListChange(cbreadmdegree, cblreadmdegree, txtreadmdegree, "Degree", "--Select--");
        binddeptRe();

    }
    #endregion

    #region dept
    public void binddeptRe()
    {
        try
        {
            cblreadmdept.Items.Clear();
            cbreadmdept.Checked = false;
            txtreadmdept.Text = "---Select---";
            string batch = "";
            for (int i = 0; i < cblreadmbatch.Items.Count; i++)
            {
                //if (cbl_batch.Items[i].Selected == true)
                //{
                if (batch == "")
                    batch = Convert.ToString(cblreadmbatch.Items[i].Text);
                else
                    batch += "','" + Convert.ToString(cblreadmbatch.Items[i].Text);
                //}
            }
            string degree = "";
            for (int i = 0; i < cblreadmdegree.Items.Count; i++)
            {
                //if (cbl_degree.Items[i].Selected == true)
                // {
                if (degree == "")
                    degree = Convert.ToString(cblreadmdegree.Items[i].Value);

                else
                    degree += "," + Convert.ToString(cblreadmdegree.Items[i].Value);
                // }

            }

            // string collegecode = ddlcollegename.SelectedItem.Value.ToString();
            string usercode = Convert.ToString(Session["usercode"]);
            if (batch != "" && degree != "")
            {
                ds.Reset();
                ds = d2.BindBranchMultiple(singleuser, group_user, degree, ddlcollege.SelectedValue, usercode);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cblreadmdept.DataSource = ds;
                    cblreadmdept.DataTextField = "dept_name";
                    cblreadmdept.DataValueField = "degree_code";
                    cblreadmdept.DataBind();
                    //if (cbl_dept.Items.Count > 0)
                    //{
                    //    for (int i = 0; i < cbl_dept.Items.Count; i++)
                    //    {
                    //        cbl_dept.Items[i].Selected = true;
                    //    }
                    //    txt_dept.Text = lbldept.Text + "(" + cbl_dept.Items.Count + ")";
                    //    cb_dept.Checked = true;
                    //}
                }
            }

        }
        catch { }
    }
    protected void cbreadmdept_OnCheckedChanged(object sender, EventArgs e)
    {
        CallCheckboxChange(cbreadmdept, cblreadmdept, txtreadmdept, "Department", "--Select--");
    }
    protected void cblreadmdept_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckboxListChange(cbreadmdept, cblreadmdept, txtreadmdept, "Department", "--Select--");
    }
    #endregion
    #endregion

    //other college fine 08.09.2017
    #region  fine
    #region batch
    public void bindBtchO()
    {
        try
        {
            cblObatch.Items.Clear();
            cbObatch.Checked = false;
            txtObatch.Text = "---Select---";
            ds.Reset();
            ds = d2.BindBatch();
            if (ds.Tables[0].Rows.Count > 0)
            {
                cblObatch.DataSource = ds;
                cblObatch.DataTextField = "batch_year";
                cblObatch.DataValueField = "batch_year";
                cblObatch.DataBind();
            }
        }
        catch { }
    }
    protected void cbObatch_OnCheckedChanged(object sender, EventArgs e)
    {
        string college = string.Empty;
        if (ddl_otColleges.Items.Count > 0)
            college = Convert.ToString(ddl_otColleges.SelectedItem.Value);
        CallCheckboxChange(cbObatch, cblObatch, txtObatch, "Batch", "--Select--");
        //binddegO(college);
        //binddeptO(college);
    }
    protected void cblObatch_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        string college = string.Empty;
        if (ddl_otColleges.Items.Count > 0)
            college = Convert.ToString(ddl_otColleges.SelectedItem.Value);
        CallCheckboxListChange(cbObatch, cblObatch, txtObatch, "Batch", "--Select--");
        //binddegO(college);
        //binddeptO(college);
    }
    #endregion

    #region degree


    public void binddegO(string college)
    {
        try
        {
            cblOdegree.Items.Clear();
            cbOdegree.Checked = false;
            txtOdegree.Text = "---Select---";
            ds.Reset();
            string clgvalue = "";
            string selqry = "select distinct  c.Course_Name,c.Course_Id  from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + college + "'";
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cblOdegree.DataSource = ds;
                cblOdegree.DataTextField = "course_name";
                cblOdegree.DataValueField = "course_id";
                cblOdegree.DataBind();
                binddeptO(college);
            }

        }
        catch { }
    }
    protected void cbOdegree_OnCheckedChanged(object sender, EventArgs e)
    {
        string college = string.Empty;
        if (ddl_otColleges.Items.Count > 0)
            college = Convert.ToString(ddl_otColleges.SelectedItem.Value);
        CallCheckboxChange(cbOdegree, cblOdegree, txtOdegree, "Degree", "--Select--");
        binddeptO(college);

    }
    protected void cblOdegree_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        string college = string.Empty;
        if (ddl_otColleges.Items.Count > 0)
            college = Convert.ToString(ddl_otColleges.SelectedItem.Value);
        CallCheckboxListChange(cbOdegree, cblOdegree, txtOdegree, "Degree", "--Select--");
        binddeptO(college);

    }
    #endregion

    #region dept
    public void binddeptO(string college)
    {
        try
        {
            cblOdept.Items.Clear();
            cbOdept.Checked = false;
            txtOdept.Text = "---Select---";
            string batch = "";
            for (int i = 0; i < cblObatch.Items.Count; i++)
            {
                if (batch == "")
                    batch = Convert.ToString(cblObatch.Items[i].Text);
                else
                    batch += "','" + Convert.ToString(cblObatch.Items[i].Text);
            }
            string degree = "";
            for (int i = 0; i < cblOdegree.Items.Count; i++)
            {
                if (degree == "")
                    degree = Convert.ToString(cblOdegree.Items[i].Value);

                else
                    degree += "," + Convert.ToString(cblOdegree.Items[i].Value);
            }

            // string collegecode = ddlcollegename.SelectedItem.Value.ToString();
            string usercode = Convert.ToString(Session["usercode"]);
            if (batch != "" && degree != "")
            {
                ds.Reset();
                ds = d2.BindBranchMultiple(singleuser, group_user, degree, college, usercode);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cblOdept.DataSource = ds;
                    cblOdept.DataTextField = "dept_name";
                    cblOdept.DataValueField = "degree_code";
                    cblOdept.DataBind();
                }
            }

        }
        catch { }
    }
    protected void cbOdept_OnCheckedChanged(object sender, EventArgs e)
    {
        CallCheckboxChange(cbOdept, cblOdept, txtOdept, "Department", "--Select--");
    }
    protected void cblOdept_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckboxListChange(cbOdept, cblOdept, txtOdept, "Department", "--Select--");
    }
    #endregion
    #endregion

    //other college fine 08.09.2017
    #region  re admission fine 08.09.2017
    #region batch
    public void bindBtchRO()
    {
        try
        {
            cblORbatch.Items.Clear();
            cbORbatch.Checked = false;
            txtORbatch.Text = "---Select---";
            ds.Reset();
            ds = d2.BindBatch();
            if (ds.Tables[0].Rows.Count > 0)
            {
                cblORbatch.DataSource = ds;
                cblORbatch.DataTextField = "batch_year";
                cblORbatch.DataValueField = "batch_year";
                cblORbatch.DataBind();
            }
        }
        catch { }
    }
    protected void cbORbatch_OnCheckedChanged(object sender, EventArgs e)
    {
        string college = string.Empty;
        if (ddl_otColleges.Items.Count > 0)
            college = Convert.ToString(ddl_otColleges.SelectedItem.Value);
        CallCheckboxChange(cbORbatch, cblORbatch, txtORbatch, "Batch", "--Select--");
        //binddegRO(college);
        //binddeptRO(college);
    }
    protected void cblORbatch_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        string college = string.Empty;
        if (ddl_otColleges.Items.Count > 0)
            college = Convert.ToString(ddl_otColleges.SelectedItem.Value);
        CallCheckboxListChange(cbORbatch, cblORbatch, txtORbatch, "Batch", "--Select--");
        //binddegRO(college);
        //binddeptRO(college);
    }
    #endregion

    #region degree


    public void binddegRO(string college)
    {
        try
        {
            cblORdegree.Items.Clear();
            cbORdegree.Checked = false;
            txtORdegree.Text = "---Select---";
            ds.Reset();
            string clgvalue = "";
            string selqry = "select distinct  c.Course_Name,c.Course_Id  from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and d.Course_Id =c.Course_Id  and d.college_code='" + college + "'";
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cblORdegree.DataSource = ds;
                cblORdegree.DataTextField = "course_name";
                cblORdegree.DataValueField = "course_id";
                cblORdegree.DataBind();
                binddeptRO(college);
            }

        }
        catch { }
    }
    protected void cbORdegree_OnCheckedChanged(object sender, EventArgs e)
    {
        string college = string.Empty;
        if (ddl_otColleges.Items.Count > 0)
            college = Convert.ToString(ddl_otColleges.SelectedItem.Value);
        CallCheckboxChange(cbORdegree, cblORdegree, txtORdegree, "Degree", "--Select--");
        binddeptRO(college);

    }
    protected void cblORdegree_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        string college = string.Empty;
        if (ddl_otColleges.Items.Count > 0)
            college = Convert.ToString(ddl_otColleges.SelectedItem.Value);
        CallCheckboxListChange(cbORdegree, cblORdegree, txtORdegree, "Degree", "--Select--");
        binddeptRO(college);

    }
    #endregion

    #region dept
    public void binddeptRO(string college)
    {
        try
        {
            cblORdept.Items.Clear();
            cbORDept.Checked = false;
            txtORdept.Text = "---Select---";
            string batch = "";
            for (int i = 0; i < cblORbatch.Items.Count; i++)
            {
                if (batch == "")
                    batch = Convert.ToString(cblORbatch.Items[i].Text);
                else
                    batch += "','" + Convert.ToString(cblORbatch.Items[i].Text);
            }
            string degree = "";
            for (int i = 0; i < cblORdegree.Items.Count; i++)
            {
                if (degree == "")
                    degree = Convert.ToString(cblORdegree.Items[i].Value);

                else
                    degree += "," + Convert.ToString(cblORdegree.Items[i].Value);
            }

            // string collegecode = ddlcollegename.SelectedItem.Value.ToString();
            string usercode = Convert.ToString(Session["usercode"]);
            if (batch != "" && degree != "")
            {
                ds.Reset();
                ds = d2.BindBranchMultiple(singleuser, group_user, degree, college, usercode);
                if (ds.Tables[0].Rows.Count > 0)
                {
                    cblORdept.DataSource = ds;
                    cblORdept.DataTextField = "dept_name";
                    cblORdept.DataValueField = "degree_code";
                    cblORdept.DataBind();
                }
            }

        }
        catch { }
    }
    protected void cbORDept_OnCheckedChanged(object sender, EventArgs e)
    {
        CallCheckboxChange(cbORDept, cblORdept, txtORdept, "Department", "--Select--");
    }
    protected void cblORdept_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckboxListChange(cbORDept, cblORdept, txtORdept, "Department", "--Select--");
    }
    #endregion
    #endregion

    protected bool getSelectedCount(CheckBoxList cbl)
    {
        bool boolCheck = false;
        for (int row = 0; row < cbl.Items.Count; row++)
        {
            if (!cbl.Items[row].Selected)
                continue;
            boolCheck = true;
        }
        return boolCheck;
    }

    protected Hashtable getDepartment(string collegecode)
    {
        Hashtable htDept = new Hashtable();
        try
        {
            string selQ = " select d.degree_code,dt.dept_code,dt.dept_name,c.course_name,c.course_id from degree d,course c,department dt where d.course_id=c.course_id and d.dept_code=dt.dept_code and d.college_code='" + collegecode + "'";
            DataSet dsVal = d2.select_method_wo_parameter(selQ, "Text");
            if (dsVal.Tables.Count > 0 && dsVal.Tables[0].Rows.Count > 0)
            {
                for (int row = 0; row < dsVal.Tables[0].Rows.Count; row++)
                {
                    string deptcode = Convert.ToString(dsVal.Tables[0].Rows[row]["degree_code"]);
                    string courseId = Convert.ToString(dsVal.Tables[0].Rows[row]["course_id"]);
                    if (!htDept.ContainsKey(deptcode))
                    {
                        htDept.Add(deptcode, courseId);
                    }
                }
            }
        }
        catch { }
        return htDept;
    }

    //added by sudhagar online finance year header and ledger settings

    protected void cbhdOnline_OnCheckedChanged(object sender, EventArgs e)
    {
        CallCheckboxChange(cbhdOnline, cblhdOnline, txthdOnline, "Header", "--Select--");
        loadOnlineLedgers();
    }

    protected void cblhdOnline_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckboxListChange(cbhdOnline, cblhdOnline, txthdOnline, "Header", "--Select--");
        loadOnlineLedgers();
    }

    protected void cbedgOnline_OnCheckedChanged(object sender, EventArgs e)
    {
        CallCheckboxChange(cbedgOnline, cbledgOnline, txtldOnline, "Ledger", "--Select--");
    }

    protected void cbledgOnline_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        CallCheckboxListChange(cbedgOnline, cbledgOnline, txtldOnline, "Ledger", "--Select--");
    }

    protected void btnsaveOnline_Click(object sender, EventArgs e)
    {
        try
        {
            bool boolFalse = false;
            string finYear = Convert.ToString(ddlfinOnline.SelectedValue);
            string collegeCode = ddlcollege.Items.Count > 0 ? ddlcollege.SelectedValue : "13";
            if (!string.IsNullOrEmpty(finYear))
            {
                Hashtable htHeader = htheader(collegeCode);
                for (int hdrI = 0; hdrI < cblhdOnline.Items.Count; hdrI++)
                {
                    if (!cblhdOnline.Items[hdrI].Selected)
                        continue;
                    string hdFK = Convert.ToString(cblhdOnline.Items[hdrI].Value);
                    for (int hdriI = 0; hdriI < cbledgOnline.Items.Count; hdriI++)
                    {
                        if (!cbledgOnline.Items[hdriI].Selected)
                            continue;
                        string ldFK = Convert.ToString(cbledgOnline.Items[hdriI].Value);
                        hdFK = Convert.ToString(htHeader[ldFK]);
                        string insQ = " if exists(select * from tbl_OnlineSettings where onlineSetting_CollegeCode='" + collegeCode + "' and onlineSetting_FinYearFk='" + finYear + "' and onlineSetting_HeaderFK='" + hdFK + "' and onlineSetting_LedgerFK='" + ldFK + "') delete from  tbl_OnlineSettings where onlineSetting_CollegeCode='" + collegeCode + "' and onlineSetting_FinYearFk='" + finYear + "' and onlineSetting_HeaderFK='" + hdFK + "' and onlineSetting_LedgerFK='" + ldFK + "' insert into tbl_OnlineSettings(onlineSetting_FinYearFk,onlineSetting_HeaderFK,onlineSetting_LedgerFK,onlineSetting_CollegeCode) values('" + finYear + "','" + hdFK + "','" + ldFK + "','" + collegeCode + "')";
                        //update tbl_OnlineSettings set onlineSetting_FinYearFk='" + finYear + "',onlineSetting_HeaderFK='" + hdFK + "',onlineSetting_LedgerFK='" + ldFK + "' where onlineSetting_CollegeCode='" + collegeCode + "'
                        int upd = d2.update_method_wo_parameter(insQ, "Text");
                        boolFalse = true;
                    }
                }
            }
            if (boolFalse)
            {
                ScriptManager.RegisterClientScriptBlock(this, typeof(Page), UniqueID, "alert('Saved Successfully')", true);
            }
        }
        catch { }
    }

    protected Hashtable htheader(string collegecode)
    {
        Hashtable htDept = new Hashtable();
        try
        {
            string selQ = " select headerpk,ledgerpk from fm_headermaster h,fm_ledgermaster l where h.headerpk=l.headerfk and h.collegecode='" + collegecode + "'";
            DataSet dsVal = d2.select_method_wo_parameter(selQ, "Text");
            if (dsVal.Tables.Count > 0 && dsVal.Tables[0].Rows.Count > 0)
            {
                for (int row = 0; row < dsVal.Tables[0].Rows.Count; row++)
                {
                    string deptcode = Convert.ToString(dsVal.Tables[0].Rows[row]["ledgerpk"]);
                    string courseId = Convert.ToString(dsVal.Tables[0].Rows[row]["headerpk"]);
                    if (!htDept.ContainsKey(deptcode))
                    {
                        htDept.Add(deptcode, courseId);
                    }
                }
            }
        }
        catch { }
        return htDept;
    }

    #region bind values

    public void loadfinanceyear()
    {
        try
        {
            string collegeCode = ddlcollege.Items.Count > 0 ? ddlcollege.SelectedValue : "13";
            string fnalyr = "";
            string getfinanceyear = "select distinct convert(nvarchar(15),FinYearStart,103) sdate,convert(nvarchar(15),FinYearEnd,103) edate,FinYearPK from FM_FinYearMaster where CollegeCode='" + collegeCode + "'  order by FinYearPK desc";
            ds.Dispose();
            ds.Reset();
            ddlfinOnline.Items.Clear();
            ds = d2.select_method_wo_parameter(getfinanceyear, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    string fdatye = ds.Tables[0].Rows[i]["sdate"].ToString() + '-' + ds.Tables[0].Rows[i]["edate"].ToString();
                    string actid = ds.Tables[0].Rows[i]["FinYearPK"].ToString();
                    ddlfinOnline.Items.Insert(0, new System.Web.UI.WebControls.ListItem(fdatye, actid));
                }
            }
        }
        catch (Exception ex)
        {

        }
    }

    private void loadOnlineHeaders()
    {
        try
        {
            string collegeCode = ddlcollege.Items.Count > 0 ? ddlcollege.SelectedValue : "13";
            cbhdOnline.Checked = false;
            cblhdOnline.Items.Clear();
            txthdOnline.Text = "--Select--";
            DataSet dsHdrs = d2.select_method_wo_parameter("select HeaderPK,HeaderName from FM_HeaderMaster where CollegeCode ='" + collegeCode + "'", "TEXT");
            if (dsHdrs.Tables.Count > 0 && dsHdrs.Tables[0].Rows.Count > 0)
            {
                cblhdOnline.DataSource = dsHdrs.Tables[0];
                cblhdOnline.DataTextField = "HeaderName";
                cblhdOnline.DataValueField = "HeaderPK";
                cblhdOnline.DataBind();
                for (int hdrI = 0; hdrI < cblhdOnline.Items.Count; hdrI++)
                {
                    cblhdOnline.Items[hdrI].Selected = true;
                }
                cbhdOnline.Checked = true;
                txthdOnline.Text = "Header(" + cblhdOnline.Items.Count + ")";
                loadOnlineLedgers();
            }
        }
        catch { }
    }

    private void loadOnlineLedgers()
    {
        try
        {
            cbedgOnline.Checked = false;
            cbledgOnline.Items.Clear();
            txtldOnline.Text = "--Select--";

            string collegeCode = ddlcollege.Items.Count > 0 ? ddlcollege.SelectedValue : "13";
            StringBuilder headerCodes = new StringBuilder();
            for (int hdrI = 0; hdrI < cblhdOnline.Items.Count; hdrI++)
            {
                if (cblhdOnline.Items[hdrI].Selected)
                {
                    headerCodes.Append(cblhdOnline.Items[hdrI].Value + ",");
                }
            }
            if (headerCodes.Length > 1)
            {
                headerCodes.Remove(headerCodes.Length - 1, 1);

                DataSet dsLgrs = d2.select_method_wo_parameter("select LedgerPK,LedgerName from FM_LedgerMaster where CollegeCode ='" + collegeCode + "' and HeaderFk in (" + headerCodes.ToString() + ")", "TEXT");
                if (dsLgrs.Tables.Count > 0 && dsLgrs.Tables[0].Rows.Count > 0)
                {
                    cbledgOnline.DataSource = dsLgrs.Tables[0];
                    cbledgOnline.DataTextField = "LedgerName";
                    cbledgOnline.DataValueField = "LedgerPK";
                    cbledgOnline.DataBind();
                    for (int hdrI = 0; hdrI < cbledgOnline.Items.Count; hdrI++)
                    {
                        cbledgOnline.Items[hdrI].Selected = true;
                    }
                    cbedgOnline.Checked = true;
                    txtldOnline.Text = "Ledger(" + cbledgOnline.Items.Count + ")";
                }
            }
        }
        catch { }
    }

    #endregion

    #region  for Revaluation Application and Allowance to Staff

    private void loadFinanceTypeCoe()
    {
        cbl_FianceTypeCOE.Items.Clear();
        cbl_FianceTypeCOE.Items.Add(new ListItem("Invigilation", "0"));
        cbl_FianceTypeCOE.Items.Add(new ListItem("Valuation", "1"));
        cbl_FianceTypeCOE.Items.Add(new ListItem("Question Paper Setter", "2"));
        cbl_FianceTypeCOE.Items.Add(new ListItem("T.A & D.A", "3"));
    }

    public void loadfinanceyearCOE()
    {
        try
        {
            string collegeCode = ddlcollege.Items.Count > 0 ? ddlcollege.SelectedValue : "13";
            string fnalyr = "";
            string getfinanceyear = "select distinct convert(nvarchar(15),FinYearStart,103) sdate,convert(nvarchar(15),FinYearEnd,103) edate,FinYearPK from FM_FinYearMaster where CollegeCode='" + collegeCode + "'  order by FinYearPK desc";
            ds.Dispose();
            ds.Reset();
            ddl_FinanceYearCOE.Items.Clear();
            ds = d2.select_method_wo_parameter(getfinanceyear, "text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    string fdatye = ds.Tables[0].Rows[i]["sdate"].ToString() + '-' + ds.Tables[0].Rows[i]["edate"].ToString();
                    string actid = ds.Tables[0].Rows[i]["FinYearPK"].ToString();
                    ddl_FinanceYearCOE.Items.Insert(0, new System.Web.UI.WebControls.ListItem(fdatye, actid));
                }
            }
        }
        catch (Exception ex)
        {

        }
    }

    private void loadOnlineHeadersCOE()
    {
        try
        {
            string collegeCode = ddlcollege.Items.Count > 0 ? ddlcollege.SelectedValue : "13";
            DataSet dsHdrs = d2.select_method_wo_parameter("select HeaderPK,HeaderName from FM_HeaderMaster where CollegeCode ='" + collegeCode + "'", "TEXT");
            if (dsHdrs.Tables.Count > 0 && dsHdrs.Tables[0].Rows.Count > 0)
            {
                ddl_FinanceHeaderCOE.DataSource = dsHdrs.Tables[0];
                ddl_FinanceHeaderCOE.DataTextField = "HeaderName";
                ddl_FinanceHeaderCOE.DataValueField = "HeaderPK";
                ddl_FinanceHeaderCOE.DataBind();
                loadOnlineLedgersCOE();
            }
        }
        catch { }
    }

    private void loadOnlineLedgersCOE()
    {
        try
        {
            ddl_FinanceLedgerCOE.Items.Clear();
            string collegeCode = ddlcollege.Items.Count > 0 ? ddlcollege.SelectedValue : "13";
            StringBuilder headerCodes = new StringBuilder();
            for (int hdrI = 0; hdrI < ddl_FinanceHeaderCOE.Items.Count; hdrI++)
            {
                headerCodes.Append(ddl_FinanceHeaderCOE.Items[hdrI].Value + ",");
            }
            if (headerCodes.Length > 1)
            {
                headerCodes.Remove(headerCodes.Length - 1, 1);

                DataSet dsLgrs = d2.select_method_wo_parameter("select LedgerPK,LedgerName from FM_LedgerMaster where CollegeCode ='" + collegeCode + "' and HeaderFk in (" + headerCodes.ToString() + ")", "TEXT");
                if (dsLgrs.Tables.Count > 0 && dsLgrs.Tables[0].Rows.Count > 0)
                {
                    ddl_FinanceLedgerCOE.DataSource = dsLgrs.Tables[0];
                    ddl_FinanceLedgerCOE.DataTextField = "LedgerName";
                    ddl_FinanceLedgerCOE.DataValueField = "LedgerPK";
                    ddl_FinanceLedgerCOE.DataBind();
                }
            }
        }
        catch { }
    }

    protected void btnsaveFinanceCOE_Click(object sender, EventArgs e)
    {
        try
        {
            bool isSaved = false;
            string financetype = GetSelectedItemsValueAsString(cbl_FianceTypeCOE);
            string finyearcoe = ddl_FinanceYearCOE.SelectedValue.ToString().Trim();
            string finheadercoe = ddl_FinanceHeaderCOE.SelectedValue.ToString().Trim();
            string finledgercoe = ddl_FinanceLedgerCOE.SelectedValue.ToString().Trim();
            string qry;
            string collegeCode = ddlcollege.Items.Count > 0 ? ddlcollege.SelectedValue : "13";
            int j = 0;
            foreach (ListItem li in cbl_FianceTypeCOE.Items)
            {
                if (li.Selected)
                {
                    dicParam.Clear();
                    dicParam.Add("finYearId", finyearcoe);
                    dicParam.Add("headerId", finheadercoe);
                    dicParam.Add("ledgerId", finledgercoe);
                    dicParam.Add("collegeCode", collegeCode);
                    dicParam.Add("type", li.Value);
                    j = storeAcc.insertData("uspInsertUpdateCOEFinanceSetting", dicParam);
                    if (j != 0)
                        isSaved = true;
                }
            }
            lbl_alert.Text = (isSaved) ? "Saved Successfully" : "Not Saved";
            lbl_alert.Visible = true;
            imgAlert.Visible = true;
        }
        catch { }
    }

    protected void chkFinanceTypeCOE_OnCheckedChanged(object sender, EventArgs e)
    {
        CallCheckboxChange(chk_FianceTypeCOE, cbl_FianceTypeCOE, txt_FianceTypeCOE, "Type", "--Select--");
        loadfinanceyearCOE();
        loadOnlineHeadersCOE();
        loadOnlineLedgersCOE();
    }

    public void BindExamYear1()
    {
        try
        {
            ddlRevalExamYear.Items.Clear();
            ds.Clear();
            string collegeCode = string.Empty;
            string batchYear = string.Empty;
            string degreeCode = string.Empty;
            string qryCollegeCode = string.Empty;
            string qryDegreeCode = string.Empty;
            string qryBatchYear = string.Empty;
            if (ddlcollege.Items.Count > 0)
            {
                collegeCode = Convert.ToString(ddlcollege.SelectedValue).Trim();
                if (!string.IsNullOrEmpty(collegeCode))
                {
                    qryCollegeCode = " and dg.college_code in (" + collegeCode + ")";
                }
            }

            if (!string.IsNullOrEmpty(qryCollegeCode))
            {
                string qry = "select distinct ed.Exam_year from exam_details ed,Degree dg,Course c,Department dt where dg.Degree_Code=ed.degree_code and  c.Course_Id=dg.Course_Id and dg.Dept_Code=dt.Dept_Code and ed.Exam_year<>'0' " + qryCollegeCode + qryDegreeCode + qryBatchYear + " order by ed.Exam_year desc";
                ds.Clear();
                ds.Reset();
                ds.Dispose();
                ds = d2.select_method_wo_parameter(qry, "text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    ddlRevalExamYear.DataSource = ds;
                    ddlRevalExamYear.DataTextField = "Exam_year";
                    ddlRevalExamYear.DataValueField = "Exam_year";
                    ddlRevalExamYear.DataBind();
                    ddlRevalExamYear.SelectedIndex = 0;
                }
            }
            ddlRevalExamYear.Items.Insert(0, new System.Web.UI.WebControls.ListItem("  ", "0"));
            ddlRevalExamYear.SelectedIndex = 0;
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddlRevalExamYear_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        BindExamMonth1();
    }

    private void BindExamMonth1()
    {
        try
        {
            string collegeCode = string.Empty;
            string batchYear = string.Empty;
            string degreeCode = string.Empty;
            ddlRevalExamMonth.Items.Clear();
            ds.Clear();
            collegeCode = string.Empty;
            batchYear = string.Empty;
            degreeCode = string.Empty;
            string qryCollegeCode = string.Empty;
            string qryDegreeCode = string.Empty;
            string qryBatchYear = string.Empty;
            if (ddlcollege.Items.Count > 0)
            {
                collegeCode = Convert.ToString(ddlcollege.SelectedValue).Trim();
                if (!string.IsNullOrEmpty(collegeCode))
                {
                    qryCollegeCode = " and dg.college_code in (" + collegeCode + ")";
                }
            }

            string examYear = string.Empty;
            string qryExamYear = string.Empty;
            if (ddlRevalExamYear.Items.Count > 0)
            {
                examYear = Convert.ToString(ddlRevalExamYear.SelectedValue).Trim();
                if (!string.IsNullOrEmpty(examYear))
                {
                    qryExamYear = " and Exam_year in (" + examYear + ")";
                }
            }
            if (!string.IsNullOrEmpty(qryExamYear) && !string.IsNullOrEmpty(qryCollegeCode))
            {
                string qry = "select distinct ed.Exam_Month,upper(convert(varchar(3),DateAdd(month,ed.Exam_Month,-1))) as Month_Name from exam_details ed,Degree dg,Course c,Department dt where dg.Degree_Code=ed.degree_code and  c.Course_Id=dg.Course_Id and dg.Dept_Code=dt.Dept_Code and ed.Exam_Month<>'0' " + qryCollegeCode + qryDegreeCode + qryBatchYear + qryExamYear + " order by Exam_Month";
                ds.Clear();
                ds.Reset();
                ds.Dispose();
                ds = d2.select_method_wo_parameter(qry, "text");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    ddlRevalExamMonth.DataSource = ds;
                    ddlRevalExamMonth.DataTextField = "Month_Name";
                    ddlRevalExamMonth.DataValueField = "Exam_Month";
                    ddlRevalExamMonth.DataBind();
                    ddlRevalExamMonth.SelectedIndex = 0;
                }
            }
            ddlRevalExamMonth.Items.Insert(0, new System.Web.UI.WebControls.ListItem("  ", "0"));
            ddlRevalExamMonth.SelectedIndex = 0;
        }
        catch (Exception ex)
        {
        }
    }

    private DataTable GetMonth()
    {
        DataTable dtMon = new DataTable();
        DataRow drMon;
        try
        {

            dtMon.Rows.Clear();
            dtMon.Columns.Clear();
            dtMon.Columns.Add("Month_Name");
            dtMon.Columns.Add("Month_Value");
            var mon = CultureInfo.CurrentCulture.DateTimeFormat.MonthNames;
            for (int m = 0; m < mon.Length; m++)
            {
                if (mon[m] != "")
                {
                    drMon = dtMon.NewRow();
                    drMon["Month_Name"] = mon[m];
                    drMon["Month_Value"] = m + 1;
                    dtMon.Rows.Add(drMon);
                }
            }
        }
        catch
        {

        }
        return dtMon;
    }

    protected void btnRevaluationSubmit_OnClick(object sender, EventArgs e)
    {
        //ddlRevalExamYear,ddlRevalExamMonth,ddlMaxSubjectsXerox,ddlMaxSubjectsReval,txtXeroxAppStartDate,txtXeroxAppEndDate
        //txtRevalAppStartDate,txtRevalAppEndDate
        if (ddlRevalExamYear.SelectedItem.Text.Trim() != "" && ddlRevalExamMonth.SelectedItem.Text.Trim() != "" && txtXeroxAppStartDate.Text != null && txtXeroxAppEndDate.Text != null && txtRevalAppStartDate.Text != null && txtRevalAppEndDate.Text != null)
        {
            string ExamYear = ddlRevalExamYear.SelectedItem.Text.Trim();
            string ExamMonth = ddlRevalExamMonth.SelectedValue.ToString().Trim();
            string XeroxAppStartDate = txtXeroxAppStartDate.Text.Trim();
            string XeroxAppEndDate = txtXeroxAppEndDate.Text.Trim();
            string RevalAppStartDate = txtRevalAppStartDate.Text.Trim();
            string RevalAppEndDate = txtRevalAppEndDate.Text.Trim();

            string XeroxDate = XeroxAppStartDate + "@" + XeroxAppEndDate;
            string RevalDate = RevalAppStartDate + "@" + RevalAppEndDate;
            string ExamYearandMonth = ExamYear + "," + ExamMonth;

            string existqryyrandmnth = "select value from  Master_Settings where settings='Revaluation Exam Year and Month'";
            string insrtqryyrandmnth = "insert into Master_Settings(settings,value) values('Revaluation Exam Year and Month','" + ExamYearandMonth + "')";
            string updateqryyrandmnth = "update Master_Settings set settings='Revaluation Exam Year and Month' , value='" + ExamYearandMonth + "' where settings='Revaluation Exam Year and Month'";
            string sqlqryyrandmnth = "if exists(" + existqryyrandmnth + ")" + updateqryyrandmnth + "else " + insrtqryyrandmnth + "";


            string existqryXeroxDate = "select value from  Master_Settings where settings='Revaluation XeroxDate'";
            string insrtqryXeroxDate = "insert into Master_Settings(settings,value) values('Revaluation XeroxDate','" + XeroxDate + "')";
            string updateqryXeroxDate = "update Master_Settings set settings='Revaluation XeroxDate' , value='" + XeroxDate + "' where settings='Revaluation XeroxDate'";
            string sqlqryXeroxDate = "if exists(" + existqryXeroxDate + ")" + updateqryXeroxDate + "else " + insrtqryXeroxDate + "";

            string existqryRevalDate = "select value from  Master_Settings where  settings='Revaluation Date'";
            string insrtqryRevalDate = "insert into Master_Settings(settings,value) values('Revaluation Date','" + RevalDate + "')";
            string updateqry = "update Master_Settings set settings='Revaluation Date' , value='" + RevalDate + "' where settings='Revaluation Date'";
            string sqlqryRevalDate = "if exists(" + existqryRevalDate + ")" + updateqry + "else " + insrtqryRevalDate + "";

            string MaxSubjectsXerox = ddlMaxSubjectsXerox.SelectedItem.Text.Trim();
            string MaxSubjectsReval = ddlMaxSubjectsReval.SelectedItem.Text.Trim();

            //Commented Part should be included if Charges for Applyin Xerox and Revaluation to be mentioned in secrurity settings

            //string XeroxCharges = txtXeroxCharges.Text.Trim();
            //string RevalCharges = txtRevalCharges.Text.Trim();
            // string qryXeroxCharges = "if exists(select value from Master_Settings where settings='Xerox Charges' ) update Master_Settings set settings='Xerox Charges' , value='" + XeroxCharges + "' where settings='Xerox Charges' else insert into Master_Settings(settings,value) values('Xerox Charges','" + XeroxCharges + "')";

            // string qryRevalCharges = "if exists(select value from Master_Settings where settings='Revaluation Charges' ) update Master_Settings set settings='Revaluation Charges' , value='" + RevalCharges + "' where settings='Revaluation Charges' else insert into Master_Settings(settings,value) values('Revaluation Charges','" + RevalCharges + "')";

            //string RevalFinYear   =   ddl_FinanceYearCOEnew.selectedItem.Text.Trim();
            //string RevalFinHeader =   ddl_FinanceHeaderCOEnew.selectedItem.Text.Trim();
            //string RevalFinLedger =   ddl_FinanceLedgerCOEnew.selectedItem.Text.Trim();

            string qrySubjectXerox = "if exists(select value from Master_Settings where settings='Revaluation Maximum Xerox Subjects') update Master_Settings set settings='Revaluation Maximum Xerox Subjects' , value='" + MaxSubjectsXerox + "' where settings='Revaluation Maximum Xerox Subjects' else insert into Master_Settings(settings,value) values('Revaluation Maximum Xerox Subjects','" + MaxSubjectsXerox + "')";

            string SubjectsqryReval = "if exists(select value from Master_Settings where settings='Revaluation Maximum Reval Subjects' ) update Master_Settings set settings='Revaluation Maximum Reval Subjects' , value='" + MaxSubjectsReval + "' where settings='Revaluation Maximum Reval Subjects' else insert into Master_Settings(settings,value) values('Revaluation Maximum Reval Subjects','" + MaxSubjectsReval + "')";

            //int sqlresult = dir.insertData(sqlqryyrandmnth) + dir.insertData(sqlqryXeroxDate) + dir.insertData(sqlqryRevalDate) + dir.insertData(qrySubjectXerox) + dir.insertData(SubjectsqryReval) + dir.insertData(qryXeroxCharges) + dir.insertData(qryRevalCharges);

            int sqlresult = dir.insertData(sqlqryyrandmnth) + dir.insertData(sqlqryXeroxDate) + dir.insertData(sqlqryRevalDate) + dir.insertData(qrySubjectXerox) + dir.insertData(SubjectsqryReval);

            if (sqlresult == 5)  //if(sqlresult==7)
            {
                txtXeroxAppStartDate.Text = string.Empty;
                txtXeroxAppEndDate.Text = string.Empty;
                txtRevalAppStartDate.Text = string.Empty;
                txtRevalAppEndDate.Text = string.Empty;
                //txtXeroxCharges.text=string.Empty;
                //txtRevalCharges.text=string.Empty;
                BindExamYear1();

                ddlMaxSubjectsXerox.SelectedIndex = 0;
                ddlMaxSubjectsReval.SelectedIndex = 0;
            }
            else
            {
                lblRevalError.Text = "Operation Failed";
                lblRevalError.ForeColor = Color.Red;
                lblRevalError.Visible = true;
            }
        }
        else
        {
            lblRevalError.Text = "Invalid Data";
            lblRevalError.ForeColor = Color.Red;
            lblRevalError.Visible = true;
        }
    }

    /* 
     * These methods should be called on the  Page Load Event
     * 
     * public void loadfinanceyearCOEnew()
      {
          try
          {
              string collegeCode = ddlcollege.Items.Count > 0 ? ddlcollege.SelectedValue : "13";
              string fnalyr = "";
              string getfinanceyear = "select distinct convert(nvarchar(15),FinYearStart,103) sdate,convert(nvarchar(15),FinYearEnd,103) edate,FinYearPK from FM_FinYearMaster where CollegeCode='" + collegeCode + "'  order by FinYearPK desc";
              ds.Dispose();
              ds.Reset();
              ddl_FinanceYearCOEnew.Items.Clear();
              ds = d2.select_method_wo_parameter(getfinanceyear, "text");
              if (ds.Tables[0].Rows.Count > 0)
              {
                  for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                  {
                      string fdatye = ds.Tables[0].Rows[i]["sdate"].ToString() + '-' + ds.Tables[0].Rows[i]["edate"].ToString();
                      string actid = ds.Tables[0].Rows[i]["FinYearPK"].ToString();
                      ddl_FinanceYearCOEnew.Items.Insert(0, new System.Web.UI.WebControls.ListItem(fdatye, actid));
                  }
              }
          }
          catch (Exception ex)
          {

          }
      }

      private void loadOnlineHeadersCOEnew()
      {
          try
          {
              string collegeCode = ddlcollege.Items.Count > 0 ? ddlcollege.SelectedValue : "13";
              DataSet dsHdrs = d2.select_method_wo_parameter("select HeaderPK,HeaderName from FM_HeaderMaster where CollegeCode ='" + collegeCode + "'", "TEXT");
              if (dsHdrs.Tables.Count > 0 && dsHdrs.Tables[0].Rows.Count > 0)
              {
                  ddl_FinanceHeaderCOEnew.DataSource = dsHdrs.Tables[0];
                  ddl_FinanceHeaderCOEnew.DataTextField = "HeaderName";
                  ddl_FinanceHeaderCOEnew.DataValueField = "HeaderPK";
                  ddl_FinanceHeaderCOEnew.DataBind();
                  loadOnlineLedgersCOE();
              }
          }
          catch { }
      }

      private void loadOnlineLedgersCOEnew()
      {
          try
          {
              ddl_FinanceLedgerCOEnew.Items.Clear();
              string collegeCode = ddlcollege.Items.Count > 0 ? ddlcollege.SelectedValue : "13";
              StringBuilder headerCodes = new StringBuilder();
              for (int hdrI = 0; hdrI < ddl_FinanceHeaderCOEnew.Items.Count; hdrI++)
              {
                  headerCodes.Append(ddl_FinanceHeaderCOEnew.Items[hdrI].Value + ",");
              }
              if (headerCodes.Length > 1)
              {
                  headerCodes.Remove(headerCodes.Length - 1, 1);

                  DataSet dsLgrs = d2.select_method_wo_parameter("select LedgerPK,LedgerName from FM_LedgerMaster where CollegeCode ='" + collegeCode + "' and HeaderFk in (" + headerCodes.ToString() + ")", "TEXT");
                  if (dsLgrs.Tables.Count > 0 && dsLgrs.Tables[0].Rows.Count > 0)
                  {
                      ddl_FinanceLedgerCOEnew.DataSource = dsLgrs.Tables[0];
                      ddl_FinanceLedgerCOEnew.DataTextField = "LedgerName";
                      ddl_FinanceLedgerCOEnew.DataValueField = "LedgerPK";
                      ddl_FinanceLedgerCOEnew.DataBind();
                  }
              }
          }
          catch { }
      }*/

    #endregion

    public void cb_attn_hour_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            txt_attn_hour.Text = string.Empty;
            string value = string.Empty;
            if (cb_attn_hour.Checked == true)
            {
                for (int i = 0; i < cbl_attn_hour.Items.Count; i++)
                {
                    cbl_attn_hour.Items[i].Selected = true;
                    value = cbl_attn_hour.Items[i].Text;
                    if (txt_attn_hour.Text == "")
                    {
                        txt_attn_hour.Text = value;
                    }
                    else
                    {
                        txt_attn_hour.Text = txt_attn_hour.Text + "," + value;
                    }
                }
                txt_attn_hour.Text = txt_attn_hour.Text;
            }
            else
            {
                for (int i = 0; i < cbl_attn_hour.Items.Count; i++)
                {
                    cbl_attn_hour.Items[i].Selected = false;
                    txt_attn_hour.Text = string.Empty;
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void cbl_attn_hour_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            txt_attn_hour.Text = string.Empty;
            string value = string.Empty;
            for (int i = 0; i < cbl_attn_hour.Items.Count; i++)
            {
                if (cbl_attn_hour.Items[i].Selected == true)
                {
                    value = cbl_attn_hour.Items[i].Text;
                    if (txt_attn_hour.Text == "")
                    {
                        txt_attn_hour.Text = value;
                    }
                    else
                    {
                        txt_attn_hour.Text = txt_attn_hour.Text + "," + value;
                    }
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    public void bindAttendanceHourSetting()
    {
        try
        {
            txt_attn_hour.Text = string.Empty;
            string attnHourCount = string.Empty;
            attnHourCount = dasri.GetFunctionv("select distinct max(No_of_hrs_per_day) from PeriodAttndSchedule");
            if (attnHourCount.Trim() != "")
            {
                cbl_attn_hour.Items.Clear();
                ArrayList ar = new ArrayList();
                for (int i = 1; i <= Convert.ToInt32(attnHourCount); i++)
                {
                    int val = i;
                    ar.Add(i);
                }
                for (int j = 0; j < ar.Count; j++)
                {
                    cbl_attn_hour.Items.Add(ar[j].ToString());
                }
            }
        }
        catch (Exception ex)
        {
        }
    }

    #region //added by saranya 11-11-2017

    protected void smslist1load()
    {
        list1.Items.Clear();
        if (purposeddl.SelectedItem.Text == "University Result")
        {
            list1.Items.Add(new ListItem("Your Text", "0"));
            list1.Items.Add(new ListItem("College Name", "1"));
            list1.Items.Add(new ListItem("Student Name", "2"));
            list1.Items.Add(new ListItem("Roll No", "3"));
            list1.Items.Add(new ListItem("Application No", "4"));
            list1.Items.Add(new ListItem("Admission No", "5"));
            list1.Items.Add(new ListItem("Degree", "6"));
            list1.Items.Add(new ListItem("Register No", "7"));
            list1.Items.Add(new ListItem("University Result", "8"));
            list1.Items.Add(new ListItem("Thank You", "9"));
        }
        else if (purposeddl.SelectedItem.Text == "Finance")
        {
            list1.Items.Add(new ListItem("Your Text", "0"));
            list1.Items.Add(new ListItem("College Name", "1"));
            list1.Items.Add(new ListItem("Student Name", "2"));
            list1.Items.Add(new ListItem("Roll No", "3"));
            list1.Items.Add(new ListItem("Application No", "4"));
            list1.Items.Add(new ListItem("Admission No", "5"));
            list1.Items.Add(new ListItem("Degree", "6"));
            list1.Items.Add(new ListItem("Due Date", "7"));
            list1.Items.Add(new ListItem("Balance Due", "8"));
            list1.Items.Add(new ListItem("Thank You", "9"));
        }
        else
        {
            list1.Items.Add(new ListItem("Your Text", "0"));
            list1.Items.Add(new ListItem("Student Name", "2")); //added by prabha jan 24 2018
            list1.Items.Add(new ListItem("Register No", "9"));
            list1.Items.Add(new ListItem("Section", "10"));
            list1.Items.Add(new ListItem("CAM Mark", "24"));
            list1.Items.Add(new ListItem("College Name", "25"));
            list1.Items.Add(new ListItem("Date", "11"));
            list1.Items.Add(new ListItem("Absent", "12"));
            list1.Items.Add(new ListItem("Conducted Hours", "13"));
            list1.Items.Add(new ListItem("Absent hours", "14"));
            list1.Items.Add(new ListItem("Conducted Days", "15"));
            list1.Items.Add(new ListItem("Absent Days", "16"));
            list1.Items.Add(new ListItem("HOD", "17"));
            list1.Items.Add(new ListItem("From And To Date", "18"));
            list1.Items.Add(new ListItem("Present Hours", "19"));
            list1.Items.Add(new ListItem("Day Wise Percentage", "20"));
            list1.Items.Add(new ListItem("Present Days", "21"));
            list1.Items.Add(new ListItem("Hour Wise Percentage", "22"));
            list1.Items.Add(new ListItem("Thank You", "23"));
            list1.Items[10].Enabled = false;
        }
    }
    protected void purpose_IndexChanged(object sender, EventArgs e)//added by saranya 11-11-2017
    {
        smslist1load();
    }

    #endregion


    #region invigilation //added by kowshika 12-12-2017
    public void CycleTest()
    {
        try
        {

            cbl_cycletest.Items.Clear();
            cb_cycletest.Checked = false;
            txt_cycletest.Text = "---Select---";
            ds.Clear();
            ds = d2.BindBatch();
            string Query = "select distinct ci.criteria,ci.Criteria_no from CriteriaForInternal ci,Registration r,syllabus_master sm,Exam_type e where ci.syll_code=sm.syll_code and ci.Criteria_no=e.criteria_no  and sm.semester=r.Current_Semester and sm.Batch_Year=r.Batch_Year and r.degree_code=sm.degree_code and r.CC='0' and r.DelFlag='0' and r.Exam_Flag<>'debar'";
            ds = d2.select_method_wo_parameter(Query, "Text");
            if (ds.Tables[0].Rows.Count > 0)
            {
                cbl_cycletest.DataSource = ds;
                cbl_cycletest.DataTextField = "criteria";
                cbl_cycletest.DataValueField = "Criteria_no";
                cbl_cycletest.DataBind();
                if (cbl_cycletest.Items.Count > 0)
                {
                    for (int i = 0; i < cbl_cycletest.Items.Count; i++)
                    {
                        cbl_cycletest.Items[i].Selected = true;
                    }
                    txt_cycletest.Text = "cycletest(" + cbl_cycletest.Items.Count + ")";
                    cb_cycletest.Checked = true;
                }
            }
        }
        catch { }
    }
    protected void cb_cycletest_OnCheckedChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxChange(cb_cycletest, cbl_cycletest, txt_cycletest, "cycletest", "--Select--");
        }
        catch { }
    }
    protected void cbl_cycletest_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            CallCheckboxListChange(cb_cycletest, cbl_cycletest, txt_cycletest, "cycletest", "--Select--");
        }
        catch { }
    }
    #endregion invigilation
    public string getCblSelectedValueNew(CheckBoxList cblSelected)
    {
        System.Text.StringBuilder selectedvalue = new System.Text.StringBuilder();
        try
        {
            for (int sel = 0; sel < cblSelected.Items.Count; sel++)
            {
                if (cblSelected.Items[sel].Selected == true)
                {
                    if (selectedvalue.Length == 0)
                    {
                        selectedvalue.Append(Convert.ToString(cblSelected.Items[sel].Value));
                    }
                    else
                    {
                        selectedvalue.Append("," + Convert.ToString(cblSelected.Items[sel].Value));
                    }
                }
            }
        }
        catch { cblSelected.Items.Clear(); }
        return selectedvalue.ToString();
    }

    //#region Common Checkbox and Checkboxlist Event

    //private string getCblSelectedValue(CheckBoxList cblSelected)
    //{
    //    StringBuilder selectedvalue = new StringBuilder();
    //    try
    //    {
    //        for (int sel = 0; sel < cblSelected.Items.Count; sel++)
    //        {
    //            if (cblSelected.Items[sel].Selected == true)
    //            {
    //                if (selectedvalue.Length == 0)
    //                {
    //                    selectedvalue.Append("'" + Convert.ToString(cblSelected.Items[sel].Value) + "'");
    //                }
    //                else
    //                {
    //                    selectedvalue.Append(",'" + Convert.ToString(cblSelected.Items[sel].Value) + "'");
    //                }
    //            }
    //        }
    //    }
    //    catch { }
    //    return selectedvalue.ToString();
    //}

    //private string getCblSelectedText(CheckBoxList cblSelected)
    //{
    //    StringBuilder selectedText = new StringBuilder();
    //    try
    //    {
    //        for (int sel = 0; sel < cblSelected.Items.Count; sel++)
    //        {
    //            if (cblSelected.Items[sel].Selected == true)
    //            {
    //                if (selectedText.Length == 0)
    //                {
    //                    selectedText.Append("'" + Convert.ToString(cblSelected.Items[sel].Text) + "'");
    //                }
    //                else
    //                {
    //                    selectedText.Append(",'" + Convert.ToString(cblSelected.Items[sel].Text) + "'");
    //                }
    //            }
    //        }
    //    }
    //    catch { }
    //    return selectedText.ToString();
    //}

    private void CallCheckboxChange1(CheckBox cb, CheckBoxList cbl, TextBox txt, string dispst, string deft)
    {
        try
        {
            int sel = 0;
            string name = string.Empty;
            txt.Text = deft;
            if (cb.Checked == true)
            {
                for (sel = 0; sel < cbl.Items.Count; sel++)
                {
                    cbl.Items[sel].Selected = true;
                    name = Convert.ToString(cbl.Items[sel].Text);
                }
                if (cbl.Items.Count == 1)
                {
                    txt.Text = "" + name + "";
                }
                else
                {
                    txt.Text = dispst + "(" + cbl.Items.Count + ")";
                }
            }
            else
            {
                for (sel = 0; sel < cbl.Items.Count; sel++)
                {
                    cbl.Items[sel].Selected = false;
                }
                txt.Text = deft;
            }
        }
        catch { }
    }

    //private void CallCheckboxListChange(CheckBox cb, CheckBoxList cbl, TextBox txt, string dipst, string deft)
    //{
    //    try
    //    {
    //        int sel = 0;
    //        int count = 0;
    //        string name = string.Empty;
    //        cb.Checked = false;
    //        txt.Text = deft;
    //        for (sel = 0; sel < cbl.Items.Count; sel++)
    //        {
    //            if (cbl.Items[sel].Selected == true)
    //            {
    //                count++;
    //                name = Convert.ToString(cbl.Items[sel].Text);
    //            }
    //        }
    //        if (count > 0)
    //        {
    //            if (count == 1)
    //            {
    //                txt.Text = "" + name + "";
    //            }
    //            else
    //            {
    //                txt.Text = dipst + "(" + count + ")";
    //            }
    //            if (cbl.Items.Count == count)
    //            {
    //                cb.Checked = true;
    //            }
    //        }
    //    }
    //    catch { }
    //}

    private void checkBoxListselectOrDeselect(CheckBoxList cbl, bool selected = true)
    {
        try
        {
            foreach (wc.ListItem li in cbl.Items)
            {
                li.Selected = selected;
            }
        }
        catch
        {
        }
    }


    public void loadcoll()
    {
        try
        {
            Cblcollege.Items.Clear();
            string selqry = "select distinct coll_acronymn,college_code from collinfo order by college_code ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                Cblcollege.DataSource = ds;
                Cblcollege.DataTextField = "coll_acronymn";
                Cblcollege.DataValueField = "college_code";
                Cblcollege.DataBind();
            }
            loadhrdept();
        }
        catch (Exception ex)
        {
        }
    }


    protected void cbcollege_OnCheckedChanged(object sender, EventArgs e)//delsi0706
    {
        try
        {
            int cout = 0;
            txt_college.Text = "--Select--";
            if (Cbcollege.Checked == true)
            {
                cout++;
                for (int i = 0; i < Cblcollege.Items.Count; i++)
                {
                    Cblcollege.Items[i].Selected = true;
                }
                txt_college.Text = "College(" + (Cblcollege.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < Cblcollege.Items.Count; i++)
                {
                    Cblcollege.Items[i].Selected = false;
                }
                txt_college.Text = "--Select--";
                txthrdept.Text = "--Select--";
            }
            loadhrdept();
        }
        catch (Exception ex)
        {
        }
    }

    protected void cblcollege_OnSelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            int commcount = 0;
            txt_college.Text = "--Select--";
            Cbcollege.Checked = false;
            for (int i = 0; i < Cblcollege.Items.Count; i++)
            {
                if (Cblcollege.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                    Cbcollege.Checked = false;
                }
            }
            if (commcount > 0)
            {
                if (commcount == Cblcollege.Items.Count)
                {
                    Cbcollege.Checked = true;
                }
                txt_college.Text = "College(" + commcount.ToString() + ")";
            }
            loadhrdept();
        }
        catch (Exception ex)
        {
        }
    }


    public void loadclgbank()//delsi1106
    {
        try
        {
            cblclgbank.Items.Clear();


            string selqry = "select distinct BankPK,BankName from FM_FinBankMaster where CollegeCode='" + ddlcollege.SelectedItem.Value + "'";


            ds.Clear();
            ds = d2.select_method_wo_parameter(selqry, "Text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                cblclgbank.DataSource = ds;
                cblclgbank.DataTextField = "BankName";
                cblclgbank.DataValueField = "BankPK";
                cblclgbank.DataBind();
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void cbclgbank_CheckedChange(object sender, EventArgs e)//delsi1106
    {
        try
        {
            int cout = 0;
            txtclgbank.Text = "--Select--";
            if (cbclgbank.Checked == true)
            {
                cout++;
                for (int i = 0; i < cblclgbank.Items.Count; i++)
                {
                    cblclgbank.Items[i].Selected = true;
                }
                txtclgbank.Text = "Bank Name(" + (cblclgbank.Items.Count) + ")";
            }
            else
            {
                for (int i = 0; i < cblclgbank.Items.Count; i++)
                {
                    cblclgbank.Items[i].Selected = false;
                }
                txtclgbank.Text = "--Select--";
            }
        }
        catch (Exception ex)
        {
        }
    }

    protected void cblclgbank_SelectedIndexChange(object sender, EventArgs e)//delsi1106
    {
        try
        {
            int commcount = 0;
            txtclgbank.Text = "--Select--";
            cbclgbank.Checked = false;
            for (int i = 0; i < cblclgbank.Items.Count; i++)
            {
                if (cblclgbank.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                    cbclgbank.Checked = false;
                }
            }
            if (commcount > 0)
            {
                if (commcount == cblclgbank.Items.Count)
                {
                    cbclgbank.Checked = true;
                }
                txtclgbank.Text = "Bank Name(" + commcount.ToString() + ")";
            }
        }
        catch (Exception ex)
        {
        }
    }
    //private bool getSelectedCheckBoxListCount(CheckBoxList cbl, out int selectedCount)
    //{
    //    selectedCount = 0;
    //    try
    //    {
    //        foreach (wc.ListItem li in cbl.Items)
    //        {
    //            if (li.Selected)
    //            {
    //                selectedCount++;
    //            }
    //        }
    //        return true;
    //    }
    //    catch
    //    {
    //        return false;
    //    }
    //}

    ///// <summary>
    ///// Developed By Malang Raja T
    ///// </summary>
    ///// <param name="c">Only Data Bound Controls eg.DropDownList,RadioButtonList,CheckBoxList </param>
    ///// <param name="selectedValue"></param>
    ///// <param name="selectedText"></param>
    ///// <param name="type">0 - Index; 1 - Text; 2 - Value;</param>
    //private void SelectDataBound(Control c, string selectedValue, string selectedText)
    //{
    //    try
    //    {
    //        bool isDataBoundControl = false;
    //        if (c is DataBoundControl)
    //        {
    //            if (c is CheckBoxList || c is DropDownList || c is RadioButtonList)
    //            {
    //                isDataBoundControl = true;
    //            }
    //            if (isDataBoundControl)
    //            {
    //                ListControl lstControls = (ListControl)c;
    //                if (lstControls.Items.Count > 0)
    //                {
    //                    ListItem[] listItem = new ListItem[lstControls.Items.Count];
    //                    lstControls.Items.CopyTo(listItem, 0);
    //                    if (listItem.Contains(new ListItem(selectedText, selectedValue)))
    //                    {
    //                        lstControls.SelectedValue = selectedValue;
    //                    }
    //                }
    //            }
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //    }
    //}

    //#endregion
    //private void CallCheckboxChange(CheckBox cb, CheckBoxList cbl, TextBox txt, string dispst, string deft)
    //{
    //    try
    //    {
    //        int sel = 0;
    //        string name = "";
    //        txt.Text = deft;
    //        if (cb.Checked == true)
    //        {
    //            for (sel = 0; sel < cbl.Items.Count; sel++)
    //            {
    //                cbl.Items[sel].Selected = true;
    //                name = Convert.ToString(cbl.Items[sel].Text);
    //            }
    //            if (cbl.Items.Count == 1)
    //            {
    //                txt.Text = "" + name + "";
    //            }
    //            else
    //            {
    //                txt.Text = dispst + "(" + cbl.Items.Count + ")";
    //            }
    //        }
    //        else
    //        {
    //            for (sel = 0; sel < cbl.Items.Count; sel++)
    //            {
    //                cbl.Items[sel].Selected = false;
    //            }
    //            txt.Text = deft;
    //        }
    //    }
    //    catch { }
    //}
    //private void CallCheckboxListChange(CheckBox cb, CheckBoxList cbl, TextBox txt, string dipst, string deft)
    //{
    //    try
    //    {
    //        int sel = 0;
    //        int count = 0;
    //        string name = "";
    //        cb.Checked = false;
    //        for (sel = 0; sel < cbl.Items.Count; sel++)
    //        {
    //            if (cbl.Items[sel].Selected == true)
    //            {
    //                count++;
    //                name = Convert.ToString(cbl.Items[sel].Text);
    //            }
    //        }
    //        if (count > 0)
    //        {
    //            if (count == 1)
    //            {
    //                txt.Text = "" + name + "";
    //            }
    //            else
    //            {
    //                txt.Text = dipst + "(" + count + ")";
    //            }
    //            if (cbl.Items.Count == count)
    //            {
    //                cb.Checked = true;
    //            }
    //        }
    //    }
    //    catch { }
    //}
    //protected void cbclg_OnCheckedChanged(object sender, EventArgs e)
    //{
    //    CallCheckboxChange(cbclg, cblclg, txtclg, lblclg.Text, "--Select--");

    //}
    //protected void cblclg_OnSelectedIndexChanged(object sender, EventArgs e)
    //{
    //    CallCheckboxListChange(cbclg, cblclg, txtclg, lblclg.Text, "--Select--");

    //}

    protected void btncriteraiexit_Click(object sender, EventArgs e)
    {
        try
        {
            PCriteria.Visible = false;
        }
        catch (Exception ex)
        {
        }
    }
    protected void btncriteraiadd_Click(object sender, EventArgs e)
    {
        try
        {
            lblerrcritiria.Text = "";
            //PCriteria.Visible = false;
            if (!string.IsNullOrEmpty(txtcriteria.Text))
            {
                DataTable isExist = dir.selectDataTable("select * from Master_Settings where settings='COSettings' and template='" + txtcriteria.Text + "'");
                if (isExist.Rows.Count > 0)
                {
                    lblerrcritiria.Text = "Already Exists!";
                }
                else
                {
                    string Qry = "insert into Master_Settings (usercode,settings,value,template) values(30,'COSettings',1,'" + txtcriteria.Text + "')";
                    int isSave = d2.update_method_wo_parameter(Qry, "text");
                    if (isSave != 0)
                        lblerrcritiria.Text = "Saved!";
                    else
                        lblerrcritiria.Text = "Not Saved!";
                }
                loadcriteria();
            }
            else
            {
                lblerrcritiria.Text = "Enter valid Text";
            }
        }
        catch
        {
        }
    }
    protected void btnnewcriteria_Click(object sender, EventArgs e)
    {
        try
        {
            lblerrcritiria.Text = "";
            txtcriteria.Text = string.Empty;
            PCriteria.Visible = true;
        }
        catch (Exception ex)
        {
        }
    }
    protected void ddlcriteria_SelectedIndexChanged(object sender, EventArgs e)
    {

    }

    protected void btnreovecritreia_Click(object sender, EventArgs e)
    {
        string Crit = Convert.ToString(ddlcriteria.SelectedItem.Text);
        if (!string.IsNullOrEmpty(Crit))
        {
            int del = d2.update_method_wo_parameter("delete Master_Settings where settings='COSettings' and template='" + Crit + "'", "text");
            if (del != 0)
                lblerrcritiria.Text = "Deleted!";
            else
                lblerrcritiria.Text = "Not Deleted!";
            loadcriteria();
        }
        else
            lblerrcritiria.Text = "Not Deleted!";
    }

    protected void btnSaveCoFormate_Click(object sender, EventArgs e)
    {
        try
        {
            bool boolFalse = false;
            int val = 0;
            if (EntryFormate1.Checked)
                val = 1;
            else if (EntryFormate2.Checked)
                val = 2;

            int InsertQ = d2.update_method_wo_parameter("if exists(select * from Master_Settings where settings='SaveCoFormate') update Master_Settings  SET value='" + val + "' where settings='SaveCoFormate' else insert into Master_Settings(usercode,settings,value) values('30','SaveCoFormate','" + val + "')", "text");

            ScriptManager.RegisterClientScriptBlock(this, typeof(Page), UniqueID, "alert('Saved Successfully')", true);

        }
        catch
        {
        }
    }


    public void loadcriteria()
    {
        try
        {
            DataTable dtCO = dir.selectDataTable("select * from Master_Settings where settings='COSettings'");
            if (dtCO.Rows.Count > 0)
            {
                ddlcriteria.DataSource = dtCO;
                ddlcriteria.DataTextField = "template";
                ddlcriteria.DataValueField = "masterno";
                ddlcriteria.DataBind();
            }
        }
        catch
        {
        }

    }
    //added by Mullai
    protected void cbbatlock_OnCheckedIndexChange(object sender, EventArgs e)
    {
        try
        {
            if (cbbatlock.Checked == true)
            {
                txtattlock.Enabled = false;
                if (rdb_ind.Checked == true)
                {

                    usergroup = "  usercode=" + selected_usercode.ToString() + "";

                }
                else if (rdb_grp.Checked == true)
                {

                    usergroup = "  group_code=" + selected_usercode.ToString() + "";

                }
                ds.Clear();
                ds = d2.select_method_wo_parameter("bind_batch", "sp");
                DataTable dtlock = new DataTable();
                DataRow drlock;
                dtlock.Columns.Add("batch");
                dtlock.Columns.Add("lockdays");
                if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
                {
                    for (int j = 0; j < ds.Tables[0].Rows.Count; j++)
                    {
                        drlock = dtlock.NewRow();
                        string batyr = Convert.ToString(ds.Tables[0].Rows[j]["batch_year"]);
                        drlock["batch"] = batyr;
                        string getshedulockva = dasri.GetFunctionv("select template from Master_Settings where settings='Attendance Lock Days' and " + usergroup + "");
                        string[] spltlokval = getshedulockva.Split(',');
                        if (spltlokval.Length > 0)
                        {
                            for (int i = 0; i < spltlokval.Length; i++)
                            {
                                string spt = spltlokval[i].ToString();
                                string[] batspl = spt.Split('-');
                                if (batspl[0].ToString() == batyr)
                                {
                                    drlock["lockdays"] = batspl[1].ToString();
                                }
                            }
                        }
                        dtlock.Rows.Add(drlock);
                    }
                    gridviewbatch.DataSource = dtlock;
                    gridviewbatch.DataBind();
                    gridviewbatch.Visible = true;
                }
            }
            else
            {
                txtattlock.Enabled = true;
                gridviewbatch.Visible = false;
            }
        }
        catch
        {
        }

    }
}