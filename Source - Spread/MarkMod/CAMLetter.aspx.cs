using System;//mythili  //modified in 12.04.12 and 26.04.12, 27.04.12 attendance,modified by mythili on 06/06/12 (tmail report)
using System.Collections; // modified on 08.06.12 (wn click printmaster error shown) ,modified on 22.06.12(tamil report for kongu)
//=======tamil report changes for kongu on 28.06.12
//=======modified letter format3 on 26.07.12 by mythili,
//====added failsubjcount,absentsubjcount in tamil report n popupfunc5 and changed popupfunc 5 on 30.07.12
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using BalAccess;
using System.Text;
using System.Data.SqlClient;
using System.Drawing;
using FarPoint.Web.Spread;
using Gios.Pdf;
using System.IO;


public partial class CAMLetter : System.Web.UI.Page
{
    #region variable

    [Serializable()]

    public class MyImg : ImageCellType
    {
        public override Control PaintCell(String id, TableCell parent, FarPoint.Web.Spread.Appearance style, FarPoint.Web.Spread.Inset margin, object val, bool ul)
        {
            //'-------------coe sign
            System.Web.UI.WebControls.Image img2 = new System.Web.UI.WebControls.Image();
            img2.ImageUrl = this.ImageUrl; //base.ImageUrl;  
            img2.Width = Unit.Percentage(90);
            img2.Height = Unit.Percentage(70);
            return img2;

            //'-------------Class Advisor
            System.Web.UI.WebControls.Image img3 = new System.Web.UI.WebControls.Image();
            img3.ImageUrl = this.ImageUrl; //base.ImageUrl;  
            img3.Width = Unit.Percentage(70);
            img3.Height = Unit.Percentage(50);
            return img3;

            //'-------------HOD
            System.Web.UI.WebControls.Image img4 = new System.Web.UI.WebControls.Image();
            img4.ImageUrl = this.ImageUrl; //base.ImageUrl;  
            img4.Width = Unit.Percentage(70);
            img4.Height = Unit.Percentage(50);
            return img4;

            System.Web.UI.WebControls.Image img = new System.Web.UI.WebControls.Image();
            img.ImageUrl = this.ImageUrl; //base.ImageUrl;  
            img.Width = Unit.Percentage(75);
            img.Height = Unit.Percentage(70);
            return img;


        }
    }
    //-----------------start------------------------add by thirumalai 20-09-2014
    public class MyImg10 : ImageCellType
    {
        public override Control PaintCell(String id, TableCell parent, FarPoint.Web.Spread.Appearance style, FarPoint.Web.Spread.Inset margin, object val, bool ul)
        {
            System.Web.UI.WebControls.Image img5 = new System.Web.UI.WebControls.Image();
            img5.ImageUrl = this.ImageUrl;
            img5.Width = Unit.Percentage(50);
            img5.Height = Unit.Percentage(50);
            return img5;

        }
    }
    public class MyImg12 : ImageCellType
    {
        public override Control PaintCell(String id, TableCell parent, FarPoint.Web.Spread.Appearance style, FarPoint.Web.Spread.Inset margin, object val, bool ul)
        {
            System.Web.UI.WebControls.Image img5 = new System.Web.UI.WebControls.Image();
            img5.ImageUrl = this.ImageUrl;
            img5.Width = Unit.Percentage(60);
            img5.Height = Unit.Percentage(50);
            return img5;

        }
    }
    //-----------------end------------------------add by thirumalai 20-09-2014
    SqlConnection con = new SqlConnection(ConfigurationManager.AppSettings["DSN"]);
    SqlConnection getcon = new SqlConnection(ConfigurationManager.AppSettings["DSN"]);
    SqlConnection mycon = new SqlConnection(ConfigurationManager.AppSettings["DSN"]);
    SqlConnection mycon1 = new SqlConnection(ConfigurationManager.AppSettings["DSN"]);
    SqlConnection condegree = new SqlConnection(ConfigurationManager.AppSettings["DSN"]);
    SqlConnection setcon = new SqlConnection(ConfigurationManager.AppSettings["DSN"]);
    SqlConnection rankcon = new SqlConnection(ConfigurationManager.AppSettings["DSN"]);
    SqlConnection getdaycon = new SqlConnection(ConfigurationManager.AppSettings["DSN"]);
    SqlConnection getdaycon1 = new SqlConnection(ConfigurationManager.AppSettings["DSN"]);
    SqlConnection getdaycon2 = new SqlConnection(ConfigurationManager.AppSettings["DSN"]);
    SqlConnection getdaycon3 = new SqlConnection(ConfigurationManager.AppSettings["DSN"]);
    SqlConnection holidaycon = new SqlConnection(ConfigurationManager.AppSettings["DSN"]);
    SqlConnection con_splhr_query_master = new SqlConnection(ConfigurationManager.AppSettings["DSN"]);
    SqlCommand cmd;

    Hashtable hat = new Hashtable();
    DataSet ds1 = new DataSet();
    DataSet ds2 = new DataSet();
    DataSet ds3 = new DataSet();
    DataSet ds4 = new DataSet();
    DAccess2 dacces = new DAccess2();
    DataSet ds_load = new DataSet();
    DataTable letterfrm4data = new DataTable();

    DataSet ds11 = new DataSet();
    DataSet ds22 = new DataSet();
    DAccess2 d22 = new DAccess2();
    DAccess2 da22 = new DAccess2();
    StringBuilder html = new StringBuilder();
    int per_abshrs_spl_fals = 0, tot_per_hrs_spl_fals = 0, tot_conduct_hr_spl_fals = 0, tot_ml_spl = 0, tot_ondu_spl_fals = 0;
    int per_hhday_spl = 0, unmark_spl = 0, tot_conduct_hr_spl = 0;
    int per_abshrs_spl = 0, tot_per_hrs_spl = 0, tot_ondu_spl = 0;
    double per_leave_fals = 0;
    double per_leave_true = 0;
    double per_tage_date, cum_tage_date, per_tage_hrs, cum_tage_hrs;
    double per_con_hrs, cum_con_hrs;
    string stud_roll = "";
    int gdate_yr = 0;
    DataSet ds_stud = new DataSet();
    DataSet ds_holi = new DataSet();
    DataSet ds_attndmaster = new DataSet();
    TimeSpan ts = new TimeSpan();
    DataSet ds_selectdate = new DataSet();
    string gtoaddress;
    int demfcal, demtcal;

    string rol_no = "";
    string monthcal;
    string frdate = "", todate = "";
    int gfail_subj_count = 0;
    string gget_dept_acronym = "";
    string gsem3 = "";
    DateTime per_from_date = new DateTime();
    DateTime per_to_date = new DateTime();
    DateTime dumm_from_date = new DateTime();
    string yr_val = "";
    string yr_string = "";
    string month1 = "";
    string markglag = "";
    string univpercentage = "";
    string courseid = "";
    string atten = "";
    string Master1 = "";
    string regularflag = "";
    string genderflag = "";
    string strdayflag = "";
    string staff = "";
    double perofpass = 0;
    double avg = 0;
    int attcount = 0;
    int spancount = 0;

    string attendanceper = "";

    string gtoaddname = "";
    string gtoadd1 = "";
    string gtoadd2 = "";
    string gtoadd3 = "";
    string gtopin = "";
    string gtodistrict = "";
    string strorder = "";
    string strregorder = "";

    string adresstud = "";// added by sridhar 06 sep 2014
    string adreesdis = "";// added by sridhar 06 sep 2014
    string fromcity = "";

    //added by annyutha//
    string toaddname = "";
    string toadd1 = "";
    string toadd2 = "";
    string topin = "";
    string tocity = "";
    string todistrict = "";
    //end//
    string name = "";
    string rollno = "";
    string srno = "";
    string branch = "";
    string degree = "";
    string sem = "";
    string sec = "";
    string test = "";
    int semester = 0;
    string colege_code = "";
    string degree1 = "";
    int res = 0;
    int isval = 0;
    string s = "";
    Boolean IsFirstcol = false;
    Boolean Isfirst = false;
    string collegecode = "";
    string usercode = "";
    string singleuser = "";
    string group_user = "";
    Boolean flag_true = false;

    //'-----------new start for print master on 10.04.12
    DataSet dsprint = new DataSet();

    int final_print_col_cnt = 0;
    string footer_text = "";
    int temp_count = 0;
    int split_col_for_footer = 0;
    int footer_balanc_col = 0;
    int footer_count = 0;

    string collnamenew1 = "";
    string address1 = "";
    string address2 = "";
    string address = "";
    string address3 = "";
    string pincode = "";
    string Phoneno = "";
    string Faxno = "";
    string phnfax = "";
    int subjectcount = 0;
    string district = "";
    string email = "";
    string website = "";
    string form_heading_name = "";
    string batch_degree_branch = "";
    int chk_secnd_clmn = 0;
    int right_logo_clmn = 0;
    string gmon_yr = "";
    //-------------------------new for attendance 27.04.12
    Hashtable holiday_table11 = new Hashtable();
    Hashtable holiday_table21 = new Hashtable();
    Hashtable holiday_table31 = new Hashtable();
    string diff_date;
    int NoHrs = 0;
    int fnhrs = 0;
    int anhrs = 0;
    int minpresI = 0;
    int col_count = 0;
    int count;
    int next = 0;
    int minpresII = 0;
    string value, date;
    int i, rows_count;
    string tempvalue = "-1";
    int ObtValue = -1;
    int cal_from_date;
    int cal_to_date, start_column = 0;
    int mng_conducted_half_days = 0, evng_conducted_half_days = 0, per_workingdays1 = 0, cum_per_workingdays1 = 0;
    int notconsider_value = 0;
    double conduct_hour_new = 0;
    static string view_footer = "", view_header = "", view_footer_text = "";
    int moncount;
    double dif_date = 0;
    double dif_date1 = 0;
    int abs = 0, att = 0;
    int dum_diff_date, unmark;
    string roll_no, reg_no, roll_ad, studname;
    int check;

    string halforfull = "", mng = "", evng = "", holiday_sched_details = "";
    int per_dum_unmark, dum_unmark;
    int tot_per_hrs;
    //double per_con_hrs, cum_con_hrs;
    double njhr, njdate, per_njdate;
    double per_per_hrs;
    double tot_ondu, per_tot_ondu;
    //string usercode = "", collegecode = "", singleuser = "", group_user = "";
    //string[] string_session_values;
    DataSet ds_attnd_pts = new DataSet();
    int holi_leav = 0, holi_absent = 0, leav_pt = 0, absent_pt = 0;
    string value_holi_status = "";
    string[] split_holiday_status = new string[1000];
    string split_holiday_status_1 = "", split_holiday_status_2 = "";

    double per_perhrs, per_abshrs;
    double per_ondu, per_leave, per_hhday;
    double Present = 0;
    double Absent = 0;
    double Onduty = 0;
    double Leave = 0;
    string gdum_tage_date = "";
    double per_tage_day = 0;
    string dum_tage_date = "";
    //double halfday = 0;

    double pre_present_date, pre_ondu_date, pre_leave_date, per_absent_date;
    //double cum_present_date, cum_ondu_date, cum_leave_date, cum_absent_date;
    double workingdays = 0;
    double per_workingdays = 0;
    //double cum_workingdays = 0;
    double leave_pointer, absent_pointer;
    double leave_point, absent_point;

    //double per_tot_ondu, per_njdate, pre_present_date, per_per_hrs, per_absent_date, pre_ondu_date;
    int sno = 0;
    string stdroll = "";
    string affliatedby = "";
    string catgory = "";
    int mmyycount = 0;
    string affiliated = "";
    string gsubjname = "";
    string gresult = "";
    string gminmark = "";
    string gmaxmark = "";
    string ggetmark = "";
    double per_holidate;
    string subname = "";
    string resu = "";
    string maxmark = "";
    string minmark = "";
    string gmon_yr_max;
    string gmon_yr_min;
    string gstrExam_month = "";
    string grank = "";
    Boolean chk_date_flag_attend = false;
    Boolean splhr_flag = false;
    Hashtable attmaster = new Hashtable();
    DataSet ds15 = new DataSet();
    //added by rajasekar 25/09/2018
    DataTable dtl = new DataTable();
    DataRow dtrow = null;
    static string[] appno;
    
    //================================//

    #endregion
    //'---------------------end print master-------------------
    public DataSet Bind_Degree(string college_code, string user_code)
    {
        SqlConnection dcon = new SqlConnection(ConfigurationManager.AppSettings["DSN"]);
        dcon.Close();
        dcon.Open();
        SqlCommand cmd = new SqlCommand("select distinct degree.course_id,course.course_name from degree,course,deptprivilages where course.course_id=degree.course_id and course.college_code = degree.college_code and degree.college_code=" + college_code + "  and deptprivilages.Degree_code=degree.Degree_code and user_code=" + user_code + "", dcon);
        SqlDataAdapter da = new SqlDataAdapter(cmd);
        DataSet ds = new DataSet();
        da.Fill(ds);
        return ds;
    }

    public DataSet Bind_Dept(string degree_code, string college_code, string user_code)
    {
        SqlConnection dcon = new SqlConnection(ConfigurationManager.AppSettings["DSN"]);
        dcon.Close();
        dcon.Open();
        SqlCommand cmd = new SqlCommand("select distinct degree.degree_code,department.dept_name from degree,department,course,deptprivilages where course.course_id=degree.course_id and department.dept_code=degree.dept_code and course.college_code = degree.college_code and department.college_code = degree.college_code and degree.course_id= " + degree_code + " and degree.college_code=" + college_code + "  and deptprivilages.Degree_code=degree.Degree_code and user_code=" + user_code + "", dcon);
        SqlDataAdapter da = new SqlDataAdapter(cmd);
        DataSet ds = new DataSet();
        da.Fill(ds);
        return ds;
    }

    protected void Page_Load(object sender, EventArgs e)
    {
        if (Session["collegecode"] == null) //Aruna For Back Button
        {
            Response.Redirect("~/Default.aspx");
        }
        norecordlbl.Visible = false;
        lblnorec.Visible = false;
        try
        {
            if (!IsPostBack)
            {
                lblnote.Visible = false;
                txtnote.Visible = false;
                TextBox1.Attributes.Add("readonly", "readonly");
                TextBox2.Attributes.Add("readonly", "readonly");
                Session["Hourwise"] = "";
                Session["Daywise"] = "";
                Labelnew.Visible = false;
                TextBoxnew.Visible = false;
                btnExcel.Visible = false;
                norecordlbl.Visible = false;
                lblExcel.Visible = false;
                txtexcelname.Visible = false;
                
                
                grdover.Visible = false;
                
                
                //Label5.Visible=false;
                // DropDownList1.Visible = false;
                lblnotes.Visible = false;
                txtnotes.Visible = false;

                

                //---------------page number

                
                //---------------------------

               


                //Added by Srinath 21/3/2015
                string grouporusercode = "";

                if ((Session["group_code"].ToString().Trim() != "") && (Session["group_code"].ToString().Trim() != "0") && (Session["group_code"].ToString().Trim() != "-1"))
                {
                    grouporusercode = " group_code=" + Session["group_code"].ToString().Trim() + "";
                }
                else
                {
                    grouporusercode = " usercode=" + Session["usercode"].ToString().Trim() + "";
                }

                Master1 = "select * from Master_Settings where " + grouporusercode + "";
                setcon.Close();
                setcon.Open();
                SqlDataReader mtrdr;
                
                SqlCommand mtcmd = new SqlCommand(Master1, setcon);
                mtrdr = mtcmd.ExecuteReader();
                DateTime currentdate = System.DateTime.Now;
                string newdate = currentdate.ToString("dd/MM/yyyy");
                TextBox1.Text = newdate;
                TextBox2.Text = newdate;
                Session["strvar"] = "";
                Session["Rollflag"] = "0";
                Session["Regflag"] = "0";
                Session["Studflag"] = "0";
                if (mtrdr.HasRows)
                {
                    while (mtrdr.Read())
                    {
                        if (mtrdr["settings"].ToString() == "Roll No" && mtrdr["value"].ToString() == "1")
                        {
                            Session["Rollflag"] = "1";
                        }
                        if (mtrdr["settings"].ToString() == "Register No" && mtrdr["value"].ToString() == "1")
                        {
                            Session["Regflag"] = "1";
                        }
                        if (mtrdr["settings"].ToString() == "Student_Type" && mtrdr["value"].ToString() == "1")
                        {
                            Session["Studflag"] = "1";
                        }
                        if (mtrdr["settings"].ToString() == "Days Scholor" && mtrdr["value"].ToString() == "1")
                        {
                            strdayflag = " and (registration.Stud_Type='Day Scholar'";
                        }
                        if (mtrdr["settings"].ToString() == "Hostel" && mtrdr["value"].ToString() == "1")
                        {
                            if (strdayflag != "" && strdayflag != "\0")
                            {
                                strdayflag = strdayflag + " or registration.Stud_Type='Hostler'";
                            }
                            else
                            {
                                strdayflag = " and (registration.Stud_Type='Hostler'";
                            }
                        }
                        if (mtrdr["settings"].ToString() == "Regular")
                        {
                            regularflag = "and ((registration.mode=1)";
                        }
                        if (mtrdr["settings"].ToString() == "Lateral")
                        {
                            if (regularflag != "")
                            {
                                regularflag = regularflag + " or (registration.mode=3)";
                            }
                            else
                            {
                                regularflag = regularflag + " and ((registration.mode=3)";
                            }
                        }
                        if (mtrdr["settings"].ToString() == "Transfer")
                        {
                            if (regularflag != "")
                            {
                                regularflag = regularflag + " or (registration.mode=2)";
                            }
                            else
                            {
                                regularflag = regularflag + " and ((registration.mode=2)";
                            }
                        }
                        if (mtrdr["settings"].ToString() == "Male" && mtrdr["value"].ToString() == "1")
                        {
                            genderflag = " and (sex='0'";
                        }
                        if (mtrdr["settings"].ToString() == "Female" && mtrdr["value"].ToString() == "1")
                        {
                            if (genderflag != "" && genderflag != "\0")
                            {
                                genderflag = genderflag + " or sex='1'";
                            }
                            else
                            {
                                genderflag = " and (sex='1'";
                            }
                        }
                        if (mtrdr["settings"].ToString() == "Day Wise" && mtrdr["value"].ToString() == "1")
                        {
                            Session["Daywise"] = "1";
                        }
                        if (mtrdr["settings"].ToString() == "Hour Wise" && mtrdr["value"].ToString() == "1")
                        {
                            Session["Hourwise"] = "1";
                        }
                    }
                }
                if (strdayflag != "")
                {
                    strdayflag = strdayflag + ")";
                }
                Session["strvar"] = strdayflag;
                if (regularflag != "")
                {
                    regularflag = regularflag + ")";
                }
                Session["strvar"] = Session["strvar"] + regularflag;
                if (genderflag != "")
                {
                    genderflag = genderflag + ")";
                }
                Session["strvar"] = Session["strvar"] + regularflag + genderflag;

                collegecode = Session["collegecode"].ToString();
                usercode = Session["usercode"].ToString();
                singleuser = Session["single_user"].ToString();
                group_user = Session["group_code"].ToString();

                if (Request.QueryString["val"] != null)
                {
                    string get_pageload_value = Request.QueryString["val"];
                    if (get_pageload_value.ToString() != null)
                    {
                        string[] spl_load_val = get_pageload_value.Split('$');//split criteria value and other val
                        string[] spl_pageload_val = spl_load_val[0].Split(',');//split the bat,deg,bran,sem,sec val
                        bindbatch();
                        ddlBatch.SelectedIndex = Convert.ToInt32(spl_pageload_val[0].ToString());
                        binddegree();
                        ddlDegree.SelectedIndex = Convert.ToInt32(spl_pageload_val[1].ToString());
                        if (ddlDegree.Text != "")
                        {
                            bindbranch();
                            ddlBranch.SelectedIndex = Convert.ToInt32(spl_pageload_val[2].ToString());
                            //bind semester
                            bindsem();
                            ddlSemYr.SelectedIndex = Convert.ToInt32(spl_pageload_val[3].ToString());
                            //bind section
                            bindsec();
                            ddlSec.SelectedIndex = Convert.ToInt32(spl_pageload_val[4].ToString());
                            //bing test
                            GetTest();
                            //chklstest.SelectedIndex = Convert.ToInt32(spl_pageload_val[5].ToString());
                            lblnorec.Visible = false;
                            TextBox2.Text = spl_load_val[3].ToString();
                            TextBox1.Text = spl_load_val[4].ToString();
                            //ddlTest_SelectedIndexChanged1(sender, e);
                            chklsttest_SelectedIndexChanged(sender, e);
                            //'-----------set value 1 for chk box value
                            int x = 0;
                            string[] spl_chk_value = spl_load_val[1].Split('-');
                            if (spl_chk_value.GetUpperBound(0) > 0)
                            {
                                for (int index_val = 0; index_val < spl_chk_value.GetUpperBound(0) + 1; index_val++)
                                {
                                    spl_chk_value[x].ToString();
                                    
                                    x++;
                                }
                            }
                            else
                            {
                                
                            }

                            //'-------------------------------------------
                            if (spl_load_val[2].ToString() != "")//set the ddlletter index
                            {
                                ddlletter.SelectedIndex = Convert.ToInt32(spl_load_val[2].ToString());
                                if (spl_load_val[2].ToString() == "1")
                                {
                                    //letter1();
                                }
                                else if (spl_load_val[2].ToString() == "2")
                                {
                                    //letter2();
                                }
                                else if (spl_load_val[2].ToString() == "3")
                                {
                                    Labelnew.Visible = true;
                                    TextBoxnew.Visible = true;
                                    TextBoxnew.Text = spl_load_val[5].ToString();
                                    TextBoxnew_TextChanged(sender, e);
                                    //letter3();
                                }
                            }
                        }
                        else
                        {
                            lblnorec.Text = "Give degree rights to the staff";
                            lblnorec.Visible = true;
                        }
                    }
                }
                else
                {
                    bindbatch();
                    binddegree();
                    if (ddlDegree.Text != "")
                    {
                        bindbranch();
                        //bind semester
                        bindsem();
                        //bind section
                        bindsec();
                        //bing test
                        GetTest();
                        lblnorec.Visible = false;
                    }
                    else
                    {
                        lblnorec.Text = "Give degree rights to the staff";
                        lblnorec.Visible = true;
                    }
                }
            }
        }
        catch
        {
        }
    }

    public void bindbatch()
    {
        ddlBatch.Items.Clear();
        ds_load = dacces.select_method_wo_parameter("bind_batch", "sp");
        int count = ds_load.Tables[0].Rows.Count;
        if (count > 0)
        {
            ddlBatch.DataSource = ds_load;
            ddlBatch.DataTextField = "batch_year";
            ddlBatch.DataValueField = "batch_year";
            ddlBatch.DataBind();
        }
        int count1 = ds_load.Tables[1].Rows.Count;
        if (count > 0)
        {
            int max_bat = 0;
            max_bat = Convert.ToInt32(ds_load.Tables[1].Rows[0][0].ToString());
            ddlBatch.SelectedValue = max_bat.ToString();
            con.Close();
        }
    }

    public void bindbranch()
    {
        ddlBranch.Items.Clear();
        hat.Clear();
        usercode = Session["usercode"].ToString();
        collegecode = Session["collegecode"].ToString();
        singleuser = Session["single_user"].ToString();
        group_user = Session["group_code"].ToString();
        if (group_user.Contains(';'))
        {
            string[] group_semi = group_user.Split(';');
            group_user = group_semi[0].ToString();
        }
        hat.Add("single_user", singleuser.ToString());
        hat.Add("group_code", group_user);
        hat.Add("course_id", ddlDegree.SelectedValue);
        hat.Add("college_code", collegecode);
        hat.Add("user_code", usercode);

        ds_load = dacces.select_method("bind_branch", hat, "sp");
        int count2 = ds_load.Tables[0].Rows.Count;
        if (count2 > 0)
        {
            ddlBranch.DataSource = ds_load;
            ddlBranch.DataTextField = "dept_name";
            ddlBranch.DataValueField = "degree_code";
            ddlBranch.DataBind();
        }
    }

    public void binddegree()
    {
        ddlDegree.Items.Clear();
        usercode = Session["usercode"].ToString();
        collegecode = Session["collegecode"].ToString();
        singleuser = Session["single_user"].ToString();
        group_user = Session["group_code"].ToString();
        if (group_user.Contains(';'))
        {
            string[] group_semi = group_user.Split(';');
            group_user = group_semi[0].ToString();
        }
        hat.Clear();
        hat.Add("single_user", singleuser.ToString());
        hat.Add("group_code", group_user);
        hat.Add("college_code", collegecode);
        hat.Add("user_code", usercode);
        ds_load = dacces.select_method("bind_degree", hat, "sp");
        int count1 = ds_load.Tables[0].Rows.Count;
        if (count1 > 0)
        {
            ddlDegree.DataSource = ds_load;
            ddlDegree.DataTextField = "course_name";
            ddlDegree.DataValueField = "course_id";
            ddlDegree.DataBind();
        }
    }

    public void bindsec()
    {
        ddlSec.Items.Clear();
        hat.Clear();
        hat.Add("batch_year", ddlBatch.SelectedValue.ToString());
        hat.Add("degree_code", ddlBranch.SelectedValue);
        ds_load = dacces.select_method("bind_sec", hat, "sp");
        int count5 = ds_load.Tables[0].Rows.Count;
        if (count5 > 0)
        {
            ddlSec.DataSource = ds_load;
            ddlSec.DataTextField = "sections";
            ddlSec.DataValueField = "sections";
            ddlSec.DataBind();
            ddlSec.Enabled = true;
        }
        else
        {
            ddlSec.Enabled = false;
        }
    }

    //protected override void Render(System.Web.UI.HtmlTextWriter writer)
    //{

    //    Control cntUpdateBtn = FpSpread1.FindControl("Update");
    //    Control cntCancelBtn = FpSpread1.FindControl("Cancel");
    //    Control cntCopyBtn = FpSpread1.FindControl("Copy");
    //    Control cntCutBtn = FpSpread1.FindControl("Clear");
    //    Control cntPasteBtn = FpSpread1.FindControl("Paste");
    //    //  Control cntPageNextBtn = FpSpread1.FindControl("Next");
    //    //   Control cntPagePreviousBtn = FpSpread1.FindControl("Prev");


    //    if ((cntUpdateBtn != null))
    //    {

    //        TableCell tc = (TableCell)cntUpdateBtn.Parent;
    //        TableRow tr = (TableRow)tc.Parent;

    //        tr.Cells.Remove(tc);

    //        tc = (TableCell)cntCancelBtn.Parent;
    //        tr.Cells.Remove(tc);


    //        tc = (TableCell)cntCopyBtn.Parent;
    //        tr.Cells.Remove(tc);

    //        tc = (TableCell)cntCutBtn.Parent;
    //        tr.Cells.Remove(tc);

    //        tc = (TableCell)cntPasteBtn.Parent;
    //        tr.Cells.Remove(tc);

    //        //tc = (TableCell)cntPageNextBtn.Parent;
    //        //tr.Cells.Remove(tc);

    //        //tc = (TableCell)cntPagePreviousBtn.Parent;
    //        //tr.Cells.Remove(tc);



    //    }

    //    base.Render(writer);
    //}

    public void GetTest()
    {
        try
        {
            con.Close();
            con.Open();
            string SyllabusYr;
            string SyllabusQry;
            SyllabusQry = "select syllabus_year from syllabus_master where degree_code=" + ddlBranch.SelectedValue.ToString() + " and semester =" + ddlSemYr.SelectedValue.ToString() + " and batch_year=" + ddlBatch.SelectedValue.ToString() + "";
            SyllabusYr = GetFunction(SyllabusQry.ToString());
            string Sqlstr;
            Sqlstr = "";
            Sqlstr = "select criteria,criteria_no from criteriaforinternal,syllabus_master where criteriaforinternal.syll_code=syllabus_master.syll_code and degree_code=" + ddlBranch.SelectedValue.ToString() + " and semester=" + ddlSemYr.SelectedValue.ToString() + " and syllabus_year=" + SyllabusYr.ToString() + " and batch_year=" + ddlBatch.SelectedValue.ToString() + " order by criteria";
            SqlDataAdapter sqlAdapter1 = new SqlDataAdapter(Sqlstr, con);
            DataSet titles = new DataSet();
            con.Close();
            con.Open();
            sqlAdapter1.Fill(titles);
            count = 0;
            if (titles.Tables[0].Rows.Count > 0)
            {
                chklstest.DataSource = titles;
                chklstest.DataValueField = "Criteria_No";
                chklstest.DataTextField = "Criteria";
                chklstest.DataBind();
                chklstest.SelectedIndex = chklstest.Items.Count - 1;
                for (int i = 0; i < chklstest.Items.Count; i++)
                {
                    chklstest.Items[i].Selected = true;
                    if (chklstest.Items[i].Selected == true)
                    {
                        count += 1;
                        txt_Test.Text = "Test(" + count.ToString() + ")";
                    }
                    if (chklstest.Items.Count == count)
                    {
                        chktest.Checked = true;
                    }
                    else
                    {
                        chktest.Checked = false;
                    }
                }
            }
        }
        catch
        {

        }
    }

    protected void chktest_ChekedChange(object sender, EventArgs e)
    {
        try
        {
            if (chktest.Checked == true)
            {
                for (int i = 0; i < chklstest.Items.Count; i++)
                {
                    chklstest.Items[i].Selected = true;
                    txt_Test.Text = "Test(" + (chklstest.Items.Count) + ")";
                }
            }
            else
            {
                for (int i = 0; i < chklstest.Items.Count; i++)
                {
                    chklstest.Items[i].Selected = false;
                    txt_Test.Text = "---Select---";
                }
            }
        }
        catch (Exception ex)
        {
            //lblset.Text = ex.ToString();
        }
    }

    protected void chklsttest_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {

            string clg = "";
            int commcount = 0;
            for (int i = 0; i < chklstest.Items.Count; i++)
            {
                if (chklstest.Items[i].Selected == true)
                {
                    commcount = commcount + 1;
                    txt_Test.Text = "Test(" + commcount.ToString() + ")";
                    if (clg == "")
                    {
                        clg = chklstest.Items[i].Value.ToString();
                    }
                    else
                    {
                        clg = clg + "','" + chklstest.Items[i].Value;
                    }
                }
            }
            if (chklstest.Items.Count == commcount)
            {
                chktest.Checked = true;
            }
            else
            {
                chktest.Checked = false;
            }
            if (commcount == 0)
            {
                txt_Test.Text = "--Select--";
                chktest.Checked = false;
            }
        }
        catch (Exception ex)
        {
            //lblset.Text = ex.ToString();
        }
    }

    public string getAllSelectedTestValues()
    {
        string sqltest = "";
        //string sqltestquery="";
        if (txt_Test.Text != "")
        {
            for (int itmcnt = 0; itmcnt < chklstest.Items.Count; itmcnt++)
            {
                if (chklstest.Items[itmcnt].Selected == true)
                {
                    if (sqltest == "")
                        sqltest = "'" + chklstest.Items[itmcnt].Value.ToString() + "'";
                    else
                        sqltest += "," + "'" + chklstest.Items[itmcnt].Value.ToString() + "'";
                }
            }
            //if (sqltest != "")
            //{
            //    sqltest = "in(" + sqltest + ")";
            //    //sqltestquery = "and ";
            //}
        }
        return sqltest;
    }

    public string GetFunction(string sqlQuery)
    {
        string sqlstr;
        sqlstr = sqlQuery;
        getcon.Close();
        getcon.Open();
        SqlDataAdapter sqlAdapter1 = new SqlDataAdapter(sqlstr, getcon);
        SqlDataReader drnew;
        SqlCommand cmd = new SqlCommand(sqlstr);
        cmd.Connection = getcon;
        drnew = cmd.ExecuteReader();
        drnew.Read();
        if (drnew.HasRows == true)
        {
            return drnew[0].ToString();
        }
        else
        {
            return "";
        }
    }

    protected void ddlDegree_SelectedIndexChanged(object sender, EventArgs e)
    {
        try
        {
            clear();
            ddlBranch.Items.Clear();
            con.Open();
            string course_id = ddlDegree.SelectedValue.ToString();
            string collegecode = Session["collegecode"].ToString();
            string usercode = Session["usercode"].ToString();
            bindbranch();
            bindsem();
            bindsec();
            GetTest();
        }
        catch
        {
        }

    }

    protected void ddlBranch_SelectedIndexChanged(object sender, EventArgs e)
    {
        clear();
        if (!Page.IsPostBack == false)
        {
            ddlSemYr.Items.Clear();
        }
        try
        {
            if ((ddlBranch.SelectedValue.ToString() != "") && (ddlBranch.SelectedValue.ToString() != " "))
            {
                bindsem();
            }
        }
        catch (Exception ex)
        {
            string s = ex.ToString();
            Response.Write(s);
        }

        bindsec();

        GetTest();
    }

    public void BindSectionDetail()
    {

        string branch = ddlBranch.SelectedValue.ToString();
        string batch = ddlBatch.SelectedValue.ToString();
        con.Close();
        con.Open();
        cmd = new SqlCommand("select distinct sections from registration where batch_year=" + ddlBatch.SelectedValue.ToString() + " and degree_code=" + ddlBranch.SelectedValue.ToString() + " and sections<>'-1' and sections<>' ' and delflag=0 and exam_flag<>'Debar'", con);
        SqlDataAdapter da = new SqlDataAdapter(cmd);
        DataSet ds = new DataSet();
        da.Fill(ds);

        ddlSec.DataSource = ds;
        ddlSec.DataTextField = "sections";
        ddlSec.DataValueField = "sections";
        ddlSec.DataBind();

        SqlDataReader dr_sec;
        dr_sec = cmd.ExecuteReader();
        dr_sec.Read();
        if (dr_sec.HasRows == true)
        {
            if (dr_sec["sections"].ToString() == "")
            {
                ddlSec.Enabled = false;
                GetTest();
            }
            else
            {
                ddlSec.Enabled = true;
                GetTest();
            }
        }
        else
        {
            ddlSec.Enabled = false;
            GetTest();
        }
    }

    public void bindsem()
    {
        try
        {
            //--------------------semester load
            ddlSemYr.Items.Clear();
            Boolean first_year;
            first_year = false;
            int duration = 0;
            int i = 0;
            con.Close();
            con.Open();
            SqlDataReader dr;
            cmd = new SqlCommand("select distinct ndurations,first_year_nonsemester from ndegree where degree_code=" + ddlBranch.SelectedValue.ToString() + " and batch_year=" + ddlBatch.Text.ToString() + " and college_code=" + Session["collegecode"] + "", con);
            dr = cmd.ExecuteReader();
            dr.Read();
            if (dr.HasRows == true)
            {
                first_year = Convert.ToBoolean(dr[1].ToString());
                duration = Convert.ToInt16(dr[0].ToString());
                for (i = 1; i <= duration; i++)
                {
                    if (first_year == false)
                    {
                        ddlSemYr.Items.Add(i.ToString());
                    }
                    else if (first_year == true && i != 2)
                    {
                        ddlSemYr.Items.Add(i.ToString());
                    }

                }
            }
            else
            {
                dr.Close();
                SqlDataReader dr1;
                cmd = new SqlCommand("select distinct duration,first_year_nonsemester  from degree where degree_code=" + ddlBranch.SelectedValue.ToString() + " and college_code=" + Session["collegecode"] + "", con);
                ddlSemYr.Items.Clear();
                dr1 = cmd.ExecuteReader();
                dr1.Read();
                if (dr1.HasRows == true)
                {
                    first_year = Convert.ToBoolean(dr1[1].ToString());
                    duration = Convert.ToInt16(dr1[0].ToString());

                    for (i = 1; i <= duration; i++)
                    {
                        if (first_year == false)
                        {
                            ddlSemYr.Items.Add(i.ToString());
                        }
                        else if (first_year == true && i != 2)
                        {
                            ddlSemYr.Items.Add(i.ToString());
                        }
                    }
                }

                dr1.Close();
            }

            con.Close();
        }
        catch
        {
        }
    }

    public void Get_Semester()
    {
        Boolean first_year;
        first_year = false;
        int duration = 0;
        string batch_calcode_degree;


        string batch = ddlBatch.SelectedValue.ToString();
        string collegecode = Session["collegecode"].ToString();
        string degree = ddlBranch.SelectedValue.ToString();
        batch_calcode_degree = batch.ToString() + "/" + collegecode.ToString() + "/" + degree.ToString();

        DataSet ds = ClsAttendanceAccess.Getsemster_Detail(batch_calcode_degree.ToString());

        if (ds.Tables[0].Rows.Count > 0)
        {
            first_year = Convert.ToBoolean(ds.Tables[0].Rows[0][1].ToString());
            duration = Convert.ToInt16(ds.Tables[0].Rows[0][0].ToString());

            for (int i = 1; i <= duration; i++)
            {
                if (first_year == false)
                {
                    ddlSemYr.Items.Add(i.ToString());

                }
                else if (first_year == true && i != 2)
                {
                    ddlSemYr.Items.Add(i.ToString());
                }

            }
        }
    }

    //protected void btnExcel_Click(object sender, EventArgs e)
    //{
    //    try
    //    {

    //        string reportname = txtexcelname.Text;

    //        if (reportname.ToString().Trim() != "")
    //        {
    //            norecordlbl.Visible = false;
    //            //dacces.printexcelreport(FpEntry, reportname);
    //            txtexcelname.Text = "";
    //        }
    //        else
    //        {
    //            norecordlbl.Text = "Please Enter Your Report Name";
    //            norecordlbl.Visible = true;
    //        }
    //    }
    //    catch
    //    {
    //    }
    //}
    protected void btnExcel_Click(object sender, EventArgs e)
    {

        string reportname = txtexcelname.Text;
        if (reportname.ToString().Trim() != "")
        {
            dacces.printexcelreportgrid(grdover, reportname);

        }
        else
        {
            norecordlbl.Text = "Please Enter Your Report Name";
            norecordlbl.Visible = true;
        }


    }
    public void SpreadBind()
    {
        try
        {
            DataView dvindstud = new DataView();
            DataSet ds = new DataSet();
            norecordlbl.Visible = true;
            txtexcelname.Visible = true;
            lblExcel.Visible = true;
            int hasrow_count = 0;
            //FpEntry.Visible = true;
            grdover.Visible = true;
            
            btnExcel.Visible = true;
            ////Label5.Visible = true;
            ////DropDownList1.Visible = true;
            lblnotes.Visible = true;
            txtnotes.Visible = true;


            string strsec = "";
            string sections = "";
            string batch = "";
            string degreecode = "";
            string subno = "";
            string semester = "";

            string exam_code = "";
            string criteria_no = "";

            string resmaxmrk = "";
            string resminmrk = "";
            string resduration = "";
            string subject_code = "";

            int[] maxtot = new int[100];

            string examdate = "";

            double[] percentarray = new double[200];
            string[] rollnoarray = new string[200];
            int[] rankcountflag = new int[200];
            batch = ddlBatch.SelectedValue.ToString();
            degreecode = ddlBranch.SelectedValue.ToString();
            sections = ddlSec.SelectedValue.ToString();
            semester = ddlSemYr.SelectedValue.ToString();
            criteria_no = getAllSelectedTestValues();
            string sqlStr = "";
            //'-----------------------------new 
            string collnamenew1 = "";
            string address1 = "";
            string address2 = "";
            string address = "";
            string Phoneno = "";
            string Faxno = "";
            string phnfax = "";
            string district = "";
            string email = "";
            string query = "";
            string query1 = "";
            //'----------------------------------
            if (sections.ToString() == "All" || sections.ToString() == "" || sections.ToString() == "-1")
            {
                strsec = "";
            }
            else
            {
                strsec = " and sections='" + sections.ToString() + "'";
            }
            

           

            //'-------------------------------------------- Query for Get the subjectno,sub code,acronym ,examdate,minmrk,maxmrk,entrydate and examcode
            filteration();
            string filterwithsection = "a.app_no=r.app_no and r.degree_code='" + degreecode.ToString() + "' and et.subject_no=s.subject_no and r.batch_year='" + batch.ToString() + "' and RollNo_Flag<>0 and et.exam_code=rt.exam_code and et.criteria_no in(" + criteria_no.ToString() + ") and r.roll_no=rt.roll_no and cc=0 and exam_flag <> 'DEBAR' and delflag=0   and r.sections='" + sections.ToString() + "' " + strorder + ",s.subject_no";
            string filterwithoutsection = "a.app_no=r.app_no and r.degree_code='" + degreecode.ToString() + "' and et.subject_no=s.subject_no and r.batch_year='" + batch.ToString() + "' and RollNo_Flag<>0 and et.exam_code=rt.exam_code and et.criteria_no in(" + criteria_no.ToString() + ") and r.roll_no=rt.roll_no and cc=0 and exam_flag <> 'DEBAR' and delflag=0  " + strorder + ",s.subject_no";
            //string filterq1 = "e.subject_no=s.subject_no and e.exam_code= r.exam_code and criteria_no in(" + @criteria_no.ToString() + ") and sections='" + sections.ToString() + "' order by s.subject_no";
            hat.Clear();//'---------------------------new myth-------------------------------------
            hat.Add("batchyear", batch.ToString());
            hat.Add("degreecode", degreecode.ToString());
            hat.Add("criteria_no", criteria_no.ToString());
            hat.Add("sections", sections.ToString());
            hat.Add("filterwithsection", filterwithsection.ToString());
            hat.Add("filterwithoutsection", filterwithoutsection.ToString());

            //ds2 = dacces.select_method("PROC_STUD_ALL_SUBMARK", hat, "sp"); Commented by Malang Raja on 21/12/2015

            //===========================================================  ADDED AND CHANGED BY MALANG RAJA ON 21/12/2015==============================================
            if (strsec != "")
            {
                query = "select distinct len(r.Roll_No),r.Roll_No as roll,r.Reg_No as regno,r.stud_name as studname,r.stud_type as studtype, r.App_No as ApplicationNumber,rt.marks_obtained as mark,s.subject_no,s.subject_code,s.subject_name,et.start_period, et.exam_date,et.duration,et.max_mark,et.min_mark,rt.exam_code from registration r, applyn a , result rt,exam_type et, subject s where " + @filterwithsection;
                query1 = "select distinct s.subject_no,s.subject_name,s.acronym,s.subject_code, staff_code,duration,convert(varchar(10),exam_date,103)as exam_date,convert(varchar(10),entry_date,103)as entry_date, max_mark,min_mark,r.exam_code from exam_type e,subject s,result r where e.subject_no=s.subject_no and e.exam_code= r.exam_code and criteria_no in(" + @criteria_no + ")" + @strsec + " order by s.subject_no";
                ds2 = dacces.select_method(query, hat, "text");
                ds = dacces.select_method(query1, hat, "text");
            }
            else
            {
                query = "select distinct len(r.Roll_No),r.Roll_No as roll,r.Reg_No as regno,r.stud_name as studname,r.stud_type as studtype, r.App_No as ApplicationNumber,rt.marks_obtained as mark,s.subject_no,s.subject_code,s.subject_name,et.start_period, et.exam_date,et.duration,et.max_mark,et.min_mark,rt.exam_code from registration r, applyn a , result rt,exam_type et, subject s where " + @filterwithoutsection;
                query1 = "select distinct s.subject_no,s.subject_name,s.acronym,s.subject_code,staff_code,duration, convert(varchar(10),exam_date,103)as exam_date,convert(varchar(10),entry_date,103)as entry_date,max_mark,min_mark, r.exam_code from exam_type e,subject s,result r where e.subject_no=s.subject_no and e.exam_code= r.exam_code and criteria_no in(" + @criteria_no + ") order by s.subject_no";
                ds2 = dacces.select_method(query, hat, "text");
                ds = dacces.select_method(query1, hat, "text");
            }
            if (ds.Tables[0].Rows.Count > 0)//'-------------new
            {
                //'------------------------------------------- Query for Displaying the STUDENT DETAILS
                sqlStr = "select distinct len(registration.Roll_No) as len_rollno, registration.Roll_No as RollNumber, registration.Reg_No as RegistrationNumber,registration.stud_name as Student_Name,registration.stud_type as StudentType,registration.App_No as ApplicationNumber from registration, applyn a where a.app_no=registration.app_no and registration.degree_code=" + ddlBranch.SelectedValue.ToString() + "   and registration.batch_year=" + ddlBatch.SelectedValue.ToString() + "  and RollNo_Flag<>0 and cc=0 and exam_flag <> 'DEBAR' and delflag=0  " + strsec + " " + Session["strvar"] + " " + strregorder + " ";
                con.Close();
                con.Open();
                if (sqlStr != "")
                {
                    SqlDataAdapter adaSyll1 = new SqlDataAdapter(sqlStr, con);
                    adaSyll1.Fill(ds1, "ds");
                    if (ds1.Tables[0].Rows.Count > 0)//'-----------------------------new myth---------
                    {
                        int slno = 0;
                        
                        
                        
                        //FpEntry.Sheets[0].RowHeader.Cells[FpEntry.Sheets[0].RowCount - 1, 0].Text = string.Empty;

                        //added by rajasekar 25/09/2018
                        dtrow = dtl.NewRow();
                        dtl.Rows.Add(dtrow);
                        int colu = 0;
                        dtl.Columns.Add("S.No", typeof(string));
                        dtl.Rows[0][colu] = "S.No";
                        colu++;
                        if (Session["Rollflag"].ToString() == "0")
                        {
                            
                        }
                        else
                        {
                            dtl.Columns.Add("Roll No", typeof(string));
                            dtl.Rows[0][colu] = "Roll No";
                            colu++;
                        }
                        if (Session["Regflag"].ToString() == "0")
                        {
                            
                        }
                        else
                        {
                            dtl.Columns.Add("Regno", typeof(string));
                            dtl.Rows[0][colu] = "Regno";
                            colu++;
                        }

                        dtl.Columns.Add("Student Name", typeof(string));
                        dtl.Rows[0][colu] = "Student Name";
                        colu++;


                        if (Session["Studflag"].ToString() == "0")
                        {
                            
                        }
                        else
                        {
                            dtl.Columns.Add("Student Type", typeof(string));
                            dtl.Rows[0][colu] = "Student Type";
                            colu++;
                        }
                        appno = new string[ds1.Tables[0].Rows.Count];
                        
                        for (int irow = 0; irow < ds1.Tables[0].Rows.Count; irow++)
                        {
                            slno++;
                            


                            dtrow = dtl.NewRow();
                            int col = 0;

                            dtrow[col] = slno.ToString();
                            col++;
                            
                            if (Session["Rollflag"].ToString() == "0")
                            {

                            }
                            else
                            {
                                dtrow[col] = ds1.Tables[0].Rows[irow]["RollNumber"].ToString();
                                col++;
                            }
                            if (Session["Regflag"].ToString() == "0")
                            {

                            }
                            else
                            {
                                dtrow[col] = ds1.Tables[0].Rows[irow]["RegistrationNumber"].ToString();
                                col++;
                            }

                            dtrow[col] = ds1.Tables[0].Rows[irow]["Student_Name"].ToString();
                            col++;


                            if (Session["Studflag"].ToString() == "0")
                            {

                            }
                            else
                            {
                                dtrow[col] = ds1.Tables[0].Rows[irow]["StudentType"].ToString();
                                col++;
                            }
                           
                            dtl.Rows.Add(dtrow);
                            
                            appno[irow] = ds1.Tables[0].Rows[irow]["ApplicationNumber"].ToString();
                            
                        }
                        if (dtl.Rows.Count > 0)
                        {
                            grdover.DataSource = dtl;
                            grdover.DataBind();
                            grdover.Width = 800;
                            grdover.HeaderRow.Visible = false;
                            if (appno != null)
                            {
                                for (int ii = 0; ii < appno.Length; ii++)
                                {
                                    Label lblappnum = grdover.Rows[ii + 1].Cells[0].FindControl("lblappno") as Label;
                                    lblappnum.Text = appno[ii];
                                }
                            }

                                for (int i = 0; i < grdover.Rows.Count; i++)
                                {
                                    for (int j = 0; j < grdover.HeaderRow.Cells.Count; j++)
                                    {

                                        if (i == 0)
                                        {
                                            grdover.Rows[i].Cells[j].HorizontalAlign = HorizontalAlign.Center;
                                            grdover.Rows[i].Cells[j].BackColor = ColorTranslator.FromHtml("#0CA6CA");
                                            grdover.Rows[i].Cells[j].BorderColor = Color.Black;
                                            grdover.Rows[i].Cells[j].Font.Bold = true;

                                            
                                                if (j == 0)
                                                {
                                                    var checkbox1 = grdover.Rows[i].Cells[0].FindControl("lbl_cb") as CheckBox;
                                                    checkbox1.Visible = false;

                                                }
                                                

                                            
                                        }
                                        else
                                        {
                                            if (j == 0)
                                            {
                                                var checkbox1 = grdover.Rows[i].Cells[0].FindControl("chkselectall") as CheckBox;
                                                checkbox1.Visible = false;

                                            }

                                            if (grdover.HeaderRow.Cells[j].Text == "S.No")
                                                grdover.Rows[i].Cells[j].HorizontalAlign = HorizontalAlign.Center;

                                            else
                                                grdover.Rows[i].Cells[j].HorizontalAlign = HorizontalAlign.Left;

                                        }
                                    }

                                }
                           
                        }
                    }
                    if (Session["Rollflag"].ToString() == "0")
                    {
                        
                    }
                    if (Session["Regflag"].ToString() == "0")
                    {
                        
                    }
                    if (Session["Studflag"].ToString() == "0")
                    {
                        
                    }
                    
                    //FpSpread1.Sheets[0].Columns[4].Width = 300;
                    
                    

                    //'------------------------------------load the clg information
                    if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
                    {
                        string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(phoneno,'-') as phoneno,isnull(faxno,'-') as faxno,district,email,website from collinfo where college_code=" + Session["collegecode"] + "";
                        SqlCommand collegecmd = new SqlCommand(college, con);
                        SqlDataReader collegename;
                        con.Close();
                        con.Open();
                        collegename = collegecmd.ExecuteReader();
                        if (collegename.HasRows)
                        {
                            while (collegename.Read())
                            {
                                collnamenew1 = collegename["collname"].ToString();
                                address1 = collegename["address1"].ToString();
                                address2 = collegename["address2"].ToString();
                                district = collegename["district"].ToString();
                                address = address1 + "-" + address2 + "-" + district;
                                Phoneno = collegename["phoneno"].ToString();
                                Faxno = collegename["faxno"].ToString();
                                phnfax = "Phone :" + " " + Phoneno + " " + "Fax :" + " " + Faxno;
                                email = "E-Mail:" + collegename["email"].ToString() + " " + "Web Site:" + collegename["website"].ToString();
                            }
                        }
                        con.Close();
                    }
                }
                #region Commented
                //hasrow_count = hasrow_count + 1;
                //for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                //{
                //    subno = ds.Tables[0].Rows[i]["subject_no"].ToString();
                //    subject_code = ds.Tables[0].Rows[i]["subject_code"].ToString();
                //    resmaxmrk = ds.Tables[0].Rows[i]["max_mark"].ToString();
                //    resminmrk = ds.Tables[0].Rows[i]["min_mark"].ToString();
                //    resduration = ds.Tables[0].Rows[i]["duration"].ToString();
                //    exam_code = ds.Tables[0].Rows[i]["exam_code"].ToString();
                //    examdate = ds.Tables[0].Rows[i]["exam_date"].ToString();

                //    int x1 = FpEntry.Sheets[0].ColumnCount;
                //    FpEntry.Sheets[0].ColumnCount = Convert.ToInt32(FpEntry.Sheets[0].ColumnCount) + 1;
                //    int incr = FpEntry.Sheets[0].ColumnCount - 1;

                //    FpEntry.Sheets[0].ColumnHeader.Cells[0, incr].Tag = examdate + "@" + exam_code;

                //    FpEntry.Sheets[0].ColumnHeader.Cells[8, incr].Text = subject_code;
                //    FpEntry.Sheets[0].ColumnHeader.Cells[0, incr].Note = subno;
                //    //for letter report this min mark note is set to 1st row........
                //    FpEntry.Sheets[0].Cells[0, incr].Note = resminmrk;
                //    FpEntry.Sheets[0].Cells[1, incr].Note = resmaxmrk;

                //    FpEntry.Sheets[0].SetColumnVisible(5, false);

                //    count++;
                //}
                #endregion Commented
            }
            #region Comment
            //FpEntry.Sheets[0].ColumnCount = FpEntry.Sheets[0].ColumnCount + 4;
            //int totalcount = FpEntry.Sheets[0].ColumnCount - 4;
            //FpEntry.Sheets[0].ColumnHeader.Cells[8, totalcount].Text = "Total";
            //FpEntry.Sheets[0].ColumnHeader.Cells[8, totalcount].Font.Bold = true;
            //FpEntry.Sheets[0].ColumnHeader.Cells[8, totalcount].Font.Size = FontUnit.Medium;

            //int percentcount = FpEntry.Sheets[0].ColumnCount - 3;
            //FpEntry.Sheets[0].ColumnHeader.Cells[8, percentcount].Text = "Percentage";
            //FpEntry.Sheets[0].ColumnHeader.Cells[8, percentcount].Font.Bold = true;
            //FpEntry.Sheets[0].ColumnHeader.Cells[8, percentcount].Font.Size = FontUnit.Medium;

            //int resultcount = FpEntry.Sheets[0].ColumnCount - 2;
            //FpEntry.Sheets[0].ColumnHeader.Cells[8, resultcount].Text = "Result";
            //FpEntry.Sheets[0].ColumnHeader.Cells[8, resultcount].Font.Bold = true;
            //FpEntry.Sheets[0].ColumnHeader.Cells[8, resultcount].Font.Size = FontUnit.Medium;

            

            #endregion Comment

            

            
            string coll = Convert.ToString(Session["collegecode"]);

            //'---------------------------------------------load theclg logo photo-------------------------------------
            MyImg mi3 = new MyImg();
            mi3.ImageUrl = "Handler/Handler2.ashx?";
            //'------------------span the 3 rows to display the img----------------
            

            #region ModifiedByMalang
            //=======================================  Changed By Malang Raja T   ===================================================
            //FpEntry.Sheets[0].ColumnHeader.Rows[0].Border.BorderColorBottom = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Rows[1].Border.BorderColorBottom = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Rows[2].Border.BorderColorBottom = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Rows[3].Border.BorderColorBottom = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Rows[4].Border.BorderColorBottom = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Rows[5].Border.BorderColorBottom = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Rows[6].Border.BorderColorBottom = Color.White;


            //FpEntry.Sheets[0].ColumnHeader.Cells[0, 1].Border.BorderColorRight = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Cells[1, 1].Border.BorderColorRight = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Cells[2, 1].Border.BorderColorRight = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Cells[3, 1].Border.BorderColorRight = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Cells[4, 1].Border.BorderColorRight = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Cells[5, 1].Border.BorderColorRight = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Cells[6, 1].Border.BorderColorRight = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Cells[7, 1].Border.BorderColorRight = Color.White;

            //FpEntry.Sheets[0].ColumnHeader.Cells[0, 1].Border.BorderColorBottom = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Cells[1, 1].Border.BorderColorBottom = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Cells[2, 1].Border.BorderColorBottom = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Cells[3, 1].Border.BorderColorBottom = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Cells[4, 1].Border.BorderColorBottom = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Cells[5, 1].Border.BorderColorBottom = Color.White;
            //FpEntry.Sheets[0].ColumnHeader.Cells[6, 1].Border.BorderColorBottom = Color.White;


            //FpEntry.Sheets[0].ColumnHeader.Cells[0, 1].HorizontalAlign = HorizontalAlign.Center;
            //FpEntry.Sheets[0].ColumnHeader.Cells[1, 1].HorizontalAlign = HorizontalAlign.Center;
            //FpEntry.Sheets[0].ColumnHeader.Cells[2, 1].HorizontalAlign = HorizontalAlign.Center;
            //FpEntry.Sheets[0].ColumnHeader.Cells[3, 1].HorizontalAlign = HorizontalAlign.Center;
            //FpEntry.Sheets[0].ColumnHeader.Cells[4, 1].HorizontalAlign = HorizontalAlign.Center;
            //FpEntry.Sheets[0].ColumnHeader.Cells[5, 1].HorizontalAlign = HorizontalAlign.Center;
            //FpEntry.Sheets[0].ColumnHeader.Cells[6, 1].HorizontalAlign = HorizontalAlign.Center;
            //FpEntry.Sheets[0].ColumnHeader.Cells[7, 1].HorizontalAlign = HorizontalAlign.Center;

            //FpEntry.Sheets[0].ColumnHeader.Rows[0].Font.Size = FontUnit.Medium;
            //FpEntry.Sheets[0].ColumnHeader.Rows[1].Font.Size = FontUnit.Medium;
            //FpEntry.Sheets[0].ColumnHeader.Rows[2].Font.Size = FontUnit.Medium;
            //FpEntry.Sheets[0].ColumnHeader.Rows[3].Font.Size = FontUnit.Medium;
            //FpEntry.Sheets[0].ColumnHeader.Rows[4].Font.Size = FontUnit.Medium;
            //FpEntry.Sheets[0].ColumnHeader.Rows[5].Font.Size = FontUnit.Medium;
            //FpEntry.Sheets[0].ColumnHeader.Rows[6].Font.Size = FontUnit.Medium;
            //FpEntry.Sheets[0].ColumnHeader.Rows[7].Font.Size = FontUnit.Medium;
            //FpEntry.Sheets[0].ColumnHeader.Rows[8].Font.Size = FontUnit.Medium;

            //FpEntry.Sheets[0].ColumnHeader.Rows[0].Font.Bold = true;
            //FpEntry.Sheets[0].ColumnHeader.Rows[1].Font.Bold = true;
            //FpEntry.Sheets[0].ColumnHeader.Rows[2].Font.Bold = true;
            //FpEntry.Sheets[0].ColumnHeader.Rows[3].Font.Bold = true;
            //FpEntry.Sheets[0].ColumnHeader.Rows[4].Font.Bold = true;
            //FpEntry.Sheets[0].ColumnHeader.Rows[5].Font.Bold = true;
            //FpEntry.Sheets[0].ColumnHeader.Rows[6].Font.Bold = true;
            //FpEntry.Sheets[0].ColumnHeader.Rows[7].Font.Bold = true;
            //FpEntry.Sheets[0].ColumnHeader.Rows[8].Font.Bold = true;

            //===============================  End Changed By Malang Raja    =====================================================

            #endregion ModifiedByMalang

            //Set BorderBottom Color of column header of FpEntry Spread
            for (int i = 0; i < 9; i++)
            {
                if (i < 7)
                {
                    
                }
                if (i < 8)
                {
                    
                }
                
            }
            


           

            //MyImg mi4 = new MyImg();
            //mi4.ImageUrl = "Handler/Handler5.ashx?";
            ////'------------------span the 3 rows to display the img----------------
            //FpEntry.Sheets[0].ColumnHeaderSpanModel.Add(0, 0, 8, 1);
            //FpEntry.Sheets[0].ColumnHeader.Cells[0, 0].CellType = mi4;
            MyImg mi4 = new MyImg();
            mi4.ImageUrl = "Handler/Handler5.ashx?";
            //------------------------spaning the 3 rows
            sqlStr = "";

            int classaverage = 0;

            int Passpercent1 = 0;
            int signat = 0;
            //'------------------------------new
            int sub_max_mark = 0;
            int stud = 0;
            int failcount = 0;
            string min_mark = "";
            double mark = 0;
            int EL = 0;
            string chkrolno = "";
            string subjectno = "";
            double percent = 0;
            int ra_nk = 0;
            int total_pass_fail = 0;
            string temp = "";
            //'-----------------------------------new end-----
            string strsec1 = "";
            if (sections.ToString() == "All" || sections.ToString() == "" || sections.ToString() == "-1")
            {
                strsec = "";
                strsec1 = "";
            }
            else
            {
                strsec = " and exam_type.sections='" + sections.ToString() + "'";
                strsec1 = " and Sections='" + sections.ToString() + "'";
            }
            #region Hidden
            //DataSet dsdel = dacces.select_method_wo_parameter("Delete_Rank_Table", "sp");
            //if (Convert.ToInt32(FpEntry.Sheets[0].RowCount) != 0)
            //{
            //    FpEntry.Sheets[0].RowHeader.Visible = false;
            //    for (int res = 1; res <=Convert.ToInt32(FpEntry.Sheets[0].RowCount)- 1; res++)
            //    {
            //        rol_no = FpEntry.Sheets[0].GetText(res, 2).ToString();
            //        sub_max_mark = 0;//------------max mark
            //        failcount = 0;//--------individual fail cnt

            //        double total = 0;
            //        stud = 0;
            //        for (int col = 7; col < 7 + count; col++)
            //        {
            //            if (stud < ds.Tables[0].Rows.Count)//'-------new
            //            {
            //                examdate = ds.Tables[0].Rows[stud]["exam_date"].ToString();
            //                exam_code = ds.Tables[0].Rows[stud]["exam_code"].ToString();
            //                min_mark = ds.Tables[0].Rows[stud]["min_mark"].ToString();
            //                subjectno = ds.Tables[0].Rows[stud]["subject_no"].ToString();
            //            }
            //            if ((FpEntry.Sheets[0].Cells[res, col].Text == string.Empty) || FpEntry.Sheets[0].Cells[res, col].Text == null)
            //            {
            //                //EL = 1;
            //                //FpEntry.Sheets[0].Cells[res, col].Text = "EL";
            //                FpEntry.Sheets[0].Cells[res, col].HorizontalAlign = HorizontalAlign.Center;
            //            }

            //            ds2.Tables[0].DefaultView.RowFilter = "roll='" + rol_no + "' and subject_no='" + subjectno + "'";
            //            dvindstud = ds2.Tables[0].DefaultView;
            //            if (dvindstud.Count > 0)
            //            {
            //                mark = Convert.ToDouble(Convert.ToString(dvindstud[0]["mark"]));
            //                atten = Convert.ToString(dvindstud[0]["mark"]);
            //                EL = 0;
            //                //'--------------------------optim-----------------------------------
            //                if ((mark.ToString() != "") || (mark != null))
            //                {
            //                    FpEntry.Sheets[0].Cells[res, col].Text = mark.ToString();
            //                    FpEntry.Sheets[0].Cells[res, col].HorizontalAlign = HorizontalAlign.Center;
            //                    if ((Convert.ToDouble(mark) >= 0) && ((Convert.ToDouble(mark)) < (Convert.ToDouble(resminmrk))))
            //                    {
            //                        //  failcount++;
            //                        FpEntry.Sheets[0].Cells[res, col].ForeColor = Color.Red;
            //                        FpEntry.Sheets[0].Cells[res, col].Font.Underline = true;
            //                        FpEntry.Sheets[0].Cells[res, col].Font.Name = "Book Antiqua";
            //                        FpEntry.Sheets[0].Cells[res, col].Font.Size = FontUnit.Medium;
            //                        FpEntry.Sheets[0].Cells[res, col].Tag = "1";//for fail student
            //                    }
            //                    if ((((Convert.ToDouble(mark)) < (Convert.ToDouble(resminmrk)))) && Convert.ToString(mark) != "-2" && Convert.ToString(mark) != "-3")
            //                    {
            //                        failcount++;
            //                        FpEntry.Sheets[0].Cells[res, col].Tag = "1";//for fail student
            //                    }
            //                    //'----------------------------switch case----------------------
            //                    switch (atten)
            //                    {
            //                        case "-1":
            //                            atten = "AAA";
            //                            break;
            //                        case "-2":
            //                            atten = "EL";
            //                            break;
            //                        case "-3":
            //                            atten = "EOD";
            //                            break;
            //                        case "-4":
            //                            atten = "ML";
            //                            break;
            //                        case "-5":
            //                            atten = "SOD";
            //                            break;
            //                        case "-6":
            //                            atten = "NSS";
            //                            break;
            //                        case "-7":
            //                            atten = "NJ";
            //                            break;
            //                        case "-8":
            //                            atten = "S";
            //                            break;
            //                        case "-9":
            //                            atten = "L";
            //                            break;
            //                        case "-10":
            //                            atten = "NCC";
            //                            break;
            //                        case "-11":
            //                            atten = "HS";
            //                            break;
            //                        case "-12":
            //                            atten = "PP";
            //                            break;
            //                        case "-13":
            //                            atten = "SYOD";
            //                            break;
            //                        case "-14":
            //                            atten = "COD";
            //                            break;
            //                        case "-15":
            //                            atten = "OOD";
            //                            break;
            //                        case "-16":
            //                            atten = "OD";
            //                            break;
            //                        case "-17":
            //                            atten = "LA";
            //                            break;
            //                        //*********Added by Subburaj21.08.2014**********//
            //                        case "-18":
            //                            atten = "RAA";
            //                            break;
            //                        //*******End***********//
            //                    }

            //                    FpEntry.Sheets[0].Cells[res, col].Text = atten.ToString();
            //                    FpEntry.Sheets[0].Cells[res, col].HorizontalAlign = HorizontalAlign.Center;

            //                    //'-----------------putting total---------------------------------
            //                    if ((mark >= 0) && (Convert.ToString(mark) != string.Empty))
            //                    {
            //                        total = total + mark;
            //                        sub_max_mark = sub_max_mark + Convert.ToInt32(resmaxmrk);

            //                    }
            //                    FpEntry.Sheets[0].Cells[res, totalcount].HorizontalAlign = HorizontalAlign.Center;
            //                    FpEntry.Sheets[0].Cells[res, totalcount].Text = total.ToString();

            //                    //-----------------------putting percent------------------------------

            //                    percent = Convert.ToDouble((Convert.ToDouble(total) / sub_max_mark) * 100);
            //                    if ((Convert.ToString(percent) == "NaN") || (Convert.ToString(percent) == "Infinity"))
            //                    {
            //                        //  FpEntry.Sheets[0].Cells[res, percentcount].Text = "0";
            //                        percent = 0;
            //                    }
            //                    FpEntry.Sheets[0].Cells[res, percentcount].Text = Convert.ToDouble(Math.Round(percent, 2)).ToString();
            //                    FpEntry.Sheets[0].Cells[res, percentcount].HorizontalAlign = HorizontalAlign.Center;
            //                }
            //                stud++;
            //            }
            //            if ((FpEntry.Sheets[0].Cells[res, col].Text == string.Empty) || FpEntry.Sheets[0].Cells[res, col].Text == null)
            //            {
            //                //FpEntry.Sheets[0].Cells[res, col].Text = "EL";
            //                FpEntry.Sheets[0].Cells[res, col].HorizontalAlign = HorizontalAlign.Center;
            //            }

            //            if (Isfirst == false)
            //            {
            //                hat.Clear();
            //                // added by sridhar 27 aug 2014  start
            //                string secss = "";
            //                if (ddlSec.Enabled == true)
            //                {
            //                    secss = ddlSec.SelectedItem.Text.ToString();
            //                }
            //                else
            //                {
            //                    secss = "";
            //                }

            //                if (secss.ToString().Trim() == "-1" || secss.ToString().Trim() == "" || secss.ToString().Trim() == null || secss.ToString().Trim() == "All")
            //                {
            //                    secss = "";  // added by sridhar aug 2014
            //                }
            //                else
            //                {
            //                    secss = ddlSec.SelectedItem.Text.ToString(); // added by sridhar aug 2014
            //                }

            //                // added by sridhar 27 aug 2014  ----------end
            //                hat.Add("exam_code", exam_code.ToString());
            //                hat.Add("min_marks", min_mark.ToString());
            //                hat.Add("section", secss);

            //                ds4 = dacces.select_method("Proc_All_Subject_Details", hat, "sp");

            //                //'------------------------------------------class avg---------------------------
            //                if (IsFirstcol == false)
            //                {
            //                    FpEntry.Sheets[0].RowCount = FpEntry.Sheets[0].RowCount + 1;
            //                    classaverage = FpEntry.Sheets[0].RowCount - 1;
            //                    FpEntry.Sheets[0].SetText(classaverage, 0, "Class Average");
            //                    FpEntry.Sheets[0].Rows[FpEntry.Sheets[0].RowCount - 1].Border.BorderColor = Color.Black;
            //                    FpEntry.Sheets[0].SpanModel.Add(FpEntry.Sheets[0].RowCount - 1, 0, 1, 7);
            //                }
            //                total_pass_fail = Convert.ToInt32(ds4.Tables[1].Rows[0]["PASS_COUNT"]) + Convert.ToInt32(ds4.Tables[2].Rows[0]["FAIL_COUNT"]);
            //                double cal_avg = Convert.ToDouble(ds4.Tables[0].Rows[0]["SUM"]) / Convert.ToDouble(total_pass_fail);
            //                cal_avg = Math.Round(cal_avg, 2);

            //                FpEntry.Sheets[0].Cells[classaverage, col].Text = cal_avg.ToString();
            //                FpEntry.Sheets[0].Cells[classaverage, col].HorizontalAlign = HorizontalAlign.Center;

            //                //'-------------------------------------------passperc
            //                if (IsFirstcol == false)
            //                {
            //                    FpEntry.Sheets[0].RowCount = FpEntry.Sheets[0].RowCount + 1;
            //                    Passpercent1 = FpEntry.Sheets[0].RowCount - 1;
            //                    FpEntry.Sheets[0].SetText(FpEntry.Sheets[0].RowCount - 1, 0, "Percentage Of pass");
            //                    FpEntry.Sheets[0].SpanModel.Add(FpEntry.Sheets[0].RowCount - 1, 0, 1, 7);
            //                    FpEntry.Sheets[0].Rows[FpEntry.Sheets[0].RowCount - 1].Border.BorderColor = Color.Black;
            //                }
            //                //double pass_perc = (Convert.ToDouble(ds4.Tables[1].Rows[0]["PASS_COUNT"]) / Convert.ToDouble(total_pass_fail)) * 100;
            //                double pass_perc = (Convert.ToDouble(ds4.Tables[1].Rows[0]["PASS_COUNT"]) / Convert.ToDouble(ds4.Tables[8].Rows[0]["PRESENT_COUNT"])) * 100;
            //                pass_perc = Math.Round(pass_perc, 2);
            //                FpEntry.Sheets[0].Cells[Passpercent1, col].Text = pass_perc.ToString();
            //                FpEntry.Sheets[0].Cells[Passpercent1, col].HorizontalAlign = HorizontalAlign.Center;

            //                //'-----------------------------------------staff signature
            //                if (IsFirstcol == false)
            //                {
            //                    FpEntry.Sheets[0].RowCount += 1;
            //                    signat = FpEntry.Sheets[0].RowCount - 1;
            //                    FpEntry.Sheets[0].SetText(signat, 0, "Staff Signature");
            //                    FpEntry.Sheets[0].SpanModel.Add(FpEntry.Sheets[0].RowCount - 1, 0, 1, 7);
            //                    FpEntry.Sheets[0].Rows[FpEntry.Sheets[0].RowCount - 1].Border.BorderColor = Color.Black;
            //                }
            //                string staff = "";

            //                if (sections.ToString() == "All" || sections.ToString() == "" || sections.ToString() == "-1")
            //                {
            //                    strsec = "";
            //                }
            //                else
            //                {
            //                    strsec = " and exam_type.sections='" + sections.ToString() + "'";
            //                }
            //                if ((subno != "") && (criteria_no != ""))
            //                {
            //                    temp = GetFunction("Select distinct staff_code from result,exam_type,criteriaforinternal,registration where registration.roll_no=result.roll_no and cc=0 and delflag=0 and exam_flag<>'DEBAR' and criteriaforinternal.criteria_no = exam_type.criteria_no and exam_type.exam_code = result.exam_code and exam_type.batch_year =" + ddlBatch.SelectedValue.ToString() + " and exam_type.subject_no =" + subjectno + " " + strsec + " and exam_type.criteria_no =" + criteria_no + "");
            //                    if (temp != "")
            //                    {

            //                        staff = GetFunction("select nameacr from staff_appl_master where appl_no in(select distinct  appl_no from staffmaster where staff_code = '" + temp + "')");
            //                    }
            //                    if (staff == "" && (temp) != "")
            //                    {
            //                        staff = GetFunction("select staff_name from staffmaster where staff_code = '" + temp + "'");
            //                    }
            //                    FpEntry.Sheets[0].SetText(signat, col, staff);
            //                }
            //            }
            //            IsFirstcol = true;
            //        }//'--------------------end col loop
            //        Isfirst = true;
            //        //'---------------------------------------------display the result----------------


            //        if (percent.ToString() == "NaN")
            //        {
            //            percent = 0;
            //        }

            //        if (EL == 0)
            //        {
            //            if (failcount == 0)
            //            {
            //                FpEntry.Sheets[0].Cells[res, resultcount].Text = "PASS";
            //                hat.Clear();
            //                hat.Add("RollNumber", rol_no.ToString());
            //                hat.Add("criteria_no", criteria_no.ToString());
            //                hat.Add("Total", total.ToString());
            //                hat.Add("avg", percent.ToString());
            //                hat.Add("rank", "");
            //                int o = dacces.insert_method("INSERT_RANK", hat, "sp");
            //            }
            //            else
            //            {
            //                FpEntry.Sheets[0].Cells[res, resultcount].Text = "FAIL";
            //            }
            //        }

            //        //'----------------------------rank-----------------------------------------
            //        double temp_rank = 0;
            //        int zx = 1;
            //        ra_nk = 1;
            //        ds3 = dacces.select_method_wo_parameter("SELECT_RANK", "sp");

            //        if (ds3.Tables[0].Rows.Count != 0)
            //        {
            //            //----------------------new rank 030412
            //            for (int rank = 0; rank < ds3.Tables[0].Rows.Count; rank++)
            //            {
            //                if (temp_rank == 0)
            //                {
            //                    ra_nk = 1;
            //                    hat.Clear();
            //                    hat.Add("RollNumber", ds3.Tables[0].Rows[rank]["Rollno"].ToString());
            //                    hat.Add("criteria_no", criteria_no.ToString());
            //                    hat.Add("Total", Convert.ToString(total));
            //                    hat.Add("avg", Convert.ToString(percent));
            //                    hat.Add("rank", ra_nk.ToString());
            //                    int o = dacces.insert_method("INSERT_RANK", hat, "sp");
            //                    temp_rank = double.Parse(ds3.Tables[0].Rows[rank]["Total"].ToString());
            //                }
            //                else if (temp_rank != 0)
            //                {
            //                    if (temp_rank > double.Parse(ds3.Tables[0].Rows[rank]["Total"].ToString()))
            //                    {
            //                        //   ra_nk += 1;
            //                        ra_nk = zx;
            //                        hat.Clear();
            //                        hat.Add("RollNumber", ds3.Tables[0].Rows[rank]["Rollno"].ToString());
            //                        hat.Add("criteria_no", criteria_no.ToString());
            //                        hat.Add("Total", Convert.ToString(total));
            //                        hat.Add("avg", Convert.ToString(percent));
            //                        hat.Add("rank", ra_nk.ToString());
            //                        int o = dacces.insert_method("INSERT_RANK", hat, "sp");
            //                        temp_rank = double.Parse(ds3.Tables[0].Rows[rank]["Total"].ToString());

            //                    }
            //                    else if (temp_rank == double.Parse(ds3.Tables[0].Rows[rank]["Total"].ToString()))
            //                    {
            //                        hat.Clear();
            //                        hat.Add("RollNumber", ds3.Tables[0].Rows[rank]["Rollno"].ToString());
            //                        hat.Add("criteria_no", criteria_no.ToString());
            //                        hat.Add("Total", Convert.ToString(total));
            //                        hat.Add("avg", Convert.ToString(percent));
            //                        hat.Add("rank", ra_nk.ToString());
            //                        int o = dacces.insert_method("INSERT_RANK", hat, "sp");
            //                        temp_rank = double.Parse(ds3.Tables[0].Rows[rank]["Total"].ToString());
            //                    }
            //                }
            //                zx++;
            //            }
            //            //--------------------------end 
            //        }

            //        Boolean flagrank = false;

            //        //'---------------display the rank----------------------------


            //        //if (flagrank == false)
            //        //{
            //        //    if (ds3.Tables[0].Rows.Count != 0)
            //        //    {
            //        //        ds3 = dacces.select_method_wo_parameter("SELECT_RANK", "sp");
            //        //        int rank_row_count = 0;
            //        //        for (int i = 0; i < ds1.Tables[0].Rows.Count; i++)
            //        //        {
            //        //            if (rank_row_count < ds3.Tables[1].Rows.Count)
            //        //            {
            //        //                if (ds3.Tables[1].Rows[rank_row_count]["Rollno"].ToString() == ds1.Tables[0].Rows[i]["RollNumber"].ToString())
            //        //                {
            //        //                    FpEntry.Sheets[0].Cells[i + 1, rankcount].Text = ds3.Tables[1].Rows[rank_row_count]["Rank"].ToString();
            //        //                    FpEntry.Sheets[0].Cells[i + 1, rankcount].HorizontalAlign = HorizontalAlign.Center;
            //        //                    rank_row_count++;
            //        //                }
            //        //            }
            //        //        }
            //        //    }
            //        //}
            //        //flagrank = true;

            //        //'-----------------------------------new end------------------------


            //    }
            //    //  }
            //    //catch
            //    //{
            //    //    Buttontotal.Visible = false;
            //    //    lblrecord.Visible = false;
            //    //    DropDownListpage.Visible = false;
            //    //    TextBoxother.Visible = false;
            //    //    lblpage.Visible = false;
            //    //    TextBoxpage.Visible = false;
            //    //    FpEntry.Visible = false;


            //    //    lblnorec.Visible = true;
            //    //}
            //}
            #endregion Hidden
            //uncommented by prabha 
            #region Hidden

            ds3 = dacces.select_method_wo_parameter("select dense_Rank() over(order by total desc) rank,rollno,total from rank order by total desc", "Text");
            for (int res = 1; res < Convert.ToInt32(grdover.Rows.Count); res++)
            {
                
                rol_no = grdover.Rows[res].Cells[2].Text;
                ds3.Tables[0].DefaultView.RowFilter = "Rollno='" + rol_no + "'";
                DataView dvrank = ds3.Tables[0].DefaultView;
                if (dvrank.Count > 0)
                {
                    

                    

                    Label lblrank=grdover.Rows[res].Cells[0].FindControl("lblresult") as Label;
                    lblrank.Text=dvrank[0]["Rank"].ToString();
                    
                    //rank[res - 1] = dvrank[0]["Rank"].ToString();
                }
                else
                {
                    
                    Label lblrank = grdover.Rows[res].Cells[0].FindControl("lblresult") as Label;
                    lblrank.Text = "";
                }
            }

            #endregion Hidden
        }
        catch
        {
        }
        //===============
    }

    public double findgrade(string rol_no, int semval)
    {
        int sem = semval;
        double gpacal = 0.0;
        double gpacal2 = 0.0;
        double examsys = 0.0;
        double gpa = 0.0;
        double grpoints = 0.0;
        double grcredit = 0.0;
        double cgpa1 = 0.0;

        double gpa1 = 0.0;
        double grcredit1 = 0.0;
        string sql = "select exam_system,first_year_nonsemester from ndegree where degree_code=" + ddlBranch.SelectedValue.ToString() + " and batch_year=" + ddlBatch.SelectedValue.ToString() + "";
        con.Close();
        con.Open();
        SqlCommand cgpa = new SqlCommand(sql, con);
        SqlDataReader cgpardr;
        cgpardr = cgpa.ExecuteReader();
        if (cgpardr.HasRows)
        {

            examsys = 0;
            while (cgpardr.Read())
            {

                if (examsys == 0.0)
                {
                    for (int i = 1; i <= sem; i++)
                    {

                        gpa = 0.0;
                        grpoints = 0.0;
                        grcredit = 0.0;
                        gpa1 = 0.0;
                        grcredit1 = 0.0;
                        int examcode = getunivcode(Convert.ToInt32(ddlBranch.SelectedValue.ToString()), i, Convert.ToInt32(ddlBatch.SelectedValue.ToString()));

                        string sql1 = " select mark_entry.*,maxtotal from Mark_Entry,Subject where Mark_Entry.Subject_No = Subject.Subject_No and Exam_Code = " + examcode + " and ltrim(rtrim(type))='' and  Attempts =1 and roll_no='" + rol_no + "'";
                        mycon.Close();
                        mycon.Open();
                        SqlCommand mark = new SqlCommand(sql1, mycon);
                        SqlDataReader markdr;
                        markdr = mark.ExecuteReader();
                        if (markdr.HasRows)
                        {

                            while (markdr.Read())
                            {
                                string mgrade = markdr["grade"].ToString();
                                if (mgrade != "")
                                {

                                    string sql2 = "select credit_points from grade_master where mark_grade= '" + mgrade + "' and degree_code= " + ddlBranch.SelectedValue.ToString() + "";
                                    mycon1.Close();
                                    mycon1.Open();
                                    SqlCommand credit = new SqlCommand(sql2, mycon1);
                                    SqlDataReader creditdr;
                                    creditdr = credit.ExecuteReader();
                                    if (creditdr.HasRows)
                                    {

                                        while (creditdr.Read())
                                        {
                                            grpoints = Convert.ToDouble(creditdr["credit_points"].ToString());
                                        }
                                    }
                                    else
                                    {
                                        grpoints = 0.0;
                                    }

                                }
                                int subno = Convert.ToInt32(markdr["subject_no"].ToString());
                                string sql3 = "select isnull(credit_points,' ') from subject where subject_no= " + subno + "";
                                setcon.Close();
                                setcon.Open();
                                SqlCommand credit1 = new SqlCommand(sql3, setcon);
                                SqlDataReader creditdr1;
                                creditdr1 = credit1.ExecuteReader();
                                if (creditdr1.HasRows)
                                {

                                    while (creditdr1.Read())
                                    {
                                        grcredit = Convert.ToDouble(creditdr1[0].ToString());
                                        grcredit1 = grcredit1 + grcredit;
                                    }
                                }
                                else
                                {
                                    grcredit = 0.0;
                                }
                                gpa = grpoints * grcredit;
                                gpa1 = gpa1 + gpa;

                            }
                        }
                        if (grcredit1 != 0.0)
                        {
                            gpacal = gpa1 / grcredit1;
                        }
                        else
                        {
                            gpacal = 0.0;
                        }

                        gpacal2 = gpacal2 + gpacal;


                    }

                    cgpa1 = gpacal2 / sem;




                }


                else
                {
                    for (int j = 1; j <= sem; j++)
                    {
                        if (j == 2)
                        {
                            break;
                        }
                        gpa = 0.0;
                        grpoints = 0.0;
                        grcredit = 0.0;
                        gpa1 = 0.0;
                        grcredit1 = 0.0;
                        int examcode = getunivcode(Convert.ToInt32(ddlBranch.SelectedValue.ToString()), j, Convert.ToInt32(ddlBatch.SelectedValue.ToString()));

                        string sql1 = " select mark_entry.*,maxtotal from Mark_Entry,Subject where Mark_Entry.Subject_No = Subject.Subject_No and Exam_Code = " + examcode + " and ltrim(rtrim(type))='' and  Attempts =1 and roll_no='" + rol_no + "'";
                        mycon.Close();
                        mycon.Open();
                        SqlCommand mark = new SqlCommand(sql1, mycon);
                        SqlDataReader markdr;
                        markdr = mark.ExecuteReader();
                        if (markdr.HasRows)
                        {

                            while (markdr.Read())
                            {
                                string mgrade = markdr["grade"].ToString();
                                if (mgrade == "")
                                {
                                    mgrade = "-";
                                    string sql2 = "select credit_points from grade_master where mark_grade= '" + mgrade + "' and degree_code= " + ddlBranch.SelectedValue.ToString() + "";
                                    mycon1.Close();
                                    mycon1.Open();
                                    SqlCommand credit = new SqlCommand(sql2, mycon1);
                                    SqlDataReader creditdr;
                                    creditdr = credit.ExecuteReader();
                                    if (creditdr.HasRows)
                                    {

                                        while (creditdr.Read())
                                        {
                                            grpoints = Convert.ToDouble(creditdr["credit_points"].ToString());
                                        }
                                    }
                                    else
                                    {
                                        grpoints = 0.0;
                                    }

                                }
                                int subno = Convert.ToInt32(markdr["subject_no"].ToString());
                                string sql3 = "select isnull(credit_points,' ') from subject where subject_no= " + subno + "";
                                setcon.Close();
                                setcon.Open();
                                SqlCommand credit1 = new SqlCommand(sql3, setcon);
                                SqlDataReader creditdr1;
                                creditdr1 = credit1.ExecuteReader();
                                if (creditdr1.HasRows)
                                {

                                    while (creditdr1.Read())
                                    {
                                        grcredit = Convert.ToDouble(creditdr1[0].ToString());
                                        grcredit1 = grcredit1 + grcredit;
                                    }
                                }
                                else
                                {
                                    grcredit = 0.0;
                                }
                                gpa = grpoints * grcredit;
                                gpa1 = gpa1 + gpa;

                            }

                            gpacal = gpa1 / grcredit1;

                            gpacal2 = gpacal2 + gpacal;

                        }
                    }

                    cgpa1 = gpacal2 / (sem - 1);


                }
            }

        }

        return cgpa1;

    }

    public int getunivcode(int degreecode, int sem, int batch)
    {
        int x = -1;
        string sqlcode = "Select Exam_Code from Exam_Details where Degree_Code = " + degreecode + " and Current_Semester = " + sem + " and Batch_Year = " + batch + "";
        mycon1.Close();
        mycon1.Open();
        SqlCommand code = new SqlCommand(sqlcode, mycon1);
        SqlDataReader codedr;
        codedr = code.ExecuteReader();
        if (codedr.HasRows)
        {
            while (codedr.Read())
            {
                x = Convert.ToInt32(codedr["exam_code"].ToString());
            }
        }
        return x;
    }

    public static bool IsNumeric(string s)
    {
        double Result;
        return double.TryParse(s, out Result);
    }

    public string result(string st)
    {
        con.Close();
        con.Open();
        string result = "";
        SqlDataReader drr;
        SqlCommand commmand = new SqlCommand(st, con);
        drr = commmand.ExecuteReader();
        if (drr.HasRows == true)
        {
            while (drr.Read())
            {
                if (drr[0] != null)
                {
                    result = drr[0].ToString();
                }
                else
                {
                    result = "0";
                }
            }
        }
        else if (drr.HasRows == false)
        {
            result = "";
        }
        return result;
    }

    public double roundresult(string nstr)
    {
        con.Close();
        con.Open();
        double roundresult;
        if ((nstr) != "")
        {
            double ag1;
            ag1 = Convert.ToDouble(Math.Round(Convert.ToDecimal(nstr), 2));
            roundresult = ag1;
        }
        else
        {
            roundresult = 0;
        }
        return roundresult;
    }
    //*****
    private string Splitter(string p, string p_2)
    {
        throw new NotImplementedException();
    }

    protected void ddlSemYr_SelectedIndexChanged(object sender, EventArgs e)
    {
        clear();
        //ddlTest.Items.Clear();
        if (!Page.IsPostBack == false)
        {
            ddlSec.Items.Clear();
        }
        bindsec();
        GetTest();
    }

    public void getnoofpresent(string rollno, DateTime fromdate, DateTime todate, string degree, int semester, string colege_code, out double noofpresent, out double noofabsent, out double noofHalfDay, out double noofWorkingDays, out long noofODHours)
    {
        string tempvalue = "-1";
        int ObtValue = -1;
        long LngOD = 0;
        long LngML = 0;
        long LngNSS = 0;
        long LngHS = 0;
        long LngNCC = 0;
        long LngL = 0;
        long LngSOD = 0;
        DateTime dummydate;

        double Present = 0;
        double Absent = 0;
        double halfday = 0;
        double workingdays = 0;
        long my = 0;
        long fmyear = (Convert.ToInt64(fromdate.ToString("yyyy")) * 12) + Convert.ToInt64(fromdate.ToString("MM"));
        long tmyear = (Convert.ToInt64(todate.ToString("yyyy")) * 12) + Convert.ToInt64(todate.ToString("MM"));

        int hdflag = 0;
        int unmark = 0;
        int wdflag = 0;
        int fir_ctr = 0;
        int hhday = 0;
        int hdflag1 = 0;
        int unmark1 = 0;
        int wdflag1 = 0;
        int sec_ctr = 0;
        SqlCommand cmdatten = new SqlCommand();
        Boolean absentsetting = false;
        {
            cmdatten.CommandText = "select linkvalue from inssettings where college_code=" + colege_code.ToString() + " and linkname='Attendance Settings'";
            cmdatten.Connection = getdaycon;
            getdaycon.Open();
            SqlDataReader rlink = cmdatten.ExecuteReader();
            if (rlink.Read())
            {
                if (rlink.GetValue(0).ToString() == "1")
                    absentsetting = true;
                else
                    absentsetting = false;
            }
            else
            {
                absentsetting = false;
            }
            rlink.Close();
            getdaycon.Close();
        }
        int i = 0;
        if (absentsetting == true)
        {
            SqlCommand cmdatten1 = new SqlCommand();
            cmdatten1.CommandText = "select * from PeriodAttndSchedule where degree_code = " + degree + " and semester=" + semester + "";
            cmdatten1.Connection = getdaycon;
            getdaycon.Open();
            SqlDataReader rperiod = cmdatten1.ExecuteReader();
            if (rperiod.Read())
            {
                dummydate = fromdate;
                my = 0;
                while (dummydate <= todate)
                {
                    my = (Convert.ToInt64(dummydate.ToString("MM")) + (Convert.ToInt64(dummydate.ToString("yyyy"))) * 12);
                    cmdatten.CommandText = "select * from attendance where roll_no='" + rollno + "' and month_year =" + my + "";
                    cmdatten.Connection = getdaycon1;
                    getdaycon1.Open();
                    SqlDataReader ratt = cmdatten.ExecuteReader();
                    if (ratt.Read())
                    {
                        hdflag = 0;
                        unmark = 0;
                        wdflag = 0;
                        fir_ctr = 0;
                        hhday = 0;
                        for (i = 1; i <= Convert.ToInt32(rperiod["no_of_hrs_I_half_day"].ToString()); i++)
                        {
                            string value = ratt[("d" + dummydate.Day.ToString("") + "d" + i.ToString())].ToString();
                            if (value != null && value != "0" && value != "7" && value != "")
                            {
                                if (tempvalue != value)
                                {
                                    tempvalue = value;
                                    cmdatten.CommandText = "select * from AttMasterSetting  where LeaveCode= " + value + " and collegecode=" + colege_code + "";
                                    cmdatten.Connection = getdaycon2;
                                    getdaycon2.Open();
                                    SqlDataReader rleave = cmdatten.ExecuteReader();
                                    if (rleave.Read())
                                        ObtValue = Convert.ToInt32(rleave["CalcFlag"].ToString());
                                    rleave.Close();
                                    getdaycon2.Close();
                                    if (ObtValue == -1)
                                    {
                                        ratt.Close();
                                    }
                                }
                                if (ObtValue == 1)
                                {
                                    fir_ctr = fir_ctr + 1;
                                    wdflag = 1;
                                }
                                else if (ObtValue == 2)
                                    wdflag = 0;
                                else if (ObtValue == 0)
                                    wdflag = 1;
                                if (value == "3")
                                    LngOD = LngOD + 1;
                                else if (value == "4")
                                    LngML = LngML + 1;
                                else if (value == "6")
                                    LngNSS = LngNSS + 1;
                                else if (value == "11")
                                    LngNCC = LngNCC + 1;
                                else if (value == "12")
                                    LngHS = LngHS + 1;
                                else if (value == "10")
                                    LngL = LngL + 1;
                                else if (value == "5")
                                    LngSOD = LngSOD + 1;
                            }
                            else if (value == "7")
                            {
                                hhday = 1;
                                wdflag = 1;
                            }
                            else
                                unmark = 1;
                        }
                        int k = i;
                        if (fir_ctr > (Convert.ToInt32(rperiod["no_of_hrs_I_half_day"]) - Convert.ToInt32(rperiod["min_pres_I_half_day"])) || wdflag == 0)
                            hdflag = 1;
                        else
                            hdflag = 0;
                        hdflag1 = 0;
                        unmark1 = 0;
                        wdflag1 = 0;
                        sec_ctr = 0;
                        for (i = k; i <= Convert.ToInt32(rperiod["no_of_hrs_per_day"].ToString()); i++)
                        {
                            string value = ratt[("d" + dummydate.Day.ToString() + "d" + i.ToString())].ToString();
                            if (value != null && value != "0" && value != "7" && value != "")
                            {
                                if (tempvalue != value)
                                {
                                    tempvalue = value;
                                    cmdatten.CommandText = "select * from AttMasterSetting  where LeaveCode='" + value + "'and collegecode='" + colege_code + "' ";
                                    cmdatten.Connection = getdaycon3;
                                    getdaycon3.Open();
                                    SqlDataReader rleave = cmdatten.ExecuteReader();
                                    if (rleave.Read())
                                        ObtValue = Convert.ToInt32(rleave["CalcFlag"].ToString());
                                    rleave.Close();
                                    getdaycon3.Close();
                                    if (ObtValue == -1)
                                    {
                                        ratt.Close();
                                    }
                                }
                                if (ObtValue == 1)
                                {
                                    sec_ctr = sec_ctr + 1;
                                    wdflag1 = 1;
                                }
                                else if (ObtValue == 2)
                                    wdflag1 = 0;
                                else if (ObtValue == 0)
                                    wdflag1 = 1;
                                if (value == "3")
                                    LngOD = LngOD + 1;
                                else if (value == "4")
                                    LngML = LngML + 1;
                                else if (value == "6")
                                    LngNSS = LngNSS + 1;
                                else if (value == "11")
                                    LngNCC = LngNCC + 1;
                                else if (value == "12")
                                    LngHS = LngHS + 1;
                                else if (value == "10")
                                    LngL = LngL + 1;
                                else if (value == "5")
                                    LngSOD = LngSOD + 1;
                            }
                            else if (value == "7")
                            {
                                hhday = 1;
                                wdflag1 = 1;
                            }
                            else if (value != "")
                                unmark1 = 1;
                        }
                        if (sec_ctr > (Convert.ToInt32(rperiod["no_of_hrs_II_half_day"].ToString()) - Convert.ToInt32(rperiod["min_pres_II_half_day"].ToString())) || wdflag1 == 0)
                            hdflag1 = 1;
                        else
                            hdflag1 = 0;

                        if (hdflag == 0 && hdflag1 == 0 && unmark == 0 && unmark1 == 0)
                        {
                            if (hhday == 1)
                                Present = Present + 0.5;
                            else
                                Present = Present + 1;
                        }
                        else if (hdflag == 1 && hdflag1 == 0 && unmark == 0 && unmark1 == 0 && hhday == 0)
                        {
                            halfday = halfday + 1;
                            Absent = Absent + 0.5;
                        }
                        else if (hdflag == 0 && hdflag1 == 1 && unmark == 0 && unmark1 == 0 && hhday == 0)
                        {
                            halfday = halfday + 1;
                            Absent = Absent + 0.5;
                        }
                        else if (hdflag == 1 && hdflag1 == 1 && unmark == 0 && unmark1 == 0 && wdflag == 1 && wdflag1 == 1)
                            Absent = Absent + 1;
                        else if (hdflag == 1 && hdflag1 == 0 && unmark == 0 && unmark1 == 0 && hhday == 1 && wdflag == 1 && wdflag1 == 1)
                            Absent = Absent + 0.5;
                        else if (hdflag == 0 && hdflag1 == 1 && unmark == 0 && unmark1 == 0 && hhday == 1 && wdflag == 1 && wdflag1 == 1)
                            Absent = Absent + 0.5;
                        if (wdflag == 1 || wdflag1 == 1 && unmark == 0 && unmark1 == 0)
                        {
                            if (hhday == 1)
                            {
                                if (wdflag == 1)
                                    workingdays = workingdays + 0.5;
                                else if (wdflag1 == 1)
                                    workingdays = workingdays + 0.5;
                            }
                            else
                            {
                                if (wdflag == 1)
                                    workingdays = workingdays + 1;
                                else if (wdflag1 == 1)
                                    workingdays = workingdays + 1;
                            }
                        }
                    }
                    hhday = 0;
                    dummydate = dummydate.AddDays(1);
                    ratt.Close();
                    getdaycon1.Close();
                }
            }
            rperiod.Close();
            getdaycon.Close();
        }
        else
        {
            con.Close();
            cmdatten.CommandText = "select * from PeriodAttndSchedule where degree_code = " + degree + " and semester=" + semester + "";
            cmdatten.Connection = con;
            con.Open();
            SqlDataReader rperiod = cmdatten.ExecuteReader();
            if (rperiod.Read())
            {
                dummydate = fromdate;
                my = 0;
                while (dummydate <= todate)
                {
                    my = (Convert.ToInt64(dummydate.ToString("MM")) + (Convert.ToInt64(dummydate.ToString("yyyy"))) * 12);
                    cmdatten.CommandText = "select * from attendance where roll_no='" + rollno + "' and month_year =" + my + "";
                    cmdatten.Connection = mycon;
                    mycon.Open();
                    SqlDataReader ratt = cmdatten.ExecuteReader();
                    if (ratt.Read())
                    {
                        hdflag = 0;
                        unmark = 0;
                        wdflag = 0;
                        fir_ctr = 0;
                        hhday = 0;
                        for (i = 1; i <= Convert.ToInt32(rperiod["no_of_hrs_I_half_day"].ToString()); i++)
                        {
                            string value = ratt[("d" + dummydate.Day.ToString() + "d" + i.ToString())].ToString();
                            if (value != null && value != "0 " && value != "7")
                            {
                                if (tempvalue != value)
                                {
                                    tempvalue = value;
                                    cmdatten.CommandText = "select * from AttMasterSetting LeaveCode='" + value + "'and collegecode='" + colege_code + "' ";
                                    cmdatten.Connection = mycon1;
                                    mycon1.Open();
                                    SqlDataReader rleave = cmdatten.ExecuteReader();
                                    if (rleave.Read())
                                        ObtValue = Convert.ToInt32(rleave["CalcFlag"].ToString());
                                    rleave.Close();
                                    mycon1.Close();
                                    if (ObtValue == -1)
                                    {
                                        ratt.Close();
                                    }
                                }
                                if (ObtValue == 1)
                                {
                                    fir_ctr = fir_ctr + 1;
                                    wdflag = 1;
                                }
                                else if (ObtValue == 2)
                                    wdflag = 0;
                                else if (ObtValue == 0)
                                    wdflag = 1;

                                if (value == "3")
                                    LngOD = LngOD + 1;
                                else if (value == "4")
                                    LngML = LngML + 1;
                                else if (value == "6")
                                    LngNSS = LngNSS + 1;
                                else if (value == "11")
                                    LngNCC = LngNCC + 1;
                                else if (value == "12")
                                    LngHS = LngHS + 1;
                            }
                            else if (value == "7")
                            {
                                hhday = 1;
                                wdflag = 1;
                            }
                            else
                                unmark = 1;
                        }
                        if (fir_ctr > (Convert.ToInt32(rperiod["no_of_hrs_I_half_day"]) - Convert.ToInt32(rperiod["min_pres_I_half_day"])) || wdflag == 0)
                            hdflag = 1;
                        else
                            hdflag = 0;
                        hdflag1 = 0;
                        unmark1 = 0;
                        wdflag1 = 0;
                        sec_ctr = 0;
                        int k = i;
                        for (i = k; i <= Convert.ToInt32(rperiod["no_of_hrs_per_day"].ToString()); i++)
                        {
                            string value = ratt[("d" + dummydate.Day.ToString() + "d" + i.ToString())].ToString();
                            if (value != null && value != "0" && value != "7")
                            {
                                if (tempvalue != value)
                                {
                                    tempvalue = value;
                                    cmdatten.CommandText = "select * from AttMasterSetting  where LeaveCode='" + value + "'and collegecode='" + colege_code + "' ";
                                    cmdatten.Connection = mycon1;
                                    mycon1.Open();
                                    SqlDataReader rleave = cmdatten.ExecuteReader();
                                    if (rleave.Read())
                                        ObtValue = Convert.ToInt32(rleave["CalcFlag"].ToString());
                                    rleave.Close();
                                    mycon1.Close();
                                    if (ObtValue == -1)
                                    {
                                        ratt.Close();
                                    }
                                }
                                if (ObtValue == 1)
                                {
                                    sec_ctr = sec_ctr + 1;
                                    wdflag1 = 1;
                                }
                                else if (ObtValue == 2)
                                    wdflag1 = 0;
                                else if (ObtValue == 0)
                                    wdflag1 = 1;
                                if (value == "3")
                                    LngOD = LngOD + 1;
                                else if (value == "4")
                                    LngML = LngML + 1;
                                else if (value == "6")
                                    LngNSS = LngNSS + 1;
                                else if (value == "11")
                                    LngNCC = LngNCC + 1;
                                else if (value == "12")
                                    LngHS = LngHS + 1;
                            }
                            else if (value == "7")
                            {
                                hhday = 1;
                                wdflag1 = 1;
                            }
                            else
                                unmark1 = 1;
                        }
                        if (sec_ctr > (Convert.ToInt32(rperiod["no_of_hrs_II_half_day"].ToString()) - Convert.ToInt32(rperiod["min_pres_II_half_day"].ToString())) || wdflag1 == 0)
                            hdflag1 = 1;
                        else
                            hdflag1 = 0;

                        if (hdflag == 0 && hdflag1 == 0 && unmark == 0 && unmark1 == 0)
                        {
                            if (hhday == 1)
                                Present = Present + 0.5;
                            else
                                Present = Present + 1;
                        }
                        else if (hdflag == 1 && hdflag1 == 0 && unmark == 0 && unmark1 == 0 && hhday == 0)
                        {
                            halfday = halfday + 1;
                            Absent = Absent + 0.5;
                        }
                        else if (hdflag == 0 && hdflag1 == 1 && unmark == 0 && unmark1 == 0 && hhday == 0)
                        {
                            halfday = halfday + 1;
                            Absent = Absent + 0.5;
                        }
                        else if (hdflag == 1 && hdflag1 == 1 && unmark == 0 && unmark1 == 0 && wdflag == 1 && wdflag1 == 1)
                            Absent = Absent + 1;
                        else if (hdflag == 1 && hdflag1 == 0 && unmark == 0 && unmark1 == 0 && hhday == 1 && wdflag == 1 && wdflag1 == 1)
                            Absent = Absent + 0.5;
                        else if (hdflag == 0 && hdflag1 == 1 && unmark == 0 && unmark1 == 0 && hhday == 1 && wdflag == 1 && wdflag1 == 1)
                            Absent = Absent + 0.5;
                        if (wdflag == 1 || wdflag1 == 1 && unmark == 0 && unmark1 == 0)
                        {
                            if (hhday == 1)
                            {
                                if (wdflag == 1)
                                    workingdays = workingdays + 0.5;
                                else if (wdflag1 == 1)
                                    workingdays = workingdays + 0.5;
                            }
                            else
                            {
                                if (wdflag == 1)
                                    workingdays = workingdays + 1;
                                else if (wdflag1 == 1)
                                    workingdays = workingdays + 1;
                            }
                        }
                    }
                    hhday = 0;
                    dummydate = dummydate.AddDays(1);
                    ratt.Close();
                    mycon.Close();
                }
            }
            rperiod.Close();
            con.Close();
        }
        noofpresent = Present;
        noofabsent = Absent;
        noofHalfDay = halfday;
        noofWorkingDays = workingdays;
        noofODHours = LngOD;
        long noofMLHours = LngML;
        long noofNSSHours = LngNSS;
        long noofHSHours = LngHS;
        long noofNCCHours = LngNCC;
        long noLeaveHours = LngL;
        long noSODHours = LngSOD;
        return;
    }

    //protected void letter()
    //{
    //    try
    //    {
    //        btnGo.Visible = false;
    //        Label4.Visible = true;
    //        FpEntry.SaveChanges();
    //        FpSpread1.Sheets[0].RowCount = 0;
    //        FpSpread1.Sheets[0].PageSize = 30;
    //        FpSpread1.CommandBar.Visible = true;
    //        FpSpread1.Sheets[0].DefaultStyle.Font.Name = "Book Antique";
    //        FpSpread1.Sheets[0].DefaultStyle.Font.Bold = false;
    //        FpSpread1.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
    //        FpSpread1.Sheets[0].ColumnHeader.Visible = false;
    //        string collnamenew1 = "";
    //        string address1 = "";
    //        string address2 = "";
    //        string address3 = "";
    //        string address = "";
    //        string pincode = "";
    //        string name = "";
    //        string rollno = "";
    //        string branch = ddlBranch.SelectedItem.Text;
    //        string degree = ddlDegree.SelectedItem.Text;
    //        string sem = ddlSemYr.SelectedValue;
    //        string sec = ddlSec.SelectedValue;
    //        //string test = chklstest.SelectedItem.Text;
    //        int semester = Convert.ToInt32(ddlSemYr.SelectedValue);
    //        string colege_code = Session["collegecode"].ToString();
    //        string degree1 = ddlBranch.SelectedValue;
    //        for (int j = 0; j < chklstest.Items.Count; j++)
    //        {
    //            if (chklstest.Items[j].Selected == true)
    //            {
    //                string criteria_no = chklstest.Items[j].Value.ToString();
    //                test = chklstest.Items[j].Text.ToString();
    //                for (int res = 0; res < Convert.ToInt32(FpEntry.Sheets[0].RowCount); res++)
    //                {
    //                    int isval = 0;
    //                    string s = FpEntry.Sheets[0].Cells[res, FpEntry.Sheets[0].ColumnCount - (Convert.ToInt32(Session[" spancount"].ToString()) + 4)].Text;

    //                    isval = Convert.ToInt32(FpEntry.Sheets[0].Cells[res, FpEntry.Sheets[0].ColumnCount - (Convert.ToInt32(Session[" spancount"].ToString()) + 4)].Value);
    //                    if (isval == 1)
    //                    {
    //                        FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 30;
    //                        FpSpread1.Sheets[0].ColumnCount = 8;
    //                        FpSpread1.Sheets[0].Columns[0].Width = 200;
    //                        FpSpread1.Sheets[0].Columns[1].Width = 150;
    //                        FpSpread1.Sheets[0].Columns[2].Width = 200;
    //                        FpSpread1.Sheets[0].Columns[3].Width = 120;
    //                        FpSpread1.Sheets[0].Columns[4].Width = 130;
    //                        FpSpread1.Sheets[0].Columns[7].Width = 100;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 30, 1, 1, 3);
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 29, 1, 1, 3);
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 28, 1, 1, 3);
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 27, 1, 1, 3);
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 30, 0, 4, 1);
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 25, 0, 1, 4);
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 24, 0, 1, 4);
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 23, 0, 1, 4);
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 22, 0, 1, 4);
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 22, 1, 2, 1);

    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 28, 6, 2, 1);

    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 26, 5, 1, 2);
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 25, 5, 1, 2);
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 24, 5, 1, 2);
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 23, 5, 1, 2);
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 22, 5, 1, 2);

    //                        //stamp
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 6].Border.BorderColor = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 6].Text = "Inland Letter";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 6].Text = "STAMP";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 6].VerticalAlign = VerticalAlign.Middle;
    //                        if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //                        {
    //                            string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo from collinfo where college_code=" + Session["collegecode"] + "";
    //                            SqlCommand collegecmd = new SqlCommand(college, con);
    //                            SqlDataReader collegename;
    //                            con.Close();
    //                            con.Open();
    //                            collegename = collegecmd.ExecuteReader();
    //                            if (collegename.HasRows)
    //                            {
    //                                while (collegename.Read())
    //                                {
    //                                    collnamenew1 = collegename["collname"].ToString();
    //                                    address1 = collegename["address1"].ToString();
    //                                    address2 = collegename["address2"].ToString();
    //                                    address3 = collegename["address3"].ToString();
    //                                    address = address1 + "-" + address2;
    //                                    pincode = collegename["pincode"].ToString();
    //                                }
    //                            }
    //                            con.Close();
    //                        }
    //                        MyImg mi = new MyImg();
    //                        mi.ImageUrl = "Handler/Handler2.ashx?";

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 0].CellType = mi;
    //                        FarPoint.Web.Spread.ImageCellType imgeve = new FarPoint.Web.Spread.ImageCellType();

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 0].Border.BorderColor = Color.White;

    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 26].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 26].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 25].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 24].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 23].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 22].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 21].Font.Size = FontUnit.Medium;

    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 21].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Text = collnamenew1;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Text = address;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Text = address3;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Text = "Pincode -" + pincode;
    //                        string fourthrow = "Sub:" + test + " " + "Performance Report";

    //                        string sixrow = degree + " " + "[" + branch + "]" + " " + "Semester" + ":" + sem;
    //                        string seventhrow = "has secured the following marks in" + " " + test;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 0].Text = "Dear Parents";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 0].Text = fourthrow;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].Text = sixrow;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].Text = seventhrow;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Border.BorderColor = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Border.BorderColor = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Border.BorderColor = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Border.BorderColor = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Text = "Subject";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Text = "Min mark";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Text = "Marks obtained";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Text = "Result";

    //                        {
    //                            Label4.Visible = false;
    //                            btnGo.Visible = true;
    //                            rol_no = FpEntry.Sheets[0].Cells[res, 0].Text;
    //                            name = FpEntry.Sheets[0].Cells[res, 2].Text;
    //                            string fifthrow = "Your son/daughter" + " " + "" + name + " " + "[" + rol_no + "]" + "studying in";
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 0].Text = fifthrow;
    //                            int count = 0;
    //                            for (int colm = 0; colm <= FpEntry.Sheets[0].ColumnCount - 1; colm++)
    //                            {
    //                                if (FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note != "")
    //                                {
    //                                    con.Close();
    //                                    con.Open();
    //                                    string subjname = "";
    //                                    string result = "";
    //                                    string minmark = FpEntry.Sheets[0].Cells[0, colm].Note;
    //                                    string maxmark = FpEntry.Sheets[0].Cells[1, colm].Note;

    //                                    string getmark = FpEntry.Sheets[0].Cells[res, colm].Text;
    //                                    string celltag1 = FpEntry.Sheets[0].Cells[res, colm].Tag + "";
    //                                    if (celltag1 == "1")
    //                                    {
    //                                        result = "Fail";
    //                                    }
    //                                    else
    //                                    {
    //                                        result = "Pass";
    //                                    }
    //                                    string subject_no1 = FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note;
    //                                    string examdate1 = FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Tag + "";

    //                                    string subname = "select subject_name,acronym from subject where subject_no=" + subject_no1 + "";
    //                                    SqlDataAdapter da = new SqlDataAdapter(subname, con);
    //                                    DataSet ds = new DataSet();
    //                                    da.Fill(ds);
    //                                    con.Close();
    //                                    con.Open();
    //                                    if (ds.Tables[0].Rows.Count > 0)
    //                                    {
    //                                        subjname = ds.Tables[0].Rows[0]["subject_name"].ToString();
    //                                    }
    //                                    int rowcnt = FpSpread1.Sheets[0].RowCount - 20;
    //                                    FpSpread1.Sheets[0].Cells[rowcnt + count, 1].HorizontalAlign = HorizontalAlign.Center;
    //                                    FpSpread1.Sheets[0].Cells[rowcnt + count, 2].HorizontalAlign = HorizontalAlign.Center;
    //                                    FpSpread1.Sheets[0].Cells[rowcnt + count, 0].Border.BorderColor = Color.Black;
    //                                    FpSpread1.Sheets[0].Cells[rowcnt + count, 1].Border.BorderColor = Color.Black;
    //                                    FpSpread1.Sheets[0].Cells[rowcnt + count, 2].Border.BorderColor = Color.Black;
    //                                    FpSpread1.Sheets[0].Cells[rowcnt + count, 3].Border.BorderColor = Color.Black;
    //                                    FpSpread1.Sheets[0].Cells[rowcnt + count, 0].Text = subjname;
    //                                    FpSpread1.Sheets[0].Cells[rowcnt + count, 1].Text = minmark;
    //                                    FpSpread1.Sheets[0].Cells[rowcnt + count, 2].Text = getmark + "/" + maxmark;
    //                                    FpSpread1.Sheets[0].Cells[rowcnt + count, 3].Text = result;
    //                                    count++;
    //                                }
    //                            }
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 6, 5, 1, 2);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 5, 5, 1, 2);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 4, 5, 1, 2);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 3, 5, 1, 2);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, 5, 1, 2);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 5, 1, 2);

    //                            //To Address.....
    //                            string Toaddress = "select parent_name as pname,parent_addressP as padd1,streetc as padd2,parent_pincodeP as ppin,districtc as pdistrict from applyn where app_no in (select app_no from registration where roll_no='" + rol_no + "')";
    //                            SqlCommand Toaddcmd = new SqlCommand(Toaddress, con);
    //                            SqlDataReader Toaddreader;
    //                            con.Close();
    //                            con.Open();
    //                            string toaddname = "";
    //                            string toadd1 = "";
    //                            string toadd2 = "";
    //                            string topin = "";
    //                            string todistrict = "";
    //                            Toaddreader = Toaddcmd.ExecuteReader();
    //                            if (Toaddreader.HasRows)
    //                            {
    //                                while (Toaddreader.Read())
    //                                {
    //                                    toaddname = Toaddreader["pname"].ToString();
    //                                    toadd1 = Toaddreader["padd1"].ToString();
    //                                    toadd2 = Toaddreader["padd2"].ToString();
    //                                    topin = Toaddreader["ppin"].ToString();
    //                                    todistrict = Toaddreader["pdistrict"].ToString();
    //                                }
    //                            }
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 25, 5, 1, 2);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 24, 5, 1, 2);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 23, 5, 1, 2);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 22, 5, 1, 2);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 21, 5, 1, 2);
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 5].Border.BorderColor = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 5].Border.BorderColorBottom = Color.White;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 5].Border.BorderColor = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 5].Border.BorderColorBottom = Color.White;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 5].Border.BorderColorTop = Color.White;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Border.BorderColor = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Border.BorderColorBottom = Color.White;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Border.BorderColorTop = Color.White;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Border.BorderColor = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Border.BorderColorBottom = Color.White;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Border.BorderColorTop = Color.White;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].Border.BorderColor = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].Border.BorderColorTop = Color.White;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 5].Text = " " + "To";
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 5].Text = " " + toaddname;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Text = " " + toadd1;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Text = " " + toadd2;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].Text = " " + todistrict + "-" + topin;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 5].Font.Bold = true;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 5].Font.Size = FontUnit.Medium;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 5].Font.Bold = true;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 5].Font.Size = FontUnit.Medium;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 5].Font.Bold = true;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 5].Font.Size = FontUnit.Medium;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Font.Bold = true;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Font.Size = FontUnit.Medium;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Font.Bold = true;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Font.Size = FontUnit.Medium;

    //                            double nop = 0;
    //                            double noa = 0;
    //                            double noh = 0;
    //                            double now1 = 0;
    //                            double perc = 0;
    //                            double pres = 0;
    //                            long nood = 0;
    //                            string date1 = "";
    //                            string date2 = "";
    //                            string datefrom = "";
    //                            string dateto = "";
    //                            date1 = TextBox2.Text.ToString();
    //                            string[] splitd = date1.Split(new Char[] { '/' });
    //                            datefrom = splitd[1].ToString() + "/" + splitd[0].ToString() + "/" + splitd[2].ToString();
    //                            date2 = TextBox1.Text.ToString();
    //                            string[] splitd1 = date2.Split(new Char[] { '/' });
    //                            dateto = splitd1[1].ToString() + "/" + splitd1[0].ToString() + "/" + splitd1[2].ToString();
    //                            DateTime dt1 = Convert.ToDateTime(datefrom.ToString());
    //                            DateTime dt2 = Convert.ToDateTime(dateto.ToString());
    //                            TimeSpan t = dt2.Subtract(dt1);
    //                            getnoofpresent(rol_no, dt1, dt2, degree1, semester, colege_code, out  nop, out  noa, out noh, out now1, out nood);
    //                            pres = nop + (noh / 2);
    //                            if (now1 != 0)
    //                                perc = (pres / now1) * 100;

    //                            decimal avgstudent1 = Convert.ToDecimal(perc);
    //                            decimal avgstudent2 = Math.Round(avgstudent1, 2);
    //                            double avgstudent3 = Convert.ToDouble(avgstudent2);
    //                            string percent = Convert.ToString(avgstudent3);
    //                            //after rank row 

    //                            int count1 = count;
    //                            FpSpread1.Sheets[0].SpanModel.Add(count1, 0, 1, 4);
    //                            FpSpread1.Sheets[0].SpanModel.Add(count1 + 1, 0, 1, 4);
    //                            FpSpread1.Sheets[0].SpanModel.Add(count1 + 2, 0, 1, 4);
    //                            FpSpread1.Sheets[0].SpanModel.Add(count1 + 3, 0, 1, 4);

    //                            FpSpread1.Sheets[0].Cells[count1, 0].Text = " " + "His/Her attendance details for the period ";
    //                            FpSpread1.Sheets[0].Cells[count1 + 1, 0].Text = " " + "Number of working days:" + " " + now1;
    //                            FpSpread1.Sheets[0].Cells[count1 + 2, 0].Text = " " + "Number of days attend:" + " " + pres;
    //                            FpSpread1.Sheets[0].Cells[count1 + 3, 0].Text = " " + "% of attendance:" + " " + percent;
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 4, 0, 2, 4);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 2, 7);
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Text = "TUTOR";
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Font.Size = FontUnit.Medium;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Font.Bold = true;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 3].Font.Bold = true;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 3].Font.Size = FontUnit.Medium;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 3].Text = "PRINCIPAL";
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 3].HorizontalAlign = HorizontalAlign.Center;

    //                            //=====
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 10, 5, 2, 3);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 9, 5, 1, 3);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 8, 5, 1, 3);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 7, 5, 1, 3);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 6, 5, 1, 3);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 5, 5, 1, 3);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 4, 5, 1, 3);


    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 10, 5, 1, 2);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 8, 5, 1, 2);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 7, 5, 1, 2);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 6, 5, 1, 2);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 5, 5, 1, 2);
    //                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 4, 5, 1, 2);
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 8, 5].Border.BorderColor = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 8, 5].Border.BorderColorBottom = Color.White;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 7, 5].Border.BorderColor = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 7, 5].Border.BorderColorBottom = Color.White;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 7, 5].Border.BorderColorTop = Color.White;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 6, 5].Border.BorderColor = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 6, 5].Border.BorderColorBottom = Color.White;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 6, 5].Border.BorderColorTop = Color.White;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 5].Border.BorderColor = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 5].Border.BorderColorBottom = Color.White;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 5].Border.BorderColorTop = Color.White;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 5].Border.BorderColor = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 5].Border.BorderColorTop = Color.White;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].Text = "SENDER'S NAME AND ADDRESS";
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 8, 5].Text = "THE PRINCIPAL";
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 7, 5].Text = collnamenew1;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 6, 5].Text = address1;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 5].Text = address2;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 5].Text = address3;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 8, 5].Font.Bold = true;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 7, 5].Font.Bold = true;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 6, 5].Font.Bold = true;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 5].Font.Bold = true;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 5].Font.Bold = true;
    //                        }
    //                    }
    //                }
    //            }
    //        }
    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}

    public void filteration()
    {

        string orderby_Setting = GetFunction("select value from master_Settings where settings='order_by'");

        if (orderby_Setting == "")
        {
            strorder = "ORDER BY r.Roll_No";
            strregorder = "ORDER BY registration.Roll_No";
        }
        else
        {
            if (orderby_Setting == "0")
            {
                strorder = "ORDER BY r.Roll_No";
                strregorder = "ORDER BY registration.Roll_No";
            }
            else if (orderby_Setting == "1")
            {
                strorder = "ORDER BY r.Reg_No";
                strregorder = "ORDER BY registration.Reg_No";
            }
            else if (orderby_Setting == "2")
            {
                strregorder = "ORDER BY registration.Stud_Name";
                strorder = "ORDER BY r.Stud_Name";
            }
            else if (orderby_Setting == "0,1,2")
            {
                strorder = "ORDER BY r.Roll_No,r.Reg_No,r.Stud_Name";
                strregorder = "ORDER BY registration.Roll_No,registration.Reg_No,registration.Stud_Name";
            }
            else if (orderby_Setting == "0,1")
            {
                strorder = "ORDER BY r.Roll_No,r.Reg_No";
                strregorder = "ORDER BY registration.Roll_No,registration.Reg_No";
            }
            else if (orderby_Setting == "1,2")
            {
                strorder = "ORDER BY r.Reg_No,r.Stud_Name";
                strregorder = "ORDER BY registration.Reg_No,registration.Stud_Name";
            }
            else if (orderby_Setting == "0,2")
            {
                strorder = "ORDER BY r.Roll_No,r.Stud_Name";
                strregorder = "ORDER BY registration.Roll_No,registration.Stud_Name";
            }
        }

    }

    protected void buttonG0()
    {
        try
        {
            
            TextBoxother.Visible = false;
            TextBoxother.Text = "";
            TextBoxpage.Text = "";
            
            if (txt_Test.Text != "--Select--")
            {
                lblnorec.Visible = false;
                if ((ddlSec.Enabled == true && ddlSec.Text != "-1") || (ddlSec.Enabled == false))
                {
                    SpreadBind();
                }

                if (Convert.ToInt32(grdover.Rows.Count) == 0)
                {
                    Buttontotal.Visible = false;
                    lblrecord.Visible = false;
                    DropDownListpage.Visible = false;
                    TextBoxother.Visible = false;
                    lblpage.Visible = false;
                    TextBoxpage.Visible = false;
                    
                    lblnorec.Visible = true;
                    
                    grdover.Visible = false;
                    
                }
                //else
                //{
                    
                //    grdover.Visible = true;
                //    chkGridSelectAll.Visible = true;
                //    Double totalRows = 0;
                //    totalRows = Convert.ToInt32(FpEntry.Sheets[0].RowCount);
                //    Session["totalPages"] = (int)Math.Ceiling(totalRows / FpEntry.Sheets[0].PageSize);
                //    Buttontotal.Text = "Records : " + totalRows + "          Pages : " + Session["totalPages"];
                //    DropDownListpage.Items.Clear();
                //    if (totalRows >= 10)
                //    {
                //        FpEntry.Sheets[0].PageSize = Convert.ToInt32(totalRows);
                //        for (int k = 0; k < Convert.ToInt32(totalRows); k = k + 10)
                //        {
                //            DropDownListpage.Items.Add((k + 10).ToString());
                //        }
                //        DropDownListpage.Items.Add("Others");
                //        FpEntry.Height = 635;
                //    }
                //    else if (totalRows == 0)
                //    {
                //        DropDownListpage.Items.Add("0");
                //        FpEntry.Height = 400;
                //    }
                //    else
                //    {
                //        FpEntry.Sheets[0].PageSize = Convert.ToInt32(totalRows);
                //        DropDownListpage.Items.Add(FpEntry.Sheets[0].PageSize.ToString());
                //        FpEntry.Height = 400 + (20 * Convert.ToInt32(totalRows));
                //    }
                //    if (Convert.ToInt32(FpEntry.Sheets[0].RowCount) > 10)
                //    {
                //        DropDownListpage.Text = DropDownListpage.Items[DropDownListpage.Items.Count - 2].Text;
                //        FpSpread1.Sheets[0].PageSize = int.Parse(DropDownListpage.Items[DropDownListpage.Items.Count - 2].Text);
                //        FpEntry.Sheets[0].PageSize = int.Parse(DropDownListpage.Items[DropDownListpage.Items.Count - 2].Text);
                //        FpEntry.Height = 400 + (20 * Convert.ToInt32(totalRows));
                //    }
                //    FpEntry.Width = ((7 + count) * 150);
                //}
            }
        }
        catch
        {
        }
    }

    public void clear()
    {
        lblnote.Visible = false;
        txtnotes.Visible = false;
        Buttontotal.Visible = false;
        lblrecord.Visible = false;
        DropDownListpage.Visible = false;
        TextBoxother.Visible = false;
        lblpage.Visible = false;
        TextBoxpage.Visible = false;
        
        grdover.Visible = false;
        
        lblnorec.Visible = false;
        btnGo.Visible = false;
        Label4.Visible = false;
        btnExcel.Visible = false;
        lblExcel.Visible = false;
        txtexcelname.Visible = false;
        btnPrint.Visible = false;
        norecordlbl.Visible = false;
        lblnotes.Visible = false;
        txtnote.Visible = false;
        
        lblesr.Visible = false;
        format2btn.Visible = false;
    }

    //protected void ddlTest_SelectedIndexChanged1(object sender, EventArgs e)
    //{
    //    clear();
    //    buttonG0();
    //}

    protected void ddlSec_SelectedIndexChanged(object sender, EventArgs e)
    {
        clear();
        GetTest();
    }

    protected void ddlBatch_SelectedIndexChanged(object sender, EventArgs e)
    {
        clear();
        if (ddlDegree.Text != "")
        {
            GetTest();
            lblnorec.Visible = false;

        }
        else
        {
            lblnorec.Text = "Give degree rights to the staff";
            lblnorec.Visible = true;
        }
        binddegree();
        bindbranch();
        bindsem();
        bindsec();
        GetTest();
    }

    protected void DropDownListpage_SelectedIndexChanged(object sender, EventArgs e)
    {
        LabelE.Visible = false;
        TextBoxother.Text = "";
        if (DropDownListpage.Text == "Others")
        {

            TextBoxother.Visible = true;
            TextBoxother.Focus();

        }
        else
        {
            TextBoxother.Visible = false;
            

        }
        
        
    }

    protected void TextBoxpage_TextChanged(object sender, EventArgs e)
    {
        try
        {
            if (TextBoxpage.Text.Trim() != "")
            {
                if (Convert.ToInt16(TextBoxpage.Text) > Convert.ToInt16(Session["totalPages"]))
                {
                    LabelE.Visible = true;
                    LabelE.Text = "Exceed The Page Limit";
                    
                    TextBoxpage.Text = "";
                }
                else if (Convert.ToInt32(TextBoxpage.Text) == 0)
                {
                    LabelE.Visible = true;
                    LabelE.Text = "Search should be greater than zero";
                    TextBoxpage.Text = "";
                }
                else
                {
                    LabelE.Visible = false;
                    
                }
            }
        }
        catch
        {
            TextBoxpage.Text = "";
        }
    }

    protected void TextBoxother_TextChanged(object sender, EventArgs e)
    {

        try
        {

            if (TextBoxother.Text != "")
            {

                

            }
        }
        catch
        {
            TextBoxother.Text = "";
        }
    }

    //protected void FpEntry_UpdateCommand(object sender, FarPoint.Web.Spread.SpreadCommandEventArgs e)
    //{
    //    string actrow = e.SheetView.ActiveRow.ToString();
    //    if (flag_true == false && actrow == "0")
    //    {
    //        for (int j = 1; j < Convert.ToInt16(FpEntry.Sheets[0].RowCount); j++)
    //        {

    //            string actcol = e.SheetView.ActiveColumn.ToString();
    //            if (FpEntry.Sheets[0].Cells[j, Convert.ToInt16(actcol)].Locked == false)
    //            {
    //                string seltext = e.EditValues[Convert.ToInt16(actcol)].ToString();
    //                if (seltext != "System.Object")
    //                    FpEntry.Sheets[0].Cells[j, Convert.ToInt16(actcol)].Text = seltext.ToString();
    //            }

    //        }

    //        flag_true = true;
    //    }

    //}

    public string Getdate(string Att_strqueryst)
    {
        string sqlstr;
        sqlstr = Att_strqueryst;
        mycon1.Close();
        mycon1.Open();
        SqlDataAdapter sqlAdapter1 = new SqlDataAdapter(sqlstr, con);
        SqlCommand cmd5a = new SqlCommand(sqlstr);
        cmd5a.Connection = mycon1;
        SqlDataReader drnew;
        drnew = cmd5a.ExecuteReader();
        drnew.Read();
        if (drnew.HasRows == true)
        {
            return drnew[0].ToString();
        }
        else
        {
            return "";
        }

    }

    protected void RadioButtonList3_SelectedIndexChanged(object sender, EventArgs e)
    {


        TextBoxother.Visible = false;
        TextBoxother.Text = "";
        TextBoxpage.Text = "";

        try
        {
            string ranksample = "drop table rankcount";
            SqlCommand rankcmdsample = new SqlCommand(ranksample, con);
            con.Open();
            rankcmdsample.ExecuteNonQuery();
            con.Close();
        }
        catch
        {
            con.Close();
        }

        //if ((ddlTest.SelectedIndex != 0) && (ddlTest.Text != ""))
        //{
        //    SpreadBind();

        //}
        //else if ((ddlTest.SelectedIndex == 0) || (ddlTest.Text != ""))
        //{

        //}

    }

    protected void Button1_Click(object sender, EventArgs e)
    {
    }

    protected void LinkButton4_Click(object sender, EventArgs e)
    {
    }

    //protected void lformat1_Click(object sender, EventArgs e)
    //{
    //    letter1();
    //}

    protected void TextBox2_TextChanged(object sender, EventArgs e)
    {

    }

    //public void letter1()
    //{
    //    string Registration_no = "";
    //    int xres = 0;
    //    int mm = 1;
        
    //    if (ddlBranch.Text != "")
    //    {
    //        branch = ddlBranch.SelectedItem.Text;
    //    }
    //    if (ddlDegree.Text != "")
    //    {
    //        degree = ddlDegree.SelectedItem.Text;
    //    }
    //    sem = ddlSemYr.SelectedValue;
    //    sec = ddlSec.SelectedValue;
    //    //if (ddlTest.Text != "")
    //    //{
    //    //    test = chklstest.SelectedItem.Text;
    //    //}
    //    if (ddlSemYr.Text != "")
    //    {
    //        semester = Convert.ToInt32(ddlSemYr.SelectedValue);
    //    }
    //    frdate = TextBox2.Text;
    //    todate = TextBox1.Text;
    //    colege_code = Session["collegecode"].ToString();
    //    degree1 = ddlBranch.SelectedValue;
        
    //    Label4.Visible = true;
    //    for (int j = 0; j < chklstest.Items.Count; j++)
    //    {
    //        if (chklstest.Items[j].Selected == true)
    //        {
    //            string criteria_no = chklstest.Items[j].Value.ToString();
    //            test = chklstest.Items[j].Text.ToString();
    //            for (int res = 0; res < Convert.ToInt32(FpEntry.Sheets[0].RowCount); res++)
    //            {
    //                isval = 0;
    //                s = FpEntry.Sheets[0].Cells[res, 0].Text;
    //                isval = Convert.ToInt32(FpEntry.Sheets[0].Cells[res, 0].Value);
    //                if (isval == 1)
    //                {
    //                    Label4.Visible = false;
    //                    //format2btn.Visible = true;
    //                    FpSpread1.Visible = true;
    //                    FpSpread1.Sheets[0].PageSize = 30;
    //                    FpSpread1.Sheets[0].RowHeader.Visible = false;
    //                    FpSpread1.Sheets[0].DefaultStyle.Font.Name = "Book Antique";
    //                    FpSpread1.Sheets[0].DefaultStyle.Font.Bold = false;
    //                    FpSpread1.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].ColumnHeader.Visible = false;
    //                    FpSpread1.BorderColor = Color.White;
    //                    FpSpread1.Sheets[0].SelectionBorder.BorderColorBottom = Color.White;

    //                    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //                    hat.Clear();
    //                    hat.Add("college_code", Session["collegecode"].ToString());
    //                    hat.Add("form_name", "CAMLetter.aspx");
    //                    dsprint = dacces.select_method("PROC_PRINT_MASTER_SETTINGS", hat, "sp");
    //                    if (dsprint.Tables[0].Rows.Count > 0)
    //                    {

    //                        if (dsprint.Tables[0].Rows[0]["college_name"].ToString() != string.Empty)
    //                        {
    //                            collnamenew1 = dsprint.Tables[0].Rows[0]["college_name"].ToString();
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["address1"].ToString() != "")
    //                        {
    //                            address1 = dsprint.Tables[0].Rows[0]["address1"].ToString();
    //                            address = address1;
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["address2"].ToString() != "")
    //                        {
    //                            address2 = dsprint.Tables[0].Rows[0]["address2"].ToString();
    //                            address = address1 + "-" + address2;
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["address3"].ToString() != "")
    //                        {
    //                            district = dsprint.Tables[0].Rows[0]["address3"].ToString();
    //                            address = address1 + "-" + address2 + "-" + district;
    //                        }

    //                        if (dsprint.Tables[0].Rows[0]["phoneno"].ToString() != "")
    //                        {
    //                            Phoneno = dsprint.Tables[0].Rows[0]["phoneno"].ToString();
    //                            phnfax = "Phone :" + " " + Phoneno;
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["faxno"].ToString() != "")
    //                        {
    //                            Faxno = dsprint.Tables[0].Rows[0]["faxno"].ToString();
    //                            phnfax = phnfax + "Fax  :" + " " + Faxno;
    //                        }

    //                        if ((dsprint.Tables[0].Rows[0]["email"].ToString() != ""))
    //                        {
    //                            email = "E-Mail:" + dsprint.Tables[0].Rows[0]["email"].ToString();
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["website"].ToString() != "")
    //                        {
    //                            email = email + " " + "Web Site:" + dsprint.Tables[0].Rows[0]["website"].ToString();
    //                        }
    //                    }
    //                    else if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //                    {
    //                        string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo from collinfo where college_code=" + Session["collegecode"] + "";
    //                        SqlCommand collegecmd = new SqlCommand(college, con);
    //                        SqlDataReader collegename;
    //                        con.Close();
    //                        con.Open();
    //                        collegename = collegecmd.ExecuteReader();
    //                        if (collegename.HasRows)
    //                        {
    //                            while (collegename.Read())
    //                            {
    //                                collnamenew1 = collegename["collname"].ToString();
    //                                address1 = collegename["address1"].ToString();
    //                                address2 = collegename["address2"].ToString();
    //                                address3 = collegename["address3"].ToString();
    //                                pincode = collegename["pincode"].ToString();
    //                            }
    //                        }
    //                        con.Close();
    //                    }
    //                    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //                    rol_no = FpEntry.Sheets[0].Cells[res, 1].Text;

    //                    string Toaddress = "select parent_name as pname,parent_addressP as padd1,streetp as padd2,cityp as city,parent_pincodeP as ppin,districtc as pdistrict from applyn where app_no in (select app_no from registration where roll_no='" + rol_no + "')";
    //                    SqlCommand Toaddcmd = new SqlCommand(Toaddress, con);
    //                    SqlDataReader Toaddreader;
    //                    con.Close();
    //                    con.Open();
    //                    string toaddname = "";
    //                    string toadd1 = "";
    //                    string toadd2 = "";
    //                    string toadd3 = "";
    //                    string topin = "";
    //                    string todistrict = "";
    //                    Toaddreader = Toaddcmd.ExecuteReader();
    //                    if (Toaddreader.HasRows)
    //                    {
    //                        while (Toaddreader.Read())
    //                        {
    //                            toaddname = Toaddreader["pname"].ToString();
    //                            toadd1 = Toaddreader["padd1"].ToString();
    //                            toadd2 = Toaddreader["padd2"].ToString();
    //                            toadd3 = Toaddreader["city"].ToString();
    //                            topin = Toaddreader["ppin"].ToString();
    //                            todistrict = Toaddreader["pdistrict"].ToString();
    //                        }
    //                    }
    //                    FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 30;
    //                    Label4.Visible = false;
    //                    //format2btn.Visible = true;
    //                    name = FpEntry.Sheets[0].Cells[res, 3].Text;
    //                    FpSpread1.Sheets[0].ColumnCount = 9;
    //                    FpSpread1.Sheets[0].Columns[0].Width = 150;
    //                    FpSpread1.Sheets[0].Columns[1].Width = 75;
    //                    FpSpread1.Sheets[0].Columns[2].Width = 100;
    //                    FpSpread1.Sheets[0].Columns[3].Width = 75;
    //                    FpSpread1.Sheets[0].Columns[4].Width = 100;
    //                    FpSpread1.Width = 1000;
    //                    FpSpread1.Height = 500;
    //                    MyImg mi = new MyImg();//set the logo for letter format
    //                    mi.ImageUrl = "Handler/Handler2.ashx?";
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 30, 0, 3, 1);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 0].CellType = mi;
    //                    FarPoint.Web.Spread.ImageCellType imgeve = new FarPoint.Web.Spread.ImageCellType();

    //                    FpSpread1.Sheets[0].ScrollingContentVisible = true;
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 30, 0, 4, 1);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 30, 1, 1, 3);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 29, 1, 1, 3);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 28, 1, 1, 3);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 27, 1, 1, 3);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 25, 0, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 26, 0, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 23, 0, 1, 3);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 24, 0, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 22, 0, 1, 3);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 26, 2, 1, 2);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 23, 5, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 22, 5, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 21, 5, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 20, 5, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 19, 5, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 18, 5, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 14, 5, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 13, 5, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 12, 5, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 11, 5, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 10, 5, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 9, 5, 1, 4);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 6].Border.BorderColorBottom = Color.Black;

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 5].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 6].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 7].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 5].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 5].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 5].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 4].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 4].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 4].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 6].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 6].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Border.BorderColorBottom = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Border.BorderColorBottom = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Border.BorderColorTop = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].Border.BorderColorBottom = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].Border.BorderColorTop = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 20, 5].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 20, 5].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 20, 5].Border.BorderColorBottom = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 20, 5].Border.BorderColorTop = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 19, 5].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 19, 5].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 19, 5].Border.BorderColorBottom = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 19, 5].Border.BorderColorTop = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 18, 5].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 18, 5].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 18, 5].Border.BorderColorTop = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 13, 5].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 13, 5].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 13, 5].Border.BorderColorBottom = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 5].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 5].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 5].Border.BorderColorBottom = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 5].Border.BorderColorTop = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 11, 5].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 11, 5].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 11, 5].Border.BorderColorBottom = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 11, 5].Border.BorderColorTop = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].Border.BorderColorBottom = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].Border.BorderColorTop = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 9, 5].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 9, 5].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 9, 5].Border.BorderColorTop = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Border.BorderColor = Color.Black;

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].HorizontalAlign = HorizontalAlign.Center;

    //                    //----------------------start to set the college name in header
    //                    if (dsprint.Tables[0].Rows.Count > 0)
    //                    {
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Text = collnamenew1;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Text = address;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Text = phnfax;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Text = email;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].HorizontalAlign = HorizontalAlign.Center;
    //                    }
    //                    else
    //                    {
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Text = collnamenew1;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Text = address1 + " - " + address2;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Text = address3;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Text = pincode;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].HorizontalAlign = HorizontalAlign.Center;
    //                    }
    //                    //'----------------------end to set the college name in header
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 7].VerticalAlign = VerticalAlign.Middle;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 7].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 7].Text = "Inland Letter";

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 6].Border.BorderColorBottom = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 5].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 5].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 5].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 8].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 7].Border.BorderColorBottom = Color.Black;

    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 28, 7, 3, 1);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 7].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 7].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 7].VerticalAlign = VerticalAlign.Middle;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 7].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 7].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 7].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 6].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 7].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 6].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 7].Text = "STAMP";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].HorizontalAlign = HorizontalAlign.Center;

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 0].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 0].Text = "Dear Parents,";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 2].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 2].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 2].Text = "Date  : " + DateTime.Now.Date.ToString("dd-MMM-yyyy");
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 0].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 0].Text = "Sub: " + test + " -- Performance Report";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 0].VerticalAlign = VerticalAlign.Middle;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 0].Margin.Left = 30;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 0].Text = "Your son/daughter " + name + " " + "[" + rol_no + "]" + "Studying in";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].Margin.Left = 30;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].VerticalAlign = VerticalAlign.Middle;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].Text = degree + " [" + branch + "]";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Margin.Left = 10;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Text = "To";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].Margin.Left = 30;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].VerticalAlign = VerticalAlign.Middle;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].Text = "has secured the following  marks in ";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Margin.Left = 20;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Text = toaddname;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 3].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Text = "Subject Name";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Text = "Min Mark";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Text = "Marks Obtained";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Text = "Result";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].Margin.Left = 20;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].Text = toadd1;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 20, 5].Margin.Left = 20;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 20, 5].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 20, 5].Text = toadd2;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 20, 5].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 19, 5].Margin.Left = 20;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 19, 5].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 19, 5].Text = toadd3;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 19, 5].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 18, 5].Margin.Left = 20;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 18, 5].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 18, 5].Text = "Pincode - " + topin;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 18, 5].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 14, 5].Margin.Left = 20;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 14, 5].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 14, 5].Text = "SENDER'S NAME AND ADDRESS";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 13, 5].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 13, 5].Margin.Left = 20;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 13, 5].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 13, 5].Text = "THE PRINCIPAL";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 5].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 5].Margin.Left = 20;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 5].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 5].Text = collnamenew1;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 5].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 11, 5].Margin.Left = 20;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 11, 5].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 11, 5].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 11, 5].Text = address1;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].Margin.Left = 20;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].Text = address2;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 4].Border.BorderColorRight = Color.Black;//new
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].Border.BorderColorLeft = Color.Black;//new

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 9, 5].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 9, 5].Margin.Left = 20;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 9, 5].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 9, 5].Text = address3;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 9, 4].Border.BorderColorRight = Color.Black;//new
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 9, 5].Border.BorderColorLeft = Color.Black;//new

    //                    int count = 0;
    //                    count = FpSpread1.Sheets[0].RowCount - 20;
    //                    for (int colm = 0; colm <= FpEntry.Sheets[0].ColumnCount - 1; colm++)
    //                    {
    //                        FpSpread1.Sheets[0].Cells[count, 4].Border.BorderColorRight = Color.Black;
    //                        if (FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note != "")
    //                        {
    //                            con.Close();
    //                            con.Open();
    //                            string subjname = "";
    //                            string result = "";
    //                            string minmark = FpEntry.Sheets[0].Cells[0, colm].Note;
    //                            string maxmark = FpEntry.Sheets[0].Cells[1, colm].Note;
    //                            string getmark = FpEntry.Sheets[0].Cells[res, colm].Text;
    //                            string celltag1 = FpEntry.Sheets[0].Cells[res, colm].Tag + "";
    //                            if (celltag1 == "1")
    //                            {
    //                                result = "Fail";
    //                            }
    //                            else
    //                            {
    //                                result = "Pass";
    //                            }
    //                            string subject_no1 = FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note;
    //                            string examdate1 = FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Tag + "";

    //                            string subname = "select subject_name,acronym from subject where subject_no=" + subject_no1 + "";
    //                            SqlDataAdapter da = new SqlDataAdapter(subname, con);
    //                            DataSet ds = new DataSet();
    //                            da.Fill(ds);
    //                            con.Close();
    //                            con.Open();
    //                            if (ds.Tables[0].Rows.Count > 0)
    //                            {
    //                                subjname = ds.Tables[0].Rows[0]["subject_name"].ToString();
    //                            }
    //                            FpSpread1.Sheets[0].Cells[count, 0].Border.BorderColor = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[count, 1].Border.BorderColor = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[count, 2].Border.BorderColor = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[count, 3].Border.BorderColor = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[count, 1].HorizontalAlign = HorizontalAlign.Center;
    //                            FpSpread1.Sheets[0].Cells[count, 2].HorizontalAlign = HorizontalAlign.Center;
    //                            FpSpread1.Sheets[0].Cells[count, 3].HorizontalAlign = HorizontalAlign.Center;
    //                            FpSpread1.Sheets[0].Cells[count, 0].Text = subjname;
    //                            FpSpread1.Sheets[0].Cells[count, 1].Text = minmark;
    //                            FpSpread1.Sheets[0].Cells[count, 2].Text = getmark; // +"/100";
    //                            FpSpread1.Sheets[0].Cells[count, 3].Text = result;
    //                            count++;
    //                        }
    //                        if (FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Text == "Rank")
    //                        {
    //                            string rank = FpEntry.Sheets[0].Cells[res, colm].Text;
    //                            FpSpread1.Sheets[0].Cells[count, 3].Font.Bold = true;
    //                            FpSpread1.Sheets[0].Cells[count, 3].Text = "Rank" + " " + ":" + rank;
    //                        }
    //                    }
    //                    int count1 = count;

    //                    persentmonthcal();
    //                    double per_tage_day = 0;
    //                    string dum_tage_date = "";
    //                    if (Session["Hourwise"] == "1")
    //                    {
    //                        per_con_hrs = per_workingdays1;
    //                        per_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / (per_con_hrs + tot_conduct_hr_spl_fals)) * 100);
    //                        if (per_tage_hrs > 100)
    //                        {
    //                            per_tage_hrs = 100;
    //                        }
    //                        per_tage_day = per_tage_hrs;
    //                    }

    //                    if (Session["Daywise"] == "1")
    //                    {
    //                        per_tage_day = ((pre_present_date / per_workingdays) * 100);
    //                        if (per_tage_day > 100)
    //                        {
    //                            per_tage_day = 100;
    //                        }
    //                    }
    //                    dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //                    if (dum_tage_date == "NaN")
    //                    {
    //                        dum_tage_date = "0";
    //                    }
    //                    else if (dum_tage_date == "Infinity")
    //                    {
    //                        dum_tage_date = "0";
    //                    }
    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 1, 0, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 2, 0, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 3, 0, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 4, 0, 1, 4);
    //                    FpSpread1.Sheets[0].Cells[count1 + 1, 4].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[count1 + 2, 4].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[count1 + 3, 4].Border.BorderColorRight = Color.Black;

    //                    FpSpread1.Sheets[0].Cells[count1 + 1, 0].Text = " " + "His/Her attendance details for the period " + TextBox2.Text.ToString() + " to " + TextBox1.Text.ToString() + " are as follows";
    //                    if (Session["Hourwise"] == "1")
    //                    {
    //                        FpSpread1.Sheets[0].Cells[count1 + 2, 0].Text = " " + "No of conducted hours:" + " " + Convert.ToString(per_con_hrs + tot_conduct_hr_spl_fals);
    //                        FpSpread1.Sheets[0].Cells[count1 + 3, 0].Text = " " + "No of attend hours:" + " " + Convert.ToString(per_per_hrs + tot_per_hrs_spl_fals);
    //                        FpSpread1.Sheets[0].Cells[count1 + 4, 0].Text = " " + "% of attendance:" + " " + dum_tage_date.ToString();
    //                    }
    //                    if (Session["Daywise"] == "1")
    //                    {
    //                        FpSpread1.Sheets[0].Cells[count1 + 2, 0].Text = " " + "No of working days:" + " " + per_workingdays.ToString();
    //                        FpSpread1.Sheets[0].Cells[count1 + 3, 0].Text = " " + "No of days attend:" + " " + pre_present_date.ToString();
    //                        FpSpread1.Sheets[0].Cells[count1 + 4, 0].Text = " " + "% of attendance:" + " " + dum_tage_date.ToString();
    //                    }
    //                    string degcode = ddlBranch.SelectedValue.ToString();
    //                    string semvalue = ddlSemYr.SelectedItem.ToString();
    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 5, 0, 1, 4);
    //                    FpSpread1.Sheets[0].Cells[count1 + 5, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    ds1.Dispose();
    //                    ds1.Reset();
    //                    if (degcode != "" && semvalue != "")
    //                    {
    //                        string attpercen = "select percent_eligible_for_exam from periodattndschedule where degree_code= " + degcode + " and semester= " + semvalue + " ";
    //                        ds1 = dacces.select_method(attpercen, hat, "Text");
    //                        if (ds1.Tables[0].Rows.Count > 0)
    //                        {
    //                            FpSpread1.Sheets[0].Cells[count1 + 5, 0].Text = "(Minimum eligibility to appear in the University Examination is " + ds1.Tables[0].Rows[0]["percent_eligible_for_exam"].ToString() + "% attendance.)";
    //                        }
    //                    }

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 14, 5].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[count1 - 3, 4].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[count1 - 2, 4].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[count1 - 1, 4].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[count1, 4].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[count1 + 1, 4].Border.BorderColorRight = Color.Black;

    //                    FpSpread1.Sheets[0].Cells[count1 + 5, 4].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[count1 + 6, 4].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[count1 + 7, 4].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[count1 + 8, 4].Border.BorderColorRight = Color.White;


    //                    FpSpread1.Sheets[0].Cells[count1 + 7, 0].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[count1 + 7, 0].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[count1 + 7, 0].Text = "CLASS ADVISOR";
    //                    FpSpread1.Sheets[0].Cells[count1 + 7, 0].Font.Bold = true;

    //                    FpSpread1.Sheets[0].Cells[count1 + 7, 2].Text = "H.O.D";
    //                    FpSpread1.Sheets[0].Cells[count1 + 7, 2].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[count1 + 7, 2].HorizontalAlign = HorizontalAlign.Left;

    //                    FpSpread1.Sheets[0].Cells[count1 + 7, 3].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[count1 + 7, 3].Text = "PRINCIPAL";
    //                    FpSpread1.Sheets[0].Cells[count1 + 7, 3].Font.Bold = true;

    //                    //'----------------------------to set the footer start 10.04.12
    //                    //if (dsprint.Tables[0].Rows.Count > 0) 
    //                    //{

    //                    //    if (dsprint.Tables[0].Rows[0]["footer"].ToString() != "")
    //                    //    {

    //                    //        footer_count = Convert.ToInt16(dsprint.Tables[0].Rows[0]["footer"].ToString());
    //                    //        //FpSpread1.Sheets[0].RowCount += 3;
    //                    //        footer_text = dsprint.Tables[0].Rows[0]["footer_name"].ToString();
    //                    //        string[] footer_text_split = footer_text.Split(',');
    //                    //        footer_text = "";

    //                    //        if (footer_count == 1)
    //                    //        {
    //                    //            FpSpread1.Sheets[0].Cells[count1 + 9, 2].Text = footer_text.ToString();
    //                    //        }
    //                    //        else if ((FpSpread1.Sheets[0].ColumnCount - 3) < footer_count)
    //                    //        {
    //                    //            for (int concod_footer = 0; concod_footer < footer_count; concod_footer++)
    //                    //            {
    //                    //                if (footer_text == "")
    //                    //                {
    //                    //                    footer_text = footer_text_split[concod_footer].ToString();
    //                    //                }
    //                    //                else
    //                    //                {
    //                    //                    footer_text = footer_text + "   " + footer_text_split[concod_footer].ToString();
    //                    //                }
    //                    //            }

    //                    //            for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount - 3; col_count++)
    //                    //            {
    //                    //                if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                    //                {
    //                    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 9, col_count, 1, final_print_col_cnt);
    //                    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 9, col_count, 1, final_print_col_cnt);
    //                    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 9, col_count, 1, final_print_col_cnt);
    //                    //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Text = footer_text;
    //                    //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                    //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Font.Bold = true;
    //                    //                    FpSpread1.Sheets[0].Cells[count1 + 9, 0].HorizontalAlign = HorizontalAlign.Center;
    //                    //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Font.Size = FontUnit.Medium;
    //                    //                    break;
    //                    //                }
    //                    //            }
    //                    //        }
    //                    //        else if ((FpSpread1.Sheets[0].ColumnCount - 3) == footer_count)
    //                    //        {
    //                    //            for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount - 3; col_count++)
    //                    //            {
    //                    //                if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                    //                {
    //                    //                    FpSpread1.Sheets[0].Cells[(count1 + 9), col_count].Text = footer_text_split[temp_count].ToString();
    //                    //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                    //                    FpSpread1.Sheets[0].Cells[count1 + 9, 0].HorizontalAlign = HorizontalAlign.Center;
    //                    //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Font.Bold = true;
    //                    //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Font.Size = FontUnit.Medium;
    //                    //                    temp_count++;
    //                    //                    if (temp_count == footer_count)
    //                    //                    {
    //                    //                        break;
    //                    //                    }
    //                    //                }
    //                    //            }
    //                    //        }
    //                    //        else
    //                    //        {
    //                    //            temp_count = 0;
    //                    //            split_col_for_footer = (FpSpread1.Sheets[0].ColumnCount - 3) / footer_count;
    //                    //            footer_balanc_col = (FpSpread1.Sheets[0].ColumnCount - 3) % footer_count;

    //                    //            for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount - 3; col_count++)
    //                    //            {
    //                    //                if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                    //                {
    //                    //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Text = footer_text_split[temp_count].ToString();
    //                    //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                    //                    FpSpread1.Sheets[0].Cells[count1 + 9, 0].HorizontalAlign = HorizontalAlign.Center;
    //                    //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Font.Bold = true;
    //                    //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Border.BorderColorLeft = Color.White;
    //                    //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Border.BorderColorRight = Color.White;
    //                    //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Font.Size = FontUnit.Medium;


    //                    //                    temp_count++;
    //                    //                    if (temp_count == 0)
    //                    //                    {
    //                    //                        col_count = col_count + split_col_for_footer + footer_balanc_col;
    //                    //                    }
    //                    //                    else
    //                    //                    {
    //                    //                        col_count = col_count + split_col_for_footer;
    //                    //                    }
    //                    //                    if (temp_count == footer_count)
    //                    //                    {
    //                    //                        break;
    //                    //                    }
    //                    //                }
    //                    //            }
    //                    //        }
    //                    //    }
    //                    //}
    //                    //'---------------------------------------end for footer
    //                    con.Close();
    //                    if (Registration_no == "")
    //                    {
    //                        Registration_no = rol_no;
    //                    }
    //                    else
    //                    {
    //                        Registration_no = Registration_no + "-" + rol_no;
    //                    }

    //                }//END IF ISVAL
    //            }//END FOR LOOP
    //        }
    //    }
    //    string RegisterNumber = Registration_no.ToString();
    //    string[] RNumber = RegisterNumber.Split(new char[] { '-' });
    //    int n = 0;
    //    if (RNumber.Length > 0)
    //    {
    //        ddlpoppage.Items.Clear();
    //        for (int j = 0; j < RNumber.GetUpperBound(0) + 1; j++)
    //        {
    //            ddlpoppage.Items.Insert(n, new System.Web.UI.WebControls.ListItem("Page-" + mm.ToString(), RNumber[j].ToString()));
    //            n = n + 1;
    //            mm = mm + 1;

    //        }
    //    }
    //}

    //public void letter2()
    //{
    //    string Registration_no = "";
    //    int xres = 0;
    //    int mm = 1;
    //    int fail_subj_count = 0;

        
    //    string strsc = "";
    //    if (ddlBranch.Text != "")
    //    {
    //        branch = ddlBranch.SelectedItem.Text;
    //    }
    //    if (ddlDegree.Text != "")
    //    {
    //        degree = ddlDegree.SelectedItem.Text;
    //    }
    //    sem = ddlSemYr.SelectedValue;
    //    sec = ddlSec.SelectedValue;
    //    //if (ddlTest.Text != "")
    //    //{
    //    //    test = chklstest.SelectedItem.Text;
    //    //}
    //    if (ddlSemYr.Text != "")
    //    {
    //        semester = Convert.ToInt32(ddlSemYr.SelectedValue);
    //    }
    //    colege_code = Session["collegecode"].ToString();
    //    degree1 = ddlBranch.SelectedValue;
        
    //    Label4.Visible = true;

    //    frdate = TextBox2.Text;
    //    todate = TextBox1.Text;
    //    for (int j = 0; j < chklstest.Items.Count; j++)
    //    {
    //        if (chklstest.Items[j].Selected == true)
    //        {
    //            string criteria_no = chklstest.Items[j].Value.ToString();
    //            test = chklstest.Items[j].Text.ToString();
    //            for (res = 0; res < Convert.ToInt32(FpEntry.Sheets[0].RowCount); res++)
    //            {
    //                isval = 0;
    //                s = FpEntry.Sheets[0].Cells[res, 0].Text;
    //                isval = Convert.ToInt32(FpEntry.Sheets[0].Cells[res, 0].Value);
    //                if (isval == 1)
    //                {
    //                    Label4.Visible = false;
    //                    //format2btn.Visible = true;
    //                    FpSpread1.Visible = true;
    //                    FpSpread1.Sheets[0].PageSize = 40;
    //                    FpSpread1.Sheets[0].RowHeader.Visible = false;
    //                    FpSpread1.Sheets[0].DefaultStyle.Font.Name = "Book Antique";
    //                    FpSpread1.Sheets[0].DefaultStyle.Font.Bold = false;
    //                    FpSpread1.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].ColumnHeader.Visible = false;

    //                    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ hdr by mythili 10.04.12
    //                    hat.Clear();
    //                    hat.Add("college_code", Session["collegecode"].ToString());
    //                    hat.Add("form_name", "CAMLetter.aspx");
    //                    dsprint = dacces.select_method("PROC_PRINT_MASTER_SETTINGS", hat, "sp");
    //                    if (dsprint.Tables[0].Rows.Count > 0)
    //                    {
    //                        if (dsprint.Tables[0].Rows[0]["college_name"].ToString() != string.Empty)
    //                        {
    //                            collnamenew1 = dsprint.Tables[0].Rows[0]["college_name"].ToString();
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["address1"].ToString() != "")
    //                        {
    //                            address1 = dsprint.Tables[0].Rows[0]["address1"].ToString();
    //                            address = address1;
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["address2"].ToString() != "")
    //                        {
    //                            address2 = dsprint.Tables[0].Rows[0]["address2"].ToString();
    //                            address = address1 + "-" + address2;

    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["address3"].ToString() != "")
    //                        {
    //                            district = dsprint.Tables[0].Rows[0]["address3"].ToString();
    //                            address = address1 + "-" + address2 + "-" + district;
    //                        }

    //                        if (dsprint.Tables[0].Rows[0]["phoneno"].ToString() != "")
    //                        {
    //                            Phoneno = dsprint.Tables[0].Rows[0]["phoneno"].ToString();
    //                            phnfax = "Phone :" + " " + Phoneno;
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["faxno"].ToString() != "")
    //                        {
    //                            Faxno = dsprint.Tables[0].Rows[0]["faxno"].ToString();
    //                            phnfax = phnfax + "Fax  :" + " " + Faxno;
    //                        }
    //                        if ((dsprint.Tables[0].Rows[0]["email"].ToString() != ""))
    //                        {
    //                            email = "E-Mail:" + dsprint.Tables[0].Rows[0]["email"].ToString();
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["website"].ToString() != "")
    //                        {
    //                            email = email + " " + "Web Site:" + dsprint.Tables[0].Rows[0]["website"].ToString();
    //                        }
    //                    }
    //                    else if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //                    {
    //                        string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo from collinfo where college_code=" + Session["collegecode"] + "";
    //                        SqlCommand collegecmd = new SqlCommand(college, con);
    //                        SqlDataReader collegename;
    //                        con.Close();
    //                        con.Open();
    //                        collegename = collegecmd.ExecuteReader();
    //                        if (collegename.HasRows)
    //                        {
    //                            while (collegename.Read())
    //                            {
    //                                collnamenew1 = collegename["collname"].ToString();
    //                                address1 = collegename["address1"].ToString();
    //                                address2 = collegename["address2"].ToString();
    //                                address3 = collegename["address3"].ToString();
    //                                pincode = collegename["pincode"].ToString();
    //                            }
    //                        }
    //                        con.Close();
    //                    }
    //                    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //                    rol_no = FpEntry.Sheets[0].Cells[res, 1].Text;
    //                    Label4.Visible = false;
    //                    //format2btn.Visible = true;
    //                    name = FpEntry.Sheets[0].Cells[res, 3].Text;
    //                    FpSpread1.Sheets[0].ColumnCount = 5;
    //                    FpSpread1.Sheets[0].Columns[0].Width = 50;
    //                    FpSpread1.Sheets[0].Columns[1].Width = 200;
    //                    FpSpread1.Sheets[0].Columns[2].Width = 200;
    //                    FpSpread1.Sheets[0].Columns[3].Width = 50;
    //                    FpSpread1.Sheets[0].Columns[4].Width = 200;
    //                    FpSpread1.Width = 700;
    //                    FpSpread1.Height = 500;
    //                    FpSpread1.Sheets[0].ScrollingContentVisible = true;
    //                    //DateTime  exam_month_year =Convert.ToDateTime ( GetFunction("select distinct exam_date from exam_type inner join criteriaforinternal on criteriaforinternal.criteria_no=exam_type.criteria_no where criteriaforinternal.criteria_no= "+chklstest.SelectedValue.ToString()+"") );
    //                    //string mon_yr = exam_month_year.ToString("MMM") + " " + exam_month_year.ToString("yyyy");
    //                    DataSet ds_date = new DataSet();
    //                    string dat = "select convert(varchar(15),min(exam_date),103) as mindate ,convert(varchar(15),max(exam_date),103)  as maxdate from exam_type inner join criteriaforinternal on criteriaforinternal.criteria_no=exam_type.criteria_no where criteriaforinternal.criteria_no= " + criteria_no + "";
    //                    ds_date = dacces.select_method(dat, hat, "Text");

    //                    gmon_yr_min = ds_date.Tables[0].Rows[0]["mindate"].ToString();
    //                    gmon_yr_max = ds_date.Tables[0].Rows[0]["maxdate"].ToString();

    //                    FpSpread1.Sheets[0].RowCount = 0;
    //                    FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 1, 1, 3);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = collnamenew1;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;

    //                    FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 1, 1, 3);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;

    //                    //'---------------to set the address
    //                    if (dsprint.Tables[0].Rows.Count > 0)
    //                    {
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = address + "," + phnfax;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
    //                    }
    //                    else
    //                    {
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = address1 + ", " + address2 + ", " + address3 + "," + pincode;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
    //                    }

    //                    //'-------------------to set the emila
    //                    FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 1, 1, 3);
    //                    if (dsprint.Tables[0].Rows.Count > 0)
    //                    {
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = email;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Bold = true;
    //                    }
    //                    //'----------------end to set the address

    //                    //'-------------for logo------------------

    //                    MyImg mi = new MyImg();//set the logo for letter format
    //                    mi.ImageUrl = "Handler/Handler2.ashx?";
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 3, 0, 3, 1);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].CellType = mi;
    //                    //FarPoint.Web.Spread.ImageCellType imgeve = new FarPoint.Web.Spread.ImageCellType();

    //                    MyImg mi4 = new MyImg();
    //                    mi4.ImageUrl = "Handler/Handler5.ashx?";
    //                    FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(FpSpread1.Sheets[0].RowCount - 3, 4, 3, 1);
    //                    FpSpread1.Sheets[0].ColumnHeader.Cells[FpSpread1.Sheets[0].RowCount - 3, 4].CellType = mi4;
    //                    //'----------------------------------
    //                    FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 5);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Dear Parents,";

    //                    FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 5);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Sub: Continuous Assesment Test Progress Report-Reg";

    //                    yr_val = ddlSemYr.SelectedItem.ToString();
    //                    getyear();

    //                    FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 2;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 5);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "  Your Son/Daughter/Ward/Selvan/Selvi ...." + name + "....studying in " + yr_string;


    //                    FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 5);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = degree + " [" + branch + "] has secured the following marks in the Continuous Assesment Test";


    //                    FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 5);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "...." + test + "....conducted during...." + gmon_yr_min + "-" + gmon_yr_max + "....";

    //                    FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 2;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 5);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Total Marks:";

    //                    FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 1, 1, 2);
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 3, 1, 2);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 1].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 3].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorTop = Color.Black;

    //                    FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 2].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "S.No";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = "Subject";
    //                    //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Text = "Marks out of";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Text = "Marks";

    //                    FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].HorizontalAlign = HorizontalAlign.Center;

    //                    int sno = 0;
    //                    for (int colm = 0; colm <= FpEntry.Sheets[0].ColumnCount - 1; colm++)
    //                    {
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorRight = Color.Black;
    //                        if (FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note != "")
    //                        {
    //                            FpSpread1.Sheets[0].RowCount++;
    //                            sno++;
    //                            con.Close();
    //                            con.Open();
    //                            string subjname = "";

    //                            string getmark = FpEntry.Sheets[0].Cells[res, colm].Text;
    //                            string subject_no1 = FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note;

    //                            string get_exmcode = FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Tag.ToString();
    //                            string[] spl_exmcode = get_exmcode.Split('@');
    //                            string get_maxmark = GetFunction("select max(marks_obtained) as 'MAX_MARK' from result where exam_code='" + spl_exmcode[1].ToString() + "'");
    //                            string maxmrk_pass = GetFunction("select max_mark from exam_type where exam_code='" + spl_exmcode[1].ToString() + "'");
    //                            string minmark_pass = GetFunction("select min_mark from exam_type where exam_code='" + spl_exmcode[1].ToString() + "'");

    //                            if (getmark != "AB" && getmark != "AAA" && getmark != "EL" && getmark != "EOD" && getmark != "ML" && getmark != "SOD" && getmark != "NSS" && getmark != "NJ" && getmark != "S" && getmark != "L" && getmark != "NCC" && getmark != "HS" && getmark != "PP" && getmark != "SYOD" && getmark != "COD" && getmark != "OOD" && getmark != "OD" && getmark != "" && getmark != " " && getmark != "LA" && getmark != "" && getmark != " " && getmark != "RAA")//added on 30.07.12//added 21.08.14 by subburaj
    //                            {
    //                                if (Convert.ToDouble(getmark) < Convert.ToDouble(minmark_pass))
    //                                {
    //                                    fail_subj_count++;
    //                                }
    //                            }
    //                            string subname = "select subject_name,acronym from subject where subject_no=" + subject_no1 + "";
    //                            SqlDataAdapter da = new SqlDataAdapter(subname, con);
    //                            DataSet ds = new DataSet();
    //                            da.Fill(ds);
    //                            con.Close();
    //                            con.Open();
    //                            if (ds.Tables[0].Rows.Count > 0)
    //                            {
    //                                subjname = ds.Tables[0].Rows[0]["subject_name"].ToString();
    //                            }
    //                            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 1, 1, 2);
    //                            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 3, 1, 2);
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorBottom = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorBottom = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorBottom = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorTop = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorTop = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorTop = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorLeft = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorLeft = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorLeft = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorRight = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorRight = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorRight = Color.Black;
    //                            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].HorizontalAlign = HorizontalAlign.Center;

    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = sno.ToString();
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = subjname;///////////////
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Left;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Text = getmark; // +"/100";
    //                            if (getmark == "A" || getmark == "AA" || getmark == "AAA" || getmark == "P")
    //                            {
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Text = "AAA";
    //                            }
    //                        }
    //                    }
    //                    FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 2);
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 2, 1, 2);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 1].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 3].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Total No.of Working days";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Text = "No.of days Attended";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text = "% of Attended";

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].HorizontalAlign = HorizontalAlign.Center;


    //                    FpSpread1.Sheets[0].RowCount++;//============ATTND %
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 2);
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 2, 1, 2);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorLeft = Color.Black;
    //                    //-------------------
    //                    //findattnd_values();
    //                    persentmonthcal();
    //                    double per_tage_day;
    //                    string dum_tage_date = "";
    //                    per_tage_day = ((pre_present_date / per_workingdays) * 100);

    //                    if (per_tage_day > 100)
    //                    {
    //                        per_tage_day = 100;
    //                    }
    //                    dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //                    if (dum_tage_date == "NaN")
    //                    {
    //                        gdum_tage_date = "0";
    //                    }
    //                    else if (dum_tage_date == "Infinity")
    //                    {
    //                        gdum_tage_date = "0";
    //                    }
    //                    FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = per_workingdays.ToString();
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Text = pre_present_date.ToString();
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text = gdum_tage_date.ToString();

    //                    //-------------------------
    //                    FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 3;
    //                    FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 3].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 2), 0, 1, 5);
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 5);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    if (fail_subj_count > 0)
    //                    {
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Text = "Failed in " + fail_subj_count + " Subjects";
    //                    }
    //                    else
    //                    {
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Text = "Failed in __________ Subjects";
    //                    }



    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "In this regards you are requested to meet the Principal on __________________";


    //                    FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 2;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Right;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 3);
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 3, 1, 2);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Student's Counseller";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Text = "HOD       ";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;

    //                    FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 5);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "---------------------------------------------------cut here--------------------------------------------------------";


    //                    FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 8;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 8), 0, 1, 5);
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 7), 0, 1, 5);
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 5), 0, 1, 5);

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 8, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 7, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 8, 0].Text = "Kindly acknowledge the receipt of this communication with your signature and return the same to the";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 7, 0].Text = "college by return of post";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 0].Text = "Remarks if any:";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Text = "Name:";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 1].Text = name;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Text = "Roll No.:";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 1].Text = rol_no;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].Text = "Signature of parent/Guardian";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].HorizontalAlign = HorizontalAlign.Right;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Batch:";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = ddlBatch.SelectedValue.ToString();
    //                    FpSpread1.Sheets[0].Columns[0].Width = 100;

    //                    //'--------------------start footer 10.04.12
    //                    if (dsprint.Tables[0].Rows.Count > 0)
    //                    {
    //                        if (dsprint.Tables[0].Rows[0]["footer"].ToString() != "")
    //                        {
    //                            footer_count = Convert.ToInt16(dsprint.Tables[0].Rows[0]["footer"].ToString());
    //                            FpSpread1.Sheets[0].RowCount += 3;
    //                            footer_text = dsprint.Tables[0].Rows[0]["footer_name"].ToString();
    //                            string[] footer_text_split = footer_text.Split(',');
    //                            footer_text = "";
    //                            if (footer_count == 1)
    //                            {
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Text = footer_text.ToString();
    //                            }
    //                            else if ((FpSpread1.Sheets[0].ColumnCount) < footer_count)
    //                            {
    //                                for (int concod_footer = 0; concod_footer < footer_count; concod_footer++)
    //                                {
    //                                    if (footer_text == "")
    //                                    {
    //                                        footer_text = footer_text_split[concod_footer].ToString();
    //                                    }
    //                                    else
    //                                    {
    //                                        footer_text = footer_text + "   " + footer_text_split[concod_footer].ToString();
    //                                    }
    //                                }
    //                                for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount; col_count++)
    //                                {
    //                                    if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                                    {
    //                                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, col_count, 1, final_print_col_cnt);
    //                                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, col_count, 1, final_print_col_cnt);
    //                                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, col_count, 1, final_print_col_cnt);
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Text = footer_text;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Bold = true;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Size = FontUnit.Medium;
    //                                        break;
    //                                    }
    //                                }
    //                            }
    //                            else if ((FpSpread1.Sheets[0].ColumnCount) == footer_count)
    //                            {
    //                                for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount; col_count++)
    //                                {
    //                                    if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                                    {
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Text = footer_text_split[temp_count].ToString();
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Bold = true;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Size = FontUnit.Medium;
    //                                        temp_count++;
    //                                        if (temp_count == footer_count)
    //                                        {
    //                                            break;
    //                                        }
    //                                    }
    //                                }
    //                            }
    //                            else
    //                            {
    //                                temp_count = 0;
    //                                split_col_for_footer = (FpSpread1.Sheets[0].ColumnCount) / footer_count;
    //                                footer_balanc_col = (FpSpread1.Sheets[0].ColumnCount) % footer_count;
    //                                for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount; col_count++)
    //                                {
    //                                    if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                                    {
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Text = footer_text_split[temp_count].ToString();
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Bold = true;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Border.BorderColorLeft = Color.White;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Border.BorderColorRight = Color.White;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Size = FontUnit.Medium;
    //                                        temp_count++;
    //                                        if (temp_count == 0)
    //                                        {
    //                                            col_count = col_count + split_col_for_footer + footer_balanc_col;
    //                                        }
    //                                        else
    //                                        {
    //                                            col_count = col_count + split_col_for_footer;
    //                                        }
    //                                        if (temp_count == footer_count)
    //                                        {
    //                                            break;
    //                                        }
    //                                    }
    //                                }
    //                            }
    //                        }
    //                    }
    //                    if (Registration_no == "")
    //                    {
    //                        Registration_no = rol_no;
    //                    }
    //                    else
    //                    {
    //                        Registration_no = Registration_no + "-" + rol_no;
    //                    }
    //                }//END IF ISVAL
    //            }//END FOR LOOP
    //        }
    //    }
    //    string RegisterNumber = Registration_no.ToString();
    //    string[] RNumber = RegisterNumber.Split(new char[] { '-' });
    //    int n = 0;
    //    if (RNumber.Length > 0)
    //    {
    //        ddlpoppage.Items.Clear();
    //        for (int j = 0; j < RNumber.GetUpperBound(0) + 1; j++)
    //        {
    //            ddlpoppage.Items.Insert(n, new System.Web.UI.WebControls.ListItem("Page-" + mm.ToString(), RNumber[j].ToString()));
    //            n = n + 1;
    //            mm = mm + 1;
    //        }
    //    }
    //}

    public void getyear()
    {
        if (yr_val != "")
        {
            if (yr_val == "1" || yr_val == "2")
            {
                yr_string = "First Year";
            }
            if (yr_val == "3" || yr_val == "4")
            {
                yr_string = "Second Year";
            }
            if (yr_val == "5" || yr_val == "6")
            {
                yr_string = "Third Year";
            }
            if (yr_val == "7" || yr_val == "8")
            {
                yr_string = "Fourth Year";
            }
            if (yr_val == "9" || yr_val == "10")
            {
                yr_string = "Fifth Year";
            }
            if (yr_val == "11" || yr_val == "12")
            {
                yr_string = "Sixth Year";
            }
        }
    }

    public object GetCorrespondingKey(object key, Hashtable hashTable)
    {
        IDictionaryEnumerator e = hashTable.GetEnumerator();
        while (e.MoveNext())
        {
            if (e.Key.ToString() == key.ToString())
            {
                return e.Value;
            }
        }
        return null;
    }

    public void persentmonthcal_old()
    {
        DataSet dsperiod = new DataSet();
        hat.Clear();
        hat.Add("degree_code", ddlBranch.SelectedValue.ToString());
        hat.Add("sem_ester", int.Parse(ddlSemYr.SelectedValue.ToString()));
        dsperiod = dacces.select_method("period_attnd_schedule", hat, "sp");
        if (dsperiod.Tables[0].Rows.Count != 0)
        {
            NoHrs = int.Parse(dsperiod.Tables[0].Rows[0]["PER DAY"].ToString());
            fnhrs = int.Parse(dsperiod.Tables[0].Rows[0]["I_HALF_DAY"].ToString());
            anhrs = int.Parse(dsperiod.Tables[0].Rows[0]["II_HALF_DAY"].ToString());
            minpresI = int.Parse(dsperiod.Tables[0].Rows[0]["MIN PREE I DAY"].ToString());
            minpresII = int.Parse(dsperiod.Tables[0].Rows[0]["MIN PREE II DAY"].ToString());
        }
        int countcount = 0;
        hat.Clear();
        hat.Add("colege_code", Session["collegecode"].ToString());
        ds1 = dacces.select_method("ATT_MASTER_SETTING", hat, "sp");
        countcount = ds1.Tables[0].Rows.Count;
        count = ds1.Tables[0].Rows.Count;
        attcount = ds1.Tables[0].Rows.Count;

        int njdate_mng = 0, njdate_evng = 0;
        int per_holidate_mng = 0, per_holidate_evng = 0;

        mng_conducted_half_days = 0;
        evng_conducted_half_days = 0;

        notconsider_value = 0;
        //int demfcal, demtcal;
        //string monthcal;
        conduct_hour_new = 0;
        string dt = frdate;

        if (chk_date_flag_attend == false)
        {
            string[] dsplit = dt.Split(new Char[] { '/' });
            if ((dsplit[0].ToString() != string.Empty) && (dsplit[1].ToString() != string.Empty) && (dsplit[2].ToString() != string.Empty))
            {
                frdate = dsplit[2].ToString() + "/" + dsplit[1].ToString() + "/" + dsplit[0].ToString();
            }

            demfcal = int.Parse(dsplit[2].ToString());
            demfcal = demfcal * 12;
            cal_from_date = demfcal + int.Parse(dsplit[1].ToString());
            monthcal = cal_from_date.ToString();
            dt = todate;
            dsplit = dt.Split(new Char[] { '/' });
            todate = dsplit[2].ToString() + "/" + dsplit[1].ToString() + "/" + dsplit[0].ToString();
            demtcal = int.Parse(dsplit[2].ToString());
            demtcal = demtcal * 12;
            cal_to_date = demtcal + int.Parse(dsplit[1].ToString());
            per_from_date = Convert.ToDateTime(frdate);
            per_to_date = Convert.ToDateTime(todate);

            chk_date_flag_attend = true;
        }
        dumm_from_date = per_from_date;

        //string dd = ds4.Tables[0].Rows[rows_count]["ROLL_NO"].ToString();
        hat.Clear();
        hat.Add("std_rollno", rol_no);
        hat.Add("from_month", cal_from_date);
        hat.Add("to_month", cal_to_date);
        ds2 = dacces.select_method("STUD_ATTENDANCE", hat, "sp");

        hat.Clear();
        hat.Add("degree_code", int.Parse(ddlBranch.SelectedValue.ToString()));
        hat.Add("sem", int.Parse(ddlSemYr.SelectedItem.ToString()));
        hat.Add("from_date", frdate.ToString());
        hat.Add("to_date", todate.ToString());
        hat.Add("coll_code", int.Parse(Session["collegecode"].ToString()));

        //------------------------------------------------------------------
        int iscount = 0;
        holidaycon.Close();
        holidaycon.Open();
        string sqlstr_holiday = "select  isnull(count(holiday_date),0)as cnt FROM holidayStudents where holiday_date between '" + frdate.ToString() + "' and '" + todate.ToString() + "' and degree_code=" + ddlBranch.SelectedValue.ToString() + " and semester=" + ddlSemYr.SelectedItem.ToString() + "";
        SqlCommand cmdholiday = new SqlCommand(sqlstr_holiday, holidaycon);
        SqlDataAdapter daholiday = new SqlDataAdapter(cmdholiday);
        DataSet dsholiday = new DataSet();
        daholiday.Fill(dsholiday);
        if (dsholiday.Tables[0].Rows.Count > 0)
        {
            iscount = Convert.ToInt16(dsholiday.Tables[0].Rows[0]["cnt"].ToString());
        }
        hat.Add("iscount", iscount);
        mmyycount = ds2.Tables[0].Rows.Count;
        moncount = mmyycount - 1;

        ds3 = dacces.select_method("ALL_HOLIDATE_DETAILS", hat, "sp");

        Dictionary<string, int> holiday_table1 = new Dictionary<string, int>();
        Dictionary<string, int> holiday_table2 = new Dictionary<string, int>();
        Dictionary<string, int> holiday_table3 = new Dictionary<string, int>();

        holiday_table11.Clear();
        holiday_table21.Clear();
        holiday_table31.Clear();
        if (ds3.Tables[0].Rows.Count != 0)
        {
            for (int k = 0; k < ds3.Tables[0].Rows.Count; k++)
            {
                if (ds3.Tables[0].Rows[0]["halforfull"].ToString() == "False")
                {
                    halforfull = "0";
                }
                else
                {
                    halforfull = "1";
                }
                if (ds3.Tables[0].Rows[0]["morning"].ToString() == "False")
                {
                    mng = "0";
                }
                else
                {
                    mng = "1";
                }
                if (ds3.Tables[0].Rows[0]["evening"].ToString() == "False")
                {
                    evng = "0";
                }
                else
                {
                    evng = "1";
                }

                holiday_sched_details = halforfull + "*" + mng + "*" + evng;

                string[] split_date_time1 = ds3.Tables[0].Rows[k]["HOLI_DATE"].ToString().Split(' ');
                string[] dummy_split = split_date_time1[0].Split('/');
                holiday_table11.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), holiday_sched_details);
                // holiday_table1.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], holiday_sched_details);
            }
        }
        if (ds3.Tables[1].Rows.Count != 0)
        {
            for (int k = 0; k < ds3.Tables[1].Rows.Count; k++)
            {
                string[] split_date_time1 = ds3.Tables[1].Rows[k]["HOLI_DATE"].ToString().Split(' ');
                string[] dummy_split = split_date_time1[0].Split('/');
                holiday_table21.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);
                if (ds3.Tables[1].Rows[k]["halforfull"].ToString() == "False")
                {
                    halforfull = "0";
                }
                else
                {
                    halforfull = "1";
                }
                if (ds3.Tables[1].Rows[k]["morning"].ToString() == "False")
                {
                    mng = "0";
                }
                else
                {
                    mng = "1";
                }
                if (ds3.Tables[1].Rows[k]["evening"].ToString() == "False")
                {
                    evng = "0";
                }
                else
                {
                    evng = "1";
                }
                holiday_sched_details = halforfull + "*" + mng + "*" + evng;

                if (!holiday_table11.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString()))
                {
                    holiday_table11.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), holiday_sched_details);
                }
                holiday_table2.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), k);
            }
        }
        if (ds3.Tables[2].Rows.Count != 0)
        {
            for (int k = 0; k < ds3.Tables[2].Rows.Count; k++)
            {
                string[] split_date_time1 = ds3.Tables[2].Rows[k]["HOLI_DATE"].ToString().Split(' ');
                string[] dummy_split = split_date_time1[0].Split('/');
                holiday_table31.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);

                if (ds3.Tables[2].Rows[k]["halforfull"].ToString() == "False")
                {
                    halforfull = "0";
                }
                else
                {
                    halforfull = "1";
                }
                if (ds3.Tables[2].Rows[k]["morning"].ToString() == "False")
                {
                    mng = "0";
                }
                else
                {
                    mng = "1";
                }
                if (ds3.Tables[2].Rows[k]["evening"].ToString() == "False")
                {
                    evng = "0";
                }
                else
                {
                    evng = "1";
                }

                holiday_sched_details = halforfull + "*" + mng + "*" + evng;

                if (!holiday_table11.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString()))
                {
                    holiday_table11.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), holiday_sched_details);
                }

                holiday_table3.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), k);
            }
        }
        //------------------------------------------------------------------
        if (ds3.Tables[0].Rows.Count != 0)
        {
            ts = DateTime.Parse(ds3.Tables[0].Rows[0]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
            diff_date = Convert.ToString(ts.Days);
            dif_date1 = double.Parse(diff_date.ToString());
        }
        next = 0;
        if (ds2.Tables[0].Rows.Count != 0)
        {
            int rowcount = 0;
            int ccount;
            ccount = ds3.Tables[1].Rows.Count;
            ccount = ccount - 1;
            //if ( == ds2.Tables [0].Rows [mmyycount].["Month_year"])
            while (dumm_from_date <= (per_to_date))
            {
                for (int i = 1; i <= mmyycount; i++)
                {
                    if (cal_from_date == int.Parse(ds2.Tables[0].Rows[next]["month_year"].ToString()))
                    {
                        string[] split_date_time1 = dumm_from_date.ToString().Split(' ');
                        string[] dummy_split = split_date_time1[0].Split('/');
                        if (!holiday_table11.ContainsKey((Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString() + "/" + (Convert.ToInt16(dummy_split[2])).ToString()))
                        {
                            holiday_table11.Add(((Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString() + "/" + (Convert.ToInt16(dummy_split[2])).ToString()), "3*0*0");
                        }
                        if (holiday_table11.Contains((Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString() + "/" + (Convert.ToInt16(dummy_split[2])).ToString()))
                        {
                            value_holi_status = GetCorrespondingKey(dummy_split[1].ToString() + "/" + dummy_split[0].ToString() + "/" + dummy_split[2].ToString(), holiday_table11).ToString();
                            split_holiday_status = value_holi_status.Split('*');

                            if (split_holiday_status[0].ToString() == "3")//=========ful day working day
                            {
                                split_holiday_status_1 = "1";
                                split_holiday_status_2 = "1";
                            }
                            else if (split_holiday_status[0].ToString() == "1")//=============half day working day
                            {
                                if (split_holiday_status[1].ToString() == "1")//==============mng holiday//evng working day
                                {
                                    split_holiday_status_1 = "0";
                                    split_holiday_status_2 = "1";
                                }

                                if (split_holiday_status[2].ToString() == "1")//==============evng holiday//mng working day
                                {
                                    split_holiday_status_1 = "1";
                                    split_holiday_status_2 = "0";
                                }
                            }
                            else if (split_holiday_status[0].ToString() == "0")
                            {
                                dumm_from_date = dumm_from_date.AddDays(1);
                                if (dumm_from_date.Day == 1)
                                {
                                    cal_from_date++;
                                    if (moncount > next)
                                    {
                                        next++;

                                    }
                                }
                                break;
                            }
                            if (ds3.Tables[1].Rows.Count != 0)
                            {
                                ts = DateTime.Parse(ds3.Tables[1].Rows[rowcount]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
                                diff_date = Convert.ToString(ts.Days);
                                dif_date = double.Parse(diff_date.ToString());
                            }
                            else
                            {
                                dif_date = 0;
                            }
                            if (dif_date == 1)
                            {
                                leave_pointer = holi_leav;
                                absent_pointer = holi_absent;
                            }
                            else if (dif_date == -1)
                            {
                                leave_pointer = holi_leav;
                                absent_pointer = holi_absent;
                                if (ccount > rowcount)
                                {
                                    rowcount += 1;
                                }
                            }
                            else
                            {
                                leave_pointer = leav_pt;
                                absent_pointer = absent_pt;
                            }
                            if (ds3.Tables[2].Rows.Count != 0)
                            {
                                ts = DateTime.Parse(ds3.Tables[2].Rows[0]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
                                diff_date = Convert.ToString(ts.Days);
                                dif_date = double.Parse(diff_date.ToString());
                                if (dif_date == 1)
                                {
                                    leave_pointer = holi_leav;
                                    absent_pointer = holi_absent;
                                }
                            }
                            if (dif_date1 == -1)
                            {
                                leave_pointer = holi_leav;
                                absent_pointer = holi_absent;
                            }
                            dif_date1 = 0;
                            if (split_holiday_status_1 == "1")
                            {
                                for (i = 1; i <= fnhrs; i++)
                                {
                                    date = "d" + dumm_from_date.Day.ToString("") + "d" + i.ToString();
                                    value = ds2.Tables[0].Rows[next][date].ToString();
                                    if (value != null && value != "0" && value != "7" && value != "")
                                    {
                                        if (tempvalue != value)
                                        {
                                            tempvalue = value;
                                            for (int j = 0; j < countcount; j++)
                                            {
                                                if (ds1.Tables[0].Rows[j]["LeaveCode"].ToString() == value.ToString())
                                                {
                                                    ObtValue = int.Parse(ds1.Tables[0].Rows[j]["CalcFlag"].ToString());
                                                    j = countcount;
                                                }
                                            }
                                        }
                                        if (ObtValue == 1)
                                        {
                                            per_abshrs += 1;
                                        }
                                        else if (ObtValue == 2)
                                        {
                                            notconsider_value += 1;
                                            njhr += 1;
                                        }
                                        else if (ObtValue == 0)
                                        {
                                            per_perhrs += 1;
                                            tot_per_hrs += 1;
                                        }
                                        if (value == "3")
                                        {
                                            per_ondu += 1;
                                            tot_ondu += 1;
                                        }
                                        else if (value == "10")
                                        {
                                            per_leave += 1;
                                        }
                                    }
                                    else if (value == "7")
                                    {
                                        per_hhday += 1;

                                    }
                                    else
                                    {
                                        unmark += 1;
                                    }
                                }

                                //  if (per_perhrs >= minpresI)
                                if (per_perhrs + njhr >= minpresI)
                                {
                                    Present += 0.5;
                                }

                                else if (per_leave >= 1)
                                {
                                    leave_point += leave_pointer / 2;
                                    Leave += 0.5;
                                }

                                else if (per_abshrs >= 1)
                                {
                                    Absent += 0.5;
                                    absent_point += absent_pointer / 2;
                                }
                                else if (njhr >= minpresI)
                                {
                                    njdate += 0.5;
                                    njdate_mng += 1;
                                }
                                if (per_ondu >= 1)
                                {
                                    Onduty += 0.5;
                                }

                                if (unmark == fnhrs)
                                {
                                    per_holidate_mng += 1;
                                    per_holidate += 0.5;
                                    unmark = 0;
                                }

                                workingdays += 0.5;
                                mng_conducted_half_days += 1;

                            }
                            per_perhrs = 0;
                            per_ondu = 0;
                            per_leave = 0;
                            per_abshrs = 0;
                            // unmark = 0;
                            njhr = 0;
                            int temp_unmark = 0;
                            int k = fnhrs + 1;

                            if (split_holiday_status_2 == "1")
                            {
                                for (i = k; i <= NoHrs; i++)
                                {
                                    date = "d" + dumm_from_date.Day.ToString("") + "d" + i.ToString();
                                    value = ds2.Tables[0].Rows[next][date].ToString();

                                    if (value != null && value != "0" && value != "7" && value != "")
                                    {
                                        if (tempvalue != value)
                                        {
                                            tempvalue = value;
                                            for (int j = 0; j < countcount; j++)
                                            {

                                                if (ds1.Tables[0].Rows[j]["LeaveCode"].ToString() == value.ToString())
                                                {
                                                    ObtValue = int.Parse(ds1.Tables[0].Rows[j]["CalcFlag"].ToString());
                                                    j = countcount;
                                                }
                                            }
                                        }
                                        if (ObtValue == 1)
                                        {
                                            per_abshrs += 1;
                                        }
                                        else if (ObtValue == 2)
                                        {
                                            notconsider_value += 1;
                                            njhr += 1;
                                        }
                                        else if (ObtValue == 0)
                                        {
                                            per_perhrs += 1;
                                            tot_per_hrs += 1;
                                        }
                                        if (value == "3")
                                        {
                                            per_ondu += 1;
                                            tot_ondu += 1;
                                        }
                                        else if (value == "10")

                                            per_leave += 1;
                                    }
                                    else if (value == "7")
                                    {
                                        per_hhday += 1;
                                    }
                                    else
                                    {
                                        unmark += 1;
                                    }
                                }
                                //   if (per_perhrs >= minpresII)
                                if (per_perhrs + njhr >= minpresII)
                                {
                                    Present += 0.5;
                                }
                                else if (per_leave >= 1)
                                {
                                    leave_point += leave_pointer / 2;
                                    Leave += 0.5;
                                }
                                else if (per_abshrs >= 1)
                                {
                                    Absent += 0.5;
                                    absent_point += absent_pointer / 2;
                                }
                                else if (njhr >= minpresII)
                                {
                                    njdate_evng += 1;
                                    njdate += 0.5;
                                }
                                if (per_ondu >= 1)
                                {
                                    Onduty += 0.5;
                                }

                                if (unmark == NoHrs - fnhrs)
                                {
                                    per_holidate_evng += 1;
                                    per_holidate += 0.5;
                                    unmark = 0;
                                }
                                else
                                {
                                    dum_unmark += unmark;
                                }



                                workingdays += 0.5;
                                evng_conducted_half_days += 1;

                            }

                            per_perhrs = 0;
                            per_ondu = 0;
                            per_leave = 0;
                            per_abshrs = 0;
                            unmark = 0;
                            njhr = 0;
                            dumm_from_date = dumm_from_date.AddDays(1);
                            if (dumm_from_date.Day == 1)
                            {
                                cal_from_date++;
                                if (moncount > next)
                                {
                                    next++;
                                }
                            }
                            per_perhrs = 0;
                        }
                    }
                    else
                    {
                        DateTime dumm_fdate = dumm_from_date.AddDays(1 - Convert.ToInt16(dumm_from_date.Day.ToString()));
                        dumm_fdate = dumm_fdate.AddMonths(1);
                        dumm_from_date = dumm_fdate;
                        if (dumm_from_date.Day == 1)
                        {
                            cal_from_date++;
                            if (moncount > next)
                            {
                                //  next++;
                            }
                        }
                        if (moncount > next)
                        {
                            i--;
                        }
                    }

                }
            }
            int diff_Date = per_from_date.Day - dumm_from_date.Day;
        }
        per_tot_ondu = tot_ondu;
        per_njdate = njdate;
        pre_present_date = Present;
        per_per_hrs = tot_per_hrs;
        per_absent_date = Absent;
        pre_ondu_date = Onduty;
        pre_leave_date = Leave;
        per_workingdays = workingdays - per_holidate - per_njdate;
        per_workingdays1 = ((mng_conducted_half_days * fnhrs) + (evng_conducted_half_days * (NoHrs - fnhrs))) - ((Convert.ToInt16(per_holidate_mng) * fnhrs) + (Convert.ToInt16(per_holidate_evng) * (NoHrs - fnhrs))) - notconsider_value;// ((Convert.ToInt16(njdate_mng) * fnhrs) + (Convert.ToInt16(njdate_evng) * (NoHrs - fnhrs))); //tot wrkng days
        per_dum_unmark = dum_unmark;

        Present = 0;
        tot_per_hrs = 0;
        Absent = 0;
        Onduty = 0;
        Leave = 0;
        workingdays = 0;
        per_holidate = 0;
        dum_unmark = 0;
        absent_point = 0;
        leave_point = 0;
        njdate = 0;
        tot_ondu = 0;

        //@@@@@@@@@ set the flag true to the attendance

    }

    public void persentmonthcal()
    {
        try
        {
            ds1.Dispose();
            ds1.Reset();
            hat.Clear();
            hat.Add("colege_code", Session["collegecode"].ToString());
            ds1 = dacces.select_method("ATT_MASTER_SETTING", hat, "sp");
            attcount = ds1.Tables[0].Rows.Count;

            DataSet dsperiod = new DataSet();
            hat.Clear();
            hat.Add("degree_code", ddlBranch.SelectedValue.ToString());
            hat.Add("sem_ester", int.Parse(ddlSemYr.SelectedValue.ToString()));
            dsperiod = dacces.select_method("period_attnd_schedule", hat, "sp");
            if (dsperiod.Tables[0].Rows.Count != 0)
            {
                NoHrs = int.Parse(dsperiod.Tables[0].Rows[0]["PER DAY"].ToString());
                fnhrs = int.Parse(dsperiod.Tables[0].Rows[0]["I_HALF_DAY"].ToString());
                anhrs = int.Parse(dsperiod.Tables[0].Rows[0]["II_HALF_DAY"].ToString());
                minpresI = int.Parse(dsperiod.Tables[0].Rows[0]["MIN PREE I DAY"].ToString());
                minpresII = int.Parse(dsperiod.Tables[0].Rows[0]["MIN PREE II DAY"].ToString());
            }
            Present = 0;
            tot_per_hrs = 0;
            Absent = 0;
            Onduty = 0;
            Leave = 0;
            workingdays = 0;
            per_holidate = 0;
            dum_unmark = 0;
            absent_point = 0;
            leave_point = 0;
            njdate = 0;
            tot_ondu = 0;

            // try
            {
                int my_un_mark = 0;
                int njdate_mng = 0, njdate_evng = 0;
                int per_holidate_mng = 0, per_holidate_evng = 0;

                mng_conducted_half_days = 0;
                evng_conducted_half_days = 0;

                notconsider_value = 0;
                int demfcal, demtcal;
                string monthcal;
                conduct_hour_new = 0;

                frdate = TextBox2.Text.ToString();
                todate = TextBox1.Text.ToString();

                //  if (rows_count == 0)
                {
                    string dt = frdate;
                    string[] dsplit = dt.Split(new Char[] { '/' });
                    frdate = dsplit[2].ToString() + "/" + dsplit[1].ToString() + "/" + dsplit[0].ToString();
                    demfcal = int.Parse(dsplit[2].ToString());
                    demfcal = demfcal * 12;
                    cal_from_date = demfcal + int.Parse(dsplit[1].ToString());
                    monthcal = cal_from_date.ToString();
                    dt = todate;
                    dsplit = dt.Split(new Char[] { '/' });
                    todate = dsplit[2].ToString() + "/" + dsplit[1].ToString() + "/" + dsplit[0].ToString();
                    demtcal = int.Parse(dsplit[2].ToString());
                    demtcal = demtcal * 12;
                    cal_to_date = demtcal + int.Parse(dsplit[1].ToString());
                    per_from_date = Convert.ToDateTime(frdate);
                    per_to_date = Convert.ToDateTime(todate);
                }
                dumm_from_date = per_from_date;
                stud_roll = rol_no.ToString();
                hat.Clear();
                hat.Add("std_rollno", rol_no.ToString());
                hat.Add("from_month", cal_from_date);
                hat.Add("to_month", cal_to_date);
                ds2 = dacces.select_method("STUD_ATTENDANCE", hat, "sp");
                mmyycount = ds2.Tables[0].Rows.Count;
                moncount = mmyycount - 1;
                if (rows_count == 0)
                {
                    hat.Clear();
                    hat.Add("degree_code", int.Parse(ddlBranch.SelectedValue.ToString()));
                    hat.Add("sem", int.Parse(ddlSemYr.SelectedItem.ToString()));
                    hat.Add("from_date", frdate.ToString());
                    hat.Add("to_date", todate.ToString());
                    hat.Add("coll_code", int.Parse(Session["collegecode"].ToString()));
                    //------------------------------------------------------------------
                    int iscount = 0;
                    holidaycon.Close();
                    holidaycon.Open();
                    string sqlstr_holiday = "select  isnull(count(holiday_date),0)as cnt FROM holidayStudents where holiday_date between '" + frdate.ToString() + "' and '" + todate.ToString() + "' and degree_code=" + ddlBranch.SelectedValue.ToString() + " and semester=" + ddlSemYr.SelectedItem.ToString() + "";
                    SqlCommand cmdholiday = new SqlCommand(sqlstr_holiday, holidaycon);
                    SqlDataAdapter daholiday = new SqlDataAdapter(cmdholiday);
                    DataSet dsholiday = new DataSet();
                    daholiday.Fill(dsholiday);
                    if (dsholiday.Tables[0].Rows.Count > 0)
                    {
                        iscount = Convert.ToInt16(dsholiday.Tables[0].Rows[0]["cnt"].ToString());
                    }
                    hat.Add("iscount", iscount);

                    ds3 = dacces.select_method("ALL_HOLIDATE_DETAILS", hat, "sp");

                    Dictionary<string, int> holiday_table1 = new Dictionary<string, int>();
                    Dictionary<string, int> holiday_table2 = new Dictionary<string, int>();
                    Dictionary<string, int> holiday_table3 = new Dictionary<string, int>();
                    holiday_table11.Clear();
                    holiday_table21.Clear();
                    holiday_table31.Clear();
                    if (ds3.Tables[0].Rows.Count != 0)
                    {
                        for (int k = 0; k < ds3.Tables[0].Rows.Count; k++)
                        {
                            if (ds3.Tables[0].Rows[0]["halforfull"].ToString() == "False")
                            {
                                halforfull = "0";
                            }
                            else
                            {
                                halforfull = "1";
                            }
                            if (ds3.Tables[0].Rows[0]["morning"].ToString() == "False")
                            {
                                mng = "0";
                            }
                            else
                            {
                                mng = "1";
                            }
                            if (ds3.Tables[0].Rows[0]["evening"].ToString() == "False")
                            {
                                evng = "0";
                            }
                            else
                            {
                                evng = "1";
                            }
                            holiday_sched_details = halforfull + "*" + mng + "*" + evng;
                            string[] split_date_time1 = ds3.Tables[0].Rows[k]["HOLI_DATE"].ToString().Split(' ');
                            string[] dummy_split = split_date_time1[0].Split('/');
                            if (!holiday_table11.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString())) //added by Mullai
                            {
                                holiday_table11.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), holiday_sched_details);
                            }
                            // holiday_table1.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], holiday_sched_details);
                        }
                    }
                    if (ds3.Tables[1].Rows.Count != 0)
                    {
                        for (int k = 0; k < ds3.Tables[1].Rows.Count; k++)
                        {
                            string[] split_date_time1 = ds3.Tables[1].Rows[k]["HOLI_DATE"].ToString().Split(' ');
                            string[] dummy_split = split_date_time1[0].Split('/');
                            if (!holiday_table21.ContainsKey((dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0]).ToString())) //added by Mullai
                            {
                                holiday_table21.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);
                            }

                            if (ds3.Tables[1].Rows[k]["halforfull"].ToString() == "False")
                            {
                                halforfull = "0";
                            }
                            else
                            {
                                halforfull = "1";
                            }
                            if (ds3.Tables[1].Rows[k]["morning"].ToString() == "False")
                            {
                                mng = "0";
                            }
                            else
                            {
                                mng = "1";
                            }
                            if (ds3.Tables[1].Rows[k]["evening"].ToString() == "False")
                            {
                                evng = "0";
                            }
                            else
                            {
                                evng = "1";
                            }

                            holiday_sched_details = halforfull + "*" + mng + "*" + evng;

                            if (!holiday_table11.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString()))
                            {
                                holiday_table11.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), holiday_sched_details);
                            }
                            if (!holiday_table2.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString())) //added by Mullai
                            {
                                holiday_table2.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), k);
                            }
                        }
                    }
                    if (ds3.Tables[2].Rows.Count != 0)
                    {
                        for (int k = 0; k < ds3.Tables[2].Rows.Count; k++)
                        {
                            string[] split_date_time1 = ds3.Tables[2].Rows[k]["HOLI_DATE"].ToString().Split(' ');
                            string[] dummy_split = split_date_time1[0].Split('/');
                            if (!holiday_table31.ContainsKey((dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0]).ToString())) //added by Mullai
                            {
                                holiday_table31.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);
                            }
                            if (ds3.Tables[2].Rows[k]["halforfull"].ToString() == "False")
                            {
                                halforfull = "0";
                            }
                            else
                            {
                                halforfull = "1";
                            }
                            if (ds3.Tables[2].Rows[k]["morning"].ToString() == "False")
                            {
                                mng = "0";
                            }
                            else
                            {
                                mng = "1";
                            }
                            if (ds3.Tables[2].Rows[k]["evening"].ToString() == "False")
                            {
                                evng = "0";
                            }
                            else
                            {
                                evng = "1";
                            }
                            holiday_sched_details = halforfull + "*" + mng + "*" + evng;

                            if (!holiday_table11.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString()))
                            {
                                holiday_table11.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), holiday_sched_details);
                            }
                            if (!holiday_table3.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString())) //added by Mullai
                            {
                                holiday_table3.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), k);
                            }
                        }
                    }
                    //=====================================14/5/12 PRABHA
                    SqlCommand newcmd = new SqlCommand();
                    con_splhr_query_master.Close();
                    newcmd.CommandText = "select rights from  special_hr_rights where usercode=" + Session["usercode"].ToString() + "";
                    newcmd.Connection = con_splhr_query_master;
                    con_splhr_query_master.Open();
                    SqlDataReader dr_rights_spl_hr = newcmd.ExecuteReader();
                    if (dr_rights_spl_hr.HasRows)
                    {
                        while (dr_rights_spl_hr.Read())
                        {
                            string spl_hr_rights = "";
                            Hashtable od_has = new Hashtable();

                            spl_hr_rights = dr_rights_spl_hr["rights"].ToString();
                            if (spl_hr_rights == "True" || spl_hr_rights == "true")
                            {
                                splhr_flag = true;

                            }
                        }
                    }
                }
                //===================================
                //------------------------------------------------------------------
                if (ds3.Tables[0].Rows.Count != 0)
                {
                    ts = DateTime.Parse(ds3.Tables[0].Rows[0]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
                    diff_date = Convert.ToString(ts.Days);
                    dif_date1 = double.Parse(diff_date.ToString());
                }
                next = 0;
                if (ds2.Tables[0].Rows.Count != 0)
                {
                    int rowcount = 0;
                    int ccount;
                    ccount = ds3.Tables[1].Rows.Count;
                    ccount = ccount - 1;
                    //if ( == ds2.Tables [0].Rows [mmyycount].["Month_year"])
                    while (dumm_from_date <= (per_to_date))
                    {
                        int temp_unmark = 0;
                        if (splhr_flag == true)
                        {
                            getspecial_hr();
                        }
                        for (int i = 1; i <= mmyycount; i++)
                        {
                            if (cal_from_date == int.Parse(ds2.Tables[0].Rows[next]["month_year"].ToString()))
                            {
                                string[] split_date_time1 = dumm_from_date.ToString().Split(' ');
                                string[] dummy_split = split_date_time1[0].Split('/');
                                if (!holiday_table11.ContainsKey((Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString() + "/" + (Convert.ToInt16(dummy_split[2])).ToString()))
                                {
                                    holiday_table11.Add(((Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString() + "/" + (Convert.ToInt16(dummy_split[2])).ToString()), "3*0*0");
                                }

                                if (holiday_table11.Contains((Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString() + "/" + (Convert.ToInt16(dummy_split[2])).ToString()))
                                {
                                    value_holi_status = GetCorrespondingKey(dummy_split[1].ToString() + "/" + dummy_split[0].ToString() + "/" + dummy_split[2].ToString(), holiday_table11).ToString();
                                    split_holiday_status = value_holi_status.Split('*');

                                    if (split_holiday_status[0].ToString() == "3")//=========ful day working day
                                    {
                                        split_holiday_status_1 = "1";
                                        split_holiday_status_2 = "1";
                                    }
                                    else if (split_holiday_status[0].ToString() == "1")//=============half day working day
                                    {
                                        if (split_holiday_status[1].ToString() == "1")//==============mng holiday//evng working day
                                        {
                                            split_holiday_status_1 = "0";
                                            split_holiday_status_2 = "1";
                                        }
                                        if (split_holiday_status[2].ToString() == "1")//==============evng holiday//mng working day
                                        {
                                            split_holiday_status_1 = "1";
                                            split_holiday_status_2 = "0";
                                        }
                                    }
                                    else if (split_holiday_status[0].ToString() == "0")
                                    {
                                        dumm_from_date = dumm_from_date.AddDays(1);
                                        if (dumm_from_date.Day == 1)
                                        {
                                            cal_from_date++;
                                            if (moncount > next)
                                            {
                                                next++;
                                            }
                                        }
                                        break;
                                    }
                                    if (ds3.Tables[1].Rows.Count != 0)
                                    {
                                        ts = DateTime.Parse(ds3.Tables[1].Rows[rowcount]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
                                        diff_date = Convert.ToString(ts.Days);
                                        dif_date = double.Parse(diff_date.ToString());
                                    }
                                    else
                                    {
                                        dif_date = 0;
                                    }
                                    if (dif_date == 1)
                                    {
                                        leave_pointer = holi_leav;
                                        absent_pointer = holi_absent;
                                    }
                                    else if (dif_date == -1)
                                    {
                                        leave_pointer = holi_leav;
                                        absent_pointer = holi_absent;
                                        if (ccount > rowcount)
                                        {
                                            rowcount += 1;
                                        }
                                    }
                                    else
                                    {
                                        leave_pointer = leav_pt;
                                        absent_pointer = absent_pt;
                                    }

                                    if (ds3.Tables[2].Rows.Count != 0)
                                    {
                                        ts = DateTime.Parse(ds3.Tables[2].Rows[0]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
                                        diff_date = Convert.ToString(ts.Days);
                                        dif_date = double.Parse(diff_date.ToString());
                                        if (dif_date == 1)
                                        {
                                            leave_pointer = holi_leav;
                                            absent_pointer = holi_absent;
                                        }
                                    }
                                    if (dif_date1 == -1)
                                    {
                                        leave_pointer = holi_leav;
                                        absent_pointer = holi_absent;
                                    }
                                    dif_date1 = 0;
                                    if (split_holiday_status_1 == "1")
                                    {
                                        for (i = 1; i <= fnhrs; i++)
                                        {
                                            date = "d" + dumm_from_date.Day.ToString("") + "d" + i.ToString();
                                            value = ds2.Tables[0].Rows[next][date].ToString();

                                            if (value != null && value != "0" && value != "7" && value != "")
                                            {
                                                if (tempvalue != value)
                                                {
                                                    tempvalue = value;
                                                    for (int j = 0; j < attcount; j++)
                                                    {

                                                        if (ds1.Tables[0].Rows[j]["LeaveCode"].ToString() == value.ToString())
                                                        {
                                                            ObtValue = int.Parse(ds1.Tables[0].Rows[j]["CalcFlag"].ToString());
                                                            j = attcount;
                                                        }
                                                    }
                                                }
                                                if (ObtValue == 1)
                                                {
                                                    per_abshrs += 1;
                                                }
                                                else if (ObtValue == 2)
                                                {
                                                    notconsider_value += 1;
                                                    njhr += 1;
                                                }
                                                else if (ObtValue == 0)
                                                {
                                                    per_perhrs += 1;
                                                    tot_per_hrs += 1;
                                                }
                                                if (value == "3")
                                                {
                                                    per_ondu += 1;
                                                    tot_ondu += 1;
                                                }
                                                else if (value == "10")
                                                {
                                                    per_leave += 1;
                                                }
                                            }
                                            else if (value == "7")
                                            {
                                                per_hhday += 1;

                                            }
                                            else
                                            {
                                                unmark += 1;
                                                temp_unmark++;

                                                my_un_mark++;//added 080812
                                            }
                                        }

                                        //  if (per_perhrs >= minpresI)
                                        if (per_perhrs + njhr >= minpresI)
                                        {
                                            Present += 0.5;
                                        }

                                        else if (per_leave >= 1)
                                        {
                                            leave_point += leave_pointer / 2;
                                            Leave += 0.5;
                                        }

                                        else if (per_abshrs >= 1)
                                        {
                                            Absent += 0.5;
                                            absent_point += absent_pointer / 2;
                                        }
                                        if (njhr >= minpresI)
                                        {
                                            njdate += 0.5;
                                            njdate_mng += 1;
                                        }
                                        if (per_ondu >= 1)
                                        {
                                            Onduty += 0.5;
                                        }

                                        if (temp_unmark == fnhrs)
                                        {
                                            per_holidate_mng += 1;
                                            per_holidate += 0.5;
                                            unmark = 0;
                                        }
                                        else
                                        {
                                            dum_unmark = temp_unmark;
                                        }
                                        if (fnhrs - temp_unmark >= minpresI)
                                        {
                                            workingdays += 0.5;
                                        }
                                        mng_conducted_half_days += 1;
                                    }
                                    per_perhrs = 0;
                                    per_ondu = 0;
                                    per_leave = 0;
                                    per_abshrs = 0;
                                    //   unmark = 0;
                                    temp_unmark = 0;
                                    njhr = 0;

                                    int k = fnhrs + 1;

                                    if (split_holiday_status_2 == "1")
                                    {
                                        for (i = k; i <= NoHrs; i++)
                                        {
                                            date = "d" + dumm_from_date.Day.ToString("") + "d" + i.ToString();
                                            value = ds2.Tables[0].Rows[next][date].ToString();

                                            if (value != null && value != "0" && value != "7" && value != "")
                                            {
                                                if (tempvalue != value)
                                                {
                                                    tempvalue = value;

                                                    for (int j = 0; j < attcount; j++)
                                                    {

                                                        if (ds1.Tables[0].Rows[j]["LeaveCode"].ToString() == value.ToString())
                                                        {
                                                            ObtValue = int.Parse(ds1.Tables[0].Rows[j]["CalcFlag"].ToString());
                                                            j = attcount;
                                                        }
                                                    }
                                                }
                                                if (ObtValue == 1)
                                                {
                                                    per_abshrs += 1;
                                                }
                                                else if (ObtValue == 2)
                                                {
                                                    notconsider_value += 1;
                                                    njhr += 1;
                                                }
                                                else if (ObtValue == 0)
                                                {
                                                    per_perhrs += 1;
                                                    tot_per_hrs += 1;
                                                }
                                                if (value == "3")
                                                {
                                                    per_ondu += 1;
                                                    tot_ondu += 1;
                                                }
                                                else if (value == "10")

                                                    per_leave += 1;
                                            }
                                            else if (value == "7")
                                            {
                                                per_hhday += 1;
                                            }
                                            else
                                            {
                                                unmark += 1;
                                                temp_unmark++;

                                                my_un_mark++; //added 080812
                                            }
                                        }
                                        //   if (per_perhrs >= minpresII)
                                        if (per_perhrs + njhr >= minpresII)
                                        {
                                            Present += 0.5;
                                        }

                                        else if (per_leave >= 1)
                                        {

                                            leave_point += leave_pointer / 2;
                                            Leave += 0.5;
                                        }
                                        else if (per_abshrs >= 1)
                                        {
                                            Absent += 0.5;
                                            absent_point += absent_pointer / 2;
                                        }
                                        if (njhr >= minpresII)
                                        {
                                            njdate_evng += 1;
                                            njdate += 0.5;
                                        }
                                        if (per_ondu >= 1)
                                        {
                                            Onduty += 0.5;
                                        }
                                        if (temp_unmark == NoHrs - fnhrs)
                                        {
                                            per_holidate_evng += 1;
                                            per_holidate += 0.5;
                                            unmark = 0;
                                        }
                                        else
                                        {
                                            dum_unmark += unmark;
                                        }
                                        if ((NoHrs - fnhrs) - temp_unmark >= minpresII)
                                        {
                                            workingdays += 0.5;
                                        }
                                        evng_conducted_half_days += 1;
                                    }
                                    per_perhrs = 0;
                                    per_ondu = 0;
                                    per_leave = 0;
                                    per_abshrs = 0;
                                    unmark = 0; //hided
                                    njhr = 0;
                                    dumm_from_date = dumm_from_date.AddDays(1);
                                    if (dumm_from_date.Day == 1)
                                    {
                                        cal_from_date++;
                                        if (moncount > next)
                                        {
                                            next++;

                                        }
                                    }
                                    per_perhrs = 0;
                                }
                            }
                            else
                            {
                                DateTime dumm_fdate = dumm_from_date.AddDays(1 - Convert.ToInt16(dumm_from_date.Day.ToString()));
                                dumm_fdate = dumm_fdate.AddMonths(1);
                                dumm_from_date = dumm_fdate;
                                if (dumm_from_date.Day == 1)
                                {
                                    cal_from_date++;
                                    if (moncount > next)
                                    {
                                        //  next++;
                                    }
                                }
                                if (moncount > next)
                                {
                                    i--;
                                }
                            }
                        }
                    }
                    int diff_Date = per_from_date.Day - dumm_from_date.Day;
                }
                per_tot_ondu = tot_ondu;
                per_njdate = njdate;
                pre_present_date = Present - njdate;
                per_per_hrs = tot_per_hrs;
                per_absent_date = Absent;
                pre_ondu_date = Onduty;
                pre_leave_date = Leave;
                // per_workingdays = workingdays - per_holidate - per_njdate;
                per_workingdays = workingdays - per_njdate;
                per_workingdays1 = ((mng_conducted_half_days * fnhrs) + (evng_conducted_half_days * (NoHrs - fnhrs))) - ((Convert.ToInt16(per_holidate_mng) * fnhrs) + (Convert.ToInt16(per_holidate_evng) * (NoHrs - fnhrs))) - notconsider_value - dum_unmark; //dum_unmark hided on 08.08.12 // ((Convert.ToInt16(njdate_mng) * fnhrs) + (Convert.ToInt16(njdate_evng) * (NoHrs - fnhrs)));

                per_workingdays1 = (((mng_conducted_half_days * fnhrs) + (evng_conducted_half_days * (NoHrs - fnhrs))) - my_un_mark) - notconsider_value; //added on 08.08.12,notconsider value added for hr suspension,09.08.12 mythili

                //  per_workingdays1 = ((mng_conducted_half_days * fnhrs) + (evng_conducted_half_days * (NoHrs - fnhrs))) -  notconsider_value - dum_unmark;
                per_dum_unmark = dum_unmark; //hided on 08.08.12
            }
        }
        catch
        {
        }
    }

    protected void format2btn_Click(object sender, EventArgs e)
    {

    }

    protected void TextBoxnew_TextChanged(object sender, EventArgs e)
    {
        Labelnew.Visible = false;
        TextBoxnew.Visible = false;
        //if (ddlletter.SelectedIndex == 3)
        //{
        //    Labelnew.Visible = true;
        //    TextBoxnew.Visible = true;
        //    Label4.Visible = false;
        //    bindpdfletter4();
        //}
        //if (ddlletter.SelectedIndex == 5)///----------------------add by thirumalai 22-09-2014
        //{
        //    Labelnew.Visible = true;
        //    TextBoxnew.Visible = true;
        //    Label4.Visible = false;
        //    bindpdfletter15();
        //}
        if (ddlletter.SelectedIndex == 2)///----------------------added by M.SakthiPriya 02/02/2015
        {
            Labelnew.Visible = true;
            TextBoxnew.Visible = true;
            Label4.Visible = false;
            bindpdfletter16();
        }
    }

    

    //-----------------start------------------------add by thirumalai 22-09-2014
    //public void bindpdfletter15()
    //{
    //    Font Fontbold = new Font("Book Antiqua", 15, FontStyle.Bold);
    //    //Font Fontbold = new Font("Times New Roman", 20, FontStyle.Bold);
    //    Font Fontsmall = new Font("Book Antiqua", 11, FontStyle.Regular);
    //    Font Fontbold1 = new Font("Book Antiqua", 12, FontStyle.Bold);
    //    Font tamil = new Font("AMUDHAM.TTF", 16, FontStyle.Regular);

    //    Gios.Pdf.PdfDocument mydoc = new Gios.Pdf.PdfDocument(PdfDocumentFormat.A4);
    //    DataTable dtmark = new DataTable();
    //    DataColumn dc;
    //    dc = new DataColumn();
    //    dc.ColumnName = "Sno";
    //    dtmark.Columns.Add(dc);
    //    dc = new DataColumn();
    //    dc.ColumnName = "subjectcode";
    //    dtmark.Columns.Add(dc);
    //    dc = new DataColumn();
    //    dc.ColumnName = "subjectname";
    //    dtmark.Columns.Add(dc);
    //    dc = new DataColumn();
    //    dc.ColumnName = "mark";
    //    dtmark.Columns.Add(dc);
    //    dc = new DataColumn();
    //    dc.ColumnName = "result";
    //    dtmark.Columns.Add(dc);
    //    DataRow dr;
    //    string Registration_no = "";
    //    int xres = 0;
    //    int mm = 1;

    //    FpEntry.SaveChanges();

    //    frdate = TextBox2.Text;
    //    todate = TextBox1.Text;

    //    string strsc = "";
    //    if (ddlBranch.Text != "")
    //    {
    //        branch = ddlBranch.SelectedItem.Text;
    //    }
    //    if (ddlDegree.Text != "")
    //    {
    //        degree = ddlDegree.SelectedItem.Text;
    //    }
    //    sem = ddlSemYr.SelectedValue;
    //    sec = ddlSec.SelectedValue;
    //    if (ddlSemYr.Text != "")
    //    {
    //        semester = Convert.ToInt32(ddlSemYr.SelectedValue);
    //    }
    //    colege_code = Session["collegecode"].ToString();
    //    degree1 = ddlBranch.SelectedValue;
    //    FpSpread1.Sheets[0].RowCount = 0;
    //    Label4.Visible = true;
    //    for (int j = 0; j < chklstest.Items.Count; j++)
    //    {
    //        if (chklstest.Items[j].Selected == true)
    //        {
    //            string criteria_no = chklstest.Items[j].Value.ToString();
    //            test = chklstest.Items[j].Text.ToString();
    //            for (int res = 0; res < Convert.ToInt32(FpEntry.Sheets[0].RowCount); res++)
    //            {
    //                isval = 0;
    //                dtmark.Rows.Clear();
    //                s = FpEntry.Sheets[0].Cells[res, 0].Text;
    //                isval = Convert.ToInt32(FpEntry.Sheets[0].Cells[res, 1].Value);
    //                if (isval == 1)
    //                {
    //                    sno = 0;
    //                    DataSet ds = new DataSet();
    //                    Label4.Visible = false;
    //                    //format2btn.Visible = true;

    //                    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    //                    if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //                    {
    //                        //  string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo from collinfo where college_code=" + Session["collegecode"] + "";
    //                        string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(phoneno,'-') as phoneno,isnull(pincode,'-')as pincode,logo1 as logo,category,affliatedby,isnull(faxno,'-') as faxno,district,email,website,state from collinfo where college_code=" + Session["collegecode"] + "";
    //                        SqlCommand collegecmd = new SqlCommand(college, con);
    //                        SqlDataReader collegename;
    //                        con.Close();
    //                        con.Open();
    //                        collegename = collegecmd.ExecuteReader();
    //                        if (collegename.HasRows)
    //                        {
    //                            while (collegename.Read())
    //                            {
    //                                collnamenew1 = collegename["collname"].ToString();
    //                                address1 = collegename["address1"].ToString();
    //                                address2 = collegename["address2"].ToString();
    //                                address3 = collegename["address3"].ToString();
    //                                pincode = collegename["pincode"].ToString();
    //                                email = collegename["email"].ToString();
    //                                Phoneno = collegename["phoneno"].ToString();
    //                                address = address1 + address2;
    //                            }
    //                        }
    //                        con.Close();
    //                    }
    //                    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //                    rol_no = FpEntry.Sheets[0].Cells[res, 2].Text;

    //                    string Toaddress = "select parent_name as pname,parent_addressP as padd1,streetc as padd2,parent_pincodeP as ppin,districtc as pdistrict from applyn where app_no in (select app_no from registration where roll_no='" + rol_no + "')";
    //                    SqlCommand Toaddcmd = new SqlCommand(Toaddress, con);
    //                    SqlDataReader Toaddreader;
    //                    con.Close();
    //                    con.Open();
    //                    string toaddname = "";
    //                    string toadd1 = "";
    //                    string toadd2 = "";
    //                    string topin = "";
    //                    string todistrict = "";
    //                    Toaddreader = Toaddcmd.ExecuteReader();
    //                    if (Toaddreader.HasRows)
    //                    {
    //                        while (Toaddreader.Read())
    //                        {
    //                            toaddname = Toaddreader["pname"].ToString();
    //                            toadd1 = Toaddreader["padd1"].ToString();
    //                            toadd2 = Toaddreader["padd2"].ToString();
    //                            topin = Toaddreader["ppin"].ToString();
    //                            todistrict = Toaddreader["pdistrict"].ToString();
    //                        }
    //                    }
    //                    Label4.Visible = false;
    //                    //format2btn.Visible = true;
    //                    name = FpEntry.Sheets[0].Cells[res, 4].Text;
    //                    gsem3 = "";
    //                    sem = ddlSemYr.SelectedValue.ToString();
    //                    if (sem == "1")
    //                        gsem3 = "I";
    //                    else if (sem == "2")
    //                        gsem3 = "II";
    //                    else if (sem == "3")
    //                        gsem3 = "III";
    //                    else if (sem == "4")
    //                        gsem3 = "IV";
    //                    else if (sem == "5")
    //                        gsem3 = "V";
    //                    else if (sem == "6")
    //                        gsem3 = "VI";
    //                    else if (sem == "7")
    //                        gsem3 = "VII";
    //                    else if (sem == "8")
    //                        gsem3 = "VIII";
    //                    else if (sem == "9")
    //                        gsem3 = "IX";
    //                    else if (sem == "10")
    //                        gsem3 = "X";

    //                    gget_dept_acronym = GetFunction("select dept_acronym from department where dept_name='" + ddlBranch.SelectedItem.ToString() + "'");

    //                    //@@@@@@@@@@@@@ find the min exam date month and year
    //                    filteration();
    //                    string filterwithsection = "a.app_no=r.app_no and r.degree_code='" + degree1.ToString() + "' and et.subject_no=s.subject_no and r.batch_year='" + ddlBatch.SelectedValue.ToString() + "' and RollNo_Flag<>0 and et.exam_code=rt.exam_code and et.criteria_no ='" + criteria_no + "' and r.roll_no=rt.roll_no and cc=0 and exam_flag <> 'DEBAR' and delflag=0   and r.sections='" + ddlSec.SelectedValue.ToString() + "' " + strorder + ",s.subject_no";
    //                    string filterwithoutsection = "a.app_no=r.app_no and r.degree_code='" + degree1.ToString() + "' and et.subject_no=s.subject_no and r.batch_year='" + ddlBatch.SelectedValue.ToString() + "' and RollNo_Flag<>0 and et.exam_code=rt.exam_code and et.criteria_no ='" + criteria_no + "' and r.roll_no=rt.roll_no and cc=0 and exam_flag <> 'DEBAR' and delflag=0  " + strorder + ",s.subject_no";

    //                    hat.Clear();//'---------------------------new myth-------------------------------------
    //                    hat.Add("batchyear", ddlBatch.SelectedValue.ToString());
    //                    hat.Add("degreecode", ddlBranch.SelectedValue.ToString());
    //                    hat.Add("criteria_no", criteria_no.ToString());
    //                    hat.Add("sections", ddlSec.SelectedValue.ToString());
    //                    hat.Add("filterwithsection", filterwithsection.ToString());
    //                    hat.Add("filterwithoutsection", filterwithoutsection.ToString());
    //                    ds2 = dacces.select_method("PROC_STUD_ALL_SUBMARK", hat, "sp");
    //                    string min_examdate = "";
    //                    string final_date = "";
    //                    string examdate = "";
    //                    for (int i = 0; i < ds2.Tables[1].Rows.Count; i++)
    //                    {
    //                        examdate = ds2.Tables[1].Rows[i]["exam_date"].ToString();
    //                        string[] spl_examdate = examdate.Split('/');
    //                        string aftr_spl = spl_examdate[1].ToString() + "/" + spl_examdate[0].ToString() + "/" + spl_examdate[2].ToString();
    //                        if (min_examdate == "")
    //                        {
    //                            min_examdate = aftr_spl;
    //                        }
    //                        else
    //                        {
    //                            if (Convert.ToDateTime(min_examdate) < Convert.ToDateTime(aftr_spl))
    //                            {
    //                                final_date = min_examdate;
    //                            }
    //                            else
    //                            {
    //                                final_date = aftr_spl;
    //                            }
    //                        }
    //                    }
    //                    int date_mm = 0;
    //                    int date_yr = 0;
    //                    gdate_yr = 0;
    //                    if (final_date != "")
    //                    {
    //                        date_mm = Convert.ToDateTime(final_date).Month;
    //                        gdate_yr = Convert.ToDateTime(final_date).Year;
    //                    }
    //                    gstrExam_month = "";
    //                    if (date_mm.ToString() != "")
    //                    {
    //                        if (date_mm.ToString() == "1")
    //                            gstrExam_month = "Jan ";
    //                        else if (date_mm.ToString() == "2")
    //                            gstrExam_month = "Feb ";
    //                        else if (date_mm.ToString() == "3")
    //                            gstrExam_month = "Mar ";
    //                        else if (date_mm.ToString() == "4")
    //                            gstrExam_month = "Apr ";
    //                        else if (date_mm.ToString() == "5")
    //                            gstrExam_month = "Mar ";
    //                        else if (date_mm.ToString() == "6")
    //                            gstrExam_month = "Jun ";
    //                        else if (date_mm.ToString() == "7")
    //                            gstrExam_month = "Jul ";
    //                        else if (date_mm.ToString() == "8")
    //                            gstrExam_month = "Aug ";
    //                        else if (date_mm.ToString() == "9")
    //                            gstrExam_month = "Sep ";
    //                        else if (date_mm.ToString() == "10")
    //                            gstrExam_month = "Oct ";
    //                        else if (date_mm.ToString() == "11")
    //                            gstrExam_month = "Nov ";
    //                        else if (date_mm.ToString() == "12")
    //                            gstrExam_month = "Dec ";
    //                    }
    //                    // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].Text = "obtained the following marks in the " + chklstest.SelectedItem.ToString() + " Conducted in "+strExam_month+"'"+date_yr;// "has secured the following  marks in ";

    //                    int count = 0;
    //                    double maxc = 0;
    //                    int serial_no = 0;
    //                    string subjname = "";
    //                    string subjcode = "";
    //                    string result = "";
    //                    string checkmarks = "";
    //                    string getmark = "";
    //                    /////////   modified
    //                    //// modify
    //                    string selectmark = "select distinct e.subject_no,sub.subject_name,sub.subject_code,max_mark,min_mark,marks_obtained from subjectchooser s,registration rg,exam_type e,result r, subject sub where sub.subject_no=s.subject_no and  s.subject_no=e.subject_no and s.roll_no=rg.roll_no  and e.exam_code=r.exam_code and rg.roll_no=r.roll_no and e.criteria_no='" + criteria_no + "' and r.roll_no='" + rol_no + "'";
    //                    hat.Clear();
    //                    hat.Add("rollnum", rol_no.ToString());
    //                    hat.Add("criteriano", criteria_no.ToString());

    //                    ds = dacces.select_method(selectmark, hat, "cmd");
    //                    if (ds.Tables[0].Rows.Count > 0)
    //                    {
    //                        for (int dscount = 0; dscount < ds.Tables[0].Rows.Count; dscount++)
    //                        {
    //                            sno++;
    //                            subjname = ds.Tables[0].Rows[dscount]["subject_name"].ToString();
    //                            minmark = ds.Tables[0].Rows[dscount]["min_mark"].ToString();
    //                            maxmark = ds.Tables[0].Rows[dscount]["max_mark"].ToString();
    //                            checkmarks = ds.Tables[0].Rows[dscount]["marks_obtained"].ToString();
    //                            subjcode = ds.Tables[0].Rows[dscount]["subject_code"].ToString();
    //                            string marks = findresult(checkmarks);
    //                            if (marks != "")
    //                            {
    //                                getmark = marks;

    //                                if (TextBoxnew.Text != string.Empty)
    //                                {
    //                                    double newval = (Convert.ToDouble(TextBoxnew.Text) / Convert.ToDouble(maxmark));
    //                                    maxc = 0;
    //                                    if (getmark != "AB" && getmark != "AAA" && getmark != "EL" && getmark != "EOD" && getmark != "ML" && getmark != "SOD" && getmark != "NSS" && getmark != "NJ" && getmark != "S" && getmark != "L" && getmark != "NCC" && getmark != "HS" && getmark != "PP" && getmark != "SYOD" && getmark != "COD" && getmark != "OOD" && getmark != "OD" && getmark != "" && getmark != " " && getmark != "LA" && getmark != "" && getmark != " " && getmark != "RAA")//added on 26.07.12//Added By subburaj 21.08.2014
    //                                    {
    //                                        maxc = Convert.ToDouble(newval) * Convert.ToDouble(getmark);
    //                                        getmark = maxc.ToString();
    //                                    }
    //                                    else
    //                                    {
    //                                        getmark = marks;
    //                                    }
    //                                }
    //                            }
    //                            else
    //                            {
    //                                getmark = checkmarks;
    //                                if (TextBoxnew.Text != string.Empty)
    //                                {
    //                                    double newval = (Convert.ToDouble(TextBoxnew.Text) / Convert.ToDouble(maxmark));
    //                                    maxc = 0;
    //                                    if (getmark != "AB" && getmark != "AAA" && getmark != "EL" && getmark != "EOD" && getmark != "ML" && getmark != "SOD" && getmark != "NSS" && getmark != "NJ" && getmark != "S" && getmark != "L" && getmark != "NCC" && getmark != "HS" && getmark != "PP" && getmark != "SYOD" && getmark != "COD" && getmark != "OOD" && getmark != "OD" && getmark != "" && getmark != " " && getmark != "LA" && getmark != "" && getmark != " " && getmark != "RAA")//added on 26.07.12//added by Subburaj  21.08.2014
    //                                    {
    //                                        maxc = Convert.ToDouble(newval) * Convert.ToDouble(getmark);
    //                                    }

    //                                    getmark = maxc.ToString();

    //                                }
    //                            }

    //                            if ((((Convert.ToDouble(checkmarks)) < (Convert.ToDouble(minmark)))) && Convert.ToString(checkmarks) != "-2" && Convert.ToString(checkmarks) != "-3")
    //                            {
    //                                result = "Fail";
    //                            }
    //                            else
    //                            {
    //                                result = "Pass";
    //                            }
    //                            dr = dtmark.NewRow();
    //                            dr["Sno"] = sno.ToString();
    //                            dr["subjectname"] = subjname;
    //                            dr["subjectcode"] = subjcode;
    //                            dr["mark"] = getmark;
    //                            dr["result"] = result;
    //                            dtmark.Rows.Add(dr);
    //                        }
    //                    }
    //                    for (int colm = 0; colm <= FpEntry.Sheets[0].ColumnCount - 1; colm++)
    //                    {
    //                        if (FpEntry.Sheets[0].ColumnHeader.Cells[8, colm].Text == "Rank")
    //                        {

    //                            grank = FpEntry.Sheets[0].Cells[res, colm].Text;

    //                            if (grank == "")
    //                            {
    //                                grank = "-";
    //                            }

    //                        }

    //                    }

    //                    int count1 = count;

    //                    dum_tage_date = "";
    //                    per_tage_day = 0;
    //                    persentmonthcal();


    //                    per_con_hrs = per_workingdays1;

    //                    per_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / (per_con_hrs + tot_conduct_hr_spl_fals)) * 100);

    //                    if (per_tage_hrs > 100)
    //                    {
    //                        per_tage_hrs = 100;
    //                    }
    //                    per_tage_day = per_tage_hrs;


    //                    dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //                    if (dum_tage_date == "NaN")
    //                    {
    //                        dum_tage_date = "0";
    //                    }
    //                    else if (dum_tage_date == "Infinity")
    //                    {
    //                        dum_tage_date = "0";
    //                    }


    //                    con.Close();
    //                    if (Registration_no == "")
    //                    {
    //                        Registration_no = rol_no;
    //                    }
    //                    else
    //                    {
    //                        Registration_no = Registration_no + "-" + rol_no;
    //                    }
    //                    if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //                    {
    //                        string college = "select * from PeriodAttndSchedule where  degree_code=" + ddlBranch.SelectedValue.ToString() + " and semester=" + ddlSemYr.SelectedValue.ToString() + "";
    //                        SqlCommand collegecmd = new SqlCommand(college, con);
    //                        SqlDataReader attendance;
    //                        con.Close();
    //                        con.Open();
    //                        attendance = collegecmd.ExecuteReader();
    //                        if (attendance.HasRows)
    //                        {
    //                            while (attendance.Read())
    //                            {

    //                                attendanceper = attendance["percent_eligible_for_exam"].ToString();
    //                                // address1 = attendance["address1"].ToString();

    //                            }
    //                        }
    //                        con.Close();
    //                    }

    //                    Bindpdf15(mydoc, Fontsmall, Fontbold, Fontbold1, dtmark, Response);

    //                }//END IF ISVAL
    //            }//END FOR LOOP
    //        }
    //    }
    //    string RegisterNumber = Registration_no.ToString();
    //    string[] RNumber = RegisterNumber.Split(new char[] { '-' });



    //}

   

    //public void Bindpdf15(Gios.Pdf.PdfDocument mydoc, Font Fontsmall, Font Fontbold, Font Fontbold1, DataTable dt, HttpResponse response)
    //{
    //    try
    //    {
    //        int cnt;
    //        sno = dt.Rows.Count;
    //        int subno = 0;
    //        int pagecount = sno / 13;
    //        int repage = sno % 13;
    //        lblesr.Text = "";
    //        int nopages = pagecount;
    //        if (repage > 0)
    //        {
    //            nopages++;
    //        }
    //        if (nopages > 0)
    //        {
    //            for (int row = 0; row < nopages; row++)
    //            {
    //                subno++;
    //                Gios.Pdf.PdfPage mypdfpage = mydoc.NewPage();

    //                PdfArea tete = new PdfArea(mydoc, 10, 10, 570, 820);

    //                PdfRectangle pr1 = new PdfRectangle(mydoc, tete, Color.Black);
    //                mypdfpage.Add(pr1);
    //                PdfTextArea ptc = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 100, 40, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, collnamenew1);
    //                PdfTextArea pts = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 100, 60, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address1 + "  " + address2);
    //                PdfTextArea p = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 100, 80, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address3 + "  -  " + pincode);
    //                if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))//Aruna
    //                {
    //                    PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
    //                    mypdfpage.Add(LogoImage, 25, 25, 300);
    //                }
    //                cnt = subno * sno;
    //                Gios.Pdf.PdfTable table = mydoc.NewTable(Fontsmall, cnt + 1, 5, 1);
    //                mypdfpage.Add(ptc);
    //                mypdfpage.Add(pts);
    //                mypdfpage.Add(p);
    //                if (subno == 1)
    //                {
    //                    PdfTextArea ptc2 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 50, 120, 570, 30), System.Drawing.ContentAlignment.MiddleCenter, "Department of " + ddlBranch.SelectedItem.ToString());
    //                    PdfTextArea ptc3 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 15, 160, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Dear Sir/Madam,");
    //                    PdfTextArea ptc4 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 30, 180, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Sub:Progress Report-Test   (" + test + ")" + "  " + "& Attendance - Intimation Reg");
    //                    string get_dept_acronym = GetFunction("select dept_acronym from department where dept_name='" + ddlBranch.SelectedItem.ToString() + "'");
    //                    PdfTextArea ptc5 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 25, 200, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Your Son/Daughter" + " " + name + "" + "[" + rol_no + "]" + "  " + "Student of " + "  " + gsem3 + " " + degree + " " + get_dept_acronym + " ");
    //                    PdfTextArea ptc6 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 25, 220, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Obtained the following marks in the" + " " + test + "  " + "Conducted in" + "  " + gstrExam_month + "'" + gdate_yr);
    //                    mypdfpage.Add(ptc2);
    //                    mypdfpage.Add(ptc3);
    //                    mypdfpage.Add(ptc4);
    //                    mypdfpage.Add(ptc5);
    //                    mypdfpage.Add(ptc6);
    //                    table.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //                    table.Columns[0].SetWidth(50);
    //                    table.Columns[1].SetWidth(100);
    //                    table.Columns[2].SetWidth(250);
    //                    table.Columns[3].SetWidth(100);
    //                    table.Columns[4].SetWidth(100);
    //                    table.CellRange(0, 0, 0, 4).SetFont(Fontbold1);
    //                    table.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table.Cell(0, 0).SetContent("Sl.No");
    //                    table.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table.Cell(0, 1).SetContent("Subject code");
    //                    table.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table.Cell(0, 2).SetContent("Subject Name");
    //                    table.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table.Cell(0, 3).SetContent("Marks out of" + TextBoxnew.Text);
    //                    table.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table.Cell(0, 4).SetContent("Remarks");
    //                }
    //                int val = 0;
    //                if (subno == 1)
    //                {
    //                    if (cnt < 13)
    //                    {
    //                        for (int i = 0; i < cnt; i++)
    //                        {
    //                            val++;
    //                            int snor = Convert.ToInt16(dt.Rows[i]["sno"]);
    //                            table.Cell(val, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            table.Cell(val, 0).SetContent(snor);
    //                            string scode = dt.Rows[i]["subjectcode"].ToString();
    //                            table.Cell(val, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                            table.Cell(val, 1).SetContent(scode);
    //                            string sname = dt.Rows[i]["subjectname"].ToString();
    //                            table.Cell(val, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                            table.Cell(val, 2).SetContent(sname);
    //                            string mark = dt.Rows[i]["mark"].ToString();
    //                            table.Cell(val, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            table.Cell(val, 3).SetContent(mark);
    //                            string result = dt.Rows[i]["result"].ToString();
    //                            table.Cell(val, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                            table.Cell(val, 4).SetContent(result);
    //                        }
    //                        int xcout = (val * 20) + 250;
    //                        PdfTextArea pt123dr = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                       new PdfArea(mydoc, 20, xcout + 20, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "Rank:" + " " + grank);
    //                        PdfTextArea ptc7 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 25, xcout + 40, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "His/Her Perfomance is GOOD/SATISFACTORY/UNSATISFACTORY");
    //                        PdfTextArea ptc8 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                  new PdfArea(mydoc, 25, xcout + 60, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance particulars");
    //                        PdfTextArea ptc9 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                  new PdfArea(mydoc, 25, xcout + 80, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance as on  : " + " " + DateTime.Now.ToString("dd-MM-yyyy"));
    //                        //------------------------start-----------------------------// By M.SakthiPriya 05-12-2014
    //                        if (Session["Hourwise"] == "1")
    //                        {
    //                            PdfTextArea ptc10 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                      new PdfArea(mydoc, 25, xcout + 100, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of Working Hours : " + " " + Convert.ToString(per_con_hrs + tot_conduct_hr_spl_fals));
    //                            PdfTextArea ptc11 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                      new PdfArea(mydoc, 25, xcout + 140, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of Hours Attend : " + " " + Convert.ToString(per_per_hrs + tot_per_hrs_spl_fals));
    //                            PdfTextArea ptc12 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                      new PdfArea(mydoc, 25, xcout + 180, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance Percentage in Hours: " + " " + dum_tage_date.ToString());
    //                            mypdfpage.Add(ptc10);
    //                            mypdfpage.Add(ptc11);
    //                            mypdfpage.Add(ptc12);
    //                        }
    //                        if (Session["Daywise"] == "1")
    //                        {
    //                            PdfTextArea ptc110 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                     new PdfArea(mydoc, 25, xcout + 120, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of Working Days : " + " " + Convert.ToString(per_con_hrs + tot_conduct_hr_spl_fals));
    //                            PdfTextArea ptc111 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                      new PdfArea(mydoc, 25, xcout + 160, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of Days attend : " + " " + Convert.ToString(per_per_hrs + tot_per_hrs_spl_fals));
    //                            PdfTextArea ptc112 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                      new PdfArea(mydoc, 25, xcout + 200, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance Percentage in Days: " + " " + dum_tage_date.ToString());
    //                            mypdfpage.Add(ptc110);
    //                            mypdfpage.Add(ptc111);
    //                            mypdfpage.Add(ptc112);
    //                        }
    //                        //------------------------End-----------------------------// By M.SakthiPriya 05-12-2014
    //                        PdfTextArea ptc13 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                 new PdfArea(mydoc, 25, xcout + 240, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "You are Requested to meet the Class Teacher/HOD in this Regard on or before............");
    //                        PdfTextArea ptc14 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                 new PdfArea(mydoc, 25, xcout + 270, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "NOTE: As per DOTE regulations a student has to secure a minimum of " + attendanceper + "% attendance to appear for the examination.");
    //                        PdfTextArea ptc15 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                new PdfArea(mydoc, 25, 740, 500, 30), System.Drawing.ContentAlignment.MiddleLeft, "Class Teacher");
    //                        PdfTextArea ptc16 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                new PdfArea(mydoc, 25, 740, 500, 30), System.Drawing.ContentAlignment.MiddleCenter, "HOD");
    //                        PdfTextArea ptc17 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                new PdfArea(mydoc, 25, 740, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "PRINCIPAL");
    //                        PdfTextArea ptc18 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                new PdfArea(mydoc, 25, 790, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Parent/Guardian Signature------------------");
    //                        Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 25, 250, 550, 800));
    //                        mypdfpage.Add(newpdftabpage);
    //                        mypdfpage.Add(pt123dr);
    //                        mypdfpage.Add(ptc7);
    //                        mypdfpage.Add(ptc8);
    //                        mypdfpage.Add(ptc9);
    //                        mypdfpage.Add(ptc13);
    //                        mypdfpage.Add(ptc14);
    //                        mypdfpage.Add(ptc15);
    //                        mypdfpage.Add(ptc16);
    //                        mypdfpage.Add(ptc17);
    //                        mypdfpage.Add(ptc18);
    //                    }
    //                    else
    //                    {
    //                        for (int i = 0; i < cnt; i++)
    //                        {
    //                            val++;
    //                            int snor = Convert.ToInt16(dt.Rows[i]["sno"]);
    //                            table.Cell(val, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            table.Cell(val, 0).SetContent(snor);
    //                            string scode = dt.Rows[i]["subjectcode"].ToString();
    //                            table.Cell(val, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                            table.Cell(val, 1).SetContent(scode);
    //                            string sname = dt.Rows[i]["subjectname"].ToString();
    //                            table.Cell(val, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                            table.Cell(val, 2).SetContent(sname);
    //                            string mark = dt.Rows[i]["mark"].ToString();
    //                            table.Cell(val, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            table.Cell(val, 3).SetContent(mark);
    //                            string result = dt.Rows[i]["result"].ToString();
    //                            table.Cell(val, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                            table.Cell(val, 4).SetContent(result);
    //                        }
    //                        int xcout = (val * 20) + 250;
    //                        Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 25, 250, 550, 800));
    //                        mypdfpage.Add(newpdftabpage);
    //                        PdfTextArea pt123dr = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                       new PdfArea(mydoc, 20, xcout + 20, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "Rank:" + " " + grank);
    //                        PdfTextArea ptc7 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                               new PdfArea(mydoc, 25, xcout + 40, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "His/Her Perfomance is GOOD / SATISFACTORY / UNSATISFACTORY");
    //                        mypdfpage.Add(ptc7);
    //                        mypdfpage.Add(pt123dr);
    //                    }
    //                }
    //                if (subno > 1)
    //                {
    //                    PdfTextArea ptc8 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                                 new PdfArea(mydoc, 25, 160, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance particulars");
    //                    PdfTextArea ptc9 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                              new PdfArea(mydoc, 25, 200, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance as on : " + " " + DateTime.Now.ToString("dd-MM-yyyy"));
    //                    PdfTextArea ptc10 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,

    //                                              new PdfArea(mydoc, 25, 220, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of working Period  :" + " " + Convert.ToString(per_con_hrs + tot_conduct_hr_spl_fals));
    //                    PdfTextArea ptc11 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                              new PdfArea(mydoc, 25, 240, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of Period attend : " + " " + Convert.ToString(per_per_hrs + tot_per_hrs_spl_fals));
    //                    PdfTextArea ptc12 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                              new PdfArea(mydoc, 25, 260, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance Percentage : " + " " + dum_tage_date.ToString());
    //                    PdfTextArea ptc13 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                             new PdfArea(mydoc, 25, 300, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "You are Requested to meet the Class Teacher/HOD in this Regard on or before...........");

    //                    PdfTextArea ptc14 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                             new PdfArea(mydoc, 25, 340, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "NOTE : As per DOTE regulations a student has to secure a minimum of " + attendanceper + "% attendance to appear for the examination.");

    //                    PdfTextArea ptc15 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                            new PdfArea(mydoc, 25, 740, 500, 30), System.Drawing.ContentAlignment.MiddleLeft, "TUTOR");
    //                    PdfTextArea ptc16 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                            new PdfArea(mydoc, 25, 740, 500, 30), System.Drawing.ContentAlignment.MiddleCenter, "ACADAMIC CO-ORDINATOR");
    //                    PdfTextArea ptc17 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                            new PdfArea(mydoc, 25, 740, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "PRINCIPAL");
    //                    PdfTextArea ptc18 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                            new PdfArea(mydoc, 25, 790, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Parent/Guardian Signature------------------");

    //                    mypdfpage.Add(ptc8);
    //                    mypdfpage.Add(ptc9);
    //                    mypdfpage.Add(ptc10);
    //                    mypdfpage.Add(ptc11);
    //                    mypdfpage.Add(ptc12);
    //                    mypdfpage.Add(ptc13);
    //                    mypdfpage.Add(ptc14);
    //                    mypdfpage.Add(ptc15);
    //                    mypdfpage.Add(ptc16);
    //                    mypdfpage.Add(ptc17);
    //                    mypdfpage.Add(ptc18);
    //                }
    //                if (txtnotes.Text != "")
    //                {
    //                    PdfTextArea ptc145 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                         new PdfArea(mydoc, 25, 590, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Notes:" + txtnotes.Text);
    //                    mypdfpage.Add(ptc145);
    //                }
    //                mypdfpage.SaveToDocument();
    //            }
    //            string appPath = HttpContext.Current.Server.MapPath("~");
    //            if (appPath != "")
    //            {
    //                string szPath = appPath + "/Report/";
    //                //string szFile = "Format1.pdf";
    //                //Modified By Srinath 24/9/2014
    //                //string szFile = "Format1.pdf";
    //                string szFile = "Format1" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";
    //                mydoc.SaveToFile(szPath + szFile);
    //                Response.ClearHeaders();
    //                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
    //                Response.ContentType = "application/pdf";
    //                Response.WriteFile(szPath + szFile);
    //                //=============================================
    //            }
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        lblesr.Text = ex.ToString();
    //    }
    //}
    //-----------------end------------------------add by thirumalai 22-09-2014
    //public void letter3()
    //{

    //    string Registration_no = "";
    //    int xres = 0;
    //    int mm = 1;

    //    FpEntry.SaveChanges();
    //    FpSpread1.SaveChanges();

    //    frdate = TextBox2.Text;
    //    todate = TextBox1.Text;

    //    string strsc = "";
    //    if (ddlBranch.Text != "")
    //    {
    //        branch = ddlBranch.SelectedItem.Text;
    //    }
    //    if (ddlDegree.Text != "")
    //    {
    //        degree = ddlDegree.SelectedItem.Text;
    //    }
    //    sem = ddlSemYr.SelectedValue;
    //    sec = ddlSec.SelectedValue;
    //    //if (ddlTest.Text != "")
    //    //{
    //    //    test = chklstest.SelectedItem.Text;
    //    //}
    //    if (ddlSemYr.Text != "")
    //    {
    //        semester = Convert.ToInt32(ddlSemYr.SelectedValue);
    //    }
    //    colege_code = Session["collegecode"].ToString();
    //    degree1 = ddlBranch.SelectedValue;

    //    FpSpread1.Sheets[0].RowCount = 0;
    //    Label4.Visible = true;
    //    for (int j = 0; j < chklstest.Items.Count; j++)
    //    {
    //        if (chklstest.Items[j].Selected == true)
    //        {
    //            string criteria_no = chklstest.Items[j].Value.ToString();
    //            test = chklstest.Items[j].Text.ToString();
    //            for (int res = 0; res < Convert.ToInt32(FpEntry.Sheets[0].RowCount) - 4; res++)
    //            {
    //                isval = 0;
    //                s = FpEntry.Sheets[0].Cells[res, 0].Text;
    //                isval = Convert.ToInt32(FpEntry.Sheets[0].Cells[res, 0].Value);
    //                if (isval == 1)
    //                {
    //                    Label4.Visible = false;
    //                    //format2btn.Visible = true;
    //                    FpSpread1.Visible = true;
    //                    FpSpread1.Sheets[0].PageSize = 50;
    //                    FpSpread1.Sheets[0].RowHeader.Visible = false;

    //                    FpSpread1.Sheets[0].DefaultStyle.Font.Name = "Book Antique";
    //                    FpSpread1.Sheets[0].DefaultStyle.Font.Bold = false;
    //                    FpSpread1.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;

    //                    FpSpread1.Sheets[0].ColumnHeader.Visible = false;
    //                    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //                    hat.Clear();
    //                    hat.Add("college_code", Session["collegecode"].ToString());
    //                    hat.Add("form_name", "CAMLetter.aspx");
    //                    dsprint = dacces.select_method("PROC_PRINT_MASTER_SETTINGS", hat, "sp");
    //                    if (dsprint.Tables[0].Rows.Count > 0)
    //                    {

    //                        if (dsprint.Tables[0].Rows[0]["college_name"].ToString() != string.Empty)
    //                        {
    //                            collnamenew1 = dsprint.Tables[0].Rows[0]["college_name"].ToString();
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["address1"].ToString() != "")
    //                        {
    //                            address1 = dsprint.Tables[0].Rows[0]["address1"].ToString();
    //                            address = address1;
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["address2"].ToString() != "")
    //                        {
    //                            address2 = dsprint.Tables[0].Rows[0]["address2"].ToString();
    //                            address = address1 + "-" + address2;
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["address3"].ToString() != "")
    //                        {
    //                            district = dsprint.Tables[0].Rows[0]["address3"].ToString();
    //                            address = address1 + "-" + address2 + "-" + district;
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["pincode"].ToString() != "")
    //                        {
    //                            pincode = dsprint.Tables[0].Rows[0]["pincode"].ToString();

    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["phoneno"].ToString() != "")
    //                        {
    //                            Phoneno = dsprint.Tables[0].Rows[0]["phoneno"].ToString();
    //                            phnfax = "Phone :" + " " + Phoneno;
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["faxno"].ToString() != "")
    //                        {
    //                            Faxno = dsprint.Tables[0].Rows[0]["faxno"].ToString();
    //                            phnfax = phnfax + "Fax  :" + " " + Faxno;
    //                        }

    //                        if ((dsprint.Tables[0].Rows[0]["email"].ToString() != ""))
    //                        {
    //                            email = "E-Mail:" + dsprint.Tables[0].Rows[0]["email"].ToString();
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["website"].ToString() != "")
    //                        {
    //                            email = email + " " + "Web Site:" + dsprint.Tables[0].Rows[0]["website"].ToString();
    //                        }
    //                    }
    //                    else if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //                    {
    //                        //  string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo from collinfo where college_code=" + Session["collegecode"] + "";
    //                        string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(phoneno,'-') as phoneno,isnull(pincode,'-')as pincode,logo1 as logo,category,affliatedby,isnull(faxno,'-') as faxno,district,email,website,state from collinfo where college_code=" + Session["collegecode"] + "";
    //                        SqlCommand collegecmd = new SqlCommand(college, con);
    //                        SqlDataReader collegename;
    //                        con.Close();
    //                        con.Open();
    //                        collegename = collegecmd.ExecuteReader();
    //                        if (collegename.HasRows)
    //                        {
    //                            while (collegename.Read())
    //                            {
    //                                collnamenew1 = collegename["collname"].ToString();
    //                                address1 = collegename["address1"].ToString();
    //                                address2 = collegename["address2"].ToString();
    //                                address3 = collegename["address3"].ToString();
    //                                pincode = collegename["pincode"].ToString();
    //                                email = collegename["email"].ToString();
    //                                Phoneno = collegename["phoneno"].ToString();
    //                            }
    //                        }
    //                        con.Close();
    //                    }
    //                    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //                    rol_no = FpEntry.Sheets[0].Cells[res, 1].Text;
    //                    string Toaddress = "select parent_name as pname,parent_addressP as padd1,streetc as padd2,parent_pincodeP as ppin,districtc as pdistrict from applyn where app_no in (select app_no from registration where roll_no='" + rol_no + "')";
    //                    SqlCommand Toaddcmd = new SqlCommand(Toaddress, con);
    //                    SqlDataReader Toaddreader;
    //                    con.Close();
    //                    con.Open();
    //                    string toaddname = "";
    //                    string toadd1 = "";
    //                    string toadd2 = "";
    //                    string topin = "";
    //                    string todistrict = "";
    //                    Toaddreader = Toaddcmd.ExecuteReader();
    //                    if (Toaddreader.HasRows)
    //                    {
    //                        while (Toaddreader.Read())
    //                        {
    //                            toaddname = Toaddreader["pname"].ToString();
    //                            toadd1 = Toaddreader["padd1"].ToString();
    //                            toadd2 = Toaddreader["padd2"].ToString();
    //                            topin = Toaddreader["ppin"].ToString();
    //                            todistrict = Toaddreader["pdistrict"].ToString();
    //                        }
    //                    }
    //                    FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 30;
    //                    Label4.Visible = false;
    //                    //format2btn.Visible = true;
    //                    name = FpEntry.Sheets[0].Cells[res, 3].Text;
    //                    FpSpread1.Sheets[0].ColumnCount = 8;
    //                    FpSpread1.Sheets[0].Columns[0].Width = 50;
    //                    FpSpread1.Sheets[0].Columns[1].Width = 70;
    //                    FpSpread1.Sheets[0].Columns[2].Width = 180;
    //                    FpSpread1.Sheets[0].Columns[3].Width = 80;
    //                    FpSpread1.Sheets[0].Columns[4].Width = 70;
    //                    FpSpread1.Width = 950;
    //                    FpSpread1.Height = 500;

    //                    FpSpread1.Sheets[0].ScrollingContentVisible = true;
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 30, 0, 4, 1);

    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 25, 0, 1, 4);//added on 26.07.12
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 26, 0, 1, 4);//added on 26.07.12
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 23, 0, 1, 5);//added on 26.07.12
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 24, 0, 1, 5);//added on 26.07.12
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 22, 0, 1, 5);//added on 26.07.12
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 26, 2, 1, 2);

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Border.BorderStyle = BorderStyle.Solid;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 4].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 4].Border.BorderStyle = BorderStyle.Solid;

    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 30, 1, 1, 4);//added on 26.07.12
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 29, 1, 1, 4);//added on 26.07.12
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 28, 1, 1, 4);//added on 26.07.12
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 27, 1, 1, 4);//added on 26.07.12
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Font.Size = FontUnit.Medium;
    //                    if (dsprint.Tables[0].Rows.Count > 0)
    //                    {
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Text = collnamenew1;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Text = address1 + "," + address2 + "," + address3 + "-" + pincode;//modified on 26.07.12/// address;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Text = phnfax + "," + email;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 6].Border.BorderColorBottom = Color.White;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Text = "Date : " + TextBox2.Text;
    //                    }
    //                    else
    //                    {
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Text = collnamenew1;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Text = address1 + "," + address2 + "," + address3 + "-" + pincode;//modified on 26.07.12
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Text = "Phone: " + Phoneno + " Email: " + email;//address3;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 6].Border.BorderColorBottom = Color.White;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].HorizontalAlign = HorizontalAlign.Right;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Text = "Date: " + TextBox2.Text;
    //                    }
    //                    //---------------for logo start 10.04.12
    //                    MyImg mi = new MyImg();//set the logo for letter format
    //                    mi.ImageUrl = "Handler/Handler2.ashx?";
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 30, 0, 4, 1);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 0].CellType = mi;
    //                    FarPoint.Web.Spread.ImageCellType imgeve = new FarPoint.Web.Spread.ImageCellType();

    //                    //---------------end logo   

    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 27, 6, 3, 1);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 6].Border.BorderColor = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 5].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 5].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 5].Border.BorderColorRight = Color.White;

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 0].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 0].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 0].Text = "Department of " + ddlBranch.SelectedItem.ToString();// "Dear Parents,"; modified on 26.07.12
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 0].Font.Underline = true;
    //                    //     FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 0].Font.Size = FontUnit.Medium;
    //                    //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 2].Font.Bold = true;
    //                    // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 2].HorizontalAlign = HorizontalAlign.Center;
    //                    // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 2].Text = "Date  : " + DateTime.Now.Date.ToString("dd-MMM-yyyy");

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 0].Text = "Dear Sir/Madam, ";//"Sub: " + test + "Performance Report";
    //                    //     FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 0].Font.Size = FontUnit.Medium;

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 0].VerticalAlign = VerticalAlign.Middle;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 0].Margin.Left = 30;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 0].Text = "Sub: Progress Report - Test (" + test + ") & Attendance - Intimation Reg"; // "Your son/daughter " + name + " " + "[" + rol_no + "]" + "Studying in";
    //                    //      FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 0].Font.Size = FontUnit.Medium;

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].Margin.Left = 30;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].VerticalAlign = VerticalAlign.Middle;

    //                    //==========added on 26.07.12 mythili
    //                    string sem3 = "";
    //                    sem = ddlSemYr.SelectedValue.ToString();
    //                    if (sem == "1")
    //                        sem3 = "I";
    //                    else if (sem == "2")
    //                        sem3 = "II";
    //                    else if (sem == "3")
    //                        sem3 = "III";
    //                    else if (sem == "4")
    //                        sem3 = "IV";
    //                    else if (sem == "5")
    //                        sem3 = "V";
    //                    else if (sem == "6")
    //                        sem3 = "VI";
    //                    else if (sem == "7")
    //                        sem3 = "VII";
    //                    else if (sem == "8")
    //                        sem3 = "VIII";
    //                    else if (sem == "9")
    //                        sem3 = "IX";
    //                    else if (sem == "10")
    //                        sem3 = "X";
    //                    string get_dept_acronym = GetFunction("select dept_acronym from department where dept_name='" + ddlBranch.SelectedItem.ToString() + "'");
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].Text = "Your son/daughter " + name + " " + "[" + rol_no + "]" + "Student of " + sem3 + " " + degree + " " + get_dept_acronym + " ";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Margin.Left = 10;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].HorizontalAlign = HorizontalAlign.Left;
    //                    //     FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].Font.Size = FontUnit.Medium;

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 5].Border.BorderColorBottom = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 6].Border.BorderColorBottom = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 7].Border.BorderColorBottom = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Border.BorderColorLeft = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 4].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 4].Border.BorderColorRight = Color.White;

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 20, 4].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 19, 4].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 18, 4].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 17, 4].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 16, 4].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 15, 4].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 14, 4].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 13, 4].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 4].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 11, 4].Border.BorderColorRight = Color.White;
    //                    //+++++++++++++++++++++++++++++++++++++++++++++++++++++++

    //                    //@@@@@@@@@@@@@ find the min exam date month and year
    //                    hat.Clear();//'---------------------------new myth-------------------------------------
    //                    hat.Add("batchyear", ddlBatch.SelectedValue.ToString());
    //                    hat.Add("degreecode", ddlBranch.SelectedValue.ToString());
    //                    hat.Add("criteria_no", criteria_no.ToString());
    //                    hat.Add("sections", ddlSec.SelectedValue.ToString());
    //                    ds2 = dacces.select_method("PROC_STUD_ALL_SUBMARK", hat, "sp");
    //                    string min_examdate = "";
    //                    string final_date = "";
    //                    string examdate = "";
    //                    for (int i = 0; i < ds2.Tables[1].Rows.Count; i++)
    //                    {
    //                        examdate = ds2.Tables[1].Rows[i]["exam_date"].ToString();
    //                        string[] spl_examdate = examdate.Split('/');
    //                        string aftr_spl = spl_examdate[1].ToString() + "/" + spl_examdate[0].ToString() + "/" + spl_examdate[2].ToString();
    //                        if (min_examdate == "")
    //                        {
    //                            min_examdate = aftr_spl;
    //                        }
    //                        else
    //                        {
    //                            if (Convert.ToDateTime(min_examdate) < Convert.ToDateTime(aftr_spl))
    //                            {
    //                                final_date = min_examdate;
    //                            }
    //                            else
    //                            {
    //                                final_date = aftr_spl;
    //                            }
    //                        }
    //                    }
    //                    int date_mm = 0;
    //                    int date_yr = 0;
    //                    if (final_date != "")
    //                    {
    //                        date_mm = Convert.ToDateTime(final_date).Month;
    //                        date_yr = Convert.ToDateTime(final_date).Year;
    //                    }
    //                    string strExam_month = "";
    //                    if (date_mm.ToString() != "")
    //                    {
    //                        if (date_mm.ToString() == "1")
    //                            strExam_month = "Jan ";
    //                        else if (date_mm.ToString() == "2")
    //                            strExam_month = "Feb ";
    //                        else if (date_mm.ToString() == "3")
    //                            strExam_month = "Mar ";
    //                        else if (date_mm.ToString() == "4")
    //                            strExam_month = "Apr ";
    //                        else if (date_mm.ToString() == "5")
    //                            strExam_month = "Mar ";
    //                        else if (date_mm.ToString() == "6")
    //                            strExam_month = "Jun ";
    //                        else if (date_mm.ToString() == "7")
    //                            strExam_month = "Jul ";
    //                        else if (date_mm.ToString() == "8")
    //                            strExam_month = "Aug ";
    //                        else if (date_mm.ToString() == "9")
    //                            strExam_month = "Sep ";
    //                        else if (date_mm.ToString() == "10")
    //                            strExam_month = "Oct ";
    //                        else if (date_mm.ToString() == "11")
    //                            strExam_month = "Nov ";
    //                        else if (date_mm.ToString() == "12")
    //                            strExam_month = "Dec ";
    //                    }
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].Margin.Left = 30;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].VerticalAlign = VerticalAlign.Middle;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].Text = "obtained the following marks in the " + test + " Conducted in " + strExam_month + "'" + date_yr;// "has secured the following  marks in ";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 3].Border.BorderColorBottom = Color.Black;
    //                    //   FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].Font.Size = FontUnit.Medium;
    //                    //=================================
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Text = "S.No"; //"Subject Name";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Text = "Subject Code"; //"Min Mark";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Text = "Name of the Subject";// "Marks Obtained";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Text = "Marks out of " + TextBoxnew.Text; // "Result";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 4].Font.Bold = true; //newly added on 26.07.12
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 4].Text = "Remarks";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 4].Font.Size = FontUnit.Medium;
    //                    int count = 0;
    //                    count = FpSpread1.Sheets[0].RowCount - 20;
    //                    int serial_no = 0;
    //                    for (int colm = 0; colm <= FpEntry.Sheets[0].ColumnCount - 1; colm++)
    //                    {
    //                        if (FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note != "")
    //                        {
    //                            con.Close();
    //                            con.Open();
    //                            string subjname = "";
    //                            string subjcode = "";//added 26.07.12
    //                            string result = "";
    //                            string minmark = FpEntry.Sheets[0].Cells[0, colm].Note;
    //                            string maxmark = FpEntry.Sheets[0].Cells[1, colm].Note;
    //                            string getmark = FpEntry.Sheets[0].Cells[res, colm].Text;
    //                            string celltag1 = FpEntry.Sheets[0].Cells[res, colm].Tag + "";
    //                            if (celltag1 == "1")
    //                            {
    //                                result = "Fail";
    //                            }
    //                            else
    //                            {
    //                                result = "Pass";
    //                            }
    //                            string subject_no1 = FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note;
    //                            string examdate1 = FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Tag + "";

    //                            string subname = "select subject_name,acronym,subject_code from subject where subject_no=" + subject_no1 + "";
    //                            SqlDataAdapter da = new SqlDataAdapter(subname, con);
    //                            DataSet ds = new DataSet();
    //                            da.Fill(ds);
    //                            con.Close();
    //                            con.Open();
    //                            if (ds.Tables[0].Rows.Count > 0)
    //                            {
    //                                serial_no++;
    //                                subjname = ds.Tables[0].Rows[0]["subject_name"].ToString();
    //                                subjcode = ds.Tables[0].Rows[0]["subject_code"].ToString();
    //                            }
    //                            FpSpread1.Sheets[0].Cells[count, 0].Border.BorderColor = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[count, 1].Border.BorderColor = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[count, 2].Border.BorderColor = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[count, 3].Border.BorderColor = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[count, 4].Border.BorderColorRight = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[count, 4].Border.BorderColorBottom = Color.Black;

    //                            FpSpread1.Sheets[0].Cells[count, 0].HorizontalAlign = HorizontalAlign.Center;
    //                            FpSpread1.Sheets[0].Cells[count, 1].HorizontalAlign = HorizontalAlign.Center;
    //                            FpSpread1.Sheets[0].Cells[count, 2].HorizontalAlign = HorizontalAlign.Left;
    //                            FpSpread1.Sheets[0].Cells[count, 3].HorizontalAlign = HorizontalAlign.Center;
    //                            FpSpread1.Sheets[0].Cells[count, 4].HorizontalAlign = HorizontalAlign.Center;

    //                            //         FpSpread1.Sheets[0].Cells[count, 0].Font.Size = FontUnit.Medium;
    //                            //         FpSpread1.Sheets[0].Cells[count, 1].Font.Size = FontUnit.Medium;
    //                            //          FpSpread1.Sheets[0].Cells[count, 2].Font.Size = FontUnit.Medium;
    //                            //          FpSpread1.Sheets[0].Cells[count, 3].Font.Size = FontUnit.Medium;
    //                            //          FpSpread1.Sheets[0].Cells[count, 4].Font.Size = FontUnit.Medium;

    //                            if (TextBoxnew.Text != string.Empty)
    //                            {
    //                                double newval = (Convert.ToDouble(TextBoxnew.Text) / Convert.ToDouble(maxmark));
    //                                double maxc = 0;
    //                                if (getmark != "AB" && getmark != "AAA" && getmark != "EL" && getmark != "EOD" && getmark != "ML" && getmark != "SOD" && getmark != "NSS" && getmark != "NJ" && getmark != "S" && getmark != "L" && getmark != "NCC" && getmark != "HS" && getmark != "PP" && getmark != "SYOD" && getmark != "COD" && getmark != "OOD" && getmark != "OD" && getmark != "" && getmark != " " && getmark != "LA" && getmark != "" && getmark != " " && getmark != "RAA")//added on 26.07.12
    //                                {
    //                                    maxc = Convert.ToDouble(newval) * Convert.ToDouble(getmark);
    //                                }
    //                                FpSpread1.Sheets[0].Cells[count, 2].Text = subjname;
    //                                //FpSpread1.Sheets[0].Cells[count, 1].Text = minmark;//hided 26.07.12
    //                                FpSpread1.Sheets[0].Cells[count, 1].Text = subjcode;
    //                                FpSpread1.Sheets[0].Cells[count, 0].Text = serial_no.ToString();
    //                                FpSpread1.Sheets[0].Cells[count, 3].Text = maxc.ToString();/// +"/" + TextBoxnew.Text;//26.07.12
    //                            }
    //                            FpSpread1.Sheets[0].Cells[count, 4].Text = result;//added 26.07.12
    //                            count++;
    //                        }
    //                        if (FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Text == "Rank")
    //                        {
    //                            string rank = FpEntry.Sheets[0].Cells[res, colm].Text;
    //                            FpSpread1.Sheets[0].Cells[count, 3].Font.Bold = true;
    //                            FpSpread1.Sheets[0].Cells[count, 3].Text = "Rank" + " " + ":" + rank;
    //                        }
    //                    }
    //                    int count1 = count;
    //                    //'----------------------------------------------------newmy strt
    //                    //findattnd_values();
    //                    persentmonthcal();
    //                    double per_tage_day;
    //                    string dum_tage_date = "";
    //                    //  per_workingdays-------------conducted days
    //                    //pre_present_date attend days
    //                    per_tage_day = ((pre_present_date / per_workingdays) * 100);
    //                    if (per_tage_day > 100)
    //                    {
    //                        per_tage_day = 100;
    //                    }
    //                    dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //                    if (dum_tage_date == "NaN")
    //                    {
    //                        dum_tage_date = "0";
    //                    }
    //                    else if (dum_tage_date == "Infinity")
    //                    {
    //                        dum_tage_date = "0";
    //                    }
    //                    //'----------------------------------------------------------------------end
    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 2, 0, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 3, 0, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 4, 0, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 5, 0, 1, 4);

    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 1, 0, 1, 5);
    //                    FpSpread1.Sheets[0].Cells[count1 + 1, 0].Text = "His/Her Perfomance is GOOD/SATISFACTORY/UNSATISFACTORY";
    //                    //   FpSpread1.Sheets[0].Cells[count1 + 1, 0].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].Cells[count1 + 2, 0].Text = "Attendance Particulars: ";
    //                    FpSpread1.Sheets[0].Cells[count1 + 2, 0].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[count1 + 2, 0].Font.Underline = true;
    //                    //   FpSpread1.Sheets[0].Cells[count1 + 2, 0].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].Cells[count1 + 4, 0].Text = "Attendance as on           :" + " " + DateTime.Now.ToString("dd-MM-yyyy");
    //                    //  FpSpread1.Sheets[0].Cells[count1 + 4, 0].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].Cells[count1 + 5, 0].Text = "Number of working days     :" + " " + per_workingdays.ToString();
    //                    //   FpSpread1.Sheets[0].Cells[count1 + 5, 0].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 6, 0, 1, 4);
    //                    FpSpread1.Sheets[0].Cells[count1 + 6, 0].Text = "Number of days attend      :" + " " + pre_present_date.ToString();
    //                    //   FpSpread1.Sheets[0].Cells[count1 + 6, 0].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 7, 0, 1, 4);
    //                    FpSpread1.Sheets[0].Cells[count1 + 7, 0].Text = "Attendance Percentage      :" + " " + dum_tage_date.ToString();
    //                    //FpSpread1.Sheets[0].Cells[count1 + 7, 0].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 9, 0, 1, 6);//from count1+9 to 8
    //                    FpSpread1.Sheets[0].Cells[count1 + 9, 0].Text = "You are Requested to meet the HOD/TUTOR in this Recard on or before ............";
    //                    //  FpSpread1.Sheets[0].Cells[count1 + 9, 0].Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 11, 0, 1, 6);//11 to 10
    //                    FpSpread1.Sheets[0].Cells[count1 + 11, 0].Text = "***Please intimate your E-Mail ID to enable the college to send further communication";
    //                    //    FpSpread1.Sheets[0].Cells[count1 + 11, 0].Font.Size = FontUnit.Medium;

    //                    FpSpread1.Sheets[0].Cells[count1 + 5, 5].Border.BorderColorBottom = Color.White;
    //                    FpSpread1.Sheets[0].Cells[count1 + 5, 5].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[count1 + 1, 5].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[count1 + 2, 5].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[count1 + 3, 5].Border.BorderColorRight = Color.White;
    //                    FpSpread1.Sheets[0].Cells[count1 + 4, 5].Border.BorderColorRight = Color.White;

    //                    FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 5;

    //                    FpSpread1.Sheets[0].Cells[count1 + 14, 0].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[count1 + 14, 0].Text = "TUTOR";
    //                    FpSpread1.Sheets[0].Cells[count1 + 14, 0].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 14, 1, 1, 2);
    //                    FpSpread1.Sheets[0].Cells[count1 + 14, 1].Text = "ACADAMIC CO-ORDINATOR";
    //                    FpSpread1.Sheets[0].Cells[count1 + 14, 1].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[count1 + 14, 1].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[count1 + 14, 3].HorizontalAlign = HorizontalAlign.Right;
    //                    FpSpread1.Sheets[0].Cells[count1 + 14, 3].Text = "PRINCIPAL";
    //                    FpSpread1.Sheets[0].Cells[count1 + 14, 3].Font.Bold = true;

    //                    //FpSpread1.Sheets[0].Cells[count1 + 10, 0].Text = "Tutor";
    //                    //FpSpread1.Sheets[0].Cells[count1 + 10, 2].Text = "Academic Co-ordinator";
    //                    //FpSpread1.Sheets[0].Cells[count1 + 10, 3].Text = "HOD";

    //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 16, 0, 1, 6);//counr1+16
    //                    FpSpread1.Sheets[0].Cells[count1 + 16, 0].Text = "Parent/Guardian Signature ________________";
    //                    //FpSpread1.Sheets[0].SpanModel.Add(count1 + 17, 0, 1, 7);
    //                    // FpSpread1.Sheets[0].Cells[count1 + 17, 0].Text = "------------------------------------------------------------------------------------------------";

    //                    //'--------------------start footer 10.04.12
    //                    if (dsprint.Tables[0].Rows.Count > 0)
    //                    {
    //                        if (dsprint.Tables[0].Rows[0]["footer"].ToString() != "")
    //                        {
    //                            footer_count = Convert.ToInt16(dsprint.Tables[0].Rows[0]["footer"].ToString());
    //                            //FpSpread1.Sheets[0].RowCount += 3;
    //                            footer_text = dsprint.Tables[0].Rows[0]["footer_name"].ToString();
    //                            string[] footer_text_split = footer_text.Split(',');
    //                            footer_text = "";
    //                            if (footer_count == 1)
    //                            {
    //                                FpSpread1.Sheets[0].Cells[count1 + 14, 2].Text = footer_text.ToString();
    //                            }
    //                            else if ((FpSpread1.Sheets[0].ColumnCount - 3) < footer_count)
    //                            {
    //                                for (int concod_footer = 0; concod_footer < footer_count; concod_footer++)
    //                                {
    //                                    if (footer_text == "")
    //                                    {
    //                                        footer_text = footer_text_split[concod_footer].ToString();
    //                                    }
    //                                    else
    //                                    {
    //                                        footer_text = footer_text + "   " + footer_text_split[concod_footer].ToString();
    //                                    }
    //                                }
    //                                for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount - 3; col_count++)
    //                                {
    //                                    if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                                    {
    //                                        FpSpread1.Sheets[0].SpanModel.Add(count1 + 14, col_count, 1, FpSpread1.Sheets[0].ColumnCount - 3);
    //                                        FpSpread1.Sheets[0].SpanModel.Add(count1 + 14, col_count, 1, FpSpread1.Sheets[0].ColumnCount - 3);
    //                                        FpSpread1.Sheets[0].SpanModel.Add(count1 + 14, col_count, 1, FpSpread1.Sheets[0].ColumnCount - 3);
    //                                        FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Text = footer_text;
    //                                        FpSpread1.Sheets[0].Cells[count1 + 14, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                        FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Font.Bold = true;
    //                                        FpSpread1.Sheets[0].Cells[count1 + 14, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                        FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Font.Size = FontUnit.Medium;
    //                                        break;
    //                                    }
    //                                }
    //                            }
    //                            else if ((FpSpread1.Sheets[0].ColumnCount - 3) == footer_count)
    //                            {
    //                                for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount - 3; col_count++)
    //                                {
    //                                    if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                                    {
    //                                        FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Text = footer_text_split[temp_count].ToString();
    //                                        FpSpread1.Sheets[0].Cells[count1 + 14, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                        FpSpread1.Sheets[0].Cells[count1 + 14, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                        FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Font.Bold = true;
    //                                        FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Font.Size = FontUnit.Medium;
    //                                        temp_count++;
    //                                        if (temp_count == footer_count)
    //                                        {
    //                                            break;
    //                                        }
    //                                    }
    //                                }
    //                            }
    //                            else
    //                            {
    //                                temp_count = 0;
    //                                split_col_for_footer = (FpSpread1.Sheets[0].ColumnCount - 3) / footer_count;
    //                                footer_balanc_col = (FpSpread1.Sheets[0].ColumnCount - 3) % footer_count;
    //                                for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount - 3; col_count++)
    //                                {
    //                                    if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                                    {
    //                                        FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Text = footer_text_split[temp_count].ToString();
    //                                        FpSpread1.Sheets[0].Cells[count1 + 14, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                        FpSpread1.Sheets[0].Cells[count1 + 14, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                        FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Font.Bold = true;
    //                                        FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Border.BorderColorLeft = Color.White;
    //                                        FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Border.BorderColorRight = Color.White;
    //                                        FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Font.Size = FontUnit.Medium;
    //                                        temp_count++;
    //                                        if (temp_count == 0)
    //                                        {
    //                                            col_count = col_count + split_col_for_footer + footer_balanc_col;
    //                                        }
    //                                        else
    //                                        {
    //                                            col_count = col_count + split_col_for_footer;
    //                                        }
    //                                        if (temp_count == footer_count)
    //                                        {
    //                                            break;
    //                                        }
    //                                    }
    //                                }
    //                            }
    //                        }
    //                    }
    //                    //'--------------------end footer
    //                    con.Close();
    //                    if (Registration_no == "")
    //                    {
    //                        Registration_no = rol_no;
    //                    }
    //                    else
    //                    {
    //                        Registration_no = Registration_no + "-" + rol_no;
    //                    }

    //                }//END IF ISVAL
    //            }//END FOR LOOP
    //        }
    //    }
    //    string RegisterNumber = Registration_no.ToString();
    //    string[] RNumber = RegisterNumber.Split(new char[] { '-' });
    //    int n = 0;
    //    if (RNumber.Length > 0)
    //    {
    //        ddlpoppage.Items.Clear();
    //        for (int j = 0; j < RNumber.GetUpperBound(0) + 1; j++)
    //        {
    //            ddlpoppage.Items.Insert(n, new System.Web.UI.WebControls.ListItem("Page-" + mm.ToString(), RNumber[j].ToString()));
    //            n = n + 1;
    //            mm = mm + 1;

    //        }
    //    }
    //}

    //------------------func for letter format4

    //public void letter4()
    //{
    //    int fail_subj_count = 0;
    //    string Registration_no = "";
    //    int xres = 0;
    //    int mm = 1;
    //    Labelnew.Visible = false;
    //    TextBoxnew.Visible = false;

    //    FpEntry.SaveChanges();
    //    FpSpread1.SaveChanges();
    //    string strsc = "";
    //    if (ddlBranch.Text != "")
    //    {
    //        branch = ddlBranch.SelectedItem.Text;
    //    }
    //    if (ddlDegree.Text != "")
    //    {
    //        degree = ddlDegree.SelectedItem.Text;
    //    }
    //    sem = ddlSemYr.SelectedValue;
    //    sec = ddlSec.SelectedValue;
    //    //if (ddlTest.Text != "")
    //    //{
    //    //    test = chklstest.SelectedItem.Text;
    //    //}
    //    if (ddlSemYr.Text != "")
    //    {
    //        semester = Convert.ToInt32(ddlSemYr.SelectedValue);
    //    }
    //    colege_code = Session["collegecode"].ToString();
    //    degree1 = ddlBranch.SelectedValue;
    //    FpSpread1.Sheets[0].RowCount = 0;

    //    Label4.Visible = true;

    //    frdate = TextBox2.Text;
    //    todate = TextBox1.Text;
    //    for (int j = 0; j < chklstest.Items.Count; j++)
    //    {
    //        if (chklstest.Items[j].Selected == true)
    //        {
    //            string criteria_no = chklstest.Items[j].Value.ToString();
    //            test = chklstest.Items[j].Text.ToString();
    //            for (res = 0; res < Convert.ToInt32(FpEntry.Sheets[0].RowCount) - 4; res++)
    //            {
    //                isval = 0;
    //                s = FpEntry.Sheets[0].Cells[res, 0].Text;
    //                isval = Convert.ToInt32(FpEntry.Sheets[0].Cells[res, 0].Value);
    //                if (isval == 1)
    //                {
    //                    Label4.Visible = false;
    //                    //format2btn.Visible = true;
    //                    FpSpread1.Visible = true;
    //                    FpSpread1.Sheets[0].PageSize = 40;
    //                    FpSpread1.Sheets[0].RowHeader.Visible = false;
    //                    FpSpread1.Sheets[0].DefaultStyle.Font.Name = "Book Antique";
    //                    FpSpread1.Sheets[0].DefaultStyle.Font.Bold = false;
    //                    FpSpread1.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
    //                    FpSpread1.Sheets[0].ColumnHeader.Visible = false;
    //                    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ hdr by mythili 10.04.12
    //                    hat.Clear();
    //                    hat.Add("college_code", Session["collegecode"].ToString());
    //                    hat.Add("form_name", "CAMLetter.aspx");
    //                    dsprint = dacces.select_method("PROC_PRINT_MASTER_SETTINGS", hat, "sp");
    //                    if (dsprint.Tables[0].Rows.Count > 0)
    //                    {
    //                        if (dsprint.Tables[0].Rows[0]["college_name"].ToString() != string.Empty)
    //                        {
    //                            collnamenew1 = dsprint.Tables[0].Rows[0]["college_name"].ToString();
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["address1"].ToString() != "")
    //                        {
    //                            address1 = dsprint.Tables[0].Rows[0]["address1"].ToString();
    //                            address = address1;
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["address2"].ToString() != "")
    //                        {
    //                            address2 = dsprint.Tables[0].Rows[0]["address2"].ToString();
    //                            address = address1 + "-" + address2;

    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["address3"].ToString() != "")
    //                        {
    //                            district = dsprint.Tables[0].Rows[0]["address3"].ToString();
    //                            address = address1 + "-" + address2 + "-" + district;
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["phoneno"].ToString() != "")
    //                        {
    //                            Phoneno = dsprint.Tables[0].Rows[0]["phoneno"].ToString();
    //                            phnfax = "Phone :" + " " + Phoneno;
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["faxno"].ToString() != "")
    //                        {
    //                            Faxno = dsprint.Tables[0].Rows[0]["faxno"].ToString();
    //                            phnfax = phnfax + "Fax  :" + " " + Faxno;
    //                        }
    //                        if ((dsprint.Tables[0].Rows[0]["email"].ToString() != ""))
    //                        {
    //                            email = "E-Mail:" + dsprint.Tables[0].Rows[0]["email"].ToString();
    //                        }
    //                        if (dsprint.Tables[0].Rows[0]["website"].ToString() != "")
    //                        {
    //                            email = email + " " + "Web Site:" + dsprint.Tables[0].Rows[0]["website"].ToString();
    //                        }
    //                    }
    //                    else if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //                    {
    //                        string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo from collinfo where college_code=" + Session["collegecode"] + "";
    //                        SqlCommand collegecmd = new SqlCommand(college, con);
    //                        SqlDataReader collegename;
    //                        con.Close();
    //                        con.Open();
    //                        collegename = collegecmd.ExecuteReader();
    //                        if (collegename.HasRows)
    //                        {
    //                            while (collegename.Read())
    //                            {
    //                                collnamenew1 = collegename["collname"].ToString();
    //                                address1 = collegename["address1"].ToString();
    //                                address2 = collegename["address2"].ToString();
    //                                address3 = collegename["address3"].ToString();
    //                                pincode = collegename["pincode"].ToString();
    //                            }
    //                        }
    //                        con.Close();
    //                    }
    //                    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //                    rol_no = FpEntry.Sheets[0].Cells[res, 1].Text;
    //                    Label4.Visible = false;
    //                    //format2btn.Visible = true;
    //                    name = FpEntry.Sheets[0].Cells[res, 3].Text;
    //                    FpSpread1.Sheets[0].ColumnCount = 5;
    //                    FpSpread1.Sheets[0].Columns[0].Width = 50;
    //                    FpSpread1.Sheets[0].Columns[1].Width = 200;
    //                    FpSpread1.Sheets[0].Columns[2].Width = 200;
    //                    FpSpread1.Sheets[0].Columns[3].Width = 50;
    //                    FpSpread1.Sheets[0].Columns[4].Width = 200;
    //                    FpSpread1.Width = 700;
    //                    FpSpread1.Height = 500;
    //                    FpSpread1.Sheets[0].ScrollingContentVisible = true;
    //                    DateTime exam_month_year = Convert.ToDateTime(GetFunction("select distinct exam_date from exam_type inner join criteriaforinternal on criteriaforinternal.criteria_no=exam_type.criteria_no where criteriaforinternal.criteria_no= " + chklstest.SelectedValue.ToString() + ""));
    //                    string mon_yr = exam_month_year.ToString("MMM") + " " + exam_month_year.ToString("yyyy");
    //                    FpSpread1.Sheets[0].RowCount += 40;//27.04.12 added new
    //                    ////FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 40), 1, 1, 3);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].HorizontalAlign = HorizontalAlign.Center;

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].Text = collnamenew1;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].Font.Size = FontUnit.Medium;

    //                    ////FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 39), 1, 1, 3);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].HorizontalAlign = HorizontalAlign.Center;

    //                    //'---------------to set the address
    //                    if (dsprint.Tables[0].Rows.Count > 0)
    //                    {
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Text = address + "," + phnfax;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Font.Size = FontUnit.Medium;
    //                    }
    //                    else
    //                    {
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Text = address1 + ", " + address2 + ", " + address3 + "," + pincode;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Font.Size = FontUnit.Medium;
    //                    }

    //                    //'-------------------to set the emila
    //                    ////FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 38), 1, 1, 3);
    //                    if (dsprint.Tables[0].Rows.Count > 0)
    //                    {
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 1].Text = email;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 1].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 1].Font.Bold = true;
    //                    }
    //                    //'----------------end to set the address

    //                    //'-------------for logo------------------

    //                    MyImg mi = new MyImg();//set the logo for letter format
    //                    mi.ImageUrl = "Handler/Handler2.ashx?";
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 40, 0, 3, 1);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 0].CellType = mi;
    //                    //FarPoint.Web.Spread.ImageCellType imgeve = new FarPoint.Web.Spread.ImageCellType();

    //                    //MyImg mi4 = new MyImg();
    //                    //mi4.ImageUrl = "Handler/Handler5.ashx?";
    //                    //FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(FpSpread1.Sheets[0].RowCount - 39, 4, 3, 1);
    //                    //FpSpread1.Sheets[0].ColumnHeader.Cells[FpSpread1.Sheets[0].RowCount - 39, 4].CellType = mi4;

    //                    //'----------------------------------
    //                    ////FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 37), 0, 1, 5);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].Text = "Dear Parents,";

    //                    ////FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 36), 0, 1, 5);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 0].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 0].Text = "Sub: Continuous Assesment Test Progress Report-Reg";

    //                    yr_val = ddlSemYr.SelectedItem.ToString();
    //                    getyear();

    //                    ////FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 2;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 34), 0, 1, 5);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 34, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 34, 0].Text = "This is to inform you that Your Son/Daughter/Ward/Selvan/Selvi ...." + name + "....studying in " + yr_string;


    //                    ////FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 33), 0, 1, 5);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 33, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 33, 0].Text = degree + " [" + branch + "] has secured the following marks in the Continuous Assesment ";


    //                    ////FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 32), 0, 1, 5);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 0].Text = "....Test" + "     " + test + "....conducted during...." + mon_yr + "....";

    //                    ////FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 2;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 30), 0, 1, 5);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 0].Text = "Total Marks:";

    //                    ////FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 29), 1, 1, 2);
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 29), 3, 1, 2);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 0].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 3].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 0].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 3].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 0].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 3].Border.BorderColorTop = Color.Black;

    //                    FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 30].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 29].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 29].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 0].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 3].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 0].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 3].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 0].Text = "S.No";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Text = "Subject";
    //                    //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 3].Text = "Marks out of";
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 3].Text = "Marks";
    //                    FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 29].HorizontalAlign = HorizontalAlign.Center;

    //                    int row28 = FpSpread1.Sheets[0].RowCount - 28;
    //                    int subject_row_incr = 0;
    //                    int sno = 0;
    //                    for (int colm = 0; colm <= FpEntry.Sheets[0].ColumnCount - 1; colm++)
    //                    {
    //                        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 4].Border.BorderColorRight = Color.Black;
    //                        if (FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note != "")
    //                        {
    //                            ////FpSpread1.Sheets[0].RowCount++;
    //                            sno++;
    //                            con.Close();
    //                            con.Open();
    //                            string subjname = "";

    //                            string getmark = FpEntry.Sheets[0].Cells[res, colm].Text;
    //                            string subject_no1 = FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note;
    //                            string subname = "select subject_name,acronym from subject where subject_no=" + subject_no1 + "";

    //                            string get_exmcode = FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Tag.ToString();
    //                            string[] spl_exmcode = get_exmcode.Split('@');
    //                            string get_maxmark = GetFunction("select max(marks_obtained) as 'MAX_MARK' from result where exam_code='" + spl_exmcode[1].ToString() + "'");
    //                            string maxmrk_pass = GetFunction("select max_mark from exam_type where exam_code='" + spl_exmcode[1].ToString() + "'");
    //                            string minmark_pass = GetFunction("select min_mark from exam_type where exam_code='" + spl_exmcode[1].ToString() + "'");


    //                            if (getmark != "AB" && getmark != "AAA" && getmark != "EL" && getmark != "EOD" && getmark != "ML" && getmark != "SOD" && getmark != "NSS" && getmark != "NJ" && getmark != "S" && getmark != "L" && getmark != "NCC" && getmark != "HS" && getmark != "PP" && getmark != "SYOD" && getmark != "COD" && getmark != "OOD" && getmark != "OD" && getmark != "" && getmark != " " && getmark != "LA" && getmark != "" && getmark != " " && getmark != "RAA")//added on 30.07.12//Added By subburaj 21.08.2014
    //                            {
    //                                if (Convert.ToDouble(getmark) < Convert.ToDouble(minmark_pass))
    //                                {
    //                                    fail_subj_count++;
    //                                }
    //                            }
    //                            SqlDataAdapter da = new SqlDataAdapter(subname, con);
    //                            DataSet ds = new DataSet();
    //                            da.Fill(ds);
    //                            con.Close();
    //                            con.Open();
    //                            if (ds.Tables[0].Rows.Count > 0)
    //                            {
    //                                subjname = ds.Tables[0].Rows[0]["subject_name"].ToString();
    //                            }

    //                            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 1, 1, 2);
    //                            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 3, 1, 2);
    //                            FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 0].Border.BorderColorBottom = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 1].Border.BorderColorBottom = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 3].Border.BorderColorBottom = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 0].Border.BorderColorTop = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 1].Border.BorderColorTop = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 3].Border.BorderColorTop = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 0].Border.BorderColorLeft = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 1].Border.BorderColorLeft = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 3].Border.BorderColorLeft = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 0].Border.BorderColorRight = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 1].Border.BorderColorRight = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 3].Border.BorderColorRight = Color.Black;
    //                            FpSpread1.Sheets[0].Rows[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr].HorizontalAlign = HorizontalAlign.Center;

    //                            FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 0].Text = sno.ToString();
    //                            FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 1].Text = subjname;///////////////
    //                            FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 1].HorizontalAlign = HorizontalAlign.Left;
    //                            FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 3].Text = getmark; //+"/100";
    //                            if (getmark == "A" || getmark == "AA" || getmark == "AAA" || getmark == "P")
    //                            {
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 3].Text = "AAA";
    //                            }
    //                            subject_row_incr++;
    //                        }
    //                    }
    //                    int row_value = (row28 + subject_row_incr);
    //                    //FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add(row_value - 1, 0, 1, 2);
    //                    FpSpread1.Sheets[0].SpanModel.Add((row_value - 1), 2, 1, 2);
    //                    FpSpread1.Sheets[0].Cells[row_value - 1, 0].Border.BorderColorBottom = Color.Black;
    //                    ////FpSpread1.Sheets[0].Cells[row_value , 1].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value - 1, 3].Border.BorderColorBottom = Color.Black;
    //                    ////FpSpread1.Sheets[0].Cells[row_value, 0].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value - 1, 2].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value - 1, 4].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value - 1, 0].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value - 1, 2].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value - 1, 4].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value - 1, 0].Text = "Total No.of Working days";
    //                    FpSpread1.Sheets[0].Cells[row_value - 1, 2].Text = "No.of days Attended";
    //                    FpSpread1.Sheets[0].Cells[row_value - 1, 4].Text = "% of Attended";
    //                    FpSpread1.Sheets[0].Cells[row_value - 1, 0].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value - 1, 2].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value - 1, 2].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value - 1, 4].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Rows[row_value - 1].HorizontalAlign = HorizontalAlign.Center;
    //                    ////////FpSpread1.Sheets[0].RowCount++;//============ATTND %
    //                    FpSpread1.Sheets[0].SpanModel.Add(row_value, 0, 1, 2);
    //                    FpSpread1.Sheets[0].SpanModel.Add(row_value, 2, 1, 2);
    //                    FpSpread1.Sheets[0].Cells[row_value, 0].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value, 2].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value, 2].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value, 4].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value, 0].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value, 2].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value, 4].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value, 0].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value, 2].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value, 4].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value, 1].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value, 2].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value, 3].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[row_value, 4].Border.BorderColorLeft = Color.Black;
    //                    //////-------------------
    //                    persentmonthcal();
    //                    double per_tage_day;
    //                    string dum_tage_date = "";
    //                    per_tage_day = ((pre_present_date / per_workingdays) * 100);

    //                    if (per_tage_day > 100)
    //                    {
    //                        per_tage_day = 100;
    //                    }
    //                    dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //                    if (dum_tage_date == "NaN")
    //                    {
    //                        dum_tage_date = "0";
    //                    }
    //                    else if (dum_tage_date == "Infinity")
    //                    {
    //                        dum_tage_date = "0";
    //                    }
    //                    FpSpread1.Sheets[0].Rows[row_value].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[row_value, 0].Text = per_workingdays.ToString();
    //                    FpSpread1.Sheets[0].Cells[row_value, 2].Text = pre_present_date.ToString();
    //                    FpSpread1.Sheets[0].Cells[row_value, 4].Text = dum_tage_date.ToString();

    //                    //////-------------------------
    //                    ////FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 3;
    //                    //   FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 3].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].SpanModel.Add((row_value + 2), 0, 1, 5);
    //                    FpSpread1.Sheets[0].SpanModel.Add((row_value + 3), 0, 1, 5);
    //                    FpSpread1.Sheets[0].Cells[(row_value + 3), 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[(row_value + 2), 0].HorizontalAlign = HorizontalAlign.Left;
    //                    if (fail_subj_count > 0)
    //                    {
    //                        FpSpread1.Sheets[0].Cells[(row_value + 2), 0].Text = "Failed in " + fail_subj_count + " Subjects";
    //                    }
    //                    else
    //                    {
    //                        FpSpread1.Sheets[0].Cells[(row_value + 2), 0].Text = "Failed in __________ Subjects";
    //                    }

    //                    FpSpread1.Sheets[0].Cells[(row_value + 3), 0].Text = "In this regards you are requested to meet the HOD on __________________";

    //                    //////'--------------new added for remarks start 26.04.12
    //                    ////FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 4;
    //                    ////FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 3), 0, 1, 5);
    //                    FpSpread1.Sheets[0].SpanModel.Add(((row_value + 6)), 1, 1, 4);
    //                    FpSpread1.Sheets[0].SpanModel.Add(((row_value + 7)), 0, 1, 5);

    //                    FpSpread1.Sheets[0].Cells[(row_value + 5), 0].Text = "Remarks:";
    //                    FpSpread1.Sheets[0].Cells[(row_value + 5), 0].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[(row_value + 6), 1].Text = "      As per Anna university regulations a student has to secure a minimum of 75%  attendance";
    //                    FpSpread1.Sheets[0].Cells[(row_value + 7), 0].Text = " to appear for the examination";
    //                    //////'-------------end 
    //                    ////FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 2;
    //                    FpSpread1.Sheets[0].Cells[(row_value + 9), 0].HorizontalAlign = HorizontalAlign.Right;
    //                    FpSpread1.Sheets[0].SpanModel.Add((row_value + 9), 0, 1, 3);
    //                    FpSpread1.Sheets[0].SpanModel.Add((row_value + 9), 3, 1, 2);
    //                    FpSpread1.Sheets[0].Cells[(row_value + 9), 0].Text = "Student's Counseller";
    //                    FpSpread1.Sheets[0].Cells[(row_value + 9), 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[(row_value + 9), 3].Text = "HOD       ";
    //                    FpSpread1.Sheets[0].Cells[(row_value + 9), 3].HorizontalAlign = HorizontalAlign.Left;

    //                    ////FpSpread1.Sheets[0].RowCount++;
    //                    FpSpread1.Sheets[0].SpanModel.Add((row_value + 10), 0, 1, 5);
    //                    FpSpread1.Sheets[0].Cells[(row_value + 10), 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[(row_value + 10), 0].Text = "---------------------------------------------------cut here--------------------------------------------------------";


    //                    ////FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 6;
    //                    FpSpread1.Sheets[0].SpanModel.Add((row_value + 11), 0, 1, 5);
    //                    FpSpread1.Sheets[0].SpanModel.Add((row_value + 12), 0, 1, 5);
    //                    //    FpSpread1.Sheets[0].SpanModel.Add((row_value + 12), 0, 1, 5);

    //                    FpSpread1.Sheets[0].Cells[(row_value + 11), 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[(row_value + 12), 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[(row_value + 14), 0].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[(row_value + 11), 0].Text = "Kindly acknowledge the receipt of this communication with your signature and return the same to the";
    //                    FpSpread1.Sheets[0].Cells[(row_value + 12), 0].Text = "college by return of post";

    //                    FpSpread1.Sheets[0].Cells[(row_value + 14), 0].Text = "Name:";
    //                    FpSpread1.Sheets[0].Cells[(row_value + 14), 1].Text = name;
    //                    FpSpread1.Sheets[0].Cells[(row_value + 15), 0].Text = "Roll No.:";
    //                    FpSpread1.Sheets[0].Cells[(row_value + 15), 1].Text = rol_no;
    //                    FpSpread1.Sheets[0].SpanModel.Add((row_value + 15), 3, 1, 2);
    //                    FpSpread1.Sheets[0].Cells[(row_value + 15), 3].Text = "Signature of parent/Guardian";
    //                    FpSpread1.Sheets[0].Cells[(row_value + 15), 2].HorizontalAlign = HorizontalAlign.Right;
    //                    FpSpread1.Sheets[0].Cells[(row_value + 15), 2].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[(row_value + 16), 0].Text = "Batch:";
    //                    FpSpread1.Sheets[0].Cells[(row_value + 16), 1].Text = ddlBatch.SelectedValue.ToString();
    //                    FpSpread1.Sheets[0].Columns[0].Width = 100;

    //                    //'--------------------start footer 10.04.12
    //                    if (dsprint.Tables[0].Rows.Count > 0)
    //                    {
    //                        if (dsprint.Tables[0].Rows[0]["footer"].ToString() != "")
    //                        {
    //                            footer_count = Convert.ToInt16(dsprint.Tables[0].Rows[0]["footer"].ToString());
    //                            FpSpread1.Sheets[0].RowCount += 3;
    //                            footer_text = dsprint.Tables[0].Rows[0]["footer_name"].ToString();
    //                            string[] footer_text_split = footer_text.Split(',');
    //                            footer_text = "";
    //                            if (footer_count == 1)
    //                            {
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Text = footer_text.ToString();
    //                            }
    //                            else if ((FpSpread1.Sheets[0].ColumnCount) < footer_count)
    //                            {
    //                                for (int concod_footer = 0; concod_footer < footer_count; concod_footer++)
    //                                {
    //                                    if (footer_text == "")
    //                                    {
    //                                        footer_text = footer_text_split[concod_footer].ToString();
    //                                    }
    //                                    else
    //                                    {
    //                                        footer_text = footer_text + "   " + footer_text_split[concod_footer].ToString();
    //                                    }
    //                                }
    //                                for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount; col_count++)
    //                                {
    //                                    if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                                    {
    //                                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, col_count, 1, final_print_col_cnt);
    //                                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, col_count, 1, final_print_col_cnt);
    //                                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, col_count, 1, final_print_col_cnt);
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Text = footer_text;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Bold = true;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Size = FontUnit.Medium;
    //                                        break;
    //                                    }
    //                                }
    //                            }
    //                            else if ((FpSpread1.Sheets[0].ColumnCount) == footer_count)
    //                            {
    //                                for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount; col_count++)
    //                                {
    //                                    if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                                    {
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Text = footer_text_split[temp_count].ToString();
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Bold = true;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Size = FontUnit.Medium;
    //                                        temp_count++;
    //                                        if (temp_count == footer_count)
    //                                        {
    //                                            break;
    //                                        }
    //                                    }
    //                                }
    //                            }
    //                            else
    //                            {
    //                                temp_count = 0;
    //                                split_col_for_footer = (FpSpread1.Sheets[0].ColumnCount) / footer_count;
    //                                footer_balanc_col = (FpSpread1.Sheets[0].ColumnCount) % footer_count;
    //                                for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount; col_count++)
    //                                {
    //                                    if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                                    {
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Text = footer_text_split[temp_count].ToString();
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Bold = true;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Border.BorderColorLeft = Color.White;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Border.BorderColorRight = Color.White;
    //                                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Size = FontUnit.Medium;
    //                                        temp_count++;
    //                                        if (temp_count == 0)
    //                                        {
    //                                            col_count = col_count + split_col_for_footer + footer_balanc_col;
    //                                        }
    //                                        else
    //                                        {
    //                                            col_count = col_count + split_col_for_footer;
    //                                        }
    //                                        if (temp_count == footer_count)
    //                                        {
    //                                            break;
    //                                        }
    //                                    }
    //                                }
    //                            }
    //                        }
    //                    }//'--------------------end footer

    //                    if (Registration_no == "")
    //                    {
    //                        Registration_no = rol_no;
    //                    }
    //                    else
    //                    {
    //                        Registration_no = Registration_no + "-" + rol_no;
    //                    }

    //                }//end condn for isval
    //                FpSpread1.Sheets[0].PageSize = 40;
    //            }//end loop for res
    //        }
    //    }
    //    string RegisterNumber = Registration_no.ToString();
    //    string[] RNumber = RegisterNumber.Split(new char[] { '-' });
    //    int n = 0;
    //    if (RNumber.Length > 0)
    //    {
    //        ddlpoppage.Items.Clear();
    //        for (int j = 0; j < RNumber.GetUpperBound(0) + 1; j++)
    //        {
    //            ddlpoppage.Items.Insert(n, new System.Web.UI.WebControls.ListItem("Page-" + mm.ToString(), RNumber[j].ToString()));
    //            n = n + 1;
    //            mm = mm + 1;

    //        }
    //    }

    //}

    //-------------end fun for letter4

    protected void btnPrint_Click(object sender, EventArgs e)
    {
    //    string select_letter_index = "";
    //    string select_frm_date = TextBox2.Text;
    //    string select_to_date = TextBox1.Text;
    //    string row_value = "";
    //    string ltr3_txt_val = "";
    //    for (int get_isval = 0; get_isval < FpEntry.Sheets[0].RowCount; get_isval++)
    //    {
    //        isval = Convert.ToInt16(FpEntry.Sheets[0].Cells[get_isval, 0].Value);
    //        if (isval == 1)
    //        {
    //            if (row_value == "")
    //            {
    //                row_value = get_isval.ToString();
    //            }
    //            else
    //            {
    //                row_value = row_value + "-" + get_isval.ToString();
    //            }
    //        }
    //    }
    //    if (ddlletter.SelectedIndex == 1)
    //    {
    //        letter1();
    //        select_letter_index = ddlletter.SelectedIndex.ToString();
    //    }
    //    else if (ddlletter.SelectedIndex == 2)
    //    {
    //        letter2();
    //        select_letter_index = ddlletter.SelectedIndex.ToString();
    //    }
    //    else if (ddlletter.SelectedIndex == 3)
    //    {
    //        letter3();
    //        select_letter_index = ddlletter.SelectedIndex.ToString();
    //        ltr3_txt_val = TextBoxnew.Text.ToString();
    //    }
    //    Session["page_redirect_value"] = ddlBatch.SelectedIndex + "," + ddlDegree.SelectedIndex + "," + ddlBranch.SelectedIndex + "," + ddlSemYr.SelectedIndex + "," + ddlSec.SelectedIndex + "," + chklstest.SelectedIndex + "$" + row_value + "$" + select_letter_index + "$" + select_frm_date + "$" + select_to_date + "$" + ltr3_txt_val;
    //    string clmnheadrname = "";


    //    //string dis_hdng_batch = "Batch Year " + "- " + ddlBatch.SelectedItem.ToString();
    //    //string dis_hdng_deg = ddlDegree.SelectedItem.ToString() + "[" + ddlBranch.SelectedItem.ToString() + "]";
    //    //string dis_hdng_sec = "Semester " + "- " + ddlSemYr.SelectedItem.ToString() + "  " + "Sections " + "- " + ddlSec.SelectedItem.ToString();
    //    //string dis_date = "From Date " + "- " + TextBox2.Text.ToString() + " " + "To Date " + "- " + TextBox1.Text.ToString();
    //    //string dis_test = chklstest.SelectedItem.ToString() + "Result Analysis";

    //    string dis_batch_deg = ddlBatch.SelectedItem.ToString() + "-" + ddlDegree.SelectedItem.ToString() + "[" + ddlBranch.SelectedItem.ToString() + "]" + ddlSemYr.SelectedItem.ToString() + "-" + ddlSec.SelectedItem.ToString();
    //    //  Response.Redirect("Print_Master_Setting.aspx?ID=" + clmnheadrname.ToString() + ":" + "CAMLetter.aspx" + ":" + dis_hdng_batch + "@" + dis_hdng_sec + "@" + dis_date + ":" + "CAM REPORT");
    //    Response.Redirect("Print_Master_Setting.aspx?ID=" + clmnheadrname + ":" + "CAMLetter.aspx" + ":" + dis_batch_deg + ":" + "CAM Letter Format Report");

    }

    //public void bindpdfletterpdf6()//added by annyutha
    //{
    //    Font Fontbold = new Font("Book Antiqua", 15, FontStyle.Bold);
    //    //Font Fontbold = new Font("Times New Roman", 20, FontStyle.Bold);
    //    Font Fontsmall = new Font("Book Antiqua", 11, FontStyle.Regular);
    //    Font Fontbold1 = new Font("Book Antiqua", 12, FontStyle.Bold);
    //    Font tamil = new Font("AMUDHAM.TTF", 16, FontStyle.Regular);
    //    Gios.Pdf.PdfDocument mydoc = new Gios.Pdf.PdfDocument(PdfDocumentFormat.A4);
    //    DataTable dtmark = new DataTable();
    //    DataColumn dc;
    //    dc = new DataColumn();
    //    dc.ColumnName = "subjectcode";
    //    dtmark.Columns.Add(dc);
    //    dc = new DataColumn();
    //    dc.ColumnName = "subjectname";
    //    dtmark.Columns.Add(dc);
    //    dc = new DataColumn();
    //    dc.ColumnName = "minMark";
    //    dtmark.Columns.Add(dc);
    //    dc = new DataColumn();
    //    dc.ColumnName = "mark";
    //    dtmark.Columns.Add(dc);
    //    dc = new DataColumn();
    //    dc.ColumnName = "result";
    //    dtmark.Columns.Add(dc);
    //    DataRow dr;
    //    string Registration_no = "";
    //    int xres = 0;
    //    int mm = 1;
    //    FpEntry.SaveChanges();
    //    frdate = TextBox2.Text;
    //    todate = TextBox1.Text;
    //    string strsc = "";
    //    if (ddlBranch.Text != "")
    //    {
    //        branch = ddlBranch.SelectedItem.Text;
    //    }
    //    if (ddlDegree.Text != "")
    //    {
    //        degree = ddlDegree.SelectedItem.Text;
    //    }
    //    sem = ddlSemYr.SelectedValue;
    //    sec = ddlSec.SelectedValue;
    //    //if (ddlTest.Text != "")
    //    //{
    //    //    test = chklstest.SelectedItem.Text;
    //    //}
    //    if (ddlSemYr.Text != "")
    //    {
    //        semester = Convert.ToInt32(ddlSemYr.SelectedValue);
    //    }
    //    for (int j = 0; j < chklstest.Items.Count; j++)
    //    {
    //        if (chklstest.Items[j].Selected == true)
    //        {
    //            string criteria_no = chklstest.Items[j].Value.ToString();
    //            test = chklstest.Items[j].Text.ToString();
    //            colege_code = Session["collegecode"].ToString();
    //            degree1 = ddlBranch.SelectedValue;
    //            FpSpread1.Sheets[0].RowCount = 0;
    //            Label4.Visible = true;
    //            for (int res = 0; res < Convert.ToInt32(FpEntry.Sheets[0].RowCount); res++)
    //            {

    //                isval = 0;
    //                dtmark.Rows.Clear();
    //                s = FpEntry.Sheets[0].Cells[res, 0].Text;
    //                isval = Convert.ToInt32(FpEntry.Sheets[0].Cells[res, 1].Value);
    //                if (isval == 1)
    //                {
    //                    sno = 0;
    //                    DataSet ds = new DataSet();
    //                    Label4.Visible = false;
    //                    //format2btn.Visible = true;


    //                    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    //                    if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //                    {
    //                        //  string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo from collinfo where college_code=" + Session["collegecode"] + "";
    //                        string college = "select isnull(collname,'') as collname,isnull(category,'') as category,isnull(affliatedby,'') as affliated,isnull(address1,'') as address1,isnull(address3,'') as address3,isnull(address2,'') as address2,isnull(pincode,'-')as pincode,logo1 as logo,phoneno,email,website,district from collinfo where college_code=" + Session["collegecode"] + "";
    //                        SqlCommand collegecmd = new SqlCommand(college, con);
    //                        SqlDataReader collegename;
    //                        con.Close();
    //                        con.Open();
    //                        collegename = collegecmd.ExecuteReader();
    //                        if (collegename.HasRows)
    //                        {
    //                            while (collegename.Read())
    //                            {
    //                                affliatedby = collegename["affliated"].ToString();
    //                                catgory = collegename["category"].ToString();
    //                                collnamenew1 = collegename["collname"].ToString();
    //                                address2 = collegename["address2"].ToString();
    //                                address1 = collegename["address1"].ToString();
    //                                address3 = collegename["address3"].ToString();
    //                                pincode = collegename["pincode"].ToString();
    //                                Phoneno = collegename["phoneno"].ToString();
    //                                email = collegename["email"].ToString();
    //                                website = collegename["website"].ToString();
    //                                district = collegename["district"].ToString();

    //                                adreesdis = collegename["district"].ToString();
    //                                adreesdis = adreesdis + " - " + pincode;
    //                                address = address1 + ", " + " " + address3; // changed by sridhar 06 sep 2014

    //                                catgory = "An " + catgory + " Institution";
    //                                address = address1 + "," + address2;
    //                                fromcity = address3;
    //                                affiliated = "Affiliated  to" + " " + affliatedby + ")";
    //                            }
    //                        }
    //                        con.Close();
    //                    }
    //                    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //                    rol_no = FpEntry.Sheets[0].Cells[res, 2].Text;

    //                    string Toaddress = "select parent_name as pname,parent_addressP as padd1,streetc as padd2,parent_pincodeP as ppin,districtc as pdistrict,Cityp as city from applyn where app_no in (select app_no from registration where roll_no='" + rol_no + "')";
    //                    SqlCommand Toaddcmd = new SqlCommand(Toaddress, con);
    //                    SqlDataReader Toaddreader;
    //                    con.Close();
    //                    con.Open();
    //                    toaddname = "";
    //                    toadd1 = "";
    //                    toadd2 = "";
    //                    topin = "";
    //                    todistrict = "";
    //                    Toaddreader = Toaddcmd.ExecuteReader();
    //                    if (Toaddreader.HasRows)
    //                    {
    //                        while (Toaddreader.Read())
    //                        {
    //                            toaddname = Toaddreader["pname"].ToString();
    //                            toadd1 = Toaddreader["padd1"].ToString();
    //                            toadd2 = Toaddreader["padd2"].ToString();
    //                            topin = Toaddreader["ppin"].ToString();
    //                            tocity = Toaddreader["city"].ToString();
    //                            todistrict = Toaddreader["pdistrict"].ToString();
    //                        }
    //                    }
    //                    Label4.Visible = false;
    //                    //format2btn.Visible = true;
    //                    name = FpEntry.Sheets[0].Cells[res, 4].Text;
    //                    reg_no = FpEntry.Sheets[0].Cells[res, 3].Text;
    //                    gsem3 = "";
    //                    sem = ddlSemYr.SelectedValue.ToString();
    //                    if (sem == "1")
    //                        gsem3 = "I";
    //                    else if (sem == "2")
    //                        gsem3 = "II";
    //                    else if (sem == "3")
    //                        gsem3 = "III";
    //                    else if (sem == "4")
    //                        gsem3 = "IV";
    //                    else if (sem == "5")
    //                        gsem3 = "V";
    //                    else if (sem == "6")
    //                        gsem3 = "VI";
    //                    else if (sem == "7")
    //                        gsem3 = "VII";
    //                    else if (sem == "8")
    //                        gsem3 = "VIII";
    //                    else if (sem == "9")
    //                        gsem3 = "IX";
    //                    else if (sem == "10")
    //                        gsem3 = "X";
    //                    gget_dept_acronym = GetFunction("select dept_acronym from department where dept_name='" + ddlBranch.SelectedItem.ToString() + "'");

    //                    //@@@@@@@@@@@@@ find the min exam date month and year
    //                    filteration();
    //                    string filterwithsection = "a.app_no=r.app_no and r.degree_code='" + degree1.ToString() + "' and et.subject_no=s.subject_no and r.batch_year='" + ddlBatch.SelectedValue.ToString() + "' and RollNo_Flag<>0 and et.exam_code=rt.exam_code and et.criteria_no ='" + criteria_no + "' and r.roll_no=rt.roll_no and cc=0 and exam_flag <> 'DEBAR' and delflag=0   and r.sections='" + ddlSec.SelectedValue.ToString() + "' " + strorder + ",s.subject_no";
    //                    string filterwithoutsection = "a.app_no=r.app_no and r.degree_code='" + degree1.ToString() + "' and et.subject_no=s.subject_no and r.batch_year='" + ddlBatch.SelectedValue.ToString() + "' and RollNo_Flag<>0 and et.exam_code=rt.exam_code and et.criteria_no ='" + criteria_no + "' and r.roll_no=rt.roll_no and cc=0 and exam_flag <> 'DEBAR' and delflag=0  " + strorder + ",s.subject_no";

    //                    hat.Clear();//'---------------------------new myth-------------------------------------
    //                    hat.Add("batchyear", ddlBatch.SelectedValue.ToString());
    //                    hat.Add("degreecode", ddlBranch.SelectedValue.ToString());
    //                    hat.Add("criteria_no", criteria_no);
    //                    hat.Add("sections", ddlSec.SelectedValue.ToString());
    //                    hat.Add("filterwithsection", filterwithsection.ToString());
    //                    hat.Add("filterwithoutsection", filterwithoutsection.ToString());
    //                    ds2 = dacces.select_method("PROC_STUD_ALL_SUBMARK", hat, "sp");
    //                    string min_examdate = "";
    //                    string final_date = "";
    //                    string examdate = "";
    //                    for (int i = 0; i < ds2.Tables[1].Rows.Count; i++)
    //                    {
    //                        examdate = ds2.Tables[1].Rows[i]["exam_date"].ToString();
    //                        string[] spl_examdate = examdate.Split('/');
    //                        string aftr_spl = spl_examdate[1].ToString() + "/" + spl_examdate[0].ToString() + "/" + spl_examdate[2].ToString();
    //                        if (min_examdate == "")
    //                        {
    //                            min_examdate = aftr_spl;
    //                        }
    //                        else
    //                        {
    //                            if (Convert.ToDateTime(min_examdate) < Convert.ToDateTime(aftr_spl))
    //                            {
    //                                final_date = min_examdate;
    //                            }
    //                            else
    //                            {
    //                                final_date = aftr_spl;
    //                            }
    //                        }
    //                    }
    //                    int date_mm = 0;
    //                    int date_yr = 0;
    //                    gdate_yr = 0;
    //                    if (final_date != "")
    //                    {
    //                        date_mm = Convert.ToDateTime(final_date).Month;
    //                        gdate_yr = Convert.ToDateTime(final_date).Year;
    //                    }
    //                    gstrExam_month = "";
    //                    if (date_mm.ToString() != "")
    //                    {
    //                        if (date_mm.ToString() == "1")
    //                            gstrExam_month = "Jan ";
    //                        else if (date_mm.ToString() == "2")
    //                            gstrExam_month = "Feb ";
    //                        else if (date_mm.ToString() == "3")
    //                            gstrExam_month = "Mar ";
    //                        else if (date_mm.ToString() == "4")
    //                            gstrExam_month = "Apr ";
    //                        else if (date_mm.ToString() == "5")
    //                            gstrExam_month = "Mar ";
    //                        else if (date_mm.ToString() == "6")
    //                            gstrExam_month = "Jun ";
    //                        else if (date_mm.ToString() == "7")
    //                            gstrExam_month = "Jul ";
    //                        else if (date_mm.ToString() == "8")
    //                            gstrExam_month = "Aug ";
    //                        else if (date_mm.ToString() == "9")
    //                            gstrExam_month = "Sep ";
    //                        else if (date_mm.ToString() == "10")
    //                            gstrExam_month = "Oct ";
    //                        else if (date_mm.ToString() == "11")
    //                            gstrExam_month = "Nov ";
    //                        else if (date_mm.ToString() == "12")
    //                            gstrExam_month = "Dec ";
    //                    }
    //                    // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].Text = "obtained the following marks in the " + chklstest.SelectedItem.ToString() + " Conducted in "+strExam_month+"'"+date_yr;// "has secured the following  marks in ";
    //                    int count = 0;
    //                    double maxc = 0;
    //                    int serial_no = 0;
    //                    string subjname = "";
    //                    string subjcode = "";
    //                    string result = "";
    //                    string checkmarks = "";
    //                    string getmark = "";
    //                    /////////   modified
    //                    //// modify
    //                    string selectmark = "select distinct e.subject_no,sub.subject_name,sub.subject_code,max_mark,min_mark,marks_obtained from subjectchooser s,registration rg,exam_type e,result r, subject sub where sub.subject_no=s.subject_no and  s.subject_no=e.subject_no and s.roll_no=rg.roll_no  and e.exam_code=r.exam_code and rg.roll_no=r.roll_no and e.criteria_no='" + criteria_no + "' and r.roll_no='" + rol_no + "'";
    //                    hat.Clear();
    //                    hat.Add("rollnum", rol_no.ToString());
    //                    hat.Add("criteriano", criteria_no.ToString());
    //                    ds = dacces.select_method(selectmark, hat, "cmd");
    //                    if (ds.Tables[0].Rows.Count > 0)
    //                    {
    //                        for (int dscount = 0; dscount < ds.Tables[0].Rows.Count; dscount++)
    //                        {
    //                            sno++;
    //                            subjname = ds.Tables[0].Rows[dscount]["subject_name"].ToString();
    //                            minmark = ds.Tables[0].Rows[dscount]["min_mark"].ToString();
    //                            maxmark = ds.Tables[0].Rows[dscount]["max_mark"].ToString();
    //                            checkmarks = ds.Tables[0].Rows[dscount]["marks_obtained"].ToString();
    //                            subjcode = ds.Tables[0].Rows[dscount]["subject_code"].ToString();
    //                            string marks = findresult(checkmarks);
    //                            if (marks != "")
    //                            {
    //                                getmark = marks;
    //                                if (TextBoxnew.Text != string.Empty)
    //                                {
    //                                    double newval = (Convert.ToDouble(TextBoxnew.Text) / Convert.ToDouble(maxmark));
    //                                    maxc = 0;
    //                                    if (getmark != "AB" && getmark != "AAA" && getmark != "EL" && getmark != "EOD" && getmark != "ML" && getmark != "SOD" && getmark != "NSS" && getmark != "NJ" && getmark != "S" && getmark != "L" && getmark != "NCC" && getmark != "HS" && getmark != "PP" && getmark != "SYOD" && getmark != "COD" && getmark != "OOD" && getmark != "OD" && getmark != "" && getmark != " " && getmark != "LA" && getmark != "" && getmark != " " && getmark != "RAA")//added on 26.07.12//Added By subburaj 21.08.2014
    //                                    {
    //                                        maxc = Convert.ToDouble(newval) * Convert.ToDouble(getmark);
    //                                        getmark = maxc.ToString();
    //                                    }
    //                                    else
    //                                    {
    //                                        getmark = marks;
    //                                    }
    //                                }
    //                            }
    //                            else
    //                            {
    //                                getmark = checkmarks;
    //                                if (TextBoxnew.Text != string.Empty)
    //                                {
    //                                    double newval = (Convert.ToDouble(TextBoxnew.Text) / Convert.ToDouble(maxmark));
    //                                    maxc = 0;
    //                                    if (getmark != "AB" && getmark != "AAA" && getmark != "EL" && getmark != "EOD" && getmark != "ML" && getmark != "SOD" && getmark != "NSS" && getmark != "NJ" && getmark != "S" && getmark != "L" && getmark != "NCC" && getmark != "HS" && getmark != "PP" && getmark != "SYOD" && getmark != "COD" && getmark != "OOD" && getmark != "OD" && getmark != "" && getmark != " " && getmark != "LA" && getmark != "" && getmark != " " && getmark != "RAA")//added on 26.07.12//added by Subburaj  21.08.2014
    //                                    {
    //                                        maxc = Convert.ToDouble(newval) * Convert.ToDouble(getmark);
    //                                    }
    //                                    getmark = maxc.ToString();
    //                                }
    //                            }
    //                            if ((((Convert.ToDouble(checkmarks)) < (Convert.ToDouble(minmark)))) && Convert.ToString(checkmarks) != "-2" && Convert.ToString(checkmarks) != "-3")
    //                            {
    //                                result = "Fail";
    //                            }
    //                            else
    //                            {
    //                                result = "Pass";
    //                            }
    //                            dr = dtmark.NewRow();
    //                            dr["subjectname"] = subjname;
    //                            dr["subjectcode"] = subjcode;
    //                            dr["minMark"] = minmark;
    //                            dr["mark"] = getmark;
    //                            dr["result"] = result;
    //                            dtmark.Rows.Add(dr);
    //                        }
    //                    }
    //                    for (int colm = 0; colm <= FpEntry.Sheets[0].ColumnCount - 1; colm++)
    //                    {
    //                        if (FpEntry.Sheets[0].ColumnHeader.Cells[8, colm].Text == "Rank")
    //                        {
    //                            grank = FpEntry.Sheets[0].Cells[res, colm].Text;
    //                            if (grank == "")
    //                            {
    //                                grank = "-";
    //                            }
    //                        }
    //                    }
    //                    int count1 = count;
    //                    dum_tage_date = "";
    //                    per_tage_day = 0;
    //                    persentmonthcal();
    //                    per_con_hrs = per_workingdays1;
    //                    per_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / (per_con_hrs + tot_conduct_hr_spl_fals)) * 100);
    //                    if (per_tage_hrs > 100)
    //                    {
    //                        per_tage_hrs = 100;
    //                    }
    //                    per_tage_day = per_tage_hrs;
    //                    dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //                    if (dum_tage_date == "NaN")
    //                    {
    //                        dum_tage_date = "0";
    //                    }
    //                    else if (dum_tage_date == "Infinity")
    //                    {
    //                        dum_tage_date = "0";
    //                    }
    //                    con.Close();
    //                    if (Registration_no == "")
    //                    {
    //                        Registration_no = rol_no;
    //                    }
    //                    else
    //                    {
    //                        Registration_no = Registration_no + "-" + rol_no;
    //                    }
    //                    if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //                    {
    //                        string college = "select * from PeriodAttndSchedule where  degree_code=" + ddlBranch.SelectedValue.ToString() + " and semester=" + ddlSemYr.SelectedValue.ToString() + "";
    //                        SqlCommand collegecmd = new SqlCommand(college, con);
    //                        SqlDataReader attendance;
    //                        con.Close();
    //                        con.Open();
    //                        attendance = collegecmd.ExecuteReader();
    //                        if (attendance.HasRows)
    //                        {
    //                            while (attendance.Read())
    //                            {
    //                                attendanceper = attendance["percent_eligible_for_exam"].ToString();
    //                                // address1 = attendance["address1"].ToString();
    //                            }
    //                        }
    //                        con.Close();
    //                    }
    //                    Bindpdf65(mydoc, Fontsmall, Fontbold, Fontbold1, dtmark, Response);
    //                }//END IF ISVAL
    //            }//END FOR LOOP
    //        }
    //    }
    //    string RegisterNumber = Registration_no.ToString();
    //    string[] RNumber = RegisterNumber.Split(new char[] { '-' });
    //}

    //public void Bindpdf65(Gios.Pdf.PdfDocument mydoc, Font Fontsmall, Font Fontbold, Font Fontbold1, DataTable dt, HttpResponse response)//added by annyutha
    //{
    //    try
    //    {
    //        string addressstret = address3 + "," + district + "-" + pincode + ",";
    //        string phone = "Ph.No:" + Phoneno + "," + "Mail:" + email + ",";
    //        string web = "Website:" + website + ".";
    //        string addresss = address1 + "," + address2;
    //        string concat = address3 + "," + district + "-" + pincode;
    //        int cnt;
    //        sno = dt.Rows.Count;
    //        int subno = 0;
    //        int pagecount = sno / 11;
    //        int repage = sno % 11;
    //        lblesr.Text = "";
    //        int nopages = pagecount;
    //        if (repage > 0)
    //        {
    //            nopages++;
    //        }
    //        if (nopages > 0)
    //        {
    //            for (int row = 0; row < nopages; row++)
    //            {
    //                subno++;
    //                Gios.Pdf.PdfPage mypdfpage = mydoc.NewPage();
    //                PdfArea teteto = new PdfArea(mydoc, 75, 50, 400, 150);
    //                PdfRectangle pr2 = new PdfRectangle(mydoc, teteto, Color.Black);
    //                mypdfpage.Add(pr2);
    //                PdfTextArea pt123to = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                       new PdfArea(mydoc, 100, 30, 60, 60), System.Drawing.ContentAlignment.MiddleLeft, "To");
    //                PdfTextArea pt123to12 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                new PdfArea(mydoc, 120, 35, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, reg_no + ",");
    //                PdfTextArea pt123to13 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                               new PdfArea(mydoc, 120, 55, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, name + ",");
    //                PdfTextArea pt123to1 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                      new PdfArea(mydoc, 120, 70, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, toaddname + ",");
    //                PdfTextArea pt123to2 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                     new PdfArea(mydoc, 120, 90, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, toadd1);
    //                PdfTextArea pt123to3 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 120, 110, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, toadd2);
    //                PdfTextArea pt123to34 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                  new PdfArea(mydoc, 120, 120, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, tocity);
    //                PdfTextArea pt123to4 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 120, 135, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, todistrict + '-' + topin);
    //                //PdfTextArea pt123to14 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                //                              new PdfArea(mydoc, 120, 145, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, );
    //                //PdfTextArea pt123to5 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                //               new PdfArea(mydoc, 560, 200, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, adresstud);
    //                mypdfpage.Add(pt123to);
    //                mypdfpage.Add(pt123to12);
    //                mypdfpage.Add(pt123to13);
    //                mypdfpage.Add(pt123to1);
    //                mypdfpage.Add(pt123to2);
    //                mypdfpage.Add(pt123to3);
    //                mypdfpage.Add(pt123to34);
    //                mypdfpage.Add(pt123to4);
    //                //  mypdfpage.Add(pt123to14);
    //                // mypdfpage.Add(pt123to5);
    //                PdfTextArea ptc = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 80, 220, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, collnamenew1);
    //                PdfTextArea pts = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 80, 240, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address1 + "  " + address2);
    //                PdfTextArea p = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 80, 260, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address3 + "  -  " + pincode);
    //                if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))//Aruna
    //                {
    //                    PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
    //                    mypdfpage.Add(LogoImage, 25, 205, 300);
    //                }
    //                cnt = subno * sno;
    //                //Gios.Pdf.PdfTable table = mydoc.NewTable(Fontsmall, cnt + 1, 5, 1);
    //                mypdfpage.Add(ptc);
    //                mypdfpage.Add(pts);
    //                mypdfpage.Add(p);
    //                PdfTextArea pt123 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                  new PdfArea(mydoc, 60, 300, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Dear Parents");
    //                PdfTextArea ptc21 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                         new PdfArea(mydoc, 80, 305, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, "Sub :" + test + "-PerformanceReport.");
    //                PdfTextArea ptc22 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 90, 340, 700, 50), System.Drawing.ContentAlignment.MiddleLeft, "Your son/daughter:" + name + "[" + rol_no + "]" + " Studying in " + sem + " Semester " + degree);
    //                PdfTextArea ptc213 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                       new PdfArea(mydoc, 40, 360, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, "[" + branch + "]" + " has secured the following marks out of 100.");
    //                // PdfTextArea psam=new PdfTextArea(Fontsmall,System.Drawing.Color.Black, new PdfArea(mydoc,
    //                mypdfpage.Add(pt123);
    //                mypdfpage.Add(ptc21);
    //                mypdfpage.Add(ptc22);
    //                //   mypdfpage.Add(ptc23);
    //                mypdfpage.Add(ptc213);
    //                Gios.Pdf.PdfTable table1 = mydoc.NewTable(Fontsmall, cnt + 1, 5, 1);
    //                table1.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //                table1.Columns[0].SetWidth(80);
    //                table1.Columns[1].SetWidth(150);
    //                table1.Columns[2].SetWidth(80);
    //                table1.Columns[3].SetWidth(100);
    //                table1.Columns[4].SetWidth(80);
    //                //  table1.CellRange(0, 0, 0, 3).SetFont(Fontsmall);
    //                table1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                table1.Cell(0, 0).SetContent("Subject Code");
    //                table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                table1.Cell(0, 1).SetContent("Subject Name");
    //                table1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                table1.Cell(0, 2).SetContent("Min Mark");
    //                table1.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                table1.Cell(0, 3).SetContent("Marks Obtained");
    //                table1.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                table1.Cell(0, 4).SetContent("Result");
    //                //Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 50, 250, 700, 1000));
    //                int val = 0;
    //                for (int i = 1; i < cnt + 1; i++)
    //                {
    //                    string scode1 = dt.Rows[val]["subjectcode"].ToString();
    //                    table1.Cell(i, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table1.Cell(i, 0).SetContent(scode1);
    //                    string scode = dt.Rows[val]["subjectname"].ToString();
    //                    table1.Cell(i, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                    table1.Cell(i, 1).SetContent(scode);
    //                    string sname = dt.Rows[val]["minMark"].ToString();
    //                    table1.Cell(i, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table1.Cell(i, 2).SetContent(sname);
    //                    string markobtained = dt.Rows[val]["mark"].ToString();
    //                    table1.Cell(i, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table1.Cell(i, 3).SetContent(markobtained);
    //                    string result = dt.Rows[val]["result"].ToString();
    //                    table1.Cell(i, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table1.Cell(i, 4).SetContent(result);
    //                    val++;
    //                }
    //                Gios.Pdf.PdfTablePage newpdftabpage = table1.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 75, 400, 500, 400));
    //                mypdfpage.Add(newpdftabpage);
    //                int xcout = (val * 15) + 240;
    //                PdfTextArea pt219 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                                       new PdfArea(mydoc, 130, xcout + 220, 400, 40), System.Drawing.ContentAlignment.MiddleRight, "Rank :" + "  " + grank.ToString());
    //                mypdfpage.Add(pt219);
    //                PdfTextArea pt21 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                       new PdfArea(mydoc, 40, xcout + 235, 500, 40), System.Drawing.ContentAlignment.MiddleLeft, "His / Her attendance details for the period " + TextBox2.Text.ToString() + " to " + TextBox1.Text.ToString() + " are as follows: ");
    //                //------------------------start-----------------------------// By M.SakthiPriya 05-12-2014
    //                if (Session["Hourwise"] == "1")
    //                {
    //                    PdfTextArea pt22 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                          new PdfArea(mydoc, 40, xcout + 250, 500, 40), System.Drawing.ContentAlignment.MiddleLeft, "Number of Conducted Hours:" + Convert.ToString(per_con_hrs + tot_conduct_hr_spl_fals));
    //                    PdfTextArea pt23 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                          new PdfArea(mydoc, 40, xcout + 280, 500, 40), System.Drawing.ContentAlignment.MiddleLeft, "Number of Hours Attended:" + Convert.ToString(per_per_hrs + tot_per_hrs_spl_fals));
    //                    PdfTextArea pt24 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                          new PdfArea(mydoc, 40, xcout + 310, 500, 40), System.Drawing.ContentAlignment.MiddleLeft, "% of attendance in Hours:" + dum_tage_date.ToString());
    //                    mypdfpage.Add(pt22);
    //                    mypdfpage.Add(pt23);
    //                    mypdfpage.Add(pt24);
    //                }
    //                if (Session["Daywise"] == "1")
    //                {
    //                    PdfTextArea pt212 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                         new PdfArea(mydoc, 40, xcout + 265, 500, 40), System.Drawing.ContentAlignment.MiddleLeft, "Number of Conducted Days:" + Convert.ToString(per_con_hrs + tot_conduct_hr_spl_fals));
    //                    PdfTextArea pt213 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                          new PdfArea(mydoc, 40, xcout + 295, 500, 40), System.Drawing.ContentAlignment.MiddleLeft, "Number of Days Attended:" + Convert.ToString(per_per_hrs + tot_per_hrs_spl_fals));
    //                    PdfTextArea pt214 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                          new PdfArea(mydoc, 40, xcout + 325, 500, 40), System.Drawing.ContentAlignment.MiddleLeft, "% of Attendance in Days:" + dum_tage_date.ToString());
    //                    mypdfpage.Add(pt212);
    //                    mypdfpage.Add(pt213);
    //                    mypdfpage.Add(pt214);
    //                }
    //                //------------------------End-----------------------------// By M.SakthiPriya 05-12-2014
    //                PdfTextArea pt25 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                      new PdfArea(mydoc, 40, xcout + 345, 500, 40), System.Drawing.ContentAlignment.MiddleLeft, "Minimum eligibility to appear in the University Examination is " + attendanceper + "% attendance.");
    //                mypdfpage.Add(pt21);
    //                mypdfpage.Add(pt25);
    //                PdfTextArea pt2191 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                                    new PdfArea(mydoc, 40, xcout + 380, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "Class Advisor");
    //                PdfTextArea pt2192 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                                      new PdfArea(mydoc, 130, xcout + 380, 400, 40), System.Drawing.ContentAlignment.MiddleRight, "H.O.D");
    //                mypdfpage.Add(pt2191);
    //                mypdfpage.Add(pt2192);
    //                PdfArea tetefrom = new PdfArea(mydoc, 75, xcout + 410, 400, 120);
    //                PdfRectangle pr3 = new PdfRectangle(mydoc, tetefrom, Color.Black);
    //                mypdfpage.Add(pr3);
    //                PdfTextArea pt123from = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                     new PdfArea(mydoc, 100, xcout + 390, 60, 60), System.Drawing.ContentAlignment.MiddleLeft, "From");
    //                PdfTextArea pt123from1 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                       new PdfArea(mydoc, 120, xcout + 400, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, collnamenew1);
    //                PdfTextArea pt123from2 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                  new PdfArea(mydoc, 120, xcout + 415, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, address2);
    //                PdfTextArea pt123from3 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 120, xcout + 415, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, address);
    //                PdfTextArea pt123from4 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 120, xcout + 435, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, fromcity);
    //                PdfTextArea pt123from5 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 120, xcout + 450, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, adreesdis);
    //                //PdfTextArea pt123from2 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                //                                     new PdfArea(mydoc, 120, xcout + 360, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, toadd1);
    //                //PdfTextArea pt123from3 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                //                                   new PdfArea(mydoc, 120, xcout + 370, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, toadd2);
    //                //PdfTextArea pt123from4 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                //                                   new PdfArea(mydoc, 120, xcout + 380, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, todistrict);
    //                //PdfTextArea pt123from14 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                //                              new PdfArea(mydoc, 120, xcout + 390, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, topin);
    //                //PdfTextArea pt123from5 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                //                              new PdfArea(mydoc, 560, 200, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, adresstud);
    //                mypdfpage.Add(pt123from);
    //                mypdfpage.Add(pt123from1);
    //                //  mypdfpage.Add(pt123from2);
    //                mypdfpage.Add(pt123from3);
    //                mypdfpage.Add(pt123from4);
    //                mypdfpage.Add(pt123from5);
    //                string appPath = HttpContext.Current.Server.MapPath("~");
    //                if (appPath != "")
    //                {
    //                    string szPath = appPath + "/Report/";
    //                    string szFile = "Format1" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";
    //                    mypdfpage.SaveToDocument();
    //                    mydoc.SaveToFile(szPath + szFile);
    //                    Response.ClearHeaders();
    //                    Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
    //                    Response.ContentType = "application/pdf";
    //                    Response.WriteFile(szPath + szFile);
    //                    //=============================================
    //                }
    //            }
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        lblesr.Text = ex.ToString();
    //    }
    //}

    //public void bindpdfletter4()
    //{
    //    Hashtable ht = new Hashtable();
    //    Font Fontbold = new Font("Book Antiqua", 13, FontStyle.Bold);
    //    //Font Fontbold = new Font("Times New Roman", 20, FontStyle.Bold);
    //    Font Fontsmall = new Font("Book Antiqua", 9, FontStyle.Regular);
    //    Font Fontbold1 = new Font("Book Antiqua", 12, FontStyle.Bold);
    //    Font tamil = new Font("AMUDHAM.TTF", 16, FontStyle.Regular);
    //    Gios.Pdf.PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(17, 30));//Added By M.SakthiPriya 08-12-2014
    //    // Gios.Pdf.PdfDocument mydoc = new Gios.Pdf.PdfDocument(PdfDocumentFormat.A4);
    //    DataTable dtmark = new DataTable();
    //    DataColumn dc;
    //    dc = new DataColumn();
    //    dc.ColumnName = "Sno";
    //    dtmark.Columns.Add(dc);
    //    dc = new DataColumn();
    //    dc.ColumnName = "subjectcode";
    //    dtmark.Columns.Add(dc);
    //    dc = new DataColumn();
    //    dc.ColumnName = "subjectname";
    //    dtmark.Columns.Add(dc);
    //    dc = new DataColumn();
    //    dc.ColumnName = "mark";
    //    dtmark.Columns.Add(dc);
    //    dc = new DataColumn();
    //    dc.ColumnName = "result";
    //    dtmark.Columns.Add(dc);
    //    DataRow dr;
    //    string Registration_no = "";
    //    int xres = 0;
    //    int mm = 1;
    //    FpEntry.SaveChanges();
    //    frdate = TextBox2.Text;
    //    todate = TextBox1.Text;
    //    string strsc = "";
    //    if (ddlBranch.Text != "")
    //    {
    //        branch = ddlBranch.SelectedItem.Text;
    //    }
    //    if (ddlDegree.Text != "")
    //    {
    //        degree = ddlDegree.SelectedItem.Text;
    //    }
    //    sem = ddlSemYr.SelectedValue;
    //    sec = ddlSec.SelectedValue;
    //    if (ddlSemYr.Text != "")
    //    {
    //        semester = Convert.ToInt32(ddlSemYr.SelectedValue);
    //    }
    //    colege_code = Session["collegecode"].ToString();
    //    degree1 = ddlBranch.SelectedValue;
    //    FpSpread1.Sheets[0].RowCount = 0;
    //    Label4.Visible = true;
    //    for (int j = 0; j < chklstest.Items.Count; j++)
    //    {
    //        if (chklstest.Items[j].Selected == true)
    //        {
    //            string criteria_no = chklstest.Items[j].Value.ToString();
    //            test = chklstest.Items[j].Text.ToString();
    //            ht.Clear();
    //            for (int res = 0; res < Convert.ToInt32(FpEntry.Sheets[0].RowCount); res++)
    //            {

    //                isval = 0;
    //                dtmark.Rows.Clear();
    //                s = FpEntry.Sheets[0].Cells[res, 0].Text;

    //                isval = Convert.ToInt32(FpEntry.Sheets[0].Cells[res, 1].Value);
    //                if (isval == 1)
    //                {
    //                    sno = 0;
    //                    DataSet ds = new DataSet();
    //                    Label4.Visible = false;
    //                    //format2btn.Visible = true;
    //                    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //                    if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //                    {
    //                        //  string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo from collinfo where college_code=" + Session["collegecode"] + "";
    //                        string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(phoneno,'-') as phoneno,isnull(pincode,'-')as pincode,logo1 as logo,category,affliatedby,isnull(faxno,'-') as faxno,district,email,website,state from collinfo where college_code=" + Session["collegecode"] + "";
    //                        SqlCommand collegecmd = new SqlCommand(college, con);
    //                        SqlDataReader collegename;
    //                        con.Close();
    //                        con.Open();
    //                        collegename = collegecmd.ExecuteReader();
    //                        if (collegename.HasRows)
    //                        {
    //                            while (collegename.Read())
    //                            {
    //                                collnamenew1 = collegename["collname"].ToString();
    //                                address1 = collegename["address1"].ToString();
    //                                address2 = collegename["address2"].ToString();
    //                                address3 = collegename["address3"].ToString();
    //                                pincode = collegename["pincode"].ToString();
    //                                email = collegename["email"].ToString();
    //                                Phoneno = collegename["phoneno"].ToString();
    //                                address = address1 + address2;
    //                            }
    //                        }
    //                        con.Close();
    //                    }
    //                    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //                    rol_no = FpEntry.Sheets[0].Cells[res, 2].Text;
    //                    ht.Add(res, rol_no);
    //                    string Toaddress = "select parent_name as pname,parent_addressP as padd1,streetp as padd2,parent_pincodeP as ppin,districtp as pdistrict from applyn where app_no in (select app_no from registration where roll_no='" + rol_no + "')";
    //                    SqlCommand Toaddcmd = new SqlCommand(Toaddress, con);
    //                    SqlDataReader Toaddreader;
    //                    con.Close();
    //                    con.Open();
    //                    toaddname = "";
    //                    toadd1 = "";
    //                    toadd2 = "";
    //                    topin = "";
    //                    todistrict = "";
    //                    Toaddreader = Toaddcmd.ExecuteReader();
    //                    if (Toaddreader.HasRows)
    //                    {
    //                        while (Toaddreader.Read())
    //                        {
    //                            toaddname = Toaddreader["pname"].ToString();
    //                            toadd1 = Toaddreader["padd1"].ToString();
    //                            toadd2 = Toaddreader["padd2"].ToString();
    //                            topin = Toaddreader["ppin"].ToString();
    //                            todistrict = Toaddreader["pdistrict"].ToString();
    //                        }
    //                    }
    //                    Label4.Visible = false;
    //                    //format2btn.Visible = true;
    //                    name = FpEntry.Sheets[0].Cells[res, 4].Text;
    //                    gsem3 = "";
    //                    sem = ddlSemYr.SelectedValue.ToString();
    //                    if (sem == "1")
    //                        gsem3 = "I";
    //                    else if (sem == "2")
    //                        gsem3 = "II";
    //                    else if (sem == "3")
    //                        gsem3 = "III";
    //                    else if (sem == "4")
    //                        gsem3 = "IV";
    //                    else if (sem == "5")
    //                        gsem3 = "V";
    //                    else if (sem == "6")
    //                        gsem3 = "VI";
    //                    else if (sem == "7")
    //                        gsem3 = "VII";
    //                    else if (sem == "8")
    //                        gsem3 = "VIII";
    //                    else if (sem == "9")
    //                        gsem3 = "IX";
    //                    else if (sem == "10")
    //                        gsem3 = "X";
    //                    gget_dept_acronym = GetFunction("select dept_acronym from department where dept_name='" + ddlBranch.SelectedItem.ToString() + "'");
    //                    //@@@@@@@@@@@@@ find the min exam date month and year
    //                    filteration();
    //                    string filterwithsection = "a.app_no=r.app_no and r.degree_code='" + degree1.ToString() + "' and et.subject_no=s.subject_no and r.batch_year='" + ddlBatch.SelectedValue.ToString() + "' and RollNo_Flag<>0 and et.exam_code=rt.exam_code and et.criteria_no ='" + criteria_no + "' and r.roll_no=rt.roll_no and cc=0 and exam_flag <> 'DEBAR' and delflag=0   and r.sections='" + ddlSec.SelectedValue.ToString() + "' " + strorder + ",s.subject_no";
    //                    string filterwithoutsection = "a.app_no=r.app_no and r.degree_code='" + degree1.ToString() + "' and et.subject_no=s.subject_no and r.batch_year='" + ddlBatch.SelectedValue.ToString() + "' and RollNo_Flag<>0 and et.exam_code=rt.exam_code and et.criteria_no ='" + criteria_no + "' and r.roll_no=rt.roll_no and cc=0 and exam_flag <> 'DEBAR' and delflag=0  " + strorder + ",s.subject_no";

    //                    hat.Clear();//'---------------------------new myth-------------------------------------
    //                    hat.Add("batchyear", ddlBatch.SelectedValue.ToString());
    //                    hat.Add("degreecode", ddlBranch.SelectedValue.ToString());
    //                    hat.Add("criteria_no", criteria_no);
    //                    hat.Add("sections", ddlSec.SelectedValue.ToString());
    //                    hat.Add("filterwithsection", filterwithsection.ToString());
    //                    hat.Add("filterwithoutsection", filterwithoutsection.ToString());
    //                    ds2 = dacces.select_method("PROC_STUD_ALL_SUBMARK", hat, "sp");
    //                    string min_examdate = "";
    //                    string final_date = "";
    //                    string examdate = "";
    //                    for (int i = 0; i < ds2.Tables[1].Rows.Count; i++)
    //                    {
    //                        examdate = ds2.Tables[1].Rows[i]["exam_date"].ToString();
    //                        string[] spl_examdate = examdate.Split('/');
    //                        string aftr_spl = spl_examdate[1].ToString() + "/" + spl_examdate[0].ToString() + "/" + spl_examdate[2].ToString();
    //                        if (min_examdate == "")
    //                        {
    //                            min_examdate = aftr_spl;
    //                        }
    //                        else
    //                        {
    //                            if (Convert.ToDateTime(min_examdate) < Convert.ToDateTime(aftr_spl))
    //                            {
    //                                final_date = min_examdate;
    //                            }
    //                            else
    //                            {
    //                                final_date = aftr_spl;
    //                            }
    //                        }
    //                    }
    //                    int date_mm = 0;
    //                    int date_yr = 0;
    //                    gdate_yr = 0;
    //                    if (final_date != "")
    //                    {
    //                        date_mm = Convert.ToDateTime(final_date).Month;
    //                        gdate_yr = Convert.ToDateTime(final_date).Year;
    //                    }
    //                    gstrExam_month = "";
    //                    if (date_mm.ToString() != "")
    //                    {
    //                        if (date_mm.ToString() == "1")
    //                            gstrExam_month = "Jan ";
    //                        else if (date_mm.ToString() == "2")
    //                            gstrExam_month = "Feb ";
    //                        else if (date_mm.ToString() == "3")
    //                            gstrExam_month = "Mar ";
    //                        else if (date_mm.ToString() == "4")
    //                            gstrExam_month = "Apr ";
    //                        else if (date_mm.ToString() == "5")
    //                            gstrExam_month = "Mar ";
    //                        else if (date_mm.ToString() == "6")
    //                            gstrExam_month = "Jun ";
    //                        else if (date_mm.ToString() == "7")
    //                            gstrExam_month = "Jul ";
    //                        else if (date_mm.ToString() == "8")
    //                            gstrExam_month = "Aug ";
    //                        else if (date_mm.ToString() == "9")
    //                            gstrExam_month = "Sep ";
    //                        else if (date_mm.ToString() == "10")
    //                            gstrExam_month = "Oct ";
    //                        else if (date_mm.ToString() == "11")
    //                            gstrExam_month = "Nov ";
    //                        else if (date_mm.ToString() == "12")
    //                            gstrExam_month = "Dec ";
    //                    }
    //                    // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].Text = "obtained the following marks in the " + chklstest.SelectedItem.ToString() + " Conducted in "+strExam_month+"'"+date_yr;// "has secured the following  marks in ";

    //                    int count = 0;
    //                    double maxc = 0;
    //                    int serial_no = 0;
    //                    string subjname = "";
    //                    string subjcode = "";
    //                    string result = "";
    //                    string checkmarks = "";
    //                    string getmark = "";
    //                    /////////   modified
    //                    //// modify
    //                    string selectmark = "select distinct e.subject_no,sub.subject_name,sub.subject_code,max_mark,min_mark,marks_obtained from subjectchooser s,registration rg,exam_type e,result r, subject sub where sub.subject_no=s.subject_no and  s.subject_no=e.subject_no and s.roll_no=rg.roll_no  and e.exam_code=r.exam_code and rg.roll_no=r.roll_no and e.criteria_no='" + criteria_no + "' and r.roll_no='" + rol_no + "'";
    //                    hat.Clear();
    //                    hat.Add("rollnum", rol_no.ToString());
    //                    hat.Add("criteriano", criteria_no.ToString());
    //                    ds = dacces.select_method(selectmark, hat, "cmd");
    //                    if (ds.Tables[0].Rows.Count > 0)
    //                    {
    //                        for (int dscount = 0; dscount < ds.Tables[0].Rows.Count; dscount++)
    //                        {
    //                            sno++;
    //                            subjname = ds.Tables[0].Rows[dscount]["subject_name"].ToString();
    //                            minmark = ds.Tables[0].Rows[dscount]["min_mark"].ToString();
    //                            maxmark = ds.Tables[0].Rows[dscount]["max_mark"].ToString();
    //                            checkmarks = ds.Tables[0].Rows[dscount]["marks_obtained"].ToString();
    //                            subjcode = ds.Tables[0].Rows[dscount]["subject_code"].ToString();
    //                            string marks = findresult(checkmarks);
    //                            if (marks != "")
    //                            {
    //                                getmark = marks;
    //                                if (TextBoxnew.Text != string.Empty)
    //                                {
    //                                    double newval = (Convert.ToDouble(TextBoxnew.Text) / Convert.ToDouble(maxmark));
    //                                    maxc = 0;
    //                                    if (getmark != "AB" && getmark != "AAA" && getmark != "EL" && getmark != "EOD" && getmark != "ML" && getmark != "SOD" && getmark != "NSS" && getmark != "NJ" && getmark != "S" && getmark != "L" && getmark != "NCC" && getmark != "HS" && getmark != "PP" && getmark != "SYOD" && getmark != "COD" && getmark != "OOD" && getmark != "OD" && getmark != "" && getmark != " " && getmark != "LA" && getmark != "" && getmark != " " && getmark != "RAA")//added on 26.07.12//Added By subburaj 21.08.2014
    //                                    {
    //                                        maxc = Convert.ToDouble(newval) * Convert.ToDouble(getmark);
    //                                        getmark = maxc.ToString();
    //                                    }
    //                                    else
    //                                    {
    //                                        getmark = marks;
    //                                    }
    //                                }
    //                            }
    //                            else
    //                            {
    //                                getmark = checkmarks;
    //                                if (TextBoxnew.Text != string.Empty)
    //                                {
    //                                    double newval = (Convert.ToDouble(TextBoxnew.Text) / Convert.ToDouble(maxmark));
    //                                    maxc = 0;
    //                                    if (getmark != "AB" && getmark != "AAA" && getmark != "EL" && getmark != "EOD" && getmark != "ML" && getmark != "SOD" && getmark != "NSS" && getmark != "NJ" && getmark != "S" && getmark != "L" && getmark != "NCC" && getmark != "HS" && getmark != "PP" && getmark != "SYOD" && getmark != "COD" && getmark != "OOD" && getmark != "OD" && getmark != "" && getmark != " " && getmark != "LA" && getmark != "" && getmark != " " && getmark != "RAA")//added on 26.07.12//added by Subburaj  21.08.2014
    //                                    {
    //                                        maxc = Convert.ToDouble(newval) * Convert.ToDouble(getmark);
    //                                    }
    //                                    getmark = maxc.ToString();
    //                                }
    //                            }
    //                            if ((((Convert.ToDouble(checkmarks)) < (Convert.ToDouble(minmark)))) && Convert.ToString(checkmarks) != "-2" && Convert.ToString(checkmarks) != "-3")
    //                            {
    //                                result = "Fail";
    //                            }
    //                            else
    //                            {
    //                                result = "Pass";
    //                            }
    //                            dr = dtmark.NewRow();
    //                            dr["Sno"] = sno.ToString();
    //                            dr["subjectname"] = subjname;
    //                            dr["subjectcode"] = subjcode;
    //                            dr["mark"] = getmark;
    //                            dr["result"] = result;
    //                            dtmark.Rows.Add(dr);
    //                        }
    //                    }
    //                    for (int colm = 0; colm <= FpEntry.Sheets[0].ColumnCount - 1; colm++)
    //                    {
    //                        if (FpEntry.Sheets[0].ColumnHeader.Cells[8, colm].Text == "Rank")
    //                        {
    //                            grank = FpEntry.Sheets[0].Cells[res, colm].Text;
    //                            if (grank == "")
    //                            {
    //                                grank = "-";
    //                            }
    //                        }
    //                    }
    //                    int count1 = count;
    //                    persentmonthcal();
    //                    double per_tage_day;
    //                    string dum_tage_date = "";
    //                    if (Session["Hourwise"] == "1")
    //                    {
    //                        per_con_hrs = per_workingdays1;
    //                        per_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / (per_con_hrs + tot_conduct_hr_spl_fals)) * 100);
    //                        if (per_tage_hrs > 100)
    //                        {
    //                            per_tage_hrs = 100;
    //                        }
    //                        per_tage_day = per_tage_hrs;
    //                        dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //                    }
    //                    if (Session["Daywise"] == "1")
    //                    {
    //                        per_tage_day = ((pre_present_date / per_workingdays) * 100);

    //                        if (per_tage_day > 100)
    //                        {
    //                            per_tage_day = 100;
    //                        }
    //                        dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //                    }
    //                    if (dum_tage_date == "NaN")
    //                    {
    //                        gdum_tage_date = "0";
    //                    }
    //                    else if (dum_tage_date == "Infinity")
    //                    {
    //                        gdum_tage_date = "0";
    //                    }
    //                    else
    //                    {
    //                        gdum_tage_date = dum_tage_date;
    //                    }
    //                    con.Close();
    //                    if (Registration_no == "")
    //                    {
    //                        Registration_no = rol_no;
    //                    }
    //                    else
    //                    {
    //                        Registration_no = Registration_no + "-" + rol_no;
    //                    }
    //                    Bindpdf5(mydoc, Fontsmall, Fontbold, Fontbold1, dtmark, Response);

    //                }//END IF ISVAL
    //            }//END FOR LOOP           
    //            //----------------------Added By M.SakthiPriya 11-12-2014----------------------------------------------
    //            for (int res = 0; res < Convert.ToInt32(FpEntry.Sheets[0].RowCount); res++)
    //            {
    //                isval = 0;

    //                isval = Convert.ToInt32(FpEntry.Sheets[0].Cells[res, 1].Value);
    //                if (isval == 1)
    //                {
    //                    string roll = ht[res].ToString();
    //                    Gios.Pdf.PdfPage mypdfpage1 = mydoc.NewPage();
    //                    string sex = "";
    //                    string add = "select a.stud_name,a.sex,a.parent_name,a.parent_addressP,a.Streetp,a.Cityp,a.Districtp,a.parent_pincodep from applyn a,Registration r where a.app_no=r.App_No and r.Batch_Year=a.batch_year and r.college_code=a.college_code and r.degree_code=a.degree_code and  r.Roll_No='" + roll + "'";
    //                    DataSet ds = new DataSet();
    //                    ds = dacces.select_method_wo_parameter(add, "text");
    //                    if (ds.Tables[0].Rows.Count > 0)
    //                    {
    //                        //PdfTextArea pts0 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                        //                           new PdfArea(mydoc, 220, 200, 400, 30), System.Drawing.ContentAlignment.MiddleLeft,"TO");
    //                        //mypdfpage1.Add(pts0);
    //                        PdfTextArea pts1 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 250, 110, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, ds.Tables[0].Rows[0]["stud_name"].ToString());
    //                        mypdfpage1.Add(pts1);
    //                        if (Convert.ToInt32(ds.Tables[0].Rows[0]["sex"].ToString()) == 1)
    //                        {
    //                            sex = "D/O";
    //                        }
    //                        else if (Convert.ToInt32(ds.Tables[0].Rows[0]["sex"].ToString()) == 0)
    //                        {
    //                            sex = "S/O";
    //                        }
    //                        PdfTextArea pts2 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 250, 130, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, sex + " " + "Mr." + ds.Tables[0].Rows[0]["parent_name"].ToString());
    //                        mypdfpage1.Add(pts2);

    //                        //****************added by srinath 12/1/2015********************
    //                        string address = "";
    //                        string drno = ds.Tables[0].Rows[0]["parent_addressP"].ToString();
    //                        string street = ds.Tables[0].Rows[0]["Streetp"].ToString();
    //                        if (drno.Trim() != "" && drno != null && drno.Trim() != "-1" && drno.Trim() != "0")
    //                        {
    //                            address = drno;
    //                        }
    //                        if (street.Trim() != "" && street != null && street.Trim() != "-1" && street.Trim() != "0")
    //                        {
    //                            if (address != "")
    //                            {
    //                                address = address + ',' + street;
    //                            }
    //                            else
    //                            {
    //                                address = street;
    //                            }
    //                        }
    //                        //***************END************************************

    //                        PdfTextArea pts3 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 250, 150, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, address);
    //                        mypdfpage1.Add(pts3);
    //                        string cityanddistrict = "";
    //                        string cityp = ds.Tables[0].Rows[0]["Cityp"].ToString();
    //                        string districtp = ds.Tables[0].Rows[0]["Districtp"].ToString();
    //                        if (cityp.Trim() != "" && cityp != null && cityp.Trim() != "-1" && cityp.Trim() != "0")
    //                        {
    //                            cityanddistrict = cityp;
    //                        }
    //                        if (districtp.Trim() != "" && districtp != null && districtp.Trim() != "-1" && districtp.Trim() != "0")
    //                        {
    //                            if (cityanddistrict.Trim() != "")
    //                            {
    //                                cityanddistrict = cityanddistrict + ',' + districtp;
    //                            }
    //                            else
    //                            {
    //                                cityanddistrict = districtp;
    //                            }
    //                        }
    //                        PdfTextArea pts4 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 250, 170, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, cityanddistrict);
    //                        mypdfpage1.Add(pts4);
    //                        //PdfTextArea pts5 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                        //                           new PdfArea(mydoc, 250, 350, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, ds.Tables[0].Rows[0]["Districtp"].ToString());
    //                        //mypdfpage1.Add(pts5);
    //                        //PdfTextArea pts6 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                        //                           new PdfArea(mydoc, 250, 380, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, ds.Tables[0].Rows[0]["parent_pincodep"].ToString());
    //                        //mypdfpage1.Add(pts6);
    //                        int pc = 310;
    //                        string pin = ds.Tables[0].Rows[0]["parent_pincodep"].ToString();
    //                        for (int i = 0; i < pin.Length; i++)
    //                        {
    //                            string code = pin[i].ToString();
    //                            PdfTextArea pts6 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                       new PdfArea(mydoc, pc, 190, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, code);
    //                            mypdfpage1.Add(pts6);
    //                            pc = pc + 22;
    //                        }
    //                    }
    //                    PdfTextArea ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                       new PdfArea(mydoc, 40, 335, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, collnamenew1);
    //                    PdfTextArea pts = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                       new PdfArea(mydoc, 40, 350, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address1 + "  " + address2);
    //                    string[] arr = pincode.Split('-');
    //                    string pin1 = arr[0].ToString();
    //                    int pn = 207;
    //                    for (int i = 0; i < pin1.Length; i++)
    //                    {
    //                        string code = pin1[i].ToString();
    //                        PdfTextArea p = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, pn, 370, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, code);
    //                        mypdfpage1.Add(p);
    //                        pn = pn + 16;
    //                    }
    //                    mypdfpage1.Add(ptc);
    //                    mypdfpage1.Add(pts);
    //                    string appPath = HttpContext.Current.Server.MapPath("~");
    //                    if (appPath != "")
    //                    {
    //                        string szPath = appPath + "/Report/";
    //                        //string szFile = "Format1.pdf";
    //                        //Modified By Srinath 24/9/2014
    //                        string szFile = "Format1" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";
    //                        mypdfpage1.SaveToDocument();
    //                        mydoc.SaveToFile(szPath + szFile);
    //                        Response.ClearHeaders();
    //                        Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
    //                        Response.ContentType = "application/pdf";
    //                        Response.WriteFile(szPath + szFile);
    //                        //=============================================                  
    //                    }
    //                }
    //            }
    //        }
    //    }
    //    //------------------------End-----------------------------// By M.SakthiPriya 11-12-2014
    //    string RegisterNumber = Registration_no.ToString();
    //    string[] RNumber = RegisterNumber.Split(new char[] { '-' });

    //}

    //public void Bindpdf5(Gios.Pdf.PdfDocument mydoc, Font Fontsmall, Font Fontbold, Font Fontbold1, DataTable dt, HttpResponse response)
    //{
    //    try
    //    {
    //        int cnt;
    //        sno = dt.Rows.Count;
    //        int subno = 0;
    //        int pagecount = sno / 13;
    //        int repage = sno % 13;
    //        lblesr.Text = "";
    //        int nopages = pagecount;
    //        if (repage > 0)
    //        {
    //            nopages++;
    //        }
    //        if (nopages > 0)
    //        {
    //            for (int row = 0; row < nopages; row++)
    //            {
    //                subno++;
    //                Gios.Pdf.PdfPage mypdfpage = mydoc.NewPage();

    //                PdfArea tete = new PdfArea(mydoc, 20, 50, 440, 730);
    //                //------------------------start-----------------------------// By M.SakthiPriya 08-12-2014
    //                PdfRectangle pr1 = new PdfRectangle(mydoc, tete, Color.Black);
    //                mypdfpage.Add(pr1);
    //                PdfTextArea ptc = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 40, 70, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, collnamenew1);
    //                PdfTextArea pts = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 40, 90, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address1 + "  " + address2);
    //                PdfTextArea p = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 40, 110, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address3 + "  -  " + pincode);
    //                if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))//Aruna
    //                {
    //                    PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
    //                    mypdfpage.Add(LogoImage, 35, 60, 500);
    //                }
    //                if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Right_Logo.jpeg")))//annyutha 10/10/2014
    //                {
    //                    PdfImage LogoImage1 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Right_Logo.jpeg"));
    //                    mypdfpage.Add(LogoImage1, 370, 60, 500);
    //                }
    //                cnt = subno * sno;
    //                Gios.Pdf.PdfTable table = mydoc.NewTable(Fontsmall, cnt + 1, 5, 1);
    //                mypdfpage.Add(ptc);
    //                mypdfpage.Add(pts);
    //                mypdfpage.Add(p);
    //                if (subno == 1)
    //                {
    //                    PdfTextArea ptc2 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 90, 130, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Department of " + ddlBranch.SelectedItem.ToString());
    //                    PdfTextArea ptc3 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 25, 160, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Dear Sir/Madam,");
    //                    PdfTextArea ptc4 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 40, 180, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Sub:Progress Report-Test   (" + test + ")" + "  " + "& Attendance - Intimation Reg");
    //                    string get_dept_acronym = GetFunction("select dept_acronym from department where dept_name='" + ddlBranch.SelectedItem.ToString() + "'");
    //                    PdfTextArea ptc5 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 35, 200, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Your Son/Daughter" + " " + name + "" + "[" + rol_no + "]" + "  " + "Student of " + "  " + gsem3 + " " + degree + " " + get_dept_acronym + " ");
    //                    PdfTextArea ptc6 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 35, 220, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Obtained the following marks in the" + " " + test + "  " + "Conducted in" + "  " + gstrExam_month + "'" + gdate_yr);
    //                    mypdfpage.Add(ptc2);
    //                    mypdfpage.Add(ptc3);
    //                    mypdfpage.Add(ptc4);
    //                    mypdfpage.Add(ptc5);
    //                    mypdfpage.Add(ptc6);
    //                    table.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //                    table.Columns[0].SetWidth(30);
    //                    table.Columns[1].SetWidth(50);
    //                    table.Columns[2].SetWidth(180);
    //                    table.Columns[3].SetWidth(40);
    //                    table.Columns[4].SetWidth(40);
    //                    table.CellRange(0, 0, 0, 4).SetFont(Fontbold1);
    //                    table.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table.Cell(0, 0).SetContent("S.No");
    //                    table.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table.Cell(0, 1).SetContent("Subject code");
    //                    table.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table.Cell(0, 2).SetContent("Subject Name");
    //                    table.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table.Cell(0, 3).SetContent("Marks out of" + TextBoxnew.Text);
    //                    table.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table.Cell(0, 4).SetContent("Remarks");
    //                }
    //                int val = 0;
    //                if (subno == 1)
    //                {
    //                    if (cnt < 13)
    //                    {
    //                        for (int i = 0; i < cnt; i++)
    //                        {
    //                            val++;
    //                            int snor = Convert.ToInt16(dt.Rows[i]["sno"]);
    //                            table.Cell(val, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            table.Cell(val, 0).SetContent(snor);
    //                            string scode = dt.Rows[i]["subjectcode"].ToString();
    //                            table.Cell(val, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                            table.Cell(val, 1).SetContent(scode);
    //                            string sname = dt.Rows[i]["subjectname"].ToString();
    //                            table.Cell(val, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                            table.Cell(val, 2).SetContent(sname);
    //                            string mark = dt.Rows[i]["mark"].ToString();
    //                            table.Cell(val, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            table.Cell(val, 3).SetContent(mark);
    //                            string result = dt.Rows[i]["result"].ToString();
    //                            table.Cell(val, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                            table.Cell(val, 4).SetContent(result);
    //                        }
    //                        int xcout = (val * 20) + 250;
    //                        PdfTextArea pt123dr = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                       new PdfArea(mydoc, 390, xcout + 20, 500, 30), System.Drawing.ContentAlignment.MiddleLeft, "Rank:" + " " + grank);
    //                        PdfTextArea ptc7 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 35, xcout + 40, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "His/Her Perfomance is GOOD/SATISFACTORY/UNSATISFACTORY");
    //                        PdfTextArea ptc8 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                  new PdfArea(mydoc, 35, xcout + 60, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance particulars");
    //                        PdfTextArea ptc9 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                  new PdfArea(mydoc, 35, xcout + 80, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance as on  : " + " " + DateTime.Now.ToString("dd-MM-yyyy"));
    //                        if (Session["Hourwise"] == "1")
    //                        {
    //                            PdfTextArea ptc110 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                      new PdfArea(mydoc, 35, xcout + 100, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of Working Hours : " + " " + Convert.ToString(per_con_hrs + tot_conduct_hr_spl_fals));
    //                            PdfTextArea ptc111 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                      new PdfArea(mydoc, 35, xcout + 140, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of Hours Attend : " + " " + Convert.ToString(per_per_hrs + tot_per_hrs_spl_fals));
    //                            PdfTextArea ptc112 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                      new PdfArea(mydoc, 35, xcout + 180, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance Percentage in Hours: " + " " + gdum_tage_date.ToString());
    //                            mypdfpage.Add(ptc110);
    //                            mypdfpage.Add(ptc111);
    //                            mypdfpage.Add(ptc112);
    //                        }
    //                        if (Session["Daywise"] == "1")
    //                        {
    //                            string h = dum_tage_date.ToString();
    //                            PdfTextArea ptc10 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                      new PdfArea(mydoc, 35, xcout + 120, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of Working Days : " + " " + per_workingdays.ToString());
    //                            PdfTextArea ptc11 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                      new PdfArea(mydoc, 35, xcout + 160, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of Days attend : " + " " + pre_present_date.ToString());
    //                            PdfTextArea ptc12 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                      new PdfArea(mydoc, 35, xcout + 200, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance Percentage in Days: " + " " + gdum_tage_date.ToString());
    //                            mypdfpage.Add(ptc10);
    //                            mypdfpage.Add(ptc11);
    //                            mypdfpage.Add(ptc12);
    //                        }
    //                        PdfTextArea ptc13 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                 new PdfArea(mydoc, 35, xcout + 220, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "You are Requested to meet the HOD/TUTOR in this Regard on or before............");
    //                        PdfTextArea ptc14 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                 new PdfArea(mydoc, 35, xcout + 250, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "*** Please intimate your E-Mail ID to enable the college to send further communication");
    //                        PdfTextArea ptc15 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                new PdfArea(mydoc, 35, 700, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "TUTOR");
    //                        PdfTextArea ptc16 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                new PdfArea(mydoc, 25, 700, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, "ACADAMIC CO-ORDINATOR");
    //                        PdfTextArea ptc17 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                new PdfArea(mydoc, 235, 700, 200, 30), System.Drawing.ContentAlignment.MiddleRight, "PRINCIPAL");
    //                        PdfTextArea ptc18 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                new PdfArea(mydoc, 35, 740, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Parent/Guardian Signature------------------");
    //                        Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 35, 250, 400, 800));
    //                        mypdfpage.Add(newpdftabpage);
    //                        mypdfpage.Add(pt123dr);
    //                        mypdfpage.Add(ptc7);
    //                        mypdfpage.Add(ptc8);
    //                        mypdfpage.Add(ptc9);
    //                        mypdfpage.Add(ptc13);
    //                        mypdfpage.Add(ptc14);
    //                        mypdfpage.Add(ptc15);
    //                        mypdfpage.Add(ptc16);
    //                        mypdfpage.Add(ptc17);
    //                        mypdfpage.Add(ptc18);
    //                    }
    //                    else
    //                    {
    //                        for (int i = 0; i < cnt; i++)
    //                        {
    //                            val++;
    //                            int snor = Convert.ToInt16(dt.Rows[i]["sno"]);
    //                            table.Cell(val, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            table.Cell(val, 0).SetContent(snor);
    //                            string scode = dt.Rows[i]["subjectcode"].ToString();
    //                            table.Cell(val, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                            table.Cell(val, 1).SetContent(scode);
    //                            string sname = dt.Rows[i]["subjectname"].ToString();
    //                            table.Cell(val, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                            table.Cell(val, 2).SetContent(sname);
    //                            string mark = dt.Rows[i]["mark"].ToString();
    //                            table.Cell(val, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            table.Cell(val, 3).SetContent(mark);
    //                            string result = dt.Rows[i]["result"].ToString();
    //                            table.Cell(val, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                            table.Cell(val, 4).SetContent(result);
    //                        }
    //                        int xcout = (val * 20) + 250;
    //                        Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 35, 250, 400, 800));
    //                        mypdfpage.Add(newpdftabpage);
    //                        PdfTextArea pt123dr = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                       new PdfArea(mydoc, 390, xcout + 20, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "Rank:" + " " + grank);
    //                        PdfTextArea ptc7 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                               new PdfArea(mydoc, 35, xcout + 40, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "His/Her Perfomance is GOOD / SATISFACTORY / UNSATISFACTORY");
    //                        mypdfpage.Add(ptc7);
    //                        mypdfpage.Add(pt123dr);
    //                    }
    //                }
    //                if (subno > 1)
    //                {
    //                    int xcout = (val * 20) + 250;
    //                    PdfTextArea ptc8 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                                 new PdfArea(mydoc, 35, xcout + 60, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance particulars");
    //                    PdfTextArea ptc9 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                              new PdfArea(mydoc, 35, xcout + 80, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance as on : " + " " + DateTime.Now.ToString("dd-MM-yyyy"));
    //                    if (Session["Hourwise"] == "1")
    //                    {
    //                        PdfTextArea ptc1101 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                  new PdfArea(mydoc, 35, xcout + 100, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of working Period : " + " " + Convert.ToString(per_con_hrs + tot_conduct_hr_spl_fals));
    //                        PdfTextArea ptc1111 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                  new PdfArea(mydoc, 35, xcout + 140, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of Period attend : " + " " + Convert.ToString(per_per_hrs + tot_per_hrs_spl_fals));
    //                        PdfTextArea ptc1121 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                  new PdfArea(mydoc, 35, xcout + 180, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance Percentage in Period: " + " " + gdum_tage_date.ToString());
    //                        mypdfpage.Add(ptc1101);
    //                        mypdfpage.Add(ptc1111);
    //                        mypdfpage.Add(ptc1121);
    //                    }
    //                    if (Session["Daywise"] == "1")
    //                    {
    //                        PdfTextArea ptc101 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                  new PdfArea(mydoc, 35, xcout + 120, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of working days : " + " " + per_workingdays.ToString());
    //                        PdfTextArea ptc111 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                  new PdfArea(mydoc, 35, xcout + 160, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of days attend : " + " " + pre_present_date.ToString());
    //                        PdfTextArea ptc121 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                  new PdfArea(mydoc, 35, xcout + 200, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance Percentage in Days: " + " " + gdum_tage_date.ToString());
    //                        mypdfpage.Add(ptc101);
    //                        mypdfpage.Add(ptc111);
    //                        mypdfpage.Add(ptc121);
    //                    }
    //                    PdfTextArea ptc13 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                             new PdfArea(mydoc, 35, xcout + 220, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "You are Requested to meet the HOD/TUTOR in this Recard on or before............");
    //                    PdfTextArea ptc14 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                             new PdfArea(mydoc, 35, xcout + 250, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "*** Please intimate your E-Mail ID to enable the college to send further communication");
    //                    PdfTextArea ptc15 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                            new PdfArea(mydoc, 35, 700, 200, 30), System.Drawing.ContentAlignment.TopLeft, "TUTOR");
    //                    PdfTextArea ptc16 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                            new PdfArea(mydoc, 25, 700, 400, 30), System.Drawing.ContentAlignment.TopLeft, "ACADAMIC CO-ORDINATOR");
    //                    PdfTextArea ptc17 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                            new PdfArea(mydoc, 235, 700, 200, 30), System.Drawing.ContentAlignment.TopLeft, "PRINCIPAL");
    //                    PdfTextArea ptc18 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                            new PdfArea(mydoc, 35, 740, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Parent/Guardian Signature------------------");
    //                    mypdfpage.Add(ptc8);
    //                    mypdfpage.Add(ptc9);
    //                    mypdfpage.Add(ptc13);
    //                    mypdfpage.Add(ptc14);
    //                    mypdfpage.Add(ptc15);
    //                    mypdfpage.Add(ptc16);
    //                    mypdfpage.Add(ptc17);
    //                    mypdfpage.Add(ptc18);
    //                }
    //                //------------------------End-----------------------------// By M.SakthiPriya 08-12-2014
    //                if (txtnotes.Text != "")
    //                {
    //                    PdfTextArea ptc145 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                         new PdfArea(mydoc, 25, 590, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Notes:" + txtnotes.Text);
    //                    mypdfpage.Add(ptc145);
    //                }
    //                string appPath = HttpContext.Current.Server.MapPath("~");
    //                if (appPath != "")
    //                {
    //                    string szPath = appPath + "/Report/";
    //                    //string szFile = "Format1.pdf";
    //                    //Modified By Srinath 24/9/2014
    //                    string szFile = "Format1" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";
    //                    mypdfpage.SaveToDocument();
    //                    mydoc.SaveToFile(szPath + szFile);
    //                    Response.ClearHeaders();
    //                    Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
    //                    Response.ContentType = "application/pdf";
    //                    Response.WriteFile(szPath + szFile);
    //                    //=============================================
    //                }
    //            }
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        lblesr.Text = ex.ToString();
    //    }
    //}

    //public void bindpdfletter3()
    //{
    //    DataTable dtmark = new DataTable();
    //    dtmark.Columns.Clear();
    //    dtmark.Rows.Clear();
    //    DataColumn dc;
    //    dc = new DataColumn();
    //    dc.ColumnName = "Sno";
    //    dtmark.Columns.Add(dc);
    //    dc = new DataColumn();
    //    dc.ColumnName = "subjectname";
    //    dtmark.Columns.Add(dc);
    //    dc = new DataColumn();
    //    dc.ColumnName = "mark";
    //    dtmark.Columns.Add(dc);
    //    dc = new DataColumn();
    //    dc.ColumnName = "Result";
    //    dtmark.Columns.Add(dc);
    //    DataRow dr;
    //    string Registration_no = "";
    //    Font Fontbold = new Font("Book Antiqua", 15, FontStyle.Bold);
    //    Font Fontsmall = new Font("Book Antiqua", 12, FontStyle.Regular);
    //    Font Fontbold1 = new Font("Book Antiqua", 12, FontStyle.Bold);

    //    Font tamil = new Font("AMUDHAM.TTF", 16, FontStyle.Regular);

    //    Gios.Pdf.PdfDocument mydoc = new Gios.Pdf.PdfDocument(PdfDocumentFormat.A4);
    //    int xres = 0;
    //    int mm = 1;
    //    int fail_subj_count = 0;
    //    gfail_subj_count = 0;
    //    FpEntry.SaveChanges();
    //    FpSpread1.SaveChanges();
    //    string strsc = "";
    //    if (ddlBranch.Text != "")
    //    {
    //        branch = ddlBranch.SelectedItem.Text;
    //    }
    //    if (ddlDegree.Text != "")
    //    {
    //        degree = ddlDegree.SelectedItem.Text;
    //    }
    //    sem = ddlSemYr.SelectedValue;
    //    sec = ddlSec.SelectedValue;
    //    for (int i = 0; i < chklstest.Items.Count; i++)
    //    {
    //        if (chklstest.Items[i].Selected == true)
    //        {
    //            string criteria_no = chklstest.Items[i].Value.ToString();
    //            test = chklstest.Items[i].Text.ToString();
    //            //if (ddlTest.Text != "")
    //            //{
    //            //    test = chklstest.SelectedItem.Text;
    //            //}
    //            if (ddlSemYr.Text != "")
    //            {
    //                semester = Convert.ToInt32(ddlSemYr.SelectedValue);
    //            }
    //            colege_code = Session["collegecode"].ToString();
    //            degree1 = ddlBranch.SelectedValue;
    //            frdate = TextBox2.Text;
    //            todate = TextBox1.Text;
    //            //Modified By Srinath 20/2/2014 ========Start=======
    //            int rowcount = FpEntry.Sheets[0].RowCount;
    //            //if (rowcount > 4)
    //            //{
    //            //    rowcount = FpEntry.Sheets[0].RowCount - 3;
    //            //}
    //            for (res = 0; res < rowcount; res++)
    //            // for (res = 0; res < Convert.ToInt32(FpEntry.Sheets[0].RowCount) - 4; res++)
    //            //==========End
    //            {
    //                dtmark.Rows.Clear();
    //                isval = 0;
    //                s = FpEntry.Sheets[0].Cells[res, 0].Text;
    //                gsubjname = "";
    //                gfail_subj_count = 0;
    //                ggetmark = "";
    //                isval = Convert.ToInt32(FpEntry.Sheets[0].Cells[res, 1].Value);
    //                if (isval == 1)
    //                {
    //                    DataSet ds = new DataSet();
    //                    if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //                    {
    //                        string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo from collinfo where college_code=" + Session["collegecode"] + "";
    //                        SqlCommand collegecmd = new SqlCommand(college, con);
    //                        SqlDataReader collegename;
    //                        con.Close();
    //                        con.Open();
    //                        collegename = collegecmd.ExecuteReader();
    //                        if (collegename.HasRows)
    //                        {
    //                            while (collegename.Read())
    //                            {
    //                                collnamenew1 = collegename["collname"].ToString();
    //                                address1 = collegename["address1"].ToString();
    //                                address2 = collegename["address2"].ToString();
    //                                address3 = collegename["address3"].ToString();
    //                                pincode = collegename["pincode"].ToString();
    //                                address = address1 + ", " + " " + address3 + "-" + " " + pincode + ".";
    //                            }
    //                        }
    //                        con.Close();
    //                    }
    //                    rol_no = FpEntry.Sheets[0].Cells[res, 2].Text;
    //                    name = FpEntry.Sheets[0].Cells[res, 4].Text;
    //                    DataSet ds_date = new DataSet();
    //                    string dat = "select convert(varchar(15),min(exam_date),103) as mindate ,convert(varchar(15),max(exam_date),103)  as maxdate from exam_type inner join criteriaforinternal on criteriaforinternal.criteria_no=exam_type.criteria_no where criteriaforinternal.criteria_no= " + criteria_no + "";
    //                    ds_date = dacces.select_method(dat, hat, "Text");
    //                    DateTime exam_month_year = Convert.ToDateTime(GetFunction("select distinct exam_date from exam_type inner join criteriaforinternal on criteriaforinternal.criteria_no=exam_type.criteria_no where criteriaforinternal.criteria_no= " + criteria_no + ""));
    //                    gmon_yr = exam_month_year.ToString("MMM") + " " + exam_month_year.ToString("yyyy");

    //                    string mon_yr_min = ds_date.Tables[0].Rows[0]["mindate"].ToString();
    //                    string mon_yr_max = ds_date.Tables[0].Rows[0]["maxdate"].ToString();
    //                    gmon_yr_min = ds_date.Tables[0].Rows[0]["mindate"].ToString();
    //                    gmon_yr_max = ds_date.Tables[0].Rows[0]["maxdate"].ToString();
    //                    sno = 0;
    //                    string subjname = "";
    //                    string result = "";
    //                    string getmark = "";
    //                    string checkmarks = "";
    //                    //// modify
    //                    string selectmark = "select distinct e.subject_no,sub.subject_name,max_mark,min_mark,marks_obtained from subjectchooser s,registration rg,exam_type e,result r, subject sub where sub.subject_no=s.subject_no and  s.subject_no=e.subject_no and s.roll_no=rg.roll_no  and e.exam_code=r.exam_code and rg.roll_no=r.roll_no and e.criteria_no='" + criteria_no + "' and r.roll_no='" + rol_no + "'";
    //                    hat.Clear();
    //                    hat.Add("rollnum", rol_no.ToString());
    //                    hat.Add("criteriano", criteria_no.ToString());
    //                    ds = dacces.select_method(selectmark, hat, "cmd");
    //                    if (ds.Tables[0].Rows.Count > 0)
    //                    {
    //                        for (int dscount = 0; dscount < ds.Tables[0].Rows.Count; dscount++)
    //                        {
    //                            sno++;
    //                            subjname = ds.Tables[0].Rows[dscount]["subject_name"].ToString();
    //                            minmark = ds.Tables[0].Rows[dscount]["min_mark"].ToString();
    //                            checkmarks = ds.Tables[0].Rows[dscount]["marks_obtained"].ToString();
    //                            string marks = findresult(checkmarks);
    //                            if (marks != "")
    //                            {
    //                                getmark = marks;
    //                            }
    //                            else
    //                            {
    //                                getmark = checkmarks;
    //                            }
    //                            if ((((Convert.ToDouble(checkmarks)) < (Convert.ToDouble(minmark)))) && Convert.ToString(checkmarks) != "-2" && Convert.ToString(checkmarks) != "-3")
    //                            {
    //                                result = "Fail";
    //                                gfail_subj_count++;
    //                            }
    //                            else
    //                            {
    //                                result = "Pass";
    //                            }
    //                            dr = dtmark.NewRow();
    //                            dr["Sno"] = sno.ToString();
    //                            dr["subjectname"] = subjname;
    //                            //dr["minmark"] = minmark;
    //                            dr["mark"] = getmark;
    //                            dr["result"] = result;
    //                            dtmark.Rows.Add(dr);
    //                        }
    //                    }
    //                    for (int colm = 0; colm <= FpEntry.Sheets[0].ColumnCount - 1; colm++)
    //                    {
    //                        if (FpEntry.Sheets[0].ColumnHeader.Cells[8, colm].Text == "Rank")
    //                        {
    //                            grank = FpEntry.Sheets[0].Cells[res, colm].Text;
    //                            if (grank == "")
    //                            {
    //                                grank = "--";
    //                            }
    //                        }
    //                    }
    //                    persentmonthcal();
    //                    double per_tage_day;
    //                    string dum_tage_date = "";
    //                    per_tage_day = ((pre_present_date / per_workingdays) * 100);
    //                    if (per_tage_day > 100)
    //                    {
    //                        per_tage_day = 100;
    //                    }
    //                    dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //                    if (dum_tage_date == "NaN")
    //                    {
    //                        gdum_tage_date = "0";
    //                    }
    //                    else if (dum_tage_date == "Infinity")
    //                    {
    //                        gdum_tage_date = "0";
    //                    }
    //                    else
    //                    {
    //                        gdum_tage_date = dum_tage_date;
    //                    }
    //                    Bindpdf4n(mydoc, Fontsmall, Fontbold, Fontbold1, dtmark, Response);
    //                }
    //            }
    //        }
    //    }
    //    if (sno == 0)
    //    {
    //        Label4.Text = "Kindly select Atleast one student";
    //        Label4.Visible = true;
    //    }
    //    else
    //    {
    //        Label4.Visible = false;
    //    }

    //}

    //public void bindpdfletter2()
    //{
    //    DataTable dtmark = new DataTable();
    //    dtmark.Columns.Clear();
    //    dtmark.Rows.Clear();
    //    DataColumn dc;
    //    dc = new DataColumn();
    //    dc.ColumnName = "Sno";
    //    dtmark.Columns.Add(dc);
    //    dc = new DataColumn();
    //    dc.ColumnName = "subjectname";
    //    dtmark.Columns.Add(dc);
    //    dc = new DataColumn();
    //    dc.ColumnName = "mark";
    //    dtmark.Columns.Add(dc);
    //    DataRow dr;
    //    string Registration_no = "";
    //    Font Fontbold = new Font("Book Antiqua", 15, FontStyle.Bold);
    //    Font Fontsmall = new Font("Book Antiqua", 12, FontStyle.Regular);
    //    Font Fontbold1 = new Font("Book Antiqua", 12, FontStyle.Bold);
    //    Font tamil = new Font("AMUDHAM.TTF", 16, FontStyle.Regular);
    //    Gios.Pdf.PdfDocument mydoc = new Gios.Pdf.PdfDocument(PdfDocumentFormat.A4);
    //    int xres = 0;
    //    int mm = 1;
    //    int fail_subj_count = 0;
    //    gfail_subj_count = 0;
    //    FpEntry.SaveChanges();
    //    FpSpread1.SaveChanges();
    //    string strsc = "";
    //    if (ddlBranch.Text != "")
    //    {
    //        branch = ddlBranch.SelectedItem.Text;
    //    }
    //    if (ddlDegree.Text != "")
    //    {
    //        degree = ddlDegree.SelectedItem.Text;
    //    }
    //    sem = ddlSemYr.SelectedValue;
    //    sec = ddlSec.SelectedValue;
    //    for (int i = 0; i < chklstest.Items.Count; i++)
    //    {
    //        if (chklstest.Items[i].Selected == true)
    //        {
    //            string criteria_no = chklstest.Items[i].Value.ToString();
    //            test = chklstest.Items[i].Text.ToString();
    //            if (ddlSemYr.Text != "")
    //            {
    //                semester = Convert.ToInt32(ddlSemYr.SelectedValue);
    //            }
    //            colege_code = Session["collegecode"].ToString();
    //            degree1 = ddlBranch.SelectedValue;
    //            frdate = TextBox2.Text;
    //            todate = TextBox1.Text;
    //            for (res = 0; res < Convert.ToInt32(FpEntry.Sheets[0].RowCount); res++)
    //            {
    //                dtmark.Rows.Clear();
    //                isval = 0;
    //                s = FpEntry.Sheets[0].Cells[res, 0].Text;
    //                gsubjname = "";
    //                gfail_subj_count = 0;
    //                ggetmark = "";
    //                isval = Convert.ToInt32(FpEntry.Sheets[0].Cells[res, 1].Value);
    //                if (isval == 1)
    //                {
    //                    DataSet ds = new DataSet();
    //                    if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //                    {
    //                        string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo from collinfo where college_code=" + Session["collegecode"] + "";
    //                        SqlCommand collegecmd = new SqlCommand(college, con);
    //                        SqlDataReader collegename;
    //                        con.Close();
    //                        con.Open();
    //                        collegename = collegecmd.ExecuteReader();
    //                        if (collegename.HasRows)
    //                        {
    //                            while (collegename.Read())
    //                            {
    //                                collnamenew1 = collegename["collname"].ToString();
    //                                address1 = collegename["address1"].ToString();
    //                                address2 = collegename["address2"].ToString();
    //                                address3 = collegename["address3"].ToString();
    //                                pincode = collegename["pincode"].ToString();
    //                                address = address1 + ", " + " " + address3 + "-" + " " + pincode + ".";
    //                            }
    //                        }
    //                        con.Close();
    //                    }
    //                    rol_no = FpEntry.Sheets[0].Cells[res, 2].Text;
    //                    name = FpEntry.Sheets[0].Cells[res, 4].Text;
    //                    DataSet ds_date = new DataSet();
    //                    string dat = "select convert(varchar(15),min(exam_date),103) as mindate ,convert(varchar(15),max(exam_date),103)  as maxdate from exam_type inner join criteriaforinternal on criteriaforinternal.criteria_no=exam_type.criteria_no where criteriaforinternal.criteria_no= " + chklstest.SelectedValue.ToString() + "";
    //                    ds_date = dacces.select_method(dat, hat, "Text");
    //                    DateTime exam_month_year = Convert.ToDateTime(GetFunction("select distinct exam_date from exam_type inner join criteriaforinternal on criteriaforinternal.criteria_no=exam_type.criteria_no where criteriaforinternal.criteria_no= " + chklstest.SelectedValue.ToString() + ""));
    //                    gmon_yr = exam_month_year.ToString("MMM") + " " + exam_month_year.ToString("yyyy");
    //                    string mon_yr_min = ds_date.Tables[0].Rows[0]["mindate"].ToString();
    //                    string mon_yr_max = ds_date.Tables[0].Rows[0]["maxdate"].ToString();
    //                    gmon_yr_min = ds_date.Tables[0].Rows[0]["mindate"].ToString();
    //                    gmon_yr_max = ds_date.Tables[0].Rows[0]["maxdate"].ToString();
    //                    sno = 0;
    //                    string subjname = "";
    //                    string result = "";
    //                    string getmark = "";
    //                    string checkmarks = "";
    //                    //string criteria_no = "";
    //                    //criteria_no = chklstest.SelectedValue.ToString();
    //                    //// modify
    //                    string selectmark = "select distinct e.subject_no,sub.subject_name,max_mark,min_mark,marks_obtained from subjectchooser s,registration rg,exam_type e,result r, subject sub where sub.subject_no=s.subject_no and  s.subject_no=e.subject_no and s.roll_no=rg.roll_no  and e.exam_code=r.exam_code and rg.roll_no=r.roll_no and e.criteria_no='" + criteria_no + "' and r.roll_no='" + rol_no + "'";
    //                    hat.Clear();
    //                    hat.Add("rollnum", rol_no.ToString());
    //                    hat.Add("criteriano", criteria_no.ToString());

    //                    ds = dacces.select_method(selectmark, hat, "cmd");
    //                    if (ds.Tables[0].Rows.Count > 0)
    //                    {
    //                        for (int dscount = 0; dscount < ds.Tables[0].Rows.Count; dscount++)
    //                        {
    //                            sno++;
    //                            subjname = ds.Tables[0].Rows[dscount]["subject_name"].ToString();
    //                            minmark = ds.Tables[0].Rows[dscount]["min_mark"].ToString();
    //                            checkmarks = ds.Tables[0].Rows[dscount]["marks_obtained"].ToString();
    //                            string marks = findresult(checkmarks);
    //                            if (marks != "")
    //                            {
    //                                getmark = marks;
    //                            }
    //                            else
    //                            {
    //                                getmark = checkmarks;
    //                            }
    //                            if ((((Convert.ToDouble(checkmarks)) < (Convert.ToDouble(minmark)))) && Convert.ToString(checkmarks) != "-2" && Convert.ToString(checkmarks) != "-3")
    //                            {
    //                                result = "Fail";
    //                                gfail_subj_count++;
    //                            }
    //                            else
    //                            {
    //                                result = "Pass";
    //                            }
    //                            dr = dtmark.NewRow();
    //                            dr["Sno"] = sno.ToString();
    //                            dr["subjectname"] = subjname;
    //                            //dr["minmark"] = minmark;
    //                            dr["mark"] = getmark;
    //                            //dr["result"] = result;
    //                            dtmark.Rows.Add(dr);
    //                        }
    //                    }
    //                    for (int colm = 0; colm <= FpEntry.Sheets[0].ColumnCount - 1; colm++)
    //                    {
    //                        if (FpEntry.Sheets[0].ColumnHeader.Cells[8, colm].Text == "Rank")
    //                        {
    //                            grank = FpEntry.Sheets[0].Cells[res, colm].Text;
    //                        }
    //                    }
    //                    persentmonthcal();
    //                    double per_tage_day;
    //                    string dum_tage_date = "";
    //                    per_tage_day = ((pre_present_date / per_workingdays) * 100);
    //                    if (per_tage_day > 100)
    //                    {
    //                        per_tage_day = 100;
    //                    }
    //                    dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //                    if (dum_tage_date == "NaN")
    //                    {
    //                        gdum_tage_date = "0";
    //                    }
    //                    else if (dum_tage_date == "Infinity")
    //                    {
    //                        gdum_tage_date = "0";
    //                    }
    //                    else
    //                    {
    //                        gdum_tage_date = dum_tage_date;
    //                    }
    //                    if (ddlletter.SelectedIndex == 2)
    //                    {
    //                        Bindpdf3n(mydoc, Fontsmall, Fontbold, Fontbold1, dtmark, Response);
    //                    }
    //                    else if (ddlletter.SelectedIndex == 4)
    //                    {
    //                        Bindpdf4n(mydoc, Fontsmall, Fontbold, Fontbold1, dtmark, Response);
    //                    }
    //                }
    //                Label4.Text = "";
    //                Label4.Visible = false;
    //            }
    //        }
    //    }
    //    if (sno == 0)
    //    {
    //        Label4.Text = "Kindly select Atleast one student";
    //        Label4.Visible = true;
    //    }
    //}

    //public void Bindpdf4n(Gios.Pdf.PdfDocument mydoc, Font Fontsmall, Font Fontbold, Font Fontbold1, DataTable dt, HttpResponse response)
    //{
    //    try
    //    {
    //        string datefad = "", dtfromad = "";
    //        string datefromad = "";
    //        string yr4 = "", m4 = "", d4 = "";
    //        string date2ad = "";
    //        DataSet ds = new DataSet();
    //        string regnumber = GetFunction("select reg_no from registration where roll_no='" + rol_no + "'");
    //        string batch_year_at = "";
    //        string sem = "";
    //        string degree_codeat = "";
    //        string adm_date_at = "";
    //        ds.Clear();
    //        string at_sql = "select r.App_No,Roll_No,Reg_No,roll_admit,CONVERT(VARCHAR(30),r.Adm_Date,103) AS adm_date,r.stud_name,r.Batch_Year,r.degree_code,d.Dept_Name,r.Sections ,r.Current_Semester,CONVERT(VARCHAR, dob, 103) as dob,parent_name,mother,parent_addressP,Streetp,Cityp,parent_pincodep,student_mobile from Registration r,applyn a,Degree g,Department d,course c where r.App_No = a.app_no and r.degree_code = g.Degree_Code and g.Dept_Code = d.Dept_Code and g.college_code = d.college_code and g.Course_Id = c.Course_Id  and g.college_code = c.college_code and r.roll_no='" + rol_no + "' ";
    //        ds.Clear();
    //        ds = dacces.select_method_wo_parameter(at_sql, "Text");
    //        if (ds.Tables[0].Rows.Count > 0)
    //        {
    //            adm_date_at = ds.Tables[0].Rows[0]["adm_date"].ToString();
    //            degree_codeat = ds.Tables[0].Rows[0]["degree_code"].ToString();
    //            batch_year_at = ds.Tables[0].Rows[0]["Batch_Year"].ToString();
    //            sem = ds.Tables[0].Rows[0]["Current_Semester"].ToString();
    //        }
    //        datefad = TextBox2.Text.ToString();
    //        string[] split4 = datefad.Split(new Char[] { '/' });
    //        if (split4.Length == 3)
    //        {
    //            datefromad = split4[0].ToString() + "/" + split4[1].ToString() + "/" + split4[2].ToString();
    //            yr4 = split4[2].ToString();
    //            m4 = split4[1].ToString();
    //            d4 = split4[0].ToString();
    //            //dtfromad = m4 + "/" + d4 + "/" + yr4;
    //            dtfromad = yr4 + "/" + m4 + "/" + d4;
    //        }
    //        string adatetoad = "";
    //        string ayr5, am5, ad5;
    //        date2ad = TextBox1.Text.ToString();
    //        string[] asplit5 = date2ad.Split(new Char[] { '/' });
    //        if (asplit5.Length == 3)
    //        {
    //            adatetoad = asplit5[0].ToString() + "/" + asplit5[1].ToString() + "/" + asplit5[2].ToString();
    //            ayr5 = asplit5[2].ToString();
    //            am5 = asplit5[1].ToString();
    //            ad5 = asplit5[0].ToString();
    //            // adatetoad = am5 + "/" + ad5 + "/" + ayr5;
    //            adatetoad = ayr5 + "/" + am5 + "/" + ad5;
    //        }
    //        persentmonthcal(rol_no, adm_date_at, dtfromad, adatetoad, degree_codeat, sem);
    //        //at_sql = "select CONVERT(VARCHAR(30),start_date,111) as start_date ,CONVERT(VARCHAR(30),end_date,111) as end_date from seminfo where semester='" + sem + "' and degree_code='" + degree_codeat + "' and batch_year='" + batch_year_at + "'";
    //        //ds.Clear();
    //        //ds = dacces.select_method_wo_parameter(at_sql, "Text");

    //        //if (ds.Tables[0].Rows.Count > 0)
    //        //{
    //        //    string startdate = ds.Tables[0].Rows[0]["start_date"].ToString();
    //        //    string enddate = ds.Tables[0].Rows[0]["end_date"].ToString();
    //        //    persentmonthcal(rol_no, adm_date_at, startdate, enddate, degree_codeat, sem);
    //        //    //lbltot_att1 = pre_present_date.ToString();
    //        //    //lbltot_work1 = per_workingdays.ToString();
    //        //}          
    //        int cnt;
    //        sno = dt.Rows.Count;
    //        int subno = 0;
    //        int pagecount = sno / 13;
    //        int repage = sno % 13;
    //        lblesr.Text = "";
    //        int nopages = pagecount;
    //        if (repage > 0)
    //        {
    //            nopages++;
    //        }
    //        if (nopages > 0)
    //        {
    //            for (int row = 0; row < nopages; row++)
    //            {
    //                subno++;
    //                Gios.Pdf.PdfPage mypdfpage = mydoc.NewPage();

    //                PdfArea tete = new PdfArea(mydoc, 10, 10, 570, 820);
    //                PdfRectangle pr1 = new PdfRectangle(mydoc, tete, Color.Black);
    //                mypdfpage.Add(pr1);
    //                PdfTextArea ptc = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 100, 40, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, collnamenew1);
    //                PdfTextArea pts = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 100, 70, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address1 + "  " + address2);
    //                PdfTextArea ptsp = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 100, 90, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address3 + "  " + pincode);
    //                if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))//Aruna
    //                {
    //                    PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
    //                    mypdfpage.Add(LogoImage, 25, 25, 300);
    //                }
    //                cnt = subno * sno;
    //                int cnt1 = subno * 5;
    //                mypdfpage.Add(ptc);
    //                mypdfpage.Add(pts);
    //                mypdfpage.Add(ptsp);
    //                Gios.Pdf.PdfTable table = mydoc.NewTable(Fontsmall, cnt + 1, 4, 1);
    //                mypdfpage.Add(ptc);
    //                mypdfpage.Add(pts);
    //                if (subno == 1)
    //                {
    //                    table.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //                    table.VisibleHeaders = false;
    //                    table.Columns[0].SetWidth(50);
    //                    table.Columns[1].SetWidth(250);
    //                    table.Columns[2].SetWidth(80);
    //                    table.Columns[3].SetWidth(50);
    //                    table.CellRange(0, 0, 0, 3).SetFont(Fontbold1);
    //                    table.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table.Cell(0, 0).SetContent("S.No");
    //                    table.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table.Cell(0, 1).SetContent("Subject");
    //                    table.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table.Cell(0, 2).SetContent("Marks");
    //                    table.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table.Cell(0, 3).SetContent("Result");
    //                    PdfTextArea pt123 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 20, 140, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Dear Parents,");
    //                    PdfTextArea ptc21 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                             new PdfArea(mydoc, 50, 160, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, "Sub :" + " " + "Continuous Assesment Test Progress Report" + "-Reg");
    //                    PdfTextArea ptc22 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                            new PdfArea(mydoc, 40, 180, 700, 50), System.Drawing.ContentAlignment.MiddleLeft, "This is to inform you that Your Son/Daughter/Ward/Selvan/Selvi" + "  " + name);
    //                    PdfTextArea ptc23 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                            new PdfArea(mydoc, 30, 200, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, "Studying in" + "  " + degree + " [" + branch + "]" + "  " + "has secured the following marks in");
    //                    PdfTextArea ptc213 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 30, 220, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, " the Continuous Assesment Test" + "  " + test + " " + "conducted during " + "  " + gmon_yr);
    //                    //PdfTextArea pt124 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                    //new PdfArea(mydoc, 30, 240, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, "...." + chklstest.SelectedItem.ToString() + "" + "....conducted during ...." + gmon_yr);
    //                    // PdfTextArea psam=new PdfTextArea(Fontsmall,System.Drawing.Color.Black, new PdfArea(mydoc,
    //                    mypdfpage.Add(pt123);
    //                    mypdfpage.Add(ptc21);
    //                    mypdfpage.Add(ptc22);
    //                    mypdfpage.Add(ptc23);
    //                    mypdfpage.Add(ptc213);
    //                    //mypdfpage.Add(pt124);
    //                    //mypdfpage.Add(pt123tot);
    //                }
    //                int val = 0;
    //                if (subno == 1)
    //                {
    //                    if (cnt < 13)
    //                    {
    //                        for (int i = 0; i < cnt; i++)
    //                        {
    //                            val++;
    //                            int snor = Convert.ToInt16(dt.Rows[i]["sno"]);
    //                            table.Cell(val, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            table.Cell(val, 0).SetContent(snor);
    //                            string scode = dt.Rows[i]["subjectname"].ToString();
    //                            table.Cell(val, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                            table.Cell(val, 1).SetContent(scode);
    //                            string sname = dt.Rows[i]["mark"].ToString();
    //                            table.Cell(val, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            table.Cell(val, 2).SetContent(sname);
    //                            string resul = dt.Rows[i]["result"].ToString();
    //                            table.Cell(val, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            table.Cell(val, 3).SetContent(resul);
    //                        }
    //                        //Modified By Srinath 20/2/2014
    //                        if (val < 2)
    //                        {
    //                            val = 2;
    //                        }
    //                        int xcout = (val * 20) + 270;
    //                        Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 270, 500, 1000));
    //                        mypdfpage.Add(newpdftabpage);
    //                        Gios.Pdf.PdfTable table1 = mydoc.NewTable(Fontsmall, 2, 4, 1);
    //                        table1.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //                        table1.VisibleHeaders = false;
    //                        table1.Columns[0].SetWidth(200);
    //                        table1.Columns[1].SetWidth(150);
    //                        table1.Columns[2].SetWidth(150);
    //                        table1.Columns[3].SetWidth(100);
    //                        table1.CellRange(0, 0, 0, 3).SetFont(Fontsmall);
    //                        table1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table1.Cell(0, 0).SetContent("Total No.of Working days ");
    //                        table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table1.Cell(0, 1).SetContent("No.of days Attended");
    //                        table1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table1.Cell(0, 2).SetContent("No of Days Absent");
    //                        table1.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table1.Cell(0, 3).SetContent("% of Attended");
    //                        //string[] splitexamdatenew = gsubjname.Split(new Char[] { '\n' });
    //                        // subname = splitexamdatenew[i];
    //                        if (letterfrm4data.Rows.Count > 0)
    //                        {
    //                            //string totworkdays = per_workingdays.ToString();
    //                            //table1.Cell(1, 0).SetContent(totworkdays);
    //                            //string numofdaysatten = pre_present_date.ToString();
    //                            //table1.Cell(1, 1).SetContent(numofdaysatten);
    //                            //double inttotalworking = Convert.ToDouble(totworkdays);
    //                            //double intnumberofdaysatten = Convert.ToDouble(numofdaysatten);
    //                            //double absentdays = inttotalworking - intnumberofdaysatten;
    //                            //table1.Cell(1, 2).SetContent(Convert.ToString(absentdays));
    //                            //string attenper = gdum_tage_date.ToString();
    //                            //table1.Cell(1, 3).SetContent(attenper);
    //                            string totworkdays = letterfrm4data.Rows[0][0].ToString();
    //                            table1.Cell(1, 0).SetContent(totworkdays);
    //                            string numofdaysatten = letterfrm4data.Rows[0][1].ToString();
    //                            table1.Cell(1, 1).SetContent(numofdaysatten);
    //                            //double inttotalworking = Convert.ToDouble(totworkdays);
    //                            //double intnumberofdaysatten = Convert.ToDouble(numofdaysatten);
    //                            // double absentdays = inttotalworking - intnumberofdaysatten;
    //                            table1.Cell(1, 2).SetContent(letterfrm4data.Rows[0][2].ToString());
    //                            string attenper = letterfrm4data.Rows[0][3].ToString();
    //                            table1.Cell(1, 3).SetContent(attenper);
    //                        }
    //                        PdfArea tetes = new PdfArea(mydoc, 450, xcout + 15, 40, 20);
    //                        PdfRectangle pr1m = new PdfRectangle(mydoc, tetes, Color.Black);
    //                        mypdfpage.Add(pr1m);
    //                        PdfTextArea pt123dr = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                       new PdfArea(mydoc, 20, xcout + 10, 450, 30), System.Drawing.ContentAlignment.MiddleRight, "Rank:" + "    " + grank);
    //                        Gios.Pdf.PdfTablePage newpdftabpage1 = table1.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, xcout + 40, 500, 1000));
    //                        mypdfpage.Add(newpdftabpage1);
    //                        mypdfpage.Add(pt123dr);
    //                        if (gfail_subj_count > 0)
    //                        {
    //                            PdfTextArea pt1234 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                      new PdfArea(mydoc, 30, xcout + 80, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Failed in " + gfail_subj_count + " " + "Subjects");
    //                            mypdfpage.Add(pt1234);
    //                        }
    //                        else
    //                        {
    //                            PdfTextArea pt1234 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                      new PdfArea(mydoc, 30, xcout + 80, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Failed in __________ Subjects");
    //                            mypdfpage.Add(pt1234);
    //                        }
    //                        PdfTextArea pt1pr = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                       new PdfArea(mydoc, 30, xcout + 100, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "In this regards you are requested to meet the HOD on ______________ ");
    //                        PdfTextArea pt1prrem = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                         new PdfArea(mydoc, 20, xcout + 120, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Remarks");
    //                        PdfTextArea pt1prremar = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                         new PdfArea(mydoc, 40, xcout + 140, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "As per Anna university regulations a student has to secure a minimum ");
    //                        PdfTextArea pt1prremar1 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                         new PdfArea(mydoc, 30, xcout + 160, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "of 75% attendance to appear for the examination");
    //                        if (txtnotes.Text != "")
    //                        {
    //                            PdfTextArea pt1prremar11 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                            new PdfArea(mydoc, 30, xcout + 180, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Notes:" + txtnotes.Text);
    //                            mypdfpage.Add(pt1prremar11);
    //                        }
    //                        PdfTextArea pt1prs = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                       new PdfArea(mydoc, 20, 680, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Tutor");
    //                        PdfTextArea pt1prh1 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                     new PdfArea(mydoc, 20, 680, 500, 30), System.Drawing.ContentAlignment.MiddleCenter, "HOD");
    //                        PdfTextArea pt1prh = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                       new PdfArea(mydoc, 20, 680, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "Principal");
    //                        PdfTextArea pt1prc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                       new PdfArea(mydoc, 10, 700, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "-----------------------------------------------------------------------cut here------------------------------------------------------");
    //                        PdfTextArea pt1prm = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                        new PdfArea(mydoc, 30, 720, 1000, 30), System.Drawing.ContentAlignment.MiddleLeft, "Kindly acknowledge the receipt of this communication with your signature and ");
    //                        PdfTextArea pt1prmn = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                         new PdfArea(mydoc, 20, 740, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "return the same to the college by return of post");
    //                        PdfTextArea pt1prna = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                          new PdfArea(mydoc, 20, 760, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Name :" + "   " + name);
    //                        PdfTextArea pt1prrol = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                          new PdfArea(mydoc, 20, 780, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Roll No :" + "  " + rol_no + "  Reg No : " + regnumber);
    //                        PdfTextArea pt1prrolg = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                           new PdfArea(mydoc, 20, 780, 550, 30), System.Drawing.ContentAlignment.MiddleRight, "Signature of Parent/Guardian");
    //                        PdfTextArea pt1prbat = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                          new PdfArea(mydoc, 20, 800, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Class :" + "   " + ddlBatch.SelectedItem.Text + " " + ddlDegree.SelectedItem.Text + "-" + ddlBranch.SelectedItem.Text + " Sem-" + ddlSemYr.SelectedItem.Text);
    //                        mypdfpage.Add(pt1pr);
    //                        mypdfpage.Add(pt1prremar);
    //                        mypdfpage.Add(pt1prremar1);
    //                        mypdfpage.Add(pt1prh1);
    //                        mypdfpage.Add(pt1prh);
    //                        mypdfpage.Add(pt1prc);
    //                        mypdfpage.Add(pt1prs);
    //                        mypdfpage.Add(pt1prm);
    //                        mypdfpage.Add(pt1prmn);
    //                        mypdfpage.Add(pt1prrem);
    //                        mypdfpage.Add(pt1prna);
    //                        mypdfpage.Add(pt1prrol);
    //                        mypdfpage.Add(pt1prrolg);
    //                        mypdfpage.Add(pt1prbat);
    //                    }
    //                    else
    //                    {
    //                        for (int i = 0; i < cnt; i++)
    //                        {
    //                            val++;
    //                            int snor = Convert.ToInt16(dt.Rows[i]["sno"]);
    //                            table.Cell(val, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            table.Cell(val, 0).SetContent(snor);
    //                            string scode = dt.Rows[i]["subjectname"].ToString();
    //                            table.Cell(val, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                            table.Cell(val, 1).SetContent(scode);
    //                            string sname = dt.Rows[i]["mark"].ToString();
    //                            table.Cell(val, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            table.Cell(val, 2).SetContent(sname);
    //                            string res = dt.Rows[i]["result"].ToString();
    //                            table.Cell(val, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            table.Cell(val, 3).SetContent(sname);
    //                        }
    //                        int xcout = (val * 20) + 290;
    //                        Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 290, 500, 1000));
    //                        mypdfpage.Add(newpdftabpage);
    //                        Gios.Pdf.PdfTable table1 = mydoc.NewTable(Fontsmall, 2, 4, 1);
    //                        table1.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //                        table1.Columns[0].SetWidth(200);
    //                        table1.Columns[1].SetWidth(150);
    //                        table1.Columns[2].SetWidth(150);
    //                        table1.Columns[2].SetWidth(100);
    //                        table1.CellRange(0, 0, 0, 2).SetFont(Fontsmall);
    //                        table1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table1.Cell(0, 0).SetContent("Total No.of Working days ");
    //                        table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table1.Cell(0, 1).SetContent("No.of days Attended");
    //                        table1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table1.Cell(0, 2).SetContent("No.of days Absent");
    //                        table1.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table1.Cell(0, 3).SetContent("% of Attended");
    //                        //string[] splitexamdatenew = gsubjname.Split(new Char[] { '\n' });
    //                        // subname = splitexamdatenew[i];
    //                        string totworkdays = per_workingdays.ToString();
    //                        table1.Cell(1, 0).SetContent(totworkdays);
    //                        string numofdaysatten = pre_present_date.ToString();
    //                        table1.Cell(1, 1).SetContent(numofdaysatten);
    //                        string attenper = gdum_tage_date.ToString();
    //                        table1.Cell(1, 3).SetContent(attenper);
    //                        double inttotalworking = Convert.ToDouble(totworkdays);
    //                        double intnumberofdaysatten = Convert.ToDouble(numofdaysatten);
    //                        double absentdays = inttotalworking - intnumberofdaysatten;
    //                        table1.Cell(1, 2).SetContent(Convert.ToString(absentdays));
    //                        PdfArea tetes = new PdfArea(mydoc, 450, xcout + 10, 80, 20);
    //                        PdfRectangle pr1m = new PdfRectangle(mydoc, tetes, Color.Black);
    //                        mypdfpage.Add(pr1m);
    //                        PdfTextArea pt123dr = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                       new PdfArea(mydoc, 20, xcout + 10, 450, 30), System.Drawing.ContentAlignment.MiddleRight, "Rank:" + " " + grank);
    //                        Gios.Pdf.PdfTablePage newpdftabpage1 = table1.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, xcout + 40, 500, 1000));
    //                        mypdfpage.Add(newpdftabpage1);
    //                        mypdfpage.Add(pt123dr);
    //                    }
    //                }
    //                if (subno > 1)
    //                {
    //                    if (gfail_subj_count > 0)
    //                    {
    //                        PdfTextArea pt1234 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                  new PdfArea(mydoc, 20, 220, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Failed in " + gfail_subj_count + " " + "Subjects");
    //                        mypdfpage.Add(pt1234);
    //                    }
    //                    else
    //                    {
    //                        PdfTextArea pt1234 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                  new PdfArea(mydoc, 20, 220, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Failed in __________ Subjects");
    //                        mypdfpage.Add(pt1234);
    //                    }
    //                    PdfTextArea pt1pr = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                   new PdfArea(mydoc, 20, 240, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "In this regards you are requested to meet the HOD on ______________ ");
    //                    PdfTextArea pt1prrem = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                     new PdfArea(mydoc, 20, 280, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Remarks ");
    //                    PdfTextArea pt1prremar = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                     new PdfArea(mydoc, 40, 300, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "As per Anna university regulations a student has to secure a minimum ");
    //                    PdfTextArea pt1prremar1 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                     new PdfArea(mydoc, 30, 320, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "of 75% attendance to appear for the examination");
    //                    PdfTextArea pt1prs = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                   new PdfArea(mydoc, 10, 450, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Tutor");
    //                    PdfTextArea pt1prh = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                   new PdfArea(mydoc, 10, 450, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "HOD");
    //                    PdfTextArea pt1prc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                   new PdfArea(mydoc, 10, 700, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "-----------------------------------------------------------------------cut here------------------------------------------------------");
    //                    PdfTextArea pt1prm = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                    new PdfArea(mydoc, 30, 620, 1000, 30), System.Drawing.ContentAlignment.MiddleLeft, "Kindly acknowledge the receipt of this communication with your signature and ");
    //                    PdfTextArea pt1prmn = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                     new PdfArea(mydoc, 20, 640, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "return the same to the college by return of post");
    //                    PdfTextArea pt1prna = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                      new PdfArea(mydoc, 20, 720, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Name :" + "   " + name);
    //                    PdfTextArea pt1prrol = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                      new PdfArea(mydoc, 20, 740, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Roll No :" + "  " + rol_no + "  Reg No : " + regnumber);
    //                    PdfTextArea pt1prrolg = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                       new PdfArea(mydoc, 10, 740, 550, 30), System.Drawing.ContentAlignment.MiddleRight, "Signature of Parent/Guardian");
    //                    PdfTextArea pt1prbat = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                      new PdfArea(mydoc, 20, 760, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Class :" + "   " + ddlBatch.SelectedItem.Text + " " + ddlDegree.SelectedItem.Text + "-" + ddlBranch.SelectedItem.Text + " Sem-" + ddlSemYr.SelectedItem.Text);
    //                    mypdfpage.Add(pt1pr);
    //                    mypdfpage.Add(pt1prremar);
    //                    mypdfpage.Add(pt1prremar1);
    //                    mypdfpage.Add(pt1prh);
    //                    mypdfpage.Add(pt1prc);
    //                    mypdfpage.Add(pt1prs);
    //                    mypdfpage.Add(pt1prm);
    //                    mypdfpage.Add(pt1prmn);
    //                    mypdfpage.Add(pt1prrem);
    //                    mypdfpage.Add(pt1prna);
    //                    mypdfpage.Add(pt1prrol);
    //                    mypdfpage.Add(pt1prrolg);
    //                    mypdfpage.Add(pt1prbat);
    //                }
    //                string appPath = HttpContext.Current.Server.MapPath("~");
    //                if (appPath != "")
    //                {
    //                    Label4.Visible = false;
    //                    string szPath = appPath + "/Report/";
    //                    //string szFile = "Format1.pdf";
    //                    //Modified By Srinath 24/9/2014
    //                    string szFile = "Format1" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";
    //                    mypdfpage.SaveToDocument();
    //                    mydoc.SaveToFile(szPath + szFile);
    //                    Response.ClearHeaders();
    //                    Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
    //                    Response.ContentType = "application/pdf";
    //                    Response.WriteFile(szPath + szFile);
    //                }
    //            }
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        lblesr.Text = ex.ToString();
    //    }
    //}

    //public void Bindpdf4(Gios.Pdf.PdfDocument mydoc, Font Fontsmall, Font Fontbold, Font Fontbold1, DataTable dt, HttpResponse response)
    //{
    //    int subno = 0;
    //    int pagecount = sno / 5;
    //    int repage = sno % 5;
    //    int nopages = pagecount;
    //    if (repage > 0)
    //    {
    //        nopages++;
    //    }
    //    if (nopages > 0)
    //    {
    //        if (pagecount == 0)
    //        {
    //            subno++;
    //            Gios.Pdf.PdfPage mypdfpage = mydoc.NewPage();
    //            PdfTextArea ptc = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                                new PdfArea(mydoc, 100, 40, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, collnamenew1);
    //            PdfTextArea pts = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                               new PdfArea(mydoc, 100, 60, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address);
    //            if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))//Aruna
    //            {
    //                PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
    //                mypdfpage.Add(LogoImage, 25, 25, 300);
    //            }
    //            mypdfpage.Add(ptc);
    //            mypdfpage.Add(pts);
    //            int cnt = subno * sno;
    //            int cnt1 = subno * 5;
    //            Gios.Pdf.PdfTable table = mydoc.NewTable(Fontsmall, cnt + 1, 3, 1);
    //            table.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //            table.Columns[0].SetWidth(50);
    //            table.Columns[1].SetWidth(250);
    //            table.Columns[2].SetWidth(80);
    //            PdfTextArea pt123tot = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 10, 290, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Total Marks:");
    //            table.CellRange(0, 0, 0, 2).SetFont(Fontbold);
    //            table.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            table.Cell(0, 0).SetContent("S.No");
    //            table.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            table.Cell(0, 1).SetContent("Subject");
    //            table.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            table.Cell(0, 2).SetContent("Marks");
    //            int val = 0;
    //            PdfTextArea pt123 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 10, 140, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Dear Parents");
    //            PdfTextArea ptc21 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                     new PdfArea(mydoc, 30, 160, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, "Sub :" + " " + "Continuous Assesment Test Progress Report" + "-Reg");
    //            PdfTextArea ptc22 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 80, 200, 700, 50), System.Drawing.ContentAlignment.MiddleLeft, "This is to inform you that Your Son/Daughter/Ward/Selvan/Selvi");
    //            PdfTextArea ptc23 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 30, 220, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, name + ".." + "Studying in" + "  " + degree + " [" + branch + "]");
    //            PdfTextArea ptc213 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 30, 240, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, "has secured the following marks in the Continuous Assesment Test ");
    //            PdfTextArea pt124 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 30, 260, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, "...." + test + "" + "....conducted during ...." + gmon_yr);
    //            // PdfTextArea psam=new PdfTextArea(Fontsmall,System.Drawing.Color.Black, new PdfArea(mydoc,
    //            mypdfpage.Add(pt123);
    //            mypdfpage.Add(ptc21);
    //            mypdfpage.Add(ptc22);
    //            mypdfpage.Add(ptc23);
    //            mypdfpage.Add(ptc213);
    //            mypdfpage.Add(pt124);
    //            mypdfpage.Add(pt123tot);
    //            for (int i = 0; i < cnt; i++)
    //            {
    //                int jj = i + 1;
    //                val++;
    //                table.Cell(val, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                string[] splitsrno = srno.Split(new Char[] { '\n' });
    //                //srno1 = splitsrno[i];
    //                table.Cell(val, 0).SetContent(jj);
    //                table.Cell(val, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                string[] splitexamdatenew = gsubjname.Split(new Char[] { '\n' });
    //                subname = splitexamdatenew[i];
    //                table.Cell(val, 1).SetContent(subname);
    //                table.Cell(val, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                string[] splitexamsession = ggetmark.Split(new Char[] { '\n' });
    //                resu = splitexamsession[i];
    //                table.Cell(val, 2).SetContent(resu);
    //            }
    //            Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 310, 500, 1000));
    //            mypdfpage.Add(newpdftabpage);
    //            Gios.Pdf.PdfTable table1 = mydoc.NewTable(Fontsmall, 2, 3, 1);
    //            table1.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //            table1.Columns[0].SetWidth(150);
    //            table1.Columns[1].SetWidth(150);
    //            table1.Columns[2].SetWidth(150);
    //            table1.CellRange(0, 0, 0, 2).SetFont(Fontsmall);
    //            table1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            table1.Cell(0, 0).SetContent("Total No.of Working days ");
    //            table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            table1.Cell(0, 1).SetContent("No.of days Attended");
    //            table1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            table1.Cell(0, 2).SetContent("% of Attended");
    //            table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            //string[] splitexamdatenew = gsubjname.Split(new Char[] { '\n' });
    //            // subname = splitexamdatenew[i];
    //            string totworkdays = per_workingdays.ToString();
    //            table1.Cell(1, 0).SetContent(totworkdays);
    //            string numofdaysatten = pre_present_date.ToString();
    //            table1.Cell(1, 1).SetContent(numofdaysatten);
    //            string attenper = gdum_tage_date.ToString();
    //            table1.Cell(1, 2).SetContent(attenper);
    //            Gios.Pdf.PdfTablePage newpdftabpage1 = table1.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 460, 500, 1000));
    //            mypdfpage.Add(newpdftabpage1);
    //            if (gfail_subj_count > 0)
    //            {
    //                PdfTextArea pt1234 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                          new PdfArea(mydoc, 30, 540, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Failed in " + gfail_subj_count + " " + "Subjects");
    //                mypdfpage.Add(pt1234);
    //            }
    //            else
    //            {
    //                PdfTextArea pt1234 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                          new PdfArea(mydoc, 30, 540, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Failed in __________ Subjects");
    //                mypdfpage.Add(pt1234);
    //            }

    //            PdfTextArea pt1pr = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 30, 560, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "In this regards you are requested to meet the HOD on ______________ ");
    //            PdfTextArea pt1prrem = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                             new PdfArea(mydoc, 10, 600, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Remarks");
    //            PdfTextArea pt1prremar = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                             new PdfArea(mydoc, 40, 620, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "As per Anna university regulations a student has to secure a minimum ");
    //            PdfTextArea pt1prremar1 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                             new PdfArea(mydoc, 30, 640, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "of 75% attendance to appear for the examination");


    //            PdfTextArea pt1prs = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, 680, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Student's Counseller");
    //            PdfTextArea pt1prh = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, 680, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "HOD");
    //            PdfTextArea pt1prc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, 700, 800, 30), System.Drawing.ContentAlignment.MiddleLeft, "-------------------------------------------------cut here----------------------------------------------");
    //            PdfTextArea pt1prm = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                            new PdfArea(mydoc, 10, 720, 1000, 30), System.Drawing.ContentAlignment.MiddleLeft, "Kindly acknowledge the receipt of this communication with your signature and ");
    //            PdfTextArea pt1prmn = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                             new PdfArea(mydoc, 10, 740, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "return the same to the college by return of post");

    //            PdfTextArea pt1prna = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                              new PdfArea(mydoc, 10, 770, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Name :" + "   " + name);
    //            PdfTextArea pt1prrol = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                              new PdfArea(mydoc, 10, 790, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Roll No :" + "  " + rol_no);
    //            PdfTextArea pt1prrolg = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                               new PdfArea(mydoc, 10, 790, 550, 30), System.Drawing.ContentAlignment.MiddleRight, "Signature of Parent/Guardian");
    //            PdfTextArea pt1prbat = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                              new PdfArea(mydoc, 10, 810, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Batch :" + "   " + ddlBatch.SelectedValue.ToString());
    //            mypdfpage.Add(pt1pr);
    //            mypdfpage.Add(pt1prremar);
    //            mypdfpage.Add(pt1prremar1);
    //            mypdfpage.Add(pt1prh);
    //            mypdfpage.Add(pt1prc);
    //            mypdfpage.Add(pt1prs);
    //            mypdfpage.Add(pt1prm);
    //            mypdfpage.Add(pt1prmn);
    //            mypdfpage.Add(pt1prrem);
    //            mypdfpage.Add(pt1prna);
    //            mypdfpage.Add(pt1prrol);
    //            mypdfpage.Add(pt1prrolg);
    //            mypdfpage.Add(pt1prbat);
    //            string appPath = HttpContext.Current.Server.MapPath("~");
    //            if (appPath != "")
    //            {
    //                //Aruna on 26feb2013============================
    //                string szPath = appPath + "/Report/";
    //                //string szFile = "Format1.pdf";
    //                //Modified By Srinath 24/9/2014
    //                string szFile = "Format1" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";
    //                mypdfpage.SaveToDocument();
    //                mydoc.SaveToFile(szPath + szFile);
    //                Response.ClearHeaders();
    //                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
    //                Response.ContentType = "application/pdf";
    //                Response.WriteFile(szPath + szFile);
    //                //=============================================
    //            }
    //        }
    //        else
    //        {
    //            subno++;
    //            Gios.Pdf.PdfPage mypdfpage = mydoc.NewPage();
    //            PdfTextArea ptc = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                                new PdfArea(mydoc, 100, 40, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, collnamenew1);
    //            PdfTextArea pts = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                               new PdfArea(mydoc, 100, 60, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address);
    //            if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))
    //            {
    //                PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
    //                mypdfpage.Add(LogoImage, 25, 25, 300);
    //            }
    //            mypdfpage.Add(ptc);
    //            mypdfpage.Add(pts);
    //            int cnt = subno * sno;
    //            int cnt1 = subno * 5;
    //            Gios.Pdf.PdfTable table = mydoc.NewTable(Fontsmall, cnt + 1, 3, 1);
    //            table.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //            table.Columns[0].SetWidth(50);
    //            table.Columns[1].SetWidth(250);
    //            table.Columns[2].SetWidth(80);
    //            PdfTextArea pt123tot = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 10, 290, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Total Marks:");
    //            table.CellRange(0, 0, 0, 2).SetFont(Fontbold);
    //            table.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            table.Cell(0, 0).SetContent("S.No");
    //            table.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            table.Cell(0, 1).SetContent("Subject");
    //            table.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            table.Cell(0, 2).SetContent("Marks");
    //            int val = 0;
    //            PdfTextArea pt123 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 10, 140, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Dear Parents");
    //            PdfTextArea ptc21 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                     new PdfArea(mydoc, 30, 160, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, "Sub :" + " " + "Continuous Assesment Test Progress Report" + "-Reg");
    //            PdfTextArea ptc22 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 80, 200, 700, 50), System.Drawing.ContentAlignment.MiddleLeft, "This is to inform you that Your Son/Daughter/Ward/Selvan/Selvi");
    //            PdfTextArea ptc23 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 30, 220, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, name + ".." + "Studying in" + "  " + degree + " [" + branch + "]");
    //            PdfTextArea ptc213 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 30, 240, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, "has secured the following marks in the Continuous Assesment Test ");
    //            PdfTextArea pt124 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 30, 260, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, "...." + test + "" + "....conducted during ...." + gmon_yr);
    //            mypdfpage.Add(pt123);
    //            mypdfpage.Add(pt123tot);
    //            mypdfpage.Add(ptc21);
    //            mypdfpage.Add(ptc22);
    //            mypdfpage.Add(ptc23);
    //            mypdfpage.Add(ptc213);
    //            mypdfpage.Add(pt124);
    //            for (int i = 0; i < cnt; i++)
    //            {
    //                int jj = i + 1;
    //                val++;
    //                table.Cell(val, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                string[] splitsrno = srno.Split(new Char[] { '\n' });
    //                //srno1 = splitsrno[i];
    //                table.Cell(val, 0).SetContent(jj);
    //                table.Cell(val, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                string[] splitexamdatenew = gsubjname.Split(new Char[] { '\n' });
    //                subname = splitexamdatenew[i];
    //                table.Cell(val, 1).SetContent(subname);
    //                table.Cell(val, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                string[] splitexamsession = ggetmark.Split(new Char[] { '\n' });
    //                resu = splitexamsession[i];
    //                table.Cell(val, 2).SetContent(resu);
    //            }
    //            Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 310, 500, 1000));
    //            mypdfpage.Add(newpdftabpage);
    //            Gios.Pdf.PdfPage mypdfpage2 = mydoc.NewPage();
    //            PdfTextArea ptcs = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                                new PdfArea(mydoc, 100, 40, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, collnamenew1);
    //            PdfTextArea ptss = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                               new PdfArea(mydoc, 100, 60, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address);
    //            if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))//Aruna
    //            {
    //                PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
    //                mypdfpage2.Add(LogoImage, 25, 25, 300);
    //            }
    //            mypdfpage2.Add(ptcs);
    //            mypdfpage2.Add(ptss);
    //            if (sno < 8)
    //            {
    //                Gios.Pdf.PdfTable table1 = mydoc.NewTable(Fontsmall, 2, 3, 1);
    //                table1.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //                table1.Columns[0].SetWidth(150);
    //                table1.Columns[1].SetWidth(150);
    //                table1.Columns[2].SetWidth(150);
    //                table1.CellRange(0, 0, 0, 2).SetFont(Fontsmall);
    //                table1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                table1.Cell(0, 0).SetContent("Total No.of Working days ");
    //                table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                table1.Cell(0, 1).SetContent("No.of days Attended");
    //                table1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                table1.Cell(0, 2).SetContent("% of Attended");
    //                table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                //string[] splitexamdatenew = gsubjname.Split(new Char[] { '\n' });
    //                // subname = splitexamdatenew[i];
    //                string totworkdays = per_workingdays.ToString();
    //                table1.Cell(1, 0).SetContent(totworkdays);
    //                string numofdaysatten = pre_present_date.ToString();
    //                table1.Cell(1, 1).SetContent(numofdaysatten);
    //                string attenper = gdum_tage_date.ToString();
    //                table1.Cell(1, 2).SetContent(attenper);
    //                Gios.Pdf.PdfTablePage newpdftabpage1 = table1.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 560, 500, 1000));
    //                mypdfpage.Add(newpdftabpage1);
    //                PdfTextArea pt12c = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                              new PdfArea(mydoc, 10, 750, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "Continued");
    //                mypdfpage.Add(pt12c);
    //            }
    //            else
    //            {
    //                PdfTextArea pt12c = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                             new PdfArea(mydoc, 10, 750, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "Continued");
    //                mypdfpage.Add(pt12c);
    //                Gios.Pdf.PdfTable table1 = mydoc.NewTable(Fontsmall, 2, 3, 1);
    //                table1.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //                table1.Columns[0].SetWidth(150);
    //                table1.Columns[1].SetWidth(150);
    //                table1.Columns[2].SetWidth(150);
    //                table1.CellRange(0, 0, 0, 2).SetFont(Fontsmall);
    //                table1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                table1.Cell(0, 0).SetContent("Total No.of Working days ");
    //                table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                table1.Cell(0, 1).SetContent("No.of days Attended");
    //                table1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                table1.Cell(0, 2).SetContent("% of Attended");
    //                table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                //string[] splitexamdatenew = gsubjname.Split(new Char[] { '\n' });
    //                // subname = splitexamdatenew[i];
    //                string totworkdays = per_workingdays.ToString();
    //                table1.Cell(1, 0).SetContent(totworkdays);
    //                string numofdaysatten = pre_present_date.ToString();
    //                table1.Cell(1, 1).SetContent(numofdaysatten);
    //                string attenper = gdum_tage_date.ToString();
    //                table1.Cell(1, 2).SetContent(attenper);
    //                Gios.Pdf.PdfTablePage newpdftabpage1 = table1.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 150, 500, 1000));
    //                mypdfpage2.Add(newpdftabpage1);
    //            }
    //            if (gfail_subj_count > 0)
    //            {
    //                PdfTextArea pt1234 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                          new PdfArea(mydoc, 10, 220, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Failed in " + gfail_subj_count + " " + "Subjects");
    //                mypdfpage2.Add(pt1234);
    //            }
    //            else
    //            {
    //                PdfTextArea pt1234 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                          new PdfArea(mydoc, 10, 220, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Failed in __________ Subjects");
    //                mypdfpage2.Add(pt1234);
    //            }

    //            PdfTextArea pt1pr = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, 240, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "In this regards you are requested to meet the HOD on ______________ ");
    //            PdfTextArea pt1prrem = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                             new PdfArea(mydoc, 10, 280, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Remarks ");
    //            PdfTextArea pt1prremar = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                             new PdfArea(mydoc, 40, 300, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "As per Anna university regulations a student has to secure a minimum ");
    //            PdfTextArea pt1prremar1 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                             new PdfArea(mydoc, 30, 320, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "of 75% attendance to appear for the examination");
    //            PdfTextArea pt1prs = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, 400, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Student's Counseller");
    //            PdfTextArea pt1prh = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, 400, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "HOD");
    //            PdfTextArea pt1prc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, 600, 800, 30), System.Drawing.ContentAlignment.MiddleLeft, "----------------------------------------cut here----------------------------------------------");
    //            PdfTextArea pt1prm = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                            new PdfArea(mydoc, 10, 620, 1000, 30), System.Drawing.ContentAlignment.MiddleLeft, "Kindly acknowledge the receipt of this communication with your signature and ");
    //            PdfTextArea pt1prmn = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                             new PdfArea(mydoc, 10, 640, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "return the same to the college by return of post");

    //            PdfTextArea pt1prna = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                              new PdfArea(mydoc, 10, 720, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Name :" + "   " + name);
    //            PdfTextArea pt1prrol = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                              new PdfArea(mydoc, 10, 740, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Roll No :" + "  " + rol_no);
    //            PdfTextArea pt1prrolg = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                               new PdfArea(mydoc, 10, 740, 550, 30), System.Drawing.ContentAlignment.MiddleRight, "Signature of Parent/Guardian");
    //            PdfTextArea pt1prbat = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                              new PdfArea(mydoc, 10, 760, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Batch :" + "   " + ddlBatch.SelectedValue.ToString());
    //            mypdfpage2.Add(pt1pr);
    //            mypdfpage2.Add(pt1prremar);
    //            mypdfpage2.Add(pt1prremar1);
    //            mypdfpage2.Add(pt1prh);
    //            mypdfpage2.Add(pt1prc);
    //            mypdfpage2.Add(pt1prs);
    //            mypdfpage2.Add(pt1prm);
    //            mypdfpage2.Add(pt1prmn);
    //            mypdfpage2.Add(pt1prrem);
    //            mypdfpage2.Add(pt1prna);
    //            mypdfpage2.Add(pt1prrol);
    //            mypdfpage2.Add(pt1prrolg);
    //            mypdfpage2.Add(pt1prbat);
    //            string appPath = HttpContext.Current.Server.MapPath("~");
    //            if (appPath != "")
    //            {
    //                //Aruna on 26feb2013============================
    //                string szPath = appPath + "/Report/";
    //                //string szFile = "Format1.pdf";
    //                //Modified By Srinath 24/9/2014
    //                string szFile = "Format1" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";
    //                mypdfpage.SaveToDocument();
    //                mypdfpage2.SaveToDocument();
    //                mydoc.SaveToFile(szPath + szFile);
    //                Response.ClearHeaders();
    //                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
    //                Response.ContentType = "application/pdf";
    //                Response.WriteFile(szPath + szFile);
    //                //=============================================
    //            }
    //        }
    //    }
    //}

    //public void Bindpdf3n(Gios.Pdf.PdfDocument mydoc, Font Fontsmall, Font Fontbold, Font Fontbold1, DataTable dt, HttpResponse response)
    //{
    //    try
    //    {
    //        int cnt;
    //        sno = dt.Rows.Count;
    //        int subno = 0;
    //        int pagecount = sno / 13;
    //        int repage = sno % 13;
    //        lblesr.Text = "";
    //        int nopages = pagecount;
    //        if (repage > 0)
    //        {
    //            nopages++;
    //        }
    //        if (nopages > 0)
    //        {
    //            for (int row = 0; row < nopages; row++)
    //            {
    //                subno++;
    //                Gios.Pdf.PdfPage mypdfpage = mydoc.NewPage();
    //                PdfArea tete = new PdfArea(mydoc, 10, 10, 570, 820);
    //                PdfRectangle pr1 = new PdfRectangle(mydoc, tete, Color.Black);
    //                mypdfpage.Add(pr1);
    //                PdfTextArea ptc = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 100, 40, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, collnamenew1);
    //                PdfTextArea pts = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 100, 60, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address1 + " " + address2);
    //                PdfTextArea ptsp = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 100, 80, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address3 + "-" + pincode);
    //                if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))
    //                {
    //                    PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
    //                    mypdfpage.Add(LogoImage, 25, 25, 300);
    //                }

    //                mypdfpage.Add(ptc);
    //                mypdfpage.Add(pts);
    //                mypdfpage.Add(ptsp);
    //                cnt = subno * sno;
    //                //Gios.Pdf.PdfTable table = mydoc.NewTable(Fontsmall, cnt + 1, 3, 1);
    //                Gios.Pdf.PdfTable table = mydoc.NewTable(Fontsmall, cnt + 1, 3, 1);
    //                mypdfpage.Add(ptc);
    //                mypdfpage.Add(pts);
    //                if (subno == 1)
    //                {

    //                    table.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //                    // table.SetBorders(Color.Black, 1, BorderType.Bounds);
    //                    table.Columns[0].SetWidth(50);
    //                    table.Columns[1].SetWidth(250);
    //                    table.Columns[2].SetWidth(80);

    //                    table.CellRange(0, 0, 0, 2).SetFont(Fontbold1);
    //                    table.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table.Cell(0, 0).SetContent("S.No");
    //                    table.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table.Cell(0, 1).SetContent("Subject");
    //                    table.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                    table.Cell(0, 2).SetContent("Marks");
    //                    string datetime = DateTime.Now.ToString("dd/MM/yyyy");
    //                    PdfTextArea pt123 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                                       new PdfArea(mydoc, 20, 120, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Dear Parents,");
    //                    PdfTextArea pt123d = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                       new PdfArea(mydoc, 20, 120, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "Date:" + " " + datetime);
    //                    PdfTextArea ptc21 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                             new PdfArea(mydoc, 50, 150, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, "Sub :" + " " + "Continuous Assesment Test Progress Report" + "-Reg");
    //                    PdfTextArea ptc22 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                            new PdfArea(mydoc, 40, 170, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, "Your Son/Daughter/Ward/Selvan/Selvi :" + "   " + name + "   " + "[" + rol_no + "]" + "  " + "Studying in");
    //                    PdfTextArea ptc23 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                            new PdfArea(mydoc, 30, 190, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, degree + " [" + branch + "]" + "  " + "Semester" + "  " + ddlSemYr.SelectedItem.ToString() + "  " + "has secured the following marks");
    //                    PdfTextArea ptc213 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 30, 210, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, "in the Continuous Assesment Test" + "   " + test + "  " + "conducted during" + gmon_yr_min + "-" + gmon_yr_max);
    //                    //PdfTextArea pt124 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                    // new PdfArea(mydoc, 30, 260, 600, 50), System.Drawing.ContentAlignment.MiddleLeft,gmon_yr_min + "-" + gmon_yr_max);
    //                    mypdfpage.Add(pt123);
    //                    mypdfpage.Add(ptc21);
    //                    mypdfpage.Add(ptc22);
    //                    mypdfpage.Add(ptc23);
    //                    mypdfpage.Add(ptc213);
    //                    mypdfpage.Add(pt123d);
    //                }
    //                int val = 0;
    //                if (subno == 1)
    //                {
    //                    if (cnt < 13)
    //                    {
    //                        for (int i = 0; i < cnt; i++)
    //                        {
    //                            val++;
    //                            int snor = Convert.ToInt16(dt.Rows[i]["sno"]);
    //                            table.Cell(val, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            table.Cell(val, 0).SetContent(snor);
    //                            string scode = dt.Rows[i]["subjectname"].ToString();
    //                            table.Cell(val, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                            table.Cell(val, 1).SetContent(scode);
    //                            string sname = dt.Rows[i]["mark"].ToString();
    //                            table.Cell(val, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            table.Cell(val, 2).SetContent(sname);
    //                        }
    //                        Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 250, 500, 1000));
    //                        mypdfpage.Add(newpdftabpage);
    //                        Gios.Pdf.PdfTable table1 = mydoc.NewTable(Fontsmall, 2, 3, 1);
    //                        table1.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //                        table1.Columns[0].SetWidth(150);
    //                        table1.Columns[1].SetWidth(150);
    //                        table1.Columns[2].SetWidth(150);
    //                        table1.CellRange(0, 0, 0, 2).SetFont(Fontsmall);
    //                        table1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table1.Cell(0, 0).SetContent("Total No.of Working days ");
    //                        table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table1.Cell(0, 1).SetContent("No.of days Attended");
    //                        table1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table1.Cell(0, 2).SetContent("% of Attended");
    //                        table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        //string[] splitexamdatenew = gsubjname.Split(new Char[] { '\n' });
    //                        // subname = splitexamdatenew[i];
    //                        string totworkdays = per_workingdays.ToString();
    //                        table1.Cell(1, 0).SetContent(totworkdays);
    //                        string numofdaysatten = pre_present_date.ToString();
    //                        table1.Cell(1, 1).SetContent(numofdaysatten);
    //                        string attenper = gdum_tage_date.ToString();
    //                        table1.Cell(1, 2).SetContent(attenper);
    //                        int xcout = (val * 20) + 250;
    //                        PdfTextArea pt123dr = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                       new PdfArea(mydoc, 20, xcout + 20, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "Rank:" + " " + grank);
    //                        Gios.Pdf.PdfTablePage newpdftabpage1 = table1.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 10, xcout + 40, 500, 1000));
    //                        mypdfpage.Add(newpdftabpage1);
    //                        mypdfpage.Add(pt123dr);
    //                        if (gfail_subj_count > 0)
    //                        {
    //                            PdfTextArea pt1234 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                      new PdfArea(mydoc, 30, xcout + 90, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Failed in " + gfail_subj_count + " " + "Subjects");
    //                            mypdfpage.Add(pt1234);
    //                        }
    //                        else
    //                        {
    //                            PdfTextArea pt1234 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                      new PdfArea(mydoc, 30, xcout + 90, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Failed in __________ Subjects");
    //                            mypdfpage.Add(pt1234);
    //                        }

    //                        PdfTextArea pt1pr = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                       new PdfArea(mydoc, 30, xcout + 110, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "In this regards you are requested to meet the principal on ______________ ");
    //                        PdfTextArea pt1prs = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                       new PdfArea(mydoc, 30, 580, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Student's Counseller");
    //                        PdfTextArea pt1prh = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                       new PdfArea(mydoc, 30, 580, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "HOD");
    //                        PdfTextArea pt1prc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                       new PdfArea(mydoc, 10, 600, 700, 30), System.Drawing.ContentAlignment.MiddleLeft, "---------------------------------------------------------------------cut here-----------------------------------------------------------------");
    //                        PdfTextArea pt1prm = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                        new PdfArea(mydoc, 30, 620, 1000, 30), System.Drawing.ContentAlignment.MiddleLeft, "Kindly acknowledge the receipt of this communication with your signature and ");
    //                        PdfTextArea pt1prmn = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                         new PdfArea(mydoc, 30, 640, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "return the same to the college by return of post");
    //                        PdfTextArea pt1prrem = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                         new PdfArea(mydoc, 15, 680, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Remarks if any:");
    //                        PdfTextArea pt1prna = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                          new PdfArea(mydoc, 30, 720, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Name :" + "   " + name);
    //                        PdfTextArea pt1prrol = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                          new PdfArea(mydoc, 30, 740, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Roll No :" + "  " + rol_no);
    //                        PdfTextArea pt1prrolg = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                           new PdfArea(mydoc, 30, 740, 550, 30), System.Drawing.ContentAlignment.MiddleRight, "Signature of Parent/Guardian");
    //                        PdfTextArea pt1prbat = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                          new PdfArea(mydoc, 30, 760, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Batch :" + "   " + ddlBatch.SelectedValue.ToString());
    //                        mypdfpage.Add(pt1pr);
    //                        mypdfpage.Add(pt1prh);
    //                        mypdfpage.Add(pt1prc);
    //                        mypdfpage.Add(pt1prs);
    //                        mypdfpage.Add(pt1prm);
    //                        mypdfpage.Add(pt1prmn);
    //                        mypdfpage.Add(pt1prrem);
    //                        mypdfpage.Add(pt1prna);
    //                        mypdfpage.Add(pt1prrol);
    //                        mypdfpage.Add(pt1prrolg);
    //                        mypdfpage.Add(pt1prbat);
    //                    }
    //                    else
    //                    {
    //                        for (int i = 0; i < cnt; i++)
    //                        {
    //                            val++;
    //                            int snor = Convert.ToInt16(dt.Rows[i]["sno"]);
    //                            table.Cell(val, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            table.Cell(val, 0).SetContent(snor);
    //                            string scode = dt.Rows[i]["subjectname"].ToString();
    //                            table.Cell(val, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                            table.Cell(val, 1).SetContent(scode);
    //                            string sname = dt.Rows[i]["mark"].ToString();
    //                            table.Cell(val, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                            table.Cell(val, 2).SetContent(sname);
    //                        }
    //                        int xcout = (val * 20) + 290;
    //                        Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 290, 500, 1000));
    //                        mypdfpage.Add(newpdftabpage);
    //                        Gios.Pdf.PdfTable table1 = mydoc.NewTable(Fontsmall, 2, 3, 1);
    //                        table1.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //                        table1.Columns[0].SetWidth(150);
    //                        table1.Columns[1].SetWidth(150);
    //                        table1.Columns[2].SetWidth(150);
    //                        table1.CellRange(0, 0, 0, 2).SetFont(Fontsmall);
    //                        table1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table1.Cell(0, 0).SetContent("Total No.of Working days ");
    //                        table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table1.Cell(0, 1).SetContent("No.of days Attended");
    //                        table1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table1.Cell(0, 2).SetContent("% of Attended");
    //                        table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        //string[] splitexamdatenew = gsubjname.Split(new Char[] { '\n' });
    //                        // subname = splitexamdatenew[i];
    //                        string totworkdays = per_workingdays.ToString();
    //                        table1.Cell(1, 0).SetContent(totworkdays);
    //                        string numofdaysatten = pre_present_date.ToString();
    //                        table1.Cell(1, 1).SetContent(numofdaysatten);
    //                        string attenper = gdum_tage_date.ToString();
    //                        table1.Cell(1, 2).SetContent(attenper);
    //                        PdfTextArea pt123dr = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                       new PdfArea(mydoc, 10, xcout + 20, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "Rank:" + " " + grank);
    //                        Gios.Pdf.PdfTablePage newpdftabpage1 = table1.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, xcout + 30, 500, 1000));
    //                        mypdfpage.Add(newpdftabpage1);
    //                        mypdfpage.Add(pt123dr);
    //                    }
    //                }
    //                if (subno > 1)
    //                {
    //                    if (gfail_subj_count > 0)
    //                    {
    //                        PdfTextArea pt1234 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                  new PdfArea(mydoc, 30, 220, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Failed in " + gfail_subj_count + " " + "Subjects");
    //                        mypdfpage.Add(pt1234);
    //                    }
    //                    else
    //                    {
    //                        PdfTextArea pt1234 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                  new PdfArea(mydoc, 30, 220, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Failed in __________ Subjects");
    //                        mypdfpage.Add(pt1234);
    //                    }
    //                    PdfTextArea pt1pr = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                   new PdfArea(mydoc, 30, 240, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "In this regards you are requested to meet the principal on ______________ ");
    //                    PdfTextArea pt1prs = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                   new PdfArea(mydoc, 30, 400, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Student's Counseller");
    //                    PdfTextArea pt1prh = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                   new PdfArea(mydoc, 10, 400, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "HOD");
    //                    PdfTextArea pt1prc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                   new PdfArea(mydoc, 10, 600, 700, 30), System.Drawing.ContentAlignment.MiddleLeft, "---------------------------------------------------------------------cut here-----------------------------------------------------------------");
    //                    PdfTextArea pt1prm = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                    new PdfArea(mydoc, 20, 620, 1000, 30), System.Drawing.ContentAlignment.MiddleLeft, "Kindly acknowledge the receipt of this communication with your signature and ");
    //                    PdfTextArea pt1prmn = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                     new PdfArea(mydoc, 30, 640, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "return the same to the college by return of post");
    //                    PdfTextArea pt1prrem = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                     new PdfArea(mydoc, 20, 680, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Remarks if any:");
    //                    PdfTextArea pt1prna = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                      new PdfArea(mydoc, 20, 720, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Name :" + "   " + name);
    //                    PdfTextArea pt1prrol = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                      new PdfArea(mydoc, 20, 740, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Roll No :" + "  " + rol_no);
    //                    PdfTextArea pt1prrolg = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                       new PdfArea(mydoc, 20, 740, 550, 30), System.Drawing.ContentAlignment.MiddleRight, "Signature of Parent/Guardian");
    //                    PdfTextArea pt1prbat = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                      new PdfArea(mydoc, 20, 760, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Batch :" + "   " + ddlBatch.SelectedValue.ToString());
    //                    mypdfpage.Add(pt1pr);
    //                    mypdfpage.Add(pt1prh);
    //                    mypdfpage.Add(pt1prc);
    //                    mypdfpage.Add(pt1prs);
    //                    mypdfpage.Add(pt1prm);
    //                    mypdfpage.Add(pt1prmn);
    //                    mypdfpage.Add(pt1prrem);
    //                    mypdfpage.Add(pt1prna);
    //                    mypdfpage.Add(pt1prrol);
    //                    mypdfpage.Add(pt1prrolg);
    //                    mypdfpage.Add(pt1prbat);
    //                }
    //                if (txtnotes.Text != "")
    //                {
    //                    PdfTextArea pt1prbat2 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                                      new PdfArea(mydoc, 20, 500, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Note:" + txtnotes.Text);
    //                    mypdfpage.Add(pt1prbat2);
    //                }
    //                string appPath = HttpContext.Current.Server.MapPath("~");
    //                if (appPath != "")
    //                {
    //                    string szPath = appPath + "/Report/";
    //                    //string szFile = "Format1.pdf";
    //                    //Modified By Srinath 24/9/2014
    //                    string szFile = "Format1" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";
    //                    mypdfpage.SaveToDocument();
    //                    mydoc.SaveToFile(szPath + szFile);
    //                    Response.ClearHeaders();
    //                    Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
    //                    Response.ContentType = "application/pdf";
    //                    Response.WriteFile(szPath + szFile);
    //                    //=============================================
    //                }
    //            }
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        lblesr.Text = ex.ToString();
    //    }
    //}

    //public void Bindpdf3(Gios.Pdf.PdfDocument mydoc, Font Fontsmall, Font Fontbold, Font Fontbold1, DataTable dt, HttpResponse response)
    //{
    //    int subno = 0;
    //    int pagecount = sno / 5;
    //    int repage = sno % 5;
    //    int nopages = pagecount;
    //    if (repage > 0)
    //    {
    //        nopages++;
    //    }
    //    if (nopages > 0)
    //    {
    //        if (pagecount == 0)
    //        {
    //            subno++;
    //            Gios.Pdf.PdfPage mypdfpage = mydoc.NewPage();


    //            PdfTextArea ptc = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                                new PdfArea(mydoc, 100, 40, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, collnamenew1);
    //            PdfTextArea pts = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                               new PdfArea(mydoc, 100, 60, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address);
    //            if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))//Aruna
    //            {
    //                PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
    //                mypdfpage.Add(LogoImage, 25, 25, 300);
    //            }
    //            mypdfpage.Add(ptc);
    //            mypdfpage.Add(pts);
    //            int cnt = subno * sno;
    //            int cnt1 = subno * 5;
    //            Gios.Pdf.PdfTable table = mydoc.NewTable(Fontsmall, cnt + 1, 3, 1);
    //            table.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //            table.Columns[0].SetWidth(50);
    //            table.Columns[1].SetWidth(250);
    //            table.Columns[2].SetWidth(80);
    //            table.CellRange(0, 0, 0, 2).SetFont(Fontbold);
    //            table.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            table.Cell(0, 0).SetContent("S.No");
    //            table.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            table.Cell(0, 1).SetContent("Subject");
    //            table.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            table.Cell(0, 2).SetContent("Marks");
    //            int val = 0;
    //            PdfTextArea pt123 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 10, 140, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Dear Parents");
    //            PdfTextArea ptc21 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                     new PdfArea(mydoc, 30, 160, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, "Sub :" + " " + "Continuous Assesment Test Progress Report" + "-Reg");
    //            PdfTextArea ptc22 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 30, 200, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, "Your Son/Daughter/Ward/Selvan/Selvi:" + ".... " + name + "...." + "Studying in");
    //            PdfTextArea ptc23 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 30, 220, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, degree + " [" + branch + "]" + "has secured the following marks");
    //            PdfTextArea ptc213 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 30, 240, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, "in the Continuous Assesment Test ");
    //            PdfTextArea pt124 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 30, 260, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, "....'" + test + "'" + "....conducted during ...." + gmon_yr_min + "-" + gmon_yr_max);
    //            // PdfTextArea psam=new PdfTextArea(Fontsmall,System.Drawing.Color.Black, new PdfArea(mydoc,
    //            mypdfpage.Add(pt123);
    //            mypdfpage.Add(ptc21);
    //            mypdfpage.Add(ptc22);
    //            mypdfpage.Add(ptc23);
    //            mypdfpage.Add(ptc213);
    //            mypdfpage.Add(pt124);
    //            for (int i = 0; i < cnt; i++)
    //            {
    //                int jj = i + 1;
    //                val++;
    //                table.Cell(val, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                string[] splitsrno = srno.Split(new Char[] { '\n' });
    //                //srno1 = splitsrno[i];
    //                table.Cell(val, 0).SetContent(jj);
    //                table.Cell(val, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                string[] splitexamdatenew = gsubjname.Split(new Char[] { '\n' });
    //                subname = splitexamdatenew[i];
    //                table.Cell(val, 1).SetContent(subname);
    //                table.Cell(val, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                string[] splitexamsession = ggetmark.Split(new Char[] { '\n' });
    //                resu = splitexamsession[i];
    //                table.Cell(val, 2).SetContent(resu);
    //            }
    //            Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 290, 500, 1000));
    //            mypdfpage.Add(newpdftabpage);
    //            Gios.Pdf.PdfTable table1 = mydoc.NewTable(Fontsmall, 2, 3, 1);
    //            table1.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //            table1.Columns[0].SetWidth(150);
    //            table1.Columns[1].SetWidth(150);
    //            table1.Columns[2].SetWidth(150);
    //            table1.CellRange(0, 0, 0, 2).SetFont(Fontsmall);
    //            table1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            table1.Cell(0, 0).SetContent("Total No.of Working days ");
    //            table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            table1.Cell(0, 1).SetContent("No.of days Attended");
    //            table1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            table1.Cell(0, 2).SetContent("% of Attended");
    //            table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            //string[] splitexamdatenew = gsubjname.Split(new Char[] { '\n' });
    //            // subname = splitexamdatenew[i];
    //            string totworkdays = per_workingdays.ToString();
    //            table1.Cell(1, 0).SetContent(totworkdays);
    //            string numofdaysatten = pre_present_date.ToString();
    //            table1.Cell(1, 1).SetContent(numofdaysatten);
    //            string attenper = gdum_tage_date.ToString();
    //            table1.Cell(1, 2).SetContent(attenper);
    //            Gios.Pdf.PdfTablePage newpdftabpage1 = table1.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 440, 500, 1000));
    //            mypdfpage.Add(newpdftabpage1);
    //            if (gfail_subj_count > 0)
    //            {
    //                PdfTextArea pt1234 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                          new PdfArea(mydoc, 10, 520, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Failed in " + gfail_subj_count + " " + "Subjects");
    //                mypdfpage.Add(pt1234);
    //            }
    //            else
    //            {
    //                PdfTextArea pt1234 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                          new PdfArea(mydoc, 10, 520, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Failed in __________ Subjects");
    //                mypdfpage.Add(pt1234);
    //            }
    //            PdfTextArea pt1pr = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, 540, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "In this regards you are requested to meet the principal on ______________ ");
    //            PdfTextArea pt1prs = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, 580, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Student's Counseller");
    //            PdfTextArea pt1prh = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, 580, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "HOD");
    //            PdfTextArea pt1prc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, 600, 800, 30), System.Drawing.ContentAlignment.MiddleLeft, "-------------------------------------------------cut here----------------------------------------------");
    //            PdfTextArea pt1prm = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                            new PdfArea(mydoc, 10, 620, 1000, 30), System.Drawing.ContentAlignment.MiddleLeft, "Kindly acknowledge the receipt of this communication with your signature and ");
    //            PdfTextArea pt1prmn = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                             new PdfArea(mydoc, 10, 640, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "return the same to the college by return of post");
    //            PdfTextArea pt1prrem = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                             new PdfArea(mydoc, 10, 680, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Remarks if any");
    //            PdfTextArea pt1prna = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                              new PdfArea(mydoc, 10, 720, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Name :" + "   " + name);
    //            PdfTextArea pt1prrol = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                              new PdfArea(mydoc, 10, 740, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Roll No :" + "  " + rol_no);
    //            PdfTextArea pt1prrolg = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                               new PdfArea(mydoc, 10, 740, 550, 30), System.Drawing.ContentAlignment.MiddleRight, "Signature of Parent/Guardian");
    //            PdfTextArea pt1prbat = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                              new PdfArea(mydoc, 10, 760, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Batch :" + "   " + ddlBatch.SelectedValue.ToString());
    //            mypdfpage.Add(pt1pr);
    //            mypdfpage.Add(pt1prh);
    //            mypdfpage.Add(pt1prc);
    //            mypdfpage.Add(pt1prs);
    //            mypdfpage.Add(pt1prm);
    //            mypdfpage.Add(pt1prmn);
    //            mypdfpage.Add(pt1prrem);
    //            mypdfpage.Add(pt1prna);
    //            mypdfpage.Add(pt1prrol);
    //            mypdfpage.Add(pt1prrolg);
    //            mypdfpage.Add(pt1prbat);
    //            string appPath = HttpContext.Current.Server.MapPath("~");
    //            if (appPath != "")
    //            {
    //                //Aruna on 26feb2013============================
    //                string szPath = appPath + "/Report/";
    //                //string szFile = "Format1.pdf";
    //                //Modified By Srinath 24/9/2014
    //                string szFile = "Format1" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";
    //                mypdfpage.SaveToDocument();
    //                mydoc.SaveToFile(szPath + szFile);
    //                Response.ClearHeaders();
    //                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
    //                Response.ContentType = "application/pdf";
    //                Response.WriteFile(szPath + szFile);
    //                //=============================================
    //            }
    //        }
    //        else
    //        {
    //            subno++;
    //            Gios.Pdf.PdfPage mypdfpage = mydoc.NewPage();
    //            PdfTextArea ptc = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                                new PdfArea(mydoc, 100, 40, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, collnamenew1);
    //            PdfTextArea pts = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                               new PdfArea(mydoc, 100, 60, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address);
    //            if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))//Aruna
    //            {
    //                PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
    //                mypdfpage.Add(LogoImage, 25, 25, 300);
    //            }
    //            mypdfpage.Add(ptc);
    //            mypdfpage.Add(pts);
    //            int cnt = subno * sno;
    //            int cnt1 = subno * 5;
    //            Gios.Pdf.PdfTable table = mydoc.NewTable(Fontsmall, cnt + 1, 3, 1);
    //            table.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //            table.Columns[0].SetWidth(50);
    //            table.Columns[1].SetWidth(250);
    //            table.Columns[2].SetWidth(80);
    //            table.CellRange(0, 0, 0, 2).SetFont(Fontbold);
    //            table.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            table.Cell(0, 0).SetContent("S.No");
    //            table.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            table.Cell(0, 1).SetContent("Subject");
    //            table.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //            table.Cell(0, 2).SetContent("Marks");
    //            int val = 0;
    //            PdfTextArea pt123 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 10, 140, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Dear Parents");
    //            PdfTextArea ptc21 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                     new PdfArea(mydoc, 30, 160, 600, 50), System.Drawing.ContentAlignment.MiddleCenter, "Sub :" + " " + "Continuous Assesment Test Progress Report" + "-Reg");
    //            PdfTextArea ptc22 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 30, 200, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, "Your Son/Daughter/Ward/Selvan/Selvi:" + ".... " + name + "...." + "Studying in");
    //            PdfTextArea ptc23 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 30, 220, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, degree + " [" + branch + "]" + "has secured the following marks");
    //            PdfTextArea ptc213 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                   new PdfArea(mydoc, 30, 240, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, "in the Continuous Assesment Test ");
    //            PdfTextArea pt124 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                    new PdfArea(mydoc, 30, 260, 600, 50), System.Drawing.ContentAlignment.MiddleLeft, "...." + test + " " + "....conducted during ...." + gmon_yr_min + "-" + gmon_yr_max);
    //            // PdfTextArea psam=new PdfTextArea(Fontsmall,System.Drawing.Color.Black, new PdfArea(mydoc,
    //            mypdfpage.Add(pt123);
    //            mypdfpage.Add(ptc21);
    //            mypdfpage.Add(ptc22);
    //            mypdfpage.Add(ptc23);
    //            mypdfpage.Add(ptc213);
    //            mypdfpage.Add(pt124);
    //            for (int i = 0; i < cnt; i++)
    //            {
    //                int jj = i + 1;
    //                val++;
    //                table.Cell(val, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                string[] splitsrno = srno.Split(new Char[] { '\n' });
    //                //srno1 = splitsrno[i];
    //                table.Cell(val, 0).SetContent(jj);
    //                table.Cell(val, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                string[] splitexamdatenew = gsubjname.Split(new Char[] { '\n' });
    //                subname = splitexamdatenew[i];
    //                table.Cell(val, 1).SetContent(subname);
    //                table.Cell(val, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                string[] splitexamsession = ggetmark.Split(new Char[] { '\n' });
    //                resu = splitexamsession[i];
    //                table.Cell(val, 2).SetContent(resu);
    //            }
    //            Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 290, 500, 1000));
    //            mypdfpage.Add(newpdftabpage);
    //            Gios.Pdf.PdfPage mypdfpage2 = mydoc.NewPage();
    //            PdfTextArea ptcs = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                                new PdfArea(mydoc, 100, 40, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, collnamenew1);
    //            PdfTextArea ptss = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                               new PdfArea(mydoc, 100, 60, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address);
    //            if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))//Aruna
    //            {
    //                PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
    //                mypdfpage2.Add(LogoImage, 25, 25, 300);
    //            }
    //            mypdfpage2.Add(ptcs);
    //            mypdfpage2.Add(ptss);
    //            if (sno < 8)
    //            {
    //                Gios.Pdf.PdfTable table1 = mydoc.NewTable(Fontsmall, 2, 3, 1);
    //                table1.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //                table1.Columns[0].SetWidth(150);
    //                table1.Columns[1].SetWidth(150);
    //                table1.Columns[2].SetWidth(150);
    //                table1.CellRange(0, 0, 0, 2).SetFont(Fontsmall);
    //                table1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                table1.Cell(0, 0).SetContent("Total No.of Working days ");
    //                table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                table1.Cell(0, 1).SetContent("No.of days Attended");
    //                table1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                table1.Cell(0, 2).SetContent("% of Attended");
    //                table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                //string[] splitexamdatenew = gsubjname.Split(new Char[] { '\n' });
    //                // subname = splitexamdatenew[i];
    //                string totworkdays = per_workingdays.ToString();
    //                table1.Cell(1, 0).SetContent(totworkdays);
    //                string numofdaysatten = pre_present_date.ToString();
    //                table1.Cell(1, 1).SetContent(numofdaysatten);
    //                string attenper = gdum_tage_date.ToString();
    //                table1.Cell(1, 2).SetContent(attenper);
    //                Gios.Pdf.PdfTablePage newpdftabpage1 = table1.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 560, 500, 1000));
    //                mypdfpage.Add(newpdftabpage1);
    //                PdfTextArea pt12c = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                              new PdfArea(mydoc, 10, 750, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "Continued");
    //                mypdfpage.Add(pt12c);
    //            }
    //            else
    //            {
    //                PdfTextArea pt12c = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                             new PdfArea(mydoc, 10, 750, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "Continued");
    //                mypdfpage.Add(pt12c);
    //                Gios.Pdf.PdfTable table1 = mydoc.NewTable(Fontsmall, 2, 3, 1);
    //                table1.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //                table1.Columns[0].SetWidth(150);
    //                table1.Columns[1].SetWidth(150);
    //                table1.Columns[2].SetWidth(150);
    //                table1.CellRange(0, 0, 0, 2).SetFont(Fontsmall);
    //                table1.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                table1.Cell(0, 0).SetContent("Total No.of Working days ");
    //                table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                table1.Cell(0, 1).SetContent("No.of days Attended");
    //                table1.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                table1.Cell(0, 2).SetContent("% of Attended");
    //                table1.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                //string[] splitexamdatenew = gsubjname.Split(new Char[] { '\n' });
    //                // subname = splitexamdatenew[i];
    //                string totworkdays = per_workingdays.ToString();
    //                table1.Cell(1, 0).SetContent(totworkdays);
    //                string numofdaysatten = pre_present_date.ToString();
    //                table1.Cell(1, 1).SetContent(numofdaysatten);
    //                string attenper = gdum_tage_date.ToString();
    //                table1.Cell(1, 2).SetContent(attenper);
    //                Gios.Pdf.PdfTablePage newpdftabpage1 = table1.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 20, 150, 500, 1000));
    //                mypdfpage2.Add(newpdftabpage1);
    //            }
    //            if (gfail_subj_count > 0)
    //            {
    //                PdfTextArea pt1234 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                          new PdfArea(mydoc, 10, 220, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Failed in " + gfail_subj_count + " " + "Subjects");
    //                mypdfpage2.Add(pt1234);
    //            }
    //            else
    //            {
    //                PdfTextArea pt1234 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                          new PdfArea(mydoc, 10, 220, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Failed in __________ Subjects");
    //                mypdfpage2.Add(pt1234);
    //            }
    //            PdfTextArea pt1pr = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, 240, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "In this regards you are requested to meet the principal on ______________ ");
    //            PdfTextArea pt1prs = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, 400, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Student's Counseller");
    //            PdfTextArea pt1prh = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, 400, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "HOD");
    //            PdfTextArea pt1prc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, 600, 800, 30), System.Drawing.ContentAlignment.MiddleLeft, "----------------------------------------cut here----------------------------------------------");
    //            PdfTextArea pt1prm = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                            new PdfArea(mydoc, 10, 620, 1000, 30), System.Drawing.ContentAlignment.MiddleLeft, "Kindly acknowledge the receipt of this communication with your signature and ");
    //            PdfTextArea pt1prmn = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                             new PdfArea(mydoc, 10, 640, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "return the same to the college by return of post");
    //            PdfTextArea pt1prrem = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                             new PdfArea(mydoc, 10, 680, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Remarks if any");
    //            PdfTextArea pt1prna = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                              new PdfArea(mydoc, 10, 720, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Name :" + "   " + name);
    //            PdfTextArea pt1prrol = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                              new PdfArea(mydoc, 10, 740, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Roll No :" + "  " + rol_no);
    //            PdfTextArea pt1prrolg = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                               new PdfArea(mydoc, 10, 740, 550, 30), System.Drawing.ContentAlignment.MiddleRight, "Signature of Parent/Guardian");
    //            PdfTextArea pt1prbat = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                              new PdfArea(mydoc, 10, 760, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Batch :" + "   " + ddlBatch.SelectedValue.ToString());
    //            mypdfpage2.Add(pt1pr);
    //            mypdfpage2.Add(pt1prh);
    //            mypdfpage2.Add(pt1prc);
    //            mypdfpage2.Add(pt1prs);
    //            mypdfpage2.Add(pt1prm);
    //            mypdfpage2.Add(pt1prmn);
    //            mypdfpage2.Add(pt1prrem);
    //            mypdfpage2.Add(pt1prna);
    //            mypdfpage2.Add(pt1prrol);
    //            mypdfpage2.Add(pt1prrolg);
    //            mypdfpage2.Add(pt1prbat);
    //            string appPath = HttpContext.Current.Server.MapPath("~");
    //            if (appPath != "")
    //            {
    //                //Aruna on 26feb2013============================
    //                string szPath = appPath + "/Report/";
    //                //string szFile = "Format1.pdf";
    //                //Modified By Srinath 24/9/2014
    //                string szFile = "Format1" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";
    //                mypdfpage.SaveToDocument();
    //                mypdfpage2.SaveToDocument();
    //                mydoc.SaveToFile(szPath + szFile);
    //                Response.ClearHeaders();
    //                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
    //                Response.ContentType = "application/pdf";
    //                Response.WriteFile(szPath + szFile);
    //                //=============================================
    //            }
    //        }
    //    }
    //}

    public string findresult(string att)
    {
        atten = att;
        switch (atten)
        {
            case "-1":
                atten = "AAA";
                break;
            case "-2":
                atten = "EL";
                break;
            case "-3":
                atten = "EOD";
                break;
            case "-4":
                atten = "ML";
                break;
            case "-5":
                atten = "SOD";
                break;
            case "-6":
                atten = "NSS";
                break;
            case "-7":
                atten = "NJ";
                break;
            case "-8":
                atten = "S";
                break;
            case "-9":
                atten = "L";
                break;
            case "-10":
                atten = "NCC";
                break;
            case "-11":
                atten = "HS";
                break;
            case "-12":
                atten = "PP";
                break;
            case "-13":
                atten = "SYOD";
                break;
            case "-14":
                atten = "COD";
                break;
            case "-15":
                atten = "OOD";
                break;
            case "-16":
                atten = "OD";
                break;
            case "-17":
                atten = "LA";
                break;
            //Added By subburaj 21.08.2014****//
            case "-18":
                atten = "RAA";
                break;
            //********End**********************//
        }
        return atten;
    }

    public void bindpdfletter1()
    {
        DataTable dtem = new DataTable();
        dtem.Columns.Clear();
        dtem.Rows.Clear();
        DataColumn dc;
        dc = new DataColumn();
        dc.ColumnName = "Sno";
        dtem.Columns.Add(dc);
        dc = new DataColumn();
        dc.ColumnName = "subjectname";
        dtem.Columns.Add(dc);
        dc = new DataColumn();
        dc.ColumnName = "minmark";
        dtem.Columns.Add(dc);
        dc = new DataColumn();
        dc.ColumnName = "marksobtained";
        dtem.Columns.Add(dc);
        dc = new DataColumn();
        dc.ColumnName = "result";
        dtem.Columns.Add(dc);
        DataRow dr;
        string Registration_no = "";
        Font Fontbold = new Font("Book Antiqua", 15, FontStyle.Bold);
        Font Fontsmall = new Font("Book Antiqua", 10, FontStyle.Regular);
        Font Fontbold1 = new Font("Book Antiqua", 12, FontStyle.Bold);
        Font tamil = new Font("AMUDHAM.TTF", 16, FontStyle.Regular);
        //Gios.Pdf.PdfDocument mydoc = new Gios.Pdf.PdfDocument(PdfDocumentFormat.InCentimeters(30, 40));
        // Gios.Pdf.PdfDocument mydoc = new Gios.Pdf.PdfDocument(PdfDocumentFormat.A4);
        Gios.Pdf.PdfDocument mydoc = new Gios.Pdf.PdfDocument(PdfDocumentFormat.A4_Horizontal);
        if (ddlBranch.Text != "")
        {
            branch = ddlBranch.SelectedItem.Text;
        }
        if (ddlDegree.Text != "")
        {
            degree = ddlDegree.SelectedItem.Text;
        }
        sem = ddlSemYr.SelectedValue;
        sec = ddlSec.SelectedValue;
        
        for (int i = 0; i < chklstest.Items.Count; i++)
        {
            if (chklstest.Items[i].Selected == true)
            {
                string criteria_no = chklstest.Items[i].Value.ToString();
                test = chklstest.Items[i].Text.ToString();
                //if (ddlTest.Text != "")
                //{
                //test = chklstest.SelectedItem.Text;
                //}
                if (ddlSemYr.Text != "")
                {
                    semester = Convert.ToInt32(ddlSemYr.SelectedValue);
                }
                frdate = TextBox2.Text;
                todate = TextBox1.Text;
                DataSet dstextval = new DataSet();// added by sridhar
                colege_code = Session["collegecode"].ToString();
                degree1 = ddlBranch.SelectedValue;
                for (int res = 1; res < Convert.ToInt32(Convert.ToInt32(grdover.Rows.Count)); res++)
                {
                    dtem.Rows.Clear();
                    isval = 0;
                    

                    s = grdover.Rows[res].Cells[1].Text;
                    

                    var checkbox = grdover.Rows[res].Cells[0].FindControl("lbl_cb") as CheckBox;
                    if (checkbox.Checked)
                        isval = 1;

                    if (isval == 1)
                    {
                        DataSet ds = new DataSet();
                        sno = 0;
                        //stdroll = FpEntry.Sheets[0].Cells[res, 1].Text;

                        
                        if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
                        {
                            string college = "select isnull(collname,'') as collname,isnull(category,'') as category,isnull(affliatedby,'') as affliated,isnull(address1,'') as address1,isnull(address3,'') as address3,isnull(address2,'') as address2,isnull(pincode,'-')as pincode,logo1 as logo,phoneno,email,website,district from collinfo where college_code=" + Session["collegecode"] + "";
                            SqlCommand collegecmd = new SqlCommand(college, con);
                            SqlDataReader collegename;
                            con.Close();
                            con.Open();
                            collegename = collegecmd.ExecuteReader();
                            if (collegename.HasRows)
                            {
                                while (collegename.Read())
                                {
                                    affliatedby = collegename["affliated"].ToString();
                                    catgory = collegename["category"].ToString();
                                    collnamenew1 = collegename["collname"].ToString();
                                    address2 = collegename["address2"].ToString();
                                    address1 = collegename["address1"].ToString();
                                    address3 = collegename["address3"].ToString();
                                    pincode = collegename["pincode"].ToString();
                                    Phoneno = collegename["phoneno"].ToString();
                                    email = collegename["email"].ToString();
                                    website = collegename["website"].ToString();
                                    district = collegename["district"].ToString();
                                    adreesdis = collegename["district"].ToString();
                                    adreesdis = adreesdis + " - " + pincode;
                                    address = address1 + ", " + " " + address3; // changed by sridhar 06 sep 2014
                                    catgory = "An " + catgory + " Institution";
                                    address = address1 + "," + address2;
                                    fromcity = address3;
                                    affiliated = "Affiliated  to" + " " + affliatedby + ")";
                                }
                            }
                        }
                       

                        rol_no = grdover.Rows[res].Cells[2].Text;

                        name = grdover.Rows[res].Cells[4].Text;

                        string Toaddress = "select parent_name as pname,parent_addressP as padd1,streetp as padd2,cityp as city,parent_pincodeP as ppin,districtc as pdistrict,Districtp  from applyn where app_no in (select app_no from registration where roll_no='" + rol_no + "')";
                        SqlCommand Toaddcmd = new SqlCommand(Toaddress, con);
                        SqlDataReader Toaddreader;
                        con.Close();
                        con.Open();
                        gtoaddname = "";
                        gtoadd1 = "";
                        gtoadd2 = "";
                        gtoadd3 = "";
                        gtopin = "";
                        gtodistrict = "";
                        Toaddreader = Toaddcmd.ExecuteReader();
                        if (Toaddreader.HasRows)
                        {
                            while (Toaddreader.Read())
                            {
                                gtoaddname = Toaddreader["pname"].ToString();
                                gtoadd1 = Toaddreader["padd1"].ToString();
                                gtoadd2 = Toaddreader["padd2"].ToString();
                                gtoadd3 = Toaddreader["city"].ToString();
                                gtopin = Toaddreader["ppin"].ToString();
                                gtodistrict = Toaddreader["pdistrict"].ToString();
                                // added by sridhar 06 sep 2014      start
                                adresstud = Toaddreader["Districtp"].ToString();
                                if (IsNumeric(adresstud) == true)
                                {
                                    string srisql = "  select textval from textvaltable where TextCode=" + adresstud + "";
                                    dstextval.Clear();
                                    dstextval = dacces.select_method_wo_parameter(srisql, "Text");
                                    if (dstextval.Tables[0].Rows.Count > 0)
                                    {
                                        adresstud = dstextval.Tables[0].Rows[0][0].ToString();
                                    }
                                }
                                adresstud = adresstud + " -" + gtopin;
                                // added by sridhar 06 sep 2014      End
                                //gtoaddress = toaddname + '\n' + toadd1 + '\n' + toadd2 + '\n' + toadd3 + '\n' + topin + '\n' + todistrict;
                            }
                        }
                        int count = 0;
                        sno = 0;
                        string subjname = "";
                        string result = "";
                        string getmark = "";
                        string checkmarks = "";
                        //criteria_no = chklstest.SelectedValue.ToString();
                        //// modify
                        string selectmark = "select distinct e.subject_no,sub.subject_name,max_mark,min_mark,marks_obtained from subjectchooser s,registration rg,exam_type e,result r, subject sub where sub.subject_no=s.subject_no and  s.subject_no=e.subject_no and s.roll_no=rg.roll_no  and e.exam_code=r.exam_code and rg.roll_no=r.roll_no and e.criteria_no='" + criteria_no + "' and r.roll_no='" + rol_no + "'";
                        hat.Clear();
                        hat.Add("rollnum", rol_no.ToString());
                        hat.Add("criteriano", criteria_no.ToString());
                        ds = dacces.select_method(selectmark, hat, "cmd");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            for (int dscount = 0; dscount < ds.Tables[0].Rows.Count; dscount++)
                            {
                                sno++;
                                subjname = ds.Tables[0].Rows[dscount]["subject_name"].ToString();
                                minmark = ds.Tables[0].Rows[dscount]["min_mark"].ToString();
                                checkmarks = ds.Tables[0].Rows[dscount]["marks_obtained"].ToString();
                                string marks = findresult(checkmarks);
                                if (marks != "")
                                {
                                    getmark = marks;
                                }
                                else
                                {
                                    getmark = checkmarks;
                                }
                                if ((((Convert.ToDouble(checkmarks)) < (Convert.ToDouble(minmark)))) && Convert.ToString(checkmarks) != "-2" && Convert.ToString(checkmarks) != "-3")
                                {
                                    result = "Fail";
                                }
                                else
                                {
                                    result = "Pass";
                                }
                                dr = dtem.NewRow();
                                dr["Sno"] = sno.ToString();
                                dr["subjectname"] = subjname;
                                dr["minmark"] = minmark;
                                dr["marksobtained"] = getmark;
                                dr["result"] = result;
                                dtem.Rows.Add(dr);
                            }
                        }
                        


                                Label lblrank = grdover.Rows[res].Cells[0].FindControl("lblresult") as Label;

                                grank = lblrank.Text; 
                                


                        ///end modify
                        dum_tage_date = "";
                        per_tage_day = 0;
                        persentmonthcal();
                        if (Session["Hourwise"] == "1")
                        {
                            per_con_hrs = per_workingdays1;
                            per_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / (per_con_hrs + tot_conduct_hr_spl_fals)) * 100);
                            if (per_tage_hrs > 100)
                            {
                                per_tage_hrs = 100;
                            }
                            per_tage_day = per_tage_hrs;
                        }
                        if (Session["Daywise"] == "1")
                        {
                            per_tage_day = ((pre_present_date / per_workingdays) * 100);
                            if (per_tage_day > 100)
                            {
                                per_tage_day = 100;
                            }
                        }
                        dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
                        if (dum_tage_date == "NaN")
                        {
                            dum_tage_date = "0";
                        }
                        else if (dum_tage_date == "Infinity")
                        {
                            dum_tage_date = "0";
                        }
                        con.Close();
                        string degcode = ddlBranch.SelectedValue.ToString();
                        string semvalue = ddlSemYr.SelectedItem.ToString();
                        ds1.Dispose();
                        ds1.Reset();
                        if (degcode != "" && semvalue != "")
                        {
                            string attpercen = "select percent_eligible_for_exam from periodattndschedule where degree_code= " + degcode + " and semester= " + semvalue + " ";
                            ds1 = dacces.select_method(attpercen, hat, "Text");
                            if (ds1.Tables[0].Rows.Count > 0)
                            {
                                univpercentage = "Minimum eligibility to appear in the University Examination is " + ds1.Tables[0].Rows[0]["percent_eligible_for_exam"].ToString() + "% attendance.";
                            }
                        }
                        if (Registration_no == "")
                        {
                            Registration_no = rol_no;
                        }
                        else
                        {
                            Registration_no = Registration_no + "-" + rol_no;
                        }
                        Bindpdfn(mydoc, Fontsmall, Fontbold, Fontbold1, dtem, Response);
                    }
                }//
            }
        }
        if (sno == 0)
        {
            Label4.Text = "Kindly select Atleast one student";
            Label4.Visible = true;
        }
    }

    public void Bindpdfn(Gios.Pdf.PdfDocument mydoc, Font Fontsmall, Font Fontbold, Font Fontbold1, DataTable dt, HttpResponse response)
    {
        try
        {
            //***************Added By subburaj ***************Start****//
            string addressstret = address3 + "," + district + "-" + pincode + ",";
            string phone = "Ph.No:" + Phoneno + "," + "Mail:" + email + ",";
            string web = "Website:" + website + ".";
            string addresss = address1 + "," + address2;
            string concat = address3 + "," + district + "-" + pincode;
            int cnt;
            sno = dt.Rows.Count;
            int subno = 0;
            int pagecount = sno / 11;
            int repage = sno % 11;
            lblesr.Text = "";
            int nopages = pagecount;
            if (repage > 0)
            {
                nopages++;
            }
            //if (sno > 0)
            //{
            if (nopages > 0)
            {
                for (int row = 0; row < nopages; row++)
                {
                    subno++;
                    Gios.Pdf.PdfPage mypdfpage = mydoc.NewPage();
                    PdfTextArea ptc = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                                                        new PdfArea(mydoc, 105, 40, 500, 30), System.Drawing.ContentAlignment.MiddleCenter, collnamenew1);
                    PdfTextArea pts = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 150, 60, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address);
                    PdfTextArea pts1 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 150, 80, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, addressstret);
                    PdfTextArea pts2 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 150, 100, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, phone);
                    PdfTextArea pts3 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 150, 120, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, web);
                    //******************************End***********************************//


                    if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo(" + Convert.ToString(Session["collegecode"]) + ").jpeg")))
                    {
                        PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo(" + Convert.ToString(Session["collegecode"]) + ").jpeg"));
                        mypdfpage.Add(LogoImage, 5, 5, 100);
                    }
                    if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Right_Logo(" + Convert.ToString(Session["collegecode"]) + ").jpeg")))
                    {
                        PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Right_Logo(" + Convert.ToString(Session["collegecode"]) + ").jpeg"));
                        mypdfpage.Add(LogoImage, 510, 5, 100);
                    }


                    html.Append("<div style='height: 1000px; width: 700px; border: 0px solid black; margin-left: 5px;margin:0px;page-break-after: always;'>");

                    html.Append("<table cellspacing='0' cellpadding='0' style='width: 700px; ' border='0'>");

                    html.Append("<tr><td style='width: 50px;'></td><td style='text-align: right;' > <img src=~/college/Left_Logo(" + Convert.ToString(Session["collegecode"]) + ").jpeg alt='' style='height: 100px; width: 120px;' /></td><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: center;'><span style='font-size: 14px;font-weight:bold;'>" + collnamenew1 + "</span> <br><span style='font-size: 14px;font-weight:bold;'>" + address + "<br>" + addressstret + "<br> " + phone + " <br> " + web + "    </span></td><td style='text-align: right;' > <img src=~/college/Right_Logo(" + Convert.ToString(Session["collegecode"]) + ").jpeg alt='' style='height: 100px; width: 120px;' /></td></tr><tr><td style='width: 50px;'></td><td></td><td ></td><td style='text-align: right;' ><span style='font-size: 14px;font-weight:bold;'> </span></td></tr> ");

                    html.Append(" </table>");

                    //if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo(" + Convert.ToString(Session["collegecode"]) + ").jpeg")))//Aruna
                    //{
                    //    PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo(" + Convert.ToString(Session["collegecode"]) + ").jpeg"));
                    //    mypdfpage.Add(LogoImage, 50, 25, 100);
                    //}
                    //else
                    //{
                    //    PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
                    //    mypdfpage.Add(LogoImage, 50, 25, 100);
                    //}
                    //if (File.Exists(HttpContext.Current.Server.MapPath("~/college//Right_Logo(" + Convert.ToString(Session["collegecode"]) + ").jpeg")))
                    //{
                    //    Gios.Pdf.PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Right_Logo(" + Convert.ToString(Session["collegecode"]) + ").jpeg"));
                    //    mypdfpage.Add(LogoImage2, 485, 25, 100);
                    //}
                    //else
                    //{
                    //    Gios.Pdf.PdfImage LogoImage2 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/NoImage.jpg"));
                    //    mypdfpage.Add(LogoImage2, 485, 25, 100);
                    //}

                    PdfArea tete = new PdfArea(mydoc, 700, 50, 60, 60);
                    PdfRectangle pr1 = new PdfRectangle(mydoc, tete, Color.Black);
                    mypdfpage.Add(pr1);
                    PdfArea teteto = new PdfArea(mydoc, 530, 120, 280, 150);
                    PdfRectangle pr2 = new PdfRectangle(mydoc, teteto, Color.Black);
                    mypdfpage.Add(pr2);
                    PdfArea tetefrom = new PdfArea(mydoc, 530, 350, 280, 120);   //modified by mullai
                    PdfRectangle pr3 = new PdfRectangle(mydoc, tetefrom, Color.Black);
                    mypdfpage.Add(pr3);
                    PdfTextArea pt123S = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                           new PdfArea(mydoc, 710, 50, 60, 60), System.Drawing.ContentAlignment.MiddleLeft, "STAMP");
                    PdfTextArea pt123to = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                           new PdfArea(mydoc, 540, 80, 200, 150), System.Drawing.ContentAlignment.MiddleLeft, "To");
                    PdfTextArea pt123to1 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                          new PdfArea(mydoc, 560, 120, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, gtoaddname);
                    PdfTextArea pt123to2 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                         new PdfArea(mydoc, 560, 140, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, gtoadd1);
                    PdfTextArea pt123to3 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 560, 160, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, gtoadd2);
                    PdfTextArea pt123to4 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 560, 180, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, gtoadd3);
                    // changed by sridhar 08 sep 2014 start
                    PdfTextArea pt123to5 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                   new PdfArea(mydoc, 560, 200, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, adresstud);
                    PdfTextArea pt123from = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                          new PdfArea(mydoc, 540, 300, 250, 150), System.Drawing.ContentAlignment.MiddleLeft, "From");

                    PdfTextArea pt123from1 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                          new PdfArea(mydoc, 560, 340, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, collnamenew1);
                    PdfTextArea pt123from2 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, 560, 360, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, address2);

                    PdfTextArea pt123from3 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                        new PdfArea(mydoc, 560, 360, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, address);
                    PdfTextArea pt123from4 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 560, 380, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, fromcity);
                    PdfTextArea pt123from5 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                        new PdfArea(mydoc, 560, 400, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, adreesdis);
                    // changed by sridhar 08 sep 2014 end

                    //PdfTextArea pt123from2 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                    //                                     new PdfArea(mydoc, 560, 360, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, addresss);
                    //PdfTextArea pt123from3 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                    //                                    new PdfArea(mydoc, 560, 380, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, concat);

                    //PdfTextArea pt123from4 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                    //                                    new PdfArea(mydoc, 560, 400, 300, 100), System.Drawing.ContentAlignment.MiddleLeft, concat);
                    mypdfpage.Add(pt123S);
                    mypdfpage.Add(ptc);
                    mypdfpage.Add(pts);
                    mypdfpage.Add(pts1);
                    mypdfpage.Add(pts2);
                    mypdfpage.Add(pts3);
                    mypdfpage.Add(pt123to);
                    mypdfpage.Add(pt123to1);
                    mypdfpage.Add(pt123to2);
                    mypdfpage.Add(pt123to3);
                    mypdfpage.Add(pt123to4);
                    mypdfpage.Add(pt123to5);
                    mypdfpage.Add(pt123from);
                    mypdfpage.Add(pt123from1);
                    mypdfpage.Add(pt123from3);
                    mypdfpage.Add(pt123from4);
                    mypdfpage.Add(pt123from5);
                    cnt = subno * sno;
                    Gios.Pdf.PdfTable table = mydoc.NewTable(Fontsmall, cnt + 1, 4, 1);
                    if (subno == 1)
                    {
                        PdfTextArea pt123 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                            new PdfArea(mydoc, 40, 120, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Dear Parents");
                        PdfTextArea ptc21 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                 new PdfArea(mydoc, 50, 140, 400, 50), System.Drawing.ContentAlignment.MiddleLeft, "Sub :" + " " + test + "--Performance Report");
                        PdfTextArea ptc22 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                new PdfArea(mydoc, 40, 160, 400, 50), System.Drawing.ContentAlignment.MiddleLeft, "Your son/daughter :" + "  " + name + "  " + "[" + rol_no + "]" + " " + "Studying in" + "  " + ddlSemYr.SelectedItem.ToString() + "  " + "Semester");
                        PdfTextArea ptc23 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                new PdfArea(mydoc, 40, 180, 400, 50), System.Drawing.ContentAlignment.MiddleLeft, degree + " [" + branch + "]");
                        PdfTextArea pt124 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                new PdfArea(mydoc, 40, 200, 400, 50), System.Drawing.ContentAlignment.MiddleLeft, "has secured the following marks ");
                        // PdfTextArea psam=new PdfTextArea(Fontsmall,System.Drawing.Color.Black, new PdfArea(mydoc,

                        html.Append("<table cellspacing='0' cellpadding='0' style='width: 500px; margin-left: 80px;' border='0'>");

                        html.Append("<tr><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'><span style='font-size: 12px;font-weight:bold;'>Dear Parents <br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbspSub :" + " " + test + "--Performance Report <br><br> Your son/daughter :" + "  " + name + "  " + "[" + rol_no + "]" + " " + "Studying in" + "  " + ddlSemYr.SelectedItem.ToString() + "  " + "Semester <br><br> " + degree + " [" + branch + "] <br><br>has secured the following marks</td></tr> ");

                        html.Append(" </table>");



                        html.Append("<br><br><table style='width: 60%; margin-left: 80px; margin-top: 0px; margin-bottom: 2px; font-size: 12px;'cellpadding='5' cellspacing='0'>");
                        html.Append("<tr>");
                        html.Append("<td  style='border: thin solid #000000;' align='center'; font-weight:'bold';>Subject Name</td>");
                        html.Append("<td  style='border: thin solid #000000;' align='center'; font-weight:'bold';>Min Mark</td>");
                        html.Append("<td  style='border: thin solid #000000;' align='center'; font-weight:'bold';>Marks Obtained</td>");
                        html.Append("<td  style='border: thin solid #000000;' align='center'; font-weight:'bold';>Result</td>");


                        html.Append(" </tr>");
                        mypdfpage.Add(pt123);
                        mypdfpage.Add(ptc21);
                        mypdfpage.Add(ptc22);
                        mypdfpage.Add(ptc23);
                        mypdfpage.Add(pt124);
                        table.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
                        table.Columns[0].SetWidth(400);
                        table.Columns[1].SetWidth(150);
                        table.Columns[2].SetWidth(200);
                        table.Columns[3].SetWidth(100);
                        //table.Columns[4].SetWidth(100);
                        table.CellRange(0, 0, 0, 3).SetFont(Fontsmall);
                        table.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table.Cell(0, 0).SetContent("Subject Name");
                        table.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table.Cell(0, 1).SetContent("Min Mark");
                        table.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table.Cell(0, 2).SetContent("Marks Obtained");
                        table.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table.Cell(0, 3).SetContent("Result");
                    }
                    int val = 0;
                    if (subno == 1)
                    {
                        if (cnt < 11)
                        {
                            for (int i = 0; i < cnt; i++)
                            {
                                val++;
                                string scode = dt.Rows[i]["subjectname"].ToString();
                                table.Cell(val, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                table.Cell(val, 0).SetContent(scode);
                                string sname = dt.Rows[i]["minmark"].ToString();
                                table.Cell(val, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table.Cell(val, 1).SetContent(sname);
                                string markobtained = dt.Rows[i]["marksobtained"].ToString();
                                table.Cell(val, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table.Cell(val, 2).SetContent(markobtained);
                                string result = dt.Rows[i]["result"].ToString();
                                table.Cell(val, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                table.Cell(val, 3).SetContent(result);

                                html.Append("<tr>");
                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: left;'>");
                                html.Append("" + dt.Rows[i]["subjectname"].ToString() + "");
                                html.Append("</td>");

                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: center;'>");
                                html.Append("" + dt.Rows[i]["minmark"].ToString() + "");
                                html.Append("</td>");


                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: center;'>");
                                html.Append("" + dt.Rows[i]["marksobtained"].ToString() + "");
                                html.Append("</td>");


                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: left;'>");
                                html.Append("" + dt.Rows[i]["result"].ToString() + "");
                                html.Append("</td>");

                                html.Append(" </tr>");



                            }
                            html.Append(" </table>");


                            


                            html.Append("<table style='width: 40%; margin-left: 550px; margin-top: -450px; margin-bottom: 2px; font-size: 12px;'cellpadding='5' cellspacing='0'>");
                        html.Append("<tr>");
                        html.Append("<td  style='border: thin solid #000000;' align='left'; font-weight:'bold';><span style='font-size: 14px;font-weight:bold;'>To <br>&nbsp&nbsp&nbsp&nbsp&nbsp" + gtoaddname + "<br>&nbsp&nbsp&nbsp&nbsp&nbsp " + gtoadd1 + "<br>&nbsp&nbsp&nbsp&nbsp&nbsp" + gtoadd2 + "<br>&nbsp&nbsp&nbsp&nbsp&nbsp" + gtoadd3 + " <br>&nbsp&nbsp&nbsp&nbsp&nbsp" + adresstud + " </span></td>");
                        

                        html.Append(" </tr>");
                        html.Append(" </table>");


                        html.Append("<table style='width: 40%; margin-left: 550px; margin-top: 100px; margin-bottom: 2px; font-size: 12px;'cellpadding='5' cellspacing='0'>");
                        html.Append("<tr>");
                        html.Append("<td  style='border: thin solid #000000;' align='left'; font-weight:'bold';><span style='font-size: 14px;font-weight:bold;'>From <br>&nbsp&nbsp&nbsp&nbsp&nbsp" + collnamenew1 + "<br>&nbsp&nbsp&nbsp&nbsp&nbsp " + address2 + "<br>&nbsp&nbsp&nbsp&nbsp&nbsp" + address + "<br>&nbsp&nbsp&nbsp&nbsp&nbsp" + fromcity + " <br>&nbsp&nbsp&nbsp&nbsp&nbsp" + adreesdis + " </span></td>");


                        html.Append(" </tr>");
                        html.Append(" </table>");

                        html.Append("<table cellspacing='0' cellpadding='0' style='width: 500px; margin-left: 80px;margin-top: 140px;' border='0'>");

                            html.Append("<tr><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'><span style='font-size: 12px;'><br><br>His/Her attendance details for the period " + TextBox2.Text.ToString() + "</span><span style='font-size: 14px;font-weight:bold;'>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp Rank :" + "  " + grank.ToString() + "<br><br></span><span style='font-size: 12px;'>to " + TextBox1.Text.ToString() + " are as follows ");

                           
                            Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 40, 240, 400, 400));
                            mypdfpage.Add(newpdftabpage);

                            double height = newpdftabpage.Area.Height;
                            //int h=Convert.ToInt16(height);
                            //int xcout = (val * 15) + 240;
                            int xcout = Convert.ToInt16(height) + 240;
                            PdfTextArea pt219 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                                           new PdfArea(mydoc, 40, xcout, 400, 40), System.Drawing.ContentAlignment.MiddleRight, "Rank :" + "  " + grank.ToString());
                            mypdfpage.Add(pt219);
                            PdfTextArea pt21 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                            new PdfArea(mydoc, 40, xcout, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "His/Her attendance details for the period " + TextBox2.Text.ToString());
                            PdfTextArea pt22 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                    new PdfArea(mydoc, 40, xcout + 20, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, " to " + TextBox1.Text.ToString() + " are as follows");
                            //------------------------start-----------------------------// By M.SakthiPriya 05-12-2014
                            if (Session["Hourwise"] == "1")
                            {
                                string v = Convert.ToString(per_con_hrs + tot_conduct_hr_spl_fals);
                                PdfTextArea pt213 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                    new PdfArea(mydoc, 40, xcout + 40, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "Number of Conducted Hours:" + "  " + Convert.ToString(per_con_hrs + tot_conduct_hr_spl_fals));
                                PdfTextArea pt214 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                                new PdfArea(mydoc, 40, xcout + 60, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "Number of Attend Hours:" + "  " + Convert.ToString(per_per_hrs + tot_per_hrs_spl_fals));
                                PdfTextArea pt215 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                                       new PdfArea(mydoc, 40, xcout + 80, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "% of Attendance in Hours:" + "  " + dum_tage_date.ToString());
                                mypdfpage.Add(pt213);
                                mypdfpage.Add(pt214);
                                mypdfpage.Add(pt215);

                                html.Append(" <br><br> Number of Conducted Hours:" + "  " + Convert.ToString(per_con_hrs + tot_conduct_hr_spl_fals) + " <br><br> Number of Attend Hours:" + "  " + Convert.ToString(per_per_hrs + tot_per_hrs_spl_fals) + "<br><br>% of Attendance in Hours:" + "  " + dum_tage_date.ToString() + " ");
                            }
                            if (Session["Daywise"] == "1")
                            {
                                string h = dum_tage_date.ToString();
                                PdfTextArea pt23 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                    new PdfArea(mydoc, 40, xcout + 100, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "Number of Working days:" + "  " + per_workingdays.ToString());
                                PdfTextArea pt24 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                                new PdfArea(mydoc, 40, xcout + 120, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "Number of Days Attend:" + "  " + pre_present_date.ToString());
                                PdfTextArea pt25 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                                       new PdfArea(mydoc, 40, xcout + 140, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "% of Attendance in Days:" + "  " + dum_tage_date.ToString());
                                mypdfpage.Add(pt23);
                                mypdfpage.Add(pt24);
                                mypdfpage.Add(pt25);

                                html.Append(" <br><br> Number of Working days:" + "  " + per_workingdays.ToString() + " <br><br> Number of Days Attend:" + "  " + pre_present_date.ToString() + "<br><br>% of Attendance in Days:" + "  " + dum_tage_date.ToString() + "</span></td></tr></table><table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 80px;' border='0'><tr><td> <span style='font-size: 14px;font-weight:bold;'><br><br><br><br>Class Advisor&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspR.C&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspH.O.D&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspPrincipal</span></td></tr> ");
                            }


                            html.Append(" </table>");
                            //------------------------End-----------------------------// By M.SakthiPriya 05-12-2014
                            PdfTextArea pt26 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                                       new PdfArea(mydoc, 40, xcout + 160, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, univpercentage.ToString());
                            PdfTextArea pt27 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                                            new PdfArea(mydoc, 40, xcout + 200, 510, 40), System.Drawing.ContentAlignment.MiddleLeft, "Class Advisor");
                            double w = pt27.PdfArea.Width;
                            PdfTextArea ptrc = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                                            new PdfArea(mydoc, 180, xcout + 200, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "R.C");
                            PdfTextArea pt28 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                                                    new PdfArea(mydoc, 80, xcout + 200, 400, 40), System.Drawing.ContentAlignment.MiddleCenter, "H.O.D");
                            PdfTextArea pt28p = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                                                    new PdfArea(mydoc, 40, xcout + 200, 400, 40), System.Drawing.ContentAlignment.MiddleRight, "Principal");
                            mypdfpage.Add(pt21);
                            mypdfpage.Add(pt22);
                            mypdfpage.Add(pt26);
                            mypdfpage.Add(pt27);
                            mypdfpage.Add(ptrc);
                            mypdfpage.Add(pt28);
                            mypdfpage.Add(pt28p);
                        }
                        else
                        {
                            for (int i = 0; i < cnt; i++)
                            {
                                val++;
                                string scode = dt.Rows[i]["subjectname"].ToString();
                                table.Cell(val, 0).SetContentAlignment(ContentAlignment.MiddleLeft);
                                table.Cell(val, 0).SetContent(scode);
                                string sname = dt.Rows[i]["minmark"].ToString();
                                table.Cell(val, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table.Cell(val, 1).SetContent(sname);
                                string markobtained = dt.Rows[i]["marksobtained"].ToString();
                                table.Cell(val, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table.Cell(val, 2).SetContent(markobtained);
                                string result = dt.Rows[i]["result"].ToString();
                                table.Cell(val, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                                table.Cell(val, 3).SetContent(result);


                                html.Append("<tr>");
                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: left;'>");
                                html.Append("" + dt.Rows[i]["subjectname"].ToString() + "");
                                html.Append("</td>");

                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: center;'>");
                                html.Append("" + dt.Rows[i]["minmark"].ToString() + "");
                                html.Append("</td>");


                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: center;'>");
                                html.Append("" + dt.Rows[i]["marksobtained"].ToString() + "");
                                html.Append("</td>");


                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: left;'>");
                                html.Append("" + dt.Rows[i]["result"].ToString() + "");
                                html.Append("</td>");

                                html.Append(" </tr>");

                            }
                            html.Append(" </table>");

                            html.Append("<table style='width: 40%; margin-left: 550px; margin-top: -450px; margin-bottom: 2px; font-size: 12px;'cellpadding='5' cellspacing='0'>");
                            html.Append("<tr>");
                            html.Append("<td  style='border: thin solid #000000;' align='left'; font-weight:'bold';><span style='font-size: 14px;font-weight:bold;'>To <br>&nbsp&nbsp&nbsp&nbsp&nbsp" + gtoaddname + "<br>&nbsp&nbsp&nbsp&nbsp&nbsp " + gtoadd1 + "<br>&nbsp&nbsp&nbsp&nbsp&nbsp" + gtoadd2 + "<br>&nbsp&nbsp&nbsp&nbsp&nbsp" + gtoadd3 + " <br>&nbsp&nbsp&nbsp&nbsp&nbsp" + adresstud + " </span></td>");


                            html.Append(" </tr>");
                            html.Append(" </table>");


                            html.Append("<table style='width: 40%; margin-left: 550px; margin-top: 100px; margin-bottom: 2px; font-size: 12px;'cellpadding='5' cellspacing='0'>");
                            html.Append("<tr>");
                            html.Append("<td  style='border: thin solid #000000;' align='left'; font-weight:'bold';><span style='font-size: 14px;font-weight:bold;'>From <br>&nbsp&nbsp&nbsp&nbsp&nbsp" + collnamenew1 + "<br>&nbsp&nbsp&nbsp&nbsp&nbsp " + address2 + "<br>&nbsp&nbsp&nbsp&nbsp&nbsp" + address + "<br>&nbsp&nbsp&nbsp&nbsp&nbsp" + fromcity + " <br>&nbsp&nbsp&nbsp&nbsp&nbsp" + adreesdis + " </span></td>");


                            html.Append(" </tr>");
                            html.Append(" </table>");

                            html.Append("<table cellspacing='0' cellpadding='0' style='width: 500px; margin-left: 80px;margin-top: 140px;' border='0'>");

                           


                            int xcout = (val * 15) + 240;
                            Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 40, 240, 400, 400));
                            mypdfpage.Add(newpdftabpage);
                            double height = newpdftabpage.Area.Height;
                            ////int h=Convert.ToInt16(height);
                            ////int xcout = (val * 15) + 240;
                            int xcout1 = Convert.ToInt16(height) + 240;

                            PdfTextArea pt219 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                                           new PdfArea(mydoc, 40, xcout + 40, 400, 40), System.Drawing.ContentAlignment.MiddleRight, "Rank :" + "  " + grank.ToString());
                            mypdfpage.Add(pt219);
                        }
                    }
                    if (subno > 1)
                    {
                        PdfTextArea pt21 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                        new PdfArea(mydoc, 40, 120, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "His/Her attendance details for the period " + TextBox2.Text.ToString());

                        PdfTextArea pt22 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                new PdfArea(mydoc, 40, 140, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, " to " + TextBox1.Text.ToString() + " are as follows");

                        html.Append("<tr><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'><span style='font-size: 12px;'><br><br>His/Her attendance details for the period " + TextBox2.Text.ToString() + "</span><span style='font-size: 14px;font-weight:bold;'>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp Rank :" + "  " + grank.ToString() + "<br><br></span><span style='font-size: 12px;'>to " + TextBox1.Text.ToString() + " are as follows ");

                        if (Session["Hourwise"] == "1")
                        {
                            PdfTextArea pt23 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                new PdfArea(mydoc, 40, 160, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "Number of conducted Period:" + "  " + Convert.ToString(per_con_hrs + tot_conduct_hr_spl_fals));
                            PdfTextArea pt24 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                            new PdfArea(mydoc, 40, 180, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "Number of attend Period:" + "  " + Convert.ToString(per_per_hrs + tot_per_hrs_spl_fals));
                            PdfTextArea pt25 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                                   new PdfArea(mydoc, 40, 200, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "% of attendance:" + "  " + dum_tage_date.ToString());
                            mypdfpage.Add(pt23);
                            mypdfpage.Add(pt24);
                            mypdfpage.Add(pt25);

                            html.Append(" <br><br> Number of conducted Period:" + "  " + Convert.ToString(per_con_hrs + tot_conduct_hr_spl_fals) + " <br><br> Number of attend Period:" + "  " + Convert.ToString(per_per_hrs + tot_per_hrs_spl_fals) + "<br><br>% of attendance:" + "  " + dum_tage_date.ToString() + " ");
                        }
                        if (Session["Daywise"] == "1")
                        {
                            PdfTextArea pt23 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                new PdfArea(mydoc, 40, 220, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "Number of working days:" + "  " + per_workingdays.ToString());
                            PdfTextArea pt24 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                            new PdfArea(mydoc, 40, 240, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "Number of days attend:" + "  " + pre_present_date.ToString());
                            PdfTextArea pt25 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                                   new PdfArea(mydoc, 40, 260, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "% of attendance:" + "  " + dum_tage_date.ToString());
                            mypdfpage.Add(pt23);
                            mypdfpage.Add(pt24);
                            mypdfpage.Add(pt25);


                            html.Append(" <br><br> Number of working days:" + "  " + per_workingdays.ToString() + " <br><br> Number of days attend:" + "  " + pre_present_date.ToString() + "<br><br>% of attendance:" + "  " + dum_tage_date.ToString() + " <br>" + univpercentage.ToString() + "</span></td></tr></table><table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 80px;' border='0'><tr><td> <span style='font-size: 14px;font-weight:bold;'><br><br><br><br>Class Advisor&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbspH.O.D</span></td></tr> ");
                        }
                        PdfTextArea pt26 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                                   new PdfArea(mydoc, 40, 275, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, univpercentage.ToString());
                        PdfTextArea pt27 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                                        new PdfArea(mydoc, 40, 500, 510, 40), System.Drawing.ContentAlignment.MiddleLeft, "Class Advisor");
                        PdfTextArea pt28 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                                                new PdfArea(mydoc, 40, 500, 400, 40), System.Drawing.ContentAlignment.MiddleRight, "H.O.D");
                        mypdfpage.Add(pt21);
                        mypdfpage.Add(pt22);
                        mypdfpage.Add(pt26);
                        mypdfpage.Add(pt27);
                        mypdfpage.Add(pt28);
                    }

                           html.Append("</div>");

                   

                   contentDiv.InnerHtml = html.ToString();
                   contentDiv.Visible = true;

                   ScriptManager.RegisterStartupScript(this, GetType(), "btn_print", "PrintDiv();", true);
                  
                    if (txtnotes.Text != "")
                    {
                        PdfTextArea pt326 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                               new PdfArea(mydoc, 40, 460, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "Note:" + txtnotes.Text);
                        mypdfpage.Add(pt326);
                    }
                    string appPath = HttpContext.Current.Server.MapPath("~");
                    if (appPath != "")
                    {
                        string szPath = appPath + "/Report/";
                        string szFile = "Format1" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";
                        //mypdfpage.SaveToDocument();
                        //mydoc.SaveToFile(szPath + szFile);
                        //Response.ClearHeaders();
                        //Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                        //Response.ContentType = "application/pdf";
                        //Response.WriteFile(szPath + szFile);
                    }
                }
            }

        }
        catch (Exception ex)
        {
            lblesr.Text = ex.ToString();
        }
    }

    public void Bindpdf(Gios.Pdf.PdfDocument mydoc, Font Fontsmall, Font Fontbold, Font Fontbold1, DataTable dt, HttpResponse response)
    {
        try
        {
            int subno = 0;
            int pagecount = sno / 20;
            int repage = sno % 20;

            int nopages = pagecount;
            if (repage > 0)
            {
                nopages++;
            }
            //if (nopages > 0)
            //{
            // for (int row = 0; row < nopages; row++)
            //{
            subno++;
            Gios.Pdf.PdfPage mypdfpage = mydoc.NewPage();
            PdfTextArea ptc = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                                                new PdfArea(mydoc, 100, 40, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, collnamenew1);
            PdfTextArea pts = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                               new PdfArea(mydoc, 100, 60, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address);
            if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))//Aruna
            {
                PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
                mypdfpage.Add(LogoImage, 25, 25, 300);
            }
            //PdfArea tete = new PdfArea(mydoc, 25, 10, 800, 1100);
            //PdfRectangle pr1 = new PdfRectangle(mydoc, tete, Color.Black);
            mypdfpage.Add(ptc);
            mypdfpage.Add(pts);
            PdfTextArea pt123 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                    new PdfArea(mydoc, 10, 140, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Dear Parents");
            PdfTextArea ptc21 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                     new PdfArea(mydoc, 30, 160, 400, 50), System.Drawing.ContentAlignment.MiddleLeft, "Sub :" + " " + test + "--Performance Report");
            PdfTextArea ptc22 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                    new PdfArea(mydoc, 30, 180, 400, 50), System.Drawing.ContentAlignment.MiddleLeft, "Your son/daughter:" + " " + name + "[" + rol_no + "]" + "Studying in");
            PdfTextArea ptc23 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                    new PdfArea(mydoc, 30, 200, 400, 50), System.Drawing.ContentAlignment.MiddleLeft, degree + " [" + branch + "]");
            PdfTextArea pt124 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                    new PdfArea(mydoc, 30, 220, 400, 50), System.Drawing.ContentAlignment.MiddleLeft, "has secured the following marks in");
            // PdfTextArea psam=new PdfTextArea(Fontsmall,System.Drawing.Color.Black, new PdfArea(mydoc,
            mypdfpage.Add(pt123);
            mypdfpage.Add(ptc21);
            mypdfpage.Add(ptc22);
            mypdfpage.Add(ptc23);
            mypdfpage.Add(pt124);
            int cnt = subno * sno;
            //int cnt1 = subno * 20;

            Gios.Pdf.PdfTable table = mydoc.NewTable(Fontsmall, cnt + 1, 4, 1);

            table.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
            table.Columns[0].SetWidth(150);
            table.Columns[1].SetWidth(80);
            table.Columns[2].SetWidth(100);
            table.Columns[3].SetWidth(80);
            table.CellRange(0, 0, 0, 3).SetFont(Fontsmall);

            table.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
            table.Cell(0, 0).SetContent("Subject Name");
            table.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
            table.Cell(0, 1).SetContent("Min Mark");
            table.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
            table.Cell(0, 2).SetContent("Marks Obtained");
            table.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
            table.Cell(0, 3).SetContent("Result");
            //Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 50, 250, 700, 1000));
            int val = 0;
            for (int i = 0; i < cnt; i++)
            {
                val++;
                //table.Cell(val, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                //string[] splitsrno = srno.Split(new Char[] { '\n' });
                //srno1 = splitsrno[i];
                //table.Cell(val, 0).SetContent(srno1);
                table.Cell(val, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                string[] splitexamdatenew = gsubjname.Split(new Char[] { '\n' });
                subname = splitexamdatenew[i];
                table.Cell(val, 0).SetContent(subname);
                table.Cell(val, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                string[] splitexamsession = gminmark.Split(new Char[] { '\n' });
                minmark = splitexamsession[i];
                table.Cell(val, 1).SetContent(minmark);
                table.Cell(val, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                string[] splitsubjecode = gmaxmark.Split(new Char[] { '\n' });
                maxmark = splitsubjecode[i];
                table.Cell(val, 2).SetContent(maxmark);
                table.Cell(val, 3).SetContentAlignment(ContentAlignment.MiddleLeft);
                string[] splitsubjectname = gresult.Split(new Char[] { '\n' });
                resu = splitsubjectname[i];
                table.Cell(val, 3).SetContent(resu);
            }
            Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 30, 270, 400, 400));
            mypdfpage.Add(newpdftabpage);

            PdfTextArea pt21 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                            new PdfArea(mydoc, 30, 290, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "His/Her attendance details for the period " + TextBox2.Text.ToString());

            PdfTextArea pt22 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                    new PdfArea(mydoc, 30, 310, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, " to " + TextBox1.Text.ToString() + " are as follows");
            //------------------------start-----------------------------// By M.SakthiPriya 05-12-2014
            if (Session["Hourwise"] == "1")
            {
                PdfTextArea pt23 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                    new PdfArea(mydoc, 30, 330, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "Number of Conducted Hours" + Convert.ToString(per_con_hrs + tot_conduct_hr_spl_fals));
                PdfTextArea pt24 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                new PdfArea(mydoc, 30, 350, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "Number of Attend Hours" + Convert.ToString(per_per_hrs + tot_per_hrs_spl_fals));
                PdfTextArea pt25 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                       new PdfArea(mydoc, 30, 370, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "% of Attendance in Hours" + dum_tage_date.ToString());
                mypdfpage.Add(pt23);
                mypdfpage.Add(pt24);
                mypdfpage.Add(pt25);
            }
            if (Session["Daywise"] == "1")
            {
                PdfTextArea pt23 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                    new PdfArea(mydoc, 30, 330, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "Number of Working Days" + per_workingdays.ToString());
                PdfTextArea pt24 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                new PdfArea(mydoc, 30, 350, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "Number of Days Attend" + pre_present_date.ToString());
                PdfTextArea pt25 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                       new PdfArea(mydoc, 30, 370, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "% of Attendance in Days" + dum_tage_date.ToString());
                mypdfpage.Add(pt23);
                mypdfpage.Add(pt24);
                mypdfpage.Add(pt25);
            }

            //------------------------End-----------------------------// By M.SakthiPriya 05-12-2014

            if (txtnotes.Text != "")
            {
                PdfTextArea pt126 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                       new PdfArea(mydoc, 30, 380, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "Note:" + txtnotes.Text);
                mypdfpage.Add(pt126);
            }
            PdfTextArea pt26 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                                       new PdfArea(mydoc, 30, 390, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "% Minimum eligibility to appear in the university Examination is " + univpercentage.ToString());
            PdfTextArea pt27 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                            new PdfArea(mydoc, 10, 410, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, "Class Advisor");
            PdfTextArea pt28 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                                    new PdfArea(mydoc, 10, 410, 400, 40), System.Drawing.ContentAlignment.MiddleCenter, "H.O.D");
            mypdfpage.Add(pt21);
            mypdfpage.Add(pt22);
            mypdfpage.Add(pt26);
            mypdfpage.Add(pt27);
            mypdfpage.Add(pt28);
            string appPath = HttpContext.Current.Server.MapPath("~");
            if (appPath != "")
            {
                //Aruna on 26feb2013============================
                string szPath = appPath + "/Report/";
                //Modified By Srinath 24/9/2014
                //string szFile = "Format1.pdf";
                string szFile = "Format1" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";
                mypdfpage.SaveToDocument();
                mydoc.SaveToFile(szPath + szFile);
                Response.ClearHeaders();
                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                Response.ContentType = "application/pdf";
                Response.WriteFile(szPath + szFile);
                //=============================================
            }
            //}
            //}
        }
        catch (Exception ex)
        {
        }
    }

    protected void ddlletter_SelectedIndexChanged(object sender, EventArgs e)
    {
        lblnote.Visible = false;
        txtnotes.Visible = false;
        pnlMultiFormat.Visible = false;
        Pnltamilformat.Visible = false;
        txt_ConvertTo.Text = "";
        if (txt_Test.Text.ToString().Trim().ToLower() == "---select---")
        {
            pnlMultiFormat.Visible = false;
            Pnltamilformat.Visible = false;
            txt_ConvertTo.Text = "";
            return;
        }
        else
        {
            
            if (ddlletter.SelectedIndex == 0)
            {
                Labelnew.Visible = false;
                TextBoxnew.Visible = false;
                //panelmove.Attributes.Add("style", "top: 137px; left: 400px; position: absolute; width: 405px; height: 20px;");
            }
            if (ddlletter.SelectedIndex == 1)
            {
                Labelnew.Visible = false;
                TextBoxnew.Visible = false;
                // panelmove.Attributes.Add("style", "top: 137px; left: 400px; position: absolute; width: 405px; height: 20px;");
                //letter1();
                // ModalPopupExtender1.Show();
                bindpdfletter1();
            }
            //if (ddlletter.SelectedIndex == 2)
            //{
            //    Labelnew.Visible = false;
            //    TextBoxnew.Visible = false;
            //    //panelmove.Attributes.Add("style", "top: 137px; left: 400px; position: absolute; width: 405px; height: 20px;");
            //    //letter2();
            //    bindpdfletter2();
            //    // ModalPopupExtender1.Show();
            //}
            //if (ddlletter.SelectedIndex == 3)
            //{
            //    Labelnew.Visible = true;
            //    TextBoxnew.Visible = true;
            //    //panelmove.Attributes.Add("style", "top: 137px; left: 569px; position: absolute; width: 405px; height: 20px;");
            //}
            //if (ddlletter.SelectedIndex == 4)
            //{
            //    Label4.Visible = false;
            //    letterfrm4data.Columns.Add("Workingdays");
            //    letterfrm4data.Columns.Add("Daysattend");
            //    letterfrm4data.Columns.Add("daysabst");
            //    letterfrm4data.Columns.Add("%ofattend");
            //    Labelnew.Visible = false;
            //    TextBoxnew.Visible = false;
            //    bindpdfletter3();
            //    Label4.Visible = false;
            //    //letter4();
            //    // panelmove.Attributes.Add("style", "top: 137px; left: 569px; position: absolute; width: 405px; height: 20px;");
            //    //ModalPopupExtender1.Show();
            //}
            //if (ddlletter.SelectedIndex == 5)//----------add by thirumalai----21-09-2014
            //{
            //    Labelnew.Visible = true;
            //    TextBoxnew.Visible = true;
            //    //panelmove.Attributes.Add("style", "top: 137px; left: 569px; position: absolute; width: 405px; height: 20px;");
            //}
            //added by annyutha 11/10/2014//
            //if (ddlletter.SelectedIndex == 6)
            //{
            //    Labelnew.Visible = false;
            //    TextBoxnew.Visible = false;
            //    bindpdfletterpdf6();
            //}
            if (ddlletter.SelectedIndex == 2)//added by M.SakthiPriya 02/02/2015
            {
                Labelnew.Visible = true;
                TextBoxnew.Visible = true;
                lblnote.Visible = true;
                txtnote.Visible = true;
                //panelmove.Attributes.Add("style", "top: 137px; left: 569px; position: absolute; width: 405px; height: 20px;");
            }
            //if (ddlletter.SelectedIndex == 8)
            //{//rrrr
            //    Labelnew.Visible = false;
            //    TextBoxnew.Visible = false;
            //    pnlMultiFormat.Visible = false;
            //    Pnltamilformat.Visible = false;
            //    lblMultierr.Visible = false;
            //    ksrtamilreport();
            //    ModalPopupExtender1.Show();
            //}
            //if (ddlletter.SelectedIndex == 9)
            //{//rrrr
            //    Labelnew.Visible = false;
            //    TextBoxnew.Visible = false;
            //    tamilreport2();
            //    ModalPopupExtender1.Show();
            //}
            //if (ddlletter.SelectedIndex == 10)
            //{//rrrr
            //    Labelnew.Visible = false;
            //    TextBoxnew.Visible = false;
            //    Tamilreport();
            //    ModalPopupExtender1.Show();
            //}
            //-----------------start------------------------add by thirumalai 20-09-2014
            if (ddlletter.SelectedIndex == 3)
            {//rrrr
                Labelnew.Visible = false;
                TextBoxnew.Visible = false;
                Tamilreportnew();
                //ModalPopupExtender1.Show();
            }
            //-----------------end------------------------add by thirumalai 20-09-2014
            //ddlletter.SelectedIndex = 0;
            //if (ddlletter.SelectedIndex == 12)
            //{
            //    Labelnew.Visible = false;
            //    TextBoxnew.Visible = false;
            //    bindpdfletter8();
            //}
            if (ddlletter.SelectedIndex == 4)
            {
                pnlMultiFormat.Visible = true;
                Pnltamilformat.Visible = false;
                lblMultierr.Visible = false;
                txt_ConvertTo.Text = "";
            }
            if (ddlletter.SelectedIndex == 5)
            {

                Labelnew.Visible = false;
                TextBoxnew.Visible = false;
                pnlMultiFormat.Visible = false;
                Pnltamilformat.Visible = true;
                //Tamilreport14();
                //ModalPopupExtender1.Show();
            }
        }
    }

    //added by rajasekar 12/07/2018
    protected void btnnotesave_Click(object sender, EventArgs e)
    {
        try
        {
            lblsave.Visible = false;
            DAccess2 dacces2 = new DAccess2();
            string querystu1 = " if exists (select * from note where college_code ='" + Session["collegecode"] + "' and letter_name='" + ddlletter.Text + "') update note set note=N'" + txttamilnote.Text + "'  where college_code ='" + Session["collegecode"] + "' and letter_name='" + ddlletter.Text + "' else insert into note (note,letter_name,college_code)  values (N'" + txttamilnote.Text + "','" + ddlletter.Text + "','" + Session["collegecode"] + "')";
            int saveupdate = dacces2.update_method_wo_parameter(querystu1, "Text");
            if (saveupdate == 1)
            {
                lblsave.Visible = true;
                lblsave.Text = "saved successfully";
                txttamilnote.Text = "";
            }
        }
        catch (Exception ex)
        {

        }
    }
    protected void btntamilprint_Click(object sender, EventArgs e)
    {
        lblsave.Visible = false;
        Tamilreport14();
    }

    //=======================================//

    //-----------------start------------------------add by thirumalai 20-09-2014
    public void Tamilreportnew()
    {
        try
        {

            contentDiv.InnerHtml = ""; StringBuilder html = new StringBuilder();
            
            ddlpoppage.Visible = false;
            lblpoppage.Visible = false;
            //MyImg coeimg1 = new MyImg();
            //coeimg1.ImageUrl = "principalHandler/Handler.ashx?";
            string registernumber = "";
            
            

           

            string year = "";
            sem = ddlSemYr.SelectedValue.ToString();
            if (sem == "1")
            {
                gsem3 = "I";
                year = "I";
            }
            else if (sem == "2")
            {
                gsem3 = "II";
                year = "I";
            }
            else if (sem == "3")
            {
                gsem3 = "III";
                year = "II";
            }
            else if (sem == "4")
            {
                gsem3 = "IV";
                year = "II";
            }
            else if (sem == "5")
            {
                gsem3 = "V";
                year = "III";
            }
            else if (sem == "6")
            {
                gsem3 = "VI";
                year = "III";
            }
            else if (sem == "7")
            {
                gsem3 = "VII";
                year = "IV";
            }
            else if (sem == "8")
            {
                gsem3 = "VIII";
                year = "IV";
            }
            else if (sem == "9")
            {
                gsem3 = "IX";
                year = "V";
            }
            else if (sem == "10")
            {
                gsem3 = "X";
                year = "V";
            }
            for (int j = 0; j < chklstest.Items.Count; j++)
            {
                if (chklstest.Items[j].Selected == true)
                {
                    string criteria_no = chklstest.Items[j].Value.ToString();
                    test = chklstest.Items[j].Text.ToString();

                    string examstartdate = "";
                    string examenddate = "";
                    con.Close();
                    con.Open();

                    DataTable dtdate = new DataTable();
                    string examdatequewry = "select distinct exam_date from exam_type inner join criteriaforinternal on criteriaforinternal.criteria_no=exam_type.criteria_no where criteriaforinternal.criteria_no= '" + criteria_no + "' order by exam_date ";
                    SqlDataAdapter sqld = new SqlDataAdapter(examdatequewry, con);
                    sqld.Fill(dtdate);
                    if (dtdate.Rows.Count > 0)
                    {
                        for (int i = 0; i < dtdate.Rows.Count; i++)
                        {
                            if (i == 0)
                            {
                                DateTime dtstart = Convert.ToDateTime(dtdate.Rows[i]["exam_date"]);
                                examstartdate = dtstart.ToString("dd/MM/yyyy");
                            }
                            else if (i == dtdate.Rows.Count - 1)
                            {
                                DateTime dtstart = Convert.ToDateTime(dtdate.Rows[i]["exam_date"]);
                                examenddate = dtstart.ToString("dd/MM/yyyy");
                            }
                        }
                    }
                    

                    int pagerowcount = 0;
                    int bindpagerowcount = 0;
                    string deptacr = GetFunction("select Acronym from Degree where Degree_Code='" + ddlBranch.SelectedValue.ToString() + "'");
                    for (res = 1; res < Convert.ToInt32(grdover.Rows.Count); res++)
                    {
                       
                        isval = 0;
                        
                       


                        var checkbox = grdover.Rows[res].Cells[0].FindControl("lbl_cb") as CheckBox;
                        if (checkbox.Checked)
                            isval = 1;
                        if (isval == 1)
                        {
                            if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
                            {
                                string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo,district,phoneno from collinfo where college_code=" + Session["collegecode"] + "";
                                SqlCommand collegecmd = new SqlCommand(college, con);
                                SqlDataReader collegename;
                                con.Close();
                                con.Open();
                                collegename = collegecmd.ExecuteReader();
                                if (collegename.HasRows)
                                {
                                    while (collegename.Read())
                                    {
                                        collnamenew1 = collegename["collname"].ToString();
                                        address1 = collegename["address1"].ToString();
                                        address2 = collegename["address2"].ToString();
                                        address3 = collegename["address3"].ToString();
                                        pincode = collegename["pincode"].ToString();
                                        district = collegename["district"].ToString();
                                        Phoneno = collegename["phoneno"].ToString();
                                    }
                                }
                                con.Close();
                            }
                            //attendance

                            yr_val = ddlSemYr.SelectedItem.ToString();
                            getyear();
                            //attendance

                            hat.Clear();
                            hat.Add("colege_code", Session["collegecode"].ToString());
                            ds15 = dacces.select_method("ATT_MASTER_SETTING", hat, "sp");
                            // countds = ds15.Tables[0].Rows.Count;
                            count = ds15.Tables[0].Rows.Count;
                            attcount = ds15.Tables[0].Rows.Count;

                            attmaster.Clear();
                            if (count > 0)
                            {
                                for (int lcnt = 0; lcnt < ds15.Tables[0].Rows.Count; lcnt++)
                                {
                                    attmaster.Add(ds15.Tables[0].Rows[lcnt]["LeaveCode"].ToString(), ds15.Tables[0].Rows[lcnt]["CalcFlag"].ToString());
                                }
                            }
                            
                            
                            rol_no = grdover.Rows[res].Cells[2].Text;
                            stud_roll = rol_no.ToString();
                            persentmonthcal();
                            double per_tage_day = 0;
                            double gconhrs = 0;
                            double gprehours = 0;
                            string dum_tage_date = "";
                            //per_tage_day = ((pre_present_date / per_workingdays) * 100);  //Daywise

                            per_con_hrs = per_workingdays1;
                            per_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / (per_con_hrs + tot_conduct_hr_spl_fals)) * 100);  //Hourwise
                            per_tage_hrs = Math.Round(per_tage_hrs, 2);
                            gconhrs = per_con_hrs + tot_conduct_hr_spl_fals;
                            gprehours = per_per_hrs + tot_per_hrs_spl_fals;
                            per_tage_day = per_tage_hrs;
                            if (per_tage_day > 100)
                            {
                                per_tage_day = 100;
                            }
                            dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
                            if (dum_tage_date == "NaN")
                            {
                                dum_tage_date = "0";
                            }
                            else if (dum_tage_date == "Infinity")
                            {
                                dum_tage_date = "0";
                            }

                            // attendance end

                            Label4.Visible = false;
                            
                            name = grdover.Rows[res].Cells[4].Text;
                            registernumber = GetFunction("select Reg_No from Registration where Roll_No='" + rol_no + "'");
                           // FpSpread1.Sheets[0].RowCount = 0;
                            

                            MyImg10 mi3 = new MyImg10();
                            mi3.ImageUrl = "Handler/Handler2.ashx?";

                            MyImg10 mi4 = new MyImg10();
                            mi4.ImageUrl = "Handler/Handler5.ashx?";

                            

                            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 2].Text = address1 + "," + district + "," + pincode;
                            
                            string date = DateTime.Now.ToString("dd/MM/yyyy");
                            
                           
                            


                            html.Append("<div style='height: 1000px; width: 700px; border: 0px solid black; margin-left: 5px;margin:0px;page-break-after: always;'>");

                            html.Append("<table cellspacing='0' cellpadding='0' style='width: 700px; ' border='0'>");

                            html.Append("<tr><td style='width: 50px;'></td><td style='text-align: right;height: 100px; width: 120px;' >  </td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: center;'><span style='font-size: 16px;font-weight:bold;'>" + collnamenew1 + "</span> <br><span style='font-size: 16px;font-weight:bold;'>Phone : " + Phoneno+"<br> PROGRESS REPORT </span></td><td style='text-align: right;height: 100px; width: 120px;' > </td></tr><tr><td style='width: 50px;'></td><td></td><td ></td><td style='text-align: right;' ><span style='font-size: 14px;font-weight:bold;'>DATE :" + date + " </span></td></tr> ");


                            html.Append(" </table>");

                            html.Append("<br><table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 80px;' border='0'>");

                            html.Append("<tr><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> NAME  </td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'> : " + name + "</td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> BRANCH   </td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'> : " + deptacr + " </td></tr> <tr><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> REG NO  </td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'>  : " + registernumber + "</td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> YEAR/SEM   </td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'>  : " + year + "/" + gsem3 + "</td></tr> <tr><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> MODE OF EXAM    </td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'>  : " + chklstest.SelectedItem.Text + "</td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> SEM :ODD/EVEN   </td></tr> ");

                            html.Append(" </table>");


                            html.Append("<table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 80px;' border='0'>");

                            html.Append("<tr><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'><span style='font-weight:bold;'><br> Dear Sir/Madam, </span> <span ><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp Following are the marks secured by your son/daughter in the '" + test + "' Examinations conducted from " + examstartdate + " to " + examenddate + ".   <span style='font-family: AMUDHAM;'><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp j';fs; kfd;_kfs; ele;J  Koe;j  njh;tpy; bgw;w kjpg;bgz;fspd; tptuk; j';fspd; ftdj;jpw;F bfhz;L tUfpnwhk;. </span></td></tr> ");

                            html.Append(" </table>");

                            html.Append(" </table>");

                            html.Append("<br><table style='width: 95%; margin-left: 80px; margin-top: 0px; margin-bottom: 2px; font-size: 12px;'cellpadding='5' cellspacing='0'>");
                            html.Append("<tr>");



                            html.Append("<td  style='border: thin solid #000000;' align='center'; font-weight:'bold';> Sl.No </td>");


                            html.Append("<td  style='border: thin solid #000000;' align='center'; font-weight:'bold';>Subject Name</td>");

                            html.Append("<td  style='border: thin solid #000000;' align='center'; font-weight:'bold';>Mark Obtained</td>");

                            html.Append("<td  style='border: thin solid #000000;' align='center'; font-weight:'bold';>Max Mark</td>");

                            html.Append("<td  style='border: thin solid #000000;' align='center'; font-weight:'bold';>Result</td>");
                            html.Append(" </tr>");

                            
                            DataTable dtgetmark = new DataTable();
                            con.Close();
                            con.Open();
                            string getmarkquery = "select distinct e.subject_no,sub.subject_name,sub.subject_code,max_mark,min_mark,marks_obtained,e.exam_code as excode from subjectchooser s,registration rg,exam_type e,result r, subject sub where sub.subject_no=s.subject_no and  s.subject_no=e.subject_no and s.roll_no=rg.roll_no  and e.exam_code=r.exam_code and rg.roll_no=r.roll_no and e.criteria_no='" + criteria_no + "' and r.roll_no='" + rol_no + "'";
                            SqlDataAdapter sqldap = new SqlDataAdapter(getmarkquery, con);
                            sqldap.Fill(dtgetmark);
                            int sno = 0;

                            double totalmark = 0;
                            double totalobtainedmark = 0;

                            double minmark = 0;
                            if (dtgetmark.Rows.Count > 0)
                            {
                                for (int i = 0; i < dtgetmark.Rows.Count; i++)
                                {
                                    html.Append("<tr>");
                                    string result = "Pass";
                                    Boolean resultflag = false;
                                    sno++;
                                    string marksobtained = "";
                                    

                                    html.Append("<td class='style1' style='border: thin solid #000000;");
                                    html.Append("text-align: center;'>");
                                    html.Append("" + sno.ToString() + "");
                                    html.Append("</td>");
                                    html.Append("<td class='style1' style='border: thin solid #000000;");
                                    html.Append("text-align: left;'>");
                                    html.Append("" + Convert.ToString(dtgetmark.Rows[i]["subject_name"]) + "");
                                    html.Append("</td>");


                                    
                                    marksobtained = Convert.ToString(dtgetmark.Rows[i]["marks_obtained"]);



                                    if (marksobtained != "")
                                    {
                                        if (Convert.ToDouble(marksobtained) < 0)
                                        {
                                            marksobtained = findresult(marksobtained);
                                        }
                                    }
                                    
                                    html.Append("<td class='style1' style='border: thin solid #000000;");
                                    html.Append("text-align: center;'>");
                                    html.Append("" + marksobtained + "");
                                    html.Append("</td>");
                                    html.Append("<td class='style1' style='border: thin solid #000000;");
                                    html.Append("text-align: center;'>");
                                    html.Append("" + Convert.ToString(dtgetmark.Rows[i]["max_mark"]) + "");
                                    html.Append("</td>");

                                    if (Convert.ToString(dtgetmark.Rows[i]["min_mark"]) != "")
                                    {
                                        double obtainedmark = 0;
                                        minmark = Convert.ToDouble(dtgetmark.Rows[i]["min_mark"]);
                                        if (Convert.ToString(dtgetmark.Rows[i]["marks_obtained"]) != "")
                                        {
                                            obtainedmark = Convert.ToDouble(dtgetmark.Rows[i]["marks_obtained"]);
                                            if (obtainedmark > 0)
                                            {
                                                totalobtainedmark = totalobtainedmark + obtainedmark;
                                            }
                                        }
                                        if (obtainedmark < minmark)
                                        {
                                            resultflag = true;
                                        }
                                    }
                                    double maxmark = 0;
                                    if (Convert.ToString(dtgetmark.Rows[i]["max_mark"]) != "")
                                    {
                                        maxmark = Convert.ToDouble(dtgetmark.Rows[i]["max_mark"]);
                                        totalmark = totalmark + maxmark;
                                    }
                                    if (resultflag)
                                    {
                                        result = "Fail";
                                    }
                                    

                                    html.Append("<td class='style1' style='border: thin solid #000000;");
                                    html.Append("text-align: center;'>");
                                    html.Append("" + result + "");
                                    html.Append("</td>");

                                    html.Append(" </tr>");
                                }
                                

                                

                                html.Append("<tr>");
                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: center;'>");
                                html.Append(" ");
                                html.Append("</td>");
                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: center;'>");
                                html.Append("Total");
                                html.Append("</td>");
                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: center;'>");
                                html.Append(""+totalobtainedmark.ToString()+"");
                                html.Append("</td>");
                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: center;'>");
                                html.Append("" + totalmark.ToString() + "");
                                html.Append("</td>");
                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: center;'>");
                                html.Append(" ");
                                html.Append("</td>");
                                html.Append(" </tr>");

                            }

                            html.Append(" </table>");
                            

                            html.Append("<br><table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 80px;' border='0'>");

                            html.Append("<tr><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> Pass Mark /  </td><td style='font-size: 14px; font-family: AMUDHAM;  border: 0px solid black; text-align: left;'> njh;r;rp kjpg;bgz;:</td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'>" + Convert.ToString(minmark) + " </td></tr><tr><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> Attendance % is /  </td><td style='font-size: 14px; font-family: AMUDHAM;  border: 0px solid black; text-align: left;'> tUif tpGf;fhL </td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> "+ Convert.ToString(per_tage_hrs)+"  </td></tr> <tr><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> Academic Performance    </td><td style='font-size: 14px; font-family: AMUDHAM;  border: 0px solid black; text-align: left;'>  : fy;tp bray;ghL </td><td></td></tr> ");

                            html.Append(" </table>");

                            if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
                            {
                                string college = "select * from PeriodAttndSchedule where  degree_code=" + ddlBranch.SelectedValue.ToString() + " and semester=" + ddlSemYr.SelectedValue.ToString() + "";
                                SqlCommand collegecmd = new SqlCommand(college, con);
                                SqlDataReader attendance;
                                con.Close();
                                con.Open();
                                attendance = collegecmd.ExecuteReader();
                                if (attendance.HasRows)
                                {
                                    while (attendance.Read())
                                    {
                                        attendanceper = attendance["percent_eligible_for_exam"].ToString();
                                        // address1 = attendance["address1"].ToString();
                                    }
                                }
                                con.Close();
                            }

                            


                            html.Append("<table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 80px;' border='0'>");

                            html.Append("<tr><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'><span style='font-weight:bold;'><br> If the attendance is below " + attendanceper.ToString() + " % your ward will not be eligible to appear for the university examination </span> <span style='font-weight:bold;font-family: AMUDHAM;'><br>tUif tpGf;fhL " + attendanceper.ToString() + " f;Fk; Fiwthf ,Ue;jhy; mk;khzth; gUtj; njh;tpid vGj mDkjpf;fg;glkhl;lhh;.  </span><span style='font-weight:bold;font-family: Book Antiqua;'><br> Parents are requested to sign and return this report to the class advisor with their feed back with out fail. </span> <span style='font-family: AMUDHAM;'><br>bgw;nwhh;fs; ,e;j njh;r;rp tpguj;jpy; ifbahg;gkpl;L tFg;ghrphpahplk; xg;gilf;FkhW nfl;Lf;bfhs;fpnwhk;.  </span><span style='font-weight:bold;font-family: Book Antiqua;'><br> You are requested to meet the CLASS ADVISOR/HOD/PRINCIPAL without fail on or before: </span> <span style='font-family: AMUDHAM;'><br>,J bjhlh;ghf j';fs; tFg;ghrphpah;/Jizj;jiyth;/Kjy;th; ----------------------md;W nehpy; te;J re;jpf;FkhW nfl;Lf;bfhs;fpnwhk;.  </span><span style='font-weight:bold;font-family: Book Antiqua;'> ");

                            if (txtnotes.Text != "")
                            {
                                
                                html.Append("<br>Notes:" + txtnotes.Text.ToString() + "");

                            }
                            

                            //CLASS ADVISOR SIGN
                            string find_staff_code1 = "";
                            SqlDataAdapter da_find_staffcode1;
                            DataSet ds_find_staffcode1;
                            find_staff_code1 = "select top 1 class_advisor from semester_schedule where class_advisor<>'' and degree_code=" + ddlBranch.SelectedValue.ToString() + " and batch_year=" + ddlBatch.SelectedValue.ToString() + " and semester=" + ddlSemYr.SelectedValue.ToString() + "";
                            da_find_staffcode1 = new SqlDataAdapter(find_staff_code1, con);
                            con.Close();
                            con.Open();
                            ds_find_staffcode1 = new DataSet();
                            da_find_staffcode1.Fill(ds_find_staffcode1);
                            if (ds_find_staffcode1.Tables[0].Rows.Count > 0)
                            {
                                string[] spl_classadv_code1 = (ds_find_staffcode1.Tables[0].Rows[0]["class_advisor"].ToString()).Split(',');
                                Session["class_adv_staffcode"] = spl_classadv_code1[0].ToString();

                                MyImg12 coeimg2 = new MyImg12();
                                coeimg2.ImageUrl = "Handler/Class_Advisor.ashx?id=" + Session["class_adv_staffcode"];
                                //=============class advisor sign
                                
                            }
                            else
                            {
                                Session["class_adv_staffcode"] = "";
                            }

                            //
                            // HOD SIGN

                            string find_staff_codex = "";
                            SqlDataAdapter da_find_staffcodex;
                            DataSet ds_find_staffcodex;
                            con.Close();
                            con.Open();

                            find_staff_codex = "select top 1 staff_code from staffmaster where  staff_code=(select top 1 head_of_dept from department where dept_code in (select distinct dept_code from degree where degree_code='" + ddlBranch.SelectedValue.ToString() + "' and college_code='" + Session["collegecode"] + "'))";

                            da_find_staffcodex = new SqlDataAdapter(find_staff_codex, con);

                            ds_find_staffcodex = new DataSet();
                            da_find_staffcodex.Fill(ds_find_staffcodex);
                            if (ds_find_staffcodex.Tables[0].Rows.Count > 0)
                            {
                                Session["class_hod_staffcode"] = ds_find_staffcodex.Tables[0].Rows[0]["staff_code"].ToString();
                                MyImg12 coeimg3 = new MyImg12();
                                coeimg3.ImageUrl = "Handler/Hod.ashx?id=" + Session["class_hod_staffcode"];
                                
                            }
                            else
                            {
                                Session["class_hod_staffcode"] = "";
                            }

                            
                         
                           
                            
                            
                            

                            html.Append("<br><br><br>CLASS ADVISOR&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp HOD&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp PRINCIPAL<br><br>FEED BACK FROM PARENTS /&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp </span><span style='font-family: AMUDHAM;'><br>bgw;nwhhpd; fUj;J :  </span><span style='font-weight:bold;font-family: Book Antiqua;'><br><br>-------------------------------------------------------------cut here------------------------------------------------------<br>Kindly acknowledge the receipt of this communication with your signature and return the same to the college by return of post<br> Name: " + name +" <br> Roll No: " + registernumber+"&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp   Signature of Parent/Guardian <br> Class: " + ddlBatch.SelectedItem + " " + ddlDegree.SelectedItem + "-" + ddlBranch.SelectedItem + " Sem-" + ddlSemYr.SelectedItem +"");

                            html.Append("</span></td></tr> ");

                            html.Append(" </table>");

                            html.Append("</div>");


                           
                            

                            contentDiv.InnerHtml = html.ToString();
                            contentDiv.Visible = true;

                            ScriptManager.RegisterStartupScript(this, GetType(), "btn_print", "PrintDiv();", true);
                            // FpSpread1.Sheets[0].PageSize = FpSpread1.Sheets[0].RowCount;
                        }
                        
                    }//
                }
            }
        }
        catch (Exception ex)
        {

        }
    }

   

    //-----------------end------------------------add by thirumalai 20-09-2014


    //added by rajasekar 12/07/2018

    public void Tamilreport14()
    {
        try
        {
            contentDiv.InnerHtml = ""; StringBuilder html = new StringBuilder();
            DataSet ds = new DataSet();

            string odd_r_even = "";
            ddlpoppage.Visible = false;
            lblpoppage.Visible = false;
            DataTable dtgetmark = new DataTable();
            string registernumber = "";
            
            int[] width = new int[] { 30, 100, 150, 100, 100, 100 };
            

            string year = "";
            sem = ddlSemYr.SelectedValue.ToString();

            sec = "";
            if (ddlSec.Items.Count > 0)
            {
                if ((ddlSec.Enabled == true && ddlSec.Text != "-1"))
                {
                    sec = ddlSec.SelectedValue;
                }
            }
            odd_r_even = Convert.ToString(int.Parse(sem) % 2);
            if (odd_r_even == "0")
                odd_r_even = "EVEN";
            else
                odd_r_even = "ODD";
            if (sem == "1")
            {
                gsem3 = "I";
                year = "I";
            }
            else if (sem == "2")
            {
                gsem3 = "II";
                year = "I";
            }
            else if (sem == "3")
            {
                gsem3 = "III";
                year = "II";
            }
            else if (sem == "4")
            {
                gsem3 = "IV";
                year = "II";
            }
            else if (sem == "5")
            {
                gsem3 = "V";
                year = "III";
            }
            else if (sem == "6")
            {
                gsem3 = "VI";
                year = "III";
            }
            else if (sem == "7")
            {
                gsem3 = "VII";
                year = "IV";
            }
            else if (sem == "8")
            {
                gsem3 = "VIII";
                year = "IV";
            }
            else if (sem == "9")
            {
                gsem3 = "IX";
                year = "V";
            }
            else if (sem == "10")
            {
                gsem3 = "X";
                year = "V";
            }
            string acr = "";
            string collcode = string.Empty;
            string phonenum = string.Empty;
            string examstartdate = "";
            string examenddate = "";
            con.Close();
            con.Open();
            
            int pagerowcount = 0;
            int bindpagerowcount = 0;
            string deptacr = GetFunction("select Acronym from Degree where Degree_Code='" + ddlBranch.SelectedValue.ToString() + "'");
            if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
            {
                string strquery = "Select * from Collinfo where college_code=" + Convert.ToString(Session["collegecode"]) + "";
                strquery += " select linkvalue from New_InsSettings where LinkName='TC_SerialNoSettings' and college_code='" + Convert.ToString(Session["collegecode"]) + "'";
                ds11.Clear();
                ds11 = d22.select_method_wo_parameter(strquery, "Text");
                string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo,district,college_code,phoneno,acr from collinfo where college_code=" + Session["collegecode"] + "";
                SqlCommand collegecmd = new SqlCommand(college, con);
                SqlDataReader collegename;
                con.Close();
                con.Open();
                collegename = collegecmd.ExecuteReader();
                if (collegename.HasRows)
                {
                    while (collegename.Read())
                    {
                        collnamenew1 = collegename["collname"].ToString();
                        address1 = collegename["address1"].ToString();
                        address2 = collegename["address2"].ToString();
                        address3 = collegename["address3"].ToString();
                        pincode = collegename["pincode"].ToString();
                        district = collegename["district"].ToString();
                        collcode = collegename["college_code"].ToString();
                        phonenum = collegename["phoneno"].ToString();
                        acr = Convert.ToString(collegename["acr"]);

                    }
                }
                con.Close();
            }
            //attendance
            yr_val = ddlSemYr.SelectedItem.ToString();
            getyear();
            //attendance
            int cycleflag = 0;
            bool studflag = false;
            for (res = 1; res < Convert.ToInt32(grdover.Rows.Count); res++)
            {
                isval = 0;
                var checkbox = grdover.Rows[res].Cells[0].FindControl("lbl_cb") as CheckBox;
                if (checkbox.Checked)
                    isval = 1;
                int status = 0;
                if (isval == 1)
                {
                    studflag = true;
                    string criteria_no = getAllSelectedItems(chklstest, "Values"); ;
                    test = getAllSelectedItems(chklstest, "items");
                    DataTable dtdate = new DataTable();
                    string examdatequewry = "select distinct exam_date from exam_type inner join criteriaforinternal on criteriaforinternal.criteria_no=exam_type.criteria_no where criteriaforinternal.criteria_no in(" + criteria_no + ") order by exam_date ";
                    SqlDataAdapter sqld = new SqlDataAdapter(examdatequewry, con);
                    sqld.Fill(dtdate);

                    hat.Clear();
                    hat.Add("colege_code", Session["collegecode"].ToString());
                    ds15 = dacces.select_method("ATT_MASTER_SETTING", hat, "sp");
                    count = ds15.Tables[0].Rows.Count;
                    attcount = ds15.Tables[0].Rows.Count;
                    attmaster.Clear();
                    if (count > 0)
                    {
                        for (int lcnt = 0; lcnt < ds15.Tables[0].Rows.Count; lcnt++)
                        {
                            attmaster.Add(ds15.Tables[0].Rows[lcnt]["LeaveCode"].ToString(), ds15.Tables[0].Rows[lcnt]["CalcFlag"].ToString());
                        }
                    }
                    rol_no = grdover.Rows[res].Cells[2].Text;
                    
                    stud_roll = rol_no.ToString();
                    persentmonthcal();
                    double per_tage_day = 0;
                    double gconhrs = 0;
                    double gprehours = 0;
                    string dum_tage_date = "";
                    per_con_hrs = per_workingdays1;
                    per_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / (per_con_hrs + tot_conduct_hr_spl_fals)) * 100);  //Hourwise
                    per_tage_hrs = Math.Round(per_tage_hrs, 2);
                    gconhrs = per_con_hrs + tot_conduct_hr_spl_fals;
                    gprehours = per_per_hrs + tot_per_hrs_spl_fals;
                    per_tage_day = per_tage_hrs;
                    if (per_tage_day > 100)
                    {
                        per_tage_day = 100;
                    }
                    dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
                    if (dum_tage_date == "NaN")
                    {
                        dum_tage_date = "0";
                    }
                    else if (dum_tage_date == "Infinity")
                    {
                        dum_tage_date = "0";
                    }
                    // attendance end
                    Label4.Visible = false;
                    name = grdover.Rows[res].Cells[4].Text;
                    registernumber = GetFunction("select Reg_No from Registration where Roll_No='" + rol_no + "'");


                    name = grdover.Rows[res].Cells[4].Text;


                   

                    

                    string photo = "";
                    byte[] photoid = new byte[0];
                    if (ds11.Tables[0].Rows.Count > 0)
                    {
                        if (ds11.Tables[0].Rows[0]["logo1"] != null && Convert.ToString(ds11.Tables[0].Rows[0]["logo1"]) != "")
                        {
                            photoid = (byte[])(ds11.Tables[0].Rows[0]["logo1"]);
                            if (photoid.Length > 0)
                            {
                                photo = "'data:image/png;base64," + Convert.ToBase64String(photoid) + "'";
                            }
                        }
                    }
                    string year1 = TextBox2.Text.ToString();
                    string[] split1 = year1.Split(new char[] { '/' });
                    string year2 = split1[2].ToString();

                    Boolean resultflag = false;
                    double maxc = 0;
                    string subjname = "";
                    string subjcode = "";
                    string result = "";
                    string checkmarks = "";
                    string getmark = "";
                    DataTable dtMarks = new DataTable();
                    dtMarks.Columns.Clear();
                    dtMarks.Rows.Clear();
                    DataRow drow;
                    DataColumn dcol = new DataColumn();
                    dcol = new DataColumn();
                    dcol.ColumnName = "Sl.No";
                    dtMarks.Columns.Add(dcol);
                    dcol = new DataColumn();
                    dcol.ColumnName = "Subject Names";
                    dtMarks.Columns.Add(dcol);
                    string colName;
                    string minMarks = "";
                    string[] minMark = new string[chklstest.Items.Count];
                    int colincrement = 0;
                    sno = 0;
                    for (int j = 0; j < chklstest.Items.Count; j++)
                    {
                        if (chklstest.Items[j].Selected == true)
                        {
                            criteria_no = chklstest.Items[j].Value.ToString();
                            test = chklstest.Items[j].Text.ToString();
                            colName = test;

                            double totalmark = 0;
                            double totalobtainedmark = 0;
                            double minmark1 = 0;
                            dcol = new DataColumn();
                            dcol.ColumnName = test;
                            dtMarks.Columns.Add(dcol);
                            string selectmark = "select distinct e.subject_no,sub.subject_name,sub.subject_code,max_mark,min_mark,marks_obtained from subjectchooser s,registration rg,exam_type e,result r, subject sub where sub.subject_no=s.subject_no and  s.subject_no=e.subject_no and s.roll_no=rg.roll_no  and e.exam_code=r.exam_code and rg.roll_no=r.roll_no and e.criteria_no='" + criteria_no + "' and r.roll_no='" + rol_no + "'";
                            hat.Clear();
                            hat.Add("rollnum", rol_no.ToString());
                            hat.Add("criteriano", criteria_no.ToString());
                            ds = dacces.select_method(selectmark, hat, "cmd");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                for (int dscount = 0; dscount < ds.Tables[0].Rows.Count; dscount++)
                                {
                                    result = "Pass";

                                    string marksobtained = "";
                                    marksobtained = Convert.ToString(ds.Tables[0].Rows[dscount]["marks_obtained"]);
                                    if (marksobtained != "")
                                    {
                                        if (Convert.ToDouble(marksobtained) < 0)
                                        {
                                            marksobtained = findresult(marksobtained);
                                        }
                                    }
                                    int max;
                                    bool maxflag = int.TryParse(txt_ConvertTo.Text, out max);
                                    double multiply;
                                    if (maxflag)
                                    {
                                        if (txt_ConvertTo.Text != "" || txt_ConvertTo.Text != null)
                                        {
                                            ConvertedMark(txt_ConvertTo, Convert.ToString(ds.Tables[0].Rows[dscount]["max_mark"]), ref marksobtained, ref minMarks);
                                        }
                                    }
                                    if (Convert.ToString(ds.Tables[0].Rows[dscount]["min_mark"]) != "")
                                    {
                                        double obtainedmark = 0;
                                        minMark[colincrement] = Convert.ToString(ds.Tables[0].Rows[dscount]["min_mark"]);
                                        minmark1 = Convert.ToDouble(ds.Tables[0].Rows[dscount]["min_mark"]);
                                        if (Convert.ToString(ds.Tables[0].Rows[dscount]["marks_obtained"]) != "")
                                        {
                                            obtainedmark = Convert.ToDouble(ds.Tables[0].Rows[dscount]["marks_obtained"]);
                                            if (obtainedmark > 0)
                                            {
                                                totalobtainedmark = totalobtainedmark + Convert.ToDouble(marksobtained);
                                            }
                                        }
                                        if (obtainedmark < minmark1)
                                        {
                                            resultflag = true;
                                        }
                                    }
                                    double maxmark = 0;
                                    if (Convert.ToString(ds.Tables[0].Rows[dscount]["max_mark"]) != "")
                                    {
                                        maxmark = Convert.ToDouble(ds.Tables[0].Rows[dscount]["max_mark"]);
                                        totalmark = totalmark + maxmark;
                                    }
                                    if (resultflag)
                                    {
                                        result = "Fail";
                                    }
                                    if (status == 0)
                                    {
                                        sno++;
                                        subjname = ds.Tables[0].Rows[dscount]["subject_name"].ToString();
                                        drow = dtMarks.NewRow();
                                        drow[0] = sno.ToString();
                                        drow[1] = subjname;
                                        drow[2] = marksobtained;
                                        dtMarks.Rows.Add(drow);
                                    }
                                    else
                                    {
                                        for (int rr = 0; rr < sno; rr++)
                                        {
                                            if (dtMarks.Rows[rr][1].ToString() == ds.Tables[0].Rows[dscount]["subject_name"].ToString())
                                            {
                                                dtMarks.Rows[rr][dtMarks.Columns.Count - 1] = marksobtained;
                                            }
                                        }
                                    }
                                }
                                //if (status == 0)
                                //{
                                //    drow = dtMarks.NewRow();
                                //    drow[1] = "Total";
                                //    drow[2] = totalobtainedmark.ToString();
                                //    dtMarks.Rows.Add(drow);
                                //}
                                //else
                                //{
                                //    dtMarks.Rows[dtMarks.Rows.Count - 1][dtMarks.Columns.Count - 1] = totalobtainedmark.ToString();
                                //}
                            }
                            colincrement++;
                            for (int r = 0; r < dtMarks.Rows.Count; r++)
                            {
                                for (int c = 3; c < dtMarks.Columns.Count; c++)
                                {
                                    if (dtMarks.Rows[r][c].ToString() == "" || dtMarks.Rows[r][c].ToString() == null)
                                    {
                                        dtMarks.Rows[r][c] = "--";
                                    }
                                }
                            }
                            status = 1;
                        }
                    }

                    //string photo = "Handler/Handler2.ashx?";
                    //string photo1 = "Handler/Handler5.ashx?";


                    html.Append("<div style='height: 1000px; width: 700px; border: 0px solid black; margin-left: 5px;margin:0px;page-break-after: always;'>");

                    html.Append("<table cellspacing='0' cellpadding='0' style='width: 700px; ' border='0'>");

                    html.Append("<tr><td style='width: 100px;'></td><td style='text-align: right;' > <img src=" + photo + " alt='' style='height: 100px; width: 120px;' /></td><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: center;'><span style='font-size: Large;font-weight:bold;'>" + collnamenew1 + "</span> <br><span style='font-size: medium;'> Institution code:" + acr + "<br>" + address1 + " , " + district + " , - " + pincode + ",<br>" + phonenum + " <br> மாணவா் தேர்வு மதிப்பெண்/வருகைப்பதிவு கடிதம் <br> அலகுத்தேர்வு/மாதிரித்தேர்வு </span></td></tr> ");

                    html.Append(" </table> <br>");


                    html.Append("<table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 125px;' border='0'>");

                    html.Append("<tr><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'><span style='font-size: 12px;'><br> மாணவா்/மாணவி பெயர்  </td><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'>: " + name + "</td></tr><tr><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'><span style='font-size: 12px;'><br> கல்வி ஆண்டு  </td><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'>: " + year2 + " </td></tr><tr><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'><span style='font-size: 12px;'><br> தேர்வு பதிவு எண் </td><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'>: " + registernumber + "</td></tr><tr><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'><span style='font-size: 12px;'><br> சுழல் எண் </td><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'>: " + rol_no + "</td></tr><tr><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'> <span style='font-size: 12px;'><br>பருவம் மற்றும் பாடப்பிரிவு </td><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'>:   Sem-" + ddlSemYr.SelectedItem.Text + "/" + ddlDegree.SelectedItem.Text + "-" + ddlBranch.SelectedItem.Text + "</td></tr><tr><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'> <span style='font-size: 12px;'><br>வருகைப்பதிவு காலம் </td><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'>: " + TextBox2.Text + " லிருந்து" + TextBox1.Text + " வரை</td></tr><tr><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'><span style='font-size: 12px;'><br> வகுப்புகள் நடந்த மொத்த <மணித்துளிகள்/நாட்கள்> </td><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'>: " + Convert.ToString(per_con_hrs + tot_conduct_hr_spl_fals) + "</td></tr><tr><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'><span style='font-size: 12px;'><br> மாணவா் வருகை புரிந்தது </td><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'>: " + Convert.ToString(per_per_hrs + tot_per_hrs_spl_fals) + " <மணித்துளிகள்/நாட்கள்>. சதவீதம் " + dum_tage_date.ToString() + "%</td></tr><tr><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'><span style='font-size: 12px;'><br><br><br> மதிப்பெண்கள் விவரம் :</td></tr> ");

                    html.Append(" </table>");

                    html.Append("<table style='width: 95%; margin-left: 125px; margin-top: 0px; margin-bottom: 2px; font-size: medium;'cellpadding='5' cellspacing='0'>");

                    html.Append("<tr>");
                    for (int c = 0; c < dtMarks.Columns.Count; c++)
                    {
                        html.Append("<td style='border: thin solid #000000;' align='center'  class='style1'>" + dtMarks.Columns[c].ColumnName + "</td>");
                    }

                    html.Append(" </tr>");





                    for (int r = 1; r < dtMarks.Rows.Count + 1; r++)
                    {
                        html.Append("<tr>");
                        int ms = 0;
                        for (int c = 0; c < dtMarks.Columns.Count; c++)
                        {
                            html.Append("<td class='style1' style='border: thin solid #000000;");
                            int dtObtmrk, min;
                            bool dom = int.TryParse(dtMarks.Rows[r - 1][c].ToString(), out dtObtmrk);
                            //if(txt_ConvertTo.Text==null || txt_ConvertTo.Text=="")

                            bool m = int.TryParse(minMarks, out min);
                            if (c == 1)
                                html.Append("text-align: center;'>");
                            //table.Cell(r, c).SetContentAlignment(ContentAlignment.MiddleLeft);
                            else
                                html.Append("text-align: center;'>");
                            //table.Cell(r, c).SetContentAlignment(ContentAlignment.MiddleCenter);
                            //html.Append(""+dtMarks.Rows[r - 1][c].ToString()+"");
                            //table.Cell(r, c).SetContent(dtMarks.Rows[r - 1][c].ToString());
                            html.Append("<span ");
                            if (c > 1 && dtMarks.Rows[r - 1][c] != "--")
                            {

                                if (dtMarks.Rows[r - 1][c] == "RAA" || dtMarks.Rows[r - 1][c] == "AAA" || dtMarks.Rows[r - 1][c] == "EOD" || dtMarks.Rows[r - 1][c] == "EL" || dtMarks.Rows[r - 1][c] == "ML" || dtMarks.Rows[r - 1][c] == "SOD" || dtMarks.Rows[r - 1][c] == "NJ" || dtMarks.Rows[r - 1][c] == "HS" || dtMarks.Rows[r - 1][c] == "OD" || dtMarks.Rows[r - 1][c] == "NSS" || dtMarks.Rows[r - 1][c] == "S" || dtMarks.Rows[r - 1][c] == "PP" || dtMarks.Rows[r - 1][c] == "OOD" || dtMarks.Rows[r - 1][c] == "L" || dtMarks.Rows[r - 1][c] == "NCC" || dtMarks.Rows[r - 1][c] == "SYOD" || dtMarks.Rows[r - 1][c] == "COD" || dtMarks.Rows[r - 1][c] == "LA")
                                {
                                    html.Append("style='color:red'");
                                    //table.Cell(r, c).SetForegroundColor(Color.Red);
                                }
                                if (dom || m)
                                {

                                    if (dtObtmrk < min)
                                        html.Append("style='color:red'");
                                    //table.Cell(r, c).SetForegroundColor(Color.Red);
                                    if (txt_ConvertTo.Text == null || txt_ConvertTo.Text == "")
                                    {
                                        if (dtObtmrk < int.Parse(minMark[ms]))
                                            html.Append("style='color:red'");
                                        //table.Cell(r, c).SetForegroundColor(Color.Red);
                                        ms++;
                                    }
                                }

                            }
                            html.Append(">");
                            html.Append("" + dtMarks.Rows[r - 1][c].ToString() + "");
                            //table.Cell(r, c).SetFont(Fontsmall);
                            html.Append("</span></td>");
                        }
                        html.Append(" </tr>");
                    }

                    html.Append(" </table>");


                    html.Append("<table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 125px;' border='0'>");

                    html.Append("<tr><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'> குறிப்பு:  <br><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<span style='font-size: 26px; font-weight:bold;'>.</span><span style='font-size: 12px;'>&nbsp&nbsp&nbsp&nbspஅலகுத்தேர்வுகள் அதிகபட்ச மதிப்பெண் 100 தேர்ச்சிக்கான குறைந்த பட்ச மதிப்பெண் 50. </span><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<span style='font-size: 26px; font-weight:bold;'>.</span><span style='font-size: 12px;'>&nbsp&nbsp&nbsp&nbsp 75% க்கு குறைவான வருகைப்பதிவு உள்ளவர்கள் வாரியத்தேர்வு எழுத அனுமதிக்கப்படமாட்டார்கள்.</span><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<span style='font-size: 26px; font-weight:bold;'>.</span><span style='font-size: 12px;'>&nbsp&nbsp&nbsp&nbspசிகப்புக் கோடிட்ட பாடத்தைப் பற்றி அறிய வகுப்பு ஆசிரியர், துறைத் தலைவர் மற்றும் முதல்வரை </span><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp</span><span style='font-size: 12px;'>&nbsp&nbsp&nbsp&nbsp&nbspநேரில் அணுகவும். தொலைபேசியில் தொடர்பு கொள்வதை தவிர்க்கவும். </span>");





                    string strquery1 = "Select * from note where college_code=" + Convert.ToString(Session["collegecode"]) + " and letter_name='" + ddlletter.SelectedItem + "'";

                    ds22.Clear();
                    ds22 = da22.select_method_wo_parameter(strquery1, "Text");
                    if (ds22.Tables[0].Rows.Count > 0)
                    {

                        html.Append("<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<span style='font-size: 26px; font-weight:bold;'>.</span><span style='font-size: 12px;'>&nbsp&nbsp&nbsp&nbsp " + Convert.ToString(ds22.Tables[0].Rows[0]["note"]) + "</span>");


                    }




                    html.Append("<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<span style='font-size: 26px; font-weight:bold;'>.</span><span style='font-size: 12px;'>&nbsp&nbsp&nbsp&nbspஆசிரியர் குறிப்பு: </span></td>");

                    html.Append(" </table>");

                    html.Append("<br><br><br><br><table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 125px;' border='0'>");
                    html.Append("<tr><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'> வகுப்பு ஆசிரியர்</td><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'> துறைத்தலைவர்</td><td style='font-size: 12px; font-family: Times New Roman;  border: 0px solid black; text-align: left;'> முதல்வர்</td></tr>");

                    html.Append(" </table>");

                    html.Append("</div>");

                    html.Append("<br>");
                    contentDiv.InnerHtml = html.ToString();
                    contentDiv.Visible = true;

                    ScriptManager.RegisterStartupScript(this, GetType(), "btn_print", "PrintDiv();", true);

                    //மாணவா்/மாணவி பெயர்
                    //கல்வி ஆண்டு
                    //தேர்வு பதிவு எண்
                    //சுழல் எண்
                    //பருவம் மற்றும் பாடப்பிரிவு
                    //வருகைப்பதிவு காலம் லிருந்து வரை
                    //வகுப்புகள் நடந்த மொத்த மணித்துளிகள் நாட்கள் 
                    //மாணவா் வருகை புரிந்தது மணித்துளிகள் நாட்கள் சதவீதம்
                    //மதிப்பெண்கள் விவரம்
                    //வ
                    //எண்
                    //பாடங்களின் பெயர்
                    //குறிப்பு
                    //அலகுத்தேர்வுகள் அதிகபட்ச மதிப்பெண் தேர்ச்சிக்கான குறைந்த பட்ச மதிப்பெண். 
                    //க்கு குறைவான வருகைப்பதிவு உள்ளவர்கள் வாரியத்தேர்வு எழுத அனுமதிக்கப்படமாட்டார்கள்.
                    //சிகப்புக் கோடிட்ட பாடத்தைப் பற்றி அறிய வகுப்பு ஆசிரியர், துறைத் தலைவர் மற்றும் முதல்வரை நேரில் அணுகவும். தொலைபேசியில் தொடர்பு கொள்வதை தவிர்க்கவும்.
                    //ஆசிரியர் குறிப்பு:
                    //வகுப்பு ஆசிரியர்  துறைத்தலைவர் முதல்வர் 
                    //நடைபெற்ற மொத்த<வகுப்புகள்/நாட்கள்>
                    //மாணவா் வருகை தந்த<வகுப்புகள்/நாட்கள்>
                    //விழுக்காடு

                }
            }

        }
        catch
        {
        }
    }


    //=======================================//



    //public void pop_page_function1()
    //{
    //    string poppage_value = ddlpoppage.SelectedValue.ToString();//spilt the poppage selected value
    //    rol_no = poppage_value.ToString();

    //    FpEntry.SaveChanges();
    //    FpSpread1.SaveChanges();
    //    if (ddlBranch.Text != "")
    //    {
    //        branch = ddlBranch.SelectedItem.Text;
    //    }
    //    if (ddlDegree.Text != "")
    //    {
    //        degree = ddlDegree.SelectedItem.Text;
    //    }
    //    sem = ddlSemYr.SelectedValue;
    //    sec = ddlSec.SelectedValue;
    //    //if (ddlTest.Text != "")
    //    //{
    //    //    test = chklstest.SelectedItem.Text;
    //    //}
    //    if (ddlSemYr.Text != "")
    //    {
    //        semester = Convert.ToInt32(ddlSemYr.SelectedValue);
    //    }
    //    frdate = TextBox2.Text;
    //    todate = TextBox1.Text;

    //    colege_code = Session["collegecode"].ToString();
    //    degree1 = ddlBranch.SelectedValue;
    //    FpSpread1.Sheets[0].RowCount = 0;
    //    Label4.Visible = true;


    //    FpSpread1.Visible = true;
    //    FpSpread1.Sheets[0].PageSize = 30;
    //    FpSpread1.Sheets[0].RowHeader.Visible = false;
    //    FpSpread1.Sheets[0].DefaultStyle.Font.Name = "Book Antique";
    //    FpSpread1.Sheets[0].DefaultStyle.Font.Bold = false;
    //    FpSpread1.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
    //    FpSpread1.Sheets[0].ColumnHeader.Visible = false;
    //    for (int j = 0; j < chklstest.Items.Count; j++)
    //    {
    //        if (chklstest.Items[j].Selected == true)
    //        {
    //            string criteria_no = chklstest.Items[j].Value.ToString();
    //            test = chklstest.Items[j].Text.ToString();
    //            //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //            hat.Clear();
    //            hat.Add("college_code", Session["collegecode"].ToString());
    //            hat.Add("form_name", "CAMLetter.aspx");
    //            dsprint = dacces.select_method("PROC_PRINT_MASTER_SETTINGS", hat, "sp");
    //            if (dsprint.Tables[0].Rows.Count > 0)
    //            {
    //                if (dsprint.Tables[0].Rows[0]["college_name"].ToString() != string.Empty)
    //                {
    //                    collnamenew1 = dsprint.Tables[0].Rows[0]["college_name"].ToString();
    //                }
    //                if (dsprint.Tables[0].Rows[0]["address1"].ToString() != "")
    //                {
    //                    address1 = dsprint.Tables[0].Rows[0]["address1"].ToString();
    //                    address = address1;
    //                }
    //                if (dsprint.Tables[0].Rows[0]["address2"].ToString() != "")
    //                {
    //                    address2 = dsprint.Tables[0].Rows[0]["address2"].ToString();
    //                    address = address1 + "-" + address2;
    //                }
    //                if (dsprint.Tables[0].Rows[0]["address3"].ToString() != "")
    //                {
    //                    district = dsprint.Tables[0].Rows[0]["address3"].ToString();
    //                    address = address1 + "-" + address2 + "-" + district;
    //                }

    //                if (dsprint.Tables[0].Rows[0]["phoneno"].ToString() != "")
    //                {
    //                    Phoneno = dsprint.Tables[0].Rows[0]["phoneno"].ToString();
    //                    phnfax = "Phone :" + " " + Phoneno;
    //                }
    //                if (dsprint.Tables[0].Rows[0]["faxno"].ToString() != "")
    //                {
    //                    Faxno = dsprint.Tables[0].Rows[0]["faxno"].ToString();
    //                    phnfax = phnfax + "Fax  :" + " " + Faxno;
    //                }

    //                if ((dsprint.Tables[0].Rows[0]["email"].ToString() != ""))
    //                {
    //                    email = "E-Mail:" + dsprint.Tables[0].Rows[0]["email"].ToString();
    //                }
    //                if (dsprint.Tables[0].Rows[0]["website"].ToString() != "")
    //                {
    //                    email = email + " " + "Web Site:" + dsprint.Tables[0].Rows[0]["website"].ToString();
    //                }

    //            }
    //            else if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //            {
    //                string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo from collinfo where college_code=" + Session["collegecode"] + "";
    //                SqlCommand collegecmd = new SqlCommand(college, con);
    //                SqlDataReader collegename;
    //                con.Close();
    //                con.Open();
    //                collegename = collegecmd.ExecuteReader();
    //                if (collegename.HasRows)
    //                {
    //                    while (collegename.Read())
    //                    {
    //                        collnamenew1 = collegename["collname"].ToString();
    //                        address1 = collegename["address1"].ToString();
    //                        address2 = collegename["address2"].ToString();
    //                        address3 = collegename["address3"].ToString();
    //                        pincode = collegename["pincode"].ToString();
    //                    }
    //                }
    //                con.Close();
    //            }
    //            //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@



    //            //   rol_no = FpEntry.Sheets[0].Cells[res_val-1, 1].Text;

    //            string Toaddress = "select parent_name as pname,parent_addressP as padd1,streetc as padd2,parent_pincodeP as ppin,districtc as pdistrict from applyn where app_no in (select app_no from registration where roll_no='" + rol_no + "')";
    //            SqlCommand Toaddcmd = new SqlCommand(Toaddress, con);
    //            SqlDataReader Toaddreader;
    //            con.Close();
    //            con.Open();
    //            string toaddname = "";
    //            string toadd1 = "";
    //            string toadd2 = "";
    //            string topin = "";
    //            string todistrict = "";
    //            Toaddreader = Toaddcmd.ExecuteReader();
    //            if (Toaddreader.HasRows)
    //            {
    //                while (Toaddreader.Read())
    //                {
    //                    toaddname = Toaddreader["pname"].ToString();
    //                    toadd1 = Toaddreader["padd1"].ToString();
    //                    toadd2 = Toaddreader["padd2"].ToString();
    //                    topin = Toaddreader["ppin"].ToString();
    //                    todistrict = Toaddreader["pdistrict"].ToString();
    //                }
    //            }
    //            FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 30;


    //            Label4.Visible = false;
    //            //format2btn.Visible = true;

    //            //name = FpEntry.Sheets[0].Cells[res_val-1, 3].Text;
    //            string pop_studname = GetFunction("select stud_name from registration where roll_no='" + rol_no + "'");
    //            name = pop_studname;


    //            FpSpread1.Sheets[0].ColumnCount = 8;
    //            FpSpread1.Sheets[0].Columns[0].Width = 150;
    //            FpSpread1.Sheets[0].Columns[1].Width = 120;
    //            FpSpread1.Sheets[0].Columns[2].Width = 120;
    //            FpSpread1.Sheets[0].Columns[3].Width = 120;
    //            FpSpread1.Sheets[0].Columns[4].Width = 170;
    //            FpSpread1.Width = 950;
    //            FpSpread1.Height = 500;

    //            MyImg mi = new MyImg();//set the logo for letter format
    //            mi.ImageUrl = "Handler/Handler2.ashx?";
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 30, 0, 3, 1);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 0].CellType = mi;
    //            FarPoint.Web.Spread.ImageCellType imgeve = new FarPoint.Web.Spread.ImageCellType();

    //            FpSpread1.Sheets[0].ScrollingContentVisible = true;
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 30, 0, 4, 1);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 30, 1, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 29, 1, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 28, 1, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 27, 1, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 25, 0, 1, 4);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 26, 0, 1, 4);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 23, 0, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 24, 0, 1, 4);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 22, 0, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 26, 2, 1, 2);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 23, 5, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 22, 5, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 21, 5, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 20, 5, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 19, 5, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 18, 5, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 14, 5, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 13, 5, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 12, 5, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 11, 5, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 10, 5, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 9, 5, 1, 3);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 6].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 5].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 6].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 7].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 5].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 5].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 5].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 4].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 4].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 4].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 6].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 6].Border.BorderColor = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Border.BorderColor = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Border.BorderColorBottom = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Border.BorderColor = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Border.BorderColorBottom = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Border.BorderColorTop = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].Border.BorderColor = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].Border.BorderColorBottom = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].Border.BorderColorTop = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 20, 5].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 20, 5].Border.BorderColor = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 20, 5].Border.BorderColorBottom = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 20, 5].Border.BorderColorTop = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 19, 5].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 19, 5].Border.BorderColor = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 19, 5].Border.BorderColorBottom = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 19, 5].Border.BorderColorTop = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 18, 5].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 18, 5].Border.BorderColor = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 18, 5].Border.BorderColorTop = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 13, 5].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 13, 5].Border.BorderColor = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 13, 5].Border.BorderColorBottom = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 5].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 5].Border.BorderColor = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 5].Border.BorderColorBottom = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 5].Border.BorderColorTop = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 11, 5].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 11, 5].Border.BorderColor = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 11, 5].Border.BorderColorBottom = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 11, 5].Border.BorderColorTop = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].Border.BorderColor = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].Border.BorderColorBottom = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].Border.BorderColorTop = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 9, 5].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 9, 5].Border.BorderColor = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 9, 5].Border.BorderColorBottom = Color.Black;


    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Border.BorderColor = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Border.BorderColor = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Border.BorderColor = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Border.BorderColor = Color.Black;

    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Font.Size = FontUnit.Medium;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Font.Size = FontUnit.Medium;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Font.Size = FontUnit.Medium;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Font.Size = FontUnit.Medium;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].HorizontalAlign = HorizontalAlign.Center;

    //            //----------------------start to set the college name in header
    //            if (dsprint.Tables[0].Rows.Count > 0)
    //            {
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Text = collnamenew1;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Font.Bold = true;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Text = address;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Font.Bold = true;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Text = phnfax;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Text = email;
    //            }
    //            else
    //            {
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Text = collnamenew1;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Font.Bold = true;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Text = address1 + "- " + address2;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Font.Bold = true;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Text = address3;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Text = pincode;
    //            }
    //            //'----------------------end to set the college name in header
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 6].Text = "Inland Letter";
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 27, 6, 3, 1);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 6].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 6].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 6].VerticalAlign = VerticalAlign.Middle;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 6].Text = "STAMP";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].HorizontalAlign = HorizontalAlign.Center;



    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 0].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 0].Text = "Dear Parents,";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 2].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 2].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 2].Text = "Date  : " + DateTime.Now.Date.ToString("dd-MMM-yyyy");
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 0].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 0].Text = "Sub: " + test + "Performance Report";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 0].VerticalAlign = VerticalAlign.Middle;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 0].Margin.Left = 30;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 0].Text = "Your son/daughter " + name + " " + "[" + rol_no + "]" + "Studying in";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].Margin.Left = 30;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].VerticalAlign = VerticalAlign.Middle;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].Text = degree + " [" + branch + "]";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Margin.Left = 10;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Text = "To";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].Margin.Left = 30;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].VerticalAlign = VerticalAlign.Middle;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].Text = "has secured the following  marks in ";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Margin.Left = 20;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Text = toaddname;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 5].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 3].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Text = "Subject Name";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Font.Size = FontUnit.Medium;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Text = "Min Mark";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Font.Size = FontUnit.Medium;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Text = "Marks Obtained";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Font.Size = FontUnit.Medium;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Text = "Result";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Font.Size = FontUnit.Medium;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].Margin.Left = 20;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].Text = toadd1;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 5].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 20, 5].Margin.Left = 20;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 20, 5].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 20, 5].Text = toadd2;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 20, 5].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 19, 5].Margin.Left = 20;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 19, 5].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 19, 5].Text = todistrict;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 19, 5].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 18, 5].Margin.Left = 20;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 18, 5].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 18, 5].Text = topin;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 18, 5].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 14, 5].Margin.Left = 20;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 14, 5].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 14, 5].Text = "SENDER'S NAME AND ADDRESS";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 13, 5].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 13, 5].Margin.Left = 20;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 13, 5].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 13, 5].Text = "THE PRINCIPAL";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 5].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 5].Margin.Left = 20;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 5].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 5].Text = collnamenew1;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 5].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 11, 5].Margin.Left = 20;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 11, 5].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 11, 5].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 11, 5].Text = address1;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].Margin.Left = 20;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].Text = address2;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 4].Border.BorderColorRight = Color.Black;//new
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 10, 5].Border.BorderColorLeft = Color.Black;//new


    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 9, 5].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 9, 5].Margin.Left = 20;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 9, 5].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 9, 5].Text = address3;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 9, 4].Border.BorderColorRight = Color.Black;//new
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 9, 5].Border.BorderColorLeft = Color.Black;//new

    //            //@@@@@@@@@@@@@@@@@@@@@
    //            string get_row_val = "";
    //            for (int sno_loop = 0; sno_loop < FpEntry.Sheets[0].RowCount; sno_loop++)
    //            {
    //                if (rol_no == FpEntry.Sheets[0].Cells[sno_loop, 1].Text)
    //                {
    //                    get_row_val = sno_loop.ToString();
    //                    break;
    //                }
    //            }
    //            ////string[] spl_row_val = get_row_val.Split('$');
    //            ////int res_val = Convert.ToInt32(spl_row_val[2].ToString());
    //            //@@@@@@@@@@@@@@@@@@
    //            int count = 0;
    //            count = FpSpread1.Sheets[0].RowCount - 20;
    //            for (int colm = 0; colm <= FpEntry.Sheets[0].ColumnCount - 1; colm++)
    //            {
    //                FpSpread1.Sheets[0].Cells[count, 4].Border.BorderColorRight = Color.Black;
    //                if (FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note != "")
    //                {
    //                    con.Close();
    //                    con.Open();
    //                    string subjname = "";
    //                    string result = "";
    //                    string minmark = FpEntry.Sheets[0].Cells[0, colm].Note;
    //                    string maxmark = FpEntry.Sheets[0].Cells[1, colm].Note;
    //                    string getmark = FpEntry.Sheets[0].Cells[Convert.ToInt32(get_row_val), colm].Text;
    //                    string celltag1 = FpEntry.Sheets[0].Cells[Convert.ToInt32(get_row_val), colm].Tag + "";
    //                    if (celltag1 == "1")
    //                    {
    //                        result = "Fail";
    //                    }
    //                    else
    //                    {
    //                        result = "Pass";
    //                    }
    //                    string subject_no1 = FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note;
    //                    string examdate1 = FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Tag + "";

    //                    string subname = "select subject_name,acronym from subject where subject_no=" + subject_no1 + "";
    //                    SqlDataAdapter da = new SqlDataAdapter(subname, con);
    //                    DataSet ds = new DataSet();
    //                    da.Fill(ds);
    //                    con.Close();
    //                    con.Open();
    //                    if (ds.Tables[0].Rows.Count > 0)
    //                    {
    //                        subjname = ds.Tables[0].Rows[0]["subject_name"].ToString();
    //                    }
    //                    FpSpread1.Sheets[0].Cells[count, 0].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[count, 1].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[count, 2].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[count, 3].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[count, 1].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[count, 2].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[count, 3].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[count, 0].Text = subjname;
    //                    FpSpread1.Sheets[0].Cells[count, 1].Text = minmark;
    //                    FpSpread1.Sheets[0].Cells[count, 2].Text = getmark;// +"/100";
    //                    FpSpread1.Sheets[0].Cells[count, 3].Text = result;
    //                    count++;
    //                }
    //                if (FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Text == "Rank")
    //                {
    //                    string rank = FpEntry.Sheets[0].Cells[Convert.ToInt32(get_row_val), colm].Text;
    //                    FpSpread1.Sheets[0].Cells[count, 3].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[count, 3].Text = "Rank" + " " + ":" + rank;
    //                }
    //            }
    //            int count1 = count;

    //            //'----------------------------------------------------newmy strt
    //            //findattnd_values();
    //            persentmonthcal();
    //            double per_tage_day;
    //            string dum_tage_date = "";
    //            per_tage_day = ((pre_present_date / per_workingdays) * 100);
    //            if (per_tage_day > 100)
    //            {
    //                per_tage_day = 100;
    //            }
    //            dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //            if (dum_tage_date == "NaN")
    //            {
    //                dum_tage_date = "0";
    //            }
    //            else if (dum_tage_date == "Infinity")
    //            {
    //                dum_tage_date = "0";
    //            }
    //            //'----------------------------------------------------------------------end
    //            FpSpread1.Sheets[0].SpanModel.Add(count1 + 2, 0, 1, 4);
    //            FpSpread1.Sheets[0].SpanModel.Add(count1 + 3, 0, 1, 4);
    //            FpSpread1.Sheets[0].SpanModel.Add(count1 + 4, 0, 1, 4);
    //            FpSpread1.Sheets[0].SpanModel.Add(count1 + 5, 0, 1, 4);
    //            FpSpread1.Sheets[0].Cells[count1 + 1, 4].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[count1 + 2, 4].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[count1 + 3, 4].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[count1 + 4, 4].Border.BorderColorRight = Color.Black;

    //            FpSpread1.Sheets[0].Cells[count1 + 2, 0].Text = " " + "His/Her attendance details for the period " + TextBox2.Text.ToString() + " to " + TextBox1.Text.ToString() + " are as follows";
    //            FpSpread1.Sheets[0].Cells[count1 + 3, 0].Text = " " + "No of working days:" + " " + per_workingdays.ToString();
    //            FpSpread1.Sheets[0].Cells[count1 + 4, 0].Text = " " + "No of days attend:" + " " + pre_present_date.ToString();
    //            FpSpread1.Sheets[0].Cells[count1 + 5, 0].Text = " " + "% of attendance:" + " " + dum_tage_date.ToString();

    //            FpSpread1.Sheets[0].Cells[count1 + 5, 4].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[count1 + 6, 4].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[count1 + 7, 4].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[count1 + 8, 4].Border.BorderColorRight = Color.Black;

    //            FpSpread1.Sheets[0].Cells[count1 + 9, 0].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[count1 + 9, 0].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[count1 + 9, 0].Text = "CLASS ADVISOR";
    //            FpSpread1.Sheets[0].Cells[count1 + 9, 1].Font.Bold = true;

    //            FpSpread1.Sheets[0].Cells[count1 + 9, 2].Text = "H.O.D";
    //            FpSpread1.Sheets[0].Cells[count1 + 9, 2].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[count1 + 9, 2].HorizontalAlign = HorizontalAlign.Left;

    //            FpSpread1.Sheets[0].Cells[count1 + 9, 3].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[count1 + 9, 3].Text = "PRINCIPAL";
    //            FpSpread1.Sheets[0].Cells[count1 + 9, 3].Font.Bold = true;

    //            //'----------------------------to set the footer start 10.04.12
    //            //if (dsprint.Tables[0].Rows.Count > 0)
    //            //{

    //            //    if (dsprint.Tables[0].Rows[0]["footer"].ToString() != "")
    //            //    {

    //            //        footer_count = Convert.ToInt16(dsprint.Tables[0].Rows[0]["footer"].ToString());
    //            //        //FpSpread1.Sheets[0].RowCount += 3;
    //            //        footer_text = dsprint.Tables[0].Rows[0]["footer_name"].ToString();
    //            //        string[] footer_text_split = footer_text.Split(',');
    //            //        footer_text = "";

    //            //        if (footer_count == 1)
    //            //        {
    //            //            FpSpread1.Sheets[0].Cells[count1 + 9, 2].Text = footer_text.ToString();
    //            //        }
    //            //        else if ((FpSpread1.Sheets[0].ColumnCount - 3) < footer_count)
    //            //        {
    //            //            for (int concod_footer = 0; concod_footer < footer_count; concod_footer++)
    //            //            {
    //            //                if (footer_text == "")
    //            //                {
    //            //                    footer_text = footer_text_split[concod_footer].ToString();
    //            //                }
    //            //                else
    //            //                {
    //            //                    footer_text = footer_text + "   " + footer_text_split[concod_footer].ToString();
    //            //                }
    //            //            }

    //            //            for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount - 3; col_count++)
    //            //            {
    //            //                if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //            //                {
    //            //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 9, col_count, 1, final_print_col_cnt);
    //            //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 9, col_count, 1, final_print_col_cnt);
    //            //                    FpSpread1.Sheets[0].SpanModel.Add(count1 + 9, col_count, 1, final_print_col_cnt);
    //            //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Text = footer_text;
    //            //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].HorizontalAlign = HorizontalAlign.Left;
    //            //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Font.Bold = true;
    //            //                    FpSpread1.Sheets[0].Cells[count1 + 9, 0].HorizontalAlign = HorizontalAlign.Center;
    //            //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Font.Size = FontUnit.Medium;
    //            //                    break;
    //            //                }
    //            //            }
    //            //        }
    //            //        else if ((FpSpread1.Sheets[0].ColumnCount - 3) == footer_count)
    //            //        {
    //            //            for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount - 3; col_count++)
    //            //            {
    //            //                if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //            //                {
    //            //                    FpSpread1.Sheets[0].Cells[(count1 + 9), col_count].Text = footer_text_split[temp_count].ToString();
    //            //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].HorizontalAlign = HorizontalAlign.Left;
    //            //                    FpSpread1.Sheets[0].Cells[count1 + 9, 0].HorizontalAlign = HorizontalAlign.Center;
    //            //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Font.Bold = true;
    //            //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Font.Size = FontUnit.Medium;
    //            //                    temp_count++;
    //            //                    if (temp_count == footer_count)
    //            //                    {
    //            //                        break;
    //            //                    }
    //            //                }
    //            //            }
    //            //        }
    //            //        else
    //            //        {
    //            //            temp_count = 0;
    //            //            split_col_for_footer = (FpSpread1.Sheets[0].ColumnCount - 3) / footer_count;
    //            //            footer_balanc_col = (FpSpread1.Sheets[0].ColumnCount - 3) % footer_count;

    //            //            for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount - 3; col_count++)
    //            //            {
    //            //                if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //            //                {
    //            //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Text = footer_text_split[temp_count].ToString();
    //            //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].HorizontalAlign = HorizontalAlign.Left;
    //            //                    FpSpread1.Sheets[0].Cells[count1 + 9, 0].HorizontalAlign = HorizontalAlign.Center;
    //            //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Font.Bold = true;
    //            //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Border.BorderColorLeft = Color.White;
    //            //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Border.BorderColorRight = Color.White;
    //            //                    FpSpread1.Sheets[0].Cells[count1 + 9, col_count].Font.Size = FontUnit.Medium;
    //            //                    temp_count++;
    //            //                    if (temp_count == 0)
    //            //                    {
    //            //                        col_count = col_count + split_col_for_footer + footer_balanc_col;
    //            //                    }
    //            //                    else
    //            //                    {
    //            //                        col_count = col_count + split_col_for_footer;
    //            //                    }
    //            //                    if (temp_count == footer_count)
    //            //                    {
    //            //                        break;
    //            //                    }
    //            //                }
    //            //            }
    //            //        }
    //            //    }
    //            //}
    //            //'---------------------------------------end for footer
    //            con.Close();
    //        }
    //    }
    //}

    //public void pop_page_function2()
    //{
    //    string poppage_value = ddlpoppage.SelectedValue.ToString();//spilt the poppage selected value
    //    rol_no = poppage_value.ToString();

    //    string strsc = "";
    //    if (ddlBranch.Text != "")
    //    {
    //        branch = ddlBranch.SelectedItem.Text;
    //    }
    //    if (ddlDegree.Text != "")
    //    {
    //        degree = ddlDegree.SelectedItem.Text;
    //    }
    //    sem = ddlSemYr.SelectedValue;
    //    sec = ddlSec.SelectedValue;
    //    //if (ddlTest.Text != "")
    //    //{
    //    //    test = chklstest.SelectedItem.Text;
    //    //}
    //    if (ddlSemYr.Text != "")
    //    {
    //        semester = Convert.ToInt32(ddlSemYr.SelectedValue);
    //    }
    //    colege_code = Session["collegecode"].ToString();
    //    degree1 = ddlBranch.SelectedValue;

    //    Label4.Visible = false;
    //    //format2btn.Visible = true;
    //    FpSpread1.Visible = true;
    //    FpSpread1.Sheets[0].PageSize = 40;
    //    FpSpread1.Sheets[0].RowHeader.Visible = false;
    //    FpSpread1.Sheets[0].DefaultStyle.Font.Name = "Book Antique";
    //    FpSpread1.Sheets[0].DefaultStyle.Font.Bold = false;
    //    FpSpread1.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
    //    FpSpread1.Sheets[0].ColumnHeader.Visible = false;

    //    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ hdr by mythili 10.04.12
    //    hat.Clear();
    //    hat.Add("college_code", Session["collegecode"].ToString());
    //    hat.Add("form_name", "CAMLetter.aspx");
    //    dsprint = dacces.select_method("PROC_PRINT_MASTER_SETTINGS", hat, "sp");
    //    if (dsprint.Tables[0].Rows.Count > 0)
    //    {
    //        if (dsprint.Tables[0].Rows[0]["college_name"].ToString() != string.Empty)
    //        {
    //            collnamenew1 = dsprint.Tables[0].Rows[0]["college_name"].ToString();
    //        }
    //        if (dsprint.Tables[0].Rows[0]["address1"].ToString() != "")
    //        {
    //            address1 = dsprint.Tables[0].Rows[0]["address1"].ToString();
    //            address = address1;
    //        }
    //        if (dsprint.Tables[0].Rows[0]["address2"].ToString() != "")
    //        {
    //            address2 = dsprint.Tables[0].Rows[0]["address2"].ToString();
    //            address = address1 + "-" + address2;

    //        }
    //        if (dsprint.Tables[0].Rows[0]["address3"].ToString() != "")
    //        {
    //            district = dsprint.Tables[0].Rows[0]["address3"].ToString();
    //            address = address1 + "-" + address2 + "-" + district;
    //        }

    //        if (dsprint.Tables[0].Rows[0]["phoneno"].ToString() != "")
    //        {
    //            Phoneno = dsprint.Tables[0].Rows[0]["phoneno"].ToString();
    //            phnfax = "Phone :" + " " + Phoneno;
    //        }
    //        if (dsprint.Tables[0].Rows[0]["faxno"].ToString() != "")
    //        {
    //            Faxno = dsprint.Tables[0].Rows[0]["faxno"].ToString();
    //            phnfax = phnfax + "Fax  :" + " " + Faxno;
    //        }

    //        if ((dsprint.Tables[0].Rows[0]["email"].ToString() != ""))
    //        {
    //            email = "E-Mail:" + dsprint.Tables[0].Rows[0]["email"].ToString();
    //        }
    //        if (dsprint.Tables[0].Rows[0]["website"].ToString() != "")
    //        {
    //            email = email + " " + "Web Site:" + dsprint.Tables[0].Rows[0]["website"].ToString();
    //        }

    //    }
    //    else if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //    {
    //        string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo from collinfo where college_code=" + Session["collegecode"] + "";
    //        SqlCommand collegecmd = new SqlCommand(college, con);
    //        SqlDataReader collegename;
    //        con.Close();
    //        con.Open();
    //        collegename = collegecmd.ExecuteReader();
    //        if (collegename.HasRows)
    //        {
    //            while (collegename.Read())
    //            {
    //                collnamenew1 = collegename["collname"].ToString();
    //                address1 = collegename["address1"].ToString();
    //                address2 = collegename["address2"].ToString();
    //                address3 = collegename["address3"].ToString();
    //                pincode = collegename["pincode"].ToString();
    //            }
    //        }
    //        con.Close();
    //    }
    //    for (int j = 0; j < chklstest.Items.Count; j++)
    //    {
    //        if (chklstest.Items[j].Selected == true)
    //        {
    //            string criteria_no = chklstest.Items[j].Value.ToString();
    //            test = chklstest.Items[j].Text.ToString();
    //            //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //            //    rol_no = FpEntry.Sheets[0].Cells[res, 1].Text;
    //            frdate = TextBox2.Text;
    //            todate = TextBox1.Text;

    //            Label4.Visible = false;
    //            //format2btn.Visible = true;

    //            //   name = FpEntry.Sheets[0].Cells[res, 3].Text;
    //            string pop_studname = GetFunction("select stud_name from registration where roll_no='" + rol_no + "'");
    //            name = pop_studname;
    //            FpSpread1.Sheets[0].ColumnCount = 5;
    //            FpSpread1.Sheets[0].Columns[0].Width = 50;
    //            FpSpread1.Sheets[0].Columns[1].Width = 200;
    //            FpSpread1.Sheets[0].Columns[2].Width = 200;
    //            FpSpread1.Sheets[0].Columns[3].Width = 50;
    //            FpSpread1.Sheets[0].Columns[4].Width = 200;
    //            FpSpread1.Width = 700;
    //            FpSpread1.Height = 500;
    //            FpSpread1.Sheets[0].ScrollingContentVisible = true;
    //            DateTime exam_month_year = Convert.ToDateTime(GetFunction("select distinct exam_date from exam_type inner join criteriaforinternal on criteriaforinternal.criteria_no=exam_type.criteria_no where criteriaforinternal.criteria_no= " + criteria_no + ""));
    //            string mon_yr = exam_month_year.ToString("MMM") + " " + exam_month_year.ToString("yyyy");
    //            FpSpread1.Sheets[0].RowCount = 0;
    //            FpSpread1.Sheets[0].RowCount++;
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 1, 1, 3);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;

    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = collnamenew1;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;

    //            FpSpread1.Sheets[0].RowCount++;
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 1, 1, 3);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;

    //            //'---------------to set the address
    //            if (dsprint.Tables[0].Rows.Count > 0)
    //            {
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = address + "," + phnfax;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
    //            }
    //            else
    //            {
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = address1 + ", " + address2 + ", " + address3 + "," + pincode;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
    //            }

    //            //'-------------------to set the emila
    //            FpSpread1.Sheets[0].RowCount++;
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 1, 1, 3);
    //            if (dsprint.Tables[0].Rows.Count > 0)
    //            {
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = email;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Bold = true;
    //            }
    //            //'----------------end to set the address

    //            //'-------------for logo------------------

    //            MyImg mi = new MyImg();//set the logo for letter format
    //            mi.ImageUrl = "Handler/Handler2.ashx?";
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 3, 0, 3, 1);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].CellType = mi;
    //            //FarPoint.Web.Spread.ImageCellType imgeve = new FarPoint.Web.Spread.ImageCellType();

    //            MyImg mi4 = new MyImg();
    //            mi4.ImageUrl = "Handler/Handler5.ashx?";
    //            FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(FpSpread1.Sheets[0].RowCount - 3, 4, 3, 1);
    //            FpSpread1.Sheets[0].ColumnHeader.Cells[FpSpread1.Sheets[0].RowCount - 3, 4].CellType = mi4;

    //            //'----------------------------------
    //            FpSpread1.Sheets[0].RowCount++;
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 5);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Dear Parents,";

    //            FpSpread1.Sheets[0].RowCount++;
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 5);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Sub: Continuous Assesment Test Progress Report-Reg";

    //            yr_val = ddlSemYr.SelectedItem.ToString();
    //            getyear();

    //            FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 2;
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 5);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "  Your Son/Daughter/Ward/Selvan/Selvi ...." + name + "....studying in " + yr_string;


    //            FpSpread1.Sheets[0].RowCount++;
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 5);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = degree + " [" + branch + "] has secured the following marks in the Continuous Assesment Test";


    //            FpSpread1.Sheets[0].RowCount++;
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 5);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "...." + test + "....conducted during...." + mon_yr + "....";

    //            FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 2;
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 5);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Total Marks:";


    //            FpSpread1.Sheets[0].RowCount++;
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 1, 1, 2);
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 3, 1, 2);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 1].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 3].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorTop = Color.Black;

    //            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 2].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "S.No";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = "Subject";
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Text = "Marks out of";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Text = "Marks";

    //            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].HorizontalAlign = HorizontalAlign.Center;

    //            //@@@@@@@@@@@@@@ 
    //            string get_row_val = "";
    //            for (int sno_loop = 0; sno_loop < FpEntry.Sheets[0].RowCount; sno_loop++)
    //            {
    //                if (rol_no == FpEntry.Sheets[0].Cells[sno_loop, 1].Text)
    //                {
    //                    //  get_row_val = FpEntry.Sheets[0].RowHeader.Cells[sno_loop, 0].Text;
    //                    get_row_val = sno_loop.ToString();
    //                    break;
    //                }
    //            }
    //            //string[] spl_row_val = get_row_val.Split('$');
    //            //int res_val = Convert.ToInt32(spl_row_val[2].ToString());
    //            //@@@@@@@@@@@@@@@@
    //            int sno = 0;
    //            for (int colm = 0; colm <= FpEntry.Sheets[0].ColumnCount - 1; colm++)
    //            {
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorRight = Color.Black;
    //                if (FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note != "")
    //                {
    //                    FpSpread1.Sheets[0].RowCount++;
    //                    sno++;
    //                    con.Close();
    //                    con.Open();
    //                    string subjname = "";

    //                    string getmark = FpEntry.Sheets[0].Cells[Convert.ToInt32(get_row_val), colm].Text;
    //                    string subject_no1 = FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note;
    //                    string subname = "select subject_name,acronym from subject where subject_no=" + subject_no1 + "";
    //                    SqlDataAdapter da = new SqlDataAdapter(subname, con);
    //                    DataSet ds = new DataSet();
    //                    da.Fill(ds);
    //                    con.Close();
    //                    con.Open();
    //                    if (ds.Tables[0].Rows.Count > 0)
    //                    {
    //                        subjname = ds.Tables[0].Rows[0]["subject_name"].ToString();
    //                    }

    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 1, 1, 2);
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 3, 1, 2);
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].HorizontalAlign = HorizontalAlign.Center;

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = sno.ToString();
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = subjname;///////////////
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Text = getmark; // +"/100";
    //                    if (getmark == "A" || getmark == "AA" || getmark == "AAA" || getmark == "P")
    //                    {
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Text = "AAA";
    //                    }
    //                }
    //            }
    //            FpSpread1.Sheets[0].RowCount++;
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 2);
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 2, 1, 2);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 1].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 3].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Total No.of Working days";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Text = "No.of days Attended";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text = "% of Attended";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].HorizontalAlign = HorizontalAlign.Center;

    //            FpSpread1.Sheets[0].RowCount++;//============ATTND %
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 2);
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 2, 1, 2);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorLeft = Color.Black;
    //            //-------------------
    //            //findattnd_values();
    //            persentmonthcal();
    //            double per_tage_day;
    //            string dum_tage_date = "";
    //            per_tage_day = ((pre_present_date / per_workingdays) * 100);

    //            if (per_tage_day > 100)
    //            {
    //                per_tage_day = 100;
    //            }
    //            dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //            if (dum_tage_date == "NaN")
    //            {
    //                dum_tage_date = "0";
    //            }
    //            else if (dum_tage_date == "Infinity")
    //            {
    //                dum_tage_date = "0";
    //            }

    //            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = per_workingdays.ToString();
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Text = pre_present_date.ToString();
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text = dum_tage_date.ToString();

    //            //-------------------------
    //            FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 3;
    //            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 3].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 2), 0, 1, 5);
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 5);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Text = "Failed in __________ Subjects";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "In this regards you are requested to meet the Principal on __________________";
    //            FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 2;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Right;
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 3, 1, 2);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Student's Counseller";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Text = "HOD       ";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Right;

    //            FpSpread1.Sheets[0].RowCount++;
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 5);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "---------------------------------------------------cut here--------------------------------------------------------";
    //            FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 8;
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 8), 0, 1, 5);
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 7), 0, 1, 5);
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 5), 0, 1, 5);

    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 8, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 7, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 8, 0].Text = "Kindly acknowledge the receipt of this communication with your signature and return the same to the";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 7, 0].Text = "college by return of post";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 0].Text = "Remarks if any:";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Text = "Name:";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 1].Text = name;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Text = "Roll No.:";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 1].Text = rol_no;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].Text = "Signature of parent/Guardian";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].HorizontalAlign = HorizontalAlign.Right;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Batch:";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = ddlBatch.SelectedValue.ToString();
    //            FpSpread1.Sheets[0].Columns[0].Width = 100;
    //            //'--------------------start footer 10.04.12
    //            if (dsprint.Tables[0].Rows.Count > 0)
    //            {
    //                if (dsprint.Tables[0].Rows[0]["footer"].ToString() != "")
    //                {
    //                    footer_count = Convert.ToInt16(dsprint.Tables[0].Rows[0]["footer"].ToString());
    //                    FpSpread1.Sheets[0].RowCount += 3;
    //                    footer_text = dsprint.Tables[0].Rows[0]["footer_name"].ToString();
    //                    string[] footer_text_split = footer_text.Split(',');
    //                    footer_text = "";
    //                    if (footer_count == 1)
    //                    {
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Text = footer_text.ToString();
    //                    }
    //                    else if ((FpSpread1.Sheets[0].ColumnCount) < footer_count)
    //                    {
    //                        for (int concod_footer = 0; concod_footer < footer_count; concod_footer++)
    //                        {
    //                            if (footer_text == "")
    //                            {
    //                                footer_text = footer_text_split[concod_footer].ToString();
    //                            }
    //                            else
    //                            {
    //                                footer_text = footer_text + "   " + footer_text_split[concod_footer].ToString();
    //                            }
    //                        }
    //                        for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount; col_count++)
    //                        {
    //                            if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                            {
    //                                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, col_count, 1, final_print_col_cnt);
    //                                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, col_count, 1, final_print_col_cnt);
    //                                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, col_count, 1, final_print_col_cnt);
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Text = footer_text;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Bold = true;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Size = FontUnit.Medium;
    //                                break;
    //                            }
    //                        }
    //                    }
    //                    else if ((FpSpread1.Sheets[0].ColumnCount) == footer_count)
    //                    {
    //                        for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount; col_count++)
    //                        {
    //                            if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                            {
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Text = footer_text_split[temp_count].ToString();
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Bold = true;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Size = FontUnit.Medium;
    //                                temp_count++;
    //                                if (temp_count == footer_count)
    //                                {
    //                                    break;
    //                                }
    //                            }
    //                        }
    //                    }
    //                    else
    //                    {
    //                        temp_count = 0;
    //                        split_col_for_footer = (FpSpread1.Sheets[0].ColumnCount) / footer_count;
    //                        footer_balanc_col = (FpSpread1.Sheets[0].ColumnCount) % footer_count;

    //                        for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount; col_count++)
    //                        {
    //                            if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                            {
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Text = footer_text_split[temp_count].ToString();
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Bold = true;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Border.BorderColorLeft = Color.White;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Border.BorderColorRight = Color.White;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Size = FontUnit.Medium;
    //                                temp_count++;
    //                                if (temp_count == 0)
    //                                {
    //                                    col_count = col_count + split_col_for_footer + footer_balanc_col;
    //                                }
    //                                else
    //                                {
    //                                    col_count = col_count + split_col_for_footer;
    //                                }
    //                                if (temp_count == footer_count)
    //                                {
    //                                    break;
    //                                }
    //                            }
    //                        }
    //                    }
    //                }
    //            }
    //        }
    //    }

    //}

    //public void pop_page_function3()
    //{
    //    string poppage_value = ddlpoppage.SelectedValue.ToString();//spilt the poppage selected value
    //    rol_no = poppage_value.ToString();

    //    frdate = TextBox2.Text;
    //    todate = TextBox1.Text;

    //    string strsc = "";
    //    if (ddlBranch.Text != "")
    //    {
    //        branch = ddlBranch.SelectedItem.Text;
    //    }
    //    if (ddlDegree.Text != "")
    //    {
    //        degree = ddlDegree.SelectedItem.Text;
    //    }
    //    sem = ddlSemYr.SelectedValue;
    //    sec = ddlSec.SelectedValue;
    //    if (ddlSemYr.Text != "")
    //    {
    //        semester = Convert.ToInt32(ddlSemYr.SelectedValue);
    //    }
    //    colege_code = Session["collegecode"].ToString();
    //    degree1 = ddlBranch.SelectedValue;

    //    Label4.Visible = false;
    //    //format2btn.Visible = true;
    //    FpSpread1.Visible = true;
    //    FpSpread1.Sheets[0].PageSize = 50;
    //    FpSpread1.Sheets[0].RowHeader.Visible = false;
    //    FpSpread1.Sheets[0].DefaultStyle.Font.Name = "Book Antique";
    //    FpSpread1.Sheets[0].DefaultStyle.Font.Bold = false;
    //    FpSpread1.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;

    //    FpSpread1.Sheets[0].ColumnHeader.Visible = false;
    //    FpSpread1.Sheets[0].RowCount = 0;
    //    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //    hat.Clear();
    //    hat.Add("college_code", Session["collegecode"].ToString());
    //    hat.Add("form_name", "CAMLetter.aspx");
    //    dsprint = dacces.select_method("PROC_PRINT_MASTER_SETTINGS", hat, "sp");
    //    if (dsprint.Tables[0].Rows.Count > 0)
    //    {

    //        if (dsprint.Tables[0].Rows[0]["college_name"].ToString() != string.Empty)
    //        {
    //            collnamenew1 = dsprint.Tables[0].Rows[0]["college_name"].ToString();
    //        }
    //        if (dsprint.Tables[0].Rows[0]["address1"].ToString() != "")
    //        {
    //            address1 = dsprint.Tables[0].Rows[0]["address1"].ToString();
    //            address = address1;
    //        }
    //        if (dsprint.Tables[0].Rows[0]["address2"].ToString() != "")
    //        {
    //            address2 = dsprint.Tables[0].Rows[0]["address2"].ToString();
    //            address = address1 + "-" + address2;

    //        }
    //        if (dsprint.Tables[0].Rows[0]["address3"].ToString() != "")
    //        {
    //            district = dsprint.Tables[0].Rows[0]["address3"].ToString();
    //            address = address1 + "-" + address2 + "-" + district;
    //        }

    //        if (dsprint.Tables[0].Rows[0]["phoneno"].ToString() != "")
    //        {
    //            Phoneno = dsprint.Tables[0].Rows[0]["phoneno"].ToString();
    //            phnfax = "Phone :" + " " + Phoneno;
    //        }
    //        if (dsprint.Tables[0].Rows[0]["faxno"].ToString() != "")
    //        {
    //            Faxno = dsprint.Tables[0].Rows[0]["faxno"].ToString();
    //            phnfax = phnfax + "Fax  :" + " " + Faxno;
    //        }

    //        if ((dsprint.Tables[0].Rows[0]["email"].ToString() != ""))
    //        {
    //            email = "E-Mail:" + dsprint.Tables[0].Rows[0]["email"].ToString();
    //        }
    //        if (dsprint.Tables[0].Rows[0]["website"].ToString() != "")
    //        {
    //            email = email + " " + "Web Site:" + dsprint.Tables[0].Rows[0]["website"].ToString();
    //        }

    //    }
    //    else if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //    {
    //        string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo from collinfo where college_code=" + Session["collegecode"] + "";
    //        SqlCommand collegecmd = new SqlCommand(college, con);
    //        SqlDataReader collegename;
    //        con.Close();
    //        con.Open();
    //        collegename = collegecmd.ExecuteReader();
    //        if (collegename.HasRows)
    //        {
    //            while (collegename.Read())
    //            {
    //                collnamenew1 = collegename["collname"].ToString();
    //                address1 = collegename["address1"].ToString();
    //                address2 = collegename["address2"].ToString();
    //                address3 = collegename["address3"].ToString();
    //                pincode = collegename["pincode"].ToString();
    //            }
    //        }
    //        con.Close();
    //    }
    //    for (int j = 0; j < chklstest.Items.Count; j++)
    //    {
    //        if (chklstest.Items[j].Selected == true)
    //        {
    //            string criteria_no = chklstest.Items[j].Value.ToString();
    //            test = chklstest.Items[j].Text.ToString();
    //            //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //            //   rol_no = FpEntry.Sheets[0].Cells[res, 1].Text;

    //            string Toaddress = "select parent_name as pname,parent_addressP as padd1,streetc as padd2,parent_pincodeP as ppin,districtc as pdistrict from applyn where app_no in (select app_no from registration where roll_no='" + rol_no + "')";
    //            SqlCommand Toaddcmd = new SqlCommand(Toaddress, con);
    //            SqlDataReader Toaddreader;
    //            con.Close();
    //            con.Open();
    //            string toaddname = "";
    //            string toadd1 = "";
    //            string toadd2 = "";
    //            string topin = "";
    //            string todistrict = "";
    //            Toaddreader = Toaddcmd.ExecuteReader();
    //            if (Toaddreader.HasRows)
    //            {

    //                while (Toaddreader.Read())
    //                {
    //                    toaddname = Toaddreader["pname"].ToString();
    //                    toadd1 = Toaddreader["padd1"].ToString();
    //                    toadd2 = Toaddreader["padd2"].ToString();
    //                    topin = Toaddreader["ppin"].ToString();
    //                    todistrict = Toaddreader["pdistrict"].ToString();
    //                }
    //            }
    //            FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 30;

    //            Label4.Visible = false;
    //            //format2btn.Visible = true;
    //            //name = FpEntry.Sheets[0].Cells[res, 3].Text;
    //            string pop_studname = GetFunction("select stud_name from registration where roll_no='" + rol_no + "'");
    //            name = pop_studname;
    //            FpSpread1.Sheets[0].ColumnCount = 8;
    //            FpSpread1.Sheets[0].Columns[0].Width = 150;
    //            FpSpread1.Sheets[0].Columns[1].Width = 120;
    //            FpSpread1.Sheets[0].Columns[2].Width = 120;
    //            FpSpread1.Sheets[0].Columns[3].Width = 120;
    //            FpSpread1.Sheets[0].Columns[4].Width = 170;
    //            FpSpread1.Width = 950;
    //            FpSpread1.Height = 500;
    //            FpSpread1.Sheets[0].ScrollingContentVisible = true;
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 30, 0, 4, 1);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 30, 1, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 29, 1, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 28, 1, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 27, 1, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 25, 0, 1, 4);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 26, 0, 1, 4);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 23, 0, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 24, 0, 1, 4);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 22, 0, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 26, 2, 1, 2);

    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Border.BorderColor = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Border.BorderColor = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Border.BorderColor = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Border.BorderStyle = BorderStyle.Solid;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Border.BorderColor = Color.Black;

    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Font.Size = FontUnit.Medium;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Font.Size = FontUnit.Medium;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Font.Size = FontUnit.Medium;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Font.Size = FontUnit.Medium;
    //            if (dsprint.Tables[0].Rows.Count > 0)
    //            {
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Font.Bold = true;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Text = collnamenew1;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Font.Bold = true;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Text = address;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Font.Bold = true;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Text = phnfax;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 6].Border.BorderColorBottom = Color.White;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Font.Bold = true;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Text = email;
    //            }
    //            else
    //            {
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Font.Bold = true;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Text = collnamenew1;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Font.Bold = true;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Text = address1 + "- " + address2;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Font.Bold = true;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Text = address3;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 6].Border.BorderColorBottom = Color.White;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Font.Bold = true;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 1].Text = pincode;
    //            }
    //            //---------------for logo start 10.04.12
    //            MyImg mi = new MyImg();//set the logo for letter format
    //            mi.ImageUrl = "Handler/Handler2.ashx?";
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 30, 0, 3, 1);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 0].CellType = mi;
    //            FarPoint.Web.Spread.ImageCellType imgeve = new FarPoint.Web.Spread.ImageCellType();

    //            //---------------end logo   

    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 27, 6, 3, 1);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 6].Border.BorderColor = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 27, 5].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 5].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 5].Border.BorderColorRight = Color.White;

    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 0].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 0].Text = "Dear Parents,";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 2].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 2].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 26, 2].Text = "Date  : " + DateTime.Now.Date.ToString("dd-MMM-yyyy");
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 0].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 25, 0].Text = "Sub: " + test + "Performance Report";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 0].VerticalAlign = VerticalAlign.Middle;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 0].Margin.Left = 30;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 0].Text = "Your son/daughter " + name + " " + "[" + rol_no + "]" + "Studying in";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].Margin.Left = 30;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].VerticalAlign = VerticalAlign.Middle;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 0].Text = degree + " [" + branch + "]";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Margin.Left = 10;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].HorizontalAlign = HorizontalAlign.Left;

    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 5].Border.BorderColorBottom = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 6].Border.BorderColorBottom = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 24, 7].Border.BorderColorBottom = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 5].Border.BorderColorLeft = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 23, 4].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 4].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 4].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 20, 4].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 19, 4].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 18, 4].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 17, 4].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 16, 4].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 15, 4].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 14, 4].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 13, 4].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 12, 4].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 11, 4].Border.BorderColorRight = Color.White;
    //            //+++++++++++++++++++++++++++++++++++++++++++++++++++++++

    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].Margin.Left = 30;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].VerticalAlign = VerticalAlign.Middle;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].Text = "has secured the following  marks in ";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 3].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Text = "Subject Name";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 0].Font.Size = FontUnit.Medium;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Text = "Min Mark";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 1].Font.Size = FontUnit.Medium;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Text = "Marks Obtained";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 2].Font.Size = FontUnit.Medium;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Text = "Result";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 21, 3].Font.Size = FontUnit.Medium;
    //            //@@@@@@@@@@@@@@ 
    //            string get_row_val = "";
    //            for (int sno_loop = 0; sno_loop < FpEntry.Sheets[0].RowCount; sno_loop++)
    //            {
    //                if (rol_no == FpEntry.Sheets[0].Cells[sno_loop, 1].Text)
    //                {
    //                    get_row_val = sno_loop.ToString();
    //                    break;
    //                }
    //            }
    //            //string[] spl_row_val = get_row_val.Split('$');
    //            //int res_val = Convert.ToInt32(spl_row_val[2].ToString());
    //            //@@@@@@@@@@@@@@@@

    //            int count = 0;
    //            count = FpSpread1.Sheets[0].RowCount - 20;
    //            for (int colm = 0; colm <= FpEntry.Sheets[0].ColumnCount - 1; colm++)
    //            {
    //                if (FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note != "")
    //                {
    //                    con.Close();
    //                    con.Open();
    //                    string subjname = "";
    //                    string result = "";
    //                    string minmark = FpEntry.Sheets[0].Cells[0, colm].Note;
    //                    string maxmark = FpEntry.Sheets[0].Cells[1, colm].Note;
    //                    string getmark = FpEntry.Sheets[0].Cells[Convert.ToInt32(get_row_val), colm].Text;

    //                    string celltag1 = FpEntry.Sheets[0].Cells[Convert.ToInt32(get_row_val), colm].Tag + "";
    //                    if (celltag1 == "1")
    //                    {
    //                        result = "Fail";
    //                    }
    //                    else
    //                    {
    //                        result = "Pass";
    //                    }
    //                    string subject_no1 = FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note;
    //                    string examdate1 = FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Tag + "";
    //                    string subname = "select subject_name,acronym from subject where subject_no=" + subject_no1 + "";
    //                    SqlDataAdapter da = new SqlDataAdapter(subname, con);
    //                    DataSet ds = new DataSet();
    //                    da.Fill(ds);
    //                    con.Close();
    //                    con.Open();
    //                    if (ds.Tables[0].Rows.Count > 0)
    //                    {
    //                        subjname = ds.Tables[0].Rows[0]["subject_name"].ToString();
    //                    }
    //                    FpSpread1.Sheets[0].Cells[count, 0].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[count, 1].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[count, 2].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[count, 3].Border.BorderColor = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[count, 1].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[count, 2].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[count, 3].HorizontalAlign = HorizontalAlign.Center;
    //                    if (TextBoxnew.Text != string.Empty)
    //                    {
    //                        double newval = (Convert.ToDouble(TextBoxnew.Text) / Convert.ToDouble(maxmark));
    //                        double maxc = Convert.ToDouble(newval) * Convert.ToDouble(getmark);
    //                        FpSpread1.Sheets[0].Cells[count, 2].Text = maxc + "/" + TextBoxnew.Text;
    //                    }
    //                    FpSpread1.Sheets[0].Cells[count, 0].Text = subjname;
    //                    FpSpread1.Sheets[0].Cells[count, 1].Text = minmark;

    //                    FpSpread1.Sheets[0].Cells[count, 3].Text = result;
    //                    count++;
    //                }
    //                if (FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Text == "Rank")
    //                {
    //                    string rank = FpEntry.Sheets[0].Cells[Convert.ToInt32(get_row_val), colm].Text;
    //                    FpSpread1.Sheets[0].Cells[count, 3].Font.Bold = true;
    //                    FpSpread1.Sheets[0].Cells[count, 3].Text = "Rank" + " " + ":" + rank;
    //                }
    //            }
    //            int count1 = count;
    //            //'----------------------------------------------------newmy strt
    //            //findattnd_values();
    //            persentmonthcal();
    //            double per_tage_day;
    //            string dum_tage_date = "";
    //            //  per_workingdays-------------conducted days
    //            //pre_present_date attend days
    //            per_tage_day = ((pre_present_date / per_workingdays) * 100);
    //            if (per_tage_day > 100)
    //            {
    //                per_tage_day = 100;
    //            }
    //            dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //            if (dum_tage_date == "NaN")
    //            {
    //                dum_tage_date = "0";
    //            }
    //            else if (dum_tage_date == "Infinity")
    //            {
    //                dum_tage_date = "0";
    //            }
    //            //'----------------------------------------------------------------------end
    //            FpSpread1.Sheets[0].SpanModel.Add(count1 + 2, 0, 1, 4);
    //            FpSpread1.Sheets[0].SpanModel.Add(count1 + 3, 0, 1, 4);
    //            FpSpread1.Sheets[0].SpanModel.Add(count1 + 4, 0, 1, 4);
    //            FpSpread1.Sheets[0].SpanModel.Add(count1 + 5, 0, 1, 4);
    //            FpSpread1.Sheets[0].SpanModel.Add(count1 + 1, 0, 1, 4);
    //            FpSpread1.Sheets[0].Cells[count1 + 1, 0].Text = "His/Her Perfomance is GOOD/SATISFACTORY/UNSATISFACTORY";
    //            FpSpread1.Sheets[0].Cells[count1 + 2, 0].Text = "Attendance Particulars";
    //            FpSpread1.Sheets[0].Cells[count1 + 2, 0].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[count1 + 2, 0].Font.Underline = true;
    //            FpSpread1.Sheets[0].Cells[count1 + 4, 0].Text = "Attendance as on           :" + " " + DateTime.Now.ToString("dd-MM-yyyy");
    //            FpSpread1.Sheets[0].Cells[count1 + 5, 0].Text = "Number of working days     :" + " " + per_workingdays.ToString();
    //            FpSpread1.Sheets[0].SpanModel.Add(count1 + 6, 0, 1, 4);
    //            FpSpread1.Sheets[0].Cells[count1 + 6, 0].Text = "Number of days attend      :" + " " + pre_present_date.ToString();
    //            FpSpread1.Sheets[0].SpanModel.Add(count1 + 7, 0, 1, 4);
    //            FpSpread1.Sheets[0].Cells[count1 + 7, 0].Text = "Attendance Percentage      :" + " " + dum_tage_date.ToString();
    //            FpSpread1.Sheets[0].SpanModel.Add(count1 + 9, 0, 1, 6);
    //            FpSpread1.Sheets[0].Cells[count1 + 9, 0].Text = "You are Requested to meet the HOD/TUTOR in this Recard on or before ............";
    //            FpSpread1.Sheets[0].SpanModel.Add(count1 + 11, 0, 1, 6);
    //            FpSpread1.Sheets[0].Cells[count1 + 11, 0].Text = "Please intimate your E-Mail ID to enable the college to send further communication";

    //            FpSpread1.Sheets[0].Cells[count1 + 5, 5].Border.BorderColorBottom = Color.White;
    //            FpSpread1.Sheets[0].Cells[count1 + 5, 5].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[count1 + 1, 5].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[count1 + 2, 5].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[count1 + 3, 5].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[count1 + 4, 5].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 7;

    //            //FpSpread1.Sheets[0].Cells[count1 + 14, 0].Font.Bold = true;
    //            //FpSpread1.Sheets[0].Cells[count1 + 14, 0].Text = "TUTOR";
    //            //FpSpread1.Sheets[0].Cells[count1 + 14, 0].HorizontalAlign = HorizontalAlign.Center;
    //            //FpSpread1.Sheets[0].SpanModel.Add(count1 + 14, 1, 1, 2);
    //            //FpSpread1.Sheets[0].Cells[count1 + 14, 1].Text = "ACADAMIC CO-ORDINATOR";
    //            //FpSpread1.Sheets[0].Cells[count1 + 14, 1].HorizontalAlign = HorizontalAlign.Center;
    //            //FpSpread1.Sheets[0].Cells[count1 + 14, 1].Font.Bold = true;
    //            //FpSpread1.Sheets[0].Cells[count1 + 14, 3].HorizontalAlign = HorizontalAlign.Right;
    //            //FpSpread1.Sheets[0].Cells[count1 + 14, 3].Text = "PRINCIPAL";
    //            //FpSpread1.Sheets[0].Cells[count1 + 14, 3].Font.Bold = true;
    //            FpSpread1.Sheets[0].SpanModel.Add(count1 + 16, 0, 1, 6);
    //            FpSpread1.Sheets[0].Cells[count1 + 16, 0].Text = "Parent/Guardian Signature ________________";
    //            FpSpread1.Sheets[0].SpanModel.Add(count1 + 17, 0, 1, 7);
    //            FpSpread1.Sheets[0].Cells[count1 + 17, 0].Text = "------------------------------------------------------------------------------------------------";

    //            //'--------------------start footer 10.04.12
    //            if (dsprint.Tables[0].Rows.Count > 0)
    //            {
    //                if (dsprint.Tables[0].Rows[0]["footer"].ToString() != "")
    //                {

    //                    footer_count = Convert.ToInt16(dsprint.Tables[0].Rows[0]["footer"].ToString());
    //                    //FpSpread1.Sheets[0].RowCount += 3;
    //                    footer_text = dsprint.Tables[0].Rows[0]["footer_name"].ToString();
    //                    string[] footer_text_split = footer_text.Split(',');
    //                    footer_text = "";

    //                    if (footer_count == 1)
    //                    {
    //                        FpSpread1.Sheets[0].Cells[count1 + 14, 2].Text = footer_text.ToString();
    //                    }
    //                    else if ((FpSpread1.Sheets[0].ColumnCount - 3) < footer_count)
    //                    {
    //                        for (int concod_footer = 0; concod_footer < footer_count; concod_footer++)
    //                        {
    //                            if (footer_text == "")
    //                            {
    //                                footer_text = footer_text_split[concod_footer].ToString();
    //                            }
    //                            else
    //                            {
    //                                footer_text = footer_text + "   " + footer_text_split[concod_footer].ToString();
    //                            }
    //                        }
    //                        for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount - 3; col_count++)
    //                        {
    //                            if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                            {
    //                                FpSpread1.Sheets[0].SpanModel.Add(count1 + 14, col_count, 1, FpSpread1.Sheets[0].ColumnCount - 3);
    //                                FpSpread1.Sheets[0].SpanModel.Add(count1 + 14, col_count, 1, FpSpread1.Sheets[0].ColumnCount - 3);
    //                                FpSpread1.Sheets[0].SpanModel.Add(count1 + 14, col_count, 1, FpSpread1.Sheets[0].ColumnCount - 3);
    //                                FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Text = footer_text;
    //                                FpSpread1.Sheets[0].Cells[count1 + 14, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Font.Bold = true;
    //                                FpSpread1.Sheets[0].Cells[count1 + 14, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Font.Size = FontUnit.Medium;
    //                                break;
    //                            }
    //                        }
    //                    }
    //                    else if ((FpSpread1.Sheets[0].ColumnCount - 3) == footer_count)
    //                    {
    //                        for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount - 3; col_count++)
    //                        {
    //                            if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                            {
    //                                FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Text = footer_text_split[temp_count].ToString();
    //                                FpSpread1.Sheets[0].Cells[count1 + 14, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                FpSpread1.Sheets[0].Cells[count1 + 14, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Font.Bold = true;
    //                                FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Font.Size = FontUnit.Medium;
    //                                temp_count++;
    //                                if (temp_count == footer_count)
    //                                {
    //                                    break;
    //                                }
    //                            }
    //                        }
    //                    }
    //                    else
    //                    {
    //                        temp_count = 0;
    //                        split_col_for_footer = (FpSpread1.Sheets[0].ColumnCount - 3) / footer_count;
    //                        footer_balanc_col = (FpSpread1.Sheets[0].ColumnCount - 3) % footer_count;
    //                        for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount - 3; col_count++)
    //                        {
    //                            if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                            {
    //                                FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Text = footer_text_split[temp_count].ToString();
    //                                FpSpread1.Sheets[0].Cells[count1 + 14, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                FpSpread1.Sheets[0].Cells[count1 + 14, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Font.Bold = true;
    //                                FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Border.BorderColorLeft = Color.White;
    //                                FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Border.BorderColorRight = Color.White;
    //                                FpSpread1.Sheets[0].Cells[count1 + 14, col_count].Font.Size = FontUnit.Medium;
    //                                temp_count++;
    //                                if (temp_count == 0)
    //                                {
    //                                    col_count = col_count + split_col_for_footer + footer_balanc_col;
    //                                }
    //                                else
    //                                {
    //                                    col_count = col_count + split_col_for_footer;
    //                                }
    //                                if (temp_count == footer_count)
    //                                {
    //                                    break;
    //                                }
    //                            }
    //                        }
    //                    }
    //                }
    //            }
    //            //'--------------------end footer
    //            con.Close();
    //        }
    //    }
    //}

    //public void pop_page_function4()
    //{
    //    FpSpread1.SaveChanges();
    //    //FpSpread1.Visible = true;
    //    string poppage_value = ddlpoppage.SelectedValue.ToString();//spilt the poppage selected value

    //    Labelnew.Visible = false;
    //    TextBoxnew.Visible = false;

    //    FpEntry.SaveChanges();
    //    FpSpread1.SaveChanges();
    //    string strsc = "";
    //    if (ddlBranch.Text != "")
    //    {
    //        branch = ddlBranch.SelectedItem.Text;
    //    }
    //    if (ddlDegree.Text != "")
    //    {
    //        degree = ddlDegree.SelectedItem.Text;
    //    }
    //    sem = ddlSemYr.SelectedValue;
    //    sec = ddlSec.SelectedValue;

    //    if (ddlSemYr.Text != "")
    //    {
    //        semester = Convert.ToInt32(ddlSemYr.SelectedValue);
    //    }
    //    colege_code = Session["collegecode"].ToString();
    //    degree1 = ddlBranch.SelectedValue;
    //    FpSpread1.Sheets[0].RowCount = 0;
    //    Label4.Visible = true;
    //    frdate = TextBox2.Text;
    //    todate = TextBox1.Text;
    //    Label4.Visible = false;
    //    //format2btn.Visible = true;
    //    FpSpread1.Visible = true;
    //    FpSpread1.Sheets[0].PageSize = 40;
    //    FpSpread1.Sheets[0].RowHeader.Visible = false;
    //    FpSpread1.Sheets[0].DefaultStyle.Font.Name = "Book Antique";
    //    FpSpread1.Sheets[0].DefaultStyle.Font.Bold = false;
    //    FpSpread1.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
    //    FpSpread1.Sheets[0].ColumnHeader.Visible = false;

    //    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ hdr by mythili 10.04.12
    //    hat.Clear();
    //    hat.Add("college_code", Session["collegecode"].ToString());
    //    hat.Add("form_name", "CAMLetter.aspx");
    //    dsprint = dacces.select_method("PROC_PRINT_MASTER_SETTINGS", hat, "sp");
    //    if (dsprint.Tables[0].Rows.Count > 0)
    //    {
    //        if (dsprint.Tables[0].Rows[0]["college_name"].ToString() != string.Empty)
    //        {
    //            collnamenew1 = dsprint.Tables[0].Rows[0]["college_name"].ToString();
    //        }
    //        if (dsprint.Tables[0].Rows[0]["address1"].ToString() != "")
    //        {
    //            address1 = dsprint.Tables[0].Rows[0]["address1"].ToString();
    //            address = address1;
    //        }
    //        if (dsprint.Tables[0].Rows[0]["address2"].ToString() != "")
    //        {
    //            address2 = dsprint.Tables[0].Rows[0]["address2"].ToString();
    //            address = address1 + "-" + address2;

    //        }
    //        if (dsprint.Tables[0].Rows[0]["address3"].ToString() != "")
    //        {
    //            district = dsprint.Tables[0].Rows[0]["address3"].ToString();
    //            address = address1 + "-" + address2 + "-" + district;
    //        }
    //        if (dsprint.Tables[0].Rows[0]["phoneno"].ToString() != "")
    //        {
    //            Phoneno = dsprint.Tables[0].Rows[0]["phoneno"].ToString();
    //            phnfax = "Phone :" + " " + Phoneno;
    //        }
    //        if (dsprint.Tables[0].Rows[0]["faxno"].ToString() != "")
    //        {
    //            Faxno = dsprint.Tables[0].Rows[0]["faxno"].ToString();
    //            phnfax = phnfax + "Fax  :" + " " + Faxno;
    //        }
    //        if ((dsprint.Tables[0].Rows[0]["email"].ToString() != ""))
    //        {
    //            email = "E-Mail:" + dsprint.Tables[0].Rows[0]["email"].ToString();
    //        }
    //        if (dsprint.Tables[0].Rows[0]["website"].ToString() != "")
    //        {
    //            email = email + " " + "Web Site:" + dsprint.Tables[0].Rows[0]["website"].ToString();
    //        }
    //    }
    //    else if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //    {
    //        string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo from collinfo where college_code=" + Session["collegecode"] + "";
    //        SqlCommand collegecmd = new SqlCommand(college, con);
    //        SqlDataReader collegename;
    //        con.Close();
    //        con.Open();
    //        collegename = collegecmd.ExecuteReader();
    //        if (collegename.HasRows)
    //        {
    //            while (collegename.Read())
    //            {
    //                collnamenew1 = collegename["collname"].ToString();
    //                address1 = collegename["address1"].ToString();
    //                address2 = collegename["address2"].ToString();
    //                address3 = collegename["address3"].ToString();
    //                pincode = collegename["pincode"].ToString();
    //            }
    //        }
    //        con.Close();
    //    }
    //    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //    rol_no = poppage_value.ToString();
    //    Label4.Visible = false;
    //    //format2btn.Visible = true;
    //    for (int j = 0; j < chklstest.Items.Count; j++)
    //    {
    //        if (chklstest.Items[j].Selected == true)
    //        {
    //            string criteria_no = chklstest.Items[j].Value.ToString();
    //            test = chklstest.Items[j].Text.ToString();
    //            string pop_studname = GetFunction("select stud_name from registration where roll_no='" + rol_no + "'");
    //            name = pop_studname;
    //            FpSpread1.Sheets[0].ColumnCount = 0;
    //            FpSpread1.Sheets[0].ColumnCount = 5;
    //            FpSpread1.Sheets[0].Columns[0].Width = 50;
    //            FpSpread1.Sheets[0].Columns[1].Width = 200;
    //            FpSpread1.Sheets[0].Columns[2].Width = 200;
    //            FpSpread1.Sheets[0].Columns[3].Width = 50;
    //            FpSpread1.Sheets[0].Columns[4].Width = 200;
    //            FpSpread1.Width = 700;
    //            FpSpread1.Height = 500;

    //            FpSpread1.Sheets[0].ScrollingContentVisible = true;
    //            DateTime exam_month_year = Convert.ToDateTime(GetFunction("select distinct exam_date from exam_type inner join criteriaforinternal on criteriaforinternal.criteria_no=exam_type.criteria_no where criteriaforinternal.criteria_no= " + criteria_no + ""));
    //            string mon_yr = exam_month_year.ToString("MMM") + " " + exam_month_year.ToString("yyyy");
    //            FpSpread1.Sheets[0].RowCount += 40;//27.04.12 added new
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 40), 1, 1, 3);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].Text = collnamenew1;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].Font.Size = FontUnit.Medium;


    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 39), 1, 1, 3);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].HorizontalAlign = HorizontalAlign.Center;

    //            //'---------------to set the address
    //            if (dsprint.Tables[0].Rows.Count > 0)
    //            {
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Text = address + "," + phnfax;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Font.Size = FontUnit.Medium;
    //            }
    //            else
    //            {
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Text = address1 + ", " + address2 + ", " + address3 + "," + pincode;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Font.Size = FontUnit.Medium;
    //            }
    //            //'-------------------to set the emila

    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 38), 1, 1, 3);
    //            if (dsprint.Tables[0].Rows.Count > 0)
    //            {
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 1].Text = email;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 1].Font.Size = FontUnit.Medium;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 1].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 1].Font.Bold = true;
    //            }
    //            //'----------------end to set the address

    //            //'-------------for logo------------------

    //            MyImg mi = new MyImg();//set the logo for letter format
    //            mi.ImageUrl = "Handler/Handler2.ashx?";
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 40, 0, 3, 1);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 0].CellType = mi;
    //            //FarPoint.Web.Spread.ImageCellType imgeve = new FarPoint.Web.Spread.ImageCellType();

    //            //MyImg mi4 = new MyImg();
    //            //mi4.ImageUrl = "Handler/Handler5.ashx?";
    //            //FpSpread1.Sheets[0].ColumnHeaderSpanModel.Add(FpSpread1.Sheets[0].RowCount - 39, 4, 3, 1);
    //            //FpSpread1.Sheets[0].ColumnHeader.Cells[FpSpread1.Sheets[0].RowCount - 39, 4].CellType = mi4;

    //            //'----------------------------------

    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 37), 0, 1, 5);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].Text = "Dear Parents,";


    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 36), 0, 1, 5);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 0].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 0].Text = "Sub: Continuous Assesment Test Progress Report-Reg";

    //            yr_val = ddlSemYr.SelectedItem.ToString();
    //            getyear();
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 34), 0, 1, 5);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 34, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 34, 0].Text = "This is to inform you that Your Son/Daughter/Ward/Selvan/Selvi ...." + name + "....studying in " + yr_string;



    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 33), 0, 1, 5);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 33, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 33, 0].Text = degree + " [" + branch + "] has secured the following marks in the Continuous Assesment ";



    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 32), 0, 1, 5);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 0].Text = "....Test" + "     " + test + "....conducted during...." + mon_yr + "....";


    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 30), 0, 1, 5);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 0].Text = "Total Marks:";

    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 29), 1, 1, 2);
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 29), 3, 1, 2);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 0].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 3].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 0].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 3].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 0].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 3].Border.BorderColorTop = Color.Black;

    //            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 30].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 29].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 29].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 0].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 3].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 0].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 3].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 0].Text = "S.No";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Text = "Subject";
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 3].Text = "Marks out of";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 3].Text = "Marks";
    //            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 29].HorizontalAlign = HorizontalAlign.Center;
    //            string get_row_val = "";
    //            for (int sno_loop = 0; sno_loop < FpEntry.Sheets[0].RowCount; sno_loop++)
    //            {
    //                if (rol_no == FpEntry.Sheets[0].Cells[sno_loop, 1].Text)
    //                {
    //                    get_row_val = sno_loop.ToString();
    //                }
    //            }
    //            //string[] spl_row_val = get_row_val.Split('$');
    //            //int res_val = Convert.ToInt32(spl_row_val[2].ToString());
    //            int row28 = FpSpread1.Sheets[0].RowCount - 28;
    //            int subject_row_incr = 0;
    //            int sno = 0;
    //            for (int colm = 0; colm <= FpEntry.Sheets[0].ColumnCount - 1; colm++)
    //            {
    //                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 4].Border.BorderColorRight = Color.Black;
    //                if (FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note != "")
    //                {
    //                    sno++;
    //                    con.Close();
    //                    con.Open();
    //                    string subjname = "";
    //                    string getmark = FpEntry.Sheets[0].Cells[Convert.ToInt32(get_row_val), colm].Text;
    //                    string subject_no1 = FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note;
    //                    string subname = "select subject_name,acronym from subject where subject_no=" + subject_no1 + "";
    //                    SqlDataAdapter da = new SqlDataAdapter(subname, con);
    //                    DataSet ds = new DataSet();
    //                    da.Fill(ds);
    //                    con.Close();
    //                    con.Open();
    //                    if (ds.Tables[0].Rows.Count > 0)
    //                    {
    //                        subjname = ds.Tables[0].Rows[0]["subject_name"].ToString();
    //                    }
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 1, 1, 2);
    //                    FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 3, 1, 2);
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 0].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 1].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 3].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 0].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 1].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 3].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 0].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 1].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 3].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 0].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 1].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 3].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Rows[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr].HorizontalAlign = HorizontalAlign.Center;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 0].Text = sno.ToString();
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 1].Text = subjname;///////////////
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 1].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 3].Text = getmark;// + "/100";
    //                    if (getmark == "A" || getmark == "AA" || getmark == "AAA" || getmark == "P")
    //                    {
    //                        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 3].Text = "AAA";
    //                    }
    //                    subject_row_incr++;
    //                }
    //            }
    //            int row_value = (row28 + subject_row_incr);
    //            FpSpread1.Sheets[0].SpanModel.Add(row_value - 1, 0, 1, 2);
    //            FpSpread1.Sheets[0].SpanModel.Add((row_value - 1), 2, 1, 2);
    //            FpSpread1.Sheets[0].Cells[row_value - 1, 0].Border.BorderColorBottom = Color.Black;

    //            FpSpread1.Sheets[0].Cells[row_value - 1, 3].Border.BorderColorBottom = Color.Black;

    //            FpSpread1.Sheets[0].Cells[row_value - 1, 2].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value - 1, 4].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value - 1, 0].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value - 1, 2].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value - 1, 4].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value - 1, 0].Text = "Total No.of Working days";
    //            FpSpread1.Sheets[0].Cells[row_value - 1, 2].Text = "No.of days Attended";
    //            FpSpread1.Sheets[0].Cells[row_value - 1, 4].Text = "% of Attended";

    //            FpSpread1.Sheets[0].Cells[row_value - 1, 0].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value - 1, 2].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value - 1, 2].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value - 1, 4].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Rows[row_value - 1].HorizontalAlign = HorizontalAlign.Center;

    //            //============ATTND %
    //            FpSpread1.Sheets[0].SpanModel.Add(row_value, 0, 1, 2);
    //            FpSpread1.Sheets[0].SpanModel.Add(row_value, 2, 1, 2);
    //            FpSpread1.Sheets[0].Cells[row_value, 0].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value, 2].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value, 2].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value, 4].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value, 0].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value, 2].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value, 4].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value, 0].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value, 2].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value, 4].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value, 1].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value, 2].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value, 3].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[row_value, 4].Border.BorderColorLeft = Color.Black;
    //            //-------------------
    //            persentmonthcal();
    //            double per_tage_day;
    //            string dum_tage_date = "";
    //            per_tage_day = ((pre_present_date / per_workingdays) * 100);
    //            if (per_tage_day > 100)
    //            {
    //                per_tage_day = 100;
    //            }
    //            dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //            if (dum_tage_date == "NaN")
    //            {
    //                dum_tage_date = "0";
    //            }
    //            else if (dum_tage_date == "Infinity")
    //            {
    //                dum_tage_date = "0";
    //            }
    //            FpSpread1.Sheets[0].Rows[row_value].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[row_value, 0].Text = per_workingdays.ToString();
    //            FpSpread1.Sheets[0].Cells[row_value, 2].Text = pre_present_date.ToString();
    //            FpSpread1.Sheets[0].Cells[row_value, 4].Text = dum_tage_date.ToString();

    //            FpSpread1.Sheets[0].SpanModel.Add((row_value + 2), 0, 1, 5);
    //            FpSpread1.Sheets[0].SpanModel.Add((row_value + 3), 0, 1, 5);
    //            FpSpread1.Sheets[0].Cells[(row_value + 3), 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[(row_value + 2), 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[(row_value + 2), 0].Text = "Failed in __________ Subjects";
    //            FpSpread1.Sheets[0].Cells[(row_value + 3), 0].Text = "In this regards you are requested to meet the HOD on __________________";

    //            //////'--------------new added for remarks start 26.04.12

    //            FpSpread1.Sheets[0].SpanModel.Add(((row_value + 6)), 1, 1, 4);
    //            FpSpread1.Sheets[0].SpanModel.Add(((row_value + 7)), 0, 1, 5);

    //            FpSpread1.Sheets[0].Cells[(row_value + 5), 0].Text = "Remarks:";
    //            FpSpread1.Sheets[0].Cells[(row_value + 5), 0].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[(row_value + 6), 1].Text = "      As per Anna university regulations a student has to secure a minimum of 75%  attendance";
    //            FpSpread1.Sheets[0].Cells[(row_value + 7), 0].Text = " to appear for the examination";
    //            //////'-------------end 

    //            FpSpread1.Sheets[0].Cells[(row_value + 9), 0].HorizontalAlign = HorizontalAlign.Right;
    //            FpSpread1.Sheets[0].SpanModel.Add((row_value + 9), 0, 1, 3);
    //            FpSpread1.Sheets[0].SpanModel.Add((row_value + 9), 3, 1, 2);
    //            FpSpread1.Sheets[0].Cells[(row_value + 9), 0].Text = "Student's Counseller";
    //            FpSpread1.Sheets[0].Cells[(row_value + 9), 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[(row_value + 9), 3].Text = "HOD       ";
    //            FpSpread1.Sheets[0].Cells[(row_value + 9), 3].HorizontalAlign = HorizontalAlign.Left;

    //            FpSpread1.Sheets[0].SpanModel.Add((row_value + 10), 0, 1, 5);
    //            FpSpread1.Sheets[0].Cells[(row_value + 10), 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[(row_value + 10), 0].Text = "---------------------------------------------------cut here--------------------------------------------------------";

    //            FpSpread1.Sheets[0].SpanModel.Add((row_value + 11), 0, 1, 5);
    //            FpSpread1.Sheets[0].SpanModel.Add((row_value + 12), 0, 1, 5);

    //            FpSpread1.Sheets[0].Cells[(row_value + 11), 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[(row_value + 12), 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[(row_value + 14), 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[(row_value + 11), 0].Text = "Kindly acknowledge the receipt of this communication with your signature and return the same to the";
    //            FpSpread1.Sheets[0].Cells[(row_value + 12), 0].Text = "college by return of post";

    //            FpSpread1.Sheets[0].Cells[(row_value + 14), 0].Text = "Name:";
    //            FpSpread1.Sheets[0].Cells[(row_value + 14), 1].Text = name;
    //            FpSpread1.Sheets[0].Cells[(row_value + 15), 0].Text = "Roll No.:";
    //            FpSpread1.Sheets[0].Cells[(row_value + 15), 1].Text = rol_no;
    //            FpSpread1.Sheets[0].SpanModel.Add((row_value + 15), 3, 1, 2);
    //            FpSpread1.Sheets[0].Cells[(row_value + 15), 3].Text = "Signature of parent/Guardian";
    //            FpSpread1.Sheets[0].Cells[(row_value + 15), 2].HorizontalAlign = HorizontalAlign.Right;
    //            FpSpread1.Sheets[0].Cells[(row_value + 15), 2].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[(row_value + 16), 0].Text = "Batch:";
    //            FpSpread1.Sheets[0].Cells[(row_value + 16), 1].Text = ddlBatch.SelectedValue.ToString();
    //            FpSpread1.Sheets[0].Columns[0].Width = 100;

    //            //'--------------------start footer 10.04.12
    //            if (dsprint.Tables[0].Rows.Count > 0)
    //            {
    //                if (dsprint.Tables[0].Rows[0]["footer"].ToString() != "")
    //                {
    //                    footer_count = Convert.ToInt16(dsprint.Tables[0].Rows[0]["footer"].ToString());
    //                    FpSpread1.Sheets[0].RowCount += 3;
    //                    footer_text = dsprint.Tables[0].Rows[0]["footer_name"].ToString();
    //                    string[] footer_text_split = footer_text.Split(',');
    //                    footer_text = "";
    //                    if (footer_count == 1)
    //                    {
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Text = footer_text.ToString();
    //                    }
    //                    else if ((FpSpread1.Sheets[0].ColumnCount) < footer_count)
    //                    {
    //                        for (int concod_footer = 0; concod_footer < footer_count; concod_footer++)
    //                        {
    //                            if (footer_text == "")
    //                            {
    //                                footer_text = footer_text_split[concod_footer].ToString();
    //                            }
    //                            else
    //                            {
    //                                footer_text = footer_text + "   " + footer_text_split[concod_footer].ToString();
    //                            }
    //                        }
    //                        for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount; col_count++)
    //                        {
    //                            if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                            {
    //                                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, col_count, 1, final_print_col_cnt);
    //                                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, col_count, 1, final_print_col_cnt);
    //                                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, col_count, 1, final_print_col_cnt);
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Text = footer_text;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Bold = true;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Size = FontUnit.Medium;
    //                                break;
    //                            }
    //                        }
    //                    }
    //                    else if ((FpSpread1.Sheets[0].ColumnCount) == footer_count)
    //                    {
    //                        for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount; col_count++)
    //                        {
    //                            if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                            {
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Text = footer_text_split[temp_count].ToString();
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Bold = true;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Size = FontUnit.Medium;
    //                                temp_count++;
    //                                if (temp_count == footer_count)
    //                                {
    //                                    break;
    //                                }
    //                            }
    //                        }
    //                    }
    //                    else
    //                    {
    //                        temp_count = 0;
    //                        split_col_for_footer = (FpSpread1.Sheets[0].ColumnCount) / footer_count;
    //                        footer_balanc_col = (FpSpread1.Sheets[0].ColumnCount) % footer_count;

    //                        for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount; col_count++)
    //                        {
    //                            if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                            {
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Text = footer_text_split[temp_count].ToString();
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Bold = true;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Border.BorderColorLeft = Color.White;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Border.BorderColorRight = Color.White;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Size = FontUnit.Medium;
    //                                temp_count++;
    //                                if (temp_count == 0)
    //                                {
    //                                    col_count = col_count + split_col_for_footer + footer_balanc_col;
    //                                }
    //                                else
    //                                {
    //                                    col_count = col_count + split_col_for_footer;
    //                                }
    //                                if (temp_count == footer_count)
    //                                {
    //                                    break;
    //                                }
    //                            }
    //                        }
    //                    }
    //                }
    //            }
    //        }
    //    }
    //}

    //public void pop_page_function5()
    //{
    //    DataSet ds = new DataSet();
    //    string Registration_no = "";
    //    int xres = 0;
    //    int mm = 1;
    //    Labelnew.Visible = false;
    //    TextBoxnew.Visible = false;

    //    FpEntry.SaveChanges();
    //    FpSpread1.SaveChanges();
    //    string strsc = "";
    //    if (ddlBranch.Text != "")
    //    {
    //        branch = ddlBranch.SelectedItem.Text;
    //    }
    //    if (ddlDegree.Text != "")
    //    {
    //        degree = ddlDegree.SelectedItem.Text;
    //    }
    //    sem = ddlSemYr.SelectedValue;
    //    sec = ddlSec.SelectedValue;
    //    if (ddlSemYr.Text != "")
    //    {
    //        semester = Convert.ToInt32(ddlSemYr.SelectedValue);
    //    }
    //    colege_code = Session["collegecode"].ToString();
    //    degree1 = ddlBranch.SelectedValue;
    //    FpSpread1.Sheets[0].RowCount = 0;
    //    Label4.Visible = true;
    //    frdate = TextBox2.Text;
    //    todate = TextBox1.Text;
    //    string poppage_value = ddlpoppage.SelectedValue.ToString();//spilt the poppage selected value

    //    //for (res = 0; res < Convert.ToInt32(FpEntry.Sheets[0].RowCount) - 4; res++)
    //    //{

    //    //    isval = 0;
    //    //    s = FpEntry.Sheets[0].Cells[res, 0].Text;

    //    //isval = Convert.ToInt32(FpEntry.Sheets[0].Cells[res, 0].Value);
    //    //if (isval == 1)
    //    //{
    //    Label4.Visible = false;
    //    //format2btn.Visible = true;
    //    FpSpread1.Visible = true;
    //    FpSpread1.Sheets[0].PageSize = 40;
    //    FpSpread1.Sheets[0].RowHeader.Visible = false;
    //    FpSpread1.Sheets[0].DefaultStyle.Font.Name = "Book Antique";
    //    FpSpread1.Sheets[0].DefaultStyle.Font.Bold = false;
    //    FpSpread1.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
    //    FpSpread1.Sheets[0].ColumnHeader.Visible = false;

    //    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ hdr by mythili 10.04.12
    //    hat.Clear();
    //    hat.Add("college_code", Session["collegecode"].ToString());
    //    hat.Add("form_name", "CAMLetter.aspx");
    //    dsprint = dacces.select_method("PROC_PRINT_MASTER_SETTINGS", hat, "sp");
    //    if (dsprint.Tables[0].Rows.Count > 0)
    //    {

    //        if (dsprint.Tables[0].Rows[0]["college_name"].ToString() != string.Empty)
    //        {
    //            collnamenew1 = dsprint.Tables[0].Rows[0]["college_name"].ToString();
    //        }
    //        if (dsprint.Tables[0].Rows[0]["address1"].ToString() != "")
    //        {
    //            address1 = dsprint.Tables[0].Rows[0]["address1"].ToString();
    //            address = address1;
    //        }
    //        if (dsprint.Tables[0].Rows[0]["address2"].ToString() != "")
    //        {
    //            address2 = dsprint.Tables[0].Rows[0]["address2"].ToString();
    //            address = address1 + "-" + address2;

    //        }
    //        if (dsprint.Tables[0].Rows[0]["address3"].ToString() != "")
    //        {
    //            district = dsprint.Tables[0].Rows[0]["address3"].ToString();
    //            address = address1 + "-" + address2 + "-" + district;
    //        }

    //        if (dsprint.Tables[0].Rows[0]["phoneno"].ToString() != "")
    //        {
    //            Phoneno = dsprint.Tables[0].Rows[0]["phoneno"].ToString();
    //            phnfax = "Phone :" + " " + Phoneno;
    //        }
    //        if (dsprint.Tables[0].Rows[0]["faxno"].ToString() != "")
    //        {
    //            Faxno = dsprint.Tables[0].Rows[0]["faxno"].ToString();
    //            phnfax = phnfax + "Fax  :" + " " + Faxno;
    //        }

    //        if ((dsprint.Tables[0].Rows[0]["email"].ToString() != ""))
    //        {
    //            email = "E-Mail:" + dsprint.Tables[0].Rows[0]["email"].ToString();
    //        }
    //        if (dsprint.Tables[0].Rows[0]["website"].ToString() != "")
    //        {
    //            email = email + " " + "Web Site:" + dsprint.Tables[0].Rows[0]["website"].ToString();
    //        }

    //    }
    //    else if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //    {
    //        string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo,district from collinfo where college_code=" + Session["collegecode"] + "";
    //        SqlCommand collegecmd = new SqlCommand(college, con);
    //        SqlDataReader collegename;
    //        con.Close();
    //        con.Open();
    //        collegename = collegecmd.ExecuteReader();
    //        if (collegename.HasRows)
    //        {
    //            while (collegename.Read())
    //            {
    //                collnamenew1 = collegename["collname"].ToString();
    //                address1 = collegename["address1"].ToString();
    //                address2 = collegename["address2"].ToString();
    //                address3 = collegename["address3"].ToString();
    //                pincode = collegename["pincode"].ToString();
    //                district = collegename["district"].ToString();
    //            }
    //        }
    //        con.Close();
    //    }
    //    //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //    rol_no = poppage_value;


    //    Label4.Visible = false;
    //    //format2btn.Visible = true;
    //    for (int j = 0; j < chklstest.Items.Count; j++)
    //    {
    //        if (chklstest.Items[j].Selected == true)
    //        {
    //            string criteria_no = chklstest.Items[j].Value.ToString();
    //            test = chklstest.Items[j].Text.ToString();

    //            string pop_studname = GetFunction("select stud_name from registration where roll_no='" + rol_no + "'");
    //            name = pop_studname;
    //            FpSpread1.Sheets[0].ColumnCount = 5;
    //            FpSpread1.Sheets[0].Columns[0].Width = 50;
    //            FpSpread1.Sheets[0].Columns[1].Width = 200;
    //            FpSpread1.Sheets[0].Columns[2].Width = 150;
    //            FpSpread1.Sheets[0].Columns[3].Width = 150;
    //            FpSpread1.Sheets[0].Columns[4].Width = 150;
    //            FpSpread1.Width = 700;
    //            FpSpread1.Height = 500;
    //            FpSpread1.Sheets[0].ScrollingContentVisible = true;
    //            DateTime exam_month_year = Convert.ToDateTime(GetFunction("select distinct exam_date from exam_type inner join criteriaforinternal on criteriaforinternal.criteria_no=exam_type.criteria_no where criteriaforinternal.criteria_no= " + criteria_no + ""));
    //            string mon_yr = exam_month_year.ToString("MMM");// +" " + exam_month_year.ToString("yyyy");

    //            FpSpread1.Sheets[0].RowCount += 40;//27.04.12 added new

    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 40), 1, 1, 3);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].HorizontalAlign = HorizontalAlign.Center;

    //            if (collnamenew1 == "KONGU ENGINEERING COLLEGE")
    //            {
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].Font.Name = "AMUDHAM"; //college name and address
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].Text = " bfh';F bghwpapay; fy;Yhup ,bgUe;Jiw  <nuhL ";
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].Font.Size = FontUnit.Medium;
    //            }

    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 39), 1, 1, 4);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Font.Name = "Book Antiqua";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Text = collnamenew1.ToString() + "," + address1 + "," + district + "," + pincode;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Font.Size = FontUnit.Medium;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].HorizontalAlign = HorizontalAlign.Center;

    //            ////'---------------to set the address
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 38), 1, 1, 3);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 1].Font.Name = "Book Antiqua"; // department of--------
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 1].Text = "Deaprtment of   " + ddlBranch.SelectedItem.ToString() + "  ";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 1].Font.Size = FontUnit.Medium;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 1].HorizontalAlign = HorizontalAlign.Right;

    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 4].Font.Name = "AMUDHAM"; // dept in tamil
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 4].Text = "Jiw  ";
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 4].Font.Size = FontUnit.Medium;

    //            //'-------------------to set the emila

    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 37, 0, 1, 2);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].Font.Name = "AMUDHAM"; // dear sir madam in tamil
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].Text = "md;g[ilaPh; ";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].Font.Size = FontUnit.Medium;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].Font.Bold = true;

    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 4].Font.Name = "AMUDHAM"; //date in tamil
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 4].Text = "ehs;";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 4].Font.Size = FontUnit.Medium;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 4].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 4].Font.Bold = true;


    //            //'----------------end to set the address

    //            //'-------------for logo------------------

    //            MyImg mi = new MyImg();//set the logo for letter format
    //            mi.ImageUrl = "Handler/Handler2.ashx?";
    //            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 40, 0, 3, 1);
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 0].CellType = mi; //22.06.12



    //            //'----------------------------------

    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 36), 0, 1, 2);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 0].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 0].Font.Name = "Book Antiqua";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 0].Text = "Dear Sir/Madam";


    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 36), 4, 1, 2);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 4].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 4].Font.Name = "Book Antiqua";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 4].Text = "Date";


    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 35, 0].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 35, 0].Font.Name = "AMUDHAM"; //vanakkam in tamil
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 35, 0].Text = ". tzf;fk;";




    //            yr_val = ddlSemYr.SelectedItem.ToString();
    //            getyear();

    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 34), 0, 1, 2);


    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 34, 0].HorizontalAlign = HorizontalAlign.Right;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 34, 0].Font.Name = "AMUDHAM";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 34, 0].Text = "j';fs; kfd;_kfs;"; // your son/daughter in tamil

    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 34), 2, 1, 1);

    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 34, 2].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 34, 2].Text = name; //stud name 

    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 34), 3, 1, 1);

    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 34, 3].Font.Name = "AMUDHAM"; //rollno in tamil
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 34, 3].Text = "tupir vz; ";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 34, 4].Text = rol_no;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 34, 3].HorizontalAlign = HorizontalAlign.Center;



    //            //string tamil_branch = ddlBranch.SelectedItem.ToString();
    //            //@@@@@@@@@@@@@ to display the dept in tamil  have to write case
    //            //switch (tamil_branch)
    //            //{
    //            //    case "COMPUTER SCIENCE AND ENGINEERING":
    //            //        tamil_branch = "fk;a{l;lh;rapd;!@ ,d;$pd%hp';";
    //            //        break;
    //            //    case "ELECTRICAL AND ELECTRONIC ENGINEERING":
    //            //        tamil_branch = "vyf;l;hpfy; vyf;l;uhdpf; ,d;$pdPup';";
    //            //        break;
    //            //    case "ELECTRONICS & COMMUNICATION ENGINEERING":
    //            //        tamil_branch = "";
    //            //        break;
    //            //}



    //            //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 33, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 33, 0].Font.Name = "AMUDHAM";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 33, 0].Text = "Mz;L  " + ddlBatch.SelectedItem.ToString() + " gpupt[ "; //year in tamil and branch

    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 33), 0, 1, 2);
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 33, 0].HorizontalAlign = HorizontalAlign.Center;
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 33, 0].Font.Name = "AMUDHAM";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 33, 2].Text = ddlBranch.SelectedItem.ToString();
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 33), 2, 1, 3);//26.06.12

    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 0].Font.Name = "AMUDHAM"; // month in  tamil
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 0].Text = "khjj;jpy; eilbgw;w r[w;Wj;njh;t[1-r[w;Wj;njh;t[2- khjpupj;nju; t[-gy;fiyf;fHfj;nju;tpy;bgw;w kjpg;bgz; gl;oaYk;  ";

    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 32), 0, 1, 5);//26.06.12
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 0].HorizontalAlign = HorizontalAlign.Left; //ithuvarai varugai pathivum
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 0].Font.Name = "AMUDHAM";
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 0].Text = "  ;";

    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 31), 0, 1, 5);//26.06.12
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 31, 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 31, 0].Font.Name = "AMUDHAM";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 31, 0].Text = ",Jtiu tUifg;gjpt[k; bfhLf;fg;gl;Ls;sd. gy;fiyf;fHf tpjpKiwapd go nju;r;rp bgw xt;bthU ghlj;jpYk;  Fiwe;j gl;rk; 50# kjpg;bgz;fs; bgw ntz;Lk;";

    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 30), 0, 1, 5);//26.06.12
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 0].HorizontalAlign = HorizontalAlign.Left; //in english
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 0].Text = "The marks scored in each subject by your son/daughter " + name + " " + "Roll No " + rol_no + " Year " + ddlBatch.SelectedItem.ToString();
    //            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 29), 0, 1, 5);//26.06.12
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 0].Text = "Branch  " + ddlBranch.SelectedItem.ToString() + " " + " Month " + mon_yr + " " + "in " + " " + test + " " + "conducted during " + exam_month_year.ToString("yyyy") + " and attendance till date are given below.The minimum passing marks is 50% in  each subject as per university rules";


    //            ////@@@@@@@@@@ old chaged on 26.06.12 by mythili
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 0].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 3].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 0].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 3].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 0].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 3].Border.BorderColorTop = Color.Black;

    //            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 29].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 28].Border.BorderColorBottom = Color.Black;
    //            FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 28].Border.BorderColorTop = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 0].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 3].Border.BorderColorLeft = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 0].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 3].Border.BorderColorRight = Color.Black;

    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 0].Text = "Sl.No";

    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Text = "Subject";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].HorizontalAlign = HorizontalAlign.Center;

    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 2].Text = "Maximum Mark";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 2].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 2].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 2].Border.BorderColorBottom = Color.Black;

    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 3].Text = "Scored Marks";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 3].HorizontalAlign = HorizontalAlign.Center;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 4].Text = "Max mark in the subject in the class";
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 4].Border.BorderColorRight = Color.Black;
    //            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 4].Border.BorderColorBottom = Color.Black;
    //            //@@@@@@@@@@ table hesding name
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 0].Font.Name = "AMUDHAM";
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 0].Text = "t.vz;";
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Font.Name = "AMUDHAM";
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Text = "ghlk;";
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].HorizontalAlign = HorizontalAlign.Center;
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 2].Font.Name = "AMUDHAM";
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 2].Text = " mjpfgl;r kjpg;bgz;fs;";
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 3].Font.Name = "AMUDHAM";
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 3].Text = " bgw;w kjpg;bgz;fs;";
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 4].Font.Name = "AMUDHAM";
    //            //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 4].Text = " ghlj;jpy; tFg;gpy; mjpfgl;rkjpg;bgz;";
    //            //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

    //            string get_row_val = "";
    //            for (int sno_loop = 0; sno_loop < FpEntry.Sheets[0].RowCount; sno_loop++)
    //            {
    //                if (rol_no == FpEntry.Sheets[0].Cells[sno_loop, 1].Text)
    //                {
    //                    get_row_val = sno_loop.ToString();
    //                }
    //            }

    //            int row28 = FpSpread1.Sheets[0].RowCount - 27;
    //            int subject_row_incr = 0;
    //            int absent_subj_count = 0;
    //            int fail_subj_count = 0;
    //            int sno = 0;
    //            string selectmark = "select distinct e.subject_no,sub.subject_name,max_mark,min_mark,marks_obtained,e.exam_code as excode from subjectchooser s,registration rg,exam_type e,result r, subject sub where sub.subject_no=s.subject_no and  s.subject_no=e.subject_no and s.roll_no=rg.roll_no  and e.exam_code=r.exam_code and rg.roll_no=r.roll_no and e.criteria_no='" + criteria_no + "' and r.roll_no='" + rol_no + "'";
    //            hat.Clear();
    //            hat.Add("rollnum", rol_no.ToString());
    //            hat.Add("criteriano", criteria_no.ToString());
    //            ds = dacces.select_method(selectmark, hat, "cmd");
    //            if (ds.Tables[0].Rows.Count > 0)
    //            {
    //                for (int dscount = 0; dscount < ds.Tables[0].Rows.Count; dscount++)
    //                {
    //                    sno++;
    //                    string subjname = ds.Tables[0].Rows[dscount]["subject_name"].ToString();
    //                    string getmark = ds.Tables[0].Rows[dscount]["marks_obtained"].ToString();
    //                    string excode = ds.Tables[0].Rows[dscount]["excode"].ToString();
    //                    //string get_maxmark = ds.Tables[0].Rows[dscount]["max_mark"].ToString();
    //                    string get_maxmark = GetFunction("select max(marks_obtained) as 'MAX_MARK' from result where exam_code='" + excode.ToString() + "'");
    //                    string maxmrk_pass = GetFunction("select max_mark from exam_type where exam_code='" + excode.ToString() + "'");
    //                    string minmark_pass = GetFunction("select min_mark from exam_type where exam_code='" + excode.ToString() + "'");
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 0].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 3].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 2].Border.BorderColorBottom = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4].Border.BorderColorBottom = Color.Black;

    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 0].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 2].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 3].Border.BorderColorTop = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4].Border.BorderColorTop = Color.Black;

    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 0].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 2].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 3].Border.BorderColorLeft = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4].Border.BorderColorLeft = Color.Black;

    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 0].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 2].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 3].Border.BorderColorRight = Color.Black;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4].Border.BorderColorRight = Color.Black;

    //                    FpSpread1.Sheets[0].Rows[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr].HorizontalAlign = HorizontalAlign.Center;

    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 0].Text = sno.ToString();
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1].Text = subjname;///////////////
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1].HorizontalAlign = HorizontalAlign.Left;
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 3].Text = getmark; //+ "/100";

    //                    //display max mark of subject
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4].Text = get_maxmark.ToString();
    //                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 2].Text = maxmrk_pass.ToString();
    //                    if (getmark == "A" || getmark == "AA" || getmark == "AAA" || getmark == "P")
    //                    {
    //                        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 3].Text = "AAA";
    //                        absent_subj_count++;
    //                    }
    //                    if (getmark != "AB" && getmark != "AAA" && getmark != "EL" && getmark != "EOD" && getmark != "ML" && getmark != "SOD" && getmark != "NSS" && getmark != "NJ" && getmark != "S" && getmark != "L" && getmark != "NCC" && getmark != "HS" && getmark != "PP" && getmark != "SYOD" && getmark != "COD" && getmark != "OOD" && getmark != "OD" && getmark != "" && getmark != " " && getmark != "LA" && getmark != " " && getmark != "RAA")//added on 30.07.12 //Added By subburaj 21.08.2014
    //                    {
    //                        //  if (Convert.ToInt16(getmark) <= Convert.ToInt16(minmark_pass) && Convert.ToInt16(getmark) > 0)
    //                        if (Convert.ToDouble(getmark) < Convert.ToDouble(minmark_pass))
    //                        {
    //                            fail_subj_count++;
    //                        }
    //                    }
    //                    subject_row_incr++;
    //                }
    //            }
    //            //for (int colm = 0; colm <= FpEntry.Sheets[0].ColumnCount - 1; colm++)
    //            //{

    //            //    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4].Border.BorderColorRight = Color.Black;
    //            //    if (FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note != "")
    //            //    {

    //            //        ////FpSpread1.Sheets[0].RowCount++;
    //            //        sno++;
    //            //        con.Close();
    //            //        con.Open();
    //            //        string subjname = "";
    //            //        string get_exmcode = FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Tag.ToString();
    //            //        string[] spl_exmcode = get_exmcode.Split('@');
    //            //        string get_maxmark = GetFunction("select max(marks_obtained) as 'MAX_MARK' from result where exam_code='" + spl_exmcode[1].ToString() + "'");
    //            //        string maxmrk_pass = GetFunction("select max_mark from exam_type where exam_code='" + spl_exmcode[1].ToString() + "'");
    //            //        string minmark_pass = GetFunction("select min_mark from exam_type where exam_code='" + spl_exmcode[1].ToString() + "'");

    //            //        string getmark = FpEntry.Sheets[0].Cells[Convert.ToInt16(get_row_val), colm].Text;
    //            //        string subject_no1 = FpEntry.Sheets[0].ColumnHeader.Cells[0, colm].Note;
    //            //        string subname = "select subject_name,acronym from subject where subject_no=" + subject_no1 + "";
    //            //        SqlDataAdapter da = new SqlDataAdapter(subname, con);
    //            //        DataSet ds = new DataSet();
    //            //        da.Fill(ds);
    //            //        con.Close();
    //            //        con.Open();
    //            //        if (ds.Tables[0].Rows.Count > 0)
    //            //        {
    //            //            subjname = ds.Tables[0].Rows[0]["subject_name"].ToString();

    //            //        }

    //            //        //FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 1, 1, 1); //today hide
    //            //        //FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 29) + subject_row_incr, 3, 1, 2);


    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 0].Border.BorderColorBottom = Color.Black;
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1].Border.BorderColorBottom = Color.Black;
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 3].Border.BorderColorBottom = Color.Black;
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 2].Border.BorderColorBottom = Color.Black;
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4].Border.BorderColorBottom = Color.Black;

    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 0].Border.BorderColorTop = Color.Black;
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1].Border.BorderColorTop = Color.Black;
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 2].Border.BorderColorTop = Color.Black;
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 3].Border.BorderColorTop = Color.Black;
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4].Border.BorderColorTop = Color.Black;

    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 0].Border.BorderColorLeft = Color.Black;
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1].Border.BorderColorLeft = Color.Black;
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 2].Border.BorderColorLeft = Color.Black;
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 3].Border.BorderColorLeft = Color.Black;
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4].Border.BorderColorLeft = Color.Black;

    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 0].Border.BorderColorRight = Color.Black;
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1].Border.BorderColorRight = Color.Black;
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 2].Border.BorderColorRight = Color.Black;
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 3].Border.BorderColorRight = Color.Black;
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4].Border.BorderColorRight = Color.Black;

    //            //        FpSpread1.Sheets[0].Rows[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr].HorizontalAlign = HorizontalAlign.Center;

    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 0].Text = sno.ToString();
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1].Text = subjname;///////////////
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1].HorizontalAlign = HorizontalAlign.Left;
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 3].Text = getmark; //+ "/100";

    //            //        //display max mark of subject
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4].Text = get_maxmark.ToString();
    //            //        FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 2].Text = maxmrk_pass.ToString();

    //            //        if (getmark == "A" || getmark == "AA" || getmark == "AAA" || getmark == "P")
    //            //        {
    //            //            FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 3].Text = "AAA";
    //            //            absent_subj_count++;
    //            //        }

    //            //        if (getmark != "AB" && getmark != "AAA" && getmark != "EL" && getmark != "EOD" && getmark != "ML" && getmark != "SOD" && getmark != "NSS" && getmark != "NJ" && getmark != "S" && getmark != "L" && getmark != "NCC" && getmark != "HS" && getmark != "PP" && getmark != "SYOD" && getmark != "COD" && getmark != "OOD" && getmark != "OD" && getmark != "" && getmark != " " && getmark != "LA")//added on 30.07.12
    //            //        {
    //            //            if (Convert.ToInt16(getmark) <= Convert.ToInt16(minmark_pass))
    //            //            {
    //            //                fail_subj_count++;
    //            //            }
    //            //        }

    //            //        subject_row_incr++;
    //            //    }
    //            //}
    //            int row_value = (row28 + subject_row_incr);

    //            //       FpSpread1.Sheets[0].SpanModel.Add(row_value - 1, 0, 1, 5);

    //            //FpSpread1.Sheets[0].Cells[row_value - 1, 0].Border.BorderColorBottom = Color.White;
    //            //FpSpread1.Sheets[0].Cells[row_value - 1, 0].Border.BorderColorTop = Color.Black;
    //            //FpSpread1.Sheets[0].Cells[row_value - 1, 0].Border.BorderColorRight = Color.Black;
    //            //FpSpread1.Sheets[0].Cells[row_value - 1, 2].Border.BorderColorLeft = Color.Black;
    //            //FpSpread1.Sheets[0].Cells[row_value - 1, 2].Border.BorderColorRight = Color.Black;
    //            //FpSpread1.Sheets[0].Cells[row_value - 1, 4].Border.BorderColorLeft = Color.Black;
    //            //FpSpread1.Sheets[0].Rows[row_value - 1].HorizontalAlign = HorizontalAlign.Center;


    //            //============ATTND %
    //            FpSpread1.Sheets[0].SpanModel.Add(row_value, 0, 1, 2);
    //            FpSpread1.Sheets[0].SpanModel.Add(row_value + 1, 0, 1, 2);
    //            FpSpread1.Sheets[0].SpanModel.Add((row_value + 2), 0, 1, 5);
    //            FpSpread1.Sheets[0].SpanModel.Add((row_value + 3), 0, 1, 5);
    //            FpSpread1.Sheets[0].SpanModel.Add((row_value + 4), 0, 1, 5);
    //            FpSpread1.Sheets[0].Cells[row_value, 0].Border.BorderColorBottom = Color.White;
    //            FpSpread1.Sheets[0].SpanModel.Add((row_value + 5), 0, 1, 5);
    //            FpSpread1.Sheets[0].SpanModel.Add((row_value + 6), 0, 1, 5);
    //            FpSpread1.Sheets[0].SpanModel.Add((row_value + 7), 0, 1, 5);
    //            FpSpread1.Sheets[0].SpanModel.Add((row_value + 8), 0, 1, 5);
    //            //-------------------

    //            persentmonthcal();
    //            double per_tage_day;
    //            string dum_tage_date = "";
    //            per_tage_day = ((pre_present_date / per_workingdays) * 100);

    //            if (per_tage_day > 100)
    //            {
    //                per_tage_day = 100;
    //            }
    //            dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //            if (dum_tage_date == "NaN")
    //            {
    //                dum_tage_date = "0";
    //            }
    //            else if (dum_tage_date == "Infinity")
    //            {
    //                dum_tage_date = "0";
    //            }

    //            FpSpread1.Sheets[0].Rows[row_value].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[(row_value + 3), 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[(row_value + 2), 0].HorizontalAlign = HorizontalAlign.Left;

    //            FpSpread1.Sheets[0].Cells[row_value, 0].Font.Name = "AMUDHAM";
    //            FpSpread1.Sheets[0].Cells[row_value, 0].Text = "01.tFg;gpw;F tuhj ehl;fs; : " + per_absent_date.ToString();
    //            FpSpread1.Sheets[0].Cells[row_value, 4].Border.BorderColorRight = Color.White;
    //            FpSpread1.Sheets[0].Cells[row_value + 1, 0].Text = "Number of days absent  :" + per_absent_date.ToString();

    //            FpSpread1.Sheets[0].Cells[row_value + 2, 0].Font.Name = "AMUDHAM";
    //            FpSpread1.Sheets[0].Cells[row_value + 2, 0].Text = "02.tUifg;gjpt   :" + dum_tage_date.ToString();
    //            FpSpread1.Sheets[0].Cells[row_value + 3, 0].Text = "Attendance till date  :" + dum_tage_date.ToString();
    //            FpSpread1.Sheets[0].Cells[row_value + 4, 0].Font.Name = "AMUDHAM";
    //            if (absent_subj_count != 0)
    //            {
    //                FpSpread1.Sheets[0].Cells[row_value + 4, 0].Text = "03.j';fs; kfd;_kfs;.... " + absent_subj_count.ToString() + "  nju;t[fSf;F tutpy;iy. ";
    //                FpSpread1.Sheets[0].Cells[row_value + 5, 0].Text = "Your Son/Daughter did not attend..... " + absent_subj_count.ToString() + " Examination";
    //            }
    //            else
    //            {
    //                FpSpread1.Sheets[0].Cells[row_value + 4, 0].Text = "03.j';fs; kfd;_kfs;.... " + " - " + "  nju;t[fSf;F tutpy;iy. ";
    //                FpSpread1.Sheets[0].Cells[row_value + 5, 0].Text = "Your Son/Daughter did not attend....  " + " - " + " Examination";
    //            }


    //            FpSpread1.Sheets[0].Cells[row_value + 6, 0].Font.Name = "AMUDHAM";

    //            if (fail_subj_count != 0)
    //            {
    //                FpSpread1.Sheets[0].Cells[row_value + 6, 0].Text = "04.j';fs; kfd;_kfs;..... " + fail_subj_count.ToString() + " nju;t[fspy; nju;r;rp bgwtpy;iy. ";
    //                FpSpread1.Sheets[0].Cells[row_value + 7, 0].Text = "Your Son/Daughter has failed in.... " + fail_subj_count.ToString() + " Subjects";
    //            }
    //            else
    //            {
    //                FpSpread1.Sheets[0].Cells[row_value + 6, 0].Text = "04.j';fs; kfd;_kfs;.... " + " - " + " nju;t[fspy; nju;r;rp bgwtpy;iy. ";
    //                FpSpread1.Sheets[0].Cells[row_value + 7, 0].Text = "Your Son/Daughter has failed in.... " + " - " + " Subjects";
    //            }
    //            //////'--------------new added for remarks start 26.04.12

    //            FpSpread1.Sheets[0].SpanModel.Add(((row_value + 8)), 0, 1, 5);
    //            FpSpread1.Sheets[0].SpanModel.Add(((row_value + 9)), 0, 1, 5);
    //            FpSpread1.Sheets[0].SpanModel.Add(((row_value + 10)), 0, 1, 5);
    //            FpSpread1.Sheets[0].SpanModel.Add(((row_value + 11)), 0, 1, 5);
    //            FpSpread1.Sheets[0].SpanModel.Add(((row_value + 12)), 0, 1, 5);


    //            FpSpread1.Sheets[0].Cells[row_value + 8, 0].Font.Name = "AMUDHAM";
    //            FpSpread1.Sheets[0].Cells[(row_value + 8), 0].Text = "Fwpg;g[";
    //            FpSpread1.Sheets[0].Cells[(row_value + 8), 0].Font.Bold = true;

    //            FpSpread1.Sheets[0].Cells[row_value + 9, 0].Font.Name = "AMUDHAM";
    //            FpSpread1.Sheets[0].Cells[(row_value + 9), 0].Text = "01.j';fs; kfd;_kfs; bray;ghL jpUg;jpfukhf cs;sJ- ed;whf cs;sJ-rpwg;ghf cs;sJ-jpUg;jpfukhf ,y;iy";
    //            FpSpread1.Sheets[0].Cells[(row_value + 9), 0].HorizontalAlign = HorizontalAlign.Left;

    //            FpSpread1.Sheets[0].Cells[row_value + 10, 0].Font.Name = "AMUDHAM";
    //            FpSpread1.Sheets[0].Cells[(row_value + 10), 0].Text = "02.jh';fs; ,J Fwpj;J tFg;g[ Mnyhrfu;/Jiwj;jiytu; kw;Wk; Kjy;tu; mtu;fis............................ njjpf;Fs; tUkhW nfl;Lf;bfhs;fpnwhk;.";
    //            FpSpread1.Sheets[0].Cells[(row_value + 10), 0].HorizontalAlign = HorizontalAlign.Left;
    //            //////'-------------end 

    //            FpSpread1.Sheets[0].Cells[(row_value + 11), 0].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[(row_value + 11), 0].Text = "  Note:";
    //            FpSpread1.Sheets[0].Cells[(row_value + 11), 0].Font.Bold = true;
    //            FpSpread1.Sheets[0].Cells[(row_value + 11), 0].Font.Size = FontUnit.Medium;

    //            FpSpread1.Sheets[0].Cells[(row_value + 12), 0].Text = "   01.The Performance of Your Son/ Daughter is satisfactory / good / excellent / not satisfactory";
    //            FpSpread1.Sheets[0].Cells[(row_value + 12), 0].HorizontalAlign = HorizontalAlign.Left;

    //            FpSpread1.Sheets[0].SpanModel.Add((row_value + 13), 0, 1, 5);
    //            FpSpread1.Sheets[0].Cells[(row_value + 13), 0].Text = "    02.You are requested to meet the Class Advosor / HOD / Principal before ............. (Date)";
    //            FpSpread1.Sheets[0].Cells[(row_value + 13), 0].HorizontalAlign = HorizontalAlign.Left;

    //            FpSpread1.Sheets[0].Cells[(row_value + 15), 3].HorizontalAlign = HorizontalAlign.Right;
    //            FpSpread1.Sheets[0].Cells[(row_value + 15), 3].Font.Name = "AMUDHAM";
    //            FpSpread1.Sheets[0].Cells[(row_value + 15), 3].Text = "Kjy;tUf;fhf ,";


    //            FpSpread1.Sheets[0].Cells[(row_value + 15), 4].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[(row_value + 15), 4].Text = "(For Principal)";

    //            FpSpread1.Sheets[0].Cells[(row_value + 17), 3].Font.Name = "AMUDHAM";
    //            FpSpread1.Sheets[0].Cells[(row_value + 17), 3].Text = "tFg;g[ Mnyhrfu;";
    //            FpSpread1.Sheets[0].Cells[(row_value + 17), 3].HorizontalAlign = HorizontalAlign.Right;

    //            FpSpread1.Sheets[0].Cells[(row_value + 17), 4].HorizontalAlign = HorizontalAlign.Left;
    //            FpSpread1.Sheets[0].Cells[(row_value + 17), 4].Text = "(Class Advisor)";

    //            FpSpread1.Sheets[0].SpanModel.Add((row_value + 19), 0, 1, 2);
    //            FpSpread1.Sheets[0].Cells[(row_value + 19), 0].Text = "Phone No:HOD";
    //            FpSpread1.Sheets[0].Cells[(row_value + 19), 0].HorizontalAlign = HorizontalAlign.Right;

    //            FpSpread1.Sheets[0].Cells[(row_value + 19), 2].Font.Name = "AMUDHAM";
    //            FpSpread1.Sheets[0].Cells[(row_value + 19), 2].Text = "( Jiwj;jiytu; )..";
    //            FpSpread1.Sheets[0].Cells[(row_value + 19), 2].HorizontalAlign = HorizontalAlign.Left;

    //            FpSpread1.Sheets[0].SpanModel.Add((row_value + 19), 3, 1, 1);
    //            FpSpread1.Sheets[0].Cells[(row_value + 19), 3].Text = "Class Advisor";
    //            FpSpread1.Sheets[0].Cells[(row_value + 19), 3].HorizontalAlign = HorizontalAlign.Right;

    //            FpSpread1.Sheets[0].Cells[(row_value + 19), 4].Font.Name = "AMUDHAM";
    //            FpSpread1.Sheets[0].Cells[(row_value + 19), 4].Text = "( tFg;g[ Mnyhrfu; )..";
    //            FpSpread1.Sheets[0].Cells[(row_value + 19), 4].HorizontalAlign = HorizontalAlign.Left;

    //            ////  FpSpread1.Sheets[0].SpanModel.Add((row_value + 11), 0, 1, 5);
    //            ////  FpSpread1.Sheets[0].SpanModel.Add((row_value + 12), 0, 1, 2);
    //            ////  FpSpread1.Sheets[0].SpanModel.Add((row_value + 12), 3, 1, 2);

    //            ////  FpSpread1.Sheets[0].Cells[(row_value + 11), 0].HorizontalAlign = HorizontalAlign.Left;
    //            ////  FpSpread1.Sheets[0].Cells[(row_value + 12), 0].HorizontalAlign = HorizontalAlign.Left;
    //            ////  FpSpread1.Sheets[0].Cells[(row_value + 12), 3].HorizontalAlign = HorizontalAlign.Center;
    //            ////  FpSpread1.Sheets[0].Cells[(row_value + 14), 0].HorizontalAlign = HorizontalAlign.Left;
    //            //////  FpSpread1.Sheets[0].Cells[(row_value + 11), 0].Text = "Kindly acknowledge the receipt of this communication with your signature and return the same to the";
    //            ////  FpSpread1.Sheets[0].Cells[(row_value + 12), 0].Font.Name = "AMUDHAM";
    //            ////  FpSpread1.Sheets[0].Cells[(row_value + 12), 0].Text = " (Jiwj;jiyth;)";
    //            ////  FpSpread1.Sheets[0].Cells[(row_value + 12), 3].Font.Name = "AMUDHAM";
    //            ////  FpSpread1.Sheets[0].Cells[(row_value + 12), 3].Text = " (tFg;G MNyhrfh;)";


    //            //'--------------------start footer 10.04.12
    //            if (dsprint.Tables[0].Rows.Count > 0)
    //            {
    //                if (dsprint.Tables[0].Rows[0]["footer"].ToString() != "")
    //                {
    //                    footer_count = Convert.ToInt16(dsprint.Tables[0].Rows[0]["footer"].ToString());
    //                    FpSpread1.Sheets[0].RowCount += 3;
    //                    footer_text = dsprint.Tables[0].Rows[0]["footer_name"].ToString();
    //                    string[] footer_text_split = footer_text.Split(',');
    //                    footer_text = "";
    //                    if (footer_count == 1)
    //                    {
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Text = footer_text.ToString();
    //                    }
    //                    else if ((FpSpread1.Sheets[0].ColumnCount) < footer_count)
    //                    {
    //                        for (int concod_footer = 0; concod_footer < footer_count; concod_footer++)
    //                        {
    //                            if (footer_text == "")
    //                            {
    //                                footer_text = footer_text_split[concod_footer].ToString();
    //                            }
    //                            else
    //                            {
    //                                footer_text = footer_text + "   " + footer_text_split[concod_footer].ToString();
    //                            }
    //                        }
    //                        for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount; col_count++)
    //                        {
    //                            if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                            {
    //                                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, col_count, 1, final_print_col_cnt);
    //                                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, col_count, 1, final_print_col_cnt);
    //                                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, col_count, 1, final_print_col_cnt);
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Text = footer_text;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Bold = true;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Size = FontUnit.Medium;
    //                                break;
    //                            }
    //                        }
    //                    }
    //                    else if ((FpSpread1.Sheets[0].ColumnCount) == footer_count)
    //                    {
    //                        for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount; col_count++)
    //                        {
    //                            if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                            {
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Text = footer_text_split[temp_count].ToString();
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Bold = true;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Size = FontUnit.Medium;
    //                                temp_count++;
    //                                if (temp_count == footer_count)
    //                                {
    //                                    break;
    //                                }
    //                            }
    //                        }
    //                    }
    //                    else
    //                    {
    //                        temp_count = 0;
    //                        split_col_for_footer = (FpSpread1.Sheets[0].ColumnCount) / footer_count;
    //                        footer_balanc_col = (FpSpread1.Sheets[0].ColumnCount) % footer_count;

    //                        for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount; col_count++)
    //                        {
    //                            if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                            {
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Text = footer_text_split[temp_count].ToString();
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Bold = true;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Border.BorderColorLeft = Color.White;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Border.BorderColorRight = Color.White;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Size = FontUnit.Medium;
    //                                temp_count++;
    //                                if (temp_count == 0)
    //                                {
    //                                    col_count = col_count + split_col_for_footer + footer_balanc_col;
    //                                }
    //                                else
    //                                {
    //                                    col_count = col_count + split_col_for_footer;
    //                                }
    //                                if (temp_count == footer_count)
    //                                {
    //                                    break;
    //                                }
    //                            }
    //                        }
    //                    }
    //                }
    //            }//'--------------------end footer

    //            //   }//end condn for isval
    //            FpSpread1.Sheets[0].PageSize = 40;
    //            //   }//end loop for res
    //        }
    //    }
    //}

    protected void ddlpoppage_SelectedIndexChanged(object sender, EventArgs e)
    {
        lblnote.Visible = false;
        txtnotes.Visible = false;
        //FpSpread1.SaveChanges();
        //int sprd_row_count = FpSpread1.Sheets[0].RowCount;
        //for (int i = 0; i < FpSpread1.Sheets[0].RowCount - 3; i++)
        //{
        //    FpSpread1.Sheets[0].Rows[i].Visible = false;
        //}
        if (ddlletter.SelectedIndex == 0)
        {
            Labelnew.Visible = false;
            TextBoxnew.Visible = false;
            panelmove.Attributes.Add("style", "top: 137px; left: 400px; position: absolute; width: 405px; height: 20px;");
        }
        if (ddlletter.SelectedIndex == 1)
        {
            Labelnew.Visible = false;
            TextBoxnew.Visible = false;
            panelmove.Attributes.Add("style", "top: 137px; left: 400px; position: absolute; width: 405px; height: 20px;");
            //pop_page_function1();
        }
        if (ddlletter.SelectedIndex == 2)
        {
            Labelnew.Visible = false;
            TextBoxnew.Visible = false;
            //pop_page_function2();
            panelmove.Attributes.Add("style", "top: 137px; left: 400px; position: absolute; width: 405px; height: 20px;");
        }
        if (ddlletter.SelectedIndex == 3)
        {
            Labelnew.Visible = true;
            TextBoxnew.Visible = true;
            panelmove.Attributes.Add("style", "top: 137px; left: 569px; position: absolute; width: 405px; height: 20px;");
            //pop_page_function3();
        }
        if (ddlletter.SelectedIndex == 4)
        {
            Labelnew.Visible = false;
            TextBoxnew.Visible = false;
            //pop_page_function4();
            panelmove.Attributes.Add("style", "top: 137px; left: 569px; position: absolute; width: 405px; height: 20px;");
        }
        if (ddlletter.SelectedIndex == 5)
        {
            Labelnew.Visible = false;
            TextBoxnew.Visible = false;
            //pop_page_function5();
            panelmove.Attributes.Add("style", "top: 137px; left: 569px; position: absolute; width: 405px; height: 20px;");
        }
        //ddlletter.SelectedIndex = 0;
    }

    //public void ksrtamilreport()
    //{
    //    try
    //    {
    //        ddlpoppage.Visible = false;
    //        lblpoppage.Visible = false;
    //        MyImg coeimg1 = new MyImg();
    //        coeimg1.ImageUrl = "principalHandler/Handler.ashx?";
    //        string registernumber = "";
    //        FpSpread1.Sheets[0].DefaultStyle.Font.Name = "Book Antique";
    //        FpSpread1.Sheets[0].DefaultStyle.Font.Bold = true;
    //        FpSpread1.Sheets[0].DefaultStyle.Font.Size = FontUnit.Small;
    //        FpSpread1.Sheets[0].ColumnHeader.Visible = false;
    //        FpSpread1.Sheets[0].RowCount = 0;
    //        FpSpread1.Sheets[0].ColumnCount = 6;
    //        FpSpread1.Sheets[0].Columns[0].Width = 30;
    //        FpSpread1.Sheets[0].Columns[1].Width = 100;
    //        FpSpread1.Sheets[0].Columns[2].Width = 150;
    //        FpSpread1.Sheets[0].Columns[3].Width = 100;
    //        FpSpread1.Sheets[0].Columns[4].Width = 80;
    //        FpSpread1.Sheets[0].Columns[5].Width = 100;
    //        int[] width = new int[] { 30, 100, 150, 100, 80, 100 }; //Added by Malang Raja on 24/12/2015.
    //        string year = "";
    //        sem = ddlSemYr.SelectedValue.ToString();
    //        if (sem == "1")
    //        {
    //            gsem3 = "I";
    //            year = "I";
    //        }
    //        else if (sem == "2")
    //        {
    //            gsem3 = "II";
    //            year = "I";
    //        }
    //        else if (sem == "3")
    //        {
    //            gsem3 = "III";
    //            year = "II";
    //        }
    //        else if (sem == "4")
    //        {
    //            gsem3 = "IV";
    //            year = "II";
    //        }
    //        else if (sem == "5")
    //        {
    //            gsem3 = "V";
    //            year = "III";
    //        }
    //        else if (sem == "6")
    //        {
    //            gsem3 = "VI";
    //            year = "III";
    //        }
    //        else if (sem == "7")
    //        {
    //            gsem3 = "VII";
    //            year = "IV";
    //        }
    //        else if (sem == "8")
    //        {
    //            gsem3 = "VIII";
    //            year = "IV";
    //        }
    //        else if (sem == "9")
    //        {
    //            gsem3 = "IX";
    //            year = "V";
    //        }
    //        else if (sem == "10")
    //        {
    //            gsem3 = "X";
    //            year = "V";
    //        }
    //        string examstartdate = "";
    //        string examenddate = "";
    //        con.Close();
    //        con.Open();
    //        FpSpread1.Sheets[0].RowHeader.Visible = false;
    //        FpSpread1.VerticalScrollBarPolicy = FarPoint.Web.Spread.ScrollBarPolicy.Always;
    //        int pagerowcount = 0;
    //        int bindpagerowcount = 0;
    //        string deptacr = GetFunction("select Acronym from Degree where Degree_Code='" + ddlBranch.SelectedValue.ToString() + "'");
    //        int cycle = 0;
    //        for (res = 1; res < Convert.ToInt32(FpEntry.Sheets[0].RowCount); res++)
    //        {
    //            isval = 0;
    //            isval = Convert.ToInt32(FpEntry.Sheets[0].Cells[res, 1].Value);
    //            if (isval == 1)
    //            {
    //                //for (int j = 0; j < chklstest.Items.Count; j++)
    //                //{
    //                //    if (chklstest.Items[j].Selected == true)
    //                //    {
    //                //        string criteria_no = chklstest.Items[j].Value.ToString();
    //                //        test = chklstest.Items[j].Text.ToString();
    //                #region hide
    //                string criteria_no = chklstest.SelectedValue.ToString();
    //                //criteria_no = chklstest.SelectedValue.ToString();
    //                test = getAllSelectedItems(chklstest, "Text");//.Items[j].Text.ToString();
    //                DataTable dtdate = new DataTable();
    //                string examdatequewry = "select distinct exam_date from exam_type inner join criteriaforinternal on criteriaforinternal.criteria_no=exam_type.criteria_no where criteriaforinternal.criteria_no= '" + criteria_no + "' order by exam_date ";
    //                SqlDataAdapter sqld = new SqlDataAdapter(examdatequewry, con);
    //                sqld.Fill(dtdate);
    //                if (dtdate.Rows.Count > 0)
    //                {
    //                    for (int i = 0; i < dtdate.Rows.Count; i++)
    //                    {
    //                        if (i == 0)
    //                        {
    //                            DateTime dtstart = Convert.ToDateTime(dtdate.Rows[i]["exam_date"]);
    //                            examstartdate = dtstart.ToString("dd/MM/yyyy");
    //                        }
    //                        else if (i == dtdate.Rows.Count - 1)
    //                        {
    //                            DateTime dtstart = Convert.ToDateTime(dtdate.Rows[i]["exam_date"]);
    //                            examenddate = dtstart.ToString("dd/MM/yyyy");
    //                        }
    //                    }
    //                }

    //                if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //                {
    //                    string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo,district from collinfo where college_code=" + Session["collegecode"] + "";
    //                    SqlCommand collegecmd = new SqlCommand(college, con);
    //                    SqlDataReader collegename;
    //                    con.Close();
    //                    con.Open();
    //                    collegename = collegecmd.ExecuteReader();
    //                    if (collegename.HasRows)
    //                    {
    //                        while (collegename.Read())
    //                        {
    //                            collnamenew1 = collegename["collname"].ToString();
    //                            address1 = collegename["address1"].ToString();
    //                            address2 = collegename["address2"].ToString();
    //                            address3 = collegename["address3"].ToString();
    //                            pincode = collegename["pincode"].ToString();
    //                            district = collegename["district"].ToString();
    //                        }
    //                    }
    //                    con.Close();
    //                }
    //                //attendance
    //                yr_val = ddlSemYr.SelectedItem.ToString();
    //                getyear();
    //                //attendance
    //                hat.Clear();
    //                hat.Add("colege_code", Session["collegecode"].ToString());
    //                ds15 = dacces.select_method("ATT_MASTER_SETTING", hat, "sp");
    //                // countds = ds15.Tables[0].Rows.Count;
    //                count = ds15.Tables[0].Rows.Count;
    //                attcount = ds15.Tables[0].Rows.Count;
    //                attmaster.Clear();
    //                if (count > 0)
    //                {
    //                    for (int lcnt = 0; lcnt < ds15.Tables[0].Rows.Count; lcnt++)
    //                    {
    //                        attmaster.Add(ds15.Tables[0].Rows[lcnt]["LeaveCode"].ToString(), ds15.Tables[0].Rows[lcnt]["CalcFlag"].ToString());
    //                    }
    //                }

    //                FpSpread1.Sheets[0].ScrollingContentVisible = true;
    //                rol_no = FpEntry.Sheets[0].Cells[res, 2].Text;
    //                stud_roll = rol_no.ToString();
    //                persentmonthcal();
    //                double per_tage_day = 0;
    //                double gconhrs = 0;
    //                double gprehours = 0;
    //                string dum_tage_date = "";
    //                //per_tage_day = ((pre_present_date / per_workingdays) * 100);  //Daywise

    //                per_con_hrs = per_workingdays1;
    //                per_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / (per_con_hrs + tot_conduct_hr_spl_fals)) * 100);  //Hourwise
    //                per_tage_hrs = Math.Round(per_tage_hrs, 2);
    //                gconhrs = per_con_hrs + tot_conduct_hr_spl_fals;
    //                gprehours = per_per_hrs + tot_per_hrs_spl_fals;

    //                per_tage_day = per_tage_hrs;

    //                if (per_tage_day > 100)
    //                {
    //                    per_tage_day = 100;
    //                }
    //                dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //                if (dum_tage_date == "NaN")
    //                {
    //                    dum_tage_date = "0";
    //                }
    //                else if (dum_tage_date == "Infinity")
    //                {
    //                    dum_tage_date = "0";
    //                }
    //                // attendance end
    //                Label4.Visible = false;
    //                name = FpEntry.Sheets[0].Cells[res, 4].Text;
    //                registernumber = GetFunction("select Reg_No from Registration where Roll_No='" + rol_no + "'");
    //                FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 4;

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].Text = collnamenew1;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].Font.Bold = true;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].Font.Size = FontUnit.Large;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 4, 0, 1, FpSpread1.Sheets[0].ColumnCount);
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Text = address1 + "," + district + "," + pincode;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Font.Bold = true;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Font.Size = FontUnit.Medium;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 3, 0, 1, FpSpread1.Sheets[0].ColumnCount);
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Text = "PROGRESS REPORT";
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Font.Bold = true;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Font.Size = FontUnit.Medium;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, 0, 1, FpSpread1.Sheets[0].ColumnCount);
    //                string date = DateTime.Now.ToString("dd/MM/yyyy");
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "DATE:" + date;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Right;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, FpSpread1.Sheets[0].ColumnCount);


    //                FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 3;

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Text = "NAME   :";
    //                /// FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 3, 0, 1, 2);

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 2].Text = name;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 3, 2, 1, 2);


    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 4].Text = "BRANCH :" + deptacr;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 3, 4, 1, FpSpread1.Sheets[0].ColumnCount - 2);
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 4].HorizontalAlign = HorizontalAlign.Right;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Text = "REG NO   :";

    //                //  FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, 0, 1, 2);
    //                FarPoint.Web.Spread.TextCellType objtxtcell = new FarPoint.Web.Spread.TextCellType();
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Text = registernumber;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].CellType = objtxtcell;
    //                // FpSpread1.Sheets[0].Cells[0, 0].ColumnSpan = 2;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, 2, 1, 2);
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].Text = "YEAR/SEM :" + year + "/" + gsem3;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].HorizontalAlign = HorizontalAlign.Right;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, 4, 1, FpSpread1.Sheets[0].ColumnCount - 2);
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "MODE OF EXAM   :";
    //                //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 2);

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Text = test;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 2, 1, 2);

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text = "SEM :ODD/EVEN";
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Right;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 4, 1, FpSpread1.Sheets[0].ColumnCount - 2);

    //                FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 4;

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].Text = "Dear Sir/Madam,";
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 4, 0, 1, FpSpread1.Sheets[0].ColumnCount);

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 1].Text = "Following are the marks secured by your son/daughter in the '" + test + "'  ";
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 3, 1, 1, FpSpread1.Sheets[0].ColumnCount - 1);

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Text = "Examinations conducted from " + examstartdate + " to " + examenddate + ". ";
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, 0, 1, 4);

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].Text = "jq;fs; kfd;/kfs;   ";
    //                //***modified by Mullai
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].Font.Name = "AMUDHAM";
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].Font.Size = FontUnit.Medium;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].Font.Bold = true;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, 4, 1, 2);
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "ele;J Kbe;j Njh;tpy; ngw;w kjpg;ngz; fspd; tptuk; jq;fspd; ftdj;jpw;F nfhz;L tUfpNwhk;.";
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "AMUDHAM";
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 6);
    //                int startcol = 0;
    //                #endregion hide
    //                int startrow = FpSpread1.Sheets[0].RowCount - 1;
    //                FpSpread1.Sheets[0].RowCount += 15;
    //                for (int j = 0; j < chklstest.Items.Count; j++)
    //                {
    //                    //int startcol = colcount % colcount;
    //                    int rowcount = startrow;
    //                    int colcount = startcol;
    //                    if (chklstest.Items[j].Selected == true)
    //                    {
    //                        //for width of the FpSpread depents on the no of Test
    //                        criteria_no = chklstest.Items[j].Value.ToString();
    //                        test = chklstest.Items[j].Text.ToString();
    //                        FpSpread1.Sheets[0].Rows[rowcount].Border.BorderColorBottom = Color.Black;
    //                        //FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 1;
    //                        rowcount++;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount].Text = test;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount].Font.Size = FontUnit.Large;
    //                        FpSpread1.Sheets[0].Rows[rowcount].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].SpanModel.Add(rowcount, colcount, 1, 6);
    //                        rowcount++;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount].Text = "Sl.No";
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount].Border.BorderColorRight = Color.Black;

    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 1].Text = "Subject Name";
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 1].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 1].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 2].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 2].Border.BorderColorRight = Color.Black;
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorLeft = Color.Black;
    //                        // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].SpanModel.Add(rowcount, colcount + 1, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 3].Text = "Mark Obtained";
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 3].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 3].Border.BorderColorRight = Color.Black;
    //                        //  FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 3].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 4].Text = "Max Mark";
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 4].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 4].Border.BorderColorRight = Color.Black;
    //                        // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 4].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 5].Text = "Result";
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 5].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 5].Border.BorderColorRight = Color.Black;
    //                        // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 5].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 5].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Rows[rowcount].Border.BorderColorBottom = Color.Black;
    //                        DataTable dtgetmark = new DataTable();
    //                        con.Close();
    //                        con.Open();
    //                        string getmarkquery = "select distinct e.subject_no,sub.subject_name,sub.subject_code,max_mark,min_mark,marks_obtained,e.exam_code as excode from subjectchooser s,registration rg,exam_type e,result r, subject sub where sub.subject_no=s.subject_no and  s.subject_no=e.subject_no and s.roll_no=rg.roll_no  and e.exam_code=r.exam_code and rg.roll_no=r.roll_no and e.criteria_no='" + criteria_no + "' and r.roll_no='" + rol_no + "'";
    //                        SqlDataAdapter sqldap = new SqlDataAdapter(getmarkquery, con);
    //                        sqldap.Fill(dtgetmark);
    //                        int sno = 0;
    //                        double totalmark = 0;
    //                        double totalobtainedmark = 0;
    //                        double minmark = 0;
    //                        if (dtgetmark.Rows.Count > 0)
    //                        {
    //                            for (int i = 0; i < dtgetmark.Rows.Count; i++)
    //                            {
    //                                string result = "Pass";
    //                                Boolean resultflag = false;
    //                                sno++;
    //                                string marksobtained = "";
    //                                //FpSpread1.Sheets[0].RowCount++;
    //                                rowcount++;
    //                                FpSpread1.Sheets[0].Rows[rowcount].Border.BorderColorBottom = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 0].Text = sno.ToString();
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 0].Border.BorderColorBottom = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 0].Border.BorderColorRight = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 0].HorizontalAlign = HorizontalAlign.Center;
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 1].Text = Convert.ToString(dtgetmark.Rows[i]["subject_name"]);
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 1].Border.BorderColorBottom = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 1].Border.BorderColorRight = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 2].Border.BorderColorBottom = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 2].Border.BorderColorRight = Color.Black;
    //                                FpSpread1.Sheets[0].SpanModel.Add(rowcount, colcount + 1, 1, 2);
    //                                marksobtained = Convert.ToString(dtgetmark.Rows[i]["marks_obtained"]);
    //                                if (marksobtained != "")
    //                                {
    //                                    if (Convert.ToDouble(marksobtained) < 0)
    //                                    {
    //                                        marksobtained = findresult(marksobtained);
    //                                    }
    //                                }
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 3].Text = marksobtained;
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 3].Border.BorderColorBottom = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 3].Border.BorderColorRight = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 3].HorizontalAlign = HorizontalAlign.Center;
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 4].Text = Convert.ToString(dtgetmark.Rows[i]["max_mark"]);
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 4].Border.BorderColorBottom = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 4].Border.BorderColorRight = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 4].HorizontalAlign = HorizontalAlign.Center;
    //                                if (Convert.ToString(dtgetmark.Rows[i]["min_mark"]) != "")
    //                                {
    //                                    double obtainedmark = 0;
    //                                    minmark = Convert.ToDouble(dtgetmark.Rows[i]["min_mark"]);
    //                                    if (Convert.ToString(dtgetmark.Rows[i]["marks_obtained"]) != "")
    //                                    {
    //                                        obtainedmark = Convert.ToDouble(dtgetmark.Rows[i]["marks_obtained"]);
    //                                        if (obtainedmark > 0)
    //                                        {
    //                                            totalobtainedmark = totalobtainedmark + obtainedmark;
    //                                        }
    //                                    }
    //                                    if (obtainedmark < minmark)
    //                                    {
    //                                        resultflag = true;
    //                                    }
    //                                }
    //                                double maxmark = 0;
    //                                if (Convert.ToString(dtgetmark.Rows[i]["max_mark"]) != "")
    //                                {
    //                                    maxmark = Convert.ToDouble(dtgetmark.Rows[i]["max_mark"]);
    //                                    totalmark = totalmark + maxmark;
    //                                }
    //                                if (resultflag)
    //                                {
    //                                    result = "Fail";
    //                                }
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 5].Text = result;
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 5].Border.BorderColorBottom = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 5].Border.BorderColorRight = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[rowcount, colcount + 5].HorizontalAlign = HorizontalAlign.Center;
    //                            }
    //                            FpSpread1.Sheets[0].Rows[rowcount].Border.BorderColorBottom = Color.Black;
    //                            //fpspread1.sheets[0].rowcount++;
    //                            rowcount++;
    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 0].Text = "Total";
    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 0].HorizontalAlign = HorizontalAlign.Center;
    //                            FpSpread1.Sheets[0].SpanModel.Add(rowcount, colcount + 0, 1, 3);
    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 0].Border.BorderColorBottom = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 0].Border.BorderColorRight = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 1].Border.BorderColorBottom = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 1].Border.BorderColorRight = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 2].Border.BorderColorBottom = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 2].Border.BorderColorRight = Color.Black;

    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 3].Text = totalobtainedmark.ToString();
    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 3].Border.BorderColorBottom = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 3].Border.BorderColorRight = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 3].HorizontalAlign = HorizontalAlign.Center;
    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 4].Text = totalmark.ToString();
    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 4].Border.BorderColorBottom = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 4].Border.BorderColorRight = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 4].HorizontalAlign = HorizontalAlign.Center;

    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 5].Text = "";
    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 5].Border.BorderColorBottom = Color.Black;
    //                            FpSpread1.Sheets[0].Cells[rowcount, colcount + 5].Border.BorderColorRight = Color.Black;
    //                            FpSpread1.Sheets[0].Rows[rowcount].Border.BorderColorBottom = Color.Black;
    //                        }
    //                        //FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 1;
    //                        if (dtgetmark.Rows.Count == 6)
    //                        {
    //                            rowcount++;
    //                            rowcount++;
    //                            rowcount++;
    //                            int sts = 0;
    //                            for (int r = rowcount; r <= rowcount && sts < 3; r--, sts++)
    //                            {
    //                                for (int c = 0; c < 6; c++)
    //                                {
    //                                    FpSpread1.Sheets[0].Cells[r, colcount + c].Border.BorderColorBottom = Color.White;
    //                                    FpSpread1.Sheets[0].Cells[r, colcount + c].Border.BorderColorRight = Color.White;
    //                                }
    //                                FpSpread1.Sheets[0].Rows[r].Border.BorderColorBottom = Color.White;
    //                            }
    //                        }
    //                        rowcount++;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 0].Text = "Pass Mark /";
    //                        FpSpread1.Sheets[0].SpanModel.Add(rowcount, colcount + 0, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 2].Text = "Njh;r;rp kjpg;ngz;:";
    //                        //***modified by Mullai
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 2].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 2].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 3].Text = Convert.ToString(minmark);
    //                        FpSpread1.Sheets[0].SpanModel.Add(rowcount, colcount + 3, 1, 3);

    //                        //FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 1;
    //                        rowcount++;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 0].Text = "Attendance % is / ";
    //                        FpSpread1.Sheets[0].SpanModel.Add(rowcount, colcount + 0, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 2].Text = "tUif tpOf;fhL:";
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 2].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 2].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 3].Text = Convert.ToString(per_tage_hrs);
    //                        FpSpread1.Sheets[0].SpanModel.Add(rowcount, colcount + 3, 1, 3);

    //                        rowcount++;
    //                        //rowcount = FpSpread1.Sheets[0].RowCount-1;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 0].Text = "Academic Performance  ";
    //                        FpSpread1.Sheets[0].SpanModel.Add(rowcount, colcount + 0, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 2].Text = "fy;tp nray;ghL ";
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 2].Font.Name = "SUNTOMMY";
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 2].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[rowcount, colcount + 3].Text = "";
    //                        FpSpread1.Sheets[0].SpanModel.Add(rowcount, colcount + 3, 1, 3);
    //                        rowcount++;
    //                        startcol = colcount + 6;
    //                        //startcol = colcount+;
    //                        if (j != chklstest.Items.Count - 1 && chklstest.Items[j + 1].Selected && cycle == 0)
    //                        {
    //                            FpSpread1.Sheets[0].ColumnCount += 6;
    //                            int w = 0;
    //                            for (int col = startcol; col < FpSpread1.Sheets[0].ColumnCount; col++)
    //                            {
    //                                FpSpread1.Sheets[0].Columns[col].Width = width[w];
    //                                w++;
    //                            }
    //                        }
    //                    }
    //                }

    //                FpSpread1.Sheets[0].SpanModel.Add(0, 0, 1, FpSpread1.Sheets[0].ColumnCount);
    //                //FpSpread1.Sheets[0].Cells[0,0].Font
    //                FpSpread1.Sheets[0].SpanModel.Add(1, 0, 1, FpSpread1.Sheets[0].ColumnCount);
    //                FpSpread1.Sheets[0].SpanModel.Add(2, 0, 1, FpSpread1.Sheets[0].ColumnCount);
    //                FpSpread1.Sheets[0].SpanModel.Add(3, 0, 1, FpSpread1.Sheets[0].ColumnCount);
    //                FpSpread1.Sheets[0].SpanModel.Add(4, 4, 1, FpSpread1.Sheets[0].ColumnCount - 3);
    //                //FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, 4, 1, 2);
    //                FpSpread1.Sheets[0].SpanModel.Add(5, 4, 1, FpSpread1.Sheets[0].ColumnCount - 3);
    //                FpSpread1.Sheets[0].SpanModel.Add(6, 4, 1, FpSpread1.Sheets[0].ColumnCount - 3);

    //                FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 7;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 6, 0].Text = "If the attendance is below 80% your ward will not be eligible to appear for the university examination ";
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 6, 0, 1, FpSpread1.Sheets[0].ColumnCount);

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 0].Text = "tUif tpOf;fhL 80 f;Fk; Fiwthf ,Ue;jhy;> mk;khztd; gUtj; NjHtpid vOj mDkjpf;fg;glkhl;lhd;.";
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 0].Font.Name = "AMUDHAM";
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 0].Font.Size = FontUnit.Medium;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 5, 0, 1, FpSpread1.Sheets[0].ColumnCount);

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].Text = "Parents are requested to sign and return this report to the class advisor with their feed back with out fail.  ";
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 4, 0, 1, FpSpread1.Sheets[0].ColumnCount);

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Text = "ngw;Nwhh;fs; ,e;j NjHT NjHr;rp tpguj;jpy; ifnahg;gkpl;L tFg;ghrphpahplk; xg;gilf;FkhW Nfl;Lf;nfhs;fpNwhk;.";
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Font.Name = "AMUDHAM";
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Font.Size = FontUnit.Medium;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 3, 0, 1, FpSpread1.Sheets[0].ColumnCount);

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Text = "You are requested to meet the CLASS ADVISOR/HOD/PRINCIPAL without fail on or before: ";
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, 0, 1, FpSpread1.Sheets[0].ColumnCount);

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = ",J njhlh;ghf jhq;fs; tFg;ghrphpah;/Jiwj;jiyth;/Kjy;th; ----------------------md;W Nehpy; te;J re;jpf;FkhW Nfl;Lf;nfhs;fpNwhk;.";
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "AMUDHAM";
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, FpSpread1.Sheets[0].ColumnCount);

    //                if (txtnotes.Text != "")
    //                {
    //                    FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 1;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Notes:" + txtnotes.Text.ToString();
    //                    FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, FpSpread1.Sheets[0].ColumnCount);

    //                }
    //                FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 3;

    //                //CLASS ADVISOR SIGN
    //                string find_staff_code1 = "";
    //                SqlDataAdapter da_find_staffcode1;
    //                DataSet ds_find_staffcode1;
    //                find_staff_code1 = "select top 1 class_advisor from semester_schedule where class_advisor<>'' and degree_code=" + ddlBranch.SelectedValue.ToString() + " and batch_year=" + ddlBatch.SelectedValue.ToString() + " and semester=" + ddlSemYr.SelectedValue.ToString() + "";
    //                da_find_staffcode1 = new SqlDataAdapter(find_staff_code1, con);
    //                con.Close();
    //                con.Open();
    //                ds_find_staffcode1 = new DataSet();
    //                da_find_staffcode1.Fill(ds_find_staffcode1);
    //                if (ds_find_staffcode1.Tables[0].Rows.Count > 0)
    //                {
    //                    string[] spl_classadv_code1 = (ds_find_staffcode1.Tables[0].Rows[0]["class_advisor"].ToString()).Split(',');
    //                    Session["class_adv_staffcode"] = spl_classadv_code1[0].ToString();
    //                    MyImg coeimg2 = new MyImg();
    //                    coeimg2.ImageUrl = "Handler/Class_Advisor.ashx?id=" + Session["class_adv_staffcode"];

    //                    //=============class advisor sign

    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].CellType = coeimg2;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].HorizontalAlign = HorizontalAlign.Center;
    //                }
    //                else
    //                {
    //                    Session["class_adv_staffcode"] = "";
    //                }
    //                //
    //                // HOD SIGN
    //                string find_staff_codex = "";
    //                SqlDataAdapter da_find_staffcodex;
    //                DataSet ds_find_staffcodex;
    //                con.Close();
    //                con.Open();

    //                find_staff_codex = "select top 1 staff_code from staffmaster where  staff_code=(select top 1 head_of_dept from department where dept_code in (select distinct dept_code from degree where degree_code='" + ddlBranch.SelectedValue.ToString() + "' and college_code='" + Session["collegecode"] + "'))";

    //                da_find_staffcodex = new SqlDataAdapter(find_staff_codex, con);

    //                ds_find_staffcodex = new DataSet();
    //                da_find_staffcodex.Fill(ds_find_staffcodex);
    //                if (ds_find_staffcodex.Tables[0].Rows.Count > 0)
    //                {
    //                    Session["class_hod_staffcode"] = ds_find_staffcodex.Tables[0].Rows[0]["staff_code"].ToString();
    //                    MyImg coeimg3 = new MyImg();
    //                    coeimg3.ImageUrl = "Handler/Hod.ashx?id=" + Session["class_hod_staffcode"];
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, (FpSpread1.Sheets[0].ColumnCount / 3)].CellType = coeimg3;
    //                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, (FpSpread1.Sheets[0].ColumnCount / 3)].HorizontalAlign = HorizontalAlign.Left;
    //                }
    //                else
    //                {
    //                    Session["class_hod_staffcode"] = "";
    //                }
    //                //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, ((FpSpread1.Sheets[0].ColumnCount / 3) * 2)].CellType = coeimg1;
    //                //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, ((FpSpread1.Sheets[0].ColumnCount / 3) * 2)].HorizontalAlign = HorizontalAlign.Left;
    //                //
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 3, 0, 2, 2);
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 3, (FpSpread1.Sheets[0].ColumnCount / 3), 2, 2);
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 3, ((FpSpread1.Sheets[0].ColumnCount / 3) * 2), 2, 2);

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "CLASS ADVISOR";
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, FpSpread1.Sheets[0].ColumnCount / 3);

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, FpSpread1.Sheets[0].ColumnCount / 3].Text = "HOD";
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, FpSpread1.Sheets[0].ColumnCount / 3].HorizontalAlign = HorizontalAlign.Left;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, FpSpread1.Sheets[0].ColumnCount / 3, 1, FpSpread1.Sheets[0].ColumnCount / 3);

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, (FpSpread1.Sheets[0].ColumnCount / 3) * 2].Text = "PRINCIPAL";
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, (FpSpread1.Sheets[0].ColumnCount / 3) * 2].HorizontalAlign = HorizontalAlign.Left;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, (FpSpread1.Sheets[0].ColumnCount / 3) * 2, 1, FpSpread1.Sheets[0].ColumnCount / 3);

    //                FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 1;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "FEED BACK FROM PARENTS /";
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, FpSpread1.Sheets[0].ColumnCount / 2);

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, FpSpread1.Sheets[0].ColumnCount / 2].Text = "ngw;Nwhhpd; fUj;J :";
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, FpSpread1.Sheets[0].ColumnCount / 2].Font.Name = "AMUDHAM";
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, FpSpread1.Sheets[0].ColumnCount / 2].Font.Size = FontUnit.Medium;
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, FpSpread1.Sheets[0].ColumnCount / 2].Font.Bold = true;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, FpSpread1.Sheets[0].ColumnCount / 2, 1, FpSpread1.Sheets[0].ColumnCount / 2);

    //                FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 3;

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Text = "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 3, 0, 1, FpSpread1.Sheets[0].ColumnCount);
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Text = "-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, 0, 1, FpSpread1.Sheets[0].ColumnCount);

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "DATE:";
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, FpSpread1.Sheets[0].ColumnCount / 3);

    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, FpSpread1.Sheets[0].ColumnCount / 3].Text = "PARENT'S SIGNATURE";
    //                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, FpSpread1.Sheets[0].ColumnCount / 3].HorizontalAlign = HorizontalAlign.Center;
    //                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, FpSpread1.Sheets[0].ColumnCount / 3, 1, FpSpread1.Sheets[0].ColumnCount / 3);

    //                // FpSpread1.Height = 500;
    //                FpSpread1.Width = 1000;
    //                FpSpread1.Sheets[0].RowCount++;
    //                // FpSpread1.Sheets[0].PageSize = FpSpread1.Sheets[0].RowCount;
    //                bindpagerowcount = FpSpread1.Sheets[0].RowCount - pagerowcount;
    //                pagerowcount = FpSpread1.Sheets[0].RowCount;
    //                cycle = 1;
    //            }
    //            FpSpread1.Sheets[0].PageSize = bindpagerowcount;
    //            //FpSpread1.Sheets[0].RowCount = 0;
    //        }
    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}

    //public void tamilreport2()
    //{
    //    try
    //    {
    //        lblpoppage.Visible = false;
    //        ddlpoppage.Visible = false;
    //        DataSet ds = new DataSet();
    //        string Registration_no = "";
    //        int xres = 0;
    //        int mm = 1;
    //        Labelnew.Visible = false;
    //        TextBoxnew.Visible = false;
    //        int pagevalue = 0;//Added By Srinath 16/3/2013

    //        FpEntry.SaveChanges();
    //        FpSpread1.SaveChanges();
    //        string strsc = "";
    //        if (ddlBranch.Text != "")
    //        {
    //            branch = ddlBranch.SelectedItem.Text;
    //        }
    //        if (ddlDegree.Text != "")
    //        {
    //            degree = ddlDegree.SelectedItem.Text;
    //        }
    //        sem = ddlSemYr.SelectedValue;
    //        sec = ddlSec.SelectedValue;
    //        if (ddlSemYr.Text != "")
    //        {
    //            semester = Convert.ToInt32(ddlSemYr.SelectedValue);
    //        }
    //        colege_code = Session["collegecode"].ToString();
    //        degree1 = ddlBranch.SelectedValue;
    //        FpSpread1.Sheets[0].RowCount = 0;
    //        Label4.Visible = true;
    //        frdate = TextBox2.Text;
    //        todate = TextBox1.Text;
    //        string examstartdate = "";
    //        string examenddate = "";
    //        for (int j = 0; j < chklstest.Items.Count; j++)
    //        {
    //            if (chklstest.Items[j].Selected == true)
    //            {
    //                string criteria_no = chklstest.Items[j].Value.ToString();
    //                test = chklstest.Items[j].Text.ToString();
    //                con.Close();
    //                con.Open();
    //                DataTable dtdate = new DataTable();
    //                string examdatequewry = "select distinct exam_date from exam_type inner join criteriaforinternal on criteriaforinternal.criteria_no=exam_type.criteria_no where criteriaforinternal.criteria_no= '" + criteria_no + "' order by exam_date ";
    //                SqlDataAdapter sqld = new SqlDataAdapter(examdatequewry, con);
    //                sqld.Fill(dtdate);
    //                if (dtdate.Rows.Count > 0)
    //                {
    //                    for (int i = 0; i < dtdate.Rows.Count; i++)
    //                    {
    //                        if (i == 0)
    //                        {
    //                            DateTime dtstart = Convert.ToDateTime(dtdate.Rows[i]["exam_date"]);
    //                            examstartdate = dtstart.ToString("dd/MM/yyyy");
    //                        }
    //                        else if (i == dtdate.Rows.Count - 1)
    //                        {
    //                            DateTime dtstart = Convert.ToDateTime(dtdate.Rows[i]["exam_date"]);
    //                            examenddate = dtstart.ToString("dd/MM/yyyy");
    //                        }
    //                    }
    //                }
    //                int rowcount = 0;
    //                for (res = 1; res < Convert.ToInt32(FpEntry.Sheets[0].RowCount); res++)
    //                {
    //                    isval = 0;
    //                    s = FpEntry.Sheets[0].Cells[res, 0].Text;
    //                    isval = Convert.ToInt32(FpEntry.Sheets[0].Cells[res, 1].Value);
    //                    if (isval == 1)
    //                    {
    //                        Label4.Visible = false;
    //                        //format2btn.Visible = true;
    //                        FpSpread1.Visible = true;
    //                        // FpSpread1.Sheets[0].PageSize = 40;//Hidden By Srinath 16/3/2013
    //                        FpSpread1.Sheets[0].RowHeader.Visible = false;
    //                        FpSpread1.Sheets[0].DefaultStyle.Font.Name = "Book Antique";
    //                        FpSpread1.Sheets[0].DefaultStyle.Font.Bold = false;
    //                        FpSpread1.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].ColumnHeader.Visible = false;
    //                        if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //                        {
    //                            string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo,district from collinfo where college_code=" + Session["collegecode"] + "";
    //                            SqlCommand collegecmd = new SqlCommand(college, con);
    //                            SqlDataReader collegename;
    //                            con.Close();
    //                            con.Open();
    //                            collegename = collegecmd.ExecuteReader();
    //                            if (collegename.HasRows)
    //                            {
    //                                while (collegename.Read())
    //                                {
    //                                    collnamenew1 = collegename["collname"].ToString();
    //                                    address1 = collegename["address1"].ToString();
    //                                    address2 = collegename["address2"].ToString();
    //                                    address3 = collegename["address3"].ToString();
    //                                    pincode = collegename["pincode"].ToString();
    //                                    district = collegename["district"].ToString();
    //                                }
    //                            }
    //                            con.Close();
    //                        }

    //                        rol_no = FpEntry.Sheets[0].Cells[res, 2].Text;
    //                        Label4.Visible = false;
    //                        name = FpEntry.Sheets[0].Cells[res, 4].Text;
    //                        FpSpread1.Sheets[0].ColumnCount = 6;
    //                        FpSpread1.Sheets[0].Columns[0].Width = 40;
    //                        FpSpread1.Sheets[0].Columns[1].Width = 100;
    //                        FpSpread1.Sheets[0].Columns[2].Width = 180;
    //                        FpSpread1.Sheets[0].Columns[3].Width = 100;
    //                        FpSpread1.Sheets[0].Columns[4].Width = 80;
    //                        FpSpread1.Sheets[0].Columns[5].Width = 70;
    //                        FpSpread1.Width = 570;
    //                        FpSpread1.Height = 550;
    //                        FpSpread1.Sheets[0].ScrollingContentVisible = true;
    //                        FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 4;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].Text = collnamenew1;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 4, 0, 1, 6);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Text = address1 + "," + district + "," + pincode;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Font.Bold = true;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 3, 0, 1, 6);
    //                        string cdate = DateTime.Now.ToString("dd/MM/yyyy");
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Text = "Date:" + cdate;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Right;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, 0, 1, 6);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Progress Report";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Right;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 3);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Font.Name = "AMUDHAM"; ; // department of--------
    //                      //  FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Medium;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Text = "- nju;r;rp mwpf;if";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Font.Bold = true;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 3, 1, 3);

    //                        FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 1;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 6);


    //                        yr_val = ddlSemYr.SelectedItem.ToString();
    //                        getyear();
    //                        //attendance

    //                        hat.Clear();
    //                        hat.Add("colege_code", Session["collegecode"].ToString());
    //                        ds15 = dacces.select_method("ATT_MASTER_SETTING", hat, "sp");
    //                        // countds = ds15.Tables[0].Rows.Count;
    //                        count = ds15.Tables[0].Rows.Count;
    //                        attcount = ds15.Tables[0].Rows.Count;

    //                        attmaster.Clear();
    //                        if (count > 0)
    //                        {
    //                            for (int lcnt = 0; lcnt < ds15.Tables[0].Rows.Count; lcnt++)
    //                            {
    //                                attmaster.Add(ds15.Tables[0].Rows[lcnt]["LeaveCode"].ToString(), ds15.Tables[0].Rows[lcnt]["CalcFlag"].ToString());
    //                            }
    //                        }
    //                        stud_roll = rol_no.ToString();
    //                        persentmonthcal();
    //                        double per_tage_day = 0;
    //                        double gconhrs = 0;
    //                        double gprehours = 0;
    //                        string dum_tage_date = "";
    //                        per_con_hrs = per_workingdays1;
    //                        per_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / (per_con_hrs + tot_conduct_hr_spl_fals)) * 100);
    //                        per_tage_hrs = Math.Round(per_tage_hrs, 2);
    //                        gconhrs = per_con_hrs + tot_conduct_hr_spl_fals;
    //                        gprehours = per_per_hrs + tot_per_hrs_spl_fals;

    //                        per_tage_day = per_tage_hrs;

    //                        if (per_tage_day > 100)
    //                        {
    //                            per_tage_day = 100;
    //                        }
    //                        dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //                        if (dum_tage_date == "NaN")
    //                        {
    //                            dum_tage_date = "0";
    //                        }
    //                        else if (dum_tage_date == "Infinity")
    //                        {
    //                            dum_tage_date = "0";
    //                        }
    //                        string percen = Convert.ToString(per_tage_hrs);
    //                        if (percen == "NaN")
    //                        {
    //                            per_tage_hrs = 0;
    //                        }

    //                        FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 4;
    //                        // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].Text = "Your son/daughter " + name + " " + "Roll No " + rol_no + "studying in " + ddlDegree.SelectedItem.Text + " " + ddlBranch.SelectedItem.Text + " " + "has attened the college for  " + gprehours.ToString() + "    periods out of " + gconhrs.ToString() + "    periods and scored the following marks in the " + chklstest.SelectedItem.Text + "  held during "+examstartdate+" to "+examenddate+".";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].Text = "Your son/daughter " + name + " " + "Roll No " + rol_no + "studying in " + ddlDegree.SelectedItem.Text + " " + ddlBranch.SelectedItem.Text + " " + "has scored the following marks in the " + test + "  held during " + examstartdate + " to " + examenddate + ".And his attendance percentage  is given below.";
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 4, 0, 1, 6);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].Font.Size = FontUnit.Small;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].Font.Bold = true;


    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Text = "j';fs; kfd;_kfs;"; // your son/daughter in tamil
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Font.Bold = true;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 3), 0, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].HorizontalAlign = HorizontalAlign.Center;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 2].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 2].Text = name + " - " + ddlDegree.SelectedItem.Text + " " + ddlBranch.SelectedItem.ToString(); //stud name 
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 2].Font.Size = FontUnit.Small;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 2].Font.Bold = true;

    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 3), 2, 1, 5);

    //                        //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Left;
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Font.Name = "AMUDHAM";
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Text = ",Jtiu eilbgw;w " + " " + gconhrs.ToString() + "  ghlntisfspy;" + " " + gprehours.ToString() + "  tUif g[upe;Js;shh; . nkYk; ";
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Font.Size = FontUnit.Medium;
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Font.Bold = true;

    //                        //FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 2), 0, 1, 6);


    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Text = chklstest.SelectedItem.Text;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Font.Bold = true;

    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 2), 0, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Font.Name = "AMUDHAM"; //
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Text = " njh;tpy; f%H;fhqk; kjpg;bgz;fis bgw;Ws;shh;.";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Font.Size = FontUnit.Medium;

    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 2), 2, 1, 4);//26.06.12
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "nkYk; ,tuJ tUif rjtpfpjk; fPnH jug;gl;Ls;sJ.";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Bold = true;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 6);

    //                        FpSpread1.Sheets[0].RowCount++;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 6);

    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Border.BorderColorBottom = Color.Black;

    //                        FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 2;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Text = "t.vz;  ";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Border.BorderColorLeft = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Border.BorderColorRight = Color.Black;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 1].Text = "ghlf;FwpaPL kw;Wk; bgau;";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 1].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 1].Border.BorderColorLeft = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 1].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 1].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, 1, 1, 3);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].Text = "bgw;w kjpg;bgz;fs;";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].Border.BorderColorLeft = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, 4, 1, 2);

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Sl.No ";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorRight = Color.Black;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = "Subject Code and Name";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorRight = Color.Black;


    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 1, 1, 3);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text = "Scored Marks";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorRight = Color.Black;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 4, 1, 2);
    //                        // FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 3].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 5].Border.BorderColorBottom = Color.Black;

    //                        DataTable dtgetmark = new DataTable();
    //                        con.Close();
    //                        con.Open();
    //                        string getmarkquery = "select distinct e.subject_no,sub.subject_name,sub.subject_code,max_mark,min_mark,marks_obtained,e.exam_code as excode from subjectchooser s,registration rg,exam_type e,result r, subject sub where sub.subject_no=s.subject_no and  s.subject_no=e.subject_no and s.roll_no=rg.roll_no  and e.exam_code=r.exam_code and rg.roll_no=r.roll_no and e.criteria_no='" + criteria_no + "' and r.roll_no='" + rol_no + "'";
    //                        SqlDataAdapter sqldap = new SqlDataAdapter(getmarkquery, con);
    //                        sqldap.Fill(dtgetmark);
    //                        int sno = 0;

    //                        double totalmark = 0;
    //                        double totalobtainedmark = 0;

    //                        double minmark = 0;
    //                        if (dtgetmark.Rows.Count > 0)
    //                        {
    //                            for (int i = 0; i < dtgetmark.Rows.Count; i++)
    //                            {
    //                                string result = "Pass";
    //                                Boolean resultflag = false;
    //                                sno++;
    //                                string marksobtained = "";
    //                                FpSpread1.Sheets[0].RowCount++;
    //                                FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Border.BorderColorBottom = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = sno.ToString();
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorBottom = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorRight = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = Convert.ToString(dtgetmark.Rows[i]["subject_name"]);
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorBottom = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorRight = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorBottom = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorRight = Color.Black;
    //                                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 1, 1, 3);
    //                                marksobtained = Convert.ToString(dtgetmark.Rows[i]["marks_obtained"]);
    //                                int mark = 0;
    //                                string displaymark = "";
    //                                if (marksobtained != "")
    //                                {
    //                                    mark = Convert.ToInt32(marksobtained);
    //                                    if (mark > 0)
    //                                    {
    //                                        displaymark = mark.ToString();
    //                                    }
    //                                    else
    //                                    {
    //                                        displaymark = findresult(marksobtained);
    //                                    }
    //                                }
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text = displaymark;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorBottom = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Border.BorderColorRight = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Center;
    //                                FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 4, 1, 2);
    //                            }
    //                        }
    //                        FpSpread1.Sheets[0].RowCount++;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 6);
    //                        FpSpread1.Sheets[0].RowCount++;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = "One should get a minimum of 50% for pass in each subject.The Student was not scored Pass marks in the subjects Underlined with red ink.  The “AAA” denotes ABSENT in the particular test. In this regard Parents are requested to meet the Principal/HOD/Class Advisor by considering their wards progress.";
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 1, 1, 4);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;

    //                        FpSpread1.Sheets[0].RowCount++;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = "gy;fiyf;fHf tpjpKiwapd; go nju;r;rp bgw xt;bthU ghlj;jpYk;  Fiwe;j gl;rk; 50 rjtPj kjpg;bgz;fs; bgw ntz;Lk;.rptg;g[ ikapdhy; mof;nfhol;l ghlfspy; njh;r;rp bgwtpy;iy.";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Name = "AMUDHAM";

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 1, 1, 4);
    //                        FpSpread1.Sheets[0].RowCount++;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = "AAA";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Text = "vd;W Fwpg;gpl;Ls;s ghlj;jpd; njh;t[f;F khzth; tutpy;iy.";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 2, 1, 3);

    //                        FpSpread1.Sheets[0].RowCount++;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Text = " ,J bjhlh;ghf bgw;nwhu; j';fsJ gps;isfspd; Kd;ndw;wj;ijf; fUj;jpy; bfhz;L njitapUg;gpd; Kjy;tiunah/ Jiwj;jiytiunah/ tFg;g[  Mrpupaiunah bjhlh;g[ bfhs;st[k;. ";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Name = "AMUDHAM";

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 1, 1, 4);
    //                        FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 5;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 0].Text = "Attendance Particulars/";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 0].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 0].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 0].HorizontalAlign = HorizontalAlign.Right;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 5), 0, 1, 3);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 3].Font.Name = "AMUDHAM"; ; // department of--------

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 3].Text = "tUifg;gjpt[ tptuk;";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 3].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 3].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 5, 3].Font.Bold = true;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 5), 3, 1, 3);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].Text = "For the Period From '" + TextBox2.Text + "'" + " -" + TextBox1.Text;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 4), 0, 1, 6);
    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 4].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 3].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Text = "Total No.of Hours Conducted";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Font.Size = FontUnit.Medium;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 3), 0, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 1].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 2].Border.BorderColorLeft = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 1].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 1].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 2].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 2].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 2].Text = "Total No.of Hours Attended";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 2].Font.Size = FontUnit.Medium;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 2].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 3), 2, 1, 2);

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 4].Text = "Attendance %";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 4].Font.Size = FontUnit.Medium;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 4].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 3), 4, 1, 2);


    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Text = " elj;jg;gl;l ghl tFg;g[fspd; vz;zpf;if";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Font.Size = FontUnit.Medium;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 2), 0, 1, 2);
    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 2].Border.BorderColorBottom = Color.Black;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Text = "te;jpUe;j ghl tFg;g[fspd; vz;zpf;if";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Font.Size = FontUnit.Medium;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 2), 2, 1, 2);

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].Text = "tUif rjtpfpjk;";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].Font.Size = FontUnit.Medium;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 1].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 1].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Border.BorderColorRight = Color.Black;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 2), 4, 1, 2);

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = gconhrs.ToString();
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Font.Size = FontUnit.Medium;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, 2);

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Text = gprehours.ToString();
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Font.Size = FontUnit.Medium;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 2, 1, 2);

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text = Convert.ToString(per_tage_hrs);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Font.Size = FontUnit.Medium;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 4, 1, 2);
    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 1].Border.BorderColorBottom = Color.Black;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 1].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Border.BorderColorRight = Color.Black;
    //                        if (txtnotes.Text != "")
    //                        {
    //                            FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 1;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Notes:" + txtnotes.Text.ToString();
    //                            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 1), 0, 1, FpSpread1.Sheets[0].ColumnCount);
    //                        }

    //                        FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 4;

    //                        MyImg miprincipal = new MyImg();
    //                        miprincipal.ImageUrl = "Handler/Principalsign.ashx?";

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 4].HorizontalAlign = HorizontalAlign.Left;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 4].CellType = miprincipal;

    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 4, 0, 2, 2);

    //                        string staff_code = "";
    //                        //if (ddlSec.Enabled == true)
    //                        //{
    //                        staff_code = dacces.GetFunction("select top 1 staff_code from staffmaster where  staff_code=(select top 1 head_of_dept from department where dept_code in (select distinct dept_code from degree where degree_code='" + ddlBranch.SelectedValue.ToString() + "' and college_code='" + Session["collegecode"] + "'))");
    //                        //}
    //                        //else
    //                        //{
    //                        // staff_code = dacces.GetFunction("select class_advisor from semester_schedule where batch_year=" + ddlBatch.SelectedItem.ToString() + " and degree_code=" + ddlBranch.SelectedValue.ToString() + " and semester=" + ddlSemYr.SelectedValue.ToString() + "");
    //                        //
    //                        // }
    //                        //====================================
    //                        if (staff_code.ToString().Trim() != "")
    //                        {
    //                            MyImg staffsign = new MyImg();
    //                            staffsign.ImageUrl = "Handler/Hod.ashx?id=" + staff_code;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 2].CellType = staffsign;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 2].HorizontalAlign = HorizontalAlign.Center;
    //                        }
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 4, 2, 2, 2);
    //                        string find_staff_code1 = "";
    //                        SqlDataAdapter da_find_staffcode1;
    //                        DataSet ds_find_staffcode1;
    //                        find_staff_code1 = "select top 1 class_advisor from semester_schedule where class_advisor<>'' and degree_code=" + ddlBranch.SelectedValue.ToString() + " and batch_year=" + ddlBatch.SelectedValue.ToString() + " and semester=" + ddlSemYr.SelectedValue.ToString() + "";
    //                        da_find_staffcode1 = new SqlDataAdapter(find_staff_code1, con);
    //                        con.Close();
    //                        con.Open();
    //                        ds_find_staffcode1 = new DataSet();
    //                        da_find_staffcode1.Fill(ds_find_staffcode1);
    //                        if (ds_find_staffcode1.Tables[0].Rows.Count > 0)
    //                        {
    //                            string[] spl_classadv_code1 = (ds_find_staffcode1.Tables[0].Rows[0]["class_advisor"].ToString()).Split(',');
    //                            Session["class_adv_staffcode"] = spl_classadv_code1[0].ToString();
    //                            MyImg coeimg2 = new MyImg();
    //                            coeimg2.ImageUrl = "Handler/Class_Advisor.ashx?id=" + Session["class_adv_staffcode"];

    //                            //=============class advisor sign

    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].CellType = coeimg2;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 4, 0].HorizontalAlign = HorizontalAlign.Center;
    //                        }
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 4, 0, 2, 2);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Text = "tFg;g[ Mnyhrfu;..";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, 0, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].Text = "Class Advisor";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 0, 1, 2);

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Text = "Jiwj;jiytu;.. ";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, 2, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].Text = "HOD";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 2].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 2, 1, 2);

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].Text = "Kjy;tu;  ";
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 4].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, 4, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 4].Text = "Principal";
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 1, 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 1, 4, 1, 2);
    //                    }
    //                    FpSpread1.Sheets[0].PageSize = FpSpread1.Sheets[0].RowCount - rowcount;
    //                    rowcount = rowcount + FpSpread1.Sheets[0].RowCount;
    //                }
    //            }
    //        }
    //    }
    //    catch (Exception ex)
    //    {

    //    }
    //}

    //public void Tamilreport()
    //{
    //    try
    //    {
    //        DataSet ds = new DataSet();
    //        string Registration_no = "";
    //        int xres = 0;
    //        int mm = 1;
    //        Labelnew.Visible = false;
    //        TextBoxnew.Visible = false;
    //        int pagevalue = 0;//Added By Srinath 16/3/2013
    //        FpEntry.SaveChanges();
    //        FpSpread1.SaveChanges();
    //        string strsc = "";
    //        if (ddlBranch.Text != "")
    //        {
    //            branch = ddlBranch.SelectedItem.Text;
    //        }
    //        if (ddlDegree.Text != "")
    //        {
    //            degree = ddlDegree.SelectedItem.Text;
    //        }
    //        sem = ddlSemYr.SelectedValue;
    //        sec = ddlSec.SelectedValue;
    //        if (ddlSemYr.Text != "")
    //        {
    //            semester = Convert.ToInt32(ddlSemYr.SelectedValue);
    //        }
    //        colege_code = Session["collegecode"].ToString();
    //        degree1 = ddlBranch.SelectedValue;
    //        FpSpread1.Sheets[0].RowCount = 0;
    //        Label4.Visible = true;
    //        frdate = TextBox2.Text;
    //        todate = TextBox1.Text;
    //        for (int j = 0; j < chklstest.Items.Count; j++)
    //        {
    //            if (chklstest.Items[j].Selected == true)
    //            {
    //                string criteria_no = chklstest.Items[j].Value.ToString();
    //                test = chklstest.Items[j].Text.ToString();
    //                for (res = 1; res < Convert.ToInt32(FpEntry.Sheets[0].RowCount); res++)
    //                {
    //                    isval = 0;
    //                    s = FpEntry.Sheets[0].Cells[res, 0].Text;
    //                    isval = Convert.ToInt32(FpEntry.Sheets[0].Cells[res, 1].Value);
    //                    if (isval == 1)
    //                    {
    //                        Label4.Visible = false;
    //                        //format2btn.Visible = true;
    //                        FpSpread1.Visible = true;
    //                        // FpSpread1.Sheets[0].PageSize = 40;//Hidden By Srinath 16/3/2013
    //                        FpSpread1.Sheets[0].RowHeader.Visible = false;
    //                        FpSpread1.Sheets[0].DefaultStyle.Font.Name = "Book Antique";
    //                        FpSpread1.Sheets[0].DefaultStyle.Font.Bold = false;
    //                        FpSpread1.Sheets[0].DefaultStyle.Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].ColumnHeader.Visible = false;

    //                        //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ hdr by mythili 10.04.12
    //                        hat.Clear();
    //                        hat.Add("college_code", Session["collegecode"].ToString());
    //                        hat.Add("form_name", "CAMLetter.aspx");
    //                        dsprint = dacces.select_method("PROC_PRINT_MASTER_SETTINGS", hat, "sp");
    //                        if (dsprint.Tables[0].Rows.Count > 0)
    //                        {
    //                            if (dsprint.Tables[0].Rows[0]["college_name"].ToString() != string.Empty)
    //                            {
    //                                collnamenew1 = dsprint.Tables[0].Rows[0]["college_name"].ToString();
    //                            }
    //                            if (dsprint.Tables[0].Rows[0]["address1"].ToString() != "")
    //                            {
    //                                address1 = dsprint.Tables[0].Rows[0]["address1"].ToString();
    //                                address = address1;
    //                            }
    //                            if (dsprint.Tables[0].Rows[0]["address2"].ToString() != "")
    //                            {
    //                                address2 = dsprint.Tables[0].Rows[0]["address2"].ToString();
    //                                address = address1 + "-" + address2;
    //                            }
    //                            if (dsprint.Tables[0].Rows[0]["address3"].ToString() != "")
    //                            {
    //                                district = dsprint.Tables[0].Rows[0]["address3"].ToString();
    //                                address = address1 + "-" + address2 + "-" + district;
    //                            }
    //                            if (dsprint.Tables[0].Rows[0]["phoneno"].ToString() != "")
    //                            {
    //                                Phoneno = dsprint.Tables[0].Rows[0]["phoneno"].ToString();
    //                                phnfax = "Phone :" + " " + Phoneno;
    //                            }
    //                            if (dsprint.Tables[0].Rows[0]["faxno"].ToString() != "")
    //                            {
    //                                Faxno = dsprint.Tables[0].Rows[0]["faxno"].ToString();
    //                                phnfax = phnfax + "Fax  :" + " " + Faxno;
    //                            }

    //                            if ((dsprint.Tables[0].Rows[0]["email"].ToString() != ""))
    //                            {
    //                                email = "E-Mail:" + dsprint.Tables[0].Rows[0]["email"].ToString();
    //                            }
    //                            if (dsprint.Tables[0].Rows[0]["website"].ToString() != "")
    //                            {
    //                                email = email + " " + "Web Site:" + dsprint.Tables[0].Rows[0]["website"].ToString();
    //                            }
    //                        }
    //                        else if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //                        {
    //                            string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo,district from collinfo where college_code=" + Session["collegecode"] + "";
    //                            SqlCommand collegecmd = new SqlCommand(college, con);
    //                            SqlDataReader collegename;
    //                            con.Close();
    //                            con.Open();
    //                            collegename = collegecmd.ExecuteReader();
    //                            if (collegename.HasRows)
    //                            {
    //                                while (collegename.Read())
    //                                {
    //                                    collnamenew1 = collegename["collname"].ToString();
    //                                    address1 = collegename["address1"].ToString();
    //                                    address2 = collegename["address2"].ToString();
    //                                    address3 = collegename["address3"].ToString();
    //                                    pincode = collegename["pincode"].ToString();
    //                                    district = collegename["district"].ToString();
    //                                }
    //                            }
    //                            con.Close();
    //                        }
    //                        //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //                        rol_no = FpEntry.Sheets[0].Cells[res, 2].Text;
    //                        Label4.Visible = false;
    //                        //format2btn.Visible = true;
    //                        name = FpEntry.Sheets[0].Cells[res, 4].Text;

    //                        FpSpread1.Sheets[0].ColumnCount = 6;
    //                        FpSpread1.Sheets[0].Columns[0].Width = 40;
    //                        FpSpread1.Sheets[0].Columns[1].Width = 100;
    //                        FpSpread1.Sheets[0].Columns[2].Width = 180;
    //                        FpSpread1.Sheets[0].Columns[3].Width = 100;
    //                        FpSpread1.Sheets[0].Columns[4].Width = 80;
    //                        FpSpread1.Sheets[0].Columns[5].Width = 70;
    //                        // FpSpread1.Width = 700;
    //                        FpSpread1.Width = 570;
    //                        FpSpread1.Height = 500;


    //                        FpSpread1.Sheets[0].ScrollingContentVisible = true;
    //                        DateTime exam_month_year = Convert.ToDateTime(GetFunction("select distinct exam_date from exam_type inner join criteriaforinternal on criteriaforinternal.criteria_no=exam_type.criteria_no where criteriaforinternal.criteria_no= " + criteria_no + ""));
    //                        string mon_yr = exam_month_year.ToString("MMM");// +" " + exam_month_year.ToString("yyyy");

    //                        FpSpread1.Sheets[0].RowCount += 40;//27.04.12 added new

    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 40), 1, 1, 3);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].HorizontalAlign = HorizontalAlign.Center;

    //                        if (collnamenew1 == "KONGU ENGINEERING COLLEGE")
    //                        {
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].Font.Name = "AMUDHAM"; //college name and address
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].Text = " bfh';F bghwpapay; fy;Yhup ,bgUe;Jiw  <nuhL ";
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].Font.Size = FontUnit.Medium;
    //                        }

    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 39), 1, 1, 4);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Font.Name = "Book Antiqua";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Text = collnamenew1.ToString() + "," + address1 + "," + district + "," + pincode;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Font.Size = FontUnit.Small;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].HorizontalAlign = HorizontalAlign.Center;

    //                        if (collnamenew1 == "V.R.S College Of Engineering And Technology")
    //                        {
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].Font.Name = "AMUDHAM"; //college name and address
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].Text = " tp.Mu;.v!; bghwpapay; kw;Wk; bjhHpy;El;gf;fy;Yhp";
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].Font.Size = FontUnit.Large;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 1].Font.Bold = true;
    //                            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 40), 1, 1, 4);

    //                            FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 39), 1, 1, 4);
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Font.Name = "AMUDHAM";
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Text = "muNu; 607107 / tpGg;g[uk; khtl;lk;.";
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Font.Size = FontUnit.Medium;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].Font.Bold = true;
    //                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 39, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        }

    //                        ////'---------------to set the address
    //                        // FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 38), 1, 1, 2);
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 2].Font.Name = "Book Antiqua"; // department of--------
    //                        ////FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 1].Text = "Department of   " + ddlBranch.SelectedItem.ToString() + "  ";
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 2].Text = "Progress Report";
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 2].Font.Size = FontUnit.Medium;
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 2].Font.Bold = true;
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 2].HorizontalAlign = HorizontalAlign.Center;
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 3].Font.Name = "AMUDHAM"; ; // department of--------

    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 3].Text = "- nju;r;rp mwpf;if";
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 3].Font.Size = FontUnit.Medium;
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 3].HorizontalAlign = HorizontalAlign.Left;
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 3].Font.Bold = true;
    //                        //FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 38), 3, 1, 2);
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 4].Font.Name = "AMUDHAM"; // dept in tamil
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 4].Text = "Jiw  ";
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 4].Font.Size = FontUnit.Medium;

    //                        //'-------------------to set the emila

    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 37, 0, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].Font.Name = "AMUDHAM"; // dear sir madam in tamil
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].Text = "";//md;g[ilaPh; 
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].Font.Bold = true;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 4].Font.Name = "AMUDHAM"; //date in tamil
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 4].Text = "";//ehs;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 4].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 4].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 4].Font.Bold = true;


    //                        //'----------------end to set the address

    //                        //'-------------for logo------------------

    //                        MyImg mi = new MyImg();//set the logo for letter format
    //                        mi.ImageUrl = "Handler/Handler2.ashx?";
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 40, 0, 3, 1);
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 40, 0].CellType = mi; //22.06.12


    //                        //'----------------------------------

    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 36), 0, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].Font.Name = "Book Antiqua";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 0].Text = "";

    //                        string cdate = DateTime.Now.ToString("dd/MM/yyyy");
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 36), 4, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 3].HorizontalAlign = HorizontalAlign.Right;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 3].Font.Name = "Book Antiqua";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 37, 3].Text = "Date:" + cdate;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 37), 3, 1, 2);

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 0].Font.Name = "AMUDHAM"; //vanakkam in tamil
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 0].Text = "";//. tzf;fk;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 2].Font.Name = "Book Antiqua"; // department of--------
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 38, 1].Text = "Department of   " + ddlBranch.SelectedItem.ToString() + "  ";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 2].Text = "Progress Report";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 2].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 2].Font.Bold = true;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 2].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 3].Font.Name = "AMUDHAM"; ; // department of--------

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 3].Text = "- nju;r;rp mwpf;if";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 3].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 3].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 36, 3].Font.Bold = true;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 36), 3, 1, 2);
    //                        yr_val = ddlSemYr.SelectedItem.ToString();
    //                        getyear();
    //                        //attendance

    //                        hat.Clear();
    //                        hat.Add("colege_code", Session["collegecode"].ToString());
    //                        ds15 = dacces.select_method("ATT_MASTER_SETTING", hat, "sp");
    //                        // countds = ds15.Tables[0].Rows.Count;
    //                        count = ds15.Tables[0].Rows.Count;
    //                        attcount = ds15.Tables[0].Rows.Count;

    //                        attmaster.Clear();
    //                        if (count > 0)
    //                        {
    //                            for (int lcnt = 0; lcnt < ds15.Tables[0].Rows.Count; lcnt++)
    //                            {
    //                                attmaster.Add(ds15.Tables[0].Rows[lcnt]["LeaveCode"].ToString(), ds15.Tables[0].Rows[lcnt]["CalcFlag"].ToString());
    //                            }
    //                        }
    //                        stud_roll = rol_no.ToString();
    //                        persentmonthcal();
    //                        double per_tage_day = 0;
    //                        double gconhrs = 0;
    //                        double gprehours = 0;
    //                        string dum_tage_date = "";
    //                        //per_tage_day = ((pre_present_date / per_workingdays) * 100);  //Daywise

    //                        per_con_hrs = per_workingdays1;
    //                        per_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / (per_con_hrs + tot_conduct_hr_spl_fals)) * 100);  //Hourwise
    //                        per_tage_hrs = Math.Round(per_tage_hrs, 2);
    //                        gconhrs = per_con_hrs + tot_conduct_hr_spl_fals;
    //                        gprehours = per_per_hrs + tot_per_hrs_spl_fals;

    //                        per_tage_day = per_tage_hrs;

    //                        if (per_tage_day > 100)
    //                        {
    //                            per_tage_day = 100;
    //                        }
    //                        dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //                        if (dum_tage_date == "NaN")
    //                        {
    //                            dum_tage_date = "0";
    //                        }
    //                        else if (dum_tage_date == "Infinity")
    //                        {
    //                            dum_tage_date = "0";
    //                        }

    //                        //FpSpread1.Sheets[0].Cells[row_value, 0].Font.Name = "AMUDHAM";
    //                        //FpSpread1.Sheets[0].Cells[row_value, 0].Text = "01.tFg;gpw;F tuhj ehl;fs; : " + per_absent_date.ToString();
    //                        //FpSpread1.Sheets[0].Cells[row_value, 4].Border.BorderColorRight = Color.White;
    //                        //FpSpread1.Sheets[0].Cells[row_value + 1, 0].Text = "Number of days absent  :" + per_absent_date.ToString();

    //                        //FpSpread1.Sheets[0].Cells[row_value + 3, 0].Font.Name = "AMUDHAM";
    //                        //FpSpread1.Sheets[0].Cells[row_value + 3, 0].Text = "02.tUifg;gjpt   :" + dum_tage_date.ToString();
    //                        //FpSpread1.Sheets[0].Cells[row_value + 4, 0].Text = "Attendance till date  :" + dum_tage_date.ToString();

    //                        //FpSpread1.Sheets[0].Cells[row_value + 6, 0].Font.Name = "AMUDHAM";

    //                        //end attendance

    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 34), 0, 1, 6);//26.06.12
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 34, 0].HorizontalAlign = HorizontalAlign.Left; //in english
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 34, 0].Text = "Your son/daughter " + name + " " + "Roll No " + rol_no + "studying in " + ddlDegree.SelectedItem.Text + " " + ddlBranch.SelectedItem.Text + " " + "has attened the college for  " + gprehours.ToString() + "    periods out of " + gconhrs.ToString() + "    periods and scored the following marks in the " + test + "  held recently.";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 34, 0].Font.Size = FontUnit.Small;
    //                        //FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 33), 0, 1,5);//26.06.12
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 33, 0].Text = " has attened the college for  " + per_absent_date.ToString() + "    periods out of " + dum_tage_date.ToString() + "    periods and scored the following marks in the " + chklstest.SelectedItem.Text + "  held recently.";
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 33, 0].Font.Size = FontUnit.Small;
    //                        //FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 33), 0, 1, 2);


    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 0].Text = "j';fs; kfd;_kfs;"; // your son/daughter in tamil
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 32), 0, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 0].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 0].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 0].HorizontalAlign = HorizontalAlign.Center;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 2].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 2].Text = name + " - " + ddlDegree.SelectedItem.Text + " " + ddlBranch.SelectedItem.ToString(); //stud name 
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 2].Font.Size = FontUnit.Small;

    //                        // FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 32), 3, 1, 1);

    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 3].Font.Name = "AMUDHAM"; //rollno in tamil
    //                        // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 3].Text = ddlDegree.SelectedItem.Text + " " + ddlBranch.SelectedItem.ToString(); 
    //                        // ;
    //                        // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 3].HorizontalAlign = HorizontalAlign.Left;
    //                        // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 3].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 32), 2, 1, 5);
    //                        // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 32, 4].Text = " "+rol_no;
    //                        // FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 32), 3, 1,2);


    //                        //@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 31, 0].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 31, 0].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 31, 0].Text = ",Jtiu eilbgw;w " + " " + gconhrs.ToString() + "  ghlntisfspy;" + " " + gprehours.ToString() + "  tUif g[upe;Js;shh; . nkYk; ";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 31, 0].Font.Size = FontUnit.Medium;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 31, 0].Font.Size = FontUnit.Medium;

    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 31), 0, 1, 5);
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 31, 3].HorizontalAlign = HorizontalAlign.Center;
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 31, 3].Font.Name = "AMUDHAM";
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 31, 3].Text = ",Jtiu eilbgw;w ghlntisfspy; tUif g[upe;Js;shh;  ";
    //                        //FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 31), 2, 1, 2);//26.06.12
    //                        ////FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 31, 4].Text = mon_yr;
    //                        ////FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 31, 4].HorizontalAlign = HorizontalAlign.Left;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 0].HorizontalAlign = HorizontalAlign.Left;
    //                        // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 0].Font.Name = "AMUDHAM"; //
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 0].Text = "nkYk; ";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 0].Text = test;

    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 30), 0, 1, 2);

    //                        // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Font.Name = "AMUDHAM"; //
    //                        // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 1].Text = chklstest.SelectedItem.Text;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 2].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 2].Font.Name = "AMUDHAM"; //
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 30, 2].Text = " njh;tpy; f%H;fhqk; kjpg;bgz;fis bgw;Ws;shh;.";

    //                        FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 30), 2, 1, 3);//26.06.12

    //                        ////@@@@@@@@@@ old chaged on 26.06.12 by mythili
    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 30].Border.BorderColorBottom = Color.Black;

    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 0].Border.BorderColorBottom = Color.Black;
    //                        //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Border.BorderColorBottom = Color.Black;
    //                        //  FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 3].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 0].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 3].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 0].Border.BorderColorTop = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Border.BorderColorTop = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 3].Border.BorderColorTop = Color.Black;

    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 29].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 29].Border.BorderColorTop = Color.Black;
    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 28].Border.BorderColorBottom = Color.Black;
    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 28].Border.BorderColorTop = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 0].Border.BorderColorLeft = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Border.BorderColorLeft = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 3].Border.BorderColorLeft = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 0].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 3].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 4].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 4].Border.BorderColorBottom = Color.Black;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 0].Border.BorderColorLeft = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Border.BorderColorLeft = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 3].Border.BorderColorLeft = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 0].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 3].Border.BorderColorRight = Color.Black;
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 4].Border.BorderColorRight = Color.Black;
    //                        // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 4].Border.BorderColorBottom = Color.Black;

    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 29].Border.BorderColorBottom = Color.White;
    //                        FpSpread1.Sheets[0].Rows[FpSpread1.Sheets[0].RowCount - 28].Border.BorderColorTop = Color.White;

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 0].Text = "Sl.No";

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].Text = "Subject code and Name";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 28, 1, 1, 3);


    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 4].Text = "Scored Marks (Max: 100 Marks)";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 28, 4].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 28, 4, 1, 2);

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 0].Text = "t.vz;  ";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 0].Font.Name = "AMUDHAM";

    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Text = "ghlf;FwpaPL kw;Wk; bgau;";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 1].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 29, 1, 1, 3);


    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 4].Text = "bgw;w kjpg;bgz;fs;";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 4].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 29, 4].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 29, 4, 1, 2);

    //                        int absent_subj_count = 0;
    //                        int fail_subj_count = 0;
    //                        int row28 = FpSpread1.Sheets[0].RowCount - 27;
    //                        int subject_row_incr = 0;
    //                        int sno = 0;
    //                        //string criteria_no = chklstest.SelectedValue.ToString();

    //                        string selectmark = "select distinct e.subject_no,sub.subject_name,sub.subject_code,max_mark,min_mark,marks_obtained,e.exam_code as excode from subjectchooser s,registration rg,exam_type e,result r, subject sub where sub.subject_no=s.subject_no and  s.subject_no=e.subject_no and s.roll_no=rg.roll_no  and e.exam_code=r.exam_code and rg.roll_no=r.roll_no and e.criteria_no='" + criteria_no + "' and r.roll_no='" + rol_no + "'";


    //                        hat.Clear();
    //                        hat.Add("rollnum", rol_no.ToString());
    //                        hat.Add("criteriano", criteria_no.ToString());

    //                        ds = dacces.select_method(selectmark, hat, "cmd");
    //                        if (ds.Tables[0].Rows.Count > 0)
    //                        {
    //                            for (int dscount = 0; dscount < ds.Tables[0].Rows.Count; dscount++)
    //                            {
    //                                sno++;
    //                                string subcodeandname = "";
    //                                string subjname = ds.Tables[0].Rows[dscount]["subject_name"].ToString();
    //                                string subcode = ds.Tables[0].Rows[dscount]["subject_code"].ToString();
    //                                string getmark = ds.Tables[0].Rows[dscount]["marks_obtained"].ToString();
    //                                string excode = ds.Tables[0].Rows[dscount]["excode"].ToString();
    //                                subcodeandname = subcode + "-" + subjname;
    //                                //string get_maxmark = ds.Tables[0].Rows[dscount]["max_mark"].ToString();
    //                                string get_maxmark = GetFunction("select max(marks_obtained) as 'MAX_MARK' from result where exam_code='" + excode.ToString() + "'");
    //                                string maxmrk_pass = GetFunction("select max_mark from exam_type where exam_code='" + excode.ToString() + "'");
    //                                string minmark_pass = GetFunction("select min_mark from exam_type where exam_code='" + excode.ToString() + "'");
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 0].Border.BorderColorBottom = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1].Border.BorderColorBottom = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 3].Border.BorderColorBottom = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 2].Border.BorderColorBottom = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4].Border.BorderColorBottom = Color.Black;

    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 0].Border.BorderColorTop = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1].Border.BorderColorTop = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 2].Border.BorderColorTop = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 3].Border.BorderColorTop = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4].Border.BorderColorTop = Color.Black;

    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 0].Border.BorderColorLeft = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1].Border.BorderColorLeft = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 2].Border.BorderColorLeft = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 3].Border.BorderColorLeft = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4].Border.BorderColorLeft = Color.Black;

    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 0].Border.BorderColorRight = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1].Border.BorderColorRight = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 2].Border.BorderColorRight = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 3].Border.BorderColorRight = Color.Black;
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4].Border.BorderColorRight = Color.Black;

    //                                FpSpread1.Sheets[0].Rows[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr].HorizontalAlign = HorizontalAlign.Center;

    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 0].Text = sno.ToString();
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1].Text = subcodeandname;///////////////
    //                                FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1, 1, 3);
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 1].HorizontalAlign = HorizontalAlign.Left;
    //                                FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4].Text = getmark; //+ "/100";

    //                                //display max mark of subject
    //                                //FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4].Text = get_maxmark.ToString();
    //                                // FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 2].Text = maxmrk_pass.ToString();
    //                                if (getmark == "A" || getmark == "AA" || getmark == "AAA" || getmark == "P" || getmark == "-1")
    //                                {
    //                                    FpSpread1.Sheets[0].Cells[(FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4].Text = "AAA";
    //                                    absent_subj_count++;
    //                                }

    //                                if (getmark != "AB" && getmark != "AAA" && getmark != "EL" && getmark != "EOD" && getmark != "ML" && getmark != "SOD" && getmark != "NSS" && getmark != "NJ" && getmark != "S" && getmark != "L" && getmark != "NCC" && getmark != "HS" && getmark != "PP" && getmark != "SYOD" && getmark != "COD" && getmark != "OOD" && getmark != "OD" && getmark != "" && getmark != " " && getmark != "LA" && getmark != "" && getmark != " " && getmark != "RAA")//added on 30.07.12//added by subburaj 21.08.2014
    //                                {
    //                                    //  if (Convert.ToInt16(getmark) <= Convert.ToInt16(minmark_pass) && Convert.ToInt16(getmark) > 0)
    //                                    if (Convert.ToDouble(getmark) < Convert.ToDouble(minmark_pass))
    //                                    {
    //                                        fail_subj_count++;
    //                                    }
    //                                }
    //                                FpSpread1.Sheets[0].SpanModel.Add((FpSpread1.Sheets[0].RowCount - 27) + subject_row_incr, 4, 1, 2);
    //                                subject_row_incr++;
    //                            }
    //                        }

    //                        int row_value = (row28 + subject_row_incr);//Modified By Srinath

    //                        FpSpread1.Sheets[0].RowCount = row_value + 25;//Added By Srinath 16/3/2013
    //                        if (pagevalue == 0)
    //                        {
    //                            pagevalue = row_value + 25;
    //                        }

    //                        FpSpread1.Sheets[0].Cells[row_value + 1, 1].Text = "One should get a minimum of 50% for pass in each subject";
    //                        FpSpread1.Sheets[0].SpanModel.Add(row_value + 1, 1, 1, 5);

    //                        FpSpread1.Sheets[0].Cells[row_value + 2, 1].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[row_value + 2, 1].Text = "gy;fiyf;fHf tpjpKiwapd; go nju;r;rp bgw xt;bthU ghlj;jpYk;  Fiwe;j gl;rk; 50 rjtPj kjpg;bgz;fs; bgw ntz;Lk;";
    //                        FpSpread1.Sheets[0].SpanModel.Add(row_value + 2, 1, 1, 5);
    //                        if (txtnotes.Text != "")
    //                        {
    //                            FpSpread1.Sheets[0].Cells[row_value + 4, 1].Text = "Note:" + txtnotes.Text;
    //                            FpSpread1.Sheets[0].Cells[row_value + 4, 1].Font.Bold = true;
    //                            FpSpread1.Sheets[0].SpanModel.Add(row_value + 4, 1, 1, 5);
    //                            FpSpread1.Sheets[0].Cells[row_value + 4, 1].Font.Name = "AMUDHAM";
    //                        }
    //                        else
    //                        {
    //                            FpSpread1.Sheets[0].Cells[row_value + 4, 1].Text = "Note";
    //                            FpSpread1.Sheets[0].SpanModel.Add(row_value + 4, 1, 1, 5);
    //                            FpSpread1.Sheets[0].Cells[row_value + 5, 1].Text = "Parents are requested to note the progress and meet the Principal/HOD/Staff Advisor if needed.";
    //                            FpSpread1.Sheets[0].SpanModel.Add(row_value + 5, 1, 1, 5);
    //                            FpSpread1.Sheets[0].Cells[row_value + 6, 1].Font.Name = "AMUDHAM";
    //                            FpSpread1.Sheets[0].Cells[row_value + 6, 1].Text = "bgw;nwhu; j';fsJ gps;isfspd; Kd;ndw;wj;ijf; fUj;jpy; bfhz;L njitapUg;gpd; Kjy;tiunah/ Jiwj;jiytiunah/ tFg;g[ bghWg;g[ Mrpupaiunah bjhlh;g[ bfhs;st[k;.";
    //                            FpSpread1.Sheets[0].SpanModel.Add(row_value + 6, 1, 1, 5);
    //                        }

    //                        MyImg miprincipal = new MyImg();
    //                        miprincipal.ImageUrl = "Handler/Principalsign.ashx?";

    //                        FpSpread1.Sheets[0].Cells[(row_value + 8), 4].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].SpanModel.Add((row_value + 8), 4, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[(row_value + 8), 4].CellType = miprincipal;

    //                        FpSpread1.Sheets[0].SpanModel.Add((row_value + 9), 4, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[(row_value + 9), 4].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[(row_value + 9), 4].Text = " Kjy;tu;";
    //                        FpSpread1.Sheets[0].Cells[(row_value + 9), 4].HorizontalAlign = HorizontalAlign.Left;

    //                        FpSpread1.Sheets[0].SpanModel.Add((row_value + 10), 4, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[(row_value + 10), 4].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].Cells[(row_value + 10), 4].Text = "Principal";

    //                        FpSpread1.Sheets[0].SpanModel.Add((row_value + 10), 2, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[(row_value + 10), 2].Text = "HOD";
    //                        FpSpread1.Sheets[0].Cells[(row_value + 10), 2].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add(row_value + 10, 2, 1, 2);
    //                        FpSpread1.Sheets[0].SpanModel.Add((row_value + 9), 2, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[(row_value + 9), 2].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[(row_value + 9), 2].Text = "Jiwj;jiytu;..";
    //                        FpSpread1.Sheets[0].Cells[(row_value + 9), 2].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add(row_value + 9, 2, 1, 2);

    //                        //gowthman 02Aug2013 string staff_code = dacces.GetFunction("select class_advisor from semester_schedule where batch_year=" + ddlBatch.SelectedItem.ToString() + " and degree_code=" + ddlBranch.SelectedValue.ToString() + " and semester="+ddlSemYr.SelectedValue.ToString()+" and sections='"+ddlSec.SelectedItem.ToString()+"'");
    //                        string staff_code = "";
    //                        if (ddlSec.Enabled == true)
    //                        {
    //                            staff_code = dacces.GetFunction("select class_advisor from semester_schedule where batch_year=" + ddlBatch.SelectedItem.ToString() + " and degree_code=" + ddlBranch.SelectedValue.ToString() + " and semester=" + ddlSemYr.SelectedValue.ToString() + " and sections='" + ddlSec.SelectedItem.ToString() + "'");
    //                        }
    //                        else
    //                        {
    //                            staff_code = dacces.GetFunction("select class_advisor from semester_schedule where batch_year=" + ddlBatch.SelectedItem.ToString() + " and degree_code=" + ddlBranch.SelectedValue.ToString() + " and semester=" + ddlSemYr.SelectedValue.ToString() + "");
    //                        }
    //                        //====================================
    //                        if (staff_code.ToString().Trim() != "")
    //                        {
    //                            MyImg staffsign = new MyImg();
    //                            staffsign.ImageUrl = "Handler/Hod.ashx?id=" + staff_code;
    //                            FpSpread1.Sheets[0].SpanModel.Add((row_value + 9), 0, 1, 2);
    //                            FpSpread1.Sheets[0].Cells[(row_value + 8), 0].CellType = staffsign;
    //                            FpSpread1.Sheets[0].Cells[(row_value + 8), 0].HorizontalAlign = HorizontalAlign.Left;
    //                        }
    //                        FpSpread1.Sheets[0].SpanModel.Add((row_value + 10), 0, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[(row_value + 10), 0].Text = "  Class Advisor";
    //                        FpSpread1.Sheets[0].Cells[(row_value + 10), 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add(row_value + 10, 2, 1, 2);
    //                        FpSpread1.Sheets[0].SpanModel.Add((row_value + 9), 0, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[(row_value + 9), 0].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].Cells[(row_value + 9), 0].Text = "  tFg;g[ Mnyhrfu;..";
    //                        FpSpread1.Sheets[0].Cells[(row_value + 9), 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add(row_value + 9, 2, 1, 2);

    //                        //FpSpread1.Sheets[0].Cells[(row_value + 14), 0].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].Cells[(row_value + 12), 0].Text = "--------------------------------- cut here ---------------------------------";
    //                        FpSpread1.Sheets[0].SpanModel.Add((row_value + 12), 0, 1, 5);
    //                        FpSpread1.Sheets[0].Cells[(row_value + 13), 0].Text = "Received the letter on /";
    //                        FpSpread1.Sheets[0].Cells[(row_value + 13), 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add((row_value + 13), 0, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[(row_value + 13), 2].Text = " fojj;ij bgw;Wf; bfhz;l ehs;";
    //                        FpSpread1.Sheets[0].Cells[(row_value + 13), 2].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].Cells[(row_value + 13), 2].VerticalAlign = VerticalAlign.Middle;
    //                        FpSpread1.Sheets[0].Cells[(row_value + 13), 2].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].SpanModel.Add((row_value + 13), 2, 1, 2);


    //                        FpSpread1.Sheets[0].Cells[(row_value + 14), 0].Text = "Parents Signature /";
    //                        FpSpread1.Sheets[0].Cells[(row_value + 14), 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].SpanModel.Add((row_value + 14), 0, 1, 2);
    //                        FpSpread1.Sheets[0].Cells[(row_value + 14), 2].Text = "bgw;nwhu; ifbahg;gk;";
    //                        FpSpread1.Sheets[0].Cells[(row_value + 14), 2].VerticalAlign = VerticalAlign.Middle;
    //                        FpSpread1.Sheets[0].Cells[(row_value + 14), 2].HorizontalAlign = HorizontalAlign.Left;
    //                        FpSpread1.Sheets[0].Cells[(row_value + 14), 2].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].SpanModel.Add((row_value + 14), 2, 1, 2);

    //                        FpSpread1.Sheets[0].Cells[(row_value + 15), 0].Text = "khztd;;/ khztp bgau;";

    //                        FpSpread1.Sheets[0].Cells[(row_value + 15), 0].HorizontalAlign = HorizontalAlign.Center;
    //                        FpSpread1.Sheets[0].Cells[(row_value + 15), 0].Font.Name = "AMUDHAM";
    //                        FpSpread1.Sheets[0].SpanModel.Add((row_value + 15), 0, 1, 2);


    //                        //'--------------------start footer 10.04.12
    //                        if (dsprint.Tables[0].Rows.Count > 0)
    //                        {
    //                            if (dsprint.Tables[0].Rows[0]["footer"].ToString() != "")
    //                            {
    //                                footer_count = Convert.ToInt16(dsprint.Tables[0].Rows[0]["footer"].ToString());
    //                                FpSpread1.Sheets[0].RowCount += 3;
    //                                footer_text = dsprint.Tables[0].Rows[0]["footer_name"].ToString();
    //                                string[] footer_text_split = footer_text.Split(',');
    //                                footer_text = "";
    //                                if (footer_count == 1)
    //                                {
    //                                    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 2].Text = footer_text.ToString();
    //                                }
    //                                else if ((FpSpread1.Sheets[0].ColumnCount) < footer_count)
    //                                {
    //                                    for (int concod_footer = 0; concod_footer < footer_count; concod_footer++)
    //                                    {
    //                                        if (footer_text == "")
    //                                        {
    //                                            footer_text = footer_text_split[concod_footer].ToString();
    //                                        }
    //                                        else
    //                                        {
    //                                            footer_text = footer_text + "   " + footer_text_split[concod_footer].ToString();
    //                                        }
    //                                    }
    //                                    for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount; col_count++)
    //                                    {
    //                                        if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                                        {
    //                                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, col_count, 1, final_print_col_cnt);
    //                                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, col_count, 1, final_print_col_cnt);
    //                                            FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, col_count, 1, final_print_col_cnt);
    //                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Text = footer_text;
    //                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Bold = true;
    //                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Size = FontUnit.Medium;
    //                                            break;
    //                                        }
    //                                    }
    //                                }
    //                                else if ((FpSpread1.Sheets[0].ColumnCount) == footer_count)
    //                                {
    //                                    for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount; col_count++)
    //                                    {
    //                                        if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                                        {
    //                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Text = footer_text_split[temp_count].ToString();
    //                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Bold = true;
    //                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Size = FontUnit.Medium;
    //                                            temp_count++;
    //                                            if (temp_count == footer_count)
    //                                            {
    //                                                break;
    //                                            }
    //                                        }
    //                                    }
    //                                }
    //                                else
    //                                {
    //                                    temp_count = 0;
    //                                    split_col_for_footer = (FpSpread1.Sheets[0].ColumnCount) / footer_count;
    //                                    footer_balanc_col = (FpSpread1.Sheets[0].ColumnCount) % footer_count;
    //                                    for (int col_count = 0; col_count < FpSpread1.Sheets[0].ColumnCount; col_count++)
    //                                    {
    //                                        if (FpSpread1.Sheets[0].Columns[col_count].Visible == true)
    //                                        {
    //                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Text = footer_text_split[temp_count].ToString();
    //                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].HorizontalAlign = HorizontalAlign.Left;
    //                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].HorizontalAlign = HorizontalAlign.Center;
    //                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Bold = true;
    //                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Border.BorderColorLeft = Color.White;
    //                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Border.BorderColorRight = Color.White;
    //                                            FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, col_count].Font.Size = FontUnit.Medium;
    //                                            temp_count++;
    //                                            if (temp_count == 0)
    //                                            {
    //                                                col_count = col_count + split_col_for_footer + footer_balanc_col;
    //                                            }
    //                                            else
    //                                            {
    //                                                col_count = col_count + split_col_for_footer;
    //                                            }
    //                                            if (temp_count == footer_count)
    //                                            {
    //                                                break;
    //                                            }
    //                                        }
    //                                    }
    //                                }
    //                            }
    //                        }//'--------------------end footer

    //                        if (Registration_no == "")
    //                        {
    //                            Registration_no = rol_no;
    //                        }
    //                        else
    //                        {
    //                            Registration_no = Registration_no + "-" + rol_no;
    //                        }
    //                    }//end condn for isval
    //                    FpSpread1.Sheets[0].PageSize = pagevalue;//Hidden By Srinath 15/3/2013
    //                }//end loop for res
    //            }
    //        }
    //        string RegisterNumber = Registration_no.ToString();
    //        string[] RNumber = RegisterNumber.Split(new char[] { '-' });
    //        int n = 0;
    //        if (RNumber.Length > 0)
    //        {
    //            ddlpoppage.Items.Clear();
    //            //for (int j = 0; j < RNumber.GetUpperBound(0) + 1; j++)
    //            //{
    //            //    ddlpoppage.Items.Insert(n, new System.Web.UI.WebControls.ListItem("Page-" + mm.ToString(), RNumber[j].ToString()));
    //            //    n = n + 1;
    //            //    mm = mm + 1;

    //            //}
    //        }
    //    }
    //    catch
    //    {

    //    }
    //}

    public void getspecial_hr()
    {
        //  try
        {
            con_splhr_query_master.Close();
            con_splhr_query_master.Open();
            DataSet ds_splhr_query_master = new DataSet();
            //  no_stud_flag = false;
            string splhr_query_master = "select attendance from specialhr_attendance sa,registration r where hrdet_no in(select hrdet_no from specialhr_details where hrentry_no=(select hrentry_no from  specialhr_master where batch_year=" + ddlBatch.SelectedValue.ToString() + " and semester=" + ddlSemYr.SelectedValue.ToString() + " and degree_code=" + ddlBranch.SelectedValue.ToString() + " and date='" + dumm_from_date + "')  ) and r.roll_no=sa.roll_no and batch_year=" + ddlBatch.SelectedValue.ToString() + " and current_semester=" + ddlSemYr.SelectedValue.ToString() + " and degree_code=" + ddlBranch.SelectedValue.ToString() + "  and (CC = 0)  AND (DelFlag = 0)  AND (Exam_Flag <> 'debar') and sa.roll_no='" + stud_roll + "'  order by r.roll_no asc";
            SqlDataReader dr_splhr_query_master;
            cmd = new SqlCommand(splhr_query_master, con_splhr_query_master);
            dr_splhr_query_master = cmd.ExecuteReader();

            while (dr_splhr_query_master.Read())
            {
                if (dr_splhr_query_master.HasRows)
                {
                    value = dr_splhr_query_master[0].ToString();

                    if (value != null && value != "0" && value != "7" && value != "")
                    {
                        if (tempvalue != value)
                        {
                            tempvalue = value;
                            if (attmaster.Contains(value.ToString()))
                            {
                                ObtValue = int.Parse(GetCorrespondingKey(value.ToString(), attmaster).ToString());
                            }
                            else
                            {
                                ObtValue = 0;
                            }
                        }
                        if (ObtValue == 1)
                        {
                            per_abshrs_spl += 1;
                        }
                        else if (ObtValue == 2)
                        {
                            notconsider_value += 1;
                            njhr += 1;
                        }
                        else if (ObtValue == 0)
                        {
                            tot_per_hrs_spl += 1;
                        }
                        if (value == "3")
                        {
                            tot_ondu_spl += 1;
                        }
                        else if (value == "10")
                        {
                            per_leave += 1;
                        }
                        tot_conduct_hr_spl++;
                    }
                    else if (value == "7")
                    {
                        per_hhday_spl += 1;
                        tot_conduct_hr_spl--;
                    }
                    else
                    {
                        unmark_spl += 1;
                        tot_conduct_hr_spl--;
                    }
                }
            }
            per_abshrs_spl_fals = per_abshrs_spl;
            tot_per_hrs_spl_fals = tot_per_hrs_spl;
            per_leave_fals = per_leave;
            tot_conduct_hr_spl_fals = tot_conduct_hr_spl;
            tot_ondu_spl_fals = tot_ondu_spl;
        }
        //  catch
        {
        }
    }

    public void persentmonthcal(string rollno, string admdate, string fdate, string tdate, string degreecode, string currentsem)
    {
        letterfrm4data.Rows.Clear();
        DateTime Admission_date;
        per_njdate = 0;
        njdate = 0;
        pre_present_date = 0; Present = 0; njdate = 0;
        per_per_hrs = 0;
        tot_per_hrs = 0;
        per_absent_date = 0;
        Absent = 0;
        pre_ondu_date = 0; Onduty = 0;
        pre_leave_date = 0;
        Leave = 0;
        per_workingdays = 0; workingdays = 0;
        per_njdate = 0;
        per_workingdays1 = 0;
        mng_conducted_half_days = 0;
        fnhrs = 0; evng_conducted_half_days = 0;
        NoHrs = 0;
        fnhrs = 0;
        notconsider_value = 0;
        DAccess2 da = new DAccess2();
        DataSet ds = new DataSet();
        DataSet dsondutyval = new DataSet();
        Boolean isadm = false;
        Hashtable hatonduty = new Hashtable();
        hatonduty.Clear();
        try
        {
            per_abshrs_spl = 0;
            tot_per_hrs_spl = 0;
            per_leave = 0;
            tot_conduct_hr_spl = 0;
            tot_ondu_spl = 0;
            tot_ml_spl = 0;
            int my_un_mark = 0;
            int njdate_mng = 0, njdate_evng = 0;
            int per_holidate_mng = 0, per_holidate_evng = 0;

            mng_conducted_half_days = 0;
            evng_conducted_half_days = 0;

            notconsider_value = 0;
            string frdate = fdate;
            string todate = tdate;
            string[] spf = frdate.Split('/');
            string[] spt = todate.Split('/');
            cal_from_date = Convert.ToInt32(spf[0]) * 12 + Convert.ToInt32(spf[1]);
            cal_to_date = Convert.ToInt32(spt[0]) * 12 + Convert.ToInt32(spt[1]);

            per_from_date = Convert.ToDateTime(frdate);
            per_to_date = Convert.ToDateTime(todate);
            dumm_from_date = Convert.ToDateTime(frdate);    //"2014-12-01"

            // admdate = ds4.Tables[0].Rows[rows_count]["adm_date"].ToString();
            string[] admdatesp = admdate.Split(new Char[] { '/' });
            admdate = admdatesp[2].ToString() + "/" + admdatesp[1].ToString() + "/" + admdatesp[0].ToString();
            Admission_date = Convert.ToDateTime(admdate);

            hat.Clear();
            hat.Add("std_rollno", rollno);
            hat.Add("from_month", cal_from_date);
            hat.Add("to_month", cal_to_date);
            ds2 = da.select_method("STUD_ATTENDANCE", hat, "sp");
            mmyycount = ds2.Tables[0].Rows.Count;
            moncount = mmyycount - 1;
            if (rows_count == 0)
            {
                hat.Clear();
                hat.Add("degree_code", int.Parse(degreecode));
                hat.Add("sem", int.Parse(currentsem));
                hat.Add("from_date", frdate.ToString());
                hat.Add("to_date", todate.ToString());
                hat.Add("coll_code", int.Parse(Session["collegecode"].ToString()));

                int iscount = 0;
                string sqlstr_holiday = "select  isnull(count(holiday_date),0)as cnt FROM holidayStudents where holiday_date between '" + frdate.ToString() + "' and '" + todate.ToString() + "' and degree_code=" + degreecode + " and semester=" + currentsem + "";
                DataSet dsholiday = da.select_method_wo_parameter(sqlstr_holiday, "Text");
                if (dsholiday.Tables[0].Rows.Count > 0)
                {
                    iscount = Convert.ToInt16(dsholiday.Tables[0].Rows[0]["cnt"].ToString());
                }
                hat.Add("iscount", iscount);
                ds3 = da.select_method("ALL_HOLIDATE_DETAILS", hat, "sp");
                hat.Clear();
                hat.Add("degree_code", degreecode);
                hat.Add("sem_ester", int.Parse(currentsem));
                ds = da.select_method("period_attnd_schedule", hat, "sp");
                if (ds.Tables[0].Rows.Count != 0)
                {
                    NoHrs = int.Parse(ds.Tables[0].Rows[0]["PER DAY"].ToString());
                    fnhrs = int.Parse(ds.Tables[0].Rows[0]["I_HALF_DAY"].ToString());
                    anhrs = int.Parse(ds.Tables[0].Rows[0]["II_HALF_DAY"].ToString());
                    minpresI = int.Parse(ds.Tables[0].Rows[0]["MIN PREE I DAY"].ToString());
                    minpresII = int.Parse(ds.Tables[0].Rows[0]["MIN PREE II DAY"].ToString());
                }
                hat.Clear();
                hat.Add("colege_code", Session["collegecode"].ToString());
                ds1 = da.select_method("ATT_MASTER_SETTING", hat, "sp");
                count = ds1.Tables[0].Rows.Count;

                DataSet dsondutyva = new DataSet();

                Dictionary<string, int> holiday_table1 = new Dictionary<string, int>();
                Dictionary<string, int> holiday_table2 = new Dictionary<string, int>();
                Dictionary<string, int> holiday_table3 = new Dictionary<string, int>();
                holiday_table11.Clear();
                holiday_table21.Clear();
                holiday_table31.Clear();
                if (ds3.Tables[0].Rows.Count != 0)
                {
                    for (int k = 0; k < ds3.Tables[0].Rows.Count; k++)
                    {
                        if (ds3.Tables[0].Rows[0]["halforfull"].ToString() == "False")
                        {
                            halforfull = "0";
                        }
                        else
                        {
                            halforfull = "1";
                        }
                        if (ds3.Tables[0].Rows[0]["morning"].ToString() == "False")
                        {
                            mng = "0";
                        }
                        else
                        {
                            mng = "1";
                        }
                        if (ds3.Tables[0].Rows[0]["evening"].ToString() == "False")
                        {
                            evng = "0";
                        }
                        else
                        {
                            evng = "1";
                        }

                        holiday_sched_details = halforfull + "*" + mng + "*" + evng;

                        string[] split_date_time1 = ds3.Tables[0].Rows[k]["HOLI_DATE"].ToString().Split(' ');
                        string[] dummy_split = split_date_time1[0].Split('/');
                        if (!holiday_table11.Contains((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString()))
                        {
                            holiday_table11.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), holiday_sched_details);
                        }

                    }
                }
                if (ds3.Tables[1].Rows.Count != 0)
                {
                    for (int k = 0; k < ds3.Tables[1].Rows.Count; k++)
                    {
                        string[] split_date_time1 = ds3.Tables[1].Rows[k]["HOLI_DATE"].ToString().Split(' ');
                        string[] dummy_split = split_date_time1[0].Split('/');
                        holiday_table21.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);

                        if (ds3.Tables[1].Rows[k]["halforfull"].ToString() == "False")
                        {
                            halforfull = "0";
                        }
                        else
                        {
                            halforfull = "1";
                        }
                        if (ds3.Tables[1].Rows[k]["morning"].ToString() == "False")
                        {
                            mng = "0";
                        }
                        else
                        {
                            mng = "1";
                        }
                        if (ds3.Tables[1].Rows[k]["evening"].ToString() == "False")
                        {
                            evng = "0";
                        }
                        else
                        {
                            evng = "1";
                        }

                        holiday_sched_details = halforfull + "*" + mng + "*" + evng;

                        if (!holiday_table11.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString()))
                        {
                            holiday_table11.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), holiday_sched_details);
                        }
                        if (!holiday_table2.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString()))
                        {
                            holiday_table2.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), k);
                        }
                    }
                }
                if (ds3.Tables[2].Rows.Count != 0)
                {
                    for (int k = 0; k < ds3.Tables[2].Rows.Count; k++)
                    {
                        string[] split_date_time1 = ds3.Tables[2].Rows[k]["HOLI_DATE"].ToString().Split(' ');
                        string[] dummy_split = split_date_time1[0].Split('/');
                        if (!holiday_table31.ContainsKey(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0]))
                        {
                            holiday_table31.Add(dummy_split[2] + "/" + dummy_split[1] + "/" + dummy_split[0], k);
                        }
                        if (ds3.Tables[2].Rows[k]["halforfull"].ToString() == "False")
                        {
                            halforfull = "0";
                        }
                        else
                        {
                            halforfull = "1";
                        }
                        if (ds3.Tables[2].Rows[k]["morning"].ToString() == "False")
                        {
                            mng = "0";
                        }
                        else
                        {
                            mng = "1";
                        }
                        if (ds3.Tables[2].Rows[k]["evening"].ToString() == "False")
                        {
                            evng = "0";
                        }
                        else
                        {
                            evng = "1";
                        }

                        holiday_sched_details = halforfull + "*" + mng + "*" + evng;

                        if (!holiday_table11.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString()))
                        {
                            holiday_table11.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), holiday_sched_details);
                        }
                        if (holiday_table3.ContainsKey((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString()))
                        {
                            holiday_table3.Add((Convert.ToInt16(dummy_split[2])).ToString() + "/" + (Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString(), k);
                        }
                    }
                }
            }
            //------------------------------------------------------------------
            if (ds3.Tables[0].Rows.Count != 0)
            {
                ts = DateTime.Parse(ds3.Tables[0].Rows[0]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
                diff_date = Convert.ToString(ts.Days);
                dif_date1 = double.Parse(diff_date.ToString());
            }
            next = 0;
            if (ds2.Tables[0].Rows.Count != 0)
            {
                int rowcount = 0;
                int ccount;
                ccount = ds3.Tables[1].Rows.Count;
                ccount = ccount - 1;
                while (dumm_from_date <= (per_to_date))
                {
                    isadm = false;
                    if (dumm_from_date >= Admission_date)
                    {
                        isadm = true;
                        int temp_unmark = 0;
                        if (splhr_flag == true)
                        {

                        }
                        for (int i = 1; i <= mmyycount; i++)
                        {
                            ds2.Tables[0].DefaultView.RowFilter = "month_year='" + cal_from_date + "' and roll_no='" + rollno + "'";
                            DataView dvattvalue = ds2.Tables[0].DefaultView;
                            if (dvattvalue.Count > 0)//Added by srinath 13/10/2014
                            {
                                if (cal_from_date == int.Parse(dvattvalue[0]["month_year"].ToString()))
                                {
                                    string[] split_date_time1 = dumm_from_date.ToString().Split(' ');
                                    string[] dummy_split = split_date_time1[0].Split('/');

                                    if (!holiday_table11.ContainsKey((Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString() + "/" + (Convert.ToInt16(dummy_split[2])).ToString()))
                                    {
                                        holiday_table11.Add(((Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString() + "/" + (Convert.ToInt16(dummy_split[2])).ToString()), "3*0*0");
                                    }

                                    if (holiday_table11.Contains((Convert.ToInt16(dummy_split[1])).ToString() + "/" + (Convert.ToInt16(dummy_split[0])).ToString() + "/" + (Convert.ToInt16(dummy_split[2])).ToString()))
                                    {
                                        value_holi_status = GetCorrespondingKey(dummy_split[1].ToString() + "/" + dummy_split[0].ToString() + "/" + dummy_split[2].ToString(), holiday_table11).ToString();
                                        split_holiday_status = value_holi_status.Split('*');

                                        if (split_holiday_status[0].ToString() == "3")//=========ful day working day
                                        {
                                            split_holiday_status_1 = "1";
                                            split_holiday_status_2 = "1";
                                        }
                                        else if (split_holiday_status[0].ToString() == "1")//=============half day working day
                                        {
                                            if (split_holiday_status[1].ToString() == "1")//==============mng holiday//evng working day
                                            {
                                                split_holiday_status_1 = "0";
                                                split_holiday_status_2 = "1";
                                            }
                                            if (split_holiday_status[2].ToString() == "1")//==============evng holiday//mng working day
                                            {
                                                split_holiday_status_1 = "1";
                                                split_holiday_status_2 = "0";
                                            }
                                        }
                                        else if (split_holiday_status[0].ToString() == "0")
                                        {
                                            dumm_from_date = dumm_from_date.AddDays(1);
                                            if (dumm_from_date.Day == 1)
                                            {
                                                cal_from_date++;
                                                if (moncount > next)
                                                {
                                                    next++;
                                                }
                                            }
                                            break;
                                        }

                                        if (ds3.Tables[1].Rows.Count != 0)
                                        {
                                            ts = DateTime.Parse(ds3.Tables[1].Rows[rowcount]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
                                            diff_date = Convert.ToString(ts.Days);
                                            dif_date = double.Parse(diff_date.ToString());
                                        }
                                        else
                                        {
                                            dif_date = 0;
                                        }
                                        if (dif_date == 1)
                                        {
                                            leave_pointer = holi_leav;
                                            absent_pointer = holi_absent;
                                        }
                                        else if (dif_date == -1)
                                        {
                                            leave_pointer = holi_leav;
                                            absent_pointer = holi_absent;
                                            if (ccount > rowcount)
                                            {
                                                rowcount += 1;
                                            }
                                        }
                                        else
                                        {
                                            leave_pointer = leav_pt;
                                            absent_pointer = absent_pt;
                                        }

                                        if (ds3.Tables[2].Rows.Count != 0)
                                        {
                                            ts = DateTime.Parse(ds3.Tables[2].Rows[0]["HOLI_DATE"].ToString()).Subtract(DateTime.Parse(dumm_from_date.ToString()));
                                            diff_date = Convert.ToString(ts.Days);
                                            dif_date = double.Parse(diff_date.ToString());
                                            if (dif_date == 1)
                                            {
                                                leave_pointer = holi_leav;
                                                absent_pointer = holi_absent;
                                            }
                                        }
                                        if (dif_date1 == -1)
                                        {
                                            leave_pointer = holi_leav;
                                            absent_pointer = holi_absent;
                                        }
                                        dif_date1 = 0;
                                        if (split_holiday_status_1 == "1")
                                        {
                                            for (i = 1; i <= fnhrs; i++)
                                            {
                                                date = "d" + dumm_from_date.Day.ToString("") + "d" + i.ToString();
                                                value = dvattvalue[0][date].ToString();
                                                //Added by srinath 31/1/2014=========Start
                                                if (value != null && value != "0" && value != "7" && value != "")
                                                {
                                                    if (tempvalue != value)
                                                    {
                                                        tempvalue = value;
                                                        for (int j = 0; j < count; j++)
                                                        {
                                                            if (ds1.Tables[0].Rows[j]["LeaveCode"].ToString() == value.ToString())
                                                            {
                                                                ObtValue = int.Parse(ds1.Tables[0].Rows[j]["CalcFlag"].ToString());
                                                                j = count;
                                                            }
                                                        }
                                                    }
                                                    if (ObtValue == 1)
                                                    {
                                                        per_abshrs += 1;
                                                    }
                                                    else if (ObtValue == 2)
                                                    {
                                                        notconsider_value += 1;
                                                        njhr += 1;
                                                    }
                                                    else if (ObtValue == 0)
                                                    {
                                                        per_perhrs += 1;
                                                        tot_per_hrs += 1;
                                                    }
                                                    if (value == "3")
                                                    {
                                                        per_ondu += 1;
                                                        // tot_ondu += 1;
                                                    }
                                                    else if (value == "10")
                                                    {
                                                        per_leave += 1;
                                                    }
                                                    else if (value == "4")
                                                    {
                                                        //tot_ml += 1;
                                                    }
                                                }
                                                else if (value == "7")
                                                {
                                                    per_hhday += 1;
                                                }
                                                else
                                                {
                                                    temp_unmark++;
                                                    my_un_mark++;
                                                }
                                            }
                                            if (per_perhrs + njhr >= minpresI)
                                            {
                                                Present += 0.5;
                                            }
                                            else if (per_leave >= 1)
                                            {
                                                leave_point += leave_pointer / 2;
                                                Leave += 0.5;
                                            }
                                            else if (per_abshrs >= 1)
                                            {
                                                Absent += 0.5;
                                                absent_point += absent_pointer / 2;
                                            }
                                            if (njhr >= minpresI)
                                            {
                                                njdate += 0.5;
                                                njdate_mng += 1;
                                            }
                                            if (per_ondu >= 1)
                                            {
                                                Onduty += 0.5;
                                            }
                                            if (temp_unmark == fnhrs)
                                            {
                                                per_holidate_mng += 1;
                                                per_holidate += 0.5;
                                            }
                                            else
                                            {
                                                // dum_unmark = temp_unmark;
                                            }
                                            if (fnhrs - temp_unmark >= minpresI)
                                            {
                                                workingdays += 0.5;
                                            }
                                            mng_conducted_half_days += 1;
                                        }
                                        per_perhrs = 0;
                                        per_ondu = 0;
                                        per_leave = 0;
                                        per_abshrs = 0;
                                        temp_unmark = 0;
                                        njhr = 0;
                                        int k = fnhrs + 1;

                                        if (split_holiday_status_2 == "1")
                                        {
                                            for (i = k; i <= NoHrs; i++)
                                            {
                                                date = "d" + dumm_from_date.Day.ToString("") + "d" + i.ToString();
                                                value = dvattvalue[0][date].ToString();
                                                if (value != null && value != "0" && value != "7" && value != "")
                                                {
                                                    if (tempvalue != value)
                                                    {
                                                        tempvalue = value;
                                                        for (int j = 0; j < count; j++)
                                                        {

                                                            if (ds1.Tables[0].Rows[j]["LeaveCode"].ToString() == value.ToString())
                                                            {
                                                                ObtValue = int.Parse(ds1.Tables[0].Rows[j]["CalcFlag"].ToString());
                                                                j = count;
                                                            }
                                                        }
                                                    }
                                                    if (ObtValue == 1)
                                                    {
                                                        per_abshrs += 1;
                                                    }
                                                    else if (ObtValue == 2)
                                                    {
                                                        notconsider_value += 1;
                                                        njhr += 1;
                                                    }
                                                    else if (ObtValue == 0)
                                                    {
                                                        per_perhrs += 1;
                                                        tot_per_hrs += 1;
                                                    }
                                                    if (value == "3")
                                                    {
                                                        per_ondu += 1;
                                                        // tot_ondu += 1;
                                                    }
                                                    else if (value == "10")
                                                    {
                                                        per_leave += 1;
                                                    }
                                                    if (value == "4")
                                                    {
                                                        //  tot_ml += 1;
                                                    }
                                                }
                                                else if (value == "7")
                                                {
                                                    per_hhday += 1;
                                                }
                                                else
                                                {
                                                    temp_unmark++;
                                                    my_un_mark++;
                                                }
                                            }
                                            if (per_perhrs + njhr >= minpresII)
                                            {
                                                Present += 0.5;
                                            }
                                            else if (per_leave >= 1)
                                            {
                                                leave_point += leave_pointer / 2;
                                                Leave += 0.5;
                                            }
                                            else if (per_abshrs >= 1)
                                            {
                                                Absent += 0.5;
                                                absent_point += absent_pointer / 2;
                                            }
                                            if (njhr >= minpresII)
                                            {
                                                njdate_evng += 1;
                                                njdate += 0.5;
                                            }
                                            if (per_ondu >= 1)
                                            {
                                                Onduty += 0.5;
                                            }
                                            if (temp_unmark == NoHrs - fnhrs)
                                            {
                                                per_holidate_evng += 1;
                                                per_holidate += 0.5;
                                            }
                                            else
                                            {

                                            }
                                            if ((NoHrs - fnhrs) - temp_unmark >= minpresII)
                                            {
                                                workingdays += 0.5;
                                            }
                                            evng_conducted_half_days += 1;
                                        }
                                        per_perhrs = 0;
                                        per_ondu = 0;
                                        per_leave = 0;
                                        per_abshrs = 0;
                                        njhr = 0;
                                        dumm_from_date = dumm_from_date.AddDays(1);
                                        if (dumm_from_date.Day == 1)
                                        {
                                            cal_from_date++;
                                            if (moncount > next)
                                            {
                                                next++;
                                            }
                                        }
                                        per_perhrs = 0;
                                    }
                                }
                                else
                                {
                                    dumm_from_date = dumm_from_date.AddDays(1);
                                    if (dumm_from_date.Day == 1)
                                    {
                                        cal_from_date++;
                                        if (moncount > next)
                                        {
                                            next++;
                                        }
                                    }
                                }
                            }
                            else
                            {
                                dumm_from_date = dumm_from_date.AddDays(1);
                                if (dumm_from_date.Day == 1)
                                {
                                    cal_from_date++;
                                    if (moncount > next)
                                    {
                                        next++;
                                    }
                                }
                            }
                        }
                    }
                    if (isadm == false)
                    {
                        dumm_from_date = dumm_from_date.AddDays(1);
                        if (dumm_from_date.Day == 1)
                        {
                            cal_from_date++;
                            if (moncount > next)
                            {
                                next++;
                            }
                        }
                    }
                }
                int diff_Date = per_from_date.Day - dumm_from_date.Day;
            }
            per_njdate = njdate;
            pre_present_date = Present - njdate;
            per_per_hrs = tot_per_hrs;
            per_absent_date = Absent;
            pre_ondu_date = Onduty;
            pre_leave_date = Leave;
            per_workingdays = workingdays - per_njdate;
            per_workingdays1 = (((mng_conducted_half_days * fnhrs) + (evng_conducted_half_days * (NoHrs - fnhrs))) - my_un_mark) - notconsider_value;
            double atenperc_at = 0;
            if (per_workingdays > 0)
            {
                atenperc_at = pre_present_date / per_workingdays;
            }
            atenperc_at = atenperc_at * 100;
            atenperc_at = Math.Round(atenperc_at, 2);
            letterfrm4data.Rows.Add(per_workingdays, pre_present_date, per_absent_date, atenperc_at);
            //lbltot_att2 = pre_present_date.ToString();
            //lbltot_work2 = per_workingdays.ToString();
            //working = per_workingdays.ToString();
            //present = pre_present_date.ToString();
        }
        catch
        {
        }
    }

    protected void btngoto_Click(object sender, EventArgs e)
    {
        clear();
        try
        {
            if (txt_Test.Text != "---Select---")
            {
                buttonG0();
                lblerr.Visible = false;
                pnlMultiFormat.Visible = false;
                Pnltamilformat.Visible = false;
                txt_ConvertTo.Text = "";
                lblMultierr.Text = "";
                //pnlMultiFormat.Visible = true;
            }
            else
            {
                lblerr.Visible = true;
            }
        }
        catch (Exception ex)
        {

        }
    }

    public string getAllSelectedItems(CheckBoxList c, string type)
    {
        StringBuilder name = new StringBuilder();
        //List<ListItem> selected = new List<ListItem>();
        if (type.Trim().ToLower() == "items")
        {
            foreach (System.Web.UI.WebControls.ListItem item in c.Items)
            {
                if (item.Selected == true)
                {
                    //name += item.Text.ToString() + ",";
                    name.Append(item.Text.ToString() + ",");
                }
            }
        }
        else
        {
            //name.Append("\"");
            foreach (System.Web.UI.WebControls.ListItem item in c.Items)
            {
                if (item.Selected == true)
                {
                    //name += item.Text.ToString() + ",";
                    name.Append(item.Value.ToString() + ",");
                }
            }
        }
        name = name.Remove(name.Length - 1, 1);
        return name.ToString();
    }

    //protected void rblmultifrmt_SelectedIndexChanged(object sender, EventArgs e)
    //{
    //    if (rblmultifrmt.SelectedIndex == 0)
    //    {
    //        bindpdfEnglish();
    //    }
    //    if (rblmultifrmt.SelectedIndex == 1)
    //    {
    //        bindMultipleFormat(rblmultifrmt.SelectedItem.Text);
    //        ModalPopupExtender1.Show();
    //    }        
    //}

    public void bindMultipleFormat()
    {
        try
        {
            contentDiv.InnerHtml = ""; StringBuilder html = new StringBuilder();
            string odd_r_even = "";
            ddlpoppage.Visible = false;
            lblpoppage.Visible = false;
            DataTable dtgetmark = new DataTable();
            string registernumber = "";
            
            int[] width = new int[] { 30, 100, 150, 100, 100, 100 }; //Added by Malang Raja on 24/12/2015.
            
            string year = "";
            sem = ddlSemYr.SelectedValue.ToString();
            //if (ddlSec.Items.Count > 0)
            //{
            //    if (ddlSec.Enabled == true && ddlSec.Text != "-1")
            //    {
            //        if (ddlSec.Items.Count > 0)
            //        {
            //            sec = ddlSec.SelectedItem.Text.ToString();
            //        }
            //        else
            //        {
            //            sec = "";
            //        }
            //    }
            //    else
            //    {
            //        sec = "";
            //    }
            //}
            sec = "";
            if (ddlSec.Items.Count > 0)
            {
                if ((ddlSec.Enabled == true && ddlSec.Text != "-1"))
                {
                    sec = ddlSec.SelectedValue;
                }
            }
            odd_r_even = Convert.ToString(int.Parse(sem) % 2);
            if (odd_r_even == "0")
                odd_r_even = "EVEN";
            else
                odd_r_even = "ODD";
            if (sem == "1")
            {
                gsem3 = "I";
                year = "I";
            }
            else if (sem == "2")
            {
                gsem3 = "II";
                year = "I";
            }
            else if (sem == "3")
            {
                gsem3 = "III";
                year = "II";
            }
            else if (sem == "4")
            {
                gsem3 = "IV";
                year = "II";
            }
            else if (sem == "5")
            {
                gsem3 = "V";
                year = "III";
            }
            else if (sem == "6")
            {
                gsem3 = "VI";
                year = "III";
            }
            else if (sem == "7")
            {
                gsem3 = "VII";
                year = "IV";
            }
            else if (sem == "8")
            {
                gsem3 = "VIII";
                year = "IV";
            }
            else if (sem == "9")
            {
                gsem3 = "IX";
                year = "V";
            }
            else if (sem == "10")
            {
                gsem3 = "X";
                year = "V";
            }
            string examstartdate = "";
            string examenddate = "";
            con.Close();
            con.Open();
            
            
            int pagerowcount = 0;
            int bindpagerowcount = 0;
            string deptacr = GetFunction("select Acronym from Degree where Degree_Code='" + ddlBranch.SelectedValue.ToString() + "'");
            if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
            {
                string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo,district from collinfo where college_code=" + Session["collegecode"] + "";
                SqlCommand collegecmd = new SqlCommand(college, con);
                SqlDataReader collegename;
                con.Close();
                con.Open();
                collegename = collegecmd.ExecuteReader();
                if (collegename.HasRows)
                {
                    while (collegename.Read())
                    {
                        collnamenew1 = collegename["collname"].ToString();
                        address1 = collegename["address1"].ToString();
                        address2 = collegename["address2"].ToString();
                        address3 = collegename["address3"].ToString();
                        pincode = collegename["pincode"].ToString();
                        district = collegename["district"].ToString();
                    }
                }
                con.Close();
            }
            //attendance
            yr_val = ddlSemYr.SelectedItem.ToString();
            getyear();
            //attendance
            int cycleflag = 0;
            bool studflag = false;
            for (res = 1; res < Convert.ToInt32(grdover.Rows.Count); res++)
            {
                isval = 0;
                var checkbox = grdover.Rows[res].Cells[0].FindControl("lbl_cb") as CheckBox;
                if (checkbox.Checked)
                    isval = 1;
                int status = 0;
                sno = 0;
                if (isval == 1)
                {
                    studflag = true;
                    string criteria_no = getAllSelectedItems(chklstest, "Values"); ;
                    test = getAllSelectedItems(chklstest, "items");
                    DataTable dtdate = new DataTable();
                    string examdatequewry = "select distinct exam_date from exam_type inner join criteriaforinternal on criteriaforinternal.criteria_no=exam_type.criteria_no where criteriaforinternal.criteria_no in(" + criteria_no + ") order by exam_date ";
                    SqlDataAdapter sqld = new SqlDataAdapter(examdatequewry, con);
                    sqld.Fill(dtdate);
                    //string[] criteria = criteria_no.Split(',');
                    //if (dtdate.Rows.Count > 0)
                    //{
                    //    for (int i = 0; i < dtdate.Rows.Count; i++)
                    //    {
                    //        if (i == 0)
                    //        {
                    //            DateTime dtstart = Convert.ToDateTime(dtdate.Rows[i]["exam_date"]);
                    //            examstartdate = dtstart.ToString("dd/MM/yyyy");
                    //        }
                    //        else if (i == dtdate.Rows.Count - 1)
                    //        {
                    //            DateTime dtstart = Convert.ToDateTime(dtdate.Rows[i]["exam_date"]);
                    //            examenddate = dtstart.ToString("dd/MM/yyyy");
                    //        }
                    //    }
                    //}
                    hat.Clear();
                    hat.Add("colege_code", Session["collegecode"].ToString());
                    ds15 = dacces.select_method("ATT_MASTER_SETTING", hat, "sp");
                    count = ds15.Tables[0].Rows.Count;
                    attcount = ds15.Tables[0].Rows.Count;
                    attmaster.Clear();
                    if (count > 0)
                    {
                        for (int lcnt = 0; lcnt < ds15.Tables[0].Rows.Count; lcnt++)
                        {
                            attmaster.Add(ds15.Tables[0].Rows[lcnt]["LeaveCode"].ToString(), ds15.Tables[0].Rows[lcnt]["CalcFlag"].ToString());
                        }
                    }
                    
                    
                    rol_no = grdover.Rows[res].Cells[2].Text;
                    stud_roll = rol_no.ToString();
                    persentmonthcal();
                    double per_tage_day = 0;
                    double gconhrs = 0;
                    double gprehours = 0;
                    string dum_tage_date = "";
                    per_con_hrs = per_workingdays1;
                    per_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / (per_con_hrs + tot_conduct_hr_spl_fals)) * 100);  //Hourwise
                    per_tage_hrs = Math.Round(per_tage_hrs, 2);
                    gconhrs = per_con_hrs + tot_conduct_hr_spl_fals;
                    gprehours = per_per_hrs + tot_per_hrs_spl_fals;
                    per_tage_day = per_tage_hrs;
                    if (per_tage_day > 100)
                    {
                        per_tage_day = 100;
                    }
                    dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
                    if (dum_tage_date == "NaN")
                    {
                        dum_tage_date = "0";
                    }
                    else if (dum_tage_date == "Infinity")
                    {
                        dum_tage_date = "0";
                    }
                    // attendance end
                    Label4.Visible = false;
                    name = grdover.Rows[res].Cells[4].Text;
                    registernumber = GetFunction("select Reg_No from Registration where Roll_No='" + rol_no + "'");
                    
                    string date = DateTime.Now.ToString("dd/MM/yyyy");
                    
                    //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 2, 0].Text = "Examinations conducted from " + examstartdate + " to " + examenddate + ". ";
                    //FpSpread1.Sheets[0].SpanModel.Add(FpSpread1.Sheets[0].RowCount - 2, 0, 1, 4);

                    
                    int startcol = 3;
                    int colcount = startcol;
                    
                    
                    Hashtable te = new Hashtable();
                    int selectrowcount = 0, selectTestcount = 0;


                    html.Append("<div style='height: 1000px; width: 700px; border: 0px solid black; margin-left: 5px;margin:0px;page-break-after: always;'>");

                    html.Append("<table cellspacing='0' cellpadding='0' style='width: 700px; ' border='0'>");

                    html.Append("<tr><td style='width: 50px;'></td><td style='text-align: right;height: 100px; width: 120px;' >  </td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: center;'><span style='font-size: 16px;font-weight:bold;'>" + collnamenew1 + "</span> <br><span style='font-size: 16px;font-weight:bold;'>" + address1 + "," + district + "," + pincode + "<br> PROGRESS REPORT </span></td><td style='text-align: right;height: 100px; width: 120px;' > </td></tr><tr><td style='width: 50px;'></td><td></td><td ></td><td style='text-align: right;' ><span style='font-size: 14px;font-weight:bold;'>DATE :" + date + " </span></td></tr> ");


                    html.Append(" </table>");

                    html.Append("<br><table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 80px;' border='0'>");

                    html.Append("<tr><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> NAME  </td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'> : " + name + "</td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> BRANCH  </td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'> : " + deptacr + " </td></tr> <tr><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> REG NO   </td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'>  : " + registernumber + "</td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> YEAR/SEM-SEC   </td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'>  : " + year + "/" + gsem3 + "-" + sec + "</td></tr> <tr><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> MODE OF EXAM   </td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'>  : " + test + "</td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> SEM   </td><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'>  : " + odd_r_even + "</td></tr> ");

                    html.Append(" </table>");


                    html.Append("<table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 80px;' border='0'>");

                    html.Append("<tr><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'><span style='font-weight:bold;'><br> Dear Sir/Madam, </span> <span ><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp Below mentioned marks are secured by your ward in '" + test + "'  </span><span style='font-weight:bold;font-family: AMUDHAM;'><br> jq;fs; kfd;/kfs; </span> <span style='font-family: AMUDHAM;'><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp ele;J Kbe;j Njh;tpy; ngw;w kjpg;ngz; fspd; tptuk; jq;fspd; ftdj;jpw;F nfhz;L tUfpNwhk;.  </span></td></tr> ");

                    html.Append(" </table>");


                    html.Append(" </table>");

                    html.Append("<br><table style='width: 95%; margin-left: 80px; margin-top: 0px; margin-bottom: 2px; font-size: 12px;'cellpadding='5' cellspacing='0'>");
                    html.Append("<tr>");
           
                   

                    html.Append("<td  style='border: thin solid #000000;' align='center'; font-weight:'bold';> Sl.No </td>");


                    html.Append("<td  style='border: thin solid #000000;' align='center'; font-weight:'bold';>Subject Name</td>");
                    for (int j = 0; j < chklstest.Items.Count; j++)
                    {
                        if (chklstest.Items[j].Selected == true)
                        {
                            selectTestcount++;
                            criteria_no = chklstest.Items[j].Value.ToString();
                            test = chklstest.Items[j].Text.ToString();
                            
                            html.Append("<td  style='border: thin solid #000000;' align='center'; font-weight:'bold';>"+ test +"</td>");
                            
                            colcount++;
                        }
                        
                    }

                    html.Append(" </tr>");
                    
                    //FpSpread1.Sheets[0].Rows[rowcount + 1].Border.BorderColorBottom = Color.Black;








                    string minMarks = "";
                    Boolean resultflagg = false;
                    int colincrement = 0;
                    double maxc = 0;
                    string subjname = "";
                    string subjcode = "";
                    string result1 = "";
                    string checkmarks = "";
                    string getmark = "";
                    DataTable dtMarks = new DataTable();
                    dtMarks.Columns.Clear();
                    dtMarks.Rows.Clear();
                    DataRow drow;
                    DataColumn dcol = new DataColumn();
                    dcol = new DataColumn();
                    dcol.ColumnName = "Sl.No";
                    dtMarks.Columns.Add(dcol);
                    dcol = new DataColumn();
                    dcol.ColumnName = "Subject Names";
                    dtMarks.Columns.Add(dcol);
                    string colName;
                    DataSet dss = new DataSet();
                    string[] minMark = new string[chklstest.Items.Count];
                    status = 0;

                    for (int j = 0; j < chklstest.Items.Count; j++)
                    {
                        if (chklstest.Items[j].Selected == true)
                        {
                            criteria_no = chklstest.Items[j].Value.ToString();
                            test = chklstest.Items[j].Text.ToString();
                            colName = test;

                            double totalmark = 0;
                            double totalobtainedmark = 0;
                            double minmark1 = 0;
                            dcol = new DataColumn();
                            dcol.ColumnName = test;
                            dtMarks.Columns.Add(dcol);
                            string selectmark = "select distinct e.subject_no,sub.subject_name,sub.subject_code,max_mark,min_mark,marks_obtained from subjectchooser s,registration rg,exam_type e,result r, subject sub where sub.subject_no=s.subject_no and  s.subject_no=e.subject_no and s.roll_no=rg.roll_no  and e.exam_code=r.exam_code and rg.roll_no=r.roll_no and e.criteria_no='" + criteria_no + "' and r.roll_no='" + rol_no + "'";
                            hat.Clear();
                            hat.Add("rollnum", rol_no.ToString());
                            hat.Add("criteriano", criteria_no.ToString());

                            dss = dacces.select_method(selectmark, hat, "cmd");

                            if (dss.Tables[0].Rows.Count > 0)
                            {
                                for (int dscount = 0; dscount < dss.Tables[0].Rows.Count; dscount++)
                                {
                                    result1 = "Pass";

                                    string marksobtained = "";
                                    marksobtained = Convert.ToString(dss.Tables[0].Rows[dscount]["marks_obtained"]);
                                    if (marksobtained != "")
                                    {
                                        if (Convert.ToDouble(marksobtained) < 0)
                                        {
                                            marksobtained = findresult(marksobtained);
                                        }
                                    }
                                    int max;
                                    bool maxflag = int.TryParse(txt_ConvertTo.Text, out max);
                                    double multiply;
                                    if (maxflag)
                                    {
                                        if (txt_ConvertTo.Text != "" || txt_ConvertTo.Text != null)
                                        {
                                            ConvertedMark(txt_ConvertTo, Convert.ToString(dss.Tables[0].Rows[dscount]["max_mark"]), ref marksobtained, ref minMarks);
                                        }
                                    }
                                    if (Convert.ToString(dss.Tables[0].Rows[dscount]["min_mark"]) != "")
                                    {
                                        double obtainedmark = 0;
                                        minMark[colincrement] = Convert.ToString(dss.Tables[0].Rows[dscount]["min_mark"]);
                                        minmark1 = Convert.ToDouble(dss.Tables[0].Rows[dscount]["min_mark"]);
                                        if (Convert.ToString(dss.Tables[0].Rows[dscount]["marks_obtained"]) != "")
                                        {
                                            obtainedmark = Convert.ToDouble(dss.Tables[0].Rows[dscount]["marks_obtained"]);
                                            if (obtainedmark > 0)
                                            {
                                                totalobtainedmark = totalobtainedmark + Convert.ToDouble(marksobtained);
                                            }
                                        }
                                        if (obtainedmark < minmark1)
                                        {
                                            resultflagg = true;
                                        }
                                    }
                                    double maxmark = 0;
                                    if (Convert.ToString(dss.Tables[0].Rows[dscount]["max_mark"]) != "")
                                    {
                                        maxmark = Convert.ToDouble(dss.Tables[0].Rows[dscount]["max_mark"]);
                                        totalmark = totalmark + maxmark;
                                    }
                                    if (resultflagg)
                                    {
                                        result1 = "Fail";
                                    }
                                    if (status == 0)
                                    {
                                        sno++;
                                        subjname = dss.Tables[0].Rows[dscount]["subject_name"].ToString();
                                        drow = dtMarks.NewRow();
                                        drow[0] = sno.ToString();
                                        drow[1] = subjname;
                                        drow[2] = marksobtained;
                                        dtMarks.Rows.Add(drow);
                                    }
                                    else
                                    {
                                        for (int rr = 0; rr < sno; rr++)
                                        {
                                            if (dtMarks.Rows[rr][1].ToString() == dss.Tables[0].Rows[dscount]["subject_name"].ToString())
                                            {
                                                dtMarks.Rows[rr][dtMarks.Columns.Count - 1] = marksobtained;
                                            }
                                        }
                                    }
                                }
                                //if (status == 0)
                                //{
                                //    drow = dtMarks.NewRow();
                                //    drow[1] = "Total";
                                //    drow[2] = totalobtainedmark.ToString();
                                //    dtMarks.Rows.Add(drow);
                                //}
                                //else
                                //{
                                //    dtMarks.Rows[dtMarks.Rows.Count - 1][dtMarks.Columns.Count - 1] = totalobtainedmark.ToString();
                                //}
                            }
                            colincrement++;
                            for (int r = 0; r < dtMarks.Rows.Count; r++)
                            {
                                for (int c = 3; c < dtMarks.Columns.Count; c++)
                                {
                                    if (dtMarks.Rows[r][c].ToString() == "" || dtMarks.Rows[r][c].ToString() == null)
                                    {
                                        dtMarks.Rows[r][c] = "--";
                                    }
                                }
                            }
                            status = 1;
                        }
                    }
                    for (int r = 1; r < dtMarks.Rows.Count + 1; r++)
                    {
                        int ms = 0;
                        html.Append("<tr>");
                        for (int c = 0; c < dtMarks.Columns.Count; c++)
                        {
                            html.Append("<td class='style1' style='border: thin solid #000000;");
                            int dtObtmrk, min;
                            bool dom = int.TryParse(dtMarks.Rows[r - 1][c].ToString(), out dtObtmrk);
                            //if(txt_ConvertTo.Text==null || txt_ConvertTo.Text=="")

                            bool m = int.TryParse(minMarks, out min);
                            if (c == 1)
                            {
                                //table.Cell(r, c).SetContentAlignment(ContentAlignment.MiddleLeft);
                                html.Append("text-align: left;'>");
                            }
                            else
                            {
                                //table.Cell(r, c).SetContentAlignment(ContentAlignment.MiddleCenter);
                                html.Append("text-align: center;'>");
                            }
                            html.Append("<span ");
                            //table.Cell(r, c).SetContent(dtMarks.Rows[r - 1][c].ToString());
                            if (c > 1 && dtMarks.Rows[r - 1][c] != "--")
                            {
                                if (dtMarks.Rows[r - 1][c] == "RAA" || dtMarks.Rows[r - 1][c] == "AAA" || dtMarks.Rows[r - 1][c] == "EOD" || dtMarks.Rows[r - 1][c] == "EL" || dtMarks.Rows[r - 1][c] == "ML" || dtMarks.Rows[r - 1][c] == "SOD" || dtMarks.Rows[r - 1][c] == "NJ" || dtMarks.Rows[r - 1][c] == "HS" || dtMarks.Rows[r - 1][c] == "OD" || dtMarks.Rows[r - 1][c] == "NSS" || dtMarks.Rows[r - 1][c] == "S" || dtMarks.Rows[r - 1][c] == "PP" || dtMarks.Rows[r - 1][c] == "OOD" || dtMarks.Rows[r - 1][c] == "L" || dtMarks.Rows[r - 1][c] == "NCC" || dtMarks.Rows[r - 1][c] == "SYOD" || dtMarks.Rows[r - 1][c] == "COD" || dtMarks.Rows[r - 1][c] == "LA")
                                {
                                    html.Append("style='color:red'");
                                    //table.Cell(r, c).SetForegroundColor(Color.Red);
                                }
                                if (dom || m)
                                {
                                    if (dtObtmrk < min)
                                    {
                                        //table.Cell(r, c).SetForegroundColor(Color.Red);
                                        html.Append("style='color:red'");
                                    }
                                    if (txt_ConvertTo.Text == null || txt_ConvertTo.Text == "")
                                    {
                                        if (dtObtmrk < int.Parse(minMark[ms]))
                                        {
                                            //table.Cell(r, c).SetForegroundColor(Color.Red);
                                            html.Append("style='color:red'");
                                        }
                                        ms++;
                                    }
                                }
                            }
                            html.Append(">");
                            html.Append("" + dtMarks.Rows[r - 1][c].ToString() + "");
                            html.Append("</span></td>");
                            //table.Cell(r, c).SetFont(Fontsmall);
                        }
                        html.Append(" </tr>");
                    }

                    html.Append(" </table>");
                    cycleflag = 1;
                
                    
                    colcount = 0;
                    

                    
                    

                    //FpSpread1.Sheets[0].RowCount = FpSpread1.Sheets[0].RowCount + 1;
                    
                    
                    
                    //rowcount = FpSpread1.Sheets[0].RowCount-1;
                    


                    html.Append(" </table>");

                    html.Append("<br><table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 80px;' border='0'>");

                    html.Append("<tr><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> Pass Mark /  </td><td style='font-size: 14px; font-family: AMUDHAM;  border: 0px solid black; text-align: left;'> : Njh;r;rp kjpg;ngz;:</td></tr><tr><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> Attendance % is /  </td><td style='font-size: 14px; font-family: AMUDHAM;  border: 0px solid black; text-align: left;'> : tUif tpOf;fhL: </td></tr> <tr><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> Academic Performance   </td><td style='font-size: 14px; font-family: AMUDHAM;  border: 0px solid black; text-align: left;'>  : fy;tp nray;ghL </td></tr> ");

                    html.Append(" </table>");

                    html.Append(" </table>");


                    html.Append("<table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 80px;' border='0'>");

                    html.Append("<tr><td style='font-size: 14px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'><span style='font-weight:bold;'><br> If the attendance is below 80% your ward will not be eligible to appear for the university examination </span> <span style='font-weight:bold;font-family: AMUDHAM;'><br><br>tUif tpOf;fhL 80 f;Fk; Fiwthf ,Ue;jhy;> mk;khztd; gUtj; NjHtpid vOj mDkjpf;fg;glkhl;lhd;.  </span><span style='font-weight:bold;font-family: Book Antiqua;'><br><br> Parents are requested to sign and return this report to the class advisor with their feed back with out fail. </span> <span style='font-family: AMUDHAM;'><br><br>ngw;Nwhh;fs; ,e;j NjHT NjHr;rp tpguj;jpy; ifnahg;gkpl;L tFg;ghrphpahplk; xg;gilf;FkhW Nfl;Lf;nfhs;fpNwhk;.  </span><span style='font-weight:bold;font-family: Book Antiqua;'><br><br> You are requested to meet the CLASS ADVISOR/HOD/PRINCIPAL without fail on or before: </span> <span style='font-family: AMUDHAM;'><br><br>,J njhlh;ghf jhq;fs; tFg;ghrphpah;/Jiwj;jiyth;/Kjy;th; ----------------------md;W Nehpy; te;J re;jpf;FkhW Nfl;Lf;nfhs;fpNwhk;.  </span><span style='font-weight:bold;font-family: Book Antiqua;'> ");



                   

                   





                    
                    //**
                    
                    if (txtnotes.Text != "")
                    {
                        
                         html.Append("<br>Notes:" + txtnotes.Text.ToString() + "");
                    }
                    
                    //CLASS ADVISOR SIGN
                    //string find_staff_code1 = "";
                    //SqlDataAdapter da_find_staffcode1;
                    //DataSet ds_find_staffcode1;
                    //find_staff_code1 = "select top 1 class_advisor from semester_schedule where class_advisor<>'' and degree_code=" + ddlBranch.SelectedValue.ToString() + " and batch_year=" + ddlBatch.SelectedValue.ToString() + " and semester=" + ddlSemYr.SelectedValue.ToString() + "";
                    //da_find_staffcode1 = new SqlDataAdapter(find_staff_code1, con);
                    //con.Close();
                    //con.Open();
                    //ds_find_staffcode1 = new DataSet();
                    //da_find_staffcode1.Fill(ds_find_staffcode1);
                    //if (ds_find_staffcode1.Tables[0].Rows.Count > 0)
                    //{
                    //    string[] spl_classadv_code1 = (ds_find_staffcode1.Tables[0].Rows[0]["class_advisor"].ToString()).Split(',');
                    //    Session["class_adv_staffcode"] = spl_classadv_code1[0].ToString();
                    //    MyImg coeimg2 = new MyImg();
                    //    coeimg2.ImageUrl = "Handler/Class_Advisor.ashx?id=" + Session["class_adv_staffcode"];

                    //    //=============class advisor sign

                    //    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].CellType = coeimg2;
                    //    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, 0].HorizontalAlign = HorizontalAlign.Center;
                    //}
                    //else
                    //{
                    //    Session["class_adv_staffcode"] = "";
                    //}
                    //
                    // HOD SIGN
                    //string find_staff_codex = "";
                    //SqlDataAdapter da_find_staffcodex;
                    //DataSet ds_find_staffcodex;
                    //con.Close();
                    //con.Open();
                    //find_staff_codex = "select top 1 staff_code from staffmaster where  staff_code=(select top 1 head_of_dept from department where dept_code in (select distinct dept_code from degree where degree_code='" + ddlBranch.SelectedValue.ToString() + "' and college_code='" + Session["collegecode"] + "'))";
                    //da_find_staffcodex = new SqlDataAdapter(find_staff_codex, con);
                    //ds_find_staffcodex = new DataSet();
                    //da_find_staffcodex.Fill(ds_find_staffcodex);
                    //if (ds_find_staffcodex.Tables[0].Rows.Count > 0)
                    //{
                    //    Session["class_hod_staffcode"] = ds_find_staffcodex.Tables[0].Rows[0]["staff_code"].ToString();
                    //    MyImg coeimg3 = new MyImg();
                    //    coeimg3.ImageUrl = "Handler/Hod.ashx?id=" + Session["class_hod_staffcode"];
                    //    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, (FpSpread1.Sheets[0].ColumnCount / 3)].CellType = coeimg3;
                    //    FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, (FpSpread1.Sheets[0].ColumnCount / 3)].HorizontalAlign = HorizontalAlign.Center;
                    //}
                    //else
                    //{
                    //    Session["class_hod_staffcode"] = "";
                    //}
                    //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, ((FpSpread1.Sheets[0].ColumnCount / 3) * 2)].CellType = coeimg1;
                    //FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 3, ((FpSpread1.Sheets[0].ColumnCount / 3) * 2)].HorizontalAlign = HorizontalAlign.Left;
                    //
                    html.Append("<br><br><br><br><br>CLASS ADVISOR&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp HOD&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp PRINCIPAL<br><br><br>FEED BACK FROM PARENTS /&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp </span><span style='font-family: AMUDHAM;'><br>ngw;Nwhhpd; fUj;J :.  </span><span style='font-weight:bold;font-family: Book Antiqua;'><br>-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------<br><br>-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------<br><br>DATE : &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp   PARENT'S SIGNATURE");

                    html.Append("</span></td></tr> ");

                    html.Append(" </table>");
                    html.Append("</div>");
                }
                
                

                

               



                contentDiv.InnerHtml = html.ToString();
                contentDiv.Visible = true;

                ScriptManager.RegisterStartupScript(this, GetType(), "btn_print", "PrintDiv();", true);
            }
            if (studflag == false)
            {
                lblMultierr.Text = "Please Select Atleast one Student";
                lblMultierr.Visible = true;
            }
            else
            {
                lblMultierr.Text = "";
                lblMultierr.Visible = false;
            }
        }
        catch (Exception ex)
        {

        }
    }

    public void bindpdfEnglish()
    {
        try
        {
            contentDiv.InnerHtml = ""; StringBuilder html = new StringBuilder();

            string odd_r_even = "";
            Font Fontbold = new Font("Book Antiqua", 15, FontStyle.Bold);
            Font Fontsmall = new Font("Book Antiqua", 10, FontStyle.Regular);
            Font Fontbold1 = new Font("Book Antiqua", 12, FontStyle.Bold);
            Font Fontbodybold = new Font("Book Antiqua", 10, FontStyle.Bold);
            Gios.Pdf.PdfDocument mydoc = new Gios.Pdf.PdfDocument(PdfDocumentFormat.A4);
            Gios.Pdf.PdfPage mypdfpage;
            string Registration_no = "";
           
            string year = "";
            sem = ddlSemYr.SelectedValue.ToString();
            odd_r_even = Convert.ToString(int.Parse(sem) % 2);
            if (odd_r_even == "0")
                odd_r_even = "EVEN";
            else
                odd_r_even = "ODD";
            if (sem == "1")
            {
                gsem3 = "I";
                year = "I";
            }
            else if (sem == "2")
            {
                gsem3 = "II";
                year = "I";
            }
            else if (sem == "3")
            {
                gsem3 = "III";
                year = "II";
            }
            else if (sem == "4")
            {
                gsem3 = "IV";
                year = "II";
            }
            else if (sem == "5")
            {
                gsem3 = "V";
                year = "III";
            }
            else if (sem == "6")
            {
                gsem3 = "VI";
                year = "III";
            }
            else if (sem == "7")
            {
                gsem3 = "VII";
                year = "IV";
            }
            else if (sem == "8")
            {
                gsem3 = "VIII";
                year = "IV";
            }
            else if (sem == "9")
            {
                gsem3 = "IX";
                year = "V";
            }
            else if (sem == "10")
            {
                gsem3 = "X";
                year = "V";
            }
            con.Close();
            con.Open();
            if (ddlBranch.Text != "")
            {
                branch = ddlBranch.SelectedItem.Text;
            }
            if (ddlDegree.Text != "")
            {
                degree = ddlDegree.SelectedItem.Text;
            }
            sec = "";
            if (ddlSec.Items.Count > 0)
            {
                if ((ddlSec.Enabled == true && ddlSec.Text != "-1"))
                {
                    sec = ddlSec.SelectedValue;
                }
            }
            string deptacr = GetFunction("select Acronym from Degree where Degree_Code='" + ddlBranch.SelectedValue.ToString() + "'");
            if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
            {
                string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo,district from collinfo where college_code=" + Session["collegecode"] + "";
                SqlCommand collegecmd = new SqlCommand(college, con);
                SqlDataReader collegename;
                con.Close();
                con.Open();
                collegename = collegecmd.ExecuteReader();
                if (collegename.HasRows)
                {
                    while (collegename.Read())
                    {
                        collnamenew1 = collegename["collname"].ToString();
                        address1 = collegename["address1"].ToString();
                        address2 = collegename["address2"].ToString();
                        address3 = collegename["address3"].ToString();
                        pincode = collegename["pincode"].ToString();
                        district = collegename["district"].ToString();
                        address = address1 + address2 + address3;
                    }
                }
                string collegev = "select percent_eligible_for_exam from PeriodAttndSchedule where  degree_code=" + ddlBranch.SelectedValue.ToString() + " and semester=" + ddlSemYr.SelectedValue.ToString() + "";
                attendanceper = dacces.GetFunction(collegev);
                con.Close();
            }
            Boolean stuflag = false;
            for (int res = 1; res < Convert.ToInt32(grdover.Rows.Count); res++)
            {
                int colincrement = 0;
                int rowincrement = 0;
                isval = 0;
                string criteria_no = getAllSelectedItems(chklstest, "values");
                test = getAllSelectedItems(chklstest, "items");
                s = grdover.Rows[res].Cells[1].Text;
                var checkbox = grdover.Rows[res].Cells[0].FindControl("lbl_cb") as CheckBox;
                if (checkbox.Checked)
                    isval = 1;
                int status = 0;
                if (isval == 1)
                {
                    stuflag = true;
                    mypdfpage = mydoc.NewPage();
                    int coltop = 5;

                    //attendance
                    yr_val = ddlSemYr.SelectedItem.ToString();
                    getyear();
                    //attendance
                    hat.Clear();
                    hat.Add("colege_code", Session["collegecode"].ToString());
                    ds15 = dacces.select_method("ATT_MASTER_SETTING", hat, "sp");
                    // countds = ds15.Tables[0].Rows.Count;
                    count = ds15.Tables[0].Rows.Count;
                    attcount = ds15.Tables[0].Rows.Count;
                    attmaster.Clear();
                    if (count > 0)
                    {
                        for (int lcnt = 0; lcnt < ds15.Tables[0].Rows.Count; lcnt++)
                        {
                            attmaster.Add(ds15.Tables[0].Rows[lcnt]["LeaveCode"].ToString(), ds15.Tables[0].Rows[lcnt]["CalcFlag"].ToString());
                        }
                    }
                    
                    rol_no = grdover.Rows[res].Cells[2].Text;
                    stud_roll = rol_no.ToString();
                    persentmonthcal();
                    double per_tage_day = 0;
                    double gconhrs = 0;
                    double gprehours = 0;
                    string dum_tage_date = "";
                   // double attnd_hours;
                    //added by Mullai
                    string f_date = frdate;
                    string t_date = todate;
                 //
                    //per_tage_day = ((pre_present_date / per_workingdays) * 100);  //Daywise
                   // pre_present_date = attnd_hours;
                    per_con_hrs = per_workingdays1;
                    per_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / (per_con_hrs + tot_conduct_hr_spl_fals)) * 100);  //Hourwise
                    per_tage_hrs = Math.Round(per_tage_hrs, 2);
                    gconhrs = per_con_hrs + tot_conduct_hr_spl_fals;
                    gprehours = per_per_hrs + tot_per_hrs_spl_fals;

                    per_tage_day = per_tage_hrs;

                    if (per_tage_day > 100)
                    {
                        per_tage_day = 100;
                    }
                    dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
                    if (dum_tage_date == "NaN")
                    {
                        dum_tage_date = "0";
                    }
                    else if (dum_tage_date == "Infinity")
                    {
                        dum_tage_date = "0";
                    }
                    // attendance end
                    PdfTextArea ptc = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleCenter, collnamenew1);
                    mypdfpage.Add(ptc);
                    coltop = coltop + 20;
                    PdfTextArea pts = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleCenter, address);
                    mypdfpage.Add(pts);
                    coltop = coltop + 20;
                    PdfTextArea ptdp = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleCenter, district + " - " + pincode);
                    mypdfpage.Add(ptdp);

                    coltop = coltop + 20;
                    PdfTextArea ptre = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleCenter, "PROGRESS REPORT");
                    mypdfpage.Add(ptre);


                    if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo(" + Convert.ToString(Session["collegecode"]) + ").jpeg")))
                    {
                        PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo(" + Convert.ToString(Session["collegecode"]) + ").jpeg"));
                        mypdfpage.Add(LogoImage, 5, 5, 100);
                    }
                    if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Right_Logo(" + Convert.ToString(Session["collegecode"]) + ").jpeg")))
                    {
                        PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Right_Logo(" + Convert.ToString(Session["collegecode"]) + ").jpeg"));
                        mypdfpage.Add(LogoImage, 510, 5, 100);
                    }



                    coltop = coltop + 30;
                    string date = DateTime.Now.ToString("dd/MM/yyyy");
                    PdfTextArea ptdt = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 300, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "DATE ");
                    mypdfpage.Add(ptdt);

                    ptdt = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 450, coltop, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, ":" + date);
                    mypdfpage.Add(ptdt);

                    html.Append("<div style='height: 1000px; width: 700px; border: 0px solid black; margin-left: 5px;margin:0px;page-break-after: always;'>");

                    html.Append("<table cellspacing='0' cellpadding='0' style='width: 700px; ' border='0'>");

                    html.Append("<tr><td style='width: 50px;'></td><td style='text-align: right;' > <img src=~/college/Left_Logo(" + Convert.ToString(Session["collegecode"]) + ").jpeg alt='' style='height: 100px; width: 120px;' /></td><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: center;'><span style='font-size: 14px;font-weight:bold;'>" + collnamenew1 + "</span> <br><span style='font-size: 14px;font-weight:bold;'>" + address + "<br>" + district + " - " + pincode + "  <br> PROGRESS REPORT  </span></td><td style='text-align: right;' > <img src=~/college/Right_Logo(" + Convert.ToString(Session["collegecode"]) + ").jpeg alt='' style='height: 100px; width: 120px;' /></td></tr><tr><td style='width: 50px;'></td><td></td><td ></td><td style='text-align: right;' ><span style='font-size: 14px;font-weight:bold;'>DATE :" + date + " </span></td></tr> ");

                    html.Append(" </table>");
                    

                  
                    





                    sno = 0;
                    DataSet ds = new DataSet();
                    Label4.Visible = false;
                    
                    rol_no = grdover.Rows[res].Cells[2].Text;
                    string toaddname = "";
                    string toadd1 = "";
                    string toadd2 = "";
                    string topin = "";
                    string todistrict = "";
                    string Toaddress = "select parent_name as pname,parent_addressP as padd1,streetc as padd2,parent_pincodeP as ppin,districtc as pdistrict from applyn where app_no in (select app_no from registration where roll_no='" + rol_no + "')";
                    DataSet dstoad = dacces.select_method_wo_parameter(Toaddress, "Text");
                    if (dstoad.Tables[0].Rows.Count > 0)
                    {
                        toaddname = dstoad.Tables[0].Rows[0]["pname"].ToString();
                        toadd1 = dstoad.Tables[0].Rows[0]["padd1"].ToString();
                        toadd2 = dstoad.Tables[0].Rows[0]["padd2"].ToString();
                        topin = dstoad.Tables[0].Rows[0]["ppin"].ToString();
                        todistrict = dstoad.Tables[0].Rows[0]["pdistrict"].ToString();
                    }
                    coltop = coltop + 30;
                    PdfArea tete = new PdfArea(mydoc, 2, 5, 591, 832);
                    PdfRectangle pr1 = new PdfRectangle(mydoc, tete, Color.Black);
                    mypdfpage.Add(pr1);
                    PdfTextArea ptsadd = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "To :");
                    mypdfpage.Add(ptsadd);
                    coltop = coltop + 15;
                    ptsadd = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, toaddname);
                    mypdfpage.Add(ptsadd);
                    coltop = coltop + 15;
                    ptsadd = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, toadd1);
                    mypdfpage.Add(ptsadd);
                    coltop = coltop + 15;
                    ptsadd = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, toadd2);
                    mypdfpage.Add(ptsadd);
                    coltop = coltop + 15;
                    ptsadd = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, todistrict + '-' + topin);
                    mypdfpage.Add(ptsadd);

                    
                    name = grdover.Rows[res].Cells[4].Text;
                    Registration_no = grdover.Rows[res].Cells[3].Text;
                    coltop = coltop + 25;
                    PdfTextArea ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "NAME ");
                    mypdfpage.Add(ptscont);
                    ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, 150, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, " : " + name);
                    mypdfpage.Add(ptscont);

                    //coltop = coltop + 15;
                    ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, 300, coltop, 150, 30), System.Drawing.ContentAlignment.MiddleLeft, "BRANCH ");
                    mypdfpage.Add(ptscont);
                    ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                              new PdfArea(mydoc, 450, coltop, 150, 30), System.Drawing.ContentAlignment.MiddleLeft, " : " + deptacr);
                    mypdfpage.Add(ptscont);

                    coltop = coltop + 15;
                    ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "ROLL NUMBER ");
                    mypdfpage.Add(ptscont);

                    ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                     new PdfArea(mydoc, 150, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, " : " + rol_no);
                    mypdfpage.Add(ptscont);

                    //coltop = coltop + 15;
                    ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, 300, coltop, 150, 30), System.Drawing.ContentAlignment.MiddleLeft, "YEAR/SEM-SEC ");
                    mypdfpage.Add(ptscont);
                    ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                     new PdfArea(mydoc, 450, coltop, 150, 30), System.Drawing.ContentAlignment.MiddleLeft, " : " + year + "/" + gsem3 + "-" + sec);
                    mypdfpage.Add(ptscont);
                    coltop = coltop + 15;
                    ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "REG NO ");
                    mypdfpage.Add(ptscont);
                    ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, 150, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, " : " + Registration_no);
                    mypdfpage.Add(ptscont);

                    ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, 300, coltop, 150, 30), System.Drawing.ContentAlignment.MiddleLeft, "SEM ");
                    mypdfpage.Add(ptscont);
                    ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, 450, coltop, 150, 30), System.Drawing.ContentAlignment.MiddleLeft, " : " + odd_r_even);
                    mypdfpage.Add(ptscont);

                    coltop = coltop + 15;
                    ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "MODE OF EXAM");
                    mypdfpage.Add(ptscont);
                    ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, 150, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, " : " + test);
                    mypdfpage.Add(ptscont);

                    coltop = coltop + 25;
                    ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Dear Parents,");
                    mypdfpage.Add(ptscont);
                    coltop = coltop + 20;
                    ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, 15, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Below mentioned marks are secured by your ward in " + test);
                    mypdfpage.Add(ptscont);

                    coltop = coltop + 20;
                    ptscont = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                                                     new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "MARKS SECURED :");
                    mypdfpage.Add(ptscont);


                    html.Append("<table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 80px;' border='0'>");

                    html.Append("<tr><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'><span style='font-size: 12px;font-weight:bold;'>To : <br>" + toaddname + " <br> " + toadd1 + "" + toadd2 + "" + todistrict + '-' + topin + "</td></tr> ");

                    html.Append(" </table>");


                    html.Append("<br><table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 80px;' border='0'>");

                    html.Append("<tr><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> NAME  </td><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'> : " + name + "</td><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> BRANCH  </td><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'> : " + deptacr + " </td></tr> <tr><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> ROLL NUMBER   </td><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'>  : " + rol_no + "</td><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> YEAR/SEM-SEC   </td><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'>  : " + year + "/" + gsem3 + "-" + sec + "</td></tr> <tr><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> REG NO   </td><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'>  : " + Registration_no + "</td><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> SEM   </td><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'>  : " + odd_r_even + "</td></tr> <tr><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> MODE OF EXAM  </td><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'>  : " + test + "</td><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;font-weight:bold;'> </td><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'>  </td></tr>");

                    html.Append(" </table>");

                    html.Append("<table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 80px;' border='0'>");

                    html.Append("<tr><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'><span style='font-weight:bold;'><br> Dear Parents, </span> <span ><br>&nbsp&nbsp&nbsp&nbsp Below mentioned marks are secured by your ward in " + test + "</span><span style='font-size: 14px;font-weight:bold;'><br> MARKS SECURED : </span></td></tr> ");

                    html.Append(" </table>");

                    

                      Boolean resultflag = false;
                    double maxc = 0;
                    string subjname = "";
                    string subjcode = "";
                    string result = "";
                    string checkmarks = "";
                    string getmark = "";
                    DataTable dtMarks = new DataTable();
                    dtMarks.Columns.Clear();
                    dtMarks.Rows.Clear();
                    DataRow drow;
                    DataColumn dcol = new DataColumn();
                    dcol = new DataColumn();
                    dcol.ColumnName = "Sl.No";
                    dtMarks.Columns.Add(dcol);
                    dcol = new DataColumn();
                    dcol.ColumnName = "Subject Names";
                    dtMarks.Columns.Add(dcol);
                    string colName;
                    string minMarks = "";
                    string[] minMark = new string[chklstest.Items.Count];
                    for (int j = 0; j < chklstest.Items.Count; j++)
                    {
                        if (chklstest.Items[j].Selected == true)
                        {
                            criteria_no = chklstest.Items[j].Value.ToString();
                            test = chklstest.Items[j].Text.ToString();
                            colName = test;

                            double totalmark = 0;
                            double totalobtainedmark = 0;
                            double minmark1 = 0;
                            dcol = new DataColumn();
                            dcol.ColumnName = test;
                            dtMarks.Columns.Add(dcol);
                            string selectmark = "select distinct e.subject_no,sub.subject_name,sub.subject_code,max_mark,min_mark,marks_obtained from subjectchooser s,registration rg,exam_type e,result r, subject sub where sub.subject_no=s.subject_no and  s.subject_no=e.subject_no and s.roll_no=rg.roll_no  and e.exam_code=r.exam_code and rg.roll_no=r.roll_no and e.criteria_no='" + criteria_no + "' and r.roll_no='" + rol_no + "'";
                            hat.Clear();
                            hat.Add("rollnum", rol_no.ToString());
                            hat.Add("criteriano", criteria_no.ToString());
                            ds = dacces.select_method(selectmark, hat, "cmd");

                            if (ds.Tables[0].Rows.Count > 0)
                            {
                                for (int dscount = 0; dscount < ds.Tables[0].Rows.Count; dscount++)
                                {
                                    result = "Pass";

                                    string marksobtained = "";
                                    marksobtained = Convert.ToString(ds.Tables[0].Rows[dscount]["marks_obtained"]);
                                    if (marksobtained != "")
                                    {
                                        if (Convert.ToDouble(marksobtained) < 0)
                                        {
                                            marksobtained = findresult(marksobtained);
                                        }
                                    }
                                    int max;
                                    bool maxflag = int.TryParse(txt_ConvertTo.Text, out max);
                                    double multiply;
                                    if (maxflag)
                                    {
                                        if (txt_ConvertTo.Text != "" || txt_ConvertTo.Text != null)
                                        {
                                            ConvertedMark(txt_ConvertTo, Convert.ToString(ds.Tables[0].Rows[dscount]["max_mark"]), ref marksobtained, ref minMarks);
                                        }
                                    }
                                    if (Convert.ToString(ds.Tables[0].Rows[dscount]["min_mark"]) != "")
                                    {
                                        double obtainedmark = 0;
                                        minMark[colincrement] = Convert.ToString(ds.Tables[0].Rows[dscount]["min_mark"]);
                                        minmark1 = Convert.ToDouble(ds.Tables[0].Rows[dscount]["min_mark"]);
                                        if (Convert.ToString(ds.Tables[0].Rows[dscount]["marks_obtained"]) != "")
                                        {
                                            obtainedmark = Convert.ToDouble(ds.Tables[0].Rows[dscount]["marks_obtained"]);
                                            if (obtainedmark > 0)
                                            {
                                                totalobtainedmark = totalobtainedmark + Convert.ToDouble(marksobtained);
                                            }
                                        }
                                        if (obtainedmark < minmark1)
                                        {
                                            resultflag = true;
                                        }
                                    }
                                    double maxmark = 0;
                                    if (Convert.ToString(ds.Tables[0].Rows[dscount]["max_mark"]) != "")
                                    {
                                        maxmark = Convert.ToDouble(ds.Tables[0].Rows[dscount]["max_mark"]);
                                        totalmark = totalmark + maxmark;
                                    }
                                    if (resultflag)
                                    {
                                        result = "Fail";
                                    }
                                    if (status == 0)
                                    {
                                        sno++;
                                        subjname = ds.Tables[0].Rows[dscount]["subject_name"].ToString();
                                        drow = dtMarks.NewRow();
                                        drow[0] = sno.ToString();
                                        drow[1] = subjname;
                                        drow[2] = marksobtained;
                                        dtMarks.Rows.Add(drow);
                                    }
                                    else
                                    {
                                        for (int rr = 0; rr < sno; rr++)
                                        {
                                            if (dtMarks.Rows[rr][1].ToString() == ds.Tables[0].Rows[dscount]["subject_name"].ToString())
                                            {
                                                dtMarks.Rows[rr][dtMarks.Columns.Count - 1] = marksobtained;
                                            }
                                        }
                                    }//55555
                                }
                                //if (status == 0)
                                //{
                                //    drow = dtMarks.NewRow();
                                //    drow[1] = "Total";
                                //    drow[2] = totalobtainedmark.ToString();
                                //    dtMarks.Rows.Add(drow);
                                //}
                                //else
                                //{
                                //    dtMarks.Rows[dtMarks.Rows.Count - 1][dtMarks.Columns.Count - 1] = totalobtainedmark.ToString();
                                //}
                            }
                            colincrement++;
                            for (int r = 0; r < dtMarks.Rows.Count; r++)
                            {
                                for (int c = 3; c < dtMarks.Columns.Count; c++)
                                {
                                    if (dtMarks.Rows[r][c].ToString() == "" || dtMarks.Rows[r][c].ToString() == null)
                                    {
                                        dtMarks.Rows[r][c] = "--";
                                    }
                                }
                            }
                            status = 1;
                        }
                    }
                    Gios.Pdf.PdfTable table = mydoc.NewTable(Fontsmall, dtMarks.Rows.Count + 1, dtMarks.Columns.Count, 1);
                    table.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
                    table.VisibleHeaders = false;
                    int[] width = new int[] { 50, 250, 100, 100, 100, 100, 100, 100,100,100,100,100,100 };
                    table.CellRange(0, 0, 0, dtMarks.Columns.Count - 1).SetFont(Fontbold1);


                    html.Append(" </table>");
                   
                    html.Append("<table style='width: 95%; margin-left: 80px; margin-top: 0px; margin-bottom: 2px; font-size: 12px;'cellpadding='5' cellspacing='0'>");
                    html.Append("<tr>");
                    for (int c = 0; c < dtMarks.Columns.Count; c++)
                    {
                        table.Columns[c].SetWidth(width[c]);
                        table.Cell(0, c).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table.Cell(0, c).SetCellPadding(5);
                        table.Cell(0, c).SetContent(dtMarks.Columns[c].ColumnName);


                        html.Append("<td  style='border: thin solid #000000;' align='center'; font-weight:'bold';>" + dtMarks.Columns[c].ColumnName + "</td>");

                        if (c != 0)
                            table.Cell(0, c).SetFont(Fontbodybold);
                    }
                    html.Append(" </tr>");

                    
                    for (int r = 1; r < dtMarks.Rows.Count + 1; r++)
                    {
                        int ms = 0;
                        html.Append("<tr>");
                        for (int c = 0; c < dtMarks.Columns.Count; c++)
                        {
                            html.Append("<td class='style1' style='border: thin solid #000000;");
                            int dtObtmrk, min;
                            bool dom = int.TryParse(dtMarks.Rows[r - 1][c].ToString(), out dtObtmrk);
                            //if(txt_ConvertTo.Text==null || txt_ConvertTo.Text=="")

                            bool m = int.TryParse(minMarks, out min);
                            if (c == 1)
                            {
                                table.Cell(r, c).SetContentAlignment(ContentAlignment.MiddleLeft);
                                html.Append("text-align: left;'>");
                            }
                            else
                            {
                                table.Cell(r, c).SetContentAlignment(ContentAlignment.MiddleCenter);
                                html.Append("text-align: center;'>");
                            }
                            html.Append("<span ");
                            table.Cell(r, c).SetContent(dtMarks.Rows[r - 1][c].ToString());
                            if (c > 1 && dtMarks.Rows[r - 1][c] != "--")
                            {
                                if (dtMarks.Rows[r - 1][c] == "RAA" || dtMarks.Rows[r - 1][c] == "AAA" || dtMarks.Rows[r - 1][c] == "EOD" || dtMarks.Rows[r - 1][c] == "EL" || dtMarks.Rows[r - 1][c] == "ML" || dtMarks.Rows[r - 1][c] == "SOD" || dtMarks.Rows[r - 1][c] == "NJ" || dtMarks.Rows[r - 1][c] == "HS" || dtMarks.Rows[r - 1][c] == "OD" || dtMarks.Rows[r - 1][c] == "NSS" || dtMarks.Rows[r - 1][c] == "S" || dtMarks.Rows[r - 1][c] == "PP" || dtMarks.Rows[r - 1][c] == "OOD" || dtMarks.Rows[r - 1][c] == "L" || dtMarks.Rows[r - 1][c] == "NCC" || dtMarks.Rows[r - 1][c] == "SYOD" || dtMarks.Rows[r - 1][c] == "COD" || dtMarks.Rows[r - 1][c] == "LA")
                                {
                                    html.Append("style='color:red'");
                                    table.Cell(r, c).SetForegroundColor(Color.Red);
                                }
                                if (dom || m)
                                {
                                    if (dtObtmrk < min)
                                    {
                                        table.Cell(r, c).SetForegroundColor(Color.Red);
                                        html.Append("style='color:red'");
                                    }
                                    if (txt_ConvertTo.Text == null || txt_ConvertTo.Text == "")
                                    {
                                        if (dtObtmrk < int.Parse(minMark[ms]))
                                        {
                                            table.Cell(r, c).SetForegroundColor(Color.Red);
                                            html.Append("style='color:red'");
                                        }
                                        ms++;
                                    }
                                }
                            }
                            html.Append(">");
                            html.Append("" + dtMarks.Rows[r - 1][c].ToString() + "");
                            html.Append("</span></td>");
                            table.Cell(r, c).SetFont(Fontsmall);
                        }
                        html.Append(" </tr>");
                    }

                    html.Append(" </table>");



                    

                    coltop = coltop + 30;
                    Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 10, coltop, 580, 1000));
                    mypdfpage.Add(newpdftabpage);
                    Double getheigh = newpdftabpage.Area.Height;
                    getheigh = Math.Round(getheigh, 0, MidpointRounding.AwayFromZero);
                    coltop = coltop + 10 + Convert.ToInt32(getheigh);
                    PdfTextArea ptps = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Pass Mark :\t " + Convert.ToString(minMarks) + "");
                    mypdfpage.Add(ptps);
                    //added by Mullai
                    coltop = coltop + 20;
                    ptps = new PdfTextArea(Fontsmall, System.Drawing.Color.Black, new PdfArea(mydoc, 10, coltop, 400, 30),
                        System.Drawing.ContentAlignment.MiddleLeft, "Attendance Date From:\t" + Convert.ToString(f_date) + " "  +"To:\t"+Convert.ToString(t_date)+"" ) ;
                    mypdfpage.Add(ptps); //

                    coltop = coltop + 20;
                    ptps = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance % is :\t " + Convert.ToString(per_tage_hrs) + "");
                    mypdfpage.Add(ptps);
                    //added by Mullai
                    coltop = coltop + 20;
                    ptps = new PdfTextArea(Fontsmall, System.Drawing.Color.Black, new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Total No Of Hours Conducted:\t" + Convert.ToString(gconhrs) + "");
                    mypdfpage.Add(ptps);

                    coltop = coltop + 20;
                    ptps = new PdfTextArea(Fontsmall, System.Drawing.Color.Black, new PdfArea(mydoc, 10, coltop, 400, 30),
                        System.Drawing.ContentAlignment.MiddleLeft, "Attended Hours:\t" + Convert.ToString(gprehours) + "");
                    mypdfpage.Add(ptps);

                    ///

                    coltop = coltop + 20;
                    ptps = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Academic Performance :\t " + "");
                    mypdfpage.Add(ptps);

                    coltop = coltop + 20;
                    ptps = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "If the attendance is below 75% your ward will not be eligible to appear for the university examination ");
                    mypdfpage.Add(ptps);



                    html.Append("<table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 80px;' border='0'>");

                    html.Append("<tr><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'><span><br> Pass Mark :\t " + Convert.ToString(minMarks) + "<br> <br>Attendance Date From:\t" + Convert.ToString(f_date) + " " + "To:\t" + Convert.ToString(t_date) + "<br><br>Attendance % is :\t " + Convert.ToString(per_tage_hrs) + "<br><br>Total No Of Hours Conducted:\t" + Convert.ToString(gconhrs) + "<br><br>Attended Hours:\t" + Convert.ToString(gprehours) + "<br><br>Academic Performance :\t " + "<br><br> If the attendance is below 75% your ward will not be eligible to appear for the university examination ");

                    
                        if(resultflag==true)   //added by Mullai
                        {
                    
                    coltop = coltop + 30;
                    ptps = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Parents are requested to sign and return this report to the class advisor with their feed back with out fail. ");
                    mypdfpage.Add(ptps);
                    coltop = coltop + 30;
                    ptps = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "You are requested to meet the CLASS ADVISOR/HOD/PRINCIPAL without fail on or before: ");
                    mypdfpage.Add(ptps);
                    html.Append("<br><br>Parents are requested to sign and return this report to the class advisor with their feed back with out fail. <br><br>You are requested to meet the CLASS ADVISOR/HOD/PRINCIPAL without fail on or before:");
                        }
                        else
                        {
                        }
                    coltop = coltop + 30;
                    ptps = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                             new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Notes:" + txtnotes.Text.ToString());
                    mypdfpage.Add(ptps);

                    coltop = coltop + 30;
                    ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                     new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Class Teacher");
                    mypdfpage.Add(ptscont);
                    ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                    new PdfArea(mydoc, 250, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "H.O.D");
                    mypdfpage.Add(ptscont);
                    ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                    new PdfArea(mydoc, 400, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Principal");
                    mypdfpage.Add(ptscont);
                    coltop = coltop + 30;
                    ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                     new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "FEEDBACK FROM THE PARENTS");
                    mypdfpage.Add(ptscont);
                    coltop = coltop + 20;
                    ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                     new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "---------------------------------------------------------------------------------------");
                    mypdfpage.Add(ptscont);
                    coltop = coltop + 20;
                    ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                     new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "---------------------------------------------------------------------------------------");
                    mypdfpage.Add(ptscont);

                    coltop = coltop + 20;
                    ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                     new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "DATE :\t ");
                    mypdfpage.Add(ptscont);
                    ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
                                                     new PdfArea(mydoc, 200, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "PARENT'S SIGNATURE");
                    mypdfpage.Add(ptscont);


                    html.Append("<br><br>Notes:" + txtnotes.Text.ToString() + " <br><br>Class Teacher&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp H.O.D&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp Principal<br><br><br>FEEDBACK FROM THE PARENTS<br>-------------------------------------------------------------------------------------- - <br><br>-------------------------------------------------------------------------------------- - <br>DATE : &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp   PARENT'S SIGNATURE");

                    html.Append("</span></td></tr> ");

                    html.Append(" </table>");
                    html.Append("</div>");

                   

                   contentDiv.InnerHtml = html.ToString();
                   contentDiv.Visible = true;

                   ScriptManager.RegisterStartupScript(this, GetType(), "btn_print", "PrintDiv();", true);
                   mypdfpage.SaveToDocument();
                }
            }
            if (stuflag == true)
            {
                lblMultierr.Text = "";
                lblMultierr.Visible = false;
                string appPath = HttpContext.Current.Server.MapPath("~");
                if (appPath != "")
                {
                    //string szPath = appPath + "/Report/";
                    //string szFile = "Format1" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";
                    //mydoc.SaveToFile(szPath + szFile);
                    //Response.ClearHeaders();
                    //Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                    //Response.ContentType = "application/pdf";
                    //Response.WriteFile(szPath + szFile);
                }
            }
            else
            {
                lblMultierr.Text = "Please Select Atleast one Student";
                lblMultierr.Visible = true;
            }
            
        }
      
        catch (Exception ex)
        {

        }
    }

    //public void bindpdfletter8()
    //{
    //    try
    //    {
    //        #region
    //        Font Fontbold = new Font("Book Antiqua", 15, FontStyle.Bold);
    //        //Fontbold.Style = FontStyle.Underline;
    //        Font Fontsmall = new Font("Book Antiqua", 10, FontStyle.Regular);
    //        Font Fontbold1 = new Font("Book Antiqua", 12, FontStyle.Bold);
    //        Font Fontbodybold = new Font("Book Antiqua", 10, FontStyle.Bold);
    //        Font fontmission = new Font("Book Antiqua", 8, FontStyle.Bold);
    //        Font fontmissionstr = new Font("Book Antiqua", 8, FontStyle.Regular);
    //        Gios.Pdf.PdfDocument mydoc = new Gios.Pdf.PdfDocument(PdfDocumentFormat.A4);
    //        Gios.Pdf.PdfPage mypdfpage;

    //        string Registration_no = "";

    //        FpEntry.SaveChanges();

    //        frdate = TextBox2.Text;
    //        todate = TextBox1.Text;
    //        string Vission = string.Empty;
    //        string Mission = string.Empty;
    //        string strsc = "";
    //        colege_code = Session["collegecode"].ToString();
    //        if (ddlBranch.Text != "")
    //        {
    //            branch = ddlBranch.SelectedItem.Text;
    //            string branchcode = ddlBranch.SelectedItem.Value;
    //            getdegDetails(branchcode, ref  Vission, ref  Mission, colege_code);
    //        }
    //        if (ddlDegree.Text != "")
    //        {
    //            degree = ddlDegree.SelectedItem.Text;
    //        }
    //        sem = ddlSemYr.SelectedValue;
    //        sec = "";
    //        if (ddlSec.Items.Count > 0)
    //        {
    //            if ((ddlSec.Enabled == true && ddlSec.Text != "-1"))
    //            {
    //                sec = ", " + ddlSec.SelectedValue;
    //            }
    //        }

    //        //if (ddlTest.Text != "")
    //        //{
    //        //    test = chklstest.SelectedItem.Text;
    //        //}
    //        if (ddlSemYr.Text != "")
    //        {
    //            semester = Convert.ToInt32(ddlSemYr.SelectedValue);
    //        }


    //        degree1 = ddlBranch.SelectedValue;
    //        string attendanceper = "0";
    //        if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
    //        {
    //            string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(phoneno,'-') as phoneno,isnull(pincode,'-')as pincode,logo1 as logo,category,affliatedby,isnull(faxno,'-') as faxno,district,email,website,state from collinfo where college_code=" + Session["collegecode"] + "";
    //            DataSet dscoll = dacces.select_method_wo_parameter(college, "Text");
    //            if (dscoll.Tables[0].Rows.Count > 0)
    //            {
    //                collnamenew1 = dscoll.Tables[0].Rows[0]["collname"].ToString();
    //                address1 = dscoll.Tables[0].Rows[0]["address1"].ToString();
    //                address2 = dscoll.Tables[0].Rows[0]["address2"].ToString();
    //                address3 = dscoll.Tables[0].Rows[0]["address3"].ToString();
    //                pincode = dscoll.Tables[0].Rows[0]["pincode"].ToString();
    //                email = dscoll.Tables[0].Rows[0]["email"].ToString();
    //                Phoneno = dscoll.Tables[0].Rows[0]["phoneno"].ToString();
    //                address = address1 + address2;
    //            }
    //            string collegev = "select percent_eligible_for_exam from PeriodAttndSchedule where degree_code=" + ddlBranch.SelectedValue.ToString() + " and semester=" + ddlSemYr.SelectedValue.ToString() + "";
    //            attendanceper = dacces.GetFunction(collegev);
    //        }
    //        FpSpread1.Sheets[0].RowCount = 0;

    //        Boolean stuflag = false;
    //        for (int j = 0; j < chklstest.Items.Count; j++)
    //        {
    //            if (chklstest.Items[j].Selected == true)
    //            {
    //                string criteria_no = chklstest.Items[j].Value.ToString();
    //                test = chklstest.Items[j].Text.ToString();
    //                for (int res = 1; res < Convert.ToInt32(FpEntry.Sheets[0].RowCount); res++)
    //                {
    //                    isval = 0;
    //                    s = FpEntry.Sheets[0].Cells[res, 0].Text;
    //                    isval = Convert.ToInt32(FpEntry.Sheets[0].Cells[res, 1].Value);
    //                    if (isval == 1)
    //                    {
    //                        stuflag = true;
    //                        mypdfpage = mydoc.NewPage();

    //                        int coltop = 5;
    //                        PdfTextArea ptc = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleCenter, collnamenew1);
    //                        mypdfpage.Add(ptc);
    //                        coltop = coltop + 20;
    //                        PdfTextArea pts = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleCenter, address);
    //                        mypdfpage.Add(pts);
    //                        if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))
    //                        {
    //                            PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
    //                            mypdfpage.Add(LogoImage, 5, 5, 400);
    //                        }
    //                        sno = 0;
    //                        DataSet ds = new DataSet();
    //                        Label4.Visible = false;
    //                        rol_no = FpEntry.Sheets[0].Cells[res, 2].Text;
    //                        string toaddname = "";
    //                        string toadd1 = "";
    //                        string toadd2 = "";
    //                        string topin = "";
    //                        string todistrict = "";
    //                        string Toaddress = "select parent_name as pname,parent_addressP as padd1,streetc as padd2,parent_pincodeP as ppin,districtc as pdistrict,Cityp from applyn where app_no in (select app_no from registration where roll_no='" + rol_no + "')";
    //                        DataSet dstoad = dacces.select_method_wo_parameter(Toaddress, "Text");
    //                        if (dstoad.Tables[0].Rows.Count > 0)
    //                        {
    //                            toaddname = dstoad.Tables[0].Rows[0]["pname"].ToString();
    //                            toadd1 = dstoad.Tables[0].Rows[0]["padd1"].ToString();
    //                            toadd2 = dstoad.Tables[0].Rows[0]["padd2"].ToString();
    //                            topin = dstoad.Tables[0].Rows[0]["ppin"].ToString();
    //                            //todistrict = dstoad.Tables[0].Rows[0]["Cityp"].ToString();
    //                            //**added by Mullai
    //                            string txtvalcity = "select TextVal from TextValTable where TextCode='" + dstoad.Tables[0].Rows[0]["Cityp"].ToString() + "'";
    //                            ds.Clear();
    //                            ds = dacces.select_method_wo_parameter(txtvalcity, "text");
    //                            if (ds.Tables[0].Rows.Count > 0)
    //                            {
    //                                todistrict = Convert.ToString(ds.Tables[0].Rows[0]["TextVal"]).Trim();
    //                            }
    //                            //**
    //                        }
                           

    //                        PdfArea tete = new PdfArea(mydoc, 2, 5, 591, 832);
    //                        PdfRectangle pr1 = new PdfRectangle(mydoc, tete, Color.Black);
    //                        mypdfpage.Add(pr1);

    //                        //vission mission added by sudhagar
    //                        if (incVisnMisn.Checked)
    //                        {
    //                            #region
    //                            coltop = coltop + 40;
    //                            PdfTextArea ptsadd = new PdfTextArea(fontmission, System.Drawing.Color.Black,
    //                                                              new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Department : ");
    //                            mypdfpage.Add(ptsadd);
    //                            //coltop = coltop + 15;
    //                            ptsadd = new PdfTextArea(fontmissionstr, System.Drawing.Color.Black,
    //                                                               new PdfArea(mydoc, 80, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, branch);
    //                            mypdfpage.Add(ptsadd);

    //                            //vission
    //                            coltop = coltop + 20;
    //                            ptsadd = new PdfTextArea(fontmission, System.Drawing.Color.Black,
    //                                                               new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Vision:");
    //                            mypdfpage.Add(ptsadd);

    //                            // coltop = coltop + 20;
    //                            ptsadd = new PdfTextArea(fontmissionstr, System.Drawing.Color.Black,
    //                                                               new PdfArea(mydoc, 80, coltop, 500, 60), System.Drawing.ContentAlignment.MiddleLeft, Vission);
    //                            mypdfpage.Add(ptsadd);

    //                            //mission
    //                            //vission
    //                            coltop = coltop + 50;
    //                            ptsadd = new PdfTextArea(fontmission, System.Drawing.Color.Black,
    //                                                               new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Mission:");
    //                            mypdfpage.Add(ptsadd);

    //                            // coltop = coltop + 20;
    //                            ptsadd = new PdfTextArea(fontmissionstr, System.Drawing.Color.Black,
    //                                                               new PdfArea(mydoc, 80, coltop, 500, 60), System.Drawing.ContentAlignment.MiddleLeft, Mission);
    //                            mypdfpage.Add(ptsadd);
    //                            coltop = coltop + 35;
    //                            #endregion
    //                        }
    //                        else
    //                        {
    //                            #region
    //                            coltop = coltop + 60;
    //                            PdfTextArea ptsadd = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                               new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "To : ");
    //                            mypdfpage.Add(ptsadd);

    //                            coltop = coltop + 15;
    //                            ptsadd = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                               new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, toaddname);
    //                            mypdfpage.Add(ptsadd);

    //                            coltop = coltop + 15;
    //                            ptsadd = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                               new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, toadd1);
    //                            mypdfpage.Add(ptsadd);

    //                            coltop = coltop + 15;
    //                            ptsadd = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                               new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, toadd2);
    //                            mypdfpage.Add(ptsadd);


    //                            coltop = coltop + 15;
    //                            ptsadd = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                               new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, todistrict + '-' + topin);
    //                            mypdfpage.Add(ptsadd);
    //                            coltop = coltop + 25;
    //                            #endregion
    //                        }

    //                        // coltop = coltop + 25;

    //                        PdfTextArea ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, coltop, 550, 30), System.Drawing.ContentAlignment.MiddleRight, "DATE : " + DateTime.Now.Date.ToString("dd-MM-yyyy"));
    //                        mypdfpage.Add(ptscont);

    //                        coltop = coltop + 20;
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                           new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Dear Parents, ");
    //                        mypdfpage.Add(ptscont);
    //                        DataSet dschool = new DataSet();
    //                        string sqlschool = "select value from Master_Settings where settings='Academic year'";
    //                        dschool = dacces.select_method_wo_parameter(sqlschool, "Text");
    //                        string splitvalue = dschool.Tables[0].Rows[0]["value"].ToString();
    //                        string[] dsplit = splitvalue.Split(',');

    //                        string fvalue = dsplit[0].ToString();
    //                        string lvalue = dsplit[1].ToString();
    //                        string acdmic_date = fvalue + "-" + lvalue;

    //                        coltop = coltop + 15;
    //                        ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                          new PdfArea(mydoc, 15, coltop, 500, 30), System.Drawing.ContentAlignment.MiddleLeft, " I am sending here with the " + test + " Progress Report of Your Ward for the Academic Year " + acdmic_date);
    //                        mypdfpage.Add(ptscont);

    //                        name = FpEntry.Sheets[0].Cells[res, 4].Text;
    //                        Registration_no = FpEntry.Sheets[0].Cells[res, 3].Text;
    //                        coltop = coltop + 25;
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                          new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Name of the Student");
    //                        mypdfpage.Add(ptscont);

    //                        ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                          new PdfArea(mydoc, 150, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, " : \t" + name);
    //                        mypdfpage.Add(ptscont);

    //                        coltop = coltop + 15;
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                          new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Branch/Semester");
    //                        mypdfpage.Add(ptscont);

    //                        gsem3 = "";
    //                        sem = ddlSemYr.SelectedValue.ToString();
    //                        if (sem == "1")
    //                            gsem3 = "I";
    //                        else if (sem == "2")
    //                            gsem3 = "II";
    //                        else if (sem == "3")
    //                            gsem3 = "III";
    //                        else if (sem == "4")
    //                            gsem3 = "IV";
    //                        else if (sem == "5")
    //                            gsem3 = "V";
    //                        else if (sem == "6")
    //                            gsem3 = "VI";
    //                        else if (sem == "7")
    //                            gsem3 = "VII";
    //                        else if (sem == "8")
    //                            gsem3 = "VIII";
    //                        else if (sem == "9")
    //                            gsem3 = "IX";
    //                        else if (sem == "10")
    //                            gsem3 = "X";

    //                        ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                          new PdfArea(mydoc, 150, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, " : \t" + ddlDegree.SelectedItem.ToString() + " - " + ddlBranch.SelectedItem.ToString() + ", " + gsem3 + sec);
    //                        mypdfpage.Add(ptscont);

    //                        coltop = coltop + 15;
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                          new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Roll Number");
    //                        mypdfpage.Add(ptscont);

    //                        ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                         new PdfArea(mydoc, 150, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, " : \t" + rol_no);
    //                        mypdfpage.Add(ptscont);

    //                        coltop = coltop + 15;
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                          new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Univeristy Register No");
    //                        mypdfpage.Add(ptscont);

    //                        ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                          new PdfArea(mydoc, 150, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, " : \t" + Registration_no);
    //                        mypdfpage.Add(ptscont);

    //                        coltop = coltop + 15;
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                          new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Name of Examination");
    //                        mypdfpage.Add(ptscont);

    //                        ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                          new PdfArea(mydoc, 150, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, " : \t" + test);
    //                        mypdfpage.Add(ptscont);

    //                        coltop = coltop + 20;
    //                        ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                         new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "MARKS SECURED : ");
    //                        mypdfpage.Add(ptscont);

    //                        double maxc = 0;
    //                        string subjname = "";
    //                        string subjcode = "";
    //                        string result = "";
    //                        string checkmarks = "";
    //                        string getmark = "";
    //        #endregion
    //                        string selectmark = "select distinct e.subject_no,sub.subject_name,sub.subject_code,max_mark,min_mark,marks_obtained from subjectchooser s,registration rg,exam_type e,result r, subject sub where sub.subject_no=s.subject_no and  s.subject_no=e.subject_no and s.roll_no=rg.roll_no  and e.exam_code=r.exam_code and rg.roll_no=r.roll_no and e.criteria_no='" + criteria_no + "' and r.roll_no='" + rol_no + "'";
    //                        hat.Clear();
    //                        hat.Add("rollnum", rol_no.ToString());
    //                        hat.Add("criteriano", criteria_no.ToString());
    //                        ds = dacces.select_method(selectmark, hat, "cmd");

    //                        Gios.Pdf.PdfTable table = mydoc.NewTable(Fontsmall, ds.Tables[0].Rows.Count + 1, 6, 1);
    //                        table.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
    //                        table.VisibleHeaders = false;
    //                        table.Columns[0].SetWidth(50);
    //                        table.Columns[1].SetWidth(100);
    //                        table.Columns[2].SetWidth(250);
    //                        table.Columns[3].SetWidth(100);
    //                        //table.Columns[4].SetWidth(60);
    //                        table.Columns[4].SetWidth(60);
    //                        table.Columns[5].SetWidth(100);

    //                        table.CellRange(0, 0, 0, 4).SetFont(Fontbold1);
    //                        table.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table.Cell(0, 0).SetCellPadding(5);
    //                        table.Cell(0, 0).SetContent("S.No");
    //                        table.Cell(0, 0).SetFont(Fontbodybold);

    //                        table.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table.Cell(0, 1).SetContent("Subject code");
    //                        table.Cell(0, 1).SetCellPadding(5);
    //                        table.Cell(0, 1).SetFont(Fontbodybold);

    //                        table.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table.Cell(0, 2).SetContent("Subject Name");
    //                        table.Cell(0, 2).SetCellPadding(5);
    //                        table.Cell(0, 2).SetFont(Fontbodybold);

    //                        table.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table.Cell(0, 3).SetContent("Marks");
    //                        table.Cell(0, 3).SetCellPadding(5);
    //                        table.Cell(0, 3).SetFont(Fontbodybold);

    //                        //table.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        //table.Cell(0, 4).SetContent("Grade");
    //                        //table.Cell(0, 4).SetCellPadding(5);
    //                        //table.Cell(0, 4).SetFont(Fontbodybold);

    //                        table.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table.Cell(0, 4).SetContent("Max Mark");
    //                        table.Cell(0, 4).SetCellPadding(5);
    //                        table.Cell(0, 4).SetFont(Fontbodybold);

    //                        table.Cell(0, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                        table.Cell(0, 5).SetContent("Result");
    //                        table.Cell(0, 5).SetCellPadding(5);
    //                        table.Cell(0, 5).SetFont(Fontbodybold);
    //                        int passcount = 0;
    //                        if (ds.Tables[0].Rows.Count > 0)
    //                        {
    //                            for (int dscount = 0; dscount < ds.Tables[0].Rows.Count; dscount++)
    //                            {
    //                                sno++;
    //                                subjname = ds.Tables[0].Rows[dscount]["subject_name"].ToString();
    //                                minmark = ds.Tables[0].Rows[dscount]["min_mark"].ToString();
    //                                maxmark = ds.Tables[0].Rows[dscount]["max_mark"].ToString();
    //                                checkmarks = ds.Tables[0].Rows[dscount]["marks_obtained"].ToString();
    //                                subjcode = ds.Tables[0].Rows[dscount]["subject_code"].ToString();
    //                                string marks = findresult(checkmarks);
    //                                if (marks != "")
    //                                {
    //                                    getmark = marks;
    //                                    if (TextBoxnew.Text != string.Empty)
    //                                    {
    //                                        double newval = (Convert.ToDouble(TextBoxnew.Text) / Convert.ToDouble(maxmark));
    //                                        maxc = 0;
    //                                        if (getmark != "AB" && getmark != "AAA" && getmark != "EL" && getmark != "EOD" && getmark != "ML" && getmark != "SOD" && getmark != "NSS" && getmark != "NJ" && getmark != "S" && getmark != "L" && getmark != "NCC" && getmark != "HS" && getmark != "PP" && getmark != "SYOD" && getmark != "COD" && getmark != "OOD" && getmark != "OD" && getmark != "" && getmark != " " && getmark != "LA" && getmark != "" && getmark != " " && getmark != "RAA")//added on 26.07.12//Added By subburaj 21.08.2014
    //                                        {
    //                                            maxc = Convert.ToDouble(newval) * Convert.ToDouble(getmark);
    //                                            getmark = maxc.ToString();
    //                                        }
    //                                        else
    //                                        {
    //                                            getmark = marks;
    //                                        }
    //                                    }
    //                                }
    //                                else
    //                                {
    //                                    getmark = checkmarks;
    //                                    if (TextBoxnew.Text != string.Empty)
    //                                    {
    //                                        double newval = (Convert.ToDouble(TextBoxnew.Text) / Convert.ToDouble(maxmark));
    //                                        maxc = 0;
    //                                        if (getmark != "AB" && getmark != "AAA" && getmark != "EL" && getmark != "EOD" && getmark != "ML" && getmark != "SOD" && getmark != "NSS" && getmark != "NJ" && getmark != "S" && getmark != "L" && getmark != "NCC" && getmark != "HS" && getmark != "PP" && getmark != "SYOD" && getmark != "COD" && getmark != "OOD" && getmark != "OD" && getmark != "" && getmark != " " && getmark != "LA" && getmark != "" && getmark != " " && getmark != "RAA")//added on 26.07.12//added by Subburaj  21.08.2014
    //                                        {
    //                                            maxc = Convert.ToDouble(newval) * Convert.ToDouble(getmark);
    //                                        }
    //                                        getmark = maxc.ToString();
    //                                    }
    //                                }
    //                                string markval = getmark;
    //                                if ((((Convert.ToDouble(checkmarks)) < (Convert.ToDouble(minmark)))) && Convert.ToString(checkmarks) != "-2" && Convert.ToString(checkmarks) != "-3")
    //                                {
    //                                    result = "Fail";
    //                                    markval = "0";
    //                                }
    //                                else
    //                                {
    //                                    passcount++;
    //                                    result = "Pass";
    //                                }
    //                                string getgrade = markval;
    //                                if (Convert.ToString(checkmarks) != "-2" && Convert.ToString(checkmarks) != "-3")
    //                                {
    //                                    getgrade = dacces.GetFunctionv("select * from grade_master where batch_year='" + ddlBatch.SelectedItem.ToString() + "' and Degree_Code='" + ddlBranch.SelectedValue.ToString() + "' and '" + markval + "' between Frange and Trange");
    //                                }
    //                                if (getgrade.Trim() == "0")
    //                                {
    //                                    getgrade = "";
    //                                }
    //                                table.Cell(sno, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                table.Cell(sno, 0).SetContent(sno.ToString());
    //                                table.Cell(sno, 0).SetFont(Fontsmall);
    //                                table.Cell(sno, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                                table.Cell(sno, 1).SetContent(subjcode.ToString());
    //                                table.Cell(sno, 1).SetFont(Fontsmall);
    //                                table.Cell(sno, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
    //                                table.Cell(sno, 2).SetContent(subjname.ToString());
    //                                table.Cell(sno, 2).SetFont(Fontsmall);
    //                                table.Cell(sno, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                table.Cell(sno, 3).SetContent(getmark.ToString());
    //                                table.Cell(sno, 3).SetFont(Fontsmall);
    //                                //table.Cell(sno, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                //table.Cell(sno, 4).SetContent(getgrade.ToString());
    //                                //table.Cell(sno, 4).SetFont(Fontsmall);
    //                                table.Cell(sno, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                table.Cell(sno, 4).SetContent(maxmark.ToString());
    //                                table.Cell(sno, 4).SetFont(Fontsmall);
    //                                table.Cell(sno, 5).SetContentAlignment(ContentAlignment.MiddleCenter);
    //                                table.Cell(sno, 5).SetContent(result.ToString());
    //                                table.Cell(sno, 5).SetFont(Fontsmall);
    //                            }
    //                        }
    //                        coltop = coltop + 30;
    //                        Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 10, coltop, 580, 1000));
    //                        mypdfpage.Add(newpdftabpage);
    //                        Double getheigh = newpdftabpage.Area.Height;
    //                        getheigh = Math.Round(getheigh, 0, MidpointRounding.AwayFromZero);
    //                        coltop = coltop + 15 + Convert.ToInt32(getheigh);
    //                        dum_tage_date = "";
    //                        per_tage_day = 0;
    //                        persentmonthcal();
    //                        per_con_hrs = per_workingdays1;

    //                        per_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / (per_con_hrs + tot_conduct_hr_spl_fals)) * 100);

    //                        if (per_tage_hrs > 100)
    //                        {
    //                            per_tage_hrs = 100;
    //                        }
    //                        per_tage_day = per_tage_hrs;
    //                        dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
    //                        if (dum_tage_date == "NaN")
    //                        {
    //                            dum_tage_date = "0";
    //                        }
    //                        else if (dum_tage_date == "Infinity")
    //                        {
    //                            dum_tage_date = "0";
    //                        }
    //                        ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                         new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "No. of arrear subjects in the university Examinations : ");
    //                        mypdfpage.Add(ptscont);
    //                        coltop = coltop + 15;
    //                        ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                         new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance upto " + TextBox1.Text + " is " + dum_tage_date + "%");
    //                        mypdfpage.Add(ptscont);

    //                        coltop = coltop + 20;
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                         new PdfArea(mydoc, 10, coltop, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, "Remarks :");
    //                        mypdfpage.Add(ptscont);
    //                        coltop = coltop + 15;
    //                        ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                         new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Please note minimum of 75" + /*+ attendanceper + */"% attendance with satisfactory progress is essential for appearing in University Examinations.");
    //                        mypdfpage.Add(ptscont);
    //                        coltop = coltop + 60;
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                         new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Class Teacher");
    //                        mypdfpage.Add(ptscont);
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 10, coltop, 550, 30), System.Drawing.ContentAlignment.MiddleCenter, "H.O.D");
    //                        mypdfpage.Add(ptscont);
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 10, coltop, 550, 30), System.Drawing.ContentAlignment.MiddleRight, "Principal");
    //                        mypdfpage.Add(ptscont);
    //                        coltop = coltop + 50;
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                         new PdfArea(mydoc, 10, coltop, 550, 30), System.Drawing.ContentAlignment.MiddleCenter, "ACKNOWLEDGEMENT");
    //                        mypdfpage.Add(ptscont);

    //                        coltop = coltop + 30;
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                         new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Name of the Student");
    //                        mypdfpage.Add(ptscont);
    //                        ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 110, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, " : " + name);
    //                        mypdfpage.Add(ptscont);
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 400, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Date");
    //                        mypdfpage.Add(ptscont);
    //                        ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 490, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, ": ");
    //                        mypdfpage.Add(ptscont);

    //                        coltop = coltop + 20;
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                         new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Parents Remark");
    //                        mypdfpage.Add(ptscont);
    //                        ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                      new PdfArea(mydoc, 110, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, " : ");
    //                        mypdfpage.Add(ptscont);
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 400, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Roll No");
    //                        mypdfpage.Add(ptscont);
    //                        ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 490, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, ": " + rol_no + "");
    //                        mypdfpage.Add(ptscont);
    //                        coltop = coltop + 60;
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                         new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Please return to");
    //                        mypdfpage.Add(ptscont);
    //                        ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                      new PdfArea(mydoc, 110, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, " : HOD");
    //                        mypdfpage.Add(ptscont);
    //                        //ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                        //                                new PdfArea(mydoc, 250, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "HOD");
    //                        //mypdfpage.Add(ptscont);

    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 400, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Parent Signature");
    //                        mypdfpage.Add(ptscont);
    //                        ptscont = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
    //                                                        new PdfArea(mydoc, 490, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, ": ");
    //                        mypdfpage.Add(ptscont);
    //                        coltop = coltop + 20;
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                         new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "Note :");
    //                        mypdfpage.Add(ptscont);
    //                        coltop = coltop + 15;
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                         new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "* If acknowledgement is not returned,clearance for your ward may not be issued.");
    //                        mypdfpage.Add(ptscont);
    //                        coltop = coltop + 15;
    //                        ptscont = new PdfTextArea(Fontbodybold, System.Drawing.Color.Black,
    //                                                         new PdfArea(mydoc, 10, coltop, 600, 30), System.Drawing.ContentAlignment.MiddleLeft, "* Ragging or Abetting is punished by Tamil Nadu Government Act 1997.");
    //                        mypdfpage.Add(ptscont);
    //                        mypdfpage.SaveToDocument();
    //                    }
    //                }
    //            }
    //        }
    //        if (stuflag == true)
    //        {
    //            string appPath = HttpContext.Current.Server.MapPath("~");
    //            if (appPath != "")
    //            {
    //                string szPath = appPath + "/Report/";
    //                string szFile = "Format1" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";
    //                mydoc.SaveToFile(szPath + szFile);
    //                Response.ClearHeaders();
    //                Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
    //                Response.ContentType = "application/pdf";
    //                Response.WriteFile(szPath + szFile);
    //            }
    //        }
    //        else
    //        {
    //            lblnorec.Visible = true;
    //            lblnorec.Text = "Please Select The Students And Then Proceed";
    //        }
    //    }
    //    catch (Exception ex)
    //    {
    //        lblnorec.Visible = true;
    //        lblnorec.Text = ex.ToString();
    //    }
    //}

    public string ConvertedMark(TextBox txtConvertTo, string maxMark, ref string obtainedMark, ref string minMark)
    {
        int Mark, max;
        bool r = int.TryParse(obtainedMark, out Mark);
        bool maxflag = int.TryParse(txtConvertTo.Text, out max);
        double multiply;
        double minmultyply;
        double min = 0;
        double max_minCal = 0;
        bool maxbool = double.TryParse(maxMark, out max_minCal);
        bool minbool = double.TryParse(minMark, out min);
        if (maxflag)
        {
            if (r)
            {
                //if (txtConvertTo.Text == "50")
                //{
                switch (txtConvertTo.Text)
                {
                    //case "50":
                    //    switch (maxMark)
                    //    {
                    //        case "20":
                    //            multiply = double.Parse(txtConvertTo.Text) / 20;
                    //            obtainedMark = Convert.ToString(Mark * multiply);
                    //            break;
                    //        case "50":
                    //            multiply = double.Parse(txtConvertTo.Text) / 50;
                    //            obtainedMark = Convert.ToString(Mark * multiply);
                    //            break;
                    //        case "100":
                    //            multiply = double.Parse(txtConvertTo.Text) / 100;
                    //            obtainedMark = Convert.ToString(Mark * multiply);
                    //            break;
                    //        default:
                    //            multiply = double.Parse(txtConvertTo.Text) / int.Parse(maxMark);
                    //            obtainedMark = Convert.ToString(Mark * multiply);
                    //            break;
                    //    }
                    //    break;
                    ////}
                    ////else if (txtConvertTo.Text == "100")
                    ////{
                    //case "100":
                    //    switch (maxMark)
                    //    {
                    //        case "20":
                    //            multiply = double.Parse(txtConvertTo.Text) / 20;
                    //            obtainedMark = Convert.ToString(Mark * multiply);
                    //            break;
                    //        case "50":
                    //            multiply = double.Parse(txtConvertTo.Text) / 50;
                    //            obtainedMark = Convert.ToString(Mark * multiply);
                    //            break;
                    //        case "100":
                    //            multiply = double.Parse(txtConvertTo.Text) / 100;
                    //            obtainedMark = Convert.ToString(Mark * multiply);
                    //            break;
                    //        default:
                    //            multiply = double.Parse(txtConvertTo.Text) / int.Parse(maxMark);
                    //            obtainedMark = Convert.ToString(Mark * multiply);
                    //            break;
                    //    }
                    //    break;
                    //}
                    //else
                    //{
                    default:
                        multiply = double.Parse(txtConvertTo.Text) / int.Parse(maxMark);
                        if (maxbool == true && minbool == true && min > 0)
                        {
                            minmultyply = max_minCal / min;
                            min = int.Parse(txtConvertTo.Text) / minmultyply;
                        }
                        //obtainedMark = Convert.ToString(Mark * multiply);
                        double mrk = 0;
                        obtainedMark = Convert.ToString(Mark * multiply);
                        double.TryParse(obtainedMark, out mrk);
                        obtainedMark = Convert.ToString(Math.Round(mrk, 2));
                        break;
                    //obtainedMark = obtainedMark;
                    //minMark = minMark;
                }
            }
            minMark = Convert.ToString(int.Parse(txtConvertTo.Text) / 2);
            maxMark = txtConvertTo.Text;
        }
        return obtainedMark;
    }

    protected void rbEnglish_CheckedChanged(object sender, EventArgs e)
    {
        try
        {

            lblMultierr.Visible = false;
            if (txt_ConvertTo.Text != null || txt_ConvertTo.Text != "")
            {
                bindpdfEnglish();
            }
        }
        catch (Exception ex)
        {

        }
    }

    protected void rbTamil_CheckedChanged(object sender, EventArgs e)
    {
        try
        {
            lblMultierr.Visible = false;
            if (txt_ConvertTo.Text != null && txt_ConvertTo.Text != "")
            {
                bindMultipleFormat();
                ModalPopupExtender1.Show();
            }
        }
        catch (Exception ex)
        {

        }
    }

    //protected void txt_ConvertTo_TextChanged(object sender, EventArgs e)
    //{
    //    if (rbEnglish.Checked == true)
    //    {
    //        bindpdfEnglish();
    //    }
    //    else if (rbTamil.Checked == true)
    //    {
    //        bindMultipleFormat(rbTamil.Text.ToString());
    //        ModalPopupExtender1.Show();
    //    }
    //}

    protected void btnConversion_Click(object sender, EventArgs e)
    {
        if (rbEnglish.Checked == true)
        {
            bindpdfEnglish();
        }
        else if (rbTamil.Checked == true)
        {
            bindMultipleFormat();
            //ModalPopupExtender1.Show();
        }
    }

    //added by sudhagar vission mission
    protected string getdegDetails(string degreecode, ref string Vission, ref string Mission, string collegecode)
    {
        //  string Vission = string.Empty;
        // string Mission = string.Empty;
        string deptName = string.Empty;
        string SelectQ = " select d.Degree_Code,c.Course_Name , dt.Dept_Name,d.college_code,c.course_id,d.dept_code,d.deg_vission,d.deg_mission from Degree d,Department dt,Course c where d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and d.college_code ='" + collegecode + "' and d.degree_code='" + degreecode + "' and isnull(d.deg_vission,'')<>'' and isnull(d.deg_mission,'')<>''";
        DataSet dsload = dacces.select_method_wo_parameter(SelectQ, "Text");
        if (dsload.Tables.Count > 0 && dsload.Tables[0].Rows.Count > 0)
        {
            deptName = Convert.ToString(dsload.Tables[0].Rows[0]["Dept_Name"]);
            string strVission = Convert.ToString(dsload.Tables[0].Rows[0]["deg_vission"]);
            string strMission = Convert.ToString(dsload.Tables[0].Rows[0]["deg_mission"]);
            string[] sptVission = strVission.Split('$');
            if (sptVission.Length > 0)
            {
                for (int row = 0; row < sptVission.Length; row++)
                {
                    if (Vission == string.Empty)
                        Vission = "* " + sptVission[row];
                    else
                        Vission += "\n* " + sptVission[row];
                }
            }
            string[] sptMission = strMission.Split('$');
            if (sptMission.Length > 0)
            {
                for (int row = 0; row < sptMission.Length; row++)
                {
                    if (Mission == string.Empty)
                        Mission = "* " + sptMission[row];
                    else
                        Mission += "\n* " + sptMission[row];
                }
            }
        }
        return deptName;
    }

    public void bindpdfletter16()///----------------------added by M.SakthiPriya 02/02/2015 //tbm
    {

        
        Hashtable ht = new Hashtable();
        Font Fontbold = new Font("Book Antiqua", 13, FontStyle.Bold);
        //Font Fontbold = new Font("Times New Roman", 20, FontStyle.Bold);
        Font Fontsmall = new Font("Book Antiqua", 9, FontStyle.Regular);
        Font Fontbold1 = new Font("Book Antiqua", 12, FontStyle.Bold);
        Font tamil = new Font("AMUDHAM.TTF", 16, FontStyle.Regular);
        Gios.Pdf.PdfDocument mydoc = new PdfDocument(PdfDocumentFormat.InCentimeters(17, 30));//Added By M.SakthiPriya 08-12-2014
        // Gios.Pdf.PdfDocument mydoc = new Gios.Pdf.PdfDocument(PdfDocumentFormat.A4);
        DataTable dtmark = new DataTable();
        DataColumn dc;
        dc = new DataColumn();
        dc.ColumnName = "Sno";
        dtmark.Columns.Add(dc);
        dc = new DataColumn();
        dc.ColumnName = "subjectcode";
        dtmark.Columns.Add(dc);
        dc = new DataColumn();
        dc.ColumnName = "subjectname";
        dtmark.Columns.Add(dc);
        dc = new DataColumn();
        dc.ColumnName = "mark";
        dtmark.Columns.Add(dc);
        dc = new DataColumn();
        dc.ColumnName = "result";
        dtmark.Columns.Add(dc);
        DataRow dr;
        string Registration_no = "";
        int xres = 0;
        int mm = 1;
        
        frdate = TextBox2.Text;
        todate = TextBox1.Text;
        ht.Clear();
        string strsc = "";
        if (ddlBranch.Text != "")
        {
            branch = ddlBranch.SelectedItem.Text;
        }
        if (ddlDegree.Text != "")
        {
            degree = ddlDegree.SelectedItem.Text;
        }
        sem = ddlSemYr.SelectedValue;
        sec = ddlSec.SelectedValue;
        if (ddlSemYr.Text != "")
        {
            semester = Convert.ToInt32(ddlSemYr.SelectedValue);
        }
        colege_code = Session["collegecode"].ToString();
        degree1 = ddlBranch.SelectedValue;
        
        Label4.Visible = true;
        for (int j = 0; j < chklstest.Items.Count; j++)
        {
            if (chklstest.Items[j].Selected == true)
            {
                string criteria_no = chklstest.Items[j].Value.ToString();
                test = chklstest.Items[j].Text.ToString();
                //ht.Clear();
                for (int res = 0; res < Convert.ToInt32(grdover.Rows.Count); res++)
                {
                    grank = string.Empty;
                    isval = 0;
                    dtmark.Rows.Clear();
                    
                    s = grdover.Rows[res].Cells[1].Text;
                    

                    var checkbox = grdover.Rows[res].Cells[0].FindControl("lbl_cb") as CheckBox;
                    if (checkbox.Checked)
                        isval = 1;
                    
                    if (isval == 1)
                    {
                        sno = 0;
                        DataSet ds = new DataSet();
                        Label4.Visible = false;
                        //format2btn.Visible = true;
                        //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

                        if (Session["collegecode"].ToString() != null && Session["collegecode"].ToString() != "")
                        {
                            //  string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(pincode,'-')as pincode,logo1 as logo from collinfo where college_code=" + Session["collegecode"] + "";
                            string college = "select isnull(collname,'') as collname,isnull(address1,'') as address1,isnull(address2,'') as address2,isnull(address3,'') as address3,isnull(phoneno,'-') as phoneno,isnull(pincode,'-')as pincode,logo1 as logo,category,affliatedby,isnull(faxno,'-') as faxno,district,email,website,state from collinfo where college_code=" + Session["collegecode"] + "";
                            SqlCommand collegecmd = new SqlCommand(college, con);
                            SqlDataReader collegename;
                            con.Close();
                            con.Open();
                            collegename = collegecmd.ExecuteReader();
                            if (collegename.HasRows)
                            {
                                while (collegename.Read())
                                {
                                    collnamenew1 = collegename["collname"].ToString();
                                    address1 = collegename["address1"].ToString();
                                    address2 = collegename["address2"].ToString();
                                    address3 = collegename["address3"].ToString();
                                    pincode = collegename["pincode"].ToString();
                                    email = collegename["email"].ToString();
                                    Phoneno = collegename["phoneno"].ToString();
                                    address = address1 + address2;
                                }
                            }
                            con.Close();
                        }
                        //'@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                        
                        rol_no = grdover.Rows[res].Cells[2].Text;
                        //ht.Add(res, rol_no);
                        string Toaddress = "select parent_name as pname,parent_addressP as padd1,streetp as padd2,parent_pincodeP as ppin,districtp as pdistrict from applyn where app_no in (select app_no from registration where roll_no='" + rol_no + "')";
                        SqlCommand Toaddcmd = new SqlCommand(Toaddress, con);
                        SqlDataReader Toaddreader;
                        con.Close();
                        con.Open();
                        toaddname = "";
                        toadd1 = "";
                        toadd2 = "";
                        topin = "";
                        todistrict = "";
                        Toaddreader = Toaddcmd.ExecuteReader();
                        if (Toaddreader.HasRows)
                        {
                            while (Toaddreader.Read())
                            {
                                toaddname = Toaddreader["pname"].ToString();
                                toadd1 = Toaddreader["padd1"].ToString();
                                toadd2 = Toaddreader["padd2"].ToString();
                                topin = Toaddreader["ppin"].ToString();
                                todistrict = Toaddreader["pdistrict"].ToString();
                            }
                        }
                        Label4.Visible = false;
                        //format2btn.Visible = true;
                        name = grdover.Rows[res].Cells[4].Text;
                        

                        name = grdover.Rows[res].Cells[4].Text;
                        gsem3 = "";
                        sem = ddlSemYr.SelectedValue.ToString();
                        if (sem == "1")
                            gsem3 = "I";
                        else if (sem == "2")
                            gsem3 = "II";
                        else if (sem == "3")
                            gsem3 = "III";
                        else if (sem == "4")
                            gsem3 = "IV";
                        else if (sem == "5")
                            gsem3 = "V";
                        else if (sem == "6")
                            gsem3 = "VI";
                        else if (sem == "7")
                            gsem3 = "VII";
                        else if (sem == "8")
                            gsem3 = "VIII";
                        else if (sem == "9")
                            gsem3 = "IX";
                        else if (sem == "10")
                            gsem3 = "X";
                        gget_dept_acronym = GetFunction("select dept_acronym from department where dept_name='" + ddlBranch.SelectedItem.ToString() + "'");
                        //@@@@@@@@@@@@@ find the min exam date month and year
                        filteration();
                        string filterwithsection = "a.app_no=r.app_no and r.degree_code='" + degree1.ToString() + "' and et.subject_no=s.subject_no and r.batch_year='" + ddlBatch.SelectedValue.ToString() + "' and RollNo_Flag<>0 and et.exam_code=rt.exam_code and et.criteria_no ='" + criteria_no + "' and r.roll_no=rt.roll_no and cc=0 and exam_flag <> 'DEBAR' and delflag=0   and r.sections='" + ddlSec.SelectedValue.ToString() + "' " + strorder + ",s.subject_no";
                        string filterwithoutsection = "a.app_no=r.app_no and r.degree_code='" + degree1.ToString() + "' and et.subject_no=s.subject_no and r.batch_year='" + ddlBatch.SelectedValue.ToString() + "' and RollNo_Flag<>0 and et.exam_code=rt.exam_code and et.criteria_no ='" + criteria_no + "' and r.roll_no=rt.roll_no and cc=0 and exam_flag <> 'DEBAR' and delflag=0  " + strorder + ",s.subject_no";
                        hat.Clear();//'---------------------------new myth-------------------------------------
                        hat.Add("batchyear", ddlBatch.SelectedValue.ToString());
                        hat.Add("degreecode", ddlBranch.SelectedValue.ToString());
                        hat.Add("criteria_no", criteria_no);
                        hat.Add("sections", ddlSec.SelectedValue.ToString());
                        hat.Add("filterwithsection", filterwithsection.ToString());
                        hat.Add("filterwithoutsection", filterwithoutsection.ToString());
                        ds2 = dacces.select_method("PROC_STUD_ALL_SUBMARK", hat, "sp");
                        string min_examdate = "";
                        string final_date = "";
                        string examdate = "";
                        for (int i = 0; i < ds2.Tables[1].Rows.Count; i++)
                        {
                            examdate = ds2.Tables[1].Rows[i]["exam_date"].ToString();
                            string[] spl_examdate = examdate.Split('/');
                            string aftr_spl = spl_examdate[1].ToString() + "/" + spl_examdate[0].ToString() + "/" + spl_examdate[2].ToString();
                            if (min_examdate == "")
                            {
                                min_examdate = aftr_spl;
                            }
                            else
                            {
                                if (Convert.ToDateTime(min_examdate) < Convert.ToDateTime(aftr_spl))
                                {
                                    final_date = min_examdate;
                                }
                                else
                                {
                                    final_date = aftr_spl;
                                }
                            }
                        }
                        int date_mm = 0;
                        int date_yr = 0;
                        gdate_yr = 0;
                        if (final_date != "")
                        {
                            date_mm = Convert.ToDateTime(final_date).Month;
                            gdate_yr = Convert.ToDateTime(final_date).Year;
                        }
                        gstrExam_month = "";
                        if (date_mm.ToString() != "")
                        {
                            if (date_mm.ToString() == "1")
                                gstrExam_month = "Jan ";
                            else if (date_mm.ToString() == "2")
                                gstrExam_month = "Feb ";
                            else if (date_mm.ToString() == "3")
                                gstrExam_month = "Mar ";
                            else if (date_mm.ToString() == "4")
                                gstrExam_month = "Apr ";
                            else if (date_mm.ToString() == "5")
                                gstrExam_month = "Mar ";
                            else if (date_mm.ToString() == "6")
                                gstrExam_month = "Jun ";
                            else if (date_mm.ToString() == "7")
                                gstrExam_month = "Jul ";
                            else if (date_mm.ToString() == "8")
                                gstrExam_month = "Aug ";
                            else if (date_mm.ToString() == "9")
                                gstrExam_month = "Sep ";
                            else if (date_mm.ToString() == "10")
                                gstrExam_month = "Oct ";
                            else if (date_mm.ToString() == "11")
                                gstrExam_month = "Nov ";
                            else if (date_mm.ToString() == "12")
                                gstrExam_month = "Dec ";
                        }
                        // FpSpread1.Sheets[0].Cells[FpSpread1.Sheets[0].RowCount - 22, 0].Text = "obtained the following marks in the " + chklstest.SelectedItem.ToString() + " Conducted in "+strExam_month+"'"+date_yr;// "has secured the following  marks in ";
                        int count = 0;
                        double maxc = 0;
                        int serial_no = 0;
                        string subjname = "";
                        string subjcode = "";
                        string result = "";
                        string checkmarks = "";
                        string getmark = "";
                        /////////   modified
                        //// modify
                        string selectmark = "select distinct e.subject_no,sub.subject_name,sub.subject_code,max_mark,min_mark,marks_obtained from subjectchooser s,registration rg,exam_type e,result r, subject sub where sub.subject_no=s.subject_no and  s.subject_no=e.subject_no and s.roll_no=rg.roll_no  and e.exam_code=r.exam_code and rg.roll_no=r.roll_no and e.criteria_no='" + criteria_no + "' and r.roll_no='" + rol_no + "'";
                        hat.Clear();
                        hat.Add("rollnum", rol_no.ToString());
                        hat.Add("criteriano", criteria_no.ToString());
                        ds = dacces.select_method(selectmark, hat, "cmd");
                        if (ds.Tables[0].Rows.Count > 0)
                        {
                            for (int dscount = 0; dscount < ds.Tables[0].Rows.Count; dscount++)
                            {
                                sno++;
                                subjname = ds.Tables[0].Rows[dscount]["subject_name"].ToString();
                                minmark = ds.Tables[0].Rows[dscount]["min_mark"].ToString();
                                maxmark = ds.Tables[0].Rows[dscount]["max_mark"].ToString();
                                checkmarks = ds.Tables[0].Rows[dscount]["marks_obtained"].ToString();
                                subjcode = ds.Tables[0].Rows[dscount]["subject_code"].ToString();
                                string marks = findresult(checkmarks);
                                //magesh 27/2/18
                                string markcheck = checkmarks;
                                if (marks != "")
                                {
                                    getmark = marks;
                                    if (TextBoxnew.Text != string.Empty)
                                    {
                                        double newval = (Convert.ToDouble(TextBoxnew.Text) / Convert.ToDouble(maxmark));
                                        maxc = 0;
                                        if (getmark != "AB" && getmark != "AAA" && getmark != "EL" && getmark != "EOD" && getmark != "ML" && getmark != "SOD" && getmark != "NSS" && getmark != "NJ" && getmark != "S" && getmark != "L" && getmark != "NCC" && getmark != "HS" && getmark != "PP" && getmark != "SYOD" && getmark != "COD" && getmark != "OOD" && getmark != "OD" && getmark != "" && getmark != " " && getmark != "LA" && getmark != "" && getmark != " " && getmark != "RAA")//added on 26.07.12//Added By subburaj 21.08.2014
                                        {
                                            maxc = Convert.ToDouble(newval) * Convert.ToDouble(getmark);
                                            getmark = maxc.ToString();
                                            getmark = Math.Round(Convert.ToDouble(getmark), 2, MidpointRounding.AwayFromZero).ToString();
                                        }
                                        else
                                        {
                                            //magesh 27/2/18
                                            // getmark = markcheck;
                                            getmark = marks;
                                            //magesh 27/2/18
                                            // getmark = Math.Round(Convert.ToDouble(marks), 2, MidpointRounding.AwayFromZero).ToString();
                                            getmark = Math.Round(Convert.ToDouble(markcheck), 2,
MidpointRounding.AwayFromZero).ToString();
                                            getmark = findresult(getmark);
                                        }
                                    }
                                }
                                else
                                {
                                    getmark = checkmarks;
                                    if (TextBoxnew.Text != string.Empty)
                                    {
                                        double newval = (Convert.ToDouble(TextBoxnew.Text) / Convert.ToDouble(maxmark));
                                        maxc = 0;
                                        if (getmark != "AB" && getmark != "AAA" && getmark != "EL" && getmark != "EOD" && getmark != "ML" && getmark != "SOD" && getmark != "NSS" && getmark != "NJ" && getmark != "S" && getmark != "L" && getmark != "NCC" && getmark != "HS" && getmark != "PP" && getmark != "SYOD" && getmark != "COD" && getmark != "OOD" && getmark != "OD" && getmark != "" && getmark != " " && getmark != "LA" && getmark != "" && getmark != " " && getmark != "RAA")//added on 26.07.12//added by Subburaj  21.08.2014
                                        {
                                            maxc = Convert.ToDouble(newval) * Convert.ToDouble(getmark);
                                        }
                                        getmark = maxc.ToString();
                                        getmark = Math.Round(Convert.ToDouble(getmark), 2, MidpointRounding.AwayFromZero).ToString();
                                    }
                                }
                                if ((((Convert.ToDouble(checkmarks)) < (Convert.ToDouble(minmark)))) && Convert.ToString(checkmarks) != "-2" && Convert.ToString(checkmarks) != "-3")
                                {
                                    result = "Fail";
                                }
                                else
                                {
                                    result = "Pass";
                                }
                                dr = dtmark.NewRow();
                                dr["Sno"] = sno.ToString();
                                dr["subjectname"] = subjname;
                                dr["subjectcode"] = subjcode;
                                dr["mark"] = getmark;
                                dr["result"] = result;
                                dtmark.Rows.Add(dr);
                            }
                        }
                        
                                

                                Label lblrank = grdover.Rows[res].Cells[0].FindControl("lblresult") as Label;

                                grank = lblrank.Text; 
                                if (grank == "")
                                {
                                    grank = "-";
                                }
                            
                        int count1 = count;
                        persentmonthcal();
                        double per_tage_day;
                        string dum_tage_date = "";
                        if (Session["Hourwise"] == "1")
                        {
                            per_con_hrs = per_workingdays1;

                            per_tage_hrs = (((per_per_hrs + tot_per_hrs_spl_fals) / (per_con_hrs + tot_conduct_hr_spl_fals)) * 100);

                            if (per_tage_hrs > 100)
                            {
                                per_tage_hrs = 100;
                            }
                            per_tage_day = per_tage_hrs;
                            dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
                        }
                        if (Session["Daywise"] == "1")
                        {
                            per_tage_day = ((pre_present_date / per_workingdays) * 100);

                            if (per_tage_day > 100)
                            {
                                per_tage_day = 100;
                            }
                            dum_tage_date = String.Format("{0:0,0.00}", float.Parse(per_tage_day.ToString()));
                        }
                        if (dum_tage_date == "NaN")
                        {
                            gdum_tage_date = "0";
                        }
                        else if (dum_tage_date == "Infinity")
                        {
                            gdum_tage_date = "0";
                        }
                        else
                        {
                            gdum_tage_date = dum_tage_date;
                        }
                        con.Close();
                        if (Registration_no == "")
                        {
                            Registration_no = rol_no;
                        }
                        else
                        {
                            Registration_no = Registration_no + "-" + rol_no;
                        }

                        Bindpdf16(mydoc, Fontsmall, Fontbold, Fontbold1, dtmark, Response);

                    }//END IF ISVAL
                }//END FOR LOOP
                //for (int res = 0; res < Convert.ToInt32(FpEntry.Sheets[0].RowCount); res++)
                //{
                //    isval = 0;
                //    isval = Convert.ToInt32(FpEntry.Sheets[0].Cells[res, 1].Value);
                //    if (isval == 1)
                //    {
                //        //string roll = ht[res].ToString();
                //        string roll = FpEntry.Sheets[0].Cells[res, 2].Text;
                //        Gios.Pdf.PdfPage mypdfpage1 = mydoc.NewPage();
                //        string sex = "";
                //        string add = "select a.stud_name,a.sex,a.parent_name,a.parent_addressP,a.Streetp,a.Cityp,a.Districtp,a.parent_pincodep from applyn a,Registration r where a.app_no=r.App_No and  r.Roll_No='" + roll + "'"; //rol_no modified by Deepali  on 4.4.18
                //        DataSet ds = new DataSet();
                //        ds = dacces.select_method_wo_parameter(add, "text");
                //        if (ds.Tables[0].Rows.Count > 0)
                //        {
                //            //PdfTextArea pts0 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                //            //                           new PdfArea(mydoc, 220, 200, 400, 30), System.Drawing.ContentAlignment.MiddleLeft,"TO");
                //            //mypdfpage1.Add(pts0);
                //            PdfTextArea pts1 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                //                                        new PdfArea(mydoc, 250, 160, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, ds.Tables[0].Rows[0]["stud_name"].ToString());
                //            mypdfpage1.Add(pts1);
                //            if (Convert.ToInt32(ds.Tables[0].Rows[0]["sex"].ToString()) == 1)
                //            {
                //                sex = "D/O";
                //            }
                //            else if (Convert.ToInt32(ds.Tables[0].Rows[0]["sex"].ToString()) == 0)
                //            {
                //                sex = "S/O";
                //            }
                //            PdfTextArea pts2 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                //                                        new PdfArea(mydoc, 250, 180, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, sex + " " + "Mr." + ds.Tables[0].Rows[0]["parent_name"].ToString());
                //            mypdfpage1.Add(pts2);
                //            string address = "";
                //            string drno = ds.Tables[0].Rows[0]["parent_addressP"].ToString();
                //            string street = ds.Tables[0].Rows[0]["Streetp"].ToString();
                //            if (drno.Trim() != "" && drno != null && drno.Trim() != "-1" && drno.Trim() != "0")
                //            {
                //                address = drno;
                //            }
                //            if (street.Trim() != "" && street != null && street.Trim() != "-1" && street.Trim() != "0")
                //            {
                //                if (address != "")
                //                {
                //                    address = address + ',' + street;
                //                }
                //                else
                //                {
                //                    address = street;
                //                }
                //            }
                //            PdfTextArea pts3 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                //                                        new PdfArea(mydoc, 250, 200, 340, 40), System.Drawing.ContentAlignment.MiddleLeft, address);
                //            mypdfpage1.Add(pts3);
                //            string cityanddistrict = "";
                //            string cityp = ds.Tables[0].Rows[0]["Cityp"].ToString();
                //            string districtp = ds.Tables[0].Rows[0]["Districtp"].ToString();
                //            int distCode = 0;
                //            bool Num = int.TryParse(Convert.ToString(districtp), out distCode);
                //            if (Num)
                //            {
                //                districtp = Convert.ToString(dacces.GetFunction("select textval from textvaltable where textcriteria='dis' and college_code='" + Session["collegecode"] + "' and textcode='" + distCode + "'"));
                //            }

                //            if (cityp.Trim() != "" && cityp != null && cityp.Trim() != "-1" && cityp.Trim() != "0")
                //            {
                //                cityanddistrict = cityp;
                //            }
                //            if (districtp.Trim() != "" && districtp != null && districtp.Trim() != "-1" && districtp.Trim() != "0")
                //            {
                //                if (cityanddistrict.Trim() != "")
                //                {
                //                    cityanddistrict = cityanddistrict + ',' + districtp;
                //                }
                //                else
                //                {
                //                    cityanddistrict = districtp;
                //                }
                //            }
                //            PdfTextArea pts4 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                //                                       new PdfArea(mydoc, 250, 230, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, cityanddistrict);
                //            mypdfpage1.Add(pts4);
                //            //PdfTextArea pts5 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                //            //                           new PdfArea(mydoc, 250, 350, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, ds.Tables[0].Rows[0]["Districtp"].ToString());
                //            //mypdfpage1.Add(pts5);
                //            //PdfTextArea pts6 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                //            //                           new PdfArea(mydoc, 250, 380, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, ds.Tables[0].Rows[0]["parent_pincodep"].ToString());
                //            //mypdfpage1.Add(pts6);
                //            int pc = 280;
                //            string pin = ds.Tables[0].Rows[0]["parent_pincodep"].ToString();
                //            for (int i = 0; i < pin.Length; i++)
                //            {
                //                string code = pin[i].ToString();
                //                PdfTextArea pts6 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                //                                           new PdfArea(mydoc, pc, 250, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, code);
                //                mypdfpage1.Add(pts6);
                //                pc = pc + 25;
                //            }
                //        }
                //        PdfTextArea ptc = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                //                                           new PdfArea(mydoc, 40, 390, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, collnamenew1);
                //        PdfTextArea pts = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                //                                           new PdfArea(mydoc, 40, 410, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address1 + "  " + address2);


                //        string[] arr = pincode.Split('-');
                //        string pin1 = arr[0].ToString();
                //        int pn = 170;
                //        for (int i = 0; i < pin1.Length; i++)
                //        {
                //            string code = pin1[i].ToString();
                //            PdfTextArea p = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                //                                            new PdfArea(mydoc, pn, 440, 400, 30), System.Drawing.ContentAlignment.MiddleLeft, code);
                //            mypdfpage1.Add(p);
                //            pn = pn + 17;
                //        }
                //        mypdfpage1.Add(ptc);
                //        mypdfpage1.Add(pts);
                //        string appPath = HttpContext.Current.Server.MapPath("~");

                //        if (appPath != "")
                //        {
                //            string szPath = appPath + "/Report/";
                //            //string szFile = "Format1.pdf";
                //            //Modified By Srinath 24/9/2014
                //            string szFile = "Format1" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";
                //            //mypdfpage1.SaveToDocument();
                //            //mydoc.SaveToFile(szPath + szFile);
                //            //Response.ClearHeaders();
                //            //Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                //            //Response.ContentType = "application/pdf";
                //            //Response.WriteFile(szPath + szFile);
                //            //=============================================                  
                //        }
                //    }
                //}
            }
        }
        string RegisterNumber = Registration_no.ToString();
        string[] RNumber = RegisterNumber.Split(new char[] { '-' });

        contentDiv.InnerHtml = html.ToString();
        contentDiv.Visible = true;
    }

    public void Bindpdf16(Gios.Pdf.PdfDocument mydoc, Font Fontsmall, Font Fontbold, Font Fontbold1, DataTable dt, HttpResponse response)//added by M.SakthiPriya 02/02/2015
    {
        try
        {
            contentDiv.InnerHtml = ""; 
            int cnt;
            sno = dt.Rows.Count;
            int subno = 0;
            int pagecount = sno / 13;
            int repage = sno % 13;
            lblesr.Text = "";
            int nopages = pagecount;
            Font Fontbolds = new Font("Book Antiqua", 12, FontStyle.Bold);
            if (repage > 0)
            {
                nopages++;
            }
            if (nopages > 0)
            {
                for (int row = 0; row < nopages; row++)
                {
                    subno++;
                    Gios.Pdf.PdfPage mypdfpage = mydoc.NewPage();

                    PdfArea tete = new PdfArea(mydoc, 20, 50, 440, 730);

                    PdfRectangle pr1 = new PdfRectangle(mydoc, tete, Color.Black);
                    mypdfpage.Add(pr1);
                    PdfTextArea ptc = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                                                        new PdfArea(mydoc, 40, 70, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, collnamenew1);
                    PdfTextArea pts = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 40, 90, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address1 + "  " + address2);
                    PdfTextArea p = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 40, 110, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, address3 + "  -  " + pincode);
                    if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg")))//Aruna
                    {
                        PdfImage LogoImage = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Left_Logo.jpeg"));
                        mypdfpage.Add(LogoImage, 35, 60, 500);
                    }
                    if (File.Exists(HttpContext.Current.Server.MapPath("~/college/Right_Logo.jpeg")))//annyutha 10/10/2014
                    {
                        PdfImage LogoImage1 = mydoc.NewImage(HttpContext.Current.Server.MapPath("~/college/Right_Logo.jpeg"));
                        mypdfpage.Add(LogoImage1, 370, 60, 500);
                    }

                    html.Append("<div style='height: 1000px; width: 700px; border: 0px solid black; margin-left: 5px;margin:0px;page-break-after: always;'>");

                    html.Append("<table cellspacing='0' cellpadding='0' style='width: 700px; ' border='0'>");

                    html.Append("<tr><td style='width: 50px;'></td><td style='text-align: right;' > <img src=~/college/Left_Logo.jpeg alt='' style='height: 100px; width: 120px;' /></td><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: center;'><span style='font-size: 14px;font-weight:bold;'>" + collnamenew1 + "</span> <br><span style='font-size: 14px;font-weight:bold;'>" + address1 + "  " + address2 + "  <br>" + address3 + " - " + pincode + "<br> Department of " + ddlBranch.SelectedItem.ToString() + " </span></td><td style='text-align: right;' > <img src=~/college/Right_Logo.jpeg alt='' style='height: 100px; width: 120px;' /></td></tr><tr><td style='width: 50px;'></td><td></td><td ></td><td style='text-align: right;' ></td></tr> ");

                    html.Append(" </table>");

                    cnt = subno * sno;
                    Gios.Pdf.PdfTable table = mydoc.NewTable(Fontsmall, cnt + 1, 5, 1);
                    mypdfpage.Add(ptc);
                    mypdfpage.Add(pts);
                    mypdfpage.Add(p);
                    if (subno == 1)
                    {
                        PdfTextArea ptc2 = new PdfTextArea(Fontbolds, System.Drawing.Color.Black,
                                                            new PdfArea(mydoc, 40, 130, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Department of " + ddlBranch.SelectedItem.ToString());
                        PdfTextArea ptc3 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                            new PdfArea(mydoc, 25, 160, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Dear Sir/Madam,");
                        PdfTextArea ptc4 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                            new PdfArea(mydoc, 40, 180, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Sub:Progress Report-Test   (" + test + ")" + "  " + "& Attendance - Intimation Reg");
                        string get_dept_acronym = GetFunction("select dept_acronym from department where dept_name='" + ddlBranch.SelectedItem.ToString() + "'");
                        PdfTextArea ptc5 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                            new PdfArea(mydoc, 35, 200, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Your Son/Daughter" + " " + name + "" + "[" + rol_no + "]" + "  " + "Student of " + "  " + gsem3 + "  Semester " + degree + " " + get_dept_acronym + " ");
                        PdfTextArea ptc6 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                            new PdfArea(mydoc, 35, 220, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Obtained the following marks in the" + " " + test + "  " + "Conducted in" + "  " + gstrExam_month + "'" + gdate_yr);
                        mypdfpage.Add(ptc2);
                        mypdfpage.Add(ptc3);
                        mypdfpage.Add(ptc4);
                        mypdfpage.Add(ptc5);
                        mypdfpage.Add(ptc6);
                        table.SetBorders(Color.Black, 1, BorderType.CompleteGrid);
                        table.Columns[0].SetWidth(30);
                        table.Columns[1].SetWidth(50);
                        table.Columns[2].SetWidth(180);
                        table.Columns[3].SetWidth(40);
                        table.Columns[4].SetWidth(40);
                        table.CellRange(0, 0, 0, 4).SetFont(Fontbold1);
                        table.Cell(0, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table.Cell(0, 0).SetContent("S.No");
                        table.Cell(0, 1).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table.Cell(0, 1).SetContent("Subject code");
                        table.Cell(0, 2).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table.Cell(0, 2).SetContent("Subject Name");
                        table.Cell(0, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table.Cell(0, 3).SetContent("Marks out of" + TextBoxnew.Text);
                        table.Cell(0, 4).SetContentAlignment(ContentAlignment.MiddleCenter);
                        table.Cell(0, 4).SetContent("Remarks");


                        html.Append("<table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 80px;' border='0'>");

                        html.Append("<tr><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'><span style='font-weight:bold;'><br> Dear Sir/Madam, </span> <span ><br>&nbsp&nbsp&nbsp&nbsp Sub:Progress Report-Test   (" + test + ")" + "  " + "& Attendance - Intimation Reg <br>&nbsp&nbsp&nbsp&nbsp Your Son/Daughter" + " " + name + "" + "[" + rol_no + "]" + "  " + "Student of " + "  " + gsem3 + "  Semester " + degree + " " + get_dept_acronym + " </span><span style='font-size: 14px;font-weight:bold;'><br> MARKS SECURED :<br>&nbsp&nbsp&nbsp&nbsp Obtained the following marks in the" + " " + test + "  " + "Conducted in" + "  " + gstrExam_month + "'" + gdate_yr + " </span></td></tr> ");

                        html.Append(" </table>");



                        html.Append("<table style='width: 95%; margin-left: 80px; margin-top: 0px; margin-bottom: 2px; font-size: 12px;'cellpadding='5' cellspacing='0'>");
                        html.Append("<tr>");
                        html.Append("<td  style='border: thin solid #000000;' align='center'; font-weight:'bold';> S.No </td>");

                        html.Append("<td  style='border: thin solid #000000;' align='center'; font-weight:'bold';> Subject code </td>");

                        html.Append("<td  style='border: thin solid #000000;' align='center'; font-weight:'bold';> Subject Name </td>");

                        html.Append("<td  style='border: thin solid #000000;' align='center'; font-weight:'bold';> Marks out of" + TextBoxnew.Text + "</td>");

                        html.Append("<td  style='border: thin solid #000000;' align='center'; font-weight:'bold';> Remarks </td>");
                        html.Append(" </tr>");
                    }
                    int val = 0;
                    if (subno == 1)
                    {
                        if (cnt < 13)
                        {
                            for (int i = 0; i < cnt; i++)
                            {
                                val++;
                                int snor = Convert.ToInt16(dt.Rows[i]["sno"]);
                                table.Cell(val, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table.Cell(val, 0).SetContent(snor);
                                string scode = dt.Rows[i]["subjectcode"].ToString();
                                table.Cell(val, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                table.Cell(val, 1).SetContent(scode);
                                string sname = dt.Rows[i]["subjectname"].ToString();
                                table.Cell(val, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                table.Cell(val, 2).SetContent(sname);
                                string mark = dt.Rows[i]["mark"].ToString();
                                table.Cell(val, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table.Cell(val, 3).SetContent(mark);
                                string result = dt.Rows[i]["result"].ToString();
                                table.Cell(val, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                table.Cell(val, 4).SetContent(result);

                                html.Append("<tr>");
                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: center;'>");
                                html.Append("" + Convert.ToInt16(dt.Rows[i]["sno"]) + "");
                                html.Append("</td>");

                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: left;'>");
                                html.Append("" + dt.Rows[i]["subjectcode"].ToString() + "");
                                html.Append("</td>");

                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: left;'>");
                                html.Append("" + dt.Rows[i]["subjectname"].ToString() + "");
                                html.Append("</td>");

                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: center;'>");
                                html.Append("" + dt.Rows[i]["mark"].ToString() + "");
                                html.Append("</td>");

                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: left;'>");
                                html.Append("" + dt.Rows[i]["result"].ToString() + "");
                                html.Append("</td>");

                                html.Append(" </tr>");

                            }

                            html.Append(" </table>");
                            int xcout = (val * 20) + 250;
                            PdfTextArea pt123dr = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                           new PdfArea(mydoc, 390, xcout + 20, 500, 30), System.Drawing.ContentAlignment.MiddleLeft, "Rank:" + " " + grank);
                            PdfTextArea ptc7 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 35, xcout + 40, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "His/Her Perfomance is GOOD/SATISFACTORY/UNSATISFACTORY");
                            PdfTextArea ptc8 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, 35, xcout + 60, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance particulars");
                            PdfTextArea ptc9 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, 35, xcout + 80, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance as on  : " + " " + TextBox1.Text);


                            html.Append("<table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 80px;' border='0'>");

                            html.Append("<tr><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'><span><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp  Rank:" + " " + grank + "<br> <br>His/Her Perfomance is GOOD/SATISFACTORY/UNSATISFACTORY<br><br>Attendance particulars<br><br>Attendance as on  : " + " " + TextBox1.Text + "");




                            //if (Session["Hourwise"] == "1")
                            //{
                            //    PdfTextArea ptc110 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                            //                              new PdfArea(mydoc, 35, xcout + 100, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of Working Hours : " + " " + Convert.ToString(per_con_hrs + tot_conduct_hr_spl_fals));
                            //    PdfTextArea ptc111 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                            //                              new PdfArea(mydoc, 35, xcout + 140, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of Hours Attend : " + " " + Convert.ToString(per_per_hrs + tot_per_hrs_spl_fals));
                            //    PdfTextArea ptc112 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                            //                              new PdfArea(mydoc, 35, xcout + 180, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance Percentage in Hours: " + " " + gdum_tage_date.ToString());
                            //    mypdfpage.Add(ptc110);
                            //    mypdfpage.Add(ptc111);
                            //    mypdfpage.Add(ptc112);
                            //}
                            if (Session["Daywise"] == "1")
                            {
                                string h = dum_tage_date.ToString();
                                PdfTextArea ptc10 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                          new PdfArea(mydoc, 35, xcout + 100, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of Working Days : " + " " + per_workingdays.ToString());
                                PdfTextArea ptc11 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                          new PdfArea(mydoc, 35, xcout + 120, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of Days attend : " + " " + pre_present_date.ToString());
                                PdfTextArea ptc12 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                          new PdfArea(mydoc, 35, xcout + 140, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance Percentage in Days: " + " " + gdum_tage_date.ToString());
                                mypdfpage.Add(ptc10);
                                mypdfpage.Add(ptc11);
                                mypdfpage.Add(ptc12);

                                html.Append("<br><br>Number of Working Days : " + " " + per_workingdays.ToString() + "<br><br>Number of Days attend : " + " " + pre_present_date.ToString() + "<br><br> Attendance Percentage in Days: " + " " + gdum_tage_date.ToString() + " ");
                            }
                            PdfTextArea ptc13 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                     new PdfArea(mydoc, 35, xcout + 220, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "You are Requested to meet the HOD/Counselor in this regard on or before............");
                            PdfTextArea ptc14 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                     new PdfArea(mydoc, 35, xcout + 300, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "*** Please intimate your E-Mail ID to enable the college to send further communication");

                            html.Append("<br><br>You are Requested to meet the HOD/Counselor in this regard on or before............ ");





                            if (txtnote.Text.ToString().Trim() != "")
                            {
                                PdfTextArea ptcnote = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 35, xcout + 230, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Note :");
                                mypdfpage.Add(ptcnote);
                                ptcnote = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                       new PdfArea(mydoc, 35, xcout + 250, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, txtnote.Text.ToString());
                                mypdfpage.Add(ptcnote);

                                html.Append("<br><br>Note:" + txtnote.Text.ToString() + "");
                            }
                            PdfTextArea ptc15 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                    new PdfArea(mydoc, 45, 700, 200, 30), System.Drawing.ContentAlignment.MiddleLeft, "Counselor");
                            PdfTextArea ptc16 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                    new PdfArea(mydoc, 200, 700, 400, 30), System.Drawing.ContentAlignment.MiddleCenter, "Class Advisor");
                            //PdfTextArea ptc17 = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                            //                        new PdfArea(mydoc, 235, 700, 200, 30), System.Drawing.ContentAlignment.MiddleRight, "PRINCIPAL");
                            PdfTextArea ptc18 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                    new PdfArea(mydoc, 35, 740, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Parent/Guardian Signature------------------");



                            html.Append("<br><br>Counselor&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp Class Advisor <br><br><br>*** Please intimate your E-Mail ID to enable the college to send further communication<br>Parent/Guardian Signature------------------");

                            html.Append("</span></td></tr> ");
                            html.Append(" </table>");

                            html.Append("</div>");






                            Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 35, 250, 400, 800));
                            mypdfpage.Add(newpdftabpage);
                            mypdfpage.Add(pt123dr);
                            mypdfpage.Add(ptc7);
                            mypdfpage.Add(ptc8);
                            mypdfpage.Add(ptc9);
                            mypdfpage.Add(ptc13);
                            mypdfpage.Add(ptc14);
                            mypdfpage.Add(ptc15);
                            mypdfpage.Add(ptc16);
                            // mypdfpage.Add(ptc17);
                            mypdfpage.Add(ptc18);
                        }
                        else
                        {
                            for (int i = 0; i < cnt; i++)
                            {
                                val++;
                                int snor = Convert.ToInt16(dt.Rows[i]["sno"]);
                                table.Cell(val, 0).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table.Cell(val, 0).SetContent(snor);
                                string scode = dt.Rows[i]["subjectcode"].ToString();
                                table.Cell(val, 1).SetContentAlignment(ContentAlignment.MiddleLeft);
                                table.Cell(val, 1).SetContent(scode);
                                string sname = dt.Rows[i]["subjectname"].ToString();
                                table.Cell(val, 2).SetContentAlignment(ContentAlignment.MiddleLeft);
                                table.Cell(val, 2).SetContent(sname);
                                string mark = dt.Rows[i]["mark"].ToString();
                                table.Cell(val, 3).SetContentAlignment(ContentAlignment.MiddleCenter);
                                table.Cell(val, 3).SetContent(mark);
                                string result = dt.Rows[i]["result"].ToString();
                                table.Cell(val, 4).SetContentAlignment(ContentAlignment.MiddleLeft);
                                table.Cell(val, 4).SetContent(result);


                                html.Append("<tr>");
                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: center;'>");
                                html.Append("" + snor + "");
                                html.Append("</td>");

                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: left;'>");
                                html.Append("" + dt.Rows[i]["subjectcode"].ToString() + "");
                                html.Append("</td>");

                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: left;'>");
                                html.Append("" + dt.Rows[i]["subjectname"].ToString() + "");
                                html.Append("</td>");

                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: center;'>");
                                html.Append("" + dt.Rows[i]["mark"].ToString() + "");
                                html.Append("</td>");

                                html.Append("<td class='style1' style='border: thin solid #000000;");
                                html.Append("text-align: left;'>");
                                html.Append("" + dt.Rows[i]["result"].ToString() + "");
                                html.Append("</td>");

                                html.Append(" </tr>");

                            }
                            html.Append(" </table>");
                            int xcout = (val * 20) + 250;
                            Gios.Pdf.PdfTablePage newpdftabpage = table.CreateTablePage(new Gios.Pdf.PdfArea(mydoc, 35, 250, 400, 800));
                            mypdfpage.Add(newpdftabpage);
                            PdfTextArea pt123dr = new PdfTextArea(Fontbold1, System.Drawing.Color.Black,
                                                           new PdfArea(mydoc, 390, xcout + 20, 500, 30), System.Drawing.ContentAlignment.MiddleRight, "Rank:" + " " + grank);
                            PdfTextArea ptc7 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                   new PdfArea(mydoc, 35, xcout + 40, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "His/Her Perfomance is GOOD / SATISFACTORY / UNSATISFACTORY");
                            mypdfpage.Add(ptc7);
                            mypdfpage.Add(pt123dr);

                            html.Append("<table cellspacing='0' cellpadding='0' style='width: 700px; margin-left: 80px;' border='0'>");

                            html.Append("<tr><td style='font-size: 12px; font-family: Book Antiqua;  border: 0px solid black; text-align: left;'><span><br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp  Rank:" + " " + grank + "<br> <br>His/Her Perfomance is GOOD/SATISFACTORY/UNSATISFACTORY");


                        }
                    }
                    if (subno > 1)
                    {
                        int xcout = (val * 20) + 250;
                        PdfTextArea ptc8 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                                                     new PdfArea(mydoc, 35, xcout + 60, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance particulars");
                        PdfTextArea ptc9 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                  new PdfArea(mydoc, 35, xcout + 80, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance as on : " + " " + TextBox1.Text);


                        html.Append("<br><br>Attendance particulars<br><br>Attendance as on  : " + " " + TextBox1.Text + "");
                        //if (Session["Hourwise"] == "1")
                        //{
                        //    PdfTextArea ptc1101 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                        //                              new PdfArea(mydoc, 35, xcout + 100, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of working Period : " + " " + Convert.ToString(per_con_hrs + tot_conduct_hr_spl_fals));
                        //    PdfTextArea ptc1111 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                        //                              new PdfArea(mydoc, 35, xcout + 140, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of Period attend : " + " " + Convert.ToString(per_per_hrs + tot_per_hrs_spl_fals));
                        //    PdfTextArea ptc1121 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                        //                              new PdfArea(mydoc, 35, xcout + 180, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance Percentage in Period: " + " " + gdum_tage_date.ToString());
                        //    mypdfpage.Add(ptc1101);
                        //    mypdfpage.Add(ptc1111);
                        //    mypdfpage.Add(ptc1121);
                        //}
                        if (Session["Daywise"] == "1")
                        {
                            PdfTextArea ptc101 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, 35, xcout + 100, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of working days : " + " " + per_workingdays.ToString());
                            PdfTextArea ptc111 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, 35, xcout + 120, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Number of days attend : " + " " + pre_present_date.ToString());
                            PdfTextArea ptc121 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                      new PdfArea(mydoc, 35, xcout + 140, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Attendance Percentage in Days: " + " " + gdum_tage_date.ToString());
                            mypdfpage.Add(ptc101);
                            mypdfpage.Add(ptc111);
                            mypdfpage.Add(ptc121);


                            html.Append("<br><br>Number of Working Days : " + " " + per_workingdays.ToString() + "<br><br>Number of Days attend : " + " " + pre_present_date.ToString() + "<br><br> Attendance Percentage in Days: " + " " + gdum_tage_date.ToString() + " ");
                        }
                        PdfTextArea ptc13 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                 new PdfArea(mydoc, 35, xcout + 220, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "You are Requested to meet the HOD/Counselor in this recard on or before............");

                        html.Append("<br><br>You are Requested to meet the HOD/Counselor in this regard on or before............ ");
                        if (txtnote.Text.ToString().Trim() != "")
                        {
                            PdfTextArea ptcnote = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                   new PdfArea(mydoc, 35, xcout + 230, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Note :");
                            mypdfpage.Add(ptcnote);
                            ptcnote = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                   new PdfArea(mydoc, 35, xcout + 250, 400, 40), System.Drawing.ContentAlignment.MiddleLeft, txtnote.Text.ToString());
                            mypdfpage.Add(ptcnote);

                            html.Append("<br><br>Note:" + txtnote.Text.ToString() + "");
                        }

                        PdfTextArea ptc14 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                 new PdfArea(mydoc, 35, xcout + 300, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "*** Please intimate your E-Mail ID to enable the college to send further communication");
                        PdfTextArea ptc15 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                                                new PdfArea(mydoc, 45, 700, 200, 30), System.Drawing.ContentAlignment.TopLeft, "Counselor");
                        PdfTextArea ptc16 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                                                new PdfArea(mydoc, 200, 700, 400, 30), System.Drawing.ContentAlignment.TopLeft, "Class Advisor");
                        //PdfTextArea ptc17 = new PdfTextArea(Fontbold, System.Drawing.Color.Black,
                        //                        new PdfArea(mydoc, 235, 700, 200, 30), System.Drawing.ContentAlignment.TopLeft, "PRINCIPAL");
                        PdfTextArea ptc18 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                                new PdfArea(mydoc, 35, 740, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Parent/Guardian Signature------------------");


                        html.Append("<br><br>Counselor&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp Class Advisor <br><br><br>*** Please intimate your E-Mail ID to enable the college to send further communication<br>Parent/Guardian Signature------------------");

                        html.Append("</span></td></tr> ");
                        html.Append(" </table>");

                        html.Append("</div>");






                        mypdfpage.Add(ptc8);
                        mypdfpage.Add(ptc9);
                        mypdfpage.Add(ptc13);
                        mypdfpage.Add(ptc14);
                        mypdfpage.Add(ptc15);
                        mypdfpage.Add(ptc16);
                        // mypdfpage.Add(ptc17);
                        mypdfpage.Add(ptc18);


                    }

                    contentDiv.InnerHtml = html.ToString();
                    contentDiv.Visible = true;

                    ScriptManager.RegisterStartupScript(this, GetType(), "btn_print", "PrintDiv();", true);
                    if (txtnotes.Text != "")
                    {
                        PdfTextArea ptc145 = new PdfTextArea(Fontsmall, System.Drawing.Color.Black,
                                             new PdfArea(mydoc, 25, 590, 570, 30), System.Drawing.ContentAlignment.MiddleLeft, "Notes:" + txtnotes.Text);
                        mypdfpage.Add(ptc145);
                    }

                    string appPath = HttpContext.Current.Server.MapPath("~");
                    if (appPath != "")
                    {

                        //string szPath = appPath + "/Report/";
                        ////string szFile = "Format1.pdf";
                        ////Modified By Srinath 24/9/2014
                        //string szFile = "Format1" + DateTime.Now.ToString("ddMMyyyy") + DateTime.Now.ToString("HHMMss") + ".pdf";
                        //mypdfpage.SaveToDocument();
                        //mydoc.SaveToFile(szPath + szFile);
                        //Response.ClearHeaders();
                        //Response.AddHeader("Content-Disposition", "attachment; filename=" + szFile);
                        //Response.ContentType = "application/pdf";
                        //Response.WriteFile(szPath + szFile);
                        //=============================================
                    }
                }
            }
        }
        catch (Exception ex)
        {
            lblesr.Text = ex.ToString();
        }
    }

    protected void chkselectall_CheckedChanged(object sender, EventArgs e)
    {

        var checkbox = grdover.Rows[0].Cells[0].FindControl("chkselectall") as CheckBox;

        for (int i = 1; i < grdover.Rows.Count; i++)
        {


            if (checkbox.Checked == true)
            {
                var checkbox1 = grdover.Rows[i].Cells[0].FindControl("lbl_cb") as CheckBox;
                checkbox1.Checked = true;

            }
            else
            {
                var checkbox1 = grdover.Rows[i].Cells[0].FindControl("lbl_cb") as CheckBox;
                checkbox1.Checked = false;
            }
        }


    }
    public override void VerifyRenderingInServerForm(Control control)
    { }
}