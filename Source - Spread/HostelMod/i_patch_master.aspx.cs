using System;
using System.Collections.Generic;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;
using System.Collections;
using InsproDataAccess;

public partial class i_patch_master : System.Web.UI.Page
{
    DAccess2 d2 = new DAccess2();
    DataSet ds = new DataSet();
    DataSet ds1 = new DataSet();
    InsproDirectAccess dirAcc = new InsproDirectAccess();
    InsproStoreAccess storedPAccess = new InsproStoreAccess();

    string q1 = string.Empty;
    static Hashtable hashtableselect = new Hashtable();
    string usercode = string.Empty;
    string collegecode1 = string.Empty;
    string collegecode = string.Empty;
    string singleuser = string.Empty;
    string group_user = string.Empty;

    string tableName = string.Empty;
    string columnName = string.Empty;
    string dataType = string.Empty;
    string executeQuery = string.Empty;
    byte procedureType = 0;
    string procedureName = string.Empty;
    string procedureQ = string.Empty;

    protected void Page_Load(object sender, EventArgs e)
    {
        errmsg.Visible = false;
        if (!IsPostBack)
        {
            hashvalue();
            bindgrid();
            forginkey();
        }
    }

    protected void bindgrid()
    {
        try
        {
            ds.Clear();
            q1 = string.Empty;
            DataTable dt = new DataTable();
            DataRow dr;
            dt.Columns.Add("Module Name");
            dt.Columns.Add("Client Updated Date");
            dt.Columns.Add("Modified Date");
            string mod_date = DateTime.Now.Date.ToString("dd/MM/yyyy");
            string selctqury = " select ModuleName,convert(varchar(20),UpdatedDate,103) UpdatedDate,convert(varchar(20),ClientUpdatedDate,103) ClientUpdatedDate from IPatchStatus ";
            ds.Clear();
            ds = d2.select_method_wo_parameter(selctqury, "text");
            if (ds.Tables.Count > 0 && ds.Tables[0].Rows.Count > 0)
            {
                for (int i = 0; i < ds.Tables[0].Rows.Count; i++)
                {
                    dr = dt.NewRow();
                    dr[0] = Convert.ToString(ds.Tables[0].Rows[i]["ModuleName"]);
                    dr[1] = Convert.ToString(ds.Tables[0].Rows[i]["ClientUpdatedDate"]);
                    dr[2] = Convert.ToString(ds.Tables[0].Rows[i]["UpdatedDate"]);
                    dt.Rows.Add(dr);
                }
            }
            if (dt.Rows.Count > 0)
            {
                patchgrid.DataSource = dt;
                patchgrid.DataBind();
                patchgrid.Visible = true;
            }
            else
            {
                patchgrid.Visible = false;
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    protected void lb2_Click(object sender, EventArgs e)
    {
        try
        {
            Session.Abandon();
            Session.Clear();
            Session.RemoveAll();
            System.Web.Security.FormsAuthentication.SignOut();
            Response.Redirect("~/Default.aspx", false);
        }
        catch
        {
        }
    }

    protected void btn_errorclose_Click(object sender, EventArgs e)
    {
        alertmessage.Visible = false;
    }

    protected void btn_alrt_ok_Click(object sender, EventArgs e)
    {
        //staffdetailinsert();
    }

    protected void gridOnclick(object sender, EventArgs e)
    {
        try
        {
            //query_creation();
            string modulename = string.Empty;
            string patchname = string.Empty;
            string btn_download = string.Empty;
            int row = rowIndxClicked();
            ViewState["patchname"] = null;
            modulename = ((patchgrid.Rows[row].FindControl("lblModul_name") as Label).Text);
            patchname = ((patchgrid.Rows[row].FindControl("lbl_patchname") as Label).Text);
            btn_download = ((patchgrid.Rows[row].FindControl("lbl_modifiy_date") as Label).ID);
            forginkey();
            if (modulename == "Finance")
            {
                //finance();
                finMasterTables();
                financeStoreProcedure();
            }
            if (modulename == "Academic")
            {
                acdamic();
                acdamic2();
                acdamic3();
                acdamic4();
                AcdQuery();
                AcdAltQuery();
                AcademicProceess();
                alumini();
                LatestAlterQueryForAcademic();
                SastrAlterQuery();
                Timetablequery();
            }
            if (modulename == "FeedBack")
            {
                FB_query_creation();
                comman();
            }
            if (modulename == "Inventory")
            {
                Inventory();
            }
            if (modulename == "Hostel")
            {
                hostelquery();
            }
            if (modulename == "Request")
            {
                request();
            }
            if (modulename == "SMS")
            {
                sms();
                sms1_3();
                sms4();
            }
            if (modulename == "COE")
            {
                COE();
                COE1();
                COE3rd();
                COE4TH();
                COEPROCEES();
            }
            if (modulename == "Question")
            {
                questionquery();
            }
            if (modulename == "HR")
            {
                HR();
                hr1();
                hr3();
                hr4();
            }
            if (modulename == "Security")
            {
                security_3();
                security4();
            }
            if (modulename == "Transport")
            {
                transport();
            }
            if (modulename == "Library")
            {
                library();
                library1_3();
                library4();
            }
        }
        catch
        {
        }
    }

    public void forginkey()
    {
        try
        {
            string forgin = string.Empty;
            string ledgermaster = string.Empty;
            ledgermaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IPatchStatus'");
            if (ledgermaster == "0")
            {
                forgin = " CREATE TABLE IPatchStatus (ModuleName nvarchar(20),UpdatedDesc nvarchar(300),UpdatedDate Datetime,ClientUpdatedDate Datetime)";
            }
            if (forgin != "")
            {
                int create_forginkeytbl = d2.update_method_wo_parameter(forgin, "Text");
            }
            forgin = string.Empty;
            ledgermaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_HeaderMaster'");
            if (ledgermaster == "0")
            {
                forgin = " CREATE Table FM_HeaderMaster(HeaderPK Bigint identity(1,1) CONSTRAINT PRHeaderMas PRIMARY KEY,HeaderAcr nvarchar(10),HeaderName nvarchar(100),HeaderType tinyint,Purpose nvarchar(300),PayInchargeStaff1 nvarchar(30),PayInchargeStaff2 nvarchar(30),PayInchargeStaff3 nvarchar(30),RcptInchargeStaff1 nvarchar(30),CollegeCode int)";
            }
            if (forgin != "")
            {
                int create_forginkeytbl = d2.update_method_wo_parameter(forgin, "Text");
            }
            //string FinYearMaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_FinYearMaster'");
            //if (FinYearMaster == "0")
            //{
            //    forgin = forgin + " CREATE TABLE FM_FinYearMaster(FinYearPK int IDENTITY(1,1) CONSTRAINT PKFinYear PRIMARY KEY NOT NULL,FinYearAcr nvarchar(10) NOT NULL,FinYearName nvarchar(100),FinYearStart Datetime,FinYearEnd Datetime,CollegeCode int)";
            //}
            //if (forgin != "")
            //{
            //    int create_forginkeytbl = d2.update_method_wo_parameter(forgin, "Text");
            //}
            ledgermaster = string.Empty;
            forgin = string.Empty;
            ledgermaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_FinGroupMaster'");
            if (ledgermaster == "0")
            {
                forgin = " CREATE TABLE FM_FinGroupMaster(FinGroupPK int IDENTITY(1,1) CONSTRAINT PKFinGroup PRIMARY KEY,GroupName nvarchar(50),GroupDesc nvarchar(100),ParentCode int,CollegeCode int)";
            }
            if (forgin != "")
            {
                int create_forginkeytbl = d2.update_method_wo_parameter(forgin, "Text");
            }
            ledgermaster = string.Empty;
            forgin = string.Empty;
            ledgermaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_LedgerMaster'");
            if (ledgermaster == "0")
            {
                forgin = " CREATE Table FM_LedgerMaster(LedgerPK Bigint identity(1,1) CONSTRAINT PRLedgerMas PRIMARY KEY,LedgerAcr nvarchar(20),LedgerName nvarchar(100),ConvertLedgerName nvarchar(100),LedgerMode Bit,LedgerType tinyint,Priority int,HeaderFK Bigint FOREIGN KEY References FM_HeaderMaster(HeaderPK),FinGroupFK Int FOREIGN KEY References FM_FinGroupMaster(FinGroupPK),Purpose nvarchar(300),OpeningCredit Decimal(12,2),OpeningDebit Decimal(12,2),CollegeCode int)";
            }
            if (forgin != "")
            {
                int create_forginkeytbl = d2.update_method_wo_parameter(forgin, "Text");
            }
            ledgermaster = string.Empty;
            forgin = string.Empty;
            ledgermaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_FinBankMaster'");
            if (ledgermaster == "0")
            {
                forgin = " CREATE TABLE FM_FinBankMaster(BankPK int identity(1,1) CONSTRAINT PKBMaster PRIMARY KEY,BankCode nvarchar(20),BankName nvarchar(100),BankBranch nvarchar(100),AccStartDate Datetime,AccType tinyint,AccNo nvarchar(30),AccHolderName nvarchar(100),Address1 nvarchar(100),Street nvarchar(100),City nvarchar(100),District numeric,State numeric,Country numeric,PinCode nvarchar(6),PhoneNo nvarchar(30),MobileNo nvarchar(30),FaxNo nvarchar(30),WebSite nvarchar(100),Email nvarchar(50),SignAuthorityStaff1 nvarchar(100),SignAuthorityStaff2 nvarchar(100),RTGSCode nvarchar(20),MCRCode nvarchar(20),IFSCCode nvarchar(30),CollegeCode int)";
            }
            if (forgin != "")
            {
                int create_forginkeytbl = d2.update_method_wo_parameter(forgin, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void acdamic()
    {
        try
        {
            string find_tablename = string.Empty;
            string acd_create = string.Empty;
            string getval = string.Empty;
            string rmrkdetail = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RemarksDetail'");
            if (rmrkdetail == "0")
            {
                acd_create = " CREATE TABLE [dbo].[RemarksDetail]([RollNo] [nvarchar] (25) NOT NULL ,[Semester] [smallint] NULL , [RemarkBy] [nvarchar] (50) NOT NULL ,[RemarkDetail] [nvarchar] (200) NULL ,[Entry_Code] [numeric](18, 0) IDENTITY (1, 1) NOT NULL) ON [PRIMARY]";
            }
            string batchyr = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='syll_batchYear'");
            if (batchyr == "0")
            {
                acd_create = acd_create + " create table dbo.syll_batchYear ( syll_code int , batch_year int)";
            }
            string Fee_degree_match = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Fee_degree_match'");
            if (Fee_degree_match == "0")
            {
                acd_create = acd_create + " create table Fee_degree_match(College_code int,FeeCategory bigint,Degree_code bigint)";
            }
            if (Fee_degree_match != "0")
            {
                getval = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Fee_degree_match' AND COLUMN_NAME = 'monthCode'");
                if (getval == "0")
                    acd_create = acd_create + " alter table Fee_degree_match add monthCode int";
            }
            //added by sudhagar 08-12-2016
            getval = string.Empty;
            string deg = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Degree'");
            if (deg != "0")
            {
                getval = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='Degree' AND COLUMN_NAME = 'isFullTime'");
                if (getval == "0")
                    acd_create = acd_create + " alter table Degree add isFullTime tinyint not null constraint DF_Degree_isFullTime Default 0";
            }
            getval = string.Empty;
            string examtype = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exam_type'");
            if (examtype != "0")
            {
                getval = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_type' AND COLUMN_NAME = 'durationNew'");
                if (getval == "0")
                    acd_create = acd_create + " alter table exam_type add durationNew varchar(100) constraint DF_exam_type_durationNew default  '00:00:00'  not null";
            }
            ///////////////
            string shdul_mstr = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IMScheduleMaster'");
            if (shdul_mstr == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[IMScheduleMaster] ([tId] [int] IDENTITY (1, 1) NOT NULL ,[tName] [char] (15) NOT NULL ,[tOption] [tinyint] NOT NULL ,[tSDate] [datetime] NULL ,[tSTime] [datetime] NULL ,[tEDate] [datetime] NULL ,[NDigest] [int] NULL ,[LastUpDate] [datetime] NULL ,[TFreq] [int] NOT NULL ,[BisEnabled] [bit] NOT NULL ,[WhichTask] [nvarchar] (10) NULL , [BatchYear] [nvarchar] (10) NULL ,[DegreeCode] [nvarchar] (250) NULL ,[StrSubjects] [nvarchar] (500) NULL ,[CollegeCode] [int] NULL) ON [PRIMARY]";
            }
            string montlyshdul = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IMMonthlySchedule'");
            if (montlyshdul == "0")
            {
                acd_create = acd_create + "  CREATE TABLE [dbo].[IMMonthlySchedule] ( [tid] [int] NULL , [tdays] [tinyint] NULL , [tWeek] [tinyint] NULL , [tday] [tinyint] NULL) ON [PRIMARY]";
            }
            string msgper = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='UMessageToPar'");
            if (msgper == "0")
            {
                acd_create = acd_create + "  CREATE TABLE [dbo].[UMessageToPar] ([tid] [int] NULL ,[Rno] [nvarchar] (20) NULL ,[Name] [nvarchar] (50) NULL ,[PcellMsg] [nvarchar] (200) NULL ,[PmailMsg] [nvarchar] (300) NULL ,[ScellMsg] [nvarchar] (200) NULL ,[SmailMsg] [nvarchar] (300) NULL , [Subject] [nvarchar] (50) NULL ,[SenderName] [nvarchar] (50) NULL ,[SenderMail] [nvarchar] (50) NULL , [BatchYear] [nvarchar] (10) NULL) ON [PRIMARY]";
            }
            string msgtomen = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='UMessegeToMan'");
            if (msgtomen == "0")
            {
                acd_create = acd_create + "   CREATE TABLE [dbo].[UMessegeToMan] ([tid] [int] NULL ,[Uid] [int] NULL ,[CorresName] [nvarchar] (50) NULL ,[CellNo] [nvarchar] (20) NULL , [Mail] [nvarchar] (50) NULL ,[CellMsg] [nvarchar] (200) NULL ,[MailMsg] [nvarchar] (200) NULL ,[Subject] [nvarchar] (50) NULL ,[SenderName] [nvarchar] (50) NULL , [SenderMail] [nvarchar] (50) NULL) ON [PRIMARY]";
            }
            string interoffic = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='interofficememo'");
            if (interoffic == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[interofficememo] ([issue_dept] [nvarchar] (50) NULL ,[issue_to] [nvarchar] (50) NULL ,[issue_date] [datetime] NULL ,[memo_content] [nvarchar] (3000) NULL)";
            }
            string adrsbook = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='addressbook'");
            if (adrsbook == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[addressbook] ([category] [nvarchar] (50) NULL ,[vip_name] [nvarchar] (50) NULL ,[address1] [nvarchar] (100) NULL ,[address2] [nvarchar] (100) NULL ,[address3] [nvarchar] (100) NULL ,[pincode] [numeric](18, 0) NULL ,[phone] [nvarchar] (100) NULL ,[email] [nvarchar] (50) NULL ,[website] [nvarchar] (50) NULL ,[fax] [nvarchar] (100) NULL)";
            }
            string IntnshipDept = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Internship_Dept'");
            if (IntnshipDept == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[Internship_Dept] ([dept_code] [numeric](18, 0) IDENTITY (1, 1) NOT NULL ,  [dept_name] [nvarchar] (50) NULL ,   [Allow_Leave] [numeric](18, 0) NULL , [College_code] [numeric](18, 0) NULL)";
            }
            string internshipdetail = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Internship_details'");
            if (internshipdetail == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[Internship_details] ([Roll_no] [nvarchar] (50)  NULL , [Dept_code] [numeric](18, 0) NULL ,[from_date] [datetime] NULL , [to_date] [datetime] NULL , [Codeno] [numeric](18, 0) IDENTITY (1, 1) NOT NULL ,  [join_date] [datetime] NULL ,    [Extn_flag] [bit] NULL ,    [no_of_days] [numeric](18, 0) NULL)";
            }
            string leavedetail = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Student_leave_details'");
            if (leavedetail == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[Student_leave_details] ( [Roll_no] [nvarchar] (50)   NULL ,    [Dept_Code] [numeric](18, 0) NULL ,    [fdate] [datetime] NULL ,    [Tdate] [datetime] NULL ,    [adate] [datetime] NULL ,   [Status] [nvarchar] (50)   NULL ,    [Reason] [nvarchar] (50)   NULL ,    [no_of_days] [numeric](18, 0) NULL ,    [college_code] [numeric](18, 0) NULL ,    [lno] [numeric](18, 0) IDENTITY (1, 1) NOT NULL)";
            }
            string markdetail = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='mark_details'");
            if (markdetail == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[mark_details] ([roll_no] [nvarchar] (50) ,[subject_name] [nvarchar] (50) ,[subject_code] [numeric](18, 0) NULL ,[month_year] [datetime] NULL ,[theory_oral] [float] NULL ,[theory_practical] [float] NULL ,[clinical] [float] NULL ,[total] [float] NULL ,[result] [nvarchar] (50)  ,[maxTotal] [float] NULL ,[minTotal] [float] NULL ,[sem_year] [numeric](18, 0) NULL)";
            }
            string circular = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Circular'");
            if (circular == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[Circular] ([Cir_Id] [numeric](18, 0) IDENTITY (1, 1) NOT NULL ,[Academic_Year] [numeric](18, 0) NULL ,[Vaccation] [nvarchar] (50)  NULL ,[Cir_Date] [Nvarchar](50) NULL,[Curr_Date] [datetime] NULL ,  [Sem] [nvarchar] (50)  NULL)";
            }
            string prizdetail = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='prizedetails'");
            if (prizdetail == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[prizedetails] ([prizeid] [numeric](18, 0) IDENTITY (1, 1) NOT NULL ,[subject] [nvarchar] (50)  NULL ,[prizename] [nvarchar] (50) NULL ,[amount] [numeric](18, 0) NULL ,[sponsor] [nvarchar] (100)  NULL ,[criteria] [nvarchar] (50)  NULL ,[interest] [numeric](18, 0) NULL ,[creation_year] [nvarchar] (50) NULL ,[academicyear] [numeric](18, 0) NULL ,[college_code] [numeric](18, 0) NULL,[edu_level] [nvarchar] (50) NULL)";
            }
            string Ndegree = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Ndegree'");
            if (Ndegree == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[Ndegree] ([Degree_code] [numeric] ,[Exam_system] [nvarchar] (50) null , [First_Year_Nonsemester] [bit] not null ,[batch_year] [numeric],[college_code] [numeric])";
            }
            string deptinfo = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='dept_info'");
            if (deptinfo == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[dept_info] ([dcode] [int] IDENTITY (1, 1) NOT NULL , [Semester] [int] NULL ,[Degree_Code] [int] NULL ,[Tot_Student] [int] NULL ,[Exam_Date] [datetime] NULL ,[Exam_session] [nvarchar] (2) NULL)";
            }
            string grpallocation = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Group_Alloction'");
            if (grpallocation == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[Group_Alloction] ([Exam_Date] [datetime] NULL ,[exam_session] [nvarchar] (2) NULL ,[Group_Name] [varchar] (1) NULL ,[Gtotal] [int] NULL)";
            }
            string combine_lab = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='combine_lab'");
            if (combine_lab == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[combine_lab] ([degree_code] [numeric](18, 0) NULL ,[semester] [numeric](18, 0) NULL ,[batch_year] [numeric](18, 0) NULL ,[subject_no] [nvarchar] (50) NULL)";
            }
            string alternatsched = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Alternate_Schedule'");
            if (alternatsched == "0")
            {
                acd_create = acd_create + " CREATE TABLE [Alternate_Schedule] ([degree_code] [numeric](18, 0) NULL ,[class_advisor] [nvarchar] (50)  NULL ,[semester] [smallint] NULL ,[batch_year] [smallint] NULL , [mon1] [varchar] (300)  NULL ,[mon2] [varchar] (300)  NULL ,[mon3] [varchar] (300)  NULL ,[mon4] [varchar] (300)  NULL ,[mon5] [varchar] (300)  NULL ,[mon6] [varchar] (300)  NULL ,[mon7] [varchar] (300)  NULL ,[mon8] [varchar] (300)  NULL ,[tue1] [varchar] (300)  NULL ,[tue2] [varchar] (300)  NULL ,[tue3] [varchar] (300)  NULL ,[tue4] [varchar] (300)  NULL ,[tue5] [varchar] (300)  NULL ,[tue6] [varchar] (300)  NULL ,[tue7] [varchar] (300)  NULL ,[tue8] [varchar] (300)  NULL ,[wed1] [varchar] (300)  NULL ,[wed2] [varchar] (300)  NULL ,[wed3] [varchar] (300)  NULL ,[wed4] [varchar] (300)  NULL ,[wed5] [varchar] (300)  NULL ,[wed6] [varchar] (300)  NULL ,[wed7] [varchar] (300)  NULL ,[wed8] [varchar] (300)  NULL ,[thu1] [varchar] (300)  NULL ,[thu2] [varchar] (300)  NULL ,[thu3] [varchar] (300)  NULL ,[thu4] [varchar] (300)  NULL ,[thu5] [varchar] (300)  NULL ,[thu6] [varchar] (300)  NULL ,[thu7] [varchar] (300)  NULL ,[thu8] [varchar] (300)  NULL ,[fri1] [varchar] (300)  NULL ,[fri2] [varchar] (300)  NULL ,[fri3] [varchar] (300)  NULL ,[fri4] [varchar] (300)  NULL ,[fri5] [varchar] (300)  NULL ,[fri6] [varchar] (300)  NULL ,[fri7] [varchar] (300)  NULL ,[fri8] [varchar] (300)  NULL ,[sat1] [varchar] (300)  NULL ,[sat2] [varchar] (300)  NULL ,[sat3] [varchar] (300)  NULL ,[sat4] [varchar] (300)  NULL ,[sat5] [varchar] (300)  NULL ,[sat6] [varchar] (300)  NULL ,[sat7] [varchar] (300)  NULL ,[sat8] [varchar] (300)  NULL ,[sun1] [varchar] (300)  NULL ,[sun2] [varchar] (300)  NULL ,[sun3] [varchar] (300)  NULL ,[sun4] [varchar] (300)  NULL ,[sun5] [varchar] (300)  NULL ,[sun6] [varchar] (300)  NULL ,[sun7] [varchar] (300)  NULL ,[sun8] [varchar] (300)  NULL ,[TTName] [varchar] (100)  NULL ,[FromDate] [datetime] NULL ,[LastRec] [int] NULL ,[Sections] [nvarchar] (50)  NULL)";
            }
            string staffapp = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staff_selfapp'");
            if (staffapp == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[staff_selfapp] (    [staff_code] [nvarchar] (30)  ,    [subject_code] [nvarchar] (30) ,    [atts_app] [text]  ,    [stf_response] [text]  ,    [remarks] [text]  ,    [from_date] [datetime] NULL ,    [to_date] [datetime] NULL ,    [atts] [int] NULL)";
            }
            string ndpt = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='NDepartment'");
            if (ndpt == "0")
            {
                acd_create = acd_create + " CREATE TABLE NDepartment(dept_code numeric(18, 0) ,Head_Of_Dept nvarchar(50),Location nvarchar(50),No_Classroom smallint,No_Lab smallint,No_Auditorium smallint,college_code numeric(18, 0),Batch_Year numeric(18, 0))";
            }
            string ondutystud = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Onduty_Stud'");
            if (ondutystud == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[Onduty_Stud] ([Roll_no] [nvarchar] (50) NULL ,[Semester] [numeric](18, 0) NULL ,[Purpose] [nvarchar] (500)  NULL , [Fromdate] [datetime] NULL ,[Outtime] [datetime] NULL ,[Intime] [datetime] NULL ,[Todate] [datetime] NULL)";
            }
            string lab_hours = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lab_hours'");
            if (lab_hours == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[lab_hours] ([subject_no] [numeric](18, 0) NULL , [noofhrsperweek] [numeric](18, 0) NULL ,[noofsession] [numeric](18, 0) NULL , [hr_session] [nvarchar] (50) NULL ,[acad_year] [nvarchar] (50) NULL)";
            }
            string reject = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='rejection'");
            if (reject == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[rejection] ([roll_no] [varchar] (50) ,[degree_code] [numeric](18, 0) NULL ,[batch_year] [numeric](18, 0) NULL ,[semester] [numeric](18, 0) NULL ,[Rej_Date] [datetime] NULL ,[Reason] [nvarchar] (250) ,[Rej_status] [bit] NULL)";
            }
            string hourdet = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='hour_ctr_det'");
            if (hourdet == "0")
            {
                acd_create = acd_create + " create table hour_ctr_det (aid int identity(1,1),batch_year smallint,degree_code numeric,subject varchar(100),noofhrs smallint)";
            }
            string seattype = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='seattype_cat'");
            if (seattype == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[seattype_cat] ([Cat_Code] [numeric](18, 0) IDENTITY (1, 1) NOT NULL ,[Category_Code] [nvarchar] (100)  NULL ,[Degree_Code] [numeric](18, 0) NULL ,[Batch_Year] [numeric](18, 0) NULL ,[Quota] [nvarchar] (50)  NULL ,[Category_Name] [nvarchar] (50)  NULL ,[Tot_Seat] [numeric](18, 0) NULL ,[Percentage] [numeric](18, 0) NULL ,[Mode] [bit] NULL)";
            }
            string Admisn = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Admission'");
            if (Admisn == "0")
            {
                acd_create = acd_create + " CREATE TABLE [Admission] ([App_no] [numeric](9, 0) NULL , [Regdate] [datetime] NULL , [TimeStart] [datetime] NULL , [TimeEnd] [datetime] NULL , [Venue] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Startdate] [datetime] NULL ,[IsAcc] [varchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL CONSTRAINT [DF__Admission__IsAcc__1590F0F1] DEFAULT ('No'),[Accdate] [datetime] NULL ,[PayDetails] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL)";
            }
            string grpdetail = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Group_Details'");
            if (grpdetail == "0")
            {
                acd_create = acd_create + " CREATE TABLE [Group_Details] ([Group_Code] [numeric](18, 0) IDENTITY (1, 1) NOT NULL ,[Group_Name] [nvarchar] (50) NULL , [Degree_Code] [numeric](18, 0) NULL ,[Semester] [numeric](18, 0) NULL ,[Batch_Year] [numeric](18, 0) NULL ,[Course_Id] [numeric](18, 0) NULL ,[Dept_Code] [numeric](18, 0) NULL )";
            }
            string optn = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='options'");
            if (optn == "0")
            {
                acd_create = acd_create + " create table options (user_id nvarchar(50),selected_english numeric(9),selected_tamil numeric(9))";
            }
            string rnsbstdat = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='rnsbusdet'");
            if (rnsbstdat == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[rnsbusdet] (    [app_no] [int] NULL ,   [rout] [char] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,  [receiptno] [char] (12) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [point] [char] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [validdate] [char] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NULL )";
            }
            string rnslogo = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='rnslogo'");
            if (rnslogo == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[rnslogo] (  [pname] [char] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [photo] [image] NULL ) ";
            }
            if (acd_create != "")
            {
                int acd_creat = d2.update_method_wo_parameter(acd_create, "Text");
            }
            //Alter
            string acdalter = string.Empty;
            getval = string.Empty;
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'guardian_name'");
                if (getval == "0")
                {
                    acdalter = acdalter + " alter TABLE applyn ADD guardian_name nvarchar(50)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'admitcard_date'");
                if (getval == "0")
                    acdalter = acdalter + " alter TABLE applyn ADD admitcard_date datetime";
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Student_Password'");
                if (getval == "0")
                {
                    acdalter = acdalter + " ALTER TABLE applyn ADD Student_Password varchar(255)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Father_Password'");
                if (getval == "0")
                {
                    acdalter = acdalter + " ALTER TABLE applyn ADD Father_Password varchar(255)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Mother_Password'");
                if (getval == "0")
                {
                    acdalter = acdalter + " ALTER TABLE applyn ADD Mother_Password varchar(255)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ExamFineMS'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ExamFineMS' AND COLUMN_NAME = 'fineamount'");
                if (getval == "0")
                {
                    acdalter = acdalter + " alter table ExamFineMS alter column fineamount float";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Semester_Schedule'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Semester_Schedule' AND COLUMN_NAME = 'TTName'");
                if (getval == "0")
                {
                    acdalter = acdalter + " ALTER TABLE Semester_Schedule ADD TTName varchar(100) NULL, FromDate datetime NULL";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='assesment'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'assesment' AND COLUMN_NAME = 'DataSheetNo'");
                if (getval == "0")
                {
                    acdalter = acdalter + " alter table assesment add DataSheetNo varchar (50)";
                }
            }
            getval = string.Empty;
            getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RemarksDetail' AND COLUMN_NAME = 'RemarkDetail'");
            if (getval == "0")
            {
                acdalter = acdalter + " Alter table RemarksDetail alter column RemarkDetail nvarchar(400) ";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='class_master'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'class_master' AND COLUMN_NAME = 'roomcode'");
                if (getval == "0")
                {
                    acdalter = acdalter + " alter table class_master add roomcode numeric identity(1,1)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'class_master' AND COLUMN_NAME = 'DeptStrengthInfo'");
                if (getval == "0")
                {
                    acdalter = acdalter + " alter table class_master add DeptStrengthInfo varchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'class_master' AND COLUMN_NAME = 'DeptStrengthInfo'");
                if (getval == "0")
                {
                    acdalter = acdalter + " alter table class_master add DeptStrengthInfo varchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applncostentry'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applncostentry' AND COLUMN_NAME = 'cost'");
                if (getval == "0")
                {
                    acdalter = acdalter + " alter table applncostentry alter column cost float";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                string srlno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'serialno'");
                if (srlno == "0")
                {
                    acdalter = acdalter + " alter table registration add serialno nvarchar(50) null";
                }
            }
            ExecuteQuery("alter table Registration add folioNo int", "Registration", "folioNo", 1);
            ExecuteQuery("alter table Registration add displayfolioNo  nvarchar(max)", "Registration", "displayfolioNo", 1);
            ExecuteQuery("alter table subject add subjectMarkType tinyint not null constraint DF_subject_subjectMarkType default(1)", "subject", "subjectMarkType", 1);

            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='sub_unit_details'");
            if (find_tablename != "0")
            {
                string steachaid = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'sub_unit_details' AND COLUMN_NAME = 'steach_aid'");
                if (steachaid == "0")
                {
                    acdalter = acdalter + " alter table sub_unit_details add steach_aid nvarchar(150) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='collinfo'");
            if (find_tablename != "0")
            {
                string university = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'university'");
                if (university == "0")
                {
                    acdalter = acdalter + " alter table collinfo alter column university nvarchar(150) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                string nrailway = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'Nrest_Railway'");
                if (nrailway == "0")
                {
                    acdalter = acdalter + " alter table Applyn  add Nrest_Railway NVarchar(250)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                string libid = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'lib_id'");
                if (libid == "0")
                {
                    acdalter = acdalter + " alter table registration add lib_id nvarchar (50) null";
                }
                string JMonth = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'JMonth'");
                if (JMonth == "0")
                {
                    acdalter = acdalter + " alter table Registration add JMonth smallint";
                }
                string JYear = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'JYear'");
                if (JYear == "0")
                {
                    acdalter = acdalter + " alter table Registration add JYear smallint";
                }
                string Atempts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'Attempts'");
                if (Atempts == "0")
                {
                    acdalter = acdalter + " alter table Registration add Attempts numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Semester_Schedule'");
            if (find_tablename != "0")
            {
                string JsMonth = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Semester_Schedule' AND COLUMN_NAME = 'JMonth'");
                if (JsMonth == "0")
                {
                    acdalter = acdalter + " alter table Semester_Schedule add JMonth smallint";
                }
                string JsYear = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Semester_Schedule' AND COLUMN_NAME = 'JYear'");
                if (JsYear == "0")
                {
                    acdalter = acdalter + " alter table Semester_Schedule add JYear smallint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                string rejonstat = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'Rejoin_Status'");
                if (rejonstat == "0")
                {
                    acdalter = acdalter + " alter table Registration add Rejoin_Status numeric";
                }
                string regulation = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'Regulation'");
                if (regulation == "0")
                {
                    acdalter = acdalter + " alter table registration add Regulation numeric";
                }
                string ExmElg = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'Exam_Elg'");
                if (ExmElg == "0")
                {
                    acdalter = acdalter + " alter table registration add Exam_Elg nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='class_master'");
            if (find_tablename != "0")
            {
                string clsrom = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'class_master' AND COLUMN_NAME = 'ClsRoom_name'");
                if (clsrom == "0")
                {
                    acdalter = acdalter + " alter table class_master add ClsRoom_name nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='laballoc'");
            if (find_tablename != "0")
            {
                string fdate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'laballoc' AND COLUMN_NAME = 'fdate'");
                if (fdate == "0")
                {
                    acdalter = acdalter + " alter table laballoc  add fdate datetime";
                }
                string tdate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'laballoc' AND COLUMN_NAME = 'tdate'");
                if (tdate == "0")
                {
                    acdalter = acdalter + " alter table laballoc  add tdate  datetime";
                }
            }
            string elect = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'internship_details' AND COLUMN_NAME = 'isElective'");
            if (elect == "0")
            {
                acdalter = acdalter + " alter table internship_details   add isElective bit";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                string adbatch = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'Add_Batch'");
                if (adbatch == "0")
                {
                    acdalter = acdalter + " alter table registration add Add_Batch nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='increment_info'");
            if (find_tablename != "0")
            {
                string ABatch = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'increment_info' AND COLUMN_NAME = 'Add_Batch'");
                if (ABatch == "0")
                {
                    acdalter = acdalter + " alter table increment_info  add Add_Batch nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='periodattndschedule'");
            if (find_tablename != "0")
            {
                string SchPart = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'periodattndschedule' AND COLUMN_NAME = 'Sch_Part'");
                if (SchPart == "0")
                {
                    acdalter = acdalter + " alter table periodattndschedule  add Sch_Part nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Semester_Schedule'");
            if (find_tablename != "0")
            {
                string sempart = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'semester_schedule' AND COLUMN_NAME = 'Sch_Part'");
                if (sempart == "0")
                {
                    acdalter = acdalter + " alter table semester_schedule  add Sch_Part nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bellschedule'");
            if (find_tablename != "0")
            {
                string bellshdpart = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bellschedule' AND COLUMN_NAME = 'Sch_Part'");
                if (bellshdpart == "0")
                {
                    acdalter = acdalter + " alter table bellschedule  add Sch_Part nvarchar(50)";
                }
            }
            string prprity = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'internship_dept' AND COLUMN_NAME = 'priority'");
            if (prprity == "0")
            {
                acdalter = acdalter + " alter table internship_dept add priority numeric";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='criteriaforinternal'");
            if (find_tablename != "0")
            {
                string viva = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'criteriaforinternal' AND COLUMN_NAME = 'isviva'");
                if (viva == "0")
                {
                    acdalter = acdalter + " alter table criteriaforinternal add isviva bit";
                }
                string CRTSem = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'creditinformation' AND COLUMN_NAME = 'CRTSem'");
                if (CRTSem == "0")
                {
                    acdalter = acdalter + " alter table creditinformation add CRTSem numeric";
                }
                string MCpts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'creditinformation' AND COLUMN_NAME = 'MCpts'");
                if (MCpts == "0")
                {
                    acdalter = acdalter + " alter table creditinformation add MCpts numeric";
                }
                string subsec = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'criteriaforinternal' AND COLUMN_NAME = 'subsections'");
                if (subsec == "0")
                {
                    acdalter = acdalter + " alter table criteriaforinternal add subsections bit null";
                }
                string parntcode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'criteriaforinternal' AND COLUMN_NAME = 'parentcode'");
                if (parntcode == "0")
                {
                    acdalter = acdalter + " alter table criteriaforinternal add parentcode numeric(18,0) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Semester_Schedule'");
            if (find_tablename != "0")
            {
                string saddbach = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'semester_schedule' AND COLUMN_NAME = 'Add_Batch'");
                if (saddbach == "0")
                {
                    acdalter = acdalter + " alter table semester_schedule add Add_Batch nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='seminfo'");
            if (find_tablename != "0")
            {
                string infoaddbach = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'seminfo' AND COLUMN_NAME = 'Add_Batch'");
                if (infoaddbach == "0")
                {
                    acdalter = acdalter + " alter table seminfo add Add_Batch nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                string Figprnt1 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'Fingerprint1'");
                if (Figprnt1 == "0")
                {
                    acdalter = acdalter + " alter table registration add Fingerprint1 ntext null";
                }
                string fingprnt2 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'Fingerprint2'");
                if (fingprnt2 == "0")
                {
                    acdalter = acdalter + " alter table registration add Fingerprint2 ntext null";
                }
                string fingprnt3 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'Fingerprint3'");
                if (fingprnt3 == "0")
                {
                    acdalter = acdalter + " alter table registration add Fingerprint3 ntext null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='laballoc'");
            if (find_tablename != "0")
            {
                string schpart = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'laballoc' AND COLUMN_NAME = 'sch_part'");
                if (schpart == "0")
                {
                    acdalter = acdalter + " alter table laballoc add sch_part nvarchar(50) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='rejoin_list'");
            if (find_tablename != "0")
            {
                string reglation = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'rejoin_list' AND COLUMN_NAME = 'Regulation'");
                if (reglation == "0")
                {
                    acdalter = acdalter + " alter table rejoin_list add Regulation numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='readmission'");
            if (find_tablename != "0")
            {
                string rejreg = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'readmission' AND COLUMN_NAME = 'Regulation'");
                if (rejreg == "0")
                {
                    acdalter = acdalter + " alter table readmission add Regulation numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='collinfo'");
            if (find_tablename != "0")
            {
                string photos = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'photo'");
                if (photos == "0")
                {
                    acdalter = acdalter + " alter table collinfo add photo image";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='PeriodAttndSchedule'");
            if (find_tablename != "0")
            {
                string elg_staff = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'PeriodAttndSchedule' AND COLUMN_NAME = 'percent_eligible_for_Subject'");
                if (elg_staff == "0")
                {
                    acdalter = acdalter + " alter table PeriodAttndSchedule  add percent_eligible_for_Subject  numeric";
                }
                string reexmsub = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'PeriodAttndSchedule' AND COLUMN_NAME = 'reexam_eligible_for_Subject'");
                if (reexmsub == "0")
                {
                    acdalter = acdalter + " alter table PeriodAttndSchedule  add reexam_eligible_for_Subject   numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='readmission'");
            if (find_tablename != "0")
            {
                string batcyr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'readmission' AND COLUMN_NAME = 'batch_year'");
                if (batcyr == "0")
                {
                    acdalter = acdalter + " alter table readmission  add batch_year  numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='periodattndschedule'");
            if (find_tablename != "0")
            {
                string prselgexm = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'periodattndschedule' AND COLUMN_NAME = 'percent_eligible_for_exam'");
                if (prselgexm == "0")
                {
                    acdalter = acdalter + " alter table periodattndschedule alter column percent_eligible_for_exam float";
                }
                string pridelgible = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'periodattndschedule' AND COLUMN_NAME = 'percent_eligible_for_cond'");
                if (pridelgible == "0")
                {
                    acdalter = acdalter + " alter table periodattndschedule alter column percent_eligible_for_cond Float ";
                }
                string eligibl_con = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'periodattndschedule' AND COLUMN_NAME = 'reexam_eligible_for_cond'");
                if (eligibl_con == "0")
                {
                    acdalter = acdalter + " alter table periodattndschedule alter column reexam_eligible_for_cond Float";
                }
                string elgreexam = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'periodattndschedule' AND COLUMN_NAME = 'reexam_eligible_for_reexam'");
                if (elgreexam == "0")
                {
                    acdalter = acdalter + " alter table periodattndschedule alter column reexam_eligible_for_reexam Float ";
                }
                string rexmsub = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'periodattndschedule' AND COLUMN_NAME = 'reexam_eligible_for_Subject'");
                if (rexmsub == "0")
                {
                    acdalter = acdalter + " alter table periodattndschedule alter column reexam_eligible_for_Subject Float ";
                }
                string elgreexmperc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'periodattndschedule' AND COLUMN_NAME = 'percent_eligible_for_reexam'");
                if (elgreexmperc == "0")
                {
                    acdalter = acdalter + " alter table periodattndschedule alter column percent_eligible_for_reexam Float";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Scholarship'");
            if (find_tablename != "0")
            {
                string recdat = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Scholarship' AND COLUMN_NAME = 'Received_date'");
                if (recdat == "0")
                {
                    acdalter = acdalter + " alter table Scholarship add Received_date datetime";
                }
                string sch_dd = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Scholarship' AND COLUMN_NAME = 'DD_No'");
                if (sch_dd == "0")
                {
                    acdalter = acdalter + " alter table Scholarship add DD_No decimal";
                }
                string dd_dt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Scholarship' AND COLUMN_NAME = 'DD_Date'");
                if (dd_dt == "0")
                {
                    acdalter = acdalter + " alter table Scholarship add DD_Date datetime";
                }
                string prdfrm = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Scholarship' AND COLUMN_NAME = 'Period_From'");
                if (prdfrm == "0")
                {
                    acdalter = acdalter + " alter table Scholarship add Period_From nvarchar(50)";
                }
                string prd_to = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Scholarship' AND COLUMN_NAME = 'Period_To'");
                if (prd_to == "0")
                {
                    acdalter = acdalter + " alter table Scholarship add Period_To nvarchar(50)";
                }
                string refno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Scholarship' AND COLUMN_NAME = 'Ref_No'");
                if (refno == "0")
                {
                    acdalter = acdalter + " alter table Scholarship add Ref_No nvarchar(15)";
                }
                string applsenddat = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Scholarship' AND COLUMN_NAME = 'Appln_Sent_Date'");
                if (applsenddat == "0")
                {
                    acdalter = acdalter + " alter table Scholarship add Appln_Sent_Date datetime";
                }
                string DtPayment = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Scholarship' AND COLUMN_NAME = 'Date_Of_Payment'");
                if (DtPayment == "0")
                {
                    acdalter = acdalter + " alter table Scholarship add Date_Of_Payment datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='stucon'");
            if (find_tablename != "0")
            {
                string curdt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stucon' AND COLUMN_NAME = 'curr_date'");
                if (curdt == "0")
                {
                    acdalter = acdalter + " alter table stucon alter column curr_date datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='assesment'");
            if (find_tablename != "0")
            {
                string sect = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'assesment' AND COLUMN_NAME = 'sections'");
                if (sect == "0")
                {
                    acdalter = acdalter + " alter table assesment add sections nvarchar(10)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='certificate'");
            if (find_tablename != "0")
            {
                string dus = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'certificate' AND COLUMN_NAME = 'dues'");
                if (dus == "0")
                {
                    acdalter = acdalter + " alter table certificate add  dues numeric";
                }
                string elgiprom = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'certificate' AND COLUMN_NAME = 'EligPromotion'");
                if (elgiprom == "0")
                {
                    acdalter = acdalter + " alter table certificate add EligPromotion nvarchar(200)";
                }
                string peractn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'certificate' AND COLUMN_NAME = 'PerAction'");
                if (peractn == "0")
                {
                    acdalter = acdalter + " alter table certificate add  PerAction nvarchar(200)";
                }
                string conduct = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'certificate' AND COLUMN_NAME = 'conduct'");
                if (conduct == "0")
                {
                    acdalter = acdalter + " alter table certificate add conduct nvarchar(100)";
                }
            }
            string nseat = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ndegree' AND COLUMN_NAME = 'Nseats'");
            if (nseat == "0")
            {
                acdalter = acdalter + " alter table ndegree add Nseats numeric";
            }
            string nsectns = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ndegree' AND COLUMN_NAME = 'Nsections'");
            if (nsectns == "0")
            {
                acdalter = acdalter + " alter table ndegree add Nsections numeric";
            }
            string ndurat = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ndegree' AND COLUMN_NAME = 'NDurations'");
            if (ndurat == "0")
            {
                acdalter = acdalter + " alter table ndegree add NDurations numeric";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Scholarship'");
            if (find_tablename != "0")
            {
                string boodfs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'scholarship' AND COLUMN_NAME = 'bookfees'");
                if (boodfs == "0")
                {
                    acdalter = acdalter + " alter table scholarship add bookfees decimal(9)";
                }
                string bordfes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'scholarship' AND COLUMN_NAME = 'boardfees'");
                if (bordfes == "0")
                {
                    acdalter = acdalter + " alter table scholarship add boardfees decimal(9)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='collinfo'");
            if (find_tablename != "0")
            {
                string uaddress = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'uaddress'");
                if (uaddress == "0")
                {
                    acdalter = acdalter + " alter table collinfo add uaddress nvarchar(100)";
                }
                string upincode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'upincode'");
                if (upincode == "0")
                {
                    acdalter = acdalter + " alter table collinfo add upincode nvarchar(100)";
                }
            }
            string subno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'dept_info' AND COLUMN_NAME = 'subject_no'");
            if (subno == "0")
            {
                acdalter = acdalter + " alter table dept_info add subject_no numeric";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                string brnchcod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'Branch_code'");
                if (brnchcod == "0")
                {
                    acdalter = acdalter + " alter table registration add Branch_code numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subjectchooser'");
            if (find_tablename != "0")
            {
                string grpcell = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subjectchooser' AND COLUMN_NAME = 'grp_cell'");
                if (grpcell == "0")
                {
                    acdalter = acdalter + " alter table subjectchooser add grp_cell numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='classlogbook'");
            if (find_tablename != "0")
            {
                string clslogbook = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'classlogbook' AND COLUMN_NAME = 'staff_code'");
                if (clslogbook == "0")
                {
                    acdalter = acdalter + " alter table classlogbook alter column staff_code nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='collinfo'");
            if (find_tablename != "0")
            {
                string aflitby = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'affliatedby'");
                if (aflitby == "0")
                {
                    acdalter = acdalter + " alter table collinfo add affliatedby nvarchar(250) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='laballoc'");
            if (find_tablename != "0")
            {
                string addbach = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'LabAlloc' AND COLUMN_NAME = 'add_batch'");
                if (addbach == "0")
                {
                    acdalter = acdalter + " alter table LabAlloc add add_batch nvarchar(50) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Stud_prev_details'");
            if (find_tablename != "0")
            {
                string inscod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'insstate_code'");
                if (inscod == "0")
                {
                    acdalter = acdalter + " alter table Stud_prev_details add insstate_code numeric(9)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                string edate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'ent_date'");
                if (edate == "0")
                {
                    acdalter = acdalter + " alter table applyn add ent_date datetime";
                }
                string apsno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'ent_sno'");
                if (apsno == "0")
                {
                    acdalter = acdalter + " alter table applyn add ent_sno numeric(15)";
                }
                string nri = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'nri'");
                if (nri == "0")
                {
                    acdalter = acdalter + " alter table applyn add nri numeric(3)";
                }
                string qtyp = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Qtype'");
                if (qtyp == "0")
                {
                    acdalter = acdalter + " alter table applyn add Qtype numeric(3)";
                }
                string loginPassword = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'loginPassword'");
                if (loginPassword == "0")
                {
                    acdalter = acdalter + " alter table applyn add loginPassword nvarchar(500)";
                }
                string XAT_ID = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'XAT_ID'");
                if (XAT_ID == "0")
                {
                    acdalter = acdalter + " alter table applyn add XAT_ID nvarchar(100)";
                }
                string CAT_ID = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'CAT_ID'");
                if (CAT_ID == "0")
                {
                    acdalter = acdalter + " alter table applyn add CAT_ID nvarchar(100)";
                }
                string nativity = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'nativity'");
                if (nativity == "0")
                {
                    acdalter = acdalter + " alter table applyn add nativity bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='collinfo'");
            if (find_tablename != "0")
            {
                string ivrscolcod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'ivrs_collcode'");
                if (ivrscolcod == "0")
                {
                    acdalter = acdalter + " alter table collinfo add ivrs_collcode numeric(18,0) null";
                }
                string colacrnm = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'Coll_acronymn'");
                if (colacrnm == "0")
                {
                    acdalter = acdalter + " alter table collinfo add Coll_acronymn nvarchar(20) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                string grpcode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'group_code'");
                if (grpcode == "0")
                {
                    acdalter = acdalter + " alter table registration add group_code numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='department'");
            if (find_tablename != "0")
            {
                string grp_dept = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'department' AND COLUMN_NAME = 'grp_dept'");
                if (grp_dept == "0")
                {
                    acdalter = acdalter + " alter table department add [grp_dept] [numeric](18, 0)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                string entsno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'ent_sno'");
                if (entsno == "0")
                {
                    acdalter = acdalter + " alter table applyn alter column ent_sno varchar(15)";
                }
                string rank = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'rank'");
                if (rank == "0")
                {
                    acdalter = acdalter + " alter table applyn alter column rank varchar(15)";
                }
                string apqtyp = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'qtype'");
                if (apqtyp == "0")
                {
                    acdalter = acdalter + " alter table applyn alter column qtype numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staff_selector'");
            if (find_tablename != "0")
            {
                string UNIT = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_selector' AND COLUMN_NAME = 'UNIT'");
                if (UNIT == "0")
                {
                    acdalter = acdalter + "  alter table staff_selector add UNIT NVARCHAR(10)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='laballoc'");
            if (find_tablename != "0")
            {
                string REMARKS = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'LABALLOC' AND COLUMN_NAME = 'REMARKS'");
                if (REMARKS == "0")
                {
                    acdalter = acdalter + " alter table LABALLOC add REMARKS NVARCHAR(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='attendance'");
            if (find_tablename != "0")
            {
                string d1d9 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd1d9'");
                if (d1d9 == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d1d9] [tinyint] NULL ";
                }
                string d2d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd2d9'");
                if (d2d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d2d9] [tinyint] NULL  ";
                }
                string d3d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd3d9'");
                if (d3d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d3d9] [tinyint] NULL ";
                }
                string d4d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd4d9'");
                if (d4d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d4d9] [tinyint] NULL ";
                }
                string d5d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd5d9'");
                if (d5d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d5d9] [tinyint] NULL ";
                }
                string d6d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd6d9'");
                if (d6d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d6d9] [tinyint] NULL ";
                }
                string d7d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd7d9'");
                if (d7d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d7d9] [tinyint] NULL ";
                }
                string d8d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd8d9'");
                if (d8d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d8d9] [tinyint] NULL";
                }
                string d9d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd9d9'");
                if (d9d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d9d9] [tinyint] NULL";
                }
                string d10d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd10d9'");
                if (d10d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d10d9] [tinyint] NULL";
                }
                string d11d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd11d9'");
                if (d11d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d11d9] [tinyint] NULL";
                }
                string d12d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd12d9'");
                if (d12d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d12d9] [tinyint] NULL";
                }
                string d13d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd13d9'");
                if (d10d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d13d9] [tinyint] NULL";
                }
                string d14d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd14d9'");
                if (d14d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d14d9] [tinyint] NULL";
                }
                string d15d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd15d9'");
                if (d15d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d15d9] [tinyint] NULL";
                }
                string d16d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd16d9'");
                if (d16d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d16d9] [tinyint] NULL";
                }
                string d17d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd17d9'");
                if (d17d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d17d9] [tinyint] NULL";
                }
                string d18d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd18d9'");
                if (d18d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d18d9] [tinyint] NULL";
                }
                string d19d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd19d9'");
                if (d19d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d19d9] [tinyint] NULL";
                }
                string d20d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd20d9'");
                if (d20d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d20d9] [tinyint] NULL";
                }
                string d21d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd21d9'");
                if (d21d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d21d9] [tinyint] NULL";
                }
                string d22d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd22d9'");
                if (d22d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d22d9] [tinyint] NULL";
                }
                string d23d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd23d9'");
                if (d23d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d23d9] [tinyint] NULL";
                }
                string d24d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd24d9'");
                if (d24d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d24d9] [tinyint] NULL";
                }
                string d25d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd25d9'");
                if (d25d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d25d9] [tinyint] NULL";
                }
                string d26d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd26d9'");
                if (d26d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d26d9] [tinyint] NULL";
                }
                string d27d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd27d9'");
                if (d27d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d27d9] [tinyint] NULL";
                }
                string d28d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd28d9'");
                if (d28d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d28d9] [tinyint] NULL";
                }
                string d29d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd29d9'");
                if (d29d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d29d9] [tinyint] NULL";
                }
                string d30d = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd30d9'");
                if (d30d == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d30d9] [tinyint] NULL";
                }
                string d31d9 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance' AND COLUMN_NAME = 'd314d9'");
                if (d31d9 == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[attendance] add [d314d9] [tinyint] NULL ";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Semester_Schedule'");
            if (find_tablename != "0")
            {
                string Tue9 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Semester_Schedule' AND COLUMN_NAME = 'Mon9'");
                if (Tue9 == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[Semester_Schedule] add [Mon9] [varchar] (300) NULL";
                }
                string d11d9 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Semester_Schedule' AND COLUMN_NAME = 'Tue9'");
                if (d11d9 == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[Semester_Schedule] add [Tue9] [varchar] (300) NULL ";
                }
                string Wed9 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Semester_Schedule' AND COLUMN_NAME = 'Wed9'");
                if (Wed9 == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[Semester_Schedule] add [Wed9] [varchar] (300) NULL";
                }
                string Thu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Semester_Schedule' AND COLUMN_NAME = 'Thu9'");
                if (Thu == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[Semester_Schedule] add [Thu9] [varchar] (300)  NULL ";
                }
                string Fri = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Semester_Schedule' AND COLUMN_NAME = 'Fri9'");
                if (Fri == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[Semester_Schedule] add [Fri9] [varchar] (300)  NULL ";
                }
                string Sat = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Semester_Schedule' AND COLUMN_NAME = 'Sat9'");
                if (Sat == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[Semester_Schedule] add [Sat9] [varchar] (300) NULL ";
                }
                string Sun = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Semester_Schedule' AND COLUMN_NAME = 'Sun9'");
                if (Sun == "0")
                {
                    acdalter = acdalter + " alter TABLE [dbo].[Semester_Schedule] add [Sun9] [varchar] (300)  NULL";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                string coc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'coccu'");
                if (coc == "0")
                {
                    acdalter = acdalter + " alter table applyn add coccu numeric";
                }
                string nume = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'tavl'");
                if (nume == "0")
                {
                    acdalter = acdalter + " alter table applyn add tavl numeric";
                }
                string pdoa = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'pdoa'");
                if (pdoa == "0")
                {
                    acdalter = acdalter + " alter table applyn add pdoa numeric";
                }
                string cplan = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'cplan'");
                if (cplan == "0")
                {
                    acdalter = acdalter + " alter table applyn add cplan varchar(100)";
                }
                string fwep1 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'fwp1'");
                if (fwep1 == "0")
                {
                    acdalter = acdalter + " alter table applyn add fwp1 bit";
                }
                string fw2 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'fwp2'");
                if (fw2 == "0")
                {
                    acdalter = acdalter + " alter table applyn add fwp2 bit";
                }
                string fw3 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'fwp3'");
                if (fw3 == "0")
                {
                    acdalter = acdalter + " alter table applyn add fwp3 bit";
                }
                string fw4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'fwp4'");
                if (fw4 == "0")
                {
                    acdalter = acdalter + " alter table applyn add fwp4 bit";
                }
                string fw5 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'fwp5'");
                if (fw5 == "0")
                {
                    acdalter = acdalter + " alter table applyn add fwp5 bit";
                }
                string fw6 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'fwp6'");
                if (fw6 == "0")
                {
                    acdalter = acdalter + " alter table applyn add fwp6 bit";
                }
                string ct1 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'cts1'");
                if (ct1 == "0")
                {
                    acdalter = acdalter + " alter table applyn add cts1 bit";
                }
                string ct2 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'cts2'");
                if (ct2 == "0")
                {
                    acdalter = acdalter + " alter table applyn add cts2 bit";
                }
                string ct3 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'cts3'");
                if (ct3 == "0")
                {
                    acdalter = acdalter + " alter table applyn add cts3 bit";
                }
                string ct4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'cts4'");
                if (ct4 == "0")
                {
                    acdalter = acdalter + " alter table applyn add cts4 bit";
                }
                string ct5 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'cts5'");
                if (ct5 == "0")
                {
                    acdalter = acdalter + " alter table applyn add cts5 bit";
                }
                string admdt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'ADMPDATE'");
                if (admdt == "0")
                {
                    acdalter = acdalter + " alter table applyn add ADMPDATE DATETIME";
                }
                string testdt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'TESTPDATE'");
                if (testdt == "0")
                {
                    acdalter = acdalter + " alter table applyn add TESTPDATE DATETIME";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SELECTION_LIST'");
            if (find_tablename != "0")
            {
                string rollno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SELECTION_LIST' AND COLUMN_NAME = 'ROLL_NO'");
                if (rollno == "0")
                {
                    acdalter = acdalter + " alter table SELECTION_LIST add ROLL_NO NVARCHAR(25)";
                }
                string Rdat = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SELECTION_LIST' AND COLUMN_NAME = 'Rdate'");
                if (Rdat == "0")
                {
                    acdalter = acdalter + " alter table SELECTION_LIST add Rdate Datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                string consell = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'counsellor'");
                if (consell == "0")
                {
                    acdalter = acdalter + " alter table applyn add counsellor nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                string pinnumber = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'pinnumber'");
                if (pinnumber == "0")
                {
                    acdalter = acdalter + " alter table registration add pinnumber varchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='borrow'");
            if (find_tablename != "0")
            {
                string renewstat = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'borrow' AND COLUMN_NAME = 'renewstatus'");
                if (renewstat == "0")
                {
                    acdalter = acdalter + " alter table borrow add renewstatus smallint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                string marksno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'Mark_serialno'");
                if (marksno == "0")
                {
                    acdalter = acdalter + " alter table registration add Mark_serialno numeric";
                }
            }
            if (acdalter != "")
            {
                int altacdamicqry = d2.update_method_wo_parameter(acdalter, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void acdamic2()
    {
        try
        {
            //create query selvam22/2016
            string find_tablename = string.Empty;
            string acd_create = string.Empty;
            string getval = string.Empty;
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Admission_Reason'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table Admission_Reason(res_code numeric identity(1,1),reason varchar(100),college_code numeric)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='external_staff'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table external_staff(staff_code numeric identity(1,1),staff_name varchar(100),designation varchar(100),college_name varchar(100))";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Condonation_Fee'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table Condonation_Fee(college_code numeric,degree_code numeric,batch_year numeric,current_semester numeric,Att_from float,Att_To float,Fine_Amt float)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Building_Master'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table Building_Master (Code int identity (1,1),Building_Acronym varchar(200), StartingSerial Numeric,Building_Name varchar(200),Builing_Description varchar(200),Building_Area Varchar(150),Building_Colour Varchar(100),Building_Type varchar(100),College_Code Numeric)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Floor_Master'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table Floor_Master (Building_Name varchar(200),Floor_Acronym varchar(200), StartingSerial Numeric,Floor_Name varchar(200),Floor_Description varchar(200),College_Code Numeric)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Room_Detail'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table Room_Detail(Building_Name Varchar(200),Floor_Name Varchar(200),Room_Acronym varchar(150),StartingSerial Numeric, Room_Name Varchar(200),Room_Description Varchar(200),College_Code Numeric)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Grade_Master'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table  Grade_Master (Mark_Grade varchar(10),Frange int,Trange int, Degree_Code int,College_Code Numeric,Credit_Points Int , batch_year numeric )";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='mark_entry_replan'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE TABLE mark_entry_replan (roll_no nvarchar(50),subject_no numeric(18),internal_mark float,external_mark float,total float,result nvarchar(15),passorfail bit,type nvarchar(10),remarks nvarchar(20),exam_code numeric(18),attempts tinyint,entry_code numeric(18),MYData integer,Oral_marks float,rej_stat bit,wo_marks float,pract_marks float,grade nvarchar(10),cp numeric(18))";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Specialization'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table Specialization(spcode numeric identity(1,1),dept_code numeric,special_name nvarchar(100),college_code numeric)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='contact_person'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table contact_person(company_code nvarchar(100),name nvarchar(100),desig nvarchar(100),phno numeric,email nvarchar(100),college_code numeric)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='comp_spec'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table comp_spec(company_code nvarchar(100),dept_code numeric,spcode numeric,college_code numeric)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='stud_relation'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='stud_relation'");
                if (getval == "0")
                {
                    acd_create = acd_create + " create table stud_relation(application_no nvarchar(100),name_roll nvarchar(100),course nvarchar(100),relationship nvarchar(200))";
                }
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Guardian_details'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table Guardian_details(appl_no nvarchar(100),Gname nvarchar(100),Gadd nvarchar(100),Gstate nvarchar(100),Gpin nvarchar(100),Gph nvarchar(100))";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Enquiry'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE TABLE [Enquiry] ([entry_no] [numeric](18, 0) IDENTITY (1, 1) NOT NULL , [college_code] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [enq_no] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [stud_name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [parent_name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [dob] [datetime] NULL , [address] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [pincode] [nvarchar] (7) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Phone] [nvarchar] (30) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL , [email] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [citizen] [numeric](18, 0) NULL , [religion] [numeric](18, 0) NULL , [community] [numeric](18, 0) NULL , [caste] [numeric](18, 0) NULL,  [date_enq] [datetime] NULL , [Qualify_exam] [integer] NULL , [Percentage] [numeric](18, 2) NULL , [Eng/PG] [integer] NULL , [yearofpassing] [numeric](18, 0) NULL , [degree_code] [numeric](18, 0) NULL , [apply] [integer] NULL , [direct/refer] [integer] NULL , [refer_name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Enq_Mark'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE TABLE [Enq_Mark] ([college_code] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [enq_no] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [english] [float] NULL , [Physics] [float] NULL , [chemistry] [float] NULL , [maths] [float] NULL , [biology] [float] NULL)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Eligibility'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE TABLE [Eligibility] ([college_code] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [english] [float] NULL , [Physics] [float] NULL , [chemistry] [float] NULL , [maths] [float] NULL , [biology] [float] NULL , [degree_per] [numeric](18, 2) NULL , [diplamo_per] [numeric](18, 2) NULL , [age] [numeric](18) NULL)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='marks'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table marks (university_code numeric,course_code numeric,branch_code numeric,subject_no numeric ,subject_name varchar ,max_marks float,min_marks float)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='markissue'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table markissue (college_code numeric ,roll_no nvarchar(50),exam_month smallint,exam_year smallint,current_semester smallint,issue_status int)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='stud_debar'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE TABLE [stud_debar] ([app_no] [numeric](18) ,    [debar_Date] [datetime],    [Reason] [nvarchar] (250))";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='studentcancel'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE TABLE [studentcancel] ([app_no] [numeric](18) ,    [cancel_Date] [datetime] ,    [Reason] [nvarchar] (250))";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='eligible_mark'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table eligible_mark (degree_code numeric, batch_year smallint,university_code numeric,course_code numeric,branch_code numeric,subject_no numeric,eligi_mark numeric)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='code_generation'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table code_generation (college_code numeric,degree_code numeric,batch_year smallint,enqcode varchar(50),enq_startwith numeric,enq_serial numeric,enq_modifydate datetime,appcode varchar(50),app_startwith numeric,app_serial numeric,app_modifydate datetime,admcode varchar(50),adm_startwith numeric,adm_serial numeric,adm_modifydate datetime)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='stud_complete'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table stud_complete( app_no numeric,complete_date datetime,addressg nvarchar,streetg nvarchar,cityg nvarchar,districtg nvarchar,stateg nvarchar,ping nvarchar,phg nvarchar)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RecentPhoto'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table RecentPhoto (app_no numeric,photo image)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='grademaster'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table grademaster (batch_year smallint,degree_code numeric,exam_month smallint,exam_year smallint,grade_flag numeric)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='grademaster'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE TABLE [combine_class] ( [subject_no] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Monday1] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Monday2] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Monday3] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Monday4] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Monday5] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Monday6] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Monday7] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Monday8] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Monday9] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Monday10] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Tuesday1] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Tuesday2] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Tuesday3] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Tuesday4] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Tuesday5] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Tuesday6] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Tuesday7] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Tuesday8] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Tuesday9] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Tuesday10] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Wednesday1] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Wednesday2] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Wednesday3] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Wednesday4] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Wednesday5] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Wednesday6] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Wednesday7] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Wednesday8] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Wednesday9] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Wednesday10] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Thursday1] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Thursday2] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Thursday3] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Thursday4] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Thursday5] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Thursday6] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Thursday7] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Thursday8] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Thursday9] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Thursday10] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Friday1] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Friday2] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Friday3] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Friday4] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Friday5] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Friday6] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Friday7] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Friday8] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,  [Friday9] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Friday10] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Saturday1] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Saturday2] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Saturday3] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Saturday4] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Saturday5] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Saturday6] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Saturday7] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Saturday8] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Saturday9] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Saturday10] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Sunday1] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Sunday2] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Sunday3] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Sunday4] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Sunday5] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Sunday6] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Sunday7] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Sunday8] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Sunday9] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Sunday10] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL) ON [PRIMARY]";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='interview_details'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE TABLE [interview_details] ( [roll_no] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [student_name] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [degree_code] [int] NULL , [batch_year] [int] NULL , [semester] [int] NULL , [sections] [varchar] (4) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Company_name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Location] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Start_date] [datetime] NULL , [End_date] [datetime] NULL , [Cleared_rounds] [int] NULL , [Status] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Monthly_Salary] [money] NULL) ON [PRIMARY]";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Parents_Meeting'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE TABLE [Parents_Meeting] ( [Roll_no] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [stud_name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [batch_year] [smallint] NULL , [Degree_code] [numeric](9, 0) NULL , [Semester] [smallint] NULL , [Sections] [nvarchar] (2) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Meeting_date] [datetime] NULL , [Nameoptions] [int] NULL , [ParentorGuardianName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Reason] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Remarks] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL) ON [PRIMARY]";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='counselling_details'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE TABLE [counselling_details] ( [roll_no] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [counsel_date] [datetime] NULL , [batch_year] [smallint] NULL , [degree_code] [numeric](9, 0) NULL , [semester] [smallint] NULL , [sections] [nvarchar] (4) COLLATE SQL_Latin1_General_CP1_CI_AS NULL) ON [PRIMARY]";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='att_logs'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table att_logs(attid int,fingerprintdetails int ,diviceid int,intime datetime,outtime datetime,date datetime)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='review'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table [review] (roll_no varchar(100),review_name varchar(150),pres_mrk numeric,pres_of numeric,viva_mark numeric,viva_of numeric,final numeric,report_mrk numeric,report_of numeric,particulars text)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='uncompulsory_subject'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table [uncompulsory_subject] (roll_no varchar(50),subject_no integer,remarks varchar(50),degree_code numeric,batch_year numeric,semester numeric,sections varchar(50),college_code numeric)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='cert_issret'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table [cert_issret] (app_no integer,issue_date datetime,return_date datetime,cert_code nvarchar,is_return tinyint)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='univ_college_hrs'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table univ_college_hrs (univ_hrs numeric,college_hrs numeric,batch_year integer,degree_code integer,semester numeric)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Placement_mark'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table Placement_mark(roll_no varchar(50),mark_obtained integer,batch_year numeric,degree_code integer,semester numeric,test_no numeric,test_date varchar(50),duration varchar(25),staff_name varchar(50),entry_date varchar(10),max_mark numeric,min_mark numeric,sections nvarchar(10))";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Placement_test'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table Placement_test(degree_code integer,batch_year integer,semester numeric,test_name text,test_no numeric,max_mark numeric,min_mark numeric)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='stud_details'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table stud_details(app_no integer,isdonar tinyint,first_graduate tinyint)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='scholarship_details'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table scholarship_details (degree_code int,semester numeric,batch_year int,schol_year int,sections varchar(20),community_code int,amount decimal (18, 0))";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='scholarship_details'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE TABLE students_scholarship (appl_no int,roll_no nvarchar (50),schol_amount decimal (18, 0),schol_year int,comunity_code int)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subject_language'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table subject_language(subject_no numeric,language int,college_code int)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Manual_schedule'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table Manual_schedule(isflag int,college_code int)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Manual_schedule'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE TABLE [Direct_Schedule]([batch_year] [int] NULL,    [degree_code] [int] NULL,    [sections] [varchar] NULL,  [month_year] [int] NULL,    [d1d1] [int] NULL, [d1d2] [int] NULL,  [d1d3] [int] NULL,  [d1d4] [int] NULL,  [d1d5] [int] NULL,  [d1d6] [int] NULL,  [d1d7] [int] NULL,  [d2d1] [int] NULL,  [d2d2] [int] NULL,  [d2d3] [int] NULL, [d2d4] [int] NULL,  [d2d5] [int] NULL,  [d2d6] [int] NULL,  [d2d7] [int] NULL,  [d3d1] [int] NULL,  [d3d2] [int] NULL,  [d3d3] [int] NULL, [d3d4] [int] NULL,  [d3d5] [int] NULL,  [d3d6] [int] NULL,  [d3d7] [int] NULL,  [d4d1] [int] NULL,  [d4d2] [int] NULL,  [d4d3] [int] NULL,  [d4d4] [int] NULL, [d4d5] [int] NULL,  [d4d6] [int] NULL,  [d4d7] [int] NULL,  [d5d1] [int] NULL,  [d5d2] [int] NULL,  [d5d3] [int] NULL,  [d5d4] [int] NULL,  [d5d5] [int] NULL,  [d5d6] [int] NULL, [d5d7] [int] NULL,  [d6d1] [int] NULL,  [d6d2] [int] NULL,  [d6d3] [int] NULL,  [d6d4] [int] NULL,  [d6d5] [int] NULL,  [d6d6] [int] NULL,  [d6d7] [int] NULL,  [d7d1] [int] NULL, [d7d2] [int] NULL,  [d7d3] [int] NULL,  [d7d4] [int] NULL,  [d7d5] [int] NULL,  [d7d6] [int] NULL,  [d7d7] [int] NULL,  [d8d1] [int] NULL,  [d8d2] [int] NULL,  [d8d3] [int] NULL, [d8d4] [int] NULL,  [d8d5] [int] NULL,  [d8d6] [int] NULL,  [d8d7] [int] NULL,  [d9d1] [int] NULL,  [d9d2] [int] NULL,  [d9d3] [int] NULL,  [d9d4] [int] NULL,  [d9d5] [int] NULL, [d9d6] [int] NULL,  [d9d7] [int] NULL,  [d10d1] [int] NULL, [d10d2] [int] NULL, [d10d3] [int] NULL, [d10d4] [int] NULL, [d10d5] [int] NULL, [d10d6] [int] NULL, [d10d7] [int] NULL, [d11d1] [int] NULL, [d11d2] [int] NULL, [d11d3] [int] NULL, [d11d4] [int] NULL, [d11d5] [int] NULL, [d11d6] [int] NULL, [d11d7] [int] NULL, [d12d1] [int] NULL, [d12d2] [int] NULL, [d12d3] [int] NULL, [d12d4] [int] NULL, [d12d5] [int] NULL, [d12d6] [int] NULL, [d12d7] [int] NULL, [d13d1] [int] NULL, [d13d2] [int] NULL, [d13d3] [int] NULL, [d13d4] [int] NULL, [d13d5] [int] NULL, [d13d6] [int] NULL, [d13d7] [int] NULL, [d14d1] [int] NULL, [d14d2] [int] NULL, [d14d3] [int] NULL, [d14d4] [int] NULL, [d14d5] [int] NULL, [d14d6] [int] NULL, [d14d7] [int] NULL, [d15d1] [int] NULL, [d15d2] [int] NULL, [d15d3] [int] NULL, [d15d4] [int] NULL, [d15d5] [int] NULL, [d15d6] [int] NULL, [d15d7] [int] NULL, [d16d1] [int] NULL, [d16d2] [int] NULL, [d16d3] [int] NULL, [d16d4] [int] NULL, [d16d5] [int] NULL, [d16d6] [int] NULL, [d16d7] [int] NULL, [d17d1] [int] NULL, [d17d2] [int] NULL, [d17d3] [int] NULL, [d17d4] [int] NULL, [d17d5] [int] NULL, [d17d6] [int] NULL, [d17d7] [int] NULL, [d18d1] [int] NULL, [d18d2] [int] NULL, [d18d3] [int] NULL, [d18d4] [int] NULL, [d18d5] [int] NULL, [d18d6] [int] NULL, [d18d7] [int] NULL, [d19d1] [int] NULL, [d19d2] [int] NULL, [d19d3] [int] NULL, [d19d4] [int] NULL, [d19d5] [int] NULL, [d19d6] [int] NULL, [d19d7] [int] NULL, [d20d1] [int] NULL, [d20d2] [int] NULL, [d20d3] [int] NULL, [d20d4] [int] NULL, [d20d5] [int] NULL, [d20d6] [int] NULL, [d20d7] [int] NULL, [d21d1] [int] NULL, [d21d2] [int] NULL, [d21d3] [int] NULL, [d21d4] [int] NULL, [d21d5] [int] NULL, [d21d6] [int] NULL, [d21d7] [int] NULL, [d22d1] [int] NULL, [d22d2] [int] NULL, [d22d3] [int] NULL, [d22d4] [int] NULL, [d22d5] [int] NULL, [d22d6] [int] NULL, [d22d7] [int] NULL, [d23d1] [int] NULL, [d23d2] [int] NULL, [d23d3] [int] NULL, [d23d4] [int] NULL, [d23d5] [int] NULL, [d23d6] [int] NULL, [d23d7] [int] NULL, [d24d1] [int] NULL, [d24d2] [int] NULL, [d24d3] [int] NULL, [d24d4] [int] NULL, [d24d5] [int] NULL, [d24d6] [int] NULL, [d24d7] [int] NULL, [d25d1] [int] NULL, [d25d2] [int] NULL, [d25d3] [int] NULL, [d25d4] [int] NULL, [d25d5] [int] NULL, [d25d6] [int] NULL, [d25d7] [int] NULL, [d26d1] [int] NULL, [d26d2] [int] NULL, [d26d3] [int] NULL, [d26d4] [int] NULL, [d26d5] [int] NULL, [d26d6] [int] NULL, [d26d7] [int] NULL, [d27d1] [int] NULL, [d27d2] [int] NULL, [d27d3] [int] NULL, [d27d4] [int] NULL, [d27d5] [int] NULL, [d27d6] [int] NULL, [d27d7] [int] NULL, [d28d1] [int] NULL, [d28d2] [int] NULL, [d28d3] [int] NULL, [d28d4] [int] NULL, [d28d5] [int] NULL, [d28d6] [int] NULL, [d28d7] [int] NULL, [d29d1] [int] NULL, [d29d2] [int] NULL, [d29d3] [int] NULL, [d29d4] [int] NULL, [d29d5] [int] NULL, [d29d6] [int] NULL, [d29d7] [int] NULL, [d30d1] [int] NULL, [d30d2] [int] NULL, [d30d3] [int] NULL, [d30d4] [int] NULL, [d30d5] [int] NULL, [d30d6] [int] NULL, [d30d7] [int] NULL, [d31d1] [int] NULL, [d31d2] [int] NULL, [d31d3] [int] NULL, [d31d4] [int] NULL, [d31d5] [int] NULL, [d31d6] [int] NULL, [d31d7] [int] NULL, [d1d8] [int] NULL,  [d2d8] [int] NULL, [d3d8] [int] NULL,  [d4d8] [int] NULL,  [d5d8] [int] NULL,  [d6d8] [int] NULL,  [d7d8] [int] NULL,  [d8d8] [int] NULL,  [d9d8] [int] NULL,  [d10d8] [int] NULL, [d11d8] [int] NULL, [d12d8] [int] NULL, [d13d8] [int] NULL, [d14d8] [int] NULL, [d15d8] [int] NULL, [d16d8] [int] NULL, [d17d8] [int] NULL, [d18d8] [int] NULL, [d19d8] [int] NULL, [d20d8] [int] NULL, [d21d8] [int] NULL, [d22d8] [int] NULL, [d23d8] [int] NULL, [d24d8] [int] NULL, [d25d8] [int] NULL, [d26d8] [int] NULL, [d27d8] [int] NULL, [d29d8] [int] NULL, [d30d8] [int] NULL, [d31d8] [int] NULL, [d28d8] [int] NULL, [d1d9] [int] NULL,  [d2d9] [int] NULL,  [d3d9] [int] NULL, [d4d9] [int] NULL,  [d5d9] [int] NULL,  [d6d9] [int] NULL,  [d7d9] [int] NULL,  [d8d9] [int] NULL,  [d9d9] [int] NULL,  [d10d9] [int] NULL, [d11d9] [int] NULL, [d12d9] [int] NULL, [d13d9] [int] NULL, [d14d9] [int] NULL, [d15d9] [int] NULL, [d16d9] [int] NULL, [d17d9] [int] NULL, [d18d9] [int] NULL, [d19d9] [int] NULL, [d20d9] [int] NULL, [d21d9] [int] NULL, [d22d9] [int] NULL, [d23d9] [int] NULL, [d24d9] [int] NULL, [d25d9] [int] NULL, [d26d9] [int] NULL, [d27d9] [int] NULL, [d28d9] [int] NULL, [d29d9] [int] NULL, [d30d9] [int] NULL, [d31d9] [int] NULL) ON [PRIMARY]";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='manual_lessonplan'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE Table manual_lessonplan (sub_no integer,date_of_plan varchar(50),degree_code integer,semester smallint,batch_year integer,sections varchar(30),planned_text nvarchar(3500),hr tinyint) ";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='manual_lessonplan'");
            if (getval == "0")
            {
                acd_create = acd_create + " Create table interview_schedule (Roll_no nvarchar(50),Stud_Name Nvarchar(200),Dept nvarchar(100),batch nvarchar(50),semester nvarchar(50),Int_no nvarchar(50),test_no numeric(10),text_name nvarchar(200),mark decimal(10,2),int_Date Datetime,int_time Datetime, interviewer_Name nvarchar(200), Cpy_Name nvarchar(200), Attend numeric(5),Selectstart NVarchar(200),DOJ Datetime,status  NVarchar(200))";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Interview_Results'");
            if (getval == "0")
            {
                acd_create = acd_create + " Create Table Interview_Results (Cpy_Name NVarchar(200),Stud_Name NVarchar(200),SelStart NVarchar(200),DOJ Datetime,status NVarchar(200))";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='internal_range'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[internal_range]([from_mark] [int] NULL,[to_mark] [int] NULL,[alloted_mark] [int] NULL,[criteria_no] [int] NULL)ON [PRIMARY]";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='internal_range'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE TABLE [subjectChooser_New] ([semester] [smallint] NULL ,[roll_no] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [subject_no] [numeric](18, 0) NULL , [fromdate] [datetime] NULL , [todate] [datetime] NULL , [paper_order] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [subtype_no] [numeric](18, 0) NULL , [Batch] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [grp_cell] [numeric](18, 0) NULL) ON [PRIMARY]";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='internal_range'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE TABLE [LabAlloc_New] ([Degree_Code] [numeric](18, 0) NOT NULL ,[Semester] [numeric](18, 0) NOT NULL , [Batch_Year] [numeric](18, 0) NOT NULL , [Subject_No] [numeric](18, 0) NOT NULL , [Day_Value] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL , [Hour_Value] [int] NOT NULL , [Stu_Batch] [varchar] (15) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL , [Staff_Code] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Sections] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [fdate] [datetime] NULL , [tdate] [datetime] NULL , [sch_part] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [add_batch] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [REMARKS] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL) ON [PRIMARY]";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='certdett'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table certdett(App_No nvarchar(15), Roll_No nvarchar(15),Certtype nvarchar(100), IssueDate datetime,IssuedPerson nvarchar(100), Trip integer, CertNo nvarchar(50), Remarks nvarchar(150))";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Code_Generate'");
            if (getval == "0")
            {
                acd_create = acd_create + " Create Table Code_Generate(Asset_Code nvarchar(50),Asset_Acr nvarchar(50),Asset_StartWith numeric,Asset_Serial numeric,Asset_ModifyDate datetime)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='yearbreak'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table yearbreak(app_no numeric(10),yearbreak_date datetime,Reason nvarchar(500),addressg nvarchar(100),streetg nvarchar(100),cityg nvarchar(100),districtg nvarchar(100),stateg nvarchar(100),ping nvarchar(100),phg nvarchar(100))";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='yearbreak'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table cam_printsettings (head_flag bit,average bit,passper bit,staffname bit,totrank bit,foot_all bit,foot_first nvarchar(100),foot_center nvarchar(100),foot_end nvarchar(100),foot_content nvarchar(500))";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='stud_consultant'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table stud_consultant(dir_othflg bit,consul_code numeric(9),consul_name nvarchar(100),agent_code numeric(9),agent_name nvarchar(100),coll_code numeric(9))";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='cam_mark_opt'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE TABLE cam_mark_opt (degree_code numeric,batch_year numeric,semester numeric,sections varchar(10),criteria_no numeric ,subject_no numeric,exam_code numeric ,text_criteria varchar(500),text_value float)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Rank'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE TABLE Rank (Rollno varchar(500),criteria_no varchar(500),Total int,perc float,Rank varchar (200))";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Rank'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table categorysetting(Actualcategory_code nvarchar(50),dummycategory_code nvarchar(50))";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='absent_fine_amt'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table absent_fine_amt(day_value nvarchar(20),hr1 numeric,hr2 numeric,hr3 numeric,hr4 numeric,hr5 numeric,hr6 numeric,hr7 numeric,hr8 numeric,hr9 numeric,hr10 numeric)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='dummynumber'");
            if (getval == "0")
            {
                acd_create = acd_create + " create table dummynumber(batch int,degreecode int,subject varchar(20),semester int,roll_no varchar(50),regno varchar(50),dummy_no int,dummy_type int,subject_no int,exam_month int,exam_year int,exam_date varchar(80))";
            }
            getval = string.Empty;
            getval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StudBankDet'");
            if (getval == "0")
            {
                acd_create = acd_create + " CREATE TABLE StudBankDet (App_No numeric,AccFor nvarchar(10),AccNo nvarchar(30),DebitCardNo nvarchar(50),IFSCCode nvarchar(30),BankName nvarchar(10),Branch nvarchar(100))";
            }
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RegistrationNew'");
            if (find_tablename == "0")
            {
                acd_create = acd_create + " CREATE TABLE RegistrationNew(Roll_No nvarchar(25) NULL,App_No numeric(18, 0) NOT NULL,Current_Year smallint NULL,Current_Semester smallint NULL,Stud_Type nvarchar(50) NULL,Roll_Admit nvarchar(25) NOT NULL,RollNo_Flag bit NOT NULL,CC bit NOT NULL,DelFlag numeric(8, 0) NULL,	Access_Date datetime NULL,	Access_Time nvarchar(16) NULL,	Adm_Date datetime NULL,	Stud_Name nvarchar(100) NULL,	Reg_No nvarchar(25) NULL,	Batch_Year smallint NULL,	Exam_Flag nvarchar(50) NULL,	degree_code numeric(18, 0) NULL,	category_code numeric(18, 0) NULL,	tcno nvarchar(50) NULL,	tcdate datetime NULL,	pass nvarchar(25) NULL,	referby nvarchar(50) NULL,	LockInfo bit NULL,	mode numeric(18, 0) NULL,	Advisor varchar(50) NULL DEFAULT (''),	debar_reason varchar(20) NULL,	cardno varchar(20) NULL,	Sections nvarchar(50) NULL,	serialno numeric(18, 0) NULL,	lib_id nvarchar(50) NULL,	JMonth smallint NULL,	JYear smallint NULL,	Attempts numeric(18, 0) NULL,	Rejoin_Status numeric(18, 0) NULL,	Regulation numeric(18, 0) NULL,	Exam_Elg nvarchar(50) NULL,	Add_Batch nvarchar(50) NULL,	Fingerprint1 ntext NULL,	Fingerprint2 ntext NULL,	Fingerprint3 ntext NULL,	Branch_code numeric(18, 0) NULL,group_code numeric(18, 0) NULL,	pinnumber varchar(50) NULL,	Mark_serialno numeric(18, 0) NULL,	apply_degree_code numeric(18, 0) NULL,	cons_date datetime NULL,	acr varchar(50) NULL,	batch_acr varchar(20) NULL,	roll_acr varchar(20) NULL,	Status bit NULL,	subdiv nvarchar(50) NULL,	Bus_RouteID nvarchar(30) NULL,Boarding nvarchar(50) NULL,	Consortium varchar(100) NULL,	PIN_No nvarchar(30) NULL,	PIN_Status numeric(18, 0) NULL,	college_code numeric(18, 0) NULL,	VehID nvarchar(30) NULL,	access_pinno nvarchar(100) NULL,	stud_log_pw varchar(128) NULL,	stud_father_pw varchar(128) NULL,	stud_mother_pw varchar(128) NULL,	Seat_No nvarchar(3) NULL,DeviceID nvarchar(50) NULL,	Univcode nvarchar(30) NULL,	OldCollegeCode varchar(30) NULL,	OldDegree_Code varchar(20) NULL,	Trans_PayType nvarchar(10) NULL,	finger_id int NULL,	Traveller_Date datetime NULL,	smart_serial_no varchar(100) NULL,	TransferDate datetime NULL,	TMRCode nvarchar(30) NULL,	AdmitedDegree nvarchar(30) NULL,	AdmitedYear nvarchar(30) NULL,	DateOfLeaving datetime NULL,	AcademicYear nvarchar(30) NULL,	TCSerialNo nvarchar(50) NULL,	isalumni bit NULL,	is_other_due int NULL,	is_fee_due int NULL,    IsCanceledStage bit NULL,	Post_Matric_Scholarship bit NULL,	IsSchemeAdmission bit NULL,	IsSchemeCode bigint NULL,	IsSchemeAmount decimal(12, 2) NULL,	isRedo bit NOT NULL,	SchemeDate datetime NULL,	hostel_admission_status tinyint NULL,	Is_Stud_Staff bit NULL,	staff_appl_id numeric(18, 0) NULL)";
            }
            if (acd_create != "")
            {
                int creatact = d2.update_method_wo_parameter(acd_create, "Text");
            }
            //alter query 22/04/2016
            string getalterval = string.Empty;
            string acd_alter = string.Empty;
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='department'");
            if (find_tablename != "0")
            {
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'department' AND COLUMN_NAME = 'dept_acronym'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table department add dept_acronym varchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='readmission'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'readmission' AND COLUMN_NAME = 'newbatch_year'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table readmission add newbatch_year numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='collinfo'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'Chancellor'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table collinfo add Chancellor nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'ViceChancellor'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table collinfo add ViceChancellor nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'direct_refer'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add direct_refer numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_name'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add refer_name nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'enrollmentcard'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add   enrollmentcard bit";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'enrollment_card_date'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add   enrollment_card_date datetime";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'marks' AND COLUMN_NAME = 'regular_lateral'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table marks add regular_lateral numeric";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'reject_flag'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add reject_flag numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'reject_reason'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add reject_reason nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'stillwork'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add stillwork numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Program_schedule'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Program_schedule' AND COLUMN_NAME = 'college_code'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table Program_schedule add college_code numeric";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'seattype_cat' AND COLUMN_NAME = 'selection'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter table  seattype_cat add selection numeric";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'seattype_cat' AND COLUMN_NAME = 'percentage_Regular_student'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter table  seattype_cat add percentage_Regular_student numeric";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bellschedule'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bellschedule' AND COLUMN_NAME = 'batch_year'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter table bellschedule add batch_year numeric";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'room_detail' AND COLUMN_NAME = 'dept_code'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter table room_detail add dept_code numeric";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='trustees_info'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'trustees_info' AND COLUMN_NAME = 'address'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table trustees_info add address varchar(150)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'trustees_info' AND COLUMN_NAME = 'qualification'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table trustees_info add qualification varchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'trustees_info' AND COLUMN_NAME = 'designation'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table trustees_info add designation varchar(150)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='coll_particulars'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'coll_particulars' AND COLUMN_NAME = 'trust_street'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table coll_particulars add trust_street varchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'coll_particulars' AND COLUMN_NAME = 'trust_street'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table coll_particulars add trust_city varchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'coll_particulars' AND COLUMN_NAME = 'trust_district'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table coll_particulars add trust_district varchar(150)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'coll_particulars' AND COLUMN_NAME = 'trust_state'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table coll_particulars add trust_state varchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'coll_particulars' AND COLUMN_NAME = 'trust_phone'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table coll_particulars add trust_phone varchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'coll_particulars' AND COLUMN_NAME = 'trust_pincode'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table coll_particulars add trust_pincode varchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='trustees_info'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'trustees_info' AND COLUMN_NAME = 'doj'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table trustees_info add doj datetime";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'trustees_info' AND COLUMN_NAME = 'duration'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table trustees_info add duration numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'trustees_info' AND COLUMN_NAME = 'photo'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table trustees_info add photo image";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='department'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'department' AND COLUMN_NAME = 'start_year'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table department add start_year numeric";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'marks' AND COLUMN_NAME = 'mark_eigible'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table marks add mark_eigible numeric";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='collinfo'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'district'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table collinfo add district varchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'state'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table collinfo add state varchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'pincode'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table collinfo add pincode varchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='block_master'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'block_master' AND COLUMN_NAME = 'classrooms'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table block_master add classrooms numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'block_master' AND COLUMN_NAME = 'lab'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table block_master add lab numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'block_master' AND COLUMN_NAME = 'auditorium'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table block_master add auditorium numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='department'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'department' AND COLUMN_NAME = 'build_code'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table department add build_code numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'department' AND COLUMN_NAME = 'isacademic'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table department add isacademic numeric";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Eligibility' AND COLUMN_NAME = 'degree_code'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table Eligibility add degree_code numeric";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Eligibility' AND COLUMN_NAME = 'batch_year'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table Eligibility add batch_year numeric";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'hobbies'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add hobbies nvarchar(200)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Streetp'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add Streetp nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Cityp'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add Cityp nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Districtp'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add Districtp nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Streetc'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add Streetc nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Cityc'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add Cityc nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Districtc'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add Districtc nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'addressg'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add addressg nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Streetg'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add Streetg nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Districtg'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add Districtg nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'stateg'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add stateg nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'ping'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add ping numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Cityg'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add Cityg nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'phg'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add phg nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'referby'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add referby nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exmtt_det'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exmtt_det' AND COLUMN_NAME = 'exam_session'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table exmtt_det alter column exam_session varchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='external_staff'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'external_staff' AND COLUMN_NAME = 'coll_code'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table external_staff add coll_code numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exmtt_det'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exmtt_det' AND COLUMN_NAME = 'exam_type'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table exmtt_det add exam_type nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exmtt_det' AND COLUMN_NAME = 'criteria_no'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table exmtt_det add criteria_no numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exmtt' AND COLUMN_NAME = 'criteria_no'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table exmtt add criteria_no numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exmtt_det' AND COLUMN_NAME = 'duration'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table exmtt_det alter column duration datetime";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exmtt_det' AND COLUMN_NAME = 'InternalExaminer'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table exmtt_det alter column InternalExaminer varchar(500)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exam_type'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_type' AND COLUMN_NAME = 'duration'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table exam_type alter column duration char(10)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='eligibility_list'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'eligibility_list' AND COLUMN_NAME = 'fine_amt'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table eligibility_list add fine_amt float";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exmtt'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exmtt' AND COLUMN_NAME = 'exam_type'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table exmtt add exam_type varchar(100)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'marks' AND COLUMN_NAME = 'degree_code'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table marks add degree_code numeric";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'marks' AND COLUMN_NAME = 'selection'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table marks add selection bit";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'marks' AND COLUMN_NAME = 'batch_year'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table marks add batch_year smallint";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'marks' AND COLUMN_NAME = 'batch_year'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + "  alter table marks add priority  smallint";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ndegree' AND COLUMN_NAME = 'surperc'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table ndegree add surperc int";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ndegree' AND COLUMN_NAME = 'acc_status'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table ndegree add acc_status varchar(200)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'seattype_cat' AND COLUMN_NAME = 'No_Regular_Student'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table seattype_cat add No_Regular_Student numeric";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'seattype_cat' AND COLUMN_NAME = 'No_Lateral_Student'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table seattype_cat add No_Lateral_Student numeric";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'seattype_cat' AND COLUMN_NAME = 'Percentage_Lateral_Student'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table seattype_cat add Percentage_Lateral_Student numeric";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'seattype_cat' AND COLUMN_NAME = 'Flexibility'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table seattype_cat add Flexibility bit";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'building_master' AND COLUMN_NAME = 'building_description'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table building_master add building_description varchar(100)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='trustees_info'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'trustees_info' AND COLUMN_NAME = 'Isresign'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table trustees_info add Isresign bit";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'room_detail' AND COLUMN_NAME = 'Room_type'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table room_detail add Room_type varchar(200)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'room_detail' AND COLUMN_NAME = 'selectionflag'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table room_detail add selectionflag bit";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'floor_master' AND COLUMN_NAME = 'selectionflag'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table floor_master add selectionflag bit";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'building_master' AND COLUMN_NAME = 'selectionflag'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table building_master add selectionflag bit";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='class_master'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'class_master' AND COLUMN_NAME = 'floorid'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table class_master add floorid varchar(30)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='cpydetails'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cpydetails' AND COLUMN_NAME = 'company_flag'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table cpydetails add company_flag numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cpydetails' AND COLUMN_NAME = 'street'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table cpydetails add street nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cpydetails' AND COLUMN_NAME = 'city'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table cpydetails add city nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cpydetails' AND COLUMN_NAME = 'district'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table cpydetails add district nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cpydetails' AND COLUMN_NAME = 'state'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table cpydetails add state  nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cpydetails' AND COLUMN_NAME = 'pincode'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table cpydetails add pincode  numeric";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'marks' AND COLUMN_NAME = 'college_code'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table marks add college_code int";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='gate_student'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'gate_student' AND COLUMN_NAME = 'college_code'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table gate_student add college_code int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'experyears'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn alter column experyears nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='cert_student_list'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cert_student_list' AND COLUMN_NAME = 'received'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table cert_student_list add received int";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cert_student_list' AND COLUMN_NAME = 'option_cert'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table cert_student_list add option_cert int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='enquiry'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'sex'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table enquiry add  [sex] [tinyint] NULL";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='visitor'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'visitor' AND COLUMN_NAME = 'isstaff'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter table visitor add isstaff  int";
                }
            }

            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'delflag'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table registration alter column delflag numeric(8)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'IsTcIssued'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table registration add IsTcIssued bit default 0";
                }
            }

            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'studentcancel' AND COLUMN_NAME = 'cancel_flag'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table studentcancel add cancel_flag numeric(8)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='formprivilages'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'formprivilages' AND COLUMN_NAME = 'addok'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table formprivilages add [addok] [bit] NOT NULL CONSTRAINT [DF_FormPrivilages_addok] DEFAULT (0)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='UserLogMaster'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'UserLogMaster' AND COLUMN_NAME = 'college_code'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table UserLogMaster add  [college_code] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exambatch'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exambatch' AND COLUMN_NAME = 'college_code'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table exambatch add college_code int";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exambatch' AND COLUMN_NAME = 'college_code'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table exambatch add college_code int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='enquiry'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'street'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table enquiry add street varchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'city'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table enquiry add city varchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'district'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table enquiry add district varchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'state'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table enquiry add state varchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'acr'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table enquiry add acr varchar(50)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'eligible_mark' AND COLUMN_NAME = 'selection'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table eligible_mark add selection varchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'eligible_mark' AND COLUMN_NAME = 'seattype'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table eligible_mark add seattype varchar(50)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'apply_degree_code'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table registration add apply_degree_code numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='OtherColl_Transfer'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'OtherColl_Transfer' AND COLUMN_NAME = 'prev_college_rollno'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table OtherColl_Transfer add prev_college_rollno varchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'OtherColl_Transfer' AND COLUMN_NAME = 'prev_college_regno'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table OtherColl_Transfer add prev_college_regno varchar(50)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'moblie'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table enquiry add moblie nvarchar(30)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_debar' AND COLUMN_NAME = 'addressg'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table stud_debar add addressg nvarchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_debar' AND COLUMN_NAME = 'Streetg'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table stud_debar add Streetg nvarchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_debar' AND COLUMN_NAME = 'Cityg'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table stud_debar add Cityg nvarchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_debar' AND COLUMN_NAME = 'Districtg'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table stud_debar add Districtg nvarchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_debar' AND COLUMN_NAME = 'stateg'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table stud_debar add stateg nvarchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_debar' AND COLUMN_NAME = 'ping'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table stud_debar add ping nvarchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_debar' AND COLUMN_NAME = 'phg'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table stud_debar add phg nvarchar(50)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='addressg'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'discontinue' AND COLUMN_NAME = 'addressg'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table discontinue add addressg nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'discontinue' AND COLUMN_NAME = 'Streetg'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table discontinue add Streetg nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'discontinue' AND COLUMN_NAME = 'Cityg'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table discontinue add Cityg nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'discontinue' AND COLUMN_NAME = 'Districtg'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table discontinue add Districtg nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'discontinue' AND COLUMN_NAME = 'stateg'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table discontinue add stateg nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'discontinue' AND COLUMN_NAME = 'ping'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table discontinue add ping nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'discontinue' AND COLUMN_NAME = 'phg'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table discontinue add phg nvarchar(50)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'studentcancel' AND COLUMN_NAME = 'addressg'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table studentcancel add addressg nvarchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'studentcancel' AND COLUMN_NAME = 'Streetg'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table studentcancel add Streetg nvarchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'studentcancel' AND COLUMN_NAME = 'Cityg'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table studentcancel add Cityg nvarchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'studentcancel' AND COLUMN_NAME = 'Districtg'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table studentcancel add Districtg nvarchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'studentcancel' AND COLUMN_NAME = 'stateg'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter table studentcancel add stateg nvarchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'studentcancel' AND COLUMN_NAME = 'ping'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table studentcancel add ping nvarchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'studentcancel' AND COLUMN_NAME = 'phg'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table studentcancel add phg nvarchar(50)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='selection_list'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'selection_list' AND COLUMN_NAME = 'direct_admit_flag'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table selection_list add direct_admit_flag bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'cons_date'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table registration add cons_date datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='stud_prev_details'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_prev_details' AND COLUMN_NAME = 'marksheetno'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table stud_prev_details add marksheetno varchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'enquiry'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add enquiry bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='enquiry'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'batch_year'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table enquiry add batch_year smallint";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'enq_acr'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table code_generation add enq_acr varchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'adm_acr'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table code_generation add adm_acr varchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'enq_dept_acr'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table code_generation add enq_dept_acr varchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'adm_dept_acr'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table code_generation add adm_dept_acr varchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'enq_other_acr'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table code_generation add enq_other_acr varchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'adm_other_acr'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table code_generation add adm_other_acr varchar(50)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'acr'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table registration add acr varchar(50)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'app_acr'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table code_generation add app_acr varchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'app_dept_acr'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table code_generation add app_dept_acr varchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'app_other_acr'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table code_generation add app_other_acr varchar(50)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'acr'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add acr varchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='enquiry'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'batch_acr'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table enquiry add batch_acr varchar(20)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'batch_acr'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add batch_acr varchar(20)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'enq_code_flag'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table code_generation add enq_code_flag bit";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'app_code_flag'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table code_generation add app_code_flag bit";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'adm_code_flag'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table code_generation add adm_code_flag bit";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'roll_acr'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table registration add roll_acr varchar(20)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='enquiry'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'current_semester'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table enquiry add current_semester numeric";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'eligible_mark' AND COLUMN_NAME = 'elig_type'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table eligible_mark add elig_type numeric";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='enquiry'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'mode'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table enquiry add mode numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'quota'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add quota varchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='stdphoto'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stdphoto' AND COLUMN_NAME = 'f_sign'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table stdphoto add f_sign image";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stdphoto' AND COLUMN_NAME = 'm_sign'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table stdphoto add m_sign image";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stdphoto' AND COLUMN_NAME = 'g_sign'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table stdphoto add g_sign image";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='department'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'department' AND COLUMN_NAME = 'pattern'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table department add pattern varchar(1)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'contact_person' AND COLUMN_NAME = 'Mobileno'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table contact_person add Mobileno varchar(10)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='eligibility_list'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'eligibility_list' AND COLUMN_NAME = 'app_no'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table  eligibility_list add app_no numeric";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'room_detail' AND COLUMN_NAME = 'no_of_rows'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table room_detail add no_of_rows numeric";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'room_detail' AND COLUMN_NAME = 'no_of_columns'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table room_detail add no_of_columns numeric";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'room_detail' AND COLUMN_NAME = 'no_of_columns'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table room_detail add room_size nvarchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'room_detail' AND COLUMN_NAME = 'students_allowed'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table room_detail add students_allowed numeric";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bellschedule'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bellschedule' AND COLUMN_NAME = 'no_of_breaks'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table bellschedule add no_of_breaks numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bellschedule' AND COLUMN_NAME = 'period1'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table bellschedule alter column period1 nvarchar(20)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='seminfo'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'seminfo' AND COLUMN_NAME = 'no_of_working_hrs'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table seminfo add no_of_working_hrs int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='perv_marks_history'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'perv_marks_history' AND COLUMN_NAME = 'Marksheetno'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table perv_marks_history add Marksheetno varchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'perv_marks_history' AND COLUMN_NAME = 'InternalGrade'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table perv_marks_history add InternalGrade varchar(4)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'perv_marks_history' AND COLUMN_NAME = 'ExternalGrade'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table perv_marks_history add ExternalGrade varchar(4)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='perv_marks_history'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'perv_marks_history' AND COLUMN_NAME = 'InternalMark'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table perv_marks_history add InternalMark int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='perv_marks_history'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'perv_marks_history' AND COLUMN_NAME = 'ExternalMark'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table perv_marks_history add ExternalMark int";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'grade_master' AND COLUMN_NAME = 'credit_points'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table  grade_master alter column credit_points float";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Countryp'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add Countryp varchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Countryc'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add Countryc varchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Countryg'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add Countryg varchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='department'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'department' AND COLUMN_NAME = 'dean_name'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table department add dean_name nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'department' AND COLUMN_NAME = 'coordinator_name'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table department add coordinator_name nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='collinfo'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'acr'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table collinfo alter column acr varchar(10)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'ownvehicle_reg'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add ownvehicle_reg varchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Driving_details'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add Driving_details varchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='enquiry'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'mark'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table enquiry add mark varchar(400)";
                }
                else
                {
                    acd_alter = acd_alter + " alter table enquiry alter column mark varchar(400)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_complete' AND COLUMN_NAME = 'addressg'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table stud_complete   alter column addressg varchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_complete' AND COLUMN_NAME = 'streetg'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table stud_complete   alter column  streetg varchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_complete' AND COLUMN_NAME = 'cityg'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table stud_complete  alter column cityg varchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_complete' AND COLUMN_NAME = 'districtg'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table stud_complete  alter column  districtg  varchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_complete' AND COLUMN_NAME = 'ping'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table stud_complete  alter column ping  varchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_complete' AND COLUMN_NAME = 'phg'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table stud_complete  alter column  phg varchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_complete' AND COLUMN_NAME = 'stateg'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table stud_complete  alter column  stateg varchar(50)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_complete' AND COLUMN_NAME = 'contact_character'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table stud_complete add contact_character nvarchar(100)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cert_issret' AND COLUMN_NAME = 'Due_date'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table cert_issret add Due_date datetime";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cert_issret' AND COLUMN_NAME = 'Expected_retdate'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table cert_issret add Expected_retdate datetime";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cert_issret' AND COLUMN_NAME = 'purpose'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table cert_issret add purpose nvarchar(300)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='cpydetails'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cpydetails' AND COLUMN_NAME = 'Category'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table cpydetails add Category int";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'grade_master' AND COLUMN_NAME = 'Semester'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table grade_master add Semester integer";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='collinfo'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'COE'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table collinfo add COE varchar(50)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'seattype_cat' AND COLUMN_NAME = 'fee_wavier'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table  seattype_cat add  fee_wavier integer";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='collinfo'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'coe_signature'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table collinfo add coe_signature image";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'principal_sign'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table collinfo add principal_sign image";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'students_scholarship' AND COLUMN_NAME = 'sch_flag'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table students_scholarship add sch_flag int";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'students_scholarship' AND COLUMN_NAME = 'rem_amt'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table students_scholarship add rem_amt float";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'students_scholarship' AND COLUMN_NAME = 'schol_amount'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table students_scholarship alter column schol_amount float";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'students_scholarship' AND COLUMN_NAME = 'schpayment_flag'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table students_scholarship add schpayment_flag decimal";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='student_list'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'student_list' AND COLUMN_NAME = 'validto'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table student_list add validto varchar(50) ";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'room_detail' AND COLUMN_NAME = 'Avl_Student'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table room_detail add Avl_Student int";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'interview_schedule' AND COLUMN_NAME = 'selected'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table interview_schedule Add selected nvarchar(5)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='cpydetails'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cpydetails' AND COLUMN_NAME = 'reqrs'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table cpydetails Add reqrs nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cpydetails' AND COLUMN_NAME = 'elig_Att_perc'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table cpydetails Add elig_Att_perc decimal(10,2)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cpydetails' AND COLUMN_NAME = 'elig_Mark_perc'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table cpydetails Add elig_Mark_perc decimal(10,2)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cpydetails' AND COLUMN_NAME = 'Selection_type'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table cpydetails Add Selection_type nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cpydetails' AND COLUMN_NAME = 'Total_Emp'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table cpydetails Add Total_Emp numeric(5)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cpydetails' AND COLUMN_NAME = 'Web'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table cpydetails Add Web nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cpydetails' AND COLUMN_NAME = 'Dept_Interest'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table cpydetails Add Dept_Interest nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cpydetails' AND COLUMN_NAME = 'fax'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table cpydetails Add fax nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cpydetails' AND COLUMN_NAME = 'start_year'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table cpydetails Add start_year nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cpydetails' AND COLUMN_NAME = 'cpy_code'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " ALTER TABLE cpydetails Alter column cpy_code nvarchar(200)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Contact_Person' AND COLUMN_NAME = 'type'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter Table Contact_Person Add type nvarchar(100)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Contact_Person' AND COLUMN_NAME = 'dept'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter Table Contact_Person Add dept nvarchar(100)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Contact_Person' AND COLUMN_NAME = 'con_type'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter Table Contact_Person Add con_type nvarchar(100)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Placement_test' AND COLUMN_NAME = 'cpytest_name'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table Placement_test add cpytest_name nvarchar(250)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'VehID'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Registration Add VehID Nvarchar(30)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'Status'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table registration Add Status Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'region'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add region numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='degree'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'degree' AND COLUMN_NAME = 'Noofsubdiv'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table degree add Noofsubdiv int ";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Ndegree' AND COLUMN_NAME = 'Nsubdiv'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table Ndegree add Nsubdiv int";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'subdiv'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table registration add subdiv nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='criteriaforinternal'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'criteriaforinternal' AND COLUMN_NAME = 'isgroup'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table criteriaforinternal add isgroup int";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'criteriaforinternal' AND COLUMN_NAME = 'groupcode'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table criteriaforinternal add groupcode  nvarchar(100)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_details' AND COLUMN_NAME = 'remark'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table stud_details add remark varchar(200)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='enquiry'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'remark'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table enquiry add remark varchar(200)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exmtt'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exmtt' AND COLUMN_NAME = 'sections'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table exmtt add  sections nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'preferences'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add preferences nvarchar(500)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='enquiry'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'entrance_detail'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table enquiry add entrance_detail   nvarchar(500)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'entrance_detail'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add entrance_detail   nvarchar(500)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'Bus_RouteID'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Registration add Bus_RouteID nvarchar(30)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'Boarding'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Registration add Boarding nvarchar(50)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Placement_test' AND COLUMN_NAME = 'cpyname'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter Table Placement_test Add cpyname nvarchar(200)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Placement_mark' AND COLUMN_NAME = 'cpyname'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter Table Placement_mark Add cpyname nvarchar(200)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'college_preference'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add college_preference  nvarchar(100)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Code_Generate' AND COLUMN_NAME = 'College_Code'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter Table Code_Generate add College_Code numeric";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StdPhoto'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StdPhoto' AND COLUMN_NAME = 'visit_1'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table StdPhoto add visit_1 image";
                } getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StdPhoto' AND COLUMN_NAME = 'visit_2'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table StdPhoto add visit_2 image";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StdPhoto' AND COLUMN_NAME = 'visit_3'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table StdPhoto add visit_3 image";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StdPhoto' AND COLUMN_NAME = 'visit_3'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table StdPhoto add visit_3 image";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StdPhoto' AND COLUMN_NAME = 'svisit_1'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table StdPhoto add svisit_1 image";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StdPhoto' AND COLUMN_NAME = 'svisit_2'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table StdPhoto add svisit_2 image";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StdPhoto' AND COLUMN_NAME = 'svisit_3'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table StdPhoto add svisit_3 image";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'addressv1'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  addressv1 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Streetv1'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  Streetv1 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Cityv1'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  Cityv1 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Districtv1'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  Districtv1 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'countryv1'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  countryv1 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'pinv1'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  pinv1 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'phv1'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  phv1 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'cellv1'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  cellv1 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'addressv2'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  addressv2 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Streetv2'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  Streetv2 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Cityv2'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  Cityv2 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Districtv2'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  Districtv2 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'statev2'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  statev2 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'countryv2'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  countryv2 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'pinv2'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  pinv2 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'phv2'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  phv2 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'cellv2'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  cellv2 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'addressv3'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  addressv3 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Streetv3'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  Streetv3 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Cityv3'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  Cityv3 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Cityv3'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  Districtv3 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'statev3'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  statev3 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'countryv3'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  countryv3 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'pinv3'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  pinv3 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'phv3'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  phv3 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'cellv3'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  cellv3 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'remarks'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  remarks nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Stud_prev_details'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'medium'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table Stud_prev_details add medium nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'grade'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table Stud_prev_details add grade nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'InternalPercentage'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table Stud_prev_details add InternalPercentage int";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'ExternalPercentage'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table Stud_prev_details add ExternalPercentage int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'grade'");
                if (getalterval == "0")
                {
                    //acd_alter = acd_alter + " alter table registration add Consortium varchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'college_code'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add college_code numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='trustees_info'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'trustees_info' AND COLUMN_NAME = 'isdel'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table trustees_info add isdel numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='enquiry'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'college_preference'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table enquiry add college_preference nvarchar(500)";
                }
                else
                {
                    acd_alter = acd_alter + " alter table enquiry alter column college_preference nvarchar(500)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'college_preference'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn alter column college_preference nvarchar(500)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='stud_relation'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_relation' AND COLUMN_NAME = 'isstaff'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table stud_relation add isstaff numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_relation' AND COLUMN_NAME = 'college_code'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table stud_relation add college_code numeric";
                } getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_relation' AND COLUMN_NAME = 'ph'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table stud_relation add ph numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'first_graduate'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter table applyn add first_graduate numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'isdonar'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter table applyn add isdonar numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'tutionfee_waiver'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter table applyn add tutionfee_waiver numeric";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Alternate_schedule' AND COLUMN_NAME = 'mon9'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter table Alternate_schedule add mon9 nvarchar(300)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Alternate_schedule' AND COLUMN_NAME = 'mon10'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter table Alternate_schedule add mon10 nvarchar(300)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Alternate_schedule' AND COLUMN_NAME = 'tue9'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter table Alternate_schedule add tue9 nvarchar(300)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Alternate_schedule' AND COLUMN_NAME = 'tue10'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter table Alternate_schedule add tue10 nvarchar(300)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Alternate_schedule' AND COLUMN_NAME = 'wed9'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter table Alternate_schedule add wed9 nvarchar(300)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Alternate_schedule' AND COLUMN_NAME = 'wed10'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter table Alternate_schedule add wed10 nvarchar(300)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Alternate_schedule' AND COLUMN_NAME = 'thu10'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter table Alternate_schedule add thu10 nvarchar(300)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Alternate_schedule' AND COLUMN_NAME = 'fri9'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter table Alternate_schedule add fri9 nvarchar(300)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Alternate_schedule' AND COLUMN_NAME = 'fri10'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter table Alternate_schedule add fri10 nvarchar(300)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Alternate_schedule' AND COLUMN_NAME = 'sat9'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter table Alternate_schedule add sat9 nvarchar(300)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Alternate_schedule' AND COLUMN_NAME = 'sat10'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter table Alternate_schedule add sat10 nvarchar(300)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Alternate_schedule' AND COLUMN_NAME = 'sun9'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter table Alternate_schedule add sun9 nvarchar(300)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Alternate_schedule' AND COLUMN_NAME = 'sun10'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter table Alternate_schedule add sun10 nvarchar(300)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'access_pinno'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table registration add access_pinno nvarchar(100)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'eligible_mark' AND COLUMN_NAME = 'cutoff_subjects'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table eligible_mark add cutoff_subjects nvarchar(200)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'eligible_mark' AND COLUMN_NAME = 'cutoff_subjectno'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table eligible_mark add cutoff_subjectno nvarchar(200)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'eligible_mark' AND COLUMN_NAME = 'totalmarks'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table eligible_mark add totalmarks numeric(20)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'eligible_mark' AND COLUMN_NAME = 'cutoff_eligmark'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table eligible_mark add cutoff_eligmark numeric(20)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'eligible_mark' AND COLUMN_NAME = 'divideby'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table eligible_mark add divideby numeric(20)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='in_out_time'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'in_out_time' AND COLUMN_NAME = 'Shift'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table in_out_time add Shift nvarchar(30)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Student_List'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Student_List' AND COLUMN_NAME = 'Roll_No'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Student_List Alter Column Roll_No nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'stud_log_pw'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table registration Add stud_log_pw varchar(128)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cam_printsettings' AND COLUMN_NAME = 'ack_flag'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table cam_printsettings add ack_flag bit";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cam_printsettings' AND COLUMN_NAME = 'ack_sender'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table cam_printsettings add ack_sender nvarchar(100)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cam_printsettings' AND COLUMN_NAME = 'ack_content'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table cam_printsettings add ack_content nvarchar(1000)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cam_printsettings' AND COLUMN_NAME = 'ack_coll'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table cam_printsettings add ack_coll bit";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_phoneno'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add refer_phoneno nvarchar(15)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_email'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add refer_email nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_agent'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add refer_agent nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_stcode'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add refer_stcode  nvarchar(15)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_amount'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add refer_amount nvarchar(15)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='collinfo'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'Massemail'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter table collinfo add Massemail nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'Masspwd'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter table collinfo add Masspwd nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='stud_father_pw'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'stud_father_pw'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table registration add stud_father_pw varchar(128)";
                }
                else
                {
                    acd_alter = acd_alter + " alter table registration alter column stud_father_pw varchar(128)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'stud_mother_pw'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table registration add stud_mother_pw varchar(128)";
                }
                else
                {
                    acd_alter = acd_alter + " alter table registration alter column stud_mother_pw varchar(128)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Rank' AND COLUMN_NAME = 'Total'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table Rank alter column Total float";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'agent_address'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add agent_address nvarchar(500)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'agent_city'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add agent_city nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'agent_district'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add agent_district nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'agent_state'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add agent_state  nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exam_type'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_type' AND COLUMN_NAME = 'start_period'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table exam_type add start_period int";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_type' AND COLUMN_NAME = 'end_period'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table exam_type add end_period int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exmtt'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exmtt' AND COLUMN_NAME = 'Semester'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table exmtt add Semester int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='collinfo'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CollInfo' AND COLUMN_NAME = 'Acr'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table CollInfo Alter Column Acr varchar(20)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='degree'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'degree' AND COLUMN_NAME = 'Regulation'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table degree Add Regulation varchar(20)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Ndegree' AND COLUMN_NAME = 'Regulation'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter Table Ndegree Add Regulation varchar(20)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='seminfo'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'seminfo' AND COLUMN_NAME = 'starting_dayorder'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table seminfo add starting_dayorder numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='collinfo'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'com_name'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table collinfo add com_name varchar(200)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subject'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'subject_name'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table subject alter column subject_name varchar(1000)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Insurance_Amount'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table applyn ADD Insurance_Amount Float";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Insurance_Nominee'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table applyn ADD Insurance_Nominee nvarchar(200)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'seattype_cat' AND COLUMN_NAME = 'Cutoff_Per'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter Table seattype_cat Add Cutoff_Per float";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'Seat_No'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Registration Add Seat_No nvarchar(3)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='department'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Department' AND COLUMN_NAME = 'PhoneNo'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Department Add PhoneNo nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Department' AND COLUMN_NAME = 'Dept_Name'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Department Alter Column Dept_Name nvarchar(200)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'stud_name'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Alter Column stud_name nvarchar(100)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'categorysetting' AND COLUMN_NAME = 'dummycategory_code'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " alter table categorysetting alter column dummycategory_code nvarchar(800)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'DeviceID'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Registration Add DeviceID nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='collinfo'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CollInfo' AND COLUMN_NAME = 'LockODDays'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table CollInfo ADD LockODDays numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CollInfo' AND COLUMN_NAME = 'LOD_Flag'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table CollInfo ADD LOD_Flag Bit";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CollInfo' AND COLUMN_NAME = 'ChairPerson'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table CollInfo Add ChairPerson nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CollInfo' AND COLUMN_NAME = 'Director'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table CollInfo Add Director nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CollInfo' AND COLUMN_NAME = 'ChiefExecOff'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table CollInfo Add ChiefExecOff nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'Univcode'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Registration Add Univcode nvarchar(30)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'mother_age'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add mother_age int";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'guardian_age'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add guardian_age int";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'father_age'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add father_age int";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'enroll_date'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add enroll_date datetime";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'feedate'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add feedate datetime";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Guardian_occ'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add Guardian_occ numeric(18,0)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Guardian_income'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add Guardian_income numeric(18,0)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'fatherdob'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add fatherdob datetime";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'motherdob'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add motherdob datetime";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Fat_off_addressP'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add Fat_off_addressP nvarchar(500)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Fat_off_street'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add Fat_off_street nvarchar(500)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Fat_off_state'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  Fat_off_state numeric(25, 0) NULL";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Fat_off_country'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  Fat_off_country nvarchar(500)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Fat_off_pincode'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  Fat_off_pincode nvarchar(100) NULL";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'handy_details'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add handy_details nvarchar(500)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'mot_off_address1'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  mot_off_address1 nvarchar(500)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'mot_off_address2'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  mot_off_address2 nvarchar(500)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'mot_off_state'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  mot_off_state numeric(25, 0) NULL";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'mot_off_country'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  mot_off_country nvarchar(500)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'mot_off_pincode'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  mot_off_pincode nvarchar(100) NULL";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'gur_off_address1'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add gur_off_address1  nvarchar(500)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'gur_off_address2'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add gur_off_address2  nvarchar(500)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'gur_off_state'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  gur_off_state numeric(25, 0) NULL";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'gur_off_country'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  gur_off_country nvarchar(500)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'gur_off_pincode'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add  gur_off_pincode nvarchar(100) NULL";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'ftown'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add ftown nvarchar(200)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'fcity'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add fcity nvarchar(200)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'mtown'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add mtown nvarchar(200)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'mcity'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add mcity nvarchar(200)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'gtown'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add gtown nvarchar(200)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'gcity'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " alter table applyn add gcity nvarchar(200)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'PartLanguage'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn add PartLanguage numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'IsExService'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn add IsExService tinyint";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'IsExService'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn add Regiment nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'ExSNumber'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn add ExSNumber nvarchar(30)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'Guardiandob'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add Guardiandob Datetime";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'gurdian_email'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add gurdian_email nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'DistinctSport'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add DistinctSport nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'PresentStateOthers'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add PresentStateOthers numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'PermenantStateOthers'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add PermenantStateOthers numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'TancetNo'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add TancetNo numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'TancetScore'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add TancetScore float";
                } getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'NativeState'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add NativeState numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'NativeState'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add NativeCountry numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'MissionaryChild'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add MissionaryChild bit";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'TamilOrginFromAndaman'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add TamilOrginFromAndaman bit";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'CampusReq'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add CampusReq bit";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'InsDateTime'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add InsDateTime DateTime";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'SubCaste'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add SubCaste numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'TANCETNo'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Alter Column TANCETNo nvarchar(30)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'IsNRI'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add IsNRI tinyint";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'NRIType'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add NRIType tinyint";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'PassportNo'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add PassportNo nvarchar(30)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'PassIssuePlace'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add PassIssuePlace nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'PassIssueCountry'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add PassIssueCountry nvarchar(10)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'PassFromDate'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add PassFromDate datetime";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'PassToDate'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add PassToDate datetime";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'VisaNo'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add VisaNo nvarchar(30)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'VisaIssuePlace'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add VisaIssuePlace nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'VisaIssueCountry'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add VisaIssueCountry nvarchar(10)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'VisaFromDate'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add VisaFromDate datetime";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'VisaToDate'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add VisaToDate datetime";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'VisaStatus'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add VisaStatus nvarchar(30)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'VisaType'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add VisaType nvarchar(30)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='collinfo'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Collinfo' AND COLUMN_NAME = 'VP1'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Collinfo Add VP1 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Collinfo' AND COLUMN_NAME = 'VP2'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Collinfo Add VP2 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Collinfo' AND COLUMN_NAME = 'Director1'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Collinfo Add Director1 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Collinfo' AND COLUMN_NAME = 'Director2'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Collinfo Add Director2 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Collinfo' AND COLUMN_NAME = 'Director3'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Collinfo Add Director3 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Collinfo' AND COLUMN_NAME = 'Director4'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Collinfo Add Director4 nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Collinfo' AND COLUMN_NAME = 'Director5'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Collinfo Add Director5 nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'TancetScore'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Alter Column TancetScore nvarchar(15)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Stud_prev_details'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'Part1Language'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Stud_prev_details Add Part1Language numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'Part2Language'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Stud_prev_details Add Part2Language numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'VoiceLang'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add VoiceLang numeric";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'BankAccNo'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Applyn Add BankAccNo nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Miscelineous'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Miscelineous' AND COLUMN_NAME = 'OtherName'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Miscelineous Alter Column OtherName nvarchar(200)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='department'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Department' AND COLUMN_NAME = 'SeatPriority'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table Department Add SeatPriority int";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Room_Detail' AND COLUMN_NAME = 'SeatArrDet'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter TAble Room_Detail Add SeatArrDet nvarchar(500)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Room_Detail' AND COLUMN_NAME = 'SeatArrType'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter TAble Room_Detail Add SeatArrType nvarchar(500)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Room_Detail' AND COLUMN_NAME = 'StudPerSeat'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter TAble Room_Detail Add StudPerSeat nvarchar(500)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'TalukP'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table applyn Add TalukP nvarchar(10)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'TalukC'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table applyn Add TalukC nvarchar(10)";
                }
                //added by sudhagar 
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'TalukP'");
                if (getalterval != "0")
                {
                    acd_alter = acd_alter + " Alter Table applyn alter column TalukP nvarchar(250)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'TalukC'");
                if (getalterval != "0")
                {
                    acd_alter = acd_alter + " Alter Table applyn alter column TalukC nvarchar(250)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'TalukG'");
                if (getalterval == "0")
                {
                    acd_alter = acd_alter + " Alter Table applyn alter column TalukG nvarchar(250)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Building_Master' AND COLUMN_NAME = 'BuildType'");
            if (getalterval == "0")
            {
                acd_alter = acd_alter + " Alter Table Building_Master Add BuildType nvarchar(30)";
            }
            if (acd_alter != "")
            {
                int acdalter = d2.update_method_wo_parameter(acd_alter, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void acdamic3()
    {
        try
        {
            //create query anandsir 3
            string creatacd3 = string.Empty;
            string getacdtableval = string.Empty;
            string find_tablename = string.Empty;
            getacdtableval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='batch_allocation_practical'");
            if (getacdtableval == "0")
            {
                creatacd3 = " create table batch_allocation_practical(batch_year int,degree_code int,semester int,Exam_code int,subject_no int,exam_date datetime,session varchar(20),roll_no varchar(50),batch varchar(20))";
            }
            getacdtableval = string.Empty;
            getacdtableval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='stud_reference'");
            if (getacdtableval == "0")
            {
                creatacd3 = " CREATE TABLE [stud_reference] ( [consult_code] [numeric](18, 0) NULL , [agent_code] [numeric](18, 0) NULL , [state] [numeric](18, 0) NULL , [taluk] [numeric](18, 0) NULL , [address] [varchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [city] [varchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [district] [varchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [phone] [numeric](18, 0) NULL , [email] [varchar](300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, ) ON [PRIMARY]";
            }
            getacdtableval = string.Empty;
            getacdtableval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Enquiry_New'");
            if (getacdtableval == "0")
            {
                creatacd3 = creatacd3 + " cREATE TABLE [dbo].[Enquiry_New]( [entry_no] [numeric](18, 0) IDENTITY(1,1) NOT NULL, [college_code] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [enq_no] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [stud_name] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [parent_name] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Guardian_name] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Guardian_Relationship] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [address] [nvarchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [pincode] [nvarchar](7) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Phone] [nvarchar](30) COLLATE SQL_Latin1_General_CP1_CI_AS  NULL, [email] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [date_enq] [datetime] NULL, [street] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [city] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [district] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [state] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [moblie] [nvarchar](30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [mobile_owner] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [current_semester] [numeric](18, 0) NULL, [mode] [numeric](18, 0) NULL, [sex] [tinyint] NULL, [remark] [varchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [mobile2] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [mobile_owner2] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [taluk] [varchar](30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Graduation] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Course] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Branch] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Batch] [varchar](30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, flag VarChar(10) ) ON [PRIMARY]";
            }
            getacdtableval = string.Empty;
            getacdtableval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='code_generation_update'");
            if (getacdtableval == "0")
            {
                creatacd3 = creatacd3 + " create table code_generation_update(college_code numeric,app_code_flag numeric,batch_year numeric,degree_code numeric,enq_no numeric,appform_no numeric,adm_no numeric)";
            }
            //getacdtableval=string.Empty;
            //getacdtableval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='code_generation_update'");
            //if (getacdtableval == "0")
            //{
            //    creatacd3 = creatacd3 + " Create Table internal_cam_calculation_master_setting (idno int identity(1,1),Istype nvarchar(50),subject_no int,syll_code int, Calculate_Cam_Criteria nvarchar(100),Criteria_no nvarchar(100),Cam_Option nvarchar(500),Cam_Ave_best int,Conversion_value int, Attendance nvarchar(100),Att_Cal nvarchar(100),Att_Mark_Per nvarchar(50),Calculation_Criteria nvarchar(100),Calculation_Option nvarchar(100), Include_Final_Calculation int,Round_of int,Round_Value int,int_Mark_settings int) ";
            //}
            getacdtableval = string.Empty;
            getacdtableval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='internal_cam_calculation_master_setting'");
            if (getacdtableval == "0")
            {
                creatacd3 = creatacd3 + " CREATE TABLE [dbo].[internal_cam_calculation_master_setting]( [idno] [int] IDENTITY(1,1) NOT NULL, [Istype] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[subject_no] [int] NULL, [syll_code] [int] NULL, [Calculate_Cam_Criteria] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Criteria_no] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Cam_Option] [nvarchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Cam_Ave_best] [int] NULL, [Conversion_value] [int] NULL, [Attendance] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Att_Cal] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Att_Mark_Per] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Calculation_Criteria] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Calculation_Option] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Include_Final_Calculation] [int] NULL, [Round_of] [int] NULL, [Round_Value] [int] NULL, [int_Mark_settings] [int] NULL, [sum_select_criteria] [int] NULL )";
            }
            getacdtableval = string.Empty;
            getacdtableval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='notestbl'");
            if (getacdtableval == "0")
            {
                creatacd3 = creatacd3 + " CREATE TABLE notestbl([filename] [varchar](50) , [filedata] [varbinary](max), [filetype] [nvarchar](50) , [date] [datetime] , [subject_no] [nvarchar](50) , [subject_name] [nvarchar](max), [degree_code] [nvarchar](50) , [sem] [int] , [batch] [int] , [treeview] [nvarchar](max) , [fileid] [nvarchar](Max) )";
            }
            if (creatacd3 != "")
            {
                int creatacdalter = d2.update_method_wo_parameter(creatacd3, "Text");
            }
            //22-04-2016 alter
            string alteracdamic = string.Empty;
            string getalterval = string.Empty;
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='laballoc'");
            if (find_tablename != "0")
            {
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'laballoc' AND COLUMN_NAME = 'Timetablename'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table laballoc add Timetablename varchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'laballoc' AND COLUMN_NAME = 'Fromdate'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table laballoc add Fromdate datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'APPLYN' AND COLUMN_NAME = 'aieee'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table APPLYN ADD  aieee nvarchar(25)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='perv_marks_history'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'perv_marks_history' AND COLUMN_NAME = 'result'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table  perv_marks_history add result varchar(10)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='enquiry'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'rollno'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add rollno nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'app_status'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add app_status nvarchar(10)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'taluk'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add taluk nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'refer_phoneno'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add refer_phoneno nvarchar(20)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'rphone'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add rphone nvarchar(20)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'refer_email'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add refer_email nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'refer_agent'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add refer_agent nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'refer_consult'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add refer_consult nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'refer_stcode'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add refer_stcode nvarchar(20)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'Guardian_Name'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " Alter table enquiry add   Guardian_Name varchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'Guardian_Relationship'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " Alter table enquiry add   Guardian_Relationship varchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'course'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " Alter table enquiry add   course varchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'refer_category'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add refer_category nvarchar(500)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'refer_batch'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add refer_batch nvarchar(10)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'refer_branch'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add refer_branch nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'refer_degree'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add refer_degree nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'refer_staff_category'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add refer_staff_category nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'refer_dept'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add refer_dept nvarchar(200)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'refer_remarks'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add refer_remarks nvarchar(500)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'refer_roll'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add refer_roll nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'refer_collegecode'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add  refer_collegecode nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'refer_conduct'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add  refer_conduct nvarchar(500)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'refer_conduct_city'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add refer_conduct_city nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'mobile2'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add mobile2 nvarchar(20)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_phoneno'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn  add refer_phoneno nvarchar(20)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'parent_talukp'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn  add [parent_talukp] [numeric](18, 0) NULL";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'parent_Mobile1p'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add [parent_Mobile1p] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'parent_Mobile2p'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add [parent_Mobile2p] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'parent_Mobile1c'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add [parent_Mobile1c] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'parent_Mobile2c'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add [parent_Mobile2c] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'age'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn  add [age] [numeric](10, 0) NULL";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'stud_type'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn  add [stud_type] varchar(25)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'guardian_relation'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn  add [guardian_relation] varchar(25)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_consult'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add refer_consult nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_remarks'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add refer_remarks nvarchar(500)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_roll'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add refer_roll nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_collegecode'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add refer_collegecode nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_conduct'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add refer_conduct nvarchar(500)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_batch'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add refer_batch nvarchar(10)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_branch'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add refer_branch nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_degree'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add refer_degree nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_degree'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add refer_staff_category nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_dept'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add refer_dept nvarchar(200)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_conduct_city'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + "  alter table applyn add refer_conduct_city nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_email'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + "  alter table applyn add refer_email nvarchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'refer_agent'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + "  alter table applyn add refer_agent nvarchar(100)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'eligible_mark' AND COLUMN_NAME = 'eligible_age'");
            if (getalterval == "0")
            {
                alteracdamic = alteracdamic + "  alter table eligible_mark add [eligible_age] [numeric](18, 0) NULL";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'eligible_mark' AND COLUMN_NAME = 'marriage_status'");
            if (getalterval == "0")
            {
                alteracdamic = alteracdamic + "  alter table eligible_mark add [marriage_status] [numeric](18, 0) NULL";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='course'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'course' AND COLUMN_NAME = 'type'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + "  alter table course add  type varchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'OldCollegeCode'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + "  alter table Registration add OldCollegeCode varchar(30)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Enquiry'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'mobile_owner2'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table enquiry add mobile_owner2 nvarchar(20)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry_New' AND COLUMN_NAME = 'type'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + "  alter table enquiry_New add type varchar(100)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Enquiry' AND COLUMN_NAME = 'ConsultDate'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + "  Alter Table Enquiry Add ConsultDate DateTime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'OldDegree_Code'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + "  alter  table registration add OldDegree_Code varchar(20)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'onduty_stud' AND COLUMN_NAME = 'attnd_type'");
            if (getalterval == "0")
            {
                alteracdamic = alteracdamic + "  alter table onduty_stud add attnd_type int";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='collinfo'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'banner'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + "  alter table collinfo add banner image";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation_update' AND COLUMN_NAME = 'enq_code_flag'");
            if (getalterval == "0")
            {
                alteracdamic = alteracdamic + "  alter table code_generation_update add enq_code_flag numeric";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation_update' AND COLUMN_NAME = 'adm_code_flag'");
            if (getalterval == "0")
            {
                alteracdamic = alteracdamic + " alter table code_generation_update add adm_code_flag numeric";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'Title'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " Alter Table Applyn Add Title nvarchar(10)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'MiddleName'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " Alter Table Applyn Add MiddleName nvarchar(30)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'FamilyName'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " Alter Table Applyn Add FamilyName nvarchar(30)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'ReserveCategory'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " Alter Table Applyn Add ReserveCategory Bit";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'EconBackword'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " Alter Table Applyn Add EconBackword Bit";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'onduty_stud' AND COLUMN_NAME = 'no_of_hourse'");
            if (getalterval == "0")
            {
                alteracdamic = alteracdamic + " alter table onduty_stud add no_of_hourse numeric";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Master_Settings'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Master_Settings' AND COLUMN_NAME = 'group_code'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table Master_Settings add group_code numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'Trans_PayType'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " Alter Table Registration Add Trans_PayType nvarchar(10)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Per_Email'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add Per_Email varchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'finger_id'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table registration add finger_id int";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'Traveller_Date'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " Alter table Registration ADD Traveller_Date datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='specialhr_master'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'specialhr_master' AND COLUMN_NAME = 'sections'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table specialhr_master add sections varchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'smart_serial_no'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table registration add smart_serial_no varchar(100)";
                }
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'onduty_stud' AND COLUMN_NAME = 'hourse'");
            if (getalterval == "0")
            {
                alteracdamic = alteracdamic + " alter table onduty_stud add hourse varchar(100)";
            }
            getalterval = string.Empty;
            getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'internal_cam_calculation_master_setting' AND COLUMN_NAME = 'sum_select_criteria'");
            if (getalterval == "0")
            {
                alteracdamic = alteracdamic + " alter table internal_cam_calculation_master_setting add  sum_select_criteria int";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Talukg'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add  Talukg nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Guardian_Mobile2g'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add  Guardian_Mobile2g nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Guardian_Mobile1g'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add  Guardian_Mobile1g nvarchar(50)";
                }
                getalterval = string.Empty;
                getalterval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'emailg'");
                if (getalterval == "0")
                {
                    alteracdamic = alteracdamic + " alter table applyn add  emailg nvarchar(50)";
                }
            }
            if (alteracdamic != "")
            {
                int althr = d2.update_method_wo_parameter(alteracdamic, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    //Added applyn table from Aadhaar_Enroll_No to EMIS_Number & Stud_FamilyCard_Info,Stud_Migration_Info Tables on Dec 9th by Jeyaprakash
    public void acdamic4()
    {
        try
        {
            string find_tablename = string.Empty;
            string acd_create = string.Empty;
            string getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ExamSchedulePreparation'");
            if (getvalue == "0")
            {
                acd_create = " CREATE TABLE [dbo].[ExamSchedulePreparation]( [Id] [int] IDENTITY(1,1) NOT NULL, [Type] [int] NULL, [ExamDate] [datetime] NULL, [ExamTime] [datetime] NULL, [Duration] [datetime] NULL, [NoofQuestions] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [ExamNo] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [BatchYear] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [DegreeCode] [varchar](30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Semester] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [SubjectNo] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [QuestionNo] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [CollegeCode] [int] NULL, CONSTRAINT [PK__ExamSchedulePrep__3121013B] PRIMARY KEY CLUSTERED ( [Id] Asc )WITH (IGNORE_DUP_KEY = OFF) ON [PRIMARY] ) ON [PRIMARY]";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_question_bank_master'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " create Table tbl_question_bank_master (Questionid int identity(1,1), Batch_year int,Degree_Code int,Semester int,Sections nvarchar(20),Subject_no nvarchar(50),exam_type int,Exam nvarchar(250),No_Sections int,Section_Type nvarchar(50),Duration nvarchar(300),exam_month nvarchar(25),exam_year int)";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_Question_Bank_details'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " create table tbl_Question_Bank_details(Qdetailsid int identity(1,1),Questionid int,Subject_no nvarchar(50), qsection_no int, qSection nvarchar(25),Total_Questions int,Minimu_Attend int, Question_Type nvarchar(200),no_Option int,Marks int)";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_Question_Bank_Questions'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " Create Table tbl_Question_Bank_Questions (qsection_no int,Questionno int,Questionid int,Subject_no int,Questions nvarchar(500), Optionval Nvarchar(150),Syllabus nvarchar(100),Questionentryid int identity(1,1)) ";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='QUESTION_ANSWER'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " CREATE TABLE QUESTION_ANSWER(questionentryid int,questionid int,subject_no int,qsection nvarchar(100), qdetailsid int,file_name nvarchar(400),file_type nvarchar(200),file_data varbinary(max),manual_answer nvarchar(4000) NULL)";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='cert_issue'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " create table cert_issue(staff_code nvarchar(100),Roll_No nvarchar(50),typeofcert nvarchar(40),issue_date datetime,issue_time nvarchar(30),info nvarchar(50)) ";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='parents_meet'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " create table parents_meet (Roll_No nvarchar(100),send_date datetime,purpose nvarchar(300),staff_code nvarchar(200),att_remark nvarchar(500),visited nvarchar(100),staff_name nvarchar(200))";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_consider_day_order'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " create table tbl_consider_day_order (From_Date datetime,To_Date Datetime,Reason nvarchar(150),Batch_year smallint,Degree_code numeric(18, 0),Semester smallint) ";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Cert_Verification'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " create table Cert_Verification( Roll_No  varchar(50),Cert_type varchar(50) ,    Cert_upload varbinary(MAX) ,    isverified int,cert_filaname nvarchar(50)   ,cert_order numeric(18,0))";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Cert_Entry'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " create table Cert_Entry (Degree_Code numeric(18,0), Cert_Code numeric(18,0), College_Code numeric(18,0), cert_order numeric (18,0))";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Studentfeedback'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " create table Studentfeedback (app_no numeric,param_1 tinyint ,param_2 tinyint,param_3 tinyint,param_4 tinyint,param_5 tinyint,param_6 tinyint,param_7 tinyint,param_8 tinyint)";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CoCurr_Activitie'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " Create Table CoCurr_Activitie(CoCurr_ID numeric identity(1,1),PartName nvarchar(100),SubTitle nvarchar(10),Title_Name numeric,IsDirectEntry Bit,IsActivity Bit,IsActDesc Bit,IsGrade Bit,Degree_Code numeric,Batch_Year numeric) ";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CoCurrActivitie_Det'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " create table tbl_result_retest (Roll_No nvarchar(50),Exam_Code numeric,Marks_Obtained float)";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='company_details'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[company_details]([company_code] [int] IDENTITY(4001,1) NOT NULL,[company_name] [nvarchar](50) NULL,[company_type] [nvarchar](25) NULL,[company_status] [nvarchar](25) NULL, [company_street] [nvarchar](500) NULL,  [company_City] [nvarchar](50) NULL, [company_District] [nvarchar](50) NULL, [company_State] [nvarchar](25) NULL,    [pin] [nvarchar](25) NULL,  [phone_no] [nvarchar](100) NULL,    [email] [nvarchar](50) NULL,    [website] [nvarchar](50) NULL,  [mobile_no] [varchar](50) NULL, [college_code] [nvarchar](10) NULL, [type] nvarchar(100))";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='plmnt_company_reg'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[plmnt_company_reg]( [company_code] [float] NULL,    [college_code] [nvarchar](10) NULL, [person_name] [nvarchar](max) NULL, [c_mail] [nvarchar](max) NULL,  [toc] [nvarchar](30) NULL,  [toi] [nvarchar](max) NULL, [reg_frmdt] [datetime] NULL,    [reg_todt] [datetime] NULL, [intrvdt] [datetime] NULL,  [stud_req] [nvarchar](10) NULL, [plc_job] [nvarchar](max) NULL, [designation] [nvarchar](max) NULL, [salary] [nvarchar](20) NULL,   [Degree_Code] numeric,  [Batch_Year] numeric) ON [PRIMARY]";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='plmnt_stud_reg'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[plmnt_stud_reg]([rollno] [nvarchar](30) NULL,   [sslc_tot] [float] NULL,    [sslc_perc] [float] NULL,   [hs_tot] [float] NULL,  [hs_perc] [float] NULL, [ug_tot] [float] NULL,  [ug_perc] [float] NULL, [pg_tot] [float] NULL,  [pg_perc] [float] NULL, [his_arr] [float] NULL, [std_arr] [float] NULL, [ph_no] [nvarchar](20) NULL,    [s_mail] [nvarchar](max) NULL,  [company_code] [nvarchar](20) NULL, [toi] [nvarchar](20) NULL)";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='activity_entry'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " CREATE TABLE [dbo].[activity_entry]([CoCurr_ID] [numeric](9, 0) NULL,   [ActivityTextVal] [numeric](9, 0) NULL, [Degree_Code] [numeric](9, 0) NULL, [Batch_Year] [numeric](9, 0) NULL)";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='LabAlloc_New_Spl'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " Create table LabAlloc_New_Spl (Degree_Code numeric,Semester numeric,Batch_Year numeric,Subject_No numeric,Day_Value varchar(15),Hour_Value varchar(20),Stu_Batch varchar(15),Staff_Code varchar(50),Sections nvarchar(100),fdate datetime,tdate datetime,sch_part nvarchar(100),add_batch nvarchar(100),REMARKS nvarchar(200))";
            }
            //getvalue=string.Empty;
            //getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CoCurr_Activitie'");
            //if (getvalue == "0")
            //{
            //    acd_create = acd_create + " Create Table CoCurr_Activitie(CoCurr_ID numeric identity(1,1),PartName nvarchar(100),SubTitle nvarchar(10),Title_Name numeric,IsDirectEntry Bit,IsActivity Bit,IsActDesc Bit,IsGrade Bit,Degree_Code numeric,Batch_Year numeric)";
            //}
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CoCurrActivitie_Det'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " Create Table CoCurrActivitie_Det(Roll_No nvarchar(30),Activity numeric,Act_Desc nvarchar(200),Grade nvarchar(3),Degree_Code numeric,Batch_Year numeric,CoCurr_ID numeric)";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SubWiseGrdeMaster'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " CREATE TABLE SubWiseGrdeMaster(Code BigInt IDENTITY(1,1),SubjectCode nvarchar(30),Subject_Type nvarchar(100),IsTheory Bit,Grade nvarchar(5),Frange Decimal(12,2),TRange Decimal(12,2),College_Code Int)";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SubWiseMeanValue'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " CREATE TABLE SubWiseMeanValue(SubjectCode nvarchar(30),TotAppear int,IndMinMark Decimal(12,2),IndMaxMark Decimal(12,2),MeanValue Decimal(12,2),SDValue Decimal(12,2),KValue Decimal(12,2),ExamMonth int,ExamYear int,College_Code int)";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='TEmCertSerialSettings'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " CREATE TABLE TEmCertSerialSettings(CertificateName nvarchar(100),StartSerialNo BigInt,RunningSerialNo BigInt,College_Code int)";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='stud_job_Description'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " create table stud_job_Description (app_No numeric, job_Name nvarchar(100),org_Name nvarchar(250),work_Desgn nvarchar(250),work_From DateTime,work_To DateTime, work_DurationMon numeric)";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Stud_FamilyCard_Info'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " create table Stud_FamilyCard_Info (app_no numeric,Fam_Card_No nvarchar(100),Fam_Card_WardNo nvarchar(100),Fam_Card_ShopNo nvarchar(100),Old_DoorNo nvarchar(10),New_DoorNo nvarchar(10),Fam_Street_Name nvarchar(100),Fam_Village nvarchar(100),Fam_Post nvarchar(100),Fam_Taluk nvarchar(100),Fam_Dist nvarchar(100),Fam_State numeric,Fam_PinCode nvarchar(50),Fam_Size smallint,Fam_Head_Name nvarchar(200))";
            }
            getvalue = string.Empty;
            getvalue = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Stud_Migration_Info'");
            if (getvalue == "0")
            {
                acd_create = acd_create + " create table Stud_Migration_Info (app_no numeric,Mig_Cert_Serial_No nvarchar(100),Mig_Cert_Reg_No nvarchar(100),Mig_Cert_Stud_Name nvarchar(200),Mig_Cert_Month int,Mig_Cert_Year int,Mig_Cert_Board nvarchar(200),Mig_Cert_Issue_Date datetime)";
            }
            if (acd_create != "")
            {
                int acdcreat = d2.update_method_wo_parameter(acd_create, "Text");
            }
            //alter
            string acda4 = string.Empty;
            string getval = string.Empty;
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'parent_addressC'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add parent_addressC nvarchar(500)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN parent_addressC nvarchar(500)";
                }
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'parent_pincodep'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add parent_pincodep nvarchar(100)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN parent_pincodep nvarchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'parent_pincodec'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add parent_pincodec nvarchar(100)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN parent_pincodec nvarchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'parent_statep'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add parent_statep numeric(25, 0)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN parent_statep numeric(25, 0)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'parent_statec'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add parent_statec numeric(18, 0)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN parent_statec numeric(18, 0)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'experYears'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add experYears nvarchar(500)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN experYears nvarchar(500)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'emailp'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add emailp nvarchar(100)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN emailp nvarchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'emailc'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add emailc nvarchar(100)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN emailc nvarchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'relevant'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add relevant nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN relevant nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'ParentIdP'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add ParentIdP nvarchar(100)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN ParentIdP nvarchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'ParentIdC'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add ParentIdC nvarchar(100)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN ParentIdC nvarchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Streetp'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add Streetp nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN Streetp nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Cityp'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add Cityp nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN Cityp nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Districtp'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add Districtp nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN Districtp nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Streetc'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add Streetc nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN Streetc nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Cityc'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add Cityc nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN Cityc nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Districtc'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add Districtc nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN Districtc nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'addressg'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add addressg nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN addressg nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Streetg'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add Streetg nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN Streetg nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Districtg'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add Districtg nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN Districtg nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'stateg'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add stateg nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN stateg nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'ping'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add ping numeric(18, 0)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN ping numeric(18, 0)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Cityg'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add Cityg nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN Cityg nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'phg'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add phg nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN phg nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'addressv2'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add addressv2 nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN addressv2 nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Streetv2'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add Streetv2 nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN Streetv2 nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Cityv2'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add Cityv2 nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN Cityv2 nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Districtv2'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add Districtv2 nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN Districtv2 nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'statev2'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add statev2 nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN statev2 nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'countryv2'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add countryv2 nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN countryv2 nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'pinv2'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add pinv2 nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN pinv2 nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'phv2'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add phv2 nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN phv2 nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'cellv2'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add cellv2 nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN cellv2 nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'addressv3'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add addressv3 nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN addressv3 nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Streetv3'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add Streetv3 nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN Streetv3 nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Cityv3'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add Cityv3 nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN Cityv3 nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Districtv3'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add Districtv3 nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN Districtv3 nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'statev3'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add statev3 nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN statev3 nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'countryv3'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add countryv3 nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN countryv3 nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'pinv3'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add pinv3 nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN pinv3 nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'phv3'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add phv3 nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN phv3 nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'cellv3'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add cellv3 nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN cellv3 nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'remarks'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn add remarks nvarchar(250)";
                }
                else
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN remarks nvarchar(250)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'experreas'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table applyn  add experreas varchar(1000)";
                }
                else
                {
                    acda4 = acda4 + " alter table applyn  alter column experreas varchar(1000)";
                }
                //getval=string.Empty;
                //getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'experreas'");
                //if (getval == "0")
                //{
                //    acda4 = acda4 + " alter table applyn  add experreas varchar(1000)";
                //}
                //else
                //{
                //    acda4 = acda4 + " alter table applyn  alter column experreas varchar(1000)";
                //}
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Aadhaar_Enroll_No'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table applyn add Aadhaar_Enroll_No nvarchar(100)";
                }
                else
                {
                    acda4 = acda4 + " alter table applyn  alter column Aadhaar_Enroll_No nvarchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'ElectionID_No'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table applyn add ElectionID_No nvarchar(100)";
                }
                else
                {
                    acda4 = acda4 + " alter table applyn  alter column ElectionID_No nvarchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'PanCard_No'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table applyn add PanCard_No nvarchar(100)";
                }
                else
                {
                    acda4 = acda4 + " alter table applyn  alter column PanCard_No nvarchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Fax_No_Per'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table applyn add Fax_No_Per nvarchar(100)";
                }
                else
                {
                    acda4 = acda4 + " alter table applyn  alter column Fax_No_Per nvarchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Ins_Nomin_Age'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table applyn add Ins_Nomin_Age int";
                }
                else
                {
                    acda4 = acda4 + " alter table applyn  alter column Ins_Nomin_Age int";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'DrivLic_Issue_Date'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table applyn add DrivLic_Issue_Date datetime";
                }
                else
                {
                    acda4 = acda4 + " alter table applyn  alter column DrivLic_Issue_Date datetime";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'EMIS_Number'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table applyn add EMIS_Number nvarchar(100)";
                }
                else
                {
                    acda4 = acda4 + " alter table applyn  alter column EMIS_Number nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'smart_serial_no'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table registration add smart_serial_no varchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='result'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'result' AND COLUMN_NAME = 'planedmark'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table result add  planedmark float(8)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subjectchooser'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subjectChooser' AND COLUMN_NAME = 'id'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table subjectChooser add id numeric identity(1,1)";
                }
            }

            #region Added By Malang Raja On Jun 19 2017

            string query = "alter table subjectChooser alter column staffcode nvarchar(MAX)";
            ExecuteQuery(query, "subjectChooser", "staffcode", 2);

            #endregion Added By Malang Raja On Jun 19 2017

            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_Cam_Calculation'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_Cam_Calculation' AND COLUMN_NAME = 'conversion'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table tbl_Cam_Calculation alter column conversion float";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_Cam_Calculation' AND COLUMN_NAME = 'istype'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table tbl_Cam_Calculation alter column istype nvarchar(100)";
                }
            }
            getval = string.Empty;
            getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'internal_cam_calculation_master_setting' AND COLUMN_NAME = 'Conversion_value'");
            if (getval == "0")
            {
                acda4 = acda4 + " alter table internal_cam_calculation_master_setting alter column Conversion_value float";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_Cam_Calculation'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_Cam_Calculation' AND COLUMN_NAME = 'conversion'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table tbl_Cam_Calculation alter column conversion float";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_Cam_Calculation' AND COLUMN_NAME = 'istype'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table tbl_Cam_Calculation alter column istype nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='laballoc'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'LabAlloc' AND COLUMN_NAME = 'Auto_Switch'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table LabAlloc add Auto_Switch nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='certificate'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'certificate' AND COLUMN_NAME = 'college_name'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table certificate add college_name varchar(200)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'certificate' AND COLUMN_NAME = 'reason'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table certificate add reason varchar(200)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'certificate' AND COLUMN_NAME = 'collegeaddress'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table certificate add collegeaddress varchar(200)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'certificate' AND COLUMN_NAME = 'degree'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table certificate add degree varchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'certificate' AND COLUMN_NAME = 'staff_code'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table certificate add staff_code varchar(200)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'certificate' AND COLUMN_NAME = 'staff_code'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table certificate add addtionaltext nvarchar(250)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'student_officename'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table applyn add student_officename varchar(20)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'student_designation'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table applyn add student_designation varchar(20)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'student_officeaddress'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table applyn add student_officeaddress varchar(20)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'student_officeaddress2'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table applyn add student_officeaddress2 varchar(20)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'student_officecity'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table applyn add student_officecity varchar(20)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'student_officestate'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table applyn add student_officestate varchar(20)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'student_officephone'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table applyn add student_officephone varchar(20)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'StudHeight'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Applyn Add StudHeight nvarchar(10)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'StudWeight'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Applyn Add StudWeight nvarchar(10)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'VisionLeft'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Applyn Add VisionLeft nvarchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'VisionRight'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Applyn Add VisionRight nvarchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'DentalHygiene'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Applyn Add DentalHygiene nvarchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Goals'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Applyn Add Goals nvarchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'ExcepAchieve'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Applyn Add ExcepAchieve nvarchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Strenghts'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Applyn Add Strenghts nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CoCurrActivitie_Det'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CoCurrActivitie_Det' AND COLUMN_NAME = 'ActivityTextVal'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table CoCurrActivitie_Det Add ActivityTextVal numeric";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CoCurrActivitie_Det' AND COLUMN_NAME = 'Mark'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table CoCurrActivitie_Det add Mark numeric";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CoCurrActivitie_Det' AND COLUMN_NAME = 'term'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table CoCurrActivitie_Det add term numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='activity_gd'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'activity_gd' AND COLUMN_NAME = 'term'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table activity_gd add term [numeric](9, 0) NULL";
                }
            }
            getval = string.Empty;
            getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'activity_entry' AND COLUMN_NAME = 'term'");
            if (getval == "0")
            {
                acda4 = acda4 + " alter table activity_entry add term [numeric](9, 0) NULL";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='activity_gd'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'activity_gd' AND COLUMN_NAME = 'Degree_Code'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table activity_gd add Degree_Code [numeric](9, 0) NULL";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='stucon'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stucon' AND COLUMN_NAME = 'ack_fee_of_roll'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table stucon add ack_fee_of_roll nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='result'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'result' AND COLUMN_NAME = 'Retest_Marks_obtained'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table result add Retest_Marks_obtained float";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'IsConfirm'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table applyn add IsConfirm tinyint ";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Admission_Status'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table applyn add Admission_Status tinyint ";
                }
                else
                {
                    acda4 = acda4 + " alter table applyn alter column admission_status tinyint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'AdmitedYear'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Registration Add AdmitedYear nvarchar(30)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'serialno'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Registration Alter Column serialno nvarchar(30)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='stud_prev_details'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_prev_details' AND COLUMN_NAME = 'Registration_No'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table stud_prev_details add Registration_No nvarchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_prev_details' AND COLUMN_NAME = 'Certificate_No'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table stud_prev_details add Certificate_No nvarchar(100)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_prev_details' AND COLUMN_NAME = 'Registration_Date'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table stud_prev_details add Registration_Date datetime";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_prev_details' AND COLUMN_NAME = 'Certificate_Date'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table stud_prev_details add Certificate_Date datetime";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_prev_details' AND COLUMN_NAME = 'Exam_Pass_Date'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table stud_prev_details add Exam_Pass_Date datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='collinfo'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Collinfo' AND COLUMN_NAME = 'InstType'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Collinfo add InstType tinyint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'IsMinSchol'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table applyn add IsMinSchol Bit";
                }
            }
            getval = string.Empty;
            getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudBankDet' AND COLUMN_NAME = 'BankAdd'");
            if (getval == "0")
            {
                acda4 = acda4 + " Alter Table StudBankDet Add BankAdd nvarchar(200)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudBankDet' AND COLUMN_NAME = 'MICRCode'");
            if (getval == "0")
            {
                acda4 = acda4 + " Alter Table StudBankDet Add MICRCode nvarchar(50)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'SecondLang'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Applyn Add SecondLang numeric";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'ThirdLang'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Applyn Add ThirdLang numeric";
                }
            }
            getval = string.Empty;
            getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'ThirdLang'");
            if (getval == "0")
            {
                acda4 = acda4 + " Alter Table enquiry alter column refer_name nvarchar(400)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='attendance_question_addition'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_question_addition' AND COLUMN_NAME = 'subj_unit'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE attendance_question_addition ADD subj_unit varchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Applyn'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'studhouse'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Applyn Add studhouse nvarchar(100)";
                }
                else
                {
                    acda4 = acda4 + " Alter Table Applyn alter column studhouse nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Certificate'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Certificate' AND COLUMN_NAME = 'Issued_Time'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Certificate Add Issued_Time nvarchar(30)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='activity_gd'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'activity_gd' AND COLUMN_NAME = 'batch_year'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER Table activity_gd Add batch_year int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CoCurrActivitie_Det'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CoCurrActivitie_Det' AND COLUMN_NAME = 'istype'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER Table CoCurrActivitie_Det Add istype nvarchar(20)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CoCurrActivitie_Det' AND COLUMN_NAME = 'totatt_remarks'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER Table CoCurrActivitie_Det Add totatt_remarks nvarchar(max)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'FingerPrint1'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Registration Alter column FingerPrint1 nvarchar(10)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'Is_Enroll'");
                if (getval == "0")
                {
                    acda4 = acda4 + "  Alter Table Applyn add Is_Enroll Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Applyn' AND COLUMN_NAME = 'Is_Enroll'");
                if (getval != "0")
                {
                    acda4 = acda4 + "  Alter Table Applyn alter column Is_Enroll tinyint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'DateOfLeaving'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Registration Add DateOfLeaving Datetime";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'FingerPrint1'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter Table Registration Alter column FingerPrint1 nvarchar(10)";
                }
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'AcademicYear'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Registration Add AcademicYear nvarchar(30)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Subject'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Subject' AND COLUMN_NAME = 'TamilSubjectName'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Subject Add TamilSubjectName nvarchar(300)";
                }
            }
            getval = string.Empty;
            getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'room_detail' AND COLUMN_NAME = 'RoomPK'");
            if (getval == "0")
            {
                acda4 = acda4 + " alter table room_detail add RoomPK BigInt IDENTITY(1,1)";
            }
            getval = string.Empty;
            getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SubWiseGrdeMaster' AND COLUMN_NAME = 'Exam_Month'");
            if (getval == "0")
            {
                acda4 = acda4 + " Alter Table SubWiseGrdeMaster Add Exam_Month int";
            }
            getval = string.Empty;
            getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SubWiseGrdeMaster' AND COLUMN_NAME = 'Exam_Year'");
            if (getval == "0")
            {
                acda4 = acda4 + " Alter Table SubWiseGrdeMaster Add Exam_Year int";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Registration'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'TCSerialNo'");
                if (getval == "0")
                {
                    acda4 = acda4 + " Alter Table Registration Add TCSerialNo nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_alter_schedule_Details'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_alter_schedule_Details' AND COLUMN_NAME = 'mon5'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table tbl_alter_schedule_Details add mon5 varchar(300) NULL";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='enquiry'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'enquiry' AND COLUMN_NAME = 'seat'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table enquiry add seat numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='registration'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'TransferDate'");
                if (getval == "0")
                {
                    acda4 = acda4 + " alter table registration add TransferDate datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='applyn'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'parent_addressP'");
                if (getval == "0")
                {
                    acda4 = acda4 + " ALTER TABLE applyn ALTER COLUMN parent_addressP nvarchar(500)	";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Registration'");
            if (find_tablename != "0")
            {
                getval = string.Empty;
                getval = d2.GetFunction(" select object_name(object_id),* from sys.indexes where object_name(object_id) = 'Registration' and name='rollindex'");
                if (getval != "0")
                {
                    acda4 = acda4 + " update Attendance set Att_App_No=r.app_no,Att_collegecode=r.college_code from Registration r where r.roll_no=Attendance.roll_no	";
                }
            }
            if (acda4 != "")
            {
                int acdaltr = d2.update_method_wo_parameter(acda4, "Text");
            }
            string qry = "if exists (select * from IPatchStatus where ModuleName='Academic') update IPatchStatus set ClientUpdatedDate='" + DateTime.Now.ToString("yyyy/MM/dd") + "' where ModuleName='Academic' ";
            int res = d2.update_method_wo_parameter(qry, "Text");
            if (res != 0)
            {
                alertmessage.Visible = true;
                lbl_alerterror.Text = " Updated Successfully";
            }
            bindgrid();
        }
        catch (Exception ex)
        {
            //d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void alumini()
    {
        string alumini = string.Empty;
        int upd = 0;
        string AlumniStudDet = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='AlumniStudDet'");
        if (AlumniStudDet == "0")
        {
            alumini = "  CREATE TABLE [dbo].[AlumniStudDet]([AlumniStudDet] [bigint] IDENTITY(1,1) NOT NULL,[StudName] [nvarchar](200) NULL,	[Address] [nvarchar](500) NULL,	[City] [nvarchar](100) NULL,[Pincode] [nvarchar](6) NULL,	[State] [nvarchar](200) NULL,	[Country] [nvarchar](200) NULL,	[CurrentOccup] [nvarchar](300) NULL,	[Organization] [nvarchar](300) NULL,[Email] [nvarchar](60) NULL,	[MobileNo] [nvarchar](11) NULL,	[Dept_code] [nvarchar](200) NULL,[Batch_year] [int] NULL,	[IsResident] [bit] NULL,	[Hoste_Code] [numeric](18, 0) NULL,	[AlumniMemType] [tinyint] NULL,	[IsStayOnCampus] [bit] NULL,	[stayreason] [nvarchar](max) NULL,	[StayHostelCode] [numeric](18, 0) NULL,	[AccompainedBy] [tinyint] NULL,	[AccompainedMale] [smallint] NULL,	[AccompainedFemale] [smallint] NULL,	[IsVeg] [bit] NULL,	[PayMode] [smallint] NULL,	[College_Code] [numeric](18, 0) NULL,	[dateofapplied] [date] NULL,	[Batch_yearto] [int] NULL,	[edu_level] [nvarchar](50) NULL,	[Course_Id] [nvarchar](50) NULL,	[Bank_ID] [nvarchar](100) NULL,	[gender] [bit] NULL,	[paymentdate] [date] NULL,[Isonline] [int] NULL)";
            upd = d2.update_method_wo_parameter(alumini, "Text");
        }
        string AlumniLunchSettings = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='AlumniLunchSettings'");
        if (AlumniLunchSettings == "0")
        {
            alumini = string.Empty;
            alumini = "  CREATE TABLE [dbo].[AlumniLunchSettings](	[AlumniSettingsID] [bigint] NULL,[AlumniDate] [date] NULL,	[AlumnuLunch] [nvarchar](100) NULL,	[StayonDate] [nvarchar](100) NULL,[AlumniType] [bit] NULL) ON [PRIMARY]";
            upd = d2.update_method_wo_parameter(alumini, "Text");
        }
    }

    //added by sudhagar 01-07-2016
    protected void AcdQuery()
    {
        try
        {
            string InsQ = string.Empty;
            int upd = 0;
            string FounSubTypeSetting = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FounSubTypeSetting'");
            if (FounSubTypeSetting == "0")
            {
                InsQ = " Create table FounSubTypeSetting(SourceSubTypeNo bigint,DestSubTypeNo bigint,SourseSubNo bigint,DestSubNo bigint,Degree_Code bigint,Semester int,Batch_year int,College_Code int,is_tamil bit)";
                upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            string StApp = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='setting_application'");
            if (StApp == "0")
            {
                InsQ = " CREATE TABLE [dbo].[setting_application](	[type_College] [varchar](20) NULL,	[Edu_level] [varchar](20) NULL,	[fromdate] [datetime] NULL,	[todate] [datetime] NULL,	[college_code] [varchar](20) NULL,	[setting_type] [varchar](20) NULL) ON [PRIMARY]";
                upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //2
            string ApplCod = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Appl_code_generate'");
            if (ApplCod == "0")
            {
                InsQ = " CREATE TABLE [dbo].[Appl_code_generate](	[Acr_text] [varchar](50) NULL,	[isyear] [varchar](10) NULL,	[Acr_length] [int] NULL,	[actual_code] [varchar](50) NULL,	[convert_code] [varchar](50) NULL,	[Acr_type] [int] NULL,	[flage] [bit] NULL,	[gen_type] [varchar](200) NULL,	[college_code] [numeric](18, 0) NULL,	[date] [datetime] NULL,	[count] [varchar](20) NULL,	[app_no] [nvarchar](20) NULL) ON [PRIMARY]";
                upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //2
            string Cermst = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CertMasterDet'");
            if (Cermst == "0")
            {
                InsQ = " Create table CertMasterDet (CourseID bigint,CertName bigint,IsStaff bit)";
                upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //3
            string Studnew = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StudCertDetails_New'");
            if (Studnew == "0")
            {
                InsQ = " Create table StudCertDetails_New (App_no bigint,CertificateId bigint,CertificateNo varchar(100),isOrginal bit,isDuplicate bit,IsReturn bit,IsRetrun_Submistion bit,IsReturn_Type tinyint,LastRetrunDate datetime)";
                upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //4
            string StudPartnew = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StudPartMarkDetails'");
            if (StudPartnew == "0")
            {
                InsQ = " create table StudPartMarkDetails(App_No BIgInt,PartName nvarchar(50),SecuredMark Decimal(12,2),TotalMark Decimal(12,2),Percentage Decimal(12,2))";
                upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //5
            string Selcrt = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='selectcriteria'");
            if (Selcrt == "0")
            {
                InsQ = "create table selectcriteria (app_no int,usercode int,degree_code int,college_code int,isapprove int,select_date datetime,textcode int,isview int)";
                upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //6
            string Admitcolset = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='admitcolumnset'");
            if (Admitcolset == "0")
            {
                InsQ = "create table admitcolumnset(user_code int,setcolumn varchar(200),column_name varchar(200),priority varchar(20),college_code int,textcriteria varchar(200),allot int)";
                upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //7
            string dummtable = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='dummy_table'");
            if (dummtable == "0")
            {
                InsQ = "create table dummy_table (name varchar(50),dob date,sex tinyint ,mothertongue numeric,religion numeric,nationality numeric,community numeric,caste numeric)";
                upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //enrollment 
            string Stud_s = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Stud_Enrollment'");
            if (Stud_s == "0")
            {
                InsQ = "Create Table Stud_Enrollment (EnrollPK bigint identity(1,1),isEntrolltype bit,Date datetime,TotalNoPerDays int,Noofsession int)";
                upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            string Enroltsession = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Enrollmentsession'");
            if (Enroltsession == "0")
            {
                InsQ = "Create table Enrollmentsession(EnrollFK bigint,Start_session varchar(20),Endsession varchar(20))";
                upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //payment gat
            string PaymentGe_Det = string.Empty;
            PaymentGe_Det = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='PaymentGate_Det'");
            if (PaymentGe_Det == "0")
            {
                InsQ = "CREATE Table PaymentGate_Det (PaymentGateID numeric identity(1,1),App_No numeric,TrackID nvarchar(20),TransID nvarchar(50),RefNo nvarchar(50),PaymentID nvarchar(50),PayStatus Bit,TransError nvarchar(100))";
                upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            // Added Common Header query 10-01-2017
            PaymentGe_Det = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Col_Hdr_Settings'");
            if (PaymentGe_Det == "0")
            {
                InsQ = " CREATE TABLE Col_Hdr_Settings (Mod_Name nvarchar(200),Hdr_Name nvarchar(200),Hdr_Font_Size bigint,Is_Bold bit,college_code int,Is_LeftLogo bit,Is_RightLogo bit)";
                upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
            lbler.Text = ex.ToString();
            lbler.Visible = true;
        }
    }

    protected void AcdAltQuery()   //Added StudCertDetails_New from Cert_SerialNo to Cert_PinCode & Stud_prev_details(Sch_Clg_Type) & SP Changes on (sp_insert_applyn_fromappl,sp_insert_applyn_fromappl_school) on Dec 9th by Jeyaprakash
    {
        try
        {
            string AltQ = string.Empty;
            int Upd = 0;
            string Rty = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'course ' AND COLUMN_NAME = 'Priority'");
            if (Rty == "0")
                AltQ = " alter table course add Priority tinyint";
            string dprt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'dis_sports'");
            if (dprt == "0")
                AltQ += "  alter table applyn add dis_sports  nvarchar(200)";
            string Adddtex = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'dis_extra_activity'");
            if (Adddtex == "0")
                AltQ += "  alter table applyn add dis_extra_activity nvarchar(200)";
            string AppNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'appl_code_generate' AND COLUMN_NAME = 'app_no'");
            if (AppNo == "0")
                AltQ += "  alter table appl_code_generate add app_no bigint";
            string AbkNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'ApplBankRefNumber'");
            if (AbkNo == "0")
                AltQ += "  alter table applyn add ApplBankRefNumber varchar(20)";
            string AbkDtno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'ApplBankRefDate'");
            if (AbkDtno == "0")
                AltQ += "  alter table applyn add ApplBankRefDate DateTime";
            string Tmlnd = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'isTamilNaduSc'");
            if (Tmlnd == "0")
                AltQ += "  alter table applyn add isTamilNaduSc bit";
            string Adno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Aadharcard_no'");
            if (Adno == "0")
                AltQ += "  alter table applyn add Aadharcard_no nvarchar(15)";
            string Expls = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'ExSPlace'");
            if (Expls == "0")
                AltQ += "  alter table applyn add ExSPlace nvarchar(100)";
            string Altrdgcode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Alternativedegree_code'");
            if (Altrdgcode == "0")
                AltQ += "  alter table applyn add Alternativedegree_code int";
            string Studntm = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'stud_nametamil'");
            if (Studntm == "0")
                AltQ += "  alter table applyn add stud_nametamil nvarchar(100)";
            string Parntm = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'parent_nametamil'");
            if (Parntm == "0")
                AltQ += "  alter table applyn add parent_nametamil nvarchar(100)";
            string Altmbl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'alter_mobileno'");
            if (Altmbl == "0")
                AltQ += "  alter table applyn add alter_mobileno varchar(20)";
            string Dsb = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'isdisable'");
            if (Dsb == "0")
                AltQ += "  alter table applyn add isdisable bit";
            string isDsb = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'isdisabledisc'");
            if (isDsb == "0")
                AltQ += "  alter table applyn add isdisabledisc varchar(50)";
            string islearn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'islearningdis'");
            if (islearn == "0")
                AltQ += "  alter table applyn add islearningdis bit";
            string Msdsc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'missionarydisc'");
            if (Msdsc == "0")
                AltQ += " alter table applyn add missionarydisc nvarchar(200)";
            string AdmtDt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'AdmitedDate'");
            if (AdmtDt == "0")
                AltQ += " Alter table applyn add AdmitedDate datetime";
            string View = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'isview'");
            if (View == "0")
                AltQ += " alter table applyn add isview int";
            string drlic = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'IsDrivingLic'");
            if (drlic == "0")
                AltQ += " alter table applyn add [IsDrivingLic] [bit]";
            string insr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'IsInsurance'");
            if (insr == "0")
                AltQ += " alter table applyn add [IsInsurance] [bit]";
            string insruby = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Insurance_InsBy'");
            if (insruby == "0")
                AltQ += " alter table applyn add [Insurance_InsBy] [nvarchar](100)";
            string insnorlt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Insurance_NominRelation'");
            if (insnorlt == "0")
                AltQ += " alter table applyn add [Insurance_NominRelation] [nvarchar](50)";
            string Selst = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'selection_status'");
            if (Selst == "0")
                AltQ += " alter table applyn add selection_status bit";
            string Relaonship = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Relationship'");
            if (Relaonship == "0")
                AltQ += " alter table applyn add Relationship varchar(20)";
            string altmobilenop = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'alter_mobilenop'");
            if (altmobilenop == "0")
                AltQ += " alter table applyn add alter_mobilenop varchar(20)";
            string ncadet = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'ncccadet'");
            if (ncadet == "0")
                AltQ += " alter table applyn add ncccadet bit";
            string partInguage = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'partI_Language'");
            if (partInguage == "0")
                AltQ += " alter table applyn add partI_Language numeric";
            string enrsession = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'enrollment_session'");
            if (enrsession == "0")
                AltQ += " alter table applyn add enrollment_session varchar(20)";
            string spouse_name = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'spouse_name'");
            if (spouse_name == "0")
                AltQ += " Alter table applyn Add spouse_name nvarchar(100)";
            //registration
            string isalni = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'isalumni'");
            if (isalni == "0")
                AltQ += " alter table registration add isalumni bit";
            //student prev details
            string Totmk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'totalmark'");
            if (Totmk == "0")
                AltQ += "  alter table Stud_prev_details add totalmark float";
            string SeMk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'securedmark'");
            if (SeMk == "0")
                AltQ += "  alter table Stud_prev_details add securedmark float";
            string Xmdm = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'Xmedium'");
            if (Xmdm == "0")
                AltQ += "  alter table Stud_prev_details add Xmedium numeric";
            string Grde = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'isgrade'");
            if (Grde == "0")
                AltQ += "  alter table Stud_prev_details add isgrade bit";
            string untst = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'uni_state'");
            if (untst == "0")
                AltQ += "  alter table Stud_prev_details add uni_state varchar(40)";
            string Tanctmk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'tancetmark_year'");
            if (Tanctmk == "0")
                AltQ += "  alter table Stud_prev_details add tancetmark_year int";
            string Mrkprk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'markPriority'");
            if (Mrkprk == "0")
                AltQ += "  alter table stud_prev_details add markPriority int";
            string majoried_percent = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'majorallied_percent'");
            if (majoried_percent == "0")
                AltQ += " alter table Stud_prev_details add majorallied_percent numeric";
            string majorcent = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'major_percent'");
            if (majorcent == "0")
                AltQ += " alter table Stud_prev_details add major_percent numeric";
            string typeajor = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'type_major'");
            if (typeajor == "0")
                AltQ += " alter table Stud_prev_details add type_major tinyint";
            string tyemester = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'type_semester'");
            if (tyemester == "0")
                AltQ += " alter table Stud_prev_details add type_semester bit";
            string tancmark = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'tancet_mark'");
            if (tancmark == "0")
                AltQ += " alter table Stud_prev_details add tancet_mark numeric";
            string Vocatstream = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'Vocational_stream'");
            if (Vocatstream == "0")
                AltQ += " alter table Stud_prev_details add Vocational_stream bit";
            string Cut_Of_Mark = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'Cut_Of_Mark'");
            if (Cut_Of_Mark == "0")
                AltQ += " alter table Stud_prev_details add Cut_Of_Mark decimal(12,2)";
            string Sch_Clg_Type = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'Sch_Clg_Type'");
            if (Sch_Clg_Type == "0")
                AltQ += " alter table Stud_prev_details add Sch_Clg_Type bit";
            //student prev history
            string Pasmnth = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'perv_marks_history' AND COLUMN_NAME = 'pass_month'");
            if (Pasmnth == "0")
                AltQ += "  alter table perv_marks_history add pass_month varchar(10)";
            string Pasyr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'perv_marks_history' AND COLUMN_NAME = 'pass_year'");
            if (Pasyr == "0")
                AltQ += "  alter table perv_marks_history add pass_year varchar(10)";
            string noattmpt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'perv_marks_history' AND COLUMN_NAME = 'noofattempt'");
            if (noattmpt == "0")
                AltQ += "  alter table perv_marks_history add noofattempt varchar(10)";
            string semear = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'perv_marks_history' AND COLUMN_NAME = 'semyear'");
            if (semear == "0")
                AltQ += "  alter table perv_marks_history add semyear varchar(20)";
            //Textval table
            string Txtval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'textvaltable' AND COLUMN_NAME = 'TextCriteria2'");
            if (Txtval == "0")
                AltQ += "  alter table textvaltable add TextCriteria2 nvarchar(20)";
            string priority1 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'textvaltable' AND COLUMN_NAME = 'priority1'");
            if (priority1 == "0")
                AltQ += "  alter table textvaltable add priority1 bigint ";
            string priority2 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'textvaltable' AND COLUMN_NAME = 'priority2'");
            if (priority2 == "0")
                AltQ += "  alter table textvaltable add priority2 bigint";
            //select critera
            string Seltow = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'selectcriteria' AND COLUMN_NAME = 'criteria_Code'");
            if (Seltow == "0")
                AltQ += "  alter table selectcriteria  add criteria_Code varchar(20)";
            string Adcon = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'selectcriteria' AND COLUMN_NAME = 'admit_confirm'");
            if (Adcon == "0")
                AltQ += " alter table selectcriteria add admit_confirm bit";
            string Allocolmn = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'admitcolumnset' AND COLUMN_NAME = 'allot_Confirm'");
            if (Allocolmn == "0")
                AltQ += " alter table admitcolumnset add allot_Confirm tinyint";
            //student master dt
            string certm = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CertMasterDet' AND COLUMN_NAME = 'isOrginal'");
            if (certm == "0")
                AltQ += " alter table CertMasterDet add isOrginal bit";
            string certmdt = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CertMasterDet' AND COLUMN_NAME = 'isDuplicate'");
            if (certmdt == "0")
                AltQ += " alter table CertMasterDet add isDuplicate bit";
            string certmdate = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CertMasterDet' AND COLUMN_NAME = 'LastDate'");
            if (certmdate == "0")
                AltQ += " alter table CertMasterDet add LastDate datetime";
            string cerctyp = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CertMasterDet' AND COLUMN_NAME = 'Categorytype'");
            if (cerctyp == "0")
                AltQ += " alter table CertMasterDet add Categorytype bigint";
            //student certdetails
            string filetype = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'Filetype'");
            if (filetype == "0")
                AltQ += " alter table StudCertDetails_New add Filetype varchar(200)";
            string filetname = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'FileName'");
            if (filetname == "0")
                AltQ += " alter table StudCertDetails_New add FileName varchar(200)";
            string atchdoc = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'attachdoc'");
            if (atchdoc == "0")
                AltQ += " alter table StudCertDetails_New add attachdoc varbinary(max) ";
            else
                AltQ += " alter table StudCertDetails_New alter column attachdoc varbinary(max) ";
            string issued = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'isIssued'");
            if (issued == "0")
                AltQ += " alter table  StudCertDetails_New add isIssued bit";
            string IssdDate = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'IssuedDate'");
            if (IssdDate == "0")
                AltQ += " alter table StudCertDetails_New add IssuedDate dateTime";
            string suedby = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'Issuedby'");
            if (suedby == "0")
                AltQ += " alter table  StudCertDetails_New add Issuedby bigint";
            string ReunDate = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'RetrunDate'");
            if (ReunDate == "0")
                AltQ += " alter table  StudCertDetails_New add RetrunDate datetime";
            string Reivedby = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'Receivedby'");
            if (Reivedby == "0")
                AltQ += " alter table  StudCertDetails_New add Receivedby bigint";
            string cerserno = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'Cert_SerialNo'");
            if (cerserno == "0")
                AltQ += " alter table  StudCertDetails_New add Cert_SerialNo nvarchar(100)";
            string Cert_AppDate = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'Cert_AppDate'");
            if (Cert_AppDate == "0")
                AltQ += " alter table  StudCertDetails_New add Cert_AppDate datetime";
            string Cert_RecDate = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'Cert_RecDate'");
            if (Cert_RecDate == "0")
                AltQ += " alter table  StudCertDetails_New add Cert_RecDate datetime";
            string Cert_IssueAuth = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'Cert_IssueAuth'");
            if (Cert_IssueAuth == "0")
                AltQ += " alter table  StudCertDetails_New add Cert_IssueAuth nvarchar(100)";
            string Cert_Village = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'Cert_Village'");
            if (Cert_Village == "0")
                AltQ += " alter table  StudCertDetails_New add Cert_Village nvarchar(100)";
            string Cert_Post = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'Cert_Post'");
            if (Cert_Post == "0")
                AltQ += " alter table  StudCertDetails_New add Cert_Post nvarchar(100)";
            string Cert_Taluk = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'Cert_Taluk'");
            if (Cert_Taluk == "0")
                AltQ += " alter table  StudCertDetails_New add Cert_Taluk nvarchar(100)";
            string Cert_Dist = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'Cert_Dist'");
            if (Cert_Dist == "0")
                AltQ += " alter table  StudCertDetails_New add Cert_Dist nvarchar(100)";
            string Cert_State = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'Cert_State'");
            if (Cert_State == "0")
                AltQ += " alter table  StudCertDetails_New add Cert_State numeric";
            string Cert_PinCode = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'Cert_PinCode'");
            if (Cert_PinCode == "0")
                AltQ += " alter table  StudCertDetails_New add Cert_PinCode nvarchar(50)";
            //alumini column set
            string admlumnset = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'admitcolumnset' AND COLUMN_NAME = 'priority'");
            if (admlumnset == "0")
                AltQ += " alter table admitcolumnset add priority varchar(20)";
            else
                AltQ += " alter table admitcolumnset alter column priority varchar(20)";
            //enrollment
            string Iscplete = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_Enrollment' AND COLUMN_NAME = 'Iscomplete'");
            if (Iscplete == "0")
                AltQ += " alter table Stud_Enrollment add Iscomplete tinyint";
            string toalcount = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_Enrollment' AND COLUMN_NAME = 'totalcount'");
            if (toalcount == "0")
                AltQ += "   alter table Stud_Enrollment add totalcount int";


            //added by sudhagar 22.07.2017
            toalcount = string.Empty;
            toalcount = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'convocation_Amount'");
            if (toalcount == "0")
                AltQ += "   alter table applyn add convocation_Amount decimal";
            toalcount = string.Empty;
            toalcount = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'convocation_PaidDate'");
            if (toalcount == "0")
                AltQ += " alter table applyn add convocation_PaidDate datetime";
            toalcount = string.Empty;
            toalcount = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'convocation_Remark'");
            if (toalcount == "0")
                AltQ += "   alter table applyn add convocation_Remark varchar(200)";


            if (AltQ != "")
                Upd = d2.update_method_wo_parameter(AltQ, "Text");
            string Adnoa = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Aadharcard_no'");
            if (Adnoa != "0")
            {
                int sdd = d2.update_method_wo_parameter(" alter table applyn alter column Aadharcard_no nvarchar(100)", "text");
            }
            AltQ = string.Empty;
            string nativity = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'nativity'");
            if (nativity == "0")
                AltQ += "   alter table applyn alter column nativity nvarchar(50)";
            string family_Ann_Inc = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'family_Ann_Inc'");
            if (family_Ann_Inc == "0")
                AltQ += "   alter table applyn add family_Ann_Inc nvarchar(20)";
            string stud_Ann_Inc = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'stud_Ann_Inc'");
            if (stud_Ann_Inc == "0")
                AltQ += "   alter table applyn add stud_Ann_Inc nvarchar(20)";
            string entry_center = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'entry_center'");
            if (entry_center == "0")
                AltQ += "   alter table applyn add entry_center nvarchar(100)";
            string xat_cat_apply = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'xat_cat_apply'");
            if (xat_cat_apply == "0")
                AltQ += "   alter table applyn add xat_cat_apply nvarchar(20)";
            string dalith = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'dalith'");
            if (dalith == "0")
                AltQ += "   alter table applyn add dalith bit";
            string FocDesign = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'FocDesign'");
            if (FocDesign == "0")
                AltQ += "   Alter table applyn Add FocDesign nvarchar(200)";
            string FocDept = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'FocDept'");
            if (FocDept == "0")
                AltQ += "   Alter table applyn Add FocDept nvarchar(200)";
            string FocDetails = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'FocDetails'");
            if (FocDetails == "0")
                AltQ += "   Alter table applyn Add FocDetails nvarchar(200)";
            string MocDesign = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'MocDesign'");
            if (MocDesign == "0")
                AltQ += "   Alter table applyn Add MocDesign nvarchar(200)";
            string MocDept = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'MocDept'");
            if (MocDept == "0")
                AltQ += "   Alter table applyn Add MocDept nvarchar(200)";
            string MocDetails = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'MocDetails'");
            if (MocDetails == "0")
                AltQ += "   Alter table applyn Add MocDetails nvarchar(200)";
            string GocDesign = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'GocDesign'");
            if (GocDesign == "0")
                AltQ += "   Alter table applyn Add GocDesign nvarchar(200)";
            string GocDept = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'GocDept'");
            if (GocDept == "0")
                AltQ += "   Alter table applyn Add GocDept nvarchar(200)";
            string GocDetails = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'GocDetails'");
            if (GocDetails == "0")
                AltQ += "   Alter table applyn Add GocDetails nvarchar(200)";
            string LastTCNo = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'LastTCNo '");
            if (LastTCNo == "0")
                AltQ += "   Alter Table Applyn Add LastTCNo nvarchar(15)";
            string LastTCDate = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'LastTCDate '");
            if (LastTCDate == "0")
                AltQ += "   Alter Table Applyn Add LastTCDate Datetime";
            string StdPhoto = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StdPhoto' AND COLUMN_NAME = 's_sign'");
            if (StdPhoto == "0")
                AltQ += "   alter table StdPhoto add s_sign image";
            if (AltQ != "")
                Upd = d2.update_method_wo_parameter(AltQ, "Text");
            string work_DurationMon = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stud_job_Description' AND COLUMN_NAME = 'work_DurationMon'");
            if (work_DurationMon == "0")
                Upd = d2.update_method_wo_parameter("   alter table stud_job_Description alter column work_DurationMon varchar(32)", "Text");
            string examD = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Exam_details ' AND COLUMN_NAME = 'isSupplementaryExam '");
            if (examD == "0")
                Upd = d2.update_method_wo_parameter("alter table Exam_details add isSupplementaryExam bit not null Constraint DF_Exam_details_isSupplementaryExam Default 0", "Text");
            bool exsave = false;
            string sp_insert_applyn_fromappl = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_insert_applyn_fromappl'");
            if (sp_insert_applyn_fromappl == "0")
            {
                string sp_insert_applyn_fromapplpro = "  Create procedure sp_insert_applyn_fromappl (@IsConfirm bit,@app_formno nvarchar(50),@date_applied datetime,@stud_name nvarchar(200),@sex tinyint,@parent_name nvarchar(100),@dob datetime,@parent_occu numeric,@mother_tongue numeric,@religion numeric,@citizen numeric,@community numeric,@caste numeric,@parent_addressC nvarchar(1000),@Streetc nvarchar(500),@Cityc nvarchar(500),@parent_statec numeric,@Countryc varchar(50),@parent_pincodec nvarchar(200) ,@Student_Mobile nvarchar(100),@StuPer_Id nvarchar(100),@parent_phnoc nvarchar(100),@alter_mobileno varchar(20),@parent_addressP nvarchar(1000),@Streetp nvarchar(500),@cityp nvarchar(500),@parent_statep numeric,@Countryp varchar(50),@parent_pincodep nvarchar(200),@parent_phnop nvarchar(100),@degree_code numeric,@batch_year int,@college_code numeric,@SubCaste numeric,@isdisable bit ,@isdisabledisc nvarchar(200),@islearningdis bit,@missionarydisc nvarchar(200),@MissionaryChild bit,@seattype numeric,@current_semester numeric,@parent_income numeric,@parentF_Mobile nvarchar(100),@emailp nvarchar(200),@mother nvarchar(100),@motherocc numeric,@mIncome numeric,@parentM_Mobile nvarchar(100),@emailM nvarchar(100),@guardian_name nvarchar(100),@guardian_mobile nvarchar(100),@emailg nvarchar(500),@partI_Language nvarchar(60),@bldgrp numeric,@place_birth nvarchar(100),@Aadharcard_no varchar(30),@Alternativedegree_code int,@TamilOrginFromAndaman bit,@IsExService tinyint,@handy smallint,@visualhandy smallint,@first_graduate numeric,@CampusReq bit,@DistinctSport nvarchar(100),@co_curricular numeric,@fatherdob datetime,@motherdob datetime,@ExsRank nvarchar(200),@ExsNumber nvarchar(60),@ReserveCategory bit,@EconBackword bit,@SecondLang numeric,@ThirdLang numeric,@ExSPlace varchar(500),@tutionfee_waiver numeric,@isdonar numeric,@mar_status smallint,@mQualification numeric,@fqualification numeric,@idmark nvarchar(500),@Insurance_Amount float,@Insurance_Nominee nvarchar(400),@parentoldstud smallint,@Driving_details varchar(100),@IsDrivingLic bit,@IsInsurance bit,@Insurance_InsBy nvarchar(200),@Insurance_NominRelation nvarchar(100),@mode numeric,@spousename nvarchar(100),@Aadhaar_Enroll_No nvarchar(100),@ElectionID_No nvarchar(100),@PanCard_No nvarchar(100),@Fax_No_Per nvarchar(100),@Ins_Nomin_Age int,@DrivLic_Issue_Date datetime,@TalukC nvarchar(20),@TalukP nvarchar(20)) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY insert into applyn (IsConfirm,app_formno,date_applied,stud_name,sex,parent_name,dob,parent_occu,mother_tongue,religion,citizen,community,caste,parent_addressC,Streetc,Cityc,parent_statec,Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc,alter_mobileno,parent_addressP,Streetp,cityp,parent_statep,Countryp,parent_pincodep,parent_phnop,degree_code,batch_year,college_code,SubCaste,isdisable ,isdisabledisc,islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,parent_income,parentF_Mobile,emailp,mother,motherocc,mIncome,parentM_Mobile,emailM,guardian_name,guardian_mobile,emailg,partI_Language,bldgrp,place_birth,Aadharcard_no,Alternativedegree_code,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate,CampusReq,DistinctSport,co_curricular,fatherdob,motherdob,ExsRank,ExsNumber,ReserveCategory,EconBackword,SecondLang,ThirdLang,ExSPlace,tutionfee_waiver,isdonar,mar_status,mQualification,fqualification,idmark,Insurance_Amount, Insurance_Nominee,parentoldstud,Driving_details,IsDrivingLic ,IsInsurance ,Insurance_InsBy,Insurance_NominRelation,mode,spouse_name,Aadhaar_Enroll_No,ElectionID_No,PanCard_No,Fax_No_Per,Ins_Nomin_Age,DrivLic_Issue_Date,TalukP,TalukC) values(@IsConfirm,@app_formno,@date_applied,@stud_name,@sex,@parent_name,@dob,@parent_occu,@mother_tongue,@religion,@citizen,@community,@caste,@parent_addressC,@Streetc,@Cityc,@parent_statec,@Countryc,@parent_pincodec,@Student_Mobile,@StuPer_Id,@parent_phnoc,@alter_mobileno,@parent_addressP,@Streetp,@cityp,@parent_statep,@Countryp,@parent_pincodep,@parent_phnop,@degree_code,@batch_year,@college_code,@SubCaste,@isdisable ,@isdisabledisc,@islearningdis,@missionarydisc,@MissionaryChild,@seattype,@current_semester,@parent_income,@parentF_Mobile,@emailp,@mother,@motherocc,@mIncome,@parentM_Mobile,@emailM,@guardian_name,@guardian_mobile,@emailg,@partI_Language,@bldgrp,@place_birth,@Aadharcard_no,@Alternativedegree_code,@TamilOrginFromAndaman,@IsExService,@handy,@visualhandy,@first_graduate,@CampusReq,@DistinctSport,@co_curricular,@fatherdob,@motherdob,@ExsRank,@ExsNumber,@ReserveCategory,@EconBackword,@SecondLang,@ThirdLang,@ExSPlace,@tutionfee_waiver,@isdonar,@mar_status,@mQualification,@fqualification,@idmark,@Insurance_Amount,@Insurance_Nominee,@parentoldstud,@Driving_details,@IsDrivingLic ,@IsInsurance ,@Insurance_InsBy,@Insurance_NominRelation,@mode,@spousename,@Aadhaar_Enroll_No,@ElectionID_No,@PanCard_No,@Fax_No_Per,@Ins_Nomin_Age,@DrivLic_Issue_Date,@TalukC ,@TalukP) COMMIT TRANSACTION END TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY End END CATCH End  ";
                if (sp_insert_applyn_fromapplpro != "")
                {
                    int sp_insert_applyn_fromapplinsert = d2.update_method_wo_parameter(sp_insert_applyn_fromapplpro, "Text");
                }
            }
            if (sp_insert_applyn_fromappl != "0")
            {
                string sp_insert_applyn_fromapplpro = "  alter  procedure sp_insert_applyn_fromappl (@IsConfirm bit,@app_formno nvarchar(50),@date_applied datetime,@stud_name nvarchar(200),@sex tinyint,@parent_name nvarchar(100),@dob datetime,@parent_occu numeric,@mother_tongue numeric,@religion numeric,@citizen numeric,@community numeric,@caste numeric,@parent_addressC nvarchar(1000),@Streetc nvarchar(500),@Cityc nvarchar(500),@parent_statec numeric,@Countryc varchar(50),@parent_pincodec nvarchar(200) ,@Student_Mobile nvarchar(100),@StuPer_Id nvarchar(100),@parent_phnoc nvarchar(100),@alter_mobileno varchar(20),@parent_addressP nvarchar(1000),@Streetp nvarchar(500),@cityp nvarchar(500),@parent_statep numeric,@Countryp varchar(50),@parent_pincodep nvarchar(200),@parent_phnop nvarchar(100),@degree_code numeric,@batch_year int,@college_code numeric,@SubCaste numeric,@isdisable bit ,@isdisabledisc nvarchar(200),@islearningdis bit,@missionarydisc nvarchar(200),@MissionaryChild bit,@seattype numeric,@current_semester numeric,@parent_income numeric,@parentF_Mobile nvarchar(100),@emailp nvarchar(200),@mother nvarchar(100),@motherocc numeric,@mIncome numeric,@parentM_Mobile nvarchar(100),@emailM nvarchar(100),@guardian_name nvarchar(100),@guardian_mobile nvarchar(100),@emailg nvarchar(500),@partI_Language nvarchar(60),@bldgrp numeric,@place_birth nvarchar(100),@Aadharcard_no varchar(30),@Alternativedegree_code int,@TamilOrginFromAndaman bit,@IsExService tinyint,@handy smallint,@visualhandy smallint,@first_graduate numeric,@CampusReq bit,@DistinctSport nvarchar(100),@co_curricular numeric,@fatherdob datetime,@motherdob datetime,@ExsRank nvarchar(200),@ExsNumber nvarchar(60),@ReserveCategory bit,@EconBackword bit,@SecondLang numeric,@ThirdLang numeric,@ExSPlace varchar(500),@tutionfee_waiver numeric,@isdonar numeric,@mar_status smallint,@mQualification numeric,@fqualification numeric,@idmark nvarchar(500),@Insurance_Amount float,@Insurance_Nominee nvarchar(400),@parentoldstud smallint,@Driving_details varchar(100),@IsDrivingLic bit,@IsInsurance bit,@Insurance_InsBy nvarchar(200),@Insurance_NominRelation nvarchar(100),@mode numeric,@spousename nvarchar(100),@Aadhaar_Enroll_No nvarchar(100),@ElectionID_No nvarchar(100),@PanCard_No nvarchar(100),@Fax_No_Per nvarchar(100),@Ins_Nomin_Age int,@DrivLic_Issue_Date datetime,@TalukC nvarchar(20),@TalukP nvarchar(20)) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY insert into applyn (IsConfirm,app_formno,date_applied,stud_name,sex,parent_name,dob,parent_occu,mother_tongue,religion,citizen,community,caste,parent_addressC,Streetc,Cityc,parent_statec,Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc,alter_mobileno,parent_addressP,Streetp,cityp,parent_statep,Countryp,parent_pincodep,parent_phnop,degree_code,batch_year,college_code,SubCaste,isdisable ,isdisabledisc,islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,parent_income,parentF_Mobile,emailp,mother,motherocc,mIncome,parentM_Mobile,emailM,guardian_name,guardian_mobile,emailg,partI_Language,bldgrp,place_birth,Aadharcard_no,Alternativedegree_code,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate,CampusReq,DistinctSport,co_curricular,fatherdob,motherdob,ExsRank,ExsNumber,ReserveCategory,EconBackword,SecondLang,ThirdLang,ExSPlace,tutionfee_waiver,isdonar,mar_status,mQualification,fqualification,idmark,Insurance_Amount, Insurance_Nominee,parentoldstud,Driving_details,IsDrivingLic ,IsInsurance ,Insurance_InsBy,Insurance_NominRelation,mode,spouse_name,Aadhaar_Enroll_No,ElectionID_No,PanCard_No,Fax_No_Per,Ins_Nomin_Age,DrivLic_Issue_Date,TalukP,TalukC) values(@IsConfirm,@app_formno,@date_applied,@stud_name,@sex,@parent_name,@dob,@parent_occu,@mother_tongue,@religion,@citizen,@community,@caste,@parent_addressC,@Streetc,@Cityc,@parent_statec,@Countryc,@parent_pincodec,@Student_Mobile,@StuPer_Id,@parent_phnoc,@alter_mobileno,@parent_addressP,@Streetp,@cityp,@parent_statep,@Countryp,@parent_pincodep,@parent_phnop,@degree_code,@batch_year,@college_code,@SubCaste,@isdisable ,@isdisabledisc,@islearningdis,@missionarydisc,@MissionaryChild,@seattype,@current_semester,@parent_income,@parentF_Mobile,@emailp,@mother,@motherocc,@mIncome,@parentM_Mobile,@emailM,@guardian_name,@guardian_mobile,@emailg,@partI_Language,@bldgrp,@place_birth,@Aadharcard_no,@Alternativedegree_code,@TamilOrginFromAndaman,@IsExService,@handy,@visualhandy,@first_graduate,@CampusReq,@DistinctSport,@co_curricular,@fatherdob,@motherdob,@ExsRank,@ExsNumber,@ReserveCategory,@EconBackword,@SecondLang,@ThirdLang,@ExSPlace,@tutionfee_waiver,@isdonar,@mar_status,@mQualification,@fqualification,@idmark,@Insurance_Amount,@Insurance_Nominee,@parentoldstud,@Driving_details,@IsDrivingLic ,@IsInsurance ,@Insurance_InsBy,@Insurance_NominRelation,@mode,@spousename,@Aadhaar_Enroll_No,@ElectionID_No,@PanCard_No,@Fax_No_Per,@Ins_Nomin_Age,@DrivLic_Issue_Date,@TalukC ,@TalukP) COMMIT TRANSACTION END TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY End END CATCH End  ";
                if (sp_insert_applyn_fromapplpro != "")
                {
                    int sp_insert_applyn_fromapplinsert = d2.update_method_wo_parameter(sp_insert_applyn_fromapplpro, "Text");
                    exsave = true;
                }
            }
            // 19.12.2016 added by sudhagar
            if (sp_insert_applyn_fromappl != "0" && exsave)
            {
                string sp_insert_applyn_fromapplpro = " alter  procedure sp_insert_applyn_fromappl   (@IsConfirm bit,@app_formno nvarchar(50),@date_applied datetime,@stud_name nvarchar(200),@sex tinyint,@parent_name nvarchar(100),@dob datetime,@parent_occu numeric,@mother_tongue numeric,@religion numeric,@citizen numeric,@community numeric,@caste numeric,@parent_addressC nvarchar(1000),@Streetc nvarchar(500),@Cityc nvarchar(500),@parent_statec numeric,@Countryc varchar(50),@parent_pincodec nvarchar(200) ,@Student_Mobile nvarchar(100),@StuPer_Id nvarchar(100),@parent_phnoc nvarchar(100),@alter_mobileno varchar(20),@parent_addressP nvarchar(1000),@Streetp nvarchar(500),@cityp nvarchar(500),@parent_statep numeric,@Countryp varchar(50),@parent_pincodep nvarchar(200),@parent_phnop nvarchar(100),@degree_code numeric,@batch_year int,@college_code numeric,@SubCaste numeric,@isdisable bit ,@isdisabledisc nvarchar(200),@islearningdis bit,@missionarydisc nvarchar(200),@MissionaryChild bit,@seattype numeric,@current_semester numeric,@parent_income numeric,@parentF_Mobile nvarchar(100),@emailp nvarchar(200),@mother nvarchar(100),@motherocc numeric,@mIncome numeric,@parentM_Mobile nvarchar(100),@emailM nvarchar(100),@guardian_name nvarchar(100),@guardian_mobile nvarchar(100),@emailg nvarchar(500),@partI_Language nvarchar(60),@bldgrp numeric,@place_birth nvarchar(100),@Aadharcard_no varchar(30),@Alternativedegree_code int,@TamilOrginFromAndaman bit,@IsExService tinyint,@handy smallint,@visualhandy smallint,@first_graduate numeric,@CampusReq bit,@DistinctSport nvarchar(100),@co_curricular numeric,@fatherdob datetime,@motherdob datetime,@ExsRank nvarchar(200),@ExsNumber nvarchar(60),@ReserveCategory bit,@EconBackword bit,@SecondLang numeric,@ThirdLang numeric,@ExSPlace varchar(500),@tutionfee_waiver numeric,@isdonar numeric,@mar_status smallint,@mQualification numeric,@fqualification numeric,@idmark nvarchar(500),@Insurance_Amount float,@Insurance_Nominee nvarchar(400),@parentoldstud smallint,@Driving_details varchar(100),@IsDrivingLic bit,@IsInsurance bit,@Insurance_InsBy nvarchar(200),@Insurance_NominRelation nvarchar(100),@mode numeric,@spousename nvarchar(100),@Aadhaar_Enroll_No nvarchar(100),@ElectionID_No nvarchar(100),@PanCard_No nvarchar(100),@Fax_No_Per nvarchar(100),@Ins_Nomin_Age int,@DrivLic_Issue_Date datetime,@TalukC nvarchar(500),@TalukP nvarchar(500)) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY insert into applyn (IsConfirm,app_formno,date_applied,stud_name,sex,parent_name,dob,parent_occu,mother_tongue,religion,citizen,community,caste,parent_addressC,Streetc,Cityc,parent_statec,Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc,alter_mobileno,parent_addressP,Streetp,cityp,parent_statep,Countryp,parent_pincodep,parent_phnop,degree_code,batch_year,college_code,SubCaste,isdisable ,isdisabledisc,islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,parent_income,parentF_Mobile,emailp,mother,motherocc,mIncome,parentM_Mobile,emailM,guardian_name,guardian_mobile,emailg,partI_Language,bldgrp,place_birth,Aadharcard_no,Alternativedegree_code,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate,CampusReq,DistinctSport,co_curricular,fatherdob,motherdob,ExsRank,ExsNumber,ReserveCategory,EconBackword,SecondLang,ThirdLang,ExSPlace,tutionfee_waiver,isdonar,mar_status,mQualification,fqualification,idmark,Insurance_Amount, Insurance_Nominee,parentoldstud,Driving_details,IsDrivingLic ,IsInsurance ,Insurance_InsBy,Insurance_NominRelation,mode,spouse_name,Aadhaar_Enroll_No,ElectionID_No,PanCard_No,Fax_No_Per,Ins_Nomin_Age,DrivLic_Issue_Date,TalukP,TalukC) values(@IsConfirm,@app_formno,@date_applied,@stud_name,@sex,@parent_name,@dob,@parent_occu,@mother_tongue,@religion,@citizen,@community,@caste,@parent_addressC,@Streetc,@Cityc,@parent_statec,@Countryc,@parent_pincodec,@Student_Mobile,@StuPer_Id,@parent_phnoc,@alter_mobileno,@parent_addressP,@Streetp,@cityp,@parent_statep,@Countryp,@parent_pincodep,@parent_phnop,@degree_code,@batch_year,@college_code,@SubCaste,@isdisable ,@isdisabledisc,@islearningdis,@missionarydisc,@MissionaryChild,@seattype,@current_semester,@parent_income,@parentF_Mobile,@emailp,@mother,@motherocc,@mIncome,@parentM_Mobile,@emailM,@guardian_name,@guardian_mobile,@emailg,@partI_Language,@bldgrp,@place_birth,@Aadharcard_no,@Alternativedegree_code,@TamilOrginFromAndaman,@IsExService,@handy,@visualhandy,@first_graduate,@CampusReq,@DistinctSport,@co_curricular,@fatherdob,@motherdob,@ExsRank,@ExsNumber,@ReserveCategory,@EconBackword,@SecondLang,@ThirdLang,@ExSPlace,@tutionfee_waiver,@isdonar,@mar_status,@mQualification,@fqualification,@idmark,@Insurance_Amount,@Insurance_Nominee,@parentoldstud,@Driving_details,@IsDrivingLic ,@IsInsurance ,@Insurance_InsBy,@Insurance_NominRelation,@mode,@spousename,@Aadhaar_Enroll_No,@ElectionID_No,@PanCard_No,@Fax_No_Per,@Ins_Nomin_Age,@DrivLic_Issue_Date,@TalukC ,@TalukP) COMMIT TRANSACTION END TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY End END CATCH End ";
                if (sp_insert_applyn_fromapplpro != "")
                {
                    int sp_insert_applyn_fromapplinsert = d2.update_method_wo_parameter(sp_insert_applyn_fromapplpro, "Text");
                    exsave = true;
                }
            }
            string sp_insert_applyn_fromappl_school = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_insert_applyn_fromappl_school'");
            if (sp_insert_applyn_fromappl_school == "0")
            {
                string sp_insert_applyn_fromapplproschool = "  Create procedure sp_insert_applyn_fromappl_school (@IsConfirm bit,@app_formno nvarchar(50),@date_applied datetime,@stud_name nvarchar(200),@sex tinyint,@parent_name nvarchar(100),@dob datetime,@parent_occu numeric,@mother_tongue numeric,@religion numeric,@citizen numeric,@community numeric,@caste numeric,@parent_addressC nvarchar(1000),@Streetc nvarchar(500),@Cityc nvarchar(500),@parent_statec numeric,@Countryc varchar(50),@parent_pincodec nvarchar(200) ,@Student_Mobile nvarchar(100),@StuPer_Id nvarchar(100),@parent_phnoc nvarchar(100),@alter_mobileno varchar(20),@parent_addressP nvarchar(1000),@Streetp nvarchar(500),@cityp nvarchar(500),@parent_statep numeric,@Countryp varchar(50),@parent_pincodep nvarchar(200),@parent_phnop nvarchar(100),@degree_code numeric,@batch_year int,@college_code numeric,@SubCaste numeric,@isdisable bit ,@isdisabledisc nvarchar(200),@islearningdis bit,@missionarydisc nvarchar(200),@MissionaryChild bit,@seattype numeric,@current_semester numeric,@parent_income numeric,@parentF_Mobile nvarchar(100),@emailp nvarchar(200),@mother nvarchar(100),@motherocc numeric,@mIncome numeric,@parentM_Mobile nvarchar(100),@emailM nvarchar(100),@guardian_name nvarchar(100),@guardian_mobile nvarchar(100),@emailg nvarchar(500),@partI_Language nvarchar(60),@bldgrp numeric,@place_birth nvarchar(100),@Aadharcard_no varchar(30),@Alternativedegree_code int,@TamilOrginFromAndaman bit,@IsExService tinyint,@handy smallint,@visualhandy smallint,@first_graduate numeric,@CampusReq bit,@DistinctSport nvarchar(100),@co_curricular numeric,@fatherdob datetime,@motherdob datetime,@ExsRank nvarchar(200),@ExsNumber nvarchar(60),@ReserveCategory bit,@EconBackword bit,@SecondLang numeric,@ThirdLang numeric,@ExSPlace varchar(500),@tutionfee_waiver numeric,@isdonar numeric,@mar_status smallint,@mQualification numeric,@fqualification numeric,@idmark nvarchar(500),@Insurance_Amount float,@Insurance_Nominee nvarchar(400),@parentoldstud smallint,@Driving_details varchar(100),@IsDrivingLic bit,@IsInsurance bit,@Insurance_InsBy nvarchar(200),@Insurance_NominRelation nvarchar(100),@mode numeric,@spousename nvarchar(100),@EMISNumber nvarchar(100),@StudHeight nvarchar(100),@StudWeight nvarchar(100)) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY insert into applyn (IsConfirm,app_formno,date_applied,stud_name,sex,parent_name,dob,parent_occu,mother_tongue,religion,citizen,community,caste,parent_addressC,Streetc,Cityc,parent_statec,Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc,alter_mobileno,parent_addressP,Streetp,cityp,parent_statep,Countryp,parent_pincodep,parent_phnop,degree_code,batch_year,college_code,SubCaste,isdisable ,isdisabledisc,islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,parent_income,parentF_Mobile,emailp,mother,motherocc,mIncome,parentM_Mobile,emailM,guardian_name,guardian_mobile,emailg,partI_Language,bldgrp,place_birth,Aadharcard_no,Alternativedegree_code,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate,CampusReq,DistinctSport,co_curricular,fatherdob,motherdob,ExsRank,ExsNumber,ReserveCategory,EconBackword,SecondLang,ThirdLang,ExSPlace,tutionfee_waiver,isdonar,mar_status,mQualification,fqualification,idmark,Insurance_Amount,Insurance_Nominee,parentoldstud,Driving_details,IsDrivingLic ,IsInsurance ,Insurance_InsBy,Insurance_NominRelation,mode,spouse_name,EMIS_Number,StudHeight,StudWeight) values(@IsConfirm,@app_formno,@date_applied,@stud_name,@sex,@parent_name,@dob,@parent_occu,@mother_tongue,@religion,@citizen,@community,@caste,@parent_addressC,@Streetc,@Cityc,@parent_statec,@Countryc,@parent_pincodec,@Student_Mobile,@StuPer_Id,@parent_phnoc,@alter_mobileno,@parent_addressP,@Streetp,@cityp,@parent_statep,@Countryp,@parent_pincodep,@parent_phnop,@degree_code,@batch_year,@college_code,@SubCaste,@isdisable ,@isdisabledisc,@islearningdis,@missionarydisc,@MissionaryChild,@seattype,@current_semester,@parent_income,@parentF_Mobile,@emailp,@mother,@motherocc,@mIncome,@parentM_Mobile,@emailM,@guardian_name,@guardian_mobile,@emailg,@partI_Language,@bldgrp,@place_birth,@Aadharcard_no,@Alternativedegree_code,@TamilOrginFromAndaman,@IsExService,@handy,@visualhandy,@first_graduate,@CampusReq,@DistinctSport,@co_curricular,@fatherdob,@motherdob,@ExsRank,@ExsNumber,@ReserveCategory,@EconBackword,@SecondLang,@ThirdLang,@ExSPlace,@tutionfee_waiver,@isdonar,@mar_status,@mQualification,@fqualification,@idmark,@Insurance_Amount,@Insurance_Nominee,@parentoldstud,@Driving_details,@IsDrivingLic ,@IsInsurance ,@Insurance_InsBy,@Insurance_NominRelation,@mode,@spousename,@EMISNumber,@StudHeight,@StudWeight) COMMIT TRANSACTION END TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY End END CATCH End ";
                if (sp_insert_applyn_fromapplproschool != "")
                {
                    int sp_insert_applyn_fromapplinsert = d2.update_method_wo_parameter(sp_insert_applyn_fromapplproschool, "Text");
                }
            }
            if (sp_insert_applyn_fromappl_school != "0")
            {
                string sp_insert_applyn_fromapplproschool = "  Alter procedure sp_insert_applyn_fromappl_school (@IsConfirm bit,@app_formno nvarchar(50),@date_applied datetime,@stud_name nvarchar(200),@sex tinyint,@parent_name nvarchar(100),@dob datetime,@parent_occu numeric,@mother_tongue numeric,@religion numeric,@citizen numeric,@community numeric,@caste numeric,@parent_addressC nvarchar(1000),@Streetc nvarchar(500),@Cityc nvarchar(500),@parent_statec numeric,@Countryc varchar(50),@parent_pincodec nvarchar(200) ,@Student_Mobile nvarchar(100),@StuPer_Id nvarchar(100),@parent_phnoc nvarchar(100),@alter_mobileno varchar(20),@parent_addressP nvarchar(1000),@Streetp nvarchar(500),@cityp nvarchar(500),@parent_statep numeric,@Countryp varchar(50),@parent_pincodep nvarchar(200),@parent_phnop nvarchar(100),@degree_code numeric,@batch_year int,@college_code numeric,@SubCaste numeric,@isdisable bit ,@isdisabledisc nvarchar(200),@islearningdis bit,@missionarydisc nvarchar(200),@MissionaryChild bit,@seattype numeric,@current_semester numeric,@parent_income numeric,@parentF_Mobile nvarchar(100),@emailp nvarchar(200),@mother nvarchar(100),@motherocc numeric,@mIncome numeric,@parentM_Mobile nvarchar(100),@emailM nvarchar(100),@guardian_name nvarchar(100),@guardian_mobile nvarchar(100),@emailg nvarchar(500),@partI_Language nvarchar(60),@bldgrp numeric,@place_birth nvarchar(100),@Aadharcard_no varchar(30),@Alternativedegree_code int,@TamilOrginFromAndaman bit,@IsExService tinyint,@handy smallint,@visualhandy smallint,@first_graduate numeric,@CampusReq bit,@DistinctSport nvarchar(100),@co_curricular numeric,@fatherdob datetime,@motherdob datetime,@ExsRank nvarchar(200),@ExsNumber nvarchar(60),@ReserveCategory bit,@EconBackword bit,@SecondLang numeric,@ThirdLang numeric,@ExSPlace varchar(500),@tutionfee_waiver numeric,@isdonar numeric,@mar_status smallint,@mQualification numeric,@fqualification numeric,@idmark nvarchar(500),@Insurance_Amount float,@Insurance_Nominee nvarchar(400),@parentoldstud smallint,@Driving_details varchar(100),@IsDrivingLic bit,@IsInsurance bit,@Insurance_InsBy nvarchar(200),@Insurance_NominRelation nvarchar(100),@mode numeric,@spousename nvarchar(100),@EMISNumber nvarchar(100),@StudHeight nvarchar(100),@StudWeight nvarchar(100)) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY insert into applyn (IsConfirm,app_formno,date_applied,stud_name,sex,parent_name,dob,parent_occu,mother_tongue,religion,citizen,community,caste,parent_addressC,Streetc,Cityc,parent_statec,Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc,alter_mobileno,parent_addressP,Streetp,cityp,parent_statep,Countryp,parent_pincodep,parent_phnop,degree_code,batch_year,college_code,SubCaste,isdisable ,isdisabledisc,islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,parent_income,parentF_Mobile,emailp,mother,motherocc,mIncome,parentM_Mobile,emailM,guardian_name,guardian_mobile,emailg,partI_Language,bldgrp,place_birth,Aadharcard_no,Alternativedegree_code,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate,CampusReq,DistinctSport,co_curricular,fatherdob,motherdob,ExsRank,ExsNumber,ReserveCategory,EconBackword,SecondLang,ThirdLang,ExSPlace,tutionfee_waiver,isdonar,mar_status,mQualification,fqualification,idmark,Insurance_Amount,Insurance_Nominee,parentoldstud,Driving_details,IsDrivingLic ,IsInsurance ,Insurance_InsBy,Insurance_NominRelation,mode,spouse_name,EMIS_Number,StudHeight,StudWeight) values(@IsConfirm,@app_formno,@date_applied,@stud_name,@sex,@parent_name,@dob,@parent_occu,@mother_tongue,@religion,@citizen,@community,@caste,@parent_addressC,@Streetc,@Cityc,@parent_statec,@Countryc,@parent_pincodec,@Student_Mobile,@StuPer_Id,@parent_phnoc,@alter_mobileno,@parent_addressP,@Streetp,@cityp,@parent_statep,@Countryp,@parent_pincodep,@parent_phnop,@degree_code,@batch_year,@college_code,@SubCaste,@isdisable ,@isdisabledisc,@islearningdis,@missionarydisc,@MissionaryChild,@seattype,@current_semester,@parent_income,@parentF_Mobile,@emailp,@mother,@motherocc,@mIncome,@parentM_Mobile,@emailM,@guardian_name,@guardian_mobile,@emailg,@partI_Language,@bldgrp,@place_birth,@Aadharcard_no,@Alternativedegree_code,@TamilOrginFromAndaman,@IsExService,@handy,@visualhandy,@first_graduate,@CampusReq,@DistinctSport,@co_curricular,@fatherdob,@motherdob,@ExsRank,@ExsNumber,@ReserveCategory,@EconBackword,@SecondLang,@ThirdLang,@ExSPlace,@tutionfee_waiver,@isdonar,@mar_status,@mQualification,@fqualification,@idmark,@Insurance_Amount,@Insurance_Nominee,@parentoldstud,@Driving_details,@IsDrivingLic ,@IsInsurance ,@Insurance_InsBy,@Insurance_NominRelation,@mode,@spousename,@EMISNumber,@StudHeight,@StudWeight) COMMIT TRANSACTION END TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY End END CATCH End ";
                if (sp_insert_applyn_fromapplproschool != "")
                {
                    int sp_insert_applyn_fromapplinsert = d2.update_method_wo_parameter(sp_insert_applyn_fromapplproschool, "Text");
                }
            }
            string sp_insert_applyn_loyolla = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_insert_applyn_LIBA'");
            if (sp_insert_applyn_loyolla == "0")
            {
                string sp_insert_applyn_loyollapro = " create procedure sp_insert_applyn_LIBA (@IsConfirm bit,@app_formno nvarchar(50),@date_applied datetime,@stud_name nvarchar(200),@sex tinyint,@parent_name nvarchar(100),@dob datetime,@parent_occu numeric,@mother_tongue numeric,@religion numeric,@citizen numeric,@community numeric,@caste numeric,@parent_addressC nvarchar(1000),@Streetc nvarchar(500),@Cityc nvarchar(500),@parent_statec numeric,@Countryc varchar(50),@parent_pincodec nvarchar(200) ,@Student_Mobile nvarchar(100),@StuPer_Id nvarchar(100),@parent_phnoc nvarchar(100),@alter_mobileno varchar(20),@parent_addressP nvarchar(1000),@Streetp nvarchar(500),@cityp nvarchar(500),@parent_statep numeric,@Countryp varchar(50),@parent_pincodep nvarchar(200),@parent_phnop nvarchar(100),@degree_code numeric,@batch_year int,@college_code numeric,@SubCaste numeric,@isdisable bit ,@current_semester numeric,@parent_income numeric,@parentF_Mobile nvarchar(100),@emailp nvarchar(200),@mother nvarchar(100),@motherocc numeric,@mIncome numeric,@parentM_Mobile nvarchar(100),@emailM nvarchar(100),@guardian_name nvarchar(100),@guardian_mobile nvarchar(100),@emailg nvarchar(500),@bldgrp numeric,@place_birth nvarchar(100),@Aadharcard_no varchar(30),@TamilOrginFromAndaman bit,@IsExService tinyint,@first_graduate numeric,@CampusReq bit,@DistinctSport nvarchar(100),@co_curricular numeric,@mQualification numeric,@fqualification numeric,@app_no numeric,@nativity nvarchar(50),@cat_id nvarchar(100),@xat_id nvarchar(100)) as BEGIN RETRY: BEGIN TRANSACTION  BEGIN TRY update applyn set IsConfirm=@IsConfirm,app_formno=@app_formno,date_applied=@date_applied,stud_name=@stud_name,sex=@sex,parent_name=@parent_name,dob=@dob,parent_occu=@parent_occu,mother_tongue=@mother_tongue,religion=@religion,citizen=@citizen,community=@community,caste=@caste,parent_addressC=@parent_addressC,Streetc=@Streetc,Cityc=@Cityc,parent_statec=@parent_statec,Countryc=@Countryc,parent_pincodec=@parent_pincodec,Student_Mobile=@Student_Mobile,StuPer_Id=@StuPer_Id,parent_phnoc=@parent_phnoc,alter_mobileno=@alter_mobileno,parent_addressP=@parent_addressP,Streetp=@Streetp,cityp=@cityp,parent_statep=@parent_statep,Countryp=@Countryp,parent_pincodep=@parent_pincodep,parent_phnop=@parent_phnop,degree_code=@degree_code,batch_year=@batch_year,college_code=@college_code,SubCaste=@SubCaste,isdisable=@isdisable,current_semester=@current_semester,parent_income=@parent_income,parentF_Mobile=@parentF_Mobile,emailp=@emailp,mother=@mother,motherocc=@motherocc,mIncome=@mIncome,parentM_Mobile=@parentM_Mobile,emailM=@emailM,guardian_name=@guardian_name,guardian_mobile=@guardian_mobile,emailg=@emailg,bldgrp=@bldgrp,place_birth=@place_birth,Aadharcard_no=@Aadharcard_no,TamilOrginFromAndaman=@TamilOrginFromAndaman,IsExService=@IsExService,first_graduate=@first_graduate,CampusReq=@CampusReq,DistinctSport=@DistinctSport,co_curricular=@co_curricular,mQualification=@mQualification,fqualification=@fqualification,nativity=@nativity,cat_id=@cat_id,xat_id=@xat_id where app_no=@app_no COMMIT TRANSACTION END TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY End END CATCH End ";
                if (sp_insert_applyn_loyollapro != "")
                {
                    int sp_insert_applyn_fromapplinsert = d2.update_method_wo_parameter(sp_insert_applyn_loyollapro, "Text");
                }
            }
            if (sp_insert_applyn_loyolla != "0")
            {
                string sp_insert_applyn_loyollaproalt = "Alter procedure sp_insert_applyn_LIBA (@IsConfirm bit,@app_formno nvarchar(50),@date_applied datetime,@stud_name nvarchar(200),@sex tinyint,@parent_name nvarchar(100),@dob datetime,@parent_occu numeric,@mother_tongue numeric,@religion numeric,@citizen numeric,@community numeric,@caste numeric,@parent_addressC nvarchar(1000),@Streetc nvarchar(500),@Cityc nvarchar(500),@parent_statec numeric,@Countryc varchar(50),@parent_pincodec nvarchar(200) ,@Student_Mobile nvarchar(100),@StuPer_Id nvarchar(100),@parent_phnoc nvarchar(100),@alter_mobileno varchar(20),@parent_addressP nvarchar(1000),@Streetp nvarchar(500),@cityp nvarchar(500),@parent_statep numeric,@Countryp varchar(50),@parent_pincodep nvarchar(200),@parent_phnop nvarchar(100),@degree_code numeric,@batch_year int,@college_code numeric,@SubCaste numeric,@isdisable bit ,@current_semester numeric,@parent_income numeric,@parentF_Mobile nvarchar(100),@emailp nvarchar(200),@mother nvarchar(100),@motherocc numeric,@mIncome numeric,@parentM_Mobile nvarchar(100),@emailM nvarchar(100),@guardian_name nvarchar(100),@guardian_mobile nvarchar(100),@emailg nvarchar(500),@bldgrp numeric,@place_birth nvarchar(100),@Aadharcard_no varchar(30),@TamilOrginFromAndaman bit,@IsExService tinyint,@first_graduate numeric,@CampusReq bit,@DistinctSport nvarchar(100),@co_curricular numeric,@mQualification numeric,@fqualification numeric,@app_no numeric,@nativity nvarchar(50),@cat_id nvarchar(100),@xat_id nvarchar(100)) as BEGIN RETRY: BEGIN TRANSACTION  BEGIN TRY update applyn set IsConfirm=@IsConfirm,app_formno=@app_formno,date_applied=@date_applied,stud_name=@stud_name,sex=@sex,parent_name=@parent_name,dob=@dob,parent_occu=@parent_occu,mother_tongue=@mother_tongue,religion=@religion,citizen=@citizen,community=@community,caste=@caste,parent_addressC=@parent_addressC,Streetc=@Streetc,Cityc=@Cityc,parent_statec=@parent_statec,Countryc=@Countryc,parent_pincodec=@parent_pincodec,Student_Mobile=@Student_Mobile,StuPer_Id=@StuPer_Id,parent_phnoc=@parent_phnoc,alter_mobileno=@alter_mobileno,parent_addressP=@parent_addressP,Streetp=@Streetp,cityp=@cityp,parent_statep=@parent_statep,Countryp=@Countryp,parent_pincodep=@parent_pincodep,parent_phnop=@parent_phnop,degree_code=@degree_code,batch_year=@batch_year,college_code=@college_code,SubCaste=@SubCaste,isdisable=@isdisable,current_semester=@current_semester,parent_income=@parent_income,parentF_Mobile=@parentF_Mobile,emailp=@emailp,mother=@mother,motherocc=@motherocc,mIncome=@mIncome,parentM_Mobile=@parentM_Mobile,emailM=@emailM,guardian_name=@guardian_name,guardian_mobile=@guardian_mobile,emailg=@emailg,bldgrp=@bldgrp,place_birth=@place_birth,Aadharcard_no=@Aadharcard_no,TamilOrginFromAndaman=@TamilOrginFromAndaman,IsExService=@IsExService,first_graduate=@first_graduate,CampusReq=@CampusReq,DistinctSport=@DistinctSport,co_curricular=@co_curricular,mQualification=@mQualification,fqualification=@fqualification,nativity=@nativity,cat_id=@cat_id,xat_id=@xat_id where app_no=@app_no COMMIT TRANSACTION END TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY End END CATCH End ";
                if (sp_insert_applyn_loyollaproalt != "")
                {
                    int sp_insert_applyn_fromapplinsert = d2.update_method_wo_parameter(sp_insert_applyn_loyollaproalt, "Text");
                }
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    //added by sudhagar 30-06-2016
    #region finance Master table

    protected void finMasterTables()   //Added Tables OnlineFeeTransactionMaster,OnlineFeeTransaction on Dec 9th by Jeyaprakash
    {
        try
        {
            string INsQ = string.Empty;
            int UpdQ = 0;
            //1
            string FinYearMaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_FinYearMaster'");
            if (FinYearMaster == "0")
            {
                INsQ = " CREATE TABLE FM_FinYearMaster(FinYearPK int IDENTITY(1,1) CONSTRAINT PKFinYear PRIMARY KEY NOT NULL,FinYearAcr nvarchar(10) NOT NULL,FinYearName nvarchar(100),FinYearStart Datetime,FinYearEnd Datetime,CollegeCode int)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //2
            string groupheader = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FS_ChlGroupHeaderSettings'");
            if (groupheader == "0")
            {
                INsQ = " CREATE TABLE FS_ChlGroupHeaderSettings(HeaderFK Bigint,Stream nvarchar(50),DispStream nvarchar(15),ChlGroupHeader nvarchar(100),BankFk int,CollegeCode int)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //3
            string FinYearPrivilage = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FS_FinYearPrivilage'");
            if (FinYearPrivilage == "0")
            {
                INsQ = "  CREATE TABLE FS_FinYearPrivilage(UserCode int,FinYearFK int,CollegeCode int)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //4
            string HeaderPriv = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FS_HeaderPrivilage'");
            if (HeaderPriv == "0")
            {
                INsQ = " CREATE TABLE FS_HeaderPrivilage(UserCode int,HeaderFK Bigint,CollegeCode int)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //5
            string LedgerPrivil = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FS_LedgerPrivilage'");
            if (LedgerPrivil == "0")
            {
                INsQ = " CREATE TABLE FS_LedgerPrivilage(UserCode int,HeaderFK Bigint,LedgerFK Bigint,CollegeCode int)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //6
            string fm_grpmaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_FinGroupMaster'");
            if (fm_grpmaster == "0")
            {
                INsQ = " CREATE TABLE FM_FinGroupMaster(FinGroupPK int IDENTITY(1,1) CONSTRAINT PKFinGroup PRIMARY KEY,GroupName nvarchar(50),GroupDesc nvarchar(100),ParentCode int,CollegeCode int)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //7
            string HeaderMaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_HeaderMaster'");
            if (HeaderMaster == "0")
            {
                INsQ = " CREATE Table FM_HeaderMaster(HeaderPK Bigint identity(1,1) CONSTRAINT PRHeaderMas PRIMARY KEY,HeaderAcr nvarchar(10),HeaderName nvarchar(100),HeaderType tinyint,Purpose nvarchar(300),PayInchargeStaff1 nvarchar(30),PayInchargeStaff2 nvarchar(30),PayInchargeStaff3 nvarchar(30),RcptInchargeStaff1 nvarchar(30),CollegeCode int)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //8 ledger master
            string ledgermaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_LedgerMaster'");
            if (ledgermaster == "0")
            {
                INsQ = " CREATE Table FM_LedgerMaster(LedgerPK Bigint identity(1,1) CONSTRAINT PRLedgerMas PRIMARY KEY,LedgerAcr nvarchar(20),LedgerName nvarchar(100),ConvertLedgerName nvarchar(100),LedgerMode Bit,LedgerType tinyint,Priority int,HeaderFK Bigint FOREIGN KEY References FM_HeaderMaster(HeaderPK),FinGroupFK Int FOREIGN KEY References FM_FinGroupMaster(FinGroupPK),Purpose nvarchar(300),OpeningCredit Decimal(12,2),OpeningDebit Decimal(12,2),CollegeCode int)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //9
            string FinBankMaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_FinBankMaster'");
            if (fm_grpmaster == "0")
            {
                INsQ = " CREATE TABLE FM_FinBankMaster(BankPK int identity(1,1) CONSTRAINT PKBMaster PRIMARY KEY,BankCode nvarchar(20),BankName nvarchar(100),BankBranch nvarchar(100),AccStartDate Datetime,AccType tinyint,AccNo nvarchar(30),AccHolderName nvarchar(100),Address1 nvarchar(100),Street nvarchar(100),City nvarchar(100),District numeric,State numeric,Country numeric,PinCode nvarchar(6),PhoneNo nvarchar(30),MobileNo nvarchar(30),FaxNo nvarchar(30),WebSite nvarchar(100),Email nvarchar(50),SignAuthorityStaff1 nvarchar(100),SignAuthorityStaff2 nvarchar(100),RTGSCode nvarchar(20),MCRCode nvarchar(20),IFSCCode nvarchar(30),CollegeCode int)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //10
            string BankChqDet = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_BankChqDet'");
            if (BankChqDet == "0")
            {
                INsQ = " CREATE TABLE FM_BankChqDet(ChqReceivedDate Datetime,ChqStartNo bigint,ChqEndNo bigint,NoOfLeaf int,RecStaffCode nvarchar(30),BankFK int FOREIGN KEY References FM_FinBankMaster(BankPK))";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //11
            string FinCodeSettings = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_FinCodeSettings'");
            if (FinCodeSettings == "0")
            {
                INsQ = " CREATE TABLE FM_FinCodeSettings(FromDate Datetime,FromTime nvarchar(30),RcptAcr nvarchar(10),RcptStNo bigint,RcptSize tinyint,VouchAcr nvarchar(10),VouchStNo Bigint,VouchSize tinyint,DupRcptAcr nvarchar(10),DupRcptStNo Bigint,DupRcptSize tinyint,ChallanAcr nvarchar(10),ChallanStNo Bigint,ChallanSize tinyint,DataImportAcr nvarchar(10),DataImportStNo Bigint,DataImportSize tinyint,IsHeader Bit,FinYearFK Int FOREIGN KEY References FM_FinYearMaster(FinYearPK),HeaderFK BigInt FOREIGN KEY References FM_HeaderMaster(HeaderPK),CollegeCode int)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //12
            //FM_HeaderFinCodeSettings table
            string hdfincodeSt = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_HeaderFinCodeSettings'");
            if (hdfincodeSt == "0")
            {
                string InsQ = " Create Table FM_HeaderFinCodeSettings(HeaderSettingPK bigint identity (1,1),RcptAcr Varchar(20),RcptStNo bigint,RcptSize tinyint,RecpSettingsDate  Datetime,FinyearFK bigint,CollegeCode int)";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            // 13 FM_HeaderFinCodeSettingsdet table
            string hdfincodeStDt = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_HeaderFinCodeSettingsDet'");
            if (hdfincodeStDt == "0")
            {
                string InsQ = " CREATE TABLE [dbo].[FM_HeaderFinCodeSettingsDet](	[HeaderSettingDetPK] [bigint] IDENTITY(1,1) NOT NULL,	[HeaderFK] [bigint] NULL,	[HeaderSettingFK] [bigint] NULL) ON [PRIMARY]";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //14
            string rcptchlsetting = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_RcptChlPrintSettings'");
            if (rcptchlsetting == "0")
            {
                INsQ = " CREATE TABLE FM_RcptChlPrintSettings(IsCollegeName Bit,IsCollegeAdd1 Bit,IsCollegeAdd2 Bit,IsCollegeAdd3 Bit,IsCollegeDist Bit,IsCollegeState Bit,IsCollegeUniversity Bit,IsRightLogo Bit,IsLeftLogo Bit,IsRollNo Bit,IsRegNo Bit,IsAdminNo Bit,IsStudName Bit,IsDegreeName Bit,IsDegreeAcr Bit,IsFatherName Bit,IsMontherName Bit,IsBoarding Bit,IsValidUpto Bit,IsAllotedAmt Bit,IsBalanceAmt Bit,IsFineAmt Bit,IsSemYear Bit,IsPrevPaid Bit,IsExcessAmt Bit,IsFineinRow Bit,IsConcession Bit,ConcessionName nvarchar(100),IsStudCopy Bit,IsOfficeCopy Bit,IsTransportCopy BIt,IsNarration Bit,IsTotConcession Bit,IsForCollegeName Bit,IsAuthSign Bit,AuthName nvarchar(100),PageType Bit,SignImage Image)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //15
            string banksetting = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_ChlBankPrintSettings'");
            if (banksetting == "0")
            {
                INsQ = " CREATE TABLE FM_ChlBankPrintSettings(PageCode int,DegreeCode nvarchar(300),FeeCategory Bigint,Semester nvarchar(30), ChlGroupHeader nvarchar(100),Field nvarchar(20),TextValue nvarchar(20),SettingType tinyint,IsTotalwise Bit,CollegeCode int)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //16
            //FM_ConcessionMaster table
            string ConsMaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_ConcessionMaster'");
            if (ConsMaster == "0")
            {
                string InsQ = " CREATE TABLE FM_ConcessionMaster(Stream int,EduLevel nvarchar(10),FeeCategory int,HeaderFK Bigint FOREIGN KEY References FM_HeaderMaster(HeaderPK),LedgerFK Bigint FOREIGN KEY References FM_LedgerMaster(LedgerPK),ConsDesc numeric,ConsPer Decimal(12,2),ConsAmt Decimal(12,2))";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //17
            string concessrefund = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_ConcessionRefundSettings'");
            if (concessrefund == "0")
            {
                INsQ = " CREATE TABLE FM_ConcessionRefundSettings(Stream nvarchar(20),Edu_Level nvarchar(20),Fee_Category bigint,HeaderFK bigint, LedgerFK bigint,ConsDesc bigint,ConsPer decimal(12, 2),ConsAmt decimal(12, 2),ConsType tinyint,RefMode tinyint,IsHeaderPer bit,LedPriority int)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //18
            //fine master table
            string fineMaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_FineMaster'");
            if (fineMaster == "0")
            {
                string InsQ = "CREATE TABLE [dbo].[FM_FineMaster]([FineMasterPK] [bigint] IDENTITY(1,1) NOT NULL, 	[FineType] [tinyint] NULL,	[FromDay] [int] NULL,	[ToDay] [int] NULL,	[FineAmount] [decimal](12, 2) NULL,	[DueDate] [datetime] NULL,	[HeaderFK] [bigint] NULL,	[LedgerFK] [bigint] NULL,[FeeCatgory] [bigint] NULL,	[DegreeCode] [bigint] NULL,	[CollegeCode] [int] NULL,PRIMARY KEY CLUSTERED (	[FineMasterPK] ASC)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]) ON [PRIMARY]";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //19
            string fee_allotdeg = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_FeeAllotDegree'");
            if (fee_allotdeg == "0")
            {
                INsQ = " CREATE TABLE FT_FeeAllotDegree(AllotDate Datetime,BatchYear int,DegreeCode int,SeatType int,LedgerFK Bigint FOREIGN KEY References FM_LedgerMaster(LedgerPK),HeaderFK Bigint FOREIGN KEY References FM_HeaderMaster(HeaderPK),PayMode tinyint,FeeAmount Decimal(12,2), DeductAmount Decimal(12,2),DeductReason int,TotalAmount Decimal(12,2),RefundAmount Decimal(12,2),IsFeeDeposit Bit,FeeAmountMonthly nvarchar(200),FeeCategory int,PayStartDate Datetime,DueDate Datetime,DueAmount Decimal(12,2),FineAmount Decimal(12,2),DueExtDate1 Datetime,DueExtAmount1 Decimal(12,2),FineAmount1 Decimal(12,2),DueExtDate2 Datetime,DueExtAmount2 Decimal(12,2),FineAmount2 Decimal(12,2),DueExtDate3 Datetime,DueExtAmount3 Decimal(12,2),FineAmount3 Decimal(12,2),DueExtDate4 Datetime,DueExtAmount4 Decimal(12,2),FineAmount4 Decimal(12,2),FinYearFK int FOREIGN KEY References FM_FinYearMaster(FinYearPK))";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //20
            string feellot = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_FeeAllot'");
            if (feellot == "0")
            {
                string fee = " CREATE TABLE FT_FeeAllot(AllotDate Datetime,MemType tinyint Not Null,App_No numeric Not Null,LedgerFK Bigint FOREIGN KEY References FM_LedgerMaster(LedgerPK) Not Null,HeaderFK Bigint FOREIGN KEY References FM_HeaderMaster(HeaderPK) Not Null,PayMode tinyint Not NUll,FeeAmount Decimal(12,2) Not Null,DeductAmount Decimal(12,2) Default 0,DeductReason int default -1,FromGovtAmt Decimal(12,2) default -1,TotalAmount Decimal(12,2) Not Null,RefundAmount Decimal(12,2) default 0,IsFeeDeposit Bit default 0,FeeAmountMonthly nvarchar(200),FeeCategory int Not Null,PayStartDate Datetime,PaidStatus tinyint default 0,DueDate Datetime,DueAmount Decimal(12,2) default 0,FineAmount Decimal(12,2) default 0,DueExtDate1 Datetime,DueExtAmount1 Decimal(12,2),FineAmount1 Decimal(12,2),DueExtDate2 Datetime,DueExtAmount2 Decimal(12,2),FineAmount2 Decimal(12,2),DueExtDate3 Datetime,DueExtAmount3 Decimal(12,2),FineAmount3 Decimal(12,2),DueExtDate4 Datetime,DueExtAmount4 Decimal(12,2),FineAmount4 Decimal(12,2),IsRefund Bit default 0,RefundRetAmount Decimal(12,2) default 0,RefundAdjAmount Decimal(12,2) default 0,ChlTakAmt Decimal(12,2) default 0,PaidAmount Decimal(12,2) default 0,BalAmount  Decimal(12,2) not null,FinYearFK int FOREIGN KEY References FM_FinYearMaster(FinYearPK) not null,DeductAmout Decimal(12,2),ChlTaken Decimal(12,2))";
                UpdQ = d2.update_method_wo_parameter(fee, "Text");
            }
            string getaltr = string.Empty;
            string rcptprint = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_feeallot' AND COLUMN_NAME = 'allotid'");
            if (rcptprint != "0")
            {
                getaltr = " alter table ft_feeallot drop column allotid";
                int financs = d2.update_method_wo_parameter(getaltr, "Text");
            }
            getaltr = string.Empty;
            rcptprint = string.Empty;
            rcptprint = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FeeAllot' AND COLUMN_NAME = 'FeeAllotPK'");
            if (rcptprint == "0")
            {
                getaltr = " alter table FT_FeeAllot add FeeAllotPK bigint identity(1,1) primary key";
                int financs = d2.update_method_wo_parameter(getaltr, "Text");
            }
            //21
            string feemonth = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_FeeallotMonthly'");
            if (feemonth == "0")
            {
                INsQ = " CREATE TABLE FT_FeeallotMonthly (FeeAllotPK BigInt Foreign Key References FT_FeeAllot(FeeAllotPK),AllotMonth int,AllotYear int, AllotAmount Decimal(12,2),PaidAmount Decimal(12,2),BalAmount Decimal(12,2),FinYearFK BigInt)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //22       
            string scholar = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_FinScholarship '");
            if (scholar == "0")
            {
                string InsQ = "create table FT_FinScholarship (App_no bigint,LedgerFK bigint,HeaderFk bigint,ReasonCode bigint,Feecategory bigint,AlloteDate Datetime,TotalAmount decimal(12,2),AdjusAmount decimal(12,2),FinyearFK bigint,CollegeCode int)";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //23
            //scholarshipadjust
            string Schladj = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_FinScholarshipAdjusDet'");
            if (Schladj == "0")
            {
                string InsQ = "create table FT_FinScholarshipAdjusDet(App_no bigint,Transcode varchar(100),AdjusDate  Datetime,LedgerFK bigint,HeaderFk bigint,ReasonCode bigint,Feecategory bigint,AdjusAmount  decimal(12,2),FinyearFK bigint,IsCancelled bit,TypeofAdjust bit,CollegeCode int)";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //24
            string ExcessDet = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_ExcessDet'");
            if (ExcessDet == "0")
            {
                INsQ = " CREATE TABLE FT_ExcessDet(ExcessDetPK Bigint identity(1,1) CONSTRAINT PRExcessDet PRIMARY KEY,ExcessTransDate Datetime,TransTime nvarchar(30),DailyTransCode nvarchar(15),App_No BigInt,MemType tinyint,ExcessType tinyint,ExcessAmt Decimal(12,2),AdjAmt Decimal(12,2),BalanceAmt Decimal(12,2),Remarks nvarchar(300),FinYearFK int FOREIGN KEY References FM_FinYearMaster(FinYearPK))";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //25
            string exledgerdate = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_ExcessLedgerDet'");
            if (exledgerdate == "0")
            {
                INsQ = " CREATE TABLE FT_ExcessLedgerDet(HeaderFK BigInt,LedgerFK BigInt,ExcessAmt Decimal(12,2),AdjAmt Decimal(12,2),BalanceAmt Decimal(12,2),ExcessDetFK Bigint FOREIGN KEY References FT_ExcessDet(ExcessDetPK))";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //26
            string challandate = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_ChallanDet'");
            if (challandate == "0")
            {
                INsQ = " CREATE TABLE FT_ChallanDet(ChallanNo nvarchar(15) Not Null,ChallanDate Datetime Not Null,App_No numeric Not Null,HeaderFK Bigint FOREIGN KEY References FM_HeaderMaster(HeaderPK) Not Null,LedgerFK Bigint FOREIGN KEY References FM_LedgerMaster(LedgerPK) Not Null,FeeAmount Decimal(12,2) Not Null,IsInstallment Bit Default 0,InstallmentNo int Default 0,TakenAmt Decimal(12,2) Not Null,FeeCategory int Not Null,IsArrearChallan Bit Default 0,ChallanType tinyint,isDataImport Bit Default 0,DataImpotNo nvarchar(30) Default 0,DataImportDate Datetime,IsConfirmed Bit Default 0,PayMode tinyint Default 0,PayRefNo nvarchar(100),RcptTransCode nvarchar(15),RcptTransDate Datetime,BankFk Bigint,FinYearFK int FOREIGN KEY References FM_FinYearMaster(FinYearPK) Not Null,ArrFinYearFK int Default -1)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //27
            string findaily = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_FinDailyTransaction'");
            if (findaily == "0")
            {
                INsQ = " CREATE TABLE FT_FinDailyTransaction(DailyTransPK int identity(1,1) CONSTRAINT PRDailyTrans PRIMARY KEY,TransDate Datetime,TransTime nvarchar(30),TransCode nvarchar(15),MemType tinyint,App_No numeric,MemName nvarchar(100),LedgerFK Bigint FOREIGN KEY References FM_ledgerMaster(LedgerPK),HeaderFK Bigint FOREIGN KEY References FM_HeaderMaster(HeaderPK),FeeCategory int,Credit Decimal(12,2),Debit Decimal(12,2),PayMode tinyint,DDNo nvarchar(15),DDDate Datetime,DDBankCode int,DDBankBranch nvarchar(100),TransType tinyint,TransLedCode int,MonthlyFeeMonth int,MonthlyFeeYear int,IsInstallmentPay Bit,InstallmentNo int,Narration nvarchar(500),PayAt Bit,PayThrough Bit,IsExcessAdj Bit,ExcessAdjAmt Decimal(12,2),IsDeposited Bit,IsDepositedFully Bit,DepositedAmt Decimal(12,2),DepositedDate Datetime,IsCollected Bit,CollectedDate Datetime,IsBounced Bit,BountCount int,BouncedDate Datetime,IsArrearCollect Bit,ArearFinYearFK int,IsCanceled Bit,CancelledDate Datetime,DepositBankCode int,isDataImport Bit,DataImpotNo nvarchar(30),DataImportDate Datetime,EntryUserCode int,CancelUserCode int,FinYearFK int FOREIGN KEY References FM_FinYearMaster(FinYearPK))";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //28
            string findaildtmnth = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_FinDailyTransactionDetailMonthWise'");
            if (findaildtmnth == "0")
            {
                INsQ = " Create table FT_FinDailyTransactionDetailMonthWise (DailyTransFK bigint,MonthValue int,YearValue int,Debit decimal (12,2),isCancel bit)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //29
            //FT_FinDailyTransactionDetails table
            string DailyTrnsDt = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_FinDailyTransactionDetails'");
            if (DailyTrnsDt == "0")
            {
                string InsQ = " CREATE TABLE [dbo].[FT_FinDailyTransactionDetails](	[MemType] [tinyint] NULL,	[VendorFK] [bigint] NULL,	[OrderCode] [nvarchar](20) NULL,	[Credit] [decimal](12, 2) NULL,	[Debit] [decimal](12, 2) NULL,	[FinYearFK] [bigint] NULL,	[CollegeCode] [int] NULL) ON [PRIMARY]";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //30
            string finbanktrans = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_FinBankTransaction'");
            if (finbanktrans == "0")
            {
                INsQ = " CREATE TABLE FT_FinBankTransaction(BankTransPK Bigint identity(1,1),TransDate Datetime,TransTime nvarchar(30),BankFK int,PayMode tinyint,DailyTransID int,IsDeposited Bit,IsCleared Bit,IsBounced Bit,Credit Decimal(12,2),Debit Decimal(12,2),Narration nvarchar(500),FinYearFK int FOREIGN KEY References FM_FinYearMaster(FinYearPK))";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //31
            string fincashcontr = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_FinCashContraDet'");
            if (fincashcontr == "0")
            {
                INsQ = " CREATE TABLE FT_FinCashContraDet(FinCashContraDetPK Bigint identity(1,1),TransDate Datetime,TransTime nvarchar(30),Credit Decimal(12,2),Debit Decimal(12,2),IsHand Bit,IsPetty Bit,IsBank Bit,Narration nvarchar(500),FinYearFK int FOREIGN KEY References FM_FinYearMaster(FinYearPK),HeaderFK BigInt,LedgerFK BigInt,BankFK BigInt)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //32
            string chashtrans = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_FinCashTransaction'");
            if (chashtrans == "0")
            {
                INsQ = " CREATE TABLE FT_FinCashTransaction(FinCashTransactionPK BigInt identity(1,1),TransDate Datetime,TransTime nvarchar(30),Credit Decimal(12,2),Debit Decimal(12,2),ToPetty Bit,ToBank Bit,Narration nvarchar(500),FinYearFK int FOREIGN KEY References FM_FinYearMaster(FinYearPK))";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //33
            //[FT_FinContraWithDrawDet table
            string ContWithDt = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_FinContraWithDrawDet'");
            if (ContWithDt == "0")
            {
                string InsQ = " CREATE TABLE [dbo].[FT_FinContraWithDrawDet](	[TransDate] [datetime] NULL,	[TransTime] [nvarchar](20) NULL,	[Credit] [decimal](12, 2) NULL,	[Debit] [decimal](12, 2) NULL,	[StaffApplNo] [bigint] NULL,	[ChequeNo] [nvarchar](20) NULL,	[ChequeDate] [datetime] NULL,	[Remarks] [nvarchar](200) NULL,	[BankFK] [bigint] NULL,	[HeaderfK] [bigint] NULL,	[LedgerFK] [bigint] NULL,	[FinCashContraDetFK] [bigint] NULL) ON [PRIMARY]";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //34
            string installpay = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_FinInstallmentPay'");
            if (installpay == "0")
            {
                INsQ = " CREATE TABLE FT_FinInstallmentPay(MemType tinyint,App_No BigInt,InstallmentDate Datetime,InstallmentAmt Decimal(12,2),InstallmentStatus Bit)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //35
            string feeduext = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FeesDueExt'");
            if (feeduext == "0")
            {
                INsQ = " CREATE TABLE FeesDueExt(App_No numeric,HeaderFK BigInt,LedgerFK BigInt,DueAmount Decimal(12,2),DueDate Datetime,ExtDueAmount Decimal(12,2),ExtDueDate Datetime,ExtReason BigInt,FinYearFK BigInt)";
                UpdQ = d2.update_method_wo_parameter(INsQ, "Text");
            }
            //36
            //FinBudget table
            string finBud = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FinBudget'");
            if (finBud == "0")
            {
                string InsQ = " create table FinBudget(FinBudget numeric identity(1,1),FinBudgetType tinyint,FromDate datetime,ToDate datetime)";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //alter query
            string AltQCol = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FinBudget' AND COLUMN_NAME = 'CollegeCode '");
            if (AltQCol == "0")
            {
                string AltQ = " alter table FinBudget add CollegeCode int ";
                int upd = d2.update_method_wo_parameter(AltQ, "Text");
            }
            //37
            //FinBudgetDet table
            string finBudDt = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FinBudgetDet'");
            if (finBudDt == "0")
            {
                string InsQ = "Create table FinBudgetDet(FinBudget numeric,Dept_Code numeric,Item_Code nvarchar(30),Header_Id numeric,Fee_Code numeric,BudgetQty decimal(12,2),BudgetAmt decimal(12,2),Purpose numeric,Allow_Aditional bit)";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //38
            //denomination table
            string Dnom = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='denomination'");
            if (Dnom == "0")
            {
                string InsQ = "CREATE TABLE [dbo].[denomination](	[roll_admit] [nvarchar](100) NULL,	[cal_date] [datetime] NULL,	[rcpt_no] [nvarchar](100) NULL,	[user_code] [numeric](18, 0) NULL,	[studorothers] [numeric](18, 0) NULL,	[n1000] [numeric](18, 0) NULL,	[n500] [numeric](18, 0) NULL,	[n100] [numeric](18, 0) NULL,	[n50] [numeric](18, 0) NULL,	[n20] [numeric](18, 0) NULL,	[n10] [numeric](18, 0) NULL,	[n5] [numeric](18, 0) NULL,	[n2] [numeric](18, 0) NULL,	[n1] [numeric](18, 0) NULL,	[c5] [numeric](18, 0) NULL,	[c2] [numeric](18, 0) NULL,	[c1] [numeric](18, 0) NULL,	[c50ps] [numeric](18, 0) NULL,	[Total] [money] NULL,	[Return_amt] [numeric](12, 2) NULL) ON [PRIMARY]";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            Dnom = string.Empty;
            Dnom = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_PaymentRequest'");
            if (Dnom == "0")
            {
                string InsQ = "create table FT_PaymentRequest(MemType tinyint,App_no numeric,ReqApp_No numeric,IncludeExcess bigint,IncludeRefund bigint,Narration varchar(100),VoucherNo nvarchar(20),RequestDate datetime)";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            string stitemiss = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Indivitual_student_ItemIssue'");
            if (stitemiss == "0")
            {
                string InsQ = " Create Table Indivitual_student_ItemIssue (ItemIssuePK bigint identity(1,1),AllotDate datetime,MemType tinyint,App_no bigint,LedgerFK bigint,ItemFK bigint,DeptFK bigint,Quantity int,Rpu float,Issues bit,IssueDate datetime,IssuedBy bigint)";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            string FT_FinDeduction = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_FinDeduction'");
            if (FT_FinDeduction == "0")
            {
                string InsQ = " CREATE TABLE FT_FinDeduction (App_no bigint,LedgerFK bigint,HeaderFk bigint,ReasonCode bigint,Feecategory    bigint,	AlloteDate datetime,AllotAmount decimal(12, 2),	FinyearFK bigint,CollegeCode int)";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            string OnlineFeeTransactionMaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='OnlineFeeTransactionMaster'");
            if (OnlineFeeTransactionMaster == "0")
            {
                string InsQ = " create table OnlineFeeTransactionMaster (TransPk Bigint identity(1,1) primary key,TransKey nvarchar(100) not null,appNo BigInt  not null,collegeCode int not null,TransDate DateTime not null)";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            string OnlineFeeTransaction = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='OnlineFeeTransaction'");
            if (OnlineFeeTransaction == "0")
            {
                string InsQ = " create table OnlineFeeTransaction (TransId Bigint identity(1,1) primary key,TransFK Bigint not null foreign key references OnlineFeeTransactionMaster(TransPk) ,feeCat BigInt not null, HeaderFk int not null, ledgerFk int not null, PayAmount decimal(12,2) not null,PaidStatus bit not null default('0') )";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            finAltQuery();

            string ft_excessReceiptdet = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ft_excessReceiptdet'");
            if (ft_excessReceiptdet == "0")
            {
                string InsQ = " create table ft_excessReceiptdet (app_no bigint, amount float, receiptno nvarchar(200),rcptdate DateTime)";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //added by sudhagar 05.06.2017
            string stTrans = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ST_Student_Transfer_Details'");
            if (stTrans == "0")
            {
                string InsQ = "create table ST_Student_Transfer_Details (StudentTransferDetPK bigint identity(1,1) not null primary key,StudentTransferFK bigint Foreign key references ST_Student_Transfer(StudentTransferPK),Old_RollNo nvarchar(35),Old_RegNo nvarchar(35),Old_RollAdmit nvarchar(35),stud_admDate datetime,Old_ReceiptNo nvarchar(150),Old_ReceiptDate varchar(100),Old_Amt decimal, New_ReceiptNo nvarchar(150),New_ReceiptDate varchar(100),New_Amt decimal,New_ExcessAmt decimal)";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            finLatestAltQ();
            string qry = "if exists (select * from IPatchStatus where ModuleName='Finance') update IPatchStatus set ClientUpdatedDate='" + DateTime.Now.ToString("yyyy/MM/dd") + "' where ModuleName='Finance' ";
            int res = d2.update_method_wo_parameter(qry, "Text");
            if (res != 0)
            {
                bindgrid();
                lbler.Visible = false;
                alertmessage.Visible = true;
                lbl_alerterror.Text = " Updated Successfully";
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
            lbler.Text = ex.ToString();
            lbler.Visible = true;
        }
    }
    protected void financeStoreProcedure()
    {
        try
        {
            string finrcpt = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'USP_RECEIPT_SAVE'");
            if (finrcpt == "0")
            {
                finrcpt = "Create PROC USP_RECEIPT_SAVE @CollegeOrSchool INT=0,@Transdate varchar(10)=null,@Transtime varchar(10)=null,@Transcode varchar(20)=null,@Memtype varchar(10)=null,@App_no varchar(10)=null,@Ledgerfk varchar(10)=null,@Headerfk varchar(10)=null,@Feecategory varchar(10)=null,@Credit varchar(10)=null,@Debit varchar(10)=null,@Paymode varchar(10)=null,@Ddno varchar(MAX)=null,@Dddate varchar(10)=null,@DdBankCode varchar(MAX)=null,@DDBankBranch varchar(MAX)=null,@TransType varchar(10)=null,@IsInstallmentPay varchar(10)=null,@InstallmentNo varchar(10)=null,@Narration varchar(MAX)=null,@PayAt varchar(10)=null,@PayThrough varchar(10)=null,@IsArrearCollect varchar(10)=null,@ArearFinYearFK varchar(10)=null,@EntryUserCode varchar(10)=null,@FinYearFK varchar(10)=null,@Receipttype varchar(10)=null,@IsCollected varchar(10)=null,@CollectedDate varchar(10)=null,@IsDeposited varchar(10)=null,@DepositedDate varchar(10)=null,@FineFeecategory varchar(10)=null,@ActualFinYearFK varchar(10)=null,@UpdateAmt int =0,@ScholarAmt int =0,@AlotBalAmt int=0,@isHeaderwise varchar(10)=null,@lastRecptNo varchar(15)=null,@collegecode varchar(10)=null,@hdrSetPK varchar(10)=null,@queryAction int=1,@ReceiptUpdateStatus int=0 AS DECLARE @RETURNVALUE INT=0 DECLARE @dailyTransCnt int=0 DECLARE @receiptUpdateCnt int=0 DECLARE @UpdateCnt INT=0 BEGIN	RETRY:	BEGIN TRANSACTION BEGIN	TRY IF (@queryAction=1) BEGIN  INSERT INTO FT_FinDailyTransaction(TransDate,TransTime,TransCode,MemType,App_No,LedgerFK,HeaderFK,FeeCategory,Credit,Debit,PayMode,DDNo,DDDate,DDBankCode,DDBankBranch,TransType,IsInstallmentPay,InstallmentNo,Narration,PayAt,PayThrough,IsArrearCollect,ArearFinYearFK,EntryUserCode,FinYearFK,Receipttype,IsCollected,CollectedDate,IsDeposited,DepositedDate,FineFeecategory,ActualFinYearFK) VALUES(@Transdate,@Transtime,@Transcode,@Memtype,@App_no,@Ledgerfk,@Headerfk,@Feecategory,@Credit,@Debit,@Paymode,@Ddno,@Dddate,@DdBankCode,@DDBankBranch,@TransType,@IsInstallmentPay,@InstallmentNo,@Narration,@PayAt,@PayThrough,@IsArrearCollect,@ArearFinYearFK,@EntryUserCode,@FinYearFK,@Receipttype,@IsCollected,@CollectedDate,@IsDeposited,@DepositedDate,@FineFeecategory,@ActualFinYearFK) IF @@ROWCOUNT>0 SET	@dailyTransCnt=1 IF ((@dailyTransCnt=1) AND (@ReceiptUpdateStatus=1)) BEGIN IF ((@isHeaderwise=0) OR (@isHeaderwise=2)) BEGIN update FM_FinCodeSettings set RcptStNo=@lastRecptNo+1 where collegecode =@collegecode and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=@FinYearFK and CollegeCode=@collegecode) END ELSE BEGIN update FM_HeaderFinCodeSettings set RcptStNo=@lastRecptNo+1 where HeaderSettingPK=@hdrSetPK and FinyearFK=@FinYearFK and CollegeCode=@collegecode END IF @@ROWCOUNT>0 SET @receiptUpdateCnt=1 END END IF (@queryAction=2) BEGIN IF (@CollegeOrSchool=0) BEGIN select  isnull(TotalAmount,0) as TotalAmount,isnull(PaidAmount,0) as PaidAmount,isnull(BalAmount,0) as BalAmount  from FT_FeeAllot where App_No =@App_no and feecategory =@Feecategory and ledgerfk =@Ledgerfk AND FinYearFK=@ActualFinYearFK and MemType=@Memtype AND ISTRANSFER=0 END ELSE BEGIN select  isnull(TotalAmount,0) as TotalAmount,isnull(PaidAmount,0) as PaidAmount,isnull(BalAmount,0) as BalAmount  from FT_FeeAllot where App_No =@App_no and feecategory =@Feecategory and ledgerfk =@Ledgerfk and MemType=@Memtype AND ISTRANSFER=0 END END IF(@queryAction=3) BEGIN IF (@CollegeOrSchool=0) BEGIN update FT_FeeAllot set PaidAmount=isnull(PaidAmount,0) +@UpdateAmt,BalAmount =@AlotBalAmt,FromGovtAmt=isnull(FromGovtAmt,0)-@ScholarAmt  where App_No =@App_no and feecategory =@Feecategory and ledgerfk =@Ledgerfk and finyearfk=@ActualFinYearFK AND ISTRANSFER=0  IF @@ROWCOUNT>0 SET @UpdateCnt=1 END ELSE BEGIN update FT_FeeAllot set PaidAmount=isnull(PaidAmount,0) +@UpdateAmt,BalAmount =@AlotBalAmt,FromGovtAmt=isnull(FromGovtAmt,0)-@ScholarAmt  where App_No =@App_no and feecategory =@Feecategory and ledgerfk =@Ledgerfk and finyearfk=@FinYearFK AND ISTRANSFER=0  IF @@ROWCOUNT>0 SET @UpdateCnt=1 END END COMMIT TRANSACTION END TRY BEGIN CATCH   print 'error occured'   ROLLBACK TRANSACTION   if (ERROR_NUMBER() = 1205 OR ERROR_NUMBER() = 1222) BEGIN  WAITFOR DELAY '00:00:00.05' GOTO RETRY end END CATCH END ";
                int res = d2.update_method_wo_parameter(finrcpt, "Text");
            }
            else
            {
                finrcpt = "alter PROC USP_RECEIPT_SAVE @CollegeOrSchool INT=0,@Transdate varchar(10)=null,@Transtime varchar(10)=null,@Transcode varchar(20)=null,@Memtype varchar(10)=null,@App_no varchar(10)=null,@Ledgerfk varchar(10)=null,@Headerfk varchar(10)=null,@Feecategory varchar(10)=null,@Credit decimal,@Debit decimal,@Paymode varchar(10)=null,@Ddno varchar(MAX)=null,@Dddate varchar(10)=null,@DdBankCode varchar(MAX)=null,@DDBankBranch varchar(MAX)=null,@TransType varchar(10)=null,@IsInstallmentPay varchar(10)=null,@InstallmentNo varchar(10)=null,@Narration varchar(MAX)=null,@PayAt varchar(10)=null,@PayThrough varchar(10)=null,@IsArrearCollect varchar(10)=null,@ArearFinYearFK varchar(10)=null,@EntryUserCode varchar(10)=null,@FinYearFK varchar(10)=null,@Receipttype varchar(10)=null,@IsCollected varchar(10)=null,@CollectedDate varchar(10)=null,@IsDeposited varchar(10)=null,@DepositedDate varchar(10)=null,@FineFeecategory varchar(10)=null,@ActualFinYearFK varchar(10)=null,@UpdateAmt int =0,@ScholarAmt int =0,@AlotBalAmt int=0,@isHeaderwise varchar(10)=null,@lastRecptNo varchar(15)=null,@collegecode varchar(10)=null,@hdrSetPK varchar(10)=null,@queryAction int=1,@ReceiptUpdateStatus int=0 AS DECLARE @RETURNVALUE INT; DECLARE @dailyTransCnt int; DECLARE @receiptUpdateCnt int; DECLARE @UpdateCnt INT; BEGIN	RETRY:	BEGIN TRANSACTION BEGIN	TRY IF (@queryAction=1) BEGIN  INSERT INTO FT_FinDailyTransaction(TransDate,TransTime,TransCode,MemType,App_No,LedgerFK,HeaderFK,FeeCategory,Credit,Debit,PayMode,DDNo,DDDate,DDBankCode,DDBankBranch,TransType,IsInstallmentPay,InstallmentNo,Narration,PayAt,PayThrough,IsArrearCollect,ArearFinYearFK,EntryUserCode,FinYearFK,Receipttype,IsCollected,CollectedDate,IsDeposited,DepositedDate,FineFeecategory,ActualFinYearFK) VALUES(@Transdate,@Transtime,@Transcode,@Memtype,@App_no,@Ledgerfk,@Headerfk,@Feecategory,@Credit,@Debit,@Paymode,@Ddno,@Dddate,@DdBankCode,@DDBankBranch,@TransType,@IsInstallmentPay,@InstallmentNo,@Narration,@PayAt,@PayThrough,@IsArrearCollect,@ArearFinYearFK,@EntryUserCode,@FinYearFK,@Receipttype,@IsCollected,@CollectedDate,@IsDeposited,@DepositedDate,@FineFeecategory,@ActualFinYearFK) IF @@ROWCOUNT>0 SET	@dailyTransCnt=1 IF ((@dailyTransCnt=1) AND (@ReceiptUpdateStatus=1)) BEGIN IF ((@isHeaderwise=0) OR (@isHeaderwise=2)) BEGIN update FM_FinCodeSettings set RcptStNo=@lastRecptNo+1 where collegecode =@collegecode and FromDate = (select MAX(FromDate) from FM_FinCodeSettings where IsHeader=0 and FinYearFK=@FinYearFK and CollegeCode=@collegecode) END ELSE BEGIN update FM_HeaderFinCodeSettings set RcptStNo=@lastRecptNo+1 where HeaderSettingPK=@hdrSetPK and FinyearFK=@FinYearFK and CollegeCode=@collegecode END IF @@ROWCOUNT>0 SET @receiptUpdateCnt=1 END END IF (@queryAction=2) BEGIN IF (@CollegeOrSchool=0) BEGIN select  isnull(TotalAmount,0) as TotalAmount,isnull(PaidAmount,0) as PaidAmount,isnull(BalAmount,0) as BalAmount  from FT_FeeAllot where App_No =@App_no and feecategory =@Feecategory and ledgerfk =@Ledgerfk AND FinYearFK=@ActualFinYearFK and MemType=@Memtype AND ISTRANSFER=0 END ELSE BEGIN select  isnull(TotalAmount,0) as TotalAmount,isnull(PaidAmount,0) as PaidAmount,isnull(BalAmount,0) as BalAmount  from FT_FeeAllot where App_No =@App_no and feecategory =@Feecategory and ledgerfk =@Ledgerfk and MemType=@Memtype AND ISTRANSFER=0 END END IF(@queryAction=3) BEGIN IF (@CollegeOrSchool=0) BEGIN update FT_FeeAllot set PaidAmount=isnull(PaidAmount,0) +@UpdateAmt,BalAmount =@AlotBalAmt,FromGovtAmt=isnull(FromGovtAmt,0)-@ScholarAmt  where App_No =@App_no and feecategory =@Feecategory and ledgerfk =@Ledgerfk and finyearfk=@ActualFinYearFK AND ISTRANSFER=0  IF @@ROWCOUNT>0 SET @UpdateCnt=1 END ELSE BEGIN update FT_FeeAllot set PaidAmount=isnull(PaidAmount,0) +@UpdateAmt,BalAmount =@AlotBalAmt,FromGovtAmt=isnull(FromGovtAmt,0)-@ScholarAmt  where App_No =@App_no and feecategory =@Feecategory and ledgerfk =@Ledgerfk AND ISTRANSFER=0   IF @@ROWCOUNT>0 SET @UpdateCnt=1 END END COMMIT TRANSACTION END TRY BEGIN CATCH   print 'error occured'   ROLLBACK TRANSACTION   if (ERROR_NUMBER() = 1205 OR ERROR_NUMBER() = 1222) BEGIN  WAITFOR DELAY '00:00:00.05' GOTO RETRY end END CATCH END ";//and finyearfk=@FinYearFK
                int res = d2.update_method_wo_parameter(finrcpt, "Text");
            }

        }
        catch { }
    }
    protected void finAltQuery()
    {
        try
        {
            string AltQ = string.Empty;
            int Upd = 0;
            string DailyTransID = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FinBankTransaction' AND COLUMN_NAME = 'DailyTransID'");
            if (DailyTransID == "0")
                AltQ = AltQ + " alter table FT_FinBankTransaction alter column DailyTransID nvarchar(200)";
            string itemms = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Cleaning_ItemMaseter'");
            if (itemms != "0")
            {
                string Sh_Day = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Cleaning_ItemMaseter' AND COLUMN_NAME = 'Schedule_Day'");
                if (Sh_Day == "0")
                {
                    AltQ = AltQ + " alter table Cleaning_ItemMaseter add Schedule_Day varchar(50),Schedule_Date datetime,Schedule_type tinyint";
                }
            }
            string IssuedQuantity = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Indivitual_student_ItemIssue' AND COLUMN_NAME = 'IssuedQuantity'");
            if (IssuedQuantity == "0")
                AltQ = AltQ + " alter table Indivitual_student_ItemIssue add IssuedQuantity decimal(12,2) ";
            string feecategory = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Indivitual_student_ItemIssue' AND COLUMN_NAME = 'feecategory'");
            if (feecategory == "0")
                AltQ = AltQ + " alter table Indivitual_student_ItemIssue add feecategory bigint ";
            //jayaram sir Finance query updated by selvam
            string find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FM_RcptChlPrintSettings'");
            if (find_tablename != "0")
            {
                string Sh_Day = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_RcptChlPrintSettings' AND COLUMN_NAME = 'CollegeCode'");
                if (Sh_Day == "0")
                {
                    AltQ = AltQ + " alter table FM_RcptChlPrintSettings add CollegeCode int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_FeeAllotDegree'");
            if (find_tablename != "0")
            {
                string Sh_Day = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FeeAllotDegree' AND COLUMN_NAME = 'DeductAmout'");
                if (Sh_Day == "0")
                {
                    AltQ = AltQ + " alter table FT_FeeAllotDegree add DeductAmout decimal(12,2)";
                }
                string deductReason = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FeeAllotDegree' AND COLUMN_NAME = 'deductReason'");
                if (deductReason == "0")
                {
                    AltQ = AltQ + "  alter table FT_FeeAllotDegree add DeductReason nvarchar(max)";
                }
            }
            string rcptchlprint = string.Empty;
            rcptchlprint = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_RcptChlPrintSettings' AND COLUMN_NAME = 'IsSeatType'");
            if (rcptchlprint == "0")
                AltQ = AltQ + " alter table FM_RcptChlPrintSettings add IsSeatType bit";
            rcptchlprint = string.Empty;
            rcptchlprint = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_RcptChlPrintSettings' AND COLUMN_NAME = 'IsSemester'");
            if (rcptchlprint == "0")
                AltQ = AltQ + " alter table FM_RcptChlPrintSettings add IsSemester bit";
            rcptchlprint = string.Empty;
            rcptchlprint = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_RcptChlPrintSettings' AND COLUMN_NAME = 'IsYear'");
            if (rcptchlprint == "0")
                AltQ = AltQ + " alter table  FM_RcptChlPrintSettings add IsYear bit";
            rcptchlprint = string.Empty;
            rcptchlprint = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_RcptChlPrintSettings' AND COLUMN_NAME = 'ValidDate'");
            if (rcptchlprint == "0")
                AltQ = AltQ + " alter table FM_RcptChlPrintSettings add ValidDate nvarchar(30)";
            rcptchlprint = string.Empty;
            rcptchlprint = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_RcptChlPrintSettings' AND COLUMN_NAME = 'cashier_sign'");
            if (rcptchlprint == "0")
                AltQ = AltQ + " alter table FM_RcptChlPrintSettings add cashier_sign bit";
            rcptchlprint = string.Empty;
            rcptchlprint = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_RcptChlPrintSettings' AND COLUMN_NAME = 'IsTime'");
            if (rcptchlprint == "0")
                AltQ = AltQ + " alter table FM_RcptChlPrintSettings add IsTime bit";
            //10-05-2016-jayaram sir query-updated by selvam 
            rcptchlprint = string.Empty;
            rcptchlprint = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_BankChqDet' AND COLUMN_NAME = 'ChequeBookNo'");
            if (rcptchlprint == "0")
                AltQ = AltQ + " alter table FM_BankChqDet add ChequeBookNo nvarchar(100)";
            //idhrish
            rcptchlprint = string.Empty;
            rcptchlprint = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FeeAllot' AND COLUMN_NAME = 'FeeAllotPK'");
            if (rcptchlprint == "0")
                AltQ = AltQ + " Alter Table FT_FeeAllot Add FeeAllotPK BigInt IDENTITY(1,1)  Constraint AllotPK Primary Key ";
            rcptchlprint = string.Empty;
            rcptchlprint = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FinBankTransaction' AND COLUMN_NAME = 'DailyTransID'");
            if (rcptchlprint == "0")
                AltQ = AltQ + "  alter table FT_FinBankTransaction alter column DailyTransID nvarchar(50)";
            rcptchlprint = string.Empty;
            rcptchlprint = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'SchemeDate'");
            if (rcptchlprint == "0")
                AltQ = AltQ + "   alter table registration add SchemeDate datetime";
            //added by sudhagar 06.09.2017
            rcptchlprint = string.Empty;
            rcptchlprint = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_findailytransaction' AND COLUMN_NAME = 'paid_Istransfer'");
            if (rcptchlprint == "0")
                AltQ = AltQ + "   alter table ft_findailytransaction add paid_Istransfer tinyint not null default 0";
            if (AltQ != "")
            {
                Upd = d2.update_method_wo_parameter(AltQ, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
            lbler.Text = ex.ToString();
            lbler.Visible = true;
        }
    }

    protected void finLatestAltQ()
    {
        try
        {
            ///01-07-2016
            string AltQ = string.Empty;
            int Upd = 0;
            /////////
            string CancelReason = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_finDailyTransaction' AND COLUMN_NAME = 'canceledRcptRemarks'");
            if (CancelReason == "0")
                AltQ = "  Alter Table FT_FinDailyTransaction add canceledRcptRemarks varchar(500) ";
            ///
            string Dt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_FinBankMaster ' AND COLUMN_NAME = 'District'");
            if (Dt == "0")
                AltQ += " Alter Table FM_FinBankMaster Alter Column District nvarchar(100)";
            string St = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_FinBankMaster ' AND COLUMN_NAME = 'State'");
            if (St == "0")
                AltQ += " Alter Table FM_FinBankMaster Alter Column State nvarchar(100) ";
            string Cnty = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_FinBankMaster ' AND COLUMN_NAME = 'Country'");
            if (Cnty == "0")
                AltQ += " Alter Table FM_FinBankMaster Alter Column Country nvarchar(100)";
            /////////
            string IExp = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_finDailyTransaction' AND COLUMN_NAME = 'IsExported'");
            if (IExp == "0")
                AltQ += " Alter Table ft_finDailyTransaction add IsExported bit";
            /////////
            string ClgFt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FinBudget  ' AND COLUMN_NAME = 'CollegeCode'");
            if (ClgFt == "0")
                AltQ += " alter table FinBudget add CollegeCode int";
            ///
            string APPCnt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_PaymentRequest' AND COLUMN_NAME = 'ApproveStagecount '");
            if (APPCnt == "0")
            {
                AltQ += " alter table FT_PaymentRequest add ApproveStagecount int";
            }
            string APPStus = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_PaymentRequest' AND COLUMN_NAME = 'Approvestatus'");
            if (APPStus == "0")
            {
                AltQ += " alter table FT_PaymentRequest add Approvestatus tinyint";
            }
            string APPStfNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_PaymentRequest' AND COLUMN_NAME = 'ReqApproveStaffAppNo'");
            if (APPStfNo == "0")
            {
                AltQ += " alter table FT_PaymentRequest add ReqApproveStaffAppNo int";
            }
            string VContPK = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_PaymentRequest' AND COLUMN_NAME = 'VendorContactFK'");
            if (VContPK == "0")
            {
                AltQ += " alter table FT_PaymentRequest add VendorContactFK bigint";
            }
            string FeeCt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_ExcessDet' AND COLUMN_NAME = 'FeeCategory'");
            if (FeeCt == "0")
                AltQ += " Alter Table FT_ExcessDet Add FeeCategory BigInt";
            string ChlPSt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_ChlBankPrintSettings' AND COLUMN_NAME = 'ChlGroupHeader'");
            if (ChlPSt == "0")
                AltQ += " Alter Table FM_ChlBankPrintSettings Alter Column ChlGroupHeader nvarchar(1000)";
            string RcPtTy = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FinDailyTransaction' AND COLUMN_NAME = 'Receipttype'");
            if (RcPtTy == "0")
                AltQ += " Alter table FT_FinDailyTransaction add Receipttype tinyint";
            string PtyAmt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FinCashTransaction' AND COLUMN_NAME = 'ToPetty_Amount'");
            if (PtyAmt == "0")
                AltQ += " Alter Table FT_FinCashTransaction Add ToPetty_Amount Decimal(12,2)";
            string Bkamt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FinCashTransaction' AND COLUMN_NAME = 'ToBank_Amount'");
            if (Bkamt == "0")
                AltQ += " Alter Table FT_FinCashTransaction Add ToBank_Amount Decimal(12,2)";
            string DtAmt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FeesDueExt' AND COLUMN_NAME = 'DeductAmount'");
            if (DtAmt == "0")
                AltQ += " Alter Table FeesDueExt Add DeductAmount Decimal(12,2)";
            string UsCoe = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FeesDueExt' AND COLUMN_NAME = 'UserCode'");
            if (UsCoe == "0")
                AltQ += " Alter Table FeesDueExt Add UserCode BigInt";
            string FeeExCat = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FeesDueExt' AND COLUMN_NAME = 'FeeCategory'");
            if (FeeExCat == "0")
                AltQ += " Alter Table FeesDueExt Add FeeCategory BigInt";
            string ExCnt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FeesDueExt' AND COLUMN_NAME = 'Extention_count'");
            if (ExCnt == "0")
                AltQ += " alter table FeesDueExt add Extention_count tinyint";
            string BkFeecat = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_FineMaster' AND COLUMN_NAME = 'FeeCategory'");
            if (BkFeecat == "0")
                AltQ += " Alter Table FM_FineMaster Add FeeCategory BigInt";
            string CshPtyAmt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FinCashContraDet' AND COLUMN_NAME = 'ToPetty_Amount'");
            if (CshPtyAmt == "0")
                AltQ += " Alter Table FT_FinCashContraDet Add ToPetty_Amount Decimal(12,2)";
            string CshBkamT = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FinCashContraDet' AND COLUMN_NAME = 'ToBank_Amount'");
            if (CshBkamT == "0")
                AltQ += " Alter Table FT_FinCashContraDet Add ToBank_Amount Decimal(12,2)";
            string RPSon = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FinCashContraDet' AND COLUMN_NAME = 'ResponsePerson'");
            if (RPSon == "0")
                AltQ += " Alter Table FT_FinCashContraDet Add ResponsePerson BigInt";
            string CHlConf = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_ChallanDet' AND COLUMN_NAME = 'isconfirmed'");
            if (CHlConf == "0")
                AltQ += " Alter Table FT_ChallanDet alter column isconfirmed tinyint";
            string DnoMt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'denomination' AND COLUMN_NAME = 'Return_amt'");
            if (DnoMt == "0")
                AltQ += " Alter table denomination add Return_amt numeric(12,2)";
            string Chlst = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FS_ChlGroupHeaderSettings' AND COLUMN_NAME = 'CollegeCode'");
            if (Chlst == "0")
                AltQ += " alter table FS_ChlGroupHeaderSettings add CollegeCode int";
            string FinCset = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_FinCodeSettings' AND COLUMN_NAME = 'FinYearFK'");
            if (FinCset == "0")
                AltQ += " alter table FM_FinCodeSettings add FinYearFK int";
            string FeeDtAmt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FeeAllot' AND COLUMN_NAME = 'DeductAmout'");
            if (FeeDtAmt == "0")
                AltQ += " alter table FT_FeeAllot add DeductAmout decimal";
            string FeeChlTk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FeeAllot' AND COLUMN_NAME = 'ChlTaken'");
            if (FeeChlTk == "0")
                AltQ += " alter table FT_FeeAllot add ChlTaken decimal";
            string FeePK = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FeeAllot' AND COLUMN_NAME = 'FeeAllotPK'");
            if (FeePK == "0")
                AltQ += " alter table FT_FeeAllot add FeeAllotPK bigint";
            string Exledgfee = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_ExcessLedgerDet' AND COLUMN_NAME = 'FeeCategory'");
            if (Exledgfee == "0")
                AltQ += " alter table FT_ExcessLedgerDet add FeeCategory bigint";
            string Exledgfk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_ExcessLedgerDet' AND COLUMN_NAME = 'FinYearFK'");
            if (Exledgfk == "0")
                AltQ += " alter table FT_ExcessLedgerDet add FinYearFK bigint";
            string Instno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_ChallanDet' AND COLUMN_NAME = 'InstallmentNo'");
            if (Instno == "0")
                AltQ += " alter table FT_ChallanDet add InstallmentNo bigint";
            string chlpay = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_ChallanDet' AND COLUMN_NAME = 'PayMode'");
            if (chlpay == "0")
                AltQ += " alter table FT_ChallanDet add PayMode tinyint";
            string chlRefno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_ChallanDet' AND COLUMN_NAME = 'PayRefNo'");
            if (chlRefno == "0")
                AltQ += " alter table FT_ChallanDet add PayRefNo nvarchar(50)";
            string chlActlno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_ChallanDet' AND COLUMN_NAME = 'ActualAmount'");
            if (chlActlno == "0")
                AltQ += " alter table FT_ChallanDet add ActualAmount decimal";
            string Conhd = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FinCashContraDet' AND COLUMN_NAME = 'HeaderFK'");
            if (Conhd == "0")
                AltQ += " alter table FT_FinCashContraDet add HeaderFK bigint";
            string Conld = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FinCashContraDet' AND COLUMN_NAME = 'LedgerFK'");
            if (Conld == "0")
                AltQ += " alter table FT_FinCashContraDet add LedgerFK bigint";
            string ContBk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FinCashContraDet' AND COLUMN_NAME = 'BankFK'");
            if (ContBk == "0")
                AltQ += " alter table FT_FinCashContraDet add BankFK bigint";
            string Finstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FinInstallmentPay' AND COLUMN_NAME = 'InstallmentStatus'");
            if (Finstl == "0")
                AltQ += " alter table FT_FinInstallmentPay add InstallmentStatus bit";
            string ftlpay = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FinInstallmentPay' AND COLUMN_NAME = 'MemName'");
            if (ftlpay == "0")
                AltQ += " alter table FT_FinInstallmentPay add MemName varchar(50)";
            string Pytype = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_findailytransaction' AND COLUMN_NAME = 'PayType'");
            if (Pytype == "0")
                AltQ += " Alter table ft_findailytransaction add PayType tinyint";
            string Mulsc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_feeallot' AND COLUMN_NAME = 'mulScholar'");
            if (Mulsc == "0")
                AltQ += " Alter table ft_feeallot add mulScholar nvarchar(300)";
            string ft_feeallot = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_feeallot' AND COLUMN_NAME = 'deductReason'");
            if (ft_feeallot == "0")
                AltQ += " alter table ft_feeallot alter column deductReason nvarchar(max)";
            string VChr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_HeaderFinCodeSettings' AND COLUMN_NAME = 'VouchAcr'");
            if (VChr == "0")
                AltQ += " alter table FM_HeaderFinCodeSettings add VouchAcr nvarchar(20)";
            string VChrNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_HeaderFinCodeSettings' AND COLUMN_NAME = 'VouchStNo'");
            if (VChrNo == "0")
                AltQ += " alter table FM_HeaderFinCodeSettings add VouchStNo bigint";
            string VChrsize = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_HeaderFinCodeSettings' AND COLUMN_NAME = 'VouchSize'");
            if (VChrsize == "0")
                AltQ += " alter table FM_HeaderFinCodeSettings add VouchSize tinyint";
            string Chalnar = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_HeaderFinCodeSettings' AND COLUMN_NAME = 'ChallanAcr'");
            if (Chalnar == "0")
                AltQ += " alter table FM_HeaderFinCodeSettings add ChallanAcr nvarchar(20)";
            string ChalnarNO = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_HeaderFinCodeSettings' AND COLUMN_NAME = 'ChallanStNo'");
            if (ChalnarNO == "0")
                AltQ += " alter table FM_HeaderFinCodeSettings add ChallanStNo bigint";
            string Chalnsize = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_HeaderFinCodeSettings' AND COLUMN_NAME = 'ChallanSize'");
            if (Chalnsize == "0")
                AltQ += " alter table FM_HeaderFinCodeSettings add ChallanSize tinyint";
            string FmLd = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_LedgerMaster' AND COLUMN_NAME = 'priority'");
            if (FmLd == "0")
                AltQ += " Alter table FM_LedgerMaster alter column priority varchar(10)";
            string DeductReason = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FeeAllotDegree' AND COLUMN_NAME = 'DeductReason'");
            if (DeductReason == "0")
                AltQ += " alter table FT_FeeAllotDegree alter column DeductReason nvarchar(max)";
            string ledgerfk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_excessreceiptdet' AND COLUMN_NAME = 'ledgerfk'");
            if (ledgerfk == "0")
                AltQ += "  alter table ft_excessreceiptdet add ledgerfk bigint";
            string excesstype = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_excessreceiptdet' AND COLUMN_NAME = 'excesstype'");
            if (excesstype == "0")
                AltQ += "  alter table ft_excessreceiptdet add excesstype int";
            string EntryUserCodefinc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_fincashtransaction' AND COLUMN_NAME = 'EntryUserCode'");
            if (EntryUserCodefinc == "0")
                AltQ += "  alter table ft_fincashtransaction add EntryUserCode int";
            string EntryUserCode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_finbanktransaction' AND COLUMN_NAME = 'EntryUserCode'");
            if (EntryUserCode == "0")
                AltQ += "  alter table ft_finbanktransaction add EntryUserCode int";
            string MatchingLedger = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fm_ledgermaster' AND COLUMN_NAME = 'MatchingLedger'");
            if (MatchingLedger == "0")
                AltQ += "  alter table fm_ledgermaster add MatchingLedger nvarchar(100)";
            string Iscanceled = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FinDailyTransaction' AND COLUMN_NAME = 'Iscanceled'");
            if (Iscanceled == "0")
                AltQ += "  alter table FT_FinDailyTransaction alter column Iscanceled tinyint";
            string HeaderSettingPK = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fm_headerfincodesettings' AND COLUMN_NAME = 'HeaderSettingPK'");
            if (HeaderSettingPK == "0")
                AltQ += "   alter table fm_headerfincodesettings add HeaderSettingPK bigint identity (1,1)";
            if (AltQ != "")
            {
                Upd = d2.update_method_wo_parameter(AltQ, "Text");
            }
            AltQ = string.Empty;
            string HeaderfK = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fm_headerfincodesettings' AND COLUMN_NAME = 'HeaderfK'");
            if (HeaderfK.Trim() != "0")
                AltQ += "  alter table fm_headerfincodesettings drop column HeaderfK";
            string FineSettingType = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fm_finemaster' AND COLUMN_NAME = 'FineSettingType'");
            if (FineSettingType.Trim() == "0")
                AltQ += "   alter table fm_finemaster add FineSettingType tinyint";
            string type = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Condonation_Fee' AND COLUMN_NAME = 'type'");
            if (type.Trim() == "0")
                AltQ += "  alter table Condonation_Fee add type nvarchar(50)";
            string Edu_Level = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Condonation_Fee' AND COLUMN_NAME = 'Edu_Level'");
            if (Edu_Level.Trim() == "0")
                AltQ += "  alter table Condonation_Fee add Edu_Level nvarchar(50)";
            string Header_id = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Condonation_Fee' AND COLUMN_NAME = 'Header_id'");
            if (Header_id.Trim() == "0")
                AltQ += "   alter table Condonation_Fee add Header_id varchar(100)";
            string Fee_code = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Condonation_Fee' AND COLUMN_NAME = 'Fee_code'");
            if (Fee_code.Trim() == "0")
                AltQ += "   alter table Condonation_Fee add Fee_code varchar(100)";
            string isEligible = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Condonation_Fee' AND COLUMN_NAME = 'isEligible'");
            if (isEligible.Trim() == "0")
                AltQ += "   alter table Condonation_Fee add isEligible int";
            if (AltQ != "")
            {
                Upd = d2.update_method_wo_parameter(AltQ, "Text");
            }
            AltQ = string.Empty;
            string FT_sms_template = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_sms_template'");
            if (FT_sms_template == "0")
            {
                AltQ = " create table FT_sms_template(temp_code numeric,Template nvarchar(500),college_code numeric)";
            }
            string FT_sms_purpose = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_sms_purpose'");
            if (FT_sms_purpose == "0")
            {
                AltQ += " create table FT_sms_purpose (Purpose nvarchar(500),temp_code numeric,college_code numeric)";
            }
            if (AltQ != "")
            {
                Upd = d2.update_method_wo_parameter(AltQ, "Text");
            }
            ////////////////////////////////////
            AltQ = string.Empty;
            isEligible = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'InsSettings' AND COLUMN_NAME = 'FinuserCode'");
            if (isEligible.Trim() == "0")
                AltQ += "   alter table InsSettings add FinuserCode Bigint";
            isEligible = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'IsCollege'");
            if (isEligible.Trim() == "0")
                AltQ += "  alter table code_generation add IsCollege bit";
            if (AltQ != "")
            {
                Upd = d2.update_method_wo_parameter(AltQ, "Text");
            }
            AltQ = string.Empty;
            isEligible = string.Empty;
            isEligible = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'InsSettings' AND COLUMN_NAME = 'FinuserCode'");
            if (isEligible == "0")
                AltQ = AltQ + "  alter table InsSettings add FinuserCode Bigint";
            if (AltQ != "")
            {
                Upd = d2.update_method_wo_parameter(AltQ, "Text");
            }
            AltQ = string.Empty;
            isEligible = string.Empty;
            isEligible = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Fm_finemaster' AND COLUMN_NAME = 'BatchYear'");
            if (isEligible == "0")
                AltQ = AltQ + "  Alter table Fm_finemaster add BatchYear bigint";
            isEligible = string.Empty;
            isEligible = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_findailytransaction' AND COLUMN_NAME = 'FineFeecategory'");
            if (isEligible == "0")
                AltQ = AltQ + "  alter table ft_findailytransaction add FineFeecategory bigint";
            isEligible = string.Empty;
            isEligible = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fee_degree_match' AND COLUMN_NAME = 'MonthYear'");
            if (isEligible == "0")
                AltQ = AltQ + "  alter table fee_degree_match add MonthYear bigint";
            //added by sudhagar
            string hdPriority = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fm_headermaster' AND COLUMN_NAME = 'hd_priority'");
            if (hdPriority == "0")
                AltQ = AltQ + "  alter table fm_headermaster  add hd_priority varchar(100)";
            //added by sudhagar 01.05.2017
            string fmmis = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_HeaderMaster' AND COLUMN_NAME = 'hd_Miscellaneous'");
            if (fmmis == "0")
                AltQ = AltQ + "  alter table FM_HeaderMaster add hd_Miscellaneous bigint";
            string finfk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fm_finemaster' AND COLUMN_NAME = 'FinYearFK'");
            if (finfk == "0")
                AltQ = AltQ + "  alter table fm_finemaster add FinYearFK bigint";
            string dailyactul = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_findailytransaction' AND COLUMN_NAME = 'ActualFinYearFK'");
            if (dailyactul == "0")
                AltQ = AltQ + "  alter table ft_findailytransaction add ActualFinYearFK bigint";

            dailyactul = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fm_headermaster' AND COLUMN_NAME = 'atomProductId'");
            if (dailyactul == "0")
                AltQ = AltQ + "  alter table fm_headermaster add atomProductId varchar(500)";

            dailyactul = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FinDailyTransaction' AND COLUMN_NAME = 'DDNo'");
            if (dailyactul == "0")
                AltQ = AltQ + "  alter table FT_FinDailyTransaction alter column DDNo varchar(100)";

            dailyactul = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_ConcessionRefundSettings' AND COLUMN_NAME = 'degree_code'");
            if (dailyactul == "0")
                AltQ = AltQ + "  alter table FM_ConcessionRefundSettings add degree_code bigint";
            dailyactul = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'denomination' AND COLUMN_NAME = 'n2000'");
            if (dailyactul == "0")
                AltQ = AltQ + "  alter table denomination  add n2000 numeric";
            // Added by jairam 20-05-2017
            dailyactul = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FT_FeeAllot' AND COLUMN_NAME = 'Remarks'");
            if (dailyactul == "0")
                AltQ = AltQ + "  alter table FT_FeeAllot add Remarks nvarchar(max)";

            //added by sudhagar 27.05.2017
            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_findailytransaction' AND COLUMN_NAME = 'Deposite_BankFK'");
            if (dailyactul == "0")
                AltQ = AltQ + "  alter table ft_findailytransaction add Deposite_BankFK tinyint";
            //added by sudhagar 05.06.2017
            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ST_Student_Transfer' AND COLUMN_NAME = 'FromSeatType'");
            if (dailyactul == "0")
                AltQ = AltQ + "  alter table ST_Student_Transfer add  FromSeatType bigint";

            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ST_Student_Transfer' AND COLUMN_NAME = 'ToSeatType'");
            if (dailyactul == "0")
                AltQ = AltQ + "  alter table ST_Student_Transfer add  ToSeatType bigint ";
            //added by sudhagar 13.06.2017 code setting alter query
            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fm_fincodesettings' AND COLUMN_NAME = 'JournalAcr'");
            if (dailyactul == "0")
                AltQ = AltQ + "  alter table fm_fincodesettings add JournalAcr nvarchar(20) ";

            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fm_fincodesettings' AND COLUMN_NAME = 'JournalStNo'");
            if (dailyactul == "0")
                AltQ = AltQ + "  alter table fm_fincodesettings add JournalStNo bigint ";

            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fm_fincodesettings' AND COLUMN_NAME = 'JournalSize'");
            if (dailyactul == "0")
                AltQ = AltQ + "  alter table fm_fincodesettings add JournalSize tinyint ";

            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_excessdet ' AND COLUMN_NAME = 'Ex_JournalEntry'");
            if (dailyactul == "0")
                AltQ = AltQ + "    alter table ft_excessdet add Ex_JournalEntry tinyint ";

            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_ConcessionRefundSettings' AND COLUMN_NAME = 'FinYearFK'");
            if (dailyactul == "0")
                AltQ = AltQ + "alter table FM_ConcessionRefundSettings add FinYearFK int ";

            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fm_finemaster ' AND COLUMN_NAME = 'Stud_FineSettingType '");
            if (dailyactul == "0")
                AltQ = AltQ + "alter table fm_finemaster add Stud_FineSettingType varchar(10) ";

            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_challandet  ' AND COLUMN_NAME = 'Chl_ActualFinyearFk  '");
            if (dailyactul == "0")
                AltQ = AltQ + " alter table ft_challandet add Chl_ActualFinyearFk int ";
            //added by sudhagar 06.07.2017 
            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_feeallotdegree' AND COLUMN_NAME = 'HostelMasterFK'");
            if (dailyactul == "0")
                AltQ = AltQ + " alter table ft_feeallotdegree add HostelMasterFK bigint ";

            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_feeallotdegree' AND COLUMN_NAME = 'RoomType'");
            if (dailyactul == "0")
                AltQ = AltQ + " alter table ft_feeallotdegree add RoomType varchar(50) ";

            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_feeallotdegree' AND COLUMN_NAME = 'isHostelFees'");
            if (dailyactul == "0")
                AltQ = AltQ + " alter table ft_feeallotdegree add isHostelFees tinyint ";

            //added by sudhagar 22.07.2017
            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'OnlineFeeTransactionMaster' AND COLUMN_NAME = 'TokenID'");
            if (dailyactul == "0")
                AltQ = AltQ + " alter table OnlineFeeTransactionMaster add TokenID varchar(max) ";

            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'OnlineFeeTransactionMaster' AND COLUMN_NAME = 'TrackID'");
            if (dailyactul == "0")
                AltQ = AltQ + " alter table OnlineFeeTransactionMaster add TrackID varchar(100) ";

            //added by sudhagar 31.07.2017
            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'AlumniRegisterDate'");
            if (dailyactul == "0")
                AltQ = AltQ + " alter table applyn add AlumniRegisterDate datetime ";

            //added by sudhagar 12.08.2017
            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_feeallot' AND COLUMN_NAME = 'IsTransfer'");
            if (dailyactul == "0")
                AltQ = AltQ + " alter table ft_feeallot add IsTransfer tinyint not null default 0 ";

            //added by sudhagar 12.08.2017
            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ft_feeallot' AND COLUMN_NAME = 'IsTransfer'");
            if (dailyactul == "0")
                AltQ = AltQ + " alter table ft_feeallot add IsTransfer tinyint not null default 0 ";

            //Added by jairam 04-09-2017

            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FM_ChlBankPrintSettings' AND COLUMN_NAME = 'ChlGroupHeader'");
            if (dailyactul == "1")
                AltQ = AltQ + " alter table FM_ChlBankPrintSettings alter column ChlGroupHeader varchar(max) ";


            //added by sudhagar 28.08.2017
            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_ACADEMICYEAR'");
            if (dailyactul == "0")
                AltQ = AltQ + " CREATE TABLE FT_ACADEMICYEAR(ACA_YEAR_PK BIGINT IDENTITY(1,1) NOT NULL PRIMARY KEY ,ACD_COLLEGE_CODE INT ) ";
            dailyactul = string.Empty;
            dailyactul = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FT_ACADEMICYEAR_DETAILED'");
            if (dailyactul == "0")
                AltQ = AltQ + " CREATE TABLE FT_ACADEMICYEAR_DETAILED(ACD_DETID BIGINT IDENTITY(1,1) , ACA_YEAR_FK BIGINT  FOREIGN KEY REFERENCES  FT_ACADEMICYEAR(ACA_YEAR_PK),ACD_YEAR NVARCHAR(10),ACD_BATCH_YEAR INT,ACD_FEECATEGORY INT,ACD_CREATE_DATE DATE DEFAULT GETDATE() ) ";
            if (IsTableAvailable("FT_ACADEMICYEAR_DETAILED"))
                dirAcc.updateData("CREATE INDEX FT_ACADEMICYEAR_DETAILED_ACD_DETID_INDEX ON FT_ACADEMICYEAR_DETAILED(ACD_DETID)");
            string FeedbackQuery = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'USP_SAVE_ACADEMICYEAR'");
            if (FeedbackQuery.Trim() == "0")
            {
                string selQProc = "   Create PROC USP_SAVE_ACADEMICYEAR @ACD_COLLEGECODE INT,@ACD_YEAR VARCHAR(10),@ACD_BATCH_YEAR NVARCHAR(10),@ACD_FEECATEGORY INT,@QUERY_TYPE INT  AS     DECLARE @ACA_YEAR_FK INT;    DECLARE @QUERY_EXEC VARCHAR(MAX);  SET @ACD_COLLEGECODE=REPLACE(@ACD_COLLEGECODE,',',''',''')BEGIN TRY BEGIN TRANSACTION   IF @QUERY_TYPE=0    BEGIN       IF NOT EXISTS(SELECT ACD_COLLEGE_CODE FROM FT_ACADEMICYEAR WHERE ACD_COLLEGE_CODE=@ACD_COLLEGECODE)INSERT INTO FT_ACADEMICYEAR(ACD_COLLEGE_CODE) VALUES(@ACD_COLLEGECODE)   SELECT @ACA_YEAR_FK=ACA_YEAR_PK  FROM FT_ACADEMICYEAR WHERE ACD_COLLEGE_CODE=@ACD_COLLEGECODE      IF EXISTS(SELECT * FROM FT_ACADEMICYEAR_DETAILED WHERE ACA_YEAR_FK=@ACA_YEAR_FK AND ACD_YEAR=@ACD_YEAR AND ACD_BATCH_YEAR=@ACD_BATCH_YEAR AND ACD_FEECATEGORY=@ACD_FEECATEGORY)        UPDATE FT_ACADEMICYEAR_DETAILED SET ACD_YEAR=@ACD_YEAR , ACD_BATCH_YEAR=@ACD_BATCH_YEAR, ACD_FEECATEGORY=@ACD_FEECATEGORY WHERE ACA_YEAR_FK=@ACA_YEAR_FK ELSE      INSERT INTO FT_ACADEMICYEAR_DETAILED(ACA_YEAR_FK,ACD_YEAR,ACD_BATCH_YEAR,ACD_FEECATEGORY) VALUES(@ACA_YEAR_FK,@ACD_YEAR,@ACD_BATCH_YEAR,@ACD_FEECATEGORY)   END      ELSE     BEGIN   SELECT ACD_COLLEGE_CODE,ACD_YEAR,ACD_BATCH_YEAR,ACD_FEECATEGORY FROM FT_ACADEMICYEAR AY,FT_ACADEMICYEAR_DETAILED AYD WHERE AY.ACA_YEAR_PK=AYD.ACA_YEAR_FK AND ACD_COLLEGE_CODE =@ACD_COLLEGECODE     END  COMMIT TRANSACTION    END    TRY    BEGIN    CATCH    ROLLBACK TRANSACTION;END    CATCH";
                int UpD = d2.update_method_wo_parameter(selQProc, "Text");
            }

            if (AltQ != "")
            {
                Upd = d2.update_method_wo_parameter(AltQ, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
            lbler.Text = ex.ToString();
            lbler.Visible = true;
            return;
        }
    }

    #endregion

    public void Inventory()
    {
        try
        {
            string inventrys = string.Empty;
            string posetting = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IM_POSettings'");
            if (posetting == "0")
            {
                inventrys = inventrys + " CREATE TABLE IM_POSettings(IsContinueRefNo Bit,ReferenceNo nvarchar(30),ReportHeader nvarchar(100),IsLetterPad Bit,IsTerms Bit,TermsDesc nvarchar(500),TermsValues nvarchar(200),IsFooterDesc Bit,FooterDesc nvarchar(100),FooterDescStaff BigInt,AddressDesc nvarchar(100),IsSignwithSeal Bit,CollegeCode int)";
            }
            string BreakageDetails = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_BreakageDetails'");
            if (BreakageDetails == "0")
            {
                inventrys = inventrys + " CREATE TABLE IT_BreakageDetails(DeptFK BigInt,ItemFK BigInt,AssetNo nvarchar(30),InchargeStaff BigInt,BreakageBy tinyint,MemCode BigInt,ItemStatus nvarchar(30),PayMethod tinyint,Remarks nvarchar(300),HeaderFK BigInt,LedgerFK Bigint,PayAmount Decimal(12,2))";
            }
            string ItemUsageDetail = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_ItemUsageDetail'");
            if (ItemUsageDetail == "0")
            {
                inventrys = inventrys + " CREATE TABLE IT_ItemUsageDetail(ItemUsageDate Datetime,DeptFK BigInt,ItemFK BigInt,UsedQty Decimal(12,2),RPU Decimal(12,2),UsedValue Decimal(12,2),UserCode BigInt)";
            }
            string itemmainplan = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_ItemMaintPlan'");
            if (itemmainplan == "0")
            {
                inventrys = inventrys + " CREATE TABLE IT_ItemMaintPlan(ItemFK BigInt,Activity BigInt,StartDate Datetime,EndDate Datetime,ResponseDept nvarchar(100),ResponseStaff nvarchar(100),MaintStatus tinyint)";
            }
            string ven_itemdpt = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IM_VendorItemDept'");
            if (ven_itemdpt == "0")
            {
                inventrys = inventrys + " CREATE TABLE IM_VendorItemDept(VenItemFK BigInt,VenItemDeptFK Int,VenItemSupplyDur int,VenItemIsSupplied Bit,VenItemReference nvarchar(200),ItemFK BigInt)";
            }
            string vendcontact = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IM_VendorContactMaster'");
            if (vendcontact == "0")
            {
                inventrys = inventrys + "CREATE TABLE IM_VendorContactMaster(VendorContactPK BigInt IDENTITY(1,1) Constraint PKVendorContact PRIMARY KEY,VenContactType BigInt,VenContactName nvarchar(200),VenContactDesig nvarchar(100),VenContactDept nvarchar(100),VendorPhoneNo nvarchar(30),VendorExtNo nvarchar(10),VendorMobileNo nvarchar(30),VendorEmail nvarchar(30),VendorFK BigInt)";
            }
            string vend_banck = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IM_VendorBankMaster'");
            if (vend_banck == "0")
            {
                inventrys = inventrys + " CREATE TABLE IM_VendorBankMaster(VenBankName nvarchar(200),VenBankBranch nvarchar(100),VenBankHolderName nvarchar(100),VendorAccName nvarchar(100),VendorAccNo nvarchar(20),VendorBankIFSCCode nvarchar(20), VendorBankSWIFTCode nvarchar(20),VendorFK BigInt)";
            }
            string stormaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IM_StoreMaster'");
            if (stormaster == "0")
            {
                inventrys = inventrys + " CREATE TABLE IM_StoreMaster(StorePK BigInt IDENTITY(1,1) Constraint PKStoreCode PRIMARY KEY,StoreAcr nvarchar(10),StoreName nvarchar(100), StoreStartYear nvarchar(4),CollegeCode int)";
            }
            string stordept = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IM_StoreDeptDet'");
            if (stordept == "0")
            {
                inventrys = inventrys + " CREATE TABLE IM_StoreDeptDet(DeptCode Bigint,StoreFK BigInt)";
            }
            string itemmaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IM_ItemMaster'");
            if (itemmaster == "0")
            {
                inventrys = inventrys + " CREATE TABLE IM_ItemMaster(ItemPK BigInt IDENTITY(1,1) Constraint PKItemMaster PRIMARY KEY,ItemHeaderCode nvarchar(30),ItemHeaderName nvarchar(100),ItemAcr nvarchar(10),ItemCode nvarchar(30),ItemName nvarchar(100),ItemTamilName nvarchar(100),ItemModel nvarchar(50),ItemSize nvarchar(50),ItemUnit nvarchar(5),ItemSpecification nvarchar(300),ItemType Bit,StoreFK BigInt,ForHostelItem Bit,IsSafetyItem Bit)";
            }
            string itempet = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IM_ItemDeptMaster'");
            if (itempet == "0")
            {
                inventrys = inventrys + " CREATE TABLE IM_ItemDeptMaster(ItemDeptFK int,ItemFK BigInt)";
            }
            string stockpet = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_StockDetail'");
            if (stockpet == "0")
            {
                inventrys = inventrys + " CREATE TABLE IT_StockDetail(OrderFK BigInt,InwardFK BigInt,ItemFK BigInt,OrderQty Decimal(12,2),InwardQty Decimal(12,2),ReturnQty Decimal(12,2),TransferQty Decimal(12,2),BalQty Decimal(12,2),InwardRPU Decimal(12,2),IncludeTaxRPU Decimal(12,2),CurAvgRPU Decimal(12,2),StoreFK BigInt,InwardType tinyint)";
            }
            string stockdept = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_StockDeptDetail'");
            if (stockdept == "0")
            {
                inventrys = inventrys + " CREATE TABLE IT_StockDeptDetail(OrderFK BigInt,InwardFK BigInt,ItemFK BigInt,DeptFK BigInt,IssuedQty Decimal(12,2),UsedQty Decimal(12,2),BalQty Decimal(12,2),SerialNo nvarchar(30),AssetNo nvarchar(30),ItemStatus nvarchar(15),IssuedRPU Decimal(12,2),IncludeTaxRPU Decimal(12,2),CurAvgRPU Decimal(12,2))";
            }
            string transferitem = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_TransferItem'");
            if (transferitem == "0")
            {
                inventrys = inventrys + " CREATE TABLE IT_TransferItem(TransferItemPK BigInt Identity(1,1) Constraint PKTransferItem PRIMARY KEY,TrasnferDate Datetime,TransferType tinyint,TransferFrom BigInt,TrasferTo BigInt,TransferQty Decimal(12,2))";
            }
            string purchas = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_PurchaseOrder'");
            if (purchas == "0")
            {
                inventrys = inventrys + " CREATE TABLE IT_PurchaseOrder(PurchaseOrderPK BigInt Identity(1,1) Constraint PKPurchaseOrder PRIMARY KEY,OrderCode nvarchar(30),OrderDate Datetime,OrderType BigInt,OrderMode tinyint,IsOrderDueDate Datetime,OrderDueDate Datetime,IsTotDisPercent Bit,TotDisAmt Decimal(12,2),TotTaxAmt Decimal(12,2),TotOtherChgAmt Decimal(12,2),OrderDescription nvarchar(300),NetAmount Decimal(12,2),PageNo Decimal(12,2),ForHostel Bit,ApproveStatus Bit,InwardStatus tinyint,VendorFK BigInt)";
            }
            string purchasorder_det = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_PurchaseOrderDetail'");
            if (purchasorder_det == "0")
            {
                inventrys = inventrys + " CREATE TABLE IT_PurchaseOrderDetail(IT_PurchaseOrderDetailPK BigInt Identity(1,1),ItemFK BigInt,Qty Decimal(12,2),RPU Decimal(12,2),IsDiscountPercent Bit,DiscountAmt Decimal(12,2),TaxPercent Decimal(12,2),EduCessPer Decimal(12,2),HigherEduCessPer Decimal(12,2),ExeciseTaxPer Decimal(12,2),OtherChargeAmt Decimal(12,2),OtherChargeDesc nvarchar(100),IsItemAmt Decimal(12,2),IsItemActAmt Decimal(12,2),AppQty Decimal(12,3),RejQty Decimal(12,2),PurchaseOrderFK BigInt)";
            }
            string goodinward = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_GoodsInward'");
            if (goodinward == "0")
            {
                inventrys = inventrys + " CREATE TABLE IT_GoodsInward(GoodsInwardPK BigInt Identity(1,1) Constraint PKGoodsInward PRIMARY KEY,GoodsInwardCode nvarchar(30),GoodsInwardDate Datetime,DCNo nvarchar(30),DCDate Datetime,InvoiceNo nvarchar(30),InvoiceDate Datetime,LabourCharge Decimal(12,2),FrightCharge Decimal(12,2),OtherCharge Decimal(12,2),OrderQty Decimal(12,2),InwardQty Decimal(12,2),ReturnQty Decimal(12,2),IsManufactureDate Bit,ManufactureDate Datetime,IsExpiryDate Bit,ExpiryDate Datetime, WarrentyDays int,ItemSerial nvarchar(500),PurchaseOrderFK BigInt)";
            }
            string VendorReq = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_VendorReq'");
            if (VendorReq == "0")
            {
                inventrys = inventrys + " CREATE TABLE IT_VendorReq(VenReqPK BigInt Identity(1,1) Constraint PKVenReq PRIMARY KEY,VenReqCode nvarchar(30),VenReqDate Datetime,VendorReqDueDate Datetime,ReqFK BigInt,VendorFK BigInt,ReqCompCode nvarchar(30),PurchaseStatus tinyint)";
            }
            string VendorReqDet = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_VendorReqDet'");
            if (VendorReqDet == "0")
            {
                inventrys = inventrys + " CREATE TABLE IT_VendorReqDet(ItemFK BigInt,ReqQty Decimal(12,2),VenReqPK BigInt,ReqFK BigInt)";
            }
            string VendorQuot = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_VendorQuot'");
            if (VendorQuot == "0")
            {
                inventrys = inventrys + " CREATE TABLE IT_VendorQuot(VendorQuotPK BigInt Identity(1,1) Constraint PKVendorQuot PRIMARY KEY,VenQuotCode nvarchar(30),VenQuotDate Datetime,VenQuotType BigInt,VenQuotNo nvarchar(30),IsVenQuotDueDate Bit,VenQuotDueDate Datetime,DeliveryPeriod int,InwardStatus tinyint)";
            }
            string VendorQuotPayTerms = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_VendorQuotPayTerms'");
            if (VendorQuotPayTerms == "0")
            {
                inventrys = inventrys + " CREATE TABLE IT_VendorQuotPayTerms(QuotPayInstallmentDays int,PayAmount Decimal(12,2),VendorQuotFK BigInt)";
            }
            string VednorQuotDet = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_VednorQuotDet'");
            if (VendorQuot == "0")
            {
                inventrys = inventrys + " CREATE TABLE IT_VednorQuotDet(VednorQuotDetPK BigInt Identity(1,1) Constraint PKVednorQuotDet PRIMARY KEY,ItemFK BigInt,Qty Decimal(12,2),RPU Decimal(12,2),IsDiscountPercent Bit,DiscountAmt Decimal(12,2),TaxPercent Decimal(12,2),EduCessPer Decimal(12,2),HigherEduCessPer Decimal(12,2),ExeciseTaxPer Decimal(12,2),OtherChargeAmt Decimal(12,2),OtherChargeDesc nvarchar(100),IsTotDisPercent Bit,TotDisAmt Decimal(12,2),TotTaxAmt Decimal(12,2),TotOtherChgAmt Decimal(12,2),VendorQuotFK BigInt)";
            }
            string CdSettings = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IM_CodeSettings'");
            if (CdSettings == "0")
            {
                inventrys = inventrys + " CREATE TABLE IM_CodeSettings(StartDate Datetime,ItemHeaderAcr nvarchar(10),ItemHeaderStNo int,ItemHeaderSize tinyint,ItemAcr nvarchar(10),ItemStNo int,ItemSize tinyint,IncludeHeaderAcr Bit,CustAcr nvarchar(10),CustStNo int,CustSize tinyint,VenAcr nvarchar(10),VenStNo int,VenSize tinyint,ReqAcr nvarchar(10),ReqStNo int,ReqSize tinyint,QuoAcr nvarchar(10),QuoStNo int,QuoSize tinyint,POAcr nvarchar(10),POStNo int,POSize tinyint,GIAcr nvarchar(10),GIStNo int,GISize tinyint,GRAcr nvarchar(10),GRStNo int,GRSize tinyint,AssetAcr nvarchar(10),AssetStNo int,AssetSize tinyint,StaffApplAcr nvarchar(10),StaffApplStNo int,StaffApplSize tinyint,StaffCodeAcr nvarchar(10),StaffCodeStNo int,StaffCodeSize tinyint,IsColAcr Bit,IsDeptAcr Bit,IsJoinYear Bit,IsStaffTypeAcr Bit,IsAssetItemCode Bit,CollegeCode int)";
            }
            if (inventrys != "")
            {
                int inventryss = d2.update_method_wo_parameter(inventrys, "Text");
            }
            //alter
            string invalter = string.Empty;
            string inwartyp = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IT_GoodsInward' AND COLUMN_NAME = 'Inward_Type'");
            if (inwartyp == "0")
            {
                invalter = invalter + "  Alter table IT_GoodsInward add Inward_Type tinyint";
            }
            string goodinwrd = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IT_GoodsInward' AND COLUMN_NAME = 'DeptFK'");
            if (goodinwrd == "0")
            {
                invalter = invalter + "  Alter table IT_GoodsInward add DeptFK bigint ";
            }
            string itemfk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IT_TransferItem' AND COLUMN_NAME = 'ItemFK'");
            if (itemfk == "0")
            {
                invalter = invalter + "  Alter table IT_TransferItem add ItemFK bigint";
            }
            string itemunit = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_ItemMaster' AND COLUMN_NAME = 'itemUnit'");
            if (itemunit == "0")
            {
                invalter = invalter + "  alter table IM_ItemMaster alter column itemUnit nvarchar(50) ";
            }
            string subheader = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IT_PurchaseOrderDetail' AND COLUMN_NAME = 'Inward_Status'");
            if (subheader == "0")
            {
                invalter = invalter + " Alter table IT_PurchaseOrderDetail Add Inward_Status tinyint";
            }
            string InwardType = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IT_StockDeptDetail' AND COLUMN_NAME = 'Inward_Type'");
            if (InwardType == "0")
            {
                invalter = invalter + " Alter table IT_StockDeptDetail Add Inward_Type tinyint";
            }
            string SettingType = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_POSettings' AND COLUMN_NAME = 'SettingType'");
            if (SettingType == "0")
            {
                invalter = invalter + " Alter Table IM_POSettings Add SettingType tinyint";
            }
            string PurchaseOrder = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_POSettings' AND COLUMN_NAME = 'PurchaseOrderType'");
            if (PurchaseOrder == "0")
            {
                invalter = invalter + " Alter Table IM_POSettings Add PurchaseOrderType tinyint";
            }
            string SetForMess = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_POSettings' AND COLUMN_NAME = 'SettingForMess'");
            if (SetForMess == "0")
            {
                invalter = invalter + " Alter Table IM_POSettings Add SettingForMess Bit";
            }
            string SetFromDate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_POSettings' AND COLUMN_NAME = 'SettingFromDate'");
            if (SetFromDate == "0")
            {
                invalter = invalter + " Alter Table IM_POSettings Add SettingFromDate Datetime";
            }
            string SetToDate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_POSettings' AND COLUMN_NAME = 'SettingToDate'");
            if (SetToDate == "0")
            {
                invalter = invalter + " Alter Table IM_POSettings Add SettingToDate Datetime";
            }
            string SetFor = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_POSettings' AND COLUMN_NAME = 'SettingFor'");
            if (SetFor == "0")
            {
                invalter = invalter + " Alter Table IM_POSettings Add SettingFor tinyint";
            }
            string IsAstDeptAcr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_CodeSettings' AND COLUMN_NAME = 'IsAssetDeptAcr'");
            if (IsAstDeptAcr == "0")
            {
                invalter = invalter + " Alter Table IM_CodeSettings Add IsAssetDeptAcr Bit";
            }
            string AssetItemAcr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_CodeSettings' AND COLUMN_NAME = 'IsAssetItemAcr'");
            if (AssetItemAcr == "0")
            {
                invalter = invalter + " Alter Table IM_CodeSettings Add IsAssetItemAcr Bit";
            }
            string MenuAcr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_CodeSettings' AND COLUMN_NAME = 'MenuAcr'");
            if (MenuAcr == "0")
            {
                invalter = invalter + " ALTER TABLE IM_CodeSettings Add MenuAcr nvarchar(20)";
            }
            string MenuStNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_CodeSettings' AND COLUMN_NAME = 'MenuStNo'");
            if (MenuStNo == "0")
            {
                invalter = invalter + " ALTER TABLE IM_CodeSettings Add MenuStNo int";
            }
            string MenuSize = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_CodeSettings' AND COLUMN_NAME = 'MenuSize'");
            if (MenuAcr == "0")
            {
                invalter = invalter + " ALTER TABLE IM_CodeSettings Add MenuSize tinyint";
            }
            string VenAcr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_CodeSettings' AND COLUMN_NAME = 'VenAcr'");
            if (VenAcr == "0")
            {
                invalter = invalter + " ALTER TABLE IM_CodeSettings Add VenAcr nvarchar(10)";
            }
            string VenStNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_CodeSettings' AND COLUMN_NAME = 'VenStNo'");
            if (VenStNo == "0")
            {
                invalter = invalter + " ALTER TABLE IM_CodeSettings Add VenStNo int";
            }
            string VenSize = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_CodeSettings' AND COLUMN_NAME = 'VenSize'");
            if (VenSize == "0")
            {
                invalter = invalter + " ALTER TABLE IM_CodeSettings Add VenSize tinyint";
            }
            string Reqstfappno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IT_PurchaseOrder' AND COLUMN_NAME = 'Reqstaff_appno'");
            if (Reqstfappno == "0")
            {
                invalter = invalter + " alter table IT_PurchaseOrder add Reqstaff_appno bigint";
            }
            string ApproveStatus = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IT_PurchaseOrder' AND COLUMN_NAME = 'ApproveStatus'");
            if (ApproveStatus == "0")
            {
                invalter = invalter + " Alter table IT_PurchaseOrder alter column ApproveStatus tinyint";
            }
            string Rejctreason = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IT_PurchaseOrderDetail' AND COLUMN_NAME = 'Reject_reason'");
            if (Rejctreason == "0")
            {
                invalter = invalter + " Alter table IT_PurchaseOrderDetail add Reject_reason bigint ";
            }
            string Itemfk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IT_GoodsInward' AND COLUMN_NAME = 'Itemfk'");
            if (Itemfk == "0")
            {
                invalter = invalter + " Alter table IT_GoodsInward add Itemfk bigint";
            }
            string VendorFK = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IT_GoodsInward' AND COLUMN_NAME = 'VendorFK'");
            if (VendorFK == "0")
            {
                invalter = invalter + " Alter table IT_GoodsInward add VendorFK bigint";
            }
            string Recstfcod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IT_GoodsInward' AND COLUMN_NAME = 'Received_staffcode'");
            if (Recstfcod == "0")
            {
                invalter = invalter + " Alter table IT_GoodsInward add Received_staffcode bigint";
            }
            string VReqAcr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_CodeSettings' AND COLUMN_NAME = 'VenReqAcr'");
            if (VReqAcr == "0")
            {
                invalter = invalter + " ALTER TABLE IM_CodeSettings Add VenReqAcr nvarchar(20)";
            }
            string VenReqStNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_CodeSettings' AND COLUMN_NAME = 'VenReqStNo'");
            if (VenReqStNo == "0")
            {
                invalter = invalter + " ALTER TABLE IM_CodeSettings Add VenReqStNo int";
            }
            string VReqSize = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_CodeSettings' AND COLUMN_NAME = 'VenReqSize'");
            if (VReqSize == "0")
            {
                invalter = invalter + " ALTER TABLE IM_CodeSettings Add VenReqSize tinyint";
            }
            string subhcode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_ItemMaster' AND COLUMN_NAME = 'subheader_code'");
            if (subhcode == "0")
            {
                invalter = invalter + " alter table IM_ItemMaster add subheader_code numeric";
            }
            string ReqFK = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IT_VendorQuot' AND COLUMN_NAME = 'ReqFK'");
            if (ReqFK == "0")
            {
                invalter = invalter + " Alter table IT_VendorQuot add ReqFK bigint ";
            }
            string VReqFK = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IT_VendorQuot' AND COLUMN_NAME = 'VenReqFK'");
            if (VReqFK == "0")
            {
                invalter = invalter + " Alter table IT_VendorQuot add VenReqFK bigint";
            }
            string VendoFK = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IT_VendorQuot' AND COLUMN_NAME = 'VendorFK'");
            if (VReqFK == "0")
            {
                invalter = invalter + " Alter table IT_VendorQuot add VendorFK bigint ";
            }
            string find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Floor_Master'");
            if (find_tablename != "0")
            {
                string Floorpks = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Floor_Master' AND COLUMN_NAME = 'Floorpk'");
                if (Floorpks == "0")
                {
                    invalter = invalter + " alter table Floor_Master add Floorpk bigint identity(1,1)";
                }
            }
            //
            string stoc = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_StockDetail'");
            if (stoc != "0")
            {
                string Floorpks = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IT_StockDetail' AND COLUMN_NAME = 'Sailing_prize'");
                if (Floorpks == "0")
                {
                    invalter = invalter + " Alter table IT_StockDetail add Sailing_prize Decimal(12,2)";
                }
            }
            //
            string Sailinrize = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_StockDeptDetail'");
            if (Sailinrize != "0")
            {
                string Floorpks = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IT_StockDeptDetail' AND COLUMN_NAME = 'Sailing_prize'");
                if (Floorpks == "0")
                {
                    invalter = invalter + " Alter table IT_StockDeptDetail add Sailing_prize Decimal(12,2)";
                }
            }
            //
            string Sailiprize = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='It_purchaseorderdetail'");
            if (Sailiprize != "0")
            {
                string Floorpks = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'It_purchaseorderdetail' AND COLUMN_NAME = 'Sailing_prize'");
                if (Floorpks == "0")
                {
                    invalter = invalter + " Alter table It_purchaseorderdetail add Sailing_prize decimal(12,2)";
                }
            }
            string ItemName = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IM_ItemMaster'");
            if (ItemName != "0")
            {
                string Floorpks = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IM_ItemMaster' AND COLUMN_NAME = 'ItemName'");
                if (Floorpks != "0")
                {
                    invalter = invalter + " alter table IM_ItemMaster alter column ItemName nvarchar(max)";
                }
            }
            if (invalter != "")
            {
                int invantalter = d2.update_method_wo_parameter(invalter, "Text");
            }
            string qry = "if exists (select * from IPatchStatus where ModuleName='Inventory') update IPatchStatus set ClientUpdatedDate='" + DateTime.Now.ToString("yyyy/MM/dd") + "' where ModuleName='Inventory' ";
            int res = d2.update_method_wo_parameter(qry, "Text");
            if (res != 0)
            {
                alertmessage.Visible = true;
                lbl_alerterror.Text = " Updated Successfully";
            }
            bindgrid();
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void hostelquery()
    {
        try
        {
            string hostelqry = string.Empty;
            int hostel = 0;
            string find_tablename = string.Empty;
            string mesmstr = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HM_MessMaster'");
            if (mesmstr == "0")
            {
                hostelqry = "CREATE TABLE HM_MessMaster(MessMasterPK BigInt IDENTITY(1,1) CONSTRAINT PKMessMaster PRIMARY KEY,MessAcr nvarchar(10),MessName nvarchar(200),MessStartYear int,CollegeCode int)";
            }

            mesmstr = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HM_Codesettings'");
            if (mesmstr == "0")
            {
                hostelqry = " create table HM_Codesettings (StartDate datetime,HostelserialAcr nvarchar(10),HostelserialStNo int,Hostelserialsize tinyint)";
            }

            string hostelmstr = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HM_HostelMaster'");
            if (hostelmstr == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HM_HostelMaster(HostelMasterPK BigInt IDENTITY(1,1) CONSTRAINT PKHostelMaster PRIMARY KEY,HostelName nvarchar(200),HostelType tinyint,WardenStaff1PK BigInt,WardentStaff2PK BigInt,HostelBuildingFK nvarchar(10),PhoneNo nvarchar(30),PhoneExtNo nvarchar(20),MobileNo nvarchar(30),EmailID nvarchar(100),MessBillType tinyint,MessBillMethod tinyint,MessBillHeaderFK BigInt,NessBukkLedgerFK BigInt,MessBillDSHeaderFK BigInt,MessBillDSLedgerFK BigInt,MessBillPayDueDays int,IncludeRebate Bit,RoomRentHeaderFK BigInt, RoomRentLedgerFK BigInt,HostelAdmFeeHeaderFK BigInt,HostelAdmFeeLedgerFK BigInt,HostelAdmFeeAmount Decimal(12,2),IsHostelGatePassPer Bit,HostelGatePassPerCount int,IsAllowUnApproveStud Bit,MessMasterFK BigInt FOREIGN KEY References HM_MessMaster(MessMasterPK),CollegeCode int)";
            }
            string host_regst = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HT_HostelRegistration'");
            if (host_regst == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HT_HostelRegistration(HostelRegistrationPK BigInt IDENTITY(1,1) CONSTRAINT PKHostelRegistration PRIMARY KEY,MemType tinyint,APP_No BigInt,HostelAdmDate Datetime,BuildingFK BigInt,FloorFK BigInt,RoomFK BigInt,MessType tinyint,StudMessType tinyint,IsSuspend Bit,SuspendDate Datetime,IsDiscontinued Bit,DiscontinueDate Datetime,IsVacated Bit,VacatedDate Datetime,Reason BigInt,StudHostelGateStatus Bit,GuestVendorType tinyint,GuestVendorFK BigInt,HostelMasterFK BigInt FOREIGN KEY References HM_HostelMaster(HostelMasterPK))";
            }
            string sus_detail = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HT_Suspension_Details'");
            if (sus_detail == "0")
            {
                hostelqry = hostelqry + " Create table HT_Suspension_Details (SuspensionPk BigInt IDENTITY(1,1)primary key,App_no bigint,Suspension bit,FromDate datetime,ToDate datetime,Suspend_Reasoncode bigint,Rejoin bit,ReJoinDate datetime,Status Bit,HotelMasterFk bigint)";
            }
            string sessn_master = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HM_SessionMaster'");
            if (sessn_master == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HM_SessionMaster(SessionMasterPK BigInt IDENTITY(1,1) CONSTRAINT PKSessionMaster PRIMARY KEY,SessionAcr nvarchar(10),SessionName nvarchar(50),SessionStartTime nvarchar(20),SessionCloseTime nvarchar(20),IsAllowExtTime Bit,SessionCloseExtTime nvarchar(20),MessMasterFK BigInt FOREIGN KEY References HM_MessMaster(MessMasterPK))";
            }
            if (hostelqry.Trim() != "")
            {
                hostel = d2.update_method_wo_parameter(hostelqry, "Text");
            }
            hostelqry = string.Empty;
            string menumster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HM_MenuMaster'");
            if (menumster == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HM_MenuMaster(MenuMasterPK BigInt IDENTITY(1,1) CONSTRAINT PKMenuMaster PRIMARY KEY,MenuCode nvarchar(20),MenuName nvarchar(100),MenuType tinyint,CollegeCode int)";
            }
            string menuitem_mster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HM_MenuItemMaster'");
            if (menuitem_mster == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HM_MenuItemMaster(MenuItemMasterPK BigInt IDENTITY(1,1) CONSTRAINT PKMenuItemMaster PRIMARY KEY,MenuMasterFK BigInt FOREIGN KEY References HM_MenuMaster(MenuMasterPK),NoOfPerson int,CollegeCode int)";
            }
            string menuitem_detail = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HM_MenuItemDetail'");
            if (menuitem_detail == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HM_MenuItemDetail(ItemFK BigInt FOREIGN KEY References IM_ItemMaster(ItemPK),NeededQty Decimal(12,2),MenuItemMasterFK bigint FOREIGN KEY References HM_MenuItemMaster(MenuItemMasterPK))";
            }
            string menushedul = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HT_MenuSchedule'");
            if (menushedul == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HT_MenuSchedule(MenuSchedulePK BigInt IDENTITY(1,1) CONSTRAINT PKMenuSchedule PRIMARY KEY,MenuScheduleDate Datetime,SessionMasterFK BigInt FOREIGN KEY References HM_SessionMaster(SessionMasterPK),MenuMasterFK BigInt, ScheudleItemType tinyint,MessMasterFK BigInt FOREIGN KEY References HM_MessMaster(MessMasterPK))";
            }
            string clean = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Cleaning_ItemMaseter'");
            if (clean == "0")
            {
                hostelqry = hostelqry + " Create Table Cleaning_ItemMaseter (Clean_ItemMasterPK numeric identity(1,1),SessionFK bigint,NoOfItems int,MessMasterFK bigint,Schedule_Day varchar(50),Schedule_Date datetime,Schedule_type tinyint)";
            }
            string cl_itmdt = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Cleaning_ItemDetailMaster'");
            if (cl_itmdt == "0")
            {
                hostelqry = hostelqry + " Create Table Cleaning_ItemDetailMaster (Access_Date datetime,Access_Time nvarchar(100),Clean_ItemDetailMasterCode numeric IDENTITY(1,1) NOT NULL,Clean_ItemMasterCode numeric,Item_Code nvarchar(100),Needed_Qty decimal,Hostel_Code numeric)";
            }
            string holiday = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HT_Holidays'");
            if (holiday == "0")
            {
                hostelqry = hostelqry + " Create table HT_Holidays (HolidayType tinyint,MessCode bigint,HolidayDate datetime,SessionCode bigint,HolidayForHostler bit,HolidayForDayscholar bit,HolidayForStaff bit)";
            }
            string attendance = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HT_Attendance'");
            if (attendance == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HT_Attendance(AttnMonth int,AttnYear int,App_No BigInt,D1 smallint,D2 smallint,D3 smallint,D4 smallint,D5 smallint,D6 smallint,D7 smallint,D8 smallint,D9 smallint,D10 smallint,D11 smallint,D12 smallint,D13 smallint,D14 smallint,D15 smallint,D16 smallint,D17 smallint,D18 smallint,D19 smallint,D20 smallint,D21 smallint,D22 smallint,D23 smallint,D24 smallint,D25 smallint,D26 smallint,D27 smallint,D28 smallint,D29 smallint,D30 smallint,D31 smallint)";
            }
            string hoststting = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HostelIns_settings'");
            if (hoststting == "0")
            {
                hostelqry = hostelqry + " create table HostelIns_settings(Hostel_code numeric,Session_code numeric,Schedule_type bit,Schedule_date datetime,Schedule_Day varchar(20),EditMenuTotal varchar(50),Use_Attendance bit,Att_Hour varchar(100),Staff_total bit)";
            }
            string htdaily_con = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HT_DailyConsumptionMaster'");
            if (htdaily_con == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HT_DailyConsumptionMaster(DailyConsumptionMasterPK BigInt IDENTITY(1,1) Constraint PKDailyConsumptionMaster Primary Key,DailyConsDate Datetime,ForMess tinyint,MessMasterFK BigInt,SessionFK BigInt,DeptFK BigInt,UserCode BigInt)";
            }
            if (hostelqry.Trim() != "")
            {
                hostel = d2.update_method_wo_parameter(hostelqry, "TEXT");
            }
            hostelqry = string.Empty;
            string constion_detail = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HT_DailyConsumptionDetail'");
            if (constion_detail == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HT_DailyConsumptionDetail(ItemFK BigInt,ConsumptionQty Decimal(12,2),RPU Decimal(12,2),DailyConsumptionMasterFK BigInt FOREIGN KEY References HT_DailyConsumptionMaster(DailyConsumptionMasterPK))";
            }
            string hostelincom = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HT_HostelIncome'");
            if (hostelincom == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HT_HostelIncome(IncomeDate Datetime,IncomeGroup BigInt,IncomeDesc nvarchar(200),IncomeAmount Decimal(12,2),HostelMasterFK BigInt FOREIGN KEY References HM_HostelMaster(HostelMasterPK))";
            }
            string hostexpens = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HT_HostelExpenses'");
            if (hostexpens == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HT_HostelExpenses(ExpensesType tinyint,ExpensesDate Datetime,ExpGroup BigInt,ExpSubGroup BigInt,ExpDesc nvarchar(100), ItemFK BigInt,Qty Decimal(12,2),ExpAmount Decimal(12,2),HostelFK BigInt FOREIGN KEY References HM_HostelMaster(HostelMasterPK))";
            }
            string RebateMaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HM_RebateMaster'");
            if (RebateMaster == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HM_RebateMaster(RebateType tinyint,RebateActDays smallint,RebateDays smallint,RebateMonth smallint,RebateAmount Decimal(12,2),HostelFK BigInt FOREIGN KEY References HM_HostelMaster(HostelMasterPK))";
            }
            string HostelRebateDetail = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HT_HostelRebateDetail'");
            if (HostelRebateDetail == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HT_HostelRebateDetail(MemType tinyint,App_No BigInt,RebateType tinyint,RebateFromDate Datetime,RebateToDate Datetime,LeaveDays smallint,RebateDays smallint,RebateDate Datetime,RebateAmount Decimal(12,2),RebateDesc BigInt) ";
            }
            string studaddition = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HT_StudAdditionalDet'");
            if (studaddition == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HT_StudAdditionalDet(MemType tinyint,App_No BigInt,TransDate Datetime,AdditionalAmt Decimal(12,2),AdditionalDesc BigInt)";
            }
            string MenuCostMaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HM_MenuCostMaster'");
            if (MenuCostMaster == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HM_MenuCostMaster(MenuMasterFK BigInt,MenuQty Decimal(12,3),MenuAmount Decimal(12,2))";
            }
            string StudTokenDetails = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HT_StudTokenDetails'");
            if (StudTokenDetails == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HT_StudTokenDetails(StudTokenDetailsPK BigInt IDENTITY(1,1),TokenDate Datetime,MemType tinyint,App_No BigInt,SessionFK BigInt,MenuFK BigInt,MessFK BigInt,TokenQty Decimal(12,2),TokenAmount Decimal(12,2))";
            }
            string MessSettings = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HostelMessSettings'");
            if (MessSettings == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HostelMessSettings(College_Code nvarchar(20),Hostel_Code nvarchar(30),IncludeStaff Bit,IncludeDaysscholour Bit,IncludeHosteler Bit,RebateType Bit,IncludeStudAdd Bit,IncludeAddExp Bit,IncludeAddInc Bit)";
            }
            string MessBillMaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HT_MessBillMaster'");
            if (MessBillMaster == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HT_MessBillMaster(MessBillMasterPK BigInt IDENTITY(1,1) Constraint PKMessBillMaster Primary Key,MessMonth int,MessYear int,MessMasterFK BigInt FOREIGN KEY References HM_MessMaster(MessMasterPK))";
            }
            string MessBillDetail = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HT_MessBillDetail'");
            if (MessBillDetail == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HT_MessBillDetail(MemType tinyint,App_No BigInt,MessAmount Decimal(12,2),MessAdditonalAmt Decimal(12,2),RebateAmount Decimal(12,2),MessBillMasterFK BigInt FOREIGN KEY References HT_MessBillMaster(MessBillMasterPK))";
            }
            string hst_TransferDetails = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HT_Hostel_TransferDetails'");
            if (hst_TransferDetails == "0")
            {
                hostelqry = hostelqry + " Create table HT_Hostel_TransferDetails (TransferCodePk BigInt IDENTITY(1,1),App_no bigint,TransferDate datetime,From_HostelFk bigint,To_HostelFk bigint,Trans_Reasoncode bigint,From_BuildingFk bigint,To_BuildingFk bigint,From_FloorFk bigint,To_FloorFk bigint,From_RoomFk bigint,To_RoomFk bigint )";
            }
            string studitemreq = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StudItemRequestMaster'");
            if (studitemreq == "0")
            {
                hostelqry = hostelqry + " Create table StudItemRequestMaster (StudItemRequestMasterID Numeric IDENTITY(1,1),Roll_No nvarchar(60),ReqDate datetime,TotItemQty numeric,AppStaffCode nvarchar(60),AppStatus tinyint,App_no bigint)";
            }
            string StudItemMaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HM_StudItemMaster'");
            if (StudItemMaster == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE HM_StudItemMaster(StudItemMasterPK BigInt IDENTITY(1,1),StudItemCode BigInt,IsAddCharges Bit,PayMethod tinyint,PayAmount Decimal(12,2),HeaderFK BigInt,LedgerFK BigInt,StudItemDesc BigInt)";
            }
            string ItemRate_Master = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ItemRate_Master'");
            if (ItemRate_Master == "0")
            {
                hostelqry = hostelqry + " CREATE TABLE ItemRate_Master(ItemRatePK BigInt IDENTITY(1,1),ItemFK BigInt,Rpu_Date datetime,RPU Decimal(12,2))";
            }
            string StudItemRequestDetail = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StudItemRequestDetail'");
            if (StudItemRequestDetail == "0")
            {
                hostelqry = hostelqry + " Create table StudItemRequestDetail(StudItemRequestMasterID Numeric,StudItemMasterID Numeric,StudItemReqQty Numeric,StudItemSpec nvarchar(200),StudItemAppQty Numeric,AppStatus tinyint)";
            }
            if (hostelqry != "")
            {
                hostel = d2.update_method_wo_parameter(hostelqry, "Text");
            }
            hostelqry = string.Empty;
            string HostelInOutTimes = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Hostel_InOut_Time'");
            if (HostelInOutTimes == "0")
            {
                hostelqry = " CREATE TABLE Hostel_InOut_Time(Hostel_Code int,Out_Time Datetime,Grace_Time Datetime,ExtGrace_Time Datetime,In_Time Datetime,Permission_Time Datetime,Late_Time Datetime,Tot_Late int,Tot_Per int,Manual_Setting int,Manual_Late nvarchar(100),Manual_Permission nvarchar(100),College_Code nvarchar(20))";
            }
            if (hostelqry != "")
            {
                hostel = d2.update_method_wo_parameter(hostelqry, "Text");
            }
            string impdt = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ImportExcelName'");
            if (impdt == "0")
            {
                string InsQ = " create table ImportExcelName(InsertType nvarchar(100),ExcelName nvarchar(max),ColumnName nvarchar(max),Mandatorycolumns nvarchar(max),ExcelMandatorycolumn nvarchar(MAX),Excelcolumnname nvarchar(max))";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //28
            string impoRt = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_import_status'");
            if (impoRt == "0")
            {
                string InsQ = "  create table tbl_import_status(module_name nvarchar(50),college_code int,batch_year int,degree_code int,semester int,import_date datetime,import_time datetime,is_complete bit)";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            //alter hostel
            string hst_alterquery = string.Empty;
            string MenuName = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HM_MenuMaster' AND COLUMN_NAME = 'MenuName'");
            if (MenuName == "0")
            {
                hst_alterquery = hst_alterquery + " Alter table HM_MenuMaster alter column MenuName nvarchar(max) ";
            }
            string hostinssett = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HostelIns_settings' AND COLUMN_NAME = 'daily_consumption'");
            if (hostinssett == "0")
            {
                hst_alterquery = hst_alterquery + " alter table HostelIns_settings add daily_consumption nvarchar(200)";
            }
            string sessionmster = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HM_SessionMaster' AND COLUMN_NAME = 'SessionCloseExtTime'");
            if (sessionmster == "0")
            {
                hst_alterquery = hst_alterquery + "  alter table HM_SessionMaster alter column SessionCloseExtTime nvarchar(80)  ";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='messbill_detail'");
            if (find_tablename != "0")
            {
                string mesbildet = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'messbill_detail' AND COLUMN_NAME = 'Rebete_days'");
                if (mesbildet == "0")
                {
                    hst_alterquery = hst_alterquery + "  alter table messbill_detail add Rebete_days int  ";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Hostel_Expenses'");
            if (find_tablename != "0")
            {
                string hstexpens = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hostel_Expenses' AND COLUMN_NAME = 'Expanse_type'");
                if (hstexpens == "0")
                {
                    hst_alterquery = hst_alterquery + "  alter table Hostel_Expenses add Expanse_type tinyint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'messdividing_details'");
            if (find_tablename != "0")
            {
                string noofdays = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'messdividing_details' AND COLUMN_NAME = 'noofdays'");
                if (noofdays == "0")
                {
                    hst_alterquery = hst_alterquery + "  alter table messdividing_details add noofdays int,studstrength bigint,mandays bigint,incgroupcode nvarchar(max),expgroupcode nvarchar(max)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MessBill_Detail'");
            if (find_tablename != "0")
            {
                string Charges = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MessBill_Detail' AND COLUMN_NAME = 'Charges'");
                if (Charges == "0")
                {
                    hst_alterquery = hst_alterquery + "  alter table MessBill_Detail add Charges decimal";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='goods_inward'");
            if (find_tablename != "0")
            {
                string vendor_code = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'goods_inward' AND COLUMN_NAME = 'vendor_code'");
                if (vendor_code == "0")
                {
                    hst_alterquery = hst_alterquery + "  alter table goods_inward add vendor_code nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='item_master'");
            if (find_tablename != "0")
            {
                string subh_code = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'item_master' AND COLUMN_NAME = 'subheader_code'");
                if (subh_code == "0")
                {
                    hst_alterquery = hst_alterquery + " alter table item_master add subheader_code numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MessBill_Master'");
            if (find_tablename != "0")
            {
                string GrpCode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MessBill_Master' AND COLUMN_NAME = 'GroupCode'");
                if (GrpCode == "0")
                {
                    hst_alterquery = hst_alterquery + "  Alter Table MessBill_Master Add GroupCode nvarchar(300)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MessBill_Detail'");
            if (find_tablename != "0")
            {
                string groupamt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MessBill_Detail' AND COLUMN_NAME = 'GroupAmount'");
                if (groupamt == "0")
                {
                    hst_alterquery = hst_alterquery + " Alter Table MessBill_Detail Add GroupAmount nvarchar(300)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Room_Detail'");
            if (find_tablename != "0")
            {
                string Roompk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Room_Detail' AND COLUMN_NAME = 'Roompk'");
                if (Roompk == "0")
                {
                    hst_alterquery = hst_alterquery + " alter table Room_Detail add Roompk bigint identity(1,1)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hostel_GuestReg'");
            if (find_tablename != "0")
            {
                string Frm_Company = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hostel_GuestReg' AND COLUMN_NAME = 'From_Company'");
                if (Frm_Company == "0")
                {
                    hst_alterquery = hst_alterquery + " alter table Hostel_GuestReg alter column From_Company varchar(500)";
                }
                string DesigCode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hostel_GuestReg' AND COLUMN_NAME = 'Desig_Code'");
                if (DesigCode == "0")
                {
                    hst_alterquery = hst_alterquery + " alter table Hostel_GuestReg alter column Desig_Code varchar(500)";
                }
                string Purpos = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hostel_GuestReg' AND COLUMN_NAME = 'Purpose'");
                if (Purpos == "0")
                {
                    hst_alterquery = hst_alterquery + " alter table Hostel_GuestReg alter column Purpose varchar(500)";
                }
                string GuestCode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hostel_GuestReg' AND COLUMN_NAME = 'GuestCode'");
                if (GuestCode == "0")
                {
                    hst_alterquery = hst_alterquery + " alter table Hostel_GuestReg add GuestCode bigint identity (1,1)";
                }
                string roomtype = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hostel_GuestReg' AND COLUMN_NAME = 'room_type'");
                if (roomtype == "0")
                {
                    hst_alterquery = hst_alterquery + " alter table Hostel_GuestReg add room_type varchar(100)";
                }
                string dpt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hostel_GuestReg' AND COLUMN_NAME = 'department'");
                if (dpt == "0")
                {
                    hst_alterquery = hst_alterquery + " alter table Hostel_GuestReg add department varchar(100)";
                }
                string district = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hostel_GuestReg' AND COLUMN_NAME = 'district'");
                if (district == "0")
                {
                    hst_alterquery = hst_alterquery + " alter table Hostel_GuestReg add district varchar(100)";
                }
                string State = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hostel_GuestReg' AND COLUMN_NAME = 'State'");
                if (State == "0")
                {
                    hst_alterquery = hst_alterquery + " alter table Hostel_GuestReg add State varchar(100)";
                }
                string isvacate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hostel_GuestReg' AND COLUMN_NAME = 'isvacate'");
                if (isvacate == "0")
                {
                    hst_alterquery = hst_alterquery + " alter table Hostel_GuestReg add isvacate bit";
                }
                string vactdate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hostel_GuestReg' AND COLUMN_NAME = 'vacate_date'");
                if (vactdate == "0")
                {
                    hst_alterquery = hst_alterquery + " alter table Hostel_GuestReg add vacate_date datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'DailyConsumption_Detail'");
            if (find_tablename != "0")
            {
                string isreturn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'DailyConsumption_Detail' AND COLUMN_NAME = 'isreturn'");
                if (isreturn == "0")
                {
                    hst_alterquery = hst_alterquery + " alter table DailyConsumption_Detail add isreturn bit";
                }
                string adjust = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'DailyConsumption_Detail' AND COLUMN_NAME = 'Isadjust'");
                if (adjust == "0")
                {
                    hst_alterquery = hst_alterquery + " alter table DailyConsumption_Detail add Isadjust bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MessBill_Master'");
            if (find_tablename != "0")
            {
                string Mesbilmasterid = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MessBill_Master' AND COLUMN_NAME = 'Messbillmasterid'");
                if (Mesbilmasterid == "0")
                {
                    hst_alterquery = hst_alterquery + " alter table MessBill_Master add Messbillmasterid numeric identity(1,1)";
                }
            }
            string HstlbulFK = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HM_HostelMaster' AND COLUMN_NAME = 'HostelBuildingFK'");
            if (HstlbulFK == "0")
            {
                hst_alterquery = hst_alterquery + " Alter table HM_HostelMaster alter column HostelBuildingFK nvarchar(200)";
            }
            string ScheduleType = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_MenuSchedule' AND COLUMN_NAME = 'ScheduleType'");
            if (ScheduleType == "0")
            {
                hst_alterquery = hst_alterquery + " Alter table HT_MenuSchedule add ScheduleType tinyint,MenuScheduleday nvarchar(30),hostler varchar(10),DayScholor varchar(10),Staffcount varchar(10),Guestcount varchar(10),change_strength varchar(50)";
            }
            string Isadjust = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_DailyConsumptionDetail' AND COLUMN_NAME = 'Isadjust'");
            if (Isadjust == "0")
            {
                hst_alterquery = hst_alterquery + " alter table HT_DailyConsumptionDetail add Isadjust bit,Adjust_Qty decimal,Isreturn bit,Return_Qty decimal(12,2)";
            }
            string TtlPresent = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_DailyConsumptionMaster' AND COLUMN_NAME = 'Total_Present'");
            if (TtlPresent == "0")
            {
                hst_alterquery = hst_alterquery + " alter table HT_DailyConsumptionMaster add Total_Present bigint ";
            }
            string RbtDetailPK = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_HostelRebateDetail' AND COLUMN_NAME = 'RebateDetailPK'");
            if (RbtDetailPK == "0")
            {
                hst_alterquery = hst_alterquery + " Alter Table HT_HostelRebateDetail Add RebateDetailPK BigInt Identity(1,1) ";
            }
            string Stdaddpk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_StudAdditionalDet' AND COLUMN_NAME = 'StudAdditionalpk'");
            if (Stdaddpk == "0")
            {
                hst_alterquery = hst_alterquery + " Alter Table HT_StudAdditionalDet Add StudAdditionalpk BigInt Identity(1,1) ";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HMessbill_StudDetails'");
            if (find_tablename != "0")
            {
                string StudStrength = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HMessbill_StudDetails' AND COLUMN_NAME = 'StudStrength'");
                if (StudStrength == "0")
                {
                    hst_alterquery = hst_alterquery + " Alter table HMessbill_StudDetails add StudStrength int,ManDays int";
                }
                string GroupCode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_MessBillMaster' AND COLUMN_NAME = 'GroupCode'");
                if (GroupCode == "0")
                {
                    hst_alterquery = hst_alterquery + " Alter Table HT_MessBillMaster Add GroupCode nvarchar(300)";
                }
                string GrpAmount = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_MessBillDetail' AND COLUMN_NAME = 'GroupAmount'");
                if (GrpAmount == "0")
                {
                    hst_alterquery = hst_alterquery + " Alter Table HT_MessBillDetail Add GroupAmount nvarchar(300)";
                }
                string inc_cod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HMessbill_StudDetails' AND COLUMN_NAME = 'incGroupCode'");
                if (inc_cod == "0")
                {
                    hst_alterquery = hst_alterquery + " Alter Table HMessbill_StudDetails Add incGroupCode nvarchar(300)";
                }
                string ExpGrpcod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HMessbill_StudDetails' AND COLUMN_NAME = 'ExpGroupCode'");
                if (ExpGrpcod == "0")
                {
                    hst_alterquery = hst_alterquery + " Alter Table HMessbill_StudDetails Add ExpGroupCode nvarchar(300)";
                }
            }
            string MessType = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HostelMessSettings' AND COLUMN_NAME = 'MessType'");
            if (MessType == "0")
            {
                hst_alterquery = hst_alterquery + " Alter Table HostelMessSettings Add MessType bit";
            }
            string MessAmt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HostelMessSettings' AND COLUMN_NAME = 'MessAmt'");
            if (MessAmt == "0")
            {
                hst_alterquery = hst_alterquery + " Alter Table HostelMessSettings Add MessAmt Decimal(12,2)";
            }
            string Messmonth = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HostelMessSettings' AND COLUMN_NAME = 'Messmonth'");
            if (Messmonth == "0")
            {
                hst_alterquery = hst_alterquery + " Alter Table HostelMessSettings Add Messmonth int";
            }
            string MessYear = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HostelMessSettings' AND COLUMN_NAME = 'MessYear'");
            if (MessYear == "0")
            {
                hst_alterquery = hst_alterquery + " Alter Table HostelMessSettings Add MessYear int";
            }
            string includeGuest = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HostelMessSettings' AND COLUMN_NAME = 'includeGuest'");
            if (includeGuest == "0")
            {
                hst_alterquery = hst_alterquery + " alter table HostelMessSettings add includeGuest bit";
            }
            string inc_adjustexe = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HostelMessSettings' AND COLUMN_NAME = 'includeAdjustexe'");
            if (inc_adjustexe == "0")
            {
                hst_alterquery = hst_alterquery + " alter table HostelMessSettings add includeAdjustexe bit";
            }
            string Msgntype = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HostelMessSettings' AND COLUMN_NAME = 'Messgen_type'");
            if (Msgntype == "0")
            {
                hst_alterquery = hst_alterquery + " alter table HostelMessSettings add Messgen_type bit";
            }
            string mnudate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HM_MenuCostMaster' AND COLUMN_NAME = 'Menucost_Date'");
            if (mnudate == "0")
            {
                hst_alterquery = hst_alterquery + " alter table HM_MenuCostMaster add Menucost_Date datetime";
            }
            string clgcod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_HostelRegistration' AND COLUMN_NAME = 'CollegeCode'");
            if (clgcod == "0")
            {
                hst_alterquery = hst_alterquery + " Alter table HT_HostelRegistration Add CollegeCode bigint  ";
            }
            //
            string Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D1E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D1E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D2E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D2E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D3E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D3E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D4E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D4E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D5E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D5E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D6E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D6E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D7E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D7E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D8E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D8E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D9E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D9E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D10E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D10E smallint  ";
            //11
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D11E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D11E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D12E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D12E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D13E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D13E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D14E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D14E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D15E'");
            if (clgcod == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D15E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D16E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D16E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D17E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D17E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D18E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D18E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D19E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D19E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D20E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D20E smallint  ";
            //21
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D21E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D21E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D22E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D22E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D23E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D23E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D24E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D24E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D25E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D25E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D26E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D26E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D27E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D27E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D28E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D28E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D29E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D29E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Attendance' AND COLUMN_NAME = 'D30E'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter Table HT_Attendance Add D30E smallint  ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_import_status' AND COLUMN_NAME = 'semester'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter table tbl_import_status add semester nvarchar(20) ";
            else
                hst_alterquery = hst_alterquery + " Alter table tbl_import_status alter column semester nvarchar(20) ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_import_status' AND COLUMN_NAME = 'HeaderFK'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter table tbl_import_status add HeaderFK bigint ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_HostelExpenses' AND COLUMN_NAME = 'HostelExpensePk'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + "  ALTER TABLE HT_HostelExpenses ADD HostelExpensePk BigInt identity(1,1) ";
            Hstl = string.Empty;
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_import_status' AND COLUMN_NAME = 'LedgerFk'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter table tbl_import_status add LedgerFk bigint ";
            if (hst_alterquery != "")
            {
                int hstlalter = d2.update_method_wo_parameter(hst_alterquery, "Text");
            }
            // Added by jairam
            Hstl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_DailyConsumptionMaster' AND COLUMN_NAME = 'MenumasterFK'");
            if (Hstl == "0")
                hst_alterquery = hst_alterquery + " Alter table HT_DailyConsumptionMaster add MenumasterFK bigint";
            if (hst_alterquery != "")
            {
                int hstlalter = d2.update_method_wo_parameter(hst_alterquery, "Text");
            }
            string RoomCost_Master = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RoomCost_Master'");
            if (RoomCost_Master.Trim() != "0")
            {
                string college_cod = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RoomCost_Master' AND COLUMN_NAME = 'College_code'"); int rese = 0;
                if (college_cod == "0")
                {
                    rese = d2.update_method_wo_parameter(" alter table RoomCost_Master add College_code int", "Text");
                }
                string Rent_Type = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RoomCost_Master' AND COLUMN_NAME = 'Rent_Type'");
                if (Rent_Type == "0")
                    rese = d2.update_method_wo_parameter("ALTER table RoomCost_Master alter column Rent_Type tinyint", "text");
            }
            string HM_MenuItemMaster = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HM_MenuItemMaster'");
            if (HM_MenuItemMaster.Trim() != "0")
            {
                string MessMasterFK = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HM_MenuItemMaster' AND COLUMN_NAME = 'MessMasterFK'"); int rese = 0;
                if (MessMasterFK == "0")
                {
                    rese = d2.update_method_wo_parameter("  alter table HM_MenuItemMaster add MessMasterFK bigint", "Text");
                }
            }
            string HT_Menu_purchase = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Menu_purchase'");
            if (HT_Menu_purchase.Trim() == "0")
            {
                int rese = 0;
                rese = d2.update_method_wo_parameter(" Create table HT_Menu_purchase(MenuPurchasePK bigint identity(1,1) constraint pk_MenuPurchase Primary Key, Appno bigint,SessionFK bigint,MemType tinyint,OthersName nvarchar(200),OrderDate datetime,CanteenFK bigint)", "Text");
            }
            string HT_Menu_purchase_det = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_Menu_purchase_det'");
            if (HT_Menu_purchase_det.Trim() == "0")
            {
                int rese = 0;
                rese = d2.update_method_wo_parameter(" Create table HT_Menu_purchase_det (MenuPurchaseFK bigint FOREIGN KEY References HT_Menu_purchase(MenuPurchasePK),MenuFK bigint,OrderQty Decimal(12,2),OrderCost Decimal(12,2))", "Text");
            }
            string Registration = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration'");
            if (Registration.Trim() != "0")
            {
                string hostel_admission_status = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'hostel_admission_status'"); int rese = 0;
                if (hostel_admission_status == "0")
                {
                    rese = d2.update_method_wo_parameter(" Alter table Registration add hostel_admission_status tinyint", "Text");
                }
            }
            string rgs = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Room_Detail '");
            if (rgs.Trim() != "0")
            {
                string hostel_admission_status = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Room_Detail' AND COLUMN_NAME = 'MaxStudClassStrength'"); int rese = 0;
                if (hostel_admission_status == "0")
                {
                    rese = d2.update_method_wo_parameter(" alter table Room_Detail add MaxStudClassStrength numeric", "Text");
                }
            }
            string messset = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HostelMess_Attendance'");
            if (messset.Trim() != "0")
            {
                string mess_tableapp_no = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HostelMess_Attendance' AND COLUMN_NAME = 'App_No'"); int rese = 0;
                if (mess_tableapp_no == "0")
                {
                    rese = d2.update_method_wo_parameter(" Alter table HostelMess_Attendance add App_No bigint", "Text");
                }
            }
            string hostelinsset = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'hostelins_settings'");
            if (hostelinsset.Trim() != "0")
            {
                string hostelins_settings = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'hostelins_settings' AND COLUMN_NAME = 'Mess_attendance_set'"); int rese = 0;
                if (hostelins_settings == "0")
                {
                    rese = d2.update_method_wo_parameter(" Alter table hostelins_settings add Mess_attendance_set nvarchar(100)", "Text");
                }
            }
            // Added by jairam HR Staff Master Alter Query
            hostelinsset = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration'");
            if (hostelinsset.Trim() != "0")
            {
                string hostelins_settings = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'Is_Stud_Staff'"); int rese = 0;
                if (hostelins_settings == "0")
                {
                    rese = d2.update_method_wo_parameter(" alter table Registration add Is_Stud_Staff bit", "Text");
                }
            }

            hostelinsset = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration'");
            if (hostelinsset.Trim() != "0")
            {
                string hostelins_settings = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'staff_appl_id'"); int rese = 0;
                if (hostelins_settings == "0")
                {
                    rese = d2.update_method_wo_parameter(" alter table Registration add staff_appl_id numeric", "Text");
                }
            }

            hostelinsset = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_HostelRegistration'");
            if (hostelinsset.Trim() != "0")
            {
                string hostelins_settings = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HT_HostelRegistration' AND COLUMN_NAME = 'Serial_No'"); int rese = 0;
                if (hostelins_settings == "0")
                {
                    rese = d2.update_method_wo_parameter(" Alter table HT_HostelRegistration Add Serial_No nvarchar(50)", "Text");
                }
            }
            //20.07.17
            ExecuteQuery("Create table HT_HostelStudMenuStrength(MenuscheduleFK bigint,HostelVegCount bigint default 0,HostelNonvegCount bigint default 0,DayscholorVegCount bigint default 0,DayscholorNonvegCount bigint default 0,GuestVegCount bigint default 0,GuestNonvegCount bigint default 0,StaffVegCount bigint default 0,StaffNonvegCount bigint default 0)", "HT_HostelStudMenuStrength");
            ExecuteQuery(" Alter table HT_DailyConsumptionMaster add VegStrength bigint", "HT_DailyConsumptionMaster", "VegStrength", 1);
            ExecuteQuery(" Alter table HT_DailyConsumptionMaster add NonvegStrength bigint", "HT_DailyConsumptionMaster", "NonvegStrength", 1);
            ExecuteQuery(" Alter table HT_DailyConsumptionDetail add Menutype tinyint", "HT_DailyConsumptionDetail", "Menutype", 1);
            ExecuteQuery(" Alter table HMessbill_StudDetails add MessType tinyint", "HMessbill_StudDetails", "MessType", 1);

            ExecuteQuery("Alter table HT_DailyConsumptionMaster Add PurposeCatagory bigint", "HT_DailyConsumptionMaster", "PurposeCatagory", 1);
            ExecuteQuery("create table HT_HostelMenupurposeStrength(MenuscheduleFK bigint,PurposeCode bigint,VegCount bigint,NonVegCount bigint)", "HT_HostelMenupurposeStrength");

            ///// End  
            string qry = "if exists (select * from IPatchStatus where ModuleName='Hostel') update IPatchStatus set ClientUpdatedDate='" + DateTime.Now.ToString("yyyy/MM/dd") + "' where ModuleName='Hostel' ";
            int res = d2.update_method_wo_parameter(qry, "Text");
            if (res != 0)
            {
                alertmessage.Visible = true;
                lbl_alerterror.Text = " Updated Successfully";
            }
            bindgrid();
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void FB_query_creation()
    {
        try
        {
            string markmaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CO_MarkMaster'");
            string questionmaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CO_QuestionMaster'");
            string fbquestion = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CO_FeedBackQuestions'");
            string studfb = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CO_StudFeedBack'");
            string fbmaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CO_FeedBackMaster'");
            string unikcod = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CO_FeedbackUniCode'");
            string selvamfb = string.Empty;
            if (markmaster == "0")
            {
                selvamfb = " CREATE TABLE CO_MarkMaster(MarkMasterPK BigInt IDENTITY(1,1) Primary Key,MarkTypeAcr nvarchar(10),MarkType nvarchar(50),Point int,CollegeCode int)";
            }
            if (questionmaster == "0")
            {
                selvamfb = selvamfb + " CREATE TABLE CO_QuestionMaster(QuestionMasterPK BigInt IDENTITY(1,1) Primary Key,HeaderCode BigInt,Question nvarchar(1000),QuestRange BigInt,CollegeCode int,QuestType bigint)";
            }
            if (fbquestion == "0")
            {
                selvamfb = selvamfb + " CREATE TABLE CO_FeedBackQuestions(FeedBackMasterFK BigInt,QuestionMasterFK BigInt)";
            }
            if (studfb == "0")
            {
                selvamfb = selvamfb + " CREATE TABLE CO_StudFeedBack(App_No BigInt,FeedBackMasterFK BigInt,QuestionMasterFK BigInt,MarkMasterPK BigInt,StaffApplNo BigInt,SubjectNo BigInt,FeedbackUnicode varchar(20))";
            }
            if (fbmaster == "0")
            {
                selvamfb = selvamfb + " CREATE TABLE CO_FeedBackMaster(FeedBackMasterPK BigInt IDENTITY(1,1) Primary Key,FeedBackType tinyint,Batch_Year int,DegreeCode int,Section nvarchar(5),semester int,FeedBackName nvarchar(200),StartDate Datetime,EndDate Datetime,CollegeCode int,InclueCommon Bit,Subject_Type nvarchar(max))";
            }
            if (unikcod == "0")
            {
                selvamfb = selvamfb + " Create Table CO_FeedbackUniCode (FeedbackUnicodePK bigint identity(1,1),FeedbackUnicode varchar(50),FeedbackMasterFK bigint,IsCheckFlag bit,UnicodeAcr varchar(20))";
                //,UniCodeStartNO int
            }
            if (selvamfb != "")
            {
                int feedback = d2.update_method_wo_parameter(selvamfb, "Text");
            }
            string qstType = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CO_QuestionMaster' AND COLUMN_NAME = 'QuestType'");
            string fbuniq = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CO_StudFeedBack' AND COLUMN_NAME = 'FeedbackUnicode'");
            string unicacr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CO_FeedbackUniCode' AND COLUMN_NAME = 'UnicodeAcr'");
            string unicstartno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CO_FeedbackUniCode' AND COLUMN_NAME = 'UniCodeStartNO'");
            string optionsubject = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CO_FeedBackMaster' AND COLUMN_NAME = 'OptionalSubject_type'");
            string sub_type = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CO_FeedBackMaster' AND COLUMN_NAME = 'Subject_Type'");
            string incomn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CO_FeedBackMaster' AND COLUMN_NAME = 'InclueCommon'");
            string alterquery = string.Empty;
            if (qstType == "0")
            {
                alterquery = alterquery + " alter table CO_QuestionMaster add QuestType bigint ";
            }
            if (fbuniq == "0")
            {
                alterquery = alterquery + " alter table CO_StudFeedBack Add FeedbackUnicode varchar(20)";
            }
            if (unicacr == "0")
            {
                alterquery = alterquery + " alter table CO_FeedbackUniCode  add UnicodeAcr varchar(20)";
            }
            if (unicstartno == "0")
            {
                alterquery = alterquery + " alter table CO_FeedbackUniCode  add UniCodeStartNO int";
            }
            if (optionsubject == "0")
            {
                alterquery = alterquery + " alter table CO_FeedBackMaster add OptionalSubject_type varchar(Max)";
            }
            if (sub_type == "0")
            {
                alterquery = alterquery + " alter table CO_FeedBackMaster add Subject_Type nvarchar(max)";
            }
            if (incomn == "0")
            {
                alterquery = alterquery + " alter table CO_FeedBackMaster add InclueCommon Bit";
            }
            if (alterquery != "")
            {
                int feedback = d2.update_method_wo_parameter(alterquery, "Text");
            }
            string qry = "if exists (select * from IPatchStatus where ModuleName='FeedBack') update IPatchStatus set ClientUpdatedDate='" + DateTime.Now.ToString("yyyy/MM/dd") + "' where ModuleName='FeedBack' ";
            int res = d2.update_method_wo_parameter(qry, "Text");
            if (res != 0)
            {
                alertmessage.Visible = true;
                lbl_alerterror.Text = " Updated Successfully";
            }
            bindgrid();
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void request()
    {
        try
        {
            string requst = string.Empty;
            string RequestHierarchy = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RQ_RequestHierarchy'");
            if (RequestHierarchy == "0")
            {
                requst = requst + " CREATE TABLE RQ_RequestHierarchy(RequestHierarchyPK BigInt IDENTITY(1,1) CONSTRAINT PKReqHierarchy PRIMARY KEY,RequestType Bigint,ReqStaffAppNo BigInt,ReqApproveStateCount int,ReqApproveStage int,ReqAppStaffAppNo BigInt,ReqAppPriority int,CollegeCode int)";
            }
            string RQ_Requisition = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RQ_Requisition'");
            if (RQ_Requisition == "0")
            {
                requst = requst + " CREATE TABLE RQ_Requisition(RequisitionPK BigInt IDENTITY(1,1) Constraint PKRequisition PRIMARY KEY,RequestType BigInt,RequestCode nvarchar(20),RequestDate Datetime,ReqStaffAppNo BigInt,ReqApproveStage int Default 1,ReqAppStatus tinyint Default 0,OrderStatus Bit Default 0,InwardStatus Bit Default 0,ReqAppStaffAppNo Bigint,ReqExpectedDate Datetime,ReqExpectedTime nvarchar(20),VendorFK BigInt,VendorContactFK BigInt,MeetToStaff Bit,MeetToDept Bit,MeetStaffAppNo nvarchar(30),MeetDeptCode nvarchar(30),ReqComplaints BigInt,ReqComplaintSub nvarchar(100),ReqSuggestions Bigint,Remarks nvarchar(200))";
            }
            string RequestionAppr = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RQ_RequestionApprove'");
            if (RequestionAppr == "0")
            {
                requst = requst + " CREATE TABLE RQ_RequestionApprove(ReqApproveDate Datetime,ReqApproveStage int,ReqAppPriority int,ReqAppStaffAppNo BigInt,ReqAppStatus tinyint,RequisitionFK BigInt FOREIGN KEY References RQ_Requisition(RequisitionPK))";
            }
            //15.07.16
            string RQ_ReqApprovalDetails = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RQ_ReqApprovalDetails'");
            if (RQ_ReqApprovalDetails == "0")
            {
                requst = requst + "create table RQ_ReqApprovalDetails (ReqFK bigint,ReqApproveStaffappNo bigint,ReqApproveStaffStage int,ApproveStaffPriority int,ApproveReason varchar(max))";
            }
            if (requst != "")
            {
                int req = d2.update_method_wo_parameter(requst, "Text");
            }
            //RQ_Requisition alterrequst
            string alterrequst = string.Empty;
            string vactdate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'ReqAppNo'");
            if (vactdate == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  ReqAppNo bigint";
            }
            string MemType = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'MemType'");
            if (MemType == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  MemType tinyint";
            }
            string ReqstBy = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'RequestBy'");
            if (ReqstBy == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  RequestBy bigint";
            }
            string Vndrrqustyp = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'VendorReq_Type'");
            if (Vndrrqustyp == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  VendorReq_Type tinyint";
            }
            //15.07.16
            string ReqFromDate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'ReqFromDate'");
            if (ReqFromDate == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  ReqFromDate Datetime";
            }
            string ReqToDate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'ReqToDate'");
            if (ReqToDate == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  ReqToDate Datetime";
            }
            string ReqEventName = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'ReqEventName'");
            if (ReqEventName == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  ReqEventName nvarchar(200)";
            }
            string ReqLocType = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'ReqLocType'");
            if (ReqLocType == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  ReqLocType tinyint";
            }
            string EventType = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'EventType'");
            if (EventType == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  EventType tinyint";
            }
            string IsCommonParticipate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'IsCommonParticipate'");
            if (IsCommonParticipate == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  IsCommonParticipate BigInt";
            }
            string AddInformation = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'AddInformation'");
            if (AddInformation == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  AddInformation varchar(200)";
            }
            string HalfDate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'HalfDate'");
            if (HalfDate == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  HalfDate datetime";
            }
            string leaveChangeReason = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'leaveChangeReason'");
            if (leaveChangeReason == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  leaveChangeReason nvarchar(200)";
            }
            string IsHalfDay = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'IsHalfDay'");
            if (IsHalfDay == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  IsHalfDay bit";
            }
            string college_code = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'college_code'");
            if (college_code == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  college_code int";
            }
            string RequestMode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'RequestMode'");
            if (RequestMode == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  RequestMode bigint";
            }
            string LeaveMasterPK = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'leave_category' AND COLUMN_NAME = 'LeaveMasterPK'");
            if (LeaveMasterPK == "0")
            {
                alterrequst = alterrequst + " Alter table  leave_category add  LeaveMasterPK bigint IDENTITY(1,1) Primary Key";
            }
            string LeaveFrom = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'LeaveFrom'");
            if (LeaveFrom == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  LeaveFrom Datetime";
            }
            string LeaveMasterFK = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'LeaveMasterFK'");
            if (LeaveMasterFK == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  LeaveMasterFK BigInt";
            }
            string LeaveTo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'LeaveTo'");
            if (LeaveTo == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  LeaveTo Datetime";
            }
            string LeaveSession = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'LeaveSession'");
            if (LeaveSession == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  LeaveSession tinyint";
            }
            string GateReqExitDate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'GateReqExitDate'");
            if (GateReqExitDate == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  GateReqExitDate Datetime";
            }
            string GateReqExitTime = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'GateReqExitTime'");
            if (GateReqExitTime == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  GateReqExitTime nvarchar(20)";
            }
            string GateReqEntryDate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'GateReqEntryDate'");
            if (GateReqEntryDate == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  GateReqEntryDate datetime";
            }
            string GateReqEntryTime = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'GateReqEntryTime'");
            if (GateReqEntryTime == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  GateReqEntryTime nvarchar(20)";
            }
            string GateReqIsExtend = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'GateReqIsExtend'");
            if (GateReqEntryTime == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  GateReqIsExtend Bit";
            }
            string GateReqExtDate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'GateReqExtDate'");
            if (GateReqExtDate == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  GateReqExtDate Datetime";
            }
            string GateReqExtTime = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'GateReqExtTime'");
            if (GateReqExtTime == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  GateReqExtTime nvarchar(20)";
            }
            string GateReqReason = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'GateReqReason'");
            if (GateReqReason == "0")
            {
                alterrequst = alterrequst + " Alter table  RQ_Requisition add  GateReqReason BigInt";
            }
            //end RQ_Requisition
            if (alterrequst != "")
            {
                int altrreq = d2.update_method_wo_parameter(alterrequst, "Text");
            }
            string RQ_RequisitionDet = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RQ_RequisitionDet'");
            if (RQ_RequisitionDet == "0")
            {
                string q1 = " CREATE TABLE RQ_RequisitionDet(DeptFK BigInt,ItemFK BigInt FOREIGN KEY References IM_ItemMaster (ItemPK),ReqQty Decimal(12,2),AppQty Decimal(12,2),RejQty Decimal(12,2),OrderQty Decimal(12,2) Default 0,InwardQty Decimal(12,2)Default 0,ReceivedQty Decimal(12,2),ReqAppStatus tinyint Default 0,SugServiceLoc tinyint,SugVendorFK BigInt,Remarks nvarchar(200), RequisitionFK BigInt FOREIGN KEY References RQ_Requisition(RequisitionPK))";
                int e = d2.update_method_wo_parameter(q1, "Text");
            }
            string RQ_RequisitionDet_tbl = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RQ_RequisitionDet'");
            string alterrequstdet = string.Empty;
            if (RQ_RequisitionDet_tbl.Trim() != "0")
            {
                string EventDate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'EventDate'");
                if (EventDate == "0")
                {
                    alterrequstdet = alterrequstdet + " Alter Table RQ_RequisitionDet Add EventDate Datetime";
                }
                string EventName = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'EventName'");
                if (EventName == "0")
                {
                    alterrequstdet = alterrequstdet + " Alter Table RQ_RequisitionDet Add EventName nvarchar(200)";
                }
                string StartPeriod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'StartPeriod'");
                if (StartPeriod == "0")
                {
                    alterrequstdet = alterrequstdet + " Alter Table RQ_RequisitionDet Add StartPeriod nvarchar(20)";
                }
                string EndPeriod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'EndPeriod'");
                if (EndPeriod == "0")
                {
                    alterrequstdet = alterrequstdet + " Alter Table RQ_RequisitionDet Add EndPeriod nvarchar(20)";
                }
                string EventLocation = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'EventLocation'");
                if (EventLocation == "0")
                {
                    alterrequstdet = alterrequstdet + " Alter Table RQ_RequisitionDet Add EventLocation nvarchar(100)";
                }
                string StaffAppNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'StaffAppNo'");
                if (StaffAppNo == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_RequisitionDet add StaffAppNo BigInt";
                }
                string StartTime = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'StartTime'");
                if (StartTime == "0")
                {
                    alterrequstdet = alterrequstdet + " Alter Table RQ_RequisitionDet Add StartTime nvarchar(20)";
                }
                string EndTime = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'EndTime'");
                if (EndTime == "0")
                {
                    alterrequstdet = alterrequstdet + " Alter Table RQ_RequisitionDet Add EndTime nvarchar(20)";
                }
                string LocationType = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'LocationType'");
                if (LocationType == "0")
                {
                    alterrequstdet = alterrequstdet + " Alter Table RQ_RequisitionDet Add LocationType tinyint";
                }
                string OutdoorLoc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'OutdoorLoc'");
                if (OutdoorLoc == "0")
                {
                    alterrequstdet = alterrequstdet + " Alter Table RQ_RequisitionDet Add OutdoorLoc nvarchar(100)";
                }
                string BuildCode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'BuildCode'");
                if (BuildCode == "0")
                {
                    alterrequstdet = alterrequstdet + " Alter Table RQ_RequisitionDet Add BuildCode nvarchar(10)";
                }
                string FloorNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'FloorNo'");
                if (FloorNo == "0")
                {
                    alterrequstdet = alterrequstdet + " Alter Table RQ_RequisitionDet Add FloorNo nvarchar(10)";
                }
                string RoomNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'RoomNo'");
                if (RoomNo == "0")
                {
                    alterrequstdet = alterrequstdet + " Alter Table RQ_RequisitionDet Add RoomNo nvarchar(10)";
                }
                string NoOfAction = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'NoOfAction'");
                if (NoOfAction == "0")
                {
                    alterrequstdet = alterrequstdet + " Alter Table RQ_RequisitionDet Add NoOfAction int";
                }
                if (alterrequstdet != "")
                {
                    int altrreq = d2.update_method_wo_parameter(alterrequstdet, "Text");
                }
            }
            string RQ_ReqActionDet = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RQ_ReqActionDet'");
            if (RQ_ReqActionDet == "0")
            {
                string q1 = " CREATE TABLE RQ_ReqActionDet(ActionPK BigInt IDENTITY (1,1) PRIMARY KEY,ActionName Bigint,ACtionDesc nvarchar(100),StartTime nvarchar(20),EndTime nvarchar(20),LocationType tinyint,OutdoorLoc nvarchar(100),BuildCode nvarchar(10),FloorNo nvarchar(10),RoomNo nvarchar(10),RequisitionFK BigInt)";
                int e = d2.update_method_wo_parameter(q1, "Text");
            }
            string requestcreatetbl = string.Empty;
            string RQ_EventMemberDet = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RQ_EventMemberDet'");
            if (RQ_EventMemberDet == "0")
            {
                requestcreatetbl = requestcreatetbl + " CREATE TABLE RQ_EventMemberDet(MemType BigInt,BatchYear int,DegreeCode BigInt,Semester int,ApplNo BigInt,MemberAction tinyint,RequisitionFK Bigint,ActionFK BigInt,ActionType tinyint)";
            }
            string RQ_EventPreRequest = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RQ_EventPreRequest'");
            if (RQ_EventPreRequest == "0")
            {
                requestcreatetbl = requestcreatetbl + " CREATE TABLE RQ_EventPreRequest(ActivityName nvarchar(100),ActivityDesc nvarchar(300),StartDate Datetime,EndDate Datetime,RepresentApllNo BigInt,RequisitionFK Bigint)";
            }
            string RQ_EventMaterialReq = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RQ_EventMaterialReq'");
            if (RQ_EventMaterialReq == "0")
            {
                requestcreatetbl = requestcreatetbl + " CREATE TABLE RQ_EventMaterialReq(ItemFK BigInt,ReqQty Decimal(12,2),ExpectedDate Datetime,PurchaseStatus tinyint,RequisitionFK Bigint)";
            }
            string RQ_EventSponserDet = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RQ_EventSponserDet'");
            if (RQ_EventSponserDet == "0")
            {
                requestcreatetbl = requestcreatetbl + " CREATE TABLE RQ_EventSponserDet(SponserType tinyint,VendorFK BigInt,VendorContactFK BigInt,SponserAmount Decimal(12,2),RequisitionFK Bigint)";
            }
            string RQ_EventExpensesDet = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RQ_EventExpensesDet'");
            if (RQ_EventExpensesDet == "0")
            {
                requestcreatetbl = requestcreatetbl + " CREATE TABLE RQ_EventExpensesDet(ExpensesName BigInt,ExpensesDesc nvarchar(100),ExpAmount Decimal(12,2),RequisitionFK Bigint)";
            }
            string RQ_ReqEventDet = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RQ_ReqEventDet'");
            if (RQ_ReqEventDet == "0")
            {
                requestcreatetbl = requestcreatetbl + " CREATE TABLE RQ_ReqEventDet(ReqEventDetPK BigInt IDENTITY(1,1) PRIMARY KEY,RequisitionFK BigInt)";
            }
            if (requestcreatetbl.Trim() != "")
            {
                int sd = d2.update_method_wo_parameter(requestcreatetbl, "Text");
            }
            string resources = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_EventSponserDet' AND COLUMN_NAME = 'resources'");
            if (resources == "0")
            {
                int sd = d2.update_method_wo_parameter(" alter table  RQ_EventSponserDet add resources varchar(200)", "text");
            }
            string RQ_ReqEventDet_tbl = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RQ_ReqEventDet'");
            alterrequstdet = string.Empty;
            if (RQ_ReqEventDet_tbl.Trim() != "0")
            {
                string title = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'title'");
                if (title == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add title numeric";
                }
                string isnational = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'isnational'");
                if (title == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add isnational bit";
                }
                string Journal = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'Journal'");
                if (Journal == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add Journal varchar(200)";
                }
                string Im_Factor = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'Im_Factor'");
                if (Im_Factor == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add Im_Factor varchar(200)";
                }
                string ConferenceProceed = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'ConferenceProceed'");
                if (ConferenceProceed == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add ConferenceProceed varchar(200)";
                }
                string PatentNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'PatentNo'");
                if (PatentNo == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add PatentNo numeric";
                }
                string ApplicationNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'ApplicationNo'");
                if (ApplicationNo == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add ApplicationNo  numeric";
                }
                string AppDate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'AppDate'");
                if (AppDate == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add AppDate  datetime";
                }
                string AppStatus = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'AppStatus'");
                if (AppStatus == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add AppStatus varchar(200)";
                }
                string SeminarType = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'SeminarType'");
                if (SeminarType == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add SeminarType numeric";
                }
                string AwardCategory = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'AwardCategory'");
                if (AwardCategory == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add AwardCategory numeric";
                }
                string PrizeWon = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'PrizeWon'");
                if (PrizeWon == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add PrizeWon varchar(200)";
                }
                string Duration = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'Duration'");
                if (Duration == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add Duration varchar(200)";
                }
                string Work = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'Work'");
                if (Work == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add Work varchar(200)";
                }
                string Scholar = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'Scholar'");
                if (Scholar == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add Scholar varchar(200)";
                }
                string ProgName = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'ProgName'");
                if (ProgName == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add ProgName varchar(200)";
                }
                string MainSupervisor = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'MainSupervisor'");
                if (MainSupervisor == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add MainSupervisor varchar(200)";
                }
                string CoSupervisor = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'CoSupervisor'");
                if (CoSupervisor == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add CoSupervisor varchar(200)";
                }
                string Society = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'Society'");
                if (Society == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add Society varchar(200)";
                }
                string MembershipDet = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'MembershipDet'");
                if (MembershipDet == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add MembershipDet varchar(200)";
                }
                string Visitor = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'Visitor'");
                if (Visitor == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add Visitor varchar(200)";
                }
                string Organization = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'Organization'");
                if (Organization == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add Organization varchar(200)";
                }
                string Purpose = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'Purpose'");
                if (Purpose == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add Purpose varchar(200)";
                }
                string TourType = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'TourType'");
                if (TourType == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add TourType varchar(200)";
                }
                string Tournament = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'Tournament'");
                if (Tournament == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add Tournament varchar(200)";
                }
                string Game = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'Game'");
                if (Game == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add Game numeric";
                }
                string ActionName = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'ActionName'");
                if (ActionName == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add ActionName  varchar(200)";
                }
                string Conference = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'Conference'");
                if (Conference == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add Conference  varchar(200)";
                }
                string Workshoptype = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'Workshoptype'");
                if (Workshoptype == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add Workshoptype  varchar(200)";
                }
                string GL_title = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqEventDet' AND COLUMN_NAME = 'GL_title'");
                if (GL_title == "0")
                {
                    alterrequstdet = alterrequstdet + " alter table RQ_ReqEventDet add GL_title  varchar(200)";
                }
                if (alterrequstdet.Trim() != "")
                {
                    int dj = d2.update_method_wo_parameter(alterrequstdet, "text");
                }
            }
            alterrequstdet = string.Empty;
            string Filetype = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'Filetype'");
            if (Filetype == "0")
            {
                alterrequstdet = alterrequstdet + " alter table RQ_RequisitionDet add Filetype varchar(200)";
            }
            string FileName = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'FileName'");
            if (FileName == "0")
            {
                alterrequstdet = alterrequstdet + " alter table RQ_RequisitionDet add FileName varchar(200)";
            }
            string AttachDoc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'AttachDoc'");
            if (AttachDoc == "0")
            {
                alterrequstdet = alterrequstdet + " alter table RQ_RequisitionDet add AttachDoc varbinary(max)";
            }
            if (alterrequstdet.Trim() != "")
            {
                int dj = d2.update_method_wo_parameter(alterrequstdet, "text");
            }
            alterrequstdet = string.Empty;
            string AttachDoc_alter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'AttachDoc'");
            if (AttachDoc != "0")
            {
                alterrequstdet = alterrequstdet + " alter table RQ_RequisitionDet alter column AttachDoc varbinary(max)";
            }
            string BuildCode_alter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'BuildCode'");
            if (BuildCode_alter != "0")
            {
                alterrequstdet = alterrequstdet + " alter table RQ_RequisitionDet alter column BuildCode nvarchar(200)";
            }
            string MemberAction = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_EventMemberDet' AND COLUMN_NAME = 'MemberAction'");
            if (MemberAction != "0")
            {
                alterrequstdet = alterrequstdet + " alter table RQ_EventMemberDet alter column MemberAction bigint";
            }
            string Institution = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_EventMemberDet' AND COLUMN_NAME = 'Institution'");
            if (Institution == "0")
            {
                alterrequstdet = alterrequstdet + "  alter table RQ_EventMemberDet add Institution varchar(200)";
            }
            if (alterrequstdet.Trim() != "")
            {
                int dj = d2.update_method_wo_parameter(alterrequstdet, "text");
            }
            alterrequstdet = string.Empty;
            string LocationType_reactdet = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqActionDet' AND COLUMN_NAME = 'LocationType'");
            if (LocationType_reactdet == "0")
            {
                alterrequstdet = alterrequstdet + " alter table RQ_ReqActionDet add LocationType tinyint";
            }
            string OutdoorLocreqact = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqActionDet' AND COLUMN_NAME = 'OutdoorLoc'");
            if (OutdoorLocreqact == "0")
            {
                alterrequstdet = alterrequstdet + " alter table RQ_ReqActionDet add OutdoorLoc nvarchar(200)";
            }
            string BuildCodereqact = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqActionDet' AND COLUMN_NAME = 'BuildCode'");
            if (BuildCodereqact == "0")
            {
                alterrequstdet = alterrequstdet + " alter table RQ_ReqActionDet add BuildCode nvarchar(100)";
            }
            string OutdoorLocactreq = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqActionDet' AND COLUMN_NAME = 'BuildCode'");
            if (OutdoorLocactreq == "0")
            {
                alterrequstdet = alterrequstdet + " alter table RQ_ReqActionDet add BuildCode nvarchar(100)";
            }
            string FloorNoact = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqActionDet' AND COLUMN_NAME = 'FloorNo'");
            if (FloorNoact == "0")
            {
                alterrequstdet = alterrequstdet + " alter table RQ_ReqActionDet add FloorNo nvarchar(100)";
            }
            string RoomNoact = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqActionDet' AND COLUMN_NAME = 'RoomNo'");
            if (RoomNoact == "0")
            {
                alterrequstdet = alterrequstdet + " alter table RQ_ReqActionDet add RoomNo nvarchar(100)";
            }
            string RequisitionFK = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqActionDet' AND COLUMN_NAME = 'RequisitionFK'");
            if (RequisitionFK == "0")
            {
                alterrequstdet = alterrequstdet + " alter table RQ_ReqActionDet add RequisitionFK bigint";
            }
            string EventDateact = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqActionDet' AND COLUMN_NAME = 'EventDate'");
            if (EventDateact == "0")
            {
                alterrequstdet = alterrequstdet + "  alter table RQ_ReqActionDet add EventDate datetime";
            }
            if (alterrequstdet.Trim() != "")
            {
                int dj = d2.update_method_wo_parameter(alterrequstdet, "text");
            }
            alterrequstdet = string.Empty;
            string OutdoorLocacat = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'OutdoorLoc'");
            if (EventDateact != "0")
            {
                alterrequstdet = alterrequstdet + "  ALTER TABLE RQ_RequisitionDet ALTER COLUMN OutdoorLoc nvarchar(500)";
            }
            string FloorNoacts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'FloorNo'");
            if (FloorNoacts != "0")
            {
                alterrequstdet = alterrequstdet + "  ALTER TABLE RQ_RequisitionDet ALTER COLUMN FloorNo nvarchar(200)";
            }
            string RoomNoacts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequisitionDet' AND COLUMN_NAME = 'RoomNo'");
            if (RoomNoacts != "0")
            {
                alterrequstdet = alterrequstdet + "  ALTER TABLE RQ_RequisitionDet ALTER COLUMN RoomNo nvarchar(200)";
            }
            string RoomNoasd = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqActionDet' AND COLUMN_NAME = 'RoomNo'");
            if (RoomNoasd != "0")
            {
                alterrequstdet = alterrequstdet + "  ALTER TABLE RQ_ReqActionDet ALTER COLUMN RoomNo nvarchar(200)";
            }
            string BuildCodeasd = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqActionDet' AND COLUMN_NAME = 'BuildCode'");
            if (BuildCodeasd != "0")
            {
                alterrequstdet = alterrequstdet + "  ALTER TABLE RQ_ReqActionDet ALTER COLUMN BuildCode nvarchar(200)";
            }
            string floornoads = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqActionDet' AND COLUMN_NAME = 'floorno'");
            if (floornoads != "0")
            {
                alterrequstdet = alterrequstdet + "  ALTER TABLE RQ_ReqActionDet ALTER COLUMN floorno nvarchar(200)";
            }
            string OutdoorLocadd = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_ReqActionDet' AND COLUMN_NAME = 'OutdoorLoc'");
            if (OutdoorLocadd != "0")
            {
                alterrequstdet = alterrequstdet + "  ALTER TABLE RQ_ReqActionDet ALTER COLUMN OutdoorLoc nvarchar(500)";
            }
            if (alterrequstdet.Trim() != "")
            {
                int dj = d2.update_method_wo_parameter(alterrequstdet, "text");
            }
            alterrequstdet = string.Empty;
            string GateEntryExit = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='GateEntryExit'");
            if (GateEntryExit == "0")
            {
                alterrequstdet = alterrequstdet + "  CREATE TABLE GateEntryExit(GateEntryExitID numeric identity(1,1), GateMemType tinyint,GateType Bit,GatePassDate Datetime,GatePassTime nvarchar(30),App_No numeric,IsApproval Bit,GatePassApproval_code numeric,ExpectedDate Datetime,ExpectedTime nvarchar(30),Purpose nvarchar(100),ByVehcile Bit,IsCollVeh Bit,VehType nvarchar(20),VehId nvarchar(20),VehRegNo nvarchar(30),IsReturn Bit,IsAdmitedStud Bit,VisitorName nvarchar(100),StudName nvarchar(100),Add1 nvarchar(100),Add2 nvarchar(100),City nvarchar(100),District nvarchar(100),State nvarchar(100),MobileNo nvarchar(100),RelationShip nvarchar(30),ToMeet tinyint,BroughtBy nvarchar(100),MaterialType tinyint,PONo nvarchar(20),SupplierCode nvarchar(30),VisitorType tinyint,CompanyName nvarchar(100),VisitorDept nvarchar(100),VisitorDesig nvarchar(100),College_Code numeric)";
            }
            string GateEntryExitDet = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='GateEntryExitDet'");
            if (GateEntryExitDet == "0")
            {
                alterrequstdet = alterrequstdet + "  CREATE Table GateEntryExitDet(GateEntryExitID numeric,GateMemType tinyint,Staff_Code nvarchar(30),OtherName nvarchar(100),Relationship nvarchar(50),MobileNo nvarchar(20),Item_Code nvarchar(30),Item_Name nvarchar(100),ItemQty numeric,Unit nvarchar(10),SuppliedTo Bit,SupDeptCode nvarchar(30),SuggStaffCode nvarchar(30))";
            }
            if (alterrequstdet.Trim() != "")
            {
                int dj = d2.update_method_wo_parameter(alterrequstdet, "text");
            }
            alterrequstdet = string.Empty;
            string GatepassExitdate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'GateEntryExit' AND COLUMN_NAME = 'GatepassExitdate'");
            if (GatepassExitdate == "0")
            {
                alterrequstdet = alterrequstdet + "  alter table GateEntryExit add GatepassExitdate datetime";
            }
            string GatepassEntrydate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'GateEntryExit' AND COLUMN_NAME = 'GatepassEntrydate'");
            if (GatepassEntrydate == "0")
            {
                alterrequstdet = alterrequstdet + "  alter table GateEntryExit add GatepassEntrydate datetime";
            }
            string GatepassExittime = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'GateEntryExit' AND COLUMN_NAME = 'GatepassExittime'");
            if (GatepassExittime == "0")
            {
                alterrequstdet = alterrequstdet + "  alter table GateEntryExit add GatepassExittime nvarchar(60)";
            }
            string GatepassEntrytime = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'GateEntryExit' AND COLUMN_NAME = 'GatepassEntrytime'");
            if (GatepassEntrytime == "0")
            {
                alterrequstdet = alterrequstdet + "  alter table GateEntryExit add GatepassEntrytime nvarchar(60)";
            }
            string islate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'GateEntryExit' AND COLUMN_NAME = 'islate'");
            if (islate == "0")
            {
                alterrequstdet = alterrequstdet + "  alter table GateEntryExit add islate bit";
            }
            string RequestFk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'GateEntryExit' AND COLUMN_NAME = 'RequestFk'");
            if (RequestFk == "0")
            {
                alterrequstdet = alterrequstdet + " alter table GateEntryExit add RequestFk bigint";
            }
            // Added  Leave Request Alter Query 02-03-2017
            RequestFk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_Requisition' AND COLUMN_NAME = 'HodAlterInchargeAppNo'");
            if (RequestFk == "0")
            {
                alterrequstdet = alterrequstdet + " alter table RQ_Requisition add HodAlterInchargeAppNo numeric";
            }
            RequestFk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'GateEntryExitdet' AND COLUMN_NAME = 'Vehicle_id'");
            if (RequestFk == "0")
            {
                alterrequstdet = alterrequstdet + "  alter table GateEntryExitdet add Vehicle_id nvarchar(200)";
            }

            RequestFk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'GateEntryExitdet' AND COLUMN_NAME = 'Drop_stageId'");
            if (RequestFk == "0")
            {
                alterrequstdet = alterrequstdet + "  alter table GateEntryExitdet add Drop_stageId numeric";
            }

            RequestFk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'GateEntryExitdet' AND COLUMN_NAME = 'Driver_Name'");
            if (RequestFk == "0")
            {
                alterrequstdet = alterrequstdet + "  alter table GateEntryExitdet add Driver_Name nvarchar(200)";
            }

            if (alterrequstdet.Trim() != "")
            {
                int dj = d2.update_method_wo_parameter(alterrequstdet, "text");
            }
            string RQ_RequestHierarchy = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RQ_RequestHierarchy'");
            if (RQ_RequestHierarchy != "0")
            {
                string FromDays = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequestHierarchy' AND COLUMN_NAME = 'FromDays'");
                if (FromDays == "0")
                {
                    int dj = d2.update_method_wo_parameter(" alter table RQ_RequestHierarchy add FromDays int ", "text");
                }
                string ToDays = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RQ_RequestHierarchy' AND COLUMN_NAME = 'ToDays'");
                if (ToDays == "0")
                {
                    int dj = d2.update_method_wo_parameter(" alter table RQ_RequestHierarchy add ToDays int ", "text");
                }
            }
            string Student_Leave_Request = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SR_Student_Leave_Request'");
            if (Student_Leave_Request == "0")
            {
                Student_Leave_Request = string.Empty;
                Student_Leave_Request = " Create Table SR_Student_Leave_Request (LeaveRequestPk bigint identity(1,1) primary key,App_no bigint,Fromdate datetime,Todate datetime , TotalLeave int, CollegeCode bigint, RequestStatus tinyint not null ,AprovalBy Bigint,AprovalDate datetime, IsHalfDay bit not null, HalfTime bit, HalfDayDate datetime, LeaveType int not null, LeaveReason Bigint not null, RequestBy int not null,RequestMode tinyint not null, approvalStage int)";
                d2.update_method_wo_parameter(Student_Leave_Request, "text");
            }
            Student_Leave_Request = string.Empty;
            Student_Leave_Request = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='AM_Student_Leave_Settings'");
            if (Student_Leave_Request == "0")
            {
                Student_Leave_Request = " Create table AM_Student_Leave_Settings (SLSettingPK bigint identity (1,1) Primary key ,DegreeCode bigint not null,IsFinance bit Constraint DF_AM_Student_Leave_Settings_IsFinance default 0,HeaderFK bigint not null,LegerFK bigint not null,MaxLeave int,CollegeCode int not null)";
                d2.update_method_wo_parameter(Student_Leave_Request, "text");
            }
            Student_Leave_Request = string.Empty;
            Student_Leave_Request = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='AM_Student_Leave_Settings_Det'");
            if (Student_Leave_Request == "0")
            {
                Student_Leave_Request = " Create table AM_Student_Leave_Settings_Det (SLSettingFK bigint Foreign key References AM_Student_Leave_Settings(SLSettingPK), FromDay int,ToDay int,Amount Decimal(12,2))";
                d2.update_method_wo_parameter(Student_Leave_Request, "text");
            }
            //barath 12.07.17
            ExecuteQuery("alter table RQ_RequestHierarchy add StaffReqDeptCode bigint", "RQ_RequestHierarchy", "StaffReqDeptCode", 1);
            ExecuteQuery("alter table RQ_RequestHierarchy add StaffAppDeptCode bigint", "RQ_RequestHierarchy", "StaffAppDeptCode", 1);
            ExecuteQuery("Alter table RQ_RequestHierarchy  add ReqCancelRights  bit not null DEFAULT(0)", "RQ_RequestHierarchy", "ReqCancelRights", 1);

            ExecuteQuery("alter table RQ_Requisition add CertReqType tinyint", "RQ_Requisition", "CertReqType", 1);
            ExecuteQuery("alter table RQ_RequisitionDet add ReqCertificateID bigint", "RQ_Requisition", "ReqCertificateID", 1);
            ExecuteQuery(" Create table CertificateNameDetail(Certificate_ID bigint identity(1,1)CONSTRAINT Pk_CertificateNameDetail_CertificateID primary key,CertificateName nvarchar(max),Collegecode int)", "CertificateNameDetail");
            ExecuteQuery("Create table Certificate_settingmaster(CertificatePK bigint identity(1,1) CONSTRAINT Pk_Certificate primary key , Certificate_ID bigint FOREIGN KEY References CertificateNameDetail(Certificate_ID),Batchyear int,EduLevel nvarchar(100),CourseID bigint,Degreecode bigint,FinancialYear int FOREIGN KEY References FM_FinYearMaster(FinYearPK) not null,Feecategory bigint,IsFeedue bit,IsLibarydue bit,Collegecode int)", "Certificate_settingmaster");
            ExecuteQuery("Create table Certificate_settingDet(CertificateFK bigint FOREIGN KEY References Certificate_settingmaster(CertificatePK), HeaderFK bigint FOREIGN KEY References FM_HeaderMaster(HeaderPK),LedgerFK bigint FOREIGN KEY References FM_LedgerMaster(LedgerPK),Certificate_Amount float)", "Certificate_settingDet");
            if (IsTableAvailable("Certificate_settingmaster"))
                dirAcc.updateData("create index Certificate_settingmaster_CertificatePK on Certificate_settingmaster(CertificatePK)");
            ExecuteQuery(" alter table CertificateNameDetail add CertifcateFormat int", "CertificateNameDetail", "CertifcateFormat", 1);
            ExecuteQuery(" alter table CertificateNameDetail add Usercode bigint", "CertificateNameDetail", "Usercode", 1);
            ExecuteQuery(" alter table CertificateNameDetail add group_code bigint", "CertificateNameDetail", "group_code", 1);

            string qry = "if exists (select * from IPatchStatus where ModuleName='Request') update IPatchStatus set ClientUpdatedDate='" + DateTime.Now.ToString("yyyy/MM/dd") + "' where ModuleName='Request' ";
            int res = d2.update_method_wo_parameter(qry, "Text");
            // Added by Request Staff Selection 
            Student_Leave_Request = string.Empty;
            Student_Leave_Request = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RQ_AlterStaffLeaveRequest'");
            if (Student_Leave_Request == "0")
            {
                Student_Leave_Request = " Create Table RQ_AlterStaffLeaveRequest (AlterRequestPK bigint identity (1,1),BatchYear bigint,DegreeFK int,Sem tinyint,Sec varchar(5),AlterDate datetime,Hour tinyint,ActStaffID varchar(20),ActSubjectNo bigint,AlterStaffID varchar(20))";
                d2.update_method_wo_parameter(Student_Leave_Request, "text");
            }
            // End
            if (res != 0)
            {
                alertmessage.Visible = true;
                lbl_alerterror.Text = " Updated Successfully";
            }
            bindgrid();
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
            lbler.Text = ex.ToString();
            lbler.Visible = true;
        }
    }

    public void library()
    {
        try
        {
            string find_tablename = string.Empty;
            string creattlbry = string.Empty;
            string usrmstr = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='user_master'");
            if (usrmstr == "0")
            {
                creattlbry = " CREATE TABLE [dbo].[user_master] ([user_id] [nvarchar] (50) NULL ,[name] [nvarchar] (50) NULL , [perm_addr] [nvarchar] (100) NULL ,[perm_phone] [numeric](18, 0) NULL , [perm_pin] [numeric](18, 0) NULL , [perm_email] [nvarchar] (50) NULL , [temp_addr] [nvarchar] (100) NULL , [temp_phone] [numeric](18, 0) NULL ,  [temp_pin] [numeric](18, 0) NULL ,[temp_email] [nvarchar] (50) NULL , [department] [nvarchar] (50) NULL , [desig_name] [nvarchar] (50) NULL , [is_staff] [bit] NULL , [date_of_reg] [datetime] NULL ,  [date_of_birth] [datetime] NULL ,  [gender] [nvarchar] (50) NULL ,  [no_of_cards] [numeric](18, 0) NULL)";
            }
            string smrtcalcrd = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SmartCardCalc'");
            if (smrtcalcrd == "0")
            {
                creattlbry = creattlbry + " CREATE TABLE [dbo].[SmartCardCalc]([Empid] [varchar] (25)  NOT NULL ,[WorkedHours] [bigint] NULL , [AbsentHours] [bigint] NULL ,[PermissionHours] [bigint] NULL ,[TotalWorkingHours] [bigint] NULL ,[tblYear] [bigint] NULL ,[tblMonth] [bigint] NULL ,[tblDay] [bigint] NULL ,[tblHour] [bigint] NULL ,[tblMinute] [bigint] NULL ,[tblSeconds] [bigint] NULL) ON [PRIMARY]";
            }
            string smrtmstr = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SmartCardMaster'");
            if (smrtmstr == "0")
            {
                creattlbry = creattlbry + " CREATE TABLE [dbo].[SmartCardMaster] ([EmpID] [varchar] (25)  NOT NULL ,[EmpName] [varchar] (25)  NULL ,[EmpPresentAddress] [varchar] (50)  NULL ,[EmpPermanentAddress] [varchar] (50)  NULL ,[EmpDepartment] [varchar] (25)  NULL ,[EmpDesignation] [varchar] (25)  NULL ,[EmpExperience] [varchar] (25)  NULL ,[EmpQualification] [varchar] (25)  NULL) ON [PRIMARY]";
            }
            string smrtcarreader = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SmartCardReader'");
            if (smrtcarreader == "0")
            {
                creattlbry = creattlbry + " CREATE TABLE [dbo].[SmartCardReader]([EmpID] [varchar] (25)  NOT NULL ,[ArrDate] [datetime] NULL ,[LoginTime] [varchar] (15)  NULL ,[DepDate] [datetime] NULL ,[LogoutTime] [varchar] (15)  NULL ,[Remarks] [varchar] (25)  NULL ,[LocationID] [varchar] (10)  NULL) ON [PRIMARY]";
            }
            if (creattlbry != "")
            {
                int lbrarycreat = d2.update_method_wo_parameter(creattlbry, "Text");
            }
            //alter
            string alterlbry = string.Empty;
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='borrow'");
            if (find_tablename != "0")
            {
                string titl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Borrow' AND COLUMN_NAME = 'Title'");
                if (titl == "0")
                {
                    alterlbry = " Alter table Borrow alter column Title nvarchar(250)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='priority_studstaff'");
            if (find_tablename != "0")
            {
                string brtitl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'priority_studstaff' AND COLUMN_NAME = 'Title'");
                if (brtitl == "0")
                {
                    alterlbry = alterlbry + " Alter table priority_studstaff alter column Title nvarchar(250)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='news_paper'");
            if (find_tablename != "0")
            {
                string atachment = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'news_paper' AND COLUMN_NAME = 'attachment'");
                if (atachment == "0")
                {
                    alterlbry = alterlbry + " Alter table news_paper alter column attachment nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal_master'");
            if (find_tablename != "0")
            {
                string pblsher = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'journal_master' AND COLUMN_NAME = 'publisher'");
                if (pblsher == "0")
                {
                    alterlbry = alterlbry + " alter table journal_master add publisher nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='nonbookmat'");
            if (find_tablename != "0")
            {
                string issuflag = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'nonbookmat' AND COLUMN_NAME = 'issue_flag'");
                if (issuflag == "0")
                {
                    alterlbry = alterlbry + " Alter table nonbookmat add issue_flag nvarchar(50)";
                }
                else
                {
                    alterlbry = alterlbry + " Alter table nonbookmat alter column issue_flag nvarchar(50)";
                }
                string deprtmnt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'nonbookmat' AND COLUMN_NAME = 'department'");
                if (deprtmnt == "0")
                {
                    alterlbry = alterlbry + " alter table nonbookmat add department nvarchar(50) null";
                }
                string monyr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'nonbookmat' AND COLUMN_NAME = 'mon_year'");
                if (monyr == "0")
                {
                    alterlbry = alterlbry + " alter table nonbookmat add mon_year nvarchar(50) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='referenceissue'");
            if (find_tablename != "0")
            {
                string rturntyp = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'referenceissue' AND COLUMN_NAME = 'return_type'");
                if (rturntyp == "0")
                {
                    alterlbry = alterlbry + " alter table referenceissue alter column return_type nvarchar(50)";
                }
                string authr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'referenceissue' AND COLUMN_NAME = 'author'");
                if (authr == "0")
                {
                    alterlbry = alterlbry + " alter table referenceissue alter column author nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bookdetails'");
            if (find_tablename != "0")
            {
                string catgry = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bookdetails' AND COLUMN_NAME = 'category'");
                if (catgry == "0")
                {
                    alterlbry = alterlbry + " alter table bookdetails  add category  nvarchar(50) null";
                }
            }
            string permphn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'user_master' AND COLUMN_NAME = 'perm_phone'");
            if (permphn == "0")
            {
                alterlbry = alterlbry + " alter table user_master alter column perm_phone nvarchar(50)";
            }
            string prmpin = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'user_master' AND COLUMN_NAME = 'perm_pin'");
            if (prmpin == "0")
            {
                alterlbry = alterlbry + " alter table user_master alter column perm_pin nvarchar(50)";
            }
            string tmpphn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'user_master' AND COLUMN_NAME = 'temp_phone'");
            if (tmpphn == "0")
            {
                alterlbry = alterlbry + " alter table user_master alter column temp_phone nvarchar(50)";
            }
            string tmpin = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'user_master' AND COLUMN_NAME = 'temp_pin'");
            if (tmpin == "0")
            {
                alterlbry = alterlbry + " alter table user_master alter column temp_pin nvarchar(50)";
            }
            string no_ofcrd = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'user_master' AND COLUMN_NAME = 'no_of_cards'");
            if (no_ofcrd == "0")
            {
                alterlbry = alterlbry + " alter table user_master alter column no_of_cards nvarchar(50)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='callnoentry'");
            if (find_tablename != "0")
            {
                string cldesc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'callnoentry' AND COLUMN_NAME = 'callnodescription'");
                if (cldesc == "0")
                {
                    alterlbry = alterlbry + " alter table callnoentry alter column callnodescription nvarchar(150)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lib_user_perm'");
            if (find_tablename != "0")
            {
                string rolnocook = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'lib_user_perm' AND COLUMN_NAME = 'rollno_cookie'");
                if (rolnocook == "0")
                {
                    alterlbry = alterlbry + " alter table lib_user_perm add rollno_cookie int null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bookdetails'");
            if (find_tablename != "0")
            {
                string lnguag = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bookdetails' AND COLUMN_NAME = 'language'");
                if (lnguag == "0")
                {
                    alterlbry = alterlbry + " alter table bookdetails add language nvarchar(20) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='library'");
            if (find_tablename != "0")
            {
                string backautno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'BackvolumeAutono'");
                if (backautno == "0")
                {
                    alterlbry = alterlbry + " alter table library add BackvolumeAutono bit";
                }
                string journalno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'JournalAutono'");
                if (journalno == "0")
                {
                    alterlbry = alterlbry + " alter table library add JournalAutono bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bookdolist'");
            if (find_tablename != "0")
            {
                string scandate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bookdolist' AND COLUMN_NAME = 'scandate'");
                if (scandate == "0")
                {
                    alterlbry = alterlbry + " alter table bookdolist add scandate datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lib_user_perm'");
            if (find_tablename != "0")
            {
                string calentry = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'lib_user_perm' AND COLUMN_NAME = 'call_entry'");
                if (calentry == "0")
                {
                    alterlbry = alterlbry + " alter table lib_user_perm add call_entry int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Book_transfer'");
            if (find_tablename != "0")
            {
                string nwstfcod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Book_transfer' AND COLUMN_NAME = 'newstaff_code'");
                if (nwstfcod == "0")
                {
                    alterlbry = alterlbry + " alter table Book_transfer add newstaff_code nvarchar(50) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='library'");
            if (find_tablename != "0")
            {
                string autoaccss = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'autoaccessno'");
                if (autoaccss == "0")
                {
                    alterlbry = alterlbry + " alter table library add autoaccessno int";
                }
                else
                {
                    alterlbry = alterlbry + " alter table library alter column autoaccessno int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Book_transfer'");
            if (find_tablename != "0")
            {
                string sno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'book_transfer' AND COLUMN_NAME = 'serial_no'");
                if (sno == "0")
                {
                    alterlbry = alterlbry + " alter table book_transfer add serial_no nvarchar(50) null";
                }
                string trnflg = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'book_transfer' AND COLUMN_NAME = 'return_flag'");
                if (trnflg == "0")
                {
                    alterlbry = alterlbry + " alter table book_transfer add return_flag bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='back_volume'");
            if (find_tablename != "0")
            {
                string ne_acno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'back_volume' AND COLUMN_NAME = 'newaccno'");
                if (ne_acno == "0")
                {
                    alterlbry = alterlbry + " alter table back_volume add newaccno nvarchar(50) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='project_book'");
            if (find_tablename != "0")
            {
                string projacono = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'project_book' AND COLUMN_NAME = 'newaccno'");
                if (projacono == "0")
                {
                    alterlbry = alterlbry + " alter table project_book add newaccno nvarchar(50) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal'");
            if (find_tablename != "0")
            {
                string jornlacno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'journal' AND COLUMN_NAME = 'newaccno'");
                if (jornlacno == "0")
                {
                    alterlbry = alterlbry + " alter table journal add newaccno nvarchar(50) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='NonBookMat'");
            if (find_tablename != "0")
            {
                string newacno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'nonbookmat' AND COLUMN_NAME = 'newaccno'");
                if (newacno == "0")
                {
                    alterlbry = alterlbry + " alter table nonbookmat add newaccno nvarchar(50) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='NonBookMat'");
            if (find_tablename != "0")
            {
                string deptacr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'journal_dept' AND COLUMN_NAME = 'dept_Acr'");
                if (deptacr == "0")
                {
                    alterlbry = alterlbry + " alter table journal_dept add dept_Acr nvarchar(10) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='NonBookMat'");
            if (find_tablename != "0")
            {
                string nooktitle = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'nonbookmat' AND COLUMN_NAME = 'title'");
                if (nooktitle == "0")
                {
                    alterlbry = alterlbry + " alter table nonbookmat alter column title varchar(250)";
                }
                string nonbookcontent = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'nonbookmat' AND COLUMN_NAME = 'contents'");
                if (nonbookcontent == "0")
                {
                    alterlbry = alterlbry + " alter table nonbookmat alter column contents varchar(250)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='TokenDetails'");
            if (find_tablename != "0")
            {
                string tokandetail = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tokendetails' AND COLUMN_NAME = 'category'");
                if (tokandetail == "0")
                {
                    alterlbry = alterlbry + " alter table tokendetails add category nvarchar(50) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lib_master'");
            if (find_tablename != "0")
            {
                string libcatgry = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'lib_master' AND COLUMN_NAME = 'category'");
                if (libcatgry == "0")
                {
                    alterlbry = alterlbry + " alter table lib_master add category nvarchar(50) null";
                }
            }
            //import sudhagar 01-06
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bookdetails'");
            if (find_tablename != "0")
            {
                string newacno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bookdetails' AND COLUMN_NAME = 'TitleLanguage'");
                if (newacno == "0")
                {
                    alterlbry = alterlbry + " Alter table bookdetails add TitleLanguage bit";
                }
                newacno = string.Empty;
                newacno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bookdetails' AND COLUMN_NAME = 'AuthorLanguage'");
                if (newacno == "0")
                {
                    alterlbry = alterlbry + " Alter table bookdetails add AuthorLanguage  bit";
                }
                newacno = string.Empty;
                newacno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bookdetails' AND COLUMN_NAME = 'Acccess_Time'");
                if (newacno == "0")
                {
                    alterlbry = alterlbry + " Alter table bookdetails add Acccess_Time  nvarchar(30)";
                }
                newacno = string.Empty;
                newacno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bookdetails' AND COLUMN_NAME = 'Transferred'");
                if (newacno == "0")
                {
                    alterlbry = alterlbry + " Alter table bookdetails add Transferred bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='project_book'");
            if (find_tablename != "0")
            {
                string libcatgry = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'project_book' AND COLUMN_NAME = 'Subject'");
                if (libcatgry == "0")
                {
                    alterlbry = alterlbry + " Alter table project_book add Subject nvarchar(50)";
                }
                libcatgry = string.Empty;
                libcatgry = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'project_book' AND COLUMN_NAME = 'Language'");
                if (libcatgry == "0")
                {
                    alterlbry = alterlbry + " Alter table project_book add Language nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal_master'");
            if (find_tablename != "0")
            {
                string libcatgry = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'journal_master' AND COLUMN_NAME = 'Supplier'");
                if (libcatgry == "0")
                {
                    alterlbry = alterlbry + " Alter table journal_master add Supplier nvarchar(600)";
                }
                libcatgry = string.Empty;
                libcatgry = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'journal_master' AND COLUMN_NAME = 'SubsAmount'");
                if (libcatgry == "0")
                {
                    alterlbry = alterlbry + " Alter table journal_master add SubsAmount decimal";
                }
                libcatgry = string.Empty;
                libcatgry = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'journal_master' AND COLUMN_NAME = 'TitleLanguage'");
                if (libcatgry == "0")
                {
                    alterlbry = alterlbry + " Alter table journal_master add TitleLanguage tinyint";
                }
            }
            if (alterlbry != "")
            {
                int althr = d2.update_method_wo_parameter(alterlbry, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void library1_3()
    {
        try
        {
            string find_tablename = string.Empty;
            //create query
            string creat_libraryagin = string.Empty;
            string instaler = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_form_Active_Control'");
            if (instaler == "0")
            {
                creat_libraryagin = " CREATE TABLE [dbo].[tbl_form_Active_Control] ([cid] [int] IDENTITY (1, 1) NOT NULL ,[Formname] [varchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Control_name] [varchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[Enter_date] [datetime] NULL) ON [PRIMARY]";
            }
            string libnorms = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lib_norms'");
            if (libnorms == "0")
            {
                creat_libraryagin = creat_libraryagin + " CREATE TABLE [lib_norms] ([lib_code] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[dept] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[norms] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL)";
            }
            string libcats = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='libcat'");
            if (libcats == "0")
            {
                creat_libraryagin = creat_libraryagin + " cREATE TABLE [libcat] (lib_code nvarchar(50),lib_name nvarchar(50),cat nvarchar(50),college_code nvarchar(50))";
            }
            string rackallocation_back = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='rack_allocation_back'");
            if (rackallocation_back == "0")
            {
                creat_libraryagin = creat_libraryagin + " CREATE TABLE [dbo].[rack_allocation_back] ( [lib_code] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [rack_no] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [row_no] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [acc_no] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [access_date] [datetime] NULL ,[access_time] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[book_type] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ) ON [PRIMARY]";
            }
            string setdefaults = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='setdefault'");
            if (setdefaults == "0")
            {
                creat_libraryagin = creat_libraryagin + " create table setdefault(descrip varchar(250),setfor varchar(150),is_set bit Not Null,lib_code varchar(50))";
            }
            string TraceBookDetails = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Trace_BookDetails'");
            if (TraceBookDetails == "0")
            {
                creat_libraryagin = creat_libraryagin + " Create Table Trace_BookDetails (Trace_ID int identity(1,1),Acc_No nvarchar(50),BookType char(10), Lib_Code nvarchar(50))";
            }
            string ProjectBookDetails = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Project_BookDetails'");
            if (ProjectBookDetails == "0")
            {
                creat_libraryagin = creat_libraryagin + " Create Table Project_BookDetails (Probook_Accno nvarchar(30),Roll_No nvarchar(30),Stud_Name nvarchar(100),Degree nvarchar(100))";
            }
            string BindingCheckListTbl = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='BindingCheckList_Tbl'");
            if (BindingCheckListTbl == "0")
            {
                creat_libraryagin = creat_libraryagin + " CREATE TABLE BindingCheckList_Tbl(Code Numeric,EntryDate Datetime,AccNo nvarchar(30),Title nvarchar(500),Author nvarchar(500),Price Decimal(12,2),CallNo nvarchar(100),Lib_Code nvarchar(20),College_Code Numeric)";
            }
            string LibNoDuesTbl = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='LibNoDues_Tbl'");
            if (LibNoDuesTbl == "0")
            {
                creat_libraryagin = creat_libraryagin + " Create Table LibNoDues_Tbl(Code Numeric identity(1,1),Access_Date Datetime,Access_Time nvarchar(30),Issued_Date Datetime,Is_Staff Bit,Roll_No nvarchar(30),No_Dues Bit,Lib_Code nvarchar(10))";
            }
            string BookPhotos = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='BookPhoto'");
            if (BookPhotos == "0")
            {
                creat_libraryagin = creat_libraryagin + " CREATE TABLE BookPhoto(Acc_No nvarchar(100),Photo image,Lib_code nvarchar(30),Book_Type nvarchar(30))";
            }
            string BackVolumeLeaves = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='BackVolume_Leaves'");
            if (BackVolumeLeaves == "0")
            {
                creat_libraryagin = creat_libraryagin + " Create Table BackVolume_Leaves (Access_Code nvarchar(50),Issue_Code nvarchar(50))";
            }
            string LibBudgetMasters = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='LibBudgetMaster'");
            if (LibBudgetMasters == "0")
            {
                creat_libraryagin = creat_libraryagin + " cREATE TABLE LibBudgetMaster(BudgetCode numeric identity(1,1),Budget_From Datetime,Budget_To Datetime,Head_Code numeric,Head nvarchar(200),Dept_Name nvarchar(300),TotBudAmt Decimal(12,2),TotSpendAmt Decimal(12,2),TotBalAmt Decimal(12,2),BBudAmt Decimal(12,2),BSpendAmt Decimal(12,2),BBalAmt Decimal(12,2),JBudAmt Decimal(12,2),JSpendAmt Decimal(12,2),JBalAmt Decimal(12,2),NBudAmt Decimal(12,2),NSpendAmt Decimal(12,2),NBalAmt Decimal(12,2),Remarks nvarchar(200),College_Code numeric)";
            }
            string JournalIssues = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Journal_Issues'");
            if (JournalIssues == "0")
            {
                creat_libraryagin = creat_libraryagin + " CREATE TABLE Journal_Issues(Journal_Code nvarchar(25),Subs_Year int,IssueYear int,IssueDay nvarchar(15),IssueDayNum int,IssueMonth nvarchar(15),IssueMonthNum int,IssueNo int,MonthIssue_No int,Issue_Status int,Lib_Code nvarchar(20),College_Code numeric)";
            }
            string StandardMasters = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StandardMaster'");
            if (StandardMasters == "0")
            {
                creat_libraryagin = creat_libraryagin + " CREATE TABLE StandardMaster(Access_Date Datetime,Access_Time nvarchar(15),StandardCode numeric IDENTITY(1,1),Acc_No nvarchar(15),Book_AccNo nvarchar(15),Title nvarchar(500),OtherTitle nvarchar(500),Subject nvarchar(200),Department nvarchar(100),Publisher nvarchar(300),Supplier_Code nvarchar(30),Edition nvarchar(10),Pur_Year nvarchar(4), CallNo nvarchar(30),Pages nvarchar(10),CurrencyType nvarchar(20),Cost Decimal(12,2),Price Decimal(12,2),Discount decimal(12,2),NetPrice Decimal(12,2),ReceivedDate Datetime,Country nvarchar(30),Invoice nvarchar(30),BudgetHead nvarchar(50),BudgetYear nvarchar(4),Keyword nvarchar(100),Location nvarchar(100),Remarks nvarchar(200),Book_Status nvarchar(30),Lib_Code nvarchar(10),College_Code numeric)";
            }
            string LibCodeSettings = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='LibCode_Settings'");
            if (LibCodeSettings == "0")
            {
                creat_libraryagin = creat_libraryagin + " crEATE TABLE LibCode_Settings(Access_Date Datetime,Access_Time nvarchar(20),FromDate Datetime,Rcpt_Acr nvarchar(20),Rcpt_StNo nvarchar(5),Rcpt_Size nvarchar(2),Rcpt_LastNo nvarchar(10),LatestRec Bit,Lib_Code nvarchar(10),College_Code numeric) ";
            }
            string HolidayLibrary = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Holiday_Library'");
            if (HolidayLibrary == "0")
            {
                creat_libraryagin = creat_libraryagin + " CREATE TABLE Holiday_Library(Access_Date Datetime,Access_Time nvarchar(20),Holiday_Date Datetime,HalfOrFull Bit,Morning Bit,Evening Bit,LeaveType tinyint,Holiday_Desc nvarchar(100),Lib_Code nvarchar(10),College_Code numeric)";
            }
            string RowPosMaster = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RowPos_Master'");
            if (RowPosMaster == "0")
            {
                creat_libraryagin = creat_libraryagin + " CREATE Table RowPos_Master(Rack_No nvarchar(50),Row_No nvarchar(50),Pos_No nvarchar(50),Max_Capacity nvarchar(5),No_Of_Copies nvarchar(5),Access_Date Datetime,Access_Time nvarchar(15),Lib_Code nvarchar(10))";
            }
            string BarCodeSettings = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='BarCode_Settings'");
            if (BarCodeSettings == "0")
            {
                creat_libraryagin = creat_libraryagin + " CREATE TABLE BarCode_Settings(NoOfRows int,NoOfCols int,NoOfCopy int,HorSpace int,VerSpace int,TopCol nvarchar(500),BotCol nvarchar(500),Lib_Code nvarchar(5),College_Code numeric)";
            }
            string ProceedingMasters = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ProceedingMaster'");
            if (ProceedingMasters == "0")
            {
                creat_libraryagin = creat_libraryagin + " CREATE TABLE ProceedingMaster(Access_Date Datetime,Access_Time nvarchar(15),ProceedingCode numeric,Acc_No nvarchar(15),Book_AccNo nvarchar(15),ReceivedDate Datetime,Title nvarchar(500),OtherTitle nvarchar(500),Author nvarchar(500),ConfName nvarchar(200),Editors nvarchar(200), Organizer nvarchar(200),CoSponser nvarchar(200),Venue nvarchar(200),ProcDate Datetime,Price Decimal(12,2),Discount Decimal(12,2),NetPrice Decimal(12,2),ConfType nvarchar(30),ProcType Bit,Book_Status nvarchar(30),ProcYear nvarchar(4),ISBN nvarchar(15),Collation nvarchar(15),Volume nvarchar(15), Department nvarchar(100),Subject nvarchar(200),Supplier_Code nvarchar(15), Publisher nvarchar(300),Invoice nvarchar(30), Keyword nvarchar(100) , Location nvarchar(100),Abstract nvarchar(100),BudgetHead nvarchar(50),BudgetYear nvarchar(4),Lib_Code nvarchar(10),College_Code numeric)";
            }
            if (creat_libraryagin != "")
            {
                int againlibrarycreat = d2.update_method_wo_parameter(creat_libraryagin, "Text");
            }
            //alterlib1
            string alterlibrary1qry = string.Empty;
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='borrow'");
            if (find_tablename != "0")
            {
                string titl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'borrow' AND COLUMN_NAME = 'renewstatus'");
                if (titl == "0")
                {
                    alterlibrary1qry = " alter table borrow add renewstatus smallint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lib_privileges'");
            if (find_tablename != "0")
            {
                string libCollege_code = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'lib_privileges' AND COLUMN_NAME = 'College_code'");
                if (libCollege_code == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter table lib_privileges add College_code varchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'booksubscription'");
            if (find_tablename != "0")
            {
                string subcode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'booksubscription' AND COLUMN_NAME = 'sub_code'");
                if (subcode == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table booksubscription add  sub_code nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='library'");
            if (find_tablename != "0")
            {
                string genacr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'gen_acr'");
                if (genacr == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table library add gen_acr nvarchar(50)";
                }
                string genstno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'gen_stno'");
                if (genstno == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table library add gen_stno nvarchar(50)";
                }
                string categacr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'categ_acr'");
                if (categacr == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table library add categ_acr nvarchar(50)";
                }
            } find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='binding'");
            if (find_tablename != "0")
            {
                string Expecteddate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'binding' AND COLUMN_NAME = 'Expected_date'");
                if (Expecteddate == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table binding add Expected_date datetime null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='library'");
            if (find_tablename != "0")
            {
                string categstno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'categ_stno'");
                if (categstno == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table library add categ_stno nvarchar(50)";
                }
                string bvacr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'bv_acr'");
                if (bvacr == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table library add bv_acr nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='binding'");
            if (find_tablename != "0")
            {
                string cphones = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'binding' AND COLUMN_NAME = 'cphone'");
                if (cphones == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table binding add cphone varchar(20)";
                }
                string cemails = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'binding' AND COLUMN_NAME = 'cemail'");
                if (cemails == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table binding add cemail varchar(30)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bookdetails'");
            if (find_tablename != "0")
            {
                string MulticopyAccNoss = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bookdetails' AND COLUMN_NAME = 'MulticopyAccNos'");
                if (MulticopyAccNoss == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table bookdetails add MulticopyAccNos varchar(300)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='library'");
            if (find_tablename != "0")
            {
                string bvstno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'bv_stno'");
                if (bvstno == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table library add bv_stno nvarchar(50)";
                }
                string pmacr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'pm_acr'");
                if (pmacr == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table library add pm_acr nvarchar(50)";
                }
                string pmstno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'pm_stno'");
                if (pmstno == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table library add pm_stno nvarchar(50)";
                }
                string nmacr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'nm_acr'");
                if (nmacr == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table library add nm_acr nvarchar(50)";
                }
                string nmstno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'nm_stno'");
                if (nmstno == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table library add nm_stno nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Rack_Master'");
            if (find_tablename != "0")
            {
                string sacrs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'rack_master' AND COLUMN_NAME = 'sacr'");
                if (sacrs == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table rack_master add sacr nvarchar(50)";
                }
                string stnos = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'rack_master' AND COLUMN_NAME = 'stno'");
                if (stnos == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table rack_master add stno nvarchar(50)";
                }
                string racrs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'rack_master' AND COLUMN_NAME = 'racr'");
                if (racrs == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table rack_master add racr nvarchar(50)";
                }
                string rnos = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'rack_master' AND COLUMN_NAME = 'rno'");
                if (rnos == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table rack_master add rno nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='publisher_details'");
            if (find_tablename != "0")
            {
                string States = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'publisher_details' AND COLUMN_NAME = 'State'");
                if (States == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter table publisher_details add State varchar(50)";
                }
                string MobileNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'publisher_details' AND COLUMN_NAME = 'Mobile_No'");
                if (MobileNo == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table publisher_details add Mobile_No varchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Rack_Master'");
            if (find_tablename != "0")
            {
                string acrshelf = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'rack_master' AND COLUMN_NAME = 'acr_shelf'");
                if (acrshelf == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter table rack_master add acr_shelf varchar(10)";
                }
                string stshelf = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'rack_master' AND COLUMN_NAME = 'st_shelf'");
                if (stshelf == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter table rack_master add st_shelf varchar(10)";
                }
            }
            string lib_rnos = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'libcat' AND COLUMN_NAME = 'rno'");
            if (lib_rnos == "0")
            {
                alterlibrary1qry = alterlibrary1qry + " Alter table libcat add rno varchar(100)";
            }
            string snos = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'libcat' AND COLUMN_NAME = 'sno'");
            if (snos == "0")
            {
                alterlibrary1qry = alterlibrary1qry + " Alter table libcat add sno varchar(100)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bookdetails'");
            if (find_tablename != "0")
            {
                string MultiAccNoss = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bookdetails' AND COLUMN_NAME = 'MulticopyAccNos'");
                if (MultiAccNoss == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table bookdetails alter column MulticopyAccNos varchar(8000)";
                }
            }
            string acronyms = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'libcat' AND COLUMN_NAME = 'acronym'");
            if (acronyms == "0")
            {
                alterlibrary1qry = alterlibrary1qry + " alter table libcat add  acronym varchar (50)";
            }
            string startno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'libcat' AND COLUMN_NAME = 'start_no'");
            if (startno == "0")
            {
                alterlibrary1qry = alterlibrary1qry + " alter table libcat add  start_no varchar (50)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='request_book'");
            if (find_tablename != "0")
            {
                string titles = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'request_book' AND COLUMN_NAME = 'title'");
                if (titles == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table request_book alter column title nvarchar(200)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='back_volume'");
            if (find_tablename != "0")
            {
                string periodicalnames = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'back_volume' AND COLUMN_NAME = 'periodicalname'");
                if (periodicalnames == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table back_volume alter column periodicalname nvarchar(250)";
                }
                string bktitle = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'back_volume' AND COLUMN_NAME = 'title'");
                if (bktitle == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table back_volume alter column title nvarchar(250)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='borrow'");
            if (find_tablename != "0")
            {
                string tokenno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'borrow' AND COLUMN_NAME = 'token_no'");
                if (tokenno == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table borrow alter column token_no nvarchar(200)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lib_master'");
            if (find_tablename != "0")
            {
                string studcategorys = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'lib_master' AND COLUMN_NAME = 'studcategory'");
                if (studcategorys == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table lib_master add  studcategory nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='TokenDetails'");
            if (find_tablename != "0")
            {
                string tok_studcategory = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tokendetails' AND COLUMN_NAME = 'studcategory'");
                if (tok_studcategory == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table tokendetails add  studcategory nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='borrow'");
            if (find_tablename != "0")
            {
                string renewaltimess = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'borrow' AND COLUMN_NAME = 'renewaltimes'");
                if (renewaltimess == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table borrow add renewaltimes int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bookdetails'");
            if (find_tablename != "0")
            {
                string billno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bookdetails' AND COLUMN_NAME = 'bill_no'");
                if (billno == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table bookdetails alter column bill_no nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='library'");
            if (find_tablename != "0")
            {
                string Access_EduLevel = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Library' AND COLUMN_NAME = 'Access_Edu_Level'");
                if (Access_EduLevel == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table Library add Access_Edu_Level nvarchar(10)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='borrow'");
            if (find_tablename != "0")
            {
                string IssuedTime = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'borrow' AND COLUMN_NAME = 'Issued_Time'");
                if (IssuedTime == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table borrow add Issued_Time nvarchar(15)";
                }
                string ReturnedTime = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'borrow' AND COLUMN_NAME = 'Returned_Time'");
                if (ReturnedTime == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table borrow add Returned_Time nvarchar(15)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='NonBookMat'");
            if (find_tablename != "0")
            {
                string no_ofcopies = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'nonbookmat' AND COLUMN_NAME = 'no_of_copies'");
                if (no_ofcopies == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table nonbookmat add no_of_copies nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='university_question'");
            if (find_tablename != "0")
            {
                string multicopyaccnoss = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'university_question' AND COLUMN_NAME = 'multicopyaccnos'");
                if (multicopyaccnoss == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " ALTER TABLE university_question ADD multicopyaccnos nvarchar(1000)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='NonBookMat'");
            if (find_tablename != "0")
            {
                string nonbookmats = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'nonbookmat' AND COLUMN_NAME = 'multicopyaccnos'");
                if (nonbookmats == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table nonbookmat add multicopyaccnos varchar(1000)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='university_question'");
            if (find_tablename != "0")
            {
                string depts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'university_question' AND COLUMN_NAME = 'dept'");
                if (depts == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table university_question add dept varchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='request_book'");
            if (find_tablename != "0")
            {
                string DeptName = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'request_book' AND COLUMN_NAME = 'Dept_Name'");
                if (DeptName == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table request_book add Dept_Name nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='nonbookmat'");
            if (find_tablename != "0")
            {
                string issueno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'nonbookmat' AND COLUMN_NAME = 'issue_no'");
                if (issueno == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table nonbookmat add   issue_no nvarchar(20)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='library'");
            if (find_tablename != "0")
            {
                string BooksDueDate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'Books_DueDate'");
                if (BooksDueDate == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table library add Books_DueDate datetime";
                }
                string FineFroms = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'FineFrom'");
                if (FineFroms == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table library add FineFrom datetime";
                }
                string FineTos = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'FineTo'");
                if (FineTos == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table library add FineTo datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal'");
            if (find_tablename != "0")
            {
                string invoiceno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'journal' AND COLUMN_NAME = 'invoice_no'");
                if (invoiceno == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table journal Add invoice_no nvarchar(30)";
                }
                string addresss = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'journal' AND COLUMN_NAME = 'address'");
                if (addresss == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table journal Add address nvarchar(300)";
                }
                string paytype = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'journal' AND COLUMN_NAME = 'pay_type'");
                if (paytype == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table journal Add pay_type nvarchar(20)";
                }
                string expirydate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'journal' AND COLUMN_NAME = 'expiry_date'");
                if (expirydate == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table journal Add expiry_date datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='project_book'");
            if (find_tablename != "0")
            {
                string TotStud = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'project_book' AND COLUMN_NAME = 'Tot_Stud'");
                if (TotStud == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table project_book Add Tot_Stud int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal_master'");
            if (find_tablename != "0")
            {
                string publishers = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'journal_master' AND COLUMN_NAME = 'publisher'");
                if (publishers == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table journal_master alter column publisher nvarchar(300)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='NonBookMat'");
            if (find_tablename != "0")
            {
                string suppliers = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'nonbookmat' AND COLUMN_NAME = 'supplier'");
                if (suppliers == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table nonbookmat add supplier nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lib_user_perm'");
            if (find_tablename != "0")
            {
                string spfine = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'lib_user_perm' AND COLUMN_NAME = 'sp_fine'");
                if (spfine == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table lib_user_perm add sp_fine int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='library'");
            if (find_tablename != "0")
            {
                string ISBooksDueDate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'ISBooks_DueDate'");
                if (ISBooksDueDate == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table library add ISBooks_DueDate bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lib_master'");
            if (find_tablename != "0")
            {
                string BookType = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'lib_master' AND COLUMN_NAME = 'Book_Type'");
                if (BookType == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table lib_master add Book_Type nvarchar(10)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Book_transfer'");
            if (find_tablename != "0")
            {
                string transfertype = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'book_transfer' AND COLUMN_NAME = 'transfer_type'");
                if (transfertype == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table book_transfer add transfer_type bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bookdetails'");
            if (find_tablename != "0")
            {
                string CopyNos = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bookdetails' AND COLUMN_NAME = 'CopyNo'");
                if (CopyNos == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table bookdetails add CopyNo Numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'donatebooks'");
            if (find_tablename != "0")
            {
                string donatTitle = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'donatebooks' AND COLUMN_NAME = 'Title'");
                if (donatTitle == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table donatebooks add Title nvarchar(300)";
                }
                string Authors = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'donatebooks' AND COLUMN_NAME = 'Author'");
                if (Authors == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table donatebooks add Author nvarchar(300)";
                }
                string Editions = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'donatebooks' AND COLUMN_NAME = 'Edition'");
                if (Editions == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table donatebooks add Edition nvarchar(30)";
                }
                string Pagess = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'donatebooks' AND COLUMN_NAME = 'Pages'");
                if (Pagess == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table donatebooks add Pages nvarchar(30)";
                }
                string prices = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'donatebooks' AND COLUMN_NAME = 'price'");
                if (prices == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table donatebooks add price decimal(12,2)";
                }
                string BillNos = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'donatebooks' AND COLUMN_NAME = 'Bill_No'");
                if (BillNos == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table donatebooks add Bill_No nvarchar(30)";
                }
                string Billdate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'donatebooks' AND COLUMN_NAME = 'Bill_date'");
                if (Billdate == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table donatebooks add Bill_date datetime";
                }
                string publisherss = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'donatebooks' AND COLUMN_NAME = 'publisher'");
                if (publisherss == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table donatebooks add publisher nvarchar(200)";
                }
                string pubyear = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'donatebooks' AND COLUMN_NAME = 'pub_year'");
                if (pubyear == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table donatebooks add pub_year nvarchar(10)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='priority_studstaff'");
            if (find_tablename != "0")
            {
                string OtherAccNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'priority_studstaff' AND COLUMN_NAME = 'OtherAcc_No'");
                if (OtherAccNo == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table priority_studstaff add OtherAcc_No nvarchar(50)";
                }
                string Codes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'priority_studstaff' AND COLUMN_NAME = 'Code'");
                if (Codes == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table priority_studstaff add Code numeric identity(1,1)";
                }
                string cancelflag = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'priority_studstaff' AND COLUMN_NAME = 'cancel_flag'");
                if (cancelflag == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table priority_studstaff alter column cancel_flag int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='back_volume'");
            if (find_tablename != "0")
            {
                string journalyear = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'back_volume' AND COLUMN_NAME = 'journal_year'");
                if (journalyear == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table back_volume alter column journal_year nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bookdetails'");
            if (find_tablename != "0")
            {
                string bokCopyNos = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'BookDetails' AND COLUMN_NAME = 'CopyNo'");
                if (bokCopyNos == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table BookDetails Alter Column CopyNo nvarchar(20)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lib_master'");
            if (find_tablename != "0")
            {
                string IndCategorys = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Lib_Master' AND COLUMN_NAME = 'IndCategory'");
                if (IndCategorys == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Lib_Master Add IndCategory int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library'");
            if (find_tablename != "0")
            {
                string librarys = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'IsStudCloseDate'");
                if (librarys == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table library Add IsStudCloseDate bit";
                }
                string IsStaffCloseDates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'IsStaffCloseDate'");
                if (IsStaffCloseDates == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table library Add IsStaffCloseDate bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library'");
            if (find_tablename != "0")
            {
                string StudCloseDates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'StudCloseDate'");
                if (StudCloseDates == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table library Add StudCloseDate bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='fine_details'");
            if (find_tablename != "0")
            {
                string IsCancels = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fine_details' AND COLUMN_NAME = 'Is_Cancel'");
                if (IsCancels == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table fine_details Add Is_Cancel int";
                }
                string Reasons = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fine_details' AND COLUMN_NAME = 'Reason'");
                if (Reasons == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table fine_details Add Reason nvarchar(200)";
                }
            }
            string BookTypes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'BindingCheckList_Tbl' AND COLUMN_NAME = 'Book_Type'");
            if (BookTypes == "0")
            {
                alterlibrary1qry = alterlibrary1qry + " Alter Table BindingCheckList_Tbl Add Book_Type nvarchar(10)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='fine_details'");
            if (find_tablename != "0")
            {
                string ActFineAmts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'fine_details' AND COLUMN_NAME = 'ActFineAmt'");
                if (ActFineAmts == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table fine_details Add ActFineAmt Decimal(12,2)";
                }
            } find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal'");
            if (find_tablename != "0")
            {
                string journaltitl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'journal' AND COLUMN_NAME = 'title'");
                if (journaltitl == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table journal alter column title nvarchar(400)";
                }
            }
            string UserEntrys = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'LibNoDues_Tbl' AND COLUMN_NAME = 'User_Entry'");
            if (UserEntrys == "0")
            {
                alterlibrary1qry = alterlibrary1qry + " Alter Table LibNoDues_Tbl Add User_Entry nvarchar(20)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal'");
            if (find_tablename != "0")
            {
                string jornalPagess = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal' AND COLUMN_NAME = 'Pages'");
                if (jornalPagess == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal Add Pages nvarchar(20)";
                }
                string journalpric = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal' AND COLUMN_NAME = 'Price'");
                if (journalpric == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal Add Price nvarchar(20)";
                }
                string jornVolume = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal' AND COLUMN_NAME = 'Volume'");
                if (jornVolume == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal Add Volume nvarchar(30)";
                }
                string STerm = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal' AND COLUMN_NAME = 'S_Term'");
                if (STerm == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal Add S_Term nvarchar(30)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal_master'");
            if (find_tablename != "0")
            {
                string FIssue = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'F_Issue'");
                if (FIssue == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Master Add F_Issue Datetime";
                }
                string LIssue = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'L_Issue'");
                if (LIssue == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Master Add L_Issue Datetime";
                }
                string AStatus = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'A_Status'");
                if (AStatus == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Master Add A_Status varchar(1)";
                }
                string GPeriod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'G_Period'");
                if (GPeriod == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Master Add G_Period varchar(2)";
                }
                string DDNos = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'DD_No'");
                if (DDNos == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Master Add DD_No nvarchar(30)";
                }
                string DDDate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'DD_Date'");
                if (DDDate == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Master Add DD_Date Datetime";
                }
                string InFavour = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'In_Favour'");
                if (InFavour == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Master Add In_Favour nvarchar(200)";
                }
                string DDAmount = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'DD_Amount'");
                if (DDAmount == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Master Add DD_Amount Decimal(12,2)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='back_volume'");
            if (find_tablename != "0")
            {
                string Languagess = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Back_Volume' AND COLUMN_NAME = 'Language'");
                if (Languagess == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Back_Volume add Language nvarchar(30)";
                }
                string DeptNames = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Back_Volume' AND COLUMN_NAME = 'Dept_Name'");
                if (DeptNames == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Back_Volume add Dept_Name nvarchar(100)";
                }
                string NoLeaves = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Back_Volume' AND COLUMN_NAME = 'No_Leaves'");
                if (NoLeaves == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Back_Volume add No_Leaves int";
                }
                string Publishers = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Back_Volume' AND COLUMN_NAME = 'Publisher'");
                if (Publishers == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Back_Volume Alter Column Publisher nvarchar(400)";
                }
                string IssueNos = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Back_Volume' AND COLUMN_NAME = 'IssueNo'");
                if (IssueNos == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Back_Volume Alter Column IssueNo nvarchar(500)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subscription'");
            if (find_tablename != "0")
            {
                string DDComm = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subscription' AND COLUMN_NAME = 'DD_Comm'");
                if (DDComm == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table subscription Add DD_Comm Decimal(12,2)";
                }
                string instmem = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subscription' AND COLUMN_NAME = 'inst_mem'");
                if (instmem == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table subscription Add inst_mem int";
                }
                string subperiod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subscription' AND COLUMN_NAME = 'sub_period'");
                if (subperiod == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table subscription Add sub_period int";
                }
                string Actives = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subscription' AND COLUMN_NAME = 'Active'");
                if (Actives == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table subscription Add Active int";
                }
                string ConfirmReceived = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subscription' AND COLUMN_NAME = 'Confirm_Received'");
                if (ConfirmReceived == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table subscription Add Confirm_Received int";
                }
                string JournalCode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subscription' AND COLUMN_NAME = 'Journal_Code'");
                if (JournalCode == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table subscription Add Journal_Code nvarchar(30)";
                }
                string infavourofs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subscription' AND COLUMN_NAME = 'infavourof'");
                if (infavourofs == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table subscription Alter Column infavourof nvarchar(200)";
                }
                string subCodes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subscription' AND COLUMN_NAME = 'Code'");
                if (subCodes == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table subscription Add Code int identity(1,1)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal_master'");
            if (find_tablename != "0")
            {
                string jourActives = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'Active'");
                if (jourActives == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Master Add Active Int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subscription'");
            if (find_tablename != "0")
            {
                string SupplierCode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subscription' AND COLUMN_NAME = 'Supplier_Code'");
                if (SupplierCode == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table subscription Add Supplier_Code nvarchar(50)";
                }
                string SubscriptionYear = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subscription' AND COLUMN_NAME = 'Subscription_Year'");
                if (SubscriptionYear == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table subscription Add Subscription_Year nvarchar(10)";
                }
                string SubscriptionPrice = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subscription' AND COLUMN_NAME = 'Subscription_Price'");
                if (SubscriptionPrice == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table subscription Add Subscription_Price Decimal(12,2)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lib_master'");
            if (find_tablename != "0")
            {
                string RefNoofDays = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Lib_Master' AND COLUMN_NAME = 'Ref_NoofDays'");
                if (RefNoofDays == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Lib_Master Add Ref_NoofDays Int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='NonBookMat'");
            if (find_tablename != "0")
            {
                string Subjectss = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'NonBookMat' AND COLUMN_NAME = 'Subject'");
                if (Subjectss == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table NonBookMat Add Subject nvarchar(200)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Library'");
            if (find_tablename != "0")
            {
                string IsBookBank = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Library' AND COLUMN_NAME = 'Is_BookBank'");
                if (IsBookBank == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Library Add Is_BookBank Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bookdetails'");
            if (find_tablename != "0")
            {
                string bokbankcolgcod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'BookDetails' AND COLUMN_NAME = 'College_Code'");
                if (bokbankcolgcod == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table BookDetails Add College_Code numeric";
                }
                string BudgetHead = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'BookDetails' AND COLUMN_NAME = 'Budget_Head'");
                if (BudgetHead == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table BookDetails ADD Budget_Head nvarchar(200)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='NonBookMat'");
            if (find_tablename != "0")
            {
                string nonBudgetHead = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'NonBookMat' AND COLUMN_NAME = 'Budget_Head'");
                if (nonBudgetHead == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table NonBookMat ADD Budget_Head nvarchar(200)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Journal'");
            if (find_tablename != "0")
            {
                string jornalBudgetHead = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal' AND COLUMN_NAME = 'Budget_Head'");
                if (jornalBudgetHead == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal ADD Budget_Head nvarchar(200)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bookdetails'");
            if (find_tablename != "0")
            {
                string Transfereds = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'BookDetails' AND COLUMN_NAME = 'Transfered'");
                if (Transfereds == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table BookDetails Add Transfered Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Book_transfer'");
            if (find_tablename != "0")
            {
                string TransferType = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'book_transfer' AND COLUMN_NAME = 'Transfer_Type'");
                if (TransferType == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table book_transfer alter column Transfer_Type Int";
                }
                string Returneds = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Book_Transfer' AND COLUMN_NAME = 'Returned'");
                if (Returneds == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Book_Transfer Add Returned int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='project_book'");
            if (find_tablename != "0")
            {
                string LibCode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Project_BookDetails' AND COLUMN_NAME = 'Lib_Code'");
                if (LibCode == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Project_BookDetails Add Lib_Code nvarchar(30)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='library'");
            if (find_tablename != "0")
            {
                string LibHead = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'Lib_Head'");
                if (LibHead == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table library ADD Lib_Head nvarchar(300)";
                }
                string LibFeeCode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'library' AND COLUMN_NAME = 'Lib_FeeCode'");
                if (LibFeeCode == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table library ADD Lib_FeeCode numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lib_master'");
            if (find_tablename != "0")
            {
                string CodeDescp = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Lib_Master' AND COLUMN_NAME = 'Code_Descp'");
                if (CodeDescp == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " ALTER TABLE Lib_Master Alter Column Code_Descp nvarchar(200)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='TokenDetails'");
            if (find_tablename != "0")
            {
                string tokDeptName = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TokenDetails' AND COLUMN_NAME = 'Dept_Name'");
                if (tokDeptName == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " ALTER TABLE TokenDetails ALTER Column Dept_Name nvarchar(200)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subscription'");
            if (find_tablename != "0")
            {
                string TotIssuess = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subscription' AND COLUMN_NAME = 'TotIssues'");
                if (TotIssuess == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table subscription ADD TotIssues int";
                }
                string SubsCosts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subscription' AND COLUMN_NAME = 'SubsCost'");
                if (SubsCosts == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table subscription Add SubsCost numeric";
                }
                string Discounts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subscription' AND COLUMN_NAME = 'Discount'");
                if (Discounts == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table subscription Add Discount numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal'");
            if (find_tablename != "0")
            {
                string SubsYear = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal' AND COLUMN_NAME = 'Subs_Year'");
                if (SubsYear == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal Add Subs_Year nvarchar(20)";
                }
                string IssueYear = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal' AND COLUMN_NAME = 'Issue_Year'");
                if (IssueYear == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal Add Issue_Year nvarchar(20)";
                }
                string IssueMonth = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal' AND COLUMN_NAME = 'Issue_Month'");
                if (IssueMonth == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal Add Issue_Month nvarchar(15)";
                }
                string MonthIssueNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal' AND COLUMN_NAME = 'MonthIssue_No'");
                if (MonthIssueNo == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal Add MonthIssue_No int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='library'");
            if (find_tablename != "0")
            {
                string StdAutoNos = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Library' AND COLUMN_NAME = 'StdAutoNo'");
                if (StdAutoNos == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Library Add StdAutoNo Bit";
                }
                string StdAcr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Library' AND COLUMN_NAME = 'Std_Acr'");
                if (StdAcr == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Library Add Std_Acr nvarchar(10)";
                }
                string StdStNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Library' AND COLUMN_NAME = 'Std_StNo'");
                if (StdStNo == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Library Add Std_StNo nvarchar(5)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal_master'");
            if (find_tablename != "0")
            {
                string ISSNNos = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'journal_master' AND COLUMN_NAME = 'ISSNNo'");
                if (ISSNNos == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter table journal_master ADD ISSNNo nvarchar(15)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='library'");
            if (find_tablename != "0")
            {
                string ProcAutoNos = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Library' AND COLUMN_NAME = 'ProcAutoNo'");
                if (ProcAutoNos == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " ALTER TABLE Library ADD ProcAutoNo Bit";
                }
                string ProcAcr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Library' AND COLUMN_NAME = 'Proc_StNo'");
                if (ProcAcr == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " ALTER TABLE Library ADD Proc_StNo nvarchar(5)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lib_user_perm'");
            if (find_tablename != "0")
            {
                string BarCodeTranss = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'lib_user_perm' AND COLUMN_NAME = 'BarCodeTrans'");
                if (BarCodeTranss == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " ALTER TABLE lib_user_perm Add BarCodeTrans Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal_master'");
            if (find_tablename != "0")
            {
                string DeliveryTypes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'DeliveryType'");
                if (DeliveryTypes == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Master Add DeliveryType nvarchar(30)";
                }
            }
            string IssueCodes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_issues' AND COLUMN_NAME = 'IssueCode'");
            if (IssueCodes == "0")
            {
                alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_issues ADD IssueCode numeric IDENTITY(1,1)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='university_question'");
            if (find_tablename != "0")
            {
                string Prices = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'university_question' AND COLUMN_NAME = 'Price'");
                if (Prices == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " alter Table university_question add Price nvarchar(15)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Rack_Master'");
            if (find_tablename != "0")
            {
                string PosAcr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Rack_Master' AND COLUMN_NAME = 'Pos_Acr'");
                if (PosAcr == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Rack_Master Add Pos_Acr nvarchar(50)";
                }
                string PosStNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Rack_Master' AND COLUMN_NAME = 'Pos_StNo'");
                if (PosStNo == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Rack_Master Add Pos_StNo nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RackRow_Master'");
            if (find_tablename != "0")
            {
                string NoOfPoss = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RackRow_Master' AND COLUMN_NAME = 'NoOfPos'");
                if (NoOfPoss == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table RackRow_Master Add NoOfPos nvarchar(5)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Rack_Allocation'");
            if (find_tablename != "0")
            {
                string PosNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Rack_Allocation' AND COLUMN_NAME = 'Pos_No'");
                if (PosNo == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Rack_Allocation Add Pos_No nvarchar(50)";
                }
                string PosPlace = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Rack_Allocation' AND COLUMN_NAME = 'Pos_Place'");
                if (PosPlace == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Rack_Allocation Add Pos_Place nvarchar(5)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal_master'");
            if (find_tablename != "0")
            {
                string jornPosNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'Pos_No'");
                if (jornPosNo == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Master Add Pos_No nvarchar(50)";
                }
                string jornPosPlace = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'Pos_Place'");
                if (jornPosPlace == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Master Add Pos_Place nvarchar(5)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Priority_StudStaff'");
            if (find_tablename != "0")
            {
                string CanReason = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Priority_StudStaff' AND COLUMN_NAME = 'Can_Reason'");
                if (CanReason == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Priority_StudStaff Add Can_Reason nvarchar(100)";
                }
            }
            string recPosNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'rack_allocation_back' AND COLUMN_NAME = 'Pos_No'");
            if (recPosNo == "0")
            {
                alterlibrary1qry = alterlibrary1qry + " Alter Table rack_allocation_back Add Pos_No nvarchar(50)";
            }
            string rackPosPlace = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'rack_allocation_back' AND COLUMN_NAME = 'Pos_Place'");
            if (rackPosPlace == "0")
            {
                alterlibrary1qry = alterlibrary1qry + " Alter Table rack_allocation_back Add Pos_Place nvarchar(5)";
            }
            string NationalNorms = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Lib_Norms' AND COLUMN_NAME = 'National_Norms'");
            if (NationalNorms == "0")
            {
                alterlibrary1qry = alterlibrary1qry + " Alter Table Lib_Norms ADD National_Norms nvarchar(30)";
            }
            string InternationalNorms = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Lib_Norms' AND COLUMN_NAME = 'International_Norms'");
            if (InternationalNorms == "0")
            {
                alterlibrary1qry = alterlibrary1qry + " Alter Table Lib_Norms ADD International_Norms nvarchar(30)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='TokenDetails'");
            if (find_tablename != "0")
            {
                string tokIndCategorys = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TokenDetails' AND COLUMN_NAME = 'IndCategory'");
                if (tokIndCategorys == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table TokenDetails Add IndCategory smallint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'insinstaller'");
            if (find_tablename != "0")
            {
                string RFIDNews = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'insinstaller' AND COLUMN_NAME = 'RFIDNew'");
                if (RFIDNews == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table insinstaller Add RFIDNew Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Lib_Norms'");
            if (find_tablename != "0")
            {
                string NormsTitle = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Lib_Norms' AND COLUMN_NAME = 'Norms_Title'");
                if (NormsTitle == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Lib_Norms add  Norms_Title nvarchar(30)";
                }
                else
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Lib_Norms Alter Column Norms_Title nvarchar(30)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Borrow'");
            if (find_tablename != "0")
            {
                string StudName = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Borrow' AND COLUMN_NAME = 'Stud_Name'");
                if (StudName == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Borrow add  Stud_Name nvarchar(150)";
                }
                else
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Borrow Alter Column Stud_Name nvarchar(150)";
                }
            }
            string FromPages = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Issues' AND COLUMN_NAME = 'FromPage'");
            if (FromPages == "0")
            {
                alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Issues Add FromPage nvarchar(10)";
            }
            string ToPages = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Issues' AND COLUMN_NAME = 'ToPage'");
            if (ToPages == "0")
            {
                alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Issues Add ToPage nvarchar(10)";
            }
            string Remarkss = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'LibNoDues_Tbl' AND COLUMN_NAME = 'Remarks'");
            if (Remarkss == "0")
            {
                alterlibrary1qry = alterlibrary1qry + " Alter Table LibNoDues_Tbl Add Remarks nvarchar(200)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='TokenDetails'");
            if (find_tablename != "0")
            {
                string RenewDays = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TokenDetails' AND COLUMN_NAME = 'Renew_Days'");
                if (RenewDays == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table TokenDetails Add Renew_Days nvarchar(5)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lib_user_perm'");
            if (find_tablename != "0")
            {
                string ODStudSMSs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'lib_user_perm' AND COLUMN_NAME = 'ODStudSMS'");
                if (ODStudSMSs == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table lib_user_perm Add ODStudSMS Bit";
                }
                string libODStaffSMS = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'lib_user_perm' AND COLUMN_NAME = 'ODStaffSMS'");
                if (libODStaffSMS == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table lib_user_perm Add ODStaffSMS Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='library'");
            if (find_tablename != "0")
            {
                string BB_AllStuds = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Library' AND COLUMN_NAME = 'BB_AllStud'");
                if (BB_AllStuds == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Library Add BB_AllStud Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='University_question'");
            if (find_tablename != "0")
            {
                string semmonth = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'University_question' AND COLUMN_NAME = 'sem_month'");
                if (semmonth == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table University_question alter column sem_month nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Journal'");
            if (find_tablename != "0")
            {
                string issumonth = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal' AND COLUMN_NAME = 'Issue_Month'");
                if (issumonth == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal add Issue_Month nvarchar(100)";
                }
                else
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal alter column Issue_Month nvarchar(100)";
                }
                string jornIssueYear = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal' AND COLUMN_NAME = 'Issue_Year'");
                if (jornIssueYear == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal add Issue_Year nvarchar(100)";
                }
                else
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal alter column Issue_Year nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bookdetails'");
            if (find_tablename != "0")
            {
                string BNos = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'BookDetails' AND COLUMN_NAME = 'BNo'");
                if (BNos == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table BookDetails add BNo nvarchar(30)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lib_master'");
            if (find_tablename != "0")
            {
                string TransLibCodes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Lib_Master' AND COLUMN_NAME = 'TransLibCode'");
                if (TransLibCodes == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Lib_Master Add TransLibCode nvarchar(10)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='TokenDetails'");
            if (find_tablename != "0")
            {
                string tokTransLibCodes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TokenDetails' AND COLUMN_NAME = 'TransLibCode'");
                if (tokTransLibCodes == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table TokenDetails Add TransLibCode nvarchar(10)";
                }
                string tokBookTypes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TokenDetails' AND COLUMN_NAME = 'Book_Type'");
                if (tokBookTypes == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table TokenDetails Add Book_Type nvarchar(10)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Supplier_Details'");
            if (find_tablename != "0")
            {
                string EmailID1s = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Supplier_Details' AND COLUMN_NAME = 'EmailID1'");
                if (EmailID1s == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Supplier_Details Add EmailID1 nvarchar(100)";
                }
                string EmailID2s = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Supplier_Details' AND COLUMN_NAME = 'EmailID2'");
                if (EmailID2s == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Supplier_Details Add EmailID2 nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal_master'");
            if (find_tablename != "0")
            {
                string IssueBys = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'IssueBy'");
                if (IssueBys == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Master Add IssueBy tinyint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='project_book'");
            if (find_tablename != "0")
            {
                string SubmitDates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Project_Book' AND COLUMN_NAME = 'SubmitDate'");
                if (SubmitDates == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Project_Book Add SubmitDate Datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal_master'");
            if (find_tablename != "0")
            {
                string PerIssueNos = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'PerIssueNo'");
                if (PerIssueNos == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Master Add PerIssueNo int";
                }
                string TotalNoIssuess = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'TotalNoIssues'");
                if (TotalNoIssuess == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Master Add TotalNoIssues int";
                }
                string IssueTypes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'IssueType'");
                if (IssueTypes == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Master Add IssueType tinyint";
                }
                string IssueTypeVAls = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'IssueTypeVAl'");
                if (IssueTypeVAls == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Master Add IssueTypeVAl nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Journal_Issues'");
            if (find_tablename != "0")
            {
                string DayIssueNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Issues' AND COLUMN_NAME = 'DayIssue_No'");
                if (DayIssueNo == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Issues Add DayIssue_No int";
                }
                string IssueDates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Issues' AND COLUMN_NAME = 'IssueDate'");
                if (IssueDates == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Journal_Issues Add IssueDate Datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ExamFineMs'");
            if (find_tablename != "0")
            {
                string CategoryCode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ExamFineMs' AND COLUMN_NAME = 'Category_Code'");
                if (CategoryCode == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table ExamFineMs Add Category_Code nvarchar(15)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lib_master'");
            if (find_tablename != "0")
            {
                string FineTypes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Lib_Master' AND COLUMN_NAME = 'FineType'");
                if (FineTypes == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Lib_Master Add FineType tinyint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Lib_Master'");
            if (find_tablename != "0")
            {
                string CardCats = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Lib_Master' AND COLUMN_NAME = 'CardCat'");
                if (CardCats == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table Lib_Master Add CardCat nvarchar(30)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='TokenDetails'");
            if (find_tablename != "0")
            {
                string tokCardCat = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TokenDetails' AND COLUMN_NAME = 'CardCat'");
                if (tokCardCat == "0")
                {
                    alterlibrary1qry = alterlibrary1qry + " Alter Table TokenDetails Add CardCat nvarchar(30)";
                }
            }
            if (alterlibrary1qry != "")
            {
                int alterlibagain = d2.update_method_wo_parameter(alterlibrary1qry, "Text");
            }
            //20-04-2016
            string alterlibrary3qry = string.Empty;
            string getlibvalu = string.Empty;
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Journal_Dept'");
            if (find_tablename != "0")
            {
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Dept' AND COLUMN_NAME = 'College_Code'");
                if (getlibvalu == "0")
                {
                    alterlibrary3qry = " Alter Table Journal_Dept Add College_Code numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='supplier_details'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'supplier_details' AND COLUMN_NAME = 'website'");
                if (getlibvalu == "0")
                {
                    alterlibrary3qry = alterlibrary3qry + " Alter Table supplier_details add website nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Journal_Dept'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Dept' AND COLUMN_NAME = 'Lib_Code'");
                if (getlibvalu == "0")
                {
                    alterlibrary3qry = alterlibrary3qry + " Alter Table Journal_Dept Add Lib_Code nvarchar(50)";
                }
            }
            getlibvalu = string.Empty;
            getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'user_master' AND COLUMN_NAME = 'Status'");
            if (getlibvalu == "0")
            {
                alterlibrary3qry = alterlibrary3qry + " Alter Table user_master Add Status Bit";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lib_user_perm'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'lib_user_perm' AND COLUMN_NAME = 'Cancel_Fine'");
                if (getlibvalu == "0")
                {
                    alterlibrary3qry = alterlibrary3qry + " Alter Table lib_user_perm Add Cancel_Fine Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='transissues'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'transissues' AND COLUMN_NAME = 'busfare'");
                if (getlibvalu == "0")
                {
                    alterlibrary3qry = alterlibrary3qry + " Alter Table transissues add busfare decimal(12,2)";
                }
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'transissues' AND COLUMN_NAME = 'ToDate'");
                if (getlibvalu == "0")
                {
                    alterlibrary3qry = alterlibrary3qry + " Alter Table transissues add ToDate datetime";
                }
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'transissues' AND COLUMN_NAME = 'Staff_Code'");
                if (getlibvalu == "0")
                {
                    alterlibrary3qry = alterlibrary3qry + " Alter Table transissues add Staff_Code nvarchar(30)";
                }
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'transissues' AND COLUMN_NAME = 'nooftrips'");
                if (getlibvalu == "0")
                {
                    alterlibrary3qry = alterlibrary3qry + " Alter Table transissues add nooftrips decimal(12,2)";
                }
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'transissues' AND COLUMN_NAME = 'bata'");
                if (getlibvalu == "0")
                {
                    alterlibrary3qry = alterlibrary3qry + " Alter Table transissues add bata decimal(12,2)";
                }
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'transissues' AND COLUMN_NAME = 'noofdays'");
                if (getlibvalu == "0")
                {
                    alterlibrary3qry = alterlibrary3qry + " Alter Table transissues add noofdays decimal(12,2)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bookdetails'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bookdetails' AND COLUMN_NAME = 'subject'");
                if (getlibvalu == "0")
                {
                    alterlibrary3qry = alterlibrary3qry + " Alter Table bookdetails Alter Column subject nvarchar(250)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'journal' AND COLUMN_NAME = 'Title'");
                if (getlibvalu == "0")
                {
                    alterlibrary3qry = alterlibrary3qry + " Alter Table journal Alter column Title nvarchar(250)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='nonbookmat'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'nonbookmat' AND COLUMN_NAME = 'nonbookmat_no'");
                if (getlibvalu == "0")
                {
                    alterlibrary3qry = alterlibrary3qry + " Alter Table nonbookmat add nonbookmat_no nvarchar(250)";
                }
                else
                {
                    alterlibrary3qry = alterlibrary3qry + " Alter Table nonbookmat Alter column nonbookmat_no nvarchar(250)";
                }
            }
            if (alterlibrary3qry != "")
            {
                int alterlib = d2.update_method_wo_parameter(alterlibrary3qry, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void library4()
    {
        try
        {
            string find_tablename = string.Empty;
            string library_creat = string.Empty;
            string licdt = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='VisitorsPhoto'");
            if (licdt == "0")
            {
                library_creat = " CREATE table VisitorsPhoto (VisitorPK BigInt identity(1,1),VisitorID nvarchar(30),VisitorPhoto image)";
            }
            licdt = string.Empty;
            licdt = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='VisitorsPhoto'");
            if (licdt == "0")
            {
                library_creat = library_creat + " create table libsortorder (dept_code nvarchar(100),priority int)";
            }
            if (library_creat != "")
            {
                int libcreation = d2.update_method_wo_parameter(library_creat, "Text");
            }
            //alter
            string alterlibrary4qry = string.Empty;
            string getlibvalu = string.Empty;
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal_master'");
            if (find_tablename != "0")
            {
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'Journal_Website'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = " Alter Table Journal_Master Add Journal_Website nvarchar(200)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='library'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Library' AND COLUMN_NAME = 'AllowAllCollStud'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table Library Add AllowAllCollStud Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bookdetails'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'BookDetails' AND COLUMN_NAME = 'TamilTitle'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table BookDetails Add TamilTitle nvarchar(500)";
                }
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'BookDetails' AND COLUMN_NAME = 'TamilAuthor'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table BookDetails Add TamilAuthor nvarchar(500)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Library'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Library' AND COLUMN_NAME = 'ProjAutoNo'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table  Library Add ProjAutoNo Bit";
                }
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Library' AND COLUMN_NAME = 'Proj_Acr'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table  Library Add Proj_Acr nvarchar(10)";
                }
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Library' AND COLUMN_NAME = 'Proj_StNo'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table  Library Add Proj_StNo nvarchar(10)";
                }
            }
            getlibvalu = string.Empty;
            getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'BarCode_Settings' AND COLUMN_NAME = 'LeftMargin'");
            if (getlibvalu == "0")
            {
                alterlibrary4qry = alterlibrary4qry + " Alter Table BarCode_Settings Add LeftMargin int";
            }
            getlibvalu = string.Empty;
            getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'BarCode_Settings' AND COLUMN_NAME = 'TopMargin'");
            if (getlibvalu == "0")
            {
                alterlibrary4qry = alterlibrary4qry + " Alter Table BarCode_Settings Add TopMargin int";
            }
            getlibvalu = string.Empty;
            getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'BarCode_Settings' AND COLUMN_NAME = 'PlainText'");
            if (getlibvalu == "0")
            {
                alterlibrary4qry = alterlibrary4qry + " Alter Table BarCode_Settings Add PlainText nvarchar(50)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='supplier_details'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Supplier_Details' AND COLUMN_NAME = 'Address2'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table Supplier_Details Add Address2 nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='supplier_details'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Supplier_Details' AND COLUMN_NAME = 'District'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table Supplier_Details Add District nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal_master'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'TamilJrnlName'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table Journal_Master Add TamilJrnlName nvarchar(500)";
                }
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'IssueByDays'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table Journal_Master Add IssueByDays int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subscription'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subscription' AND COLUMN_NAME = 'StartDate'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table subscription Add StartDate Datetime";
                }
            }
            getlibvalu = string.Empty;
            getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'user_master' AND COLUMN_NAME = 'CloseDate'");
            if (getlibvalu == "0")
            {
                alterlibrary4qry = alterlibrary4qry + " alter table user_master add CloseDate Datetime";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='project_book'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Project_book' AND COLUMN_NAME = 'Subject'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table Project_book Add Subject nvarchar(300)";
                }
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Project_book' AND COLUMN_NAME = 'Language'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table Project_book Add Language nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='journal_master'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'Supplier'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table Journal_Master Add Supplier nvarchar(300)";
                }
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Journal_Master' AND COLUMN_NAME = 'SubsAmount'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table Journal_Master Add SubsAmount Decimal(12,2)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='supplier_details'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Supplier_Details' AND COLUMN_NAME = 'SupplierType'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table Supplier_Details Add SupplierType nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='TokenDetails'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'TokenDetails' AND COLUMN_NAME = 'AllowAllBook'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table TokenDetails Add AllowAllBook Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'insinstaller'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'insinstaller' AND COLUMN_NAME = 'RFIDNew1'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " alter table insinstaller add RFIDNew1 tinyint";
                }
            }
            getlibvalu = string.Empty;
            getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'BindingCheckList_Tbl' AND COLUMN_NAME = 'BindingStatus'");
            if (getlibvalu == "0")
            {
                alterlibrary4qry = alterlibrary4qry + " alter table BindingCheckList_Tbl add BindingStatus Bit";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bookdetails'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bookdetails' AND COLUMN_NAME = 'BookID'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table bookdetails Add BookID BigInt IDENTITY(1,1)";
                }
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'BookDetails' AND COLUMN_NAME = 'TitleLanguage'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table BookDetails Add TitleLanguage tinyint";
                }
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'BookDetails' AND COLUMN_NAME = 'AuthorLanguage'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table BookDetails Add AuthorLanguage tinyint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='priority_studstaff'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'priority_studstaff' AND COLUMN_NAME = 'Is_Staff'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table priority_studstaff add Is_Staff tinyint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='library'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Library' AND COLUMN_NAME = 'LibGroupName'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " Alter Table Library Add LibGroupName nvarchar(200)";
                }
            }
            getlibvalu = string.Empty;
            getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'user_master' AND COLUMN_NAME = 'is_staff'");
            if (getlibvalu == "0")
            {
                alterlibrary4qry = alterlibrary4qry + " Alter Table user_master alter column is_staff tinyint";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='bookdetails'");
            if (find_tablename != "0")
            {
                getlibvalu = string.Empty;
                getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bookdetails' AND COLUMN_NAME = 'priority'");
                if (getlibvalu == "0")
                {
                    alterlibrary4qry = alterlibrary4qry + " alter table bookdetails add priority bigint";
                }
            }
            getlibvalu = string.Empty;
            getlibvalu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'setdefault' AND COLUMN_NAME = 'college_code'");
            if (getlibvalu == "0")
            {
                alterlibrary4qry = alterlibrary4qry + " alter table setdefault add college_code int";
            }
            if (alterlibrary4qry != "")
            {
                int library4alt = d2.update_method_wo_parameter(alterlibrary4qry, "Text");
            }
            string qry = "if exists (select * from IPatchStatus where ModuleName='Library') update IPatchStatus set ClientUpdatedDate='" + DateTime.Now.ToString("yyyy/MM/dd") + "' where ModuleName='Library' ";
            int res = d2.update_method_wo_parameter(qry, "Text");
            if (res != 0)
            {
                alertmessage.Visible = true;
                lbl_alerterror.Text = " Updated Successfully";
            }
            bindgrid();
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void sms()
    {
        try
        {
            //creation
            string find_tablename = string.Empty;
            string creat_sms = string.Empty;
            string instaler = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='insinstaller'");
            if (instaler == "0")
            {
                creat_sms = " CREATE TABLE [dbo].[insinstaller] ([RFID] [bit] NULL ,[BioMetric] [bit] NULL ,[RWB] [bit] NULL) ON [PRIMARY]";
            }
            string immonthshedul = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IMMonthlySchedule'");
            if (immonthshedul == "0")
            {
                creat_sms = creat_sms + " CREATE TABLE [dbo].[IMMonthlySchedule] ( [tid] [int] NULL , [tdays] [tinyint] NULL , [tWeek] [tinyint] NULL , [tday] [tinyint] NULL) ON [PRIMARY]";
            }
            string imsschedulmstr = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IMScheduleMaster'");
            if (imsschedulmstr == "0")
            {
                creat_sms = creat_sms + " CREATE TABLE [dbo].[IMScheduleMaster] ([tId] [int] IDENTITY (1, 1) NOT NULL ,[tName] [char] (15) NOT NULL ,[tOption] [tinyint] NOT NULL ,[tSDate] [datetime] NULL ,[tSTime] [datetime] NULL ,[tEDate] [datetime] NULL ,[NDigest] [int] NULL ,[LastUpDate] [datetime] NULL ,[TFreq] [int] NOT NULL ,[BisEnabled] [bit] NOT NULL ,[WhichTask] [nvarchar] (10) NULL , [BatchYear] [nvarchar] (10) NULL ,[DegreeCode] [nvarchar] (250) NULL ,[StrSubjects] [nvarchar] (500) NULL ,[CollegeCode] [int] NULL) ON [PRIMARY]";
            }
            string smslastset = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SMS_last_Set'");
            if (smslastset == "0")
            {
                creat_sms = creat_sms + " CREATE TABLE [dbo].[SMS_last_Set] ([college_code] [numeric](1, 0) NULL ,[P_or_M] [bit] NOT NULL , [P_or_D] [bit] NOT NULL , [I_or_A] [bit] NOT NULL ,[pcell] [char] (200) NULL ,[pmail] [char] (200) NULL ,[scell] [char] (200) NULL ,[smail] [char] (200) NULL ,[sub] [char] (200) NULL , [s_name] [char] (50) NULL) ON [PRIMARY]";
            }
            string smsuer = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='sms_users'");
            if (smsuer == "0")
            {
                creat_sms = creat_sms + " CREATE TABLE [dbo].[sms_users] ([id] [int] IDENTITY (1, 1) NOT NULL ,[uname] [nvarchar] (60) NULL ,[cell] [nvarchar] (60) NULL ,[mail] [nvarchar] (60) NULL ,[college_code] [Int] Not Null) ON [PRIMARY]";
            }
            string rpotinfo = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ReportInfo'");
            if (rpotinfo == "0")
            {
                creat_sms = creat_sms + " CREATE TABLE dbo.ReportInfo (College_Code numeric(18, 0) NOT NULL, ForSection varchar(50) NOT NULL, FontName varchar(50) NULL, FontSize int NULL, FontStyle int NULL, ForeColor varchar(50) NULL, ForDept VarChar(50) Not Null) ON [PRIMARY]";
            }
            string dynamicrepfld = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='dynamicrep_fldname'");
            if (dynamicrepfld == "0")
            {
                creat_sms = creat_sms + " CREATE TABLE [dbo].[dynamicrep_fldname] ([fld_name] [nvarchar] (50)  NULL ,[fld_definition] [nvarchar] (50)  NULL , [module_name] [nvarchar] (50)  NULL)";
            }
            string autoerrdetail = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='auto_err_details'");
            if (autoerrdetail == "0")
            {
                creat_sms = creat_sms + "  create table auto_err_details(project_name nvarchar(50),module_form_name nvarchar(50),function_event_name nvarchar(50),line_number integer,err_number nvarchar(50),err_description nvarchar(500),err_date datetime default getdate())";
            }
            string invrsfee = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ivrs_fee_settings'");
            if (invrsfee == "0")
            {
                creat_sms = creat_sms + "  create TABLE [ivrs_fee_settings] ([fee_code] [int] NULL ,[account_id] [int] NULL ,[header_id] [int] NULL ,[fee_category] [varchar] (30))";
            }
            string flashuser = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='flash_users'");
            if (flashuser == "0")
            {
                creat_sms = creat_sms + "  create table flash_users(college_code numeric,user_id nvarchar(50),selected_id numeric ,selected_name nvarchar(50)) ";
            }
            string dbflahs = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='db_flash'");
            if (dbflahs == "0")
            {
                creat_sms = creat_sms + "  create table db_flash(user_id nvarchar(50),selected_id numeric ,subselected_id numeric,selected_flag numeric,from_date datetime,to_date datetime,sub_subselected_id numeric)";
            }
            string custmengflsh = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='custom_engflash'");
            if (custmengflsh == "0")
            {
                creat_sms = creat_sms + "  create table custom_engflash (user_id nvarchar(50),eng_title nvarchar(1000),eng_scroll_text nvarchar(2000),eng_fromdate datetime , eng_todate datetime,is_additional numeric )";
            }
            string custmflash = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='custom_tamflash'");
            if (custmflash == "0")
            {
                creat_sms = creat_sms + "  create table custom_tamflash (user_id nvarchar(50),tam_title nvarchar(1000),tam_scroll_text nvarchar(2000),tam_fromdate datetime ,tam_todate datetime,is_additional numeric)";
            }
            if (creat_sms != "")
            {
                int smscreatqry = d2.update_method_wo_parameter(creat_sms, "Text");
            }
            //alter
            string altersmsqry = string.Empty;
            string titl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'UserMaster' AND COLUMN_NAME = 'adminuse_var'");
            if (titl == "0")
            {
                altersmsqry = " alter TABLE UserMaster ADD adminuse_var int NULL";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Trustees_Info'");
            if (find_tablename != "0")
            {
                string hans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Trustees_Info' AND COLUMN_NAME = 'HAN'");
                if (titl == "0")
                {
                    altersmsqry = " Alter Table Trustees_Info Add HAN nvarchar(200)";
                }
                string hat = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Trustees_Info' AND COLUMN_NAME = 'HAT'");
                if (hat == "0")
                {
                    altersmsqry = " Alter Table Trustees_Info Add HAT Datetime";
                }
                string hate1 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Trustees_Info' AND COLUMN_NAME = 'HAT1'");
                if (hate1 == "0")
                {
                    altersmsqry = " Alter Table Trustees_Info Add HAT1 Datetime";
                }
                string hate2 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Trustees_Info' AND COLUMN_NAME = 'HAT2'");
                if (hate2 == "0")
                {
                    altersmsqry = " Alter Table Trustees_Info Add HAT2 Datetime";
                }
                string asps = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Trustees_Info' AND COLUMN_NAME = 'ASP'");
                if (asps == "0")
                {
                    altersmsqry = " Alter Table Trustees_Info Add ASP Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='userlog'");
            if (find_tablename != "0")
            {
                string ctrname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'userLog' AND COLUMN_NAME = 'ctrNam'");
                if (ctrname == "0")
                {
                    altersmsqry = " alter table userlog add  ctrNam nvarchar(500)";
                }
            }
            if (altersmsqry != "")
            {
                int altersms = d2.update_method_wo_parameter(altersmsqry, "Text");
            }
            bindgrid();
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void sms1_3()
    {
        try
        {
            //againsms
            string find_tablename = string.Empty;
            string againsmsqry = string.Empty;
            string SMSTemplate = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SMS_Template'");
            if (SMSTemplate == "0")
            {
                againsmsqry = "  create table SMS_Template(temp_id numeric identity(1,1),temp_code numeric,temp_date datetime,Template nvarchar(200),college_code numeric)";
            }
            string SMSPurpose = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SMS_Purpose'");
            if (SMSPurpose == "0")
            {
                againsmsqry = againsmsqry + "  create table SMS_Purpose(temp_code numeric identity(1,1),Purpose nvarchar(200),college_code numeric)";
            }
            string TrackValue = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Track_Value'");
            if (TrackValue == "0")
            {
                againsmsqry = againsmsqry + "  create table Track_Value(SMS_User_ID  nvarchar(100),college_code numeric)";
            }
            string AutomaticSMS = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Automatic_SMS'");
            if (AutomaticSMS == "0")
            {
                againsmsqry = againsmsqry + "  create table Automatic_SMS(batch_year int,degree_code int,temp_id int,sending_Time datetime,sms_purpose nvarchar(100),college_code int)";
            }
            string SmsStatus = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Sms_Status'");
            if (SmsStatus == "0")
            {
                againsmsqry = againsmsqry + "  create table Sms_Status(roll_no nvarchar(100),date datetime ,status int)";
            }
            string startsms = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='start_sms'");
            if (startsms == "0")
            {
                againsmsqry = againsmsqry + "  create table start_sms(startstop int,college_code int)";
            }
            string printtables = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='printtable'");
            if (printtables == "0")
            {
                againsmsqry = againsmsqry + "  create table printtable (roll_no char(50),print_date char(50),print_val integer,exam_code integer)";
            }
            string SMSMasterSetting = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SMSMaster_Setting'");
            if (SMSMasterSetting == "0")
            {
                againsmsqry = againsmsqry + "  Create Table SMSMaster_Setting(Student bit,Father bit,Mother bit,Send bit)";
            }
            string SMSLibTemplate = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SMS_LibTemplate'");
            if (SMSLibTemplate == "0")
            {
                againsmsqry = againsmsqry + " CREATE TABLE SMS_LibTemplate(Temp_ID Numeric identity(1,1),Temp_Code numeric,Temp_Date Datetime,Template nvarchar(1600),College_Code Numeric,IsTamil numeric,Temp_Type nvarchar(30))";
            }
            if (againsmsqry != "")
            {
                int aginsmscreatqry = d2.update_method_wo_parameter(againsmsqry, "Text");
            }
            //againsms altr
            string aginaltrsmsqry = string.Empty;
            string Templates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SMS_Template' AND COLUMN_NAME = 'Template'");
            if (Templates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table SMS_Template alter column Template nvarchar(800)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Automatic_SMS'");
            if (find_tablename != "0")
            {
                string attPerc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'att_Perc'");
                if (attPerc == "0")
                {
                    aginaltrsmsqry = aginaltrsmsqry + " alter table Automatic_SMS add att_Perc numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SMS_Template'");
            if (find_tablename != "0")
            {
                string istamils = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SMS_Template' AND COLUMN_NAME = 'istamil'");
                if (istamils == "0")
                {
                    aginaltrsmsqry = aginaltrsmsqry + " alter table SMS_Template add  istamil numeric";
                }
            }
            string SendAttendance = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SMSMaster_Setting' AND COLUMN_NAME = 'Send_Attendance'");
            if (SendAttendance == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table SMSMaster_Setting Add Send_Attendance Bit";
            }
            string SendGateExit = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SMSMaster_Setting' AND COLUMN_NAME = 'Send_GateExit'");
            if (SendGateExit == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table SMSMaster_Setting Add Send_GateExit Bit";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SMS_Template'");
            if (find_tablename != "0")
            {
                string SMSisStaff = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SMS_Template' AND COLUMN_NAME = 'isStaff'");
                if (SMSisStaff == "0")
                {
                    aginaltrsmsqry = aginaltrsmsqry + " Alter table SMS_Template add isStaff numeric";
                }
            }
            string SMisstf = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SMS_Purpose' AND COLUMN_NAME = 'isStaff'");
            if (SMisstf == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table SMS_Purpose add isStaff numeric";
            }
            string Fathermobile = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Start_Sms' AND COLUMN_NAME = 'Father_mobile'");
            if (Fathermobile == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter table Start_Sms add Father_mobile nvarchar(15)";
            }
            string Mothermobile = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Start_Sms' AND COLUMN_NAME = 'Mother_mobile'");
            if (Mothermobile == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter table Start_Sms add Mother_mobile nvarchar(15)";
            }
            string colmsg = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'smsdeliverytrackmaster' AND COLUMN_NAME = 'message'");
            if (colmsg != "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table smsdeliverytrackmaster alter column message nvarchar(max)";
            }
            string SendDate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'Send_Date'");
            if (SendDate == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table Automatic_SMS Add Send_Date datetime";
            }
            string TestName = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'Test_Name'");
            if (TestName == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table Automatic_SMS Add Test_Name nvarchar(100)";
            }
            string voicecall = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'smsdeliverytrackmaster' AND COLUMN_NAME = 'voice_call'");
            if (voicecall == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table smsdeliverytrackmaster add voice_call numeric(18,0)";
            }
            string voicecall_status = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'smsdeliverytrackmaster' AND COLUMN_NAME = 'voice_call_status'");
            if (voicecall_status == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table smsdeliverytrackmaster add voice_call_status VarChar(300)";
            }
            string StudWish = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'Stud_Wish'");
            if (StudWish == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table Automatic_SMS Add Stud_Wish Bit";
            }
            string StaffWish = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'Staff_Wish'");
            if (StaffWish == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table Automatic_SMS Add Staff_Wish Bit";
            }
            string CamMarks = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'CamMark'");
            if (CamMarks == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table Automatic_SMS Add CamMark Bit";
            }
            string IsSends = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'IsSend'");
            if (IsSends == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table Automatic_SMS Add IsSend Bit";
            }
            string SendToStuds = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'SendToStud'");
            if (SendToStuds == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table Automatic_SMS Add SendToStud Bit";
            }
            string SendToStaffs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'SendToStaff'");
            if (SendToStaffs == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table Automatic_SMS Add SendToStaff Bit";
            }
            string SendToHOD = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'SendToHOD'");
            if (SendToHOD == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table Automatic_SMS Add SendToHOD Bit";
            }
            string SendToHOffs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'SendToHOff'");
            if (SendToHOffs == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table Automatic_SMS Add SendToHOff Bit";
            }
            string MobileNoss = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'MobileNos'");
            if (MobileNoss == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table Automatic_SMS Add MobileNos nvarchar(300)";
            }
            string SendSession = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'Send_Session'");
            if (SendSession == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table Automatic_SMS Add Send_Session tinyint";
            }
            if (aginaltrsmsqry != "")
            {
                int aginsmsalt = d2.update_method_wo_parameter(aginaltrsmsqry, "Text");
            }
            //21-042016
            string smscreat = string.Empty;
            string getsms = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='smsdeliverytrackmaster'");
            if (getsms == "0")
            {
                smscreat = " cREATE TABLE [dbo].[smsdeliverytrackmaster]([mobilenos] [nvarchar](max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [groupmessageid] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [message] [nvarchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [college_code] [nchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [isstaff] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ) ON [PRIMARY] ";
            }
            if (smscreat != "")
            {
                int cantn = d2.update_method_wo_parameter(smscreat, "Text");
            }
            aginaltrsmsqry = string.Empty;
            string dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'smsdeliverytrackmaster' AND COLUMN_NAME = 'date'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table smsdeliverytrackmaster add date varchar(50)";
            }
            if (aginaltrsmsqry != "")
            {
                int aginsmsalt = d2.update_method_wo_parameter(aginaltrsmsqry, "Text");
            }

            #region Added By Malang Raja On Jul 14 2017

            string query = "alter table smsdeliverytrackmaster add smsFor nvarchar(100) not null constraint DF_smsdeliverytrackmaster_smsFor default('')";
            ExecuteQuery(query, "smsdeliverytrackmaster", "smsFor", 1);

            query = "alter table smsdeliverytrackmaster add studentAppNo bigint not null constraint DF_smsdeliverytrackmaster_studentAppNo default(0)";
            ExecuteQuery(query, "smsdeliverytrackmaster", "studentAppNo", 1);

            #endregion Added By Malang Raja On Jul 14 2017

            bindgrid();
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void sms4()
    {
        try
        {
            string find_tablename = string.Empty;
            string smscreat = string.Empty;
            string getsms = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='smsdeliverytrackmaster'");
            if (getsms == "0")
            {
                smscreat = " cREATE TABLE [dbo].[smsdeliverytrackmaster]([mobilenos] [nvarchar](max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [groupmessageid] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [message] [nvarchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [college_code] [nchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [isstaff] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ) ON [PRIMARY] ";
            }
            getsms = string.Empty;
            getsms = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='uploadvoices'");
            if (getsms == "0")
            {
                smscreat = smscreat + " Create table uploadvoices (voicefilename varchar(50),filetype varchar(50),filedate datetime,collegecode numeric(18,0)) ";
            }
            getsms = string.Empty;
            getsms = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_notification'");
            if (getsms == "0")
            {
                smscreat = smscreat + " create table tbl_notification (idno int identity(1,1),viewrs nvarchar(100),notification_date datetime,notification_time datetime,subject nvarchar(200),notification nvarchar(4000),filetype nvarchar(100),  fileupload varbinary(max),isstaff int,Viewdetails nvarchar(300),College_Code int,status int)";
            }
            getsms = string.Empty;
            getsms = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_attendance_rights'");
            if (getsms == "0")
            {
                smscreat = smscreat + " create table tbl_attendance_rights (user_id int,batch_year int,sections nvarchar(25),college_code int)";
            }
            if (smscreat != "")
            {
                int cantn = d2.update_method_wo_parameter(smscreat, "Text");
            }
            string aginaltrsmsqry = string.Empty;
            string dates = string.Empty;
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='smsdeliverytrackmaster'");
            if (find_tablename != "0")
            {
                dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'smsdeliverytrackmaster' AND COLUMN_NAME = 'date'");
                if (dates == "0")
                {
                    aginaltrsmsqry = aginaltrsmsqry + " alter table smsdeliverytrackmaster add date datetime";
                }
                else
                {
                    aginaltrsmsqry = aginaltrsmsqry + " alter table smsdeliverytrackmaster alter column date datetime";
                }
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_notification' AND COLUMN_NAME = 'staff_code'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table tbl_notification add staff_code nvarchar(50)";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_notification' AND COLUMN_NAME = 'sender_id'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table tbl_notification add sender_id nvarchar(100)";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_notification' AND COLUMN_NAME = 'Sender_Description'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table tbl_notification add Sender_Description nvarchar(100)";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_notification' AND COLUMN_NAME = 'sender_staff'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table tbl_notification add sender_staff int";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_notification' AND COLUMN_NAME = 'is_notification'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table tbl_notification add is_notification int";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_notification' AND COLUMN_NAME = 'attache_file'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table tbl_notification add attache_file varbinary(max)";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_notification' AND COLUMN_NAME = 'attche_filetype'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table tbl_notification add attche_filetype nvarchar(500)";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_notification' AND COLUMN_NAME = 'filename'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table tbl_notification add filename nvarchar(200)";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_notification' AND COLUMN_NAME = 'sender_rollno'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table tbl_notification add sender_rollno varchar(100)";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_attendance_rights' AND COLUMN_NAME = 'sections'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table tbl_attendance_rights alter column sections varchar(100)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='smsdeliverytrackmaster'");
            if (find_tablename != "0")
            {
                dates = string.Empty;
                dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'smsdeliverytrackmaster' AND COLUMN_NAME = 'sender_id'");
                if (dates == "0")
                {
                    aginaltrsmsqry = aginaltrsmsqry + " Alter table smsdeliverytrackmaster add sender_id varchar(20)";
                }
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'is_web'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table Automatic_SMS add is_web int";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'Template'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table Automatic_SMS add Template nvarchar(800)";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'emailtemplate'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table Automatic_SMS add emailtemplate nvarchar(800)";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'user_code'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table Automatic_SMS add user_code  int";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'staff_code'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table Automatic_SMS add staff_code nvarchar(50)";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'notestbl' AND COLUMN_NAME = 'hr'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " alter table notestbl add hr tinyint,Sections nvarchar(50)";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'IncludeLongAbs'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table Automatic_SMS Add IncludeLongAbs Bit";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'IncludeLongAbsCount'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table Automatic_SMS Add IncludeLongAbsCount int";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'StfAttnRepWithLeave'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table Automatic_SMS Add StfAttnRepWithLeave Bit";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'StfAttnRepGroupStfType'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table Automatic_SMS Add StfAttnRepGroupStfType Bit";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'GPSSmsData'");
            if (find_tablename != "0")
            {
                dates = string.Empty;
                dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'GPSSmsData' AND COLUMN_NAME = 'Priority'");
                if (dates == "0")
                {
                    aginaltrsmsqry = aginaltrsmsqry + " Alter Table GPSSmsData Add Priority int";
                }
                dates = string.Empty;
                dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'GPSSmsData' AND COLUMN_NAME = 'DelayTime'");
                if (dates == "0")
                {
                    aginaltrsmsqry = aginaltrsmsqry + " Alter Table GPSSmsData Add DelayTime nvarchar(30)";
                }
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SMSMaster_Setting' AND COLUMN_NAME = 'StudCAt'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table SMSMaster_Setting Add StudCAt nvarchar(300)";
            }
            dates = string.Empty;
            dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'IsStudAttnGroup'");
            if (dates == "0")
            {
                aginaltrsmsqry = aginaltrsmsqry + " Alter Table Automatic_SMS Add IsStudAttnGroup Bit";
            }
            if (aginaltrsmsqry != "")
            {
                int aginsmsalt = d2.update_method_wo_parameter(aginaltrsmsqry, "Text");
            }
            getsms = string.Empty;
            getsms = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SMS_MASTERSETTINGS'");
            if (getsms == "0")
            {
                //smscreat = " create table SMS_MASTERSETTINGS(SMSAPIPK INT identity PRIMARY KEY,SMSAPI_URL NVARCHAR(50),USERID NVARCHAR(50),SENDERID NVARCHAR(50),PASSWORD NVARCHAR(20),COLLEGECODE INT)";
                smscreat = " CREATE TABLE [dbo].[SMS_MASTERSETTINGS]([SMSAPIPK] [int] IDENTITY(1,1) NOT NULL,[SMSAPI_URL] [nvarchar](50) NULL,[USERID] [nvarchar](50) NULL,[SENDERID] [nvarchar](50) NULL,[PASSWORD] [nvarchar](20) NULL,	[COLLEGECODE] [int] NULL,	[DEGREECODE] [bigint] NULL,PRIMARY KEY CLUSTERED (	[SMSAPIPK] ASC)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]) ON [PRIMARY]";
                int cantn = d2.update_method_wo_parameter(smscreat, "Text");
            }
            getsms = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SMS_MASTERSETTINGS'");
            if (getsms != "0")
            {
                dates = string.Empty;
                dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SMS_MASTERSETTINGS' AND COLUMN_NAME = 'SmsreporterAPI_Url'");
                if (dates == "0")
                {
                    smscreat = string.Empty;
                    smscreat = " Alter table sms_mastersettings Add SmsreporterAPI_Url nvarchar(100)";
                    int cantn = d2.update_method_wo_parameter(smscreat, "Text");
                }
                dates = string.Empty;
                dates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SMS_MASTERSETTINGS' AND COLUMN_NAME = 'DEGREECODE'");
                if (dates == "0")
                {
                    smscreat = string.Empty;
                    smscreat = " Alter table SMS_MASTERSETTINGS Add DEGREECODE bigint";
                    int cantn = d2.update_method_wo_parameter(smscreat, "Text");
                }
            }
            string qry = "if exists (select * from IPatchStatus where ModuleName='SMS') update IPatchStatus set ClientUpdatedDate='" + DateTime.Now.ToString("yyyy/MM/dd") + "' where ModuleName='SMS' ";
            int res = d2.update_method_wo_parameter(qry, "Text");
            if (res != 0)
            {
                alertmessage.Visible = true;
                lbl_alerterror.Text = " Updated Successfully";
            }
            bindgrid();
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void COE()
    {
        try
        {
            string find_tablename = string.Empty;
            string coecrt = string.Empty;
            string exmdt = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Exmtt_Det_Practical'");
            if (exmdt == "0")
            {
                coecrt = " CREATE TABLE [dbo].[Exmtt_Det_Practical] ( [entry_code] [numeric](18, 0) NOT NULL ,[Pr_Code] [numeric](18, 0) IDENTITY (10, 1) NOT NULL ,[BatchName] [varchar] (50) NOT NULL ,[StartTime] [datetime] NOT NULL , [EndTime][datetime] NOT NULL ,[Session] [varchar] (50) NOT NULL ,[ExamDate] [DateTime] Not Null )";
            }
            string assmark = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Assess_Mark_Master'");
            if (assmark == "0")
            {
                coecrt = coecrt + " CREATE TABLE [dbo].[Assess_Mark_Master] ([AssessType] [varchar] (50) NOT NULL ,[Marks] [float] NOT NULL ,[Entry_Code] [numeric](18, 0) IDENTITY (1, 1) NOT NULL ,[AssessTypeCode] [numeric](18, 0) NOT NULL ,[College_Code] [Numeric](18, 0)  Not Null ) ON [PRIMARY]";
            }
            string Exmfeestatus = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ExmFeeStatus'");
            if (Exmfeestatus == "0")
            {
                coecrt = coecrt + " CREATE TABLE [dbo].[ExmFeeStatus] ([Degree_Code] [numeric](18, 0) NULL ,[Current_Semester] [numeric](18, 0) NULL ,[Batch_Year] [numeric](18, 0) NULL ,[NoSubject] [numeric](18, 0) NULL ,[FeeAmount] [money] NULL ,[Ret_no] [money] NULL)";
            }
            string Examgrpinfo = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Exam_GroupInfo'");
            if (Examgrpinfo == "0")
            {
                coecrt = coecrt + " CREATE TABLE [dbo].[Exam_GroupInfo] ([Exam_date] [datetime] NULL ,[Exam_Session] [nvarchar] (2) NULL ,[Group_Info] [nvarchar] (50) NULL ,[Degree_code] [numeric](18, 0) NULL ,[NoStud_Allot] [numeric](18, 0) NULL ,[TotAvail] [numeric](18, 0) NULL)";
            }
            string FnlMarkStmt = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Final_MarkStmt'");
            if (FnlMarkStmt == "0")
            {
                coecrt = coecrt + " CREATE TABLE [dbo].[Final_MarkStmt] ([Roll_no] [nvarchar] (50) NULL ,[Subject_No] [numeric](18, 0) NULL ,[Internal_Mark] [float] NULL ,[External_Mark] [float] NULL ,[Total] [float] NULL ,[Result] [nvarchar] (50) NULL ,[ArrType] [nvarchar] (50) NULL ,[Attmpt] [char] (10) NULL ,[Semester] [numeric](18, 0) NULL)";
            }
            string ExmBatch = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ExamBatch'");
            if (ExmBatch == "0")
            {
                coecrt = coecrt + " CREATE TABLE [dbo].[ExamBatch] ([roll_no] [nvarchar] (50) NULL , [subject_no] [numeric](18, 0) NULL , [Batch] [nvarchar] (20) NULL ,[Examcode] [numeric](18, 0) NULL CONSTRAINT [FK_ExamBatch_subject] FOREIGN KEY ( [subject_no]) REFERENCES [subject] ( [subject_no] ) ) ON [PRIMARY]";
            }
            if (coecrt != "")
            {
                int coealter = d2.update_method_wo_parameter(coecrt, "Text");
            }
            //Alter
            string ceo_alter = string.Empty;
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='class_master'");
            if (find_tablename != "0")
            {
                string srlno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'class_master' AND COLUMN_NAME = 'ItemDetails'");
                if (srlno == "0")
                {
                    ceo_alter = " alter table class_master add ItemDetails varchar (100),InterComNos varchar (100),ItemCode varChar (100)";
                }
            }
            string Infinal = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'camarksdetail' AND COLUMN_NAME = 'Infinal'");
            if (Infinal == "0")
            {
                ceo_alter = ceo_alter + " alter table camarksdetail add Infinal bit";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subject'");
            if (find_tablename != "0")
            {
                string minoral = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'min_Orl_marks'");
                if (minoral == "0")
                {
                    ceo_alter = ceo_alter + " alter table subject  add min_Orl_marks smallint";
                }
                string maxoral = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'max_Orl_marks'");
                if (maxoral == "0")
                {
                    ceo_alter = ceo_alter + " alter table subject  add max_Orl_marks  smallint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Mark_entry'");
            if (find_tablename != "0")
            {
                string Oral_Marks = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Mark_entry' AND COLUMN_NAME = 'Oral_Marks'");
                if (Oral_Marks == "0")
                {
                    ceo_alter = ceo_alter + " alter table Mark_entry  add Oral_Marks float";
                }
            }

            #region Added By Malang Raja On Jun 19 2017

            string query = "alter table mark_entry add Act_ReTotalMark float";
            ExecuteQuery(query, "mark_entry", "Act_ReTotalMark", 1);

            #endregion Added By Malang Raja On Jun 19 2017

            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subject'");
            if (find_tablename != "0")
            {
                string Comsub = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'Comsub'");
                if (Comsub == "0")
                {
                    ceo_alter = ceo_alter + " alter table subject add Comsub numeric";
                }
                string mapt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'Mapto'");
                if (mapt == "0")
                {
                    ceo_alter = ceo_alter + " alter table subject add Mapto numeric";
                }
            }
            string sttus = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'syllabus_master' AND COLUMN_NAME = 'Status'");
            if (sttus == "0")
            {
                ceo_alter = ceo_alter + " alter table syllabus_master add Status numeric";
            }
            string ar_sttus = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Exam_Details' AND COLUMN_NAME = 'Arrear_Status'");
            if (ar_sttus == "0")
            {
                ceo_alter = ceo_alter + " alter table Exam_Details add Arrear_Status numeric";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exam_application'");
            if (find_tablename != "0")
            {
                string RetainAmt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_application' AND COLUMN_NAME = 'Retained_Amt'");
                if (RetainAmt == "0")
                {
                    ceo_alter = ceo_alter + " alter table exam_application add Retained_Amt Money";
                }
                string chalno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_application' AND COLUMN_NAME = 'Challen_No'");
                if (chalno == "0")
                {
                    ceo_alter = ceo_alter + " alter table exam_application add Challen_No nvarchar";
                }
            }
            string retno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_appl_details' AND COLUMN_NAME = 'Ret_no'");
            if (retno == "0")
            {
                ceo_alter = ceo_alter + " alter table exam_appl_details add Ret_no Money";
            }
            string Regulation = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exmfeestatus' AND COLUMN_NAME = 'Regulation'");
            if (Regulation == "0")
            {
                ceo_alter = ceo_alter + " alter table exmfeestatus add Regulation numeric";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='sub_sem'");
            if (find_tablename != "0")
            {
                string clincal = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'sub_sem' AND COLUMN_NAME = 'Clinical'");
                if (clincal == "0")
                {
                    ceo_alter = ceo_alter + " alter table sub_sem add  Clinical bit";
                }
            }
            string chlno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_appl_details' AND COLUMN_NAME = 'Challen_No'");
            if (chlno == "0")
            {
                ceo_alter = ceo_alter + " alter table exam_appl_details alter column  Challen_No nvarchar(50)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exam_seating'");
            if (find_tablename != "0")
            {
                string seatno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_seating' AND COLUMN_NAME = 'seat_no'");
                if (seatno == "0")
                {
                    ceo_alter = ceo_alter + "  alter table exam_seating add seat_no numeric";
                }
                string arangment = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_seating' AND COLUMN_NAME = 'arrangement'");
                if (arangment == "0")
                {
                    ceo_alter = ceo_alter + " alter table exam_seating add arrangement bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subject'");
            if (find_tablename != "0")
            {
                string regsb = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'Regsub'");
                if (regsb == "0")
                {
                    ceo_alter = ceo_alter + " alter table subject add Regsub bit";
                }
            }
            string resn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'hall_ticket' AND COLUMN_NAME = 'Reason'");
            if (resn == "0")
            {
                ceo_alter = ceo_alter + " alter table hall_ticket add Reason nvarchar(200)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='sub_unit_details'");
            if (find_tablename != "0")
            {
                string bokdt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'sub_unit_details' AND COLUMN_NAME = 'Book_Details'");
                if (bokdt == "0")
                {
                    ceo_alter = ceo_alter + " alter table sub_unit_details add Book_Details nvarchar(900)";
                }
            }
            string splmod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'camarks' AND COLUMN_NAME = 'specialMod'");
            if (splmod == "0")
            {
                ceo_alter = ceo_alter + " alter table camarks add specialMod float(4)";
            }
            splmod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'camarks' AND COLUMN_NAME = 'UserId'");
            if (splmod == "0")
            {
                ceo_alter = ceo_alter + " alter table camarks add UserId int";
            }
            string sems = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_groupinfo' AND COLUMN_NAME = 'Semester'");
            if (sems == "0")
            {
                ceo_alter = ceo_alter + " alter table exam_groupinfo add Semester numeric";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='sssss'");
            if (find_tablename != "0")
            {
                string cosappl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_application' AND COLUMN_NAME = 'cost_appl'");
                if (cosappl == "0")
                {
                    ceo_alter = ceo_alter + " alter table exam_application add cost_appl numeric";
                }
                string costmark = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_application' AND COLUMN_NAME = 'cost_mark'");
                if (costmark == "0")
                {
                    ceo_alter = ceo_alter + " alter table exam_application add cost_mark numeric";
                }
                string chalnno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_application' AND COLUMN_NAME = 'challen_no'");
                if (chalnno == "0")
                {
                    ceo_alter = ceo_alter + " alter table exam_application alter column challen_no nvarchar(250)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subject'");
            if (find_tablename != "0")
            {
                string minwomark = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'min_WO_marks'");
                if (minwomark == "0")
                {
                    ceo_alter = ceo_alter + " alter table subject add min_WO_marks smallint";
                }
                string maxmark = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'max_WO_marks'");
                if (maxmark == "0")
                {
                    ceo_alter = ceo_alter + " alter table subject add max_WO_marks smallint";
                }
                string minprack = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'min_Pract_marks'");
                if (minprack == "0")
                {
                    ceo_alter = ceo_alter + " alter table subject add min_Pract_marks smallint";
                }
                string maxprack = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'max_Pract_marks'");
                if (maxprack == "0")
                {
                    ceo_alter = ceo_alter + " alter table subject add max_Pract_marks smallint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='sub_sem'");
            if (find_tablename != "0")
            {
                string seminr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'sub_sem' AND COLUMN_NAME = 'seminar'");
                if (seminr == "0")
                {
                    ceo_alter = ceo_alter + " alter table sub_sem add seminar bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subject'");
            if (find_tablename != "0")
            {
                string compap = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'comp_pap'");
                if (compap == "0")
                {
                    ceo_alter = ceo_alter + " alter table subject add comp_pap bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='mark_entry'");
            if (find_tablename != "0")
            {
                string rejstat = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'mark_entry' AND COLUMN_NAME = 'rej_stat'");
                if (rejstat == "0")
                {
                    ceo_alter = ceo_alter + " alter table mark_entry add rej_stat bit default 0";
                }
                string womark = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'mark_entry' AND COLUMN_NAME = 'wo_marks'");
                if (womark == "0")
                {
                    ceo_alter = ceo_alter + " alter table mark_entry add wo_marks float";
                }
                string markcp = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'mark_entry' AND COLUMN_NAME = 'cp'");
                if (markcp == "0")
                {
                    ceo_alter = ceo_alter + " alter table mark_entry add cp numeric";
                }
                string prackmrk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'mark_entry' AND COLUMN_NAME = 'Pract_marks'");
                if (prackmrk == "0")
                {
                    ceo_alter = ceo_alter + " alter table mark_entry add Pract_marks float";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='sub_unit_details'");
            if (find_tablename != "0")
            {
                string bkref = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'sub_unit_details' AND COLUMN_NAME = 'bookref'");
                if (bkref == "0")
                {
                    ceo_alter = ceo_alter + " alter table sub_unit_details alter  column bookref nvarchar(500)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exmtt_det'");
            if (find_tablename != "0")
            {
                string Btch = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exmtt_det' AND COLUMN_NAME = 'Batch'");
                if (Btch == "0")
                {
                    ceo_alter = ceo_alter + " alter table exmtt_det add  [Batch] [nvarchar] (20) ";
                }
            }
            if (ceo_alter != "")
            {
                int ceoalter = d2.update_method_wo_parameter(ceo_alter, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void COE1()
    {
        try
        {
            string find_tablename = string.Empty;
            string coeagincreateqry = string.Empty;
            string rmrkdetail = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='shoratage_mark'");
            if (rmrkdetail == "0")
            {
                coeagincreateqry = " create table shoratage_mark (subject_no integer,exam_code integer,old_int smallint,old_ext smallint,new_int smallint,new_ext smallint,alloted_mark smallint,roll_no varchar(50))";
            }
            string markcon = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Mark_Conversion'");
            if (markcon == "0")
            {
                coeagincreateqry = coeagincreateqry + " create table Mark_Conversion(batch_year numeric,dagree_code numeric,exam_code numeric,conversion_value numeric)";
            }
            if (coeagincreateqry != "")
            {
                int againacdcreat = d2.update_method_wo_parameter(coeagincreateqry, "Text");
            }
            //Alter
            string againaltacd = string.Empty;
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subject'");
            if (find_tablename != "0")
            {
                string crdpoint = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'credit_points'");
                if (crdpoint != "0")
                {
                    againaltacd = " alter table subject alter column credit_points float";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='sub_unit_details'");
            if (find_tablename != "0")
            {
                string methodolgy = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'sub_unit_details' AND COLUMN_NAME = 'methogology'");
                if (methodolgy == "0")
                {
                    againaltacd = againaltacd + " alter table sub_unit_details add methogology nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='sub_unit_details'");
            if (find_tablename != "0")
            {
                string instructionmedia = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'sub_unit_details' AND COLUMN_NAME = 'instructional_media'");
                if (instructionmedia == "0")
                {
                    againaltacd = againaltacd + " alter table sub_unit_details add instructional_media nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subject'");
            if (find_tablename != "0")
            {
                string tohour = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'Tot_Hours'");
                if (tohour == "0")
                {
                    againaltacd = againaltacd + " alter table subject add Tot_Hours integer";
                }
                string subsourc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'subcourse_code'");
                if (subsourc == "0")
                {
                    againaltacd = againaltacd + " alter table subject add subcourse_code nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exam_application'");
            if (find_tablename != "0")
            {
                string feeamnt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_application' AND COLUMN_NAME = 'fee_amount'");
                if (feeamnt == "0")
                {
                    againaltacd = againaltacd + " alter table exam_application add fee_amount integer";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exam_seating'");
            if (find_tablename != "0")
            {
                string degcods = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_seating' AND COLUMN_NAME = 'degree_code'");
                if (degcods == "0")
                {
                    againaltacd = againaltacd + " alter table exam_seating add degree_code int";
                }
                string examsections = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_seating' AND COLUMN_NAME = 'sections'");
                if (examsections == "0")
                {
                    againaltacd = againaltacd + " alter table exam_seating add sections varchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='mark_entry'");
            if (find_tablename != "0")
            {
                string actintmark = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'mark_entry' AND COLUMN_NAME = 'actual_internal_mark'");
                if (actintmark == "0")
                {
                    againaltacd = againaltacd + " alter table mark_entry add actual_internal_mark float";
                }
                string actexttmark = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'mark_entry' AND COLUMN_NAME = 'actual_external_mark'");
                if (actexttmark == "0")
                {
                    againaltacd = againaltacd + " alter table mark_entry add actual_external_mark float";
                }
                string acttotal = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'mark_entry' AND COLUMN_NAME = 'actual_total'");
                if (acttotal == "0")
                {
                    againaltacd = againaltacd + " alter table mark_entry add actual_total float";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='camarks'");
            if (find_tablename != "0")
            {
                string camark = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'camarks' AND COLUMN_NAME = 'actual_total'");
                if (camark == "0")
                {
                    againaltacd = againaltacd + " alter table camarks add actual_total float";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Mark_Entry'");
            if (find_tablename != "0")
            {
                string actgrad = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Mark_Entry' AND COLUMN_NAME = 'Actual_Grade'");
                if (actgrad == "0")
                {
                    againaltacd = againaltacd + " Alter Table Mark_Entry Add Actual_Grade nvarchar(10)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Subject'");
            if (find_tablename != "0")
            {
                string maxst = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Subject' AND COLUMN_NAME = 'MaxStud'");
                if (maxst == "0")
                {
                    againaltacd = againaltacd + " Alter Table Subject Add MaxStud numeric";
                }
                string elect = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Subject' AND COLUMN_NAME = 'Elective'");
                if (elect == "0")
                {
                    againaltacd = againaltacd + " Alter Table Subject Add Elective bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='sub_sem'");
            if (find_tablename != "0")
            {
                string electpag = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'sub_sem' AND COLUMN_NAME = 'ElectivePap'");
                if (electpag == "0")
                {
                    againaltacd = againaltacd + " Alter Table sub_sem Add ElectivePap bit";
                }
            }
            if (againaltacd != "")
            {
                int altacdamicqry = d2.update_method_wo_parameter(againaltacd, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void COE3rd()
    {
        try
        {
            //create table selvam 3 
            string find_tablename = string.Empty;
            string coeagncreateqry = string.Empty;
            string getvalus = string.Empty;
            //getvalus = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='COE_Master_Settings'");
            //if (getvalus == "0")
            //{
            //    coeagncreateqry = " CREATE TABLE [dbo].[COE_Master_Settings]([masterno] [int] IDENTITY(1,1) NOT NULL,[settings] [varchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[value] [varchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL) ON [PRIMARY]";
            //}
            getvalus = string.Empty;
            getvalus = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='COE_Master_Settings'");
            if (getvalus == "0")
            {
                coeagncreateqry = coeagncreateqry + " CREATE TABLE [dbo].[COE_Master_Settings]([masterno] [int] IDENTITY(1,1) NOT NULL,[settings] [varchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[value] [varchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL) ON [PRIMARY]";
            }
            getvalus = string.Empty;
            getvalus = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='individual_stud_mark'");
            if (getvalus == "0")
            {
                coeagncreateqry = coeagncreateqry + " CREATE TABLE [dbo].[individual_stud_mark]( [roll_no] [nvarchar](30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [batch_year] [int] NULL, [degree_code] [int] NULL, [semester] [int] NULL, [subject_no] [int] NULL, [mark] [int] NULL, [collegecode] [int] NULL, [ExamNo] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [ExamDate] [datetime] NULL, [type] [int] NULL, [randomtype] [int] null ) ON [PRIMARY]";
            }
            getvalus = string.Empty;
            getvalus = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='marks_new'");
            if (getvalus == "0")
            {
                coeagncreateqry = coeagncreateqry + " CREATE TABLE [marks_new] ( [university_code] [numeric](18, 0) NULL , [course_code] [numeric](18, 0) NULL , [branch_code] [numeric](18, 0) NULL , [subject_no] [numeric](18, 0) NULL , [subject_name] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [max_marks] [float] NULL , [min_marks] [float] NULL , [mark_eigible] [numeric](18, 0) NULL, [priority] [smallint] NULL ) ON [PRIMARY]";
            }
            getvalus = string.Empty;
            getvalus = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='coe_classification'");
            if (getvalus == "0")
            {
                coeagncreateqry = coeagncreateqry + " CREATE TABLE [dbo].[coe_classification]( [frompoint] [float] NULL, [topoint] [float] NULL, [classification] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [collegecode] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ) ON [PRIMARY]";
            }
            getvalus = string.Empty;
            getvalus = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='coe_attmaxmark'");
            if (getvalus == "0")
            {
                coeagncreateqry = coeagncreateqry + " CREATE TABLE [dbo].[coe_attmaxmark]( [attempts] [int] NULL, [maxmark] [int] NULL, [collegecode] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ) ON [PRIMARY]";
            }
            getvalus = string.Empty;
            getvalus = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='coe_classification_allpass'");
            if (getvalus == "0")
            {
                coeagncreateqry = coeagncreateqry + "  create table coe_classification_allpass(college_code numeric,edu_level varchar(100),cgpa float,classification varchar(200))";
            }
            if (coeagncreateqry != "")
            {
                int coe3creatqry = d2.update_method_wo_parameter(coeagncreateqry, "Text");
            }
            //alter query
            string altercoe = string.Empty;
            string getcalumn = string.Empty;
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subjectchooser'");
            if (find_tablename != "0")
            {
                getcalumn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subjectChooser' AND COLUMN_NAME = 'staffcode'");
                if (getcalumn == "0")
                {
                    altercoe = " alter table subjectChooser add staffcode nvarchar(50)";
                }
            }
            getcalumn = string.Empty;
            getcalumn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'coe_classification' AND COLUMN_NAME = 'edu_level'");
            if (getcalumn == "0")
            {
                altercoe = altercoe + " alter table coe_classification add edu_level nvarchar(50)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='sssss'");
            if (find_tablename != "0")
            {
                getcalumn = string.Empty;
                getcalumn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'camarks' AND COLUMN_NAME = 'Exam_Year'");
                if (getcalumn == "0")
                {
                    altercoe = altercoe + " alter table  camarks add Exam_Year int";
                }
                getcalumn = string.Empty;
                getcalumn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'camarks' AND COLUMN_NAME = 'Exam_Month'");
                if (getcalumn == "0")
                {
                    altercoe = altercoe + " alter table  camarks add Exam_Month int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subject'");
            if (find_tablename != "0")
            {
                getcalumn = string.Empty;
                getcalumn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'min_ext_marks'");
                if (getcalumn == "0")
                {
                    altercoe = altercoe + " alter table subject alter column min_ext_marks float";
                }
                getcalumn = string.Empty;
                getcalumn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'max_ext_marks'");
                if (getcalumn == "0")
                {
                    altercoe = altercoe + " alter table subject alter column max_ext_marks float";
                }
                getcalumn = string.Empty;
                getcalumn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'min_int_marks'");
                if (getcalumn == "0")
                {
                    altercoe = altercoe + " alter table subject alter column min_int_marks float";
                }
                getcalumn = string.Empty;
                getcalumn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'max_int_marks'");
                if (getcalumn == "0")
                {
                    altercoe = altercoe + " alter table subject alter column max_int_marks float";
                }
                getcalumn = string.Empty;
                getcalumn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'mintotal'");
                if (getcalumn == "0")
                {
                    altercoe = altercoe + " alter table subject alter column mintotal float";
                }
                getcalumn = string.Empty;
                getcalumn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'maxtotal'");
                if (getcalumn == "0")
                {
                    altercoe = altercoe + " alter table subject alter column maxtotal float";
                }
            }
            getcalumn = string.Empty;
            getcalumn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'grade_master' AND COLUMN_NAME = 'Frange'");
            if (getcalumn == "0")
            {
                altercoe = altercoe + " alter table grade_master alter column Frange float";
            }
            getcalumn = string.Empty;
            getcalumn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'grade_master' AND COLUMN_NAME = 'Trange'");
            if (getcalumn == "0")
            {
                altercoe = altercoe + " alter table grade_master alter column Trange float";
            }
            if (altercoe != "")
            {
                int altercoe3qry = d2.update_method_wo_parameter(altercoe, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void COE4TH()
    {
        try
        {
            string find_tablename = string.Empty;
            string coecrt4 = string.Empty;
            string gettablname = string.Empty;
            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='examfeepaidstatus'");
            if (gettablname == "0")
            {
                coecrt4 = " create table examfeepaidstatus(batch_year int,degree_code int,coll_code int,semester int,fee_code int)";
            }
            gettablname = string.Empty;
            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_equal_paper_Matching'");
            if (gettablname == "0")
            {
                coecrt4 = coecrt4 + " create table tbl_equal_paper_Matching (Exam_Year int,Exam_month int,Equal_Subject_Code nvarchar(50),Com_Subject_Code nvarchar(50)) ";
            }
            gettablname = string.Empty;
            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_foil_card'");
            if (gettablname == "0")
            {
                coecrt4 = coecrt4 + " create table tbl_foil_card (type nvarchar(15),section_name nvarchar(15),no_col int,value nvarchar(100),college_code int)";
            }
            gettablname = string.Empty;
            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_room_seats'");
            if (gettablname == "0")
            {
                coecrt4 = coecrt4 + " create table tbl_room_seats (mode varchar(200),Building_Name varchar(200),Floor_Name varchar(200),Hall_No varchar(200),no_of_columns int,no_of_rows int,default_view varchar(200),arranged_view varchar(200),actual_seats int,allocted_seats int,coll_code int,is_single int,exm_month int,exm_year int)";
            }
            if (gettablname != "0")
            {

            }
            gettablname = string.Empty;
            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='examtimetablesetting'");
            if (gettablname == "0")
            {
                coecrt4 = coecrt4 + " create table examtimetablesetting (mode varchar(50),day varchar(100),AN varchar(200),FN varchar(200),collegecode int,type varchar(200))";
            }
            gettablname = string.Empty;
            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exampriority'");
            if (gettablname == "0")
            {
                coecrt4 = coecrt4 + " create table exampriority(mode varchar(200),year varchar(200),education nvarchar(200),subject_type varchar(200),priority int,college_code int)";
            }
            gettablname = string.Empty;
            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='examholiday'");
            if (gettablname == "0")
            {
                coecrt4 = coecrt4 + " create table examholiday(exammonth int,examyear int, holiday_date varchar(200),startdate varchar(200),enddate varchar(200),college_code int)";
            }
            gettablname = string.Empty;
            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SubwiseRoomAllot'");
            if (gettablname == "0")
            {
                coecrt4 = coecrt4 + " Create table SubwiseRoomAllot (Batch_Year int,Degree_Code numeric,Semester int,Subject_No numeric,Room_Name nvarchar(60),Building_Name varchar(200),Floor_Name varchar(200))";
            }
            gettablname = string.Empty;
            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StudExamElig'");
            if (gettablname == "0")
            {
                coecrt4 = coecrt4 + " CREATE TABLE StudExamElig(Exam_Code numeric,Roll_No nvarchar(30))";
            }
            if (coecrt4 != "")
            {
                int creatcoe4 = d2.update_method_wo_parameter(coecrt4, "Text");
            }
            //Altercoe4
            string altercoe4 = string.Empty;
            string getcoe4 = string.Empty;
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='mark_entry'");
            if (find_tablename != "0")
            {
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'mark_entry' AND COLUMN_NAME = 'evaluation1'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + " alter table mark_entry add evaluation1 float";
                }
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'mark_entry' AND COLUMN_NAME = 'evaluation2'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + " alter table mark_entry add evaluation2 float";
                }
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'mark_entry' AND COLUMN_NAME = 'evaluation3'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + " alter table mark_entry add evaluation3 float";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exam_type'");
            if (find_tablename != "0")
            {
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_type' AND COLUMN_NAME = 'islock'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + " alter table exam_type add islock bit";
                }
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_type' AND COLUMN_NAME = 'elockdate'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + " alter table exam_type add elockdate datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_room_seats'");
            if (find_tablename != "0")
            {
                string defaultView = string.Empty;
                string defaultViewNew = string.Empty;
                string arrangeView = string.Empty;
                string arrangeViewNew = string.Empty;
                getcoe4 = string.Empty;
                string alterQ = string.Empty;
                int alQ = 0;
                defaultView = getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_room_seats' AND COLUMN_NAME = 'default_view'");
                if (getcoe4 != "0")
                {
                    alterQ = " alter table tbl_room_seats alter column default_view  nvarchar(Max)";
                    if (IsTableColumnAvailable("tbl_room_seats", "hasAlternate"))
                    {
                        ExecuteQuery("alter table tbl_room_seats drop column hasAlternate", "tbl_room_seats", "hasAlternate", 2);
                    }
                    alQ = d2.update_method_wo_parameter(alterQ, "text");
                }
                getcoe4 = string.Empty;
                arrangeView = getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_room_seats' AND COLUMN_NAME = 'arranged_view'");
                if (getcoe4 != "0")
                {
                    alterQ = " alter table tbl_room_seats alter column arranged_view  nvarchar(Max)";
                    if (IsTableColumnAvailable("tbl_room_seats", "hasAlternate"))
                    {
                        ExecuteQuery("alter table tbl_room_seats drop column hasAlternate", "tbl_room_seats", "hasAlternate", 2);
                    }
                    alQ = d2.update_method_wo_parameter(alterQ, "text");
                }
                getcoe4 = string.Empty;
                defaultViewNew = getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_room_seats' AND COLUMN_NAME = 'defaultViewNew'");
                if (getcoe4 == "0")
                {
                    alterQ = " alter table tbl_room_seats add defaultViewNew nvarchar(Max) not null constraint DF_tbl_room_seats_defaultViewNew Default('')";
                    if (IsTableColumnAvailable("tbl_room_seats", "hasAlternate"))
                    {
                        ExecuteQuery("alter table tbl_room_seats drop column hasAlternate", "tbl_room_seats", "hasAlternate", 2);
                    }
                    alQ = d2.update_method_wo_parameter(alterQ, "text");
                }
                getcoe4 = string.Empty;
                arrangeViewNew = getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_room_seats' AND COLUMN_NAME = 'arrangedViewNew'");
                if (getcoe4 == "0")
                {
                    alterQ = " alter table tbl_room_seats add arrangedViewNew nvarchar(Max) not null constraint DF_tbl_room_seats_arrangedViewNew Default('')";
                    if (IsTableColumnAvailable("tbl_room_seats", "hasAlternate"))
                    {
                        ExecuteQuery("alter table tbl_room_seats drop column hasAlternate", "tbl_room_seats", "hasAlternate", 2);
                    }
                    alQ = d2.update_method_wo_parameter(alterQ, "text");
                }
                getcoe4 = string.Empty;
                defaultViewNew = getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_room_seats' AND COLUMN_NAME = 'defaultViewNew'");
                getcoe4 = string.Empty;
                arrangeViewNew = getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_room_seats' AND COLUMN_NAME = 'arrangedViewNew'");
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_room_seats' AND COLUMN_NAME = 'hasAlternate'");
                if (getcoe4 == "0")
                {
                    if (!string.IsNullOrEmpty(defaultViewNew) && !string.IsNullOrEmpty(arrangeViewNew) && !string.IsNullOrEmpty(defaultView) && !string.IsNullOrEmpty(arrangeView) && arrangeView != "0" && arrangeViewNew != "0" && defaultViewNew != "0" && defaultView != "0")
                    {
                        alterQ = " alter table tbl_room_seats add hasAlternate as  Case when (ISNULL(defaultViewNew,'')<>'' and ISNULL(arrangedViewNew,'')<>'' and defaultViewNew<>default_view and arrangedViewNew<>arranged_view) then 1 else 0 end";
                        alQ = d2.update_method_wo_parameter(alterQ, "text");
                    }
                }
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_room_seats' AND COLUMN_NAME = 'actualSeatsNew'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + " alter table tbl_room_seats add actualSeatsNew int not null constraint DF_tbl_room_seats_actualSeatsNew Default('0')  ";
                }
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_room_seats' AND COLUMN_NAME = 'allotedSeatsNew'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + " alter table tbl_room_seats add allotedSeatsNew int not null constraint DF_tbl_room_seats_allotedSeatsNew Default('0')";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exam_seating'");
            if (find_tablename != "0")
            {
                getcoe4 = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_seating' AND COLUMN_NAME = 'seatCode'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + " alter table exam_seating add seatCode nvarchar(500) not null constraint DF_exam_seating_seatCode default('')";
                }
            }
            getcoe4 = string.Empty;
            getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SubwiseRoomAllot' AND COLUMN_NAME = 'Building_Name'");
            if (getcoe4 == "0")
            {
                altercoe4 = altercoe4 + " Alter Table SubwiseRoomAllot Add Building_Name varchar(200)";
            }
            getcoe4 = string.Empty;
            getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SubwiseRoomAllot' AND COLUMN_NAME = 'Floor_Name'");
            if (getcoe4 == "0")
            {
                altercoe4 = altercoe4 + " Alter Table SubwiseRoomAllot Add Floor_Name varchar(200)";
            }

            if (altercoe4 != "")
            {
                int altercoe3qry = d2.update_method_wo_parameter(altercoe4, "Text");
            }
            altercoe4 = "";

            getcoe4 = string.Empty;
            getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'dummynumber' AND COLUMN_NAME = 'sheet_no'");
            if (getcoe4 == "0")
            {
                altercoe4 = altercoe4 + " alter table dummynumber add sheet_no nvarchar(15)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subject'");
            if (find_tablename != "0")
            {
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'WrittenMaxMark'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + " Alter Table subject Add WrittenMaxMark numeric";
                }
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'IsInternalOnly'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + " Alter Table subject Add IsInternalOnly Bit";
                }
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'CurFee'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + " Alter Table subject Add CurFee numeric";
                }
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'ArrFee'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + " Alter Table subject Add ArrFee numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='sub_sem'");
            if (find_tablename != "0")
            {
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Sub_Sem' AND COLUMN_NAME = 'onlineelective'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + " Alter Table Sub_Sem Add onlineelective Bit";
                }
            }
            getcoe4 = string.Empty;
            getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'grade_master' AND COLUMN_NAME = 'Criteria'");
            if (getcoe4 == "0")
            {
                altercoe4 = altercoe4 + " Alter Table grade_master Add Criteria nvarchar(20)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Subject'");
            if (find_tablename != "0")
            {
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Subject' AND COLUMN_NAME = 'CommonSub'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + " Alter Table Subject Add CommonSub Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Moderation'");
            if (find_tablename != "0")
            {
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Moderation' AND COLUMN_NAME = 'Bf_Moderation_Total'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + " Alter Table Moderation Add Bf_Moderation_Total Decimal(12,2)";
                }
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Moderation' AND COLUMN_NAME = 'Af_Moderation_Total'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + " Alter Table Moderation Add Af_Moderation_Total Decimal(12,2)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Mark_Entry'");
            if (find_tablename != "0")
            {
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Mark_Entry' AND COLUMN_NAME = 'Average'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + " Alter Table Mark_Entry add Average float ";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subject'");
            if (find_tablename != "0")
            {
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'maximumHrsPerDay'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + " alter table subject add maximumHrsPerDay tinyint not null constraint DF_subject_maximumHrsPerDay DEFAULT 1";
                }
            }

            if (altercoe4 != "")
            {
                int altercoe3qry = d2.update_method_wo_parameter(altercoe4, "Text");
            }

            altercoe4 = "";

            // Added by jairam COE Subject Alter Query
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='subject'");
            if (find_tablename != "0")
            {
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'thirdValmarkDifferent'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + "  alter table subject add thirdValmarkDifferent int null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Registration'");
            if (find_tablename != "0")
            {
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'isRedo'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + "  alter table Registration add isRedo bit not null constraint DF_Registration_isRedo default 0";
                }
            }
            // Added by jairam 23-02-2017 For Dummy No Generation and Matching 
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='dummynumbernew'");
            if (find_tablename != "0")
            {
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'dummynumbernew' AND COLUMN_NAME = 'DCollegeCode'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + "  alter table dummynumbernew add DCollegeCode int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='dummynumber'");
            if (find_tablename != "0")
            {
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'dummynumber' AND COLUMN_NAME = 'DNCollegeCode'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + "  alter table dummynumber add DNCollegeCode int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exam_appl_details'");
            if (find_tablename != "0")
            {
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_appl_details' AND COLUMN_NAME = 'ExAttendance'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + "  alter table exam_appl_details add ExAttendance tinyint not null default 0";
                }
            }
            // Added Mark Entry Act_reval_Mark 02-03-2017
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='mark_entry'");
            if (find_tablename != "0")
            {
                getcoe4 = string.Empty;
                getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'mark_entry' AND COLUMN_NAME = 'Act_Reval_Mark'");
                if (getcoe4 == "0")
                {
                    altercoe4 = altercoe4 + "  ALTER TABLE  mark_entry ADD Act_Reval_Mark float";
                }
            }
            // Added by jairam 17-02-2017
            //            alter table mark_entry add totalOutOff100 decimal not null constraint DF_mark_entry_totalOutOff100 Default 0.0 
            //alter table mark_entry add weightageMarks100 decimal not null constraint DF_mark_entry_weightageMarks100 Default 0.0 
            //alter table mark_entry add gradePoints decimal not null constraint DF_mark_entry_gradePoints Default 0.0
            //alter table mark_entry add gradePointsWeight decimal not null constraint DF_mark_entry_gradePointsWeight Default 0.0
            //alter table mark_entry add weightageMarks as case when (isnull(total,0)<0) then 0.0 else isnull(total,0) end * case when (isnull(cp,0)<0) then 0.0 else isnull(cp,0) end
            //alter table Grade_Master add classify nvarchar(500) not null constraint DF_Grade_Master_classify default ''
            //alter table coe_classification add markgradeflag nvarchar(50) not null default ''
            //alter table coe_classification add batch_year nvarchar(50) not null default ''
            getcoe4 = string.Empty;
            getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'mark_entry' AND COLUMN_NAME = 'totalOutOff100'");
            if (getcoe4 == "0")
            {
                altercoe4 = altercoe4 + "  alter table mark_entry add totalOutOff100 decimal not null constraint DF_mark_entry_totalOutOff100 Default 0.0 ";
            }
            getcoe4 = string.Empty;
            getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'mark_entry' AND COLUMN_NAME = 'weightageMarks100'");
            if (getcoe4 == "0")
            {
                altercoe4 = altercoe4 + "  alter table mark_entry add weightageMarks100 decimal not null constraint DF_mark_entry_weightageMarks100 Default 0.0 ";
            }
            getcoe4 = string.Empty;
            getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'mark_entry' AND COLUMN_NAME = 'gradePoints'");
            if (getcoe4 == "0")
            {
                altercoe4 = altercoe4 + " alter table mark_entry add gradePoints decimal not null constraint DF_mark_entry_gradePoints Default 0.0";
            }
            getcoe4 = string.Empty;
            getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'mark_entry' AND COLUMN_NAME = 'gradePointsWeight'");
            if (getcoe4 == "0")
            {
                altercoe4 = altercoe4 + " alter table mark_entry add gradePointsWeight decimal not null constraint DF_mark_entry_gradePointsWeight Default 0.0";
            }
            getcoe4 = string.Empty;
            getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'mark_entry' AND COLUMN_NAME = 'weightageMarks'");
            if (getcoe4 == "0")
            {
                altercoe4 = altercoe4 + " alter table mark_entry add weightageMarks as case when (isnull(total,0)<0) then 0.0 else isnull(total,0) end * case when (isnull(cp,0)<0) then 0.0 else isnull(cp,0) end";
            }
            getcoe4 = string.Empty;
            getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Grade_Master' AND COLUMN_NAME = 'classify'");
            if (getcoe4 == "0")
            {
                altercoe4 = altercoe4 + " alter table Grade_Master add classify nvarchar(500) not null constraint DF_Grade_Master_classify default ''";
            }
            getcoe4 = string.Empty;
            getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'coe_classification' AND COLUMN_NAME = 'markgradeflag'");
            if (getcoe4 == "0")
            {
                altercoe4 = altercoe4 + " alter table coe_classification add markgradeflag nvarchar(50) not null default ''";
            }
            getcoe4 = string.Empty;
            getcoe4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'coe_classification' AND COLUMN_NAME = 'batch_year'");
            if (getcoe4 == "0")
            {
                altercoe4 = altercoe4 + " alter table coe_classification add batch_year nvarchar(50) not null default ''";
            }
            if (altercoe4 != "")
            {
                int altercoe3qry = d2.update_method_wo_parameter(altercoe4, "Text");
            }
            // Added by jairam 17-02-2017
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StudentRedoDetails'");
            altercoe4 = string.Empty;
            if (find_tablename == "0")
            {
                altercoe4 = altercoe4 + " Create Table StudentRedoDetails(StudentRedoPk bigint identity (1,1) constraint PK_StudentRedoDetails_StudentRedoPk primary key,Stud_AppNo bigint,DegreeCode int,BatchYear int,Semester tinyint,Sections varchar(5) not null constraint DF_StudentRedoDetails_sections default '',RedoType tinyint constraint DF_StudentRedoDetails_RedoType default 1,updatedDate DateTime not null constraint DF_StudentRedoDetails_updatedDate Default GetDate())";
                int altercoe3qry = d2.update_method_wo_parameter(altercoe4, "Text");
            }
            // Added by jairam 04-03-2017
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CalculateSemWiseGPA_CGPA'");
            altercoe4 = string.Empty;
            if (find_tablename == "0")
            {
                altercoe4 = altercoe4 + " create table CalculateSemWiseGPA_CGPA ( 	idNo bigint identity(1,1) constraint PK_CalculateSemWiseGPA_CGPA_idNo Primary key,	app_no numeric constraint FK_CalculateSemWiseGPA_CGPA_app_no foreign key references applyn(app_no),	semester int constraint DF_CalculateSemWiseGPA_CGPA_semester default 0,	type int not null constraint DF_CalculateSemWiseGPA_CGPA_type Default '0',	TotalObtainedMarks decimal(10,3) not null constraint DF_CalculateSemWiseGPA_CGPA_TotalObtainedMarks Default 0.00,	TotalMarks decimal(10,3) not null constraint DF_CalculateSemWiseGPA_CGPA_TotalMarks Default 0.0,	Average decimal(10,3) not null constraint DF_CalculateSemWiseGPA_CGPA_Average Default 0.0,	TotalGradePoints decimal(10,3) not null constraint DF_CalculateSemWiseGPA_CGPA_TotalGradePoints Default 0.00,	TotalWeightageMark decimal(10,3) not null constraint DF_CalculateSemWiseGPA_CGPA_TotalWeightageMark Default 0.00,	TotalEarnedCredits decimal(10,3) not null constraint DF_CalculateSemWiseGPA_CGPA_TotalEarnedCredits Default 0.00,	SemWiseGpa decimal(10,3) not null constraint DF_CalculateSemWiseGPA_CGPA_SemWiseGpa Default 0.00,	SemWiseWam decimal(10,3) not null constraint DF_CalculateSemWiseGPA_CGPA_SemWiseWam  Default 0.00,	SemWiseCGpa decimal(10,3) not null constraint DF_CalculateSemWiseGPA_CGPA_SemWiseCGpa Default 0.00,	SemWiseCwam decimal(10,3) not null constraint DF_CalculateSemWiseGPA_CGPA_SemWiseCwam  Default 0.00,	gpaGrade nvarchar(100) not null constraint DF_CalculateSemWiseGPA_CGPA_gpaGrade Default '',	gpaClassification nvarchar(100) not null constraint DF_CalculateSemWiseGPA_CGPA_gpaClassification Default '',	cgpaGrade nvarchar(100) not null constraint DF_CalculateSemWiseGPA_CGPA_cgpaGrade Default '',	cgpaClassification nvarchar(100) not null constraint DF_CalculateSemWiseGPA_CGPA_cgpaClassification Default '',	calculatedDate DateTime not null constraint DF_CalculateSemWiseGPA_CGPA_calculatedDate Default GetDate(),	calculatedTime DateTime not null constraint DF_CalculateSemWiseGPA_CGPA_calculatedTime Default GetDate(),	modifiedUserCode int not null constraint DF_CalculateSemWiseGPA_CGPA_modifiedUserCode Default 0,	totalAttendSubjects int not null constraint DF_CalculateSemWiseGPA_CGPA_totalAttendSubjects Default 0,	totalPassedSubjects int not null constraint DF_CalculateSemWiseGPA_CGPA_totalPassedSubjects Default 0,	totalFailedSubjects int not null constraint DF_CalculateSemWiseGPA_CGPA_totalFailedSubjects Default 0,	totalCurrentSubjects int not null constraint DF_CalculateSemWiseGPA_CGPA_totalCurrentSubjects Default 0,	totalCurrentPassedSubjects int not null constraint DF_CalculateSemWiseGPA_CGPA_totalCurrentPassedSubjects Default 0,	totalCurrentFailedSubjects int not null constraint DF_CalculateSemWiseGPA_CGPA_totalCurrentFailedSubjects Default 0,	totalArrearSubjects int not null constraint DF_CalculateSemWiseGPA_CGPA_totalArrearSubjects Default 0,	totalArrearPassedSubjects int not null constraint DF_CalculateSemWiseGPA_CGPA_totalArrearPassedSubjects Default 0,	totalArrearFailedSubjects int not null constraint DF_CalculateSemWiseGPA_CGPA_totalArrearFailedSubjects Default 0)";
                int altercoe3qry = d2.update_method_wo_parameter(altercoe4, "Text");
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CalculateExamWiseGPA_CGPA'");
            altercoe4 = string.Empty;
            if (find_tablename == "0")
            {
                altercoe4 = altercoe4 + " create table CalculateExamWiseGPA_CGPA(	idNo bigint identity(1,1) constraint PK_CalculateExamWiseGPA_CGPA_idNo Primary key,	app_no numeric constraint FK_CalculateExamWiseGPA_CGPA_app_no foreign key references applyn(app_no),	exam_code numeric constraint FK_CalculateExamWiseGPA_CGPA_exam_code foreign key references Exam_Details(exam_code),	type int not null constraint DF_CalculateExamWiseGPA_CGPA_type Default '0',	TotalObtainedMarks decimal(10,3) not null constraint DF_CalculateExamWiseGPA_CGPA_TotalObtainedMarks Default 0.0,	TotalMarks decimal(10,3) not null constraint DF_CalculateExamWiseGPA_CGPA_TotalMarks Default 0.0,	Average decimal(10,3) not null constraint DF_CalculateExamWiseGPA_CGPA_Average Default 0.0,	TotalGradePoints decimal(10,3) not null constraint DF_CalculateExamWiseGPA_CGPA_TotalGradePoints Default 0.0,	TotalWeightageMark decimal(10,3) not null constraint DF_CalculateExamWiseGPA_CGPA_TotalWeightageMark Default 0.0,	TotalEarnedCredits decimal(10,3) not null constraint DF_CalculateExamWiseGPA_CGPA_TotalEarnedCredits Default 0.0,	examWiseGpa decimal(10,3) not null constraint DF_CalculateExamWiseGPA_CGPA_examWiseGpa Default 0.0,	examWiseWam decimal(10,3) not null constraint DF_CalculateExamWiseGPA_CGPA_examWiseWam  Default 0.0,	examWiseCGpa decimal(10,3) not null constraint DF_CalculateExamWiseGPA_CGPA_examWiseCGpa Default 0.0,	examWiseCwam decimal(10,3) not null constraint DF_CalculateExamWiseGPA_CGPA_examWiseCwam  Default 0.0,	gpaGrade nvarchar(100) not null constraint DF_CalculateExamWiseGPA_CGPA_gpaGrade Default '',	gpaClassification nvarchar(100) not null constraint DF_CalculateExamWiseGPA_CGPA_gpaClassification Default '',	cgpaGrade nvarchar(100) not null constraint DF_CalculateExamWiseGPA_CGPA_cgpaGrade Default '',	cgpaClassification nvarchar(100) not null constraint DF_CalculateExamWiseGPA_CGPA_cgpaClassification Default '',	calculatedDate DateTime not null constraint DF_CalculateExamWiseGPA_CGPA_calculatedDate Default GetDate(),	calculatedTime DateTime not null constraint DF_CalculateExamWiseGPA_CGPA_calculatedTime Default GetDate(),	modifiedUserCode int not null constraint DF_CalculateExamWiseGPA_CGPA_modifiedUserCode Default 0,	totalAttendSubjects int not null constraint DF_CalculateExamWiseGPA_CGPA_totalAttendSubjects Default 0,	totalPassedSubjects int not null constraint DF_CalculateExamWiseGPA_CGPA_totalPassedSubjects Default 0,	totalFailedSubjects int not null constraint DF_CalculateExamWiseGPA_CGPA_totalFailedSubjects Default 0,		totalCurrentSubjects int not null constraint DF_CalculateExamWiseGPA_CGPA_totalCurrentSubjects Default 0,		totalCurrentPassedSubjects int not null constraint DF_CalculateExamWiseGPA_CGPA_totalCurrentPassedSubjects Default 0,		totalCurrentFailedSubjects int not null constraint DF_CalculateExamWiseGPA_CGPA_totalCurrentFailedSubjects Default 0,	totalArrearSubjects int not null constraint DF_CalculateExamWiseGPA_CGPA_totalArrearSubjects Default 0,	totalArrearPassedSubjects int not null constraint DF_CalculateExamWiseGPA_CGPA_totalArrearPassedSubjects Default 0,	totalArrearFailedSubjects int not null constraint DF_CalculateExamWiseGPA_CGPA_totalArrearFailedSubjects Default 0	)";
                int altercoe3qry = d2.update_method_wo_parameter(altercoe4, "Text");
            }
            string qry = "if exists (select * from IPatchStatus where ModuleName='COE') update IPatchStatus set ClientUpdatedDate='" + DateTime.Now.ToString("yyyy/MM/dd") + "' where ModuleName='COE' ";
            int res = d2.update_method_wo_parameter(qry, "Text");

            string tableName = "StudentRegisterHistory";
            string executeQuery = "create table StudentRegisterHistory (idNo bigint constraint PK_StudentRegisterHistory_idNo primary key identity(1,1),App_no numeric(18,0) constraint FK_StudentRegisterHistory_App_no foreign key  references applyn(app_no),admissionDate DateTime not null constraint DF_StudentRegisterHistory_admissionDate  Default GetDate(),updatedDate DateTime not null constraint DF_StudentRegisterHistory_updatedDate Default GetDate(),Roll_no nvarchar(100),RegNo nvarchar(100),collegeCode numeric,BatchYear  smallint,degreeCode numeric,semester smallint,sections nvarchar(100) not null constraint DF_StudentRegisterHistory_sections default '',isLatest bit not null constraint DF_StudentRegisterHistory_isLatest default 1,RedoType tinyint constraint DF_StudentRegisterHistory_RedoType default 1)";
            ExecuteQuery(executeQuery, tableName);

            tableName = "RegistrationNew";
            executeQuery = "CREATE TABLE RegistrationNew(Roll_No nvarchar(25) NULL,App_No numeric(18, 0) NOT NULL,Current_Year smallint NULL,Current_Semester smallint NULL,Stud_Type nvarchar(50) NULL,Roll_Admit nvarchar(25) NOT NULL,RollNo_Flag bit NOT NULL,CC bit NOT NULL,DelFlag numeric(8, 0) NULL,	Access_Date datetime NULL,	Access_Time nvarchar(16) NULL,	Adm_Date datetime NULL,	Stud_Name nvarchar(100) NULL,	Reg_No nvarchar(25) NULL,	Batch_Year smallint NULL,	Exam_Flag nvarchar(50) NULL,	degree_code numeric(18, 0) NULL,	category_code numeric(18, 0) NULL,	tcno nvarchar(50) NULL,	tcdate datetime NULL,	pass nvarchar(25) NULL,	referby nvarchar(50) NULL,	LockInfo bit NULL,	mode numeric(18, 0) NULL,	Advisor varchar(50) NULL DEFAULT (''),	debar_reason varchar(20) NULL,	cardno varchar(20) NULL,	Sections nvarchar(50) NULL,	serialno numeric(18, 0) NULL,	lib_id nvarchar(50) NULL,	JMonth smallint NULL,	JYear smallint NULL,	Attempts numeric(18, 0) NULL,	Rejoin_Status numeric(18, 0) NULL,	Regulation numeric(18, 0) NULL,	Exam_Elg nvarchar(50) NULL,	Add_Batch nvarchar(50) NULL,	Fingerprint1 ntext NULL,	Fingerprint2 ntext NULL,	Fingerprint3 ntext NULL,	Branch_code numeric(18, 0) NULL,group_code numeric(18, 0) NULL,	pinnumber varchar(50) NULL,	Mark_serialno numeric(18, 0) NULL,	apply_degree_code numeric(18, 0) NULL,	cons_date datetime NULL,	acr varchar(50) NULL,	batch_acr varchar(20) NULL,	roll_acr varchar(20) NULL,	Status bit NULL,	subdiv nvarchar(50) NULL,	Bus_RouteID nvarchar(30) NULL,Boarding nvarchar(50) NULL,	Consortium varchar(100) NULL,	PIN_No nvarchar(30) NULL,	PIN_Status numeric(18, 0) NULL,	college_code numeric(18, 0) NULL,	VehID nvarchar(30) NULL,	access_pinno nvarchar(100) NULL,	stud_log_pw varchar(128) NULL,	stud_father_pw varchar(128) NULL,	stud_mother_pw varchar(128) NULL,	Seat_No nvarchar(3) NULL,DeviceID nvarchar(50) NULL,	Univcode nvarchar(30) NULL,	OldCollegeCode varchar(30) NULL,	OldDegree_Code varchar(20) NULL,	Trans_PayType nvarchar(10) NULL,	finger_id int NULL,	Traveller_Date datetime NULL,	smart_serial_no varchar(100) NULL,	TransferDate datetime NULL,	TMRCode nvarchar(30) NULL,	AdmitedDegree nvarchar(30) NULL,	AdmitedYear nvarchar(30) NULL,	DateOfLeaving datetime NULL,	AcademicYear nvarchar(30) NULL,	TCSerialNo nvarchar(50) NULL,	isalumni bit NULL,	is_other_due int NULL,	is_fee_due int NULL,    IsCanceledStage bit NULL,	Post_Matric_Scholarship bit NULL,	IsSchemeAdmission bit NULL,	IsSchemeCode bigint NULL,	IsSchemeAmount decimal(12, 2) NULL,	isRedo bit NOT NULL,	SchemeDate datetime NULL,	hostel_admission_status tinyint NULL,	Is_Stud_Staff bit NULL,	staff_appl_id numeric(18, 0) NULL)";
            ExecuteQuery(executeQuery, tableName);

            tableName = "StudentRedoDetails";
            executeQuery = "Create Table StudentRedoDetails(StudentRedoPk bigint identity (1,1) constraint PK_StudentRedoDetails_StudentRedoPk primary key,Stud_AppNo bigint,DegreeCode int,BatchYear int,Semester tinyint,Sections varchar(5) not null constraint DF_StudentRedoDetails_sections default '',RedoType tinyint constraint DF_StudentRedoDetails_RedoType default 1,updatedDate DateTime not null constraint DF_StudentRedoDetails_updatedDate Default GetDate())";
            ExecuteQuery(executeQuery, tableName);

            string procedureName = "uspStudentPromote";
            byte procedureType = 0;//0 - Create ; 1 - Alter
            string procedureQ = string.Empty;
            if (IsStoredProcedureAvailable(procedureName))
            {
                procedureType = 1;
            }
            else
            {
                procedureType = 0;
            }
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + " PROCEDURE uspStudentPromote (@rollNo nvarchar(max), @regNo nvarchar(max), @OldCollegeCode varchar(100), @OldBatchYear varchar(100), @OldDegreeCode varchar(100), @OldSemester varchar(100), @NewCollegeCode varchar(100), @NewBatchYear varchar(100), @NewDegreeCode varchar(100), @NewSemester varchar(100), @studentAppNo int, @admitDate datetime=null, @OldSection varchar(300)='', @NewSection varchar(300)='', @schoolOrCollege tinyint, @redoType tinyint) /*  @schoolOrCollege : 0 - College; 1 - School; @redoType : 1 - Redo ; 2 - Previous Student History Details; */ AS BEGIN DECLARE @setValue int,@NewDeptCode int; RETRY:  BEGIN TRANSACTION BEGIN TRY  SET NOCOUNT ON if(@OldSection='') select @OldSection=LTRIM(RTRIM(ISNULL(sections,''))) from Registration where App_No=@studentAppNo  if(@NewSection='') select @NewSection=LTRIM(RTRIM(ISNULL(sections,''))) from Registration where App_No=@studentAppNo if(@admitDate=null) select @admitDate=ISNULL(Adm_Date,GETDATE()) from Registration where App_No=@studentAppNo SELECT  @NewDeptCode = dt.Dept_Code FROM Degree dg,Department dt,Course c WHERE c.Course_Id = dg.Course_Id AND dt.Dept_Code = dg.Dept_Code AND dg.Degree_Code = @NewDegreeCode IF (@redoType = 1) BEGIN IF NOT EXISTS (SELECT StudentRedoPk FROM StudentRedoDetails WHERE Stud_AppNo = @studentAppNo AND DegreeCode = @OldDegreeCode AND BatchYear = @OldBatchYear AND Semester = @OldSemester AND LTRIM(RTRIM(ISNULL(Sections, ''))) = @OldSection AND RedoType = @redoType)INSERT INTO StudentRedoDetails (Stud_AppNo, DegreeCode, BatchYear, Semester, Sections, RedoType, updatedDate) VALUES (@studentAppNo, @OldDegreeCode, @OldBatchYear, @OldSemester, @OldSection, @redoType, GETDATE()) UPDATE Registration SET college_code = @NewCollegeCode,degree_code = @NewDegreeCode,Batch_Year = @NewBatchYear,Current_Semester = @NewSemester,Branch_code = @NewDeptCode,isRedo = '1' WHERE App_No = @studentAppNo END ELSE IF (@redoType = 2) BEGIN SET @setValue = 2; if(@schoolOrCollege!=0) begin IF NOT EXISTS (SELECT  r.App_No FROM RegistrationNew r  WHERE r.Batch_Year = @OldBatchYear  AND r.degree_code = @OldDegreeCode  AND r.Current_Semester = @OldSemester  AND r.App_No = @studentAppNo AND r.college_code = @OldCollegeCode) BEGIN INSERT INTO RegistrationNew (Roll_No, App_No, Current_Year, Current_Semester, Stud_Type, Roll_Admit, RollNo_Flag, CC, DelFlag, Access_Date, Access_Time, Adm_Date, Stud_Name, Reg_No, Batch_Year, Exam_Flag, degree_code, category_code, tcno, tcdate, pass, referby, LockInfo, mode, Advisor, debar_reason, cardno, Sections, serialno, lib_id, JMonth, JYear, Attempts, Rejoin_Status, Regulation, Exam_Elg, Add_Batch, Fingerprint1, Fingerprint2, Fingerprint3, Branch_code, group_code, pinnumber, Mark_serialno, apply_degree_code, cons_date, acr, batch_acr, roll_acr, Status, subdiv, Bus_RouteID, Boarding, Consortium, PIN_No, PIN_Status, college_code, VehID, access_pinno, stud_log_pw, stud_father_pw, stud_mother_pw, Seat_No, DeviceID, Univcode, OldCollegeCode, OldDegree_Code, Trans_PayType, finger_id, Traveller_Date, smart_serial_no, TransferDate, TMRCode, AdmitedDegree, AdmitedYear, DateOfLeaving, AcademicYear, TCSerialNo, isalumni, is_other_due, is_fee_due, IsCanceledStage, Post_Matric_Scholarship, IsSchemeAdmission, IsSchemeCode, IsSchemeAmount, isRedo, SchemeDate, hostel_admission_status, Is_Stud_Staff, staff_appl_id) SELECT TOP 1 Roll_No,App_No, Current_Year,Current_Semester,Stud_Type,Roll_Admit,RollNo_Flag,CC,DelFlag,Access_Date,Access_Time,Adm_Date,Stud_Name,Reg_No,Batch_Year,Exam_Flag,degree_code,category_code,tcno,tcdate,pass,referby,LockInfo,mode,Advisor, debar_reason,cardno,Sections,serialno,lib_id,JMonth,JYear,Attempts,Rejoin_Status,Regulation,Exam_Elg,Add_Batch,Fingerprint1,Fingerprint2,Fingerprint3,Branch_code,group_code,pinnumber,Mark_serialno,apply_degree_code,cons_date,acr,batch_acr,roll_acr,Status,subdiv,Bus_RouteID,Boarding,Consortium,PIN_No,PIN_Status,college_code,VehID,access_pinno,stud_log_pw,stud_father_pw,stud_mother_pw,Seat_No,DeviceID,Univcode,OldCollegeCode,OldDegree_Code,Trans_PayType,finger_id,Traveller_Date,smart_serial_no,TransferDate,TMRCode,AdmitedDegree,AdmitedYear,DateOfLeaving,AcademicYear,TCSerialNo,isalumni,is_other_due,is_fee_due,IsCanceledStage,Post_Matric_Scholarship,IsSchemeAdmission,IsSchemeCode,IsSchemeAmount,isRedo,SchemeDate,hostel_admission_status,Is_Stud_Staff,staff_appl_id FROM Registration r  WHERE r.App_No = @studentAppNo UPDATE Registration  SET Batch_Year = @NewBatchYear,college_code = @NewCollegeCode,     degree_code = @NewDegreeCode, Branch_code = @NewDeptCode,  Current_Semester = @NewSemester,mode = '1' WHERE App_No = @studentAppNo END ELSE UPDATE Registration SET Batch_Year = @NewBatchYear,college_code = @NewCollegeCode,degree_code = @NewDegreeCode,Branch_code = @NewDeptCode,Current_Semester = @NewSemester, mode = '1' WHERE App_No =@studentAppNo end else begin IF NOT EXISTS (SELECT r.App_No FROM RegistrationNew r  WHERE r.Batch_Year = @OldBatchYear  AND r.degree_code = @OldDegreeCode  AND r.Current_Semester = @OldSemester  AND r.App_No = @studentAppNo  AND r.college_code = @OldCollegeCode) BEGIN  INSERT INTO RegistrationNew (Roll_No, App_No, Current_Year, Current_Semester, Stud_Type, Roll_Admit, RollNo_Flag, CC, DelFlag, Access_Date, Access_Time, Adm_Date, Stud_Name, Reg_No, Batch_Year, Exam_Flag, degree_code, category_code, tcno, tcdate, pass, referby, LockInfo, mode, Advisor, debar_reason, cardno, Sections, serialno, lib_id, JMonth, JYear, Attempts, Rejoin_Status, Regulation, Exam_Elg, Add_Batch, Fingerprint1, Fingerprint2, Fingerprint3, Branch_code, group_code, pinnumber, Mark_serialno, apply_degree_code, cons_date, acr, batch_acr, roll_acr, Status, subdiv, Bus_RouteID, Boarding, Consortium, PIN_No, PIN_Status, college_code, VehID, access_pinno, stud_log_pw, stud_father_pw, stud_mother_pw, Seat_No, DeviceID, Univcode, OldCollegeCode, OldDegree_Code, Trans_PayType, finger_id, Traveller_Date, smart_serial_no, TransferDate, TMRCode, AdmitedDegree, AdmitedYear, DateOfLeaving, AcademicYear, TCSerialNo, isalumni, is_other_due, is_fee_due, IsCanceledStage, Post_Matric_Scholarship, IsSchemeAdmission, IsSchemeCode, IsSchemeAmount, isRedo, SchemeDate, hostel_admission_status, Is_Stud_Staff, staff_appl_id)  SELECT TOP 1  Roll_No,App_No,Current_Year,Current_Semester,Stud_Type,Roll_Admit,RollNo_Flag,CC,DelFlag,Access_Date,Access_Time,Adm_Date,Stud_Name,Reg_No,Batch_Year,Exam_Flag,degree_code,category_code,tcno,tcdate,pass,referby,LockInfo,mode,Advisor, debar_reason,cardno, Sections,serialno,lib_id,JMonth,JYear,Attempts,Rejoin_Status,Regulation,Exam_Elg,Add_Batch,Fingerprint1,Fingerprint2,Fingerprint3,Branch_code,group_code,pinnumber,Mark_serialno,apply_degree_code,cons_date,acr,batch_acr,roll_acr,Status,subdiv,Bus_RouteID,Boarding,Consortium,PIN_No,PIN_Status,college_code,VehID,access_pinno,stud_log_pw,stud_father_pw,stud_mother_pw,Seat_No,DeviceID,Univcode,OldCollegeCode,OldDegree_Code,Trans_PayType,finger_id,Traveller_Date,smart_serial_no,TransferDate,TMRCode,AdmitedDegree,AdmitedYear,DateOfLeaving,AcademicYear,TCSerialNo,isalumni,is_other_due,is_fee_due,IsCanceledStage,Post_Matric_Scholarship,IsSchemeAdmission,IsSchemeCode,IsSchemeAmount,isRedo,SchemeDate,hostel_admission_status,Is_Stud_Staff,staff_appl_id FROM Registration r WHERE r.App_No = @studentAppNo UPDATE Registration SET Batch_Year = @NewBatchYear,college_code = @NewCollegeCode,degree_code = @NewDegreeCode,Branch_code = @NewDeptCode,Current_Semester = @NewSemester WHERE App_No = @studentAppNo END ELSE  UPDATE Registration  SET Batch_Year = @NewBatchYear, college_code = @NewCollegeCode, degree_code = @NewDegreeCode, Branch_code = @NewDeptCode,Current_Semester = @NewSemester WHERE App_No = @studentAppNo end END IF EXISTS (SELECT idNo FROM StudentRegisterHistory WHERE App_no = @studentAppNo AND RedoType = @redoType) BEGIN UPDATE StudentRegisterHistory SET isLatest = '0' WHERE App_no = @studentAppNo AND RedoType = @redoType IF NOT EXISTS (SELECT idNo FROM StudentRegisterHistory WHERE App_no = @studentAppNo AND BatchYear = @OldBatchYear AND degreeCode = @OldDegreeCode AND collegeCode = @OldCollegeCode AND semester = @OldSemester AND sections = @OldSection AND RedoType = @redoType AND Roll_no = @rollNo AND RegNo = @regNo)  BEGIN INSERT INTO StudentRegisterHistory (App_no, admissionDate, updatedDate, Roll_no, RegNo, collegeCode, BatchYear, degreeCode, semester, sections, isLatest, RedoType)   VALUES (@studentAppNo, @admitDate, GETDATE(), @rollNo, @regNo, @OldCollegeCode, @OldBatchYear, @OldDegreeCode, @OldSemester, @OldSection, '0', @redoType) END  ELSE  BEGIN UPDATE StudentRegisterHistory SET isLatest = '0',     admissionDate = @admitDate, updatedDate = GETDATE(), RedoType = @redoType WHERE App_no = @studentAppNo AND BatchYear = @OldBatchYear AND degreeCode = @OldDegreeCode AND collegeCode = @OldCollegeCode AND semester = @OldSemester AND sections = @OldSection AND RedoType = @redoType AND Roll_no = @rollNo AND RegNo = @regNo END IF NOT EXISTS (SELECT idNo FROM StudentRegisterHistory WHERE App_no = @studentAppNo AND BatchYear = @NewBatchYear AND degreeCode = @NewDegreeCode AND collegeCode = @NewCollegeCode AND semester = @NewSemester AND sections = @NewSection AND RedoType = @redoType AND Roll_no = @rollNo AND RegNo = @regNo) BEGIN INSERT INTO StudentRegisterHistory (App_no, admissionDate, updatedDate, Roll_no, RegNo, collegeCode, BatchYear, degreeCode, semester, sections, isLatest, RedoType)   VALUES (@studentAppNo, @admitDate, GETDATE(), @rollNo, @regNo, @NewCollegeCode, @NewBatchYear, @NewDegreeCode, @NewSemester, @NewSection, '1', @redoType)  END  ELSE   BEGIN UPDATE StudentRegisterHistory SET isLatest = '1',     admissionDate = @admitDate,     updatedDate = GETDATE(), RedoType = @redoType WHERE App_no = @studentAppNo AND BatchYear = @NewBatchYear AND degreeCode = @NewDegreeCode AND collegeCode = @NewCollegeCode AND semester = @Newsemester AND sections = @NewSection AND RedoType = @redoType AND Roll_no = @rollNo AND RegNo = @regNo   END  END  ELSE BEGIN IF NOT EXISTS (SELECT idNo FROM StudentRegisterHistory WHERE App_no = @studentAppNo AND BatchYear = @OldBatchYear  AND degreeCode = @OldDegreeCode AND collegeCode = @OldCollegeCode AND semester = @OldSemester  AND sections = @OldSection AND RedoType = @redoType AND Roll_no = @rollNo AND RegNo = @regNo) BEGIN INSERT INTO StudentRegisterHistory (App_no, admissionDate, updatedDate, Roll_no, RegNo, collegeCode, BatchYear, degreeCode, semester, sections, isLatest, RedoType) VALUES (@studentAppNo, @admitDate, GETDATE(), @rollNo, @regNo, @OldCollegeCode, @OldBatchYear, @OldDegreeCode, @OldSemester, @OldSection, '0', @redoType) END ELSE BEGIN UPDATE StudentRegisterHistory SET isLatest = '0',admissionDate = @admitDate,updatedDate = GETDATE(),RedoType = @redoType WHERE App_no = @studentAppNo AND BatchYear = @OldBatchYear AND degreeCode = @OldDegreeCode  AND collegeCode = @OldCollegeCode AND semester = @OldSemester AND sections = @OldSection AND RedoType = @redoType AND Roll_no = @rollNo AND RegNo = @regNo END IF NOT EXISTS (SELECT idNo FROM StudentRegisterHistory  WHERE App_no = @studentAppNo AND BatchYear = @NewBatchYear AND degreeCode = @NewDegreeCode AND collegeCode = @NewCollegeCode AND semester = @NewSemester AND sections = @NewSection AND RedoType = @redoType AND Roll_no = @rollNo AND RegNo = @regNo) BEGIN INSERT INTO StudentRegisterHistory (App_no, admissionDate, updatedDate, Roll_no, RegNo, collegeCode, BatchYear, degreeCode, semester, sections, isLatest, RedoType) VALUES (@studentAppNo, @admitDate, GETDATE(), @rollNo, @regNo, @NewCollegeCode, @NewBatchYear, @NewDegreeCode, @NewSemester, @NewSection, '1', @redoType) END ELSE  BEGIN  UPDATE StudentRegisterHistory SET isLatest = '1',admissionDate = @admitDate,updatedDate = GETDATE(),RedoType = @redoType WHERE App_no = @studentAppNo AND BatchYear = @NewBatchYear AND degreeCode = @NewDegreeCode AND collegeCode = @NewCollegeCode AND semester = @Newsemester AND sections = @NewSection AND RedoType = @redoType AND Roll_no = @rollNo  AND RegNo = @regNo END  END  COMMIT TRANSACTION  END TRY BEGIN CATCH PRINT 'Rollback Transaction' ROLLBACK TRANSACTION  IF ERROR_NUMBER() = 1205  BEGIN  WAITFOR DELAY '00:00:00.05'  GOTO RETRY  END  END CATCH END";
            ExecuteProcedure(procedureName, procedureQ, procedureType);

            if (res != 0)
            {
                alertmessage.Visible = true;
                lbl_alerterror.Text = " Updated Successfully";
            }
            bindgrid();
        }
        catch (Exception ex)
        {
            //d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void comman()
    {
        try
        {
            string comm = string.Empty;
            int comman = 0;
            int commnalter = 0;
            string vendormastr = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CO_VendorMaster'");
            if (vendormastr == "0")
            {
                comm = " CREATE TABLe CO_VendorMaster(VendorPK BigInt IDENTITY(1,1) Constraint PKVendorMaster PRIMARY KEY,VendorCode nvarchar(30),VendorCompName nvarchar(200),VendorType int,VendorAddress nvarchar(100),VendorStreet nvarchar(100),VendorCity nvarchar(100),VendorDist BigInt,VendorState BigInt,VendorPin nvarchar(6), VendorPhoneNo nvarchar(30),VendorFaxNo nvarchar(30),VendorEmailID nvarchar(50),VendorWebsite nvarchar(100), VendorStartYear nvarchar(4),VendorPayType Bit,VendorStatus tinyint,VendorBlockFrom Datetime,VendorBlockTo Datetime,VendorCSTNo nvarchar(30),VendorTINNo nvarchar(30),VendorPANNo nvarchar(30))";
            }
            string unikcod = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CO_MarkMaster'");
            if (unikcod == "0")
                comm = comm + " CREATE TABLE CO_MarkMaster(MarkMasterPK BigInt IDENTITY(1,1) Primary Key,MarkTypeAcr nvarchar(10),MarkType nvarchar(50),Point int,CollegeCode int)";
            string CommonSet = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CO_CommonSettings'");
            if (CommonSet == "0")
                comm = comm + " CREATE TABLE CO_CommonSettings(SettingName nvarchar(100),SettingValue nvarchar(50),CollegeCode Int)";
            string studtuter = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CO_StudentTutor'");
            if (studtuter == "0")
                comm = comm + " CREATE TABLE CO_StudentTutor(StudentTutorPK BigInt IDENTITY(1,1) CONSTRAINT PKStudentTutor PRIMARY KEY,App_No BigInt,StaffMasterFK BigInt,TutorFor tinyint)";
            string masterval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CO_MasterValues'");
            if (masterval == "0")
                comm = comm + " CREATE TABLE CO_MasterValues(MasterCode BigInt IDENTITY(1,1),MasterValue nvarchar(200),MasterCriteria nvarchar(30),MasterCriteria1 nvarchar(30),MasterCriteriaValue1 nvarchar(200),MasterCriteriaValue2 nvarchar(200),MasterCriteriaValue3 nvarchar(200),MasterCriteriaValue4 nvarchar(200),CollegeCode Int)";
            masterval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Co_Question_Type'");
            if (masterval == "0")
                comm = comm + " Create table Co_Question_Type (QuestionmasterFK bigint,MarkMasterFK bigint,HeaderCode bigint)";
            if (comm != "")
                comman = d2.update_method_wo_parameter(comm, "Text");
            //alter
            string comalter = string.Empty;
            string identytype = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CO_VendorMaster' AND COLUMN_NAME = 'VendorMobileNo'");
            if (identytype == "0")
                comalter = comalter + " Alter Table CO_VendorMaster Add IdentityType BigInt";
            string identity = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CO_VendorMaster' AND COLUMN_NAME = 'IdentityNo'");
            if (identity == "0")
                comalter = comalter + "  Alter Table CO_VendorMaster Add IdentityNo nvarchar (200)";
            string mobilno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CO_VendorMaster' AND COLUMN_NAME = 'VendorMobileNo'");
            if (mobilno == "0")
                comalter = comalter + " Alter Table CO_VendorMaster Add VendorMobileNo nvarchar(20)";
            string typemag = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CO_VendorMaster' AND COLUMN_NAME = 'TypeofMagazine'");
            if (typemag == "0")
                comalter = comalter + "  alter table CO_VendorMaster add TypeofMagazine bigint";
            string venname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CO_VendorMaster' AND COLUMN_NAME = 'VendorName'");
            if (venname == "0")
                comalter = comalter + "  alter table CO_VendorMaster add VendorName nvarchar (200)";
            string vendorcntry = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CO_VendorMaster' AND COLUMN_NAME = 'VendorCountry'");
            if (vendorcntry == "0")
                comalter = comalter + " alter table CO_VendorMaster add VendorCountry bigint";
            vendorcntry = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CO_FeedBackMaster' AND COLUMN_NAME = 'Acadamic_Isgeneral'");
            if (vendorcntry == "0")
                comalter = comalter + "  alter table CO_FeedBackMaster add Acadamic_Isgeneral bit";
            vendorcntry = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CO_FeedBackMaster' AND COLUMN_NAME = 'IsType_Individual'");
            if (vendorcntry == "0")
                comalter = comalter + "   alter table CO_FeedBackMaster add IsType_Individual bit";
            vendorcntry = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Co_Question_Type' AND COLUMN_NAME = 'FeedbackFk'");
            if (vendorcntry == "0")
                comalter = comalter + "   alter table Co_Question_Type add FeedbackFk bigint";
            if (comalter != "")
                commnalter = d2.update_method_wo_parameter(comalter, "Text");

            ExecuteQuery("Alter table co_feedbackmaster Add IsSubjectType bit", "co_feedbackmaster", "IsSubjectType", 1);
            ExecuteQuery("Alter table CO_FeedBackQuestions Add IsSubjectType bit", "CO_FeedBackQuestions", "IsSubjectType", 1);
            ExecuteQuery("Alter table CO_FeedBackQuestions Add SubjectType nvarchar(max)", "CO_FeedBackQuestions", "SubjectType", 1);

            comalter = string.Empty;
            string FeedbackQuery = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'FeedbackQuery'");
            string Type = FeedbackQuery == "0" ? "Create" : "Alter ";
            comalter = Type + "  procedure FeedbackQuery @UnicodeValue varchar(10),@CollegeCode varchar(10),@degree_code varchar(max),  @batch_year varchar(max),@Semester varchar(10),@sections varchar(10),@subjectType VARCHAR(max),   @OptionalSubjectType varchar(max),@filteroptionmark varchar(10) as DECLARE @Subject VARCHAR(MAX),@optional varchar(max) SET @subjectType = REPLACE(@subjectType,',',''',''') SET @OptionalSubjectType = REPLACE(@OptionalSubjectType,',',''',''')  begin select  qm.HeaderCode, (select TextVal from TextValTable where TextCode= HeaderCode) as HeaderName,qm.Question,qm.QuestionMasterPK,FeedBackName, FeedBackMasterPK,isnull(m.IsSubjectType,0)IsSubjectType,q.SubjectType   from CO_FeedBackMaster m,CO_FeedBackQuestions q  ,CO_QuestionMaster qm, CO_FeedbackUniCode Fu where  m.FeedBackMasterPK =q.FeedBackMasterFK and qm.QuestionMasterPK=q.QuestionMasterFK and Fu.FeedbackMasterFK =q.FeedBackMasterFK and Fu.FeedbackUnicode =@UnicodeValue order by q.SubjectType if(@filteroptionmark=0) select distinct MarkType,MarkMasterPK,point from CO_MarkMaster where CollegeCode=@CollegeCode order by Point desc   else select distinct m.MarkMasterPK,m.MarkType,qt.QuestionmasterFK,qt.FeedbackFk from Co_Question_Type qt,CO_MarkMaster m,CO_QuestionMaster q where qt.MarkMasterFK=m.MarkMasterPK and qt.QuestionmasterFK=q.QuestionMasterPK and qt.HeaderCode=q.HeaderCode and m.CollegeCode=q.CollegeCode and q.CollegeCode=@CollegeCode   SET @Subject='select distinct s.subject_no,subject_code,subject_name,sm.subject_type from syllabus_master c ,subject s,sub_sem sm where s.syll_code =c.syll_code and sm.subType_no =s.subType_no and sm.syll_code=c.syll_code  and  c.degree_code in('+@degree_code+') and c.Batch_Year in ('+@batch_year+') and c.Semester in ('+@Semester+') and sm.subject_type in('''+@subjectType+''')' EXEC (@Subject) if(@sections!='') select distinct  ss.staff_code,s.staff_name,ss.subject_no   from staff_selector ss,staffmaster s where ss.staff_code =s.staff_code and batch_year = @batch_year and  Sections= @sections  else select distinct ss.staff_code,s.staff_name,ss.subject_no   from staff_selector ss,staffmaster s where ss.staff_code =s.staff_code and batch_year = @batch_year set @optional='select distinct s.subject_no,subject_code,subject_name from syllabus_master c ,subject s,sub_sem sm where  s.syll_code =c.syll_code and sm.subType_no =s.subType_no  and  sm.syll_code=c.syll_code and c.degree_code in ('+@degree_code+') and c.Batch_Year in ('+@batch_year+') and c.Semester in ('+@Semester+') and sm.subject_type in('''+@OptionalSubjectType+''')' EXEC (@optional) end ";

            //procedure FeedbackQuery @UnicodeValue varchar(10),@CollegeCode varchar(10),@degree_code varchar(max), @batch_year varchar(max),@Semester varchar(10),@sections varchar(10),@subjectType VARCHAR(max),   @OptionalSubjectType varchar(max),@filteroptionmark varchar(10) as DECLARE @Subject VARCHAR(MAX),@optional varchar(max) SET @subjectType = REPLACE(@subjectType,',',''',''') SET @OptionalSubjectType = REPLACE(@OptionalSubjectType,',',''',''')  begin select  qm.HeaderCode, (select TextVal from TextValTable where TextCode= HeaderCode) as HeaderName,qm.Question,qm.QuestionMasterPK,FeedBackName, FeedBackMasterPK,isnull(m.IsSubjectType,0)IsSubjectType,q.SubjectType   from CO_FeedBackMaster m,CO_FeedBackQuestions q  ,CO_QuestionMaster qm, CO_FeedbackUniCode Fu where  m.FeedBackMasterPK =q.FeedBackMasterFK and qm.QuestionMasterPK=q.QuestionMasterFK and Fu.FeedbackMasterFK =q.FeedBackMasterFK and Fu.FeedbackUnicode =@UnicodeValue order by q.SubjectType if(@filteroptionmark=0)    select distinct MarkType,MarkMasterPK from CO_MarkMaster where CollegeCode =@CollegeCode     else    select distinct m.MarkMasterPK,m.MarkType,qt.QuestionmasterFK,qt.FeedbackFk from Co_Question_Type qt,CO_MarkMaster m,CO_QuestionMaster q where qt.MarkMasterFK=m.MarkMasterPK and qt.QuestionmasterFK=q.QuestionMasterPK and qt.HeaderCode=q.HeaderCode and m.CollegeCode=q.CollegeCode and q.CollegeCode=@CollegeCode   SET @Subject='select distinct s.subject_no,subject_code,subject_name,sm.subject_type from syllabus_master c ,subject s,sub_sem sm where s.syll_code =c.syll_code and sm.subType_no =s.subType_no and sm.syll_code=c.syll_code  and  c.degree_code in('+@degree_code+') and c.Batch_Year in ('+@batch_year+') and c.Semester in ('+@Semester+') and sm.subject_type in('''+@subjectType+''')' EXEC (@Subject) if(@sections!='') select distinct  ss.staff_code,s.staff_name,ss.subject_no   from staff_selector ss,staffmaster s where ss.staff_code =s.staff_code and batch_year = @batch_year and  Sections= @sections else select distinct ss.staff_code,s.staff_name,ss.subject_no   from staff_selector ss,staffmaster s where ss.staff_code =s.staff_code and batch_year = @batch_year set @optional='select distinct s.subject_no,subject_code,subject_name from syllabus_master c ,subject s,sub_sem sm where  s.syll_code =c.syll_code and sm.subType_no =s.subType_no  and  sm.syll_code=c.syll_code and c.degree_code in ('+@degree_code+') and c.Batch_Year in ('+@batch_year+') and c.Semester in ('+@Semester+') and sm.subject_type in('''+@OptionalSubjectType+''')' EXEC (@optional) end  ";
            commnalter = d2.update_method_wo_parameter(comalter, "Text");

            comalter = string.Empty;
            string FeedbackQuestion = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'FeedbackQuestion'");
            Type = ((FeedbackQuestion == "0") ? "create " : "alter ");
            comalter = Type + " procedure FeedbackQuestion  @QuestionType varchar(10),@collegecode varchar(10),@feedbackName nvarchar(max) as DECLARE @Query VARCHAR(MAX), @Query1 VARCHAR(MAX) begin SET @feedbackName = REPLACE(@feedbackName,',',''',''') SET @collegecode = REPLACE(@collegecode,',',''',''') SET @Query='select distinct HeaderCode,TextVal as HeaderName,Question,isnull(fb.SubjectType,'''')SubjectType, QuestionMasterPK , QuestType from TextValTable t,CO_QuestionMaster q left join CO_FeedBackQuestions fb on q.QuestionMasterPK=fb.QuestionMasterFK where t.TextCode=q.HeaderCode and QuestType ='+@QuestionType+' and CollegeCode in ('+ @collegecode +')' EXEC (@Query) SET @Query1='select distinct QuestionMasterFK,fm.IsSubjectType from CO_FeedBackQuestions fb,CO_FeedBackMaster fm where fb.FeedBackMasterFK =fm.FeedBackMasterPK and fm.FeedBackName in ('''+@feedbackname+''')' EXEC(@Query1) end";
            commnalter = d2.update_method_wo_parameter(comalter, "Text");

            FeedbackQuery = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'OnlinefeedbackIsgeneralsave'");
            if (FeedbackQuery.Trim() == "0")
            {
                comalter = "   CREATE proc OnlinefeedbackIsgeneralsave @feedbackfk varchar(50),@questionfk varchar(50),@uniquecode varchar(50),@markmasterfk varchar(50) as DECLARE @retry  tinyint SET @retry  = 5 WHILE @retry >0 BEGIN TRY BEGIN TRANSACTION;   if exists (select * from CO_StudFeedBack where FeedBackMasterFK =@feedbackfk and QuestionMasterFK =@questionfk and FeedbackUnicode= @uniquecode ) update CO_StudFeedBack set MarkMasterPK =@markmasterfk where FeedBackMasterFK =@feedbackfk and FeedbackUnicode=@uniquecode and QuestionMasterFK =@questionfk else  insert into CO_StudFeedBack (FeedbackUnicode,FeedBackMasterFK,QuestionMasterFK,MarkMasterPK) values (@uniquecode,@feedbackfk,@questionfk,@markmasterfk) COMMIT TRANSACTION; BREAK END TRY BEGIN CATCH   ROLLBACK TRANSACTION; if (ERROR_NUMBER() = 1205 OR ERROR_NUMBER() = 1222) BEGIN SET @retry = @retry - 1 IF @retry = 0 WAITFOR DELAY '00:00:00.05' CONTINUE END END CATCH;";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            else
            {
                comalter = "  Alter proc OnlinefeedbackIsgeneralsave @feedbackfk varchar(50),@questionfk varchar(50),@uniquecode varchar(50),@markmasterfk varchar(50) as DECLARE @retry  tinyint SET @retry  = 5 WHILE @retry >0 BEGIN TRY BEGIN TRANSACTION;   if exists (select * from CO_StudFeedBack where FeedBackMasterFK =@feedbackfk and QuestionMasterFK =@questionfk and FeedbackUnicode= @uniquecode ) update CO_StudFeedBack set MarkMasterPK =@markmasterfk where FeedBackMasterFK =@feedbackfk and FeedbackUnicode=@uniquecode and QuestionMasterFK =@questionfk else  insert into CO_StudFeedBack (FeedbackUnicode,FeedBackMasterFK,QuestionMasterFK,MarkMasterPK) values (@uniquecode,@feedbackfk,@questionfk,@markmasterfk) COMMIT TRANSACTION; BREAK END TRY BEGIN CATCH   ROLLBACK TRANSACTION; if (ERROR_NUMBER() = 1205 OR ERROR_NUMBER() = 1222) BEGIN SET @retry = @retry - 1 IF @retry = 0 WAITFOR DELAY '00:00:00.05' CONTINUE END END CATCH; ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            FeedbackQuery = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Feedback_acadamic_general'");
            if (FeedbackQuery.Trim() == "0")
            {
                comalter = "   Create procedure Feedback_acadamic_general @FeedbackFK varchar(10),@CollegeCode varchar(10),@Withoutquestiontypematch varchar(10) as begin    if(@Withoutquestiontypematch=0)        begin   select  qm.HeaderCode, (select TextVal from TextValTable where TextCode= qm.HeaderCode) as eaderName,qm.Question,qm.QuestionMasterPK,FeedBackMasterPK,qt.MarkMasterPK as MarkMasterFK from CO_FeedBackMaster m,CO_FeedBackQuestions q  ,CO_QuestionMaster qm,CO_MarkMaster qt where m.FeedBackMasterPK =q.FeedBackMasterFK and qm.QuestionMasterPK=q.QuestionMasterFK  and FeedBackType ='1' and FeedBackMasterPK =@FeedbackFK order by StartDate desc  select distinct MarkType, MarkMasterPK   from CO_MarkMaster where CollegeCode =@CollegeCode select FeedBackMasterPK, FeedBackName, CONVERT(varchar(10), StartDate,103) as StartDate,CONVERT(varchar(10), EndDate,103) as EndDate from CO_FeedBackMaster where FeedBackType ='1' and FeedBackMasterPK=@FeedbackFK order by StartDate desc  select distinct qm.HeaderCode, (select TextVal from TextValTable where TextCode= qm.HeaderCode) as HeaderName,qm.QuestionMasterPK from CO_FeedBackMaster m,CO_FeedBackQuestions q  ,CO_QuestionMaster qm  where m.FeedBackMasterPK =q.FeedBackMasterFK and qm.QuestionMasterPK=q.QuestionMasterFK  and FeedBackType ='1' and FeedBackMasterPK in (select top 1 FeedBackMasterPK  from CO_FeedBackMaster where FeedBackType ='1' and FeedBackMasterPK=@FeedbackFK order by StartDate desc)    end    else       begin    select  qm.HeaderCode, (select TextVal from TextValTable where TextCode= qm.HeaderCode) as HeaderName,qm.Question,qm.QuestionMasterPK,qt.FeedbackFk as FeedBackMasterPK,qt.MarkMasterFK from CO_FeedBackMaster m,CO_FeedBackQuestions q  ,CO_QuestionMaster qm,Co_Question_Type qt where qt.HeaderCode=qm.HeaderCode and qt.QuestionmasterFK=qm.QuestionMasterPK and  m.FeedBackMasterPK =q.FeedBackMasterFK and qm.QuestionMasterPK=q.QuestionMasterFK  and FeedBackType ='1' and qt.FeedbackFk=m.FeedBackMasterPK and  FeedBackMasterPK =@FeedbackFK order by HeaderName  select distinct MarkType, MarkMasterPK   from CO_MarkMaster where CollegeCode =@CollegeCode  select FeedBackMasterPK, FeedBackName, CONVERT(varchar(10), StartDate,103) as StartDate,CONVERT(varchar(10), EndDate,103) as EndDate from CO_FeedBackMaster where FeedBackType ='1' and FeedBackMasterPK=@FeedbackFK order by StartDate desc   select distinct qm.HeaderCode, (select TextVal from TextValTable where TextCode= qm.HeaderCode) as HeaderName,qm.QuestionMasterPK from CO_FeedBackMaster m,CO_FeedBackQuestions q  ,CO_QuestionMaster qm ,Co_Question_Type qt where qt.HeaderCode=qm.HeaderCode and qt.QuestionmasterFK=qm.QuestionMasterPK and  m.FeedBackMasterPK =q.FeedBackMasterFK and qm.QuestionMasterPK=q.QuestionMasterFK  and FeedBackType ='1' and m.FeedBackMasterPK=qt.FeedbackFk and FeedBackMasterPK in (select top 1 FeedBackMasterPK  from CO_FeedBackMaster where FeedBackType ='1' and FeedBackMasterPK=@FeedbackFK order by StartDate desc)        end   end ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            else
            {
                comalter = "  Alter procedure Feedback_acadamic_general @FeedbackFK varchar(10),@CollegeCode varchar(10),@Withoutquestiontypematch varchar(10) as begin    if(@Withoutquestiontypematch=0)        begin   select  qm.HeaderCode, (select TextVal from TextValTable where TextCode= qm.HeaderCode) as HeaderName,qm.Question,qm.QuestionMasterPK,FeedBackMasterPK,qt.MarkMasterPK as MarkMasterFK from CO_FeedBackMaster m,CO_FeedBackQuestions q  ,CO_QuestionMaster qm,CO_MarkMaster qt where m.FeedBackMasterPK =q.FeedBackMasterFK and qm.QuestionMasterPK=q.QuestionMasterFK  and FeedBackType ='1' and FeedBackMasterPK =@FeedbackFK order by StartDate desc  select distinct MarkType, MarkMasterPK   from CO_MarkMaster where CollegeCode =@CollegeCode select FeedBackMasterPK, FeedBackName, CONVERT(varchar(10), StartDate,103) as StartDate,CONVERT(varchar(10), EndDate,103) as EndDate from CO_FeedBackMaster where FeedBackType ='1' and FeedBackMasterPK=@FeedbackFK order by StartDate desc  select distinct qm.HeaderCode, (select TextVal from TextValTable where TextCode= qm.HeaderCode) as HeaderName,qm.QuestionMasterPK from CO_FeedBackMaster m,CO_FeedBackQuestions q  ,CO_QuestionMaster qm  where m.FeedBackMasterPK =q.FeedBackMasterFK and qm.QuestionMasterPK=q.QuestionMasterFK  and FeedBackType ='1' and FeedBackMasterPK in (select top 1 FeedBackMasterPK  from CO_FeedBackMaster where FeedBackType ='1' and FeedBackMasterPK=@FeedbackFK order by StartDate desc)    end    else       begin    select  qm.HeaderCode, (select TextVal from TextValTable where TextCode= qm.HeaderCode) as HeaderName,qm.Question,qm.QuestionMasterPK,qt.FeedbackFk as FeedBackMasterPK,qt.MarkMasterFK from CO_FeedBackMaster m,CO_FeedBackQuestions q  ,CO_QuestionMaster qm,Co_Question_Type qt where qt.HeaderCode=qm.HeaderCode and qt.QuestionmasterFK=qm.QuestionMasterPK and  m.FeedBackMasterPK =q.FeedBackMasterFK and qm.QuestionMasterPK=q.QuestionMasterFK  and FeedBackType ='1' and qt.FeedbackFk=m.FeedBackMasterPK and  FeedBackMasterPK =@FeedbackFK order by HeaderName  select distinct MarkType, MarkMasterPK   from CO_MarkMaster where CollegeCode =@CollegeCode  select FeedBackMasterPK, FeedBackName, CONVERT(varchar(10), StartDate,103) as StartDate,CONVERT(varchar(10), EndDate,103) as EndDate from CO_FeedBackMaster where FeedBackType ='1' and FeedBackMasterPK=@FeedbackFK order by StartDate desc   select distinct qm.HeaderCode, (select TextVal from TextValTable where TextCode= qm.HeaderCode) as HeaderName,qm.QuestionMasterPK from CO_FeedBackMaster m,CO_FeedBackQuestions q  ,CO_QuestionMaster qm ,Co_Question_Type qt where qt.HeaderCode=qm.HeaderCode and qt.QuestionmasterFK=qm.QuestionMasterPK and  m.FeedBackMasterPK =q.FeedBackMasterFK and qm.QuestionMasterPK=q.QuestionMasterFK  and FeedBackType ='1' and m.FeedBackMasterPK=qt.FeedbackFk and FeedBackMasterPK in (select top 1 FeedBackMasterPK  from CO_FeedBackMaster where FeedBackType ='1' and FeedBackMasterPK=@FeedbackFK order by StartDate desc)        end   end ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            string feedback_markstaffappid = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'feedback_markstaffappid'");
            if (feedback_markstaffappid.Trim() == "0")
            {
                comalter = " Create proc feedback_markstaffappid as begin select MarkMasterPK,MarkType from CO_MarkMaster select appl_id,s.staff_code from staff_appl_master sa,staffmaster s where sa.appl_no=s.appl_no end ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            else
            {
                comalter = " alter proc feedback_markstaffappid as begin select MarkMasterPK,MarkType from CO_MarkMaster select appl_id,s.staff_code from staff_appl_master sa,staffmaster s where sa.appl_no=s.appl_no end ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            string Onlinefeedbacksave = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Onlinefeedbacksave'");
            if (Onlinefeedbacksave.Trim() == "0")
            {
                comalter = " create proc Onlinefeedbacksave @feedbackfk varchar(50),@questionfk varchar(50),@uniquecode varchar(50),@subjectno bigint,@staffapplid bigint,@markmasterfk varchar(50) as DECLARE @retry  tinyint SET @retry  = 5 WHILE @retry >0 BEGIN TRY BEGIN TRANSACTION; if exists (select * from CO_StudFeedBack where FeedBackMasterFK =@feedbackfk and QuestionMasterFK =@questionfk and FeedbackUnicode= @uniquecode and  SubjectNo =@subjectno and StaffApplNo=@staffapplid) update CO_StudFeedBack set MarkMasterPK =@markmasterfk where FeedBackMasterFK =@feedbackfk and FeedbackUnicode=@uniquecode and QuestionMasterFK =@questionfk and  SubjectNo =@subjectno and StaffApplNo=@staffapplid else  insert into CO_StudFeedBack (FeedbackUnicode,FeedBackMasterFK,QuestionMasterFK,MarkMasterPK,StaffApplNo,SubjectNo) values (@uniquecode,@feedbackfk,@questionfk,@markmasterfk,@staffapplid,@subjectno) COMMIT TRANSACTION; BREAK END TRY BEGIN CATCH   ROLLBACK TRANSACTION; if (ERROR_NUMBER() = 1205 OR ERROR_NUMBER() = 1222) BEGIN SET @retry = @retry - 1 IF @retry = 0 WAITFOR DELAY '00:00:00.05' CONTINUE END END CATCH;";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            else
            {
                comalter = " alter proc Onlinefeedbacksave @feedbackfk varchar(50),@questionfk varchar(50),@uniquecode varchar(50),@subjectno bigint,@staffapplid bigint,@markmasterfk varchar(50) as DECLARE @retry  tinyint SET @retry  = 5 WHILE @retry >0 BEGIN TRY BEGIN TRANSACTION; if exists (select * from CO_StudFeedBack where FeedBackMasterFK =@feedbackfk and QuestionMasterFK =@questionfk and FeedbackUnicode= @uniquecode and  SubjectNo =@subjectno and StaffApplNo=@staffapplid) update CO_StudFeedBack set MarkMasterPK =@markmasterfk where FeedBackMasterFK =@feedbackfk and FeedbackUnicode=@uniquecode and QuestionMasterFK =@questionfk and  SubjectNo =@subjectno and StaffApplNo=@staffapplid else  insert into CO_StudFeedBack (FeedbackUnicode,FeedBackMasterFK,QuestionMasterFK,MarkMasterPK,StaffApplNo,SubjectNo) values (@uniquecode,@feedbackfk,@questionfk,@markmasterfk,@staffapplid,@subjectno) COMMIT TRANSACTION; BREAK END TRY BEGIN CATCH   ROLLBACK TRANSACTION; if (ERROR_NUMBER() = 1205 OR ERROR_NUMBER() = 1222) BEGIN SET @retry = @retry - 1 IF @retry = 0 WAITFOR DELAY '00:00:00.05' CONTINUE END END CATCH;";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            Onlinefeedbacksave = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'IndividualfeedbackIsgeneralsave'");
            if (Onlinefeedbacksave.Trim() == "0")
            {
                comalter = " CREATE proc IndividualfeedbackIsgeneralsave @feedbackfk varchar(50),@questionfk varchar(50),@app_no varchar(50),@markmasterfk varchar(50) as DECLARE @retry  tinyint SET @retry  = 5 WHILE @retry >0 BEGIN TRY BEGIN TRANSACTION;   if exists (select * from CO_StudFeedBack where FeedBackMasterFK =@feedbackfk and QuestionMasterFK =@questionfk and App_No= @app_no ) update CO_StudFeedBack set MarkMasterPK =@markmasterfk where FeedBackMasterFK =@feedbackfk and App_No=@app_no and QuestionMasterFK =@questionfk else  insert into CO_StudFeedBack (App_No,FeedBackMasterFK,QuestionMasterFK,MarkMasterPK) values (@app_no,@feedbackfk,@questionfk,@markmasterfk) COMMIT TRANSACTION; BREAK END TRY BEGIN CATCH   ROLLBACK TRANSACTION; if (ERROR_NUMBER() = 1205 OR ERROR_NUMBER() = 1222) BEGIN SET @retry = @retry - 1 IF @retry = 0 WAITFOR DELAY '00:00:00.05' CONTINUE END END CATCH;";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            else
            {
                comalter = "  Alter proc IndividualfeedbackIsgeneralsave @feedbackfk varchar(50),@questionfk varchar(50),@app_no varchar(50),@markmasterfk varchar(50) as DECLARE @retry  tinyint SET @retry  = 5 WHILE @retry >0 BEGIN TRY BEGIN TRANSACTION;   if exists (select * from CO_StudFeedBack where FeedBackMasterFK =@feedbackfk and QuestionMasterFK =@questionfk and App_No= @app_no ) update CO_StudFeedBack set MarkMasterPK =@markmasterfk where FeedBackMasterFK =@feedbackfk and App_No=@app_no and QuestionMasterFK =@questionfk else  insert into CO_StudFeedBack (App_No,FeedBackMasterFK,QuestionMasterFK,MarkMasterPK) values (@app_no,@feedbackfk,@questionfk,@markmasterfk) COMMIT TRANSACTION; BREAK END TRY BEGIN CATCH   ROLLBACK TRANSACTION; if (ERROR_NUMBER() = 1205 OR ERROR_NUMBER() = 1222) BEGIN SET @retry = @retry - 1 IF @retry = 0 WAITFOR DELAY '00:00:00.05' CONTINUE END END CATCH;";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }

            masterval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='TapalInward'");
            if (masterval.Trim() == "0")
            {
                comalter = " CREATE TABLE [dbo].[TapalInward](	[TapalMovementsID] [numeric](18, 0) IDENTITY(1,1) NOT NULL,	[MemType] [tinyint] NULL,	[App_No] [numeric](18, 0) NULL,	[FromName] [nvarchar](30) NULL,	[FromAdd1] [nvarchar](100) NULL,	[FromStreet] [nvarchar](100) NULL,	[FromCity] [nvarchar](100) NULL,	[FromDist] [nvarchar](100) NULL,	[FromState] [nvarchar](100) NULL,	[FromCountry] [nvarchar](100) NULL,	[FromPhoneNo] [nvarchar](30) NULL,	[FromMobileNo] [nvarchar](30) NULL,	[FromMailID] [nvarchar](30) NULL,	[FromWebsite] [nvarchar](50) NULL,	[MagazineName] [nvarchar](100) NULL,	[MagazineType] [nvarchar](50) NULL,	[MoveTo] [tinyint] NULL,	[ToDeptCode] [nvarchar](100) NULL,	[ToCCDeptCode] [nvarchar](100) NULL,	[TapalSubject] [nvarchar](200) NULL,	[Priority] [numeric](18, 0) NULL,	[RefNo] [nvarchar](20) NULL,	[ActionDesc] [nvarchar](200) NULL,	[ActionStatus] [numeric](18, 0) NULL,	[TapalType] [numeric](18, 0) NULL,	[TapalInwardDate] [datetime] NULL,	[TapalInwardTime] [varchar](100) NULL,	[individual_code] [nvarchar](200) NULL,	[ccindividual_code] [nvarchar](200) NULL,	[tostudentno] [nvarchar](400) NULL,	[type] [bit] NULL,	[staff_code] [nvarchar](200) NULL,	[ActionDate] [datetime] NULL,	[ActionTime] [nvarchar](30) NULL,	[ViewStatus] [bit] NULL,	[SendNote] [bit] NULL,	[ResponseStaff] [nvarchar](30) NULL,	[ispayment] [bit] NULL,	[DDNo] [varchar](100) NULL,	[PaymentType] [tinyint] NULL,	[DDName] [varchar](100) NULL,	[DDDate] [datetime] NULL,	[Paymentamount] [decimal](12, 2) NULL,	[BankCode] [nvarchar](100) NULL,	[BranchName] [nvarchar](200) NULL) ON [PRIMARY]";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            masterval = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lettertbl'");
            if (masterval.Trim() == "0")
            {
                comalter = " CREATE TABLE [dbo].[lettertbl]([filename] [varchar](50) NULL,	[filedata] [varbinary](max) NULL,	[filetype] [nvarchar](100) NULL,	[date] [datetime] NULL,	[fileid] [nvarchar](200) NULL,	[Memtype] [tinyint] NULL,	[MemCode] [nvarchar](50) NULL,	[TapalInwardFk] [bigint] NULL) ON [PRIMARY]";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            //10.08.17 feedback
            procedureType = 0;//0 - Create ; 1 - Alter
            procedureQ = string.Empty;
            if (IsStoredProcedureAvailable("FeedbackLogin"))
                procedureType = 1;
            else
                procedureType = 0;
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + " proc FeedbackLogin @Unicode nvarchar(20) as begin select FeedbackUnicode,IsCheckFlag,FeedBackMasterfK,F.FeedbackName,f.collegecode from  CO_FeedbackUniCode FU,CO_FeedbackMaster F where f.FeedBackMasterPK=FU.FeedBackMasterFK and FeedbackUnicode= @Unicode  end ";
            ExecuteProcedure("FeedbackLogin", procedureQ, procedureType);
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
            lbler.Text = ex.ToString();
            lbler.Visible = true;
        }
    }

    public void HR()
    {
        try
        {
            string find_tablename = string.Empty;
            string hrcreat = string.Empty;
            string licdt = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='lic_det'");
            if (licdt == "0")
            {
                hrcreat = " Create table dbo.lic_det (staff_code  nvarchar(50),staff_name nvarchar(50),policy_no numeric,due_from datetime,due_to datetime,inst_prem nvarchar(50),mode nvarchar(50),inst nvarchar(50),amt_prem_paid nvarchar(50),pay_dat datetime,lic_plan nvarchar(50),lic_term nvarchar(50),lic_ppt nvarchar(50))";
            }
            string txtclc = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Tax_Calculation_CommonAllowDeduct'");
            if (txtclc == "0")
            {
                string InsQ = " Create table Tax_Calculation_CommonAllowDeduct(AllowDeductPK bigint identity(1,1),AllowDeductType tinyint,AllowDeduct varchar(max),IncludeSalaryPercent float)";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            string ITHeaderSettings = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ITHeaderSettings'");
            if (ITHeaderSettings == "0")
            {
                string InsQ = " CREATE TABLE ITHeaderSettings(ITHeaderID BigInt IDENTITY(1,1) PRIMARY KEY,ITHeaderName nvarchar(100),ITMaxAmount Decimal(12,2))";
                int upd = d2.update_method_wo_parameter(InsQ, "Text");
            }
            string StaffDetails = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffDetails'");
            if (StaffDetails == "0")
            {
                hrcreat = hrcreat + " CREATE TABLE StaffDetails (Appl_ID BigInt,DetailType tinyint,Graduation Bigint,Degree BigInt,Specialization BigInt,PassYear BigInt,University BigInt,Institution  Bigint,Percentage Decimal,Grade nvarchar(10),Class nvarchar(10),ExpFromDate Datetime,ExpToDate Datetime,ExpYear Bigint,ExpMOnth bigint,ExpOrganization BigInt,ExpDesig BigInt,ExpIn BigInt,ReasonforReleive BigInt,CurrentSalary Decimal(12,2),AdditionalDuties nvarchar(200))";
            }
            string payset = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Pay_setting'");
            if (payset == "0")
            {
                hrcreat = hrcreat + " CREATE TABLE [dbo].[Pay_setting] ([Staff_code] [nvarchar] (50) NULL ,[half_full_det] [numeric](18, 0) NULL ,[reason] [nvarchar] (150) NULL ,[Access_date] [datetime] NULL ,[college_code] [numeric](18, 0) NULL)";
            }
            string stfcertifct = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staff_certificate'");
            if (stfcertifct == "0")
            {
                hrcreat = hrcreat + " CREATE TABLE [dbo].[staff_certificate] ([cert_no] [numeric](18, 0) IDENTITY (1, 1) NOT NULL ,[cert_name] [nvarchar] (50) NULL ,[College_code] [Numeric](18, 0))";
            }
            string crtstflist = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='cert_staff_list'");
            if (crtstflist == "0")
            {
                hrcreat = hrcreat + " CREATE TABLE [dbo].[cert_staff_list] ([staff_code] [nvarchar] (50)  NOT NULL ,[cert_code] [nvarchar] (50)  NOT NULL ,[cert_date] [datetime] NULL ,[cert_no]  [numeric](18, 0) not NULL ,[degree] [nvarchar] (50) NULL)";
            }
            string bioaten = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Bio_Attendance'");
            if (bioaten == "0")
            {
                hrcreat = hrcreat + " CREATE TABLE [dbo].[Bio_Attendance] ([Roll_No] [nvarchar] (50) NULL , [Time_in] [datetime] NULL , [Time_Out] [datetime] NULL ,[Is_staff] [bit] NULL ,[Access_date] [datetime] NULL ,[latestrec] [bit] NULL)";
            }
            string HR_ITCalculationSettings = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HR_ITCalculationSettings'");
            if (HR_ITCalculationSettings == "0")
            {
                hrcreat = hrcreat + " create table HR_ITCalculationSettings(ITCalculationPK bigint identity(1,1),FromRange money,ToRange money,Mode bit,Amount decimal(12,2),collegeCode int)";
            }
            string StaffTaxDetails = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffTaxDetails'");
            if (StaffTaxDetails == "0")
            {
                hrcreat = hrcreat + " create table StaffTaxDetails(Staff_Code nvarchar(30),Asst_Year nvarchar(300),TaxAmount decimal(12,2))";
            }
            if (hrcreat != "")
            {
                int hrcr = d2.update_method_wo_parameter(hrcreat, "Text");
            }
            //alter
            string alterhr = string.Empty;
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='spl_add_deduct'");
            if (find_tablename != "0")
            {
                string splmnt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'spl_add_deduct' AND COLUMN_NAME = 'spl_month'");
                if (splmnt == "0")
                {
                    alterhr = " Alter table spl_add_deduct add spl_month datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='pfslabs'");
            if (find_tablename != "0")
            {
                string slbtyp = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'pfslabs' AND COLUMN_NAME = 'slabtype'");
                if (slbtyp == "0")
                {
                    alterhr = " alter table pfslabs add slabtype nvarchar (50)";
                }
                string catcod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'pfslabs' AND COLUMN_NAME = 'category_code'");
                if (slbtyp == "0")
                {
                    alterhr = alterhr + " alter table pfslabs add category_code nvarchar (50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staff_appl_master'");
            if (find_tablename != "0")
            {
                string dob = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'date_of_birth'");
                if (dob == "0")
                {
                    alterhr = alterhr + " alter table staff_appl_master add date_of_birth datetime";
                }
                else
                {
                    alterhr = alterhr + " alter table staff_appl_master alter column date_of_birth datetime";
                }
                string husname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'husband_name'");
                if (husname == "0")
                {
                    alterhr = alterhr + " Alter table staff_appl_master add husband_name nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffmaster'");
            if (find_tablename != "0")
            {
                string honsft = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'HonourStf'");
                if (honsft == "0")
                {
                    alterhr = alterhr + " Alter table staffmaster add HonourStf bit";
                }
                string libd = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'lib_id'");
                if (libd == "0")
                {
                    alterhr = alterhr + " alter table staffmaster add lib_id nvarchar (50) null";
                }
            } find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='desig_master'");
            if (find_tablename != "0")
            {
                string desig = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'desig_master' AND COLUMN_NAME = 'staffcategory'");
                if (desig == "0")
                {
                    alterhr = alterhr + " alter table desig_master add staffcategory nvarchar(50) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffTrans'");
            if (find_tablename != "0")
            {
                string certyp = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stafftrans' AND COLUMN_NAME = 'cert_type'");
                if (certyp == "0")
                {
                    alterhr = alterhr + " alter table stafftrans add cert_type numeric(8) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffmaster'");
            if (find_tablename != "0")
            {
                string finprt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'Fingerprint1'");
                if (finprt == "0")
                {
                    alterhr = alterhr + " alter table staffmaster add Fingerprint1 ntext null";
                }
                string acronym = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'acronym'");
                if (acronym == "0")
                {
                    alterhr = alterhr + " alter table staffmaster add acronym varchar(50)";
                }
                string finprt2 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'Fingerprint2'");
                if (finprt2 == "0")
                {
                    alterhr = alterhr + " alter table staffmaster add Fingerprint2 ntext null";
                }
                string finprt3 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'Fingerprint3'");
                if (finprt3 == "0")
                {
                    alterhr = alterhr + " alter table staffmaster add Fingerprint3 ntext null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='carryover'");
            if (find_tablename != "0")
            {
                string avlday = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'carryover' AND COLUMN_NAME = 'availabledays'");
                if (avlday == "0")
                {
                    alterhr = alterhr + " alter table carryover alter column availabledays float";
                }
                string stlday = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'carryover' AND COLUMN_NAME = 'settleddays'");
                if (stlday == "0")
                {
                    alterhr = alterhr + " alter table carryover alter column settleddays float";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='pfprevdet'");
            if (find_tablename != "0")
            {
                string empyrdd = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'pfprevdet' AND COLUMN_NAME = 'empyraddr'");
                if (empyrdd == "0")
                {
                    alterhr = alterhr + " alter table pfprevdet alter column empyraddr nvarchar(100) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='sssss'");
            if (find_tablename != "0")
            {
                string bscalone = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'monthlypay' AND COLUMN_NAME = 'basic_alone'");
                if (bscalone == "0")
                {
                    alterhr = alterhr + " alter table monthlypay add basic_alone money";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffloan'");
            if (find_tablename != "0")
            {
                string acssdt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffloan' AND COLUMN_NAME = 'access_Date'");
                if (acssdt == "0")
                {
                    alterhr = alterhr + " alter table staffloan  add access_Date datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffTrans'");
            if (find_tablename != "0")
            {
                string tmcatgry = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stafftrans' AND COLUMN_NAME = 'time_category'");
                if (tmcatgry == "0")
                {
                    alterhr = alterhr + " alter table stafftrans add time_category numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='monthlypay'");
            if (find_tablename != "0")
            {
                string ptlatestr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'monthlypay' AND COLUMN_NAME = 'pt_latestrec'");
                if (ptlatestr == "0")
                {
                    alterhr = alterhr + " alter table monthlypay add pt_latestrec bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffdatasht'");
            if (find_tablename != "0")
            {
                string acdacivevnt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffdatasht' AND COLUMN_NAME = 'acad_achievements'");
                if (acdacivevnt == "0")
                {
                    alterhr = alterhr + " alter table staffdatasht add acad_achievements nvarchar(200) null";
                }
                string srvce = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffdatasht' AND COLUMN_NAME = 'service'");
                if (srvce == "0")
                {
                    alterhr = alterhr + " alter table staffdatasht add service nvarchar(200) null";
                }
                string confrnc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffdatasht' AND COLUMN_NAME = 'conference'");
                if (confrnc == "0")
                {
                    alterhr = alterhr + " alter table staffdatasht add conference nvarchar(200) null";
                }
                string Publication = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffdatasht' AND COLUMN_NAME = 'Publications'");
                if (Publication == "0")
                {
                    alterhr = alterhr + " alter table staffdatasht add Publications nvarchar(1000) null";
                }
                string prgram = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffdatasht' AND COLUMN_NAME = 'Programme'");
                if (prgram == "0")
                {
                    alterhr = alterhr + " alter table staffdatasht add Programme nvarchar(200) null";
                }
                string refern = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffdatasht' AND COLUMN_NAME = 'Reference'");
                if (refern == "0")
                {
                    alterhr = alterhr + " alter table staffdatasht add Reference nvarchar(1000) null";
                }
                string yrpass = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffdatasht' AND COLUMN_NAME = 'yearofpass'");
                if (yrpass == "0")
                {
                    alterhr = alterhr + " alter table staffdatasht add yearofpass nvarchar(20) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staff_appl_master'");
            if (find_tablename != "0")
            {
                string yofexp = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'yofexp'");
                if (yofexp != "0")
                {
                    //alterhr = alterhr + " alter table staff_appl_master alter column yofexp ntext null";
                    //}
                    //else 
                    //{
                    alterhr = alterhr + "  alter table staff_appl_master alter column yofexp nvarchar(MAX)";
                }
                string ntiontlty = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'Nationality'");
                if (ntiontlty == "0")
                {
                    alterhr = alterhr + " ALTER TABLE staff_appl_master add Nationality nvarchar(100)";
                }
                string martilstatus = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'martial_status'");
                if (martilstatus == "0")
                {
                    alterhr = alterhr + " ALTER TABLE staff_appl_master add martial_status char(100)";
                }
                string nativty = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'Nativity'");
                if (nativty == "0")
                {
                    alterhr = alterhr + " ALTER TABLE staff_appl_master add Nativity nvarchar (100)";
                }
                string hght = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'height'");
                if (hght == "0")
                {
                    alterhr = alterhr + " ALTER TABLE staff_appl_master add height numeric(9)";
                }
                string wight = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'weight'");
                if (wight == "0")
                {
                    alterhr = alterhr + " ALTER TABLE staff_appl_master add weight numeric(9)";
                }
                string powsight = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'powofsight'");
                if (powsight == "0")
                {
                    alterhr = alterhr + " ALTER TABLE staff_appl_master add powofsight numeric(9)";
                }
                string passpotno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'passportno'");
                if (passpotno == "0")
                {
                    alterhr = alterhr + " ALTER TABLE staff_appl_master add  passportno varchar(20)";
                }
                string drvngno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'drivingno'");
                if (drvngno == "0")
                {
                    alterhr = alterhr + " ALTER TABLE staff_appl_master add drivingno varchar(20)";
                }
                string read = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'read1'");
                if (read == "0")
                {
                    alterhr = alterhr + " ALTER TABLE staff_appl_master add read1 nvarchar(20)";
                }
                string wrt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'write'");
                if (wrt == "0")
                {
                    alterhr = alterhr + " ALTER TABLE staff_appl_master add write nvarchar(20)";
                }
                string spk = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'speak'");
                if (spk == "0")
                {
                    alterhr = alterhr + " ALTER TABLE staff_appl_master add speak nvarchar(20)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staff_attnd'");
            if (find_tablename != "0")
            {
                string latcount = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_attnd' AND COLUMN_NAME = 'latecount'");
                if (latcount == "0")
                {
                    alterhr = alterhr + " alter table staff_attnd add latecount numeric(18,0) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffTrans'");
            if (find_tablename != "0")
            {
                string admcatgry = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stafftrans' AND COLUMN_NAME = 'admcategory'");
                if (admcatgry == "0")
                {
                    alterhr = alterhr + " alter table stafftrans add admcategory nvarchar(50) null";
                }
            }
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffTrans'");
            if (find_tablename != "0")
            {
                string admcatgry = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stafftrans' AND COLUMN_NAME = 'Isincrement'");
                if (admcatgry == "0")
                {
                    alterhr = alterhr + " alter table stafftrans add Isincrement int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffmaster'");
            if (find_tablename != "0")
            {
                string membership = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'membership'");
                if (membership == "0")
                {
                    alterhr = alterhr + " alter table staffmaster add membership nvarchar(50) null";
                }
                string periodfrm = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'periodfrom'");
                if (periodfrm == "0")
                {
                    alterhr = alterhr + " alter table staffmaster add periodfrom datetime";
                }
                string prdto = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'periodto'");
                if (prdto == "0")
                {
                    alterhr = alterhr + " alter table staffmaster add periodto datetime";
                }
                string probfrm = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'prob_from'");
                if (probfrm == "0")
                {
                    alterhr = alterhr + " alter table staffmaster add prob_from datetime";
                }
                string probto = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'prob_to'");
                if (probto == "0")
                {
                    alterhr = alterhr + " alter table staffmaster add prob_to datetime";
                }
                string retrdt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'retr_date'");
                if (retrdt == "0")
                {
                    alterhr = alterhr + " alter table staffmaster add retr_date datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffDetails'");
            if (find_tablename != "0")
            {
                string IsOwncollege = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffDetails' AND COLUMN_NAME = 'IsOwncollege'");
                if (IsOwncollege == "0")
                {
                    alterhr = alterhr + " alter table StaffDetails add IsOwncollege Bit";
                }
                string ExpDesig = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffDetails' AND COLUMN_NAME = 'ExpDesig'");
                if (ExpDesig != "0")
                {
                    alterhr = alterhr + " alter table StaffDetails alter column ExpDesig nvarchar(20)";
                }
                string Class = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffDetails' AND COLUMN_NAME = 'Class'");
                if (Class != "0")
                {
                    alterhr = alterhr + " alter table StaffDetails alter column Class nvarchar(15)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffmaster'");
            if (find_tablename != "0")
            {
                string IsOwncollege = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'IsCanceledStage'");
                if (IsOwncollege == "0")
                {
                    alterhr = alterhr + " alter table staffmaster add IsCanceledStage bit";
                }
            }
            if (alterhr != "")
            {
                int althr = d2.update_method_wo_parameter(alterhr, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    //Added Two Columns IsHourWise,Category_code and Two Tables HourWise_PaySettings,Hour_Staff_Attnd by JP on Jan 31st,2017 
    public void hr1()
    {
        try
        {
            string find_tablename = string.Empty;
            string againhr = string.Empty;
            string sclmstr = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='scale_master'");
            if (sclmstr == "0")
            {
                againhr = " create table scale_master(grade nvarchar(100) null,entry_level nvarchar(100) null,sacle_of_pay nvarchar(100) null,college_code integer null)";
            }
            string venutbl = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='venue_det'");
            if (venutbl == "0")
            {
                againhr = againhr + " create table venue_det(appl_no nvarchar(50) null,venue_name nvarchar(50),college_code integer null)";
            }
            string taxtdt = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tax_det'");
            if (taxtdt == "0")
            {
                againhr = againhr + " create table tax_det(tax_code nvarchar(50) null,tax_name nvarchar(100),college_code integer null)";
            }
            string stfchk = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staff_cheque'");
            if (stfchk == "0")
            {
                againhr = againhr + " create table staff_cheque(staff_code nvarchar(50),frm_date datetime,to_date datetime,adate datetime,chkdate datetime,bankcode nvarchar(50),chkno nvarchar(50),college_code integer)";
            }
            string stfpay = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staff_pay'");
            if (stfpay == "0")
            {
                againhr = againhr + " create table staff_pay(staff_code nvarchar(100),pay_mode integer,college_code integer,inperson  integer,acc_no nvarchar(100))";
            }
            string pfslbmstr = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='pfslabs_master'");
            if (pfslbmstr == "0")
            {
                againhr = againhr + " create table pfslabs_master(salfrom float,salto float,mode nvarchar(100),slabvalue integer,college_code integer)";
            }
            string intrvw = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='inteviewer'");
            if (intrvw == "0")
            {
                againhr = againhr + " create table inteviewer (appl_no nvarchar(100),status integer,candidate nvarchar(100),contact_addr nvarchar(100),contact_ph nvarchar(100),staff_code nvarchar(100),college_code integer)";
            }
            string stftrns = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staff_transfer'");
            if (stftrns == "0")
            {
                againhr = againhr + " create table staff_transfer (college_code nvarchar(50),to_col_code nvarchar(50),from_dep_code nvarchar(50),to_dep_code nvarchar(50),from_dsg_code nvarchar(50),to_dsg_code nvarchar(50),from_cat_code nvarchar(50),to_cat_code nvarchar(50),newstaff_code nvarchar(100),transfer_date datetime)";
            }
            string stfappdet = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staff_appraisal_det'");
            if (stfappdet == "0")
            {
                againhr = againhr + " create table staff_appraisal_det(staff_code nvarchar(100),staff_name nvarchar(100),deisg_name nvarchar(100),dept_name nvarchar(100),staff_type nvarchar(100),join_date datetime,appr_rating nvarchar(100),appr_comm nvarchar(100),appr_flg integer,review_rating nvarchar(100),review_comm nvarchar(100),review_flag integer)";
            }
            string aprqus = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='appr_ques'");
            if (aprqus == "0")
            {
                againhr = againhr + " create table appr_ques (staff_code nvarchar(100),staff_name nvarchar(100),ques nvarchar(100),college_code integer)";
            }
            string stflong = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staff_long_leave'");
            if (stflong == "0")
            {
                againhr = againhr + "create table staff_long_leave(staff_code nvarchar(100),staff_name nvarchar(100),dept_code nvarchar(100),desig_code nvarchar(100),no_days integer,fdate datetime,tdate datetime,remarks nvarchar(100),apply_approve integer,college_code integer)";
            }
            string stffinger = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Staff_Finger'");
            if (stffinger == "0")
            {
                againhr = againhr + " create table Staff_Finger(staff_code nvarchar(100),Finger1 image,Finger2 image)";
            }
            string indlevtyp = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='individual_Leave_type'");
            if (indlevtyp == "0")
            {
                againhr = againhr + " CREATE TABLE [individual_Leave_type] ([staff_code] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[leavetype] [ntext]COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[permission] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [college_code] [int] NULL ,[MaxEarnLeave] [int] NULL ,[category_code] [nvarchar](50)) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]";
            }
            string hryear = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='hryears'");
            if (hryear == "0")
            {
                againhr = againhr + " CREATE TABLE [hryears] ([staff_code] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[leavetype] [ntext]COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[permission] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [college_code] [int] NULL ,[MaxEarnLeave] [int] NULL ,[category_code] [nvarchar](50)) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]";
            }
            string stflop_det = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffLOP_Details'");
            if (stflop_det == "0")
            {
                againhr = againhr + " CREATE Table StaffLOP_Details(Staff_Code nvarchar(100),LOP_FromDate Datetime,LOP_ToDate Datetime,First_LOP_Days Decimal(12,2),Second_LOP_Days Decimal(12,2))";
            }
            string hrpaymont = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HrPayMonths'");
            if (hrpaymont == "0")
            {
                againhr = againhr + " Create Table HrPayMonths(PayMonthNum Int,PayMonth nvarchar(30),From_Date Datetime,To_Date Datetime,PayDays int)";
            }
            //            string hrpaymont = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HrPayMonths'");
            //            if (hrpaymont == "0")
            //            {
            //                againhr = againhr + " Create TRIGGER TR_Staff_Attnd On Staff_Attnd For Delete AS BEGIN Insert Into Staff_Attnd select * FROM deleted ins End
            //";
            //            }
            string stfiddet = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Staff_ITDetails'");
            if (stfiddet == "0")
            {
                againhr = againhr + " CREATE Table Staff_ITDetails(FromDate Datetime,ToDate Datetime,Assesment_Year nvarchar(15),Staff_Code nvarchar(15),PFAmt Decimal(12,2),NSCAmt Decimal(12,2),PPFAmt Decimal(12,2),LICAmt Decimal(12,2),TutionFee Decimal(12,2),TreatmentAmt Decimal(12,2),HBLoanAmt Decimal(12,2),OthersAmt Decimal(12,2),D80CCCAmt Decimal(12,2),D80DAmt Decimal(12,2),Others80Amt Decimal(12,2),Tot80CCAmt Decimal(12,2),HouseRent Decimal(12,2),PropertyLoss Decimal(12,2), GrossSalIncome Decimal(12,2),HRAExempt Decimal(12,2),TA Decimal(12,2),TotalExempt Decimal(12,2),NetSalIncome Decimal(12,2),PTAmt Decimal(12,2),EntertainmentAllow Decimal(12,2),SalIncome Decimal(12,2),GrossTotIncome Decimal(12,2), TotalDed Decimal(12,2),NetTaxIncome Decimal(12,2),TotalTax Decimal(12,2),Cess Decimal(12,2),TaxPay Decimal(12,2),College_Code numeric)";
            }
            string stfdeposit = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Staff_ITDeposited'");
            if (stfdeposit == "0")
            {
                againhr = againhr + " CREATE TABLE Staff_ITDeposited(SlNo numeric,From_Date Datetime,To_Date Datetime,Assesment_Year nvarchar(30),Staff_Code nvarchar(30),TDSAmt Decimal(12,2),BankName nvarchar(300),TaxDeposited Decimal(12,2),ChqNo nvarchar(20),BSRCode nvarchar(15),DepositedDate Datetime,College_Code numeric)";
            }
            string hrsettings = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HrSettings'");
            if (hrsettings == "0")
            {
                againhr = againhr + " CREATE TABLE HrSettings (SMSAttnRep Bit,MobileNos nvarchar(60),College_Code numeric) ";
            }
            string devicinfo = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='DeviceInfo'");
            if (devicinfo == "0")
            {
                againhr = againhr + " CREATE TABLE DeviceInfo (DeviceID numeric Identity(1,1),DeviceName nvarchar(50),IPAdd nvarchar(30),PortNo nvarchar(30),MachineNo nvarchar(5),DeviceFor tinyint,College_Code numeric)";
            }
            string dailylogs = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Daily_Logs'");
            if (dailylogs == "0")
            {
                againhr = againhr + " CREATE TABLE Daily_Logs(LogId numeric IDENTITY(1,1),Log_Date Datetime,FingerID nvarchar(10),MachineNo nvarchar(10),LogTime nvarchar(15))";
            }
            string attnlogs = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Attn_Logs'");
            if (attnlogs == "0")
            {
                againhr = againhr + " CREATE TABLE Attn_Logs(AttLogId numeric IDENTITY(1,1),Log_Date Datetime,FingerID nvarchar(10),MachineNo nvarchar(10),InTime nvarchar(15),OutTime nvarchar(15))";
            }
            string hrpayset = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Hr_PaySettings'");
            if (hrpayset == "0")
            {
                againhr = againhr + " CREATE Table Hr_PaySettings(IsAttnLOP Bit,LOPBasic Bit,LOPPB Bit,LOPGP Bit,SalCalMaxType tinyint,SalCalMaxDays int,LOPCalMaxType tinyint,LOPCalMaxDays int,IsAbsCal Bit, AbsCalPer Decimal(5,2),IsMaxPer Bit,MaxPerVal Decimal(5,2),IsPFLopDays Bit,PFLopDays Decimal(5,2),FPFPer Decimal(5,2),FPFAge int,College_Code numeric) ";
            }
            string hrHourWisePaySet = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HourWise_PaySettings'");
            if (hrHourWisePaySet == "0")
            {
                againhr = againhr + " create Table HourWise_PaySettings(dept_code nvarchar(50),desig_code nvarchar(10),college_code int,Tot_Hrs bigint,Amnt_Per_Hrs decimal(12,2)) ";
            }
            string HourStfAtnd = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Hour_Staff_Attnd'");
            if (HourStfAtnd == "0")
            {
                againhr = againhr + " Create Table Hour_Staff_Attnd (AttndID bigint identity (1,1),Appl_ID bigint,Staff_Code Varchar(50),WorkingDate datetime,WorkingHour int) ";
            }
            string ITAddAllowDedDetails = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ITAddAllowDedDetails'");
            if (ITAddAllowDedDetails == "0")
            {
                againhr = againhr + " CREATE TABLE ITAddAllowDedDetails(ITAddAllowDedDetailsPK BigInt IDENTITY(1,1),Staff_Code nvarchar(30),AsstYear nvarchar(10),IsAllow Bit,AllowDedDesc bigint,AllowDedAmount Decimal(12,2),DocNo nvarchar(30),DocDate nvarchar(30),ITMon int,ITYear nvarchar(10),AccMon int,AccYear nvarchar(10),ChqNo nvarchar(30),ChqDate nvarchar(30))";
            }
            string HRS_CodeSettings = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HRS_CodeSettings'");
            if (HRS_CodeSettings == "0")
            {
                againhr = againhr + " create table HRS_CodeSettings (SettingField tinyint,SettingValues nvarchar(200),GeneralAcr nvarchar(200),StartNo bigint,SerialSize tinyint,CollegeCode int)";
            }
            string StaffAppraisalMaster = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffAppraisalMaster'");
            if (StaffAppraisalMaster == "0")
            {
                againhr = againhr + " create table StaffAppraisalMaster(AppraisalPk BigInt IDENTITY(1,1) Primary Key,staff_code varchar(50),AppraisalDate datetime,AppraisalType tinyint)";
            }
            string StaffAppraisalDetails = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffAppraisalDetails'");
            if (StaffAppraisalDetails == "0")
            {
                againhr = againhr + "  create table StaffAppraisalDetails(ApprasialDetPk bigint,Questioncode bigint,Anscode bigint,Remarks varchar(50),AppraisalFk bigint)";
            }
            if (againhr != "")
            {
                int aginhr = d2.update_method_wo_parameter(againhr, "Text");
            }
            //altrhragin
            string hraginaltr = string.Empty;
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='hrdept_master'");
            if (find_tablename != "0")
            {
                string hracdmic = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'hrdept_master' AND COLUMN_NAME = 'isacademic'");
                if (hracdmic == "0")
                {
                    hraginaltr = hraginaltr + " alter table hrdept_master add isacademic numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ITAddAllowDedDetails'");
            if (find_tablename != "0")
            {
                string ITHeaderFK = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ITAddAllowDedDetails' AND COLUMN_NAME = 'ITHeaderFK'");
                if (ITHeaderFK == "0")
                {
                    hraginaltr = hraginaltr + " alter table ITAddAllowDedDetails add ITHeaderFK bigint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='desig_master'");
            if (find_tablename != "0")
            {
                string hrdeptcod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'desig_master' AND COLUMN_NAME = 'dept_code'");
                if (hrdeptcod == "0")
                {
                    hraginaltr = hraginaltr + " alter table desig_master add dept_code nvarchar(100) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='vacancymaster'");
            if (find_tablename != "0")
            {
                string avilstaf = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vacancymaster' AND COLUMN_NAME = 'available_staff'");
                if (avilstaf == "0")
                {
                    hraginaltr = hraginaltr + " alter table vacancymaster add available_staff integer null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='vacancymaster'");
            if (find_tablename != "0")
            {
                string reqstaff = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vacancymaster' AND COLUMN_NAME = 'required_staff'");
                if (reqstaff == "0")
                {
                    hraginaltr = hraginaltr + " alter table vacancymaster add required_staff integer null";
                }
            }
            string orgdept = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cert_staff_list' AND COLUMN_NAME = 'org_dup'");
            if (orgdept == "0")
            {
                hraginaltr = hraginaltr + " alter table cert_staff_list add org_dup nvarchar(50) null";
            }
            string rmarkpr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'venue_det' AND COLUMN_NAME = 'remark_per'");
            if (rmarkpr == "0")
            {
                hraginaltr = hraginaltr + " alter table venue_det add remark_per nvarchar(100) null";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='itslab'");
            if (find_tablename != "0")
            {
                string marper = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'itslab' AND COLUMN_NAME = 'mar_per'");
                if (marper == "0")
                {
                    hraginaltr = hraginaltr + " alter table itslab add mar_per  integer null";
                }
                string taxcode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'itslab' AND COLUMN_NAME = 'tax_code'");
                if (taxcode == "0")
                {
                    hraginaltr = hraginaltr + " alter table itslab add tax_code nvarchar(50) null";
                }
            }
            string taxx = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_pay' AND COLUMN_NAME = 'tax'");
            if (taxx == "0")
            {
                hraginaltr = hraginaltr + " alter table staff_pay add tax nvarchar(100)";
            }
            string martilastat = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_pay' AND COLUMN_NAME = 'marital_stat'");
            if (martilastat == "0")
            {
                hraginaltr = hraginaltr + " alter table staff_pay add marital_stat nvarchar(100)";
            }
            string nodep = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_pay' AND COLUMN_NAME = 'no_dep'");
            if (nodep == "0")
            {
                hraginaltr = hraginaltr + " alter table staff_pay add no_dep integer";
            } find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffTrans'");
            if (find_tablename != "0")
            {
                string saltyp = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stafftrans' AND COLUMN_NAME = 'saltype'");
                if (saltyp == "0")
                {
                    hraginaltr = hraginaltr + " alter table stafftrans add saltype integer null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='pfslabs_master'");
            if (find_tablename != "0")
            {
                string slabfors = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'pfslabs_master' AND COLUMN_NAME = 'slabfor'");
                if (slabfors == "0")
                {
                    hraginaltr = hraginaltr + " alter table pfslabs_master add slabfor nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staff_appl_master'");
            if (find_tablename != "0")
            {
                string guaradres = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'guar_address'");
                if (guaradres == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add guar_address nvarchar(100) null";
                }
                string guarphn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'guar_phone'");
                if (guarphn == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add guar_phone nvarchar(100)";
                }
                string guarname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'guar_name'");
                if (guarname == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add guar_name nvarchar(100) null";
                }
                string intrwcal = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'interviewcall'");
                if (intrwcal == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add interviewcall integer null";
                }
                string pdistrict = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'pdistrict'");
                if (pdistrict == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add pdistrict nvarchar(200)";
                }
                string cdistrict = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'cdistrict'");
                if (pdistrict == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add cdistrict nvarchar(200)";
                }
                string selremarks = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'selremarks'");
                if (selremarks == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add selremarks nvarchar(200)";
                }
                string selperformance = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'selperformance'");
                if (selperformance == "0")
                {
                    hraginaltr = hraginaltr + "  alter table staff_appl_master add selperformance numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='performance'");
            if (find_tablename != "0")
            {
                string performns = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'hrgrademaster' AND COLUMN_NAME = 'performance'");
                if (performns == "0")
                {
                    hraginaltr = hraginaltr + " alter table hrgrademaster add performance nvarchar(100)";
                }
            }
            string oldstf = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_transfer' AND COLUMN_NAME = 'oldsaff_code'");
            if (oldstf == "0")
            {
                hraginaltr = hraginaltr + " alter table staff_transfer add oldsaff_code nvarchar(100)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staff_leave_details'");
            if (find_tablename != "0")
            {
                string aplyapro = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_leave_details' AND COLUMN_NAME = 'apply_approve'");
                if (aplyapro == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_leave_details add apply_approve integer";
                }
            }
            string colgcd = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appraisal_det' AND COLUMN_NAME = 'college_code'");
            if (colgcd == "0")
            {
                hraginaltr = hraginaltr + " alter table staff_appraisal_det add college_code integer";
            }
            string latestr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appraisal_det' AND COLUMN_NAME = 'latestrec'");
            if (latestr == "0")
            {
                hraginaltr = hraginaltr + " alter table staff_appraisal_det add latestrec integer";
            }
            string dataprais = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appraisal_det' AND COLUMN_NAME = 'date_appraisal'");
            if (dataprais == "0")
            {
                hraginaltr = hraginaltr + " alter table staff_appraisal_det add date_appraisal datetime";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='incentives'");
            if (find_tablename != "0")
            {
                string basicsalry = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'incentives' AND COLUMN_NAME = 'bsalary'");
                if (basicsalry == "0")
                {
                    hraginaltr = hraginaltr + " alter table incentives add bsalary integer null";
                }
                string taxdt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'incentives' AND COLUMN_NAME = 'tax_det'");
                if (taxdt == "0")
                {
                    hraginaltr = hraginaltr + " alter table incentives add tax_det nvarchar(100) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='individual_incentives'");
            if (find_tablename != "0")
            {
                string indbasalry = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'individual_incentives' AND COLUMN_NAME = 'bsalary'");
                if (indbasalry == "0")
                {
                    hraginaltr = hraginaltr + " alter table individual_incentives add bsalary integer null";
                }
                string taxdet = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'individual_incentives' AND COLUMN_NAME = 'tax_det'");
                if (taxdet == "0")
                {
                    hraginaltr = hraginaltr + " alter table individual_incentives add tax_det nvarchar(100) null";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='vaccation_leave'");
            if (find_tablename != "0")
            {
                string vacaplyapr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vaccation_leave' AND COLUMN_NAME = 'apply_approve'");
                if (vacaplyapr == "0")
                {
                    hraginaltr = hraginaltr + " alter table vaccation_leave add apply_approve integer";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Staff_Appl_Master'");
            if (find_tablename != "0")
            {
                string guarpin = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'guar_pincode'");
                if (guarpin == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add guar_pincode integer";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='desig_master'");
            if (find_tablename != "0")
            {
                string desigacronym = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'desig_master' AND COLUMN_NAME = 'desig_acronym'");
                if (desigacronym == "0")
                {
                    hraginaltr = hraginaltr + " Alter table desig_master add desig_acronym varchar(6)";
                }
                string designum = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'desig_master' AND COLUMN_NAME = 'desig_Num'");
                if (designum == "0")
                {
                    hraginaltr = hraginaltr + " Alter table desig_master add desig_Num numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Staff_Appl_Master'");
            if (find_tablename != "0")
            {
                string comlpincod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'com_pincode'");
                if (comlpincod == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add com_pincode varchar(10)";
                }
                string commobil = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'com_mobileno'");
                if (commobil == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add com_mobileno varchar(50)";
                }
                string perpincod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'per_pincode'");
                if (perpincod == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add per_pincode varchar(10)";
                }
                string permobil = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'per_mobileno'");
                if (permobil == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add per_mobileno varchar(50)";
                }
                string refname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'refname'");
                if (refname == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add refname varchar(50)";
                }
                string rfad = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'refadd1'");
                if (rfad == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add refadd1 varchar(50)";
                }
                string refad2 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'refadd2'");
                if (refad2 == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add refadd2 varchar(50)";
                }
                string refmob = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'refmobile'");
                if (refmob == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add refmobile varchar(50)";
                }
                string refph = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'refphone'");
                if (refph == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add refphone varchar(50)";
                }
                string refcompny = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'refcompany'");
                if (refcompny == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add refcompany varchar(50)";
                }
                string refdsn = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'refdesign'");
                if (refdsn == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add refdesign varchar(50)";
                }
            }
            string mgflag = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appraisal_det' AND COLUMN_NAME = 'mgmt_flag'");
            if (mgflag == "0")
            {
                hraginaltr = hraginaltr + " alter table staff_appraisal_det add mgmt_flag integer";
            }
            string emid = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'inteviewer' AND COLUMN_NAME = 'email_id'");
            if (emid == "0")
            {
                hraginaltr = hraginaltr + " alter table inteviewer add email_id nvarchar(100)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Staff_Attnd'");
            if (find_tablename != "0")
            {
                string permiscount = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_attnd' AND COLUMN_NAME = 'permissioncount'");
                if (permiscount == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_attnd add permissioncount numeric";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffmaster'");
            if (find_tablename != "0")
            {
                string fingerimg = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'fingerimage'");
                if (fingerimg == "0")
                {
                    hraginaltr = hraginaltr + " alter table staffmaster add fingerimage image";
                }
                string fingrimg1 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'fingerimage1'");
                if (fingrimg1 == "0")
                {
                    hraginaltr = hraginaltr + " alter table staffmaster add fingerimage1 image";
                }
                string Adharcardno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'Adharcardno'");
                if (Adharcardno == "0")
                {
                    hraginaltr = hraginaltr + " alter table staffmaster add Adharcardno nvarchar(100)";
                }
                string RelivedReason = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'RelivedReason'");
                if (RelivedReason == "0")
                {
                    hraginaltr = hraginaltr + " Alter table staffmaster add RelivedReason nvarchar(200)";
                }
                string Smartcard_serial_no = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'Smartcard_serial_no'");
                if (Smartcard_serial_no == "0")
                {
                    hraginaltr = hraginaltr + " alter table staffmaster add Smartcard_serial_no nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='In_out_Time'");
            if (find_tablename != "0")
            {
                string nofper = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'in_out_time' AND COLUMN_NAME = 'noofper'");
                if (nofper == "0")
                {
                    hraginaltr = hraginaltr + " alter table in_out_time add noofper int";
                }
            }
            string atten = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'bio_attendance' AND COLUMN_NAME = 'att'");
            if (atten == "0")
            {
                hraginaltr = hraginaltr + " alter table bio_attendance add att nvarchar(100)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='In_out_Time'");
            if (find_tablename != "0")
            {
                string extengrace = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'in_out_time' AND COLUMN_NAME = 'extend_gracetime'");
                if (extengrace == "0")
                {
                    hraginaltr = hraginaltr + " alter table in_out_time add extend_gracetime datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Staff_Appl_Master'");
            if (find_tablename != "0")
            {
                string appid = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'appl_id'");
                if (appid == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add appl_id numeric(18,0) identity(1,1) NOT NULL";
                }
                string nameac = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'nameacr'");
                if (nameac == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add nameacr varchar(50)";
                }
                string Adharcardno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'Adharcardno'");
                if (Adharcardno == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add Adharcardno nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffTrans'");
            if (find_tablename != "0")
            {
                string pareavl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stafftrans' AND COLUMN_NAME = 'pareaval'");
                if (pareavl == "0")
                {
                    hraginaltr = hraginaltr + " alter table stafftrans add pareaval int";
                }
            } find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='incentives'");
            if (find_tablename != "0")
            {
                string pfdede = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'incentives' AND COLUMN_NAME = 'pfded'");
                if (pfdede == "0")
                {
                    hraginaltr = hraginaltr + " alter table incentives add pfded  int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='hrdept_master'");
            if (find_tablename != "0")
            {
                string priorty = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'hrdept_master' AND COLUMN_NAME = 'priority'");
                if (priorty == "0")
                {
                    hraginaltr = hraginaltr + " alter table hrdept_master add priority integer";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='individual_incentives'");
            if (find_tablename != "0")
            {
                string comtax = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'individual_incentives' AND COLUMN_NAME = 'com_tax'");
                if (comtax == "0")
                {
                    hraginaltr = hraginaltr + " alter table individual_incentives add com_tax int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffmaster'");
            if (find_tablename != "0")
            {
                string licno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'lic_no'");
                if (licno == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table staffmaster Add lic_no nvarchar(25)";
                }
                string stflonno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'loan_no'");
                if (stflonno == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table staffmaster Add loan_no nvarchar(25)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staff_leave_details'");
            if (find_tablename != "0")
            {
                string yrs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_leave_details' AND COLUMN_NAME = 'yr'");
                if (yrs == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_leave_details add yr int";
                }
                string mont = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_leave_details' AND COLUMN_NAME = 'mon'");
                if (mont == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_leave_details add mon int";
                }
                string halfs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_leave_details' AND COLUMN_NAME = 'half'");
                if (halfs == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_leave_details add half int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='carryover'");
            if (find_tablename != "0")
            {
                string remin = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'carryover' AND COLUMN_NAME = 'remain'");
                if (remin == "0")
                {
                    hraginaltr = hraginaltr + " alter table carryover add remain float ";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='incentives'");
            if (find_tablename != "0")
            {
                string allowvl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'incentives' AND COLUMN_NAME = 'allowval'");
                if (allowvl == "0")
                {
                    hraginaltr = hraginaltr + " alter table incentives add allowval nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='monthlypay'");
            if (find_tablename != "0")
            {
                string pret = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'monthlypay' AND COLUMN_NAME = 'preat'");
                if (pret == "0")
                {
                    hraginaltr = hraginaltr + " alter table monthlypay add  preat nvarchar(100)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Staff_Appl_Master'");
            if (find_tablename != "0")
            {
                string designame = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'desig_name'");
                if (designame == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add desig_name nvarchar(50)";
                }
                string expstats = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'exp_status'");
                if (expstats == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add exp_status nvarchar(50)";
                }
                string midname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'mid_name'");
                if (midname == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add mid_name nvarchar(50)";
                }
                string totyrs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'totyrs'");
                if (totyrs == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add totyrs nvarchar(50)";
                }
                string isphys = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'isphy'");
                if (isphys == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add isphy nvarchar(3)";
                }
                string refrdname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'refer_name'");
                if (refrdname == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add refer_name nvarchar(50)";
                }
                string expjoindate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'exp_joindate'");
                if (expjoindate == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add exp_joindate datetime NULL";
                }
                string minority = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'minority'");
                if (minority == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add minority nvarchar(5)";
                }
                string noofguid = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'noof_guide_stud'");
                if (noofguid == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add noof_guide_stud nvarchar(10)";
                }
                string aictecomm = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'aicte_comm'");
                if (aictecomm == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add aicte_comm nvarchar(5)";
                }
                string activnm = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'aicte_name'");
                if (activnm == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add aicte_name nvarchar(50)";
                }
                string aictgrant = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'aicte_grants'");
                if (aictgrant == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add aicte_grants nvarchar(5)";
                }
                string aicte_name = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'aicte_name1'");
                if (aicte_name == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add aicte_name1 nvarchar(50)";
                }
                string familyinfo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'family_info'");
                if (familyinfo == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add family_info nvarchar(500)";
                }
                string guardinfo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'guard_info'");
                if (guardinfo == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add guard_info nvarchar(500)";
                }
                string refereeinfo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'referee_info'");
                if (refereeinfo == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add referee_info nvarchar(500)";
                }
                string experienceinfo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'experience_info'");
                if (experienceinfo == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add experience_info nvarchar(500)";
                }
                string pubinfo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'pub_info'");
                if (pubinfo == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add pub_info nvarchar(500)";
                }
                string projectinfo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'project_info'");
                if (projectinfo == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add project_info nvarchar(500)";
                }
                string researchinfo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'research_info'");
                if (researchinfo == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add research_info nvarchar(500)";
                }
                string comadres = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'comm_address1'");
                if (comadres == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add comm_address1 nvarchar(250)";
                }
                string ccitys = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'ccity'");
                if (ccitys == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add ccity nvarchar(50)";
                }
                string cstates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'cstate'");
                if (cstates == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add cstate nvarchar(50)";
                }
                string comfx = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'com_fax'");
                if (comfx == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add com_fax varchar(50)";
                }
                string peradrs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'per_address1'");
                if (peradrs == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add per_address1 nvarchar(250)";
                }
                string pcitys = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'pcity'");
                if (pcitys == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add pcity nvarchar(50)";
                }
                string pstates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'pstate'");
                if (pstates == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add pstate nvarchar(50)";
                }
                string perfax = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'per_fax'");
                if (perfax == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add per_fax varchar(50)";
                }
                string appacr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'app_acr'");
                if (appacr == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add app_acr nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffmaster'");
            if (find_tablename != "0")
            {
                string appointeddate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'appointed_date'");
                if (appointeddate == "0")
                {
                    hraginaltr = hraginaltr + " alter table staffmaster add appointed_date datetime";
                }
                string s_midname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'mid_name'");
                if (s_midname == "0")
                {
                    hraginaltr = hraginaltr + " alter table staffmaster add mid_name nvarchar(100)";
                }
                string surname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'sur_name'");
                if (surname == "0")
                {
                    hraginaltr = hraginaltr + " alter table staffmaster add sur_name nvarchar(100)";
                }
                string bankname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'bank_name'");
                if (bankname == "0")
                {
                    hraginaltr = hraginaltr + " alter table staffmaster add bank_name nvarchar(200)";
                }
                string branchname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'branch_name'");
                if (branchname == "0")
                {
                    hraginaltr = hraginaltr + " alter table staffmaster add branch_name nvarchar(200)";
                }
                string ifsccode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'ifsc_code'");
                if (ifsccode == "0")
                {
                    hraginaltr = hraginaltr + " alter table staffmaster add ifsc_code nvarchar(200)";
                }
            }
            string educerts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cert_staff_list' AND COLUMN_NAME = 'educert'");
            if (educerts == "0")
            {
                hraginaltr = hraginaltr + " alter table cert_staff_list add educert nvarchar(500)";
            }
            string expcerts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cert_staff_list' AND COLUMN_NAME = 'expcert'");
            if (expcerts == "0")
            {
                hraginaltr = hraginaltr + " alter table cert_staff_list add expcert nvarchar(500)";
            }
            string appquests = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appraisal_det' AND COLUMN_NAME = 'appquest'");
            if (appquests == "0")
            {
                hraginaltr = hraginaltr + " alter table staff_appraisal_det add appquest nvarchar(4000)";
            }
            string AppraisalStatus = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appraisal_det' AND COLUMN_NAME = 'Appraisal_Status'");
            if (AppraisalStatus == "0")
            {
                hraginaltr = hraginaltr + "alter table staff_appraisal_det add Appraisal_Status bit";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Staff_Appl_Master'");
            if (find_tablename != "0")
            {
                string stftitl = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'title'");
                if (stftitl == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add title nvarchar(10)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffmaster'");
            if (find_tablename != "0")
            {
                string ESINo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffMaster' AND COLUMN_NAME = 'ESI_No'");
                if (ESINo == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffMaster Add ESI_No nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Staff_Appl_Master'");
            if (find_tablename != "0")
            {
                string QualOld = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'Qual_Old'");
                if (QualOld == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master add Qual_Old nvarchar(1500)";
                }
                string qualifications = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'qualification'");
                if (qualifications == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_appl_master alter column qualification nvarchar(1500)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='MonthlyPay'");
            if (find_tablename != "0")
            {
                string payband = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'monthlypay' AND COLUMN_NAME = 'pay_band'");
                if (payband == "0")
                {
                    hraginaltr = hraginaltr + " alter table monthlypay add pay_band decimal(12,2)";
                }
                string gradepay = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'monthlypay' AND COLUMN_NAME = 'grade_pay'");
                if (gradepay == "0")
                {
                    hraginaltr = hraginaltr + " alter table monthlypay add grade_pay decimal(12,2)";
                }
                string CurLop = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'monthlypay' AND COLUMN_NAME = 'Cur_Lop'");
                if (CurLop == "0")
                {
                    hraginaltr = hraginaltr + " alter table monthlypay add Cur_Lop decimal(12,2)";
                }
                string PreLop = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'monthlypay' AND COLUMN_NAME = 'Pre_Lop'");
                if (PreLop == "0")
                {
                    hraginaltr = hraginaltr + " alter table monthlypay add Pre_Lop decimal(12,2)";
                }
                string ActualBasic = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'monthlypay' AND COLUMN_NAME = 'Actual_Basic'");
                if (ActualBasic == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table monthlypay Add Actual_Basic Decimal(12,2)";
                }
                string DAAmts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'monthlypay' AND COLUMN_NAME = 'DAAmt'");
                if (DAAmts == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table monthlypay Add DAAmt Decimal(12,2)";
                }
                string DPAmts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'monthlypay' AND COLUMN_NAME = 'DPAmt'");
                if (DPAmts == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table monthlypay Add DPAmt Decimal(12,2)";
                }
                string TotLOP = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'monthlypay' AND COLUMN_NAME = 'Tot_LOP'");
                if (TotLOP == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table monthlypay Add Tot_LOP Decimal(12,2)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='pfslabs_master'");
            if (find_tablename != "0")
            {
                string slabvalues = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'pfslabs_master' AND COLUMN_NAME = 'slabvalue'");
                if (slabvalues == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table pfslabs_master alter column slabvalue float";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='MonthlyPay'");
            if (find_tablename != "0")
            {
                string ESISalary = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'monthlypay' AND COLUMN_NAME = 'ESI_Salary'");
                if (ESISalary == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table monthlypay Add ESI_Salary Decimal(12,2)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='pfslabs'");
            if (find_tablename != "0")
            {
                string ESIEmpSlabType = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'pfslabs' AND COLUMN_NAME = 'ESI_EmpSlabType'");
                if (ESIEmpSlabType == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table pfslabs Add ESI_EmpSlabType nvarchar(15)";
                }
                string ESIEmpSlabValue = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'pfslabs' AND COLUMN_NAME = 'ESI_EmpSlabValue'");
                if (ESIEmpSlabValue == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table pfslabs Add ESI_EmpSlabValue nvarchar(15)";
                }
                string ESIEmpSlabValues = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'pfslabs_master' AND COLUMN_NAME = 'ESI_EmpSlabValue'");
                if (ESIEmpSlabValue == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table pfslabs_master Add ESI_EmpSlabValue nvarchar(15)";
                }
                string SlabFors = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'pfslabs' AND COLUMN_NAME = 'SlabFor'");
                if (SlabFors == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table pfslabs Add SlabFor nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='MonthlyPay'");
            if (find_tablename != "0")
            {
                string PFSalary = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'PF_Salary'");
                if (PFSalary == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table MonthlyPay add PF_Salary Decimal(12,2)";
                }
                string GPay = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'G_Pay'");
                if (GPay == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table MonthlyPay add G_Pay decimal(12,2)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='incentives_master'");
            if (find_tablename != "0")
            {
                string SplAllowCounts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'incentives_master' AND COLUMN_NAME = 'SplAllowCount'");
                if (SplAllowCounts == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table incentives_master Add SplAllowCount int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='MonthlyPay'");
            if (find_tablename != "0")
            {
                string NetAddActs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Monthlypay' AND COLUMN_NAME = 'NetAddAct'");
                if (NetAddActs == "0")
                {
                    hraginaltr = hraginaltr + " alter table Monthlypay add NetAddAct Decimal(12,2)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffTrans'");
            if (find_tablename != "0")
            {
                string Shifts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stafftrans' AND COLUMN_NAME = 'Shift'");
                if (Shifts == "0")
                {
                    hraginaltr = hraginaltr + " alter table stafftrans add Shift nvarchar(30)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffmaster'");
            if (find_tablename != "0")
            {
                string VehIDs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffMaster' AND COLUMN_NAME = 'VehID'");
                if (VehIDs == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffMaster Add VehID nvarchar(20)";
                }
                string BusRouteID = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffMaster' AND COLUMN_NAME = 'Bus_RouteID'");
                if (BusRouteID == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffMaster Add Bus_RouteID nvarchar(30)";
                }
                string Boardings = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffMaster' AND COLUMN_NAME = 'Boarding'");
                if (Boardings == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffMaster Add Boarding nvarchar(200)";
                }
            }
            string PayStart = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrYears' AND COLUMN_NAME = 'Pay_Start'");
            if (PayStart == "0")
            {
                hraginaltr = hraginaltr + " Alter Table HrYears Add Pay_Start Int";
            }
            string PayEnd = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrYears' AND COLUMN_NAME = 'Pay_End'");
            if (PayEnd == "0")
            {
                hraginaltr = hraginaltr + " Alter Table HrYears Add Pay_End Int";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='yearlyupdates'");
            if (find_tablename != "0")
            {
                string yPayStart = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'yearlyupdates' AND COLUMN_NAME = 'Pay_Start'");
                if (yPayStart == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table yearlyupdates Add Pay_Start Int";
                }
                string yrPay_End = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'yearlyupdates' AND COLUMN_NAME = 'Pay_End'");
                if (yrPay_End == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table yearlyupdates Add Pay_End Int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='MonthlyPay'");
            if (find_tablename != "0")
            {
                string ESIs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'ESI'");
                if (ESIs == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table MonthlyPay Add ESI Decimal(12,2)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staff_leave_details'");
            if (find_tablename != "0")
            {
                string AppDays = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_leave_details' AND COLUMN_NAME = 'App_Days'");
                if (AppDays == "0")
                {
                    hraginaltr = hraginaltr + " Alter TAble staff_leave_details Add App_Days Decimal(12,2)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffmaster'");
            if (find_tablename != "0")
            {
                string IsPF = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffMaster' AND COLUMN_NAME = 'Is_PF'");
                if (IsPF == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffMaster Add Is_PF int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='incentives'");
            if (find_tablename != "0")
            {
                string allowvals = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'incentives' AND COLUMN_NAME = 'allowval'");
                if (allowvals == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table incentives Alter Column allowval nvarchar(500)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Staff_Appl_Master'");
            if (find_tablename != "0")
            {
                string SeminarAttnd = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Staff_Appl_master' AND COLUMN_NAME = 'Seminar_Attnd'");
                if (SeminarAttnd == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Staff_Appl_master Add Seminar_Attnd nvarchar(500)";
                }
                string SeminarOrg = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Staff_Appl_master' AND COLUMN_NAME = 'Seminar_Org'");
                if (SeminarOrg == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Staff_Appl_master Add Seminar_Org nvarchar(500)";
                }
                string stfAward = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Staff_Appl_master' AND COLUMN_NAME = 'Award'");
                if (stfAward == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Staff_Appl_master Add Award nvarchar(500)";
                }
                string ProfMembership = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Staff_Appl_master' AND COLUMN_NAME = 'Prof_Membership'");
                if (ProfMembership == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Staff_Appl_master Add Prof_Membership nvarchar(500)";
                }
                string AdmMembership = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Staff_Appl_master' AND COLUMN_NAME = 'Adm_Membership'");
                if (AdmMembership == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Staff_Appl_master Add Adm_Membership nvarchar(500)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffmaster'");
            if (find_tablename != "0")
            {
                string Discontinues = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffMaster' AND COLUMN_NAME = 'Discontinue'");
                if (Discontinues == "0")
                {
                    hraginaltr = hraginaltr + " alter Table StaffMaster Add Discontinue Bit";
                }
                string DiscontinueDate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffMaster' AND COLUMN_NAME = 'Discontinue_Date'");
                if (DiscontinueDate == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffMaster Add Discontinue_Date Datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Staff_Appl_Master'");
            if (find_tablename != "0")
            {
                string JournalPublication = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Staff_Appl_Master' AND COLUMN_NAME = 'Journal_Publication'");
                if (JournalPublication == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Staff_Appl_Master Add Journal_Publication nvarchar(500)";
                }
                string BooksPublished = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Staff_Appl_Master' AND COLUMN_NAME = 'Books_Published'");
                if (BooksPublished == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Staff_Appl_Master Add Books_Published nvarchar(500)";
                }
                string EditorDetails = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Staff_Appl_Master' AND COLUMN_NAME = 'Editor_Details'");
                if (EditorDetails == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Staff_Appl_Master Add Editor_Details nvarchar(500)";
                }
                string ProjectGrants = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Staff_Appl_Master' AND COLUMN_NAME = 'Project_Grants'");
                if (ProjectGrants == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Staff_Appl_Master Add Project_Grants nvarchar(500)";
                }
                string PatentReceived = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Staff_Appl_Master' AND COLUMN_NAME = 'Patent_Received'");
                if (PatentReceived == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Staff_Appl_Master Add Patent_Received nvarchar(500)";
                }
                string Guide_Ships = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Staff_Appl_Master' AND COLUMN_NAME = 'Guide_Ship'");
                if (Guide_Ships == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Staff_Appl_Master Add Guide_Ship nvarchar(500)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffCategorizer'");
            if (find_tablename != "0")
            {
                string DispReports = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffCategorizer' AND COLUMN_NAME = 'DispReports'");
                if (DispReports == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffCategorizer Add DispReports Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='In_out_Time'");
            if (find_tablename != "0")
            {
                string OtherPer = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'in_out_time' AND COLUMN_NAME = 'Other_Per'");
                if (OtherPer == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table in_out_time Add Other_Per Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Staff_Attnd'");
            if (find_tablename != "0")
            {
                string OtherPerCount = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Staff_Attnd' AND COLUMN_NAME = 'OtherPer_Count'");
                if (OtherPerCount == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Staff_Attnd Add OtherPer_Count Int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='in_out_time'");
            if (find_tablename != "0")
            {
                string EntryTypes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'in_out_time' AND COLUMN_NAME = 'EntryType'");
                if (EntryTypes == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table in_out_time ADD EntryType Bit";
                }
                string StfTypes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'in_out_time' AND COLUMN_NAME = 'StfType'");
                if (StfTypes == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table in_out_time ADD StfType nvarchar(50)";
                }
                string DayType = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'in_out_time' AND COLUMN_NAME = 'DayType'");
                if (DayType == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table in_out_time ADD DayType Int";
                }
                string BellDate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'in_out_time' AND COLUMN_NAME = 'Bell_Date'");
                if (BellDate == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table in_out_time ADD Bell_Date Datetime";
                }
                string BellDay = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'in_out_time' AND COLUMN_NAME = 'Bell_Day'");
                if (BellDay == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table in_out_time ADD Bell_Day nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='holidayStaff'");
            if (find_tablename != "0")
            {
                string hldStfTypes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'holidayStaff' AND COLUMN_NAME = 'StfType'");
                if (hldStfTypes == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table holidayStaff Add StfType nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='In_out_Time'");
            if (find_tablename != "0")
            {
                string applyLeave = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'In_out_Time' AND COLUMN_NAME = 'ApplyLeave'");
                if (applyLeave == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table In_out_Time ADD ApplyLeave nvarchar(20)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffmaster'");
            if (find_tablename != "0")
            {
                string SeatNo = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffMaster' AND COLUMN_NAME = 'Seat_No'");
                if (SeatNo == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffMaster Add Seat_No nvarchar(3)";
                }
            }
            string PayMonth = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'hryears' AND COLUMN_NAME = 'Pay_Month'");
            if (PayMonth == "0")
            {
                hraginaltr = hraginaltr + " Alter Table hryears add Pay_Month bit";
            }
            string Locations = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Venue_Det' AND COLUMN_NAME = 'Location'");
            if (Locations == "0")
            {
                hraginaltr = hraginaltr + " Alter Table Venue_Det Add Location nvarchar(1000)";
            }
            string VenueName = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Venue_Det' AND COLUMN_NAME = 'Venue_Name'");
            if (VenueName == "0")
            {
                hraginaltr = hraginaltr + " Alter Table Venue_Det Alter Column Venue_Name nvarchar(500)";
            }
            string certCollegeCode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Cert_Staff_List' AND COLUMN_NAME = 'College_Code'");
            if (certCollegeCode == "0")
            {
                hraginaltr = hraginaltr + " Alter Table Cert_Staff_List Add College_Code numeric";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staff_leave_details'");
            if (find_tablename != "0")
            {
                string HalfDays = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_leave_details' AND COLUMN_NAME = 'Half_Days'");
                if (HalfDays == "0")
                {
                    hraginaltr = hraginaltr + " alter table staff_leave_details add  Half_Days tinyint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffPhoto'");
            if (find_tablename != "0")
            {
                string StaffSigns = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffPhoto' AND COLUMN_NAME = 'StaffSign'");
                if (StaffSigns == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffPhoto Add StaffSign image";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='In_out_Time'");
            if (find_tablename != "0")
            {
                string MorningOutTimes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'In_Out_Time' AND COLUMN_NAME = 'MorningOutTime'");
                if (MorningOutTimes == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table In_Out_Time Add MorningOutTime Datetime";
                }
            }
            string hrCollegeCode = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrPayMonths' AND COLUMN_NAME = 'College_Code'");
            if (hrCollegeCode == "0")
            {
                hraginaltr = hraginaltr + " alter Table HrPayMonths Add College_Code numeric";
            }
            string MarkTime = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Bio_Attendance' AND COLUMN_NAME = 'Mark_Time'");
            if (MarkTime == "0")
            {
                hraginaltr = hraginaltr + " Alter Table Bio_Attendance Add Mark_Time nvarchar(20)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='hrdept_master'");
            if (find_tablename != "0")
            {
                string PhoneNos = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrDept_Master' AND COLUMN_NAME = 'PhoneNo'");
                if (PhoneNos == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table HrDept_Master Add PhoneNo nvarchar(100)";
                }
                string DeptName = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'hrdept_master' AND COLUMN_NAME = 'Dept_Name'");
                if (DeptName == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table hrdept_master Alter Column Dept_Name nvarchar(200)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffmaster'");
            if (find_tablename != "0")
            {
                string DeviceIDs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffMaster' AND COLUMN_NAME = 'DeviceID'");
                if (DeviceIDs == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffMaster Add DeviceID nvarchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Staff_Appl_Master'");
            if (find_tablename != "0")
            {
                string LicRenewDate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Staff_Appl_Master' AND COLUMN_NAME = 'Lic_RenewDate'");
                if (LicRenewDate == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Staff_Appl_Master Add Lic_RenewDate Datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffPhoto'");
            if (find_tablename != "0")
            {
                string LicFronts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffPhoto' AND COLUMN_NAME = 'LicFront'");
                if (LicFronts == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffPhoto Add LicFront image";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffmaster'");
            if (find_tablename != "0")
            {
                string accesspinno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'access_pinno'");
                if (accesspinno == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table staffmaster Add access_pinno nvarchar(100)";
                }
            }
            string SMSAttInds = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HRSettings' AND COLUMN_NAME = 'SMSAttInd'");
            if (SMSAttInds == "0")
            {
                hraginaltr = hraginaltr + " Alter Table HRSettings Add SMSAttInd Bit";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffTrans'");
            if (find_tablename != "0")
            {
                string MPFAmounts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffTrans' AND COLUMN_NAME = 'MPFAmount'");
                if (MPFAmounts == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffTrans Add MPFAmount Decimal(12,2)";
                }
                string MPFPers = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffTrans' AND COLUMN_NAME = 'MPFPer'");
                if (MPFPers == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffTrans Add MPFPer Decimal(12,2)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='individual_incentives'");
            if (find_tablename != "0")
            {
                string indMPFAmounts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Individual_Incentives' AND COLUMN_NAME = 'MPFAmount'");
                if (indMPFAmounts == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Individual_Incentives Add MPFAmount Decimal(12,2)";
                }
                string indMPFPers = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Individual_Incentives' AND COLUMN_NAME = 'MPFPer'");
                if (indMPFPers == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Individual_Incentives Add MPFPer Decimal(12,2)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='sssss'");
            if (find_tablename != "0")
            {
                string DAWithLOPs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'DAWithLOP'");
                if (DAWithLOPs == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table MonthlyPay ADD DAWithLOP Decimal(12,2)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffTrans'");
            if (find_tablename != "0")
            {
                string IsMPFAmts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffTrans' AND COLUMN_NAME = 'IsMPFAmt'");
                if (IsMPFAmts == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffTrans Add IsMPFAmt Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='individual_incentives'");
            if (find_tablename != "0")
            {
                string indIsMPFAmts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Individual_Incentives' AND COLUMN_NAME = 'IsMPFAmt'");
                if (indIsMPFAmts == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Individual_Incentives Add IsMPFAmt Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffmaster'");
            if (find_tablename != "0")
            {
                string IsESIStaffs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffMaster' AND COLUMN_NAME = 'IsESIStaff'");
                if (IsESIStaffs == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffMaster Add IsESIStaff tinyint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffTrans'");
            if (find_tablename != "0")
            {
                string remarkss = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stafftrans' AND COLUMN_NAME = 'remarks'");
                if (remarkss == "0")
                {
                    hraginaltr = hraginaltr + " alter table stafftrans alter column remarks nvarchar(1000)";
                }
            }
            string DeviceTypes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'DeviceInfo' AND COLUMN_NAME = 'DeviceType'");
            if (DeviceTypes == "0")
            {
                hraginaltr = hraginaltr + " Alter Table DeviceInfo Add DeviceType tinyint";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='MonthlyPay'");
            if (find_tablename != "0")
            {
                string stftypes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'stftype'");
                if (stftypes == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table MonthlyPay Alter Column stftype nvarchar(100)";
                }
            }
            string IsStaffs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrSettings' AND COLUMN_NAME = 'IsStaff'");
            if (IsStaffs == "0")
            {
                hraginaltr = hraginaltr + " Alter Table HrSettings Add IsStaff tinyint";
            }
            string SendTimes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrSettings' AND COLUMN_NAME = 'SendTime'");
            if (SendTimes == "0")
            {
                hraginaltr = hraginaltr + " Alter Table HrSettings Add SendTime nvarchar(30)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffmaster'");
            if (find_tablename != "0")
            {
                string PrintPrioritys = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffMaster' AND COLUMN_NAME = 'PrintPriority'");
                if (PrintPrioritys == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffMaster ADD PrintPriority integer";
                }
            }
            string MobileNoss = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrSettings' AND COLUMN_NAME = 'MobileNos'");
            if (MobileNoss == "0")
            {
                hraginaltr = hraginaltr + " Alter Table HrSettings Alter Column MobileNos nvarchar(300)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffTrans'");
            if (find_tablename != "0")
            {
                string IsConsolids = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffTrans' AND COLUMN_NAME = 'IsConsolid'");
                if (IsConsolids == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffTrans Add IsConsolid Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='individual_incentives'");
            if (find_tablename != "0")
            {
                string indIsConsolids = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'individual_incentives' AND COLUMN_NAME = 'IsConsolid'");
                if (indIsConsolids == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table individual_incentives Add IsConsolid Bit";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffmaster'");
            if (find_tablename != "0")
            {
                string Streams = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffMaster' AND COLUMN_NAME = 'Stream'");
                if (Streams == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffMaster Add Stream nvarchar(30)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='hrdept_master'");
            if (find_tablename != "0")
            {
                string Priority1s = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'hrdept_master' AND COLUMN_NAME = 'Priority1'");
                if (Priority1s == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table hrdept_master add Priority1 int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='desig_master'");
            if (find_tablename != "0")
            {
                string deptcodes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'desig_master' AND COLUMN_NAME = 'dept_code'");
                if (deptcodes == "0")
                {
                    hraginaltr = hraginaltr + " alter table desig_master alter column dept_code nvarchar(200)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffTrans'");
            if (find_tablename != "0")
            {
                string DesigCode_From = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stafftrans' AND COLUMN_NAME = 'Desig_Code_From'");
                if (DesigCode_From == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Stafftrans Add Desig_Code_From nvarchar(50)";
                }
                string BasicIncs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stafftrans' AND COLUMN_NAME = 'BasicInc'");
                if (BasicIncs == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Stafftrans Add BasicInc numeric";
                }
                string AllowIncDets = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stafftrans' AND COLUMN_NAME = 'AllowIncDet'");
                if (AllowIncDets == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table Stafftrans Add AllowIncDet nvarchar(200)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='In_Out_Time'");
            if (find_tablename != "0")
            {
                string IsUnRegLeaves = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'In_Out_Time' AND COLUMN_NAME = 'IsUnRegLeave'");
                if (IsUnRegLeaves == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table In_Out_Time ADD IsUnRegLeave Bit";
                }
                string UnRegLeaves = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'In_Out_Time' AND COLUMN_NAME = 'UnRegLeave'");
                if (UnRegLeaves == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table In_Out_Time ADD UnRegLeave nvarchar(20)";
                }
                string IsCompWorks = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'In_Out_Time' AND COLUMN_NAME = 'IsCompWork'");
                if (IsCompWorks == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table In_Out_Time ADD IsCompWork Bit";
                }
                string CompWorkTypes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'In_Out_Time' AND COLUMN_NAME = 'CompWorkType'");
                if (CompWorkTypes == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table In_Out_Time ADD CompWorkType numeric";
                }
                string CompWorkDates = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'In_Out_Time' AND COLUMN_NAME = 'CompWorkDate'");
                if (CompWorkDates == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table In_Out_Time ADD CompWorkDate Datetime";
                }
                string CompWorkDays = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'In_Out_Time' AND COLUMN_NAME = 'CompWorkDay'");
                if (CompWorkDays == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table In_Out_Time ADD CompWorkDay nvarchar(15)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffTrans'");
            if (find_tablename != "0")
            {
                string IsManualLOPs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffTrans' AND COLUMN_NAME = 'IsManualLOP'");
                if (IsManualLOPs == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffTrans Add IsManualLOP Bit";
                }
                string IsDailyWagess = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffTrans' AND COLUMN_NAME = 'IsDailyWages'");
                if (IsDailyWagess == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffTrans Add IsDailyWages Bit";
                }
            }
            string FirstWorkDays = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffLOP_Details' AND COLUMN_NAME = 'First_WorkDays'");
            if (FirstWorkDays == "0")
            {
                hraginaltr = hraginaltr + " Alter Table StaffLOP_Details ADD First_WorkDays Decimal(12,2)";
            }
            string FirstPresDays = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffLOP_Details' AND COLUMN_NAME = 'First_PresDays'");
            if (FirstPresDays == "0")
            {
                hraginaltr = hraginaltr + " Alter Table StaffLOP_Details ADD First_PresDays Decimal(12,2)";
            }
            string SecondWorkDays = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffLOP_Details' AND COLUMN_NAME = 'Second_WorkDays'");
            if (SecondWorkDays == "0")
            {
                hraginaltr = hraginaltr + " Alter Table StaffLOP_Details ADD Second_WorkDays Decimal(12,2)";
            }
            string SecondPresDays = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffLOP_Details' AND COLUMN_NAME = 'Second_PresDays'");
            if (SecondPresDays == "0")
            {
                hraginaltr = hraginaltr + " Alter Table StaffLOP_Details ADD Second_PresDays Decimal(12,2)";
            }
            string PayMonths = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffLOP_Details' AND COLUMN_NAME = 'PayMonth'");
            if (PayMonths == "0")
            {
                hraginaltr = hraginaltr + " Alter Table StaffLOP_Details ADD PayMonth int";
            }
            string PayYears = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffLOP_Details' AND COLUMN_NAME = 'PayYear'");
            if (PayYears == "0")
            {
                hraginaltr = hraginaltr + " Alter Table StaffLOP_Details ADD PayYear int";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='MonthlyPay'");
            if (find_tablename != "0")
            {
                string BPArrs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'BPArr'");
                if (BPArrs == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table MonthlyPay Add BPArr Decimal(12,2)";
                }
                string BPArrWithLOPs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'BPArrWithLOP'");
                if (BPArrWithLOPs == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table MonthlyPay Add BPArrWithLOP Decimal(12,2)";
                }
                string GPArrs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'GPArr'");
                if (GPArrs == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table MonthlyPay Add GPArr Decimal(12,2)";
                }
                string GPArrWithLOPs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'GPArrWithLOP'");
                if (GPArrWithLOPs == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table MonthlyPay Add GPArrWithLOP Decimal(12,2)";
                }
                string DAArrs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'DAArr'");
                if (DAArrs == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table MonthlyPay Add DAArr Decimal(12,2)";
                }
                string DAArrWithLOPs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'DAArrWithLOP'");
                if (DAArrWithLOPs == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table MonthlyPay Add DAArrWithLOP Decimal(12,2)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffTrans'");
            if (find_tablename != "0")
            {
                string BankAccTypes = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffTrans' AND COLUMN_NAME = 'BankAccType'");
                if (BankAccTypes == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table StaffTrans Add BankAccType tinyint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='MonthlyPay'");
            if (find_tablename != "0")
            {
                string SAAmts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'SAAmt'");
                if (SAAmts == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table MonthlyPay Add SAAmt Decimal(12,2)";
                }
                string SAAmtWithLOPs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'SAAmtWithLOP'");
                if (SAAmtWithLOPs == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table MonthlyPay Add SAAmtWithLOP Decimal(12,2)";
                }
                string SAArrs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'SAArr'");
                if (SAArrs == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table MonthlyPay Add SAArr Decimal(12,2)";
                }
                string SAArrWithLOPs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'SAArrWithLOP'");
                if (SAArrWithLOPs == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table MonthlyPay Add SAArrWithLOP Decimal(12,2)";
                }
            }
            string FPFMaxAmts = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hr_PaySettings' AND COLUMN_NAME = 'FPFMaxAmt'");
            if (FPFMaxAmts == "0")
            {
                hraginaltr = hraginaltr + " Alter Table Hr_PaySettings Add FPFMaxAmt Decimal(12,2)";
            }
            string PerLOPDets = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hr_PaySettings' AND COLUMN_NAME = 'PerLOPDet'");
            if (PerLOPDets == "0")
            {
                hraginaltr = hraginaltr + " Alter Table Hr_PaySettings Add PerLOPDet nvarchar(100)";
            }
            string IsHourWise = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hr_PaySettings' AND COLUMN_NAME = 'IsHourWise'");
            if (IsHourWise == "0")
            {
                hraginaltr = hraginaltr + " Alter Table Hr_PaySettings Add IsHourWise bit";
            }
            string Category_code = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hr_PaySettings' AND COLUMN_NAME = 'Category_code'");
            if (Category_code == "0")
            {
                hraginaltr = hraginaltr + " Alter Table Hr_PaySettings Add Category_code nvarchar(250)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='MonthlyPay'");
            if (find_tablename != "0")
            {
                string mon_PayMonths = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'PayMonth'");
                if (mon_PayMonths == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table MonthlyPay Add PayMonth int";
                }
                string monPayYears = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'PayYear'");
                if (monPayYears == "0")
                {
                    hraginaltr = hraginaltr + " Alter Table MonthlyPay Add PayYear int";
                }
            }
            string IsMulMaxPer = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hr_PaySettings' AND COLUMN_NAME = 'IsMulMaxPer'");
            if (IsMulMaxPer == "0")
            {
                hraginaltr = hraginaltr + " Alter Table Hr_PaySettings add IsMulMaxPer bit";
            }
            string ShortName = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Department' AND COLUMN_NAME = 'ShortName'");
            if (ShortName == "0")
            {
                hraginaltr = hraginaltr + " alter table Department add ShortName nvarchar(30)";
            }
            string officeseal = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'officeseal'");
            if (officeseal == "0")
            {
                hraginaltr = hraginaltr + " alter table collinfo add officeseal image";
            }
            string Stream_Code = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Degree' AND COLUMN_NAME = 'Stream_Code'");
            if (Stream_Code == "0")
            {
                hraginaltr = hraginaltr + " alter table Degree add Stream_Code varchar(20)";
            }
            string Priority = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Course' AND COLUMN_NAME = 'Priority'");
            if (Priority == "0")
            {
                hraginaltr = hraginaltr + " alter table Course add Priority tinyint";
            }
            string AttCurForNAs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hr_PaySettings' AND COLUMN_NAME = 'AttCurForNA'");
            if (AttCurForNAs == "0")
            {
                hraginaltr = hraginaltr + " Alter Table Hr_PaySettings Add AttCurForNA bit";
            }
            if (hraginaltr != "")
            {
                int hraltagin = d2.update_method_wo_parameter(hraginaltr, "Text");
            }
            //20/04/2016 selvam
            string again3hr = string.Empty;
            string getvalu = string.Empty;
            getvalu = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HRPaySettings'");
            if (getvalu == "0")
            {
                again3hr = " CREATE TABLE HRPaySettings(Header1 nvarchar(100),Footer1 nvarchar(100),Footer2 nvarchar(100),Footer3 nvarchar(100),Footer4 nvarchar(100),Footer5 nvarchar(100),Footer6 nvarchar(100),College_Code numeric)";
            }
            if (again3hr != "")
            {
                int hraltagin = d2.update_method_wo_parameter(again3hr, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void hr3()
    {
        try
        {
            string again3hr = string.Empty;
            string getvalu = string.Empty;
            string find_tablename = string.Empty;
            getvalu = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HRPaySettings'");
            if (getvalu == "0")
            {
                again3hr = " CREATE TABLE HRPaySettings(Header1 nvarchar(100),Footer1 nvarchar(100),Footer2 nvarchar(100),Footer3 nvarchar(100),Footer4 nvarchar(100),Footer5 nvarchar(100),Footer6 nvarchar(100),College_Code numeric)";
            }
            getvalu = string.Empty;
            getvalu = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='MonthlyPayManual'");
            if (getvalu == "0")
            {
                again3hr = again3hr + " CREATE TABLE MonthlyPayManual(GrossAmt Decimal(12,2),NechEPFEmp Decimal(12,2),TOEPFEmp Decimal(12,2),HostelESIEmp Decimal(12,2),TOESIEmp Decimal(12,2), EPFCollegeMgt Decimal(12,2),EPFHostelMgt Decimal(12,2),EPFTOMgt Decimal(12,2),FPFCollegeMgt Decimal(12,2),FPFHostelMgt Decimal(12,2),FPFTOMgt Decimal(12,2), DLIFCollegeMgt Decimal(12,2),DLIFHostelMgt Decimal(12,2),DLIFTOMgt Decimal(12,2),ACEPFCollegeMgt Decimal(12,2),ACEPFHostelMgt Decimal(12,2),ACEPFTOMgt Decimal(12,2), ACDLIFCollegeMgt Decimal(12,2),ACDLIFHostelMgt Decimal(12,2),ACDLIFTOMgt Decimal(12,2),ESICollegeMgt Decimal(12,2),ESIHostelMgt Decimal(12,2),ESITOMgt Decimal(12,2), DirectorsHRA Decimal(12,2),ExPrincipalHRA Decimal(12,2),PrincipalHRA Decimal(12,2),ConsultingFee Decimal(12,2), NetAmt Decimal(12,2),EPFEmp Decimal(12,2),ESIEmp Decimal(12,2),SundryIncome Decimal(12,2),OtherDesc1 nvarchar(100),OtherAmt1 Decimal(12,2),OtherDesc2 nvarchar(100),OtherAmt2 Decimal(12,2), OtherDesc3 nvarchar(100),OtherAmt3 Decimal(12,2),OtherDesc4 nvarchar(100),OtherAmt4 Decimal(12,2),OtherDesc5 nvarchar(100),OtherAmt5 Decimal(12,2), HostelWages Decimal(12,2),TOWages Decimal(12,2),HostelLtdWages Decimal(12,2),TOLtdWages Decimal(12,2), FDate Datetime,TDate datetime,College_Code numeric)";
            }
            getvalu = string.Empty;
            getvalu = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='PayGroupDet'");
            if (getvalu == "0")
            {
                again3hr = again3hr + " CREATE TABLE PayGroupDet(CatGroup nvarchar(30),Basic Decimal(12,2),GradePay Decimal(12,2),BPArr Decimal(12,2),GPArr Decimal(12,2),Allowances nvarchar(500),Deductions nvarchar(500), GrossAmt Decimal(12,2),TotalDed Decimal(12,2),NetAmt Decimal(12,2),Fdate Datetime,TDate Datetime,College_Code numeric)";
            }
            if (again3hr != "")
            {
                int hr3agin = d2.update_method_wo_parameter(again3hr, "Text");
            }
            //alter
            string alterhrqry = string.Empty;
            string getfuncval = string.Empty;
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffCategorizer'");
            if (find_tablename != "0")
            {
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffCategorizer' AND COLUMN_NAME = 'CatGroup'");
                if (getfuncval == "0")
                {
                    alterhrqry = " Alter Table StaffCategorizer Add CatGroup nvarchar(30)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Staff_Appl_Master'");
            if (find_tablename != "0")
            {
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Staff_Appl_Master' AND COLUMN_NAME = 'TotMonths'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table Staff_Appl_Master Add TotMonths int";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffTrans'");
            if (find_tablename != "0")
            {
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffTrans' AND COLUMN_NAME = 'FacultyType'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table StaffTrans Add FacultyType nvarchar(20)";
                }
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffTrans' AND COLUMN_NAME = 'PayMode'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table StaffTrans Add PayMode int";
                }
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffTrans' AND COLUMN_NAME = 'Programme'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table StaffTrans Add Programme nvarchar(20)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='sssss'");
            if (find_tablename != "0")
            {
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'FPF'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table MonthlyPay Add FPF Decimal(12,2)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='desig_master'");
            if (find_tablename != "0")
            {
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'desig_master' AND COLUMN_NAME = 'dept_code'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " alter table desig_master alter column dept_code nvarchar(300)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffTrans'");
            if (find_tablename != "0")
            {
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffTrans' AND COLUMN_NAME = 'BasicType'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table StaffTrans Add BasicType tinyint";
                }
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffTrans' AND COLUMN_NAME = 'Basic'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table StaffTrans Add Basic Decimal(12,2)";
                }
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffTrans' AND COLUMN_NAME = 'AGP'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table StaffTrans Add AGP Decimal(12,2)";
                }
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffTrans' AND COLUMN_NAME = 'IncrementAmt'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table StaffTrans Add IncrementAmt Decimal(12,2)";
                }
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffTrans' AND COLUMN_NAME = 'IncrementTime'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table StaffTrans Add IncrementTime tinyint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='MonthlyPay'");
            if (find_tablename != "0")
            {
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'BasicType'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table MonthlyPay Add BasicType tinyint";
                }
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'Basic'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table MonthlyPay Add Basic Decimal(12,2)";
                }
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'AGP'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table MonthlyPay Add AGP Decimal(12,2)";
                }
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'IncrementAmt'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table MonthlyPay Add IncrementAmt Decimal(12,2)";
                }
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'IncrementTime'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table MonthlyPay Add IncrementTime tinyint";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='individual_incentives'");
            if (find_tablename != "0")
            {
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Individual_Incentives' AND COLUMN_NAME = 'BasicType'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table Individual_Incentives Add BasicType tinyint";
                }
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Individual_Incentives' AND COLUMN_NAME = 'Basic'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table Individual_Incentives Add Basic Decimal(12,2)";
                }
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Individual_Incentives' AND COLUMN_NAME = 'AGP'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table Individual_Incentives Add AGP Decimal(12,2)";
                }
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Individual_Incentives' AND COLUMN_NAME = 'IncrementAmt'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table Individual_Incentives Add IncrementAmt Decimal(12,2)";
                }
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Individual_Incentives' AND COLUMN_NAME = 'IncrementTime'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter Table Individual_Incentives Add IncrementTime tinyint";
                }
            }
            getfuncval = string.Empty;
            getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffLOP_Details' AND COLUMN_NAME = 'College_Code'");
            if (getfuncval == "0")
            {
                alterhrqry = alterhrqry + " Alter Table StaffLOP_Details Add College_Code numeric";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staffmaster'");
            if (find_tablename != "0")
            {
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'Traveller_Date'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " Alter table staffmaster ADD Traveller_Date datetime";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='HR_ITCalculationSettings'");
            if (find_tablename != "0")
            {
                getfuncval = string.Empty;
                getfuncval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HR_ITCalculationSettings' AND COLUMN_NAME = 'sex'");
                if (getfuncval == "0")
                {
                    alterhrqry = alterhrqry + " alter table HR_ITCalculationSettings add sex nvarchar(50)";
                }
            }
            if (alterhrqry != "")
            {
                int althrqry = d2.update_method_wo_parameter(alterhrqry, "Text");
            }
            // Added by Individual Staff bell Time Settings.
            string Student_Leave_Request = string.Empty;
            Student_Leave_Request = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Staff_InOut_BellTime_Individual'");
            if (Student_Leave_Request == "0")
            {
                Student_Leave_Request = " create table Staff_InOut_BellTime_Individual (StaffInoutPk bigint identity(1,1),StaffApplID bigint,StaffCode varchar(20),IN_Time Varchar(20),FromDate datetime,Todate datetime,PayMonth tinyint,Payyear int,OutTime varchar(20),GraceTime Varchar(20))";
                d2.update_method_wo_parameter(Student_Leave_Request, "text");
            }
            string HRQuery = string.Empty;
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HR_PaySettings' AND COLUMN_NAME = 'IsHourWise'");
            if (Student_Leave_Request == "0")
            {
                HRQuery = " alter table HR_PaySettings add IsHourWise bit";
            }
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HR_PaySettings' AND COLUMN_NAME = 'Category_code'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += " alter table HR_PaySettings add Category_code nvarchar(MAX)";
            }
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'Days_Remind'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += " alter table Automatic_SMS add Days_Remind int";
            }
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'Is_Stud_Staff'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += " alter table Registration add Is_Stud_Staff bit";
            }
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'staff_appl_id'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += " alter table Registration add staff_appl_id numeric";
            }
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HR_Paysettings' AND COLUMN_NAME = 'Is_CLCalc'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += " alter table HR_Paysettings add Is_CLCalc bit";
            }
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HR_Paysettings' AND COLUMN_NAME = 'CLCalc_FrmMonYr'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += " alter table HR_Paysettings add CLCalc_FrmMonYr nvarchar(8)";
            }
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HR_Paysettings' AND COLUMN_NAME = 'CLCalc_ToMonYr'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += " alter table HR_PaySettings add CLCalc_ToMonYr nvarchar(8)";
            }
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'monthlypay' AND COLUMN_NAME = 'CL_Calc_Amnt'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += " alter table monthlypay add CL_Calc_Amnt decimal(12,2)";
            }
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'monthlypay' AND COLUMN_NAME = 'CL_RemainLeave'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += " alter table monthlypay add CL_RemainLeave decimal(12,2)";
            }
            // Added by jairam 20-02-2017 Hr Pay Process Settings 
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HR_PaySettings' AND COLUMN_NAME = 'Per_Days'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += "  alter table HR_PaySettings add Per_Days decimal(12,1)";
            }
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HR_PaySettings' AND COLUMN_NAME = 'Per_Leave'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += "  alter table HR_PaySettings add Per_Leave nvarchar(10)";
            }
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HR_PaySettings' AND COLUMN_NAME = 'Late_Set'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += "  alter table HR_PaySettings add Late_Set nvarchar(100)";
            }
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HR_PaySettings' AND COLUMN_NAME = 'Abs_Days_Calc'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += "  alter table HR_PaySettings add Abs_Days_Calc decimal(12,1)";
            }
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attn_Logs' AND COLUMN_NAME = 'Morn_Per'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += "  alter table Attn_Logs add Morn_Per bit";
            }
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attn_Logs' AND COLUMN_NAME = 'Eve_Per'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += "  alter table Attn_Logs add Eve_Per bit";
            }
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'monthlypay' AND COLUMN_NAME = 'PerDay_Salary'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += "  alter table monthlypay add PerDay_Salary decimal(12,2)";
            }
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stafftrans' AND COLUMN_NAME = 'Gross_Sal'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += "  alter table stafftrans add Gross_Sal money";
            }
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffTaxDetails' AND COLUMN_NAME = 'TaxPerMonth'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += "  alter table StaffTaxDetails add TaxPerMonth decimal(12,2) ";
            }
            Student_Leave_Request = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HR_PaySettings' AND COLUMN_NAME = 'Inc_AllLOP'");
            if (Student_Leave_Request == "0")
            {
                HRQuery += "  alter table HR_PaySettings add Inc_AllLOP bit";
                HRQuery += "  alter table StaffLoanDet alter column DedName nvarchar(200)";
            }

            if (HRQuery.Trim() != "")
            {
                d2.update_method_wo_parameter(HRQuery, "text");
            }
            // Added by barath 06-09-2017
            ExecuteQuery("Alter table stafftrans Add DummyDepartment bigint", "stafftrans", "DummyDepartment", 1);
            ExecuteQuery("Alter table staffmaster add HealthInsNo nvarchar(100)", "staffmaster", "HealthInsNo", 1);
            ExecuteQuery("Alter table staffmaster add VoterID nvarchar(20)", "staffmaster", "VoterID", 1);
            ExecuteQuery("Alter table staffmaster add RationCardNo nvarchar(20)", "staffmaster", "RationCardNo", 1);
            ExecuteQuery("Alter table staffmaster add PanNo nvarchar(20)", "staffmaster", "PanNo", 1);
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void hr4()
    {
        try
        {
            string find_tablename = string.Empty;
            string hr_creat4 = string.Empty;
            string gettablname = string.Empty;
            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='examfeepaidstatus'");
            if (gettablname == "0")
            {
                hr_creat4 = " create table examfeepaidstatus(batch_year int,degree_code int,coll_code int,semester int,fee_code int)";
            }
            //Added by jairam 04-09-2017 ITCalculation Process

            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_OtherAllowanceDeducation'");
            if (gettablname == "0")
            {
                hr_creat4 += "  Create table IT_OtherAllowanceDeducation (IT_ID bigint IDENTITY(1,1),ITType tinyint,ITAllowDeductName varchar(Max),ITAllowDeductDiscription varchar(Max),ITCommon bit,ITCommonValue varchar(20),CollegeCode int,IsIncomeTax bit)";
            }

            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_Staff_AllowanceDeduction_Details'");
            if (gettablname == "0")
            {
                hr_creat4 += "  Create table IT_Staff_AllowanceDeduction_Details (IT_StaffIdentity bigint identity(1,1),ITAllowdeductType tinyint,Staff_ApplID bigint,AllowDeductID bigint,Amount decimal(12,2),DocDate datetime,DocNo varchar(100),CheckDDDate datetime,CheckDDNo varchar(100),BankCode varchar(100),ITMonth int,ITYear int,ITAccessMonth int,ITAccesYear int,Remarks varchar(Max),CollegeCode int)";
            }

            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_GroupMaster'");
            if (gettablname == "0")
            {
                hr_creat4 += "  Create Table IT_GroupMaster (ITGroupPK bigint identity(1,1),GroupName varchar(Max),GroupDesc Varchar(Max),ParentCode bigint,MaxLimitAmount decimal (12,2),CollegeCode int,Priority int)";
            }

            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_GroupMapping'");
            if (gettablname == "0")
            {
                hr_creat4 += "  Create table IT_GroupMapping (ITGroupFK bigint,IT_IDFK bigint)";
            }
            //End


            gettablname = string.Empty;
            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Approval_Staff_Leave_SubDetails'");
            if (gettablname == "0")
            {
                hr_creat4 = hr_creat4 + " CREATE TABLE [dbo].[Approval_Staff_Leave_SubDetails]([Apply_Staffcode] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[fromdate] [datetime] NULL, [todate] [datetime] NULL,[lt_taken] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[Approval_Staffcode] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [HerarchyOrder] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[Status] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ) ON [PRIMARY]";
            }
            gettablname = string.Empty;
            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ApprovalStaff'");
            if (gettablname == "0")
            {
                hr_creat4 = hr_creat4 + " CREATE TABLE [dbo].[ApprovalStaff]( [Apply_StaffCode] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Approval_Dept] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Approval_Deg] [nvarchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[Approval_StaffCode] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Approval_StaffName] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [HerarchyOrder] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[College_code] [nvarchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL) ON [PRIMARY]";
            }
            gettablname = string.Empty;
            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Staff_Leavereason'");
            if (gettablname == "0")
            {
                hr_creat4 = hr_creat4 + " Create table Staff_Leavereason (staff_code nvarchar(100),monyear nvarchar(100),[1] nvarchar(200),[2] nvarchar(200),[3] nvarchar(200),[4] nvarchar(200),  [5] nvarchar(200),[6] nvarchar(200),[7] nvarchar(200),[8] nvarchar(200),[9] nvarchar(200),[10] nvarchar(200),[11] nvarchar(200), [12] nvarchar(200),[13] nvarchar(200),[14] nvarchar(200),[15] nvarchar(200),[16] nvarchar(200),[17] nvarchar(200),[18] nvarchar(200), [19] nvarchar(200),[20] nvarchar(200),[21] nvarchar(200),[22] nvarchar(200),[23] nvarchar(200),[24] nvarchar(200),[25] nvarchar(200), [26] nvarchar(200),[27] nvarchar(200),[28] nvarchar(200),[29] nvarchar(200),[30] nvarchar(200),[31] nvarchar(200)) ";
            }
            gettablname = string.Empty;
            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Staff_Attendance_Setting'");
            if (gettablname == "0")
            {
                hr_creat4 = hr_creat4 + " create table Staff_Attendance_Setting(usercode varchar(50),Rights varchar(100),group_code numeric(18,0))";
            }
            gettablname = string.Empty;
            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffLoanDet'");
            if (gettablname == "0")
            {
                hr_creat4 = hr_creat4 + " CREATE TABLE StaffLoanDet(LoanCode numeric identity(1,1),Staff_Code nvarchar(30),LoanType tinyint,LoanFrom tinyint,LoanDate Datetime,LoanName numeric,LoanAmount Decimal(12,2), PolicyCompName numeric,PolicyName numeric,PolicyNo nvarchar(30),PolicyDate Datetime,PolicyAmt Decimal(12,2),PremiumAmt Decimal(12,2),BankName numeric,BankBranch nvarchar(100), IsInterest Bit,InterestPer Decimal(12,2),PayTotMon integer,EMIAmt Decimal(12,2),IsActive Bit,IntAmt Decimal(12,2),IsDed Bit,DedName nvarchar(20),DedAmt Decimal(12,2),DedFromMonth integer, DedFromYear integer,IsClose Bit,CloseDate Datetime,Remarks nvarchar(200))";
            }
            gettablname = string.Empty;
            gettablname = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffLoanPayDet'");
            if (gettablname == "0")
            {
                hr_creat4 = hr_creat4 + " CREATE Table StaffLoanPayDet(Staff_Code nvarchar(30),EMIAmt Decimal(12,2),IntAmt Decimal(12,2),PayMonth int,PayYear int,LoanCode int)";
            }
            if (hr_creat4 != "")
            {
                int hrcreat = d2.update_method_wo_parameter(hr_creat4, "Text");
            }
            //Alter()
            string alter_hr4 = string.Empty;
            string gethr4 = string.Empty;
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='mark_entry'");
            if (find_tablename != "0")
            {
                gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'mark_entry' AND COLUMN_NAME = 'evaluation1'");
                if (gethr4 == "0")
                {
                    alter_hr4 = " alter table mark_entry add evaluation1 float";
                }
            }
            // Added by jairam 06-09-2017
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IT_GroupMaster'");
            if (find_tablename != "0")
            {
                gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'IT_GroupMaster' AND COLUMN_NAME = 'ITGroupType'");
                if (gethr4 == "0")
                {
                    alter_hr4 = " alter table IT_GroupMaster add ITGroupType tinyint";
                }
            }
            //End

            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Approval_Staff_Leave_SubDetails'");
            if (find_tablename != "0")
            {
                gethr4 = string.Empty;
                gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Approval_Staff_Leave_SubDetails' AND COLUMN_NAME = 'half_day_status'");
                if (gethr4 == "0")
                {
                    alter_hr4 = alter_hr4 + " alter table Approval_Staff_Leave_SubDetails add half_day_status varchar(50)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='certificate'");
            if (find_tablename != "0")
            {
                gethr4 = string.Empty;
                gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'certificate' AND COLUMN_NAME = 'staff_interviewdate'");
                if (gethr4 == "0")
                {
                    alter_hr4 = alter_hr4 + " alter table certificate add staff_interviewdate datetime";
                }
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Staff_ITDetails' AND COLUMN_NAME = 'HBALoanInt'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table Staff_ITDetails Add HBALoanInt Decimal(12,2)";
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Staff_ITDetails' AND COLUMN_NAME = 'EduLoanInt'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table Staff_ITDetails Add EduLoanInt Decimal(12,2)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Approval_Staff_Leave_SubDetails'");
            if (find_tablename != "0")
            {
                gethr4 = string.Empty;
                gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Approval_Staff_Leave_SubDetails' AND COLUMN_NAME = 'approved_date'");
                if (gethr4 == "0")
                {
                    alter_hr4 = alter_hr4 + " alter table Approval_Staff_Leave_SubDetails add approved_date datetime";
                }
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Bio_Attendance' AND COLUMN_NAME = 'ForHostel'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table Bio_Attendance Add ForHostel Bit";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='monthlypay'");
            if (find_tablename != "0")
            {
                gethr4 = string.Empty;
                gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'monthlypay' AND COLUMN_NAME = 'PFContribution'");
                if (gethr4 == "0")
                {
                    alter_hr4 = alter_hr4 + " alter table monthlypay add PFContribution decimal(12,2)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='In_Out_Time'");
            if (find_tablename != "0")
            {
                gethr4 = string.Empty;
                gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'In_Out_Time' AND COLUMN_NAME = 'IsCalPayDate'");
                if (gethr4 == "0")
                {
                    alter_hr4 = alter_hr4 + " Alter Table In_Out_Time Add IsCalPayDate tinyint";
                }
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hr_PaySettings' AND COLUMN_NAME = 'IsAutoDeduct'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table Hr_PaySettings Add IsAutoDeduct Bit";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staff_leave_details'");
            if (find_tablename != "0")
            {
                gethr4 = string.Empty;
                gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_leave_details' AND COLUMN_NAME = 'directapply'");
                if (gethr4 == "0")
                {
                    alter_hr4 = alter_hr4 + " alter table staff_leave_details add directapply int";
                }
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrSettings' AND COLUMN_NAME = 'CertNo'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table HrSettings Add CertNo numeric";
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrSettings' AND COLUMN_NAME = 'CertName'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table HrSettings Add CertName nvarchar(100)";
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrSettings' AND COLUMN_NAME = 'FilePath'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table HrSettings Add FilePath nvarchar(300)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='MonthlyPay'");
            if (find_tablename != "0")
            {
                gethr4 = string.Empty;
                gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'HBALoanIntAmt'");
                if (gethr4 == "0")
                {
                    alter_hr4 = alter_hr4 + " Alter Table MonthlyPay Add HBALoanIntAmt Decimal(12,2)";
                }
                gethr4 = string.Empty;
                gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'MediClaimIns'");
                if (gethr4 == "0")
                {
                    alter_hr4 = alter_hr4 + " Alter Table MonthlyPay Add MediClaimIns Decimal(12,2)";
                }
                gethr4 = string.Empty;
                gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'EduLoanIntAmt'");
                if (gethr4 == "0")
                {
                    alter_hr4 = alter_hr4 + " Alter Table MonthlyPay Add EduLoanIntAmt Decimal(12,2)";
                }
                gethr4 = string.Empty;
                gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'LICAmt'");
                if (gethr4 == "0")
                {
                    alter_hr4 = alter_hr4 + " Alter Table MonthlyPay Add LICAmt Decimal(12,2)";
                }
                gethr4 = string.Empty;
                gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'HBALoanAmt'");
                if (gethr4 == "0")
                {
                    alter_hr4 = alter_hr4 + " Alter Table MonthlyPay Add HBALoanAmt Decimal(12,2)";
                }
                gethr4 = string.Empty;
                gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'PPFAmt'");
                if (gethr4 == "0")
                {
                    alter_hr4 = alter_hr4 + " Alter Table MonthlyPay Add PPFAmt Decimal(12,2)";
                }
                gethr4 = string.Empty;
                gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'MonthlyPay' AND COLUMN_NAME = 'TutionFees'");
                if (gethr4 == "0")
                {
                    alter_hr4 = alter_hr4 + " Alter Table MonthlyPay Add TutionFees Decimal(12,2)";
                }
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffMaster'");
            if (find_tablename != "0")
            {
                gethr4 = string.Empty;
                gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffMaster' AND COLUMN_NAME = 'Lic_No'");
                if (gethr4 == "0")
                {
                    alter_hr4 = alter_hr4 + " Alter Table StaffMaster Alter Column Lic_No nvarchar(200)";
                }
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'DeviceInfo' AND COLUMN_NAME = 'DeviceMethod'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table DeviceInfo Add DeviceMethod tinyint";
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'DeviceInfo' AND COLUMN_NAME = 'DeviceForHostel'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " alter table DeviceInfo add DeviceForHostel tinyint";
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hr_PaySettings' AND COLUMN_NAME = 'AttCurForUPL'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table Hr_PaySettings Add AttCurForUPL Bit";
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrPayMonths' AND COLUMN_NAME = 'PayYear'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table HrPayMonths Add PayYear nvarchar(5)";
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrPayMonths' AND COLUMN_NAME = 'SelStatus'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table HrPayMonths Add SelStatus Bit";
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrPayMonths' AND COLUMN_NAME = 'MonthType'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table HrPayMonths Add MonthType bit";
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrYears' AND COLUMN_NAME = 'Leave_Start'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table HrYears Add Leave_Start int";
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrYears' AND COLUMN_NAME = 'Leave_End'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table HrYears Add Leave_End int";
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrPayMonths' AND COLUMN_NAME = 'SlNo'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table HrPayMonths Add SlNo numeric";
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Hr_PaySettings' AND COLUMN_NAME = 'LOPGross'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table Hr_PaySettings Add LOPGross Bit";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffTrans'");
            if (find_tablename != "0")
            {
                gethr4 = string.Empty;
                gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffTrans' AND COLUMN_NAME = 'IsAutoGP'");
                if (gethr4 == "0")
                {
                    alter_hr4 = alter_hr4 + " Alter Table StaffTrans Add IsAutoGP Bit";
                }
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrSettings' AND COLUMN_NAME = 'IsAllCaps'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table HrSettings Add IsAllCaps Bit";
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrSettings' AND COLUMN_NAME = 'courseid'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table HrSettings add courseid int";
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'DeviceInfo' AND COLUMN_NAME = 'DeviceTo'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table DeviceInfo Add DeviceTo tinyint";
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'HrSettings' AND COLUMN_NAME = 'IsCommon'");
            if (gethr4 == "0")
            {
                alter_hr4 = alter_hr4 + " Alter Table HrSettings add IsCommon Bit";
            }
            gethr4 = string.Empty;
            gethr4 = d2.GetFunction("   SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'holidayStudents'");
            if (gethr4 != "0")
            {
                gethr4 = string.Empty;
                gethr4 = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'holidayStudents' AND COLUMN_NAME = 'college_code'");
                if (gethr4 == "0")
                {
                    alter_hr4 = alter_hr4 + " alter table holidayStudents add college_code bigint";
                }
            }
            string TransferPK = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_transfer' AND COLUMN_NAME = 'TransferPK'");
            if (TransferPK == "0")
            {
                alter_hr4 = alter_hr4 + " alter table staff_transfer add TransferPK bigint identity(1,1)";
            }
            string UAN_No = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staffmaster' AND COLUMN_NAME = 'UAN_No'");
            if (UAN_No == "0")
            {
                alter_hr4 = alter_hr4 + " alter table staffmaster add UAN_No nvarchar(50)";
            }
            string app_id = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cert_staff_list' AND COLUMN_NAME = 'appl_id'");
            if (app_id == "0")
            {
                alter_hr4 = alter_hr4 + " alter table cert_staff_list add appl_id numeric";
            }
            string cert_code = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cert_staff_list' AND COLUMN_NAME = 'cert_code'");
            if (cert_code != "0")
            {
                alter_hr4 = alter_hr4 + " alter table cert_staff_list alter column cert_code bigint";
            }
            string degree = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cert_staff_list' AND COLUMN_NAME = 'degree'");
            if (degree != "0")
            {
                alter_hr4 = alter_hr4 + " alter table cert_staff_list alter column degree bigint";
            }
            string org_dup = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cert_staff_list' AND COLUMN_NAME = 'org_dup'");
            if (org_dup != "0")
            {
                alter_hr4 = alter_hr4 + " alter table cert_staff_list alter column org_dup bit";
            }
            string IsExp = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cert_staff_list' AND COLUMN_NAME = 'IsExp'");
            if (IsExp == "0")
            {
                alter_hr4 = alter_hr4 + " alter table cert_staff_list add IsExp bit";
            }
            string IsReceived = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'cert_staff_list' AND COLUMN_NAME = 'IsReceived'");
            if (IsReceived == "0")
            {
                alter_hr4 = alter_hr4 + " alter table cert_staff_list add IsReceived bit";
            }
            if (alter_hr4 != "")
            {
                int hr4altrqry = d2.update_method_wo_parameter(alter_hr4, "Text");
            }
            //27.07.16
            string category_code = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'In_Out_Time' AND COLUMN_NAME = 'category_code'");
            if (category_code.Trim() != "0")
            {
                string DATA_TYPE = d2.GetFunction("  SELECT DATA_TYPE FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'In_Out_Time' AND COLUMN_NAME = 'category_code'");
                if (DATA_TYPE.Trim().ToLower() == "numeric")
                {
                    string Dummy_code = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'In_Out_Time' AND COLUMN_NAME = 'Dummy_code'");
                    if (Dummy_code == "0")
                    {
                        int up = d2.update_method_wo_parameter(" alter table In_Out_Time add Dummy_code nvarchar(50)", "Text");
                    }
                    DataSet dummy = new DataSet();
                    dummy.Clear();
                    dummy = d2.select_method_wo_parameter("select category_code from In_Out_Time", "Text");
                    if (dummy.Tables[0].Rows.Count > 0)
                    {
                        for (int m = 0; m < dummy.Tables[0].Rows.Count; m++)
                        {
                            int up1 = d2.update_method_wo_parameter("update In_Out_Time set Dummy_code= '" + Convert.ToString(dummy.Tables[0].Rows[m][0]) + "' where category_code='" + Convert.ToString(dummy.Tables[0].Rows[m][0]) + "' ", "Text");
                        }
                    }
                    int up2 = d2.update_method_wo_parameter(" alter table In_Out_Time drop column category_code", "Text");
                    int up3 = d2.update_method_wo_parameter(" SP_RENAME 'In_Out_Time.Dummy_code' , 'category_code', 'COLUMN'", "Text");
                }
            }
            string SL_Staff_Login_Details = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SL_Staff_Login_Details'");
            if (SL_Staff_Login_Details == "0")
            {
                SL_Staff_Login_Details = string.Empty;
                SL_Staff_Login_Details = " Create table SL_Staff_Login_Details (StaffLoginPK Bigint identity (1,1), ApplicantName varchar(500),DOB datetime ,MobileNo numeric ,EmailID varchar(100), LoginPassword varchar(100))";
                d2.update_method_wo_parameter(SL_Staff_Login_Details, "text");
            }
            string query = string.Empty; string altq = string.Empty;
            query = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='staff_appl_master'");
            if (query != "0")
            {
                query = string.Empty;
                query = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'spouse_name'");
                if (query == "0")
                {
                    altq = " alter table staff_appl_master add spouse_name nvarchar(100)";
                }
                query = string.Empty;
                query = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'spouse_mobileno'");
                if (query == "0")
                {
                    altq += " alter table staff_appl_master add spouse_mobileno varchar(50)";
                }
                query = string.Empty;
                query = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'language'");
                if (query == "0")
                {
                    altq += " alter table staff_appl_master add language nvarchar(50)";
                }
                query = string.Empty;
                query = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_appl_master' AND COLUMN_NAME = 'alternate_mobileno'");
                if (query == "0")
                {
                    altq += " alter table staff_appl_master add alternate_mobileno varchar(50)";
                }
                if (altq.Trim() != "")
                {
                    d2.update_method_wo_parameter(altq, "text");
                }
            }
            altq = string.Empty;
            query = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StaffPhoto'");
            if (query != "0")
            {
                query = string.Empty;
                query = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffPhoto' AND COLUMN_NAME = 'appl_id'");
                if (query == "0")
                {
                    altq = " alter table StaffPhoto add appl_id numeric";
                }
                query = string.Empty;
                query = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffPhoto' AND COLUMN_NAME = 'Appl_Resume'");
                if (query == "0")
                {
                    altq += " alter table StaffPhoto add Appl_Resume varbinary(Max)";
                }
                query = string.Empty;
                query = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffPhoto' AND COLUMN_NAME = 'Resume_FileType'");
                if (query == "0")
                {
                    altq += " alter table StaffPhoto add Resume_FileType nvarchar(500)";
                }
                query = string.Empty;
                query = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StaffPhoto' AND COLUMN_NAME = 'filename'");
                if (query == "0")
                {
                    altq += " alter table StaffPhoto add filename nvarchar(200)";
                }
                if (altq.Trim() != "")
                {
                    d2.update_method_wo_parameter(altq, "text");
                }
            }
            query = string.Empty; altq = string.Empty;
            query = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_ins_upd_staffappl_Dead'");
            if (query == "0")
            {
                altq = " CREATE procedure sp_ins_upd_staffappl_Dead(@appl_no nvarchar(50),@dept_name nvarchar(50),@dateofapply datetime,@appl_name nvarchar(50), @sex nvarchar(50),@father_name varchar(50), @date_of_birth smalldatetime,@dept_code nvarchar(50),@college_code int,@desig_name nvarchar(50),@desig_Code nvarchar(50),@subjects nvarchar(250),@title nvarchar(10),@mid_name nvarchar(50),@nameacr varchar(50),@Nationality nvarchar(50),@religion nvarchar(50),@Caste nvarchar(50),@Community nvarchar(50),@martial_status char(100),@spouse_name nvarchar(100),@spouse_mobileno varchar(50),@bldgrp nvarchar(50),@isphy nvarchar(3),@language nvarchar(50),@yofexp nvarchar(max),@comm_address nvarchar(250),@com_phone nvarchar(50),@com_mobileno varchar(50),@alternate_mobileno varchar(50),@ccity nvarchar(50),@cstate nvarchar(50),@com_pincode varchar(10),@per_address nvarchar(250),@pcity nvarchar(50),@pstate nvarchar(50),@per_pincode varchar(10),@per_phone nvarchar(50),@email nvarchar(50),@family_info nvarchar(500),@experience_info nvarchar(1200),@qualification nvarchar(1500),@interviewstatus nvarchar(50)) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY if exists(select * from staff_appl_master  where appl_no=@appl_no and college_code =@college_code ) update staff_appl_master set dateofapply=@dateofapply,appl_name=@appl_name,sex=@sex,dept_name=@dept_name,father_name=@father_name,date_of_birth=@date_of_birth,dept_code=@dept_code,desig_name=@desig_name,desig_Code=@desig_Code,subjects=@subjects,title=@title,mid_name=@mid_name,nameacr=@nameacr,Nationality=@Nationality,religion=@religion,Caste=@Caste,Community=@Community,martial_status=@martial_status,spouse_name=@spouse_name,spouse_mobileno=@spouse_mobileno,bldgrp=@bldgrp,isphy=@isphy,language=@language,yofexp=@yofexp,comm_address=@comm_address,com_phone=@com_phone,com_mobileno=@com_mobileno,alternate_mobileno=@alternate_mobileno,ccity=@ccity,cstate=@cstate,com_pincode=@com_pincode,per_address=@per_address,pcity=@pcity,pstate=@pstate,per_pincode=@per_pincode,per_phone=@per_phone,email=@email,family_info=@family_info,experience_info=@experience_info,qualification=@qualification,interviewstatus=@interviewstatus where appl_no =@appl_no and college_code =@college_code Else insert into staff_appl_master (appl_no,dateofapply,appl_name,sex,dept_name,father_name,date_of_birth,dept_code,desig_name,desig_Code,subjects,title,mid_name,nameacr,Nationality,religion,Caste,Community,martial_status,spouse_name,spouse_mobileno,bldgrp,isphy,language,yofexp,comm_address,com_phone,com_mobileno,alternate_mobileno,ccity,cstate,com_pincode,per_address,pcity,pstate,per_pincode,per_phone,email,family_info,experience_info,qualification,interviewstatus,college_code) values (@appl_no,@dateofapply,@appl_name,@sex,@dept_name,@father_name,@date_of_birth,@dept_code,@desig_name,@desig_Code,@subjects,@title,@mid_name,@nameacr,@Nationality,@religion,@Caste,@Community,@martial_status,@spouse_name,@spouse_mobileno,@bldgrp,@isphy,@language,@yofexp,@comm_address,@com_phone,@com_mobileno,@alternate_mobileno,@ccity,@cstate,@com_pincode,@per_address,@pcity,@pstate,@per_pincode,@per_phone,@email,@family_info,@experience_info,@qualification,@interviewstatus, @college_code)COMMIT TRANSACTION END TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY End END CATCH End ";
            }
            else
            {
                altq = " alter procedure sp_ins_upd_staffappl_Dead(@appl_no nvarchar(50),@dept_name nvarchar(50),@dateofapply datetime,@appl_name nvarchar(50), @sex nvarchar(50),@father_name varchar(50), @date_of_birth smalldatetime,@dept_code nvarchar(50),@college_code int,@desig_name nvarchar(50),@desig_Code nvarchar(50),@subjects nvarchar(250),@title nvarchar(10),@mid_name nvarchar(50),@nameacr varchar(50),@Nationality nvarchar(50),@religion nvarchar(50),@Caste nvarchar(50),@Community nvarchar(50),@martial_status char(100),@spouse_name nvarchar(100),@spouse_mobileno varchar(50),@bldgrp nvarchar(50),@isphy nvarchar(3),@language nvarchar(50),@yofexp nvarchar(max),@comm_address nvarchar(250),@com_phone nvarchar(50),@com_mobileno varchar(50),@alternate_mobileno varchar(50),@ccity nvarchar(50),@cstate nvarchar(50),@com_pincode varchar(10),@per_address nvarchar(250),@pcity nvarchar(50),@pstate nvarchar(50),@per_pincode varchar(10),@per_phone nvarchar(50),@email nvarchar(50),@family_info nvarchar(500),@experience_info nvarchar(1200),@qualification nvarchar(1500),@interviewstatus nvarchar(50)) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY if exists(select * from staff_appl_master  where appl_no=@appl_no and college_code =@college_code ) update staff_appl_master set dateofapply=@dateofapply,appl_name=@appl_name,sex=@sex,dept_name=@dept_name,father_name=@father_name,date_of_birth=@date_of_birth,dept_code=@dept_code,desig_name=@desig_name,desig_Code=@desig_Code,subjects=@subjects,title=@title,mid_name=@mid_name,nameacr=@nameacr,Nationality=@Nationality,religion=@religion,Caste=@Caste,Community=@Community,martial_status=@martial_status,spouse_name=@spouse_name,spouse_mobileno=@spouse_mobileno,bldgrp=@bldgrp,isphy=@isphy,language=@language,yofexp=@yofexp,comm_address=@comm_address,com_phone=@com_phone,com_mobileno=@com_mobileno,alternate_mobileno=@alternate_mobileno,ccity=@ccity,cstate=@cstate,com_pincode=@com_pincode,per_address=@per_address,pcity=@pcity,pstate=@pstate,per_pincode=@per_pincode,per_phone=@per_phone,email=@email,family_info=@family_info,experience_info=@experience_info,qualification=@qualification,interviewstatus=@interviewstatus where appl_no =@appl_no and college_code =@college_code Else insert into staff_appl_master (appl_no,dateofapply,appl_name,sex,dept_name,father_name,date_of_birth,dept_code,desig_name,desig_Code,subjects,title,mid_name,nameacr,Nationality,religion,Caste,Community,martial_status,spouse_name,spouse_mobileno,bldgrp,isphy,language,yofexp,comm_address,com_phone,com_mobileno,alternate_mobileno,ccity,cstate,com_pincode,per_address,pcity,pstate,per_pincode,per_phone,email,family_info,experience_info,qualification,interviewstatus,college_code) values (@appl_no,@dateofapply,@appl_name,@sex,@dept_name,@father_name,@date_of_birth,@dept_code,@desig_name,@desig_Code,@subjects,@title,@mid_name,@nameacr,@Nationality,@religion,@Caste,@Community,@martial_status,@spouse_name,@spouse_mobileno,@bldgrp,@isphy,@language,@yofexp,@comm_address,@com_phone,@com_mobileno,@alternate_mobileno,@ccity,@cstate,@com_pincode,@per_address,@pcity,@pstate,@per_pincode,@per_phone,@email,@family_info,@experience_info,@qualification,@interviewstatus, @college_code)COMMIT TRANSACTION END TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY End END CATCH End ";
            }
            if (altq.Trim() != "")
            {
                d2.update_method_wo_parameter(altq, "text");
            }

            query = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_StaffAppl_Upd'");
            if (query == "0")
            {
                altq = "CREATE procedure sp_StaffAppl_Upd(@appl_no nvarchar(50),@appl_name nvarchar(50),@sex nvarchar(50),@father_name varchar(50),@date_of_birth smalldatetime,@title nvarchar(10),@mid_name nvarchar(50),@nameacr varchar(50),@Nationality nvarchar(50),@religion nvarchar(50),@Caste nvarchar(50),@Community nvarchar(50),@martial_status char(100),@spouse_name nvarchar(100),@spouse_mobileno varchar(50),@bldgrp nvarchar(50),@isphy nvarchar(3),@language nvarchar(50),@yofexp nvarchar(max),@comm_address nvarchar(250),@com_phone nvarchar(50),@com_mobileno varchar(50),@alternate_mobileno varchar(50),@ccity nvarchar(50),@cstate nvarchar(50),@com_pincode varchar(10),@per_address nvarchar(250),@pcity nvarchar(50),@pstate nvarchar(50),@per_pincode varchar(10),@per_phone nvarchar(50),@email nvarchar(50),@family_info nvarchar(500),@experience_info nvarchar(1200),@qualification nvarchar(1500),@college_code int) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY if exists(select * from staff_appl_master  where appl_no=@appl_no and college_code =@college_code) update staff_appl_master set  appl_name=@appl_name,sex=@sex,father_name=@father_name,date_of_birth=@date_of_birth,title=@title,mid_name=@mid_name,nameacr=@nameacr,Nationality=@Nationality,religion=@religion,Caste=@Caste,Community=@Community,martial_status=@martial_status,spouse_name=@spouse_name,spouse_mobileno=@spouse_mobileno,bldgrp=@bldgrp,isphy=@isphy,language=@language,yofexp=@yofexp,comm_address=@comm_address,com_phone=@com_phone,com_mobileno=@com_mobileno,alternate_mobileno=@alternate_mobileno,ccity=@ccity,cstate=@cstate,com_pincode=@com_pincode,per_address=@per_address,pcity=@pcity,pstate=@pstate,per_pincode=@per_pincode,per_phone=@per_phone,email=@email,family_info=@family_info,experience_info=@experience_info,qualification=@qualification where appl_no =@appl_no and college_code =@college_code COMMIT TRANSACTION END TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY End END CATCH End";
            }
            else
            {
                altq = "Alter procedure sp_StaffAppl_Upd(@appl_no nvarchar(50),@appl_name nvarchar(50),@sex nvarchar(50),@father_name varchar(50),@date_of_birth smalldatetime,@title nvarchar(10),@mid_name nvarchar(50),@nameacr varchar(50),@Nationality nvarchar(50),@religion nvarchar(50),@Caste nvarchar(50),@Community nvarchar(50),@martial_status char(100),@spouse_name nvarchar(100),@spouse_mobileno varchar(50),@bldgrp nvarchar(50),@isphy nvarchar(3),@language nvarchar(50),@yofexp nvarchar(max),@comm_address nvarchar(250),@com_phone nvarchar(50),@com_mobileno varchar(50),@alternate_mobileno varchar(50),@ccity nvarchar(50),@cstate nvarchar(50),@com_pincode varchar(10),@per_address nvarchar(250),@pcity nvarchar(50),@pstate nvarchar(50),@per_pincode varchar(10),@per_phone nvarchar(50),@email nvarchar(50),@family_info nvarchar(500),@experience_info nvarchar(1200),@qualification nvarchar(1500),@college_code int) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY if exists(select * from staff_appl_master  where appl_no=@appl_no and college_code =@college_code) update staff_appl_master set  appl_name=@appl_name,sex=@sex,father_name=@father_name,date_of_birth=@date_of_birth,title=@title,mid_name=@mid_name,nameacr=@nameacr,Nationality=@Nationality,religion=@religion,Caste=@Caste,Community=@Community,martial_status=@martial_status,spouse_name=@spouse_name,spouse_mobileno=@spouse_mobileno,bldgrp=@bldgrp,isphy=@isphy,language=@language,yofexp=@yofexp,comm_address=@comm_address,com_phone=@com_phone,com_mobileno=@com_mobileno,alternate_mobileno=@alternate_mobileno,ccity=@ccity,cstate=@cstate,com_pincode=@com_pincode,per_address=@per_address,pcity=@pcity,pstate=@pstate,per_pincode=@per_pincode,per_phone=@per_phone,email=@email,family_info=@family_info,experience_info=@experience_info,qualification=@qualification where appl_no =@appl_no and college_code =@college_code COMMIT TRANSACTION END TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY End END CATCH End";
            }
            if (altq.Trim() != "")
            {
                d2.update_method_wo_parameter(altq, "text");
            }
            string qry = "if exists (select * from IPatchStatus where ModuleName='HR') update IPatchStatus set ClientUpdatedDate='" + DateTime.Now.ToString("yyyy/MM/dd") + "' where ModuleName='HR' ";
            int res = d2.update_method_wo_parameter(qry, "Text");
            ExecuteQuery("Alter table StaffLOP_Details add LodDate varchar (MAx)", "StaffLOP_Details", "LodDate", 1);
            if (res != 0)
            {
                alertmessage.Visible = true;
                lbl_alerterror.Text = " Updated Successfully";
            }

            bindgrid();
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void transport()
    {
        try
        {
            string trnsprotcreat = string.Empty;
            string troumstr = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RouteMaster'");
            if (troumstr == "0")
            {
                trnsprotcreat = " Create Table RouteMaster(Route_ID nvarchar(30),Mdate datetime,Stages numeric,Stage_Name nvarchar(50),Arr_Time DateTime,Dep_Time DateTime,Wait_Mins numeric,Remarks Nvarchar(50))";
            }
            string vehilmastr = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Vehicle_Master'");
            if (vehilmastr == "0")
            {
                trnsprotcreat = trnsprotcreat + " Create Table Vehicle_Master(Veh_ID nvarchar(30),Veh_Type nvarchar(30),Reg_No nvarchar(30),RC_No nvarchar(30),Renew_Date DateTime,Veh_Bought nvarchar(30),RTO_Address nvarchar(100),RtoPh_No nvarchar(30),RTOAdd1 nvarchar(50),RTOAdd2 nvarchar(50),RTOCity nvarchar(50),RTOState nvarchar(30),RTOPin nvarchar(30),RTOContPer nvarchar(30),RTOContPhno nvarchar(30),Route nvarchar(50))";
            }
            string feeio = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='FeeInfo'");
            if (feeio == "0")
            {
                trnsprotcreat = trnsprotcreat + " Create Table FeeInfo(Route_ID nvarchar(30),StrtPlace nvarchar(30),EndPlace nvarchar(30),cost numeric(18,2),payType nvarchar(30),Fee_Code nvarchar(30),Fee_Type nvarchar(50))";
            }
            if (trnsprotcreat != "")
            {
                int transportcreat = d2.update_method_wo_parameter(trnsprotcreat, "Text");
            }
            //Alter
            string altertransport = string.Empty;
            string ses = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RouteMaster' AND COLUMN_NAME = 'sess'");
            if (ses == "0")
            {
                altertransport = " Alter Table RouteMaster add sess nvarchar(30)";
            }
            string artime = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RouteMaster' AND COLUMN_NAME = 'Arr_Time'");
            if (artime == "0")
            {
                altertransport = altertransport + " Alter Table RouteMaster Alter Column Arr_Time nvarchar(30)";
            }
            string dttime = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RouteMaster' AND COLUMN_NAME = 'Dep_Time'");
            if (dttime == "0")
            {
                altertransport = altertransport + " Alter Table RouteMaster Alter Column Dep_Time nvarchar(30)";
            }
            string noftravr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'nofTravrs'");
            if (noftravr == "0")
            {
                altertransport = altertransport + " Alter Table Vehicle_Master Add nofTravrs numeric";
            }
            string nofstfs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'nofStaffs'");
            if (nofstfs == "0")
            {
                altertransport = altertransport + " Alter Table Vehicle_Master Add nofStaffs numeric";
            }
            string nofstud = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'nofstudents'");
            if (nofstud == "0")
            {
                altertransport = altertransport + " Alter Table Vehicle_Master Add nofstudents numeric";
            }
            string cheesno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Cheese_No'");
            if (cheesno == "0")
            {
                altertransport = altertransport + " Alter Table Vehicle_Master Add Cheese_No nvarchar(50)";
            }
            string clgcod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_master' AND COLUMN_NAME = 'college_code'");
            if (clgcod == "0")
            {
                altertransport = altertransport + " alter table vehicle_master add college_code varchar(100)";
            }
            string arttim = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RouteMaster' AND COLUMN_NAME = 'Arr_Time'");
            if (arttim == "0")
            {
                altertransport = altertransport + " Alter table RouteMaster Alter Column Arr_Time nvarchar(30)";
            }
            string depttim = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RouteMaster' AND COLUMN_NAME = 'Dep_Time'");
            if (depttim == "0")
            {
                altertransport = altertransport + " Alter table RouteMaster Alter Column Dep_Time nvarchar(30)";
            }
            string routname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RouteMaster' AND COLUMN_NAME = 'Route_Name'");
            if (routname == "0")
            {
                altertransport = altertransport + " Alter Table RouteMaster Add Route_Name nvarchar(200)";
            }
            string insurdate = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Insurance_Date'");
            if (insurdate == "0")
            {
                altertransport = altertransport + " Alter Table Vehicle_Master Add Insurance_Date Datetime";
            }
            string permit = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Permit'");
            if (permit == "0")
            {
                altertransport = altertransport + " Alter Table Vehicle_Master Add Permit nvarchar(200)";
            }
            string strtplac = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FeeInfo' AND COLUMN_NAME = 'StrtPlace'");
            if (strtplac == "0")
            {
                altertransport = altertransport + " Alter Table FeeInfo Alter Column StrtPlace nvarchar(100)";
            }
            string EndPlac = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FeeInfo' AND COLUMN_NAME = 'EndPlace'");
            if (EndPlac == "0")
            {
                altertransport = altertransport + " Alter Table FeeInfo Alter Column EndPlace nvarchar(100)";
            }
            string feetyp = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FeeInfo' AND COLUMN_NAME = 'Fee_Type'");
            if (feetyp == "0")
            {
                altertransport = altertransport + " Alter Table FeeInfo Alter Column Fee_Type nvarchar(100)";
            }
            string gendtype = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'GenderType'");
            if (gendtype == "0")
            {
                altertransport = altertransport + " Alter Table Vehicle_Master Add GenderType int";
            }
            if (altertransport != "")
            {
                int altrtrns = d2.update_method_wo_parameter(altertransport, "Text");
            }
            //23-04-2016
            string transprotcreat = string.Empty;
            string getvaltrans = string.Empty;
            getvaltrans = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RouteMaster'");
            if (getvaltrans == "0")
            {
                transprotcreat = " CREATE TABLE [estate] ([refno] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [location] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [address] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [area] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [surveryno] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [regno] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [regdate] [datetime] NULL , [pattano] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [pattadate] [datetime] NULL , [parno] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [pardate] [datetime] NULL , [others] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [regval] [numeric](18, 0) NULL , [class] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [college_code] [numeric](18, 0) NULL) ON [PRIMARY]";
            }
            getvaltrans = string.Empty;
            getvaltrans = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RouteMaster'");
            if (getvaltrans == "0")
            {
                transprotcreat = transprotcreat + " CREATE TABLE [estate] ([refno] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [location] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [address] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [area] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [surveryno] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [regno] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [regdate] [datetime] NULL , [pattano] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [pattadate] [datetime] NULL , [parno] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [pardate] [datetime] NULL , [others] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [regval] [numeric](18, 0) NULL , [class] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [college_code] [numeric](18, 0) NULL) ON [PRIMARY]";
            }
            getvaltrans = string.Empty;
            getvaltrans = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Vehicle_Insurance'");
            if (getvaltrans == "0")
            {
                transprotcreat = transprotcreat + " cREATE TABLE Vehicle_Insurance(Veh_ID nvarchar(50),Veh_Type nvarchar(50),Insu_No nvarchar(50),Insurance_Date nvarchar(50),Amt_Insured nvarchar(50),Insu_Amount nvarchar(50),InsCerificat_Filename nvarchar(50),InsCertificat_filedate varbinary(MAX),InsCertificat_filetype nvarchar(50),nextins_date nvarchar(50),ins_remarks nvarchar(50),FC_No nvarchar(50),FC_Date nvarchar(50),FC_Amount nvarchar(50),FCcertifi_filename nvarchar(50),FCcertificate_filedate varbinary(MAX),FCcertifi_filetype nvarchar(50),NextFcdate nvarchar(50),FC_remarks nvarchar(50),Permit nvarchar(50),Permit_No nvarchar(50),Permit_Date nvarchar(50),Reg_Photo image,v_Back image,v_Front image,v_left image,v_right image,v_other1 image,v_other2 image,v_other3 image,v_other4 Image)";
            }
            getvaltrans = string.Empty;
            getvaltrans = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Vehicle_Usage'");
            if (getvaltrans == "0")
            {
                transprotcreat = transprotcreat + "  CREATE TABLE [dbo].[Vehicle_Usage]([Vehicle_Type] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[Vehicle_Id] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[Date] [datetime] NULL,[Travel_Km] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[Purpose] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL)";
            }
            //create qury notpad_4
            getvaltrans = string.Empty;
            getvaltrans = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='DriverAllotment'");
            if (getvaltrans == "0")
            {
                transprotcreat = transprotcreat + "  CREATE TABLE [dbo].[DriverAllotment]([Vehicle_Id] [varchar](30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Route_Id] [varchar](30) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[Staff_Code] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Staff_Name] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Address] [varchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,[Mobile_No] [varchar](12) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Licence_Front] [image] NULL,[Licence_Back] [image] NULL,  [Ref_Name] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Ref_Address] [varchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Ref_Mobile] [varchar](12) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Design] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]";
            }
            if (transprotcreat != "")
            {
                int transprot = d2.update_method_wo_parameter(transprotcreat, "Text");
            }
            //alter transport
            string altertrans = string.Empty;
            altertransport = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Reg_Date'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Reg_Date datetime";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Numberofowner'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Numberofowner nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'VehicleCast'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD VehicleCast nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Tax'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Tax nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'TotalPur_Amount'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD TotalPur_Amount nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Vehicle_Ins'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Vehicle_Ins nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Purpose_Vehicle'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Purpose_Vehicle nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Purchased_On'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Purchased_On datetime";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Place_Reg'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Place_Reg nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Permit_No'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Permit_No nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Permit_Date'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Permit_Date datetime";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Duration'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Duration nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'TotalNo_Seat'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD TotalNo_Seat nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Extra_No'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Extra_No nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Intial_Km'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Intial_Km nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Engine_No'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Engine_No nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Manufactura_date'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Manufactura_date datetime";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Purchased_From'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Purchased_From tinyint";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Dealer_Details'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Dealer_Details nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Insu_No'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Insu_No nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'IAmt_Insured'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD IAmt_Insured nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Insu_Amount'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Insu_Amount nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'InsCerificat_Filename'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD InsCerificat_Filename nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'InsCertificat_filedate'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD InsCertificat_filedate varbinary(MAX)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'InsCertificat_filetype'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD InsCertificat_filetype nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'nextins_date'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD nextins_date nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'ins_remarks'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD ins_remarks nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'FC_No'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD FC_No nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'FC_Date'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD FC_Date datetime";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'FC_Amount'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD FC_Amount nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'FCcertifi_filename'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD FCcertifi_filename nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'FCcertificate_filedate'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD FCcertificate_filedate varbinary(MAX)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'FCcertifi_filetype'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD FCcertifi_filetype nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'FC_remarks'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD FC_remarks nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Regcertifi_filename'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Regcertifi_filename nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Regcertifi_filedate'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Regcertifi_filedate varbinary(MAX)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Regcertifi_filetype'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Regcertifi_filetype nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RouteMaster' AND COLUMN_NAME = 'Rou_From'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE RouteMaster ADD Rou_From nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RouteMaster' AND COLUMN_NAME = 'Rou_To'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE RouteMaster ADD Rou_To nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RouteMaster' AND COLUMN_NAME = 'Veh_ID'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE RouteMaster ADD Veh_ID nvarchar(50)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'routemaster' AND COLUMN_NAME = 'Address'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " alter table routemaster add Address varchar(500)";
            }
            altertrans = string.Empty;
            altertrans = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Type'");
            if (altertrans == "0")
            {
                altertransport = altertransport + " ALTER TABLE Vehicle_Master ADD Type tinyint ";
            }
            if (altertransport != "")
            {
                int altrtrns = d2.update_method_wo_parameter(altertransport, "Text");
            }
            // create table transport4
            string transprotcreate = string.Empty;
            string gettableval = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Transport_Settings'");
            if (gettableval == "0")
            {
                transprotcreate = transprotcreate + " CREATE TABLE [dbo].[Transport_Settings]( [College_Code] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Remain_Days] [int] NULL, [Staff_One] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [Staff_Two] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ) ON [PRIMARY]";
            }
            gettableval = string.Empty;
            gettableval = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Stage_Master'");
            if (gettableval == "0")
            {
                transprotcreate = transprotcreate + " CREATE TABLE [dbo].[Stage_Master]( [Stage_id] [numeric](18, 0) IDENTITY(1,1) NOT NULL, [Stage_Name] [nvarchar](max) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL, [Address] [nvarchar](max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ) ON [PRIMARY]";
            }
            gettableval = string.Empty;
            gettableval = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='GPSSmsData'");
            if (gettableval == "0")
            {
                transprotcreate = transprotcreate + " CREATE TABLE GPSSmsData(GPSDate Datetime,GPSTime nvarchar(30),VehicleID nvarchar(30),Stage_ID  nvarchar(30),IsSend Bit)";
            }
            gettableval = string.Empty;
            gettableval = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='GPSREPORT'");
            if (gettableval == "0")
            {
                transprotcreate = transprotcreate + " Create Table GPSREPORT(vehicle_id varchar(20),Route_id varchar(20),Time varchar(20),Date varchar(50),Fulladd varchar(100),Current_Stage varchar(30),Speed varchar(20) )";
            }
            gettableval = string.Empty;
            gettableval = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='VTSGPRSData'");
            if (gettableval == "0")
            {
                transprotcreate = transprotcreate + " CREATE TABLE [VTSGPRSData](  [ID] [int] IDENTITY(1,1) NOT NULL, [MessageHeader] [varchar](100) NULL, [NormalDataIndication] [varchar](100) NULL, [VehicleID] [varchar](100) NULL, [Date] [varchar](100) NULL, [Time] [varchar](100) NULL, [Latitude] [varchar](100) NULL, [Longitude] [varchar](100) NULL, [Speed] [varchar](100) NULL, [Directionindegrees] [varchar](100) NULL, [Odometer] [varchar](100) NULL, [Ignitionstatus] [varchar](100) NULL, [Digitalinput1status] [varchar](100) NULL, [Digitalinput2status] [varchar](100) NULL, [ImmobilizerStatus] [varchar](100) NULL, [GPSFixstatus] [varchar](100) NULL, [MessageFooter] [varchar](100) NULL, [RFIDData] [varchar](100) NULL, [GoogleLocation] [varchar](500) NULL ) ON [PRIMARY]";
            }
            gettableval = string.Empty;
            gettableval = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_vechile_priority'");
            if (gettableval == "0")
            {
                transprotcreate = transprotcreate + " create table tbl_vechile_priority(veh_id nvarchar(100),stage_id int,priority int)";
            }
            if (transprotcreate != "")
            {
                int transcreatqry = d2.update_method_wo_parameter(transprotcreate, "Text");
            }
            //Alter
            string altrtransport4 = string.Empty;
            string get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'travel_km'");
            if (get_tablname == "0")
            {
                altrtransport4 = " alter table vehicle_usage alter column travel_km int";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'Fuel'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vehicle_usage add Fuel int";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_master' AND COLUMN_NAME = 'Mileage'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vehicle_master add Mileage int";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'Opening_Km'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vehicle_usage add Opening_Km float";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'Closing_Km'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vehicle_usage add Closing_Km float";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'driverallotment' AND COLUMN_NAME = 'Renew_Date'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table driverallotment add Renew_Date datetime";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'driverallotment' AND COLUMN_NAME = 'Remainder'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table driverallotment add Remainder int";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Insurance' AND COLUMN_NAME = 'Remainder'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table Vehicle_Insurance add Remainder int";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Insurance' AND COLUMN_NAME = 'nextins_date'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table Vehicle_Insurance alter column nextins_date datetime";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Insurance' AND COLUMN_NAME = 'NextFcdate'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table Vehicle_Insurance alter column NextFcdate datetime";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Insurance' AND COLUMN_NAME = 'Permit_Date'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table Vehicle_Insurance alter column Permit_Date datetime";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'driverallotment' AND COLUMN_NAME = 'Last_Remin'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table driverallotment add Last_Remin datetime";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Insurance' AND COLUMN_NAME = 'Last_Remin'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table Vehicle_Insurance add Last_Remin datetime";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'feeinfo' AND COLUMN_NAME = 'Category'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table feeinfo add Category varchar(20)";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_insurance' AND COLUMN_NAME = 'Permit_Type'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " ALTER TABLE vehicle_insurance ADD Permit_Type varchar(100)";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stage_master' AND COLUMN_NAME = 'District'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " ALTER TABLE stage_master ADD District nvarchar(MAX)";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'fuelamount'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vehicle_usage add fuelamount float";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'repairamount'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vehicle_usage add repairamount float";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'totalamount'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vehicle_usage add totalamount float";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'registerno'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vehicle_usage add registerno varchar(100)";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'companyname'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vehicle_usage add companyname varchar(200)";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'billno'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vehicle_usage add  billno varchar(50)";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'billdate'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vehicle_usage add billdate datetime";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'tax'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vehicle_usage add tax int";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'finalcost'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vehicle_usage add finalcost float";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'totalrepairamount'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vehicle_usage add totalrepairamount int";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'totaltax'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vehicle_usage add totaltax int";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'totalfinalcost'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vehicle_usage add totalfinalcost float";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'VTSGPRSData' AND COLUMN_NAME = 'sms_flag'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table VTSGPRSData add sms_flag bit";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vtsgprsdata' AND COLUMN_NAME = 'flag_status'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vtsgprsdata add flag_status varchar(10)";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'iemdescription'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vehicle_usage add iemdescription varchar(500)";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'description'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table vehicle_usage add description varchar(500)";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'Route_ID'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table Vehicle_Usage add Route_ID nvarchar(60)";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'startplace'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table Vehicle_Usage add startplace nvarchar(max)";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'arrivalplace'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table Vehicle_Usage add arrivalplace nvarchar(max)";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'startptime'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table Vehicle_Usage add startptime datetime";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'arrivalptime'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table Vehicle_Usage add arrivalptime datetime";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'remarks'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table Vehicle_Usage add remarks nvarchar(max)";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'staffcode'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table Vehicle_Usage add staffcode nvarchar(max)";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'startpdate'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table Vehicle_Usage add startpdate datetime";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_usage' AND COLUMN_NAME = 'arrivalpdate'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table Vehicle_Usage add arrivalpdate datetime";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'Mileage'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " alter table Vehicle_Master alter column Mileage nvarchar(20)";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Vehicle_Master' AND COLUMN_NAME = 'IsActive'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " Alter Table Vehicle_Master Add IsActive Bit";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RouteMaster' AND COLUMN_NAME = 'IsActive'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " Alter Table RouteMaster Add IsActive Bit";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RouteMaster' AND COLUMN_NAME = 'RouteMaster'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " Alter Table RouteMaster Add RouteMaster int";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'VTSGPRSData' AND COLUMN_NAME = 'Priority'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " Alter Table VTSGPRSData Add Priority int";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'VTSGPRSData' AND COLUMN_NAME = 'Route_ID'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " ALTER TABLE VTSGPRSData ADD Route_ID VARCHAR(20) NULL";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'RouteMaster' AND COLUMN_NAME = 'Priority'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " Alter Table RouteMaster Add Priority int";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'FeeInfo' AND COLUMN_NAME = 'IsActive'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + " Alter Table FeeInfo ADD IsActive Bit";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'IsCanceledStage'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + "  alter table registration add IsCanceledStage bit ";
            }
            // Added by jairam 17-02-2017 
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'feeinfo' AND COLUMN_NAME = 'college_code'");
            if (get_tablname == "0")
            {
                altrtransport4 = altrtransport4 + "  alter table feeinfo add college_code numeric ";
            }
            get_tablname = string.Empty;
            get_tablname = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'feeinfo' AND COLUMN_NAME = 'Month_Value'");
            if (get_tablname == "0")
                altrtransport4 = altrtransport4 + "alter table feeinfo add Month_Value varchar(200)";



            if (altrtransport4 != "")
            {
                int transport4 = d2.update_method_wo_parameter(altrtransport4, "Text");
            }
            //procedure
            string gettrans = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'TRANSPORT_INDIVIDUAL_STUDSTAFF'");
            if (gettrans != "0")
            {
                string transstorproc = " alter PROCEDURE TRANSPORT_INDIVIDUAL_STUDSTAFF  ( @STUD_FILTER NVARCHAR(MAX), @STAFF_FILTER NVARCHAR(MAX) ) AS BEGIN DECLARE @sqlcommand1 NVARCHAR(MAX) DECLARE @sqlcommand2 NVARCHAR(MAX) set @sqlcommand1='select distinct rg.college_code,(select coll_acronymn from collinfo cc where cc.college_code=rg.college_code)as coll_acronymn, rg.degree_code,c.course_name,d.acronym,rg.vehid,rg.Bus_RouteID,s.stage_name, rg.batch_year , rg.roll_no, rg.reg_no, rg.stud_name,rg.Roll_admit from RouteMaster r,vehicle_master v,stage_master s,registration rg ,degree d ,department dp,course c,applyn a where rg.app_no=a.app_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name and rg.degree_code=d.degree_code and c.course_id=d.course_id and dp.dept_code=d.dept_code and rg.boarding is not null and rg.boarding=s.stage_id  '+@STUD_FILTER set @sqlcommand2='select distinct rg.college_code,(select coll_acronymn from collinfo cc where cc.college_code=rg.college_code)as coll_acronymn, (select desig_name from desig_master dm where dm.desig_code=st.desig_code) as desig_name, dp.dept_name, rg.staff_code , rg.staff_name, rg.vehid, rg.Bus_RouteID, s.stage_name, st.dept_code  from RouteMaster r,vehicle_master v,stage_master s ,department dp,stafftrans st,staffmaster rg,staff_appl_master ap where ap.appl_no=rg.appl_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name  and st.staff_code=rg.staff_code and st.latestrec=1 and resign = 0 And settled = 0 And dp.dept_code = st.dept_code And rg.boarding Is Not Null and rg.boarding=s.stage_id  '+@STAFF_FILTER EXEC (@sqlcommand1) EXEC (@sqlcommand2) End";
                if (transstorproc != "")
                {
                    int storproc = d2.update_method_wo_parameter(transstorproc, "Text");
                }
            }
            gettrans = string.Empty;
            gettrans = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'TRANSPORT_STRENGTH_REPORT_STUDENT'");
            if (gettrans != "0")
            {
                string transstorproc = " alter PROCEDURE TRANSPORT_STRENGTH_REPORT_STUDENT  ( @COLLEGECODE NVARCHAR(MAX), @DISTRICT NVARCHAR(MAX), @STAGE NVARCHAR(MAX), @VEHICLE NVARCHAR(MAX), @ROUTE NVARCHAR(MAX), @STUD_FILTER NVARCHAR(MAX), @STAFF_FILTER NVARCHAR(MAX) ) AS BEGIN DECLARE @sqlcommand1 NVARCHAR(MAX) DECLARE @sqlcommand2 NVARCHAR(MAX) set @sqlcommand1='select distinct rg.college_code,(select coll_acronymn from collinfo cc where cc.college_code=rg.college_code)as coll_acronymn, rg.degree_code,c.course_name,d.acronym,rg.vehid,rg.Bus_RouteID,s.stage_name, rg.batch_year , rg.roll_no, rg.reg_no, rg.stud_name,rg.roll_admit from RouteMaster r,vehicle_master v,stage_master s,registration rg ,degree d ,department dp,course c,applyn a where rg.app_no=a.app_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name and rg.degree_code=d.degree_code and c.course_id=d.course_id and dp.dept_code=d.dept_code and rg.boarding is not null and rg.boarding=s.stage_id  ' +@COLLEGECODE+ @DISTRICT+@STAGE+@VEHICLE+@ROUTE+@STUD_FILTER set @sqlcommand2='select distinct rg.college_code,(select coll_acronymn from collinfo cc where cc.college_code=rg.college_code)as coll_acronymn, (select desig_name from desig_master dm where dm.desig_code=st.desig_code) as desig_name, dp.dept_name, rg.staff_code , rg.staff_name, rg.vehid, rg.Bus_RouteID, s.stage_name, st.dept_code  from RouteMaster r,vehicle_master v,stage_master s ,department dp,stafftrans st,staffmaster rg,staff_appl_master ap where ap.appl_no=rg.appl_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name  and st.staff_code=rg.staff_code and st.latestrec=1 and resign = 0 And settled = 0 And dp.dept_code = st.dept_code And rg.boarding Is Not Null and rg.boarding=s.stage_id  ' +@COLLEGECODE+ @DISTRICT+@STAGE+@VEHICLE+@ROUTE+@STAFF_FILTER EXEC (@sqlcommand1) EXEC (@sqlcommand2)  End";
                if (transstorproc != "")
                {
                    int storproc = d2.update_method_wo_parameter(transstorproc, "Text");
                }
            }

            //barath 26.06.17
            ExecuteQuery("alter table Vehicle_Master alter column Mileage float", "Vehicle_Master", "Mileage", 3, "float");

            string qry = "if exists (select * from IPatchStatus where ModuleName='Transport') update IPatchStatus set ClientUpdatedDate='" + DateTime.Now.ToString("yyyy/MM/dd") + "' where ModuleName='Transport' ";
            int res = d2.update_method_wo_parameter(qry, "Text");
            if (res != 0)
            {
                alertmessage.Visible = true;
                lbl_alerterror.Text = " Updated Successfully";
            } bindgrid();
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void canteen()
    {
        try
        {
            string find_tablename = string.Empty;
            string canten = string.Empty;
            string creatcanten = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='canteen_purchase'");
            if (creatcanten == "0")
            {
                canten = " create table canteen_purchase(purchase_date datetime,roll_no nvarchar(100),item_name nvarchar(100),qty numeric,cost numeric,totamt numeric,fee_code numeric,college_code numeric)";
            }
            if (canten != "")
            {
                int cantn = d2.update_method_wo_parameter(canten, "Text");
            }
            //alter
            string altrcant = string.Empty;
            string countname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Canteen_Purchase' AND COLUMN_NAME = 'Counter_Name'");
            if (countname == "0")
            {
                altrcant = " Alter Table Canteen_Purchase add Counter_Name nvarchar(50)";
            }
            string sysip = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Canteen_Purchase' AND COLUMN_NAME = 'systemIP'");
            if (sysip == "0")
            {
                altrcant = altrcant + " Alter Table Canteen_Purchase add systemIP nvarchar(30)";
            }
            string rcptact = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Canteen_Purchase' AND COLUMN_NAME = 'Receipt_Acr'");
            if (rcptact == "0")
            {
                altrcant = altrcant + " Alter Table Canteen_Purchase add Receipt_Acr nvarchar(50)";
            }
            string rcptno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Canteen_Purchase' AND COLUMN_NAME = 'Receipt_No'");
            if (rcptno == "0")
            {
                altrcant = altrcant + " Alter Table Canteen_Purchase add Receipt_No nvarchar(50)";
            }
            string totalamt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'canteen_purchase' AND COLUMN_NAME = 'totamt'");
            if (totalamt == "0")
            {
                altrcant = altrcant + " Alter Table canteen_purchase Alter Column totamt numeric(18,2)";
            }
            string costs = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'canteen_purchase' AND COLUMN_NAME = 'cost'");
            if (costs == "0")
            {
                altrcant = altrcant + " Alter Table canteen_purchase Alter Column cost numeric(18,2)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Registration'");
            if (find_tablename != "0")
            {
                string pinno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'PIN_No'");
                if (pinno == "0")
                {
                    altrcant = altrcant + " Alter Table Registration Add PIN_No nvarchar(30)";
                }
                string pinstatus = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'PIN_Status'");
                if (pinstatus == "0")
                {
                    altrcant = altrcant + " alter Table Registration Add PIN_Status numeric(18,0)";
                }
                string colgcod = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'college_code'");
                if (colgcod == "0")
                {
                    altrcant = altrcant + " alter table registration add college_code numeric";
                }
                string IsdayscholorMess = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'IsdayscholorMess'");
                if (IsdayscholorMess == "0")
                {
                    altrcant = altrcant + " alter table registration add IsdayscholorMess bit";
                }
            }
            if (altrcant != "")
            {
                int altercanteen = d2.update_method_wo_parameter(altrcant, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void security_3()
    {
        try
        {
            string find_tablename = string.Empty;
            string securitcreatqry = string.Empty;
            string tabprivilag = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tab_privilages'");
            if (tabprivilag == "0")
            {
                securitcreatqry = " create table tab_privilages(tab_code nvarchar(50),user_code int,group_code nvarchar(50),college_code numeric)";
            }
            string newinststg = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='New_InsSettings'");
            if (newinststg == "0")
            {
                securitcreatqry = securitcreatqry + " create table  New_InsSettings(LinkName nvarchar(100), LinkValue nvarchar(50),user_code numeric,college_code numeric)";
            }
            string setcoltab = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SetColor_Tbl'");
            if (setcoltab == "0")
            {
                securitcreatqry = securitcreatqry + " CREATE TABLE SetColor_Tbl(Code Int Identity(1,1),Txt_Creiteria nvarchar(30),CollHead_Back nvarchar(30),CollHead_Fore nvarchar(30),CardHead_Back nvarchar(30),CardHead_Fore nvarchar(30),ContentHead_Back nvarchar(30),ContentHead_Fore nvarchar(30),Content_Back nvarchar(30),Content_Fore nvarchar(30),Sign_Back nvarchar(30),Sign_Fore nvarchar(30),Rules_Back nvarchar(30),Rules_Fore nvarchar(30))";
            }
            string masterset = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Master_Settings'");
            if (masterset == "0")
            {
                securitcreatqry = securitcreatqry + " create table Master_Settings(masterno int identity(1,1),usercode int,settings varchar(200),value int)";
            }
            string securityrights = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='security_user_right'");
            if (securityrights == "0")
            {
                securitcreatqry = securitcreatqry + " create table security_user_right(user_code varchar(20), user_id varchar(50),rights_code numeric(20),rights_desc varchar(500),college_code varchar(20))";
            }
            string inv_settmater = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Inv_SettingMaster'");
            if (inv_settmater == "0")
            {
                securitcreatqry = securitcreatqry + " CREATE TABLE Inv_SettingMaster (PORef_No nvarchar(50),Footer_Desc nvarchar(50),PhoneNo nvarchar(50),Payment nvarchar(50),Delivery nvarchar(50),VAT nvarchar(50),Fright_Charges nvarchar(50),college_code numeric)";
            }
            string printtrack = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Print_Tracker'");
            if (printtrack == "0")
            {
                securitcreatqry = securitcreatqry + " Create Table Print_Tracker(Code numeric Identity(1,1),Roll_No nvarchar(30),Creteria nvarchar(50),Printed Bit)";
            }
            string allowmac = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Allowed_MAC'");
            if (allowmac == "0")
            {
                securitcreatqry = securitcreatqry + " create table Allowed_MAC(address varchar(100))";
            }
            string clientmac = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='client_mac'");
            if (clientmac == "0")
            {
                securitcreatqry = securitcreatqry + " create table client_mac(address varchar(100))";
            }
            string tabmarkfootersett = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='TabMarkFooterSettings'");
            if (tabmarkfootersett == "0")
            {
                securitcreatqry = securitcreatqry + " CREATE Table TabMarkFooterSettings(Foot0 nvarchar(500),Foot1 nvarchar(500),Foot2 nvarchar(500),Foot3 nvarchar(500),Foot4 nvarchar(500),Foot5 nvarchar(500),Foot6 nvarchar(500),Foot7 nvarchar(500),Foot8 nvarchar(500),Foot9 nvarchar(500),Foot10 nvarchar(500),Foot11 nvarchar(500),Foot12 nvarchar(500),Foot13 nvarchar(500),Foot14 nvarchar(500),Foot15 nvarchar(500),Foot16 nvarchar(500),Foot17 nvarchar(500),Foot18 nvarchar(500),Foot19 nvarchar(500),Foot20 nvarchar(500),Foot21 nvarchar(500),Foot22 nvarchar(500),Foot23 nvarchar(500),Foot24 nvarchar(500),Foot25 nvarchar(500),Foot26 nvarchar(500),Foot27 nvarchar(500),Foot28 nvarchar(500),Foot29 nvarchar(500),College_Code numeric)";
            }
            if (securitcreatqry != "")
            {
                int scurityqry = d2.update_method_wo_parameter(securitcreatqry, "Text");
            }
            //alter query sep-20/04/2016 selvam
            string altrsecurity = string.Empty;
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='New_InsSettings'");
            if (find_tablename != "0")
            {
                altrsecurity = altrsecurity + " alter table New_InsSettings alter column LinkValue nvarchar(Max)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Counter_master'");
            if (find_tablename != "0")
            {
                string countname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Counter_master' AND COLUMN_NAME = 'comRcpt'");
                if (countname == "0")
                {
                    altrsecurity = altrsecurity + " Alter Table Counter_master add comRcpt nvarchar(30)";
                }
                string cmAcr = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Counter_master' AND COLUMN_NAME = 'comstr'");
                if (cmAcr == "0")
                {
                    altrsecurity = altrsecurity + " Alter Table Counter_master add comstr numeric(18,0)";
                }
            }
            string valu = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Master_Settings' AND COLUMN_NAME = 'value'");
            if (valu == "0")
            {
                altrsecurity = altrsecurity + " Alter Table Master_Settings alter  column value varchar(200)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='usermaster'");
            if (find_tablename != "0")
            {
                string seckey = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'usermaster' AND COLUMN_NAME = 'securitykey'");
                if (seckey == "0")
                {
                    altrsecurity = altrsecurity + " alter table usermaster add securitykey varchar(500)";
                }
                string phno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'usermaster' AND COLUMN_NAME = 'phone_no'");
                if (phno == "0")
                {
                    altrsecurity = altrsecurity + " alter table usermaster add phone_no varchar(11)";
                }
                string finuser = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'usermaster' AND COLUMN_NAME = 'fin_user'");
                if (finuser == "0")
                {
                    altrsecurity = altrsecurity + " alter table usermaster add fin_user numeric";
                }
                string countno = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'usermaster' AND COLUMN_NAME = 'counter_no'");
                if (countno == "0")
                {
                    altrsecurity = altrsecurity + " alter table usermaster add counter_no nvarchar(100)";
                }
                string counname = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'usermaster' AND COLUMN_NAME = 'counter_name'");
                if (counname == "0")
                {
                    altrsecurity = altrsecurity + " alter table usermaster add counter_name nvarchar(100)";
                }
            }
            string adres = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Allowed_MAC' AND COLUMN_NAME = 'address'");
            if (adres == "0")
            {
                altrsecurity = altrsecurity + " create table Allowed_MAC(address varchar(100))";
            }
            string clintmac = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'client_mac' AND COLUMN_NAME = 'address'");
            if (clintmac == "0")
            {
                altrsecurity = altrsecurity + " create table client_mac(address varchar(100))";
            }
            if (altrsecurity != "")
            {
                int secaltr = d2.update_method_wo_parameter(altrsecurity, "Text");
            }
            //20-04-2016
            string again_secur = string.Empty;
            string getsecurval = string.Empty;
            getsecurval = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='special_hr_rights'");
            if (getsecurval == "0")
            {
                again_secur = " create table special_hr_rights (usercode varchar(10),rights varchar(5))";
            }
            getsecurval = string.Empty;
            getsecurval = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='special_hr_rights'");
            if (getsecurval == "0")
            {
                again_secur = again_secur + " create table special_hr_rights (usercode varchar(10),rights varchar(5))";
            }
            getsecurval = string.Empty;
            getsecurval = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='TextValTable_New'");
            if (getsecurval == "0")
            {
                again_secur = again_secur + " CREATE TABLE [TextValTable_New] ( [TextCode] [numeric](18, 0) IDENTITY (1, 1) NOT NULL , [TextVal] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [TextCriteria] [char] (5) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ) ON [PRIMARY]";
            }
            getsecurval = string.Empty;
            getsecurval = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Print_Master_Setting'");
            if (getsecurval == "0")
            {
                again_secur = again_secur + "CREATE TABLE [dbo].[Print_Master_Setting]( [college_code] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [form_name] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [column_fields] [varchar](max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [footer] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [college_name] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [address1] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [address2] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [address3] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [phoneno] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [faxno] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [email] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [website] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [header_flag_value] [int] NULL, [form_heading_name] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [batch_degree_branch] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [new_header_name] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [header_align] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [footer_name] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [footer_flag_value] [int] NULL ) ON [PRIMARY]";
            }
            getsecurval = string.Empty;
            getsecurval = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='textvaltable_ref'");
            if (getsecurval == "0")
            {
                again_secur = again_secur + "create table textvaltable_ref(TextCode numeric identity(1,1),TextCode_ref numeric, TextVal varchar(100),TextCriteria varchar(100),college_code numeric)";
            }
            getsecurval = string.Empty;
            getsecurval = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Temp_Table'");
            if (getsecurval == "0")
            {
                again_secur = again_secur + " CREATE TABLE [dbo].[Temp_Table]([Staff_Code] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [File_Name] [image] NULL,[Type] [varchar](20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]";
            }
            getsecurval = string.Empty;
            getsecurval = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_print_master_settings'");
            if (getsecurval == "0")
            {
                again_secur = again_secur + " create table tbl_print_master_settings (Page_Name nvarchar(100),page_settings nvarchar(50),college_details varchar(1000),header_level nvarchar(100),footer_level nvarchar(100),header nvarchar(1000),footer nvarchar(1000),isocode nvarchar(1000))";
            }
            if (again_secur != "")
            {
                int secur = d2.update_method_wo_parameter(again_secur, "Text");
            }
            //alter query 20/04/2016 selvam
            string getsecuirval = string.Empty;
            getsecuirval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'print_master_setting' AND COLUMN_NAME = 'header_align_index'");
            if (getsecuirval == "0")
            {
                altrsecurity = " alter table print_master_setting add header_align_index varchar(10)";
            }
            getsecuirval = string.Empty;
            getsecuirval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'print_master_setting' AND COLUMN_NAME = 'ISOCode'");
            if (getsecuirval == "0")
            {
                altrsecurity = altrsecurity + " alter table print_master_setting add ISOCode varchar(100)";
            }
            getsecuirval = string.Empty;
            getsecuirval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'print_master_setting' AND COLUMN_NAME = 'state'");
            if (getsecuirval == "0")
            {
                altrsecurity = altrsecurity + " alter table print_master_setting add state varchar(100)";
            }
            getsecuirval = string.Empty;
            getsecuirval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'print_master_setting' AND COLUMN_NAME = 'pincode'");
            if (getsecuirval == "0")
            {
                altrsecurity = altrsecurity + " alter table print_master_setting add pincode int";
            }
            getsecuirval = string.Empty;
            getsecuirval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'print_master_setting' AND COLUMN_NAME = 'district'");
            if (getsecuirval == "0")
            {
                altrsecurity = altrsecurity + " alter table print_master_setting add district varchar(100)";
            }
            getsecuirval = string.Empty;
            getsecuirval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'print_master_setting' AND COLUMN_NAME = 'MultiISOCode'");
            if (getsecuirval == "0")
            {
                altrsecurity = altrsecurity + " alter table print_master_setting add MultiISOCode nvarchar(1000)";
            }
            getsecuirval = string.Empty;
            getsecuirval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'print_master_setting' AND COLUMN_NAME = 'affliated'");
            if (getsecuirval == "0")
            {
                altrsecurity = altrsecurity + " alter table print_master_setting add affliated nvarchar(1000)";
            }
            getsecuirval = string.Empty;
            getsecuirval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'print_master_setting' AND COLUMN_NAME = 'leftlogo'");
            if (getsecuirval == "0")
            {
                altrsecurity = altrsecurity + " alter table print_master_setting add leftlogo int";
            }
            getsecuirval = string.Empty;
            getsecuirval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'print_master_setting' AND COLUMN_NAME = 'rightlogo'");
            if (getsecuirval == "0")
            {
                altrsecurity = altrsecurity + " alter table print_master_setting add rightlogo int";
            }
            getsecuirval = string.Empty;
            getsecuirval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'print_master_setting' AND COLUMN_NAME = 'university'");
            if (getsecuirval == "0")
            {
                altrsecurity = altrsecurity + " alter table print_master_setting add university varchar(200)";
            }
            getsecuirval = string.Empty;
            getsecuirval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'print_master_setting' AND COLUMN_NAME = 'column_fields'");
            if (getsecuirval == "0")
            {
                altrsecurity = altrsecurity + " alter table print_master_setting alter column column_fields varchar(1000)";
            }
            getsecuirval = string.Empty;
            getsecuirval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'special_hr_rights' AND COLUMN_NAME = 'group_code'");
            if (getsecuirval == "0")
            {
                altrsecurity = altrsecurity + " alter table special_hr_rights add group_code numeric";
            }
            getsecuirval = string.Empty;
            getsecuirval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'security_user_right' AND COLUMN_NAME = 'group_code'");
            if (getsecuirval == "0")
            {
                altrsecurity = altrsecurity + " alter table security_user_right add group_code numeric";
            }
            getsecuirval = string.Empty;
            getsecuirval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_print_master_settings' AND COLUMN_NAME = 'Head_Style'");
            if (getsecuirval == "0")
            {
                altrsecurity = altrsecurity + " alter table tbl_print_master_settings  add Head_Style nvarchar(150)";
            }
            getsecuirval = string.Empty;
            getsecuirval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_print_master_settings' AND COLUMN_NAME = 'Body_Style'");
            if (getsecuirval == "0")
            {
                altrsecurity = altrsecurity + " alter table tbl_print_master_settings  add Body_Style nvarchar(150)";
            }
            getsecuirval = string.Empty;
            getsecuirval = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_print_master_settings' AND COLUMN_NAME = 'Foot_Style'");
            if (getsecuirval == "0")
            {
                altrsecurity = altrsecurity + " alter table tbl_print_master_settings  add Foot_Style nvarchar(150)";
            }
            if (altrsecurity != "")
            {
                int secaltr = d2.update_method_wo_parameter(altrsecurity, "Text");
            }
            // store procedure 21-04-2016 selvam
            string creatstrproc = string.Empty;
            string getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'PROC_PRINT_MASTER_SETTINGS'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc PROC_PRINT_MASTER_SETTINGS ";
                if (drpstrproc != "")
                {
                    int secu = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE    procedure PROC_PRINT_MASTER_SETTINGS ( @college_code varchar(20), @form_name varchar(300) ) as begin select * from Print_Master_Setting where college_code=@college_code and form_name=@form_name End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'PROC_PRINT_MASTER_SETTINGS_INSERT'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc PROC_PRINT_MASTER_SETTINGS_INSERT ";
                if (drpstrproc != "")
                {
                    int secu = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure PROC_PRINT_MASTER_SETTINGS_INSERT ( @college_code varchar(20), @form_name varchar(300), @column_fields varchar(300), @footer varchar(100), @college_name varchar(300), @address1 varchar(100), @address2 varchar(100), @address3 varchar(100), @phoneno varchar(100), @faxno varchar(100), @email varchar(200), @website varchar(200), @header_flag_value int, @form_heading_name varchar(300), @batch_degree_branch varchar(300), @new_header_name varchar(200), @header_align varchar(200), @footer_name varchar(300)=null, @footer_flag_value int ,@state varchar(100),@pincode int ) as begin insert into Print_Master_Setting(college_code,form_name,column_fields,footer,college_name,address1,address2,address3,phoneno,faxno,email,website,header_flag_value,form_heading_name,batch_degree_branch,new_header_name,header_align,footer_name,footer_flag_value,state,pincode) values(@college_code,@form_name,@column_fields,@footer,@college_name,@address1,@address2,@address3,@phoneno,@faxno,@email,@website, @header_flag_value,@form_heading_name,@batch_degree_branch,@new_header_name,@header_align,@footer_name,@footer_flag_value,@state,@pincode) End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'PROC_PRINT_MASTER_SETTINGS_DELETE'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc PROC_PRINT_MASTER_SETTINGS_DELETE ";
                if (drpstrproc != "")
                {
                    int secu = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create  procedure PROC_PRINT_MASTER_SETTINGS_DELETE (@form_name varchar(500), @college_code varchar(20)) as begin delete from Print_Master_Setting where form_name=@form_name and college_code=@college_code End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'PROC_PRINT_MASTER_SETTINGS_INSERT_NEW'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc PROC_PRINT_MASTER_SETTINGS_INSERT_NEW ";
                if (drpstrproc != "")
                {
                    int secu = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure [dbo].[PROC_PRINT_MASTER_SETTINGS_INSERT_NEW] (@college_code varchar(20), @form_name varchar(300), @column_fields varchar(1000), @footer varchar(100), @college_name varchar(300), @address1 varchar(100), @address2 varchar(100), @address3 varchar(100), @phoneno varchar(100), @faxno varchar(100), @email varchar(200), @website varchar(200), @header_flag_value int, @form_heading_name varchar(300), @batch_degree_branch varchar(300), @new_header_name varchar(200), @header_align varchar(200), @footer_name varchar(300)=null, @footer_flag_value int,@header_align_index  varchar(200),@ISOCode varchar(100),@state varchar(100),@pincode int,@district varchar(100),@MultiISOCode nvarchar(1000),@affliated nvarchar(1000),@leftlogo int,@rightlogo int,@university varchar(200)) as begin insert into Print_Master_Setting(college_code,form_name,column_fields,footer,college_name,address1,address2,address3,phoneno,faxno,email,website,header_flag_value,form_heading_name,batch_degree_branch,new_header_name,header_align,footer_name,footer_flag_value,header_align_index,ISOCode,state,pincode,district,MultiISOCode,affliated,leftlogo,rightlogo,university) values(@college_code,@form_name,@column_fields,@footer,@college_name,@address1,@address2,@address3,@phoneno,@faxno,@email,@website,@header_flag_value,@form_heading_name,@batch_degree_branch,@new_header_name,@header_align,@footer_name,@footer_flag_value,@header_align_index,@ISOCode,@state,@pincode,@district,@MultiISOCode,@affliated,@leftlogo,@rightlogo,@university) End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'createuser'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc createuser ";
                if (drpstrproc != "")
                {
                    int secu = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc createuser ( @username varchar(50), @password varchar(50) ) as begin if not exists(select 'X' from master.dbo.syslogins where loginname=@username) exec('CREATE LOGIN '+@username+' WITH PASSWORD='''+@password+'''') begin if not exists(select 'X' from sysusers where name=@username) exec('CREATE USER '+@username+' FOR LOGIN '+@username) begin exec('GRANT EXECUTE TO '+@username) End End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void security4()   //Added Automatic_SMS From alternate_time1 to To_Date on Dec 9th by Jeyaprakash
    {
        try
        {
            string find_tablename = string.Empty;
            string securitcreatqry = string.Empty;
            string get_secur_tabl = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='logindetails'");
            if (get_secur_tabl == "0")
            {
                securitcreatqry = " CREATE TABLE logindetails(  dateandtime datetime ,  staff_code nvarchar(10),flag nvarchar(10)) ";
            }
            get_secur_tabl = string.Empty;
            get_secur_tabl = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='InsLockSettings'");
            if (get_secur_tabl == "0")
            {
                securitcreatqry = securitcreatqry + " CREATE TABLE InsLockSettings (Batch_Year numeric,Degree_Code numeric,Semester numeric,Sections nvarchar(50),LockDate Datetime,SettingType tinyint)";
            }
            get_secur_tabl = string.Empty;
            get_secur_tabl = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ReportSettings'");
            if (get_secur_tabl == "0")
            {
                securitcreatqry = securitcreatqry + " CREATE TABLE ReportSettings (ReportName nvarchar(300),Header1 nvarchar(500),Footer1 nvarchar(500),Footer2 nvarchar(500),Footer3 nvarchar(500),Footer4 nvarchar(500),Footer5 nvarchar(500),Footer6 nvarchar(500),CollegeCode int)";
            }
            if (securitcreatqry != "")
            {
                int seccreat = d2.update_method_wo_parameter(securitcreatqry, "Text");
            }
            //alter4
            string altersecurty = string.Empty;
            find_tablename = string.Empty;
            string get_secalter = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_print_master_settings'");
            if (find_tablename != "0")
            {
                get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_print_master_settings' AND COLUMN_NAME = 'with_header_no_row_pages'");
                if (get_secalter == "0")
                {
                    altersecurty = altersecurty + " alter table tbl_print_master_settings add with_header_no_row_pages int";
                }
            }
            get_secalter = string.Empty;
            get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'master_Settings' AND COLUMN_NAME = 'template'");
            if (get_secalter == "0")
            {
                altersecurty = altersecurty + " alter table master_Settings add template varchar(500)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='sms_template'");
            if (find_tablename != "0")
            {
                get_secalter = string.Empty;
                get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'sms_template' AND COLUMN_NAME = 'istemplate'");
                if (get_secalter == "0")
                {
                    altersecurty = altersecurty + " alter table sms_template add istemplate varchar(10)";
                }
            }
            get_secalter = string.Empty;
            get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'logindetails' AND COLUMN_NAME = 'staff_code'");
            if (get_secalter == "0")
            {
                altersecurty = altersecurty + " alter table logindetails alter column staff_code nvarchar(50)";
            }
            find_tablename = string.Empty;
            find_tablename = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Automatic_SMS'");
            if (find_tablename != "0")
            {
                get_secalter = string.Empty;
                get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'SendToFatMob'");
                if (get_secalter == "0")
                {
                    altersecurty = altersecurty + " Alter Table Automatic_SMS Add SendToFatMob Bit";
                }
                get_secalter = string.Empty;
                get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'StfAttnGroupType'");
                if (get_secalter == "0")
                {
                    altersecurty = altersecurty + " Alter Table  Automatic_SMS Add StfAttnGroupType tinyint";
                }
                get_secalter = string.Empty;
                get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'StfAttnGroupList'");
                if (get_secalter == "0")
                {
                    altersecurty = altersecurty + " Alter Table  Automatic_SMS Add StfAttnGroupList nvarchar(200)";
                }
                get_secalter = string.Empty;
                get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'SendToStudMob'");
                if (get_secalter == "0")
                {
                    altersecurty = altersecurty + " Alter Table Automatic_SMS Add SendToStudMob Bit";
                }
                get_secalter = string.Empty;
                get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'SMS_Send_Date'");
                if (get_secalter == "0")
                {
                    altersecurty = altersecurty + " alter table Automatic_SMS add SMS_Send_Date datetime";
                }
                get_secalter = string.Empty;
                get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'alternate_time1'");
                if (get_secalter == "0")
                {
                    altersecurty = altersecurty + " alter table Automatic_SMS add alternate_time1 datetime";
                }
                get_secalter = string.Empty;
                get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'alternate_time2'");
                if (get_secalter == "0")
                {
                    altersecurty = altersecurty + " alter table Automatic_SMS add alternate_time2 datetime";
                }
                get_secalter = string.Empty;
                get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'MorAbs'");
                if (get_secalter == "0")
                {
                    altersecurty = altersecurty + " alter table Automatic_SMS add MorAbs bit";
                }
                get_secalter = string.Empty;
                get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'EveAbs'");
                if (get_secalter == "0")
                {
                    altersecurty = altersecurty + " alter table Automatic_SMS add EveAbs bit";
                }
                get_secalter = string.Empty;
                get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'DeviceID'");
                if (get_secalter == "0")
                {
                    altersecurty = altersecurty + " alter table Automatic_SMS add DeviceID nvarchar(Max)";
                }
                get_secalter = string.Empty;
                get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'hostelmasterpk'");
                if (get_secalter == "0")
                {
                    altersecurty = altersecurty + " alter table Automatic_SMS add hostelmasterpk nvarchar(Max)";
                }
                get_secalter = string.Empty;
                get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'dept_code'");
                if (get_secalter == "0")
                {
                    altersecurty = altersecurty + " alter table Automatic_SMS add dept_code nvarchar(200)";
                }
                get_secalter = string.Empty;
                get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'shift'");
                if (get_secalter == "0")
                {
                    altersecurty = altersecurty + " alter table Automatic_SMS add shift nvarchar(200)";
                }
                get_secalter = string.Empty;
                get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'From_Date'");
                if (get_secalter == "0")
                {
                    altersecurty = altersecurty + " alter table Automatic_SMS add From_Date datetime";
                }
                get_secalter = string.Empty;
                get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Automatic_SMS' AND COLUMN_NAME = 'To_Date'");
                if (get_secalter == "0")
                {
                    altersecurty = altersecurty + " alter table Automatic_SMS add To_Date datetime";
                }
            }
            if (altersecurty != "")
            {
                int altersecur = d2.update_method_wo_parameter(altersecurty, "Text");
            }
            get_secalter = string.Empty; altersecurty = string.Empty;
            get_secalter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'master_Settings' AND COLUMN_NAME = 'template'");
            if (get_secalter != "0")
            {
                altersecurty = " alter table master_Settings alter column  template nvarchar(max)";
                int altersecur = d2.update_method_wo_parameter(altersecurty, "text");
            }
            get_secalter = string.Empty; altersecurty = string.Empty;
            get_secalter = d2.GetFunction(" SELECT table_name FROM INFORMATION_SCHEMA.tables WHERE TABLE_NAME ='Security_Rights_Details' ");
            if (get_secalter == "0")
            {
                altersecurty = " Create table Security_Rights_Details (ModuleName Varchar(500),HeaderName varchar(100),Rights_Code bigint,ReportId varchar(50),ReportName varchar(500),PageName nvarchar(500),HelpURL Nvarchar(Max),PagePriority int,HeaderPriority int)";
                int altersecur = d2.update_method_wo_parameter(altersecurty, "text");
            }
            string qry = "if exists (select * from IPatchStatus where ModuleName='Security') update IPatchStatus set ClientUpdatedDate='" + DateTime.Now.ToString("yyyy/MM/dd") + "' where ModuleName='Security' ";
            int res = d2.update_method_wo_parameter(qry, "Text");
            if (res != 0)
            {
                alertmessage.Visible = true;
                lbl_alerterror.Text = " Updated Successfully";
            }
            bindgrid();
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void events()
    {
        try
        {
            string event_creatqry = string.Empty;
            string troumstr = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='RouteMaster'");
            if (troumstr == "0")
            {
                event_creatqry = " CREATE TABLE [estate] ([refno] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [location] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [address] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [area] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [surveryno] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [regno] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [regdate] [datetime] NULL , [pattano] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [pattadate] [datetime] NULL , [parno] [nvarchar] (25) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [pardate] [datetime] NULL , [others] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [regval] [numeric](18, 0) NULL , [class] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [college_code] [numeric](18, 0) NULL) ON [PRIMARY]";
            }
            string evntprogsch = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Event_program_schedule'");
            if (evntprogsch == "0")
            {
                event_creatqry = " CREATE TABLE [Event_program_schedule] ([prog_id] [numeric](18, 0) IDENTITY (1, 1) NOT NULL , [InorOut] [numeric](18, 0) NULL , [company_code] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [dept_code] [numeric](18, 0) NULL , [spcode] [numeric](18, 0) NULL , [SingleorMultiple] [numeric](18, 0) NULL , [No_of_days] [numeric](18, 0) NULL , [No_of_events] [numeric](18, 0) NULL , [event_name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [event_start_date] [datetime] NULL , [event_end_date] [datetime] NULL , [event_start_time] [datetime] NULL , [event_end_time] [datetime] NULL , [event_start_period] [numeric](18, 0) NULL , [event_end_period] [numeric](18, 0) NULL , [conducted_location] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [college_code] [numeric](18, 0) NULL , [Degree_code] [numeric](18, 0) NULL , [Batch_year] [numeric](18, 0) NULL , [Semester] [numeric](18, 0) NULL , [Sections] [varchar] (1) COLLATE SQL_Latin1_General_CP1_CI_AS NULL) ON [PRIMARY]";
            }
            string progcontect = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='program_contact'");
            if (progcontect == "0")
            {
                event_creatqry = " CREATE TABLE [program_contact] ([prog_id] [numeric](18, 0) NULL , [Contact_person] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Designation] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Contact_no] [numeric](9, 0) NULL , [Email] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL) ON [PRIMARY]";
            }
            string mulltiplschdul = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Multipleday_schedule'");
            if (mulltiplschdul == "0")
            {
                event_creatqry = " CREATE TABLE [Multipleday_schedule]([company_code] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [event_name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [event_date] [datetime] NULL , [event_start_time] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [event_end_time] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [event_start_period] [numeric](18, 0) NULL , [event_end_period] [numeric](18, 0) NULL , [conducted_location] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL) ON [PRIMARY]";
            }
            string actnplan = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Action_Plans'");
            if (actnplan == "0")
            {
                event_creatqry = " CREATE TABLE [Action_Plans]([Company_code] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Event_name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [No_Of_Actions] [numeric](18, 0) NULL , [Action_name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Action_Description] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Start_time] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [End_time] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL) ON [PRIMARY]";
            }
            string paticipant = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Participants_Contact'");
            if (paticipant == "0")
            {
                event_creatqry = " CREATE TABLE [Participants_Contact] ([prog_id] [numeric](18, 0) NULL , [event_name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [action_name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [contact_name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [designation] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Email] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [option_values] [numeric](18, 0) NULL) ON [PRIMARY]";
            }
            string participanmgmt = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Participants_Mgmt'");
            if (participanmgmt == "0")
            {
                event_creatqry = " CREATE TABLE [Participants_Mgmt] ([prog_id] [numeric](18, 0) NULL , [event_name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Action_name] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [MemType] [varchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [MemName] [varchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [MemDesignation] [varchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [option_values] [numeric](18, 0) NULL ) ON [PRIMARY]";
            }
            string particpantstff = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Participants_Staff'");
            if (particpantstff == "0")
            {
                event_creatqry = " CREATE TABLE [Participants_Staff] ([prog_id] [numeric](18, 0) NULL ,[event_name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ,[action_name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [staff_code] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [staff_name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [department] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [option_values] [numeric](18, 0) NULL ) ON [PRIMARY]";
            }
            string particpantstud = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Participants_Student'");
            if (particpantstud == "0")
            {
                event_creatqry = " CREATE TABLE [Participants_Student] ([prog_id] [numeric](18, 0) NULL , [event_name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [action_name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Roll_no] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [student_name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [Course] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [option_values] [numeric](18, 0) NULL ) ON [PRIMARY]";
            }
            string othercollegst = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='other_college_students'");
            if (othercollegst == "0")
            {
                event_creatqry = " CREATE TABLE [other_college_students] ([coll_name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [roll_no] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [student_name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL , [degree] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL) ON [PRIMARY]";
            }
            if (event_creatqry != "")
            {
                int eventtablecreat = d2.update_method_wo_parameter(event_creatqry, "Text");
            }
            alertmessage.Visible = true;
            lbl_alerterror.Text = " Updated Successfully";
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void storproc()
    {
        try
        {
            string creatstrproc = string.Empty;
            string getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'BatchYear'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc BatchYear ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE PROCEDURE BatchYear( @batch_year as numeric) AS  (select applyn.app_no,app_formno,registration.roll_admit,registration.roll_no,applyn.stud_name ,registration.adm_date,date_applied,case when sex=0 then  'Male' else 'Female' end,(select top 1  textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select top 1 textval from textvaltable where textcode=applyn.fqualification),(select top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,(select  top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc,(select top 1 textval from textvaltable where textcode=applyn.parent_statec),parent_pincodec,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),(select top 1 textval from textvaltable where textcode=registration.category_code),(select top 1 percentage from Stud_prev_details where app_no=applyn.app_no and course_code=courseLststd and branch_code=brnchlststd and university_code=univbrdlststd),'1' AS colour from applyn,registration where applyn.app_no=registration.app_no  and applyn.batch_year=@batch_year and applyn.app_no in (select app_no from discontinue)) union all (select applyn.app_no,app_formno,registration.roll_admit,registration.roll_no,applyn.stud_name,registration.adm_date,date_applied,case when sex=0 then 'Male' else 'Female' end,(select top 1 textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select  top 1 textval from textvaltable where textcode=applyn.fqualification),(select top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,(select top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc,(select top 1 textval from textvaltable where textcode=applyn.parent_statec),parent_pincodec,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),(select top 1 textval from textvaltable where textcode=registration.category_code),(select top 1 percentage from Stud_prev_details where Stud_prev_details.app_no=applyn.app_no and course_code=courseLststd and branch_code=brnchlststd and university_code=univbrdlststd),'2' as colour from applyn,registration where applyn.app_no=registration.app_no and  applyn.batch_year=@batch_year and applyn.app_no not in (select discontinue.app_no from discontinue)) union all (select applyn.app_no,app_formno,'','',stud_name,'',date_applied,case when sex=0 then 'Male' else 'Female' end,(select top 1 textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select top 1 textval from textvaltable where textcode=applyn.fqualification),(select  top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,(select top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc, (select top 1 textval from textvaltable where textcode=applyn.parent_statec),parent_pincodep,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),'',(select top 1 percentage from Stud_prev_details where app_no=applyn.app_no and course_code=courseLststd and branch_code=brnchlststd and university_code=univbrdlststd),'3' from applyn,selection_list where applyn.app_no=selection_list.app_no and  applyn.batch_year=@batch_year and applyn.app_no not in (select app_no from registration)) union all (select applyn.app_no,app_formno,'','',stud_name,'',date_applied,case when sex=0 then 'Male' else 'Female' end,(select top 1  textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select top 1 textval from textvaltable where textcode=applyn.fqualification),(select top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,(select  top 1 textval from textvaltable where textcode=applyn.parent_statep), parent_pincodep,emailp,parent_addressc,parent_phnoc,(select top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),'',(select top 1 percentage from Stud_prev_details where app_no=applyn.app_no and course_code=courseLststd and branch_code=brnchlststd and university_code=univbrdlststd),'4' from applyn where  batch_year=@batch_year and applyn.app_no not in(select app_no from selection_list) ) order by colour, applyn.app_no";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval2 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'getOPACSearch'");
            if (getval2 != "0")
            {
                string drpstrproc = " drop proc getOPACSearch ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE PROCEDURE getOPACSearch AS(select applyn.app_no,app_formno,registration.roll_admit,registration.roll_no,applyn.stud_name ,registration.adm_date,date_applied,case when sex=0 then 'Male' else 'Female' end,(select top 1  textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother, (select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select top 1 textval from textvaltable where textcode=applyn.fqualification),(select top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop, (select  top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc, (select top 1 textval from textvaltable where textcode=applyn.parent_statec),parent_pincodec,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,applyn.current_semester,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),(select top 1 textval from textvaltable where textcode=registration.category_code) from applyn,registration where applyn.app_no=registration.app_no and  applyn.app_no in (select app_no from discontinue)) union all (select applyn.app_no,app_formno,registration.roll_admit,registration.roll_no,applyn.stud_name,registration.adm_date,date_applied,  case when sex=0 then 'Male' else 'Female' end, (select top 1 textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select  top 1 textval from textvaltable where textcode=applyn.fqualification),(select top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,(select top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc, (select top 1 textval from textvaltable where textcode=applyn.parent_statec),parent_pincodec,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,applyn.current_semester,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),(select top 1 textval from textvaltable where textcode=registration.category_code) from applyn,registration where applyn.app_no=registration.app_no and applyn.app_no not in (select discontinue.app_no from discontinue)) union all (select applyn.app_no,app_formno,'','',stud_name,'',date_applied,case when sex=0 then 'Male' else 'Female' end, (select top 1 textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste), (select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select top 1 textval from textvaltable where textcode=applyn.fqualification),(select  top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop, (select top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc, (select top 1 textval from textvaltable where textcode=applyn.parent_statec),parent_pincodep,emailc,case when handy =1 then 'Yes' else 'No' end, (select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,applyn.current_semester, (select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),'','' from applyn,selection_list where applyn.app_no=selection_list.app_no and applyn.app_no not in (select app_no from registration)) union all (select applyn.app_no,app_formno,'','',stud_name,'',date_applied,case when sex=0 then 'Male' else 'Female' end,(select top 1  textval from textvaltable where textcode=applyn.community), (select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select top 1 textval from textvaltable where textcode=applyn.fqualification),(select top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,(select  top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc,(select top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,applyn.current_semester ,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),'' from applyn where applyn.app_no not in (select app_no from selection_list) ) order by applyn.app_no";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'getAppSub'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc getAppSub ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE PROCEDURE [dbo].[getAppSub](@roll_no varchar(20),@semester int )  AS (select '' as type,0 as attempts, sub_sem.fee_per_paper as fee,subjectchooser.subject_no  from  subjectchooser, sub_sem, subjects where subject.subject_no = subjectchooser.subject_no and sub_sem.subtype_no=subjectchooser.subtype_no and subjectchooser.roll_no=@roll_no and  semester =@semester and sub_sem.promote_count=1) Union (select distinct '*' as type, 1 as attempts , sub_sem.arr_fee as fee,  mark_entry.subject_no from mark_entry  ,subject, sub_sem,subjectchooser where mark_entry.roll_no = @roll_no and mark_entry.subject_no  not in (select subject_no from mark_entry k where k.roll_no = mark_entry.roll_no and k.subject_no = mark_entry.subject_no and k.result = 'pass') and subject.subject_no  =  mark_entry.subject_no and sub_sem.subtype_no = subject.subtype_no and sub_sem.promote_count = 1 and subjectchooser.subject_no=mark_entry.subject_no and  subject.subject_no = subjectchooser.subject_no And mark_entry.roll_no = subjectchooser.roll_no and subjectchooser.semester<@semester) Union (select '' as type,0 as attempts, sub_sem.fee_per_paper as fee,subjectchooser.subject_no  from subjectchooser,sub_sem,subject where subject.subject_no=subjectchooser.subject_no and sub_sem.subtype_no=subjectchooser.subtype_no and subjectchooser.roll_no=@roll_no and semester<@semester and sub_sem.subtype_no=subject.subtype_no and sub_sem.syll_code=subject.syll_code and promote_count=1 and subject.subject_no not in (select distinct subject_no from mark_entry where roll_no=@roll_no))";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval4 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'UpdateRollNo'");
            if (getval4 != "0")
            {
                string drpstrproc = " drop proc UpdateRollNo ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc UpdateRollNo @RlNo as varchar(25) , @ERlNo as varchar(25) as Update Achievements set RollNo=@RlNo where RollNo=@ERlNo Update alumni set roll_no=@RlNo where roll_no=@ERlNo  Update Attendance set roll_no=@RlNo where roll_no=@ERlNo Update Attendance_List set roll_no=@RlNo where roll_no=@ERlNo Update Borrow set roll_no=@RlNo where roll_no=@ERlNo  Update Camarks set roll_no=@RlNo where roll_no=@ERlNo Update Certificate set roll_no=@RlNo where roll_no=@ERlNo Update Dues set roll_no=@RlNo where roll_no=@ERlNo Update Exam_Application set roll_no=@RlNo where roll_no=@ERlNo Update Exam_Seating set regno=@RlNo where regno=@ERlNo Update Hall_Ticket set roll_no=@RlNo where roll_no=@ERlNo  Update Fine_Details set roll_no=@RlNo where roll_no=@ERlNo Update Ins_Train set roll_no=@RlNo where roll_no=@ERlNo Update Mark_Entry set roll_no=@RlNo where roll_no=@ERlNo   Update Project_Book set roll_no=@RlNo where roll_no=@ERlNo Update Rejoin_list set roll_no=@RlNo where roll_no=@ERlNo  Update remarksdetail set RollNo=@RlNo where RollNo=@ERlNo Update result set roll_no=@RlNo where roll_no=@ERlNo Update resume set roll_no=@RlNo where roll_no=@ERlNo  Update rescont set roll_no=@RlNo where roll_no=@ERlNo Update store_issue set roll_no=@RlNo where roll_no=@ERlNo Update stucon set roll_no=@RlNo where roll_no=@ERlNo  Update stud_project set roll_no=@RlNo where roll_no=@ERlNo Update student_list set roll_no=@RlNo where roll_no=@ERlNo Update students set roll_no=@RlNo where roll_no=@ERlNo  Update subjectchooser set roll_no=@RlNo where roll_no=@ERlNo Update tokendetails set roll_no=@RlNo where roll_no=@ERlNo Update transfeemaster set roll_no=@RlNo where roll_no=@ERlNo  Update transfees set roll_no=@RlNo where roll_no=@ERlNo Update Transfer_Certificate set Roll_No =@RlNo where Roll_No=@ERlNo Update transstat set roll_no=@RlNo where roll_no=@ERlNo Update UploadAttendance set RollNo= @RlNo where RollNo=@ERlNo Update UploadCollegeFees set RollNo= @RlNo where RollNo=@ERlNo Update UploadHostelFees set RollNo= @RlNo where RollNo=@ERlNo Update UploadUser set RollNo= @RlNo where RollNo=@ERlNo Update priority_studstaff set roll_no=@RlNo where roll_no=@ERlNo Update Hregistration set HReg_StudNo =@RlNo where HReg_StudNo =@ERlNo Update HDay_Registration set HReg_studno=@RlNo where HReg_StudNo =@ERlNo Update libusers set roll_no=@RlNo where roll_no=@ERlNo  Update jkmail set roll_no=@RlNo where roll_no=@ERlNo Update jkresusers  set roll_no=@RlNo where roll_no=@ERlNo Update UploadUserPerc  set RollNo= @RlNo where RollNo=@ERlNo Update UploadRemainder set RollNo= @RlNo where RollNo=@ERlNo";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval5 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'BatchYear'");
            if (getval5 != "0")
            {
                string drpstrproc = " drop proc BatchYear ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE PROCEDURE BatchYear( @batch_year as numeric) AS  (select applyn.app_no,app_formno,registration.roll_admit,registration.roll_no,applyn.stud_name ,registration.adm_date,date_applied,case when sex=0 then  'Male' else 'Female' end,(select top 1  textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select top 1 textval from textvaltable where textcode=applyn.fqualification),(select top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,(select  top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc,(select top 1 textval from textvaltable where textcode=applyn.parent_statec),parent_pincodec,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),(select top 1 textval from textvaltable where textcode=registration.category_code),(select top 1 percentage from Stud_prev_details where app_no=applyn.app_no and course_code=courseLststd and branch_code=brnchlststd and university_code=univbrdlststd),'1' AS colour from applyn,registration where applyn.app_no=registration.app_no  and applyn.batch_year=@batch_year and applyn.app_no in (select app_no from discontinue)) union all (select applyn.app_no,app_formno,registration.roll_admit,registration.roll_no,applyn.stud_name,registration.adm_date,date_applied,case when sex=0 then 'Male' else 'Female' end,(select top 1 textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select  top 1 textval from textvaltable where textcode=applyn.fqualification),(select top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,(select top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc,(select top 1 textval from textvaltable where textcode=applyn.parent_statec),parent_pincodec,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),(select top 1 textval from textvaltable where textcode=registration.category_code),(select top 1 percentage from Stud_prev_details where Stud_prev_details.app_no=applyn.app_no and course_code=courseLststd and branch_code=brnchlststd and university_code=univbrdlststd),'2' as colour from applyn,registration where applyn.app_no=registration.app_no and  applyn.batch_year=@batch_year and applyn.app_no not in (select discontinue.app_no from discontinue)) union all (select applyn.app_no,app_formno,'','',stud_name,'',date_applied,case when sex=0 then 'Male' else 'Female' end,(select top 1 textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select top 1 textval from textvaltable where textcode=applyn.fqualification),(select  top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,(select top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc, (select top 1 textval from textvaltable where textcode=applyn.parent_statec),parent_pincodep,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),'',(select top 1 percentage from Stud_prev_details where app_no=applyn.app_no and course_code=courseLststd and branch_code=brnchlststd and university_code=univbrdlststd),'3' from applyn,selection_list where applyn.app_no=selection_list.app_no and  applyn.batch_year=@batch_year and applyn.app_no not in (select app_no from registration)) union all (select applyn.app_no,app_formno,'','',stud_name,'',date_applied,case when sex=0 then 'Male' else 'Female' end,(select top 1  textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select top 1 textval from textvaltable where textcode=applyn.fqualification),(select top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,(select  top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc,(select top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),'',(select top 1 percentage from Stud_prev_details where app_no=applyn.app_no and course_code=courseLststd and branch_code=brnchlststd and university_code=univbrdlststd),'4' from applyn where  batch_year=@batch_year and applyn.app_no not in(select app_no from selection_list) ) order by colour, applyn.app_no";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval6 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'getOPACSearch'");
            if (getval6 != "0")
            {
                string drpstrproc = " drop proc getOPACSearch ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE PROCEDURE getOPACSearch AS (select applyn.app_no,app_formno,registration.roll_admit,registration.roll_no,applyn.stud_name ,registration.adm_date,date_applied,case when sex=0 then 'Male' else 'Female' end,(select top 1  textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother, (select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select top 1 textval from textvaltable where textcode=applyn.fqualification),(select top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop, (select  top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc,(select top 1 textval from textvaltable where textcode=applyn.parent_statec),parent_pincodec,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),(select top 1 textval from textvaltable where textcode=registration.category_code) from applyn,registration where applyn.app_no=registration.app_no and  applyn.app_no in (select app_no from discontinue)) union all  (select applyn.app_no,app_formno,registration.roll_admit,registration.roll_no,applyn.stud_name,registration.adm_date,date_applied,case when sex=0 then 'Male' else 'Female' end, (select top 1 textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select  top 1 textval from textvaltable where textcode=applyn.fqualification),(select top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,(select top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc,(select top 1 textval from textvaltable where textcode=applyn.parent_statec),parent_pincodec,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),(select top 1 textval from textvaltable where textcode=registration.category_code) from applyn,registration where applyn.app_no=registration.app_no and applyn.app_no not in (select discontinue.app_no from discontinue)) union all (select applyn.app_no,app_formno,'','',stud_name,'',date_applied,case when sex=0 then 'Male' else 'Female' end, (select top 1 textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste), (select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select top 1 textval from textvaltable where textcode=applyn.fqualification),(select  top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,(select top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc, (select top 1 textval from textvaltable where textcode=applyn.parent_statec),parent_pincodep,emailc,case when handy =1 then 'Yes' else 'No' end, (select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth, (select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),'','' from applyn,selection_list where applyn.app_no=selection_list.app_no and applyn.app_no not in (select app_no from registration)) union all (select applyn.app_no,app_formno,'','',stud_name,'',date_applied,case when sex=0 then 'Male' else 'Female' end,(select top 1  textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select top 1 textval from textvaltable where textcode=applyn.fqualification),(select top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,(select  top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc,(select top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),'' from applyn where applyn.app_no not in (select app_no from selection_list) ) order by applyn.app_no";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval7 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'getOPACSearchStudents'");
            if (getval7 != "0")
            {
                string drpstrproc = " drop proc getOPACSearchStudents ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE PROCEDURE getOPACSearchStudents(@CC as numeric, @delflag as numeric) AS (select applyn.app_no,app_formno,registration.roll_admit,registration.roll_no,applyn.stud_name ,registration.adm_date,date_applied,case when sex=0 then 'Male' else 'Female' end,(select top 1  textval from textvaltable where textcode=applyn.community), (select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother, (select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select top 1 textval from textvaltable where textcode=applyn.fqualification),(select top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,(select  top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc,(select top 1 textval from textvaltable where textcode=applyn.parent_statec),parent_pincodec,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,applyn.current_semester,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),(select top 1 textval from textvaltable where textcode=registration.category_code),(select top 1 percentage from Stud_prev_details where app_no=applyn.app_no and course_code=courseLststd and branch_code=brnchlststd and university_code=univbrdlststd),'1' AS colour from applyn,registration where applyn.app_no=registration.app_no and applyn.app_no in(select app_no from discontinue)) union all (select applyn.app_no,app_formno,registration.roll_admit,registration.roll_no,applyn.stud_name,registration.adm_date,date_applied,case when sex=0 then 'Male' else 'Female' end, (select top 1 textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu), (select top 1 textval from textvaltable where textcode=applyn.motherocc),(select  top 1 textval from textvaltable where textcode=applyn.fqualification), (select top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,(select top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc,(select top 1 textval from textvaltable where textcode=applyn.parent_statec),parent_pincodec,emailc,case when handy =1 then 'Yes' else 'No' end, (select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,applyn.current_semester,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),(select top 1 textval from textvaltable where textcode=registration.category_code),(select top 1 percentage from Stud_prev_details where Stud_prev_details.app_no=applyn.app_no  and course_code=courseLststd and branch_code=brnchlststd and university_code=univbrdlststd),'2' as colour from applyn,registration where applyn.app_no=registration.app_no  and applyn.app_no not in (select discontinue.app_no from discontinue)) union all (select applyn.app_no,app_formno,'','',stud_name,'',date_applied,case when sex=0 then 'Male' else 'Female' end,(select top 1 textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu), (select top 1 textval from textvaltable where textcode=applyn.motherocc),(select top 1 textval from textvaltable where textcode=applyn.fqualification),(select  top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,  (select top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc, (select top 1 textval from textvaltable where textcode=applyn.parent_statec),parent_pincodep,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,applyn.current_semester,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),'',(select top 1 percentage from Stud_prev_details where app_no=applyn.app_no and course_code=courseLststd and branch_code=brnchlststd and university_code=univbrdlststd),'3' from applyn,selection_list where applyn.app_no=selection_list.app_no and applyn.app_no not in (select app_no from registration)) union all(select applyn.app_no,app_formno,'','',stud_name,'',date_applied,case when sex=0 then 'Male' else 'Female' end,(select top 1  textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc), (select top 1 textval from textvaltable where textcode=applyn.fqualification), (select top 1 textval from textvaltable Where textcode=applyn.mQualification),parent_addressP,parent_phnop, (select  top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc,(select top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,applyn.current_semester ,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),'',(select top 1 percentage from Stud_prev_details where app_no=applyn.app_no and course_code=courseLststd and branch_code=brnchlststd and university_code=univbrdlststd),'4' from applyn  where applyn.app_no not in(select app_no from selection_list) ) order by colour, applyn.app_no ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval8 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'admcat'");
            if (getval8 != "0")
            {
                string drpstrproc = " drop proc admcat ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc admcat @byear as integer, @dcode as integer, @stype as integer as begin set nocount on select a.ent_sno as 'CET Sl. No',a.stud_name as 'Name of the Candidate',a.dob as 'Dt. of birth',(select textval from textvaltable where textcode=pd.course_code) as 'Qual. Exam Pass',pd.passyear as 'Year of Pass',(select textval from textvaltable where textcode=a.community) as 'CAT',(select textval from textvaltable where textcode=pd.university_code) as 'Name of the Board',(select textval from textvaltable where textcode=pd.insstate_code) as 'State',(select sum(acual_marks) from perv_marks_history where perv_marks_history.course_entno=pd.course_entno) as 'PCM Marks',pd.percentage as 'PCM %',a.rank as 'CET Rank',a.ent_regno + '/' + cast(a.ent_date as char(11)) as 'CET/DIP. Ad. Ltr. No. & Date',r.adm_date as 'Dt. of Admn.','' as 'Fee Rec.No & Date','' as 'Fee Amount Collected at Cell/College'from registration r,applyn a,Stud_prev_details pd where a.app_no=r.app_no and  a.app_no=pd.app_no and r.batch_year=@byear and r.degree_code=@dcode and a.seattype=@stype  and a.courseLststd=pd.course_code end";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval9 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'getOPACSearch'");
            if (getval9 != "0")
            {
                creatstrproc = " alter PROCEDURE getOPACSearch AS(select applyn.app_no,app_formno,registration.roll_admit,registration.roll_no,registration.reg_no,applyn.stud_name ,registration.adm_date,date_applied,case when sex=0 then 'Male' else 'Female' end,(select top 1  textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob, (select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother, (select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select top 1 textval from textvaltable where textcode=applyn.fqualification),(select top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP, parent_phnop, (select  top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc,(select top 1 textval from textvaltable where textcode=applyn.parent_statec),parent_pincodec,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,applyn.current_semester, (select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),(select top 1 textval from textvaltable where textcode=registration.category_code) from applyn,registration where applyn.app_no=registration.app_no and  applyn.app_no in (select app_no from discontinue)) union all (select applyn.app_no,app_formno, registration.roll_admit,registration.roll_no,registration.reg_no,applyn.stud_name,registration.adm_date,date_applied, case when sex=0 then 'Male' else 'Female' end, (select top 1 textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome), (select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select  top 1 textval from textvaltable where textcode=applyn.fqualification),(select top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,(select top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep, emailp,parent_addressc,parent_phnoc, (select top 1 textval from textvaltable where textcode=applyn.parent_statec),parent_pincodec,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,applyn.current_semester, (select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),(select top 1 textval from textvaltable where textcode=registration.category_code) from applyn,registration where applyn.app_no=registration.app_no and applyn.app_no not in (select discontinue.app_no from discontinue)) union all (select applyn.app_no,app_formno,'','','',stud_name,'',date_applied,case when sex=0 then 'Male' else 'Female' end, (select top 1 textval from textvaltable where textcode=applyn.community),(select top 1 textval from textvaltable where textcode=applyn.caste), (select top 1 textval from textvaltable where textcode=applyn.religion),dob,(select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu), (select top 1 textval from textvaltable where textcode=applyn.motherocc),(select top 1 textval from textvaltable where textcode=applyn.fqualification),(select  top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,(select top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc, (select top 1 textval from textvaltable where textcode=applyn.parent_statec),parent_pincodep,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,applyn.current_semester, (select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),'','' from applyn,selection_list where applyn.app_no=selection_list.app_no and applyn.app_no not in (select app_no from registration)) union all (select applyn.app_no,app_formno,'','','',stud_name,'',date_applied,case when sex=0 then 'Male' else 'Female' end,(select top 1  textval from textvaltable where textcode=applyn.community), (select top 1 textval from textvaltable where textcode=applyn.caste),(select top 1 textval from textvaltable where textcode=applyn.religion),dob, (select top 1 textval from textvaltable where textcode=applyn.mother_tongue),parent_name,mother,(select top 1 textval from textvaltable where textcode=applyn.parent_income),(select top 1 textval from textvaltable where textcode=applyn.mIncome),(select top 1 textval from textvaltable where textcode=applyn.parent_occu),(select top 1 textval from textvaltable where textcode=applyn.motherocc),(select top 1 textval from textvaltable where textcode=applyn.fqualification), (select top 1 textval from textvaltable where textcode=applyn.mQualification),parent_addressP,parent_phnop,(select  top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailp,parent_addressc,parent_phnoc,(select top 1 textval from textvaltable where textcode=applyn.parent_statep),parent_pincodep,emailc,case when handy =1 then 'Yes' else 'No' end,(select top 1 textval from textvaltable where textcode=applyn.fatherCategory),(select top 1 textval from textvaltable where textcode=applyn.extra_act),place_birth,applyn.current_semester,(select top 1 textval from textvaltable where textcode=applyn.bldgrp),(select top 1 textval from textvaltable where textcode=applyn.citizen),(select top 1 textval from textvaltable where textcode=applyn.medium_ins),(select top 1 textval from textvaltable where textcode=applyn.seattype),'' from applyn where applyn.app_no not in (select app_no from selection_list) ) order by applyn.app_no";
                if (creatstrproc != "")
                {
                    int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
                }
            }
            creatstrproc = string.Empty;
            string getval10 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'GetAdmissionDet'");
            if (getval10 != "0")
            {
                string drpstrproc = " drop proc GetAdmissionDet ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc GetAdmissionDet @Ano as int as select registration.*,applyn.batch_year as Byear,applyn.stud_name as a_stud_name,applyn.degree_code as dcode,applyn.app_formno,applyn.date_applied ,applyn.current_semester as Csem, adm.regdate,applyn.parent_name,applyn.stud_name,applyn.parent_addressp,applyn.parent_addressc,applyn.parent_phnop,applyn.parent_phnoc,adm.timestart TS,adm.timeend TE,adm.startdate ,adm.venue ,adm.IsAcc ,adm.accdate,adm.paydetails from applyn left join registration on applyn.app_no=registration.app_no left join admission adm on applyn.app_no=adm.app_no where  applyn.app_no=@Ano";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval11 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'GetCourseAnalys'");
            if (getval11 != "0")
            {
                string drpstrproc = " drop proc GetCourseAnalys ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE PROCEDURE GetCourseAnalys( @fdate as datetime, @tdate as datetime) AS select  course_name + '-' +acronym Course, (select count(*)  from applyn a where date_applied BETWEEN  @fdate and @tdate and a.degree_code=d.degree_code )ENQ , (SELECT COUNT(*) FROM SELECTION_LIST WHERE DEGREE_CODE=d.DEGREE_CODE AND RDATE BETWEEN  @fdate and @tdate ) ENROLL, (select count(*) from registration r where r.degree_code=d.degree_code and adm_date BETWEEN  @fdate and @tdate ) REG  from degree d ,course c where d.course_id=c.course_id ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval12 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'updatestaffname'");
            if (getval12 != "0")
            {
                string drpstrproc = " drop proc updatestaffname ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure updatestaffname @staffcode as nvarchar(50),@staffname as nvarchar(50) as update staffmaster set staff_name=@staffname where staff_code=@staffcode update transport_staff set staff_name=@staffname where staff_code=@staffcode update lic_det set staff_name=@staffname where staff_code=@staffcode update hstaff_registration set staff_name=@staffname where staff_code=@staffcode update hostel_staffs set staff_name=@staffname where staff_code=@staffcode update uploadstaff_details set staff_name=@staffname where staff_code=@staffcode update libusers set stud_name=@staffname where roll_no=@staffcode update tokendetails set stud_name=@staffname where roll_no=@staffcode and is_staff=1 update borrow set stud_name=@staffname where roll_no=@staffcode and is_staff=1 ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval13 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'LoadStudents'");
            if (getval13 != "0")
            {
                string drpstrproc = " drop proc LoadStudents ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create Procedure LoadStudents (@degCode as numeric,@Sems as numeric,@Batch_Year as numeric,@SubNo as numeric) as Declare @SQL1 as nvarchar(200)Declare @SQL3 as nvarchar(500) set @SQl1='Select registration.Roll_No as RlNo,Reg_No as RgNo ,Stud_Name as SName'set @SQl3=' from registration,subjectchooser where  registration.roll_no = subjectchooser.roll_no andBatch_Year = '+ convert(nvarchar(5),@Batch_Year) +' and Degree_Code = '+ convert (nvarchar(5),@Degcode) +' and Current_Semester= '+ convert (nvarchar(5),@Sems) +'and subject_no = '+ convert (nvarchar(5),@SubNo) +' and delflag =0 andexam_flag <>''Debar'' and RollNo_Flag=1 and registration.Roll_No is not null  order by RlNo 'exec (@SQL1+@SQL3)";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval14 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'UpdateRollNo'");
            if (getval14 != "0")
            {
                string drpstrproc = " drop proc UpdateRollNo ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc dbo.UpdateRollNo @RlNo as varchar(25) , @ERlNo as varchar(25) as Update Achievements set RollNo=@RlNo where RollNo=@ERlNo Update alumni set roll_no=@RlNo where roll_no=@ERlNo  Update Attendance set roll_no=@RlNo where roll_no=@ERlNo Update Attendance_List set roll_no=@RlNo where roll_no=@ERlNo Update Borrow set roll_no=@RlNo where roll_no=@ERlNo  Update Camarks set roll_no=@RlNo where roll_no=@ERlNo Update Certificate set roll_no=@RlNo where roll_no=@ERlNo Update Dues set roll_no=@RlNo where roll_no=@ERlNo  Update Exam_Application set roll_no=@RlNo where roll_no=@ERlNo Update Exam_Seating set regno=@RlNo where regno=@ERlNo Update Hall_Ticket set roll_no=@RlNo where roll_no=@ERlNo  Update Fine_Details set roll_no=@RlNo where roll_no=@ERlNo Update Ins_Train set roll_no=@RlNo where roll_no=@ERlNo Update Mark_Entry set roll_no=@RlNo where roll_no=@ERlNo   Update Project_Book set roll_no=@RlNo where roll_no=@ERlNo Update Rejoin_list set roll_no=@RlNo where roll_no=@ERlNo  Update remarksdetail set RollNo=@RlNo where RollNo=@ERlNo Update result set roll_no=@RlNo where roll_no=@ERlNo Update resume set roll_no=@RlNo where roll_no=@ERlNo  Update rescont set roll_no=@RlNo where roll_no=@ERlNo Update store_issue set roll_no=@RlNo where roll_no=@ERlNo Update stucon set roll_no=@RlNo where roll_no=@ERlNo  Update stud_project set roll_no=@RlNo where roll_no=@ERlNo Update student_list set roll_no=@RlNo where roll_no=@ERlNo Update students set roll_no=@RlNo where roll_no=@ERlNo  Update subjectchooser set roll_no=@RlNo where roll_no=@ERlNo Update tokendetails set roll_no=@RlNo where roll_no=@ERlNo Update transfeemaster set roll_no=@RlNo where roll_no=@ERlNo  Update transfees set roll_no=@RlNo where roll_no=@ERlNo Update Transfer_Certificate set Roll_No =@RlNo where Roll_No=@ERlNo Update transstat set roll_no=@RlNo where roll_no=@ERlNo  Update UploadAttendance set RollNo= @RlNo where RollNo=@ERlNo Update UploadCollegeFees set RollNo= @RlNo where RollNo=@ERlNo  Update UploadHostelFees set RollNo= @RlNo where RollNo=@ERlNo Update UploadUser set RollNo= @RlNo where RollNo=@ERlNo  Update priority_studstaff set roll_no=@RlNo where roll_no=@ERlNo Update Hregistration set HReg_StudNo =@RlNo where HReg_StudNo =@ERlNo Update HDay_Registration set HReg_studno=@RlNo where HReg_StudNo =@ERlNo Update libusers set roll_no=@RlNo where roll_no=@ERlNo  Update jkmail set roll_no=@RlNo where roll_no=@ERlNo Update jkresusers  set roll_no=@RlNo where roll_no=@ERlNo Update UploadUserPerc  set RollNo= @RlNo where RollNo=@ERlNo Update UploadRemainder set RollNo= @RlNo where RollNo=@ERlNo update tokendetails set token_no=replace(token_no,@ERlNo + '.',@RlNo + '.') where roll_no=@RlNo update borrow set token_no=replace(token_no,@ERlNo + '.',@RlNo + '.') where roll_no=@RlNo";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval15 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'RankHolders'");
            if (getval15 != "0")
            {
                string drpstrproc = " drop proc RankHolders ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE pROCEDURE RankHolders (@Degcode AS numeric=NULL,@BatchYR AS NUMERIC=NULL )AS  Declare @@Batch NUMERIC       Declare @@CName varchar(30) Declare @@DName varchar(30)  declare @sql1 nvarchar(400)  declare @sql2 nvarchar(800)  declare @@DCode NUMERIC      declare @@TOT NUMERIC  SET @SQL1 =''  IF(@DEGCODE <> NULL) begin SET @SQL1 = ' and  d.degree_code = ' + CAST(@DEGCODE AS VARCHAR(10))End  IF(@BatchYr <> NULL) begin SET @SQL1 = @sql1+' and  reg.Batch_year = ' + CAST(@Batchyr AS VARCHAR(10))End  SET @SQL2 ='select distinct reg.batch_year, c.course_name,dept.dept_name,reg.degree_code into ##DUMMY from  course c,registration reg,degree d,department dept where cc<>1 and reg.degree_code=d.degree_code and d.dept_code =dept.dept_code and c.course_id=d.course_id'+@sql1 execute sp_executesql  @SQL2  Declare RankHolder cursor local Scroll Keyset Optimistic For  select distinct batch_year, course_name,dept_name,degree_code from  ##dummy Open RankHolder  /* Opening the cursor */ create table #fields (Stotal float,Percentage float, degree nvarchar(30),branch nvarchar(30),rollno  nvarchar(30),batch int) /* Creating Temp Table to Store Percentage Information */   fetch Absolute 1 from RankHolder into @@Batch,@@CName,@@DName,@@DCode while @@fetch_Status<>-1 begin fetch next from RankHolder into @@Batch,@@CName,@@DName,@@DCode insert into #fields select top 1(sum(total)) Total,(sum(total)/sum(s.maxtotal))*100 Percentage,@@CName Course,@@Dname Department,Mstm.Roll_no Roll_No,@@batch batchyear from final_markstmt MStm   left join subject s on s.subject_no=mstm.subject_no ,  Registration Reg where Mstm.Roll_no=Reg.Roll_no and  reg.Degree_code=@@dcode and reg.batch_year=@@batch    group by mstm.roll_no order by sum(total) desc  End select * from #fields    drop table #fields drop table ##dummy Close RankHolder";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval16 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'SubjectWiseResults'");
            if (getval16 != "0")
            {
                string drpstrproc = " drop proc SubjectWiseResults ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE PROCEDURE SubjectWiseResults (@Degcode AS numeric,@Semester as numeric,@BatchYR AS NUMERIC )AS Declare @@SUBNO NUMERIC   Declare @@SUBCODE varchar(30)  Declare @@SUBNAME varchar(30) Declare @@Absent Numeric  Declare @@PASS numeric  Declare @@FAIL numeric   declare @sql1 nvarchar(400)   declare @sql2 nvarchar(1000)      declare @@DCode NUMERIC declare @@TOT NUMERIC  select distinct exam_appl_details.subject_no,subject_code,subject_name,  (select count(*) from mark_entry where exam_appl_details.subject_no=mark_entry.subject_no and mark_entry.exam_code=(select exam_code from exam_details where degree_code=@Degcode and current_semester=@Semester and batch_year=@BatchYR)and result='AAA') as A,(select count(*) from mark_entry where exam_appl_details.subject_no=mark_entry.subject_no and mark_entry.exam_code=(select exam_code from exam_details where degree_code=@Degcode  and current_semester=@Semester and batch_year=@BatchYR)and result='PASS')as B,(select count(*) from mark_entry where exam_appl_details.subject_no=mark_entry.subject_no and mark_entry.exam_code=(select exam_code from exam_details where degree_code=@Degcode and current_semester=@Semester and batch_year=@BatchYR)and result='FAIL')as C , (select staff_name from staffmaster inner join  staff_selector on staff_selector.staff_code=staffmaster.staff_code where staff_selector.subject_no=subject.subject_no) as D into ##dummy from exam_appl_details,subject,mark_entry where ltrim(rtrim(mark_entry.type))='' and mark_entry.attempts=1  and exam_appl_details.attempts = 0 and subject.subject_no = exam_appl_details.subject_no and mark_entry.subject_no=exam_appl_details.subject_no and  mark_entry.exam_code = (select exam_code from exam_details where degree_code=@Degcode and current_semester=@Semester and batch_year=@BatchYR)and ltrim(rtrim(exam_appl_details.type))='' and appl_no in (select appl_no from exam_application  where mark_entry.exam_code =(select exam_code from exam_details where degree_code=@Degcode and current_semester=@Semester and batch_year=@BatchYR ) )  order by subject_code execute sp_executesql  @SQL2 select subject_code,subject_name,cast(a as numeric) ,cast(b as numeric),cast(c as numeric),round(b/cast(b+c as numeric)*100,2),d from ##dummy drop table ##dummy ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval17 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'SubjectWiseResults'");
            if (getval15 != "0")
            {
                string drpstrproc = " drop proc SubjectWiseResults ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE PROCEDURE SubjectWiseResults (@Degcode AS numeric,@Semester as numeric,@BatchYR AS NUMERIC )AS  Declare @@SUBNO NUMERIC   Declare @@SUBCODE varchar(30)  Declare @@SUBNAME varchar(30)Declare @@Absent Numeric  Declare @@PASS numeric Declare @@FAIL numeric  declare @sql1 nvarchar(400)   declare @sql2 nvarchar(1000)  declare @@DCode NUMERIC       declare @@TOT NUMERIC select distinct exam_appl_details.subject_no,subject_code, subject_name, (select count(*) from mark_entry where exam_appl_details.subject_no=mark_entry.subject_no and  exam_code=(select exam_code from exam_details where degree_code=@Degcode and current_semester=@Semester and  batch_year=@BatchYR)and result='AAA') as A,(select count(*) from mark_entry where  exam_appl_details.subject_no=mark_entry.subject_no and exam_code=(select exam_code from exam_details where  degree_code=@Degcode and current_semester=@Semester and batch_year=@BatchYR)and result='PASS')as B,(select count(*)  from mark_entry where exam_appl_details.subject_no=mark_entry.subject_no and exam_code=(select exam_code from  exam_details where degree_code=@Degcode and current_semester=@Semester and batch_year=@BatchYR)and result='FAIL')as C  into ##dummy from exam_appl_details,subject,mark_entry  where ltrim(rtrim(mark_entry.type))='' and mark_entry.attempts=1  and exam_appl_details.attempts = 0 and  subject.subject_no = exam_appl_details.subject_no and mark_entry.subject_no=exam_appl_details.subject_no and  exam_code = (select exam_code from exam_details where degree_code=@Degcode and current_semester=@Semester and  batch_year=@BatchYR)and ltrim(rtrim(exam_appl_details.type))='' and appl_no in (select appl_no from exam_application  where exam_code =(select exam_code from exam_details where degree_code=@Degcode and current_semester=@Semester and  batch_year=@BatchYR ) )  order by subject_code execute sp_executesql  @SQL2 select subject_no,subject_code,subject_name, cast(a as numeric) ,cast(b as numeric),cast(c as numeric),round(b/cast(b+c as numeric)*100,2) from ##dummy drop table ##dummy ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval18 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'SubwiseBoysGrils'");
            if (getval18 != "0")
            {
                string drpstrproc = " drop proc SubwiseBoysGrils ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE  procedure SubwiseBoysGrils (@DegCode as numeric,@Sem as Numeric,@Byr as numeric) as  select distinct exam_appl_details.subject_no,subject_code,subject_name,(select count(distinct M.roll_no) from mark_entry as M,Registration as R,applyn as A Where M.exam_code = exam_details.exam_code And exam_appl_details.subject_no = mark_entry.subject_no  and M.roll_no=R.roll_no and A.app_no=R.app_no and Sex=0)as MAPP,(select count(distinct M.roll_no) from mark_entry as M,Registration as R,applyn as A Where M.exam_code = exam_details.exam_code And exam_appl_details.subject_no = mark_entry.subject_no  and M.roll_no=R.roll_no and A.app_no=R.app_no and Sex=1) as FAPP ,  (select count(distinct M.roll_no) from mark_entry as M,Registration as R,applyn as A where M.exam_code =exam_details.exam_code and M.result='Pass'and Exam_appl_details.subject_no=M.subject_no and M.roll_no=R.roll_no and A.app_no=R.app_no and Sex=0) as MPASS ,(select count(distinct M.roll_no) from mark_entry as M,Registration as R,applyn as A where  M.exam_code =exam_details.exam_code and M.result='Pass'and Exam_appl_details.subject_no=M.subject_no and M.roll_no=R.roll_no and A.app_no=R.app_no and Sex=1) as FPASS into ##dummy from exam_appl_details,subject,mark_entry,exam_details,exam_application Where exam_appl_details.attempts = 0 And subject.subject_no = exam_appl_details.subject_no and ltrim(rtrim(exam_appl_details.type))='' and exam_application.roll_no=mark_entry.roll_no and exam_application.exam_code = exam_details.exam_code And exam_appl_details.subject_no = mark_entry.subject_no and exam_appl_details.appl_no = exam_application.appl_no  and exam_details.batch_year=@Byr and exam_details.degree_code = @DegCode and exam_details.current_semester = @Sem order by subject_code select subject_code,subject_name,cast(MAPP as numeric) as Male,cast(FAPP as numeric) as Female ,  cast(MPASS as numeric) as Male,cast(FPASS as numeric) as Female,round((MPASS /cast(MAPP as numeric))*100,2)as Male,round((FPASS/cast(FAPP as numeric))*100,2) as Female from ##dummy drop table ##dummy";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval19 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Kam_ExamSchedule'");
            if (getval19 != "0")
            {
                string drpstrproc = " drop proc Kam_ExamSchedule ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc Kam_ExamSchedule @ExamMonth as int,@ExamYear as int,@BatchYear as int as begin Select * from exam_details where exam_month =@ExamMonth and exam_year=@ExamYear and batch_year=@BatchYear End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval20 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Kam_listOfAppno'");
            if (getval20 != "0")
            {
                string drpstrproc = " drop proc Kam_listOfAppno ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc Kam_listOfAppno @ExamCode as int as begin Select distinct exam_application.appl_no from exam_application,exam_appl_details where exam_application.appl_no = exam_appl_details.appl_no and exam_application.exam_code=@ExamCode End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval21 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Kam_SubjectInfo'");
            if (getval21 != "0")
            {
                string drpstrproc = " drop proc Kam_SubjectInfo ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc Kam_SubjectInfo @ExamIntCode as int as begin Select distinct exam_appl_Details.subject_no,subject.subject_name,subject_code,subject_type,sub_sem.subtype_no from exam_appl_details,exam_application,subject,sub_sem where exam_appl_details.subject_no = subject.subject_no and subject.subType_no = sub_sem.subType_no and subject.syll_code = sub_sem.syll_code and exam_application.exam_code=@ExamIntCode and exam_application.appl_no = exam_appl_details.appl_no and Exam_type=0 and ltrim(rtrim(type))='' order by sub_sem.subtype_no,subject_code End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval22 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Kam_MarkEntryInfo'");
            if (getval22 != "0")
            {
                string drpstrproc = " drop proc Kam_MarkEntryInfo ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc Kam_MarkEntryInfo @ExamCode as int,@Subjectno as int as begin Select * from Mark_entry where exam_Code=@ExamCode and SubjecT_no=@Subjectno and ltrim(rtrim(type))='' End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval23 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Kam_SubjectMaxInt'");
            if (getval22 != "0")
            {
                string drpstrproc = " drop proc Kam_SubjectMaxInt ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc Kam_SubjectMaxInt @DegreeCode as int,@BatchYear as int as begin Select S.Subject_Code, S.Subject_no, S.max_int_marks,SS.Subject_Type from Subject as s, Sub_Sem as ss ,Syllabus_Master as SMas where SMas.Syll_Code = S.Syll_Code and SMas.Syll_Code = SS.Syll_Code and  SS.Syll_Code = S.Syll_Code and S.SubType_no = SS.Subtype_no and SS.Promote_Count = 1 and SMas.Degree_Code = @DegreeCode and SMas.Batch_Year =@BatchYear and SMas.Semester = 1 order by SS.SubType_No End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval24 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'kam_IntMarks'");
            if (getval24 != "0")
            {
                string drpstrproc = " drop proc kam_IntMarks ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc kam_IntMarks @subjectno as int,@ExamCode as int as begin Select internal_mark as markobt, roll_no from mark_entry where subject_no =@Subjectno and Exam_Code = @ExamCode end";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval25 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'OverallPerc'");
            if (getval25 != "0")
            {
                string drpstrproc = " drop proc OverallPerc ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create procedure OverallPerc (@Degcode AS numeric,@Semester as numeric,@BatchYR AS NUMERIC) as select ( select count(*) from exam_application where exam_type=0 and exam_code =(select exam_code from exam_details where degree_code = @Degcode and batch_year = @BatchYR and current_semester = @Semester))as A,(select count(distinct roll_no) from mark_entry where attempts=1 and ltrim(rtrim(type))='' and exam_code = (select exam_code from exam_details where degree_code=@Degcode and   current_semester=@Semester and batch_year=@BatchYR)) as B, count(distinct roll_no) as C into ##dummy from mark_entry where exam_code = (select exam_code from exam_details where degree_code = @Degcode and batch_year = @BatchYR and current_semester = @Semester ) and roll_no not in (select distinct roll_no from mark_entry where exam_code =(select exam_code from exam_details where degree_code = @Degcode and batch_year = @BatchYR and current_semester = @Semester) and result <> 'Pass' and attempts = 1)  select a,b,c,(case when c>0 then round((c/cast(b as numeric))*100,2) end ) from ##dummy drop table ##dummy";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval26 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'OverallPerc'");
            if (getval26 != "0")
            {
                string drpstrproc = " drop proc OverallPerc ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE procedure OverallPerc (@Degcode AS numeric,@Semester as numeric,@BatchYR AS NUMERIC) as select ( select count(*) from exam_application where exam_type=0 and exam_code =(select exam_code from exam_details where degree_code = @Degcode and batch_year = @BatchYR and   current_semester = @Semester))as A,(select count(distinct roll_no) from mark_entry where attempts=1 and ltrim(rtrim(type))='' and exam_code = (select exam_code from exam_details where degree_code=@Degcode and   current_semester=@Semester and batch_year=@BatchYR)) as B, count(distinct roll_no) as C into ##dummy from mark_entry where exam_code = (select exam_code from exam_details where degree_code = @Degcode and batch_year = @BatchYR and current_semester = @Semester ) and roll_no not in (select distinct roll_no from mark_entry where exam_code =(select exam_code from exam_details where degree_code = @Degcode and batch_year = @BatchYR and current_semester = @Semester) and result <> 'Pass' and attempts = 1)  select a,b,c,(case when c>0 then round((c/cast(b as numeric))*100,2) end ) from ##dummy drop table ##dummy";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval27 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'CONSMRKREP'");
            if (getval27 != "0")
            {
                string drpstrproc = " drop proc CONSMRKREP ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE PROCEDURE CONSMRKREP (@ROLLNO AS nvarchar(200),@Semester as numeric,@EXAMCODE as nvarchar(200) )AS declare @ExCDE as nvarchar(200) declare @Sql as nvarchar(2500) declare @RES as nvarchar(200) Set @RES='Pass' Set @ExCDE=  @EXAMCODE set @sql='select syllabus_master.semester,type,subject.subject_code,subject.subject_name,(select exam_month from exam_details where exam_code=me.exam_code) ,case when markorgrade=0 then max_int_marks else null end,case when markorgrade=0 then min_int_marks else null end,case when markorgrade=0 then internal_mark else null end,case when markorgrade=0 then max_ext_marks else null end,case  &   when markorgrade=0 then min_ext_marks else null end,case when markorgrade=0 then external_mark else null end,case when markorgrade=0 then maxtotal else null end,case when markorgrade=0 then mintotal else null end,case when markorgrade=0 then total else null end, case when markorgrade=0 then result else remarks end ,isnull(markorgrade,0), roll_no,subject.subtype_no,subject.subject_no,me.exam_code,subject.credit_points from mark_entry as me,subject,sub_sem,syllabus_master where sub_sem.subtype_no=subject.subtype_no and total <= maxtotal and internal_mark <= max_int_marks and external_mark <= max_ext_marks and result='+''''+ @RES +''' and syllabus_master.syll_code = subject.syll_code and subject.subject_no=me.subject_no and syllabus_master.semester= '+ convert(nvarchar(5), @Semester) +' and me.exam_code in' execute (@SQl+@ExCDE)";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval28 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'appearcount'");
            if (getval28 != "0")
            {
                string drpstrproc = " drop proc appearcount ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure appearcount @Cyear int,@Cdegree int,@csem int,@seat varchar(20) as select count(distinct m.roll_no) from applyn, registration ,mark_entry m where m.attempts = 1 and registration.app_no=applyn.app_no and seattype=(select textcode from textvaltable where textval=@seat and textcriteria='seat') and registration.roll_no=m.roll_no and ltrim(rtrim(type))='' and exam_code = (select exam_code from exam_details where degree_code=@Cdegree and current_semester=@csem and batch_year=@Cyear)";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval29 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'passedcount'");
            if (getval29 != "0")
            {
                string drpstrproc = " drop proc passedcount ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure passedcount @seat varchar(20),@Cyear int,@ecode int ,@TotPapers int as select registration.roll_no,count(registration.roll_no)  from applyn, registration,mark_entry where registration.roll_no = mark_entry.roll_no and registration.app_no=applyn.app_no and seattype=(select textcode from textvaltable where textval=@seat and textcriteria='seat')and cc=0 and delflag=0 and exam_flag<>'DEBAR' and ltrim(rtrim(type))='' and mark_entry.attempts=1  and  exam_code in ( @ecode) and result='pass' and registration.batch_year= @Cyear  group by registration.roll_no having count(registration.roll_no)=@TotPapers";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval30 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'appearcount1'");
            if (getval30 != "0")
            {
                string drpstrproc = " drop proc appearcount1 ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure appearcount1 @Cyear int,@Cdegree int,@csem int,@seat varchar(20),@seat1 varchar(20) as select count(distinct m.roll_no) from applyn, registration ,mark_entry m where m.attempts = 1 and registration.app_no=applyn.app_no and medium_ins=(select textcode from textvaltable where textval in(@seat,@seat1) and textcriteria='medi') and registration.roll_no=m.roll_no and ltrim(rtrim(type))='' and exam_code = (select exam_code from exam_details where degree_code=@Cdegree and current_semester=@csem and batch_year=@Cyear)";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            string getval31 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'passedcount1'");
            if (getval31 != "0")
            {
                string drpstrproc = " drop proc passedcount1 ";
                if (drpstrproc != "")
                {
                    int drpproc = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure passedcount1 @seat varchar(20),@seat1 varchar(20),@Cyear int,@ecode int ,@TotPapers int as select registration.roll_no,count(registration.roll_no)  from applyn, registration,mark_entry where registration.roll_no = mark_entry.roll_no and registration.app_no=applyn.app_no and medium_ins=(select textcode from textvaltable where textval in(@seat,@seat1) and textcriteria='medi')and cc=0 and delflag=0 and exam_flag<>'DEBAR' and ltrim(rtrim(type))='' and mark_entry.attempts=1  and  exam_code in ( @ecode) and result='pass' and registration.batch_year= @Cyear  group by registration.roll_no having count(registration.roll_no)=@TotPapers";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void hrstorproc()
    {
        try
        {
            string hrstrproc = string.Empty;
            string gethrstorval = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'st_staffphotoconversion'");
            if (gethrstorval != "0")
            {
                string drpstrproc = " drop proc st_staffphotoconversion ";
                if (drpstrproc != "")
                {
                    int sotre = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            hrstrproc = " create procedure st_staffphotoconversion @deptcode  varchar(20) = null as begin if (@deptcode is null) begin SELECT distinct staffmaster.staff_code, staffmaster.staff_name FROM staffmaster INNER JOIN stafftrans ON staffmaster.staff_code = stafftrans.staff_code INNER JOIN hrdept_master ON stafftrans.dept_code = hrdept_master.dept_code Where (stafftrans.latestrec <> 0) And (staffmaster.resign = 0) and (staffmaster.settled = 0)End Else begin SELECT distinct staffmaster.staff_code, staffmaster.staff_name FROM staffmaster INNER JOIN stafftrans ON staffmaster.staff_code = stafftrans.staff_code INNER JOIN hrdept_master ON stafftrans.dept_code = hrdept_master.dept_code Where (stafftrans.latestrec <> 0) And (staffmaster.resign = 0) and  (staffmaster.settled = 0) and (hrdept_master.dept_code = @deptcode)End End ";
            if (hrstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(hrstrproc, "Text");
            }
            hrstrproc = string.Empty;
            string gethrstorval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'UpdateStaffCode'");
            if (gethrstorval != "0")
            {
                string drpstrproc = " drop proc UpdateStaffCode ";
                if (drpstrproc != "")
                {
                    int sotre = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            hrstrproc = " CREATE proc UpdateStaffCode @NewSCode as nvarchar(15) , @OldSCode as nvarchar(15) as Update assesment set staff_code=@NewScode where staff_code=@OldSCode Update  individual_paymaster set staff_code= @NewSCode where staff_code= @OldSCode update individual_incentives set staff_code= @NewSCode where staff_code= @OldSCode update usermaster set staff_code= @NewSCode where staff_code=@OldSCode update dailyentdet set staff_code=@NewSCode where staff_code= @OldSCode update vaccation_leave set staff_code= @NewSCode  where staff_code= @OldSCode update staff_conduct set staff_code= @NewSCode where staff_code= @OldSCode  update hostel_staff_fee set staff_code= @NewSCode where staff_code= @OldSCode  update gate_Staff set staff_code= @NewSCode where staff_code= @OldSCode  update staff_list set staff_code= @NewSCode where staff_code= @OldSCode  update specialhr_details set staff_code= @NewSCode where staff_code= @OldSCode  update ind_visit set staff_code= @NewSCode where staff_code= @OldSCode update staff_master_igno set staff_code= @NewSCode where staff_code= @OldSCode  update HStaff_Registration set staff_code=@NewScode where staff_code= @OldSCode update ITCalculation set staff_code= @NewSCode where staff_code= @OldSCode Update Exam_type set staff_code= @NewSCode where staff_code= @OldSCode update GuestEntry set staff_code= @NewSCode where staff_code= @OldSCode update staff_attnd set staff_code= @NewSCode where staff_code= @OldSCode  update staff_leave_details set staff_code= @NewSCode where staff_code= @OldSCode update monthlypay set staff_code= @NewSCode where staff_code= @OldSCode update individual_pfslabs set staff_code= @NewSCode where staff_code= @OldSCode update el_details set staff_code= @NewSCode where staff_code= @OldSCode update priority_studstaff set staff_code = @NewSCode where staff_code= @OldSCode update spl_add_deduct set staff_code= @NewSCode where staff_code= @OldSCode update holiday_work set staff_code= @NewSCode where staff_code= @OldSCode update stafftrans set staff_code= @NewSCode where staff_code= @OldSCode update comp_details set staff_code= @NewSCode where staff_code= @OldSCode update LabAlloc set staff_code= @NewSCode where staff_code= @OldSCode update Staff_Invigilation set staff_code= @NewSCode where staff_code= @OldSCode update lic_det set staff_code= @NewSCode where staff_code= @OldSCode  update staffloan set staff_code= @NewSCode where staff_code= @OldSCode update classlogbook set staff_code= @NewSCode where staff_code= @OldSCode update staffmaster set staff_code= @NewSCode where staff_code= @OldSCode update StaffPhoto set staff_code= @NewSCode where staff_code= @OldSCode update Transport_staff set staff_code= @NewSCode where staff_code= @OldSCode update staffdatasht set staff_code= @NewSCode where staff_code= @OldSCode update staff_selector set staff_code=@NewSCode where staff_code= @OldSCode update lessonPlanTopics set staff_code= @NewSCode where staff_code= @OldSCode update Education_tour set staff_code= @NewSCode where staff_code= @OldSCode update Staff_Meals set staff_code= @NewSCode where staff_code= @OldSCode update staff_personal_reg set staff_code= @NewSCode where staff_code= @OldSCode update Hostel_Staffs set staff_code= @NewSCode where staff_code= @OldSCode update Carryover set staff_code= @NewSCode where staff_code= @OldSCode  update nonmembers set staff_code= @NewSCode  where staff_code= @OldSCode";
            if (hrstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(hrstrproc, "Text");
            }
            hrstrproc = string.Empty;
            string gethrstorval2 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_getstaff'");
            if (gethrstorval2 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_getstaff ";
                if (drpstrproc != "")
                {
                    int sotre = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            hrstrproc = " Create PROCEDURE Ins_Stu_getstaff @bldgroup as varchar(20),@collegecode as varchar(10)as select staffmaster.staff_code,staffmaster.staff_name,desig_master.desig_name,hrdept_master.dept_name,comm_address as address From staff_appl_master, staffmaster, stafftrans, desig_master, hrdept_master where staffmaster.appl_no=staff_appl_master.appl_no and staff_appl_master.college_code=staffmaster.college_code and staffmaster.staff_code=stafftrans.staff_code and stafftrans.latestrec=1 and staff_appl_master.bldgrp like @bldgroup and staff_appl_master.college_code = hrdept_master.college_code And staff_appl_master.college_code = desig_master.collegecode  and stafftrans.dept_code=hrdept_master.dept_code and stafftrans.desig_code=desig_master.desig_code and resign=0 and settled=0 and staff_appl_master.college_code=@collegecode order by staffmaster.staff_code";
            if (hrstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(hrstrproc, "Text");
            }
            hrstrproc = string.Empty;
            string gethrstorval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_getstaff'");
            if (gethrstorval3 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_getstaff ";
                if (drpstrproc != "")
                {
                    int sotre = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            hrstrproc = " CREATE PROC UpdateStaffCode  @NewSCode as nvarchar(50),  @OldSCode as nvarchar(50) AS  Update Education_tour SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update program_staff SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update program_Mgmtstudent SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update sponser_Hierarchy SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update staff_feedback SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update Mgmtstudent_feedback SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update staff_selfapp SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update el_details SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update comp_details SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update Staff_Finger SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update Hostel_Details SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update classlogbook SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update vaccation_leave SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update staffmaster SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update stafftrans SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update staff_conduct SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update hostel_staff_fee SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update staff_master_igno SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update HStaff_Registration SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update StaffPhoto SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update BankTransaction SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update CriteriaLock SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update questionparts SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update template_settings SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update assesment SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update staffdatasht SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update staff_selector SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update dailytransaction SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update Exam_type SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update LabAlloc_New SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update UploadStaff_Details SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update lessonPlanTopics SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update CPAction SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update SubjectOption SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update StaffAppraisal SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update StaffAppraisalLink SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update GuestEntry SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update dailyentdet SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update individual_paymaster SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update individual_incentives SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update individual_pfslabs SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update LabAlloc SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update ind_visit SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update StaffLOP_Details SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update dailytransaction_others SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update inventory_master SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update TTStaffPriority SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update specialhr_details SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update TTStaffIndSchedule SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update holiday_work SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update Participants_Staff SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update staff_attnd SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update staff_leave_details SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update organzise SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update participate SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update Staff_Meals SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update staff_personal_reg SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update individual_Leave_type SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update intrim SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update staff_asset SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update MaterialUsage_Tbl SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update staff_cheque SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update staff_pay SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update monthlypay SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update Hostel_Staffs SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode Update Carryover SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update inteviewer SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update Requisition_Hierarchy SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update priority_studstaff SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update staff_appraisal_det SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update Staff_Invigilation SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update spl_add_deduct SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update organzise_new SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update appr_ques SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update purchaseorder_Hierarchy SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update participate_new SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update staff_long_leave SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update nonmembers SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update ITCalculation SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update cancelrcpt SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update Pay_setting SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update Breakage_Register SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update lic_det SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update gate_Staff SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update staffloan SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update cert_staff_list SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update staff_list SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update Transport_staff SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update UserMaster SET Staff_Code =@NewSCode WHERE Staff_Code =@OldSCode  Update miscelineous SET StaffCode =@NewSCode WHERE StaffCode =@OldSCode  Update PFPrevDet SET StaffCode =@NewSCode WHERE StaffCode =@OldSCode  Update HrNominee SET StaffCode =@NewSCode WHERE StaffCode =@OldSCode  Update RemittanceEntry SET StaffCode =@NewSCode WHERE StaffCode =@OldSCode  Update HODeve SET StaffCode =@NewSCode WHERE StaffCode =@OldSCode  Update OtherEvaluvation SET StaffCode =@NewSCode WHERE StaffCode =@OldSCode  Update CompetentMatrix SET StaffCode =@NewSCode WHERE StaffCode =@OldSCode  Update annualtraining SET StaffCode =@NewSCode WHERE StaffCode =@OldSCode  Update Borrow SET Roll_No =@NewSCode WHERE Roll_No =@OldSCode AND Is_Staff = 1  Update TokenDetails SET Roll_No =@NewSCode WHERE Roll_No =@OldSCode AND Is_Staff = 1  Update Lib_Master SET Code =@NewSCode WHERE Code =@OldSCode AND Is_Staff = 1  Update Fine_Details SET Roll_No =@NewSCode WHERE Roll_No =@OldSCode AND Is_Staff = 1 ";
            if (hrstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(hrstrproc, "Text");
            }
            hrstrproc = string.Empty;
            string getstaff_holiday = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'get_staff_holiday'");
            if (gethrstorval2 != "0")
            {
                string drpstrproc = " drop proc get_staff_holiday ";
                if (drpstrproc != "")
                {
                    int sotre = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            hrstrproc = " create procedure [dbo].[get_staff_holiday]( @fromdate datetime, @todate datetime, @category_code nvarchar(100) ) as begin declare @count_holi nvarchar(100) select @count_holi=  count(*)  from holidaystaff where category_code=@category_code and convert(varchar(20), holiday_date,101)  between @fromdate and @todate if(@count_holi>0) begin select distinct holiday_date,holiday_desc from holidaystaff where category_code=@category_code and convert(varchar(20), holiday_date,101)  between @fromdate and @todate order by holiday_date End Else begin select distinct holiday_date,holiday_desc from holidaystaff where category_code=@category_code and convert(varchar(20), holiday_date,101)=@fromdate and convert(varchar(20), holiday_date,101)>@todate order by holiday_date End End";
            if (hrstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(hrstrproc, "Text");
            }
            hrstrproc = string.Empty;
            string Ins_Stugetstaff = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_getstaff'");
            if (Ins_Stugetstaff != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_getstaff ";
                if (drpstrproc != "")
                {
                    int sotre = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            hrstrproc = " Create Procedure [dbo].[Ins_Stu_getstaff] @bldgroup as varchar(20),@collegecode as varchar(10) as select staffmaster.staff_code,staffmaster.staff_name,desig_master.desig_name,hrdept_master.dept_name, comm_address as address,per_mobileno AS mobile From staff_appl_master, staffmaster, stafftrans, desig_master, hrdept_master Where staffmaster.appl_no = staff_appl_master.appl_no And staff_appl_master.college_code = staffmaster.college_code and staffmaster.staff_code=stafftrans.staff_code and stafftrans.latestrec=1 and staff_appl_master.bldgrp like @bldgroup and staff_appl_master.college_code = hrdept_master.college_code And staff_appl_master.college_code = desig_master.collegecode and stafftrans.dept_code=hrdept_master.dept_code and stafftrans.desig_code=desig_master.desig_code and resign=0 and settled=0 and staff_appl_master.college_code=@collegecode order by staffmaster.staff_code";
            if (hrstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(hrstrproc, "Text");
            }
            hrstrproc = string.Empty;
            string InsStugetstuval = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_getstuval'");
            if (InsStugetstuval != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_getstuval ";
                if (drpstrproc != "")
                {
                    int sotre = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            hrstrproc = " Create Procedure [dbo].[Ins_Stu_getstuval] @bldgroup as varchar(20),@collegecode as varchar(10) as select registration.roll_no,registration.stud_name,course_name + ' - ' + dept_name as degree,registration.batch_year, parent_addressC,parentF_Mobile AS fMOBILE,parentM_Mobile AS MMOBILE,Student_Mobile  from applyn,registration,degree,course,department where bldgrp like @bldgroup and applyn.app_no=registration.app_no and delflag=0 and cc=0 and registration.degree_code = degree.degree_code And degree.college_code =@collegecode And degree.course_id = Course.course_id and degree.dept_code =department.dept_code and degree.college_code=department.college_code and degree.college_code=course.college_code order by registration.batch_year,roll_no";
            if (hrstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(hrstrproc, "Text");
            }
            hrstrproc = string.Empty;
            InsStugetstuval = string.Empty;
            InsStugetstuval = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_getstuval'");
            if (InsStugetstuval != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_getstuval ";
                if (drpstrproc != "")
                {
                    int sotre = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            hrstrproc = " Create Procedure [dbo].[Ins_Stu_getstudet] @bldgroup as varchar(20),@collegecode as varchar(10)as select registration.roll_no,registration.stud_name, course_name + ' - ' + dept_name as degree,registration.batch_year,parent_addressC,parentF_Mobile AS fMOBILE,parentM_Mobile AS MMOBILE,Student_Mobile from applyn,registration,degree, course,department where bldgrp like @bldgroup and applyn.app_no=registration.app_no and delflag=0 and Registration.degree_code = degree.degree_code And degree.college_code =@collegecode And degree.course_id = Course.course_id and degree.dept_code=department.dept_code and degree.college_code=department.college_code and degree.college_code=course.college_code order by registration.batch_year,roll_no";
            if (hrstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(hrstrproc, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void question()
    {
        try
        {
            string creat_questions = string.Empty;
            string getquestionval = string.Empty;
            getquestionval = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='attendance_question_addition'");
            if (getquestionval == "0")
            {
                creat_questions = " CREATE TABLE [dbo].[attendance_question_addition]( [batch_year] [int] NULL, [degree_code] [int] NULL, [semester] [int] NULL, [subject_no] [int] NULL, [date] [datetime] NULL, [question] [varchar](300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [marks] [int] NULL, [qtn] [int] IDENTITY(1,1) NOT NULL, [treeviewpath] [varchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ) ON [PRIMARY]";
            }
            getquestionval = string.Empty;
            getquestionval = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='attendance_document_save'");
            if (getquestionval == "0")
            {
                creat_questions = creat_questions + "  CREATE TABLE [dbo].[attendance_document_save]( [batch_year] [int] NULL, [degree_code] [int] NULL, [semester] [int] NULL, [subject_no] [int] NULL, [date] [datetime] NULL, [path] [varchar](300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [treeview] [varchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL ) ON [PRIMARY]";
            }
            getquestionval = string.Empty;
            getquestionval = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='questionaddition'");
            if (getquestionval == "0")
            {
                creat_questions = creat_questions + "  CREATE TABLE [dbo].[questionaddition]( [question_no] [int] IDENTITY(1,1) NOT NULL, [question] [varchar](300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [choices] [varchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [correct_ans] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [subject_no] [int] NULL, [treepath] [varchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [batch_year] [int] NULL, [degree_code] [int] NULL, [semester] [int] NULL, [toughness] [varchar](40) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [collegecode] [int] NULL ) ON [PRIMARY]";
            }
            getquestionval = string.Empty;
            getquestionval = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ExamSchedulePreparation_randomQuestions'");
            if (getquestionval == "0")
            {
                creat_questions = creat_questions + "  CREATE TABLE [dbo].[ExamSchedulePreparation_randomQuestions]( [type] [int] NULL, [Exam_date] [datetime] NULL, [Exam_time] [datetime] NULL, [Duration] [datetime] NULL, [Exam_name] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [batch_year] [int] NULL, [degree_code] [int] NULL, [Semester] [int] NULL, [collegecode] [int] NULL ) ON [PRIMARY]";
            }
            getquestionval = string.Empty;
            getquestionval = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='questionrandom_generation'");
            if (getquestionval == "0")
            {
                creat_questions = creat_questions + "  CREATE TABLE [dbo].[questionrandom_generation]( [batch_year] [int] NULL, [degree_code] [int] NULL, [semester] [int] NULL, [subject_no] [int] NULL, [treepath] [varchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [exam_name] [varchar](150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [pattern] [int] NULL, [eachtestqtn] [int] NULL, [copies] [int] NULL, [question_no] [int] NULL, [question] [varchar](300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [choices] [varchar](300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [correct_ans] [varchar](200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL, [toughness] [int] NULL, [collegecode] [int] NULL, [type] [int] NULL ) ON [PRIMARY]";
            }
            if (creat_questions != "")
            {
                int creatquestion = d2.update_method_wo_parameter(creat_questions, "Text");
            }
            alertmessage.Visible = true;
            lbl_alerterror.Text = " Updated Successfully";
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void storpr()
    {
        try
        {
            //storepor=acd 2
            string creatstrproc = string.Empty;
            string getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'monthandyear'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc monthandyear ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE proc monthandyear @dat as datetime as set nocount on begin select datepart(month,@dat),datepart(year,@dat) end";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'deginfo'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc deginfo ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc deginfo @ccode as integer as set nocount on begin Select course_name +' - '+dept_name,Degree_Code,a.Course_id,acronym,course_name from course a,department b,degree c where c.college_code=@ccode and a.college_code=c.college_code and b.college_code=c.college_code and a.course_id=c.course_id and b.dept_code=c.dept_code order by degree_code End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'byear_csem'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc byear_csem ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc byear_csem @dcode as integer,@odd as bit as set nocount on begin if @odd = 1 begin Select distinct Batch_year,Current_Semester,sections from registration where degree_code=@dcode and cc=0 and delflag=0 and current_semester % 2<>0  and exam_flag<>'DEBAR' order by current_semester End Else begin Select distinct Batch_year,Current_Semester,sections from registration where degree_code=@dcode and cc=0 and delflag=0 and current_semester % 2 =0  and exam_flag<>'DEBAR' order by current_semester End End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'psch'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc psch ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc psch @dcode as integer, @sem as integer as set nocount on begin select * from periodattndschedule where degree_code=@dcode and semester=@sem End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'st_rejoindisplay'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc st_rejoindisplay ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure st_rejoindisplay @listcat varchar(20), @debarreason varchar(20), @batchyear int, @coursecode numeric = null, @semester int = null as begin if (@listcat ='wait')if (@coursecode is null)begin select 0,roll_no,reg_no,stud_name,degree_code,exam_flag,batch_year from registration where batch_year=@batchyear and RollNo_Flag<>0 and cc=0 and exam_flag = 'DEBAR'and debar_reason=@debarreason order by roll_no end Else begin select 0,roll_no,reg_no,stud_name,exam_flag,batch_year From registration where degree_code=@coursecode and current_semester=@semester and batch_year = @batchyear and RollNo_Flag<>0 and cc=0 and exam_flag = 'DEBAR'and debar_reason=@debarreason order by roll_no End else if @listcat ='Rejoin'  if (@coursecode is null)begin select 1,registration.roll_no,reg_no,stud_name,degree_code,exam_flag,batch_year From registration, rejoin_list Where registration.roll_no = rejoin_list.roll_no And rejoin_list.semester = registration.current_semester and rejoin_list.newBatchYear=registration.batch_year and RollNo_Flag<>0 and exam_flag <> 'DEBAR' and cc=0 and debar_reason=@debarreason and batch_year= @batchyear  order by registration.roll_no End Else begin select 1,registration.roll_no,reg_no,stud_name,exam_flag,batch_year From registration, rejoin_list Where registration.roll_no = rejoin_list.roll_no And rejoin_list.semester = registration.current_semester and rejoin_list.newBatchYear=registration.batch_year and degree_code=@CourseCode  and current_semester=@semester and  batch_year =@batchyear and RollNo_Flag<>0 and exam_flag <> 'DEBAR' and cc=0 and debar_reason=@debarreason  order by registration.roll_no End else if (@coursecode is null) begin     select 0,roll_no,reg_no,stud_name,degree_code,exam_flag,batch_year from registration where batch_year=@batchyear and RollNo_Flag<>0 and cc=0 and exam_flag = 'DEBAR'and debar_reason=@debarreason Union select 1,registration.roll_no,reg_no,stud_name,degree_code,exam_flag,batch_year From registration, rejoin_list Where registration.roll_no = rejoin_list.roll_no And rejoin_list.semester = registration.current_semester and rejoin_list.newBatchYear=registration.batch_year and RollNo_Flag<>0 and  exam_flag <> 'DEBAR' and cc=0 and debar_reason=@debarreason and batch_year= @batchyear order by registration.roll_no End Else begin select 0,roll_no,reg_no,stud_name,exam_flag,batch_year From registration where degree_code=@coursecode and current_semester=@semester and batch_year = @batchyear and RollNo_Flag<>0 and cc=0 and exam_flag = 'DEBAR'and debar_reason=@debarreason Union select 1,registration.roll_no,reg_no,stud_name,exam_flag,batch_year From registration, rejoin_list Where registration.roll_no = rejoin_list.roll_no And rejoin_list.semester = registration.current_semester and rejoin_list.newBatchYear=registration.batch_year and degree_code=@CourseCode  and current_semester=@semester and  batch_year =@batchyear and RollNo_Flag<>0 and exam_flag <> 'DEBAR' and cc=0 and debar_reason=@debarreason order by registration.roll_no End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'st_parentsmeeting'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc st_parentsmeeting ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE procedure st_parentsmeeting @coursecode numeric,@semdec int,@batchyear int,@strsec varchar(200)as begin if (@strsec = '') begin Select * from registration where degree_code=@CourseCode  and current_semester=@SemDec and batch_year=@Batchyear  and cc=0 and delflag=0 and exam_flag<>'DEBAR' End Else begin set @strsec='Select * from registration where degree_code=' + convert(varchar(5),@CourseCode) + ' and current_semester=' + convert(varchar(5),@SemDec) + 'and batch_year=' + convert(varchar(5),@Batchyear) + '  and exam_flag<>''DEBAR''' + @strsec + '  and cc=0 and delflag=0' exec (@strsec) End End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'st_semresult'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc st_semresult ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure st_semresult @collegecode  numeric as begin select degree_code,duration,First_Year_Nonsemester from degree where college_code=@collegecode End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'st_rejoinsave1'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc st_rejoinsave1 ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure st_rejoinsave1 @semester smallint,@regnum smallint as begin select roll_no,semester,newbatchYear,oldbatchyear from rejoin_list where semester =@semester and oldbatchyear= @regnum End  ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'st_studphotolist'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc st_studphotolist ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE procedure st_studphotolist @batchyear int,@coursecode numeric,@semester int,@strsec varchar(600)as begin if @strsec ='' select registration.reg_no,registration.roll_no,registration.stud_name,applyn.app_no From registration, applyn Where registration.app_no = applyn.app_no And registration.delflag = 0 and registration.degree_code=@coursecode and registration.current_semester=@semester and registration.batch_year=@batchyear and cc=0 and exam_flag<>'DEBAR' order by registration.stud_name,roll_no Else begin print @strsec  set @strsec='select registration.reg_no,registration.roll_no, registration.stud_name , applyn.app_no From registration, applyn Where registration.app_no = applyn.app_no And registration.delflag = 0 and registration.degree_code= ' + convert(varchar(5),@coursecode) + ' and registration.current_semester= ' + convert(varchar(5),@semester) + ' and registration.batch_year= '+ convert (varchar(5),@batchyear) + ' and cc=0 and exam_flag<>''DEBAR''' + @strsec + ' order by registration.stud_name,roll_no' exec (@strsec) End End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'st_studphotoconversion'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc st_studphotoconversion ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE  Procedure st_studphotoconversion @coursecode numeric,@semester int,@batchyear int,@strsec varchar(1000)as begin if (@strsec = '') select registration.reg_no,registration.roll_no,registration.stud_name,applyn.app_no, case when applyn.sex=1 then 'Female' when applyn.sex=0 then 'Male' else '' end as sex From registration, applyn, degree Where degree.degree_code = registration.degree_code and applyn.degree_code=degree.degree_code and registration.app_no=applyn.app_no  and registration.delflag=0 and registration.degree_code= @coursecode and registration.current_semester=@semester and registration.batch_year=@batchyear and cc=0 and exam_flag<>'DEBAR'order by registration.stud_name,roll_no Else begin set @strsec ='select registration.reg_no,registration.roll_no,registration.stud_name,applyn.app_no,case when applyn.sex=1 then  ''Female''  when applyn.sex=0 then ''Male''  else '''' end as sex From registration, applyn, degree Where degree.degree_code = registration.degree_code  and applyn.degree_code=degree.degree_code and registration.app_no=applyn.app_no and registration.delflag=0 and registration.degree_code= '+ convert (varchar(5),@coursecode)+ ' and registration.current_semester= ' + convert(varchar(5),@semester)+' and registration.batch_year= ' + convert(varchar(5),@batchyear) +' and cc=0 and exam_flag<>''DEBAR'' ' + @strsec + ' order by registration.stud_name,roll_no'exec (@strsec) End End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ABSReport'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc ABSReport ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE procedure ABSReport (@DeptCode as numeric,@BatchYear as numeric,@EDlevel as nvarchar(2),@Semester as numeric,@ColCode as numeric,@Sec as nvarchar(5)=null) as Declare @Sql1 as nvarchar(500) Declare @SQL2 as nvarchar(4000) if(@Sec<>'') begin set  @SQL1='and r.sections='''+ @Sec +''' order by r.degree_code,r.roll_no,r.sections 'End if(@Sec='') begin set  @SQL1='order by r.degree_code,r.roll_no,r.sections 'End set @SQL2=' Select distinct r.degree_code ,r.roll_no , r.current_semester,r.sections from registration r,degree d,department dpt,course c  where d.dept_code =  '+convert(nvarchar(5), @DeptCode) + ' and r.batch_year = '+ convert(nvarchar(5),@BatchYear) +' and cc = 0 and delflag = 0 and exam_flag <> ''debar'' and c.edu_level='''+ @EDlevel+''' and Current_Semester = '+ convert(nvarchar(5), @Semester) +' and d.dept_code = dpt.dept_code and d.course_id = c.course_id and d.college_code = dpt.college_code and  c.college_code = d.college_code  and r.degree_code = d.degree_code and  d.college_code  = '+ convert(nvarchar(5),@ColCode) + ''+ @sql1 execute(@SQL2)";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'AbsReport_Getinformation'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc AbsReport_Getinformation ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE procedure AbsReport_Getinformation (@DeptCode as numeric,@BatchYear as numeric, @EDlevel as nvarchar(2),@Semester as numeric,@ColCode as numeric,@Sec as nvarchar(5)=null,@FMONYR as numeric,@TMONYR as numeric) as Declare @Sql1 as nvarchar(500) Declare @SQL2 as nvarchar(4000) if(@Sec<>'')begin set  @SQL1='and r.sections='''+ @Sec +'''' print @Sec End print @SQL1 print @SQL2 set @SQL2='Select r.degree_code ,r.current_semester, A.Roll_No, A.* from registration r,degree d, department dpt,course c, Attendance A  where d.dept_code ='+convert(nvarchar(5), @DeptCode) + ' and r.batch_year ='+ convert(nvarchar(5),@BatchYear) +' and cc = 0 and delflag = 0 and exam_flag <> '' debar '' and c.edu_level='''+ @EDlevel + ''' and Current_Semester ='+ convert(nvarchar(5), @Semester) +' and d.dept_code = dpt.dept_code and d.course_id = c.course_id  and d.college_code = dpt.college_code and c.college_code = d.college_code  and  r.degree_code = d.degree_code and d.college_code  = '+ convert(nvarchar(5),@ColCode) +' And A.Roll_No = R.Roll_No and A.Month_year between '+ convert(nvarchar(5),@FMONYR)+' And '+ convert(nvarchar(5),@TMONYR) +' '+@SQL1 execute (@SQL2)";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sel_batch_yearo'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc sel_batch_yearo ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE proc sel_batch_yearo @byear as numeric  as  set nocount on  begin  select distinct batch_year from registration  where current_semester % 2<>0 and cc=0 and batch_year<=@byear order by batch_year desc end";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sel_batch_yeare'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc sel_batch_yeare ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE proc sel_batch_yeare @byear as numeric  as  set nocount on begin  select distinct batch_year from registration  where current_semester % 2=0 and cc=0 and batch_year<=@byear order by batch_year desc end";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sel_batch_yearcourse'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc sel_batch_yearcourse ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE proc sel_batch_yearcourse @byear as numeric,  @ccode as numeric  as  set nocount on  begin  select distinct registration.degree_code,course_name + ' - ' + degree.acronym  as course from registration,degree,course where registration.degree_code=degree.degree_code and  batch_year=@byear and cc=0 and degree.college_code=@ccode and degree.course_id= course.course_id order by registration.degree_code end";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_loadbranch'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_loadbranch ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_loadbranch @degreecode as varchar(5), @Batchyear as varchar(8) as select distinct Acronym,degree_code from degree where degree_code in(select distinct branch_code from registration where batch_year=@batchyear and degree_code= @degreecode)";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_loaddegbranch'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_loaddegbranch ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_loaddegbranch @degreecode as varchar(5), @collegecode as varchar(8) as select degree.degree_code,course.course_name,department.dept_name from course,degree,department where course.course_id =@degreecode and course.course_id=degree.course_id and degree.dept_code=department.dept_code and department.college_code=course.college_code and course.college_code=@collegecode and department.dept_name like '%group%' order by degree.degree_code asc";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_subres'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_subres ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_subres @exmcode as varchar(10),@rollno as varchar(20)as Select isnull(Subject_Code,'') as scode , isnull(subjecT_name,'') as sname ,semester,Subject.SubjecT_no from subject,syllabus_master as smas where smas.syll_code = subject.syll_code and subject_no in (select distinct subject_no from  mark_entry where Exam_Code = @exmcode and subject_no not in (select distinct subject_no from mark_entry where passorfail=1 and result='Pass' and ltrim(rtrim(roll_no))=@rollno) and ltrim(rtrim(roll_no))=@rollno and Exam_Code=@exmcode ) order by smas.semester";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_formA'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_formA ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_formA @collegecode as varchar(10)as Select degree.degree_code , no_of_seats from degree where college_code = @collegecode";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_formA_lat1'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_formA_lat1 ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_formA_lat1 @collegecode as varchar(10),@degreecode as varchar(10),@year as varchar(20)as select distinct no_of_seats from degree,registration where degree.college_code = @collegecode and registration.degree_code = @degreecode and registration.degree_code = degree.degree_code and registration.mode = 1 and batch_year = @year ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_subjectmarkRs'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_subjectmarkRs ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_subjectmarkRs @cmbcourse_entno as varchar(10),@cmbsubject as varchar(10),@cmbpart as varchar(20)as select isnull(acual_marks,0) as acual_marks, isnull(max_marks,0) as max_marks from perv_marks_history where course_entno=@cmbcourse_entno and psubjectno= @cmbsubject and subject_typeno=@cmbpart";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_sfcopy'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_sfcopy ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_sfcopy @rollno as varchar(10)as select applyn.stud_name,sex,isnull(community,0)as comm,isnull(courselststd,0) as courselststd,isnull(parent_statep,0) as parent,ent_mark,seattype,ent_regno from registration,applyn where registration.app_no = applyn.app_no and registration.app_no=@RollNo";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_courcesearch'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_courcesearch ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_courcesearch @appno as varchar(10),@courselststd as varchar(20)as select isnull(course_entno,0) as course_entno ,isnull(passyear,0) as passyear,isnull(passmonth,'') as passmonth  from stud_prev_details where app_no = @appno and course_code = @courselststd";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_marksearch'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_marksearch ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_marksearch @courselststd as varchar(20)as select isnull(acual_marks,0) as acual_marks,isnull(max_marks,0) as max_marks from perv_marks_history where course_entno = @courselststd";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_loadpart'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_loadpart ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "create PROCEDURE Ins_Stu_loadpart @collegecode as varchar(20)as select isnull(textval,'') as textval ,isnull(textcode,0)as textcode from textvaltable where textcriteria='part' and college_code=@collegecode";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_loadsubject'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_loadsubject ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "create PROCEDURE Ins_Stu_loadsubject @collegecode as varchar(20)as select isnull(textval,'') as textval ,isnull(textcode,0) as textcode from textvaltable where college_code=@collegecode and textcriteria='subje'";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_griddet'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_griddet ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_griddet @appno as varchar(20)as select isnull(caste,0) as caste ,isnull(seattype,0) as seattype ,stud_name,sex,dob,isnull(community,0) as community ,isnull(courselststd,0) as courselststd,isnull(ent_regno,'') as ereg , isnull(ent_mark,0) as emark,isnull(parent_statep,0) as parent from applyn where app_no=@appno";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_settitle'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_settitle ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_settitle as select distinct psubjectno,textval from perv_marks_history as p, stud_prev_details as d, registration as r , applyn as a , textvaltable as t Where a.app_no = r.app_no And r.Mode = 3 And a.app_no = d.app_no And d.Course_Entno = p.Course_Entno and a.courseLststd = d.course_code and d.branch_code = a.brnchlststd  and a.univbrdlststd = d.university_code and t.textcode= p.psubjectno";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_markfrmB'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_markfrmB ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_markfrmB @courselststd as varchar(20)as select isnull(acual_marks,0) as acual_marks,isnull(max_marks,0) as max_marks,PSubjectno from perv_marks_history where course_entno = @courselststd";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_strengthrep'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_strengthrep ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_strengthrep @CmbGLevel as varchar(20),@collegecode as varchar(10)as Select distinct current_semester from registration,degree,course where current_semester is not null and cc = 0 and delflag =0 and exam_flag <>'debar'and registration.degree_code = degree.degree_code and degree.college_Code = @collegecode and degree.course_id = course.course_id and course.college_code = @collegecode and ltrim(rtrim(Edu_Level))=@CmbGLevel";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_viewall'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_viewall ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_viewall as Select distinct current_semester from registration where current_semester is not null and cc = 0 and delflag =0 and exam_flag <>'debar'";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_chkviewall'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_chkviewall ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_chkviewall @collegecode as varchar(10)as Select course_name + ' - ' + dept_acronym,degree_code from department,degree,course where degree.course_id = course.course_id and degree.dept_code = department.dept_code and degree.college_Code = @collegecode and course.college_code = @collegecode and department.college_code = @collegecode";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_chkviewspecific'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_chkviewspecific ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_chkviewspecific @CmbGLevel as varchar(20),@collegecode as varchar(10)as Select course_name + ' - ' + dept_acronym,degree_code from department,degree,course where degree.course_id = course.course_id and degree.dept_code = department.dept_code and degree.college_Code =@collegecode and course.college_code = @collegecode and department.college_code = @collegecode and ltrim(rtrim(Edu_Level))=@cmbglevel";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_studrep'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_studrep ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_studrep @coursecode as varchar(20),@batchyear as varchar(10)as select roll_no,registration.stud_name,parent_name,parent_addressp,dob,sex,community from applyn,registration where applyn.app_no=registration.app_no and applyn.degree_code=registration.degree_code and registration.degree_code=@coursecode and registration.batch_year=@batchyear";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_comm'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_comm ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_comm @coursecode as varchar(20),@batchyear as varchar(10),@rollno as varchar(10)as select community,caste from applyn,registration where applyn.app_no=registration.app_no and applyn.degree_code=registration.degree_code and registration.degree_code=@coursecode and registration.batch_year=@batchyear and roll_no= @rollno";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_comothers'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_comothers ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_comothers @coursecode as varchar(20),@batchyear as varchar(10),@rollno as varchar(10)as select sex,univbrdlststd,handy,visualhandy,adm_date,fathercategory from applyn,registration where applyn.app_no=registration.app_no and applyn.degree_code=registration.degree_code and registration.degree_code=@coursecode and registration.batch_year=@batchyear and roll_no= @rollno";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_getstudet'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_getstudet ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_getstudet @bldgroup as varchar(20),@collegecode as varchar(10)as select registration.roll_no,registration.stud_name,course_name + ' - ' + dept_name as degree,registration.batch_year,parent_addressC from applyn,registration,degree,course,department where bldgrp like @bldgroup and applyn.app_no=registration.app_no and delflag=0 and registration.degree_code = degree.degree_code And degree.college_code =@collegecode And degree.course_id = Course.course_id and degree.dept_code=department.dept_code and degree.college_code=department.college_code and degree.college_code=course.college_code order by registration.batch_year,roll_no";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_getstuval'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_getstuval ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_getstuval @bldgroup as varchar(20),@collegecode as varchar(10)as select registration.roll_no,registration.stud_name,course_name + ' - ' + dept_name as degree,registration.batch_year,parent_addressC from applyn,registration,degree,course,department where bldgrp like @bldgroup and applyn.app_no=registration.app_no and delflag=0 and cc=0 and registration.degree_code = degree.degree_code And degree.college_code =@collegecode And degree.course_id = Course.course_id and degree.dept_code=department.dept_code and degree.college_code=department.college_code and degree.college_code=course.college_code order by registration.batch_year,roll_no ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_getmarkdet'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_getmarkdet ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_getmarkdet @appno as varchar(10),@collegecode as varchar(10),@courseid as varchar(10)as select textval,textcode,max_marks,acual_marks from perv_marks_history as a,stud_prev_details as b,textvaltable as c where textcriteria like 'subje%' and a.course_entno=b.course_entno and a.psubjectno = c.textcode and c.college_code =@collegecode  And b.app_no =@appno and b.course_code=@courseid And acual_marks Is Not Null order by acual_marks desc";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_getsemmark'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_getsemmark ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_getsemmark @appno as varchar(10),@collegecode as varchar(10)as select textval,textcode,max_marks,acual_marks from perv_marks_history as a,stud_prev_details as b,textvaltable as c where textcriteria like 'subje%' and a.course_entno=b.course_entno and a.psubjectno = c.textcode And c.college_code =@collegecode  And b.app_no =@appno  And acual_marks Is Not Null order by acual_marks desc";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_getexmdet'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_getexmdet ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_getexmdet @exmcode as varchar(10)as Select distinct exam_appl_Details.subject_no,subject.subject_name,subject_code,subject_type,sub_sem.subtype_no from exam_appl_details,exam_application,subject,sub_sem where exam_appl_details.subject_no = subject.subject_no and subject.subType_no = sub_sem.subType_no and subject.syll_code = sub_sem.syll_code and exam_application.exam_code=@exmcode and exam_application.appl_no = exam_appl_details.appl_no and Exam_type=0 and ltrim(rtrim(type))='' order by sub_sem.subtype_no , subject_code";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_IntMrkRep'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_IntMrkRep ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_IntMrkRep @coursecode as varchar(10),@batchyear as varchar(10),@semester as varchar(10)as Select S.Subject_Code, S.Subject_no, S.max_int_marks,SS.Subject_Type from Subject as s, Sub_Sem as ss,Syllabus_Master as SMas where SMas.Syll_Code = S.Syll_Code and SMas.Syll_Code = SS.Syll_Code and SS.Syll_Code = S.Syll_Code and S.SubType_no = SS.Subtype_no and SS.Promote_Count = 1 and SMas.Degree_Code = @coursecode and SMas.Batch_Year =@batchyear and SMas.Semester = @Semester order by SS.SubType_No ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_getsubject'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_getsubject ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_getsubject @coursecode as varchar(10),@batchyear as varchar(10),@semester as varchar(10),@sylcode as varchar(10)as Select Subject_No,Subject_Name,Subject_Code,subject_type from subject,Sub_Sem,syllabus_master where Subject.Syll_code = sub_sem.syll_code and subject.subtype_no = sub_sem.subtype_no and subject.syll_code = @sylcode and sub_sem.promote_count = 1 and syllabus_master.degree_code=@coursecode and syllabus_master.syll_code=sub_sem.syll_code and syllabus_master.semester=@semester and batch_year=@batchyear order by subject_no";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_loadstudent'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_loadstudent ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_loadstudent @collegecode as varchar(10),@degreecode as varchar(10)as Select course_name , dept_name from department,degree,course where degree.course_id = course.course_id and degree.dept_code = department.dept_code and degree.college_Code = @collegecode and course.college_code = @collegecode and degree.degree_code=@degreecode and department.college_code = @collegecode ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_studetails'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_studetails ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_studetails @coursecode as varchar(10),@batchyear as varchar(10)as select distinct a.reg_no,a.roll_no,a.stud_name,roomno,c.block ,a.sections from registration as a,exam_seating as b,class_master as c where a.roll_no=b.regno and b.block=c.block and b.roomno=c.rno and a.degree_code=@coursecode and batch_year=@batchyear and cc=0 and delflag =0 and roll_no<>'' order by roomno asc";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Ins_Stu_stufinedet'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Ins_Stu_stufinedet ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE Ins_Stu_stufinedet @exmcode as varchar(10),@coursecode as varchar(10),@semcode as varchar(10),@batchyear as varchar(10)as select * from registration,exam_application where registration.roll_no=exam_application.roll_no and exam_code=@exmcode and degree_code=@coursecode and current_semester=@semcode and batch_year=@batchyear and cc=0 and delflag=0 and registration.roll_no<>'' and exam_flag<>'DEBAR'";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_filltree'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc sp_filltree ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure sp_filltree @collegecode as varchar(10)as SELECT degree.Course_Id, (select distinct(course.course_name) from course where course_id=degree.course_id) AS Expr1, degree.Dept_Code, (select distinct(dept_name) from department where dept_code=degree.dept_code) AS Expr2,Exam_System, Duration,First_Year_Nonsemester,acronym,degree_code FROM degree where college_code=@collegecode order by course_id,dept_code";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Kam_DeptInfo'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Kam_DeptInfo ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc Kam_DeptInfo @CollegeCode as numeric as begin Select course_name + ' - ' + dept_name,degree_code,isnull(No_Of_seats,0) as nos from department,degree,course Where degree.course_id = course.course_id And degree.dept_code = department.dept_code And degree.college_Code = @CollegeCode and  course.college_code = @CollegeCode and department.college_code =@CollegeCode End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Kam_StudentInfo'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Kam_StudentInfo ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc Kam_StudentInfo @BatchYear as int,@CourseCode as int,@Sem as int as begin select roll_no,reg_no,stud_name from registration where batch_year =@BatchYear and degree_code=@CourseCode and current_semester >= @Sem and RollNo_Flag<>0 and cc=0 and delflag=0 and exam_flag <> 'DEBAR' order by roll_no End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Kam_DeptInfo'");
            if (getval1 != "0")
            {
                creatstrproc = " ALTER proc Kam_DeptInfo @CollegeCode as numeric as begin Select course_name + ' - ' + dept_name,degree_code,isnull(No_Of_seats,0) as nos from department,degree,course Where degree.course_id = course.course_id And degree.dept_code = department.dept_code And degree.college_Code = @CollegeCode and  course.college_code = @CollegeCode and department.college_code =@CollegeCode End ";
                if (creatstrproc != "")
                {
                    int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
                }
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'byear_csem'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc byear_csem ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE proc byear_csem @dcode as integer,@odd as bit ,@batch  as numeric  as set nocount on begin if @odd = 1 begin Select distinct Batch_year,Current_Semester,sections from registration where degree_code=@dcode and cc=0 and delflag=0 and batch_year=@batch  and exam_flag<>'DEBAR' order by current_semester End Else begin Select distinct Batch_year,Current_Semester,sections from registration where degree_code=@dcode and cc=0 and delflag=0 and current_semester % 2 =0  and exam_flag<>'DEBAR' order by current_semester End End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'AT_SubwiseAttnd'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc AT_SubwiseAttnd ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE  procedure AT_SubwiseAttnd(@degCode as numeric,@Sems as numeric,@Batch_Year as numeric)as select distinct S.subject_no,subject_code,subject_name from subject as S,syllabus_master as SM,subjectchooser as SC,Sub_sem as Sem where S.subject_no=SC.Subject_no and s.syll_code=SM.syll_code and degree_code=@DegCode and SM.Semester=@Sems and batch_year=@Batch_Year and S.subtype_no = Sem.subtype_no and promote_count=1 order by subject_code";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'LoadStudents'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc LoadStudents ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE Procedure LoadStudents (@degCode as numeric,@Sems as numeric,@Batch_Year as numeric,@SubNo as numeric) as  Declare @SQL1 as nvarchar(200) Declare @SQL3 as nvarchar(500)  set @SQl1='Select registration.Roll_No as RlNo,Reg_No as RgNo ,Stud_Name as SName'  set @SQl3=' from registration,subjectchooser where registration.roll_no = subjectchooser.roll_no and Batch_Year = '+ convert(nvarchar(5),@Batch_Year) +' and Degree_Code = '+ convert (nvarchar(5),@Degcode) +' and Current_Semester= '+ convert (nvarchar(5),@Sems) +' and subject_no = '+ convert (nvarchar(5),@SubNo) +' and delflag =0 and exam_flag <>''Debar'' and RollNo_Flag=1 and registration.Roll_No is not null  order by RlNo ' ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'At_PeriodAttnSchedule'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc At_PeriodAttnSchedule ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create  Procedure At_PeriodAttnSchedule (@Degcode numeric,@semester numeric,@Batch_Year as numeric)as select * from periodattndschedule where degree_code=@Degcode and semester=@semester";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'At_Seminfo'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc At_Seminfo ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create   Procedure At_Seminfo (@Degcode numeric,@semester numeric,@batchyear numeric)as select * from seminfo where degree_code=@Degcode and semester=@semester and batch_year=@batchyear";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'studDetail_date'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc studDetail_date ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc studDetail_date @batch int,@degree int,@date1 as datetime,@date2 as datetime as  select a.app_no,a.app_formno[ApplicationNo],(select roll_admit from registration where app_no=a.app_no)[AdmissionNo],(select roll_no from registration where app_no=a.app_no)[U.Sno], a.stud_name[StudentName],(select adm_date from registration where app_no=a.app_no)[DateAdmitted],a.date_applied[Date Applied],case when sex = 0 then 'Male' when sex = 1 then 'Female' else 'Transgender' end[Gender],(select case textval  when '-1' then ' ' else textval end from textvaltable  where textcode=a.community and textcriteria='comm')[community] ,(select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.caste  and textcriteria='caste')[Caste],(select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.religion and textcriteria='relig')[Religion],a.dob[DOB],(select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.mother_tongue and textcriteria='mton')[MotherTongue], a.parent_name[fathername],a.fatherdob[fatherdbo],a.mother[mothername], (select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=a.parent_income  and textcriteria='fin')[Father Income],(select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=a.mincome  and textcriteria='min')[Mother Income],(select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.parent_occu  and textcriteria='foccu')[Father Occupation], (select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.motherocc and textcriteria='moccu')[MotherOccupation],(select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.fqualification and textcriteria='fqual')[Father/Gaurdian Qualification],(select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.mqualification and textcriteria='mqual') [Mother Qualification], isnull(a.parent_addressp,'')+','+ isnull(streetp,'')+','+isnull(cityp,'')+','+ case when isnumeric(districtp) = 1 then (select isnull(textval,'') from textvaltable where textcode = a.districtp) else isnull(districtp,'') end +','+isnull(countryp,'')[permanent Address], parent_phnop[Phone], (select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.parent_statep and textcriteria='state')[State],a.parent_pincodep[Pin],a.StuPer_Id[E-Mail], isnull(a.parent_addressc,'')+','+ isnull(streetc,'')+','+isnull(cityc,'')+','+ case when isnumeric(districtc) = 1 then (select isnull(textval,'') from textvaltable where textcode = a.districtc) else isnull(districtc,'') end +','+isnull(countryc,'')[Contact Address], a.parent_phnoc[C-Phone],(select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.parent_statec and textcriteria='state')[C-State], a.parent_pincodep[C-Pin],a.emailc[C-E-Mail],ISNULL(a.handy_details,'') [Physically Handicapped],''[parent info], (select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.extra_act and textcriteria='serv')[SERVICE ORGN],place_birth[PlaceofBirth], (select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.bldgrp and textcriteria='bgrou')[Blood Group], (select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.citizen and textcriteria='citi')[Nationality], (select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.medium_ins and textcriteria='medi')[Medium], (select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.seattype and textcriteria='seat') [Seat Type], (select case textval when '-1' then ' ' else textval end from textvaltable where textcode =(select category_code from registration where app_no=a.app_no) and textcriteria='categ')[Fee Concession Category], (select stud_type from registration where app_no=a.app_no)[Student Type],(select textval from textvaltable_ref where textcriteria='comm' and textcode_ref=a.community)  as Community_Code, (select textval from textvaltable_ref where textcriteria='caste' and textcode_ref=a.caste)  as Caste_Code,a.Nrest_Railway[Nearest Railway],(select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.PartLanguage and textcriteria='PLang')[PartLanguage],'' As University,'' as PrevPer,'' as ParAge,'' as MotAge,CASE WHEN ISNULL(IsExService,0) = 0 THEN 'No' ELSE 'Yes' END IsExservice,ISNULL(Regiment,'') Regment,ISNULL(ExSRank,'')+'-'+ISNULL(ExSNumber,'') ServDet  from  applyn[a] inner join degree[d]  on a.degree_code=d.degree_code where a.batch_year=@batch and d.degree_code=@degree and a.date_applied  between @date1 and @date2 ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'At_Seminfo'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc At_Seminfo ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            //            creatstrproc = " create proc studApply @batch int,@degree int as  select a.app_no,a.app_formno[ApplicationNo],''[AdmissionNo],''[U.Sno],a.stud_name[StudentName],''[DateAdmitted],a.date_applied[Date Applied],case when sex = 0 then 'Male' when sex = 1 then 'Female' else 'Transgender' end[Gender], (select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=a.community and textcriteria='comm')[community] ,(select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.caste  and textcriteria='caste')[Caste], (select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.religion and textcriteria='relig')[Religion],a.dob[DOB],(select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.mother_tongue and textcriteria='mton')[MotherTongue], a.parent_name[fathername],a.fatherdob[fatherdbo],a.mother[mothername], (select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=a.parent_income  and textcriteria='fin')[Father Income], (select case textval when '-1' then ' ' else textval end from textvaltable  where textcode=a.mincome  and textcriteria='min')[Mother Income],(select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.parent_occu  and textcriteria='foccu')[Father Occupation], (select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.motherocc and textcriteria='moccu')[MotherOccupation],(select case textval when '
            //-1' then ' ' else textval end from textvaltable where textcode=a.fqualification and textcriteria='fqual')[Father/Gaurdian Qualification], (select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.mqualification and textcriteria='mqual')[Mother Qualification], isnull(a.parent_addressp,'')+','+ isnull(streetp,'')+','+isnull(cityp,'')+','+ case when isnumeric(districtp) = 1 then (select isnull(textval,'') from textvaltable where textcode = a.districtp) else isnull(districtp,'') end +','+isnull(countryp,'')[permanent Address], parent_phnop[Phone], (select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.parent_statep and textcriteria='state')[State],a.parent_pincodep[Pin],a.StuPer_Id[E-Mail], isnull(a.parent_addressc,'')+','+ isnull(streetc,'')+','+isnull(cityc,'')+','+ case when isnumeric(districtc) = 1 then (select isnull(textval,'') from textvaltable where textcode = a.districtc) else isnull(districtc,'') end +','+isnull(countryc,'')[Contact Address],  a.parent_phnoc[C-Phone],(select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.parent_statec and textcriteria='state')[C-State], a.parent_pincodep[C-Pin],a.emailc[C-E-Mail],ISNULL(a.handy_details,'') [Physically Handicapped],''[parent info], (select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.extra_act and textcriteria='serv')[SERVICE ORGN], place_birth[PlaceofBirth],(select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.bldgrp and textcriteria='bgrou')[Blood Group], (select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.citizen and textcriteria='citi')[Nationality], (select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.medium_ins and textcriteria='medi'[Medium], (select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.seattype and textcriteria='seat')[Seat Type],''[Fee Concession Category],''[Student Type], (select textval from textvaltable_ref where textcriteria='comm' and textcode_ref=a.community)  as Community_Code,(select textval from textvaltable_ref where textcriteria='caste' and textcode_ref=a.caste)  as Caste_Code, a.Nrest_Railway[Nearest Railway],(select case textval when '-1' then ' ' else textval end from textvaltable where textcode=a.PartLanguage and textcriteria='PLang')[PartLanguage],'' As University,'' as PrevPer,'' as ParAge,'' as MotAge,CASE WHEN ISNULL(IsExService,0) = 0 THEN 'No' ELSE 'Yes' END IsExservice,ISNULL(Regiment,'') Regment,ISNULL(ExSRank,'')+'-'+ISNULL(ExSNumber,'') ServDet from  applyn[a]  inner join degree[d]  on a.degree_code=d.degree_code where a.batch_year=@batch and d.degree_code=@degree and a.app_no not in(select app_no from registration) and a.app_no not in(select app_no from selection_list)";
            //            if (creatstrproc != "")
            //            {
            //                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            //            }
            //acd3-storproce
            creatstrproc = string.Empty;
            string getval3 = string.Empty;
            //creatstrproc=string.Empty;
            //getval3=string.Empty;
            //getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'degree_Consolid'");
            //if (getval3 != "0")
            //{
            //    string drpstrproc = " drop proc degree_Consolid ";
            //    if (drpstrproc != "")
            //    {
            //        int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
            //    }
            //}
            //creatstrproc = " create proc degree_Consolid @cc varchar(10) as  begin if(@cc = 'VCEW') begin select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and dept_acronym  like 'cse%' select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and dept_acronym  like 'ece%' select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and dept_acronym  like 'eee%' select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and dept_acronym  like '%it%' and dept_name='INFORMATION TECHNOLOGY' select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and ( dept_acronym  like 'Bio-tech%' or  dept_acronym  like 'Biotech%') End if(@cc = 'VIETW') begin select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and dept_acronym  like 'cse%' select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and dept_acronym  like 'ece%' select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and dept_acronym  like 'eee%' select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and dept_acronym  like '%it%' and dept_name='INFORMATION TECHNOLOGY' End if(@cc = 'VCTW') begin select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and dept_acronym  like 'cse%' select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and dept_acronym  like 'ece%' select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and dept_acronym  like 'eee%' select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and dept_acronym  like 'eie%' select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and dept_acronym  like 'ce%' select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and dept_acronym  like '%it%' and dept_name='INFORMATION TECHNOLOGY' End if(@cc = 'RTT') begin select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and dept_acronym  like 'cse%' select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and dept_acronym  like 'ece%'select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and dept_acronym  like 'eee%' select distinct department.dept_acronym  from  degree, course, department,collinfo  where course.Course_Id=degree.Course_Id and degree.Dept_Code=department.Dept_Code and course.college_code = collinfo.college_code and collinfo.acr=@cc and dept_acronym  like '%it%' and dept_name='INFORMATION TECHNOLOGY' End End";
            //if (creatstrproc != "")
            //{
            //    int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            //}
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'proctabulatedSubjectCount'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc proctabulatedSubjectCount ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc proctabulatedSubjectCount @degreecode varchar(20),@currentsemester int,@batchyear int,@checkvalue int,@checkarrear int,@examcode int,@sections varchar(20) as begin if(@checkvalue=0) begin Select distinct subject.subject_no,subject_code,subject_name,semester,subject_type,sub_sem.subtype_no,acronym from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = @examcode and semester=@currentsemester order by subject.subject_no asc End else if(@checkvalue=1) if(@checkarrear=0) begin Select distinct subject.subject_no,subject_code,subject_name,semester,subject_type,sub_sem.subtype_no,acronym from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = @examcode and semester=@currentsemester and attempts=1 order by semester desc,subject.subject_no,subject_code,subject_name,subject_type asc End Else begin Select distinct subject.subject_no,subject_code,subject_name,semester,subject_type,sub_sem.subtype_no,acronym from Mark_Entry,Subject,sub_sem,syllabus_master where syllabus_master.syll_code=subject.syll_code and Mark_Entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and  Exam_Code = @examcode and semester<@currentsemester and attempts>1 order by semester desc,subject.subject_no,subject_code,subject_name,subject_type asc End if(@sections='') begin select isnull(R.roll_no,'') as roll_no,isnull(R.reg_no,'') as reg_no,isnull(R.stud_name,'') as studname,R.Batch_year,convert(varchar(20),dob,105) as dob from registration as R,applyn where applyn.app_no=R.app_no and R.degree_code=@degreecode and R.batch_year=@batchyear and r.roll_no <>'' and cc=0  and delflag=0 and exam_flag<>'Debar' order by R.roll_no End Else begin select isnull(R.roll_no,'') as roll_no,isnull(R.reg_no,'') as reg_no,isnull(R.stud_name,'') as studname,R.Batch_year,convert(varchar(20),dob,105) as dob from registration as R,applyn where applyn.app_no=R.app_no and r.sections=@sections and R.degree_code=@degreecode and R.batch_year=@batchyear and r.roll_no <>'' and cc=0  and delflag=0 and exam_flag<>'Debar' order by R.roll_no End select isnull(exam_month,'') as exammonth,isnull(exam_year,'') as examyear from exam_details where degree_code=@degreecode and batch_year=@batchyear and exam_code=@examcode and current_semester=@currentsemester End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            //getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcBatchAllocationSubjectDetails'");
            //if (getval3 != "0")
            //{
            //    string drpstrproc = " drop proc ProcBatchAllocationSubjectDetails ";
            //    if (drpstrproc != "")
            //    {
            //        int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
            //    }
            //}
            //creatstrproc = " create proc ProcBatchAllocationSubjectDetails @Semester varchar(20),@CollegeCode varchar(20), @Subtype varchar(30),@BatchYear varchar(30),@DegreeCode varchar(30),@Sections varchar(10) AS begin if @Sections='All' begin if @Subtype='Regular' begin select distinct  s.subject_name as SubjectName,s.subject_no as SubjectNo from subject s,sub_sem sm,syllabus_master sym,subjectchooser sc,registration  where s.syll_code=sm.syll_code and s.subType_no=sm.subType_no and  sm.subject_type like 'pra%' and sm.syll_code=sym.syll_code and sym.degree_code=@DegreeCode and sym.semester=@Semester and sym.batch_year=@BatchYear and  s.subject_no =sc.subject_no and sc.roll_no=registration.roll_no and registration.degree_code=@DegreeCode and registration.current_semester=@Semester and registration.batch_year=@BatchYear and registration.college_code=@Collegecode and registration.RollNo_Flag<>0 and registration.cc=0  and registration.exam_flag <> 'DEBAR' and registration.delflag=0 and registration.roll_no<>' ' End else if @Subtype='Arear' begin select distinct m.subject_no as SubjectNo,s.subject_name as SubjectName from mark_entry m,registration r,subject s,sub_sem sm,subjectchooser sc,syllabus_master smas where sc.semester<r.current_semester and sc.roll_no=m.roll_no and sc.subtype_no=sm.subtype_no and  sc.subject_no=s.subject_no and smas.batch_year=r.batch_year and  sm.subject_type like 'Pr%'  and sm.subtype_no=s.subType_no and smas.degree_code=r.degree_code and smas.syll_code=s.syll_code and s.subject_no=m.subject_no and  m.passorfail=0 and m.result='fail' and m.roll_no <>'' and m.roll_no=r.roll_no and r.degree_code=@DegreeCode and r.current_semester=@Semester and r.batch_year=@BatchYear and r.college_code=@CollegeCode and r.cc=0 and r.delflag=0 and r.Exam_Flag<>'Debar' End else if @Subtype='All' begin select distinct  s.subject_name as SubjectName,s.subject_no as SubjectNo from subject s,sub_sem sm,syllabus_master sym,subjectchooser sc,registration  where s.syll_code=sm.syll_code and s.subType_no=sm.subType_no and  sm.subject_type like 'pra%' and sm.syll_code=sym.syll_code and sym.degree_code=@DegreeCode and sym.semester=@Semester and sym.batch_year=@BatchYear and  s.subject_no =sc.subject_no and sc.roll_no=registration.roll_no and registration.degree_code=@DegreeCode and registration.current_semester=@Semester and registration.batch_year=@BatchYear and registration.college_code=@Collegecode and registration.RollNo_Flag<>0 and registration.cc=0  and registration.exam_flag <> 'DEBAR' and registration.delflag=0 and registration.roll_no<>' ' select distinct m.subject_no as SubjectNo,s.subject_name as SubjectName from mark_entry m,registration r,subject s,sub_sem sm,subjectchooser sc,syllabus_master smas where sc.semester<r.current_semester and sc.roll_no=m.roll_no and sc.subtype_no=sm.subtype_no and  sc.subject_no=s.subject_no and smas.batch_year=r.batch_year and  sm.subject_type like 'Pr%'  and sm.subtype_no=s.subType_no and smas.degree_code=r.degree_code and smas.syll_code=s.syll_code and s.subject_no=m.subject_no and  m.passorfail=0 and m.result='fail' and m.roll_no <>'' and m.roll_no=r.roll_no and r.degree_code=@DegreeCode and r.current_semester=@Semester and r.batch_year=@BatchYear and r.college_code=@CollegeCode and r.cc=0 and r.delflag=0 and r.Exam_Flag<>'Debar' End End else if @Sections='' begin if @Subtype='Regular' begin select distinct  s.subject_name as SubjectName,s.subject_no as SubjectNo from subject s,sub_sem sm,syllabus_master sym,subjectchooser sc,registration  where s.syll_code=sm.syll_code and s.subType_no=sm.subType_no and  sm.subject_type like 'pra%' and sm.syll_code=sym.syll_code and sym.degree_code=@DegreeCode and sym.semester=@Semester and sym.batch_year=@BatchYear and  s.subject_no =sc.subject_no and sc.roll_no=registration.roll_no and registration.degree_code=@DegreeCode and registration.current_semester=@Semester and registration.batch_year=@BatchYear and registration.college_code=@Collegecode and registration.RollNo_Flag<>0 and registration.cc=0  and registration.exam_flag <> 'DEBAR' and registration.delflag=0 and registration.roll_no<>' ' End else if @Subtype='Arear' begin select distinct m.subject_no as SubjectNo,s.subject_name as SubjectName from mark_entry m,registration r,subject s,sub_sem sm,subjectchooser sc,syllabus_master smas where sc.semester<r.current_semester and sc.roll_no=m.roll_no and sc.subtype_no=sm.subtype_no and  sc.subject_no=s.subject_no and smas.batch_year=r.batch_year and  sm.subject_type like 'Pr%'  and sm.subtype_no=s.subType_no and smas.degree_code=r.degree_code and smas.syll_code=s.syll_code and s.subject_no=m.subject_no and  m.passorfail=0 and m.result='fail' and m.roll_no <>'' and m.roll_no=r.roll_no and r.degree_code=@DegreeCode and r.current_semester=@Semester and r.batch_year=@BatchYear and r.college_code=@CollegeCode and r.cc=0 and r.delflag=0 and r.Exam_Flag<>'Debar' End else if @Subtype='All' begin select distinct  s.subject_name as SubjectName,s.subject_no as SubjectNo from subject s,sub_sem sm,syllabus_master sym,subjectchooser sc,registration  where s.syll_code=sm.syll_code and s.subType_no=sm.subType_no and  sm.subject_type like 'pra%' and sm.syll_code=sym.syll_code and sym.degree_code=@DegreeCode and sym.semester=@Semester and sym.batch_year=@BatchYear and  s.subject_no =sc.subject_no and sc.roll_no=registration.roll_no and registration.degree_code=@DegreeCode and registration.current_semester=@Semester and registration.batch_year=@BatchYear and registration.college_code=@Collegecode and registration.RollNo_Flag<>0 and registration.cc=0  and registration.exam_flag <> 'DEBAR' and registration.delflag=0 and registration.roll_no<>' ' select distinct m.subject_no as SubjectNo,s.subject_name as SubjectName from mark_entry m,registration r,subject s,sub_sem sm,subjectchooser sc,syllabus_master smas where sc.semester<r.current_semestregistration.roll_no=attendance.roll_no  and attendance.month_year =' + @monthyear + ' ' SET @QUERY9 = @QUERY9 + ' and degree_code = ' + @degree_code + ' and current_semester =' + @curr_sem + ' and sections= '+ @strsec + ' ' SET @QUERY9 = @QUERY9 + ' and  cc =0 and delflag = 0 and exam_flag <>''debar''' End if(@field_val_eng4 !='') begin SET @QUERY10 ='Select count(*) as ''Count'' from attendance,registration' SET @QUERY10 = @QUERY10 +  ' where registration.roll_no=attendance.roll_no  and attendance.month_year =' + @monthyear + ' ' SET @QUERY10 = @QUERY10 + ' and degree_code = ' + @degree_code + ' and current_semester =' + @curr_sem + ' and sections= '+ @strsec + ' ' SET @QUERY10 = @QUERY10 + ' and  cc =0 and delflag = 0 and exam_flag <>''debar'' and ' + @field_val_eng4 + '' End Else begin SET @QUERY10 ='Select count(*) as ''Count'' from attendance,registration' SET @QUERY10 = @QUERY10 +  ' where registration.roll_no=attendance.roll_no  and attendance.month_year =' + @monthyear + ' ' SET @QUERY10 = @QUERY10 + ' and degree_code = ' + @degree_code + ' and current_semester =' + @curr_sem + ' and sections= '+ @strsec + ' ' SET @QUERY10 = @QUERY10 + ' and  cc =0 and delflag = 0 and exam_flag <>''debar''' End if(@field_val_eng5 !='') begin SET @QUERY11 ='Select count(*) as ''Count'' from attendance,registration' SET @QUERY11 = @QUERY11 +  ' where registration.roll_no=attendance.roll_no  and attendance.month_year =' + @monthyear + ' ' SET @QUERY11 = @QUERY11 + ' and degree_code = ' + @degree_code + ' and current_semester =' + @curr_sem + ' and sections= '+ @strsec + ' ' SET @QUERY11 = @QUERY11 + ' and  cc =0 and delflag = 0 and exam_flag <>''debar'' and ' + @field_val_eng5 + '' End Else begin SET @QUERY11 ='Select count(*) as ''Count'' from attendance,registration' SET @QUERY11 = @QUERY11 +  ' where registration.roll_no=attendance.roll_no  and attendance.month_year =' + @monthyear + ' ' SET @QUERY11 = @QUERY11 + ' and degree_code = ' + @degree_code + ' and current_semester =' + @curr_sem + ' and sections= '+ @strsec + ' ' SET @QUERY11 = @QUERY11 + ' and  cc =0 and delflag = 0 and exam_flag <>''debar''' End if(@field_val_eng6 !='') begin SET @QUERY12 ='Select count(*) as ''Count'' from attendance,registration' SET @QUERY12 = @QUERY12 +  ' where registration.roll_no=attendance.roll_no  and attendance.month_year =' + @monthyear + ' ' SET @QUERY12 = @QUERY12 + ' and degree_code = ' + @degree_code + ' and current_semester =' + @curr_sem + ' and sections= '+ @strsec + ' ' SET @QUERY12 = @QUERY12 + ' and  cc =0 and delflag = 0 and exam_flag <>''debar'' and ' + @field_val_eng6 +'' End Else begin SET @QUERY12 ='Select count(*) as ''Count'' from attendance,registration' SET @QUERY12 = @QUERY12 +  ' where registration.roll_no=attendance.roll_no  and attendance.month_year =' + @monthyear + ' ' SET @QUERY12 = @QUERY12 + ' and degree_code = ' + @degree_code + ' and current_semester =' + @curr_sem + ' and sections= '+ @strsec + ' ' SET @QUERY12 = @QUERY12 + ' and  cc =0 and delflag = 0 and exam_flag <>''debar'' ' End SET @QUERY13='select count(*) as ''Count'' from registration where degree_code ='+@degree_code+' and sections= '+ @strsec + '  and current_semester = '+@curr_sem +'  and batch_year='+@batch_year+' and  cc =0 and delflag = 0 and exam_flag <>''debar''' End EXEC (@QUERY1 ) EXEC (@QUERY2 ) EXEC (@QUERY3 ) EXEC (@QUERY4 ) EXEC (@QUERY5 ) EXEC (@QUERY6 ) EXEC (@QUERY7 ) EXEC (@QUERY8 ) EXEC (@QUERY9 ) EXEC (@QUERY10 ) EXEC (@QUERY11 ) EXEC (@QUERY12 ) EXEC (@QUERY13 ) End";
            //if (creatstrproc != "")
            //{
            //    int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            //}
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'bind_degree_detail'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc bind_degree_detail ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure bind_degree_detail ( @degree_val nvarchar(20), @input_date datetime ) as begin Select distinct registration.degree_code as 'Degree Code', current_semester as 'Current Semester', sections as 'Section', registration.batch_year as 'Batch Year' , no_of_hrs_per_day as 'No Of Hours', no_of_hrs_I_half_day as 'First Half', no_of_hrs_II_half_day as 'Second Half', start_date as 'Start Date' from registration,PeriodAttndSchedule,seminfo where cc = 0  and delflag = 0 and exam_flag <> 'debar' and current_semester is not null and registration.degree_code =@degree_val  and registration.degree_code=PeriodAttndSchedule.degree_code  and registration.current_semester = PeriodAttndSchedule.semester And registration.current_semester = seminfo.semester and registration.degree_code=seminfo.degree_code and registration.batch_year=seminfo.batch_year and  start_date<=@input_date and no_of_hrs_per_day<>0 order by current_semester End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'holiday_sp'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc holiday_sp ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure holiday_sp ( @date_val datetime, @degree_code varchar(20), @sem_val varchar(20) ) as begin select holiday_desc,halforfull,morning,evening from holidaystudents where holiday_date=@date_val and degree_code=@degree_code and semester=@sem_val End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'single_subjectwise_attnd'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc single_subjectwise_attnd ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure [dbo].[single_subjectwise_attnd] (@degCode as numeric,@Sems as numeric,@Batch_Year as numeric,@staffcode nvarchar(200),@Sec as nvarchar(50))  as if(@staffcode='') begin  select distinct S.subject_no,subject_code,subject_name,sem.subject_type from subject as S,syllabus_master  as SM,  subjectchooser as SC,Sub_sem as Sem,staff_selector st where S.subject_no=SC.Subject_no and  s.syll_code=SM.syll_code  and SM.degree_code=@degCode and SM.Semester=@Sems and st.subject_no=s.subject_no  and  SM.batch_year=@Batch_Year and  S.subtype_no = Sem.subtype_no and promote_count=1  order by subject_code  End  Else  begin  if(@Sec='')  select distinct S.subject_no,subject_code,subject_name,sem.subject_type from subject as S,syllabus_master  as SM,  subjectchooser as SC,Sub_sem as Sem,staff_selector st where S.subject_no=SC.Subject_no and  s.syll_code=SM.syll_code  and SM.degree_code=@degCode and SM.Semester=@Sems and st.subject_no=s.subject_no  and  SM.batch_year=@Batch_Year  and S.subtype_no = Sem.subtype_no and promote_count=1 and st.staff_code=@staffcode  order by subject_code  Else  select distinct S.subject_no,subject_code,subject_name,sem.subject_type from subject as S,syllabus_master  as SM,  subjectchooser as SC,Sub_sem as Sem,staff_selector st where S.subject_no=SC.Subject_no and  s.syll_code=SM.syll_code  and SM.degree_code=@degCode and SM.Semester=@Sems and st.subject_no=s.subject_no  and  SM.batch_year=@Batch_Year  and S.subtype_no = Sem.subtype_no and promote_count=1 and st.staff_code=@staffcode and st.Sections=@Sec  order by subject_code  End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'get_degreeinfo'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc get_degreeinfo ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure get_degreeinfo (@collegecode nvarchar(50)) as begin select *from degree,department where degree.dept_code=department.dept_code and degree.college_code=@collegecode ORDER BY DEGREE_CODE End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'bind_degree_strength'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc bind_degree_strength ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure bind_degree_strength ( @input_date datetime, @collegecode   nvarchar(20), @degree_code nvarchar(20) ) as begin Select registration.degree_code,count(*) as strength,current_semester,start_date,no_of_hrs_per_day,no_of_hrs_I_half_day,min_pres_I_half_day ,min_pres_II_half_day,no_of_hrs_II_half_day from registration,degree,seminfo,periodattndschedule where registration.degree_code = degree.degree_code and cc = 0  and delflag = 0 and exam_flag <> 'debar' and current_semester is not null  and registration.degree_code is not null and adm_date <=@input_date   and registration.degree_code=seminfo.degree_code and registration.current_semester=seminfo.semester and registration.batch_year=seminfo.batch_year and registration.degree_code = periodattndschedule.degree_code And registration.current_semester = periodattndschedule.semester and degree.college_code =@collegecode    and degree.degree_code=@degree_code and no_of_hrs_per_day<>0    group by registration.degree_code , current_semester, course_id, start_date, no_of_hrs_per_day, no_of_hrs_I_half_day, no_of_hrs_II_half_day, min_pres_I_half_day ,min_pres_II_half_day order by registration.degree_code Asc, registration.current_semester End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'get_calcflag'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc get_calcflag ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure get_calcflag as begin select leavecode from Attmastersetting where calcflag=0 select leavecode from Attmastersetting where calcflag=1 End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'find_attnd_values'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc find_attnd_values ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE [dbo].[find_attnd_values] ( @monthyear nvarchar(20), @curr_sem nvarchar(20), @degree_code nvarchar(20), @present_mng nvarchar(1000), @present_evng nvarchar(1000), @absent_mng nvarchar(1300), @absent_evng nvarchar(1300), @tot_student nvarchar(1500) ) AS begin DECLARE @QUERY1 VARCHAR(5000) DECLARE @QUERY2 VARCHAR(5000) DECLARE @QUERY3 VARCHAR(5000) DECLARE @QUERY4 VARCHAR(5000) DECLARE @QUERY5 VARCHAR(5000) begin if(@absent_evng !='') begin SET @QUERY1 ='Select count(*) as ''Count'' from attendance,registration' SET @QUERY1 = @QUERY1 +  ' where registration.roll_no=attendance.roll_no  and attendance.month_year =' + @monthyear + '' SET @QUERY1 = @QUERY1 + ' and degree_code = ' + @degree_code + ' and current_semester =' + @curr_sem+ ' ' SET @QUERY1 = @QUERY1 + ' and  cc =0 and delflag = 0 and exam_flag <>''debar'' and   ' + @absent_evng + '' End Else begin SET @QUERY1 ='Select count(*) as ''Count'' from attendance,registration' SET @QUERY1 = @QUERY1 +  ' where registration.roll_no=attendance.roll_no  and attendance.month_year =' + @monthyear + '' SET @QUERY1 = @QUERY1 + ' and degree_code = ' + @degree_code + ' and current_semester =' + @curr_sem+ ' ' SET @QUERY1 = @QUERY1 + ' and  cc =0 and delflag = 0 and exam_flag <>''debar''' End if(@present_evng !='') begin SET @QUERY2 ='Select count(*) as ''Count'' from attendance,registration' SET @QUERY2 = @QUERY2 +  ' where registration.roll_no=attendance.roll_no  and attendance.month_year =' + @monthyear + ' ' SET @QUERY2 = @QUERY2 + ' and degree_code = ' + @degree_code + ' and current_semester =' + @curr_sem + ' ' SET @QUERY2 = @QUERY2 + ' and  cc =0 and delflag = 0 and exam_flag <>''debar''  and  ' + @present_evng + ' ' End Else begin SET @QUERY2 ='Select count(*) as ''Count'' from attendance,registration' SET @QUERY2 = @QUERY2 +  ' where registration.roll_no=attendance.roll_no  and attendance.month_year =' + @monthyear + ' ' SET @QUERY2 = @QUERY2 + ' and degree_code = ' + @degree_code + ' and current_semester =' + @curr_sem + ' ' SET @QUERY2 = @QUERY2 + ' and  cc =0 and delflag = 0 and exam_flag <>''debar''' End if(@absent_mng !='')  begin SET @QUERY3 ='Select count(*) as ''Count'' from attendance,registration' SET @QUERY3 = @QUERY3 +  ' where registration.roll_no=attendance.roll_no  and attendance.month_year =' + @monthyear +' ' SET @QUERY3 = @QUERY3 + ' and degree_code = ' + @degree_code + ' and current_semester =' + @curr_sem + ' ' SET @QUERY3 = @QUERY3 + ' and  cc =0 and delflag = 0 and exam_flag <>''debar''  and  ' + @absent_mng + '' End Else begin SET @QUERY3 ='Select count(*) as ''Count'' from attendance,registration' SET @QUERY3 = @QUERY3 +  ' where registration.roll_no=attendance.roll_no  and attendance.month_year =' + @monthyear +' ' SET @QUERY3 = @QUERY3 + ' and degree_code = ' + @degree_code + ' and current_semester =' + @curr_sem + ' ' SET @QUERY3 = @QUERY3 + ' and  cc =0 and delflag = 0 and exam_flag <>''debar'' ' End if(@present_mng !='') begin SET @QUERY4 ='Select count(*) as ''Count'' from attendance,registration' SET @QUERY4 = @QUERY4 +  ' where registration.roll_no=attendance.roll_no  and attendance.month_year =' + @monthyear +' ' SET @QUERY4 = @QUERY4 + ' and degree_code = ' + @degree_code + ' and current_semester =' + @curr_sem + ' ' SET @QUERY4 = @QUERY4 + ' and  cc =0 and delflag = 0 and exam_flag <>''debar''  and  ' + @present_mng + ' ' End Else begin SET @QUERY4 ='Select count(*) as ''Count'' from attendance,registration' SET @QUERY4 = @QUERY4 +  ' where registration.roll_no=attendance.roll_no  and attendance.month_year =' + @monthyear +' ' SET @QUERY4 = @QUERY4 + ' and degree_code = ' + @degree_code + ' and current_semester =' + @curr_sem + ' ' SET @QUERY4 = @QUERY4 + ' and  cc =0 and delflag = 0 and exam_flag <>''debar''' End if(@tot_student!='') begin SET @QUERY5 ='Select * from attendance,registration' SET @QUERY5 = @QUERY5 +  ' where registration.roll_no=attendance.roll_no  ' SET @QUERY5 = @QUERY5 +  '  and attendance.month_year =' + @monthyear + ' ' SET @QUERY5 = @QUERY5 + ' and registration.degree_code = ' + @degree_code + ' and current_semester =' + @curr_sem + ' ' SET @QUERY5 = @QUERY5 + ' and  cc =0 and delflag = 0 and exam_flag <>''debar'' and '+@tot_student+' ' End Else begin SET @QUERY5 ='Select * from attendance,registration' SET @QUERY5 = @QUERY5 +  ' where registration.roll_no=attendance.roll_no  ' SET @QUERY5 = @QUERY5 +  '  and attendance.month_year =' + @monthyear + ' ' SET @QUERY5 = @QUERY5 + ' and registration.degree_code = ' + @degree_code + ' and current_semester =' + @curr_sem + ' ' SET @QUERY5 = @QUERY5 + ' and  cc =0 and delflag = 0 and exam_flag <>''debar'' ' End End EXEC (@QUERY1 ) EXEC (@QUERY2 ) EXEC (@QUERY3 ) EXEC (@QUERY4 ) EXEC (@QUERY5 ) End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            //creatstrproc=string.Empty;
            //getval3=string.Empty;
            //getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'find_attnd_values'");
            //if (getval3 != "0")
            //{
            //    string drpstrproc = " drop proc find_attnd_values ";
            //    if (drpstrproc != "")
            //    {
            //        int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
            //    }
            //}
            //creatstrproc = " CREATE PROCEDURE [dbo].[SELECT _ALL_STUDENT_CAM_REPORTS_DETAILS] ( @bath_year int, @degree_code int, @sec varchar(20) ,@filterwithsectionsub varchar(5000), @filterwithoutsectionsub varchar(5000)) AS begin DECLARE @sqlCommand varchar(5000) if(@sec!='') begin SET @sqlCommand = 'select distinct len( r.Roll_No) as RollNum_len,r.Roll_No as RollNumber, r.Reg_No as RegistrationNumber, r.stud_name as Student_Name,r.stud_type as StudentType,r.App_No as ApplicationNumber,a.seattype,a.sex as Gen,c.course_name,c.Edu_Level as EDU_LEVEl,(select textval from textvaltable where textcode=seattype) as textval,convert(varchar(15),adm_date,103) as adm_date from registration r, applyn a ,degree d, course c Where  '+ @filterwithsectionsub EXEC (@sqlCommand) End Else begin SET @sqlCommand=' select distinct len(r.Roll_No )as  RollNum_len,r.Roll_No as RollNumber, r.Reg_No as RegistrationNumber, r.stud_name as Student_Name, r.stud_type as StudentType,r.App_No as ApplicationNumber,a.seattype,a.sex as Gen,c.course_name,c.Edu_Level as EDU_LEVEl,(select textval from textvaltable where textcode=seattype) as textval, convert(varchar(15),adm_date,103) as adm_date from registration r, applyn a ,degree d, course c Where '+ @filterwithoutsectionsub EXEC (@sqlCommand) End End";
            //if (creatstrproc != "")
            //{
            //    int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            //}
            //creatstrproc=string.Empty;
            //getval3=string.Empty;
            //getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'find_attnd_values'");
            //if (getval3 != "0")
            //{
            //    string drpstrproc = " drop proc find_attnd_values ";
            //    if (drpstrproc != "")
            //    {
            //        int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
            //    }
            //}
            //creatstrproc = " CREATE PROCEDURE [dbo].[SELECT _ALL_STUDENT_CAM_REPORTS_DETAILS] ( @bath_year int, @degree_code int, @sec varchar(20) ,@filterwithsectionsub varchar(5000), @filterwithoutsectionsub varchar(5000)) AS begin DECLARE @sqlCommand varchar(5000) if(@sec!='') begin SET @sqlCommand = 'select distinct len( r.Roll_No) as RollNum_len,r.Roll_No as RollNumber, r.Reg_No as RegistrationNumber, r.stud_name as Student_Name,r.stud_type as StudentType,r.App_No as ApplicationNumber,a.seattype,a.sex as Gen,c.course_name,c.Edu_Level as EDU_LEVEl,(select textval from textvaltable where textcode=seattype) as textval,convert(varchar(15),adm_date,103) as adm_date from registration r, applyn a ,degree d, course c Where  '+ @filterwithsectionsub EXEC (@sqlCommand) End Else begin SET @sqlCommand=' select distinct len(r.Roll_No )as  RollNum_len,r.Roll_No as RollNumber, r.Reg_No as RegistrationNumber, r.stud_name as Student_Name, r.stud_type as StudentType,r.App_No as ApplicationNumber,a.seattype,a.sex as Gen,c.course_name,c.Edu_Level as EDU_LEVEl,(select textval from textvaltable where textcode=seattype) as textval, convert(varchar(15),adm_date,103) as adm_date from registration r, applyn a ,degree d, course c Where '+ @filterwithoutsectionsub EXEC (@sqlCommand) End End";
            //if (creatstrproc != "")
            //{
            //    int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            //}
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'SELECT_ALL_STUDENT'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc SELECT_ALL_STUDENT ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE PROCEDURE [dbo].[SELECT_ALL_STUDENT] ( @batchyear  varchar(50), @degreecode varchar(50), @strsec varchar(20), @semester int ,@filterwithsec varchar(1000),@filterwithoutsec varchar(1000)) AS begin DECLARE @sqlCommand varchar(5000) if @strsec!='' begin SET @sqlCommand = 'select * from registration where'+ @filterwithsec EXEC (@sqlCommand) End Else begin SET @sqlCommand = 'select * from registration where '+@filterwithoutsec EXEC (@sqlCommand) End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'bind_student'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc bind_student ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure bind_student ( @roll_no nvarchar(20)) as begin select distinct r.Batch_Year as 'BATCH YEAR',r.degree_code as 'DEGREE CODE',r.Sections as 'SECTIONS',r.college_code as 'COLLEGE CODE',d.Dept_Name as 'DEGREE NAME',r.stud_name as 'STUD NAME',r.reg_no as 'REG NO',r.Roll_Admit as 'ROLL ADMIT',r.CC as 'CC',r.DelFlag as 'DELFLAG',r.Exam_Flag as 'EXAM_FLAG',r.Current_semester as 'CURRENT_SEMESTER'FROM attendance a left join registration r on a.roll_no=r.roll_no left join Department d on r.degree_code=d.Dept_Code WHERE r.roll_no=@roll_no End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sem_info'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sem_info ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure sem_info ( @degree_code nvarchar(20), @sem nvarchar(20), @batch nvarchar(20) ) as begin select start_date ,end_date from seminfo where degree_code=@degree_code and semester=@sem and batch_year=@batch End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'period_attnd_schedule_sp'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc period_attnd_schedule_sp ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure period_attnd_schedule_sp ( @degree_code varchar(20), @sem_val varchar(20) ) as begin select * from PeriodAttndSchedule where degree_code =@degree_code and semester=@sem_val End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'bind_degree_acro'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc bind_degree_acro ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create  procedure [dbo].[bind_degree_acro]( @college_code varchar(20), @user_code varchar(20) ) as if(@college_code!='All') begin select distinct degree.course_id,course.course_name from degree,course,deptprivilages  Where course.course_id = degree.course_id And course.college_code = degree.college_code  and degree.college_code=@college_code and deptprivilages.Degree_code=degree.Degree_code  and user_code=@user_code End Else begin select distinct degree.course_id,course.course_name from degree,course,deptprivilages  Where course.course_id = degree.course_id And course.college_code = degree.college_code and deptprivilages.Degree_code=degree.Degree_code  and user_code=@user_code  EndCreate   procedure [dbo].[bind_branch_acro] ( @course_id varchar(20), @college_code varchar(20), @user_code varchar(20) ) as if(@college_code!='All') begin select distinct degree.degree_code,department.dept_name,degree.Acronym from  degree,department,course,deptprivilages where course.course_id=degree.course_id and department.dept_code=degree.dept_code and course.college_code = degree.college_code  and department.college_code = degree.college_code and degree.course_id=@course_id and degree.college_code=@college_code  and deptprivilages.Degree_code=degree.Degree_code and user_code=@user_code End Else begin select distinct degree.degree_code,department.dept_name,degree.Acronym from  degree,department,course,deptprivilages where course.course_id=degree.course_id and department.dept_code=degree.dept_code and course.college_code = degree.college_code  and department.college_code = degree.college_code and deptprivilages.Degree_code=degree.Degree_code and user_code=@user_code  End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'bind_degree_con'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc bind_degree_con ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE procedure [dbo].[bind_degree_con] ( @college_code varchar(20), @user_code varchar(20) ) as if(@college_code!='All') begin select distinct degree.course_id,course.course_name from degree,course,deptprivilages  Where course.course_id = degree.course_id And course.college_code = degree.college_code  and degree.college_code=@college_code and deptprivilages.Degree_code=degree.Degree_code  and user_code=@user_code and course.college_code = @college_code End Else begin select distinct degree.course_id,course.course_name from degree,course,deptprivilages  Where course.course_id = degree.course_id And course.college_code = degree.college_code and deptprivilages.Degree_code=degree.Degree_code  and user_code=@user_code and course.college_code = @college_code End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'bind_branch_con'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc bind_branch_con ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE procedure [dbo].[bind_branch_con] ( @course_id varchar(20), @college_code varchar(20), @user_code varchar(20) ) as if(@college_code!='All') begin select distinct degree.degree_code,department.dept_name,degree.Acronym from  degree,department,course,deptprivilages where course.course_id=degree.course_id and department.dept_code=degree.dept_code and course.college_code = degree.college_code  and department.college_code = degree.college_code and degree.course_id=@course_id and degree.college_code=@college_code  and deptprivilages.Degree_code=degree.Degree_code and user_code=@user_code End Else begin select distinct degree.degree_code,department.dept_name,degree.Acronym from  degree,department,course,deptprivilages where course.course_id=degree.course_id and department.dept_code=degree.dept_code and course.college_code = degree.college_code  and department.college_code = degree.college_code and deptprivilages.Degree_code=degree.Degree_code and user_code=@user_code  End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'bind_branch_con'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc bind_branch_con ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE procedure [dbo].[bind_branch_con] ( @course_id varchar(20), @college_code varchar(20), @user_code varchar(20) ) as if(@college_code!='All') begin select distinct degree.degree_code,department.dept_name,degree.Acronym from  degree,department,course,deptprivilages where course.course_id=degree.course_id and department.dept_code=degree.dept_code and course.college_code = degree.college_code  and department.college_code = degree.college_code and degree.course_id=@course_id and degree.college_code=@college_code  and deptprivilages.Degree_code=degree.Degree_code and user_code=@user_code End Else begin select distinct degree.degree_code,department.dept_name,degree.Acronym from  degree,department,course,deptprivilages where course.course_id=degree.course_id and department.dept_code=degree.dept_code and course.college_code = degree.college_code  and department.college_code = degree.college_code and deptprivilages.Degree_code=degree.Degree_code and user_code=@user_code  End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'internalassessgetsubject'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc internalassessgetsubject ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure internalassessgetsubject @batchyear int,  @degreecode int, @cur_sem int,  @sections varchar(20),  @filterwithsection varchar(5000), @filterwithoutsection varchar(5000) as begin DECLARE @sqlCommand varchar(5000) if( @sections='All' or  @sections='') begin Select distinct S.Subject_Code, S.Subject_no,s.min_int_marks,S.max_int_marks,SS.Subject_Type,s.subject_name,s.acronym,SS.SubType_No from Subject as s,  Sub_Sem as ss , Syllabus_Master as SMas,camarks c where SMas.Syll_Code = S.Syll_Code and SMas.Syll_Code = SS.Syll_Code and  SS.Syll_Code =S.Syll_Code and S.SubType_no = SS.Subtype_no and s.subject_no=c.subject_no and SS.Promote_Count = 1 and SMas.Degree_Code = @degreecode and SMas.Batch_Year =@batchyear and SMas.Semester = @cur_sem order by SS.SubType_No SET @sqlCommand = 'select Roll_Admit,roll_no,reg_no,stud_name,Stud_Type from registration where  '+ @filterwithsection EXEC (@sqlCommand) End Else Select distinct S.Subject_Code, S.Subject_no,s.min_int_marks,S.max_int_marks, SS.Subject_Type,s.subject_name,s.acronym ,SS.SubType_No  from Subject as s, Sub_Sem as ss , Syllabus_Master as SMas,camarks c where SMas.Syll_Code = S.Syll_Code and SMas.Syll_Code = SS.Syll_Code and  SS.Syll_Code = S.Syll_Code and S.SubType_no = SS.Subtype_no and SS.Promote_Count = 1 and s.subject_no=c.subject_no and SMas.Degree_Code = @degreecode and SMas.Batch_Year =@batchyear and SMas.Semester = @cur_sem order by SS.SubType_No SET @sqlCommand = 'select Roll_Admit,roll_no,reg_no,stud_name,Stud_Type from registration where  '+ @filterwithoutsection EXEC (@sqlCommand) End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'getAppSub'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc getAppSub ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE [dbo].[getAppSub](@roll_no varchar(20),@semester int ) AS (select '' as type,0 as attempts, sub_sem.fee_per_paper as fee,subjectchooser.subject_no  from  subjectchooser, sub_sem, subject where subject.subject_no = subjectchooser.subject_no and sub_sem.subtype_no=subjectchooser.subtype_no and subjectchooser.roll_no=@roll_no and  semester =@semester and sub_sem.promote_count=1) union (select '*' as type, attempts , sub_sem.arr_fee as fee,  mark_entry.subject_no from mark_entry  ,subject, sub_sem,subjectchooser where mark_entry.roll_no = @roll_no and mark_entry.result <> 'pass' and mark_entry.result <> 'S' and mark_entry.result <> 'NS' and mark_entry.result <> 'SA' and mark_entry.passorfail = 0  and subject.subject_no  =  mark_entry.subject_no and sub_sem.subtype_no = subject.subtype_no and sub_sem.promote_count = 1  and subjectchooser.subject_no=mark_entry.subject_no and  subject.subject_no = subjectchooser.subject_no And mark_entry.roll_no = subjectchooser.roll_no and subjectchooser.semester<@semester) ----Get not applied subjects------21sep2012 ------------------------- Union (select '' as type,0 as attempts, sub_sem.fee_per_paper as fee,subjectchooser.subject_no  from subjectchooser,sub_sem,subject where subject.subject_no=subjectchooser.subject_no and sub_sem.subtype_no=subjectchooser.subtype_no and subjectchooser.roll_no=@roll_no and semester<@semester and sub_sem.subtype_no=subject.subtype_no and sub_sem.syll_code=subject.syll_code and promote_count=1 and subject.subject_no not in (select distinct subject_no from mark_entry where roll_no=@roll_no))";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'bind_college'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc bind_college ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE bind_college(@column_field varchar(100))AS begin  DECLARE @sqlCommand varchar(1000) SET @sqlCommand = 'select distinct c.collname,c.college_code,c.coll_acronymn from collinfo c,collegeprivilages cp WHERE c.college_code=cp.college_code ' + @column_field  EXEC (@sqlCommand) End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'enquiry_add_textcodenew'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc enquiry_add_textcodenew ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create PROCEDURE [dbo].[enquiry_add_textcodenew](@tval varchar(50),@tcrit varchar(50))AS begin if not exists(select TextCode  from textvaltable_new where TextCriteria=@tcrit and textval=@tval) begin insert into textvaltable_new(TextCriteria,TextVal) values(@tcrit,@tval) select distinct TextVal,TextCode  from textvaltable_new where TextCriteria=@tcrit  and textval<>'' End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'enquiry_delete_textcodenew'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc enquiry_delete_textcodenew ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create PROCEDURE [dbo].[enquiry_delete_textcodenew] ( @tval varchar(50),@tcrit varchar(50),@tcode varchar(10)) AS begin if  exists(select TextCode  from textvaltable_new where TextCriteria=@tcrit and textcode=@tcode  and textval=@tval) begin delete textvaltable_new where TextCriteria=@tcrit and textcode=@tcode and textval=@tval select distinct TextVal,TextCode  from textvaltable_new where TextCriteria=@tcrit  and textval<>'' End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcEnquiry_load'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcEnquiry_load ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create PROCEDURE [dbo].[ProcEnquiry_load]( @collegecode varchar(5) ) AS Begin select collname,college_code from collinfo select distinct TextVal,TextCode  from TextValTable where TextCriteria='taluk' and textval<>'' select TextVal,TextCode from TextValTable where  TextCriteria='otherconsult' select distinct TextVal,TextCode  from TextValTable where TextCriteria='mobil' and textval<>'' select distinct TextVal,TextCode  from TextValTable where TextCriteria='state' and textval<>'' select TextVal,TextCode from TextValTable where  TextCriteria='consult' select TextVal,TextCode from TextValTable where  TextCriteria='agent' select distinct TextVal,TextCode  from TextValTable where TextCriteria='comm' and textval<>'' select distinct TextVal,TextCode  from TextValTable where TextCriteria='caste' and textval<>'' select distinct TextVal,TextCode  from TextValTable where TextCriteria='reg' and textval<>'' select Textval,textcode from TextValTable where TextCriteria='unive' select Textval,textcode from TextValTable where TextCriteria='cours' select Textval,textcode from TextValTable where TextCriteria='branc' select Textval,textcode from TextValTable where TextCriteria='test' select staff_code,staff_name from staffmaster End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            //creatstrproc=string.Empty;
            //getval3=string.Empty;
            //getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcEnquiry_load'");
            //if (getval3 != "0")
            //{
            //    string drpstrproc = " drop proc ProcEnquiry_load ";
            //    if (drpstrproc != "")
            //    {
            //        int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
            //    }
            //}
            //creatstrproc = " Create  Procedure [dbo].[ProcEnquiry_New_load_spread_dateval] @fromdate nvarchar(100), @todate nvarchar(100)AS Begin select e.type,enq_no,stud_name,parent_name,Batch,Guardian_name,Guardian_Relationship,address,pincode,Phone,email, convert(varchar(20),date_enq,105)as date_enq,street,city,state,moblie,mobile_owner,sex,(select textval from TextValTable where textcriteria='taluk' and textcode=taluk) as taluk,Graduation,c.course_name as Course,d.Acronym as Branch,e.course as courseid, e.branch as branch_id ,remark,mode, mobile2,mobile_owner2,LTRIM(RIGcreate Procedure [dbo].[ProcEnquirySelectedData] @CollegeCode varchar(20), @DegreeCode varchar(20), @BatchYear varchar(20), @EnquiryNo varchar(30) As Begin select distinct e.enq_no as EnquiryNumber,e.stud_name AS CandidateName,e.parent_name as ParentName,e.address as Address,convert(varchar(20),e.date_enq,105) as EnquiryDate,convert(varchar(20),e.ConsultDate,105) as ConsultDate,e.email as EmailId,e.district as District,e.pincode as PinCode,e.Phone as PhoneNo,e.degree_code as DegreeCode,e.[direct/refer] as DirectRefer,e.refer_name as ReferName,LTRIM(RIGHT(CONVERT(VARCHAR(20), date_enq, 100), 7))as time_enq,LTRIM(RIGHT(CONVERT(VARCHAR(20), ConsultDate, 100), 7))as ConsultTime,e.street as Street,e.city as City,e.state as State,e.religion as Religion,e.caste as Caste,e.community as Community,e.citizen as Nationality,e.acr as acr ,e.moblie as Mobile1,e.mobile_owner as MobileOwner1,e.batch_year as BatchYear,e.mode as Mode,e.sex as Gender,dob as dob,e.mobile2 as Mobile2,e.mobile_owner2 as MobileOwner2,e.taluk as Taluk,e.app_status as AppStatus,e.remark as Remarks,e.refer_roll as ReferRollNo, refer_collegecode as ReferCollegeCode,c.Course_Id as CourseId,e.refer_stcode as ReferStaff,e.refer_name as ReferName,e.refer_Phoneno as ReferPhoneNumber,e.refer_email as ReferEmail,e.refer_agent as ReferAgent,e.refer_consult as ReferConsult,e.refer_conduct as ConductedBy,e.refer_conduct_city as ConductCity ,e.refer_consult as ReferConsult, e.Guardian_Name as GuardianName,e.Guardian_Relationship as GuardianRelationship,e.Course as Course,e.refer_category as Category,e.refer_batch as ReferBatch,e.refer_branch as ReferBranch,e.refer_degree as ReferDegree,e.refer_dept as ReferDepartment,e.refer_staff_category as ReferStaffCategory,e.rphone as RPhone,refer_remarks as ReferRemarks,e.rollno as Rollno,e.app_status as AppStatus,ConsultDate from enquiry e,Course c,Degree d where c.Course_id=d.course_id  and  d.degree_code=e.degree_code and e.enq_no=@EnquiryNo and e.college_code=@CollegeCode and e.degree_code=@DegreeCode and e.batch_year=@BatchYear select distinct fa.fee_code as FeeCode,fa.fee_amount as FeeAmount,fi.header_id as HeaderId from fee_allot fa,fee_info fi where fi.fee_code=fa.fee_code and batch=@BatchYear and college_code=@CollegeCode and enq_no =@EnquiryNo Endd @todate and applyn.batch_year = @batch_year and applyn.college_code = @college and applyn.degree_code = @Branch End";
            //if (creatstrproc != "")
            //{
            //    int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            //}
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'enq_load_spreadapplforall1'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc enq_load_spreadapplforall1 ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE procedure [dbo].[enq_load_spreadapplforall1] ( @fromdate varchar(20)=null, @todate varchar(20)=null ) as begin select app_no,app_formno,Stud_name,applyn.college_code,(course_name + '-'+ dept_acronym) as dept_name,  convert(varchar(20),date_applied,105) as date_applied, convert(varchar(20),applyn.dob,105) as dob, case sex when 0 then 'Male' else 'Female' end as sex,age, (select distinct TextVal  from textvaltable where TextCriteria='relig' and textcode=religion and textval<>'') as relig, (select distinct TextVal  from textvaltable where TextCriteria='caste' and textcode=caste and textval<>'')as caste ,(select distinct TextVal  from textvaltable where TextCriteria='comm' and textcode=Community and textval<>'') as comm , (select distinct TextVal  from textvaltable where TextCriteria='mton' and textcode=mother_tongue and textval<>'') as mton, (select distinct TextVal  from textvaltable where TextCriteria='seat' and textcode=seattype and textval<>'') as seat, (select distinct TextVal  from textvaltable_new where TextCriteria='seat' and textcode=quota and textval<>'') as Quota, (select distinct TextVal  from textvaltable where TextCriteria='serv' and textcode=extra_act and textval<>'') as serv, (select distinct TextVal  from textvaltable where TextCriteria='bgrou' and textcode=bldgrp and textval<>'') as blood, (select distinct TextVal  from textvaltable where TextCriteria='med' and textcode=medium_ins and textval<>'') as med, (select distinct TextVal  from textvaltable where TextCriteria='reg' and textcode=region and textval<>'') as reg, course.course_id as cid from applyn,degree,department,course Where degree.dept_code = department.dept_code And course.course_id = degree.course_id and degree.degree_code=applyn.degree_code and degree.college_code=applyn.college_code and date_applied between @fromdate and @todate End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'eligibile_mark_load'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc eligibile_mark_load ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE  procedure[dbo].[eligibile_mark_load] (@college_code int)  as begin select distinct  cl.acr+'-'+ltrim(str(r.batch_year))+'-'+c.course_name+'['+d.acronym+']' as course,d.degree_code, r.batch_year from collinfo cl,registration r,degree d,course c,department dt where d.college_code=r.college_code and c.course_id = d.course_id And dt.dept_code = d.dept_code And r.college_code = cl.college_code And r.cc = 0 And r.delflag = 0 and r.exam_flag<>'debar' and cl.college_code=@college_code order by r.batch_year,d.degree_code select distinct course_code,university_code,branch_code, (Select Textval from textvaltable where TextCriteria='cours' and Textcode=m.course_code) as Course, (Select Textval from textvaltable where TextCriteria='unive' and Textcode=m.university_code) as University, (Select Textval from textvaltable where TextCriteria='branc' and Textcode=m.branch_code) as Branch from marks m  where college_code=@college_code End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'enquiry_display_textcodenew'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc enquiry_display_textcodenew ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE [dbo].[enquiry_display_textcodenew] ( @tcrit varchar(50) ) AS BEGIN select *  from textvaltable_new where TextCriteria=@tcrit and textval<>'' End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'save_eligible_mark'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc save_eligible_mark ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE procedure [dbo].[save_eligible_mark] ( @degree_code nvarchar(50), @batch_year nvarchar(50), @subject_num nvarchar(50), @course_code nvarchar(50), @branch_code nvarchar(50), @univ_code nvarchar(50), @eligible_mark nvarchar(50), @selection nvarchar(100), @eligible_type nvarchar(50), @eligible_age nvarchar(50), @marriage_status nvarchar(20) ) as begin if not exists(select *from eligible_mark where degree_code=@degree_code and batch_year=@batch_year and university_code=@univ_code and course_code=@course_code and branch_code=@branch_code and subject_no=@subject_num and selection=@selection and elig_type=@eligible_type ) BEGIN insert into eligible_mark (degree_code,batch_year,university_code,course_code, branch_code,subject_no,selection, elig_type,eligible_age,marriage_status,eligi_mark) values(@degree_code,@batch_year,@univ_code,@course_code,@branch_code,@subject_num, @selection,@eligible_type,@eligible_age,@marriage_status,@eligible_mark ) End Else BEGIN update eligible_mark set eligi_mark=@eligible_mark , eligible_age=@eligible_age,marriage_status=@marriage_status where selection=@selection  and degree_code=@degree_code and batch_year=@batch_year and university_code=@univ_codeand course_code=@course_code and branch_code=@branch_code and subject_no=@subject_num and elig_type=@eligible_type End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'enquiry_check_subjectnew'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc enquiry_check_subjectnew ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  CREATE PROCEDURE  PROCEDURE [dbo].[enquiry_check_subjectnew] ( @branch int, @course int, @univ int, @subno int, @subname varchar(200), @minmark varchar(20), @maxmark varchar(20), @priority int,@college_code int ) AS BEGIN if exists(select 1 from marks where course_code=@course and university_code=@univ  and branch_code=@branch and subject_no=@subno and college_code=@college_code ) BEGIN update marks set max_marks=@maxmark,min_marks=@minmark,priority=@priority where subject_no=@subno and university_code=@univ and branch_code=@branch and course_code=@course and college_code=@college_codeEnd Else BEGIN insert into marks (university_code,course_code,branch_code,subject_no, subject_name, max_marks,min_marks,priority,college_code) values(@univ,@course, @branch,@subno,@subname,@maxmark,@minmark,@priority,@college_code) End End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'lastdetail_load'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc lastdetail_load ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  CREATE  PROCEDURE [dbo].[lastdetail_load] (@college_code int) AS BEGIN select Textval,textcode from textvaltable where TextCriteria='unive' and college_code=@college_code select Textval,textcode from textvaltable where TextCriteria='cours' and college_code=@college_code select Textval,textcode from textvaltable where TextCriteria='branc' and college_code=@college_code select Textval,textcode from textvaltable where TextCriteria='test' and college_code=@college_code End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'adm_select'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc adm_select ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create    procedure [dbo].[adm_select] ( @appno varchar(50), @degreecode varchar(10), @collegecode varchar(10) ) as begin select r.degree_code,r.app_no,r.batch_year,r.current_semester,r.roll_admit, r.roll_no,r.adm_date,r.tcno,r.tcdate,r.apply_degree_code,r.college_code,r.cons_date, r.stud_name , r.Mode, r.stud_type, a.reject_flag, a.reject_reason, a.college_preference, a.app_formno, r.Consortium from registration r,applyn a where r.app_no=a.app_no and r.college_code=a.college_code and r.app_no=@appno and r.degree_code=@degreecode and r.college_code=@collegecode End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'adm_insert'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc adm_insert ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create    procedure [dbo].[adm_insert]( @degree varchar(10), @appno varchar(10), @batch varchar(10), @admdate  varchar(20), @studname  varchar(20), @sem  varchar(20), @studtype  varchar(20), @rollno  varchar(20), @admno  varchar(20), @tcno  varchar(20)=null, @tcdate  varchar(20)=null, @accessdate  varchar(20), @accesstime  varchar(30), @collegecode  varchar(20), @mode  varchar(20), @appdegree  varchar(20), @rollnoflag  varchar(20), @cdate  varchar(20), @Consortium varchar(100) ) as begin if not exists(select 1 from registration where app_no=@appno and batch_year=@batch and college_code=@collegecode) begin insert into registration(degree_code,app_no,batch_year,current_semester,roll_admit, roll_no,rollno_flag,cc,delflag,exam_flag,Access_Date,Access_Time,adm_date,tcno,tcdate, apply_degree_code,college_code,cons_date,Consortium,stud_name,stud_type,mode) values(@degree,@appno,@batch,@sem,@admno, @rollno,@rollnoflag,0,0,'OK',@accessdate,@accesstime,@admdate,@tcno,@tcdate, @appdegree,@collegecode,@cdate,@Consortium,@studname,@studtype,@mode) End Else begin update registration set cons_date=@cdate, degree_code=@degree,app_no=@appno,batch_year=@batch,rollno_flag=@rollnoflag, current_semester=@sem,roll_admit=@admno, roll_no=@rollno,adm_date=@admdate,tcno=@tcno,tcdate=@tcdate,Access_Date=@accessdate, Access_Time=@accesstime, apply_degree_code=@appdegree,college_code=@collegecode,Consortium=@Consortium where app_no=@appno and batch_year=@batch and college_code=@collegecode End if not exists(select 1 from selection_list where app_no=@appno and batch_year=@batch) begin insert into selection_list(degree_code,app_no,batch_year,direct_admit_flag) values(@degree,@appno,@batch,1) End if(@mode<>2) Delete from OtherColl_Transfer where App_No =@appno End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'adm_update'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc adm_update ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create     procedure [dbo].[adm_update] ( @degree varchar(10), @appno varchar(10), @batch varchar(10), @admdate  varchar(20), @studname  varchar(20), @sem  varchar(20), @studtype  varchar(20), @rollno  varchar(20), @admno  varchar(20), @tcno  varchar(20)=null, @tcdate  varchar(20)=null, @accessdate  varchar(20), @accesstime  varchar(30), @collegecode  varchar(20), @mode  varchar(20), @appdegree  varchar(20), @rollnoflag  varchar(20), @cdate  varchar(20), @Consortium varchar(100)) as begin update registration set cons_date=@cdate, degree_code=@degree,app_no=@appno,batch_year=@batch,rollno_flag=@rollnoflag, current_semester=@sem,roll_admit=@admno, roll_no=@rollno,adm_date=@admdate,tcno=@tcno,tcdate=@tcdate,Access_Date=@accessdate, Access_Time=@accesstime, apply_degree_code=@appdegree,college_code=@collegecode,Consortium=@Consortium,stud_type=@studtype where app_no=@appno if not exists(select 1 from selection_list where app_no=@appno and batch_year=@batch) begin insert into selection_list(degree_code,app_no,batch_year,direct_admit_flag) values(@degree,@appno,@batch,1) End if(@mode<>2) Delete from OtherColl_Transfer where App_No =@appno End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'adm_fill'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc adm_fill ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  CREATE  procedure [dbo].[adm_fill]  ( @fromdate varchar(20), @todate varchar(20) ) as begin select r.app_no,r.college_code,r.degree_code,app_formno,roll_admit, r.stud_name, convert(varchar(20),date_applied,105) as date_applied, convert(varchar(20),adm_date,105) as adm_date, case sex when 0 then 'Male' else 'Female' end as sex, convert(varchar(20),dob,105) as dob from registration r, applyn a where r.app_no=a.app_no and r.delflag=0 and r.exam_flag <> 'debar' and  adm_date between @fromdate and @todate End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'adm_insert_previous'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc adm_insert_previous ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create procedure [dbo].[adm_insert_previous] ( @Prev_College_Name varchar(50), @Letter_Date varchar(20), @Letter_No varchar(50), @prev_college_rollno  varchar(50), @prev_college_regno  varchar(50), @appno  varchar(50) ) as begin if not exists(select 1 from OtherColl_Transfer where app_no=@appno) begin insert into OtherColl_Transfer (Prev_College_Name,Letter_Date, Letter_No,prev_college_rollno,prev_college_regno,app_no) values(@Prev_College_Name,@Letter_Date, @Letter_No,@prev_college_rollno,@prev_college_regno,@appno) End Else begin update OtherColl_Transfer set Prev_College_Name=@Prev_College_Name,Letter_Date=@Letter_Date, Letter_No=@Letter_No,prev_college_rollno=@prev_college_rollno, prev_college_regno=@prev_college_regno where app_no=@appno End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'register_apply_insert_previous_marks'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc register_apply_insert_previous_marks ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create PROCEDURE [dbo].[register_apply_insert_previous_marks] ( @courseno varchar(50), @subjectno varchar(50), @mark varchar(50), @min varchar(50), @max varchar(50), @regno nvarchar(50), @result varchar(10) ) AS begin if not exists(select 1  from perv_marks_history where course_entno=@courseno and psubjectno=@subjectno) begin insert into perv_marks_history(course_entno,psubjectno,acual_marks, min_marks,max_marks,registerno,result)values(@courseno,@subjectno,@mark,@min,@max,@regno,@result) End Else begin update perv_marks_history set acual_marks=@mark, min_marks=@min, max_marks=@max, result=@result where course_entno=@courseno and psubjectno=@subjectno End End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'bind_degree_register'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc bind_degree_register ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure [dbo].[bind_degree_register] ( @college_code varchar(20) ) as if(@college_code!='All') begin select distinct degree.course_id, course.course_name from degree,course,deptprivilages  Where course.course_id = degree.course_id And course.college_code = degree.college_code  and degree.college_code=@college_code and deptprivilages.Degree_code=degree.Degree_code End Else begin select distinct degree.course_id,course.course_name from degree,course,deptprivilages  Where course.course_id = degree.course_id And course.college_code = degree.college_code and deptprivilages.Degree_code=degree.Degree_code End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'register_apply_insert_previous'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc register_apply_insert_previous ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create  PROCEDURE [dbo].[register_apply_insert_previous] ( @course varchar(50), @branch varchar(50), @univ varchar(50), @appno varchar(20), @passyear varchar(20), @school_name varchar(200), @school_address varchar(300), @passmonth varchar(50), @med nvarchar(50), @percet int ) AS begin if not exists(select 1  from stud_prev_details where app_no=@appno and course_code=@course and university_code=@univ and branch_code=@branch) begin insert into stud_prev_details(app_no,course_code,university_code,branch_code,passyear,institute_name,instaddress,passmonth,medium,percentage) values(@appno,@course,@univ,@branch,@passyear,@school_name,@school_address,@passmonth,@med,@percet) End Else begin update stud_prev_details set passyear=@passyear,percentage=@percet where app_no=@appno and course_code=@course and university_code=@univ and branch_code=@branch End select distinct course_entno  from stud_prev_details where app_no=@appno and course_code=@course and university_code=@univ and branch_code=@branch and passyear=@passyear End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'enquiry_check_textcodenew'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc enquiry_check_textcodenew ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create  Procedure [dbo].[enquiry_check_textcodenew] ( @tval varchar(50), @tcrit varchar(50) ) AS begin if not exists(select TextCode  from textvaltable_new where TextCriteria=@tcrit  and textval=@tval) begin insert into textvaltable_new(TextCriteria,TextVal) values(@tcrit,@tval) End select distinct TextVal,TextCode  from textvaltable_new where TextCriteria=@tcrit and textval=@tval and textval<>'' End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'BIND_BATCH_CLASSTEST'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc BIND_BATCH_CLASSTEST ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create  procedure [dbo].[BIND_BATCH_CLASSTEST] as set nocount on; begin select distinct batch_year from Registration where batch_year<>'-1' and batch_year<>'' and cc=0 and delflag=0 and exam_flag<>'debar' order by batch_year select max(batch_year) from Registration where batch_year<>'-1' and batch_year<>'' and cc=0 and delflag=0 and exam_flag<>'debar' End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'BIND_BRANCH_CLASSTEST'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc BIND_BRANCH_CLASSTEST ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure [dbo].[BIND_BRANCH_CLASSTEST] ( @col_code int ) as SET NOCOUNT ON; begin select distinct degree.course_id,course.course_name from degree,course,deptprivilages where course.course_id=degree.course_id and course.college_code = degree.college_code and degree.college_code=@col_code and deptprivilages.Degree_code=degree.Degree_code End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'BIND_DEGREE_CLASSTEST'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc BIND_DEGREE_CLASSTEST ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure [dbo].[BIND_DEGREE_CLASSTEST] ( @college_code int, @course_id int ) as SET NOCOUNT ON; begin select distinct degree.degree_code,department.dept_name from degree,department,course,deptprivilages where course.course_id=degree.course_id and department.dept_code=degree.dept_code and course.college_code = degree.college_code and department.college_code = degree.college_code and degree.course_id=@course_id and degree.college_code=@college_code  and deptprivilages.Degree_code=degree.Degree_code End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'BIND_SEM_CLASSTEST'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc BIND_SEM_CLASSTEST ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure [dbo].[BIND_SEM_CLASSTEST] ( @degree_code int, @batch_year int, @college_code int ) as begin if(@batch_year ='') begin select distinct duration as duration,first_year_nonsemester from degree where degree_code=@degree_code  and college_code=@college_code End Else  begin select distinct ndurations as duration,first_year_nonsemester from ndegree where degree_code=@degree_code and college_code=@college_code and batch_year=@batch_year End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Load_Roll'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc Load_Roll ";
                if (drpstrproc != "")
                {
                    int procd = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create  procedure [dbo].[Load_Roll] ( @college_code int, @roll varchar(50), @type varchar(5) ) as declare @d_code varchar(50) SET NOCOUNT ON; if @type='0' begin select roll_no,roll_admit,reg_no,Stud_Name,degree_code,app_no  from registration where college_code=@college_code and roll_no=@roll set @d_code=(select degree_code from registration where college_code=@college_code and roll_no=@roll) select course_name,dept_name from degree,department,course where degree_code=@d_code and degree.dept_code=department.dept_code and degree.college_code=department.college_code and degree.course_id=course.course_id End else if @type='1' begin select roll_no,roll_admit,reg_no,Stud_Name,degree_code,app_no  from registration where college_code=@college_code and roll_no=@roll End else if @type='2' begin select roll_no,roll_admit,reg_no,Stud_Name,degree_code,app_no  from registration where college_code=@college_code and roll_no=@roll End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            //  store procedur-acdamic4
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'applyn_select_textcode'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc applyn_select_textcode ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE  PROCEDURE [dbo].[applyn_select_textcode] ( @tcode varchar(50), @tcrit varchar(50) ) AS BEGIN select distinct TextVal  from textvaltable where TextCriteria=@tcrit and textcode=@tcode and textval<>'' End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'proc_registered_value'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc proc_registered_value ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE  procedure [dbo].[proc_registered_value] @examcode_p int, @batchyear_p int, @degreecode_p int, @semester_p int As begin select count(distinct roll_no) FROM exam_application where exam_code=@examcode_p select count(distinct m.roll_no) from mark_entry m,registration r Where m.roll_no = r.roll_no And r.delflag = 0 And m.attempts <= 1 and ltrim(rtrim(type))='' and m.exam_code in (select exam_code from exam_details where degree_code=@degreecode_p and current_semester=@semester_p and batch_year=@batchyear_p) select  count(distinct roll_no)  from mark_entry where ltrim(rtrim(type))='' and result = 'Pass' and passorfail=1 and exam_code in (select exam_code from exam_details where degree_code=@degreecode_p  and current_semester= @semester_p and batch_year=@batchyear_p) select  count(distinct roll_no)  from mark_entry where ltrim(rtrim(type))='' and result = 'Fail' and passorfail=0 and exam_code in (select exam_code from exam_details where degree_code=@degreecode_p and current_semester=@semester_p and batch_year=@batchyear_p ) select  count(distinct roll_no)  from mark_entry where ltrim(rtrim(type))='' and result like 'A%' and passorfail=0 and exam_code in (select exam_code from exam_details where degree_code=@degreecode_p and current_semester=@semester_p and batch_year=@batchyear_p ) End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'proc_range'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc proc_range ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create  procedure [dbo].[proc_range] @batchyear_p int, @degreecode_p int, @semester_p int, @examcode_p int as begin select count(total) from mark_entry where total between '0' and '39' and exam_code in(select exam_code from exam_details where degree_code=@degreecode_p and current_semester=@semester_p and batch_year=@batchyear_p ) select count(total) from mark_entry where total between '40' and '59' and exam_code in(select exam_code from exam_details where degree_code=@degreecode_p and current_semester=@semester_p and batch_year=@batchyear_p ) select count(total) from mark_entry where total between '60' and '74' and exam_code in(select exam_code from exam_details where degree_code=@degreecode_p and current_semester=@semester_p and batch_year=@batchyear_p ) select count(total) from mark_entry where total between '75' and '90' and exam_code in(select exam_code from exam_details where degree_code=@degreecode_p and current_semester=@semester_p and batch_year=@batchyear_p ) select count(total) from mark_entry where total between '91' and '100' and exam_code in(select exam_code from exam_details where degree_code=@degreecode_p and current_semester=@semester_p and batch_year=@batchyear_p ) End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'procbranchwiseresultanalysis'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc procbranchwiseresultanalysis ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE  procedure [dbo].[procbranchwiseresultanalysis] @degreecode int, @batchyear int, @semester int, @subject_no int,  @examCode int, @papertype int as begin declare @type int set @type=@papertype if(@type=1) begin select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1 and m.attempts = 1 and subject_no=@subject_no and ltrim(rtrim(type))='' and (result='pass' or result='fail' or result='S' or result='WHD') and m.exam_code in (select exam_code from exam_details where degree_code= @degreecode and current_semester=@semester and batch_year=@batchyear) select count(result) from mark_entry where ltrim(rtrim(type))='' and result = 'Pass' and attempts=1 and subject_no = @subject_no and exam_code in (select exam_code from exam_details where degree_code= @degreecode and current_semester= @semester and batch_year=@batchyear)select count(result) from mark_entry where ltrim(rtrim(type))='' and (result = 'Fail' or result='WHD') and attempts=1 and subject_no = @subject_no and exam_code in (select exam_code from exam_details where degree_code= @degreecode and current_semester= @semester and batch_year=@batchyear ) select count(roll_no) from exam_application ea,exam_appl_details ead where exam_code=@examCode and ea.appl_no=ead.appl_no and ead.subject_no=@subject_no select count(result) from mark_entry where ltrim(rtrim(type))='' and result = 'A%' and passorfail=0 and subject_no = @subject_no and exam_code in (select exam_code from exam_details where degree_code=@degreecode and current_semester=@semester and batch_year=@batchyear ) End Else if(@type=0) begin select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1 and m.attempts = 1 and subject_no=@subject_no and ltrim(rtrim(type))='' and (result='pass' or result='fail' or result='S' or result='WHD') and m.exam_code in (select exam_code from exam_details where degree_code= @degreecode and batch_year=@batchyear and current_semester=@semester) select count(result) from mark_entry where ltrim(rtrim(type))='*' and result = 'Pass' and attempts=1 and subject_no = @subject_no and exam_code in (select exam_code from exam_details where degree_code= @degreecode and current_semester= @semester and batch_year=@batchyear) select count(result) from mark_entry where ltrim(rtrim(type))='*' and (result = 'Fail' or result='WHD') and attempts=1 and subject_no = @subject_no and exam_code in (select exam_code from exam_details where degree_code= @degreecode and current_semester= @semester and batch_year=@batchyear ) select count(roll_no) from exam_application ea,exam_appl_details ead where exam_code=@examCode and ea.appl_no=ead.appl_no and ead.subject_no=@subject_no select count(result) from mark_entry where ltrim(rtrim(type))='' and result = 'A%' and passorfail=0 and subject_no = @subject_no and exam_code in (select exam_code from exam_details where degree_code=@degreecode and current_semester=@semester and batch_year=@batchyear ) End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'proc_arrear_roll'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc proc_arrear_roll ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create  procedure [dbo].[proc_arrear_roll] @cur_sem_p int, @batchyear_p int, @degreecode_p int as begin select roll_no from registration where batch_year=@batchyear_p and degree_code=@degreecode_p and current_semester=@cur_sem_p and delflag =0 and exam_flag <>'Debar' End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'procexamfeerolladmit'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc procexamfeerolladmit ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create  procedure [dbo].[procexamfeerolladmit] @batch_year varchar(20), @semester int, @degree_code int, @feecode int, @textvalsemester varchar(25) as begin select roll_admit from registration where batch_year=@batch_year and degree_code=@degree_code and current_semester=@semester and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select textcode from textvaltable where textval=@textvalsemester select fee_code,header_id from fee_info where   fee_code=@feecode End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'proc_stud_name'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc proc_stud_name ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure [dbo].[proc_stud_name] @batchyear_p int, @degreecode_p int, @fromsem_ddl_p int, @tosem_ddl_p int as begin select roll_no,stud_name,reg_no from registration where batch_year=@batchyear_p and degree_code=@degreecode_p and current_semester>=@fromsem_ddl_p and current_semester>=@tosem_ddl_p and delflag =0 and exam_flag <>'Debar' order by roll_no End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcDeptbind_batch'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcDeptbind_batch ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create procedure [dbo].[ProcDeptbind_batch] @CollegeCode varchar(30) as Begin select distinct batch_year from Registration where batch_year<>'-1' and batch_year<>'' and cc=0 and delflag=0 and exam_flag<>'debar' and college_code=@CollegeCode order by batch_year select max(batch_year) from Registration where batch_year<>'-1' and batch_year<>'' and cc=0 and delflag=0 and exam_flag<>'debar' and college_code=@CollegeCode End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcDeptbind_batch'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcDeptbind_batch ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create Procedure ProcDepartmentTransfer @Degree varchar(30), @Batch varchar(30) AS Begin Select isnull(Roll_No,'') as RollNo,isnull(Reg_No,'') as RegNo ,isnull(Stud_Name,'') as SName,Current_Semester as Semester from registration where Degree_Code=@Degree and Batch_Year = @Batch and delflag =0 and exam_flag <>'Debar' and cc = 0 and Current_semester is not null and RollNo_Flag=1 and Roll_No is not null and ltrim(rtrim(Roll_No)) <>'' order by RollNo End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcDeptStaffSelector'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcDeptStaffSelector ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create Procedure ProcDeptStaffSelector @Criteria_No varchar(80), @Staff_Code varchar(30), @subject_no varchar(30), @entry_date varchar(30), @Exam_Date varchar(30), @batch_year varchar(40), @Max_Mark varchar(30), @Min_Mark varchar(20) AS Begin if not exists(Select * from Exam_Type where Criteria_No=@Criteria_No) Begin insert into Exam_Type(Criteria_no,Staff_Code,Subject_no,entry_date,Exam_Date,batch_year,Max_Mark,Min_Mark,Duration) values(@Criteria_No,@Staff_Code,@subject_no,@entry_date,@Exam_Date,@batch_year,@Max_Mark,@Min_Mark,'1') End End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcDeptSelectAttendShedule'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcDeptSelectAttendShedule ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create Procedure ProcDeptSelectAttendShedule @DestCode varchar(50) AS Begin select isnull(No_of_hrs_per_day,0) as No_of_hrs_per_day,isnull(no_of_hrs_I_half_day,0) as no_of_hrs_I_half_day,isnull(no_of_hrs_II_half_day,0) as no_of_hrs_II_half_day,isnull(min_pres_I_half_day,0)as min_pres_I_half_day,isnull(min_pres_II_half_day,0) as min_pres_II_half_day,isnull(percent_eligible_for_exam,0)as percent_eligible_for_exam,isnull(percent_eligible_for_cond,0) as percent_eligible_for_cond,isnull(reexam_eligible_for_exam,0) as reexam_eligible_for_exam,isnull(reexam_eligible_for_cond,0) as reexam_eligible_for_cond,isnull(reexam_eligible_for_reexam,0) as reexam_eligible_for_reexam,isnull(Condonation_fee,0) as Condonation_fee,isnull(reexam_condonation_fee,0) as reexam_condonation_fee,isnull(percent_eligible_for_reexam,0) as percent_eligible_for_reexam,isnull(min_hrs_per_day,0) as min_hrs_per_day,isnull(semester,0) as semester,isnull(schOrder,0) as schOrder,isnull(nodays,0) as nodays,isnull(atnd_mark_total,0) as atnd_mark_total,isnull(markAccPerc,0) as markAccPerc, isnull(holiday, 0) As holiday,Para_Code   from PeriodAttndSchedule where degree_code=@DestCode and Semester is not null Order by Semester End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcDeptAttndSheduleInsert'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcDeptAttndSheduleInsert ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create Procedure ProcDeptAttndSheduleInsert @Degree_Code varchar(50), @No_of_hrs_per_day  varchar(20), @no_of_hrs_I_half_day varchar(20), @no_of_hrs_II_half_day varchar(20), @min_pres_I_half_day varchar(20), @min_pres_II_half_day varchar(20), @percent_eligible_for_exam varchar(20), @percent_eligible_for_cond varchar(50), @reexam_eligible_for_exam varchar(50), @reexam_eligible_for_cond varchar(30), @reexam_eligible_for_reexam varchar(50), @Condonation_fee varchar(40), @reexam_condonation_fee VARCHAR(50), @percent_eligible_for_reexam varchar(20), @min_hrs_per_day varchar(10), @semester varchar(10), @schOrder varchar(20), @nodays varchar(20), @atnd_mark_total varchar(50), @markAccPerc varchar(30), @holiday varchar(40) AS Begin If Not Exists(Select * from PeriodAttndSchedule where Degree_Code=@Degree_Code and Semester =@Semester) Begin insert into PeriodAttndSchedule(Degree_Code,No_of_hrs_per_day,no_of_hrs_I_half_day,no_of_hrs_II_half_day,min_pres_I_half_day, min_pres_II_half_day,percent_eligible_for_exam,percent_eligible_for_cond,reexam_eligible_for_exam,reexam_eligible_for_cond, reexam_eligible_for_reexam,Condonation_fee,reexam_condonation_fee,percent_eligible_for_reexam,min_hrs_per_day,semester,schOrder,nodays,atnd_mark_total, markAccPerc,holiday)values(@Degree_Code,@No_of_hrs_per_day,@no_of_hrs_I_half_day,@no_of_hrs_II_half_day,@min_pres_I_half_day,@min_pres_II_half_day, @percent_eligible_for_exam,@percent_eligible_for_cond,@reexam_eligible_for_exam,@reexam_eligible_for_cond,@reexam_eligible_for_reexam, @Condonation_fee,@reexam_condonation_fee,@percent_eligible_for_reexam,@min_hrs_per_day,@semester,@schOrder,@nodays,@atnd_mark_total, @markAccPerc,@holiday) End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcDeptSelectAttendShedule'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcDeptSelectAttendShedule ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create Procedure ProcDeptParaInsert @FRange Varchar(30), @TRange varchar(30), @attnd_mark varchar(30), @Para_Code varchar(30) AS Begin If Not Exists(select * from Attnd_Para where FRange=@FRange and TRange=@TRange and Para_Code=@Para_Code) Begin insert into Attnd_Para(FRange,TRange,attnd_mark,Para_Code) values(@FRange,@TRange,@attnd_mark,@Para_Code) End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcDeptTransferReports'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcDeptTransferReports ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE Procedure [dbo].[ProcDeptTransferReports] @Degree_Code varchar(40), @Batch_Year varchar(30), @Date varchar(30) As begin IF @Date='All' begin select distinct isnull(r.Roll_no,' ') as Roll_no,isnull(r.Reg_no,' ') as Reg_No,isnull(r.stud_name,' ') as StudentName,convert(varchar(20),r.TransferDate,105) as TransferDate,dept.Dept_Acronym as Department,d.Degree_Code,ci.acr,ci.college_code from Registration  r,degree d,department dept,collinfo ci where ci.college_code=isnull(r.OldCollegeCode,r.College_Code) and dept.dept_code=d.dept_code and d.degree_Code=isnull(r.OldDegree_Code,r.degree_code) and r.degree_code=@Degree_Code and r.Batch_Year=@Batch_Year and delflag =0 and exam_flag <>'Debar' and cc = 0 and Current_semester is not null and RollNo_Flag=1 and Roll_No is not null and ltrim(rtrim(Roll_No)) <>'' and OldDegree_Code is not null order by Roll_No End Else begin select distinct isnull(r.Roll_no,' ') as Roll_no,isnull(r.Reg_no,' ') as Reg_No,isnull(r.stud_name,' ') as StudentName,convert(varchar(20),r.TransferDate,105) as TransferDate,dept.Dept_Acronym as Department,d.Degree_Code,ci.acr,ci.college_code from Registration  r,degree d,department dept,collinfo ci where convert(varchar(20),r.TransferDate,105)=@Date and  ci.college_code=isnull(r.OldCollegeCode,r.College_Code) and dept.dept_code=d.dept_code and d.degree_Code=isnull(r.OldDegree_Code,r.degree_code) and r.degree_code=@Degree_Code and r.Batch_Year=@Batch_Year and delflag =0 and exam_flag <>'Debar' and cc = 0 and Current_semester is not null and RollNo_Flag=1 and Roll_No is not null and ltrim(rtrim(Roll_No)) <>'' and OldDegree_Code is not null order by Roll_No End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'enquiry_delete_textcode'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc enquiry_delete_textcode ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE PROCEDURE [dbo].[enquiry_delete_textcode] ( @collegecode varchar(5), @tval varchar(50), @tcrit varchar(50), @tcode varchar(10) ) AS begin if  exists(select TextCode  from textvaltable where TextCriteria=@tcrit and textcode=@tcode and college_code =@collegecode and textval=@tval) begin delete textvaltable where TextCriteria=@tcrit and textcode=@tcode and college_code =@collegecode and textval=@tval select distinct TextVal,TextCode  from textvaltable where TextCriteria=@tcrit and textval<>'' and college_code =@collegecode End End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'enquiry_check_textcode'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc enquiry_check_textcode ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE  PROCEDURE [dbo].[enquiry_check_textcode]  ( @collegecode varchar(5), @tval varchar(50), @tcrit varchar(50) ) AS begin if not exists (select TextCode  from textvaltable where TextCriteria=@tcrit and college_code =@collegecode and textval=@tval) begin insert into textvaltable(college_code,TextCriteria,TextVal) values(@collegecode,@tcrit,@tval) End select distinct TextVal,TextCode  from textvaltable where TextCriteria=@tcrit and textval<>'' and textval=@tval and college_code =@collegecode End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'enquiry_add_textcode'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc enquiry_add_textcode ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE PROCEDURE [dbo].[enquiry_add_textcode] ( @collegecode varchar(5), @tval varchar(50), @tcrit varchar(50) ) AS begin if not exists(select TextCode  from textvaltable where TextCriteria=@tcrit and college_code =@collegecode and textval=@tval) begin insert into textvaltable(college_code,TextCriteria,TextVal) values(@collegecode,@tcrit,@tval) select distinct TextVal,TextCode  from textvaltable where TextCriteria=@tcrit and textval<>'' and college_code =@collegecode End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'enq_load_spreadapplforall_New1'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc enq_load_spreadapplforall_New1 ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE  procedure [dbo].[enq_load_spreadapplforall_New1] ( @fromdate varchar(20)=null, @todate varchar(20)=null, @college varchar(50) =null, @batch_year varchar(50) = null )  as begin select app_no,app_formno,Stud_name,applyn.college_code,(course_name + '-'+ dept_acronym) as dept_name,convert(varchar(20),date_applied,105) as date_applied, convert(varchar(20),applyn.dob,105) as dob, case sex when 0 then 'Male' else 'Female' end as sex,age, (select distinct TextVal  from textvaltable where TextCriteria='relig' and textcode=religion and textval<>'') as relig, (select distinct TextVal  from textvaltable where TextCriteria='caste' and textcode=caste and textval<>'')as caste , (select distinct TextVal  from textvaltable where TextCriteria='comm' and textcode=Community and textval<>'') as comm , (select distinct TextVal  from textvaltable where TextCriteria='mton' and textcode=mother_tongue and textval<>'') as mton, (select distinct TextVal  from textvaltable where TextCriteria='seat' and textcode=seattype and textval<>'') as seat, (select distinct TextVal  from textvaltable_new where TextCriteria='seat' and textcode=seattype and textval<>'') as Quota, (select distinct TextVal  from textvaltable where TextCriteria='serv' and textcode=extra_act and textval<>'') as serv,(select distinct TextVal  from textvaltable where TextCriteria='bgrou' and textcode=bldgrp and textval<>'') as blood, (select distinct TextVal  from textvaltable where TextCriteria='med' and textcode=medium_ins and textval<>'') as med, (select distinct TextVal  from textvaltable where TextCriteria='reg' and textcode=region and textval<>'') as reg, course.course_id as cid  from applyn,degree,department,course Where degree.dept_code = department.dept_code And course.course_id = degree.course_id and degree.degree_code=applyn.degree_code and degree.college_code=applyn.college_code and date_applied between @fromdate and @todate and applyn.batch_year = @batch_year End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'enq_load_spreadapplforall_New'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc enq_load_spreadapplforall_New ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create  procedure [dbo].[enq_load_spreadapplforall_New] ( @fromdate varchar(20)=null, @todate varchar(20)=null, @batch_year varchar(50) = null ) as begin select app_no,app_formno,Stud_name,applyn.college_code,(course_name + '-'+ dept_acronym) as dept_name,date_applied as date_applied, applyn.dob as dob, case sex when 0 then 'Male' else 'Female' end as sex,age, (select distinct TextVal  from textvaltable where TextCriteria='relig' and textcode=religion and textval<>'') as relig, (select distinct TextVal  from textvaltable where TextCriteria='caste' and textcode=caste and textval<>'')as caste , (select distinct TextVal  from textvaltable where TextCriteria='comm' and textcode=Community and textval<>'') as comm , (select distinct TextVal  from textvaltable where TextCriteria='mton' and textcode=mother_tongue and textval<>'') as mton, (select distinct TextVal  from textvaltable where TextCriteria='seat' and textcode=seattype and textval<>'') as seat, (select distinct TextVal  from textvaltable_new where TextCriteria='seat' and textcode=seattype and textval<>'') as Quota, (select distinct TextVal  from textvaltable where TextCriteria='bgrou' and textcode=bldgrp and textval<>'') as blood, (select distinct TextVal  from textvaltable where TextCriteria='med' and textcode=medium_ins and textval<>'') as med, (select distinct TextVal  from textvaltable where TextCriteria='reg' and textcode=region and textval<>'') as reg, course.course_id as cid  from applyn,degree,department,course Where degree.dept_code = department.dept_code And course.course_id = degree.course_id and degree.degree_code=applyn.degree_code and degree.college_code=applyn.college_code and date_applied between @fromdate and @todate and applyn.batch_year = @batch_year End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'enq_load_spreadapplforall_Branch'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc enq_load_spreadapplforall_Branch ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE procedure [dbo].[enq_load_spreadapplforall_Branch] ( @fromdate varchar(20)=null, @todate varchar(20)=null, @batch_year varchar(50) = null, @Branch varchar(50) = null ) as begin select app_no,app_formno,Stud_name,applyn.college_code,(course_name + '-'+ dept_acronym) as dept_name,  convert(varchar(20),date_applied,105) as date_applied, convert(varchar(20),applyn.dob,105) as dob, case sex when 0 then 'Male' else 'Female' end as sex,age, (select distinct TextVal  from textvaltable where TextCriteria='relig' and textcode=religion and textval<>'') as relig, (select distinct TextVal  from textvaltable where TextCriteria='caste' and textcode=caste and textval<>'')as caste , (select distinct TextVal  from textvaltable where TextCriteria='comm' and textcode=Community and textval<>'') as comm , (select distinct TextVal  from textvaltable where TextCriteria='mton' and textcode=mother_tongue and textval<>'') as mton, (select distinct TextVal  from textvaltable where TextCriteria='serv' and textcode=extra_act and textval<>'') as serv, (select distinct TextVal  from textvaltable where TextCriteria='seat' and textcode=seattype and textval<>'') as seat, (select distinct TextVal  from textvaltable_new where TextCriteria='seat' and textcode=quota and textval<>'') as Quota, (select distinct TextVal  from textvaltable where TextCriteria='bgrou' and textcode=bldgrp and textval<>'') as blood, (select distinct TextVal  from textvaltable where TextCriteria='med' and textcode=medium_ins and textval<>'') as med, (select distinct TextVal  from textvaltable where TextCriteria='reg' and textcode=region and textval<>'') as reg, course.course_id as cid  from applyn,degree,department,course Where degree.dept_code = department.dept_code And course.course_id = degree.course_id and degree.degree_code=applyn.degree_code and degree.college_code=applyn.college_code and date_applied between @fromdate and @todate and applyn.batch_year = @batch_year and applyn.degree_code = @Branch End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_ins_upd_student_attendance'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sp_ins_upd_student_attendance ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure sp_ins_upd_student_attendance  @columnname varchar(50), @roll_no nvarchar(100), @month_year int, @values tinyint as begin declare @Query nvarchar(4000) declare @ParmDefinition nvarchar(500); set @Query = ' if exists(select * from attendance where roll_no=@roll_no and month_year=@month_year ) update attendance set' + quotename(@columnname) +' = @values where roll_no=@roll_no and month_year=@month_year Else insert into attendance(roll_no,month_year,' + quotename(@ColumnName) +') values (@roll_no, @month_year,@values)' set @ParmDefinition =N'@columnname varchar(50),@roll_no nvarchar(100), @month_year int,@values tinyint' exec sp_executesql @Query, @ParmDefinition, @columnname = @columnname, @roll_no = @roll_no,@month_year=@month_year,@values=@values End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_ins_upd_student_attendance'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sp_ins_upd_student_attendance ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure sp_ins_upd_student_attendance_reason  @columnname varchar(50), @roll_no nvarchar(100), @month_year int, @values nvarchar(100) as begin declare @Query nvarchar(4000) declare @ParmDefinition nvarchar(500); set @Query = ' if exists(select * from Attendance_withreason where roll_no=@roll_no and month_year=@month_year ) update Attendance_withreason set' + quotename(@columnname) +' = @values where roll_no=@roll_no and month_year=@month_year Else insert into Attendance_withreason(roll_no,month_year,' + quotename(@ColumnName) +') values (@roll_no, @month_year,@values)' set @ParmDefinition =N'@columnname varchar(50),@roll_no nvarchar(100), @month_year int,@values nvarchar(100)' exec sp_executesql @Query, @ParmDefinition, @columnname = @columnname, @roll_no = @roll_no,@month_year=@month_year,@values=@values End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_select_details_staff'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sp_select_details_staff ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create procedure sp_select_details_staff (@college_code int) as begin select distinct p.degree_code,p.semester,p.SchOrder,nodays from periodattndschedule p,registration r where r.degree_code=p.degree_code  and r.current_semester=p.semester select distinct s.batch_year,s.degree_code,s.semester,CONVERT(VARCHAR(10),s.start_date,23)as sdate,starting_dayorder from seminfo s,registration r where r.degree_code=s.degree_code  and r.current_semester=s.semester and r.batch_year=s.batch_year select distinct b.batch_year, b.degree_code,b.semester,b.period1,LTRIM(RIGHT(CONVERT(VARCHAR(20), b.start_time, 100), 7))as start_time ,LTRIM(RIGHT(CONVERT(VARCHAR(20), b.end_time, 100), 7))as end_time  from BellSchedule b,degree d where  b.degree_code=d.degree_code and b.batch_year is not null and d.college_code=@college_code order by b.batch_year, b.degree_code,b.semester,b.period1 select * from attendance_hrlock where college_code=@college_code order by lock_hr select isnull(hrlock,0) as hrlock from collinfo where college_code=@college_code select distinct case c.Course_Name when '-1' then ' ' else c.Course_Name end as course ,de.dept_acronym,d.Degree_Code from Degree d,course c,Department de ,Registration r where de.Dept_Code=d.Dept_Code and c.Course_Id=d.Course_Id and r.degree_code=d.Degree_Code select max(No_of_hrs_per_day) as noofhours from PeriodAttndSchedule End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'tbl_alter_schedule_Details'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc tbl_alter_schedule_Details ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create table tbl_alter_schedule_Details (Batch_year int,Degree_COde int,Semester int,Sections nvarchar(15), FromDate datetime NULL,LastRec [int] NULL,No_of_Alter int null,TTName Nvarchar(300), mon1 varchar(300) NULL,mon2 varchar(300) NULL,mon3 varchar(300) NULL,mon4 varchar(300) NULL,mon6 varchar(300) NULL, mon7 varchar(300) NULL,mon8 varchar(300) NULL,mon9 varchar(300) NULL,mon10 varchar(300) NULL,tue1 varchar(300) NULL, tue2 varchar(300) NULL,tue3 varchar(300) NULL,tue4 varchar(300) NULL,tue5 varchar(300) NULL,tue6 varchar(300) NULL, tue7 varchar(300) NULL,tue8 varchar(300) NULL,tue9 varchar(300) NULL,tue10 varchar(300) NULL,wed1 varchar(300) NULL, wed2 varchar(300) NULL,wed3 varchar(300) NULL,wed4 varchar(300) NULL,wed5 varchar(300) NULL,wed6 varchar(300) NULL ,wed7 varchar(300) NULL,wed8 varchar(300) NULL,wed9 varchar(300) NULL,wed10 varchar(300) NULL,thu1 varchar(300) NULL, thu2 varchar(300) NULL,thu3 varchar(300) NULL,thu4 varchar(300) NULL,thu5 varchar(300) NULL,thu6 varchar(300) NULL, thu7 varchar(300) NULL,thu8 varchar(300) NULL,thu9 varchar(300) NULL,thu10 varchar(300) NULL,fri1 varchar(300) NULL, fri2 varchar(300) NULL,fri3 varchar(300) NULL,fri4 varchar(300) NULL,fri5 varchar(300) NULL,fri6 varchar(300) NULL, fri7 varchar(300) NULL,fri8 varchar(300) NULL,fri9 varchar(300) NULL,fri10 varchar(300) NULL,sat1 varchar(300) NULL, sat2 varchar(300) NULL,sat3 varchar(300) NULL,sat4 varchar(300) NULL,sat5 varchar(300) NULL,sat6 varchar(300) NULL, sat7 varchar(300) NULL,sat8 varchar(300) NULL,sat9 varchar(300) NULL,sat10 varchar(300) NULL,sun1 varchar(300) NULL, sun2 varchar(300) NULL,sun3 varchar(300) NULL,sun4 varchar(300) NULL,sun5 varchar(300) NULL,sun6 varchar(300) NULL ,sun7 varchar(300) NULL,sun8 varchar(300) NULL,sun9 varchar(300) NULL,sun10 varchar(300) NULL) ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_stu_atten_day_check'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sp_stu_atten_day_check ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  Create procedure sp_stu_atten_day_check (@columnname nvarchar(50),@batch_year int, @degree_code int, @sem int, @sections nvarchar(50), @month_year int, @date datetime, @subject_no int ) as BEGIN declare @Query nvarchar(4000) declare @ParmDefinition nvarchar(500); if(@sections='') set @Query = 'select count(distinct registration.roll_no) as stucount from registration,attendance,subjectchooser where degree_code=@degree_code and current_semester=@sem and batch_year=@batch_year and cc=0 and delflag=0 and exam_flag<>''debar'' and month_year=@month_year and registration.roll_no=attendance.roll_no and  registration.roll_no=subjectchooser.roll_no and registration.current_semester=subjectchooser.semester and subject_no=@subject_no and('+ quotename(@columnname)+' is not null and '+ quotename(@columnname)+'<>''0'' and '+ quotename(@columnname) +'<>'''') and adm_date<=@date' Else set @Query = 'select count(distinct registration.roll_no) as stucount  from registration,attendance,subjectchooser where degree_code=@degree_code and current_semester=@sem and batch_year=@batch_year and cc=0 and delflag=0 and exam_flag<>''debar'' and month_year=@month_year and registration.roll_no=attendance.roll_no and  registration.roll_no=subjectchooser.roll_no and registration.current_semester=subjectchooser.semester and subject_no=@subject_no and Sections=@sections and ('+ quotename(@columnname)+' is not null and '+ quotename(@columnname)+'<>''0'' and '+ quotename(@columnname) +'<>'''') and adm_date<=@date ' set @ParmDefinition =N'@columnname varchar(50),@batch_year int,@degree_code int,@sem int, @sections nvarchar(50), @month_year int,@date datetime,@subject_no int' exec sp_executesql @Query, @ParmDefinition, @columnname = @columnname, @batch_year = @batch_year, @degree_code=@degree_code, @sem=@sem, @sections=@sections,@month_year=@month_year,@date=@date, @subject_no=@subject_no End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_stu_atten_day_check_lab'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sp_stu_atten_day_check_lab ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  Create procedure sp_stu_atten_day_check_lab (@columnname nvarchar(50),@batch_year int, @degree_code int, @sem int,  @sections nvarchar(50), @month_year int, @date datetime, @subject_no int, @day nvarchar(50), @hour int,@ttmane nvarchar(100)) as BEGIN declare @Query nvarchar(4000) declare @ParmDefinition nvarchar(500); if(@sections='') set @Query = 'select count(distinct r.Roll_No) as stucount from registration r,attendance a,subjectchooser s where degree_code=@degree_code and current_semester=@sem and batch_year=@batch_year and cc=0 and delflag=0 and exam_flag<>''debar'' and month_year=@month_year and r.roll_no=a.roll_no and  r.roll_no=s.roll_no and r.current_semester=s.semester and subject_no=@subject_no and('+ quotename(@columnname)+' is not null and '+ quotename(@columnname)+'<>''0'' and '+ quotename(@columnname) +'<>'''') and batch in(select   stu_batch from laballoc where subject_no=@subject_no and batch_year=@batch_year  and hour_value=@hour  and degree_code=@degree_code and day_value=@day and semester=@sem and Timetablename=@ttmane) and adm_date<=@date' Else set @Query =  'select count(distinct r.Roll_No) as stucount from registration r,attendance a,subjectchooser s where degree_code=@degree_code and current_semester=@sem and batch_year=@batch_year and cc=0 and delflag=0 and exam_flag<>''debar'' and month_year=@month_year and r.roll_no=a.roll_no and  r.roll_no=s.roll_no and r.current_semester=s.semester and subject_no=@subject_no and sections=@sections and('+ quotename(@columnname)+' is not null and '+ quotename(@columnname)+'<>''0'' and '+ quotename(@columnname) +'<>'''') and batch in(select stu_batch from laballoc where subject_no=@subject_no and batch_year=@batch_year  and hour_value=@hour  and degree_code=@degree_code and day_value=@day and semester=@sem and sections=@sections and Timetablename=@ttmane) and adm_date<=@date' set @ParmDefinition =N'@columnname varchar(50),@batch_year int,@degree_code int,@sem int,@sections nvarchar(50),@month_year int, @date datetime,@subject_no int,@day nvarchar(50),@hour int,@ttmane nvarchar(100)' exec sp_executesql @Query, @ParmDefinition, @columnname = @columnname, @batch_year = @batch_year, @degree_code=@degree_code,@sem=@sem, @sections=@sections,@month_year=@month_year,@date=@date,@subject_no=@subject_no,@day=@day,@hour=@hour,@ttmane=@ttmane End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_stu_atten_day_check_lab_alter'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sp_stu_atten_day_check_lab_alter ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create procedure sp_stu_atten_day_check_lab_alter (@columnname nvarchar(50),@batch_year int, @degree_code int, @sem int, @sections nvarchar(50), @month_year int, @date datetime,  @subject_no int, @day nvarchar(50), @hour int) as BEGIN declare @Query nvarchar(4000) declare @ParmDefinition nvarchar(500); if(@sections='') set @Query = 'select count(distinct r.Roll_No) as stucount from registration r,attendance a,subjectchooser_new s where degree_code=@degree_code and current_semester=@sem and batch_year=@batch_year and cc=0 and delflag=0 and exam_flag<>''debar'' and month_year=@month_year and r.roll_no=a.roll_no and  r.roll_no=s.roll_no and r.current_semester=s.semester and subject_no=@subject_no and fromdate=@date and('+ quotename(@columnname)+' is not null and '+ quotename(@columnname)+'<>''0'' and '+ quotename(@columnname) +'<>'''') and batch in(select   stu_batch from laballoc_new where subject_no=@subject_no and batch_year=@batch_year  and hour_value=@hour  and degree_code=@degree_code and day_value=@day and semester=@sem and fdate=@date) and adm_date<=@date' Else set @Query =  'select count(distinct r.Roll_No) as stucount from registration r,attendance a,subjectchooser_new s where degree_code=@degree_code and current_semester=@sem and batch_year=@batch_year and cc=0 and delflag=0 and exam_flag<>''debar'' and month_year=@month_year and r.roll_no=a.roll_no and  r.roll_no=s.roll_no and r.current_semester=s.semester and subject_no=@subject_no and sections=@sections and('+ quotename(@columnname)+' is not null and '+ quotename(@columnname)+'<>''0'' and '+ quotename(@columnname) +'<>'''') and fromdate=@date and batch in(select stu_batch from laballoc_new where subject_no=@subject_no  and batch_year=@batch_year  and hour_value=@hour  and degree_code=@degree_code and day_value=@day and semester=@sem and sections=@sections and fdate=@date) and adm_date<=@date' set @ParmDefinition =N'@columnname varchar(50),@batch_year int,@degree_code int,@sem int,@sections nvarchar(50), @month_year int,@date datetime,@subject_no int,@day nvarchar(50),@hour int' exec sp_executesql @Query, @ParmDefinition, @columnname = @columnname, @batch_year = @batch_year, @degree_code=@degree_code, @sem=@sem, @sections=@sections,@month_year=@month_year,@date=@date, @subject_no=@subject_no,@day=@day,@hour=@hour End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_stu_atten_month_check'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sp_stu_atten_month_check ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create procedure sp_stu_atten_month_check (@batch_year int, @degree_code int, @sem int, @sections nvarchar(50),  @month_year int, @date datetime, @subject_no int) as BEGIN if(@sections='') select count(distinct r.Roll_No) as stucount from registration r,subjectchooser s where r.roll_no=s.roll_no and r.current_semester=s.semester and batch_year=@batch_year and  degree_code=@degree_code and current_semester=@sem  and subject_no=@subject_no  and adm_date<=@date and cc=0 and delflag=0 and exam_flag<>'debar'  Else select count(distinct r.Roll_No) as stucount from registration r,subjectchooser s where r.roll_no=s.roll_no and r.current_semester=s.semester and batch_year=@batch_year and  degree_code=@degree_code and current_semester=@sem  and Sections=@sections and subject_no=@subject_no and adm_date<=@date and cc=0 and delflag=0 and exam_flag<>'debar' End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_stu_atten_month_check_lab'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sp_stu_atten_month_check_lab ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "   create procedure sp_stu_atten_month_check_lab (@batch_year int, @degree_code int, @sem int, @sections nvarchar(50), @month_year int, @date datetime, @subject_no int, @day nvarchar(50), @hour int,@ttmane nvarchar(100)) as BEGIN if(@sections='') select count(distinct r.Roll_No) as stucount from registration r,subjectchooser s where degree_code=@degree_code and current_semester=@sem and batch_year=@batch_year and cc=0 and delflag=0 and exam_flag<>'debar' and r.roll_no=s.roll_no and r.current_semester=s.semester and subject_no=@subject_no and batch in(select stu_batch from laballoc where subject_no=@subject_no and batch_year=@batch_year  and hour_value=@hour  and degree_code=@degree_code and day_value=@day and semester=@sem and Timetablename=@ttmane) and adm_date<=@date Else select count(distinct r.Roll_No) as stucount from registration r,subjectchooser s where degree_code=@degree_code and current_semester=@sem and batch_year=@batch_year and cc=0 and delflag=0 and exam_flag<>'debar' and r.roll_no=s.roll_no and r.current_semester=s.semester and subject_no=@subject_no and sections=@sections and batch in(select stu_batch from laballoc where subject_no=@subject_no  and batch_year=@batch_year  and hour_value=@hour and degree_code=@degree_code and day_value=@day and semester=@sem and sections=@sections and Timetablename=@ttmane) and adm_date<=@date End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_stu_atten_month_check_lab_alter'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sp_stu_atten_month_check_lab_alter ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "   create procedure sp_stu_atten_month_check_lab_alter (@batch_year int, @degree_code int, @sem int,  @sections nvarchar(50) , @month_year int, @date datetime, @subject_no int, @day nvarchar(50), @hour int) as BEGIN if(@sections='') select count(distinct s.roll_no) as stucount from registration r,subjectChooser_New s where degree_code=@degree_code and current_semester=@sem and batch_year=@batch_year and cc=0 and delflag=0 and exam_flag<>'debar' and r.roll_no=s.roll_no and r.current_semester=s.semester and subject_no=@subject_no and fromdate=@date and batch in(select   stu_batch from laballoc_new where subject_no=@subject_no  and batch_year=@batch_year and hour_value=@hour  and degree_code=@degree_code and day_value=@day and semester=@sem and fdate=@date) and adm_date<=@date Else select count(distinct s.roll_no) as stucount from registration r,subjectchooser_new s where degree_code=@degree_code and current_semester=@sem and batch_year=@batch_year and cc=0 and delflag=0 and exam_flag<>'debar' and r.roll_no=s.roll_no and r.current_semester=s.semester and subject_no=@subject_no and sections=@sections and fromdate=@date and batch in(select stu_batch from laballoc_new where subject_no=@subject_no  and batch_year=@batch_year  and hour_value=@hour and degree_code=@degree_code and day_value=@day and semester=@sem and sections=@sections and fdate=@date) and adm_date<=@date End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_ins_upd_student_attendance_Dead'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sp_ins_upd_student_attendance_Dead ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "   create procedure sp_ins_upd_student_attendance_Dead (@rollno nvarchar(50),@monthyear int, @columnname nvarchar(500), @colvalues nvarchar(500), @coulmnvalue nvarchar(1000)) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY declare @Query nvarchar(4000) declare @ParmDefinition nvarchar(500); set @Query = ' if exists(select * from attendance where roll_no=@rollno and month_year=@monthyear )  update attendance set ' +@coulmnvalue+' where roll_no=@rollno and month_year=@monthyear   Else insert into attendance(roll_no,month_year,'+ @columnname+') values (@rollno, @monthyear,'+@colvalues+')' set @ParmDefinition =N'@rollno varchar(50),@monthyear int, @columnname nvarchar(500),@colvalues nvarchar(500), @coulmnvalue nvarchar(1000)' exec sp_executesql @Query, @ParmDefinition, @rollno = @rollno, @monthyear = @monthyear,@columnname=@columnname, @colvalues=@colvalues,@coulmnvalue=@coulmnvalue COMMIT TRANSACTION END TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY  End END CATCH End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_ins_upd_student_OdEntry'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sp_ins_upd_student_OdEntry ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create procedure sp_ins_upd_student_OdEntry (@rollno nvarchar(50),@semester numeric(18), @purpose nvarchar(500),  @fromdate datetime,@todate datetime, @outtime datetime ,@intime datetime,@college_code numeric(18),@attnd_type int, @no_of_hourse numeric(18), @hourse nvarchar(100)) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY declare @Query nvarchar(4000) declare @ParmDefinition nvarchar(500); set @Query = 'if exists(select * from onduty_stud where roll_no=@rollno and fromdate=@fromdate and hourse=@hourse ) update onduty_stud set roll_no=@rollno,semester=@semester,purpose=@purpose,fromdate=@fromdate,todate=@todate, outtime=@outtime,intime=@intime,college_code=@college_code, attnd_type=@attnd_type,no_of_hourse=@no_of_hourse, hourse=@hourse where  Roll_no=@rollno and fromdate=@fromdate and hourse=@hourse Else insert into onduty_stud(roll_no,semester,purpose,fromdate,todate,outtime,intime,college_code, attnd_type,no_of_hourse, hourse) values(@rollno,@semester,@purpose,@fromdate,@todate,@outtime,@intime,@college_code, @attnd_type,@no_of_hourse, @hourse)' set @ParmDefinition =N'@rollno nvarchar(50),@semester numeric(18), @purpose nvarchar(500),@fromdate datetime, @todate datetime,@outtime datetime ,@intime datetime,@college_code numeric(18),@attnd_type int, @no_of_hourse numeric(18),@hourse nvarchar(100)' exec sp_executesql @Query, @ParmDefinition, @rollno = @rollno,@semester = @semester,@purpose=@purpose, @fromdate= @fromdate,@todate=@todate, @outtime=@outtime,@intime=@intime,@college_code=@college_code, @attnd_type=@attnd_type, @no_of_hourse=@no_of_hourse,@hourse=@hourse COMMIT TRANSACTION End TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GoTo RETRY End End CATCH End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'load_degree_with_batchyr'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc load_degree_with_batchyr ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  Create procedure load_degree_with_batchyr (  @batch_year varchar(20), @college_code varchar(20), @user_code varchar(20), @single_user nvarchar(100), @group_code nvarchar(20) ) as begin if(@single_user='true') begin select distinct degree.course_id,course.course_name from degree,course, deptprivilages,Registration r where course.course_id=degree.course_id and course.college_code = degree.college_code and r.college_code = degree.college_code and r.degree_code=deptprivilages.degree_code and degree.college_code=@college_code and r.cc=0 and r.delflag=0 and r.exam_flag<>'debar'and deptprivilages.Degree_code=degree.Degree_code and user_code=@user_code and r.Batch_Year=@batch_year End Else begin select distinct degree.course_id,course.course_name from degree,course, deptprivilages,Registration r where course.course_id=degree.course_id and course.college_code = degree.college_code and r.college_code = degree.college_code and r.degree_code=deptprivilages.degree_code and degree.college_code=@college_code and r.cc=0 and r.delflag=0 and r.exam_flag<>'debar'and deptprivilages.Degree_code=degree.Degree_code and deptprivilages.group_code=@group_code  and deptprivilages.group_code=r.group_code and r.Batch_Year=@batch_year End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'load_branch'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc load_branch ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE load_branch  @college_code varchar(20),  @user_code varchar(20), @single_user nvarchar(100), @group_code nvarchar(20) as begin if(@single_user='true') begin select distinct degree.degree_code,department.dept_name, degree.Acronym,department.Dept_Code from degree,department,course, deptprivilages where course.course_id=degree.course_id and department.dept_code=degree.dept_code and course.college_code = degree.college_code and department.college_code = degree.college_code and degree.college_code=@college_code and deptprivilages.Degree_code=degree.Degree_code and user_code=@user_code End Else: begin select distinct degree.degree_code,department.dept_name, degree.Acronym ,department.Dept_Code from degree,department, course,deptprivilages where course.course_id=degree.course_id and department.dept_code=degree.dept_code and course.college_code = degree.college_code and department.college_code = degree.college_code and degree.Course_Id=course.Course_Id and degree.college_code=@college_code and deptprivilages.Degree_code=degree.Degree_code and group_code=@group_code End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'SP_SEM_AND_ALT_SCH'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc SP_SEM_AND_ALT_SCH ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE SP_SEM_AND_ALT_SCH  @days AS nvarchar(200), @degree_code AS INT, @semester AS INT, @batch_year AS INT, @section as varchar(200)='', @fromdate AS VARCHAR(50) AS BEGIN --BEGIN declare @semquery as nvarchar(200) select @semquery='select top 1 '+@days+' from semester_schedule where degree_code='+@degree_code+' and semester='+@semester+' and batch_year='+@batch_year+' '+@section+' and fromdate<='+@fromdate+' order by fromdate desc' exec(@semquery) End BEGIN declare @Altquery as nvarchar(200) select @Altquery='select '+@days+' from alternate_schedule where degree_code='+@degree_code+' and semester='+@semester+' and batch_year='+@batch_year+' '+@section+' and fromdate='+@fromdate+'' exec(@Altquery) End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'SP_seminfo_and_periodattn'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc SP_seminfo_and_periodattn ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE PROCEDURE SP_seminfo_and_periodattn  @semester AS INT, @batch_year AS INT, @degree_code AS INT AS BEGIN select starting_dayorder,start_date,end_date from seminfo where degree_code=@degree_code and semester=@semester and batch_year=@batch_year select no_of_hrs_I_half_day,no_of_hrs_II_half_day,No_of_hrs_per_day,schorder,nodays from periodAttndSchedule where degree_code=@degree_code and semester=@semester End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'SP_seminfo_and_periodattn'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc SP_seminfo_and_periodattn ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE procedure sp_ins_upd_cam_exam_type_dead  (@criteria_no numeric(18, 0),  @staff_code nvarchar(50) ,  @subject_no numeric(18, 0) ,  @duration char(10),  @entry_date datetime,  @exam_date datetime , @batch_year smallint ,  @max_mark float ,  @min_mark float ,  @sections nvarchar(50) ,  @new_maxmark float , @new_minmark float ,  @start_period int ,  @end_period int ) as BEGIN RETRY: BEGIN TRANSACTION BEGIN  TRY declare @Query nvarchar(4000) declare @ParmDefinition nvarchar(500); IF(@sections!='') set @Query =  ' if exists(select * from exam_type where  criteria_no=@criteria_no and subject_no = @subject_no and  sections=@sections and batch_year=@batch_year) update exam_type set staff_code=@staff_code,duration=@duration,entry_date=@entry_date, exam_date=@exam_date, max_mark=@max_mark,min_mark=@min_mark,new_maxmark=@new_maxmark,new_minmark=@new_minmark, start_period=@start_period, end_period=@end_period where  criteria_no=@criteria_no and subject_no = @subject_no and sections=@sections  and batch_year=@batch_year Else insert into exam_type(criteria_no,staff_code,subject_no,duration,entry_date,exam_date,batch_year,max_mark, min_mark,sections,new_maxmark,new_minmark,start_period,end_period) values (@criteria_no,@staff_code,@subject_no, @duration,@entry_date,@exam_date,@batch_year,@max_mark,@min_mark, @sections,@new_maxmark,@new_minmark, @start_period,@end_period )' Else set @Query =  'if exists(select * from exam_type where  criteria_no=@criteria_no and subject_no = @subject_no and batch_year=@batch_year) update exam_type set staff_code=@staff_code,duration=@duration,entry_date=@entry_date, exam_date=@exam_date, max_mark=@max_mark,min_mark=@min_mark,new_maxmark=@new_maxmark,new_minmark=@new_minmark, start_period=@start_period, end_period=@end_period,sections=@sections where  criteria_no=@criteria_no and subject_no = @subject_no and batch_year=@batch_year Else insert into exam_type(criteria_no,staff_code,subject_no,duration,entry_date, exam_date, batch_year,max_mark,  min_mark,new_maxmark,new_minmark,start_period,end_period,sections) values (@criteria_no, @staff_code,@subject_no,@duration,@entry_date,@exam_date,@batch_year,@max_mark,@min_mark, @new_maxmark, @new_minmark,@start_period,@end_period,@sections)' set @ParmDefinition =N'@criteria_no numeric(18, 0),  @staff_code nvarchar(50) ,  @subject_no numeric(18, 0) , @duration char(10),  @entry_date datetime,  @exam_date datetime ,  @batch_year smallint , @max_mark float , @min_mark float ,  @sections nvarchar(50) ,  @new_maxmark float ,  @new_minmark float , @start_period int , @end_period int ' exec sp_executesql   @Query, @ParmDefinition, @criteria_no=@criteria_no,@staff_code=@staff_code, @subject_no=@subject_no,@duration=@duration, @entry_date=@entry_date,@exam_date=@exam_date,@batch_year=@batch_year, @max_mark=@max_mark,@min_mark=@min_mark, @sections=@sections,@new_maxmark=@new_maxmark, @new_minmark=@new_minmark,@start_period=@start_period, @end_period=@end_period COMMIT TRANSACTION   End TRY BEGIN   CATCH   Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN   WAITFOR DELAY '00:00:00.05' GoTo RETRY End End   CATCH End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_ins_upd_cam_mark_dead'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sp_ins_upd_cam_mark_dead ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure sp_ins_upd_cam_mark_dead (@marks_obtained float,  @exam_code numeric,  @roll_no nvarchar(100))  as  BEGIN  RETRY:  BEGIN TRANSACTION  BEGIN  TRY  declare @Query nvarchar(4000) declare @ParmDefinition nvarchar(500);  set @Query =  ' if exists(select * from result where roll_no=@roll_no and exam_code = @exam_code)  update result set marks_obtained=@marks_obtained where roll_no=@roll_no and exam_code = @exam_code  Else insert into Result(marks_obtained,exam_code,roll_no) values(@marks_obtained,@exam_code,@roll_no)'  set @ParmDefinition =N'@marks_obtained float,  @exam_code numeric,  @roll_no nvarchar(100)'  exec sp_executesql  @Query, @ParmDefinition,@marks_obtained=@marks_obtained,@exam_code=@exam_code,@roll_no=@roll_no  COMMIT TRANSACTION  End  TRY  BEGIN  CATCH  Print 'Rollback Transaction' ROLLBACK TRANSACTION  IF ERROR_NUMBER() = 1205  BEGIN  WAITFOR DELAY '00:00:00.05'  GoTo RETRY  End  End  CATCH End  ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_attn_timetable_sch'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sp_attn_timetable_sch ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE procedure sp_attn_timetable_sch(@column_name nvarchar(1000),@empty_column_name nvarchar(1000),@degree_code int,@sections nvarchar(100), @semester int,  @batch_year int, @date nvarchar(100))AS BEGIN BEGIN declare @sql nvarchar(2000) declare @ParmDefinition nvarchar(500);  SET @empty_column_name = REPLACE(@empty_column_name,'-','''''')  if not exists (select '  +@column_name+ ' from alternate_schedule where degree_code=@degree_code and semester=@semester and batch_year=@batch_year and sections=@sections  and fromdate=@date )  set @sql ='select '  +@empty_column_name+ ',''''TTName   union all  select top 1 ' +@column_name+ ',TTName from semester_schedule where degree_code=@degree_code and semester=@semester and batch_year=@batch_year and sections=@sections  and fromdate<=@date'  Else  if(@sections='')  set @sql = ' select '  +@column_name+ ',''''TTName from alternate_schedule where degree_code=@degree_code and semester=@semester and batch_year=@batch_year   and fromdate=@date union all  select top 1 ' +@column_name+ ',TTName from semester_schedule where  degree_code=@degree_code and semester=@semester and batch_year=@batch_year  and fromdate<=@date'  Else  set @sql = ' select '  +@column_name+ ',''''TTName from alternate_schedule where degree_code=@degree_code and semester=@semester and batch_year=@batch_year  and sections=@sections and fromdate=@date union all  select top 1 ' +@column_name+ ',TTName from semester_schedule where degree_code=@degree_code and semester=@semester and batch_year=@batch_year and sections=@sections   and fromdate<=@date'  set  @ParmDefinition =N'@column_name nvarchar(1000),@empty_column_name nvarchar(1000),@degree_code int, @sections nvarchar(100),@semester int,   @batch_year int,   @date nvarchar(100)'  execute sp_executesql @sql,@ParmDefinition,@column_name=@column_name,@empty_column_name=@empty_column_name,@degree_code=@degree_code, @sections=@sections,@semester=@semester,@batch_year=@batch_year,@date=@date  End  End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_attn_timetable_sch'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sp_attn_timetable_sch ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE procedure mobileapp  @mobile AS nvarchar(50) as begin select a.college_code,a.app_no,Student_Mobile,parentF_Mobile, parentM_Mobile,Student_Password,Father_Password, Mother_Password,r.Stud_Name,r.Roll_No,r.Roll_Admit,r.Batch_Year, r.degree_code,r.Current_Semester,r.Sections,  c.Course_Name,de.dept_acronym as dept_name,(select Photo from StdPhoto s where s.app_no=r.app_no) as photo    from Registration r, applyn a,course c,Department de,Degree d where r.App_No=a.app_no and   de.Dept_Code=d.Dept_Code and c.Course_Id=d.Course_Id and r.Degree_Code = d.Degree_Code And r.college_code = d.college_code and c.college_code=d.college_code and    r.college_code=de.college_code and r.App_No in( select app_no   from applyn a,collinfo where Student_Mobile=@mobile or  parentF_Mobile=@mobile or parentM_Mobile=@mobile) End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'cert_insert'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc cert_insert ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure cert_insert (@RollNo varchar(50),@Cert_type varchar(50),@Cert_upload varbinary(MAX),@isverified int,@cert_filaname nvarchar(50)   ,@cert_order numeric(18,0))as begin  if exists(select Cert_type,cert_upload,isverified,cert_filaname from Cert_Verification where Roll_No=@RollNo and cert_order=@cert_order) begin update cert_verification set Roll_No=@RollNo,Cert_type=@Cert_type,Cert_upload=@Cert_upload,isverified=@isverified,cert_filaname=@cert_filaname,cert_order=@cert_order where Roll_No=@RollNo and cert_order=@cert_order End Else begin insert into cert_verification(Roll_No,Cert_type,Cert_upload,isverified,cert_filaname,cert_order)values(@RollNo,@Cert_type,@Cert_upload,@isverified,@cert_filaname,@cert_order) End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'stud_sp'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc stud_sp ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure stud_sp (@batchyear smallint,@college numeric(18,0), @batchcode numeric(18, 0),@sec nvarchar(50)='') as begin if(@sec != '') begin select Roll_No,Reg_No,Stud_Name from Registration where Batch_Year=@batchyear  and college_code=@college and degree_code=@batchcode and Sections=@sec and cc=0 and delflag=0 and exam_flag<>'debar' End Else begin select Roll_No,Reg_No,Stud_Name from Registration where Batch_Year=@batchyear  and college_code=@college and degree_code=@batchcode and cc=0 and delflag=0 and exam_flag<>'debar' End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'stud_sp_sec'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc stud_sp_sec ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure stud_sp_sec (@batchyear smallint,@college numeric(18,0), @batchcode numeric(18, 0),@sec nvarchar(50)='') as begin select distinct sections from Registration where Batch_Year=@batchyear  and college_code=@college and degree_code=@batchcode and  cc=0 and delflag=0 and exam_flag<>'debar' End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_upd_student_staff_selector_Default'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sp_upd_student_staff_selector_Default ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE procedure sp_upd_student_staff_selector_Default (@roll_no nvarchar(50), @semester int ) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY if exists (select * from subjectChooser where roll_no=@roll_no and semester=@semester) update subjectChooser set staffcode='' where roll_no=@roll_no and semester=@semester COMMIT TRANSACTION  End  TRY  BEGIN  CATCH  Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205  BEGIN  WAITFOR DELAY '00:00:00.05'  GoTo RETRY  End  End  CATCH End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_upd_student_staff_selector'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sp_upd_student_staff_selector ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create procedure sp_upd_student_staff_selector  (@subject_no int,  @staffcode nvarchar(50),  @roll_no nvarchar(50),  @subtype_no int,  @semester int  ) as  BEGIN  RETRY:  BEGIN TRANSACTION  BEGIN  TRY  if exists(select * from subjectChooser where roll_no=@roll_no and subject_no=@subject_no and semester=@semester and subtype_no=@subtype_no) update subjectChooser set staffcode=@staffcode where roll_no=@roll_no and subject_no=@subject_no and semester=@semester  and subtype_no=@subtype_no COMMIT TRANSACTION   End   TRY   BEGIN   CATCH   Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205   BEGIN   WAITFOR DELAY '00:00:00.05'   GoTo RETRY   End   End   CATCH End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_upd_student_staff_selector'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sp_upd_student_staff_selector ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create procedure sp_ins_upd_Subjectchooser  (@roll_no nvarchar(50), @semester int, @subject_no int, @subtype_no int, @paper_order int, @batch nvarchar(50), @grp_cell nvarchar(50) ) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY if exists(select * from Subjectchooser where roll_no=@roll_no and subject_no=@subject_no and semester=@semester and subtype_no=@subtype_no) update subjectChooser set paper_order=@paper_order,batch=@batch,grp_cell=@grp_cell where roll_no=@roll_no and subject_no=@subject_no and semester=@semester and subtype_no=@subtype_no Else insert into Subjectchooser(semester,roll_no,subject_no,paper_order,subtype_no,batch,grp_cell) values(@semester,@roll_no,@subject_no,@paper_order,@subtype_no,@batch,@grp_cell) COMMIT TRANSACTION End TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GoTo RETRY End End CATCH End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_delete_Subjectchooser'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc sp_delete_Subjectchooser ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create procedure sp_delete_Subjectchooser  (@roll_no nvarchar(50), @semester int ) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY if exists(select * from Subjectchooser where roll_no=@roll_no and semester=@semester) delete from subjectchooser where roll_no=@roll_no and semester=@semester COMMIT TRANSACTION End TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GoTo RETRY End End CATCH End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Proc_SubjectDisplayname'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc Proc_SubjectDisplayname ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  CREATE PROCEDURE [dbo].[Proc_SubjectDisplayname] (@batchyear nvarchar(50), @subjectno nvarchar(100), @criteriano nvarchar(100), @strsec nvarchar(100),@minmark nvarchar(100),@maxmark nvarchar(100),@Exam_code nvarchar(100))  as declare @staff_code nvarchar(100) begin if(@Exam_code !='') begin Select rr.Stud_Name,rr.Roll_No,dp.Dept_Name,c.Course_Name,r.marks_obtained from result r,registration rr,Degree d,Department dp,course c where dp.Dept_Code=d.Dept_Code and d.Degree_Code=rr.degree_code and d.Course_Id=c.Course_Id and exam_code=@Exam_code and marks_obtained >=@minmark and marks_obtained <=@maxmark and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' End Else if(@strsec!='') begin set @Exam_code=(select exam_code from exam_type where subject_no =@subjectno and criteria_no=@criteriano and sections=@strsec) Select rr.Stud_Name,rr.Roll_No,dp.Dept_Name,c.Course_Name,r.marks_obtained from result r,registration rr,Degree d,Department dp,course c where dp.Dept_Code=d.Dept_Code and d.Degree_Code=rr.degree_code and d.Course_Id=c.Course_Id and exam_code=@Exam_code and marks_obtained >=@minmark and marks_obtained <=@maxmark and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' End Else begin set @Exam_code=(select exam_code from exam_type where subject_no =@subjectno and criteria_no=@criteriano) Select rr.Stud_Name,rr.Roll_No,dp.Dept_Name,c.Course_Name,r.marks_obtained from result r,registration rr,Degree d,Department dp,course c where dp.Dept_Code=d.Dept_Code and d.Degree_Code=rr.degree_code and d.Course_Id=c.Course_Id and exam_code=@Exam_code and marks_obtained >=@minmark and marks_obtained <=@maxmark and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Proc_SubjectDisplayname'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc Proc_SubjectDisplayname ";
                if (drpstrproc != "")
                {
                    int creat_ac = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure Proc_All_Subject_Detailsoverallcam (  @min_marks int ,@subject_code varchar(800),@criteria varchar(800)) as begin Declare @Max_Mark int begin begin select sum(marks_obtained) as 'SUM' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and  marks_obtained>=0 and s.subject_code=@subject_code and c.criteria=@criteria select count(distinct r.roll_no) as 'PASS_COUNT' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and (r.marks_obtained>=@min_marks or r.marks_obtained='-3' or r.marks_obtained='-2') and r.marks_obtained<>'-1'  and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 and s.subject_code=@subject_code and c.criteria=@criteria select count(distinct r.roll_no) as 'FAIL_COUNT' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and (r.marks_obtained<@min_marks and r.marks_obtained<>'-3' and r.marks_obtained<>'-2' and r.marks_obtained<>'-1') and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 and s.subject_code=@subject_code and c.criteria=@criteria select max(marks_obtained) as 'MAX_MARK' from result r,exam_type ex,subjectchooser su,subject s,registration rt,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and s.subject_code=@subject_code and c.criteria=@criteria select min(marks_obtained) as 'MIN_MARK' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and  (marks_obtained>=0) and s.subject_code=@subject_code and c.criteria=@criteria select count(distinct rt.roll_no) as 'AVG<50' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and marks_obtained between 0 and 49  and s.subject_code=@subject_code and c.criteria=@criteria select count(distinct rt.roll_no) as 'AVG_50to65' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and  marks_obtained Between 50 And 65 and s.subject_code=@subject_code and c.criteria=@criteria select count(distinct rt.roll_no) as 'AVG>65' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and  marks_obtained >65  and s.subject_code=@subject_code and c.criteria=@criteria select count(distinct rt.roll_no) as 'PRESENT_COUNT' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and   (marks_obtained>=0 or marks_obtained='-2' or marks_obtained='-3') and marks_obtained<>'-1'  and r.roll_no=rt.roll_no and su.subject_no=ex.subject_no and ex.exam_code=r.exam_code and su.roll_no=r.roll_no and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 and rt.RollNo_Flag<>0 and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and s.subject_code=@subject_code and c.criteria=@criteria select count(distinct r.roll_no) as 'ABSENT_COUNT' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and  r.marks_obtained<0 and (r.marks_obtained<>'-2' and r.marks_obtained<>'-3' and r.marks_obtained<>'-7' )and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and r.exam_code=ex.exam_code and r.roll_no=rt.roll_no and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 and rt.RollNo_Flag<>0 and s.subject_code=@subject_code and c.criteria=@criteria set @Max_Mark=(select max(marks_obtained) as 'MAX_MARK' from result ) select distinct r.roll_no as 'ROLL_NO',rt.stud_name as 'STUD_NAME' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and  marks_obtained=@Max_Mark and s.subject_code=@subject_code and c.criteria=@criteria select count(distinct r.roll_no) as 'FAIL_COUNT_WITHOUT_AB' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and (marks_obtained<@min_marks and marks_obtained<>'-3' and marks_obtained<>'-2' and marks_obtained<>'-1' and marks_obtained<>'-4' and marks_obtained<>'-5' and marks_obtained<>'-6' and marks_obtained<>'-7' and marks_obtained<>'-8' and marks_obtained<>'-9' and marks_obtained<>'-10' and marks_obtained<>'-11' and marks_obtained<>'-12' and marks_obtained<>'-13' and marks_obtained<>'-14' and marks_obtained<>'-15' and marks_obtained<>'-16' and marks_obtained<>'-17') and s.subject_code=@subject_code and c.criteria=@criteria select count(marks_obtained) as 'AVG>=75' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and marks_obtained >=75 and s.subject_code=@subject_code and c.criteria=@criteria select count(distinct rt.roll_no) as 'AVG60to74' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and   marks_obtained Between 60    And 74 and s.subject_code=@subject_code and c.criteria=@criteria select count(distinct rt.roll_no) as 'AVG50to59' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and   marks_obtained Between 50    And 59    and s.subject_code=@subject_code and c.criteria=@criteria select count(distinct rt.roll_no) as 'AVG30to49' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and   marks_obtained Between 30    And 49    and s.subject_code=@subject_code and c.criteria=@criteria select count(distinct rt.roll_no) as 'AVG20to29' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and  marks_obtained Between 20    And 29   and s.subject_code=@subject_code and c.criteria=@criteria select count(distinct rt.roll_no) as 'AVG<=19' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and marks_obtained <=19  and s.subject_code=@subject_code and c.criteria=@criteria select marks_obtained ,rt.roll_no from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and  marks_obtained = (select max(marks_obtained) as 'MAX_MARK' from result r,exam_type ex,subjectchooser su,registration rt Where r.roll_no = rt.roll_no And r.roll_no = su.roll_no And su.subject_no = ex.subject_no and  r.exam_code=ex.exam_code ) and s.subject_code=@subject_code and c.criteria=@criteria select marks_obtained ,rt.roll_no from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and  marks_obtained = ( select min(marks_obtained) as 'MIN_MARK' from result r,exam_type ex,subjectchooser su,registration rt Where r.roll_no = rt.roll_no And r.roll_no = su.roll_no And su.subject_no = ex.subject_no and  r.exam_code=ex.exam_code and  (marks_obtained>=0) ) and s.subject_code=@subject_code and c.criteria=@criteria select count(distinct rt.roll_no) as 'AVG>=60' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and marks_obtained >=60 and s.subject_code=@subject_code and c.criteria=@criteria select count(distinct rt.roll_no) as 'AVG>=80' from result r,exam_type ex,subjectchooser su,subject s,registration rt ,CriteriaForInternal c where r.roll_no=rt.roll_no  and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and s.subType_no=su.subtype_no and s.subject_no=su.subject_no and s.subject_no=ex.subject_no and c.Criteria_no=ex.criteria_no and  r.exam_code=ex.exam_code and marks_obtained >=80 and s.subject_code=@subject_code and c.criteria=@criteria End end end";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            //store pro coe
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'proctabulatedmark'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc proctabulatedmark ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create proc proctabulatedmark @degreecode varchar(20),@currentsemester int,@batchyear int,@subject_no int,@roll_no varchar(20) as begin select isnull(internal_mark,0) as CA,isnull(external_mark,0)as EA,isnull(total,0) as T,isnull(result,'') as R from mark_entry where exam_code in (select exam_code from exam_details where degree_Code =@degreecode and current_semester =@currentsemester and batch_year =@batchyear) and subject_no = @subject_no and roll_no = @roll_no End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamTimeTableSelectSubjectData'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc ProcExamTimeTableSelectSubjectData ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure [dbo].[ProcExamTimeTableSelectSubjectData]@CollegeCode varchar(30) AS begin select  distinct  c.course_name as course,dpt.Dept_Name as Department,dept_acronym as deptacronym, case when (r.current_semester=1 or r.current_semester=2) then 'Ist Year' when (r.current_semester=3 or r.current_semester=4) then 'IInd Year' when (r.current_semester=5 or r.current_semester=6) then 'IIIrd Year' when (r.current_semester=7 or r.current_semester=8) then 'IVth Year' when (r.current_semester>=9) then 'Final Year' End as Year,r.current_semester as Semester,r.Batch_Year as BatchYear,d.degree_code as DegreeCode from Department dpt,degree d,course c,registration r where dpt.Dept_Code=d.Dept_Code and d.course_Id=c.Course_Id and  d.degree_code=r.degree_code  and  c.college_code=@CollegeCode and r.roll_no <>' ' and cc=0  and delflag=0 and exam_flag<>'Debar' order by r.current_semester End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamTimeTableCount'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc ProcExamTimeTableCount ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create Procedure [dbo].[ProcExamTimeTableCount] @DegreeCode varchar(40), @BatchYear Varchar(30), @Semester Varchar(20), @CollegeCode varchar(30) AS begin select distinct count(registration.roll_no) as RegularTheoryCount, subject.subject_name as SubjectName,subject.subject_no as SubjectNo from subject,sub_sem,syllabus_master,subjectchooser,registration where   subject.syll_code=sub_sem.syll_Code and subject.subtype_no=sub_sem.subtype_no and sub_sem.promote_count =1  and sub_sem.subject_type like 'Th%' and sub_sem.subType_no=subjectchooser.subtype_no and   subject.syll_code=syllabus_master.syll_code and syllabus_master.degree_code=@DegreeCode and syllabus_master.semester=@Semester and syllabus_master.batch_year=@BatchYear and subject.subject_no =subjectchooser.subject_no and subjectchooser.roll_no=registration.roll_no and registration.degree_code=@DegreeCode and registration.current_semester=@Semester and registration.batch_year=@BatchYear and registration.college_code=@CollegeCode and registration.RollNo_Flag<>0 and registration.cc=0  and registration.exam_flag <> 'DEBAR' and registration.delflag=0 and registration.roll_no<>' ' group by subject.subject_name ,subject.subject_no select distinct count(registration.roll_no) as RegularPracticalCount, subject.subject_name as SubjectName,subject.subject_no as SubjectNo from subject,sub_sem,syllabus_master,subjectchooser,registration where   subject.syll_code=sub_sem.syll_Code and subject.subtype_no=sub_sem.subtype_no and sub_sem.promote_count =1  and sub_sem.subject_type like 'Pr%' and sub_sem.subType_no=subjectchooser.subtype_no and   subject.syll_code=syllabus_master.syll_code and syllabus_master.degree_code=@DegreeCode and syllabus_master.semester=@Semester and syllabus_master.batch_year=@BatchYear and subject.subject_no =subjectchooser.subject_no and subjectchooser.roll_no=registration.roll_no and registration.degree_code=@DegreeCode and registration.current_semester=@Semester and registration.batch_year=@BatchYear and registration.college_code=@CollegeCode and registration.RollNo_Flag<>0 and registration.cc=0  and registration.exam_flag <> 'DEBAR' and registration.delflag=0 and registration.roll_no<>' ' group by subject.subject_name ,subject.subject_no select distinct count(m.roll_no) as ArearTheoryCount ,m.subject_no as SubjectNo,s.subject_name as SubjectName,sc.semester as Semester from mark_entry m,registration r,subject s,sub_sem sm,subjectchooser sc,syllabus_master smas where sc.semester<r.current_semester and sc.roll_no=m.roll_no and sc.subtype_no=sm.subtype_no and  sc.subject_no=s.subject_no and smas.batch_year=r.batch_year and  sm.subject_type like 'Th%'  and sm.subtype_no=s.subType_no and smas.degree_code=r.degree_code and smas.syll_code=s.syll_code and s.subject_no=m.subject_no and  m.passorfail=0 and m.result='fail' and m.roll_no <>'' and m.roll_no=r.roll_no and r.degree_code=@DegreeCode and r.current_semester=@Semester and r.batch_year=@BatchYear and r.college_code=@CollegeCode and r.cc=0 and r.delflag=0 and r.Exam_Flag<>'Debar'  group by m.subject_no,s.subject_name,sc.semester,sc.subject_no order by sc.semester  select distinct count(m.roll_no) as ArearPracticalCount ,m.subject_no as SubjectNo,s.subject_name as SubjectName,sc.semester as Semester from mark_entry m,registration r,subject s,sub_sem sm,subjectchooser sc,syllabus_master smas where sc.semester<r.current_semester and sc.roll_no=m.roll_no and sc.subtype_no=sm.subtype_no and sc.subject_no=s.subject_no and smas.batch_year=r.batch_year and  sm.subject_type like 'Pr%'  and sm.subtype_no=s.subType_no and smas.degree_code=r.degree_code and smas.syll_code=s.syll_code and s.subject_no=m.subject_no and  m.passorfail=0 and m.result='fail' and m.roll_no <>'' and m.roll_no=r.roll_no and r.degree_code=@DegreeCode and r.current_semester=@Semester and r.batch_year=@BatchYear and r.college_code=@CollegeCode and r.cc=0 and r.delflag=0 and r.Exam_Flag<>'Debar'  group by m.subject_no,s.subject_name,sc.semester,sc.subject_no order by sc.semester End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'procindividualsubstud'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc procindividualsubstud ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure [dbo].[procindividualsubstud] @subject_no varchar(20), @semester int, @stud_type varchar(20), @i int as begin if(@i>0) begin select len(sc.roll_no),sc.roll_no,isnull(r.reg_no,'') as reg_no,r.stud_type,r.stud_name from subjectchooser sc,registration r where sc.subject_no=@subject_no and sc.semester=1 and sc.roll_no=r.roll_no and r.roll_no <>'' and cc=0 and r.stud_type=@stud_type and delflag=0 and exam_flag<>'Debar' order by len(sc.roll_no),sc.roll_no End else if(@i=0) begin select len(sc.roll_no),sc.roll_no,isnull(r.reg_no,'') as reg_no,r.stud_type,r.stud_name from subjectchooser sc,registration r where sc.subject_no=@subject_no and sc.semester=@semester and sc.roll_no=r.roll_no and r.roll_no <>'' and cc=0  and delflag=0 and exam_flag<>'Debar' order by len(sc.roll_no),sc.roll_no End End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'procindividualsubstudforarrear'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc procindividualsubstudforarrear ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure [dbo].[procindividualsubstudforarrear] @subject_no varchar(20), @stud_type varchar(20), @i int as begin if(@i>0) begin select len(m.roll_no),m.roll_no,r.stud_name,isnull(r.reg_no,'') as reg_no,r.stud_type from registration r,mark_entry m where r.roll_no=m.roll_no and m.subject_no=@subject_no and r.stud_type=@stud_type and m.result='fail' and m.passorfail=0 and r.roll_no <>'' and cc=0  and delflag=0 and exam_flag<>'Debar' order by len(m.roll_no),m.roll_no End else if(@i=0) begin select len(m.roll_no),m.roll_no,r.stud_name,isnull(r.reg_no,'') as reg_no,r.stud_type from registration r,mark_entry m where r.roll_no=m.roll_no and m.subject_no=@subject_no and m.result='fail' and m.passorfail=0 and r.roll_no <>'' and cc=0  and delflag=0 and exam_flag<>'Debar' order by len(m.roll_no),m.roll_no End End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamTimeTableSubjectCount'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc ProcExamTimeTableSubjectCount ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create    Procedure [dbo].[ProcExamTimeTableSubjectCount] @DegreeCode varchar(40), @BatchYear Varchar(30), @Semester Varchar(20), @CollegeCode varchar(30), @ExamType varchar(20), @ExmType varchar(20) AS Begin if @ExamType='0' and @ExmType='0' Begin select distinct count(registration.roll_no) as RegularTheoryCount, subject.subject_name as SubjectName,subject.subject_no as SubjectNo from subject,sub_sem,syllabus_master,subjectchooser,registration where   subject.syll_code=sub_sem.syll_Code and subject.subtype_no=sub_sem.subtype_no and sub_sem.promote_count =1  and sub_sem.subject_type like 'Th%' and sub_sem.subType_no=subjectchooser.subtype_no and   subject.syll_code=syllabus_master.syll_code and syllabus_master.degree_code=@DegreeCode and syllabus_master.semester=@Semester and syllabus_master.batch_year=@BatchYear and subject.subject_no =subjectchooser.subject_no and subjectchooser.roll_no=registration.roll_no and registration.degree_code=@DegreeCode and registration.current_semester=@Semester and registration.batch_year=@BatchYear and registration.college_code=@CollegeCode and registration.RollNo_Flag<>0 and registration.cc=0  and registration.exam_flag <> 'DEBAR' and registration.delflag=0 and registration.roll_no<>' ' group by subject.subject_name ,subject.subject_no select distinct count(registration.roll_no) as RegularPracticalCount, subject.subject_name as SubjectName,subject.subject_no as SubjectNo from subject,sub_sem,syllabus_master,subjectchooser,registration where   subject.syll_code=sub_sem.syll_Code and subject.subtype_no=sub_sem.subtype_no and sub_sem.promote_count =1  and sub_sem.subject_type like 'Pr%' and sub_sem.subType_no=subjectchooser.subtype_no and   subject.syll_code=syllabus_master.syll_code and syllabus_master.degree_code=@DegreeCode and syllabus_master.semester=@Semester and syllabus_master.batch_year=@BatchYear and subject.subject_no =subjectchooser.subject_no and subjectchooser.roll_no=registration.roll_no and registration.degree_code=@DegreeCode and registration.current_semester=@Semester and registration.batch_year=@BatchYear and registration.college_code=@CollegeCode and registration.RollNo_Flag<>0 and registration.cc=0  and registration.exam_flag <> 'DEBAR' and registration.delflag=0 and registration.roll_no<>' ' group by subject.subject_name ,subject.subject_no select distinct count(m.roll_no) as ArearTheoryCount ,m.subject_no as SubjectNo,s.subject_name as SubjectName,sc.semester as Semester from mark_entry m,registration r,subject s,sub_sem sm,subjectchooser sc,syllabus_master smas where sc.semester<r.current_semester and sc.roll_no=m.roll_no and sc.subtype_no=sm.subtype_no and  sc.subject_no=s.subject_no and smas.batch_year=r.batch_year and  sm.subject_type like 'Th%'  and sm.subtype_no=s.subType_no and smas.degree_code=r.degree_code and smas.syll_code=s.syll_code and s.subject_no=m.subject_no and  m.passorfail=0 and m.result='fail' and m.roll_no <>'' and m.roll_no=r.roll_no and r.degree_code=@DegreeCode and r.current_semester=@Semester and r.batch_year=@BatchYear and r.college_code=@CollegeCode and r.cc=0 and r.delflag=0 and r.Exam_Flag<>'Debar'  group by m.subject_no,s.subject_name,sc.semester,sc.subject_no order by sc.semester  select distinct count(m.roll_no) as ArearPracticalCount ,m.subject_no as SubjectNo,s.subject_name as SubjectName,sc.semester as Semester from mark_entry m,registration r,subject s,sub_sem sm,subjectchooser sc,syllabus_master smas where sc.semester<r.current_semester and sc.roll_no=m.roll_no and sc.subtype_no=sm.subtype_no and sc.subject_no=s.subject_no and smas.batch_year=r.batch_year and  sm.subject_type like 'Pr%'  and sm.subtype_no=s.subType_no and smas.degree_code=r.degree_code and smas.syll_code=s.syll_code and s.subject_no=m.subject_no and  m.passorfail=0 and m.result='fail' and m.roll_no <>'' and m.roll_no=r.roll_no and r.degree_code=@DegreeCode and r.current_semester=@Semester and r.batch_year=@BatchYear and r.college_code=@CollegeCode and r.cc=0 and r.delflag=0 and r.Exam_Flag<>'Debar'  group by m.subject_no,s.subject_name,sc.semester,sc.subject_no order by sc.semester End else if @ExamType='1' and @ExmType='1' Begin select distinct count(registration.roll_no) as RegularTheoryCount, subject.subject_name as SubjectName,subject.subject_no as SubjectNo from subject,sub_sem,syllabus_master,subjectchooser,registration where   subject.syll_code=sub_sem.syll_Code and subject.subtype_no=sub_sem.subtype_no and sub_sem.promote_count =1  and sub_sem.subject_type like 'Th%' and sub_sem.subType_no=subjectchooser.subtype_no and   subject.syll_code=syllabus_master.syll_code and syllabus_master.degree_code=@DegreeCode and syllabus_master.semester=@Semester and syllabus_master.batch_year=@BatchYear and subject.subject_no =subjectchooser.subject_no and subjectchooser.roll_no=registration.roll_no and registration.degree_code=@DegreeCode and registration.current_semester=@Semester and registration.batch_year=@BatchYear and registration.college_code=@CollegeCode and registration.RollNo_Flag<>0 and registration.cc=0  and registration.exam_flag <> 'DEBAR' and registration.delflag=0 and registration.roll_no<>' ' group by subject.subject_name ,subject.subject_no End else if @ExamType='1' and @ExmType='2' Begin select distinct count(registration.roll_no) as RegularPracticalCount, subject.subject_name as SubjectName,subject.subject_no as SubjectNo from subject,sub_sem,syllabus_master,subjectchooser,registration where   subject.syll_code=sub_sem.syll_Code and subject.subtype_no=sub_sem.subtype_no and sub_sem.promote_count =1  and sub_sem.subject_type like 'Pr%' and sub_sem.subType_no=subjectchooser.subtype_no and   subject.syll_code=syllabus_master.syll_code and syllabus_master.degree_code=@DegreeCode and syllabus_master.semester=@Semester and syllabus_master.batch_year=@BatchYear and subject.subject_no =subjectchooser.subject_no and subjectchooser.roll_no=registration.roll_no and registration.degree_code=@DegreeCode and registration.current_semester=@Semester and registration.batch_year=@BatchYear and registration.college_code=@CollegeCode and registration.RollNo_Flag<>0 and registration.cc=0  and registration.exam_flag <> 'DEBAR' and registration.delflag=0 and registration.roll_no<>' ' group by subject.subject_name ,subject.subject_no End else if @ExamType='2' and @ExmType='1' Begin select distinct count(m.roll_no) as ArearTheoryCount ,m.subject_no as SubjectNo,s.subject_name as SubjectName,sc.semester as Semester from mark_entry m,registration r,subject s,sub_sem sm,subjectchooser sc,syllabus_master smas where sc.semester<r.current_semester and sc.roll_no=m.roll_no and sc.subtype_no=sm.subtype_no and  sc.subject_no=s.subject_no and smas.batch_year=r.batch_year and  sm.subject_type like 'Th%'  and sm.subtype_no=s.subType_no and smas.degree_code=r.degree_code and smas.syll_code=s.syll_code and s.subject_no=m.subject_no and  m.passorfail=0 and m.result='fail' and m.roll_no <>'' and m.roll_no=r.roll_no and r.degree_code=@DegreeCode and r.current_semester=@Semester and r.batch_year=@BatchYear and r.college_code=@CollegeCode and r.cc=0 and r.delflag=0 and r.Exam_Flag<>'Debar'  group by m.subject_no,s.subject_name,sc.semester,sc.subject_no order by sc.semester End else if @ExamType='2' and @ExmType='2' Begin select distinct count(m.roll_no) as ArearPracticalCount ,m.subject_no as SubjectNo,s.subject_name as SubjectName,sc.semester as Semester from mark_entry m,registration r,subject s,sub_sem sm,subjectchooser sc,syllabus_master smas where sc.semester<r.current_semester and sc.roll_no=m.roll_no and sc.subtype_no=sm.subtype_no and sc.subject_no=s.subject_no and smas.batch_year=r.batch_year and  sm.subject_type like 'Pr%'  and sm.subtype_no=s.subType_no and smas.degree_code=r.degree_code and smas.syll_code=s.syll_code and s.subject_no=m.subject_no and  m.passorfail=0 and m.result='fail' and m.roll_no <>'' and m.roll_no=r.roll_no and r.degree_code=@DegreeCode and r.current_semester=@Semester and r.batch_year=@BatchYear and r.college_code=@CollegeCode and r.cc=0 and r.delflag=0 and r.Exam_Flag<>'Debar'  group by m.subject_no,s.subject_name,sc.semester,sc.subject_no order by sc.semester End else if @ExamType='0' and @ExmType='1' Begin select distinct count(registration.roll_no) as RegularTheoryCount, subject.subject_name as SubjectName,subject.subject_no as SubjectNo from subject,sub_sem,syllabus_master,subjectchooser,registration where   subject.syll_code=sub_sem.syll_Code and subject.subtype_no=sub_sem.subtype_no and sub_sem.promote_count =1  and sub_sem.subject_type like 'Th%' and sub_sem.subType_no=subjectchooser.subtype_no and   subject.syll_code=syllabus_master.syll_code and syllabus_master.degree_code=@DegreeCode and syllabus_master.semester=@Semester and syllabus_master.batch_year=@BatchYear and subject.subject_no =subjectchooser.subject_no and subjectchooser.roll_no=registration.roll_no and registration.degree_code=@DegreeCode and registration.current_semester=@Semester and registration.batch_year=@BatchYear and registration.college_code=@CollegeCode and registration.RollNo_Flag<>0 and registration.cc=0  and registration.exam_flag <> 'DEBAR' and registration.delflag=0 and registration.roll_no<>' ' group by subject.subject_name ,subject.subject_no select distinct count(m.roll_no) as ArearTheoryCount ,m.subject_no as SubjectNo,s.subject_name as SubjectName,sc.semester as Semester from mark_entry m,registration r,subject s,sub_sem sm,subjectchooser sc,syllabus_master smas where sc.semester<r.current_semester and sc.roll_no=m.roll_no and sc.subtype_no=sm.subtype_no and  sc.subject_no=s.subject_no and smas.batch_year=r.batch_year and  sm.subject_type like 'Th%'  and sm.subtype_no=s.subType_no and smas.degree_code=r.degree_code and smas.syll_code=s.syll_code and s.subject_no=m.subject_no and  m.passorfail=0 and m.result='fail' and m.roll_no <>'' and m.roll_no=r.roll_no and r.degree_code=@DegreeCode and r.current_semester=@Semester and r.batch_year=@BatchYear and r.college_code=@CollegeCode and r.cc=0 and r.delflag=0 and r.Exam_Flag<>'Debar'  group by m.subject_no,s.subject_name,sc.semester,sc.subject_no order by sc.semester End else if @ExamType='0' and @ExmType='2' Begin select distinct count(registration.roll_no) as RegularPracticalCount, subject.subject_name as SubjectName,subject.subject_no as SubjectNo from subject,sub_sem,syllabus_master,subjectchooser,registration where   subject.syll_code=sub_sem.syll_Code and subject.subtype_no=sub_sem.subtype_no and sub_sem.promote_count =1  and sub_sem.subject_type like 'Pr%' and sub_sem.subType_no=subjectchooser.subtype_no and   subject.syll_code=syllabus_master.syll_code and syllabus_master.degree_code=@DegreeCode and syllabus_master.semester=@Semester and syllabus_master.batch_year=@BatchYear and subject.subject_no =subjectchooser.subject_no and subjectchooser.roll_no=registration.roll_no and registration.degree_code=@DegreeCode and registration.current_semester=@Semester and registration.batch_year=@BatchYear and registration.college_code=@CollegeCode and registration.RollNo_Flag<>0 and registration.cc=0  and registration.exam_flag <> 'DEBAR' and registration.delflag=0 and registration.roll_no<>' ' group by subject.subject_name ,subject.subject_no select distinct count(m.roll_no) as ArearPracticalCount ,m.subject_no as SubjectNo,s.subject_name as SubjectName,sc.semester as Semester from mark_entry m,registration r,subject s,sub_sem sm,subjectchooser sc,syllabus_master smas where sc.semester<r.current_semester and sc.roll_no=m.roll_no and sc.subtype_no=sm.subtype_no and sc.subject_no=s.subject_no and smas.batch_year=r.batch_year and  sm.subject_type like 'Pr%'  and sm.subtype_no=s.subType_no and smas.degree_code=r.degree_code and smas.syll_code=s.syll_code and s.subject_no=m.subject_no and  m.passorfail=0 and m.result='fail' and m.roll_no <>'' and m.roll_no=r.roll_no and r.degree_code=@DegreeCode and r.current_semester=@Semester and r.batch_year=@BatchYear and r.college_code=@CollegeCode and r.cc=0 and r.delflag=0 and r.Exam_Flag<>'Debar'  group by m.subject_no,s.subject_name,sc.semester,sc.subject_no order by sc.semester End else if @ExamType='1' and @ExmType='0' Begin select distinct count(registration.roll_no) as RegularTheoryCount, subject.subject_name as SubjectName,subject.subject_no as SubjectNo from subject,sub_sem,syllabus_master,subjectchooser,registration where   subject.syll_code=sub_sem.syll_Code and subject.subtype_no=sub_sem.subtype_no and sub_sem.promote_count =1  and sub_sem.subject_type like 'Th%' and sub_sem.subType_no=subjectchooser.subtype_no and   subject.syll_code=syllabus_master.syll_code and syllabus_master.degree_code=@DegreeCode and syllabus_master.semester=@Semester and syllabus_master.batch_year=@BatchYear and subject.subject_no =subjectchooser.subject_no and subjectchooser.roll_no=registration.roll_no and registration.degree_code=@DegreeCode and registration.current_semester=@Semester and registration.batch_year=@BatchYear and registration.college_code=@CollegeCode and registration.RollNo_Flag<>0 and registration.cc=0  and registration.exam_flag <> 'DEBAR' and registration.delflag=0 and registration.roll_no<>' ' group by subject.subject_name ,subject.subject_no select distinct count(registration.roll_no) as RegularPracticalCount, subject.subject_name as SubjectName,subject.subject_no as SubjectNo from subject,sub_sem,syllabus_master,subjectchooser,registration where   subject.syll_code=sub_sem.syll_Code and subject.subtype_no=sub_sem.subtype_no and sub_sem.promote_count =1  and sub_sem.subject_type like 'Pr%' and sub_sem.subType_no=subjectchooser.subtype_no and   subject.syll_code=syllabus_master.syll_code and syllabus_master.degree_code=@DegreeCode and syllabus_master.semester=@Semester and syllabus_master.batch_year=@BatchYear and subject.subject_no =subjectchooser.subject_no and subjectchooser.roll_no=registration.roll_no and registration.degree_code=@DegreeCode and registration.current_semester=@Semester and registration.batch_year=@BatchYear and registration.college_code=@CollegeCode and registration.RollNo_Flag<>0 and registration.cc=0  and registration.exam_flag <> 'DEBAR' and registration.delflag=0 and registration.roll_no<>' ' group by subject.subject_name ,subject.subject_no End else if @ExamType='2' and @ExmType='0' Begin select distinct count(m.roll_no) as ArearTheoryCount ,m.subject_no as SubjectNo,s.subject_name as SubjectName,sc.semester as Semester from mark_entry m,registration r,subject s,sub_sem sm,subjectchooser sc,syllabus_master smas where sc.semester<r.current_semester and sc.roll_no=m.roll_no and sc.subtype_no=sm.subtype_no and  sc.subject_no=s.subject_no and smas.batch_year=r.batch_year and  sm.subject_type like 'Th%'  and sm.subtype_no=s.subType_no and smas.degree_code=r.degree_code and smas.syll_code=s.syll_code and s.subject_no=m.subject_no and  m.passorfail=0 and m.result='fail' and m.roll_no <>'' and m.roll_no=r.roll_no and r.degree_code=@DegreeCode and r.current_semester=@Semester and r.batch_year=@BatchYear and r.college_code=@CollegeCode and r.cc=0 and r.delflag=0 and r.Exam_Flag<>'Debar'  group by m.subject_no,s.subject_name,sc.semester,sc.subject_no order by sc.semester select distinct count(m.roll_no) as ArearPracticalCount ,m.subject_no as SubjectNo,s.subject_name as SubjectName,sc.semester as Semester from mark_entry m,registration r,subject s,sub_sem sm,subjectchooser sc,syllabus_master smas where sc.semester<r.current_semester and sc.roll_no=m.roll_no and sc.subtype_no=sm.subtype_no and sc.subject_no=s.subject_no and smas.batch_year=r.batch_year and  sm.subject_type like 'Pr%'  and sm.subtype_no=s.subType_no and smas.degree_code=r.degree_code and smas.syll_code=s.syll_code and s.subject_no=m.subject_no and  m.passorfail=0 and m.result='fail' and m.roll_no <>'' and m.roll_no=r.roll_no and r.degree_code=@DegreeCode and r.current_semester=@Semester and r.batch_year=@BatchYear and r.college_code=@CollegeCode and r.cc=0 and r.delflag=0 and r.Exam_Flag<>'Debar'  group by m.subject_no,s.subject_name,sc.semester,sc.subject_no order by sc.semester End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamTimeTableCreateDummyTable'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc ProcExamTimeTableCreateDummyTable ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure [dbo].[ProcExamTimeTableCreateDummyTable] AS Begin Declare @Cnt int select @Cnt=count(name) from sysobjects where xtype='U' and name like 'ExamTimeTableDu%' if @cnt>0 Begin Drop Table ExamTimeTableDummyTable Drop Table ExamTimeTableDummyArearTable Drop Table ExamTimeTableDummyPracTable Drop Table ExamTimeTableDummyArearPracTable Create Table ExamTimeTableDummyTable(Batch varchar(30),Degree varchar(100),Semester varchar(20),SubjectName varchar(20),SubjectNo varchar(20)) Create Table ExamTimeTableDummyPracTable(Batch varchar(30),Degree varchar(100),Semester varchar(20),SubjectName varchar(20),SubjectNo varchar(20)) Create Table ExamTimeTableDummyArearTable(Batch varchar(30),Degree varchar(100),Semester varchar(20),SubjectName varchar(20),SubjectNo varchar(20)) Create Table ExamTimeTableDummyArearPracTable(Batch varchar(30),Degree varchar(100),Semester varchar(20),SubjectName varchar(20),SubjectNo varchar(20)) End Else Begin Create Table ExamTimeTableDummyTable(Batch varchar(30),Degree varchar(100),Semester varchar(20),SubjectName varchar(20),SubjectNo varchar(20)) Create Table ExamTimeTableDummyPracTable(Batch varchar(30),Degree varchar(100),Semester varchar(20),SubjectName varchar(20),SubjectNo varchar(20)) Create Table ExamTimeTableDummyArearTable(Batch varchar(30),Degree varchar(100),Semester varchar(20),SubjectName varchar(20),SubjectNo varchar(20)) Create Table ExamTimeTableDummyArearPracTable(Batch varchar(30),Degree varchar(100),Semester varchar(20),SubjectName varchar(20),SubjectNo varchar(20)) End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamTimeTableDayCheck'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc ProcExamTimeTableDayCheck ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create      procedure [dbo].[ProcExamTimeTableDayCheck] @SubjectNo varchar(20), @ExamCode varchar(20) As Begin select distinct convert(varchar(20),exam_date,110) as ExamDate,exam_session as ExamSession from exmtt_det where exam_code=@ExamCode select distinct convert(varchar(20),exam_date,110) as ExamDate,exam_session as ExamSession from exmtt_det where exam_code=@ExamCode and subject_no=@SubjectNo End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamTimeTableDetailsSave'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc ProcExamTimeTableDetailsSave ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create  procedure [dbo].[ProcExamTimeTableDetailsSave] @SubjectNo varchar(20), @Duration varchar(20), @StartTime varchar(20), @EndTime varchar(20), @ExamDate varchar(20), @Session varchar(20), @ExamCode varchar(20), @ExamType varchar(20), @ExistSubject varchar(20), @CollegeCode varchar(20) As Begin if @ExistSubject=0 Begin declare @cc int select @cc=count(exam_code) from exmtt_det where subject_no=@SubjectNo  and coll_code=@CollegeCode if @cc>=1 Begin update exmtt_det set duration=convert(DateTime,@Duration),start_time=convert(DateTime,@StartTime),end_time=convert(dateTime,@EndTime),exam_date=@ExamDate,exam_session=@Session,exam_type=@ExamType,coll_code=@CollegeCode,exam_code=@ExamCode where   subject_no=@SubjectNo End Else Begin Insert into Exmtt_det (subject_no,duration,start_time,end_time,exam_date,exam_session,exam_code,exam_type,coll_code)values (@SubjectNo,convert(DateTime,@Duration),convert(DateTime,@StartTime),convert(dateTime,@EndTime),@ExamDate,@Session,@ExamCode,@ExamType,@CollegeCode) End End else  if @ExistSubject=1 Begin update exmtt_det set duration=convert(DateTime,@Duration),start_time=convert(DateTime,@StartTime),end_time=convert(dateTime,@EndTime),exam_session=@Session,exam_type=@ExamType,coll_code=@CollegeCode,exam_code=@ExamCode where   subject_no=@SubjectNo End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamTimeTableDummyArearPracticalSave'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc ProcExamTimeTableDummyArearPracticalSave ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create   Procedure  [dbo].[ProcExamTimeTableDummyArearPracticalSave] @Batch varchar(30), @Degree varchar(100), @Semester varchar(20), @SubjectName varchar(20), @SubjectNo varchar(20) As Begin Insert into ExamTimeTableDummyArearPracTable(Batch,Degree,Semester,SubjectName,SubjectNo) values (@Batch,@Degree,@Semester,@SubjectName,@SubjectNo) End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamTimeTableDayCheck'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc ProcExamTimeTableDayCheck ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create   Procedure  [dbo].[ProcExamTimeTableDayCheck] @Batch varchar(30), @Degree varchar(100), @Semester varchar(20), @SubjectName varchar(20), @SubjectNo varchar(20) As Begin Insert into ExamTimeTableDummyArearTable(Batch,Degree,Semester,SubjectName,SubjectNo) values (@Batch,@Degree,@Semester,@SubjectName,@SubjectNo) End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamTimeTableDummyRegularPracticalSave'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc ProcExamTimeTableDummyRegularPracticalSave ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create   Procedure  [dbo].[ProcExamTimeTableDummyRegularPracticalSave] @Batch varchar(30), @Degree varchar(100), @Semester varchar(20), @SubjectName varchar(20), @SubjectNo varchar(20) As Begin Insert into ExamTimeTableDummyPracTable(Batch,Degree,Semester,SubjectName,SubjectNo) values (@Batch,@Degree,@Semester,@SubjectName,@SubjectNo) End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamTimeTableDummyRegularTheorySave'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc ProcExamTimeTableDummyRegularTheorySave ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create   Procedure  [dbo].[ProcExamTimeTableDummyRegularTheorySave] @Batch varchar(30), @Degree varchar(100), @Semester varchar(20), @SubjectName varchar(20), @SubjectNo varchar(20) As Begin Insert into ExamTimeTableDummyTable(Batch,Degree,Semester,SubjectName,SubjectNo) values (@Batch,@Degree,@Semester,@SubjectName,@SubjectNo) End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamTimeTableExamCode'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc ProcExamTimeTableExamCode ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create    procedure [dbo].[ProcExamTimeTableExamCode] @degree_code Varchar(20), @batchTo varchar(20), @Exam_Month varchar(30), @Exam_Year varchar(30), @Examtype varchar(30), @Semester varchar(30) AS Begin declare @cc int select @cc=count(isnull(exam_code,' '))  from exmtt where degree_code=@degree_code and batchTo=@batchTo and exam_month=@Exam_Month and Exam_Year=@Exam_Year if @cc<1 Begin insert into exmtt(degree_code,batchTo,Exam_Month,Exam_Year,batchFrom,exam_type,Semester) values (@degree_code,@batchTo,@Exam_Month,@Exam_Year,@batchTo,@examtype,@Semester) End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamTimeTableFilterReport'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc ProcExamTimeTableFilterReport ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create   Procedure [dbo].[ProcExamTimeTableFilterReport] @ExamMonth varchar(30), @ExamYear varchar(30), @CollegeCode varchar(20), @date int, @Dept int, @Sub int, @Batch  int, @Course int, @SubjectNo varchar(20), @DegreeCode varchar(20), @FromDate varchar(20), @ToDate varchar(20), @BatchYear varchar(20), @CourseId varchar(20) AS Begin if (@date=1 and @Dept=0 and @Sub=0 and @Batch=0 and @Course=0) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Acronym as DeptAcronym,dpt.Dept_Code as DepartmentCode ,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.Exam_date between @FromDate and @ToDate  and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code  and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=0 and @Dept=1 and @Sub=0 and @Batch=0 and @Course=0) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode,dpt.Dept_Acronym as DeptAcronym ,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.degree_Code=@DegreeCode and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=0 and @Dept=0 and @Sub=1 and @Batch=0 and @Course=0) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode,dpt.Dept_Acronym as DeptAcronym ,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.subject_no=@SubjectNo and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code  and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=0 and @Dept=0 and @Sub=0 and @Batch=1 and @Course=0) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode , dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.batchTo=@BatchYear and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=0 and @Dept=0 and @Sub=0 and @Batch=0 and @Course=1) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and d.Course_id=@CourseId and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=1 and @Dept=1 and @Sub=0 and @Batch=0 and @Course=0) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.Exam_Date between @FromDate and @ToDate and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.Degree_Code=@DegreeCode and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=1 and @Dept=0 and @Sub=1 and @Batch=0 and @Course=0) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.subject_no=@SubjectNo and ex.Exam_Date between @FromDate and @ToDate and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code  and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=1 and @Dept=0 and @Sub=0 and @Batch=1 and @Course=0) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code  and ex.Exam_Date between @FromDate and @ToDate and e.BatchTo=@BatchYear and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=1 and @Dept=0 and @Sub=0 and @Batch=0 and @Course=1) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and d.Course_id=@CourseId and d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code  and ex.Exam_Date between @FromDate and @ToDate and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=0 and @Dept=1 and @Sub=1 and @Batch=0 and @Course=0) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.Subject_no=@SubjectNo and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.degree_code=@DegreeCode  and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=0 and @Dept=1 and @Sub=0 and @Batch=1 and @Course=0) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code  and e.Degree_code=@DegreeCode and e.BatchTo=@BatchYear and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=0 and @Dept=1 and @Sub=0 and @Batch=0 and @Course=1) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and d.Course_id=@CourseId and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code  and e.Degree_code=@DegreeCode  and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=0 and @Dept=0 and @Sub=1 and @Batch=1 and @Course=0) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.Subject_no=@SubjectNo and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.batchTo=@BatchYear and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=0 and @Dept=0 and @Sub=1 and @Batch=0 and @Course=1) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and d.Course_id=@CourseId and d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.Subject_no=@SubjectNo and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code  and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=0 and @Dept=0 and @Sub=0 and @Batch=1 and @Course=1) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and d.Course_id=@CourseId and d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.batchTo=@BatchYear and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=1 and @Dept=1 and @Sub=1 and @Batch=1 and @Course=0) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.Subject_no=@SubjectNo and ex.Exam_Date between @FromDate and @ToDate and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.degree_code=@DegreeCode and e.batchTo=@BatchYear and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=0 and @Dept=1 and @Sub=1 and @Batch=1 and @Course=1) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and d.course_id=@CourseId and d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.Subject_no=@SubjectNo  and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.degree_code=@DegreeCode and e.batchTo=@BatchYear and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=1 and @Dept=1 and @Sub=1 and @Batch=0 and @Course=1) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and d.Course_id=@CourseId and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.Subject_no=@SubjectNo and ex.Exam_Date between @FromDate and @ToDate and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.degree_code=@DegreeCode  and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=1 and @Dept=1 and @Sub=0 and @Batch=1 and @Course=1) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and d.Course_id=@CourseId and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no  and ex.Exam_Date between @FromDate and @ToDate and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.degree_code=@DegreeCode and e.batchTo=@BatchYear and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=1 and @Dept=0 and @Sub=1 and @Batch=1 and @Course=1) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and d.Course_id=@CourseId and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.Subject_no=@SubjectNo and ex.Exam_Date between @FromDate and @ToDate and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code   and e.batchTo=@BatchYear and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=1 and @Dept=1 and @Sub=1 and @Batch=1 and @Course=1) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and d.Course_id=@CourseId and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.Subject_no=@SubjectNo and ex.Exam_Date between @FromDate and @ToDate and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.degree_code=@DegreeCode  and e.batchTo=@BatchYear and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=1 and @Dept=1 and @Sub=1 and @Batch=0 and @Course=0) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.Subject_no=@SubjectNo and ex.Exam_Date between @FromDate and @ToDate and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.degree_code=@DegreeCode   and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=0 and @Dept=1 and @Sub=1 and @Batch=1 and @Course=0) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id  and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.Subject_no=@SubjectNo  and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.degree_code=@DegreeCode  and e.batchTo=@BatchYear and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=0 and @Dept=0 and @Sub=1 and @Batch=1 and @Course=1) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and d.Course_id=@CourseId and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.Subject_no=@SubjectNo and  ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.batchTo=@BatchYear and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=1 and @Dept=0 and @Sub=0 and @Batch=1 and @Course=1) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and d.Course_id=@CourseId and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.Exam_Date between @FromDate and @ToDate and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code   and e.batchTo=@BatchYear and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=1 and @Dept=1 and @Sub=0 and @Batch=0 and @Course=1) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and d.Course_id=@CourseId and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no  and ex.Exam_Date between @FromDate and @ToDate and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.degree_code=@DegreeCode  and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=0 and @Dept=1 and @Sub=0 and @Batch=1 and @Course=1) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and d.Course_id=@CourseId and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no  and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.degree_code=@DegreeCode and e.batchTo=@BatchYear and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=1 and @Dept=0 and @Sub=1 and @Batch=0 and @Course=1) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and d.Course_id=@CourseId and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.exam_Date between @FromDate and @ToDate and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=0 and @Dept=1 and @Sub=1 and @Batch=0 and @Course=1) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and d.Course_id=@CourseId and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and e.Degree_code=@DegreeCode and s.subject_no=ex.subject_no and ex.Subject_no=@SubjectNo and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End else if (@date=0 and @Dept=0 and @Sub=0 and @Batch=0 and @Course=0) Begin select  s.subject_Name as SubjectName,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.Dept_Code as DepartmentCode ,dpt.Dept_Acronym as DeptAcronym,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no    and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code   and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamTimeTableGeneratedSubjects'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc ProcExamTimeTableGeneratedSubjects ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create  Procedure [dbo].[ProcExamTimeTableGeneratedSubjects] AS Begin Select distinct Subject_No as SubjectNo from exmtt_det End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamTimeTablereport'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc ProcExamTimeTablereport ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create    procedure [dbo].[ProcExamTimeTablereport] @ExamMonth varchar(30), @ExamYear varchar(30), @CollegeCode varchar(20) AS Begin select  s.subject_Name as SubjectName,s.Subject_no as SubjectNumber,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.dept_acronym as DeptAcronym,d.Acronym as Acronym ,dpt.Dept_Code as DepartmentCode ,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code  and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName select distinct dpt.Dept_Name as DepartmentName,dpt.dept_acronym as DeptAcronym,d.degree_Code as DepartmentCode,d.Acronym as Acronym ,c.course_Name as CourseName,c.course_id as CourseId, e.batchTo as BatchYear,S.Subject_name As SubjectName,s.subject_no as SubjectNo from exmtt e,exmtt_det ex,department dpt,degree d ,course c,Subject s where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code  and e.exam_month=@ExamMonth and e.exam_year=@ExamYear select distinct e.batchTo as BatchYear from exmtt e,exmtt_det ex where  ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code  and e.exam_month=@ExamMonth and e.exam_year=@ExamYear select distinct c.course_Name as CourseName,c.course_id as CourseId, e.batchTo as BatchYear,S.Subject_name As SubjectName,s.subject_no as SubjectNo from exmtt e,exmtt_det ex,department dpt,degree d ,course c,Subject s where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code  and e.exam_month=@ExamMonth and e.exam_year=@ExamYear End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamTimeTablereport'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc ProcExamTimeTablereport ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create    procedure [dbo].[ProcExamTimeTablereport] @ExamMonth varchar(30), @ExamYear varchar(30), @CollegeCode varchar(20) AS Begin select  s.subject_Name as SubjectName,s.Subject_no as SubjectNumber,e.Semester as Semester,dpt.Dept_Name as DepartmentName,dpt.dept_acronym as DeptAcronym,d.Acronym as Acronym ,dpt.Dept_Code as DepartmentCode ,c.course_Name as CourseName ,ex.exam_session as Session ,convert(Varchar(20),ex.exam_Date,105) as ExamDate,e.batchTo as BatchYear from exmtt e,exmtt_det ex,subject s,department dpt,degree d ,course c where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code  and e.exam_month=@ExamMonth and e.exam_year=@ExamYear order by Exam_Date,Exam_session,e.Semester,dpt.Dept_Name,c.Course_Name,DepartmentCode,BatchYear,SubjectName select distinct dpt.Dept_Name as DepartmentName,dpt.dept_acronym as DeptAcronym,d.degree_Code as DepartmentCode,d.Acronym as Acronym ,c.course_Name as CourseName,c.course_id as CourseId, e.batchTo as BatchYear,S.Subject_name As SubjectName,s.subject_no as SubjectNo from exmtt e,exmtt_det ex,department dpt,degree d ,course c,Subject s where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code  and e.exam_month=@ExamMonth and e.exam_year=@ExamYear select distinct e.batchTo as BatchYear from exmtt e,exmtt_det ex where  ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code  and e.exam_month=@ExamMonth and e.exam_year=@ExamYear select distinct c.course_Name as CourseName,c.course_id as CourseId, e.batchTo as BatchYear,S.Subject_name As SubjectName,s.subject_no as SubjectNo from exmtt e,exmtt_det ex,department dpt,degree d ,course c,Subject s where c.Course_id=d.Course_Id and dpt.dept_code =d.dept_code and  d.degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code  and e.exam_month=@ExamMonth and e.exam_year=@ExamYear End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamTimeTableSelectSubjectData'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc ProcExamTimeTableSelectSubjectData ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create   procedure [dbo].[ProcExamTimeTableSelectSubjectData] @CollegeCode varchar(30) AS Begin select  distinct  c.course_name as course,dpt.Dept_acronym as Department,dept_acronym as deptacronym, case when (r.current_semester=1 or r.current_semester=2) then 'Ist Year' when (r.current_semester=3 or r.current_semester=4) then 'IInd Year' when (r.current_semester=5 or r.current_semester=6) then 'IIIrd Year' when (r.current_semester=7 or r.current_semester=8) then 'IVth Year' when (r.current_semester>=9) then 'Final Year' End as Year,r.current_semester as Semester,r.Batch_Year as BatchYear,d.degree_code as DegreeCode from Department dpt,degree d,course c,registration r where dpt.Dept_Code=d.Dept_Code and d.course_Id=c.Course_Id and  d.degree_code=r.degree_code  and  c.college_code=@CollegeCode and r.roll_no <>' ' and cc=0  and delflag=0 and exam_flag<>'Debar' order by r.Current_Semester End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'LOAD_SUBJECT'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc LOAD_SUBJECT ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  CREATE PROCEDURE  [dbo].[LOAD_SUBJECT]( @Batch_Year int, @semester int, @degree_code int, @stdsec varchar(10),  @sc_code int, @ff_date int, @tt_date int, @ssf_cdate Datetime, @sst_cdate Datetime ) AS SET NOCOUNT ON; BEGIN select syllabus_year from syllabus_master where degree_code=@degree_code and semester =@semester and batch_year=@Batch_Year Select S.Subject_Code, S.Subject_no, S.max_int_marks,SS.Subject_Type,s.acronym,s.subject_name,ss.Lab  from Subject as s, Sub_Sem as ss ,Syllabus_Master as SMas where SMas.Syll_Code = S.Syll_Code and SMas.Syll_Code = SS.Syll_Code and SS.Syll_Code = S.Syll_Code and S.SubType_no = SS.Subtype_no and SS.Promote_Count = 1 and SMas.Degree_Code =@degree_code and SMas.Batch_Year =@Batch_Year and SMas.Semester = @semester order by SS.SubType_No select No_of_hrs_per_day,no_of_hrs_I_half_day,no_of_hrs_II_half_day from periodattndschedule where degree_code =@degree_code and semester = @semester select nodays from periodattndschedule where degree_code = @degree_code and semester =@semester Select CONVERT(VARCHAR,start_date, 101) from seminfo where degree_code = @degree_code and semester =@semester and batch_year = @Batch_Year and start_date is not null select schorder from periodattndschedule where degree_code = @degree_code and semester =@semester if(@stdsec='') Select distinct isnull(registration.Roll_Admit,'') as Admno,isnull(registration.Roll_No,'') as RlNo,isnull(Reg_No,'') as RgNo , isnull(Stud_Name,'') as SName,adm_date,exam_flag,debar_reason ,len(registration.Roll_No)  from registration, subjectchooser where registration.roll_no = subjectchooser.roll_no and subjectchooser.semester =@semester  and Batch_Year =@Batch_Year and Degree_Code =@degree_code and delflag =0 and exam_flag <>'Debar' and RollNo_Flag=1 and registration.Roll_No is not null and ltrim(rtrim(registration.Roll_No)) <>'' order by len(registration.Roll_No) Else Select distinct isnull(registration.Roll_Admit,'') as Admno,isnull(registration.Roll_No,'') as RlNo,isnull(Reg_No,'') as RgNo , isnull(Stud_Name,'') as SName,adm_date,exam_flag,debar_reason ,len(registration.Roll_No) from registration, subjectchooser where registration.roll_no = subjectchooser.roll_no and subjectchooser.semester =@semester  and Batch_Year =@Batch_Year and Degree_Code =@degree_code and sections=@stdsec and delflag =0 and exam_flag <>'Debar' and RollNo_Flag=1 and registration.Roll_No is not null and ltrim(rtrim(registration.Roll_No)) <>'' order by len(registration.Roll_No) select linkvalue from inssettings where linkname='total Hour' select univ_hrs from univ_college_hrs where degree_code=@degree_code and semester=@semester and batch_year=@Batch_Year select * from AttMasterSetting where  CollegeCode=@sc_code and CalcFlag=0 and CollegeCode=@sc_code if(@stdsec='') select count(attendance.roll_no),attendance.roll_no,registration.Roll_Admit,registration.reg_no, registration.stud_name From registration left join attendance on registration.roll_no=attendance.roll_no where degree_code=@degree_code and batch_year=@Batch_Year and cc=0 and delflag=0 and exam_flag<>'debar' and current_semester=@semester  and month_year between @ff_date  and @tt_date group by attendance.roll_no, registration.Roll_Admit , registration.reg_no, registration.stud_name Else select count(attendance.roll_no),attendance.roll_no,registration.Roll_Admit,registration.reg_no,registration.stud_name From registration left join attendance on registration.roll_no=attendance.roll_no where degree_code=@degree_code and batch_year=@Batch_Year and cc=0 and delflag=0 and exam_flag<>'debar' and current_semester=@semester and sections=@stdsec and month_year between @ff_date  and @tt_date group by attendance.roll_no,registration.Roll_Admit, registration.reg_no , registration.stud_name if(@stdsec='') select attendance.roll_no,registration.Roll_Admit,registration.reg_no,registration.stud_name, attendance.* from registration left join attendance on registration.roll_no=attendance.roll_no where degree_code=@degree_code and batch_year=@Batch_Year and cc=0 and delflag=0 and exam_flag<>'debar'  and month_year between @ff_date  and @tt_date order by attendance.roll_no,registration.Roll_Admit, registration.reg_no , registration.stud_name , attendance.month_year Else select attendance.roll_no,registration.Roll_Admit,registration.reg_no,registration.stud_name, attendance.* from registration left join attendance on registration.roll_no=attendance.roll_no where degree_code=@degree_code and batch_year=@Batch_Year and cc=0 and delflag=0 and exam_flag<>'debar'  and sections=@stdsec and month_year between @ff_date  and @tt_date order by attendance.roll_no,registration.Roll_Admit, registration.reg_no , registration.stud_name , attendance.month_year if(@stdsec='') select distinct FromDate, CONVERT(VARCHAR,FromDate, 101) ,alternate_schedule.* from alternate_schedule where batch_year=@Batch_Year and degree_code=@degree_code  and semester=@semester   and FromDate between @ssf_cdate and @sst_cdate  order by alternate_schedule.FromDate Else select distinct FromDate, CONVERT(VARCHAR,FromDate, 101) ,alternate_schedule.* from alternate_schedule where batch_year=@Batch_Year and degree_code=@degree_code  and semester=@semester  and sections=@stdsec  and FromDate between @ssf_cdate and @sst_cdate  order by alternate_schedule.FromDate if(@stdsec='') select distinct FromDate,CONVERT(VARCHAR,FromDate, 101) ,semester_schedule.* from semester_schedule where batch_year=@Batch_Year and degree_code=@degree_code  and semester=@semester Else select distinct FromDate,CONVERT(VARCHAR,FromDate, 101) ,semester_schedule.* from semester_schedule where batch_year=@Batch_Year and degree_code=@degree_code  and semester=@semester and sections=@stdsec if(@stdsec='') select * from direct_schedule where batch_year=@Batch_Year and degree_code=@degree_code  and month_year between @ff_date  and @tt_date order by month_year Else select * from direct_schedule where batch_year=@Batch_Year and degree_code=@degree_code  and sections=@stdsec and month_year between @ff_date  and @tt_date order by month_year if(@stdsec='') select distinct dm.sch_date,CONVERT(VARCHAR,dm.sch_date,101) ,dm.degree_code,dm.semester,dm.batch_year,dd.hr, dd.subject_no from dailyStaffEntry as dm,dailyentdet as dd where dm.lp_code=dd.lp_code and dm.degree_code=@degree_code and semester=@semester and dm.sch_date between @ssf_cdate and @sst_cdate  and dm.batch_year=@Batch_Year order by dm.sch_date , dm.degree_code, dm.semester, dm.batch_year, dd.hr, dd.subject_no Else select distinct dm.sch_date,CONVERT(VARCHAR,dm.sch_date,101) ,dm.degree_code,dm.semester,dm.batch_year,dd.hr, dd.subject_no from dailyStaffEntry as dm,dailyentdet as dd where dm.lp_code=dd.lp_code and dm.degree_code=@degree_code and semester=@semester and dm.sch_date between @ssf_cdate and @sst_cdate and dm.sections=@stdsec and dm.batch_year=@Batch_Year order by dm.sch_date,dm.degree_code,dm.semester,dm.batch_year,dd.hr,dd.subject_no select specialhr_master.hrentry_no,specialhr_details.subject_no,specialhr_details.hrdet_no,specialhr_attendance.roll_no, specialhr_attendance.attendance From specialhr_master, specialhr_details, specialhr_attendance Where specialhr_details.hrentry_no = specialhr_master.hrentry_no And specialhr_attendance.hrdet_no = specialhr_details.hrentry_no and batch_year=@Batch_Year and semester=@semester and degree_code=@degree_code and date  between @ssf_cdate and @sst_cdate select CONVERT(VARCHAR,date,101),specialhr_details.subject_no,specialhr_details.hrdet_no From specialhr_master, specialhr_details Where specialhr_details.hrentry_no = specialhr_master.hrentry_no and batch_year=@Batch_Year and semester=@semester and degree_code=@degree_code and date  between @ssf_cdate and @sst_cdate Select sc.roll_no, S.Subject_no,sc.Batch from Subject as s,subjectchooser as sc,Sub_Sem as ss ,Syllabus_Master as SMas where SMas.Syll_Code = S.Syll_Code and SMas.Syll_Code = SS.Syll_Code and SS.Syll_Code = S.Syll_Code and S.SubType_no = SS.Subtype_no and SS.Promote_Count = 1 and S.Subject_no=sc.Subject_no and SMas.Degree_Code =@degree_code and SMas.Batch_Year =@Batch_Year and SMas.Semester = @semester order by SS.SubType_No select CONVERT(VARCHAR,holiday_date,101),halforfull,morning,evening from holidaystudents where semester=@semester and degree_code=@degree_code and holiday_date  between @ssf_cdate and @sst_cdate if(@stdsec='') select distinct Day_Value,Stu_Batch,Subject_no,hour_value,Timetablename from LabAlloc where degree_code=@degree_code and semester=@semester and batch_year=@Batch_Year and Timetablename in(select ttname from Semester_Schedule where degree_code=@degree_code and semester=@semester and batch_year=@Batch_Year ) Else select distinct Day_Value,Stu_Batch,Subject_no,hour_value,Timetablename from LabAlloc where degree_code=@degree_code and semester=@semester and batch_year=@Batch_Year and sections=@stdsec and Timetablename in(select ttname from Semester_Schedule where degree_code=@degree_code and semester=@semester and batch_year=@Batch_Year and sections=@stdsec ) if(@stdsec='') select distinct Subject_no from LabAlloc where degree_code=@degree_code and semester=@semester and batch_year=@Batch_Year Else select distinct Subject_no from LabAlloc where degree_code=@degree_code and semester=@semester and batch_year=@Batch_Year and sections=@stdsec End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'PROC_STUD_ALL_SUBMARK'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc PROC_STUD_ALL_SUBMARK ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            //creatstrproc = "  CREATE procedure [dbo].[PROC_STUD_ALL_SUBMARK] ( @batchyear varchar(4), @degreecode varchar(5), @criteria_no varchar(20), @sections varchar(5),@filterwithsection varchar(5000), @filterwithoutsection varchar(5000)) as BEGIN DECLARE @sqlCommand varchar(5000) if (@sections!='') BEGIN SET @sqlCommand = 'select distinct len(r.Roll_No),r.Roll_No as roll,r.Reg_No as regno,r.stud_name as studname,r.stud_type as studtype, r.App_No as ApplicationNumber,rt.marks_obtained as mark,s.subject_no,s.subject_code,s.subject_name,et.start_period, et.exam_date,et.duration,et.max_mark,et.min_mark,rt.exam_code from registration r, applyn a , result rt,exam_type et, subject s where '+ @filterwithsection  EXEC (@sqlCommand) select distinct s.subject_no,s.subject_name,s.acronym,s.subject_code, staff_code,duration,convert(varchar(10),exam_date,103)as exam_date,convert(varchar(10),entry_date,103)as entry_date, max_mark,min_mark,r.exam_code from exam_type e,subject s,result r where e.subject_no=s.subject_no and e.exam_code= r.exam_code and criteria_no=@criteria_no and sections=@sections order by s.subject_no End Else BEGIN SET @sqlCommand = 'select distinct len(r.Roll_No),r.Roll_No as roll,r.Reg_No as regno,r.stud_name as studname,r.stud_type as studtype, r.App_No as ApplicationNumber,rt.marks_obtained as mark,s.subject_no,s.subject_code,s.subject_name,et.start_period, et.exam_date,et.duration,et.max_mark,et.min_mark,rt.exam_code from registration r, applyn a , result rt,exam_type et, subject s where '+ @filterwithoutsection EXEC (@sqlCommand) select distinct s.subject_no,s.subject_name,s.acronym,s.subject_code,staff_code,duration, convert(varchar(10),exam_date,103)as exam_date,convert(varchar(10),entry_date,103)as entry_date,max_mark,min_mark, r.exam_code from exam_type e,subject s,result r where e.subject_no=s.subject_no and e.exam_code= r.exam_code and criteria_no=@criteria_no  order by s.subject_no End End";
            creatstrproc = "CREATE procedure PROC_STUD_ALL_SUBMARK ( @batchyear varchar(50), @degreecode varchar(50),  @criteria_no varchar(20),  @sections varchar(200),@filterwithsection varchar(max), @filterwithoutsection varchar(max))  as BEGIN DECLARE @sqlCommand varchar(max) if (@sections!='')  BEGIN SET @sqlCommand = 'select distinct len(r.Roll_No),r.Roll_No as roll,r.Reg_No as regno,r.stud_name as studname,r.stud_type as studtype, r.App_No as ApplicationNumber,rt.marks_obtained as mark,s.subject_no,s.subject_code,s.subject_name,et.start_period, et.exam_date,et.duration,et.max_mark,et.min_mark,rt.exam_code from registration r, applyn a , result rt,exam_type et, subject s where '+ @filterwithsection EXEC (@sqlCommand) select distinct s.subject_no,s.subject_name,s.acronym,s.subject_code, staff_code,duration,convert(varchar(10),exam_date,103)as exam_date,convert(varchar(10),entry_date,103)as entry_date, max_mark,min_mark,r.exam_code from exam_type e,subject s,result r where e.subject_no=s.subject_no and e.exam_code= r.exam_code and criteria_no=@criteria_no and sections=@sections order by s.subject_no End Else BEGIN SET @sqlCommand = 'select distinct len(r.Roll_No),r.Roll_No as roll,r.Reg_No as regno,r.stud_name as studname,r.stud_type as studtype, r.App_No as ApplicationNumber,rt.marks_obtained as mark,s.subject_no,s.subject_code,s.subject_name,et.start_period, et.exam_date,et.duration,et.max_mark,et.min_mark,rt.exam_code from registration r, applyn a , result rt,exam_type et, subject s where '+ @filterwithoutsection EXEC (@sqlCommand) select distinct s.subject_no,s.subject_name,s.acronym,s.subject_code,staff_code,duration, convert(varchar(10),exam_date,103)as exam_date,convert(varchar(10),entry_date,103)as entry_date,max_mark,min_mark, r.exam_code from exam_type e,subject s,result r where e.subject_no=s.subject_no and e.exam_code= r.exam_code and criteria_no=@criteria_no  order by s.subject_no End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'INSERT_RANK'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc INSERT_RANK ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  CREATE   procedure [dbo].[INSERT_RANK] ( @RollNumber varchar(50),  @criteria_no varchar(20), @Total varchar(20), @avg varchar(20), @rank varchar(5) ) as declare @cou_nt int set @cou_nt=(select count(Rollno)from rank where Rollno=@RollNumber) if @cou_nt=0 BEGIN insert into rank(Rollno,criteria_no,Total,perc)values(@RollNumber,@criteria_no,@Total,@avg) End Else BEGIN update  rank set rank=@rank where Rollno=@RollNumber End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'SELECT_RANK'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc SELECT_RANK ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create procedure [dbo].[SELECT_RANK] as BEGIN select * from Rank order by Total DESC select * from Rank order by Rollno End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Delete_Rank_Table'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Delete_Rank_Table ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure [dbo].[Delete_Rank_Table] as BEGIN delete  from rank End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Proc_All_Subject_Details'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Proc_All_Subject_Details ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create  procedure [Proc_All_Subject_Details]  ( @exam_code varchar(20), @min_marks int,@section varchar(100) )  as BEGIN Declare @Max_Mark int select sum(marks_obtained) as 'SUM' from result where exam_code=@exam_code and marks_obtained>=0 select count(distinct r.roll_no) as 'PASS_COUNT' from result r,exam_type ex,subjectchooser su,registration rt where r.roll_no=rt.roll_no and r.exam_code=@exam_code and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and r.exam_code=ex.exam_code and (r.marks_obtained>=@min_marks or r.marks_obtained='-3' or r.marks_obtained='-2') and r.marks_obtained<>'-1' and r.marks_obtained<>'-16'  and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 select count(distinct r.roll_no) as 'FAIL_COUNT' from result r,subjectchooser su,exam_type ex,registration rt  where r.roll_no=rt.roll_no and r.exam_code=@exam_code and ex.exam_code=r.exam_code and r.roll_no=su.roll_no and ex.subject_no=su.subject_no and (r.marks_obtained<@min_marks and r.marks_obtained<>'-3' and r.marks_obtained<>'-2' and r.marks_obtained<>'-1' and r.marks_obtained<>'-16') and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 select max(marks_obtained) as 'MAX_MARK' from result where exam_code=@exam_code select min(marks_obtained) as 'MIN_MARK' from result where exam_code=@exam_code and (marks_obtained>=0) select count(distinct roll_no) as 'AVG<50' from result where exam_code=@exam_code and marks_obtained between 0 and 49 select count(distinct roll_no) as 'AVG_50to65' from result where exam_code=@exam_code and marks_obtained Between 50 And 65 select count(distinct roll_no) as 'AVG>65' from result where exam_code=@exam_code and marks_obtained >65 select count(distinct rt.roll_no) as 'PRESENT_COUNT' from result r,registration rt,subjectchooser su,exam_type ex where r.exam_code=@exam_code and (marks_obtained>=0 or marks_obtained='-2' or marks_obtained='-3') and marks_obtained<>'-1'  and r.roll_no=rt.roll_no and su.subject_no=ex.subject_no and ex.exam_code=r.exam_code and su.roll_no=r.roll_no and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 and rt.RollNo_Flag<>0 select count(distinct r.roll_no) as 'ABSENT_COUNT' from result r,registration rt,exam_type ex,subjectchooser su where r.exam_code=@exam_code and r.marks_obtained<0 and (r.marks_obtained<>'-2' and r.marks_obtained<>'-3'and r.marks_obtained<>'-7' and r.marks_obtained<>'-16' )and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and r.exam_code=ex.exam_code and r.roll_no=rt.roll_no and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 and rt.RollNo_Flag<>0 set @Max_Mark=(select max(marks_obtained) as 'MAX_MARK' from result where exam_code=@exam_code) select distinct result.roll_no as 'ROLL_NO',registration.stud_name as 'STUD_NAME' from result,registration where result.roll_no=registration.roll_no and marks_obtained=@Max_Mark and exam_code=@exam_code select count(distinct r.roll_no) as 'FAIL_COUNT_WITHOUT_AB' from result r,subjectchooser su,exam_type ex where r.exam_code=@exam_code and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and r.exam_code=ex.exam_code and (marks_obtained<@min_marks and marks_obtained<>'-3' and marks_obtained<>'-2' and marks_obtained<>'-1' and marks_obtained<>'-4' and marks_obtained<>'-5' and marks_obtained<>'-6' and marks_obtained<>'-7' and marks_obtained<>'-8' and marks_obtained<>'-9' and marks_obtained<>'-10' and marks_obtained<>'-11' and marks_obtained<>'-12' and marks_obtained<>'-13' and marks_obtained<>'-14' and marks_obtained<>'-15' and marks_obtained<>'-16' and marks_obtained<>'-17') select count(marks_obtained) as 'AVG>=75' from result where exam_code=@exam_code and marks_obtained >=75 select count(distinct roll_no) as 'AVG60to74' from result where exam_code=@exam_code and marks_obtained Between 60 And 74 select count(distinct roll_no) as 'AVG50to59' from result where exam_code=@exam_code and marks_obtained Between 50 And 59 select count(distinct roll_no) as 'AVG30to49' from result where exam_code=@exam_code and marks_obtained Between 30 And 49 select count(distinct roll_no) as 'AVG20to29' from result where exam_code=@exam_code and marks_obtained Between 20 And 29 select count(distinct roll_no) as 'AVG<=19' from result where exam_code=@exam_code and marks_obtained <=19 select marks_obtained ,roll_no from result where exam_code=@exam_code and marks_obtained = (select max(marks_obtained) as 'MAX_MARK' from result r where exam_code=@exam_code ) select marks_obtained ,roll_no from result where exam_code=@exam_code and marks_obtained = ( select min(marks_obtained) as 'MIN_MARK' from result where exam_code=@exam_code and (marks_obtained>=0) ) select count(distinct roll_no) as 'AVG>=60' from result where exam_code=@exam_code and marks_obtained >=60 select count(distinct roll_no) as 'AVG>=80' from result where exam_code=@exam_code and marks_obtained >=80 End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'proc_stud_mark'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc proc_stud_mark ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure proc_stud_mark ( @roll_no nvarchar(100), @exam_code nvarchar(100) ) as begin select marks_obtained  from result where result.roll_no=@roll_no and exam_code=@exam_code End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Proc_Field_MarkEntry'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Proc_Field_MarkEntry ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure Proc_Field_MarkEntry ( @exam_code nvarchar(100), @rol_no nvarchar(20) ) as begin select mark_entry.*,maxtotal from Mark_Entry,Subject where Mark_Entry.Subject_No = Subject.Subject_No and Exam_Code =@exam_code and ltrim(rtrim(type))='' and  Attempts =1 and roll_no=@rol_no End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Proc_Credit_Points'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Proc_Credit_Points ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure Proc_Credit_Points( @mgrade nvarchar(100), @degcode nvarchar(30) ) as begin select top 1 credit_points from grade_master where mark_grade=@mgrade  and degree_code=@degcode End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'SELECT_SUBJECT_WISE_EXAM_CODE_TOTAL'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc SELECT_SUBJECT_WISE_EXAM_CODE_TOTAL ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create  PROCEDURE [dbo].[SELECT_SUBJECT_WISE_EXAM_CODE_TOTAL]( @exam_code varchar(20) ) AS begin select  sum(marks_obtained)AS 'SUM'  from result where exam_code = @exam_code End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'SELECT_ALL_TEST_IN_SUBJECT'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc SELECT_ALL_TEST_IN_SUBJECT ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create PROCEDURE [dbo].[SELECT_ALL_TEST_IN_SUBJECT] ( @batchyear  varchar(50), @subjectno varchar(50), @strsec varchar(20) ) AS if @strsec!='' begin select exam_type.criteria_no,criteriaforinternal.criteria,exam_type.exam_code,criteriaforinternal.max_mark   from exam_type,criteriaforinternal where criteriaforinternal.criteria_no = exam_type.criteria_no and subject_no=@subjectno and sections= @strsec and batch_year=@batchyear order by  exam_type.exam_code,criteriaforinternal.criteria select sum(result.marks_obtained)AS 'SUM' from exam_type,criteriaforinternal,result where criteriaforinternal.criteria_no = exam_type.criteria_no and result.exam_code=exam_type.exam_code and subject_no=@subjectno and sections= @strsec and batch_year=@batchyear and  result.marks_obtained>0 End Else begin select exam_type.criteria_no ,criteriaforinternal.criteria,exam_type.exam_code,criteriaforinternal.max_mark  from exam_type,criteriaforinternal where criteriaforinternal.criteria_no = exam_type.criteria_no and subject_no=@subjectno and batch_year=@batchyear order by  exam_type.exam_code,criteriaforinternal.criteria select sum(result.marks_obtained)AS 'SUM'  from exam_type,criteriaforinternal,result where criteriaforinternal.criteria_no = exam_type.criteria_no and result.exam_code=exam_type.exam_code and subject_no=@subjectno  and batch_year=@batchyear and result.marks_obtained>0 End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            //creatstrproc=string.Empty;
            //getval1=string.Empty;
            //getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'SELECT _ALL_STUDENT_TEST_SUBJECT_WISE_REPORTS_DETAILS'");
            //if (getval1 != "0")
            //{
            //    string drpstrproc = " drop proc SELECT _ALL_STUDENT_TEST_SUBJECT_WISE_REPORTS_DETAILS";
            //    if (drpstrproc != "")
            //    {
            //        int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
            //    }
            //}
            //creatstrproc = " CREATE PROCEDURE [dbo].[SELECT _ALL_STUDENT_TEST_SUBJECT_WISE_REPORTS_DETAILS] ( @strsec varchar(10), @batchyear varchar(10), @subjectno int , @filterwithsection varchar(5000), @filterwithoutsection varchar(5000)) AS begin DECLARE @sqlCommand varchar(5000) if @strsec!='' begin SET @sqlCommand = 'select distinct EXAM_TYPE.exam_code,registration.stud_name,registration.roll_no,registration.reg_no,result.marks_obtained,result.roll_no, EXAM_TYPE.min_mark,EXAM_TYPE.max_mark FROM EXAM_TYPE,result,registration where EXAM_TYPE.exam_code=result.exam_code and registration.roll_no=result.roll_no '+ @filterwithsection EXEC (@sqlCommand) End Else begin SET @sqlCommand = 'select distinct EXAM_TYPE.exam_code,registration.stud_name,registration.roll_no,registration.reg_no,result.marks_obtained,result.roll_no, EXAM_TYPE.min_mark,EXAM_TYPE.max_mark FROM EXAM_TYPE,result,registration where EXAM_TYPE.exam_code=result.exam_code and registration.roll_no=result.roll_no '+ @filterwithoutsection EXEC (@sqlCommand) End End";
            //if (creatstrproc != "")
            //{
            //    int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            //}
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'SELECT_STUDENT_RANGE_IN_TEST'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc SELECT_STUDENT_RANGE_IN_TEST ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE  PROCEDURE [dbo].[SELECT_STUDENT_RANGE_IN_TEST] ( @criteria_no varchar(50), @subjectno varchar(50), @strsec varchar(50), @marks1 int, @marks2 int, @filterwithsection varchar(5000), @filterwithoutsection varchar(5000)) AS begin DECLARE @sqlCommand varchar(5000) if @strsec!='' begin SET @sqlCommand ='select distinct result.roll_no,registration.stud_name,registration.roll_no,registration.Reg_No,registration.Stud_Type, result.marks_obtained,criteriaforinternal.criteria,criteriaforinternal.max_mark,registration.serialno from result,exam_type,registration,criteriaforinternal Where '+ @filterwithsection EXEC (@sqlCommand) End Else begin SET @sqlCommand ='select distinct result.roll_no,registration.stud_name,registration.roll_no,registration.Reg_No,registration.Stud_Type, result.marks_obtained,criteriaforinternal.criteria,criteriaforinternal.max_mark,registration.serialno from result,exam_type,registration,criteriaforinternal Where '+ @filterwithoutsection EXEC (@sqlCommand) End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'SELECT_ALL_STUDENT_ONE_TEST'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc SELECT_ALL_STUDENT_ONE_TEST ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE PROCEDURE [dbo].[SELECT_ALL_STUDENT_ONE_TEST] ( @criteria_no varchar(50), @subjectno varchar(50), @strsec varchar(50),@filterwithsection varchar(5000), @filterwithoutsection varchar(5000)) AS begin DECLARE @sqlCommand varchar(5000) if @strsec!='' begin SET @sqlCommand = 'select  distinct e.criteria_no as criteria_no,r.roll_no as roll_no,r.marks_obtained as marks_obtained,e.min_mark as min_mark,max_mark,registration.roll_no,registration.reg_no,registration.stud_name,registration.serialno from result r,exam_type e,registration Where '+ @filterwithsection EXEC (@sqlCommand) End Else begin SET @sqlCommand = 'select  distinct e.criteria_no as criteria_no,r.roll_no as roll_no,r.marks_obtained as marks_obtained,e.min_mark as min_mark,max_mark,registration.roll_no,registration.reg_no,registration.stud_name,registration.serialno from result r,exam_type e,registration Where '+ @filterwithoutsection EXEC (@sqlCommand) End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Proc_SubjectDisplay'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Proc_SubjectDisplay ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create   PROCEDURE [dbo].[Proc_SubjectDisplay] (@batchyear nvarchar(50), @subjectno nvarchar(100), @criteriano nvarchar(100), @strsec nvarchar(100)) as declare @Exam_code nvarchar(100) declare @staff_code nvarchar(100) begin if(@strsec!='') begin set @Exam_code=(select exam_code from exam_type where subject_no =@subjectno and criteria_no=@criteriano and sections=@strsec) select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=0  and marks_obtained <=9 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=10 and marks_obtained <=19 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=20 and marks_obtained <=29 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=30 and marks_obtained <=39 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=40 and marks_obtained <=44 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=45 and marks_obtained <=49 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=50 and marks_obtained <=54 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=55 and marks_obtained <=59 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=60 and marks_obtained <=69 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=70 and marks_obtained <=79 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=80 and marks_obtained <=89 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=90 and marks_obtained <=100 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' select count(*) as MarkCt from result r,registration rr where r.exam_code=@Exam_code and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as EL from result where exam_code=@Exam_code and marks_obtained=-2 Select count(*) as EOD from result where exam_code=@Exam_code and marks_obtained=-3 Select count(*) as LEAVE from result where exam_code=@Exam_code and marks_obtained=-9 Select sum(marks_obtained) as MarkCt from result r where exam_code=@Exam_code and r.marks_obtained<>'-1' and r.marks_obtained<>'-2' and r.marks_obtained<>'-3'and r.marks_obtained<>'-4' and r.marks_obtained<>'-5' and r.marks_obtained<>'-6' and r.marks_obtained<>'-7'and r.marks_obtained<>'-8' and r.marks_obtained<>'-9' and r.marks_obtained<>'-10' and r.marks_obtained<>'-11'and r.marks_obtained<>'-12' and r.marks_obtained<>'-13' and r.marks_obtained<>'-14' and r.marks_obtained<>'-15'and r.marks_obtained<>'-16' Select count(*) as OD from result where exam_code=@Exam_code and marks_obtained=-16 Select count(*) as NJ from result where exam_code=@Exam_code and marks_obtained=-7 set @staff_code =(select  staff_code from exam_type where subject_no =@subjectno and criteria_no=@criteriano and sections=@strsec)  select staff_name as 'STAFF_NAME' from staffmaster where staff_code=@staff_code End Else begin set @Exam_code=(select exam_code from exam_type where subject_no =@subjectno and criteria_no=@criteriano) select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=0  and marks_obtained <=9 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=10 and marks_obtained <=19 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=20 and marks_obtained <=29 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=30 and marks_obtained <=39 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=40 and marks_obtained <=44 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=45 and marks_obtained <=49 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=50 and marks_obtained <=54 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=55 and marks_obtained <=59 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=60 and marks_obtained <=69 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=70 and marks_obtained <=79 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=80 and marks_obtained <=89 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as MarkCt from result r,registration rr where exam_code=@Exam_code and marks_obtained>=90 and marks_obtained <=100 and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' select count(*) as MarkCt from result r,registration rr where r.exam_code=@Exam_code and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' Select count(*) as EL from result where exam_code=@Exam_code and marks_obtained=-2 Select count(*) as EOD from result where exam_code=@Exam_code and marks_obtained=-3 Select count(*) as LEAVE from result where exam_code=@Exam_code and marks_obtained=-9 Select sum(marks_obtained) as MarkCt from result r where exam_code=@Exam_code and r.marks_obtained<>'-1' and r.marks_obtained<>'-2' and r.marks_obtained<>'-3'and r.marks_obtained<>'-4' and r.marks_obtained<>'-5' and r.marks_obtained<>'-6' and r.marks_obtained<>'-7'and r.marks_obtained<>'-8' and r.marks_obtained<>'-9' and r.marks_obtained<>'-10' and r.marks_obtained<>'-11'and r.marks_obtained<>'-12' and r.marks_obtained<>'-13' and r.marks_obtained<>'-14' and r.marks_obtained<>'-15'and r.marks_obtained<>'-16' Select count(*) as OD from result where exam_code=@Exam_code and marks_obtained=-16 Select count(*) as NJ from result where exam_code=@Exam_code and marks_obtained=-7 set @staff_code =(select  staff_code from exam_type where subject_no =@subjectno and criteria_no=@criteriano ) select staff_name as 'STAFF_NAME' from staffmaster where staff_code=@staff_code End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Proc_Test_Display'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Proc_Test_Display ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create  PROCEDURE [dbo].[Proc_Test_Display] ( @criteriano nvarchar(100), @strsec nvarchar(100)) as begin if(@strsec!='') begin select subject_no from exam_type where criteria_no=@criteriano and sections=@strsec End else begin select subject_no from exam_type where criteria_no=@criteriano end end";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Proc_TestLoad'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Proc_TestLoad ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure [dbo].[Proc_TestLoad] ( @subjectno nvarchar(100), @strsec nvarchar(50), @syllcode nvarchar(200) ) as begin if(@strsec!='') begin select e.criteria_no,e.exam_date,c.criteria,e.exam_code as examcode from exam_type as e,criteriaforinternal as c  where subject_no=@subjectno and sections=@strsec and e.criteria_no=c.criteria_no and c.syll_code=@syllcode  order by c.criteria_no End Else begin select e.criteria_no,e.exam_date,c.criteria,e.exam_code as examcode from exam_type as e,criteriaforinternal as c  where subject_no=@subjectno and e.criteria_no=c.criteria_no and c.syll_code=@syllcode  order by c.criteria_no End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'get_subject'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc get_subject ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure [dbo].[get_subject] ( @sem_fun varchar(20), @degree_code varchar(20), @batch_year varchar(20), @examcode_fun varchar(20) ) as begin Select distinct Subject.Subject_No, isnull(Subject_Code,'') as Subject_Code,credit_points,subject.subject_name,(select distinct subject_type from subject s,sub_sem ss where s.subtype_no=ss.subtype_no and subject_no=subject.subject_no) subtype  from Mark_Entry,Subject,Syllabus_Master where Syllabus_Master.Syll_Code = Subject.Syll_Code and SubjecT_Code is not null and Syllabus_Master.Semester = @sem_fun and Degree_Code = @degree_code and  Batch_Year = @batch_year and Mark_Entry.Subject_No =  Subject.Subject_No  and  Exam_Code = @examcode_fun and Type='' and attempts=1 Order by subtype desc,subject.subject_no  End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Proc_All_Subject_Count'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc Proc_All_Subject_Count ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create  procedure [dbo].[Proc_All_Subject_Count] ( @exam_code varchar(200), @min_marks int ) as BEGIN select count(marks_obtained) as 'PASS_COUNT' from result where exam_code = @exam_code and (marks_obtained>=@min_marks or marks_obtained='-3' or marks_obtained='-2') and marks_obtained<>'-1' select count(marks_obtained) as 'FAIL_COUNT_WITHOUT_AB' from result where exam_code = @exam_code and (marks_obtained<@min_marks and marks_obtained<>'-3' and marks_obtained<>'-2' and marks_obtained<>'-1') select count(marks_obtained) as 'Absent' from result where exam_code = @exam_code and  marks_obtained ='-1' select count(marks_obtained) as 'No.of Appeared' from result r,registration rt where r.exam_code = @exam_code and (marks_obtained>=0 or marks_obtained='-2' or marks_obtained='-3') and r.roll_no=rt.roll_no and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 and rt.RollNo_Flag<>0 End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'proc_stud_arrear'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc proc_stud_arrear ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE procedure proc_stud_arrear @rollno_p varchar(30),@fromsem_ddl_p int,@tosem_ddl_p int as begin Select distinct isnull(Subject_Code,'') as scode , isnull(subjecT_name,'') as sname ,semester ,me.attempts from subject,syllabus_master as smas,mark_entry as me Where smas.syll_code = subject.syll_code And Me.subject_no = subject.subject_no and me.subject_no in (select distinct subject_no from  mark_entry where subject_no not in (select distinct subject_no from mark_entry where passorfail=1 and result='pass' and ltrim(rtrim(roll_no))=@rollno_p) and ltrim(rtrim(roll_no))=@rollno_p and Semester >= @fromsem_ddl_p and Semester >= @tosem_ddl_p ) order by smas.semester,scode End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'PROC_GET_EXAMCODE_MINMRK'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc PROC_GET_EXAMCODE_MINMRK ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " create procedure PROC_GET_EXAMCODE_MINMRK ( @subject_no varchar(100), @criteria_no varchar(100) ) as begin select exam_code,min_mark from exam_type where subject_no=@subject_no and criteria_no=@criteria_no End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            //store procedure coe4 selvam
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'examfeepaidarrreg'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc examfeepaidarrreg ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create procedure [dbo].[examfeepaidarrreg] @batchyear int, @degreecode int, @semester int, @feecode int, @rollno varchar(20), @textvalsemester varchar(25) as begin declare @category int declare @studname varchar(40) select distinct isnull(Subject_Code,'') as Subject_Code , isnull(subjecT_name,'') as subname ,s.subject_no as subject_no,sc.semester from subjectchooser sc,subject s,sub_sem as feesub,exam_application e_app,exam_appl_details e_det,exam_details ed Where feesub.subtype_no = s.subtype_no And feesub.syll_code = s.syll_code And feesub.promote_count = 1 And sc.subject_no = s.subject_no and e_app.appl_no=e_det.appl_no and e_det.subject_no=s.subject_no and e_app.exam_code=ed.exam_code and ed.batch_year=@batchyear and ed.degree_code=@degreecode and ed.current_semester=@semester and ltrim(rtrim(e_app.roll_no))=@rollno order by sc.semester asc Select distinct isnull(Subject_Code,'') as Subject_Code , isnull(subject_name,'') as subject_name , isnull(subject.subject_no,'') as subject_no, semester as ssem from subject,syllabus_master smas, sub_sem feesub,exmtt_det e where feesub.subtype_no=subject.subtype_no and subject.subject_no=e.subject_no and feesub.syll_code = subject.syll_code And feesub.promote_count = 1 And smas.syll_code = subject.syll_code and subject.subject_no in (select distinct mark_entry.subject_no from mark_entry where passorfail=0 and result='Fail' and ltrim(rtrim(roll_no))=@rollno) and Semester < @semester select amount from fee_status where roll_admit in(select roll_admit from registration where roll_no=@rollno) select @category=textcode from textvaltable where textval=@textvalsemester select @studname=roll_no+'-'+Stud_name from registration where roll_no=@rollno select distinct voucherno,cal_date from dailytransaction where fee_code=@feecode and fee_category=@category and name=@studname and debit=0 select fee_amount from fee_allot where roll_admit in(select roll_admit from registration where roll_no=@rollno) and fee_category=@category and fee_code=@feecode End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'procsubjectmoderation'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc procsubjectmoderation ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  CREATE  procedure procsubjectmoderation   @examcode int, @papertype int, @semester int, @degree_code int as begin declare @type int set @type=@papertype if @papertype=0 begin select len(m.roll_no),m.roll_no,m.subject_no,isnull(internal_mark,'0') as internal_mark,isnull(external_mark,'0')as external_mark,isnull(actual_internal_mark,0) as actualint, isnull(actual_external_mark,0) as actualext, isnull(mintotal,'0') as mintotal,min_int_marks,min_ext_marks from mark_entry m,subject s,sub_sem feesub,exam_details e where feesub.subtype_no=s.subtype_no and m.subject_no=s.subject_no and m.exam_code=@examcode and m.exam_code=e.exam_code and e.degree_code=@degree_code and e.current_semester=@semester and feesub.Lab=0 and attempts<=1 and feesub.promote_count=1 and m.external_mark>=0 order by len(m.roll_no),m.roll_no,m.external_mark desc,m.subject_no asc End Else if @papertype=1 begin select len(m.roll_no),m.roll_no,m.subject_no,isnull(internal_mark,'0') as internal_mark,isnull(external_mark,'0')as external_mark, isnull(actual_internal_mark,0) as actualint,isnull(actual_external_mark,0) as actualext,isnull(mintotal,'0') as mintotal, min_int_marks,min_ext_marks from mark_entry m,subject s,sub_sem feesub,syllabus_master sm, exam_details e where feesub.subtype_no=s.subtype_no and m.subject_no=s.subject_no and m.exam_code=e.exam_code and e.degree_code=@degree_code and e.current_semester=@semester and m.exam_code=@examcode and feesub.Lab=0 and feesub.promote_count=1 and sm.syll_code=s.syll_code and m.attempts>1 and m.external_mark>=0 order by len(m.roll_no),m.roll_no,m.external_mark desc,m.subject_no asc End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcmoderationarrearSelectData'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcmoderationarrearSelectData ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create  procedure [dbo].[ProcmoderationarrearSelectData] @ExamMonth varchar(30), @ExamYear varchar(30), @examcode varchar(20), @degreecode int, @semester int, @flag int AS begin declare @radiocheck int set @radiocheck=@flag if @radiocheck=1 begin select distinct course_name,dept_name,dept_acronym,s.subject_code,s.subject_name,m.subject_no,e.exam_code,m.type,sy.semester from exam_application ea,exam_appl_details m,exam_details e,registration r,degree d,course c,department dp,subject s, syllabus_master sy,sub_sem as feesub where feesub.subtype_no=s.subtype_no and d.course_id = c.course_id And dp.dept_code = d.dept_code And r.degree_code = d.degree_code and e.degree_code=r.degree_code and e.batch_year=r.batch_year and feesub.subject_type like 'th%' and e.exam_month=@ExamMonth and e.exam_year=@ExamYear and s.subject_no=m.subject_no  and r.roll_no=ea.roll_no and e.batch_year=sy.batch_year  and e.degree_code=sy.degree_code and e.degree_code=@degreecode and e.current_semester=@semester and ea.appl_no=m.appl_no and  m.type='*'  and e.exam_code=@examcode and feesub.promote_count=1 and r.degree_code=sy.degree_code and r.batch_year=sy.batch_year  and sy.syll_code=s.syll_code and m.subject_no in(select distinct subject_no from mark_entry where exam_code=@examcode and attempts>1) order by course_name,dept_name,m.subject_no End else IF @radiocheck=0 begin select distinct course_name,dept_name,dept_acronym,e.exam_code,m.type from exam_application ea,exam_appl_details m,exam_details e,registration r,degree d,course c,department dp, syllabus_master sy,sub_sem as feesub where  d.course_id=c.course_id and dp.dept_code=d.dept_code and r.degree_code=d.degree_code and e.degree_code=r.degree_code and e.batch_year=r.batch_year and e.exam_month=@ExamMonth and e.exam_year=@ExamYear  and r.roll_no=ea.roll_no and e.batch_year=sy.batch_year  and e.degree_code=sy.degree_code and e.degree_code=@degreecode and e.current_semester=@semester and ea.appl_no=m.appl_no and  m.type='*'  and e.exam_code=@examcode and feesub.promote_count=1 and r.degree_code=sy.degree_code and r.batch_year=sy.batch_year order by course_name,dept_name End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcmoderationSelectData'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcmoderationSelectData ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create  procedure [dbo].[ProcmoderationSelectData] @ExamMonth varchar(30), @ExamYear varchar(30), @examcode varchar(20), @degreecode int, @courseid int, @semester int, @flag int AS begin declare @radiocheck int set @radiocheck=@flag if @radiocheck=1 begin select distinct course_name,dept_name,dept_acronym,s.subject_name,s.subject_code,m.subject_no,m.exam_code,r.current_semester from mark_entry m,exam_details e,registration r,degree d,course c,department dp,subject s, syllabus_master sy,sub_sem as feesub where feesub.subtype_no=s.subtype_no and feesub.subject_type like 'th%'and d.course_id=c.course_id and dp.dept_code=d.dept_code and r.degree_code=d.degree_code and e.exam_code=m.exam_code and c.course_id=@courseid and d.degree_code=@degreecode and e.current_semester=@semester and e.degree_code=r.degree_code and e.batch_year=r.batch_year and m.exam_code=@examcode and feesub.promote_count=1 and e.exam_month=@ExamMonth and e.exam_year=@ExamYear and s.subject_no=m.subject_no and  m.type<>'*' and r.roll_no=m.roll_no and r.degree_code=sy.degree_code and r.batch_year=sy.batch_year and sy.semester=r.current_semester and sy.syll_code=s.syll_code order by course_name,dept_name,s.subject_code End else IF @radiocheck=0 begin select distinct course_name,dept_name,dept_acronym,m.exam_code, r.current_semester from mark_entry m,exam_details e,registration r,degree d,course c,department dp, syllabus_master sy,sub_sem as feesub where d.course_id=c.course_id and dp.dept_code=d.dept_code and r.degree_code=d.degree_code and c.course_id=@courseid and d.degree_code=@degreecode and e.current_semester=@semester and e.exam_code=m.exam_code and c.course_id=@courseid and d.degree_code=@degreecode and e.current_semester=@semester and e.degree_code=r.degree_code and e.batch_year=r.batch_year and m.exam_code=@examcode and feesub.promote_count=1 and e.exam_month=@ExamMonth and e.exam_year=@ExamYear and  m.type<>'*' and r.roll_no=m.roll_no and r.degree_code=sy.degree_code and r.batch_year=sy.batch_year and sy.semester=r.current_semester order by course_name,dept_name End End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'exammarkconvertion'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc exammarkconvertion ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create  procedure [dbo].[exammarkconvertion] @batchyear int, @degreecode int, @semester int, @examcode int, @subjecttype int, @sections varchar as begin if(@sections!='') select roll_no,reg_no,stud_name from registration where batch_year=@batchyear and degree_code=@degreecode and current_semester=@semester and sections=@sections order by roll_no asc if(@sections='') select roll_no,reg_no,stud_name from registration where batch_year=@batchyear and degree_code=@degreecode and current_semester=@semester order by roll_no asc if(@subjecttype=0) select distinct me.subject_no,s.subject_name,s.subject_code from mark_entry me,subject s,sub_sem ss,subjectchooser sc where ss.subtype_no=s.subtype_no and ss.syll_code=s.syll_code and me.subject_no=s.subject_no and s.subject_no=sc.subject_no and me.exam_code=@examcode and sc.roll_no=me.roll_no and sc.semester=@semester and ss.subject_type like 'th%' if(@subjecttype=1) select distinct me.subject_no,s.subject_name,s.subject_code from mark_entry me,subject s,sub_sem ss,subjectchooser sc where ss.subtype_no=s.subtype_no and ss.syll_code=s.syll_code and me.subject_no=s.subject_no and s.subject_no=sc.subject_no and me.exam_code=@examcode and sc.roll_no=me.roll_no and sc.semester=@semester and ss.subject_type not like 'th%' End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcMarkSelectData'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcMarkSelectData ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create procedure [dbo].[ProcMarkSelectData] @Number int, @examtype int, @Date varchar(30), @ExamMonth varchar(30), @ExamYear varchar(30), @CollegeCode varchar(30) AS begin declare @no int set @no=@Number declare @type int set @type=@examtype if @no>0 begin if @type=0 begin select  distinct convert(varchar(20),ex.exam_date,105) as ExamDate,c.Course_Name as CourseName,dpt.Dept_Name as DeptName,s.subject_Name as SubjectName,s.subject_no as SubjectNo,s.Subject_code as subjectcode,e.semester as Semester,d.degree_code as department_code,e.batchfrom as batchyear from exmtt e,exmtt_det ex,Course c,Department dpt,degree d,subject s,sub_sem where c.Course_Id=d.Course_Id and  sub_sem.subtype_no=s.subtype_no and sub_sem.subject_type not like 'pr%' and d.Degree_Code=e.degree_code and dpt.Dept_Code=d.Dept_Code and d.Degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.coll_code=@CollegeCode and ex.exam_Date=convert(varchar(20),@Date,103)and ex.exam_code=e.exam_code and e.Exam_Month=@ExamMonth and e.Exam_Year=@ExamYear and e.exam_type='Univ' order by Semester End else if @type=1 begin select  distinct convert(varchar(20),batch.exam_date,105) as ExamDate,c.Course_Name as CourseName,dpt.Dept_Name as DeptName,s.subject_Name as SubjectName,s.subject_no as SubjectNo,s.Subject_code as subjectcode,batch.semester as Semester,d.degree_code as department_code,batch.batch_year as batchyear from batch_allocation_practical batch,Course c,Department dpt,degree d,subject s,sub_sem where c.Course_Id=d.Course_Id and  sub_sem.subtype_no=s.subtype_no and sub_sem.subject_type not like 'th%' and d.Degree_Code=batch.degree_code and dpt.Dept_Code=d.Dept_Code  and s.subject_no=batch.subject_no and batch.exam_date=convert(varchar(20),@Date,103) order by examdate asc,Semester End End Else begin if @type=0 begin select  distinct convert(varchar(20),ex.exam_date,105) as ExamDate,c.Course_Name as CourseName,dpt.Dept_Name as DeptName,s.subject_Name as SubjectName,s.subject_no as SubjectNo,s.Subject_code as subjectcode,e.semester as Semester,d.degree_code as department_code,e.batchfrom as batchyear from exmtt e,exmtt_det ex,Course c,Department dpt,degree d,subject s,sub_sem where c.Course_Id=d.Course_Id and  sub_sem.subtype_no=s.subtype_no and sub_sem.subject_type not like 'pr%' and d.Degree_Code=e.degree_code and dpt.Dept_Code=d.Dept_Code and d.Degree_code=e.degree_code and s.subject_no=ex.subject_no and ex.coll_code=@CollegeCode and ex.exam_code=e.exam_code and e.Exam_Month=@ExamMonth and e.Exam_Year=@ExamYear and e.exam_type='Univ' order by Semester End else if @type=1 begin select  distinct convert(varchar(20),batch.exam_date,105) as ExamDate,c.Course_Name as CourseName,dpt.Dept_Name as DeptName,s.subject_Name as SubjectName,s.subject_no as SubjectNo,s.Subject_code as subjectcode,batch.semester as Semester,d.degree_code as department_code,batch.batch_year as batchyear from batch_allocation_practical batch,Course c,Department dpt,degree d,subject s,sub_sem where c.Course_Id=d.Course_Id and  sub_sem.subtype_no=s.subtype_no and sub_sem.subject_type not like 'th%' and d.Degree_Code=batch.degree_code and dpt.Dept_Code=d.Dept_Code  and s.subject_no=batch.subject_no order by examdate asc,Semester End End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcSelectDummyNo'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcSelectDummyNo ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create procedure [dbo].[ProcSelectDummyNo] @SubjectNo varchar(100), @DegreeCode varchar(100), @Semester varchar(100), @Exam_Month varchar(100), @Exam_Year varchar(100), @Exam_Date varchar(100), @exam_type int AS begin declare @type int set @type=@exam_type if @type=0 begin select distinct len(d.dummy_no),d.dummy_no,r.Roll_No, r.Reg_No from registration r,dummynumber d where r.roll_no=d.roll_no and d.subject_no=@SubjectNo and d.semester=@Semester and d.degreecode=@DegreeCode and d.exam_Month=@Exam_Month and exam_year=@Exam_Year and exam_date=@exam_date order by  len(d.dummy_no),d.dummy_no,r.Roll_No,r.Reg_no End else if @type=1 begin select  len(r.reg_no),reg_no as regno,r.roll_no from registration r,subjectchooser sc,batch_allocation_practical batch where sc.roll_no=r.roll_no and batch.exam_date=convert(varchar(20),@Exam_Date,103) and batch.semester=@Semester and sc.subject_no=@SubjectNo and batch.subject_no=sc.subject_no and batch.degree_code=@DegreeCode and batch.roll_no=r.roll_no  and cc=0 and delflag=0 and exam_flag<>'Debar' order by len(r.reg_no),r.reg_no End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcNominalSelectRegisterNo'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcNominalSelectRegisterNo ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create  Procedure [dbo].[ProcNominalSelectRegisterNo] @ExamMonth varchar(30), @ExamYear varchar(30), @SubjectCode varchar(30), @ExamDate varchar(25), @ExamSession varchar(45), @SubjectName varchar(200) As begin if(@ExamDate='All' and @ExamSession='All') begin select distinct len(r.reg_no),r.reg_no from subjectchooser sc,subject s,exmtt_det ex,exmtt e,registration r where r.delflag=0 and r.exam_flag<>'Debare' and r.reg_no<>' 'and r.roll_no=sc.roll_no and sc.subject_no=ex.subject_no and sc.semester=e.Semester and ex.subject_no=s.subject_no and s.subject_Name=@SubjectName and s.subject_code=@SubjectCode and ex.exam_code=e.exam_code and e.exam_Month=@ExamMonth and e.exam_Year=@ExamYear order by  len(r.reg_no),r.reg_no select distinct len(r.reg_no), r.reg_no  from mark_entry m,exam_details e,exmtt_det ex,exmtt et,subject s ,registration r where r.delflag=0 and r.exam_flag<>'Debare' and r.roll_no<>' ' and r.roll_no=m.roll_no and m.passorfail=0 and m.result='Fail' and m.attempts>1 and s.subject_no=m.subject_no and m.subject_no=ex.subject_no and ex.subject_no=s.subject_no and s.subject_Name=@SubjectName and s.subject_code=@SubjectCode and ex.exam_code=et.exam_code and et.exam_month=@ExamMonth and et.exam_year=@ExamYear and m.exam_code=e.exam_code and e.current_Semester >= 1 and e.current_Semester <et.Semester  order by len(r.reg_no),r.reg_no End else if (@ExamDate!='All' and @ExamSession='All') begin select  distinct len(r.reg_no),r.reg_no from subjectchooser sc,subject s,exmtt_det ex,exmtt e,registration r where r.delflag=0 and r.exam_flag<>'Debare' and r.reg_no<>' 'and r.roll_no=sc.roll_no and sc.subject_no=ex.subject_no and sc.semester=e.Semester and ex.subject_no=s.subject_no and s.subject_Name=@SubjectName and s.subject_code=@SubjectCode and ex.exam_code=e.exam_code and convert(varchar(20),ex.exam_date,105)=@ExamDate and e.exam_Month=@ExamMonth and e.exam_Year=@ExamYear order by  len(r.reg_no),r.reg_no select   distinct len(r.reg_no), r.reg_no  from mark_entry m,exam_details e,exmtt_det ex,exmtt et,subject s ,registration r where r.delflag=0 and r.exam_flag<>'Debare' and r.roll_no<>' ' and r.roll_no=m.roll_no and m.passorfail=0 and m.result='Fail' and m.attempts>1 and s.subject_no=m.subject_no and m.subject_no=ex.subject_no and ex.subject_no=s.subject_no and s.subject_Name=@SubjectName and s.subject_code=@SubjectCode  and ex.exam_code=et.exam_code and et.exam_month=@ExamMonth and et.exam_year=@ExamYear and m.exam_code=e.exam_code and e.current_Semester >= 1 and e.current_Semester <et.Semester  order by len(r.reg_no),r.reg_no End else if (@ExamDate='All' and @ExamSession!='All') begin select  distinct len(r.reg_no),r.reg_no from subjectchooser sc,subject s,exmtt_det ex,exmtt e,registration r where r.delflag=0 and r.exam_flag<>'Debare' and r.reg_no<>' 'and r.roll_no=sc.roll_no and sc.subject_no=ex.subject_no and sc.semester=e.Semester and ex.subject_no=s.subject_no and s.subject_Name=@SubjectName and s.subject_code=@SubjectCode and ex.Exam_Session=@ExamSession and ex.exam_code=e.exam_code and e.exam_Month=@ExamMonth and e.exam_Year=@ExamYear order by  len(r.reg_no),r.reg_no select  distinct len(r.reg_no), r.reg_no  from mark_entry m,exam_details e,exmtt_det ex,exmtt et,subject s ,registration r where r.delflag=0 and r.exam_flag<>'Debare' and r.roll_no<>' ' and r.roll_no=m.roll_no and m.passorfail=0 and m.result='Fail' and m.attempts>1 and s.subject_no=m.subject_no and m.subject_no=ex.subject_no and ex.subject_no=s.subject_no and s.subject_Name=@SubjectName and s.subject_code=@SubjectCode and ex.exam_code=et.exam_code and ex.Exam_Session=@ExamSession and et.exam_month=@ExamMonth and et.exam_year=@ExamYear and m.exam_code=e.exam_code and e.current_Semester >= 1 and e.current_Semester <et.Semester  order by len(r.reg_no),r.reg_no End else if (@ExamDate!='All' and @ExamSession!='All') begin select  distinct len(r.reg_no),r.reg_no from subjectchooser sc,subject s,exmtt_det ex,exmtt e,registration r where r.delflag=0 and r.exam_flag<>'Debare' and r.reg_no<>' 'and r.roll_no=sc.roll_no and sc.subject_no=ex.subject_no and sc.semester=e.Semester and ex.subject_no=s.subject_no and s.subject_Name=@SubjectName and s.subject_code=@SubjectCode and convert(varchar(20),ex.exam_date,105)=@ExamDate and ex.Exam_Session=@ExamSession  and ex.exam_code=e.exam_code and e.exam_Month=@ExamMonth and e.exam_Year=@ExamYear order by  len(r.reg_no),r.reg_no select  distinct len(r.reg_no), r.reg_no  from mark_entry m,exam_details e,exmtt_det ex,exmtt et,subject s ,registration r where r.delflag=0 and r.exam_flag<>'Debare' and r.roll_no<>' ' and r.roll_no=m.roll_no and m.passorfail=0 and m.result='Fail' and m.attempts>1 and s.subject_no=m.subject_no and m.subject_no=ex.subject_no and ex.subject_no=s.subject_no and s.subject_Name=@SubjectName and s.subject_code=@SubjectCode and convert(varchar(20),ex.exam_date,105)=@ExamDate and ex.Exam_Session=@ExamSession and ex.exam_code=et.exam_code and et.exam_month=@ExamMonth and et.exam_year=@ExamYear and m.exam_code=e.exam_code and e.current_Semester >= 1 and e.current_Semester <et.Semester  order by len(r.reg_no),r.reg_no End End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcNominalSelectSubject'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcNominalSelectSubject ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create Procedure [dbo].[ProcNominalSelectSubject] @ExamMonth varchar(30), @ExamYear varchar(20), @ExamDate varchar(20), @ExamSession varchar(20) AS begin if(@ExamDate='All' and @ExamSession='All') begin select distinct s.subject_code,s.subject_name from exmtt_det et,exmtt e,subject s where s.subject_no=et.subject_no and et.exam_code=e.exam_code and  e.exam_Month=@ExamMonth and e.Exam_Year=@ExamYear  order by s.subject_name,s.subject_code End else if (@ExamDate!='All' and @ExamSession='All') begin select distinct s.subject_code,s.subject_name from exmtt_det et,exmtt e,subject s where s.subject_no=et.subject_no and convert(varchar(20),et.exam_date,105)=@ExamDate and  et.exam_code=e.exam_code and  e.exam_Month=@ExamMonth and e.Exam_Year=@ExamYear order by s.subject_name,s.subject_code End else if (@ExamDate='All' and @ExamSession!='All') begin select distinct s.subject_code,s.subject_name from exmtt_det et,exmtt e,subject s where s.subject_no=et.subject_no and et.Exam_Session=@ExamSession and  et.exam_code=e.exam_code and  e.exam_Month=@ExamMonth and e.Exam_Year=@ExamYear order by s.subject_name,s.subject_code End else if (@ExamDate!='All' and @ExamSession!='All') begin select distinct s.subject_code,s.subject_name from exmtt_det et,exmtt e,subject s where s.subject_no=et.subject_no and convert(varchar(20),et.exam_date,105)=@ExamDate and et.Exam_Session=@ExamSession and  et.exam_code=e.exam_code and  e.exam_Month=@ExamMonth and e.Exam_Year=@ExamYear order by s.subject_name,s.subject_code End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamSeatingQuestion'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcExamSeatingQuestion ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create Procedure ProcExamSeatingQuestion @Month varchar(20), @Year varchar(20), @Date varchar(20), @Session varchar(20) AS begin if(@Date!='All' and @Session='All') begin select distinct count(es.subject_no) as subjectCount,es.roomno,convert(varchar(20),es.edate,105) as ExamDate,es.ses_sion,s.subject_code,s.subject_name from subject s,exam_seating es,exmtt e,exmtt_det et where s.subject_no=es.subject_no and convert(varchar(20),es.edate,105)=@Date and es.subject_no=et.subject_no and et.exam_code=e.exam_code and e.Exam_Month=@Month and e.Exam_Year=@Year  group by es.edate,es.ses_sion,s.subject_code,s.subject_name,es.roomno order by  ExamDate,es.roomno,es.ses_sion,s.subject_code,s.subject_name End else if(@Date='All' and @Session!='All') begin select distinct count(es.subject_no) as subjectCount,es.roomno,convert(varchar(20),es.edate,105) as ExamDate,es.ses_sion,s.subject_code,s.subject_name from subject s,exam_seating es,exmtt e,exmtt_det et where s.subject_no=es.subject_no  and es.ses_sion=@Session and es.subject_no=et.subject_no and et.exam_code=e.exam_code and e.Exam_Month=@Month and e.Exam_Year=@Year  group by es.edate,es.ses_sion,s.subject_code,s.subject_name,es.roomno order by  ExamDate,es.roomno,es.ses_sion,s.subject_code,s.subject_name End else if(@Date='All' and @Session='All') begin select distinct count(es.subject_no) as subjectCount,es.roomno,convert(varchar(20),es.edate,105) as ExamDate,es.ses_sion,s.subject_code,s.subject_name from subject s,exam_seating es,exmtt e,exmtt_det et where s.subject_no=es.subject_no and es.subject_no=et.subject_no and et.exam_code=e.exam_code and e.Exam_Month=@Month and e.Exam_Year=@Year  group by es.edate,es.ses_sion,s.subject_code,s.subject_name,es.roomno order by  ExamDate,es.roomno,es.ses_sion,s.subject_code,s.subject_name End Else begin select distinct count(es.subject_no) as subjectCount,es.roomno,convert(varchar(20),es.edate,105) as ExamDate,es.ses_sion,s.subject_code,s.subject_name from subject s,exam_seating es,exmtt e,exmtt_det et where s.subject_no=es.subject_no and convert(varchar(20),es.edate,105)=@Date and es.ses_sion=@Session and es.subject_no=et.subject_no and et.exam_code=e.exam_code and e.Exam_Month=@Month and e.Exam_Year=@Year  group by es.edate,es.ses_sion,s.subject_code,s.subject_name,es.roomno order by  ExamDate,es.roomno,es.ses_sion,s.subject_code,s.subject_name End End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'after_getsubject_student'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc after_getsubject_student ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create  PROCEDURE [dbo].[after_getsubject_student] ( @degree_code nvarchar(20), @sem nvarchar(20), @batch_year nvarchar(20), @section nvarchar(20), @checkval nvarchar(10), @check_mod nvarchar(20), @exam_code nvarchar(50) ) as begin if(@section!='') begin if(@checkval!='') begin if(@checkval='1') begin select distinct mark_entry.subject_no,subject.subject_code,subject.min_ext_marks,subject.min_int_marks, subject.max_ext_marks,subject.max_int_marks,subject.mintotal,subject.maxtotal,mark_entry.attempts From exam_application,exam_appl_details,mark_entry,subject,registration  where exam_application.exam_code=@exam_code  and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and Mark_Entry.attempts=@checkval and exam_application.exam_code=mark_entry.exam_code and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year order by mark_entry.subject_no if(@check_mod ='0') begin select distinct mark_entry.roll_no,mark_entry.subject_no,subject.subject_code,isnull (actual_internal_mark,0) as Internal,isnull (actual_external_mark,0) as Externalmark,isnull (actual_total,0) as Total, result,registration.stud_name,mark_entry.attempts  From exam_application,exam_appl_details,mark_entry,subject,registration  where exam_application.exam_code=@exam_code  and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and Mark_Entry.attempts=@checkval and exam_application.exam_code=mark_entry.exam_code and registration.sections=@section and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year End Else begin select distinct mark_entry.roll_no,mark_entry.subject_no,subject.subject_code,isnull (actual_internal_mark,0) as Internal,isnull (actual_external_mark,0) as Externalmark,isnull (actual_total,0) as Total, result,registration.stud_name,mark_entry.attempts  From exam_application,exam_appl_details,mark_entry,subject,registration,moderation  where exam_application.exam_code=@exam_code  and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and Mark_Entry.attempts=@checkval and exam_application.exam_code=mark_entry.exam_code and registration.sections=@section and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year and moderation.roll_no=mark_entry.roll_no and moderation.passmark<>0 End End if(@checkval='2') begin select distinct mark_entry.subject_no,subject.subject_code,subject.min_ext_marks,subject.min_int_marks, subject.max_ext_marks,subject.max_int_marks,subject.mintotal,subject.maxtotal,mark_entry.attempts From exam_application,exam_appl_details,mark_entry,subject,registration  where exam_application.exam_code=@exam_code  and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and Mark_Entry.attempts<>1 and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year and exam_application.exam_code=mark_entry.exam_code order by mark_entry.subject_no if(@check_mod ='0') begin select distinct mark_entry.roll_no,mark_entry.subject_no,subject.subject_code,isnull (actual_internal_mark,0) as Internal,isnull (actual_external_mark,0) as Externalmark,isnull (actual_total,0) as Total, result,registration.stud_name,mark_entry.attempts  From exam_application,exam_appl_details,mark_entry,subject,registration  where exam_application.exam_code=@exam_code  and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no = registration.roll_no And mark_entry.attempts <> 1 And exam_application.exam_code = mark_entry.exam_code and registration.sections=@section and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year End Else begin select distinct mark_entry.roll_no,mark_entry.subject_no,subject.subject_code,isnull (actual_internal_mark,0) as Internal,isnull (actual_external_mark,0) as Externalmark,isnull (actual_total,0) as Total, result,registration.stud_name,mark_entry.attempts  From exam_application,exam_appl_details,mark_entry,subject,registration ,moderation where exam_application.exam_code=@exam_code  and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no = registration.roll_no And mark_entry.attempts <> 1 And exam_application.exam_code = mark_entry.exam_code and registration.sections=@section and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year and moderation.roll_no=mark_entry.roll_no and moderation.passmark<>0 End End End Else begin select distinct mark_entry.subject_no,subject.subject_code,subject.min_ext_marks,subject.min_int_marks, subject.max_ext_marks,subject.max_int_marks,subject.mintotal,subject.maxtotal,mark_entry.attempts From exam_application,exam_appl_details,mark_entry,subject,registration  where exam_application.exam_code=@exam_code  and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year and exam_application.exam_code=mark_entry.exam_code order by mark_entry.subject_no if(@check_mod ='0') begin select distinct mark_entry.roll_no,mark_entry.subject_no,subject.subject_code,isnull (actual_internal_mark,0) as Internal,isnull (actual_external_mark,0) as Externalmark,isnull (actual_total,0) as Total, result,registration.stud_name,mark_entry.attempts  From exam_application,exam_appl_details,mark_entry,subject,registration  where exam_application.exam_code=@exam_code  and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and exam_application.exam_code=mark_entry.exam_code and registration.sections=@section and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year End Else begin select distinct mark_entry.roll_no,mark_entry.subject_no,subject.subject_code,isnull (actual_internal_mark,0) as Internal,isnull (actual_external_mark,0) as Externalmark,isnull (actual_total,0) as Total, result,registration.stud_name,mark_entry.attempts  From exam_application,exam_appl_details,mark_entry,subject,registration,moderation  where exam_application.exam_code=@exam_code  and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and exam_application.exam_code=mark_entry.exam_code and registration.sections=@section and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year and moderation.roll_no=mark_entry.roll_no and moderation.passmark<>0 End End End Else begin if(@checkval!='') begin if(@checkval='1') begin select distinct mark_entry.subject_no,subject.subject_code,subject.min_ext_marks,subject.min_int_marks, subject.max_ext_marks,subject.max_int_marks,subject.mintotal,subject.maxtotal,mark_entry.attempts From exam_application,exam_appl_details,mark_entry,subject,registration  where exam_application.exam_code=@exam_code  and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and Mark_Entry.attempts=@checkval and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year and exam_application.exam_code=mark_entry.exam_code order by mark_entry.subject_no if(@check_mod ='0') begin select distinct mark_entry.roll_no,mark_entry.subject_no,subject.subject_code,isnull (actual_internal_mark,0) as Internal,isnull (actual_external_mark,0) as Externalmark,isnull (actual_total,0) as Total, result,registration.stud_name,mark_entry.attempts  From exam_application,exam_appl_details,mark_entry,subject,registration  where exam_application.exam_code=@exam_code  and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and Mark_Entry.attempts=@checkval and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year and exam_application.exam_code=mark_entry.exam_code End Else begin select distinct mark_entry.roll_no,mark_entry.subject_no,subject.subject_code,isnull (actual_internal_mark,0) as Internal,isnull (actual_external_mark,0) as Externalmark,isnull (actual_total,0) as Total, result,registration.stud_name,mark_entry.attempts  From exam_application,exam_appl_details,mark_entry,subject,registration,moderation  where exam_application.exam_code=@exam_code  and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and Mark_Entry.attempts=@checkval and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year and exam_application.exam_code=mark_entry.exam_code and moderation.roll_no=mark_entry.roll_no and moderation.passmark<>0 End End if(@checkval='2') begin select distinct mark_entry.subject_no,subject.subject_code,subject.min_ext_marks,subject.min_int_marks, subject.max_ext_marks,subject.max_int_marks,subject.mintotal,subject.maxtotal,mark_entry.attempts From exam_application,exam_appl_details,mark_entry,subject,registration  where exam_application.exam_code=@exam_code  and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and Mark_Entry.attempts<>1 and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year and exam_application.exam_code=mark_entry.exam_code order by mark_entry.subject_no if(@check_mod ='0') begin select distinct mark_entry.roll_no,mark_entry.subject_no,subject.subject_code,isnull (actual_internal_mark,0) as Internal,isnull (actual_external_mark,0) as Externalmark,isnull (actual_total,0) as Total, result,registration.stud_name,mark_entry.attempts  From exam_application,exam_appl_details,mark_entry,subject,registration  where exam_application.exam_code=@exam_code  and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and Mark_Entry.attempts<>1 and exam_application.exam_code=mark_entry.exam_code and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year End Else begin select distinct mark_entry.roll_no,mark_entry.subject_no,subject.subject_code,isnull (actual_internal_mark,0) as Internal,isnull (actual_external_mark,0) as Externalmark,isnull (actual_total,0) as Total, result,registration.stud_name,mark_entry.attempts  From exam_application,exam_appl_details,mark_entry,subject,registration,moderation  where exam_application.exam_code=@exam_code  and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and Mark_Entry.attempts<>1 and exam_application.exam_code=mark_entry.exam_code and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year and moderation.roll_no=mark_entry.roll_no and moderation.passmark<>0 End End End Else begin select distinct mark_entry.subject_no,subject.subject_code,subject.min_ext_marks,subject.min_int_marks, subject.max_ext_marks,subject.max_int_marks,subject.mintotal,subject.maxtotal,mark_entry.attempts From exam_application,exam_appl_details,mark_entry,subject,registration  where exam_application.exam_code=@exam_code  and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year and exam_application.exam_code=mark_entry.exam_code order by mark_entry.subject_no if(@check_mod ='0') begin select distinct mark_entry.roll_no,mark_entry.subject_no,subject.subject_code,isnull (actual_internal_mark,0) as Internal,isnull (actual_external_mark,0) as Externalmark,isnull (actual_total,0) as Total, result,registration.stud_name,mark_entry.attempts  From exam_application,exam_appl_details,mark_entry,subject,registration  where exam_application.exam_code=@exam_code  and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and exam_application.exam_code=mark_entry.exam_code and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year End Else begin select distinct mark_entry.roll_no,mark_entry.subject_no,subject.subject_code,isnull (actual_internal_mark,0) as Internal,isnull (actual_external_mark,0) as Externalmark,isnull (actual_total,0) as Total, result,registration.stud_name,mark_entry.attempts  From exam_application,exam_appl_details,mark_entry,subject,registration,moderation  where exam_application.exam_code=@exam_code  and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and exam_application.exam_code=mark_entry.exam_code and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year and moderation.roll_no=mark_entry.roll_no and moderation.passmark<>0 End End End if(@section!='') begin select moderation.roll_no, passmark,exam_code,subject_no from moderation,registration where moderation.degree_code=@degree_code  and moderation.semester=@sem  and moderation.batch_year=@batch_year and registration.degree_code=moderation.degree_code and registration.current_semester=moderation.semester and registration.batch_year=moderation.batch_year and registration.sections=@section and  exam_code=@exam_code  and registration.roll_no=moderation.roll_no order by moderation.roll_no,subject_no End Else begin select moderation.roll_no, passmark,exam_code,subject_no from moderation,registration where moderation.degree_code=@degree_code  and moderation.semester=@sem  and moderation.batch_year=@batch_year and registration.degree_code=moderation.degree_code and registration.current_semester=moderation.semester and registration.batch_year=moderation.batch_year  and  exam_code=@exam_code  and registration.roll_no=moderation.roll_no order by moderation.roll_no,subject_no End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'provisional_getsubject_student'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc provisional_getsubject_student ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  CREATE   PROCEDURE [dbo].[provisional_getsubject_student] ( @degree_code nvarchar(20), @sem nvarchar(20), @batch_year nvarchar(20), @section nvarchar(20), @checkval nvarchar(10) ) as begin if(@section='') begin if(@checkval!='') begin if(@checkval='1') begin select distinct mark_entry.subject_no,subject.subject_code,subject.min_ext_marks,subject.min_int_marks, subject.max_ext_marks,subject.max_int_marks,subject.mintotal,subject.maxtotal,mark_entry.attempts From exam_application,exam_appl_details,mark_entry,subject,registration  where exam_application.exam_code=(select top 1 exam_code from exam_details where degree_Code =@degree_code  and current_semester =@sem  and batch_year =@batch_year ) and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and Mark_Entry.attempts=@checkval and exam_application.exam_code=mark_entry.exam_code  and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year order by mark_entry.subject_no select distinct mark_entry.roll_no,mark_entry.subject_no,subject.subject_code,isnull (internal_mark,0) as ActualInternalmark,isnull (external_mark,0) as ActualExternalmark,isnull(bfm_external,10000) as convertedexternal, isnull(bfm_internal,10000) as convertedinternal,isnull (actual_total,0) as ActualTotal, isnull (internal_mark,0) as Internalmark,isnull(external_mark,0) as Externalmark,isnull (total,0) as Total, result,registration.stud_name,mark_entry.attempts  From exam_application,exam_appl_details,mark_entry,subject, registration  where exam_application.exam_code=(select  top 1 exam_code from exam_details where degree_Code =@degree_code  and current_semester =@sem  and batch_year =@batch_year ) and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and Mark_Entry.attempts=@checkval and exam_application.exam_code=mark_entry.exam_code and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year End if(@checkval='2') begin select distinct mark_entry.subject_no,subject.subject_code,subject.min_ext_marks,subject.min_int_marks, subject.max_ext_marks,subject.max_int_marks,subject.mintotal,subject.maxtotal,mark_entry.attempts From exam_application,exam_appl_details,mark_entry,subject,registration  where exam_application.exam_code=(select   top 1 exam_code from exam_details where degree_Code =@degree_code  and current_semester =@sem  and batch_year =@batch_year ) and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no = registration.roll_no And mark_entry.attempts <> 1 And exam_application.exam_code = mark_entry.exam_code and  registration.degree_Code =@degree_code and registration.current_semester =@sem and registration.batch_year =@batch_year order by mark_entry.subject_no select distinct mark_entry.roll_no,mark_entry.subject_no,subject.subject_code,isnull (internal_mark,0) as ActualInternalmark,isnull(external_mark,0) as ActualExternalmark,isnull (actual_total,0) as ActualTotal,isnull(bfm_external,10000) as convertedexternal, isnull(bfm_internal,10000) as convertedinternal,isnull (internal_mark,0) as Internalmark,isnull (external_mark,0) as Externalmark,isnull (total,0) as Total, result, registration.stud_name,mark_entry.attempts  From exam_application,exam_appl_details,mark_entry,subject,registration where exam_application.exam_code=(select  top 1 exam_code from exam_details where degree_Code =@degree_code  and current_semester =@sem  and batch_year =@batch_year ) and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and Mark_Entry.attempts<>1 and exam_application.exam_code=mark_entry.exam_code and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year End End Else begin select distinct mark_entry.subject_no,subject.subject_code,subject.min_ext_marks,subject.min_int_marks, subject.max_ext_marks,subject.max_int_marks,subject.mintotal,subject.maxtotal,mark_entry.attempts From exam_application,exam_appl_details,mark_entry,subject,registration  where exam_application.exam_code=(select   top 1 exam_code from exam_details where degree_Code =@degree_code  and current_semester =@sem  and batch_year =@batch_year ) and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and exam_application.exam_code=mark_entry.exam_code and registration.degree_Code =@degree_code and registration.current_semester =@sem and registration.batch_year =@batch_year  order by mark_entry.subject_no select distinct mark_entry.roll_no,mark_entry.subject_no,subject.subject_code,isnull (internal_mark,0) as ActualInternalmark,isnull(external_mark,0) as ActualExternalmark,isnull(bfm_external,10000) as convertedexternal, isnull(bfm_internal,10000) as convertedinternal,isnull (actual_total,0) as ActualTotal,isnull (internal_mark,0) as Internalmark,isnull(external_mark,0) as Externalmark,isnull (total,0) as Total, result, registration.stud_name,mark_entry.attempts  From exam_application,exam_appl_details,mark_entry,subject,registration where exam_application.exam_code=(select  top 1 exam_code from exam_details where degree_Code =@degree_code  and current_semester =@sem  and batch_year =@batch_year ) and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and exam_application.exam_code=mark_entry.exam_code and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year End End Else begin if(@checkval!='') begin if(@checkval='1') begin select distinct mark_entry.subject_no,subject.subject_code,subject.min_ext_marks,subject.min_int_marks, subject.max_ext_marks,subject.max_int_marks,subject.mintotal,subject.maxtotal,mark_entry.attempts From exam_application,exam_appl_details,mark_entry,subject,registration  where exam_application.exam_code=(select   top 1 exam_code from exam_details where degree_Code =@degree_code  and current_semester =@sem  and batch_year =@batch_year ) and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and Mark_Entry.attempts=@checkval and exam_application.exam_code=mark_entry.exam_code  and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year order by mark_entry.subject_no select distinct mark_entry.roll_no,mark_entry.subject_no,subject.subject_code,isnull (internal_mark,0) as ActualInternalmark,isnull (external_mark,0) as ActualExternalmark,isnull(bfm_external,10000) as convertedexternal, isnull(bfm_internal,10000) as convertedinternal,isnull (actual_total,0) as ActualTotal, isnull (internal_mark,0) as Internalmark,isnull(external_mark,0) as Externalmark,isnull (total,0) as Total, result, registration.stud_name,mark_entry.attempts  From exam_application,exam_appl_details,mark_entry,subject,registration where exam_application.exam_code=(select top 1 exam_code from exam_details where degree_Code =@degree_code and current_semester =@sem  and batch_year =@batch_year ) and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and Mark_Entry.attempts=@checkval and exam_application.exam_code=mark_entry.exam_code and registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year and   registration.sections=@section End if(@checkval='2') begin select distinct mark_entry.subject_no,subject.subject_code,subject.min_ext_marks,subject.min_int_marks, subject.max_ext_marks,subject.max_int_marks,subject.mintotal,subject.maxtotal,mark_entry.attempts From exam_application,exam_appl_details,mark_entry,subject,registration  where exam_application.exam_code=(select  top 1 exam_code from exam_details where degree_Code =@degree_code  and current_semester =@sem  and batch_year =@batch_year ) and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no = registration.roll_no And mark_entry.attempts <> 1 And exam_application.exam_code = mark_entry.exam_code and  registration.degree_Code =@degree_code and registration.current_semester =@sem and registration.batch_year =@batch_year order by mark_entry.subject_no select distinct mark_entry.roll_no,mark_entry.subject_no,subject.subject_code,isnull (internal_mark,0) as ActualInternalmark,isnull (external_mark,0) as ActualExternalmark,isnull (actual_total,0) as ActualTotal, isnull (internal_mark,0) as Internalmark,isnull(external_mark,0) as Externalmark,isnull(bfm_external,10000) as convertedexternal, isnull(bfm_internal,10000) as convertedinternal,isnull (total,0) as Total, result, registration.stud_name,mark_entry.attempts  From exam_application,exam_appl_details,mark_entry,subject,registration where exam_application.exam_code=(select  top 1 exam_code from exam_details where degree_Code =@degree_code  and current_semester =@sem  and batch_year =@batch_year ) and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and Mark_Entry.attempts<>1 and exam_application.exam_code=mark_entry.exam_code and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year and   registration.sections=@section End End Else begin select distinct mark_entry.subject_no,subject.subject_code,subject.min_ext_marks,subject.min_int_marks, subject.max_ext_marks,subject.max_int_marks,subject.mintotal,subject.maxtotal,mark_entry.attempts From exam_application,exam_appl_details,mark_entry,subject,registration  where exam_application.exam_code=(select  top 1 exam_code from exam_details where degree_Code =@degree_code  and current_semester =@sem  and batch_year =@batch_year ) and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and exam_application.exam_code=mark_entry.exam_code and registration.degree_Code =@degree_code and registration.current_semester =@sem and registration.batch_year =@batch_year  order by mark_entry.subject_no select distinct mark_entry.roll_no,mark_entry.subject_no,subject.subject_code,isnull (internal_mark,0) as ActualInternalmark,isnull (external_mark,0) as ActualExternalmark,isnull (actual_total,0) as ActualTotal, isnull (internal_mark,0) as Internalmark,isnull (external_mark,0) as Externalmark,isnull(bfm_external,10000) as convertedexternal, isnull(bfm_internal,10000) as convertedinternal,isnull (total,0) as Total, result, registration.stud_name,mark_entry.attempts  From exam_application,exam_appl_details,mark_entry,subject,registration where exam_application.exam_code=(select  top 1 exam_code from exam_details where degree_Code =@degree_code and current_semester =@sem  and batch_year =@batch_year ) and exam_appl_details.appl_no=exam_application.appl_no and subject.subject_no=mark_entry.subject_no and exam_application.roll_no=mark_entry.roll_no and mark_entry.subject_no=exam_appl_details.subject_no and mark_entry.roll_no=registration.roll_no and exam_application.exam_code=mark_entry.exam_code and  registration.degree_Code =@degree_code and registration.current_semester =@sem and  registration.batch_year =@batch_year and   registration.sections=@section End End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'proc_arrear'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc proc_arrear ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create procedure [dbo].[proc_arrear] @rollno_p varchar(30), @cur_sem_p int as begin Select isnull(Subject_Code,'') as scode , isnull(subjecT_name,'') as sname , semester from subject,syllabus_master as smas where smas.syll_code = subject.syll_code and subject_no in (select distinct subject_no from  mark_entry where subject_no not in (select distinct subject_no from mark_entry where passorfail=1 and result='pass' and ltrim(rtrim(roll_no))=@rollno_p) and ltrim(rtrim(roll_no))=@rollno_p and Semester >= 1 and Semester <= @cur_sem_p ) order by smas.semester,scode End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcDeptSyllabusUpdate'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcDeptSyllabusUpdate ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  CREATE Procedure [dbo].[ProcDeptSyllabusUpdate] @Degree varchar(30), @Batch varchar(30), @SyllabusYear varchar(30), @Semester varchar(10) AS Begin if not exists(select * from syllabus_master where degree_code=@Degree and semester=@Semester and Batch_year=@Batch) Begin insert into syllabus_master(Degree_code,Batch_year,Syllabus_year,semester) values(@Degree,@SyllabusYear,@Semester,@Batch) End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcDeptSubSemInsert'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcDeptSubSemInsert ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  Create Procedure ProcDeptSubSemInsert @subject_type varchar(100), @no_of_papers varchar(20), @fee_per_paper varchar(30), @promote_count varchar(20), @Lab varchar(40), @improvement_fee varchar(30), @markOrGrade varchar(30), @pre_schedule varchar(20), @syll_code varchar(20), @arr_fee varchar(30), @re_tot varchar(40), @re_val varchar(20), @projThe varchar(30) AS Begin if exists(select * from sub_sem where syll_code=@syll_code and subject_type=@subject_type) Begin update sub_sem set subject_type=@subject_type,no_of_papers=@no_of_papers,fee_per_paper=@fee_per_paper,promote_count=@promote_count, Lab=@Lab,improvement_fee=@improvement_fee,markOrGrade=@markOrGrade,pre_schedule=@pre_schedule,syll_code=@syll_code,arr_fee=@arr_fee, re_tot=@re_tot,re_val=@re_val,projThe=@projThe where subject_type=@subject_type and syll_code=@syll_code End Else Begin insert into sub_sem(subject_type,no_of_papers,fee_per_paper,promote_count,Lab,improvement_fee,markOrGrade,pre_schedule, syll_code,arr_fee,re_tot,re_val,projThe) values (@subject_type,@no_of_papers,@fee_per_paper,@promote_count,@Lab,@improvement_fee, @markOrGrade,@pre_schedule,@syll_code,@arr_fee,@re_tot,@re_val,@projThe) End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExmDetInsert'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcExmDetInsert ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "   Create Procedure ProcExmDetInsert @Degree_Code varchar(30), @Current_Semester varchar(20), @Batch_Year varchar(20), @Exam_Month varchar(30), @Exam_Year varchar(30) AS Begin IF Not Exists(Select * from Exam_Details where Degree_Code =@Degree_Code and Current_Semester = @Current_Semester and Batch_Year =@Batch_Year) Begin insert into Exam_Details(Degree_Code,Current_Semester,Exam_Month,Exam_Year,Batch_Year) values(@Degree_Code,@Current_Semester,@Exam_Month,@Exam_Year,@Batch_Year) End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcDeptCriteriaInsert'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcDeptCriteriaInsert ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "   create Procedure ProcDeptCriteriaInsert @Criteria varchar(80), @Max_Mark varchar(30), @Min_Mark varchar(20), @Syll_Code varchar(40) AS Begin if not exists(Select * from CriteriaForInternal where Syll_Code =@Syll_Code) Begin insert into CriteriaForInternal(Criteria,Max_Mark,Min_Mark,Syll_Code) values(@Criteria,@Max_Mark,@Min_Mark,@Syll_Code) End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamScheduleLoadTestName'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcExamScheduleLoadTestName ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "   CREATE  Procedure [dbo].[ProcExamScheduleLoadTestName] @FromDate varchar(20), @ToDate varchar(30), @BatchYear varchar(20), @Degree varchar(30), @Department varchar(30), @Semester varchar(20), @Subject varchar(20), @CollegeCode int As begin if (@Degree='0' and @Department='0' and @Semester='All' and @Subject='0') begin select distinct e.ExamNo as ExamCode,t.TextVal as TestName from ExamSchedulepreparation e,TextvalTable_New t,degree d where t.TextCode=e.ExamNo and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.BatchYear=@BatchYear and e.CollegeCode=@CollegeCode End else if(@Degree!='0' and @Department='0' and @Semester='All' and @Subject='0') begin select distinct e.ExamNo as ExamCode,t.TextVal as TestName from ExamSchedulepreparation e,TextvalTable_New t,degree d where t.TextCode=e.ExamNo and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.BatchYear=@BatchYear and d.course_Id=@Degree and d.degree_code=e.DegreeCode   and e.CollegeCode=@CollegeCode End else if(@Degree='0' and @Department!='0' and @Semester='All' and @Subject='0') begin select distinct e.ExamNo as ExamCode,t.TextVal as TestName from ExamSchedulepreparation e,TextvalTable_New t where t.TextCode=e.ExamNo and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.BatchYear=@BatchYear and e.DegreeCode=@Department  and e.CollegeCode=@CollegeCode End else if(@Degree='0' and @Department='0' and @Semester!='All' and @Subject='0') begin select distinct e.ExamNo as ExamCode,t.TextVal as TestName from ExamSchedulepreparation e,TextvalTable_New t where t.TextCode=e.ExamNo and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.BatchYear=@BatchYear and e.Semester=@Semester  and e.CollegeCode=@CollegeCode End else if(@Degree='0' and @Department='0' and @Semester='All' and @Subject!='0') begin select distinct e.ExamNo as ExamCode,t.TextVal as TestName from ExamSchedulepreparation e,TextvalTable_New t where t.TextCode=e.ExamNo and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.BatchYear=@BatchYear and e.SubjectNo=@Subject  and e.CollegeCode=@CollegeCode End else if(@Degree!='0' and @Department!='0' and @Semester='All' and @Subject='0') begin select distinct e.ExamNo as ExamCode,t.TextVal as TestName from ExamSchedulepreparation e,TextvalTable_New t,degree d where t.TextCode=e.ExamNo and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.BatchYear=@BatchYear and d.course_Id=@Degree and d.degree_code=e.DegreeCode and e.DegreeCode=@Department   and e.CollegeCode=@CollegeCode End else if(@Degree!='0' and @Department='0' and @Semester!='All' and @Subject='0') begin select distinct e.ExamNo as ExamCode,t.TextVal as TestName from ExamSchedulepreparation e,TextvalTable_New t,degree d where t.TextCode=e.ExamNo and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.BatchYear=@BatchYear and d.course_Id=@Degree and d.degree_code=e.DegreeCode  and e.Semester=@Semester  and e.CollegeCode=@CollegeCode End else if(@Degree!='0' and @Department='0' and @Semester='All' and @Subject!='0') begin select distinct e.ExamNo as ExamCode,t.TextVal as TestName from ExamSchedulepreparation e,TextvalTable_New t,degree d where t.TextCode=e.ExamNo and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.BatchYear=@BatchYear and d.course_Id=@Degree and d.degree_code=e.DegreeCode  and e.SubjectNo=@Subject  and e.CollegeCode=@CollegeCode End else if(@Degree='0' and @Department!='0' and @Semester!='All' and @Subject='0') begin select distinct e.ExamNo as ExamCode,t.TextVal as TestName from ExamSchedulepreparation e,TextvalTable_New t where t.TextCode=e.ExamNo and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.BatchYear=@BatchYear and  e.DegreeCode=@Department and e.Semester=@Semester  and e.CollegeCode=@CollegeCode End else if(@Degree='0' and @Department!='0' and @Semester='All' and @Subject!='0') begin select distinct e.ExamNo as ExamCode,t.TextVal as TestName from ExamSchedulepreparation e,TextvalTable_New t where t.TextCode=e.ExamNo and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.BatchYear=@BatchYear  and e.DegreeCode=@Department  and e.SubjectNo=@Subject  and e.CollegeCode=@CollegeCode End else if(@Degree='0' and @Department='0' and @Semester!='All' and @Subject!='0') begin select distinct e.ExamNo as ExamCode,t.TextVal as TestName from ExamSchedulepreparation e,TextvalTable_New t where t.TextCode=e.ExamNo and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.BatchYear=@BatchYear and e.Semester=@Semester and e.SubjectNo=@Subject  and e.CollegeCode=@CollegeCode End else if(@Degree!='0' and @Department!='0' and @Semester!='All' and @Subject='0') begin select distinct e.ExamNo as ExamCode,t.TextVal as TestName from ExamSchedulepreparation e,TextvalTable_New t,degree d where t.TextCode=e.ExamNo and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.BatchYear=@BatchYear and d.course_Id=@Degree and d.degree_code=e.DegreeCode and e.DegreeCode=@Department and e.Semester=@Semester  and e.CollegeCode=@CollegeCode End else if(@Degree!='0' and @Department='0' and @Semester!='All' and @Subject!='0') begin select distinct e.ExamNo as ExamCode,t.TextVal as TestName from ExamSchedulepreparation e,TextvalTable_New t,degree d where t.TextCode=e.ExamNo and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.BatchYear=@BatchYear and d.course_Id=@Degree and d.degree_code=e.DegreeCode  and e.Semester=@Semester and e.SubjectNo=@Subject  and e.CollegeCode=@CollegeCode End else if(@Degree='0' and @Department!='0' and @Semester!='All' and @Subject!='0') begin select distinct e.ExamNo as ExamCode,t.TextVal as TestName from ExamSchedulepreparation e,TextvalTable_New t where t.TextCode=e.ExamNo and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.BatchYear=@BatchYear and  e.DegreeCode=@Department and e.Semester=@Semester and e.SubjectNo=@Subject  and e.CollegeCode=@CollegeCode End else if(@Degree!='0' and @Department!='0' and @Semester!='All' and @Subject!='0') begin select distinct e.ExamNo as ExamCode,t.TextVal as TestName from ExamSchedulepreparation e,TextvalTable_New t,degree d where t.TextCode=e.ExamNo and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.BatchYear=@BatchYear and d.course_Id=@Degree and d.degree_code=e.DegreeCode and e.DegreeCode=@Department and e.Semester=@Semester and e.SubjectNo=@Subject  and e.CollegeCode=@CollegeCode End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamScheduleMasterDetails'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcExamScheduleMasterDetails ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "   CREATE Procedure [dbo].[ProcExamScheduleMasterDetails] @FromDate varchar(20), @ToDate varchar(20), @ExamNo varchar(40)=null, @CourseId varchar(20), @DegreeCode varchar(20), @Semester varchar(20), @SubjectNo varchar(20), @ShowOption varchar(10)=null, @BatchYear varchar(20), @CollegeCode int As begin if(@CourseId!='0' and @DegreeCode='0' and  @Semester='All' and @SubjectNo='0' and @ExamNo='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,c.Course_id as CourseId,d.degree_code as DegreeCode,s.subject_name as Subject,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.degree_code=e.DegreeCode and  e.BatchYear=@BatchYear and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate  and d.course_id=@CourseId and e.CollegeCode=@CollegeCode End else if(@CourseId='0' and @DegreeCode!='0' and  @Semester='All' and @SubjectNo='0' and @ExamNo='0')begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.degree_code=e.DegreeCode and  e.BatchYear=@BatchYear and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate  and e.DegreeCode=@DegreeCode and e.CollegeCode=@CollegeCode End else if(@CourseId='0' and @DegreeCode='0' and  @Semester!='All' and @SubjectNo='0' and @ExamNo='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.degree_code=e.DegreeCode and  e.BatchYear=@BatchYear and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate  and e.Semester=@Semester and e.CollegeCode=@CollegeCode End else if(@CourseId='0' and @DegreeCode='0' and  @Semester='All' and @SubjectNo!='0' and @ExamNo='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.degree_code=e.DegreeCode and  e.BatchYear=@BatchYear and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate  and e.SubjectNo=@SubjectNo and e.CollegeCode=@CollegeCode End else if(@CourseId='0' and @DegreeCode='0' and  @Semester='All' and @SubjectNo='0' and @ExamNo!='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.degree_code=e.DegreeCode and  e.BatchYear=@BatchYear and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate  and e.ExamNo=@ExamNo and e.CollegeCode=@CollegeCode End else if(@CourseId!='0' and @DegreeCode!='0' and  @Semester='All' and @SubjectNo='0' and @ExamNo='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.degree_code=e.DegreeCode and  e.BatchYear=@BatchYear and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate  and d.Course_Id=@CourseId and e.DegreeCode=@DegreeCode and e.CollegeCode=@CollegeCode End else if(@CourseId!='0' and @DegreeCode='0' and  @Semester!='All' and @SubjectNo='0' and @ExamNo='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.degree_code=e.DegreeCode and  e.BatchYear=@BatchYear and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate  and d.Course_Id=@CourseId and e.Semester=@Semester and e.CollegeCode=@CollegeCode End else if(@CourseId!='0' and @DegreeCode='0' and  @Semester='All' and @SubjectNo!='0' and @ExamNo='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.degree_code=e.DegreeCode and  e.BatchYear=@BatchYear and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate  and d.Course_Id=@CourseId and e.SubjectNo=@SubjectNo and e.CollegeCode=@CollegeCode End else if(@CourseId!='0' and @DegreeCode='0' and  @Semester='All' and @SubjectNo='0' and @ExamNo!='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.degree_code=e.DegreeCode and  e.BatchYear=@BatchYear and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate  and d.Course_Id=@CourseId and e.ExamNo=@ExamNo and e.CollegeCode=@CollegeCode End else if(@CourseId='0' and @DegreeCode!='0' and  @Semester!='All' and @SubjectNo='0' and @ExamNo='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.degree_code=e.DegreeCode and  e.BatchYear=@BatchYear and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate  and e.DegreeCode=@DegreeCode and e.Semester=@Semester and e.CollegeCode=@CollegeCode End else if(@CourseId='0' and @DegreeCode!='0' and  @Semester='All' and @SubjectNo!='0' and @ExamNo='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and  s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.degree_code=e.DegreeCode and  e.BatchYear=@BatchYear and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate  and e.DegreeCode=@DegreeCode and e.SubjectNo=@SubjectNo and e.CollegeCode=@CollegeCode End else if(@CourseId='0' and @DegreeCode!='0' and  @Semester='All' and @SubjectNo='0' and @ExamNo!='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.degree_code=e.DegreeCode and  e.BatchYear=@BatchYear and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate  and e.DegreeCode=@DegreeCode and e.ExamNo=@ExamNo and e.CollegeCode=@CollegeCode End else if(@CourseId='0' and @DegreeCode='0' and  @Semester!='All' and @SubjectNo!='0' and @ExamNo='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.degree_code=e.DegreeCode and  e.BatchYear=@BatchYear and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate  and e.Semester=@Semester and e.SubjectNo=@SubjectNo and e.CollegeCode=@CollegeCode End else if(@CourseId='0' and @DegreeCode='0' and  @Semester!='All' and @SubjectNo='0' and @ExamNo!='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.degree_code=e.DegreeCode and  e.BatchYear=@BatchYear and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate  and e.Semester=@Semester and e.ExamNo=@ExamNo and e.CollegeCode=@CollegeCode End else if(@CourseId='0' and @DegreeCode='0' and  @Semester='All' and @SubjectNo!='0' and @ExamNo!='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.degree_code=e.DegreeCode and  e.BatchYear=@BatchYear and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate  and e.ExamNo=@ExamNo and e.SubjectNo=@SubjectNo and e.CollegeCode=@CollegeCode End else if(@CourseId!='0' and @DegreeCode!='0' and  @Semester!='All' and @SubjectNo='0' and @ExamNo='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.course_id=@CourseId and d.degree_code=e.DegreeCode and e.semester=@Semester and e.batchyear=@BatchYear and e.Degreecode=@DegreeCode and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.CollegeCode=@CollegeCode End else if(@CourseId!='0' and @DegreeCode!='0' and  @Semester='All' and @SubjectNo!='0' and @ExamNo='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.course_id=@CourseId and d.degree_code=e.DegreeCode and e.batchyear=@BatchYear and e.Degreecode=@DegreeCode and e.subjectno=@Subjectno and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.CollegeCode=@CollegeCode End else if(@CourseId!='0' and @DegreeCode!='0' and  @Semester='All' and @SubjectNo='0' and @ExamNo!='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.course_id=@CourseId and d.degree_code=e.DegreeCode and e.batchyear=@BatchYear and e.Degreecode=@DegreeCode and  convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.ExamNo=@ExamNo and e.CollegeCode=@CollegeCode End else if(@CourseId='0' and @DegreeCode!='0' and  @Semester!='All' and @SubjectNo!='0' and @ExamNo='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type ,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and  d.degree_code=e.DegreeCode and e.semester=@Semester and e.batchyear=@BatchYear and e.Degreecode=@DegreeCode and e.subjectno=@Subjectno and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate  and e.CollegeCode=@CollegeCode End else if(@CourseId='0' and @DegreeCode!='0' and  @Semester!='All' and @SubjectNo='0' and @ExamNo!='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id  and d.degree_code=e.DegreeCode and e.semester=@Semester and e.batchyear=@BatchYear and e.Degreecode=@DegreeCode and  convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.ExamNo=@ExamNo and e.CollegeCode=@CollegeCode End else if(@CourseId='0' and @DegreeCode='0' and  @Semester!='All' and @SubjectNo!='0' and @ExamNo!='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.degree_code=e.DegreeCode and e.semester=@Semester and e.batchyear=@BatchYear and  e.subjectno=@Subjectno and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.ExamNo=@ExamNo and e.CollegeCode=@CollegeCode End else if(@CourseId!='0' and @DegreeCode='0' and  @Semester!='All' and @SubjectNo!='0' and @ExamNo='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.course_id=@CourseId and d.degree_code=e.DegreeCode and e.semester=@Semester and e.batchyear=@BatchYear and e.subjectno=@Subjectno and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.CollegeCode=@CollegeCode End else if(@CourseId!='0' and @DegreeCode='0' and  @Semester='All' and @SubjectNo!='0' and @ExamNo!='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.course_id=@CourseId and d.degree_code=e.DegreeCode  and e.batchyear=@BatchYear and  e.subjectno=@Subjectno and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.ExamNo=@ExamNo and e.CollegeCode=@CollegeCode End else if(@CourseId='0' and @DegreeCode!='0' and  @Semester='All' and @SubjectNo!='0' and @ExamNo!='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and  d.degree_code=e.DegreeCode  and e.batchyear=@BatchYear and e.Degreecode=@DegreeCode and e.subjectno=@Subjectno and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.ExamNo=@ExamNo and e.CollegeCode=@CollegeCode End else if(@CourseId!='0' and @DegreeCode!='0' and  @Semester!='All' and @SubjectNo!='0' and @ExamNo='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.course_id=@CourseId and d.degree_code=e.DegreeCode and e.semester=@Semester and e.batchyear=@BatchYear and e.Degreecode=@DegreeCode and e.subjectno=@Subjectno and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.CollegeCode=@CollegeCode End else if(@CourseId='0' and @DegreeCode!='0' and  @Semester!='All' and @SubjectNo!='0' and @ExamNo!='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id  and d.degree_code=e.DegreeCode and e.semester=@Semester and e.batchyear=@BatchYear and e.Degreecode=@DegreeCode and e.subjectno=@Subjectno and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.ExamNo=@ExamNo and e.CollegeCode=@CollegeCode End else if(@CourseId!='0' and @DegreeCode='0' and  @Semester!='All' and @SubjectNo!='0' and @ExamNo!='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.course_id=@CourseId and d.degree_code=e.DegreeCode and e.semester=@Semester and e.batchyear=@BatchYear  and e.subjectno=@Subjectno and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.ExamNo=@ExamNo and e.CollegeCode=@CollegeCode End else if(@CourseId!='0' and @DegreeCode!='0' and  @Semester='All' and @SubjectNo!='0' and @ExamNo!='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id  and d.course_id=@CourseId and d.degree_code=e.DegreeCode and e.batchyear=@BatchYear and e.Degreecode=@DegreeCode and e.subjectno=@Subjectno and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.ExamNo=@ExamNo and e.CollegeCode=@CollegeCode End else if(@CourseId!='0' and @DegreeCode!='0' and  @Semester!='All' and @SubjectNo='0' and @ExamNo!='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.course_id=@CourseId and d.degree_code=e.DegreeCode and e.semester=@Semester and e.batchyear=@BatchYear and e.Degreecode=@DegreeCode and  convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.ExamNo=@ExamNo and e.CollegeCode=@CollegeCode End else if(@CourseId!='0' and @DegreeCode!='0' and  @Semester!='All' and @SubjectNo!='0' and @ExamNo!='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.course_id=@CourseId and d.degree_code=e.DegreeCode and e.semester=@Semester and e.batchyear=@BatchYear and e.Degreecode=@DegreeCode and e.subjectno=@Subjectno and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate and e.ExamNo=@ExamNo and e.CollegeCode=@CollegeCode End else if(@CourseId='0' and @DegreeCode='0' and  @Semester='All' and @SubjectNo='0' and @ExamNo='0') begin select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.Semester,dept.Dept_Acronym as Department,c.course_Name as CourseName,d.degree_code as DegreeCode,s.subject_name as Subject,c.Course_id as CourseId,s.subject_no as SubjectNo,e.BatchYear,e.ExamNo,e.Type,t.TextVal TestName from ExamSchedulePreparation e,degree d,course c,department dept,subject s ,TextValTable_New t where t.TextCode=e.ExamNo and s.subject_no=e.subjectNo and dept.dept_code=d.dept_code and c.course_id=d.course_id and d.degree_code=e.DegreeCode and  e.BatchYear=@BatchYear and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate End select distinct convert(varchar(20),e.ExamDate,105)+' / '+LTRIM(RIGHT(CONVERT(VARCHAR(20), ExamTime, 22), 11)) as DateTime,convert(varchar(20),e.Duration,108) as Duration,e.NoofQuestions,e.ExamNo,e.Type,t.TextVal TestName from ExamSchedulePreparation e,TextValTable_New t where t.TextCode=e.ExamNo  and convert(varchar(20),e.ExamDate,105) between @FromDate and @ToDate   and e.Type='0' and e.ExamNo=@ExamNo and e.CollegeCode=@CollegeCode End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamAdd_add_textcode'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcExamAdd_add_textcode ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "   create PROCEDURE [dbo].[ProcExamAdd_add_textcode] ( @tval varchar(50), @tcrit varchar(50) ) AS begin if not exists(select TextCode  from textvaltable_new where TextCriteria=@tcrit and textval=@tval) begin insert into textvaltable_new(TextCriteria,TextVal) values(@tcrit,@tval) End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcExamSceduleSave'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc ProcExamSceduleSave ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "    create Procedure [dbo].[ProcExamSceduleSave] @Type int , @ExamDate DateTime, @ExmDate DateTime, @ExamTime DateTime, @Duration DateTime, @NoofQuestions varchar(30), @ExamNo varchar(50), @BatchYear varchar(30)=null, @DegreeCode varchar(30)=null, @Semester varchar(20)=null, @SubjectNo varchar(30)=null, @QuestionNo varchar(10), @CollegeCode int As begin if not exists(select * from ExamSchedulePreparation where convert(varchar(20),ExamDate,105)=convert(varchar(20),ExamDate,105) and ExamNo=@ExamNo and QuestionNo=@QuestionNo and CollegeCode=@CollegeCode) begin insert into ExamSchedulePreparation(Type,ExamDate,ExamTime,Duration,ExamNo,BatchYear,DegreeCode,Semester,SubjectNo,QuestionNo,CollegeCode) values(@Type,@ExamDate,@ExamTime,@Duration,@ExamNo,@BatchYear,@DegreeCode,@Semester,@SubjectNo,@QuestionNo,@CollegeCode) End update ExamSchedulePreparation set NoofQuestions=@NoofQuestions where  convert(varchar(20),ExamDate,105)=convert(varchar(20),@ExamDate,105) and ExamNo=@ExamNo and CollegeCode=@CollegeCode End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'questionadditonretrive'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc questionadditonretrive ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create procedure [dbo].[questionadditonretrive] @batch_year int, @degreecode int, @semester int, @subjectno int, @querytype int, @collegecode int, @path varchar(200) As begin declare @type1 int set @type1=@querytype if(@type1=0) select question_no,question,choices,correct_ans from questionaddition where  treepath='General' and collegecode=@collegecode if(@type1=1) select question_no,question,choices,correct_ans from questionaddition where batch_year=@batch_year and degree_code=@degreecode and semester=@semester and subject_no=@subjectno and collegecode=@collegecode and treepath like @path if(@type1=2) select question_no,question,choices,correct_ans from questionaddition where batch_year=@batch_year and degree_code=@degreecode and semester=@semester and collegecode=@collegecode and subject_no=@subjectno End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            //getval3=string.Empty;
            //creatstrproc=string.Empty;
            //getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'universityprocbranchwiseresult'");
            //if (getval3 != "0")
            //{
            //    string drpstrproc = " drop proc universityprocbranchwiseresult ";
            //    if (drpstrproc != "")
            //    {
            //        int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
            //    }
            //}
            //creatstrproc = "  CREATE procedure [dbo].[universityprocbranchwiseresult] @degreecode int, @batchyear int, @semester int,  @subject_no int, @examCode int, @sections varchar, @gradetype int,@minintmark int, @minextmark int,@mintotal int, @beforeorafter varchar  as begin if(@beforeorafter !='') begin if(@sections != '') begin if(@gradetype =3)begin select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and current_semester=@semester and sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1 and m.attempts = 1 and r.sections=@sections and subject_no=@subject_no and (result='pass' or result='fail' or result='S') and m.exam_code = @examCode select count(result) from mark_entry m,registration r where   actual_internal_mark >=@minintmark and actual_external_mark >= @minextmark and r.roll_no=m.roll_no and r.sections=@sections and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode select count(result)  from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections  and m.attempts=1 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark) and subject_no = @subject_no and exam_code =@examCode select count(roll_no) from exam_application where exam_code=@examCode select count(result) from mark_entry m, registration r where m.roll_no=r.roll_no and r.sections=@sections and result like 'A%' and passorfail=0 and subject_no = @subject_no and exam_code =@examCode End Else begin  select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and current_semester=@semester and sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1 and m.attempts = 1 and r.sections=@sections and subject_no=@subject_no and (result='pass' or result='fail' or result='S') and m.exam_code =@examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and m.actual_grade   not in (select mark_grade from grade_master where @mintotal between frange and trange and degree_code=@degreecode   and batch_year=@batchyear union select '' as  mark_grade) select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and m.actual_grade in (select mark_grade from grade_master where @mintotal between frange and trange and degree_code=@degreecode and batch_year=@batchyear) select count(roll_no) from exam_application where exam_code=@examCode select count(result) from mark_entry m, registration r where m.roll_no=r.roll_no and r.sections=@sections  and result like 'A%' and passorfail=0 and subject_no = @subject_no and exam_code =@examCode End End Else begin if(@gradetype =3) begin select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear and cc=0 and  delflag=0 and exam_flag <> 'DEBAR' and current_semester=@semester select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1 and m.attempts = 1  and subject_no=@subject_no  and (result='pass' or result='fail' or result='S') and m.exam_code =@examCode select count(result) from mark_entry m,registration r where actual_internal_mark >=@minintmark and actual_external_mark >= @minextmark and r.roll_no=m.roll_no and m.attempts=1  and subject_no = @subject_noand exam_code =@examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and m.attempts=1 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark)   and  subject_no = @subject_no and exam_code =@examCode  select count(roll_no) from exam_application where exam_code=@examCode select count(result) from mark_entry m, registration r where m.roll_no=r.roll_no and result like 'A%' and passorfail=0 and subject_no = @subject_no and exam_code =@examCode End Else: begin select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and current_semester=@semester select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1  and m.attempts = 1 and subject_no=@subject_no  and (result='pass' or result='fail' or result='S') and m.exam_code =@examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and m.actual_grade not in (select mark_grade from grade_master where @mintotal between frange and trange and degree_code=@degreecode and batch_year=@batchyear union select '' as  mark_grade) select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no  and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and m.actual_grade in (select mark_grade from grade_master where @mintotal between frange and trange and degree_code=@degreecode  and batch_year=@batchyear) select count(roll_no) from exam_application where exam_code=@examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections and result like 'A%' and passorfail=0 and subject_no = @subject_no and exam_code =@examCode End End End Else begin if(@sections != '') begin if(@gradetype =3) begin select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear and cc=0 and  delflag=0 and exam_flag <> 'DEBAR' and current_semester=@semester and sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1 and m.attempts = 1 and r.sections=@sections and subject_no=@subject_no  and (result='pass' or result='fail' or result='S') and m.exam_code =@examCode select count(result) from mark_entry m,registration r where   internal_mark >=@minintmark and external_mark >= @minextmark and r.roll_no=m.roll_no and r.sections=@sections and m.attempts=1 and  subject_no = @subject_no and exam_code =@examCode select count(result)as fail from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections and m.attempts=1 and (internal_mark <=@minintmark or external_mark <= @minextmark) and subject_no = @subject_no and exam_code =@examCode  select count(roll_no) from exam_application where exam_code=@examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections and result like 'A%' and passorfail=0 and subject_no = @subject_no and exam_code =@examCode End Else begin select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and current_semester=@semester and sections=@sections  select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1 and m.attempts = 1 and r.sections=@sections and subject_no=@subject_no  and (result='pass' or result='fail' or result='S') and m.exam_code =@examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections  and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and m.grade not in (select mark_grade from grade_master where @mintotal between frange and trange and degree_code=@degreecode and batch_year=@batchyear union select '' as  mark_grade) select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections    and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and m.grade in (select mark_grade from grade_master where @mintotal between frange and trange and degree_code=@degreecode and batch_year=@batchyear) select count(roll_no) from exam_application where exam_code=@examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections and result like 'A%' and passorfail=0 and subject_no = @subject_no and exam_code =@examCode End End Else: begin  if(@gradetype =3) begin select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and current_semester=@semester select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1  and m.attempts = 1  and subject_no=@subject_no and (result='pass' or result='fail' or result='S')  and m.exam_code =@examCode select count(result) from mark_entry m, registration r where   internal_mark >=@minintmark and external_mark >= @minextmark and  r.roll_no=m.roll_no and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode  select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and m.attempts=1 and (internal_mark <=@minintmark or external_mark <= @minextmark) and subject_no = @subject_no and exam_code =@examCode  select count(roll_no) from exam_application where exam_code=@examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and result like 'A%' and passorfail=0 and subject_no = @subject_no and exam_code =@examCode End Else begin select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and current_semester=@semester  select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1 and m.attempts = 1 and subject_no=@subject_no  and (result='pass' or result='fail' or result='S') and m.exam_code =@examCode  select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no  and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and m.grade not in (select mark_grade from grade_master where @mintotal between frange and trange and degree_code=@degreecode and batch_year=@batchyear union select '' as  mark_grade)  select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no  and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and m.grade in (select mark_grade from grade_master where @mintotal between frange and trange and degree_code=@degreecode and batch_year=@batchyear) select count(roll_no) from exam_application where exam_code=@examCodeselect count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections and result like 'A%' and passorfail=0 and subject_no = @subject_no and exam_code =@examCode End End End End ";
            //if (creatstrproc != "")
            //{
            //    int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            //}
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'proctarget_details'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc proctarget_details ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  CREATE procedure proctarget_details ( @exam_code varchar(20), @min_marks int,@batchyear int,@degreecode int ,@cnt int ,@option varchar(20),@rollno nvarchar(max), @passcount nvarchar(max), @failcount nvarchar(max), @presentcount nvarchar(max), @absentcount nvarchar(max) ) as BEGIN Declare @Max_Mark int, @sqlCommand1 nvarchar(max), @sqlCommand2 nvarchar(max), @sqlCommand3 nvarchar(max), @sqlCommand4 nvarchar(max) if(@option ='') begin select count(r.marks_obtained) as 'PASS_COUNT' from result r,exam_type ex,subjectchooser su where r.exam_code=@exam_code and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and  r.exam_code=ex.exam_code and (r.marks_obtained>=@min_marks or r.marks_obtained='-3' or r.marks_obtained='-2') and r.marks_obtained<>'-1' and r.roll_no not in( select roll_no from (select distinct count(distinct mark_entry.subject_no) as cnt,mark_entry.roll_no from  Mark_Entry ,Subject,sub_sem,exam_details ex,registration r where mark_entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and mark_entry.exam_code = ex.exam_code And ex.degree_code = r.degree_code And ex.batch_year = r.batch_year and r.batch_year=@batchyear and r.degree_code=@degreecode  and mark_entry.Attempts =1 and mark_entry.result = 'Fail' group by mark_entry.roll_no) a where cnt=@cnt) select count(r.marks_obtained) as 'FAIL_COUNT' from result r,subjectchooser su,exam_type ex where r.exam_code=@exam_code and ex.exam_code=r.exam_code and r.roll_no=su.roll_no and ex.subject_no=su.subject_no and (r.marks_obtained<@min_marks and r.marks_obtained<>'-3' and r.marks_obtained<>'-2' and r.marks_obtained<>'-1') and r.roll_no not in( select roll_no from (select distinct count(distinct mark_entry.subject_no) as cnt,mark_entry.roll_no from  Mark_Entry ,Subject,sub_sem,exam_details ex,registration r where mark_entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and mark_entry.exam_code = ex.exam_code And ex.degree_code = r.degree_code And ex.batch_year = r.batch_year and r.batch_year=@batchyear and r.degree_code=@degreecode  and mark_entry.Attempts =1 and mark_entry.result = 'Fail' group by mark_entry.roll_no) a where cnt=@cnt) select count(marks_obtained) as 'PRESENT_COUNT' from result r,registration rt,subjectchooser su,exam_type ex where r.exam_code=@exam_code and (marks_obtained>=0 or marks_obtained='-2' or marks_obtained='-3') and marks_obtained<>'-1'  and r.roll_no=rt.roll_no and su.subject_no=ex.subject_no and ex.exam_code=r.exam_code and su.roll_no=r.roll_no and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 and rt.RollNo_Flag<>0 and r.roll_no not in( select roll_no from (select distinct count(distinct mark_entry.subject_no) as cnt,mark_entry.roll_no from  Mark_Entry ,Subject,sub_sem,exam_details ex,registration r where mark_entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and mark_entry.exam_code = ex.exam_code And ex.degree_code = r.degree_code And ex.batch_year = r.batch_year and r.batch_year=@batchyear and r.degree_code=@degreecode  and mark_entry.Attempts =1 and mark_entry.result = 'Fail' group by mark_entry.roll_no) a where cnt=@cnt) select count(r.marks_obtained) as 'ABSENT_COUNT' from result r,registration rt,exam_type ex,subjectchooser su where r.exam_code=@exam_code and r.marks_obtained<0 and (r.marks_obtained<>'-2' and r.marks_obtained<>'-3'and r.marks_obtained<>'-7' )and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and r.exam_code=ex.exam_code and r.roll_no=rt.roll_no and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 and rt.RollNo_Flag<>0 and r.roll_no not in( select roll_no from (select distinct count(distinct mark_entry.subject_no) as cnt,mark_entry.roll_no from  Mark_Entry ,Subject,sub_sem,exam_details ex,registration r where mark_entry.Subject_No = Subject.Subject_No and subject.subtype_no= sub_sem.subtype_no and mark_entry.exam_code = ex.exam_code And ex.degree_code = r.degree_code And ex.batch_year = r.batch_year and r.batch_year=@batchyear and r.degree_code=@degreecode  and mark_entry.Attempts =1 and mark_entry.result = 'Fail' group by mark_entry.roll_no) a where cnt=@cnt) End Else begin SET  @sqlCommand1 ='select count(r.marks_obtained) as PASS_COUNT from result r,exam_type ex,subjectchooser su where '+ @passcount SET @sqlcommand2='select count(r.marks_obtained) as FAIL_COUNT from result r,subjectchooser su,exam_type ex where '+ @failcount SET  @sqlcommand3='select count(marks_obtained) as PRESENT_COUNT from result r,registration rt,subjectchooser su,exam_type ex  where '+@presentcount SET @sqlcommand4='select count(r.marks_obtained) as ABSENT_COUNT from result r,registration rt,exam_type ex,subjectchooser su where '+@absentcount EXEC(@sqlCommand1) EXEC(@sqlCommand2) EXEC(@sqlCommand3) EXEC(@sqlCommand4) End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'spbeforeandafterrevaluation'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc spbeforeandafterrevaluation ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE  procedure spbeforeandafterrevaluation  @degreecode int, @batchyear int, @semester int,  @subject_no int, @examCode int,  @section varchar(20),@gradeflag int,@minintmark int,  @minextmark int,@mintot int  as begin  declare @type int  if(@section != '') begin if(@gradeflag =1) begin select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1 and m.attempts = 1 and r.sections=@section and subject_no=@subject_no  and (result='pass' or result='fail' or result='S') and m.exam_code = @examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections= @section and result = 'Pass' and actual_internal_mark >=@minintmark and actual_external_mark >= @minextmark and m.attempts=1 and subject_no = @subject_no and exam_code = @examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections= @section and result = 'Pass' and internal_mark >=@minintmark and external_mark >= @minextmark and m.attempts=1 and subject_no = @subject_no and exam_code = @examCode select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@section and r.batch_year=@batchyear and r.degree_code=@degreecode and exam_code= @examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@section and result ='fail' and actual_internal_mark <=@minintmark and actual_external_mark <= @minextmark and exam_code=@examCode) select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@section and r.batch_year=@batchyear and r.degree_code=@degreecode and exam_code= @examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r where  m.roll_no=r.roll_no and r.sections=@section and result  ='fail' and actual_internal_mark <=@minintmark and actual_external_mark <= @minextmark  and exam_code=@examCode) End else if(@gradeflag =2) begin select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1 and m.attempts = 1 and  r.sections=@section and subject_no=@subject_no  and (result='pass' or result='fail' or result='S') and m.exam_code = @examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@section and result = 'Pass'    and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and m.actual_grade not in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear) select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@section and result = 'Pass'    and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and m.grade not in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear) select  count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@section and exam_code=@examCode and m.roll_no not in(select distinct m.roll_no from mark_entry m,registration r where m.roll_no=r.roll_no and sections=@section and actual_grade in(select mark_grade from grade_master where  @mintot  between frange and trange and degree_code=@degreecode and batch_year=@batchyear ) and exam_code=@examCode) select  count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@section and exam_code=@examCode and m.roll_no not in(select distinct m.roll_no from mark_entry m,registration r where m.roll_no=r.roll_no and sections=@section and grade in(select mark_grade from grade_master where  @mintot  between frange and trange and degree_code=@degreecode and batch_year=@batchyear ) and exam_code=@examCode) End End Else begin if(@gradeflag =1) begin select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1 and m.attempts = 1  and subject_no=@subject_no  and (result='pass' or result='fail' or result='S') and m.exam_code =@examcode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no  and result = 'Pass' and actual_internal_mark >=@minintmark and actual_external_mark >= @minextmark and m.attempts=1 and subject_no = @subject_no and exam_code = @examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no  and result = 'Pass' and internal_mark >=@minintmark and external_mark >= @minextmark and m.attempts=1 and subject_no = @subject_no and exam_code = @examCode select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.batch_year=@batchyear and r.degree_code=@degreecode and exam_code= @examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r where m.roll_no=r.roll_no and result ='fail' and actual_internal_mark <=@minintmark and actual_external_mark <= @minextmark and exam_code=@examCode) select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.batch_year=@batchyear and r.degree_code=@degreecode and exam_code= @examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r where  m.roll_no=r.roll_no and result  ='fail' and actual_internal_mark <=@minintmark and actual_external_mark <= @minextmark  and exam_code=@examCode) End else if(@gradeflag =2) begin select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1 and m.attempts = 1  and subject_no=@subject_no  and (result='pass' or result='fail' or result='S') and m.exam_code = @examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and result = 'Pass'    and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and m.actual_grade not in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear) select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and result = 'Pass'    and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and m.grade not in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear) select  count(distinct roll_no) from mark_entry where  exam_code=@examCode and roll_no not in(select distinct roll_no from mark_entry where actual_grade in(select mark_grade from grade_master where @mintot  between frange and trange and degree_code=@degreecode and batch_year=@batchyear ) and exam_code=@examCode) select  count(distinct roll_no) from mark_entry where  exam_code=@examCode and roll_no not in(select distinct roll_no from mark_entry where grade in(select mark_grade from grade_master where @mintot  between frange and trange and degree_code=@degreecode and batch_year=@batchyear ) and exam_code=@examCode) End End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'universitymarkresultanalysis'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc universitymarkresultanalysis ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  CREATE PROCEDURE [dbo].[universitymarkresultanalysis]  @degreecode varchar(20), @batchyear varchar(20), @semester varchar(20),  @examCode varchar(20),  @sections varchar(20), @dayscholar varchar(20), @hostler varchar(20), @quota varchar(20), @girls varchar(20), @boys varchar(20), @markorgrade int, @mintot int, @beforeorafter varchar(20), @minintmark int, @minextmark int AS begin if(@beforeorafter != '') begin if(@markorgrade=3) begin if(@sections !='') begin if(@quota !='') begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.seattype=@quota and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0 and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and m.exam_code=@examCode and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and actual_internal_mark <> 0  and actual_external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark) and result <> '' and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections) End Else begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear  and a.app_no=r.app_no and r.stud_type=@dayscholar and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and  r.delflag=0 and exam_flag<>'debar' and cc=0 and r.app_no = n.app_no and r.degree_code=@degreecode and  r.stud_type=@dayscholar and r.batch_year=@batchyear and m.exam_code=@examCode and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n  where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0 and r.stud_type=@dayscholar and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and result <> '' and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark ) and actual_internal_mark <> 0  and actual_external_mark <> 0  and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@hostler and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and  r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r, applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0  and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and m.exam_code=@examCode and r.stud_type=@hostler and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@hostler and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark)  and actual_internal_mark <> 0 and actual_external_mark <> 0 and m.exam_code=@examCode and m.attempts>=1 and  r.sections=@sections ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@girls and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and r.sections=@sections and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> ''   and actual_internal_mark <> 0  and actual_external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark) and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@boys and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and r.sections=@sections and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear   and result <> ''  and actual_internal_mark <> 0  and actual_external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark) and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections )  End End Else begin if(@quota !='') begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.seattype=@quota and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r, applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and actual_internal_mark <> 0 and actual_external_mark <> 0 and (actual_internal_mark <=@minintmark  or actual_external_mark <= @minextmark) and m.exam_code=@examCode and m.attempts>=1 ) End Else begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@dayscholar and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0 and r.app_no = n.app_no and r.degree_code=@degreecode and r.stud_type=@dayscholar and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no  and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@dayscholar and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and actual_internal_mark <> 0 and actual_external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark) and result <> ''  and m.exam_code=@examCode and m.attempts>=1 ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and  a.app_no=r.app_no and r.stud_type=@hostler and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0  and r.app_no = n.app_no and r.degree_code=@degreecode and r.stud_type=@hostler and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@hostler and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and  result <>'Pass' and actual_internal_mark <> 0 and actual_external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark ) and result <> ''  and m.exam_code=@examCode and m.attempts>=1 ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@girls and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and   actual_internal_mark <> 0  and actual_external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark) and result <> ''  and m.exam_code=@examCode and m.attempts>=1 ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@boys and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode  and r.batch_year=@batchyear and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and  actual_internal_mark <> 0 and actual_external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark) and result <> ''  and m.exam_code=@examCode and m.attempts>=1 )  End End End Else begin if(@sections !='')  begin if(@quota !='') begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.seattype=@quota and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and m.exam_code=@examCode and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and  r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and m.actual_grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade ) and result <> '' and  m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections) End Else  begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@dayscholar and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.app_no = n.app_no and r.degree_code=@degreecode and r.stud_type=@dayscholar and r.batch_year=@batchyear and m.exam_code=@examCode and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@dayscholar and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and result <> '' and m.actual_grade in (select mark_grade  from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear)   and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@hostler and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0  and r.app_no = n.app_no and r.degree_code=@degreecode and  r.batch_year=@batchyear  and m.exam_code=@examCode and r.stud_type=@hostler and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r, applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@hostler and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and result <> ''and m.actual_grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade) and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections )  select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@girls and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and  r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and r.sections=@sections  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r, applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0 and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and  result <> '' and m.actual_grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade )  and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@boys and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0  and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and r.sections=@sections and m.exam_code=@examCode and  m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and m.actual_grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade )  and m.exam_code=@examCode and m.attempts>=1  and r.sections=@sections ) End End Else begin if(@quota !='') begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.seattype=@quota and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar'  and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and    result <> '' and m.actual_grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade )  and m.exam_code=@examCode and m.attempts>=1 ) End Else begin  select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and  a.app_no=r.app_no and r.stud_type=@dayscholar and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.app_no = n.app_no and r.degree_code=@degreecode and r.stud_type=@dayscholar and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no  and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@dayscholar and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and    result <> '' and m.actual_grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade)  and m.exam_code=@examCode and m.attempts>=1 ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@hostler and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0  and r.app_no = n.app_no and r.degree_code=@degreecode and  r.stud_type=@hostler and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@hostler and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and result <> '' and m.actual_grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade )  and m.exam_code=@examCode and m.attempts>=1 ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@girls and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode  and r.batch_year=@batchyear   and m.exam_code=@examCode and  m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and  r.degree_code=@degreecode and r.batch_year=@batchyear and   result <> '' and m.actual_grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade)  and m.exam_code=@examCode and m.attempts>=1 )  select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and  a.app_no=r.app_no and a.sex=@boys and cc=0 and delflag=0 and exam_flag <> 'DEBAR'  select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode  and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and m.actual_grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade)  and m.exam_code=@examCode and m.attempts>=1 ) End End End End Else begin if(@markorgrade=3) begin if(@sections !='') begin if(@quota !='') begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.seattype=@quota and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and m.exam_code=@examCode and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0  and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and  result <> '' and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark ) and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections)  End Else  begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@dayscholar and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.app_no = n.app_no and  r.degree_code=@degreecode and r.stud_type=@dayscholar and r.batch_year=@batchyear  and  m.exam_code=@examCode and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@dayscholar and r.app_no = n.app_no and r.degree_code=@degreecode  and r.batch_year=@batchyear and  result <> ''and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark)  and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@hostler and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections  select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0  and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and m.exam_code=@examCode and r.stud_type=@hostler and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r, applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@hostler and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark)  and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@girls and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode  and r.batch_year=@batchyear  and r.sections=@sections and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and   result <> '' and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark ) and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@boys and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and  r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode  and r.batch_year=@batchyear and r.sections=@sections and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and result <> '' and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark)  and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections )  End End Else begin if(@quota !='') begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.seattype=@quota and cc=0 and delflag=0 and exam_flag <> 'DEBAR'  select count(distinct m.roll_no) from mark_entry m,registration r, applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no =  n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark)  and m.exam_code=@examCode and m.attempts>=1 ) End Else begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@dayscholar and cc=0 and delflag=0 and exam_flag <> 'DEBAR'  select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.app_no = n.app_no and r.degree_code=@degreecode and r.stud_type=@dayscholar and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m, registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@dayscholar and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark)  and m.exam_code=@examCode and m.attempts>=1 ) select count(*) from registration r,applyn a where  r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@hostler and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0  and r.app_no = n.app_no and r.degree_code=@degreecode and r.stud_type=@hostler and r.batch_year=@batchyear and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m, registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@hostler and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark) and result <> '' and m.exam_code=@examCode and m.attempts>=1 )  select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and  a.app_no=r.app_no and a.sex=@girls and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no  and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark) and result <> ''  and m.exam_code=@examCode and m.attempts>=1 )  select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@boys and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode  and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no  and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark )and  m.exam_code=@examCode and m.attempts>=1 )  End End End Else begin if(@sections !='')  begin if(@quota !='') begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.seattype=@quota and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n  where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and m.exam_code=@examCode and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar'  and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and m.grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade ) and result <> ''   and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections) End Else  begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear  and a.app_no=r.app_no and r.stud_type=@dayscholar and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and  r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.app_no = n.app_no and  r.degree_code=@degreecode and r.stud_type=@dayscholar and r.batch_year=@batchyear and m.exam_code=@examCode and r.sections=@sections and m.roll_no not in (select distinct m.roll_no  from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0 and r.stud_type=@dayscholar and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and m.grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade) and  m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@hostler and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and  r.delflag=0 and exam_flag<>'debar' and cc=0  and r.app_no = n.app_no and r.degree_code=@degreecode and  r.batch_year=@batchyear  and m.exam_code=@examCode and r.stud_type=@hostler and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@hostler and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and m.grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade)  and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections )  select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@girls and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where  m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and r.sections=@sections and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m, registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0  and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and m.grade in (select mark_grade from grade_master where @mintot  between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade) and  m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@boys and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections  select count(distinct m.roll_no) from mark_entry m, registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys  and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and r.sections=@sections and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no  from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar'  and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear   and result <> '' and m.grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade) and m.exam_code=@examCode  and m.attempts>=1 and r.sections=@sections )  End End Else begin if(@quota !='') begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.seattype=@quota and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and  r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no  and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and m.grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade)  and m.exam_code=@examCode and m.attempts>=1 ) End Else begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@dayscholar and cc=0 and delflag=0 and exam_flag <> 'DEBAR'  select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.app_no = n.app_no and r.degree_code=@degreecode and r.stud_type=@dayscholar and r.batch_year=@batchyear and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m, registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and  r.stud_type=@dayscholar and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and    result <> '' and m.grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade)  and m.exam_code=@examCode  and m.attempts>=1 ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@hostler and cc=0 and delflag=0 and exam_flag <> 'DEBAR'  select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0  and r.app_no = n.app_no and r.degree_code=@degreecode and r.stud_type=@hostler and r.batch_year=@batchyear and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n  where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@hostler and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear   and result <> '' and m.grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade)  and m.exam_code=@examCode and m.attempts>=1 ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@girls and cc=0 and delflag=0 and exam_flag <> 'DEBAR'  select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and  r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and m.grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade)  and m.exam_code=@examCode and m.attempts>=1 )  select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and  a.app_no=r.app_no and a.sex=@boys and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and  r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode  and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and m.grade in (select mark_grade from grade_master  where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade) and m.exam_code=@examCode and m.attempts>=1 )  End End End End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'load_subject_student'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc load_subject_student ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  create PROCEDURE [dbo].[load_subject_student]  ( @Batch_Year int, @semester int, @degree_code int, @stdsec varchar(10), @sc_code int, @ff_date int, @tt_date int, @ssf_cdate Datetime, @sst_cdate Datetime,@rollno varchar(100))  AS BEGIN select syllabus_year from syllabus_master where degree_code=@degree_code and semester =@semester and batch_year=@Batch_Year Select S.Subject_Code, S.Subject_no, S.max_int_marks,SS.Subject_Type,s.acronym,s.subject_name  from Subject as s,Sub_Sem as ss ,Syllabus_Master as SMas where SMas.Syll_Code = S.Syll_Code and SMas.Syll_Code = SS.Syll_Code and SS.Syll_Code = S.Syll_Code and S.SubType_no = SS.Subtype_no and SS.Promote_Count = 1 and SMas.Degree_Code =@degree_code and SMas.Batch_Year =@Batch_Year and SMas.Semester = @semester order by SS.SubType_No select No_of_hrs_per_day,no_of_hrs_I_half_day,no_of_hrs_II_half_day from periodattndschedule where degree_code =@degree_code and semester = @semester select nodays from periodattndschedule where degree_code = @degree_code and semer=@semester Select CONVERT(VARCHAR,start_date, 101) from seminfo where degree_code = @degree_code and semester =@semester and batch_year = @Batch_Year and start_date is not null select schorder from periodattndschedule where degree_code = @degree_code and semester =@semester if(@stdsec='') Select distinct isnull(registration.Roll_Admit,'') as Admno,isnull(registration.Roll_No,'') as RlNo,isnull(Reg_No,'') as RgNo ,isnull(Stud_Name,'') as SName,adm_date,exam_flag,debar_reason ,len(registration.Roll_No)  from registration,subjectchooser where registration.roll_no = subjectchooser.roll_no and subjectchooser.semester =@semester  and Batch_Year =@Batch_Year and Degree_Code =@degree_code and delflag =0 and exam_flag <>'Debar' and RollNo_Flag=1 and registration.Roll_No is not null and ltrim(rtrim(registration.Roll_No)) <>'' order by len(registration.Roll_No) Else Select distinct isnull(registration.Roll_Admit,'') as Admno,isnull(registration.Roll_No,'') as RlNo,isnull(Reg_No,'') as RgNo ,isnull(Stud_Name,'') as SName,adm_date,exam_flag,debar_reason ,len(registration.Roll_No) from registration,subjectchooser where registration.roll_no = subjectchooser.roll_no and subjectchooser.semester =@semester  and Batch_Year =@Batch_Year and Degree_Code =@degree_code and sections=@stdsec and delflag =0 and exam_flag <>'Debar' and RollNo_Flag=1 and registration.Roll_No is not null and ltrim(rtrim(registration.Roll_No)) <>'' and Registration.roll_no=@rollno order by len(registration.Roll_No) select linkvalue from inssettings where linkname='total Hour' select univ_hrs from univ_college_hrs where degree_code=@degree_code and semester=@semester and batch_year=@Batch_Year select * from AttMasterSetting where  CollegeCode=@sc_code and CalcFlag=0 and CollegeCode=@sc_code if(@stdsec='') select count(attendance.roll_no),attendance.roll_no,registration.Roll_Admit,registration.reg_no,registration.stud_name From registration left join attendance on registration.roll_no=attendance.roll_no where degree_code=@degree_code and batch_year=@Batch_Year and cc=0 and delflag=0 and exam_flag<>'debar' and current_semester=@semester  and month_year between @ff_date  and @tt_date group by attendance.roll_no,registration.Roll_Admit, registration.reg_no , registration.stud_name Else select count(attendance.roll_no),attendance.roll_no,registration.Roll_Admit,registration.reg_no,registration.stud_name From registration left join attendance on registration.roll_no=attendance.roll_no where degree_code=@degree_code and batch_year=@Batch_Year and cc=0 and delflag=0 and exam_flag<>'debar' and current_semester=@semester and sections=@stdsec and month_year between @ff_date  and @tt_date group by attendance.roll_no,registration.Roll_Admit, registration.reg_no , registration.stud_name if(@stdsec='') select attendance.roll_no,registration.Roll_Admit,registration.reg_no,registration.stud_name,attendance.* from registration left join attendance on registration.roll_no=attendance.roll_no where degree_code=@degree_code and batch_year=@Batch_Year and cc=0 and delflag=0 and exam_flag<>'debar'  and month_year between @ff_date  and @tt_date and  registration.roll_no=@rollno order by attendance.roll_no,registration.Roll_Admit, registration.reg_no , registration.stud_name, attendance.month_year Else select attendance.roll_no,registration.Roll_Admit,registration.reg_no,registration.stud_name, attendance.* from registration left join attendance on registration.roll_no=attendance.roll_no where degree_code=@degree_code and batch_year=@Batch_Year and cc=0 and delflag=0 and exam_flag<>'debar'  and sections=@stdsec and month_year between @ff_date  and @tt_date and registration.roll_no=@rollno order by attendance.roll_no,registration.Roll_Admit, registration.reg_no , registration.stud_name, attendance.month_year if(@stdsec='') select distinct FromDate, CONVERT(VARCHAR,FromDate, 101) ,alternate_schedule.* from alternate_schedule where batch_year=@Batch_Year and degree_code=@degree_code  and semester=@semester   and FromDate between @ssf_cdate and @sst_cdate  order by FromDate Else select distinct FromDate, CONVERT(VARCHAR,FromDate, 101) ,alternate_schedule.* from alternate_schedule where batch_year=@Batch_Year and degree_code=@degree_code  and semester=@semester  and sections=@stdsec  and FromDate between @ssf_cdate and @sst_cdate  order by FromDate if(@stdsec='') select distinct FromDate,CONVERT(VARCHAR,FromDate, 101) ,semester_schedule.* from semester_schedule where batch_year=@Batch_Year and degree_code=@degree_code  and semester=@semester Else select distinct FromDate,CONVERT(VARCHAR,FromDate, 101) ,semester_schedule.* from semester_schedule where batch_year=@Batch_Year and degree_code=@degree_code  and semester=@semester and sections=@stdsec if(@stdsec='') select * from direct_schedule where batch_year=@Batch_Year and degree_code=@degree_code  and month_year between @ff_date  and @tt_date order by month_year Else select * from direct_schedule where batch_year=@Batch_Year and degree_code=@degree_code  and sections=@stdsec and month_year between @ff_date  and @tt_date order by month_year if(@stdsec='') select distinct dm.sch_date,CONVERT(VARCHAR,dm.sch_date,101) ,dm.degree_code,dm.semester,dm.batch_year,dd.hr,dd.subject_no from dailyStaffEntry as dm,dailyentdet as dd where dm.lp_code=dd.lp_code and dm.degree_code=@degree_code and semester=@semester and dm.sch_date between @ssf_cdate and @sst_cdate  and dm.batch_year=@Batch_Year order by dm.sch_date,dm.degree_code,dm.semester,dm.batch_year,dd.hr,dd.subject_no Else select distinct dm.sch_date,CONVERT(VARCHAR,dm.sch_date,101) ,dm.degree_code,dm.semester,dm.batch_year,dd.hr,dd.subject_no from dailyStaffEntry as dm,dailyentdet as dd where dm.lp_code=dd.lp_code and dm.degree_code=@degree_code and semester=@semester and dm.sch_date between @ssf_cdate and @sst_cdate and dm.sections=@stdsec and dm.batch_year=@Batch_Year order by dm.sch_date,dm.degree_code,dm.semester,dm.batch_year,dd.hr,dd.subject_no select specialhr_master.hrentry_no,specialhr_details.subject_no,specialhr_details.hrdet_no,specialhr_attendance.roll_no,specialhr_attendance.attendance From specialhr_master, specialhr_details, specialhr_attendance Where specialhr_details.hrentry_no = specialhr_master.hrentry_no and specialhr_attendance.hrdet_no=specialhr_details.hrentry_no and batch_year=@Batch_Year and semester=@semester and degree_code=@degree_code and date  between @ssf_cdate and @sst_cdate select CONVERT(VARCHAR,date,101),specialhr_details.subject_no,specialhr_details.hrdet_no From specialhr_master, specialhr_details Where specialhr_details.hrentry_no = specialhr_master.hrentry_no and batch_year=@Batch_Year and semester=@semester and degree_code=@degree_code and date  between @ssf_cdate and @sst_cdate Select sc.roll_no, S.Subject_no,sc.Batch from Subject as s,subjectchooser as sc,Sub_Sem as ss ,Syllabus_Master as SMas where SMas.Syll_Code = S.Syll_Code and SMas.Syll_Code = SS.Syll_Code and SS.Syll_Code = S.Syll_Code and S.SubType_no = S.Subtype_no and SS.Promote_Count = 1 and S.Subject_no=sc.Subject_no and SMas.Degree_Code =@degree_code and SMas.Batch_Year =@Batch_Year and SMas.Semester = @semester and sc.roll_no=CONVERT(varchar(10), @rollno) order by SS.SubType_No select CONVERT(VARCHAR,holiday_date,101),halforfull,morning,evening from holidaystudents where semester=@semester and degree_code=@degree_code and holiday_date  between @ssf_cdate and @sst_cdate if(@stdsec='') select distinct Day_Value,Stu_Batch,Subject_no,hour_value from LabAlloc where degree_code=@degree_code and semester=@semester and batch_year=@Batch_Year Else select distinct Day_Value,Stu_Batch,Subject_no,hour_value from LabAlloc where degree_code=@degree_code and semester=@semester and batch_year=@Batch_Year and sections=@stdsec if(@stdsec='') select distinct Subject_no from LabAlloc where degree_code=@degree_code and semester=@semester and batch_year=@Batch_Year Else select distinct Subject_no from LabAlloc where degree_code=@degree_code and semester=@semester and batch_year=@Batch_Year and sections=@stdsec End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'PROC_STUD_ALLSUBMARK'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc PROC_STUD_ALLSUBMARK ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = "  CREATE procedure PROC_STUD_ALLSUBMARK  ( @batchyear varchar(4), @degreecode varchar(5),  @criteria_no varchar(20),  @sections varchar(5),@filterwithsection varchar(5000), @filterwithoutsection varchar(5000)) as BEGIN DECLARE @sqlCommand varchar  (5000) if (@sections!='')BEGIN SET @sqlCommand = 'select distinct len(r.Roll_No),r.Roll_No as RollNumber ,r.Reg_No as regno,r.stud_name as Student_Name,r.stud_type as studtype, r.App_No as ApplicationNumber,rt.marks_obtained as mark,s.subject_no, s.subject_code,s.subject_name,et.start_period, et.exam_date,et.duration,et.max_mark,et.min_mark,rt.exam_code,convert(varchar(15),r.adm_date,103) as adm_date from registration r, applyn a , result rt,exam_type et, subject s where '+ @filterwithsection EXEC (@sqlCommand) select distinct s.subject_no,s.subject_name,s.acronym,s.subject_code, staff_code,duration,convert(varchar(10),exam_date,103)as exam_date,convert(varchar(10),entry_date,103)as entry_date, max_mark,min_mark,r.exam_code from exam_type e,subject s,result r where e.subject_no=s.subject_no and e.exam_code= r.exam_code and criteria_no=@criteria_no and sections=@sections order by s.subject_no End Else BEGIN SET @sqlCommand = 'select distinct len(r.Roll_No),r.Roll_No as RollNumber,r.Reg_No as regno,r.stud_name as Student_Name,r.stud_type as studtype, r.App_No as ApplicationNumber,rt.marks_obtained as mark,s.subject_no,s.subject_code,s.subject_name,et.start_period, et.exam_date,et.duration,et.max_mark,et.min_mark,rt.exam_code,convert(varchar(15), r.adm_date,103) as adm_date from registration r, applyn a , result rt,exam_type et, subject s where '+ @filterwithoutsection EXEC (@sqlCommand) select distinct s.subject_no,s.subject_name,s.acronym,s.subject_code,staff_code,duration, convert(varchar(10),exam_date,103)as exam_date,convert(varchar(10),entry_date,103)as entry_date,max_mark,min_mark, r.exam_code from exam_type e, subject s,result r where e.subject_no=s.subject_no and e.exam_code= r.exam_code and criteria_no=@criteria_no  order by s.subject_no End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Proc_SubjectDisplayname'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc Proc_SubjectDisplayname ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE PROCEDURE [dbo].[Proc_SubjectDisplayname] (@batchyear nvarchar(50), @subjectno nvarchar(100), @criteriano nvarchar(100), @strsec nvarchar(100),@minmark nvarchar(100),@maxmark nvarchar(100),@Exam_code nvarchar(100))  as declare @staff_code nvarchar(100) begin if(@Exam_code !='') begin Select rr.Stud_Name,rr.Roll_No,dp.Dept_Name,c.Course_Name,r.marks_obtained from result r,registration rr,Degree d,Department dp,course c where dp.Dept_Code=d.Dept_Code and d.Degree_Code=rr.degree_code and d.Course_Id=c.Course_Id and exam_code=@Exam_code and marks_obtained >=@minmark and marks_obtained <=@maxmark and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' End Else if(@strsec!='') begin set @Exam_code=(select exam_code from exam_type where subject_no =@subjectno and criteria_no=@criteriano and sections=@strsec) Select rr.Stud_Name,rr.Roll_No,dp.Dept_Name,c.Course_Name,r.marks_obtained from result r,registration rr,Degree d,Department dp,course c where dp.Dept_Code=d.Dept_Code and d.Degree_Code=rr.degree_code and d.Course_Id=c.Course_Id and exam_code=@Exam_code and marks_obtained >=@minmark and marks_obtained <=@maxmark and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' End Else begin set @Exam_code=(select exam_code from exam_type where subject_no =@subjectno and criteria_no=@criteriano) Select rr.Stud_Name,rr.Roll_No,dp.Dept_Name,c.Course_Name,r.marks_obtained from result r,registration rr,Degree d,Department dp,course c where dp.Dept_Code=d.Dept_Code and d.Degree_Code=rr.degree_code and d.Course_Id=c.Course_Id and exam_code=@Exam_code and marks_obtained >=@minmark and marks_obtained <=@maxmark and rr.roll_no=r.roll_no and rr.RollNo_Flag<>0 and rr.cc=0 and rr.delflag=0 and rr.exam_flag <> 'DEBAR' End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            creatstrproc = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'proc_range_grade'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc proc_range_grade ";
                if (drpstrproc != "")
                {
                    int creat_coe = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " CREATE  procedure proc_range_grade @batchyear_p int, @degreecode_p int, @semester_p int, @examcode_p int as begin  select distinct g.Mark_Grade,count(m.roll_no) as stucount from grade_master g,mark_entry m where g.Mark_Grade=m.grade and m.exam_code =@examcode_p and g.degree_code=@degreecode_p and g.batch_year=@batchyear_p group by  g.Mark_Grade End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            // 23-04-2015 transport selvam 
            creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Insurance_Update'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc Insurance_Update ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create Procedure [dbo].[Insurance_Update] ( @Veh_ID varchar(30), @Veh_Type varchar(50), @Insu_No varchar(50) = null, @Insurance_Date varchar(50) = null, @Amt_Insured varchar(50)= null, @Insu_Amount varchar(50)= null, @InsCerificat_Filename varchar(100)= null, @InsCertificat_filedate varbinary(MAX), @InsCertificat_filetype varchar(100), @nextins_date varchar(50)= null, @ins_remarks varchar(50) = null ) as begin update Vehicle_Insurance set Veh_ID=@Veh_ID,Veh_Type=@Veh_Type,Insu_No=@Insu_No,Insurance_Date=@Insurance_Date,Amt_Insured=@Amt_Insured,Insu_Amount=@Insu_Amount,InsCerificat_Filename=@InsCerificat_Filename,InsCertificat_filetype=@InsCertificat_filetype,InsCertificat_filedate=@InsCertificat_filedate,nextins_date=@nextins_date,ins_remarks=@ins_remarks where Veh_ID=@Veh_ID and Veh_Type=@Veh_Type and InsCerificat_Filename=@InsCerificat_Filename End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Insurance_Insert'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc Insurance_Insert ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create Procedure [dbo].[Insurance_Insert] ( @Veh_ID varchar(30), @Veh_Type varchar(50), @Insu_No varchar(50) = null, @Insurance_Date varchar(50) = null, @Amt_Insured varchar(50)= null, @Insu_Amount varchar(50)= null, @InsCerificat_Filename varchar(100)= null, @InsCertificat_filedate varbinary(MAX), @InsCertificat_filetype varchar(100), @nextins_date varchar(50)= null, @ins_remarks varchar(50) = null ) as begin if not exists(select 1 from Vehicle_Insurance where Veh_ID=@Veh_ID and Veh_Type=@Veh_Type and InsCerificat_Filename=@InsCerificat_Filename) begin insert into Vehicle_Insurance(Veh_ID,Veh_Type,Insu_No,Insurance_Date,Amt_Insured,Insu_Amount,InsCerificat_Filename,InsCertificat_filetype,InsCertificat_filedate,nextins_date,ins_remarks) values(@Veh_ID,@Veh_Type,@Insu_No,@Insurance_Date,@Amt_Insured,@Insu_Amount,@InsCerificat_Filename,@InsCertificat_filetype,@InsCertificat_filedate,@nextins_date,@ins_remarks) End Else begin update Vehicle_Insurance set Veh_ID=@Veh_ID,Veh_Type=@Veh_Type,Insu_No=@Insu_No,Insurance_Date=@Insurance_Date,Amt_Insured=@Amt_Insured,Insu_Amount=@Insu_Amount,InsCerificat_Filename=@InsCerificat_Filename,InsCertificat_filetype=@InsCertificat_filetype,InsCertificat_filedate=@InsCertificat_filedate,nextins_date=@nextins_date,ins_remarks=@ins_remarks where Veh_ID=@Veh_ID and Veh_Type=@Veh_Type and InsCerificat_Filename=@InsCerificat_Filename End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Insurance_Insert'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc Insurance_Insert ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create Procedure [dbo].[Insurance_Insert] ( @Veh_ID varchar(30), @Veh_Type varchar(50), @Insu_No varchar(50) = null, @Insurance_Date varchar(50) = null, @Amt_Insured varchar(50)= null, @Insu_Amount varchar(50)= null, @InsCerificat_Filename varchar(100)= null, @InsCertificat_filedate varbinary(MAX), @InsCertificat_filetype varchar(100), @nextins_date varchar(50)= null, @ins_remarks varchar(50) = null ) as begin if not exists(select 1 from Vehicle_Insurance where Veh_ID=@Veh_ID and Veh_Type=@Veh_Type and InsCerificat_Filename=@InsCerificat_Filename) begin insert into Vehicle_Insurance(Veh_ID,Veh_Type,Insu_No,Insurance_Date,Amt_Insured,Insu_Amount,InsCerificat_Filename,InsCertificat_filetype,InsCertificat_filedate,nextins_date,ins_remarks) values(@Veh_ID,@Veh_Type,@Insu_No,@Insurance_Date,@Amt_Insured,@Insu_Amount,@InsCerificat_Filename,@InsCertificat_filetype,@InsCertificat_filedate,@nextins_date,@ins_remarks) End Else begin update Vehicle_Insurance set Veh_ID=@Veh_ID,Veh_Type=@Veh_Type,Insu_No=@Insu_No,Insurance_Date=@Insurance_Date,Amt_Insured=@Amt_Insured,Insu_Amount=@Insu_Amount,InsCerificat_Filename=@InsCerificat_Filename,InsCertificat_filetype=@InsCertificat_filetype,InsCertificat_filedate=@InsCertificat_filedate,nextins_date=@nextins_date,ins_remarks=@ins_remarks where Veh_ID=@Veh_ID and Veh_Type=@Veh_Type and InsCerificat_Filename=@InsCerificat_Filename End End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            //getval3=string.Empty;
            //getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [FC_insert] = 'FC_insert'");
            //if (getval3 != "0")
            //{
            //    string drpstrproc = " drop proc FC_insert ";
            //    if (drpstrproc != "")
            //    {
            //        int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
            //    }
            //}
            //creatstrproc = " Create Procedure [dbo].[FC_insert] ( @Veh_ID varchar(30), @Veh_Type varchar(50), @FC_No varchar(50) = null, @FC_Date varchar(50) = null, @FC_Amount varchar(50)= null, @FCcertifi_filename varchar(100)= null, @FCcertificate_filedate varbinary(MAX), @FCcertifi_filetype varchar(100), @NextFcdate varchar(50)= null, @FC_remarks varchar(50) = null ) as begin if not exists(select 1 from Vehicle_Insurance where Veh_ID=@Veh_ID and Veh_Type=@Veh_Type and FC_No=@FC_No) begin insert into Vehicle_Insurance(Veh_ID,Veh_Type,FC_No,FC_Date,FC_Amount,FCcertifi_filename,FCcertificate_filedate,FCcertifi_filetype,NextFcdate,FC_remarks) values(@Veh_ID,@Veh_Type,@FC_No,@FC_Date,@FC_Amount,@FCcertifi_filename,@FCcertificate_filedate,@FCcertifi_filetype,@NextFcdate,@FC_remarks) End Elsebegin update Vehicle_Insurance set Veh_ID=@Veh_ID,Veh_Type=@Veh_Type,FC_No=@FC_No,FC_Date=@FC_Date,FC_Amount=FC_Amount,@FCcertifi_filename=@FCcertifi_filename,FCcertificate_filedate=@FCcertificate_filedate,FCcertifi_filetype=@FCcertifi_filetype,NextFcdate=@NextFcdate,FC_remarks=@FC_remarks where Veh_ID=@Veh_ID and Veh_Type=@Veh_Type and FC_No=@FC_No End End";
            //if (creatstrproc != "")
            //{
            //    int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            // }
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'FC_Update'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc FC_Update ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create  procedure [dbo].[FC_Update] ( @Veh_ID varchar(30), @Veh_Type varchar(50), @FC_No varchar(50) = null, @FC_Date varchar(50) = null, @FC_Amount varchar(50)= null, @FCcertifi_filename varchar(100)= null, @FCcertificate_filedate varbinary(MAX), @FCcertifi_filetype varchar(100), @NextFcdate varchar(50)= null, @FC_remarks varchar(50) = null ) as begin update Vehicle_Insurance set Veh_ID=@Veh_ID,Veh_Type=@Veh_Type,FC_No=@FC_No,FC_Date=@FC_Date,FC_Amount=FC_Amount,@FCcertifi_filename=@FCcertifi_filename,FCcertificate_filedate=@FCcertificate_filedate,FCcertifi_filetype=@FCcertifi_filetype,NextFcdate=@NextFcdate,FC_remarks=@FC_remarks where Veh_ID=@Veh_ID and Veh_Type=@Veh_Type and FC_No=@FC_No End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'vehicle_load'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc vehicle_load ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create Procedure [dbo].[vehicle_load] @Veh_Type nvarchar(100), @Veh_ID nvarchar(100) AS begin select Veh_Type,Veh_ID,Reg_No,convert(varchar(20),Reg_Date,105) as Reg_Date,RC_No,case type when 0 then 'New' else 'Old' end as type,Numberofowner,Purpose_Vehicle,VehicleCast Tax,TotalPur_Amount,Vehicle_Ins,Purchased_On,Place_Reg,Permit,Permit_No,convert(varchar(20),Permit_Date,105) as Permit_Date,Duration, TotalNo_Seat,Extra_No,Intial_Km,convert(varchar(20),Renew_Date,105) as Renew_Date from vehicle_master End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Vehicle_insert'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc Vehicle_insert ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create Procedure [dbo].[Vehicle_insert] ( @Veh_Type varchar(50)=null, @Veh_ID varchar(30), @Reg_No varchar(70)=null, @Reg_Date varchar(20)=null, @RC_No varchar(70)=null, @Type varchar(70)=null, @Numberofowner varchar(20)=null, @VehicleCast varchar(70)=null, @Tax varchar(20)=null, @TotalPur_Amount varchar(70)=null, @Vehicle_Ins varchar(50)=null, @Purpose_Vehicle varchar(50)=null, @Purchased_On varchar(20)=null, @Place_Reg varchar(20)=null, @Permit varchar(20)=null, @Permit_No varchar(20)=null, @Permit_Date varchar(20)=null, @Duration varchar(20)=null, @TotalNo_Seat varchar(20)=null, @Extra_No varchar(20)=null, @Intial_Km varchar(400)=null, @Renew_Date varchar(100) = null, @nofTravrs varchar(50)=null, @nofStaffs varchar(100)=null, @nofstudents varchar(100)= null, @Engine_No varchar(50)=null, @Manufactura_date varchar(50)=null, @Purchased_From varchar(100)=null, @Dealer_Details varchar(100) = null, @RTOAdd1 varchar(20)=null, @RTOAdd2 varchar(400)=null, @RTOCity varchar(100) = null, @RTOState varchar(50)=null, @RTOPin varchar(100)=null, @RTOContPer varchar(100) = null, @RTOContPhno varchar(50)=null, @Mileage varchar(50)=null, @Cheese_No varchar(50)=null,@gendertype nvarchar(100) = null , @College_code varchar(100)=null) as begin if not exists(select 1 from Vehicle_Master where Veh_ID=@Veh_ID) begin insert into Vehicle_Master(Veh_Type,Veh_ID,Reg_No,Reg_Date,RC_No,Type,Numberofowner,VehicleCast,Tax,TotalPur_Amount, Vehicle_Ins,Purpose_Vehicle, Purchased_On,Place_Reg,Permit,Permit_No ,Permit_Date,Duration,TotalNo_Seat,Extra_No, Intial_Km,Renew_Date, nofTravrs,nofStaffs,nofstudents,Engine_No,Manufactura_date,Purchased_From,Dealer_Details, RTOAdd1,RTOAdd2,RTOCity,RTOState,RTOPin,RTOContPer,RTOContPhno,Mileage,Cheese_No,GenderType,College_code)values(@Veh_Type,@Veh_ID,@Reg_No,@Reg_Date,@RC_No,@Type,@Numberofowner,@VehicleCast,@Tax,@TotalPur_Amount, @Vehicle_Ins,@Purpose_Vehicle, @Purchased_On,@Place_Reg,@Permit,@Permit_No ,@Permit_Date,@Duration,@TotalNo_Seat, @Extra_No,@Intial_Km,@Renew_Date, @nofTravrs,@nofStaffs,@nofstudents,@Engine_No,@Manufactura_date,@Purchased_From, @Dealer_Details,@RTOAdd1,@RTOAdd2,@RTOCity,@RTOState,@RTOPin,@RTOContPer,@RTOContPhno,@Mileage,@Cheese_No, @gendertype,@College_code) End Else begin update Vehicle_Master set Veh_Type=@Veh_Type,Veh_ID=@Veh_ID,Reg_No=@Reg_No,Reg_Date=@Reg_Date,RC_No=@RC_No, Type=@Type,Numberofowner=@Numberofowner,VehicleCast=@VehicleCast,Tax=@Tax,TotalPur_Amount=@TotalPur_Amount, Vehicle_Ins=@Vehicle_Ins,Purpose_Vehicle=@Purpose_Vehicle, Purchased_On=@Purchased_On,Place_Reg=@Place_Reg, Permit=@Permit,Permit_No=@Permit_No ,Permit_Date=@Permit_Date,Duration=@Duration,TotalNo_Seat=@TotalNo_Seat, Extra_No=@Extra_No,Intial_Km=@Intial_Km,Renew_Date=@Renew_Date, nofTravrs=@nofTravrs,nofStaffs=@nofStaffs, nofstudents=@nofstudents,Engine_No=@Engine_No,Manufactura_date=@Manufactura_date,Purchased_From=@Purchased_From, Dealer_Details=@Dealer_Details,RTOAdd1=@RTOAdd1,RTOAdd2=@RTOAdd2,RTOCity=@RTOCity,RTOState=@RTOState, RTOPin=@RTOPin,RTOContPer=@RTOContPer,RTOContPhno=@RTOContPhno ,Mileage=@Mileage,Cheese_No=@Cheese_No, GenderType=@gendertype ,college_code=@College_code where Veh_ID=@Veh_ID End End ";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Vehicle_update'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc Vehicle_update ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create Procedure [dbo].[Vehicle_update] ( @Veh_Type varchar(50)=null, @Veh_ID varchar(30), @Reg_No varchar(70)=null, @Reg_Date varchar(20)=null, @RC_No varchar(70)=null, @Type varchar(70)=null, @Numberofowner varchar(20)=null, @VehicleCast varchar(70)=null, @Tax varchar(20)=null, @TotalPur_Amount varchar(70)=null, @Vehicle_Ins varchar(50)=null, @Purpose_Vehicle varchar(50)=null, @Purchased_On varchar(20)=null, @Place_Reg varchar(20)=null, @Permit varchar(20)=null, @Permit_No varchar(20)=null, @Permit_Date varchar(20)=null, @Duration varchar(20)=null, @TotalNo_Seat varchar(20)=null, @Extra_No varchar(20)=null, @Intial_Km varchar(400)=null, @Renew_Date varchar(100) = null, @nofTravrs varchar(50)=null, @nofStaffs varchar(100)=null, @nofstudents varchar(100) = null, @Engine_No varchar(50)=null, @Manufactura_date varchar(50)=null, @Purchased_From varchar(100)=null, @Dealer_Details varchar(100) = null, @RTOAdd1 varchar(20)=null, @RTOAdd2 varchar(400)=null, @RTOCity varchar(100) = null, @RTOState varchar(50)=null, @RTOPin varchar(100)=null, @RTOContPer varchar(100) = null, @RTOContPhno varchar(50)=null, @Mileage varchar(50)=null, @Cheese_No varchar(50)=null, @College_code varchar(100)=null,@gendertype nvarchar(100) = null  ) as begin update Vehicle_Master set Veh_Type=@Veh_Type,Veh_ID=@Veh_ID,Reg_No=@Reg_No,Reg_Date=@Reg_Date,RC_No=@RC_No, Type=@Type,Numberofowner=@Numberofowner,VehicleCast=@VehicleCast,Tax=@Tax,TotalPur_Amount=@TotalPur_Amount, Vehicle_Ins=@Vehicle_Ins,Purpose_Vehicle=@Purpose_Vehicle, Purchased_On=@Purchased_On,Place_Reg=@Place_Reg, Permit=@Permit,Permit_No=@Permit_No ,Permit_Date=@Permit_Date,Duration=@Duration,TotalNo_Seat=@TotalNo_Seat, Extra_No=@Extra_No,Intial_Km=@Intial_Km,Renew_Date=@Renew_Date, nofTravrs=@nofTravrs,nofStaffs=@nofStaffs, nofstudents=@nofstudents,Engine_No=@Engine_No,Manufactura_date=@Manufactura_date,Purchased_From=@Purchased_From, Dealer_Details=@Dealer_Details,RTOAdd1=@RTOAdd1,RTOAdd2=@RTOAdd2,RTOCity=@RTOCity,RTOState=@RTOState, RTOPin=@RTOPin,RTOContPer=@RTOContPer,RTOContPhno=@RTOContPhno ,Mileage=@Mileage,Cheese_No=@Cheese_No, college_code=@College_code,GenderType=@gendertype where Veh_ID=@Veh_ID End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Vehicle_update'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc Vehicle_update ";
                if (drpstrproc != "")
                {
                    int feedback = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            creatstrproc = " Create Procedure [dbo].[Vehicle_update] ( @Veh_Type varchar(50)=null, @Veh_ID varchar(30), @Reg_No varchar(70)=null, @Reg_Date varchar(20)=null, @RC_No varchar(70)=null, @Type varchar(70)=null, @Numberofowner varchar(20)=null, @VehicleCast varchar(70)=null, @Tax varchar(20)=null, @TotalPur_Amount varchar(70)=null, @Vehicle_Ins varchar(50)=null, @Purpose_Vehicle varchar(50)=null, @Purchased_On varchar(20)=null, @Place_Reg varchar(20)=null, @Permit varchar(20)=null, @Permit_No varchar(20)=null, @Permit_Date varchar(20)=null, @Duration varchar(20)=null, @TotalNo_Seat varchar(20)=null, @Extra_No varchar(20)=null, @Intial_Km varchar(400)=null, @Renew_Date varchar(100) = null, @nofTravrs varchar(50)=null, @nofStaffs varchar(100)=null, @nofstudents varchar(100) = null, @Engine_No varchar(50)=null, @Manufactura_date varchar(50)=null, @Purchased_From varchar(100)=null, @Dealer_Details varchar(100) = null, @RTOAdd1 varchar(20)=null, @RTOAdd2 varchar(400)=null, @RTOCity varchar(100) = null, @RTOState varchar(50)=null, @RTOPin varchar(100)=null, @RTOContPer varchar(100) = null, @RTOContPhno varchar(50)=null, @Mileage varchar(50)=null, @Cheese_No varchar(50)=null, @College_code varchar(100)=null,@gendertype nvarchar(100) = null  ) as begin update Vehicle_Master set Veh_Type=@Veh_Type,Veh_ID=@Veh_ID,Reg_No=@Reg_No,Reg_Date=@Reg_Date,RC_No=@RC_No, Type=@Type,Numberofowner=@Numberofowner,VehicleCast=@VehicleCast,Tax=@Tax,TotalPur_Amount=@TotalPur_Amount, Vehicle_Ins=@Vehicle_Ins,Purpose_Vehicle=@Purpose_Vehicle, Purchased_On=@Purchased_On,Place_Reg=@Place_Reg, Permit=@Permit,Permit_No=@Permit_No ,Permit_Date=@Permit_Date,Duration=@Duration,TotalNo_Seat=@TotalNo_Seat, Extra_No=@Extra_No,Intial_Km=@Intial_Km,Renew_Date=@Renew_Date, nofTravrs=@nofTravrs,nofStaffs=@nofStaffs, nofstudents=@nofstudents,Engine_No=@Engine_No,Manufactura_date=@Manufactura_date,Purchased_From=@Purchased_From, Dealer_Details=@Dealer_Details,RTOAdd1=@RTOAdd1,RTOAdd2=@RTOAdd2,RTOCity=@RTOCity,RTOState=@RTOState, RTOPin=@RTOPin,RTOContPer=@RTOContPer,RTOContPhno=@RTOContPhno ,Mileage=@Mileage,Cheese_No=@Cheese_No, college_code=@College_code,GenderType=@gendertype where Veh_ID=@Veh_ID End";
            if (creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(creatstrproc, "Text");
            }
            //storproc transport
            string transstorproc = string.Empty;
            string gettrans = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_ins_upd_vechiclepriority'");
            if (gettrans != "0")
            {
                string drpstrproc = " drop proc sp_ins_upd_vechiclepriority ";
                if (drpstrproc != "")
                {
                    int sotre = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            transstorproc = " create procedure sp_ins_upd_vechiclepriority (@veh_id nvarchar(100),@stage_id int,@priority int ) as begin if exists(select * from tbl_vechile_priority where veh_id=@veh_id and stage_id=@stage_id) update tbl_vechile_priority set veh_id=@veh_id,stage_id=@stage_id,priority=@priority where veh_id=@veh_id and stage_id=@stage_id Else insert into tbl_vechile_priority values(@veh_id ,@stage_id ,@priority ) End ";
            if (transstorproc != "")
            {
                int storproc = d2.update_method_wo_parameter(transstorproc, "Text");
            }
            gettrans = string.Empty;
            gettrans = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'TRANSPORT_INDIVIDUAL_STUDSTAFF'");
            if (gettrans != "0")
            {
                string drpstrproc = " drop proc TRANSPORT_INDIVIDUAL_STUDSTAFF ";
                if (drpstrproc != "")
                {
                    int sotre = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            transstorproc = " CREATE PROCEDURE TRANSPORT_INDIVIDUAL_STUDSTAFF  ( @STUD_FILTER NVARCHAR(MAX), @STAFF_FILTER NVARCHAR(MAX) ) AS BEGIN DECLARE @sqlcommand1 NVARCHAR(MAX) DECLARE @sqlcommand2 NVARCHAR(MAX) set @sqlcommand1='select distinct rg.college_code,(select coll_acronymn from collinfo cc where cc.college_code=rg.college_code)as coll_acronymn, rg.degree_code,c.course_name,d.acronym,rg.vehid,rg.Bus_RouteID,s.stage_name, rg.batch_year , rg.roll_no, rg.reg_no, rg.stud_name from RouteMaster r,vehicle_master v,stage_master s,registration rg ,degree d ,department dp,course c,applyn a where rg.app_no=a.app_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name and rg.degree_code=d.degree_code and c.course_id=d.course_id and dp.dept_code=d.dept_code and rg.boarding is not null and rg.boarding=s.stage_id  '+@STUD_FILTER set @sqlcommand2='select distinct rg.college_code,(select coll_acronymn from collinfo cc where cc.college_code=rg.college_code)as coll_acronymn, (select desig_name from desig_master dm where dm.desig_code=st.desig_code) as desig_name, dp.dept_name, rg.staff_code , rg.staff_name, rg.vehid, rg.Bus_RouteID, s.stage_name, st.dept_code from RouteMaster r,vehicle_master v,stage_master s ,department dp,stafftrans st,staffmaster rg,staff_appl_master ap where ap.appl_no=rg.appl_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name and st.staff_code=rg.staff_code and st.latestrec=1 and resign = 0 And settled = 0 And dp.dept_code = st.dept_code And rg.boarding Is Not Null and rg.boarding=s.stage_id  '+@STAFF_FILTER EXEC (@sqlcommand1) EXEC (@sqlcommand2) End";
            if (transstorproc != "")
            {
                int storproc = d2.update_method_wo_parameter(transstorproc, "Text");
            }
            gettrans = string.Empty;
            gettrans = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'TRANSPORT_INDIVIDUAL_STUDSTAFF'");
            if (gettrans != "0")
            {
                transstorproc = " alter PROCEDURE TRANSPORT_INDIVIDUAL_STUDSTAFF  ( @STUD_FILTER NVARCHAR(MAX), @STAFF_FILTER NVARCHAR(MAX) ) AS BEGIN DECLARE @sqlcommand1 NVARCHAR(MAX) DECLARE @sqlcommand2 NVARCHAR(MAX) set @sqlcommand1='select distinct rg.college_code,(select coll_acronymn from collinfo cc where cc.college_code=rg.college_code)as coll_acronymn, rg.degree_code,c.course_name,d.acronym,rg.vehid,rg.Bus_RouteID,s.stage_name, rg.batch_year , rg.roll_no, rg.reg_no, rg.stud_name,rg.Roll_admit from RouteMaster r,vehicle_master v,stage_master s,registration rg ,degree d ,department dp,course c,applyn a where rg.app_no=a.app_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name and rg.degree_code=d.degree_code and c.course_id=d.course_id and dp.dept_code=d.dept_code and rg.boarding is not null and rg.boarding=s.stage_id  '+@STUD_FILTER set @sqlcommand2='select distinct rg.college_code,(select coll_acronymn from collinfo cc where cc.college_code=rg.college_code)as coll_acronymn, (select desig_name from desig_master dm where dm.desig_code=st.desig_code) as desig_name, dp.dept_name, rg.staff_code , rg.staff_name, rg.vehid, rg.Bus_RouteID, s.stage_name, st.dept_code  from RouteMaster r,vehicle_master v,stage_master s ,department dp,stafftrans st,staffmaster rg,staff_appl_master ap where ap.appl_no=rg.appl_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name  and st.staff_code=rg.staff_code and st.latestrec=1 and resign = 0 And settled = 0 And dp.dept_code = st.dept_code And rg.boarding Is Not Null and rg.boarding=s.stage_id  '+@STAFF_FILTER EXEC (@sqlcommand1) EXEC (@sqlcommand2) End";
                if (transstorproc != "")
                {
                    int storproc = d2.update_method_wo_parameter(transstorproc, "Text");
                }
            }
            gettrans = string.Empty;
            gettrans = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'TRANSPORT_STRENGTH_REPORT'");
            if (gettrans != "0")
            {
                string drpstrproc = " drop proc TRANSPORT_STRENGTH_REPORT ";
                if (drpstrproc != "")
                {
                    int sotre = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            transstorproc = " CREATE PROCEDURE TRANSPORT_STRENGTH_REPORT  ( @COLLEGECODE NVARCHAR(MAX), @DISTRICT NVARCHAR(MAX), @STAGE NVARCHAR(MAX), @VEHICLE NVARCHAR(MAX), @ROUTE NVARCHAR(MAX), @Stud_filter NVARCHAR(MAX), @Staff_filter NVARCHAR(MAX) ) AS BEGIN DECLARE @sqlcommand1 NVARCHAR(MAX) DECLARE @sqlcommand2 NVARCHAR(MAX) DECLARE @sqlcommand3 NVARCHAR(MAX) DECLARE @sqlcommand4 NVARCHAR(MAX) DECLARE @sqlcommand5 NVARCHAR(MAX) DECLARE @sqlcommand6 NVARCHAR(MAX) DECLARE @sqlcommand7 NVARCHAR(MAX) set @sqlcommand1='select distinct v.veh_id,noftravrs from RouteMaster r,vehicle_master v,stage_master s Where r.veh_id = v.veh_id And s.stage_id = r.stage_name '+ @DISTRICT+@STAGE+@VEHICLE+@ROUTE set @sqlcommand2='select distinct r.route_id from RouteMaster r,vehicle_master v,stage_master s where r.veh_id=v.veh_id and s.stage_id=r.stage_name '+ @DISTRICT+@STAGE+@VEHICLE+@ROUTE set @sqlcommand3='select distinct r.stage_name from RouteMaster r,vehicle_master v,stage_master s where r.veh_id=v.veh_id and s.stage_id=r.stage_name '+ @DISTRICT+@STAGE+@VEHICLE+@ROUTE set @sqlcommand4='select distinct rg.roll_no,rg.stud_name,rg.vehid,rg.Bus_RouteID,s.stage_name,rg.batch_year, c.course_name,d.acronym,rg.degree_code from RouteMaster r,vehicle_master v,stage_master s,registration rg ,degree d ,department dp,course c,applyn a where rg.app_no=a.app_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name and rg.degree_code=d.degree_code and c.course_id=d.course_id and dp.dept_code=d.dept_code and rg.boarding is not null and rg.boarding=s.stage_id  and a.sex=0 ' +@COLLEGECODE+ @DISTRICT+@STAGE+@VEHICLE+@ROUTE+@Stud_filter set @sqlcommand5='select distinct rg.roll_no,rg.stud_name,rg.vehid,rg.Bus_RouteID,s.stage_name,rg.batch_year, c.course_name,d.acronym,rg.degree_code from RouteMaster r,vehicle_master v,stage_master s,registration rg ,degree d ,department dp,course c,applyn a where rg.app_no=a.app_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name and rg.degree_code=d.degree_code and c.course_id=d.course_id and dp.dept_code=d.dept_code and rg.boarding is not null and rg.boarding=s.stage_id  and a.sex=1 ' +@COLLEGECODE+ @DISTRICT+@STAGE+@VEHICLE+@ROUTE+@Stud_filter set @sqlcommand6='select distinct rg.staff_code,rg.staff_name,rg.vehid,rg.Bus_RouteID,s.stage_name,st.dept_code from RouteMaster r,vehicle_master v,stage_master s ,department dp,stafftrans st,staffmaster rg,staff_appl_master ap where ap.appl_no=rg.appl_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name and st.staff_code=rg.staff_code and st.latestrec=1 and resign = 0 And settled = 0 And dp.dept_code = st.dept_code And rg.boarding Is Not Null and rg.boarding=s.stage_id and ap.sex=''Male'' ' +@COLLEGECODE+ @DISTRICT+@STAGE+@VEHICLE+@ROUTE+@Staff_filter set @sqlcommand7='select distinct rg.staff_code,rg.staff_name,rg.vehid,rg.Bus_RouteID,s.stage_name,st.dept_code from RouteMaster r,vehicle_master v,stage_master s ,department dp,stafftrans st,staffmaster rg,staff_appl_master ap where ap.appl_no=rg.appl_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name and st.staff_code=rg.staff_code and st.latestrec=1 and resign = 0 And settled = 0 And dp.dept_code = st.dept_code And rg.boarding Is Not Null and rg.boarding=s.stage_id and ap.sex=''Female'' ' +@COLLEGECODE+ @DISTRICT+@STAGE+@VEHICLE+@ROUTE+@Staff_filter EXEC (@sqlcommand1) EXEC (@sqlcommand2) EXEC (@sqlcommand3) EXEC (@sqlcommand4) EXEC (@sqlcommand5) EXEC (@sqlcommand6) EXEC (@sqlcommand7) End ";
            if (transstorproc != "")
            {
                int storproc = d2.update_method_wo_parameter(transstorproc, "Text");
            }
            gettrans = string.Empty;
            gettrans = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'TRANSPORT_STRENGTH_REPORT_STAGE'");
            if (gettrans != "0")
            {
                string drpstrproc = " drop proc TRANSPORT_STRENGTH_REPORT_STAGE ";
                if (drpstrproc != "")
                {
                    int sotre = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            transstorproc = " CREATE PROCEDURE TRANSPORT_STRENGTH_REPORT_STAGE  ( @COLLEGECODE NVARCHAR(MAX), @DISTRICT NVARCHAR(MAX), @STAGE NVARCHAR(MAX), @VEHICLE NVARCHAR(MAX), @ROUTE NVARCHAR(MAX), @TYPE  NVARCHAR(MAX) ) AS BEGIN DECLARE @sqlcommand1 NVARCHAR(MAX) DECLARE @sqlcommand2 NVARCHAR(MAX) DECLARE @Filter NVARCHAR(MAX) if(@TYPE='Stage') set @Filter='distinct s.stage_name,r.route_id,r.veh_id,r.sess,r.arr_time,r.dep_time,r.wait_mins,s.stage_id,noftravrs' else if(@TYPE='Route') set @Filter='distinct r.route_id,v.veh_id,s.stage_name,r.sess,r.arr_time,r.dep_time,r.wait_mins,s.stage_id,noftravrs' else if(@TYPE='Vehicle') set @Filter='distinct v.veh_id,r.route_id,s.stage_name,r.sess,r.arr_time,r.dep_time,r.wait_mins,s.stage_id,noftravrs' set @sqlcommand1='set select '+ @Filter +' from RouteMaster r,vehicle_master v,stage_master s where r.veh_id=v.veh_id and s.stage_id=r.stage_name ' +@DISTRICT+@STAGE+@VEHICLE+@ROUTE +' order by s.stage_name asc, r.sess desc' EXEC (@sqlcommand1) End";
            if (transstorproc != "")
            {
                int storproc = d2.update_method_wo_parameter(transstorproc, "Text");
            }
            gettrans = string.Empty;
            gettrans = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'TRANSPORT_STRENGTH_REPORT_STAGE_2'");
            if (gettrans != "0")
            {
                string drpstrproc = " drop proc TRANSPORT_STRENGTH_REPORT_STAGE_2 ";
                if (drpstrproc != "")
                {
                    int sotre = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            transstorproc = " CREATE PROCEDURE TRANSPORT_STRENGTH_REPORT_STAGE_2  ( @COLLEGECODE NVARCHAR(MAX), @DISTRICT NVARCHAR(MAX), @STAGE NVARCHAR(MAX), @VEHICLE NVARCHAR(MAX), @ROUTE NVARCHAR(MAX), @Stud_maledeg NVARCHAR(MAX), @Stud_femaledeg NVARCHAR(MAX), @Stud_malebatch NVARCHAR(MAX), @Stud_femalebatch NVARCHAR(MAX), @Staff_deptmale NVARCHAR(MAX), @Staff_deptfemale NVARCHAR(MAX) ) AS BEGIN DECLARE @sqlcommand1 NVARCHAR(MAX) DECLARE @sqlcommand2 NVARCHAR(MAX) DECLARE @sqlcommand3 NVARCHAR(MAX) DECLARE @sqlcommand4 NVARCHAR(MAX) set @sqlcommand1='select distinct rg.roll_no,rg.stud_name,rg.vehid,rg.Bus_RouteID,s.stage_name,rg.batch_year, c.course_name,d.acronym,rg.degree_code from RouteMaster r,vehicle_master v,stage_master s,registration rg ,degree d ,department dp,course c,applyn a where rg.app_no=a.app_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name and rg.degree_code=d.degree_code and c.course_id=d.course_id and dp.dept_code=d.dept_code and rg.boarding is not null and rg.boarding=s.stage_id  and a.sex=0 ' +@COLLEGECODE+ @DISTRICT+@STAGE+@VEHICLE+@ROUTE+@Stud_maledeg+@Stud_malebatch set @sqlcommand2='select distinct rg.roll_no,rg.stud_name,rg.vehid,rg.Bus_RouteID,s.stage_name,rg.batch_year, c.course_name,d.acronym,rg.degree_code from RouteMaster r,vehicle_master v,stage_master s,registration rg ,degree d ,department dp,course c,applyn a where rg.app_no=a.app_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name and rg.degree_code=d.degree_code and c.course_id=d.course_id and dp.dept_code=d.dept_code and rg.boarding is not null and rg.boarding=s.stage_id  and a.sex=1 ' +@COLLEGECODE+ @DISTRICT+@STAGE+@VEHICLE+@ROUTE+@Stud_femaledeg+@Stud_femalebatch set @sqlcommand3='select distinct rg.staff_code,rg.staff_name,rg.vehid,rg.Bus_RouteID,s.stage_name,st.dept_code from RouteMaster r,vehicle_master v,stage_master s ,department dp,stafftrans st,staffmaster rg,staff_appl_master ap where ap.appl_no=rg.appl_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name and st.staff_code=rg.staff_code and st.latestrec=1 and resign = 0 And settled = 0 And dp.dept_code = st.dept_code And rg.boarding Is Not Null and rg.boarding=s.stage_id and ap.sex=''Male'' ' +@COLLEGECODE+ @DISTRICT+@STAGE+@VEHICLE+@ROUTE+@Staff_deptmale set @sqlcommand4='select distinct rg.staff_code,rg.staff_name,rg.vehid,rg.Bus_RouteID,s.stage_name,st.dept_code from RouteMaster r,vehicle_master v,stage_master s ,department dp,stafftrans st,staffmaster rg,staff_appl_master ap where ap.appl_no=rg.appl_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name and st.staff_code=rg.staff_code and st.latestrec=1 and resign = 0 And settled = 0 And dp.dept_code = st.dept_code And rg.boarding Is Not Null and rg.boarding=s.stage_id and ap.sex=''Female'' ' +@COLLEGECODE+ @DISTRICT+@STAGE+@VEHICLE+@ROUTE+@Staff_deptfemale EXEC (@sqlcommand1) EXEC (@sqlcommand2) EXEC (@sqlcommand3) EXEC (@sqlcommand4) End ";
            if (transstorproc != "")
            {
                int storproc = d2.update_method_wo_parameter(transstorproc, "Text");
            }
            gettrans = string.Empty;
            gettrans = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'TRANSPORT_STRENGTH_REPORT_STUDENT'");
            if (gettrans != "0")
            {
                string drpstrproc = " drop proc TRANSPORT_STRENGTH_REPORT_STUDENT ";
                if (drpstrproc != "")
                {
                    int sotre = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            transstorproc = " CREATE PROCEDURE TRANSPORT_STRENGTH_REPORT_STUDENT  ( @COLLEGECODE NVARCHAR(MAX), @DISTRICT NVARCHAR(MAX), @STAGE NVARCHAR(MAX), @VEHICLE NVARCHAR(MAX), @ROUTE NVARCHAR(MAX), @STUD_FILTER NVARCHAR(MAX), @STAFF_FILTER NVARCHAR(MAX) ) AS BEGIN DECLARE @sqlcommand1 NVARCHAR(MAX) DECLARE @sqlcommand2 NVARCHAR(MAX) set @sqlcommand1='select distinct rg.college_code,(select coll_acronymn from collinfo cc where cc.college_code=rg.college_code)as coll_acronymn, rg.degree_code,c.course_name,d.acronym,rg.vehid,rg.Bus_RouteID,s.stage_name, rg.batch_year , rg.roll_no, rg.reg_no, rg.stud_name from RouteMaster r,vehicle_master v,stage_master s,registration rg ,degree d ,department dp,course c,applyn a where rg.app_no=a.app_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name and rg.degree_code=d.degree_code and c.course_id=d.course_id and dp.dept_code=d.dept_code and rg.boarding is not null and rg.boarding=s.stage_id  ' +@COLLEGECODE+ @DISTRICT+@STAGE+@VEHICLE+@ROUTE+@STUD_FILTER set @sqlcommand2='select distinct rg.college_code,(select coll_acronymn from collinfo cc where cc.college_code=rg.college_code)as coll_acronymn, (select desig_name from desig_master dm where dm.desig_code=st.desig_code) as desig_name, dp.dept_name, rg.staff_code , rg.staff_name, rg.vehid, rg.Bus_RouteID, s.stage_name, st.dept_code from RouteMaster r,vehicle_master v,stage_master s  department dp,stafftrans st,staffmaster rg,staff_appl_master ap where ap.appl_no=rg.appl_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name and st.staff_code=rg.staff_code and st.latestrec=1 and resign = 0 And settled = 0 And dp.dept_code = st.dept_code And rg.boarding Is Not Null and rg.boarding=s.stage_id  ' +@COLLEGECODE+ @DISTRICT+@STAGE+@VEHICLE+@ROUTE+@STAFF_FILTER EXEC (@sqlcommand1) EXEC (@sqlcommand2) End";
            if (transstorproc != "")
            {
                int storproc = d2.update_method_wo_parameter(transstorproc, "Text");
            }
            gettrans = string.Empty;
            gettrans = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'TRANSPORT_STRENGTH_REPORT_STUDENT'");
            if (gettrans != "0")
            {
                transstorproc = " alter PROCEDURE TRANSPORT_STRENGTH_REPORT_STUDENT  ( @COLLEGECODE NVARCHAR(MAX), @DISTRICT NVARCHAR(MAX), @STAGE NVARCHAR(MAX), @VEHICLE NVARCHAR(MAX), @ROUTE NVARCHAR(MAX), @STUD_FILTER NVARCHAR(MAX), @STAFF_FILTER NVARCHAR(MAX) ) AS BEGIN DECLARE @sqlcommand1 NVARCHAR(MAX) DECLARE @sqlcommand2 NVARCHAR(MAX) set @sqlcommand1='select distinct rg.college_code,(select coll_acronymn from collinfo cc where cc.college_code=rg.college_code)as coll_acronymn, rg.degree_code,c.course_name,d.acronym,rg.vehid,rg.Bus_RouteID,s.stage_name, rg.batch_year , rg.roll_no, rg.reg_no, rg.stud_name,rg.roll_admit from RouteMaster r,vehicle_master v,stage_master s,registration rg ,degree d ,department dp,course c,applyn a where rg.app_no=a.app_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name and rg.degree_code=d.degree_code and c.course_id=d.course_id and dp.dept_code=d.dept_code and rg.boarding is not null and rg.boarding=s.stage_id  ' +@COLLEGECODE+ @DISTRICT+@STAGE+@VEHICLE+@ROUTE+@STUD_FILTER set @sqlcommand2='select distinct rg.college_code,(select coll_acronymn from collinfo cc where cc.college_code=rg.college_code)as coll_acronymn, (select desig_name from desig_master dm where dm.desig_code=st.desig_code) as desig_name, dp.dept_name, rg.staff_code , rg.staff_name, rg.vehid, rg.Bus_RouteID, s.stage_name, st.dept_code  from RouteMaster r,vehicle_master v,stage_master s ,department dp,stafftrans st,staffmaster rg,staff_appl_master ap where ap.appl_no=rg.appl_no and r.veh_id=v.veh_id and s.stage_id=r.stage_name and rg.vehid=r.veh_id and rg.Bus_RouteID=r.route_id and rg.boarding=r.stage_name  and st.staff_code=rg.staff_code and st.latestrec=1 and resign = 0 And settled = 0 And dp.dept_code = st.dept_code And rg.boarding Is Not Null and rg.boarding=s.stage_id  ' +@COLLEGECODE+ @DISTRICT+@STAGE+@VEHICLE+@ROUTE+@STAFF_FILTER EXEC (@sqlcommand1) EXEC (@sqlcommand2)  End";
                if (transstorproc != "")
                {
                    int storproc = d2.update_method_wo_parameter(transstorproc, "Text");
                }
            }
            //store procedur library1-3
            string lib_creatstrproc = string.Empty;
            getval1 = string.Empty;
            getval1 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_borrow'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc sp_borrow ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            lib_creatstrproc = " create proc sp_borrow @lib_code nvarchar(30), @return_flag smallint as SELECT acc_no,title,author,token_no,roll_no,is_staff,borrow_date,due_date,return_flag,renewstatus from borrow where lib_code like @lib_code and return_flag=@return_flag ";
            if (lib_creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(lib_creatstrproc, "Text");
            }
            lib_creatstrproc = string.Empty;
            string getval2 = string.Empty;
            getval2 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'UpdateAccno'");
            if (getval1 != "0")
            {
                string drpstrproc = " drop proc UpdateAccno ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            lib_creatstrproc = " Create procedure UpdateAccno @OldAccno as nvarchar(100) , @NewAccno as nvarchar(100),@libcode as numeric as begin update borrow set acc_no=@NewAccno where acc_no=@OldAccno and return_type='BOK' and lib_code=@libcode update priority_studstaff set access_number=@NewAccno where access_number=@OldAccno  and lib_code=@libcode update fine_details set acc_no=@NewAccno where acc_no=@OldAccno and lib_code=@libcode update binding set access_code=@NewAccno where access_code=@OldAccno and lib_code=@libcode update bookdetails set acc_no=@NewAccno where acc_no=@OldAccno and lib_code=@libcode update rack_allocation set acc_no=@NewAccno where acc_no=@OldAccno and lib_code=@libcode and book_type='BOK' End";
            if (lib_creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(lib_creatstrproc, "Text");
            }
            lib_creatstrproc = string.Empty;
            getval3 = string.Empty;
            getval3 = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'gettitle'");
            if (getval3 != "0")
            {
                string drpstrproc = " drop proc gettitle ";
                if (drpstrproc != "")
                {
                    int drpyer = d2.update_method_wo_parameter(drpstrproc, "Text");
                }
            }
            lib_creatstrproc = " create procedure gettitle (@libcode as numeric) as select  distinct acc_no,Title,Author from bookdetails where lib_code=@libcode";
            if (lib_creatstrproc != "")
            {
                int storproc = d2.update_method_wo_parameter(lib_creatstrproc, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public static Control GetPostBackControl(Page page)
    {
        Control control = null;
        string ctrlname = page.Request.Params.Get("__EVENTTARGET");
        if (ctrlname != null && ctrlname != string.Empty)
        {
            control = page.FindControl(ctrlname);
        }
        else
        {
            foreach (string ctl in page.Request.Form)
            {
                Control c = page.FindControl(ctl);
                if (c is System.Web.UI.WebControls.Button)
                {
                    control = c;
                    break;
                }
            }
        }
        return control;
    }

    public int rowIndxClicked()
    {
        int rownumber = -1;
        try
        {
            Control ctrlid = GetPostBackControl(this.Page);
            string rno = Convert.ToString(ctrlid.UniqueID).Split('$')[3].Replace("ctl", "");
            int.TryParse(rno, out rownumber);
            rownumber -= 2;
        }
        catch { rownumber = -1; }
        return rownumber;
    }

    public void hashvalue()
    {
        try
        {
            string forgin = string.Empty;
            string ledgermaster = string.Empty;
            ledgermaster = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='IPatchStatus'");
            if (ledgermaster == "0")
            {
                forgin = " CREATE TABLE IPatchStatus (ModuleName nvarchar(20),UpdatedDesc nvarchar(300),UpdatedDate Datetime,ClientUpdatedDate datetime)";
            }
            if (forgin != "")
            {
                int create_forginkeytbl = d2.update_method_wo_parameter(forgin, "Text");
            }
            Dictionary<string, string> hatmaxsubmark = new Dictionary<string, string>();
            hatmaxsubmark.Add("Academic", "06/28/2017");
            hatmaxsubmark.Add("Finance", "03/04/2017");
            hatmaxsubmark.Add("Inventory", "03/04/2017");
            hatmaxsubmark.Add("Hostel", "09/13/2017");
            hatmaxsubmark.Add("FeedBack", "03/18/2017");
            hatmaxsubmark.Add("Request", "07/12/2017");
            hatmaxsubmark.Add("Library", "03/04/2017");
            hatmaxsubmark.Add("SMS", "03/04/2017");
            hatmaxsubmark.Add("COE", "03/13/2017");
            hatmaxsubmark.Add("Question", "03/04/2017");
            hatmaxsubmark.Add("HR", "03/17/2017");
            hatmaxsubmark.Add("Transport", "06/26/2017");
            hatmaxsubmark.Add("Security", "03/04/2017");
            foreach (KeyValuePair<string, string> kvp in hatmaxsubmark)
            {
                string modulename = kvp.Key.ToString();
                string moduleUpdateDate = kvp.Value.ToString();
                string qry = "if exists (select * from IPatchStatus where ModuleName='" + modulename + "') update IPatchStatus set UpdatedDate='" + moduleUpdateDate + "' where ModuleName='" + modulename + "' else insert into IPatchStatus (ModuleName,UpdatedDate) values('" + modulename + "','" + moduleUpdateDate + "') ";
                int res = d2.update_method_wo_parameter(qry, "Text");
            }
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
        }
    }

    public void COEPROCEES()
    {
        try
        {
            string strcreateoralter = string.Empty;
            int insalter = 0;
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='examstaffmaster'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "  CREATE TABLE examstaffmaster(staff_code nvarchar(200),isexternal bit,setting bit,Valuation bit,Inivigition bit,sectio nvarchar(100),yearofexp nvarchar(100),Set_subject_no nvarchar(100),Val_subject_no nvarchar(100),scrab int,Type varchar(100))";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'external_staff' AND COLUMN_NAME = 'title'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table external_staff add title nvarchar(50)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'external_staff' AND COLUMN_NAME = 'dept_code'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table external_staff add dept_code nvarchar(100)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'external_staff' AND COLUMN_NAME = 'dept_name'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table external_staff add dept_name nvarchar(100)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'external_staff' AND COLUMN_NAME = 'design_code'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table external_staff add design_code nvarchar(100)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'external_staff' AND COLUMN_NAME = 'email'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table external_staff add email nvarchar(100)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'external_staff' AND COLUMN_NAME = 'per_address'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table external_staff add per_address nvarchar(500)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'external_staff' AND COLUMN_NAME = 'sex'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table external_staff add sex nvarchar(100)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'external_staff' AND COLUMN_NAME = 'experience_info'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table external_staff add experience_info nvarchar(2400)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'external_staff' AND COLUMN_NAME = 'per_phone'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table external_staff add per_phone nvarchar(100)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'external_staff' AND COLUMN_NAME = 'per_mobileno'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table external_staff add per_mobileno varchar(50)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'external_staff' AND COLUMN_NAME = 'per_pincode'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table external_staff add per_pincode varchar(10)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'external_staff' AND COLUMN_NAME = 'pcity_code'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table external_staff add pcity_code nvarchar(100)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'external_staff' AND COLUMN_NAME = 'totalexp'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table external_staff add totalexp nvarchar(100)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'external_staff' AND COLUMN_NAME = 'experience_info_carrer'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table external_staff add experience_info_carrer nvarchar(300)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'examstaffmaster' AND COLUMN_NAME = 'Set_subject_name'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table examstaffmaster add Set_subject_name nvarchar(100) ";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'examstaffmaster' AND COLUMN_NAME = 'Val_subject_name'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table examstaffmaster add Val_subject_name nvarchar(100)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'examstaffmaster' AND COLUMN_NAME = 'Set_subject_no'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table examstaffmaster add Set_subject_no  nvarchar(500)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'examstaffmaster' AND COLUMN_NAME = 'type'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table examstaffmaster add  type varchar(100)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'examstaffmaster' AND COLUMN_NAME = 'Val_subject_no'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table examstaffmaster add Val_subject_no  nvarchar(500)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'examstaffmaster' AND COLUMN_NAME = 'scrab'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table examstaffmaster add scrab bit";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='StudExamElig'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "CREATE TABLE StudExamElig(Exam_Code numeric(18, 0),Roll_No nvarchar(30))";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_equal_paper_Matching'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "CREATE TABLE dbo.tbl_equal_paper_Matching(Exam_Year int,Exam_month int,Equal_Subject_Code nvarchar(50),Com_Subject_Code nvarchar(50))";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_exam_time_table_batch'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "create table tbl_exam_time_table_batch(Edu_Level nvarchar(50),batch_year int)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='examholiday'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "CREATE TABLE examholiday(exammonth int,examyear int,holiday_date varchar(200),startdate varchar(200),enddate varchar(200),	college_code int)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='examtimetablesetting'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "CREATE TABLE examtimetablesetting(mode varchar(50),day varchar(100),AN varchar(200),FN varchar(200),collegecode int,type varchar(200))";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exampriority'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "create table exampriority(mode varchar(200),year varchar(200),education nvarchar(200),subject_type varchar(200),priority int,college_code int) ";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='hallsupervision'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "create table hallsupervision(expfrom int,expto int,max_superivison int,session nvarchar(100),month int,year int)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_application' AND COLUMN_NAME = 'is_confirm'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table exam_application add is_confirm int";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='class_master'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "CREATE TABLE class_master(block nvarchar(50),typename nvarchar(50),rno nvarchar(50),no_rows int,no_cols int,no_normal int,no_exam int,ItemDetails varchar(100) ,InterComNos varchar(100),ItemCode varchar(100),roomcode numeric(18, 0) IDENTITY(1,1) ,DeptStrengthInfo varchar(100),invuser_code nvarchar(50) ,ClsRoom_name nvarchar(50) ,coll_code numeric(18, 0),floorid varchar(30)) ";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'class_master' AND COLUMN_NAME = 'priority'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table class_master add priority int";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'class_master' AND COLUMN_NAME = 'Mode'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table class_master add Mode varchar(100)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_room_seats'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "create table tbl_room_seats (mode varchar(200),Building_Name varchar(200),Floor_Name varchar(200),Hall_No varchar(200),no_of_columns int,no_of_rows int,default_view varchar(200),arranged_view varchar(200),actual_seats int,allocted_seats int,coll_code int,is_single int,exm_month int,exm_year int)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exam_seating'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "CREATE TABLE exam_seating(roomno nvarchar(50),regno nvarchar(50),subject_no nvarchar(50),edate datetime,ses_sion nvarchar(50),block nvarchar(100),Qset varchar(10),seat_no numeric(18, 0),arrangement bit,degree_code int,sections varchar(50),ArrangementType int,Floorid varchar(30),bundle_no nvarchar(15))";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_seating' AND COLUMN_NAME = 'ArrangementType'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table exam_seating add ArrangementType int,Floorid varchar(30)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_seating' AND COLUMN_NAME = 'bundle_no'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table exam_seating add bundle_no nvarchar(15)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_not_registred'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "create table tbl_not_registred(roll_no nvarchar(25),subject_no numeric,exam_month smallint,exam_year  smallint)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='studentsemestersubjectdebar'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "create table studentsemestersubjectdebar(roll_no nvarchar(25),semester smallint,subject_no numeric,Status bit)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_exam_valuatiuon_staff'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "create table tbl_exam_valuatiuon_staff (year smallint,month smallint,isexternal bit,staff_code nvarchar(50),subject_code nvarchar(500),edate datetime,session nvarchar(50))";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='examinvigilatormaster'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "CREATE TABLE examinvigilatormaster (roomno nvarchar(50),edate datetime,ses_sion nvarchar(50),invigilator_name nvarchar(50),invigilator_code nvarchar(50),month nvarchar(50),year nvarchar(50))";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='SubWiseGrdeMaster'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "CREATE TABLE SubWiseGrdeMaster(Code bigint IDENTITY(1,1) NOT null,SubjectCode nvarchar(30),Subject_Type nvarchar(100),IsTheory bit,	Grade nvarchar(5),Frange decimal(12, 2),TRange decimal(12, 2),College_Code int,Exam_Month int,Exam_Year int,SubjectName nvarchar(100),credit_points float(8))";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'SubWiseGrdeMaster ' AND COLUMN_NAME = 'credit_points '");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table SubWiseGrdeMaster add credit_points float(8)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'dummynumber' AND COLUMN_NAME = 'sheet_no'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table dummynumber add sheet_no nvarchar(15)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_equal_subject_Grade_System'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "Create table tbl_equal_subject_Grade_System (Exam_year int,Exam_month int,Subject_no int,Common_Subject_no int)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_foil_card'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "create table tbl_foil_card (type nvarchar(15),section_name nvarchar(15),no_col int,value nvarchar(100),college_code int)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'coe_classification' AND COLUMN_NAME = 'grade'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table coe_classification add  grade nvarchar(10)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_import_status'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "create table tbl_import_status(module_name nvarchar(50),college_code int,batch_year int,degree_code int,semester nvarchar(20),import_date datetime,import_time datetime,is_complete bit,section nvarchar(20),addtional_details nvarchar(150))";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'CollegeType'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table collinfo add CollegeType nvarchar(Max)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'is_fee_due'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table registration add is_fee_due int";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'is_other_due'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table registration add is_other_due int";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='exam_application'");
            if (strcreateoralter.Trim() != "0")
            {
                strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_application' AND COLUMN_NAME = 'extra_fee2'");
                if (strcreateoralter == "0")
                {
                    strcreateoralter = " alter table exam_application add extra_fee2 money";
                    insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
                }
            }
            strcreateoralter = string.Empty;
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Eligibility_list'");
            if (strcreateoralter.Trim() != "0")
            {
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_DEFAULT FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Eligibility_list' AND COLUMN_NAME = 'isCondonationFee' AND COLUMN_DEFAULT IS NOT NULL");
                if (strcreateoralter.Trim() == "0")
                {
                    strcreateoralter = " alter table Eligibility_list add isCondonationFee bit constraint DF_Eligibility_list_isCondonationFee default 0";
                    insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
                }
            }
            string procmoderation = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ProcmoderationSelectData'");
            if (procmoderation.Trim() != "0")
            {
                string ProcmoderationSelectDataalter = "  alter  procedure ProcmoderationSelectData( @ExamMonth varchar(30), @ExamYear varchar(30), @examcode varchar(20),@degreecode int, @courseid int, @semester int, @flag int) AS begin declare @radiocheck int set @radiocheck=@flag if @radiocheck=1 begin  select distinct course_name,dept_name,dept_acronym,s.subject_name,s.subject_code,m.subject_no,m.exam_code,r.current_semester from mark_entry m,exam_details e,registration r,degree d,course c,department dp,subject s, syllabus_master sy ,sub_sem as feesub where feesub.subtype_no=s.subtype_no and feesub.Lab=0 and d.course_id=c.course_id and dp.dept_code=d.dept_code and r.degree_code=d.degree_code and e.exam_code=m.exam_code and c.course_id=@courseid and  d.degree_code=@degreecode and e.current_semester=@semester and e.degree_code=r.degree_code and e.batch_year=r.batch_year  and m.exam_code=@examcode and feesub.promote_count=1 and e.exam_month=@ExamMonth and e.exam_year=@ExamYear  and s.subject_no=m.subject_no and r.roll_no=m.roll_no and r.degree_code=sy.degree_code and r.batch_year=sy.batch_year  and sy.syll_code=s.syll_code and m.attempts<=1 order by course_name,dept_name,s.subject_code  End   else   IF @radiocheck=0   begin   select distinct course_name,dept_name,dept_acronym,m.exam_code, r.current_semester from mark_entry m,exam_details e,registration r,degree d,course c,department dp, syllabus_master sy,sub_sem as feesub where d.course_id=c.course_id and dp.dept_code=d.dept_code and r.degree_code=d.degree_code and c.course_id=@courseid and  d.degree_code=@degreecode and e.current_semester=@semester and e.exam_code=m.exam_code and c.course_id=@courseid and  d.degree_code=@degreecode and e.current_semester=@semester and e.degree_code=r.degree_code and   e.batch_year=r.batch_year and m.exam_code=@examcode and feesub.promote_count=1 and e.exam_month=@ExamMonth   and e.exam_year=@ExamYear  and r.roll_no=m.roll_no and r.degree_code=sy.degree_code and r.batch_year=sy.batch_year  and m.attempts<=1 order by course_name,dept_name End End";
                if (ProcmoderationSelectDataalter != "")
                {
                    int storproc = d2.update_method_wo_parameter(ProcmoderationSelectDataalter, "Text");
                }
            }
            strcreateoralter = string.Empty;
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='PeriodAttndScheduleNew'");
            if (strcreateoralter.Trim() == "0")
            {
                strcreateoralter = " CREATE TABLE [dbo].[PeriodAttndScheduleNew]([para_code] [numeric](18, 0) IDENTITY(1,1) NOT NULL,	[degree_code] [numeric](18, 0) NULL,	[DayOrder] [smallint] NULL,	[No_of_hrs_per_day] [smallint] NULL,	[no_of_hrs_I_half_day] [smallint] NULL,	[no_of_hrs_II_half_day] [smallint] NULL,	[min_pres_I_half_day] [smallint] NULL,	[min_pres_II_half_day] [smallint] NULL,	[semester] [int] NULL,	[section] [varchar](5) NULL,	[batch_year] [numeric](4, 0) NULL)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = string.Empty;
            string usp_InsertCAMCalculationMark = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'usp_InsertCAMCalculationMark'");
            if (usp_InsertCAMCalculationMark.Trim() == "0")
            {
                strcreateoralter = " CREATE PROCEDURE usp_InsertCAMCalculationMark (@subjectNo int, @syllCode int, @isType nvarchar(200), @camOptions int = NULL, @rollNo nvarchar(500), @marks nvarchar(200), @convertion nvarchar(200), @Sections nvarchar(200)) AS BEGIN RETRY:  BEGIN  TRANSACTION    BEGIN    TRY      SET      NOCOUNT      ON        INSERT INTO tbl_Cam_Calculation (subject_no, syll_code, Istype, Cam_option, roll_no, Exammark, CONVERSION, Sections)          VALUES (@subjectNo, @syllCode, @isType, @camOptions, @rollNo, @marks, @convertion, ISNULL(LTRIM(RTRIM(@sections)), ''))    COMMIT TRANSACTION  END  TRY BEGIN  CATCH    PRINT 'Rollback Transaction'    ROLLBACK TRANSACTION    IF ERROR_NUMBER() = 1205    BEGIN      WAITFOR DELAY '00:00:00.05'      GOTO RETRY    END  END  CATCH END";
            }
            else
            {
                strcreateoralter = " Alter PROCEDURE usp_InsertCAMCalculationMark (@subjectNo int, @syllCode int, @isType nvarchar(200), @camOptions int = NULL, @rollNo nvarchar(500), @marks nvarchar(200), @convertion nvarchar(200), @Sections nvarchar(200)) AS BEGIN RETRY:  BEGIN  TRANSACTION    BEGIN    TRY      SET      NOCOUNT      ON        INSERT INTO tbl_Cam_Calculation (subject_no, syll_code, Istype, Cam_option, roll_no, Exammark, CONVERSION, Sections)          VALUES (@subjectNo, @syllCode, @isType, @camOptions, @rollNo, @marks, @convertion, ISNULL(LTRIM(RTRIM(@sections)), ''))    COMMIT TRANSACTION  END  TRY BEGIN  CATCH    PRINT 'Rollback Transaction'    ROLLBACK TRANSACTION    IF ERROR_NUMBER() = 1205    BEGIN      WAITFOR DELAY '00:00:00.05'      GOTO RETRY    END  END  CATCH END";
            }
            if (strcreateoralter.Trim() != "")
            {
                d2.update_method_wo_parameter(strcreateoralter, "text");
            }
            strcreateoralter = string.Empty;
            string usp_InsertCAMFinalInternal = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'usp_InsertCAMFinalInternal'");
            if (usp_InsertCAMFinalInternal.Trim() == "0")
            {
                strcreateoralter = " CREATE PROCEDURE usp_InsertCAMFinalInternal (@subjectNo int, @rollNo nvarchar(500), @marks real, @examMonth int = NULL, @examYear int = NULL, @Sections nvarchar(200), @examCode int = NULL) AS BEGIN RETRY:  BEGIN TRANSACTION    BEGIN TRY      SET NOCOUNT ON       INSERT INTO camarks (subject_no, roll_no, total, sections, Exam_Month, Exam_year, exam_code) VALUES (@subjectNo, @rollNo, @marks, @Sections, @examMonth, @examYear, @examCode)     COMMIT TRANSACTION  END TRY  BEGIN CATCH    PRINT 'Rollback Transaction'    ROLLBACK TRANSACTION    IF ERROR_NUMBER() = 1205    BEGIN      WAITFOR DELAY '00:00:00.05'      GOTO RETRY    END  END CATCH END   ";
            }
            else
            {
                strcreateoralter = " alter PROCEDURE usp_InsertCAMFinalInternal (@subjectNo int, @rollNo nvarchar(500), @marks real, @examMonth int = NULL, @examYear int = NULL, @Sections nvarchar(200), @examCode int = NULL) AS BEGIN RETRY:  BEGIN TRANSACTION BEGIN TRY SET NOCOUNT ON  INSERT INTO camarks (subject_no, roll_no, total, sections, Exam_Month, Exam_year, exam_code) VALUES (@subjectNo, @rollNo, @marks, @Sections, @examMonth, @examYear, @examCode) COMMIT TRANSACTION  END TRY  BEGIN CATCH    PRINT 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY END  END CATCH END   ";
            }
            if (strcreateoralter.Trim() != "")
            {
                d2.update_method_wo_parameter(strcreateoralter, "text");
            }
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'externalValuationCount'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table subject add externalValuationCount tinyint not null constraint DF_Subject_externalValuationCount default 2";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }

            tableName = "SpecialCourseGradeDetail";
            executeQuery = "create table SpecialCourseGradeDetail(MarkType bigint identity(5,1) constraint PK_SpecialCourseGradeDetail_MarkType primary key,grade nvarchar(500) constraint UQ_SpecialCourseGradeDetail_grade unique,description nvarchar(max) not null constraint DF_SpecialCourseGradeDetail_description Default(''),IsShow bit not null constraint DF_SpecialCourseGradeDetail_IsShow Default('1'))";
            ExecuteQuery(executeQuery, tableName);

            tableName = "SpecialCourseSubject";
            executeQuery = "create table SpecialCourseSubject(idNo bigint identity(1,1) constraint PK_SpecialCourseSubject_idNo primary key,app_no numeric constraint FK_SpecialCourseSubject_applyn foreign key references applyn(app_no),subject_no numeric constraint FK_SpecialCourseSubject_subject foreign key references subject(subject_no),CurrentSem int, IsFinalsem bit not null constraint DF_SpecialCourseSubject_IsFinalsem Default(0),MarkType bigint constraint FK_SpecialCourseSubject_SpecialCourseGradeDetail foreign key references SpecialCourseGradeDetail(MarkType))";
            ExecuteQuery(executeQuery, tableName);

            q1 = " select * from SpecialCourseSubject where MarkType in(1,2,3,4)";
            DataTable dtSubjectDet = new DataTable();
            if (IsTableAvailable("SpecialCourseSubject"))
                dtSubjectDet = dirAcc.selectDataTable(q1);
            q1 = " select * from SpecialCourseGradeDetail where MarkType in(1,2,3,4)";
            DataTable dtGradeDet = new DataTable();
            dtGradeDet = dirAcc.selectDataTable(q1);
            if (dtSubjectDet.Rows.Count != 0 && dtGradeDet.Rows.Count == 0)
            {
                q1 = "set identity_insert SpecialCourseGradeDetail on insert into SpecialCourseGradeDetail (MarkType,grade,description,IsShow) values('1','Good','Good','1'),('2','Excellent','Excellent','1'),('3','Outstanding','Outstanding','1'),('4','Average','Average','1') set identity_insert SpecialCourseGradeDetail off";
                int insert = dirAcc.updateData(q1);
            }

            tableName = "SpecialCourseSubject";
            columnName = "MarkType";
            executeQuery = "alter table SpecialCourseSubject add MarkType bigint identity(1,1) constraint PK_SpecialCourseSubject_MarkType primary key";
            ExecuteQuery(executeQuery, tableName, columnName: columnName, type: 1);

            tableName = "SpecialCourseSubject";
            columnName = "MarkType";
            string constraintType = "primary key";
            string constraintName = "PK_SpecialCourseSubject_MarkType";
            executeQuery = " alter table SpecialCourseSubject add constraint PK_SpecialCourseSubject_MarkType primary key(MarkType)";
            AddOrDeleteContraints(executeQuery, tableName, columnName, constraintType, constraintName, 0);

            tableName = "SpecialCourseSubject";
            columnName = "app_no";
            dataType = "numeric";
            executeQuery = "alter table SpecialCourseSubject alter column app_no numeric";
            ExecuteQuery(executeQuery, tableName, columnName: columnName, type: 3, dataType: dataType);

            tableName = "SpecialCourseSubject";
            columnName = "Subject_No";
            dataType = "numeric";
            executeQuery = "alter table SpecialCourseSubject alter column Subject_No numeric";
            ExecuteQuery(executeQuery, tableName, columnName: columnName, type: 3, dataType: dataType);

            tableName = "SpecialCourseSubject";
            columnName = "IsFinalsem";
            executeQuery = "alter table SpecialCourseSubject alter column IsFinalsem bit not null";
            ExecuteQuery(executeQuery, tableName, columnName: columnName, type: 2);

            tableName = "SpecialCourseSubject";
            columnName = "MarkType";
            dataType = "bigint";
            executeQuery = "alter table SpecialCourseSubject alter column MarkType bigint not null";
            ExecuteQuery(executeQuery, tableName, columnName: columnName, type: 3, dataType: dataType);

            tableName = "SpecialCourseSubject";
            columnName = "app_no";
            constraintType = "foreign key";
            constraintName = "FK_SpecialCourseSubject_applyn";
            executeQuery = "alter table SpecialCourseSubject add constraint FK_SpecialCourseSubject_applyn foreign key(app_no) references applyn(app_no)";
            AddOrDeleteContraints(executeQuery, tableName, columnName, constraintType, constraintName, 0);

            tableName = "SpecialCourseSubject";
            columnName = "Subject_No";
            constraintType = "foreign key";
            constraintName = "FK_SpecialCourseSubject_subject";
            executeQuery = "alter table SpecialCourseSubject add constraint FK_SpecialCourseSubject_subject foreign key(Subject_No) references subject(Subject_No)";
            AddOrDeleteContraints(executeQuery, tableName, columnName, constraintType, constraintName, 0);


            tableName = "SpecialCourseSubject";
            columnName = "MarkType";
            constraintType = "foreign key";
            constraintName = "FK_SpecialCourseSubject_SpecialCourseGradeDetail";
            executeQuery = "alter table SpecialCourseSubject add constraint FK_SpecialCourseSubject_SpecialCourseGradeDetail foreign key(MarkType) references SpecialCourseGradeDetail(idNo)";
            AddOrDeleteContraints(executeQuery, tableName, columnName, constraintType, constraintName, 0);

            // alter table SpecialCourseSubject add constraint DF_SpecialCourseSubject_IsFinalsem Default(0) for IsFinalsem 
            tableName = "SpecialCourseSubject";
            columnName = "IsFinalsem";
            if (!IsDefaultContraintAvailable(tableName, columnName))
            {
                dirAcc.updateData("alter table SpecialCourseSubject add constraint DF_SpecialCourseSubject_IsFinalsem Default(0) for IsFinalsem ");
            }
            else
            {
                dirAcc.updateData("alter table SpecialCourseSubject drop constraint DF_SpecialCourseSubject_IsFinalsem");
                if (!IsDefaultContraintAvailable(tableName, columnName))
                {
                    dirAcc.updateData("alter table SpecialCourseSubject add constraint DF_SpecialCourseSubject_IsFinalsem Default(0) for IsFinalsem ");
                }
            }

            procedureName = "uspDeleteSubjectChooser";
            procedureType = 0;//0 - Create ; 1 - Alter
            procedureQ = string.Empty;
            if (IsStoredProcedureAvailable(procedureName))
            {
                procedureType = 1;
            }
            else
            {
                procedureType = 0;
            }
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + " procedure uspDeleteSubjectChooser(@rollNo nvarchar(500),@subjectNo numeric) AS BEGIN delete from subjectChooser where roll_no=@rollNo and subject_no=@subjectNo END";
            ExecuteProcedure(procedureName, procedureQ, procedureType);

            procedureName = "uspInsertSpecialSubject";
            procedureType = 0;
            procedureQ = string.Empty;
            if (IsStoredProcedureAvailable(procedureName))
            {
                procedureType = 1;
            }
            else
            {
                procedureType = 0;
            }
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + " procedure uspInsertSpecialSubject(@rollNo nvarchar(500),@appNo numeric,@subjectNo numeric,@markType bigint,@isFinalSem bit,@currentSem int,@isDeleteSubjectChooser bit) AS BEGIN if exists (select * from SpecialCourseSubject where  App_no=@appNo and CurrentSem=@currentSem)update SpecialCourseSubject set MarkType=@markType,subject_no=@subjectNo where  App_no=@appNo and CurrentSem=@currentSem  else  insert into SpecialCourseSubject (Subject_No,App_no,MarkType,IsFinalsem,CurrentSem) values (@subjectNo,@appNo,@markType,@isFinalSem,@currentSem) if(LTRIM(RTRIM(ISNULL(@rollNo,'')))='')  select @rollNo=Roll_No from Registration where App_No=@appNo if(@isDeleteSubjectChooser=1 and LTRIM(RTRIM(ISNULL(@rollNo,'')))<>'') exec uspDeleteSubjectChooser @rollNo=@rollNo ,@subjectNo=@subjectNo END";
            ExecuteProcedure(procedureName, procedureQ, procedureType);



        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
            errmsg.Text = ex.ToString();
            errmsg.Visible = true;
        }
    }

    public void AcademicProceess()
    {
        try
        {
            string strcreateoralter = string.Empty;
            int insalter = 0;
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'TheoryCurFee'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table subject add TheoryCurFee Decimal(12,2)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'TheoryArrFee'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table subject add TheoryArrFee Decimal(12,2)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'LabCurFee'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table subject add LabCurFee Decimal(12,2)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'LabArrFee'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table subject add LabArrFee Decimal(12,2)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'WrittenMaxMark'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "Alter Table subject Add WrittenMaxMark numeric";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'IsInternalOnly'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "Alter Table subject Add IsInternalOnly Bit";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'Moderation_Mark'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table subject add Moderation_Mark float(18)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'min_int_moderation'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table subject add min_int_moderation float(18)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'dept_code'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table subject add dept_code numeric";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'Print_Acronym'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table subject add Print_Acronym varchar(100)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'CommSubcode'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table subject add CommSubcode varchar(100)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'paperid'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table subject add paperid numeric";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'Part_Type'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table subject add Part_Type int";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'subjectpriority'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table subject add subjectpriority int";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'sub_sem' AND COLUMN_NAME = 'viva'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table sub_sem add viva bit";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'sub_sem' AND COLUMN_NAME = 'Field_Work'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table sub_sem add Field_Work bit";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'sub_sem' AND COLUMN_NAME = 'Disseration'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table sub_sem add Disseration bit";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'sub_sem' AND COLUMN_NAME = 'CommSubcode'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table sub_sem add CommSubcode varchar(20)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            //Barath 07.04.17 SrEc raja
            strcreateoralter = "";
            strcreateoralter = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'LOAD_SUBJECT'");
            string type = "";
            if (strcreateoralter == "0")
                type = "Create ";
            else
                type = "Alter ";
            strcreateoralter = " " + type + " PROCEDURE LOAD_SUBJECT @Batch_Year INT, @semester INT, @degree_code INT, @stdsec VARCHAR (10), @sc_code INT, @ff_date INT, @tt_date INT, @ssf_cdate DATETIME, @sst_cdate DATETIME AS SET NOCOUNT ON; BEGIN    SELECT syllabus_year FROM syllabus_master WHERE degree_code = @degree_code AND semester = @semester AND batch_year = @Batch_Year;    SELECT S.Subject_Code, S.Subject_no, S.max_int_marks, SS.Subject_Type, s.acronym, s.subject_name, ss.Lab FROM Subject AS s, Sub_Sem AS ss, Syllabus_Master AS SMas WHERE SMas.Syll_Code = S.Syll_Code AND SMas.Syll_Code = SS.Syll_Code AND SS.Syll_Code = S.Syll_Code AND S.SubType_no = SS.Subtype_no AND SS.Promote_Count = 1 AND SMas.Degree_Code = @degree_code AND SMas.Batch_Year = @Batch_Year AND SMas.Semester = @semester ORDER BY SS.SubType_No;    SELECT No_of_hrs_per_day, no_of_hrs_I_half_day, no_of_hrs_II_half_day FROM periodattndschedule WHERE degree_code = @degree_code AND semester = @semester;    SELECT nodays FROM periodattndschedule WHERE degree_code = @degree_code AND semester = @semester;    SELECT CONVERT (VARCHAR, start_date, 101) FROM seminfo WHERE degree_code = @degree_code AND semester = @semester AND batch_year = @Batch_Year AND start_date IS NOT NULL;    SELECT schorder FROM periodattndschedule WHERE degree_code = @degree_code AND semester = @semester;    IF (@stdsec = '')        SELECT DISTINCT isnull(registration.Roll_Admit, '') AS Admno, isnull(registration.Roll_No, '') AS RlNo, isnull(Reg_No, '') AS RgNo, isnull(Stud_Name, '') AS SName, adm_date, exam_flag, debar_reason, len(registration.Roll_No) FROM registration, subjectchooser WHERE registration.roll_no = subjectchooser.roll_no AND subjectchooser.semester = @semester AND Batch_Year = @Batch_Year AND Degree_Code = @degree_code AND delflag = 0 AND exam_flag <> 'Debar' AND RollNo_Flag = 1 AND registration.Roll_NO IS NOT NULL AND ltrim(rtrim(registration.Roll_No)) <> '' ORDER BY len(registration.Roll_No);    ELSE        SELECT DISTINCT isnull(registration.Roll_Admit, '') AS Admno, isnull(registration.Roll_No, '') AS RlNo, isnull(Reg_No, '') AS RgNo, isnull(Stud_Name, '') AS SName, adm_date, exam_flag, debar_reason, len(registration.Roll_No) FROM registration, subjectchooser WHERE registration.roll_no = subjectchooser.roll_no AND subjectchooser.semester = @semester AND Batch_Year = @Batch_Year AND Degree_Code = @degree_code AND sections = @stdsec AND delflag = 0 AND exam_flag <> 'Debar' AND RollNo_Flag = 1 AND registration.Roll_No IS NOT NULL AND ltrim(rtrim(registration.Roll_No)) <> '' ORDER BY len(registration.Roll_No);    SELECT linkvalue FROM inssettings WHERE linkname = 'total Hour';    SELECT univ_hrs FROM univ_college_hrs WHERE degree_code = @degree_code AND semester = @semester AND batch_year = @Batch_Year;    SELECT * FROM AttMasterSetting WHERE CollegeCode = @sc_code AND CalcFlag = 0 AND CollegeCode = @sc_code;    IF (@stdsec = '')        SELECT count(attendance.roll_no), attendance.roll_no, registration.Roll_Admit, registration.reg_no, registration.stud_name FROM registration LEFT OUTER JOIN  attendance   ON registration.roll_no = attendance.roll_no WHERE degree_code = @degree_code AND batch_year = @Batch_Year AND cc = 0 AND delflag = 0 AND exam_flag <> 'debar' AND current_semester = @semester AND month_year BETWEEN @ff_date AND @tt_date GROUP BY attendance.roll_no, registration.Roll_Admit, registration.reg_no, registration.stud_name; ELSE        SELECT count(attendance.roll_no), attendance.roll_no, registration.Roll_Admit, registration.reg_no, registration.stud_name FROM registration LEFT OUTER JOIN attendance ON registration.roll_no = attendance.roll_no WHERE degree_code = @degree_code AND batch_year = @Batch_Year AND cc = 0 AND delflag = 0 AND exam_flag <> 'debar' AND current_semester = @semester AND sections = @stdsec AND month_year BETWEEN @ff_date AND @tt_date GROUP BY attendance.roll_no, registration.Roll_Admit, registration.reg_no, registration.stud_name; IF (@stdsec = '') SELECT attendance.roll_no, registration.Roll_Admit, registration.reg_no, registration.stud_name, attendance.* FROM registration LEFT OUTER JOIN  attendance ON registration.roll_no = attendance.roll_no WHERE degree_code = @degree_code AND batch_year = @Batch_Year AND cc = 0 AND delflag = 0 AND exam_flag <> 'debar' AND month_year BETWEEN @ff_date AND @tt_date ORDER BY attendance.roll_no, registration.Roll_Admit, registration.reg_no, registration.stud_name, attendance.month_year; ELSE SELECT attendance.roll_no, registration.Roll_Admit, registration.reg_no, registration.stud_name, attendance.* FROM registration LEFT OUTER JOIN attendance ON registration.roll_no = attendance.roll_no WHERE degree_code = @degree_code AND batch_year = @Batch_Year AND cc = 0 AND delflag = 0 AND exam_flag <> 'debar' AND sections = @stdsec AND month_year BETWEEN @ff_date AND @tt_date ORDER BY attendance.roll_no, registration.Roll_Admit, registration.reg_no, registration.stud_name, attendance.month_year;  ";
            strcreateoralter += " if(@stdsec='') select distinct FromDate, CONVERT(VARCHAR,FromDate, 101) ,alternate_schedule.* from alternate_schedule where batch_year=@Batch_Year and degree_code=@degree_code  and semester=@semester   and FromDate between @ssf_cdate and @sst_cdate  order by alternate_schedule.FromDate; Else select distinct FromDate, CONVERT(VARCHAR,FromDate, 101) ,alternate_schedule.* from alternate_schedule where batch_year=@Batch_Year and degree_code=@degree_code  and semester=@semester  and sections=@stdsec  and FromDate between @ssf_cdate and @sst_cdate  order by alternate_schedule.FromDate; if(@stdsec='') select distinct FromDate,CONVERT(VARCHAR,FromDate, 101) ,semester_schedule.* from semester_schedule where batch_year=@Batch_Year and degree_code=@degree_code  and semester=@semester Else select distinct FromDate,CONVERT(VARCHAR,FromDate, 101) ,semester_schedule.* from semester_schedule where batch_year=@Batch_Year and degree_code=@degree_code  and semester=@semester and sections=@stdsec; ";

            //IF (@stdsec = '')  SELECT DISTINCT CONVERT (VARCHAR, FromDate, 101), alternate_schedule.* FROM alternate_schedule WHERE batch_year = @Batch_Year AND degree_code = @degree_code AND semester = @semester AND FromDate BETWEEN @ssf_cdate AND @sst_cdate ORDER BY FromDate; ELSE  SELECT DISTINCT CONVERT (VARCHAR, FromDate, 101), alternate_schedule.* FROM alternate_schedule WHERE batch_year = @Batch_Year AND degree_code = @degree_code AND semester = @semester AND sections = @stdsec AND FromDate BETWEEN @ssf_cdate AND @sst_cdate ORDER BY FromDate; IF (@stdsec = '') SELECT DISTINCT CONVERT (VARCHAR, FromDate, 101), semester_schedule.* FROM semester_schedule WHERE batch_year = @Batch_Year AND degree_code = @degree_code AND semester = @semester;ELSE        SELECT DISTINCT FromDate, CONVERT (VARCHAR, FromDate, 101), semester_schedule.* FROM semester_schedule WHERE batch_year = @Batch_Year AND degree_code = @degree_code AND semester = @semester AND sections = @stdsec;    
            strcreateoralter += " IF (@stdsec = '')   SELECT * FROM direct_schedule WHERE batch_year = @Batch_Year AND degree_code = @degree_code AND month_year BETWEEN @ff_date AND @tt_date ORDER BY month_year;    ELSE        SELECT * FROM direct_schedule WHERE batch_year = @Batch_Year AND degree_code = @degree_code AND sections = @stdsec AND month_year BETWEEN @ff_date AND @tt_date ORDER BY month_year;    IF (@stdsec = '')        SELECT DISTINCT dm.sch_date, CONVERT (VARCHAR, dm.sch_date, 101), dm.degree_code, dm.semester, dm.batch_year, dd.hr, dd.subject_no FROM dailyStaffEntry AS dm, dailyentdet AS dd WHERE dm.lp_code = dd.lp_code AND dm.degree_code = @degree_code AND semester = @semester AND dm.sch_date BETWEEN @ssf_cdate AND @sst_cdate AND dm.batch_year = @Batch_Year ORDER BY dm.sch_date, dm.degree_code, dm.semester, dm.batch_year, dd.hr, dd.subject_no;    ELSE        SELECT DISTINCT dm.sch_date, CONVERT (VARCHAR, dm.sch_date, 101), dm.degree_code, dm.semester, dm.batch_year, dd.hr, dd.subject_no FROM dailyStaffEntry AS dm, dailyentdet AS dd WHERE dm.lp_code = dd.lp_code AND dm.degree_code = @degree_code AND semester = @semester AND dm.sch_date BETWEEN @ssf_cdate AND @sst_cdate AND dm.sections = @stdsec AND dm.batch_year = @Batch_Year ORDER BY dm.sch_date, dm.degree_code, dm.semester, dm.batch_year, dd.hr, dd.subject_no;    SELECT specialhr_master.hrentry_no, specialhr_details.subject_no, specialhr_details.hrdet_no, specialhr_attendance.roll_no, specialhr_attendance.attendance FROM specialhr_master, specialhr_details, specialhr_attendance WHERE specialhr_details.hrentry_no = specialhr_master.hrentry_no AND specialhr_attendance.hrdet_no = specialhr_details.hrentry_no AND batch_year = @Batch_Year AND semester = @semester AND degree_code = @degree_code AND date BETWEEN @ssf_cdate AND @sst_cdate;    SELECT CONVERT (VARCHAR, date, 101), specialhr_details.subject_no, specialhr_details.hrdet_no FROM specialhr_master, specialhr_details WHERE specialhr_details.hrentry_no = specialhr_master.hrentry_no AND batch_year = @Batch_Year AND semester = @semester AND degree_code = @degree_code AND date BETWEEN @ssf_cdate AND @sst_cdate;    SELECT sc.roll_no, S.Subject_no, sc.Batch FROM Subject AS s, subjectchooser AS sc, Sub_Sem AS ss, Syllabus_Master AS SMas WHERE SMas.Syll_Code = S.Syll_Code AND SMas.Syll_Code = SS.Syll_Code AND SS.Syll_Code = S.Syll_Code AND S.SubType_no = SS.Subtype_no AND SS.Promote_Count = 1 AND S.Subject_no = sc.Subject_no AND SMas.Degree_Code = @degree_code AND SMas.Batch_Year = @Batch_Year AND SMas.Semester = @semester ORDER BY SS.SubType_No;    SELECT CONVERT (VARCHAR, holiday_date, 101), halforfull, morning, evening FROM holidaystudents WHERE semester = @semester AND degree_code = @degree_code AND holiday_date BETWEEN @ssf_cdate AND @sst_cdate;  ";

            //IF (@stdsec = '')        SELECT DISTINCT Day_Value, Stu_Batch, Subject_no, hour_value,Timetablename FROM LabAlloc WHERE degree_code = @degree_code AND semester = @semester AND batch_year = @Batch_Year; ELSE SELECT DISTINCT Day_Value, Stu_Batch, Subject_no, hour_value,Timetablename FROM LabAlloc WHERE degree_code = @degree_code AND semester = @semester AND batch_year = @Batch_Year AND sections = @stdsec; 
            strcreateoralter += " if(@stdsec='') select distinct Day_Value,Stu_Batch,Subject_no,hour_value,Timetablename from LabAlloc where degree_code=@degree_code and semester=@semester and batch_year=@Batch_Year and Timetablename in(select ttname from Semester_Schedule where degree_code=@degree_code and semester=@semester and batch_year=@Batch_Year ) Else select distinct Day_Value,Stu_Batch,Subject_no,hour_value,Timetablename from LabAlloc where degree_code=@degree_code and semester=@semester and batch_year=@Batch_Year and sections=@stdsec and Timetablename in(select ttname from Semester_Schedule where degree_code=@degree_code and semester=@semester and batch_year=@Batch_Year and sections=@stdsec )";

            strcreateoralter += " IF (@stdsec = '') SELECT DISTINCT Subject_no FROM LabAlloc WHERE degree_code = @degree_code AND semester = @semester AND batch_year = @Batch_Year;    ELSE        SELECT DISTINCT Subject_no FROM LabAlloc WHERE degree_code = @degree_code AND semester = @semester AND batch_year = @Batch_Year AND sections = @stdsec; END ";
            insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");

            strcreateoralter = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'period_attnd_schedule'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = " drop PROCEDURE period_attnd_schedule";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = " Create PROCEDURE period_attnd_schedule ( @degree_code int, @sem_ester int ) AS begin select distinct No_of_hrs_per_day as 'PER DAY', no_of_hrs_I_half_day as 'I_HALF_DAY' , no_of_hrs_II_half_day as 'II_HALF_DAY', min_pres_I_half_day as 'MIN PREE I DAY', min_pres_II_half_day as 'MIN PREE II DAY', schorder as 'SCH_ORDER', nodays as'NO_DAYS', percent_eligible_for_exam as 'Eligible_Percent',min_hrs_per_day as 'MIN PREE PER DAY' FROM PeriodAttndSchedule where degree_code=@degree_code and semester=@sem_ester End";
            insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            strcreateoralter = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_ins_upd_Subjectchooser'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = " drop PROCEDURE sp_ins_upd_Subjectchooser";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = " Create procedure sp_ins_upd_Subjectchooser  (@roll_no nvarchar(50), @semester int, @subject_no int, @subtype_no int, @paper_order int, @batch nvarchar(50), @grp_cell nvarchar(50) ) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY if exists(select * from Subjectchooser where roll_no=@roll_no and subject_no=@subject_no and semester=@semester and subtype_no=@subtype_no) ";
            strcreateoralter = strcreateoralter + " update subjectChooser set paper_order=@paper_order,grp_cell=@grp_cell where roll_no=@roll_no and subject_no=@subject_no and semester =@semester and subtype_no=@subtype_no Else insert into Subjectchooser(semester,roll_no,subject_no,paper_order,subtype_no,batch,grp_cell) values(@semester,@roll_no,@subject_no,@paper_order,@subtype_no,@batch,@grp_cell)  COMMIT TRANSACTION  End  TRY  BEGIN ";
            strcreateoralter = strcreateoralter + "  CATCH  Print 'Rollback Transaction' ROLLBACK TRANSACTION  IF ERROR_NUMBER() = 1205  BEGIN  WAITFOR DELAY '00:00:00.05'  GoTo RETRY  End  End  CATCH End";
            insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_hrlock' AND COLUMN_NAME = 'degree_code'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table attendance_hrlock add degree_code int";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_hrlock' AND COLUMN_NAME = 'batch_year'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table attendance_hrlock add batch_year int";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_hrlock' AND COLUMN_NAME = 'semester'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table attendance_hrlock add semester int";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_hrlock' AND COLUMN_NAME = 'section'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table attendance_hrlock add section nvarchar(5)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_hrlock' AND COLUMN_NAME = 'lockstatus'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table attendance_hrlock add lockstatus bit";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_hrlock' AND COLUMN_NAME = 'locktype'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table attendance_hrlock add locktype tinyint";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_Cam_Calculation'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "create table tbl_Cam_Calculation (subject_no int,syll_code int,Istype nvarchar(25),Cam_option int,roll_no nvarchar(50),Exammark nvarchar(50),conversion int)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='internal_cam_calculation_master_setting'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "Create Table internal_cam_calculation_master_setting (Istype nvarchar(50),subject_no int,syll_code int,Calculate_Cam_Criteria nvarchar(100),Criteria_no nvarchar(100),Cam_Option nvarchar(500),Cam_Ave_best int,Conversion_value int,";
                strcreateoralter = strcreateoralter + "Attendance nvarchar(100),Att_Cal nvarchar(100),Att_Mark_Per nvarchar(50),Calculation_Criteria nvarchar(100),Calculation_Option nvarchar(100),Include_Final_Calculation int,Round_of int,Round_Value int,int_Mark_settings int)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_cam_calculation' AND COLUMN_NAME = 'Sections'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table tbl_cam_calculation add Sections nvarchar(50)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'internal_cam_calculation_master_setting' AND COLUMN_NAME = 'Sections'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table internal_cam_calculation_master_setting add Sections nvarchar(50)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_selector' AND COLUMN_NAME = 'Stud_batch'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table staff_selector add Stud_batch nvarchar(50)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_type' AND COLUMN_NAME = 'islock'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table exam_type add islock bit";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'exam_type' AND COLUMN_NAME = 'elockdate'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table exam_type add elockdate datetime";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_delete_Subjectchooser'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = " drop PROCEDURE sp_delete_Subjectchooser";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = "Create procedure sp_delete_Subjectchooser  (@roll_no nvarchar(50), @semester int, @subject_no int) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY ";
            strcreateoralter = strcreateoralter + " delete from Subjectchooser where roll_no=@roll_no and semester=@semester and subject_no=@subject_no COMMIT TRANSACTION  End  TRY  BEGIN ";
            strcreateoralter = strcreateoralter + " CATCH  Print 'Rollback Transaction' ROLLBACK TRANSACTION  IF ERROR_NUMBER() = 1205  BEGIN  WAITFOR DELAY '00:00:00.05'  GoTo RETRY  End  End  CATCH End";
            insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stucon' AND COLUMN_NAME = 'ack_fee_of_roll'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table stucon add ack_fee_of_roll nvarchar(100)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'internalassessgetsubject'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = " drop PROCEDURE internalassessgetsubject";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = " Create procedure internalassessgetsubject @batchyear int,  @degreecode int, @cur_sem int,  @sections varchar(20),@filterwithsection varchar(5000), @filterwithoutsection varchar(5000) as begin DECLARE @sqlCommand varchar(5000)  if( @sections='All' or  @sections='')  ";
            strcreateoralter = strcreateoralter + " begin Select distinct S.Subject_Code, S.Subject_no,s.min_int_marks,S.max_int_marks,SS.Subject_Type,s.subject_name,s.acronym,SS.SubType_No from Subject as s,  Sub_Sem as ss , Syllabus_Master as SMas,camarks c where SMas.Syll_Code = S.Syll_Code and SMas.Syll_Code = SS.Syll_Code";
            strcreateoralter = strcreateoralter + " and  SS.Syll_Code =S.Syll_Code and S.SubType_no = SS.Subtype_no and s.subject_no=c.subject_no and SS.Promote_Count = 1 and SMas.Degree_Code = @degreecode and SMas.Batch_Year =@batchyear and SMas.Semester = @cur_sem order by SS.SubType_No SET @sqlCommand = 'select Roll_Admit,roll_no,reg_no,stud_name,Stud_Type from registration where  '+ @filterwithsection ";
            strcreateoralter = strcreateoralter + " EXEC (@sqlCommand) End Else Select distinct S.Subject_Code, S.Subject_no,s.min_int_marks,S.max_int_marks, SS.Subject_Type,s.subject_name,s.acronym ,SS.SubType_No  from Subject as s, Sub_Sem as ss , Syllabus_Master as SMas,camarks c where SMas.Syll_Code = S.Syll_Code and SMas.Syll_Code = SS.Syll_Code and  SS.Syll_Code = S.Syll_Code ";
            strcreateoralter = strcreateoralter + "  and S.SubType_no = SS.Subtype_no and SS.Promote_Count = 1 and s.subject_no=c.subject_no and SMas.Degree_Code = @degreecode and SMas.Batch_Year =@batchyear and SMas.Semester = @cur_sem order by SS.SubType_No SET @sqlCommand = 'select Roll_Admit,roll_no,reg_no,stud_name,Stud_Type from registration where  '+ @filterwithoutsection EXEC (@sqlCommand) End";
            insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'notestbl' AND COLUMN_NAME = 'hr'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table notestbl add hr tinyint";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'notestbl' AND COLUMN_NAME = 'Sections'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table notestbl add Sections nvarchar(50)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'Proc_All_Subject_Details'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = " drop PROCEDURE Proc_All_Subject_Details";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = "Create procedure Proc_All_Subject_Details  ( @exam_code varchar(20), @min_marks int,@section varchar(100) ) as BEGIN Declare @Max_Mark int select sum(marks_obtained) as 'SUM' from result where exam_code=@exam_code and marks_obtained>=0 ";
            strcreateoralter = strcreateoralter + " select count(distinct r.roll_no) as 'PASS_COUNT' from result r,exam_type ex,subjectchooser su,registration rt where r.roll_no=rt.roll_no and r.exam_code=@exam_code and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and  r.exam_code=ex.exam_code and (r.marks_obtained>=@min_marks or r.marks_obtained='-3' or r.marks_obtained='-2')  and r.marks_obtained<>'-1' and r.marks_obtained<>'-16'  and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 ";
            strcreateoralter = strcreateoralter + " select count(distinct r.roll_no) as 'FAIL_COUNT' from result r,subjectchooser su,exam_type ex,registration rt  where  r.roll_no=rt.roll_no and r.exam_code=@exam_code and ex.exam_code=r.exam_code and r.roll_no=su.roll_no and ex.subject_no=su.subject_no and (r.marks_obtained<@min_marks and r.marks_obtained<>'-3' and r.marks_obtained<>'-2' and r.marks_obtained<>'-1' and r.marks_obtained<>'-16') and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 ";
            strcreateoralter = strcreateoralter + " select max(marks_obtained) as 'MAX_MARK' from result where exam_code=@exam_code select min(marks_obtained) as 'MIN_MARK' from result where exam_code=@exam_code and (marks_obtained>=0) select count(distinct roll_no) as 'AVG<50' from result where exam_code=@exam_code and marks_obtained between 0 and 49 ";
            strcreateoralter = strcreateoralter + " select count(distinct roll_no) as 'AVG_50to65' from result where exam_code=@exam_code and marks_obtained Between 50 And 65 select count(distinct roll_no) as 'AVG>65' from result where exam_code=@exam_code and marks_obtained >65 select count(distinct rt.roll_no) as 'PRESENT_COUNT' from result r,registration rt,subjectchooser su,exam_type ex where r.exam_code=@exam_code and (marks_obtained>=0 or marks_obtained='-2' or marks_obtained='-3') and ";
            strcreateoralter = strcreateoralter + " marks_obtained<>'-1'  and r.roll_no=rt.roll_no and su.subject_no=ex.subject_no and ex.exam_code=r.exam_code and su.roll_no=r.roll_no and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 and rt.RollNo_Flag<>0 select count(distinct r.roll_no) as 'ABSENT_COUNT' from result r,registration rt,exam_type ex,subjectchooser su where r.exam_code=@exam_code and r.marks_obtained<0 and (r.marks_obtained<>'-2' and r.marks_obtained<>'-3'and r.marks_obtained<>'-7' and r.marks_obtained<>'-16' )and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and r.exam_code=ex.exam_code and r.roll_no=rt.roll_no and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 and rt.RollNo_Flag<>0 ";
            strcreateoralter = strcreateoralter + " set @Max_Mark=(select max(marks_obtained) as 'MAX_MARK' from result where exam_code=@exam_code) select distinct result.roll_no as 'ROLL_NO',registration.stud_name as 'STUD_NAME' from result,registration where result.roll_no=registration.roll_no and marks_obtained=@Max_Mark and exam_code=@exam_code select count(distinct r.roll_no) as 'FAIL_COUNT_WITHOUT_AB' from result r,subjectchooser su,exam_type ex where r.exam_code=@exam_code and r.roll_no=su.roll_no and su.subject_no=ex.subject_no and r.exam_code=ex.exam_code and (marks_obtained<@min_marks and marks_obtained<>'-3' and marks_obtained<>'-2' and marks_obtained<>'-1' and marks_obtained<>'-4' and marks_obtained<>'-5' and marks_obtained<>'-6' and marks_obtained<>'-7' and marks_obtained<>'-8' and marks_obtained<>'-9' and marks_obtained<>'-10' and marks_obtained<>'-11' and ";
            strcreateoralter = strcreateoralter + " marks_obtained<>'-12' and marks_obtained<>'-13' and marks_obtained<>'-14' and marks_obtained<>'-15' and marks_obtained<>'-16' and marks_obtained<>'-17') select count(marks_obtained) as 'AVG>=75' from result where exam_code=@exam_code and marks_obtained >=75  select count(distinct roll_no) as 'AVG60to74' from result where exam_code=@exam_code and marks_obtained Between 60 And 74 ";
            strcreateoralter = strcreateoralter + " select count(distinct roll_no) as 'AVG50to59' from result where exam_code=@exam_code and marks_obtained Between 50 And 59 select count(distinct roll_no) as 'AVG30to49' from result where exam_code=@exam_code and marks_obtained Between 30 And 49 select count(distinct roll_no) as 'AVG20to29' from result where exam_code=@exam_code and marks_obtained Between 20 And 29  ";
            strcreateoralter = strcreateoralter + " select count(distinct roll_no) as 'AVG<=19' from result where exam_code=@exam_code and marks_obtained <=19 select marks_obtained ,roll_no from result where exam_code=@exam_code and marks_obtained = (select max(marks_obtained) as 'MAX_MARK' from result r where exam_code=@exam_code ) select marks_obtained ,roll_no from result where exam_code=@exam_code and marks_obtained = (select min(marks_obtained) as 'MIN_MARK' from result where exam_code=@exam_code and (marks_obtained>=0) ) ";
            strcreateoralter = strcreateoralter + " select count(distinct roll_no) as 'AVG>=60' from result where exam_code=@exam_code and marks_obtained >=60 select count(distinct roll_no) as 'AVG>=80' from result where exam_code=@exam_code and marks_obtained >=80 End";
            insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            strcreateoralter = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'procbranchwiseresultanalysis'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = " drop PROCEDURE procbranchwiseresultanalysis";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = "Create procedure procbranchwiseresultanalysis @degreecode int, @batchyear int, @semester int, @subject_no int,@examCode int, @papertype int as begin declare @type int set @type=@papertype if(@type=1) begin select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1 and m.attempts = 1 and subject_no=@subject_no and ltrim(rtrim(type))='' and (result='pass' or result='fail' or result='S' or result='WHD') and m.exam_code in (select exam_code from exam_details where degree_code= @degreecode and current_semester=@semester and batch_year=@batchyear) ";
            strcreateoralter = strcreateoralter + " select count(result) from mark_entry where ltrim(rtrim(type))='' and result = 'Pass' and attempts=1 and subject_no = @subject_no and exam_code in (select exam_code from exam_details where degree_code= @degreecode and current_semester= @semester and batch_year=@batchyear) select count(result) from mark_entry where ltrim(rtrim(type))='' and (result = 'Fail' or result='WHD') and attempts=1 and subject_no = @subject_no and exam_code in (select exam_code from exam_details where degree_code= @degreecode and current_semester= @semester and batch_year=@batchyear ) select count(roll_no) from exam_application ea,exam_appl_details ead where exam_code=@examCode and ea.appl_no=ead.appl_no and ead.subject_no=@subject_no";
            strcreateoralter = strcreateoralter + " select count(result) from mark_entry where ltrim(rtrim(type))='' and result = 'A%' and passorfail=0 and subject_no = @subject_no and exam_code in (select exam_code from exam_details where degree_code=@degreecode and current_semester=@semester and batch_year=@batchyear ) End else if(@type=0) begin select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1 and m.attempts = 1 and subject_no=@subject_no and ltrim(rtrim(type))='' and (result='pass' or result='fail' or result='S' or result='WHD') and m.exam_code in (select exam_code from exam_details where degree_code= @degreecode and batch_year=@batchyear and current_semester=@semester) ";
            strcreateoralter = strcreateoralter + " select count(result) from mark_entry where ltrim(rtrim(type))='*' and result = 'Pass' and attempts=1 and subject_no = @subject_no and exam_code in (select exam_code from exam_details where degree_code= @degreecode and current_semester= @semester and batch_year=@batchyear) select count(result) from mark_entry where ltrim(rtrim(type))='*' and (result = 'Fail' or result='WHD') and attempts=1 and subject_no = @subject_no and exam_code in (select exam_code from exam_details where degree_code= @degreecode and current_semester= @semester and batch_year=@batchyear ) select count(roll_no) from exam_application ea,exam_appl_details ead where exam_code=@examCode and ea.appl_no=ead.appl_no and ead.subject_no=@subject_no select count(result) from mark_entry ";
            strcreateoralter = strcreateoralter + " where ltrim(rtrim(type))='' and result = 'A%' and passorfail=0 and subject_no = @subject_no and exam_code in (select exam_code from exam_details where degree_code=@degreecode and current_semester=@semester and batch_year=@batchyear ) End End";
            insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            strcreateoralter = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'proc_registered_value'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = " drop PROCEDURE proc_registered_value";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = "Create  procedure proc_registered_value @examcode_p int, @batchyear_p int, @degreecode_p int, @semester_p int as begin select count(*) FROM exam_application where exam_code=@examcode_p select count(distinct m.roll_no) from mark_entry m,registration r Where m.roll_no = r.roll_no And r.delflag = 0 And m.attempts = 1 and ltrim(rtrim(type))='' and m.exam_code in (select exam_code from exam_details where degree_code=@degreecode_p and current_semester=@semester_p and batch_year=@batchyear_p) select  count(distinct roll_no)  from mark_entry where ltrim(rtrim(type))='' and result = 'Pass' and passorfail=1 and exam_code in (select exam_code from exam_details where degree_code=@degreecode_p  and current_semester= @semester_p and ";
            strcreateoralter = strcreateoralter + " batch_year=@batchyear_p) and roll_no not in (select m1.roll_no from mark_entry m1 where m1.exam_code in (select exam_code from exam_details where degree_code=@degreecode_p  and current_semester= @semester_p and batch_year=@batchyear_p) and m1.result<>'Pass') select  count(distinct roll_no)  from mark_entry where ltrim(rtrim(type))='' and result = 'Fail' and passorfail=0 and exam_code in (select exam_code from exam_details where degree_code=@degreecode_p and current_semester=@semester_p and batch_year=@batchyear_p ) select  count(distinct roll_no)  from mark_entry where ltrim(rtrim(type))='' and result = 'A%' and passorfail=0 and exam_code in (select exam_code from exam_details where degree_code=@degreecode_p and current_semester=@semester_p and batch_year=@batchyear_p ) End";
            insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            strcreateoralter = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'proc_range_grade'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = " drop PROCEDURE proc_range_grade";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = "Create procedure proc_range_grade @batchyear_p int, @degreecode_p int, @semester_p int, @examcode_p int as begin  select distinct g.Mark_Grade,count(m.roll_no) as stucount from grade_master g,mark_entry m where g.Mark_Grade=m.grade and m.exam_code =@examcode_p and g.degree_code=@degreecode_p and g.batch_year=@batchyear_p group by  g.Mark_Grade End";
            insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            strcreateoralter = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'procsubjectmoderation'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = " drop PROCEDURE procsubjectmoderation";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = "Create  procedure procsubjectmoderation @examcode int, @papertype int, @semester int, @degree_code int as begin declare @type int set @type=@papertype if @papertype=0  begin select len(m.roll_no),m.roll_no,m.subject_no,isnull(internal_mark,'0') as nternal_mark,isnull(external_mark,'0')as external_mark,isnull(actual_internal_mark,0) as actualint,isnull(actual_external_mark,0) as actualext, isnull(mintotal,'0') as mintotal,min_int_marks,min_ext_marks ";
            strcreateoralter = strcreateoralter + " from mark_entry m,subject s,sub_sem feesub,exam_details e where feesub.subtype_no=s.subtype_no and m.subject_no=s.subject_no and m.exam_code=@examcode and m.exam_code=e.exam_code and e.degree_code=@degree_code and e.current_semester=@semester  and feesub.Lab=0 and attempts<=1 and feesub.promote_count=1  and m.external_mark>=0 order by len(m.roll_no),m.roll_no,m.external_mark desc,m.subject_no asc End ";
            strcreateoralter = strcreateoralter + " else if @papertype=1 begin select len(m.roll_no),m.roll_no,m.subject_no,isnull(internal_mark,'0') as internal_mark,isnull(external_mark,'0')as external_mark,isnull(actual_internal_mark,0) as actualint,isnull(actual_external_mark,0) as actualext,isnull(mintotal,'0') as mintotal,min_int_marks,min_ext_marks from mark_entry m,subject s,sub_sem feesub,syllabus_master sm,exam_details e where feesub.subtype_no=s.subtype_no and m.subject_no=s.subject_no and m.exam_code=e.exam_code and e.degree_code=@degree_code and e.current_semester=@semester and m.exam_code=@examcode  ";
            strcreateoralter = strcreateoralter + " and feesub.Lab=0 and feesub.promote_count=1 and sm.syll_code=s.syll_code and m.attempts>1 and m.external_mark>=0 order by len(m.roll_no),m.roll_no,m.external_mark desc,m.subject_no asc End End";
            insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            strcreateoralter = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='publishresult'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "create table publishresult (publishid int identity(1,1),batch_year int,degree_code numeric,exam_year int,exam_month int)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'publishresult' AND COLUMN_NAME = 'isFinalYear'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table publishresult add isFinalYear bit not null constraint DF_publishresult_isFinalYear Default 0";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }

            strcreateoralter = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_question_master'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "create table tbl_question_master ( QuestionMasterPK bigint identity(1,1),subject_no int,syllabus nvarchar(150), mark  double precision(8), is_descriptive int,question nvarchar(2000), answer nvarchar(2000),options nvarchar(2000),type int)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'universityprocbranchwiseresult'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = " drop PROCEDURE universityprocbranchwiseresult";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = "Create procedure universityprocbranchwiseresult @degreecode int, @batchyear int, @semester int,@subject_no int, @examCode int, @sections varchar, @gradetype int,@minintmark int, @minextmark int,@mintotal int,@beforeorafter varchar  as begin if(@beforeorafter !='') begin   if(@sections != '')";
            strcreateoralter = strcreateoralter + " begin if(@gradetype =3) begin select count(*) from registration where degree_code=@degreecode and             batch_year=@batchyear and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and current_semester=@semester and             sections=@sections            select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no            and r.delflag<>1 and m.attempts = 1 and r.sections=@sections and subject_no=@subject_no  and (result='pass' or             result='fail' or result='S') and m.exam_code = @examCode             select count(result) from mark_entry m,registration r             where   actual_internal_mark >=@minintmark and actual_external_mark >= @minextmark and r.roll_no=m.roll_no and r.sections=@sections and m.attempts=1 and subject_no = @subject_no and             exam_code =@examCode             select count(result)  from mark_entry m,registration r where m.roll_no=r.roll_no and             r.sections=@sections  and m.attempts=1 and (actual_internal_mark <=@minintmark or             actual_external_mark <= @minextmark)   and subject_no = @subject_no and exam_code =@examCode             select count(roll_no) from exam_application where exam_code=@examCode select count(result) from mark_entry m,              registration r where m.roll_no=r.roll_no and r.sections=@sections and result like 'A%' and passorfail=0 and subject_no = @subject_no and exam_code =@examCode End";
            strcreateoralter = strcreateoralter + " Else begin select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear and cc=0 and          delflag=0 and exam_flag <> 'DEBAR' and current_semester=@semester and sections=@sections           select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1           and m.attempts = 1 and r.sections=@sections and subject_no=@subject_no  and (result='pass' or result='fail' or            result='S') and m.exam_code =@examCode            select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and m.actual_grade not in (select mark_grade from grade_master where @mintotal between frange and trange and degree_code=@degreecode   and batch_year=@batchyear union select '' as  mark_grade)            select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections            and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and";
            strcreateoralter = strcreateoralter + " m.actual_grade in (select mark_grade from grade_master where @mintotal between frange and trange and            degree_code=@degreecode and batch_year=@batchyear)            select count(roll_no) from exam_application where exam_code=@examCode select count(result) from mark_entry m,            registration r where m.roll_no=r.roll_no and r.sections=@sections  and result like 'A%' and passorfail=0           and subject_no = @subject_no and exam_code =@examCode End End Else begin if(@gradetype =3) begin select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear and cc=0 and  delflag=0 and exam_flag <> 'DEBAR' and current_semester=@semester select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1 and m.attempts = 1  and subject_no=@subject_no  and (result='pass' or result='fail' or result='S')  and m.exam_code =@examCode select count(result) from mark_entry m,registration r where actual_internal_mark >=@minintmark and actual_external_mark >= @minextmark and r.roll_no=m.roll_no and m.attempts=1  and subject_no = @subject_no and exam_code =@examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and m.attempts=1 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark)   and  subject_no = @subject_no and exam_code =@examCode  select count(roll_no) from exam_application where exam_code=@examCode select count(result) from mark_entry m, registration r where m.roll_no=r.roll_no and result like 'A%' and passorfail=0 and subject_no = @subject_no and exam_code =@examCode";
            strcreateoralter = strcreateoralter + " End  Else begin select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and current_semester=@semester select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1  and m.attempts = 1 and subject_no=@subject_no  and (result='pass' or result='fail' or result='S') and m.exam_code =@examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and m.actual_grade not in (select mark_grade from grade_master where @mintotal between frange and trange and degree_code=@degreecode and batch_year=@batchyear union select '' as  mark_grade) select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no  and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and m.actual_grade in (select mark_grade from grade_master where @mintotal between frange and trange and degree_code=@degreecode  and batch_year=@batchyear) select count(roll_no) from exam_application where exam_code=@examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections and result like 'A%' and passorfail=0 and subject_no = @subject_no and exam_code =@examCode End End End Else begin if(@sections != '') ";
            strcreateoralter = strcreateoralter + " begin if(@gradetype =3) begin select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear and cc=0 and  delflag=0 and exam_flag <> 'DEBAR' and current_semester=@semester and sections=@sections  select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1 and m.attempts = 1 and r.sections=@sections and subject_no=@subject_no  and (result='pass' or result='fail' or result='S') and m.exam_code =@examCode select count(result) from mark_entry m,registration r where   internal_mark >=@minintmark and external_mark >= @minextmark and r.roll_no=m.roll_no and r.sections=@sections and m.attempts=1 and  subject_no = @subject_no and exam_code =@examCode select count(result)as fail from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections and m.attempts=1 and (internal_mark <=@minintmark or external_mark <= @minextmark)   and subject_no = @subject_no and exam_code =@examCode  select count(roll_no) from exam_application where exam_code=@examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections and result like 'A%' and passorfail=0 and subject_no = @subject_no and exam_code =@examCode End Else begin select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and current_semester=@semester and sections=@sections  select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1 and m.attempts = 1 and r.sections=@sections and subject_no=@subject_no  and (result='pass' or result='fail' or result='S') and m.exam_code =@examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections  and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and";
            strcreateoralter = strcreateoralter + " m.grade not in (select mark_grade from grade_master where @mintotal between frange and trange and degree_code=@degreecode and batch_year=@batchyear union select '' as  mark_grade) select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections    and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and m.grade in (select mark_grade from grade_master where @mintotal between frange and trange and degree_code=@degreecode and batch_year=@batchyear) select count(roll_no) from exam_application where exam_code=@examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections and result like 'A%' and passorfail=0 and subject_no = @subject_no and exam_code =@examCode End End  Else begin  if(@gradetype =3) begin select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear  and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and current_semester=@semester select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1  and m.attempts = 1  and subject_no=@subject_no  and (result='pass' or result='fail' or result='S')  and m.exam_code =@examCode select count(result) from mark_entry m, registration r where   internal_mark >=@minintmark and external_mark >= @minextmark and  r.roll_no=m.roll_no and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode  select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and m.attempts=1 and (internal_mark <=@minintmark or external_mark <= @minextmark)   and subject_no = @subject_no and exam_code =@examCode  select count(roll_no) from exam_application where exam_code=@examCode select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and result like 'A%' and passorfail=0 and subject_no = @subject_no and exam_code =@examCode ";
            strcreateoralter = strcreateoralter + " End Else begin select count(*) from registration where degree_code=@degreecode and batch_year=@batchyear and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and current_semester=@semester  select count(distinct m.roll_no) from mark_entry m,registration r where m.roll_no=r.roll_no and r.delflag<>1 and m.attempts = 1 and subject_no=@subject_no  and (result='pass' or result='fail' or result='S') and m.exam_code =@examCode  select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no  and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and m.grade not in (select mark_grade from grade_master where @mintotal between frange and trange and degree_code=@degreecode  and batch_year=@batchyear union select '' as  mark_grade)  select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no  and m.attempts=1 and subject_no = @subject_no and exam_code =@examCode and m.grade in  (select mark_grade from grade_master where @mintotal between frange and trange and degree_code=@degreecode and batch_year=@batchyear) select count(roll_no) from exam_application where exam_code=@examCode  select count(result) from mark_entry m,registration r where m.roll_no=r.roll_no and r.sections=@sections and result like 'A%' and passorfail=0 and subject_no = @subject_no and exam_code =@examCode End End End End ";
            insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            strcreateoralter = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'universitymarkresultanalysis'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = " drop PROCEDURE universitymarkresultanalysis";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = "Create PROCEDURE universitymarkresultanalysis  @degreecode varchar(20), @batchyear varchar(20), @semester varchar(20), @examCode varchar(20),  @sections varchar(20), @dayscholar varchar(20), @hostler varchar(20), @quota varchar(20), @girls varchar(20), @boys varchar(20), @markorgrade int, @mintot int, @beforeorafter varchar(20), @minintmark int, @minextmark int AS begin if(@beforeorafter != '') begin if(@markorgrade=3) begin if(@sections !='') begin if(@quota !='') begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.seattype=@quota and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and m.exam_code=@examCode  and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n  where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and actual_internal_mark <> 0  and actual_external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark) and result <> '' and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections) End Else begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear  and a.app_no=r.app_no and r.stud_type=@dayscholar and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and  r.delflag=0 and exam_flag<>'debar' and cc=0   and r.app_no = n.app_no and r.degree_code=@degreecode and  r.stud_type=@dayscholar and r.batch_year=@batchyear  and m.exam_code=@examCode and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n  where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@dayscholar and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and result <> '' and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark ) and actual_internal_mark <> 0  and actual_external_mark <> 0  and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@hostler and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and  r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0  and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and m.exam_code=@examCode and r.stud_type=@hostler and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n  where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@hostler and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> ''  and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark)  and actual_internal_mark <> 0  and actual_external_mark <> 0 and m.exam_code=@examCode and m.attempts>=1 and  r.sections=@sections )  select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@girls and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and r.sections=@sections and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n  where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> ''   and actual_internal_mark <> 0  and actual_external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark) and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@boys and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode  and r.batch_year=@batchyear  and r.sections=@sections and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n  where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear   and result <> ''  and actual_internal_mark <> 0  and actual_external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark)  and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections )  End End Else begin if(@quota !='') begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.seattype=@quota and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r, applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and actual_internal_mark <> 0  and actual_external_mark <> 0 and (actual_internal_mark <=@minintmark  or actual_external_mark <= @minextmark)  and m.exam_code=@examCode and m.attempts>=1 ) End Else begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@dayscholar and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.app_no = n.app_no and r.degree_code=@degreecode and r.stud_type=@dayscholar and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no  and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@dayscholar and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and actual_internal_mark <> 0 and actual_external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark) and result <> ''  and m.exam_code=@examCode and m.attempts>=1 ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and  a.app_no=r.app_no and r.stud_type=@hostler and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0  and r.app_no = n.app_no and r.degree_code=@degreecode and r.stud_type=@hostler and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@hostler and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and  result <>'Pass' and actual_internal_mark <> 0 and actual_external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark ) and result <> ''  and m.exam_code=@examCode and m.attempts>=1 ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@girls and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and   actual_internal_mark <> 0  and actual_external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark) and result <> ''  and m.exam_code=@examCode and m.attempts>=1 ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@boys and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode  and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and  actual_internal_mark <> 0 and actual_external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark) and result <> ''  and m.exam_code=@examCode and m.attempts>=1 )  End End End Else begin if(@sections !='')  begin if(@quota !='') begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.seattype=@quota and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections  select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and m.exam_code=@examCode  and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and  r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and m.actual_grade in (select mark_grade from grade_master where @mintot between frange and trange";
            strcreateoralter = strcreateoralter + " and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade ) and result <> '' and  m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections) End Else  begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@dayscholar and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.app_no = n.app_no and r.degree_code=@degreecode and r.stud_type=@dayscholar and r.batch_year=@batchyear and m.exam_code=@examCode and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@dayscholar and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and m.actual_grade in (select mark_grade  from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear)   and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@hostler and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0  and r.app_no = n.app_no and r.degree_code=@degreecode and  r.batch_year=@batchyear  and m.exam_code=@examCode and r.stud_type=@hostler and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r, applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@hostler and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and result <> ''and m.actual_grade in (select mark_grade from grade_master where @mintot between frange and trange and  degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade) and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections )  select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@girls and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and  r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and r.sections=@sections  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r, applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0 and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and  result <> '' and m.actual_grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade )  and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@boys and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0  and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and r.sections=@sections and m.exam_code=@examCode and  m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and m.actual_grade in (select mark_grade from grade_master where @mintot between frange and trange ";
            strcreateoralter = strcreateoralter + " and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade )  and m.exam_code=@examCode and m.attempts>=1  and r.sections=@sections ) End End Else begin if(@quota !='') begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.seattype=@quota and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar'  and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and    result <> '' and m.actual_grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade )  and m.exam_code=@examCode and m.attempts>=1 ) End Else begin  select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and  a.app_no=r.app_no and r.stud_type=@dayscholar and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.app_no = n.app_no and r.degree_code=@degreecode and r.stud_type=@dayscholar and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no  and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@dayscholar and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and    result <> '' and m.actual_grade in (select mark_grade from grade_master where @mintot between frange and trange  and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade)  and m.exam_code=@examCode and m.attempts>=1 ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@hostler and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0  and r.app_no = n.app_no and r.degree_code=@degreecode and  r.stud_type=@hostler and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@hostler and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and result <> '' and m.actual_grade in (select mark_grade from grade_master where @mintot between frange and trange and ";
            strcreateoralter = strcreateoralter + " degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade )  and m.exam_code=@examCode and m.attempts>=1 ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@girls and cc=0 and delflag=0 and exam_flag <> 'DEBAR'  select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode  and r.batch_year=@batchyear   and m.exam_code=@examCode and  m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and  r.degree_code=@degreecode and r.batch_year=@batchyear and   result <> '' and m.actual_grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade)  and m.exam_code=@examCode and m.attempts>=1 )  select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and  a.app_no=r.app_no and a.sex=@boys and cc=0 and delflag=0 and exam_flag <> 'DEBAR'  select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode  and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and m.actual_grade in (select mark_grade from grade_master where @mintot between frange and trange and  degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade)  and m.exam_code=@examCode and m.attempts>=1 ) End End End End Else begin if(@markorgrade=3) begin if(@sections !='') begin if(@quota !='') begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.seattype=@quota and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and m.exam_code=@examCode and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0  and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and  result <> '' and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark ) and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections)  End Else  begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@dayscholar and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.app_no = n.app_no and  r.degree_code=@degreecode and r.stud_type=@dayscholar and r.batch_year=@batchyear  and  m.exam_code=@examCode and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@dayscholar and r.app_no = n.app_no and r.degree_code=@degreecode  and r.batch_year=@batchyear and  result <> ''and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark)  and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@hostler and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections  select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0  and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and m.exam_code=@examCode and r.stud_type=@hostler and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r, applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@hostler and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark)  and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@girls and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode  and r.batch_year=@batchyear  and r.sections=@sections and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and   result <> '' and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark ) and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@boys and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and  r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode  and r.batch_year=@batchyear and r.sections=@sections and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark)  and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections )  End End Else begin if(@quota !='') begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.seattype=@quota and cc=0 and delflag=0 and exam_flag <> 'DEBAR'  select count(distinct m.roll_no) from mark_entry m,registration r, applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no =  n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark)  and m.exam_code=@examCode and m.attempts>=1 ) End Else begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@dayscholar and cc=0 and delflag=0 and exam_flag <> 'DEBAR'  select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.app_no = n.app_no and r.degree_code=@degreecode and r.stud_type=@dayscholar and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m, registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@dayscholar and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark)  and m.exam_code=@examCode and m.attempts>=1 ) select count(*) from registration r,applyn a where  r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@hostler and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0  and r.app_no = n.app_no and r.degree_code=@degreecode and r.stud_type=@hostler and r.batch_year=@batchyear and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m, registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@hostler and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark) and result <> '' and m.exam_code=@examCode and m.attempts>=1 )  select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and  a.app_no=r.app_no and a.sex=@girls and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no  and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark) and result <> ''  and m.exam_code=@examCode and m.attempts>=1 )  select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@boys and cc=0 and delflag=0 and exam_flag <> 'DEBAR'  select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode  and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no  and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and internal_mark <> 0  and external_mark <> 0 and (actual_internal_mark <=@minintmark or actual_external_mark <= @minextmark )and  m.exam_code=@examCode and m.attempts>=1 )  End End End Else begin if(@sections !='')  begin if(@quota !='') begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.seattype=@quota and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n  where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and m.exam_code=@examCode and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar'  and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and";
            strcreateoralter = strcreateoralter + " m.grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade ) and result <> ''   and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections) End Else  begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear  and a.app_no=r.app_no and r.stud_type=@dayscholar and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and  r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.app_no = n.app_no and  r.degree_code=@degreecode and r.stud_type=@dayscholar and r.batch_year=@batchyear and m.exam_code=@examCode and r.sections=@sections and m.roll_no not in (select distinct m.roll_no  from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@dayscholar and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and m.grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade) and  m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@hostler and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and  r.delflag=0 and exam_flag<>'debar' and cc=0  and r.app_no = n.app_no and r.degree_code=@degreecode and  r.batch_year=@batchyear  and m.exam_code=@examCode and r.stud_type=@hostler and r.sections=@sections and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@hostler and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and m.grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade)  and m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections )  select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@girls and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where  m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and r.sections=@sections and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m, registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0  and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and m.grade in (select mark_grade from grade_master where @mintot  between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade) and  m.exam_code=@examCode and m.attempts>=1 and r.sections=@sections) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@boys and cc=0 and delflag=0 and exam_flag <> 'DEBAR' and r.sections=@sections  select count(distinct m.roll_no) from mark_entry m, registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys  and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and r.sections=@sections and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no  from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar'  and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear   and result <> '' and m.grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade) and m.exam_code=@examCode  and m.attempts>=1 and r.sections=@sections )  End End Else begin if(@quota !='') begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.seattype=@quota and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and  r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no  and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.seattype=@quota and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and m.grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade)  and m.exam_code=@examCode and m.attempts>=1 ) End Else begin select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@dayscholar and cc=0 and delflag=0 and exam_flag <> 'DEBAR'  select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.app_no = n.app_no and r.degree_code=@degreecode and r.stud_type=@dayscholar and r.batch_year=@batchyear and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m, registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and  r.stud_type=@dayscholar and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear and    result <> '' and m.grade in (select mark_grade from grade_master where @mintot between frange and trange and  degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade)  and m.exam_code=@examCode  and m.attempts>=1 ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and r.stud_type=@hostler and cc=0 and delflag=0 and exam_flag <> 'DEBAR'  select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0  and r.app_no = n.app_no and r.degree_code=@degreecode and r.stud_type=@hostler and r.batch_year=@batchyear and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n  where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and r.stud_type=@hostler and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear   and result <> '' and m.grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade)  and m.exam_code=@examCode and m.attempts>=1 ) select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and a.app_no=r.app_no and a.sex=@girls and cc=0 and delflag=0 and exam_flag <> 'DEBAR'  select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and  r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@girls and r.app_no = n.app_no and r.degree_code=@degreecode  and r.batch_year=@batchyear  and result <> '' and m.grade in (select mark_grade from grade_master where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade)  and m.exam_code=@examCode and m.attempts>=1 )  select count(*) from registration r,applyn a where r.degree_code=@degreecode and r.batch_year=@batchyear and  a.app_no=r.app_no and a.sex=@boys and cc=0 and delflag=0 and exam_flag <> 'DEBAR' select count(distinct m.roll_no) from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and  r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode  and r.batch_year=@batchyear  and m.exam_code=@examCode and m.roll_no not in (select distinct m.roll_no from mark_entry m,registration r,applyn n where m.roll_no=r.roll_no and r.delflag=0 and exam_flag<>'debar' and cc=0   and n.sex=@boys and r.app_no = n.app_no and r.degree_code=@degreecode and r.batch_year=@batchyear  and result <> '' and m.grade in (select mark_grade from grade_master  where @mintot between frange and trange and degree_code=@degreecode and batch_year=@batchyear UNION SELECT  '' AS mark_grade) and m.exam_code=@examCode and m.attempts>=1 )  End End End End End";
            insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            strcreateoralter = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_spl_attendace'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "create table tbl_spl_attendace (college_code int,attype int,batch_year int,degree_code int,semester int,section nvarchar(10),entry_date datetime,period nvarchar(20),reason nvarchar(max))";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            //strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'coe_classification' AND COLUMN_NAME = 'grade'");
            //if (strcreateoralter == "0")
            //{
            //    strcreateoralter = "alter table coe_classification add grade nvarchar(10)";
            //    insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            //}
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'staff_selector' AND COLUMN_NAME = 'Stud_batch'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table staff_selector add Stud_batch nvarchar(50)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='tbl_question_master'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "create table tbl_question_master ( QuestionMasterPK bigint identity(1,1),subject_no int,syllabus nvarchar(150), mark double precision(8), is_descriptive int,question nvarchar(max), answer nvarchar(max),options nvarchar(max),type int,Already_exist  tinyint)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_bank_master' AND COLUMN_NAME = 'exam_date'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "ALTER TABLE tbl_question_bank_master ADD exam_date datetime";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' AND COLUMN_NAME = 'is_matching'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table tbl_question_master add is_matching bit";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' AND COLUMN_NAME = 'qmatching'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table tbl_question_master add qmatching nvarchar(max)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' AND COLUMN_NAME = 'file_name'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table tbl_question_master add file_name nvarchar(150)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' AND COLUMN_NAME = 'file_type'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table tbl_question_master add file_type nvarchar(150)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' AND COLUMN_NAME = 'quetion_image'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table tbl_question_master add quetion_image image";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' AND COLUMN_NAME = 'question'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = "alter table tbl_question_master alter column question nvarchar(max)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' AND COLUMN_NAME = 'options'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = "alter table tbl_question_master alter column options nvarchar(max)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' AND COLUMN_NAME = 'answer'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = "alter table tbl_question_master alter column answer nvarchar(max)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CAM_Calculation_Make_New_Test'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "create table CAM_Calculation_Make_New_Test(caluationID int identity primary key,New_Test_Name nvarchar(300),subject_no int,section varchar(100),convertedTo float,type int CONSTRAINT df_CAM_Calculation_Make_New_Test_type default 2)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CAM_Calculation_Make_New_Test' AND COLUMN_NAME = 'type'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "alter table CAM_Calculation_Make_New_Test ADD  type int CONSTRAINT df_CAM_Calculation_Make_New_Test_type default 2";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='CAM_Calculation_Test_Settings'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "create table CAM_Calculation_Test_Settings(cid int identity,caluationID int foreign key  references CAM_Calculation_Make_New_Test (caluationID),criteria_no numeric foreign key  references criteriaforinternal (Criteria_no),subject_no int,section varchar(100),convertedTo float)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='Test_Comparision_Settings'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "create table Test_Comparision_Settings(comaparisionID int identity primary key,comparisionName nvarchar(500),subject_no int,section varchar(100),convertedTo float)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='ToTest_Comparision'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "create table ToTest_Comparision(ToID int Identity primary key,criteria_no numeric null CONSTRAINT FK_ToTest_Comparision_criteria_no foreign key  references criteriaforinternal (Criteria_no),criteria_no_New int null  CONSTRAINT FK_ToTest_Comparision_criteria_no_New foreign key  references CAM_Calculation_Make_New_Test (caluationID) ,comaparisionID int CONSTRAINT FK_ToTest_Comparision_comaparisionID foreign key  references Test_Comparision_Settings (comaparisionID),convertedTo float,type int,Constraint CK_ToTest_Comparision_Criteria_no_Criteria_noNew CHECK(case when Criteria_no is NULL then 1 else 0 end+case when criteria_no_New is NULL then 1 else 0 end =1))";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'sub_lab'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table subject add sub_lab int";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'subject' AND COLUMN_NAME = 'subjectpriority'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table subject alter column subjectpriority int";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stucon' AND COLUMN_NAME = 'Remark'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " Alter table  stucon add Remark nvarchar(500)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stucon' AND COLUMN_NAME = 'ack_remarks'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " alter table stucon add ack_remarks nvarchar(100)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stucon' AND COLUMN_NAME = 'Remark'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = "   alter table stucon alter column  Remark nvarchar(max)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stucon' AND COLUMN_NAME = 'ack_remarks'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = " alter table stucon Alter column ack_remarks nvarchar(max)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'tbl_question_master'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'tbl_question_master'");
                if (strcreateoralter != "0")
                {
                    string pknull = d2.GetFunction(" SELECT Col.Column_Name from INFORMATION_SCHEMA.TABLE_CONSTRAINTS Tab, INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE Col WHERE Col.Constraint_Name = Tab.Constraint_Name AND Col.Table_Name = Tab.Table_Name AND Constraint_Type = 'PRIMARY KEY' AND Col.Table_Name = 'tbl_question_master' and col.COLUMN_NAME='QuestionMasterPK'");
                    string constrain = string.Empty; int up = 0;
                    if (pknull.Trim() == "0")
                    {
                        constrain = " alter table tbl_question_master add Constraint Pk_tbl_question_master_QuestionMasterPK primary key (QuestionMasterPK)";
                        up = d2.update_method_wo_parameter(constrain, "text");
                        constrain = string.Empty;
                        constrain = " alter table tbl_question_master add constraint DF_tbl_question_master_is_Matching default 0  for is_Matching";
                        up = d2.update_method_wo_parameter(constrain, "text");
                    }
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' AND COLUMN_NAME = 'QuestionType'");
                if (strcreateoralter == "0")
                {
                    strcreateoralter = " alter table tbl_question_master add QuestionType tinyint";
                    insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' AND COLUMN_NAME = 'QuestionSubType'");
                if (strcreateoralter == "0")
                {
                    strcreateoralter = " alter table tbl_question_master add QuestionSubType tinyint";
                    insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' AND COLUMN_NAME = 'totalChoice'");
                if (strcreateoralter == "0")
                {
                    strcreateoralter = " alter table tbl_question_master add totalChoice int";
                    insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' AND COLUMN_NAME = 'question'");
                if (strcreateoralter != "0")
                {
                    strcreateoralter = " alter table tbl_question_master alter column question nvarchar(max)";
                    insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' AND COLUMN_NAME = 'options'");
                if (strcreateoralter != "0")
                {
                    strcreateoralter = " alter table tbl_question_master alter column options nvarchar(max)";
                    insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' AND COLUMN_NAME = 'answer'");
                if (strcreateoralter != "0")
                {
                    strcreateoralter = " alter table tbl_question_master alter column answer nvarchar(max)";
                    insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
                }
            }
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.tables WHERE TABLE_NAME = 'Exist_questions'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " create table Exist_questions ( Exist_questionPK  bigint identity(1,1), syllabus nvarchar(150), Test_code nvarchar(150),subject_no  int,Must_attend nvarchar(150), Section nvarchar(150), QuestionMasterFK int,is_internal  tinyint,Exam_month nvarchar(150),Exam_year nvarchar(150))";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Exist_questions'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Exist_questions' AND COLUMN_NAME = 'QNo'");
                if (strcreateoralter == "0")
                {
                    strcreateoralter = " ALTER TABLE Exist_questions  ADD QNo int";
                    insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Exist_questions' AND COLUMN_NAME = 'section_name'");
                if (strcreateoralter == "0")
                {
                    strcreateoralter = "    ALTER TABLE Exist_questions  ADD section_name nvarchar(max)";
                    insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
                }
            }
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'QuestionsChoice'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " create table QuestionsChoice(choiceID bigint identity primary key,QuestionID bigint constraint FK_QuestionsChoice_QuestionID foreign key references tbl_question_master(QuestionMasterPK),choiceNo int,QChoice nvarchar(max),QChoiceImage Image,isAnswer bit Constraint DF_QuestionsChoice_isAnswer Default 0,QMatchR nvarchar(max),QChoiceImageR Image, isMatching bit Constraint DF_QuestionsChoice_isMatching Default 0)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Test_Comparision_Settings'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " create table Test_Comparision_Settings(comaparisionID int identity primary key,comparisionName nvarchar(500),subject_no int,section varchar(100),convertedTo float)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CAM_Calculation_Make_New_Test'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " create table CAM_Calculation_Make_New_Test(caluationID int identity primary key,New_Test_Name nvarchar(300),subject_no int,section varchar(100),convertedTo float,type int CONSTRAINT df_CAM_Calculation_Make_New_Test_type default 2)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CAM_Calculation_Make_New_Test'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'CAM_Calculation_Make_New_Test' AND COLUMN_NAME = 'type'");
                if (strcreateoralter == "0")
                {
                    strcreateoralter = " alter table CAM_Calculation_Make_New_Test ADD  type int CONSTRAINT df_CAM_Calculation_Make_New_Test_type default 2";
                    insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
                }
            }
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'CAM_Calculation_Test_Settings'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " create table CAM_Calculation_Test_Settings(cid int identity,caluationID int foreign key  references CAM_Calculation_Make_New_Test (caluationID),criteria_no numeric foreign key  references criteriaforinternal (Criteria_no),subject_no int,section varchar(100),convertedTo float)";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'FromTest_Comparision'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "  create table FromTest_Comparision(FromID int Identity primary key,criteria_no numeric null CONSTRAINT FK_FromTest_Comparision_criteria_no foreign key  references criteriaforinternal (Criteria_no),criteria_no_New int null CONSTRAINT FK_FromTest_Comparision_criteria_no_New  foreign key  references CAM_Calculation_Make_New_Test (caluationID) ,comaparisionID int  CONSTRAINT FK_FromTest_Comparision_comaparisionID foreign key  references Test_Comparision_Settings (comaparisionID),convertedTo float,type int,Constraint CK_FromTest_Comparision_Criteria_no_Criteria_noNew CHECK(case when Criteria_no is NULL then 1 else 0 end+case when criteria_no_New is NULL then 1 else 0 end =1))";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'ToTest_Comparision'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " create table ToTest_Comparision(ToID int Identity primary key,criteria_no numeric null CONSTRAINT FK_ToTest_Comparision_criteria_no foreign key  references criteriaforinternal (Criteria_no),criteria_no_New int null  CONSTRAINT FK_ToTest_Comparision_criteria_no_New foreign key  references CAM_Calculation_Make_New_Test (caluationID) ,comaparisionID int CONSTRAINT FK_ToTest_Comparision_comaparisionID foreign key  references Test_Comparision_Settings (comaparisionID),convertedTo float,type int,Constraint CK_ToTest_Comparision_Criteria_no_Criteria_noNew CHECK(case when Criteria_no is NULL then 1 else 0 end+case when criteria_no_New is NULL then 1 else 0 end =1))";
                insalter = d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'questionwise_marksentry'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "  create table questionwise_marksentry(subject_no int,Questionentryid nvarchar(50),roll_no nvarchar(50),mark_obtained float)";
                d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = string.Empty;
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'questionwise_marksentry'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'questionwise_marksentry' AND COLUMN_NAME = 'isinternal'");
                if (strcreateoralter == "0")
                {
                    strcreateoralter = " alter table questionwise_marksentry add isinternal int";
                    d2.update_method_wo_parameter(strcreateoralter, "Text");
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'questionwise_marksentry' AND COLUMN_NAME = 'criteria_no'");
                if (strcreateoralter == "0")
                {
                    strcreateoralter = " alter table questionwise_marksentry add criteria_no int";
                    d2.update_method_wo_parameter(strcreateoralter, "Text");
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'questionwise_marksentry' AND COLUMN_NAME = 'exam_month'");
                if (strcreateoralter == "0")
                {
                    strcreateoralter = " alter table questionwise_marksentry add exam_month int";
                    d2.update_method_wo_parameter(strcreateoralter, "Text");
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'questionwise_marksentry' AND COLUMN_NAME = 'exam_year'");
                if (strcreateoralter == "0")
                {
                    strcreateoralter = " alter table questionwise_marksentry add exam_year nvarchar(max)";
                    d2.update_method_wo_parameter(strcreateoralter, "Text");
                }
            }
            strcreateoralter = string.Empty;
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Condonation_Fee'");
            if (strcreateoralter.Trim() != "0")
            {
                strcreateoralter = string.Empty;
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Condonation_Fee' AND COLUMN_NAME = 'isDays'");
                if (strcreateoralter == "0")
                {
                    strcreateoralter = " alter table Condonation_Fee add isDays bit Constraint DF_Condonation_Fee_isDays Default 0";
                    d2.update_method_wo_parameter(strcreateoralter, "Text");
                }
            }
            strcreateoralter = string.Empty;
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'applyn'");
            if (strcreateoralter.Trim() != "0")
            {
                strcreateoralter = string.Empty;
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'NominAppli'");
                if (strcreateoralter == "0")
                {
                    strcreateoralter = " alter table applyn add NominAppli int not null constraint defCon default 0 ";
                    d2.update_method_wo_parameter(strcreateoralter, "Text");
                }
            }
            strcreateoralter = string.Empty;
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'studbankdet'");
            if (strcreateoralter.Trim() != "0")
            {
                strcreateoralter = string.Empty;
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'studbankdet' AND COLUMN_NAME = 'BankName'");
                if (strcreateoralter != "0")
                {
                    strcreateoralter = "   alter table studbankdet alter column BankName bigint ";
                    d2.update_method_wo_parameter(strcreateoralter, "Text");
                }
            }
            strcreateoralter = string.Empty;
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'ST_Student_Transfer'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " Create Table ST_Student_Transfer (StudentTransferPK bigint identity (1,1) Primary key, AppNo bigint,TransferDate datetime,TransferTime datetime,FromDegree bigint,Todegree bigint,FromSection varchar(100),ToSection varchar(100),FromCollege int,Tocollege int)";
                d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = string.Empty;
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'AllStudentAttendanceReport'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = " Create Table AllStudentAttendanceReport(AppNo bigint, DateofAttendance datetime,MLeaveCode int,ELeaveCode int)";
                d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = string.Empty;
            string alterqry = string.Empty;
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Attendance'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = string.Empty;
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd1d10'");
                if (strcreateoralter == "0")
                {
                    alterqry = " Alter table Attendance add [d1d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd2d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d2d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd3d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d3d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd4d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d4d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd5d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d5d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd6d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d6d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd7d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d7d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd8d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d8d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd9d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d9d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd10d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d10d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd11d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d11d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd12d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d12d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd13d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d13d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd14d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d14d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd15d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d15d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd16d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d16d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd17d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d17d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd18d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d18d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd19d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d19d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd20d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d20d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd21d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d21d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd22d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d22d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd23d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d23d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd24d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d24d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd25d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d25d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd26d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d26d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd27d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d27d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd28d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d28d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd29d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d29d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd30d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d30d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'd31d10'");
                if (strcreateoralter == "0")
                {
                    alterqry += " Alter table Attendance add [d31d10] tinyint";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'Att_App_no'");
                if (strcreateoralter == "0")
                {
                    alterqry += "  Alter Table attendance Add  Att_App_no Bigint ";
                }
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance' AND COLUMN_NAME = 'Att_CollegeCode'");
                if (strcreateoralter == "0")
                {
                    alterqry += "    Alter Table attendance Add  Att_CollegeCode int ";
                }
                strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'attendance_withreason'");
                if (strcreateoralter != "0")
                {
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd1d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += "  Alter table attendance_withreason add [d1d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd2d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d2d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd3d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d3d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd4d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d4d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd5d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d5d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd6d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d6d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd7d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d7d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd8d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d8d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd9d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d9d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd10d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d10d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd11d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d11d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd12d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d12d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd13d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d13d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd14d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d14d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd15d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d15d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd16d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d16d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd17d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d17d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd18d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d18d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd19d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d19d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd20d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d20d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd21d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d21d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd22d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d22d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd23d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d23d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd24d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d24d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd25d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d25d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd26d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d26d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd27d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d27d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd28d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d28d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd29d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d29d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd30d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d30d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'attendance_withreason' AND COLUMN_NAME = 'd31d10'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += " Alter table attendance_withreason add [d31d10] NVARCHAR(200)";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance_withreason' AND COLUMN_NAME = 'AtWr_App_no'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += "  Alter Table Attendance_withreason Add  AtWr_App_no Bigint ";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Attendance_withreason' AND COLUMN_NAME = 'AttWr_CollegeCode'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += "   Alter Table Attendance_withreason Add  AttWr_CollegeCode int  ";
                    }
                }
                strcreateoralter = string.Empty;
                strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'specialhr_attendance'");
                if (strcreateoralter != "0")
                {
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'specialhr_attendance' AND COLUMN_NAME = 'SpHr_App_no'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += "  Alter Table specialhr_attendance Add  SpHr_App_no Bigint ";
                    }
                    strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'specialhr_attendance' AND COLUMN_NAME = 'SpHr_CollegeCode'");
                    if (strcreateoralter == "0")
                    {
                        alterqry += "   Alter Table specialhr_attendance Add  SpHr_CollegeCode int  ";
                    }
                }
                if (alterqry.Trim() != "")
                {
                    d2.update_method_wo_parameter(alterqry, "text");
                }
            }
            strcreateoralter = d2.GetFunction(" SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Registration'");
            if (strcreateoralter != "0")
            {
                strcreateoralter = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Registration' AND COLUMN_NAME = 'Post_Matric_Scholarship'");
                if (strcreateoralter == "0")
                {
                    alterqry = " Alter table Registration Add Post_Matric_Scholarship bit";
                    d2.update_method_wo_parameter(alterqry, "text");
                }
            }
            strcreateoralter = string.Empty;
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'AttendanceTimingupdate'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "  create table AttendanceTimingupdate ( College_code int, Action varchar(100), Timestamp datetime) ";
                d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            strcreateoralter = string.Empty;
            strcreateoralter = d2.GetFunction("  SELECT TABLE_NAME  FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Attendanceblockbox_temp'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = "  create table Attendanceblockbox_temp( College_code int, Degree_code varchar(100), Sections nvarchar(10), Timestamp datetime) ";
                d2.update_method_wo_parameter(strcreateoralter, "Text");
            }
            string triggername = d2.GetFunction(" select  [tgr].[name] from sysobjects tgr join sysobjects tbl on tgr.parent_obj = tbl.id WHERE tgr.xtype = 'TR' and tgr.name='AttendanceTimingupdate_trigger'");
            if (triggername.Trim() == "0")
            {
                strcreateoralter = string.Empty;
                strcreateoralter = " Create TRIGGER AttendanceTimingupdate_trigger on attendance AFTER INSERT, UPDATE, DELETE AS begin declare @college_code int, @action varchar(100),@date_time nvarchar(100),@rollno nvarchar(30),@degree_code bigint,@section nvarchar(10); SELECT @rollno = INSERTED.roll_no FROM INSERTED SELECT @college_code= college_code, @section=Sections,@degree_code=degree_code FROM Registration  where Roll_No=@rollno IF EXISTS (select * from inserted) AND NOT EXISTS (select * from deleted)    set @action='inserted' else    set @action='Updated' set @date_time=getdate(); if(@college_code!='') begin if exists(select*from AttendanceTimingupdate where college_code=@college_code and convert(varchar(10), Timestamp,103)=CONVERT(varchar(10), GETDATE(), 103)) update AttendanceTimingupdate set Timestamp=@date_time where college_code=@college_code and convert(varchar(10), Timestamp,103)=CONVERT(varchar(10), GETDATE(), 103) else insert into AttendanceTimingupdate(College_code,Action,Timestamp) values (@college_code,@action,getdate()); if(@degree_code!='') begin if exists(select*from Attendanceblockbox_temp where college_code=@college_code and degree_code=@degree_code and Sections=@section and convert(varchar(10), Timestamp,103)=CONVERT(varchar(10), GETDATE(), 103) ) update Attendanceblockbox_temp set Timestamp=getdate() where college_code=@college_code and convert(varchar(10), Timestamp,103)=CONVERT(varchar(10), GETDATE(), 103) and degree_code=@degree_code and Sections=@section else insert into Attendanceblockbox_temp(College_code,Degree_code,Sections,Timestamp) values (@college_code,@degree_code,@section,getdate()); end end end";
            }
            else
            {
                strcreateoralter = string.Empty;
                strcreateoralter = " Alter TRIGGER AttendanceTimingupdate_trigger on attendance AFTER INSERT, UPDATE, DELETE AS begin declare @college_code int, @action varchar(100),@date_time nvarchar(100),@rollno nvarchar(30),@degree_code bigint,@section nvarchar(10); SELECT @rollno = INSERTED.roll_no FROM INSERTED SELECT @college_code= college_code, @section=Sections,@degree_code=degree_code FROM Registration  where Roll_No=@rollno IF EXISTS (select * from inserted) AND NOT EXISTS (select * from deleted)    set @action='inserted' else    set @action='Updated' set @date_time=getdate(); if(@college_code!='') begin if exists(select*from AttendanceTimingupdate where college_code=@college_code and convert(varchar(10), Timestamp,103)=CONVERT(varchar(10), GETDATE(), 103)) update AttendanceTimingupdate set Timestamp=@date_time where college_code=@college_code and convert(varchar(10), Timestamp,103)=CONVERT(varchar(10), GETDATE(), 103) else insert into AttendanceTimingupdate(College_code,Action,Timestamp) values (@college_code,@action,getdate()); if(@degree_code!='') begin if exists(select*from Attendanceblockbox_temp where college_code=@college_code and degree_code=@degree_code and Sections=@section and convert(varchar(10), Timestamp,103)=CONVERT(varchar(10), GETDATE(), 103) ) update Attendanceblockbox_temp set Timestamp=getdate() where college_code=@college_code and convert(varchar(10), Timestamp,103)=CONVERT(varchar(10), GETDATE(), 103) and degree_code=@degree_code and Sections=@section else insert into Attendanceblockbox_temp(College_code,Degree_code,Sections,Timestamp) values (@college_code,@degree_code,@section,getdate()); end end end";
            }
            if (strcreateoralter.Trim() != "")
            {
                d2.update_method_wo_parameter(strcreateoralter, "text");
            }
            strcreateoralter = string.Empty;
            strcreateoralter = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_ins_upd_student_attendance_Dead'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = string.Empty;
                strcreateoralter = "  Create procedure sp_ins_upd_student_attendance_Dead (@Att_App_no BigInt,@Att_CollegeCode int,@rollno nvarchar(50),@monthyear int, @columnname nvarchar(500), @colvalues nvarchar(500), @coulmnvalue nvarchar(1000)) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY declare @Query nvarchar(4000) declare @ParmDefinition nvarchar(500); set @Query = ' if exists(select * from attendance where roll_no=@rollno and month_year=@monthyear and Att_App_no=@Att_App_no and Att_CollegeCode=@Att_CollegeCode )  update attendance set  '+@coulmnvalue+' where roll_no=@rollno and month_year=@monthyear  and Att_App_no=@Att_App_no and Att_CollegeCode=@Att_CollegeCode  Else insert into attendance(Att_App_no,Att_CollegeCode,roll_no,month_year,'+ @columnname+') values (@Att_App_no,@Att_CollegeCode,@rollno, @monthyear,'+@colvalues+')' set @ParmDefinition =N'@rollno varchar(50),@monthyear int, @columnname nvarchar(500),@colvalues nvarchar(500), @coulmnvalue nvarchar(1000),@Att_App_no BigInt,@Att_CollegeCode int' exec sp_executesql @Query, @ParmDefinition, @rollno = @rollno, @monthyear = @monthyear,@columnname=@columnname,  @colvalues=@colvalues,@coulmnvalue=@coulmnvalue, @Att_App_no=@Att_App_no, @Att_CollegeCode=@Att_CollegeCode COMMIT TRANSACTION   END  TRY    BEGIN     CATCH      Print 'Rollback Transaction'       ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY  '00:00:00.05' GOTO RETRY  End END CATCH End";
            }
            else
            {
                strcreateoralter = string.Empty;//alter modified by sudhagar 14.08.2017
                strcreateoralter = " alter procedure sp_ins_upd_student_attendance_Dead (@Att_App_no BigInt,@Att_CollegeCode int,@rollno nvarchar(50),@monthyear int,   @columnname nvarchar(max), @colvalues nvarchar(max), @coulmnvalue nvarchar(max)) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY declare @Query nvarchar(max) declare @ParmDefinition nvarchar(max); set @Query = ' if exists(select * from attendance where roll_no=@rollno and month_year=@monthyear and Att_App_no=@Att_App_no and Att_CollegeCode=@Att_CollegeCode )  update attendance set  '+@coulmnvalue+' where roll_no=@rollno and month_year=@monthyear  and Att_App_no=@Att_App_no and Att_CollegeCode=@Att_CollegeCode  Else insert into attendance(Att_App_no,Att_CollegeCode,roll_no,month_year,'+ @columnname+') values (@Att_App_no,@Att_CollegeCode,@rollno, @monthyear,'+@colvalues+')' set @ParmDefinition =N'@rollno varchar(50),@monthyear int, @columnname nvarchar(max),@colvalues nvarchar(max), @coulmnvalue nvarchar(max),@Att_App_no BigInt,@Att_CollegeCode int' exec sp_executesql @Query, @ParmDefinition, @rollno = @rollno, @monthyear = @monthyear,@columnname=@columnname,  @colvalues=@colvalues,@coulmnvalue=@coulmnvalue,@Att_App_no=@Att_App_no,@Att_CollegeCode=@Att_CollegeCode COMMIT TRANSACTION   END  TRY    BEGIN     CATCH      Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY  '00:00:00.05' GOTO RETRY  End END CATCH End";
                //strcreateoralter = "  alter procedure sp_ins_upd_student_attendance_Dead (@Att_App_no BigInt,@Att_CollegeCode int,@rollno nvarchar(50),@monthyear int, @columnname nvarchar(500), @colvalues nvarchar(500), @coulmnvalue nvarchar(1000)) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY declare @Query nvarchar(4000) declare @ParmDefinition nvarchar(500); set @Query = ' if exists(select * from attendance where roll_no=@rollno and month_year=@monthyear and Att_App_no=@Att_App_no and Att_CollegeCode=@Att_CollegeCode )  update attendance set  '+@coulmnvalue+' where roll_no=@rollno and month_year=@monthyear  and Att_App_no=@Att_App_no and Att_CollegeCode=@Att_CollegeCode  Else insert into attendance(Att_App_no,Att_CollegeCode,roll_no,month_year,'+ @columnname+') values (@Att_App_no,@Att_CollegeCode,@rollno, @monthyear,'+@colvalues+')' set @ParmDefinition =N'@rollno varchar(50),@monthyear int, @columnname nvarchar(500),@colvalues nvarchar(500), @coulmnvalue nvarchar(1000),@Att_App_no BigInt,@Att_CollegeCode int' exec sp_executesql @Query, @ParmDefinition, @rollno = @rollno, @monthyear = @monthyear,@columnname=@columnname,  @colvalues=@colvalues,@coulmnvalue=@coulmnvalue,@Att_App_no=@Att_App_no,@Att_CollegeCode=@Att_CollegeCode COMMIT TRANSACTION   END  TRY    BEGIN     CATCH      Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY  '00:00:00.05' GOTO RETRY  End END CATCH End";
            }
            if (strcreateoralter.Trim() != "")
            {
                d2.update_method_wo_parameter(strcreateoralter, "text");
            }
            strcreateoralter = string.Empty;
            strcreateoralter = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_ins_upd_student_attendance_reason'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = string.Empty;
                strcreateoralter = " create procedure sp_ins_upd_student_attendance_reason  @columnname varchar(50),@AtWr_App_no BIgInt,@AttWr_CollegeCode Int, @roll_no nvarchar(100), @month_year int, @values nvarchar(100) as begin declare @Query nvarchar(4000) declare @ParmDefinition nvarchar(500); set @Query = '  if exists(select * from Attendance_withreason where roll_no=@roll_no and month_year=@month_year and AtWr_App_no =@AtWr_App_no and AttWr_CollegeCode=@AttWr_CollegeCode )    update Attendance_withreason set' + quotename(@columnname) +' = @values where roll_no=@roll_no and month_year=@month_year  and AtWr_App_no =@AtWr_App_no and AttWr_CollegeCode=@AttWr_CollegeCode   Else   insert into Attendance_withreason(AtWr_App_no,AttWr_CollegeCode,roll_no,month_year,' + quotename(@ColumnName) +')   values (@AtWr_App_no,@AttWr_CollegeCode,@roll_no, @month_year,@values)'  set @ParmDefinition =N'@columnname varchar(50),@AtWr_App_no BIgInt,@AttWr_CollegeCode Int,@roll_no nvarchar(100), @month_year int,@values nvarchar(100)'  exec sp_executesql @Query, @ParmDefinition, @columnname = @columnname,@AtWr_App_no =@AtWr_App_no ,@AttWr_CollegeCode=@AttWr_CollegeCode, @roll_no = @roll_no,@month_year=@month_year,@values=@values End";
            }
            else
            {
                strcreateoralter = string.Empty;
                strcreateoralter = " Alter procedure sp_ins_upd_student_attendance_reason  @columnname varchar(50),@AtWr_App_no BIgInt,@AttWr_CollegeCode Int, @roll_no nvarchar(100), @month_year int, @values nvarchar(100) as begin declare @Query nvarchar(4000) declare @ParmDefinition nvarchar(500); set @Query = '  if exists(select * from Attendance_withreason where roll_no=@roll_no and month_year=@month_year and AtWr_App_no =@AtWr_App_no and AttWr_CollegeCode=@AttWr_CollegeCode )    update Attendance_withreason set' + quotename(@columnname) +' = @values where roll_no=@roll_no and month_year=@month_year  and AtWr_App_no =@AtWr_App_no and AttWr_CollegeCode=@AttWr_CollegeCode   Else   insert into Attendance_withreason(AtWr_App_no,AttWr_CollegeCode,roll_no,month_year,' + quotename(@ColumnName) +')   values (@AtWr_App_no,@AttWr_CollegeCode,@roll_no, @month_year,@values)'  set @ParmDefinition =N'@columnname varchar(50),@AtWr_App_no BIgInt,@AttWr_CollegeCode Int,@roll_no nvarchar(100), @month_year int,@values nvarchar(100)'  exec sp_executesql @Query, @ParmDefinition, @columnname = @columnname,@AtWr_App_no =@AtWr_App_no ,@AttWr_CollegeCode=@AttWr_CollegeCode, @roll_no = @roll_no,@month_year=@month_year,@values=@values End";
            }
            if (strcreateoralter.Trim() != "")
            {
                d2.update_method_wo_parameter(strcreateoralter, "text");
            }
            strcreateoralter = string.Empty;
            strcreateoralter = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_ins_upd_student_attendance'");
            if (strcreateoralter == "0")
            {
                strcreateoralter = string.Empty;
                strcreateoralter = " create procedure sp_ins_upd_student_attendance  @columnname varchar(50),@Att_App_no BIgInt,@Att_CollegeCode Int, @roll_no nvarchar(100), @month_year int, @values tinyint as begin declare @Query nvarchar(4000) declare @ParmDefinition nvarchar(500); set @Query = '  if exists(select Att_App_no from attendance where roll_no=@roll_no and month_year=@month_year  and Att_App_no=@Att_App_no and Att_CollegeCode=@Att_CollegeCode )    update attendance set ' + quotename(@columnname) +' = @values where roll_no=@roll_no and month_year=@month_year  and Att_App_no=@Att_App_no and Att_CollegeCode=@Att_CollegeCode   Else   insert into attendance(Att_App_no,Att_CollegeCode,roll_no,month_year,' + quotename(@ColumnName) +')   values (@Att_App_no,@Att_CollegeCode,@roll_no, @month_year,@values)'  set @ParmDefinition =N'@columnname varchar(50),@Att_App_no BIgInt,@Att_CollegeCode Int,@roll_no nvarchar(100), @month_year int,@values tinyint'  exec sp_executesql @Query, @ParmDefinition, @columnname = @columnname,@Att_App_no=@Att_App_no,@Att_CollegeCode=@Att_CollegeCode, @roll_no = @roll_no,@month_year=@month_year,@values=@values End";
            }
            else
            {
                strcreateoralter = string.Empty;
                strcreateoralter = " Alter procedure sp_ins_upd_student_attendance  @columnname varchar(50),@Att_App_no BIgInt,@Att_CollegeCode Int, @roll_no nvarchar(100), @month_year int, @values tinyint as begin declare @Query nvarchar(4000) declare @ParmDefinition nvarchar(500); set @Query = '  if exists(select Att_App_no from attendance where roll_no=@roll_no and month_year=@month_year  and Att_App_no=@Att_App_no and Att_CollegeCode=@Att_CollegeCode )    update attendance set ' + quotename(@columnname) +' = @values where roll_no=@roll_no and month_year=@month_year  and Att_App_no=@Att_App_no and Att_CollegeCode=@Att_CollegeCode   Else   insert into attendance(Att_App_no,Att_CollegeCode,roll_no,month_year,' + quotename(@ColumnName) +')   values (@Att_App_no,@Att_CollegeCode,@roll_no, @month_year,@values)'  set @ParmDefinition =N'@columnname varchar(50),@Att_App_no BIgInt,@Att_CollegeCode Int,@roll_no nvarchar(100), @month_year int,@values tinyint'  exec sp_executesql @Query, @ParmDefinition, @columnname = @columnname,@Att_App_no=@Att_App_no,@Att_CollegeCode=@Att_CollegeCode, @roll_no = @roll_no,@month_year=@month_year,@values=@values End";
            }
            if (strcreateoralter.Trim() != "")
            {
                d2.update_method_wo_parameter(strcreateoralter, "text");
            }
            //07.04.2017
            strcreateoralter = "";
            strcreateoralter = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'sp_upd_student_staff_selector'");
            type = "";
            procedureType = 0;
            procedureName = string.Empty;
            if (strcreateoralter == "0")
            {
                type = "Create ";
                procedureType = 0;
            }
            else
            {
                type = "Alter ";
                procedureType = 1;
            }
            strcreateoralter = " " + type + "  procedure sp_upd_student_staff_selector  (@subject_no int,  @staffcode nvarchar(50),  @roll_no nvarchar(50),  @subtype_no int,  @semester int,@paperOrder int=0) as  BEGIN  RETRY:  BEGIN TRANSACTION  BEGIN  TRY if(@paperOrder=0) begin select @paperOrder=paper_order from subjectChooser where roll_no=@roll_no and subject_no=@subject_no and semester=@semester and subtype_no=@subtype_no end if exists(select * from subjectChooser where roll_no= @roll_no and subject_no=@subject_no and semester=@semester and subtype_no=@subtype_no) update subjectChooser set staffcode=@staffcode ,paper_order=@paperOrder where roll_no=@roll_no and subject_no=@subject_no and semester=@semester  and subtype_no=@subtype_no COMMIT TRANSACTION  End  TRY   BEGIN   CATCH   Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205   BEGIN   WAITFOR DELAY '00:00:00.05'   GoTo RETRY   End   End   CATCH End ";

            //d2.update_method_wo_parameter(strcreateoralter, "text");
            ExecuteProcedure("sp_upd_student_staff_selector", strcreateoralter, procedureType);

            string procedureQ = "create procedure uspDeleteSubjectTypeSubjectChooser(@rollNo nvarchar(50),@semester int,@subjectTypeNo int) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY if exists (select * from subjectChooser where roll_no=@rollNo and semester=@semester and subtype_no=@subjectTypeNo) delete from subjectChooser where roll_no=@rollNo and semester=@semester and subtype_no=@subjectTypeNo COMMIT TRANSACTION  End  TRY  BEGIN  CATCH  Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205  BEGIN  WAITFOR DELAY '00:00:00.05'  GoTo RETRY  End  End  CATCH End";
            ExecuteProcedure("uspDeleteSubjectTypeSubjectChooser", procedureQ, 0);

            procedureQ = "CREATE procedure uspInsUpSubjectChooser (@rollNo nvarchar(50), @semester int, @subjectNo int, @subjectTypeNo int, @paperOrder int, @studbatch nvarchar(50), @grpCell nvarchar(50),@staffCode nvarchar(max)) as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY if exists(select * from Subjectchooser where roll_no=@rollNo and subject_no=@subjectNo and semester=@semester and subtype_no=@subjectTypeNo)  update subjectChooser set paper_order=@paperOrder,grp_cell=@grpCell,staffcode=@staffCode where roll_no=@rollNo and subject_no=@subjectNo and semester =@semester and subtype_no=@subjectTypeNo Else insert into Subjectchooser(semester,roll_no,subject_no,paper_order,subtype_no,batch,grp_cell,staffcode) values(@semester,@rollNo,@subjectNo,@paperOrder,@subjectTypeNo,@studbatch,@grpCell,@staffCode)  COMMIT TRANSACTION  End  TRY  BEGIN   CATCH  Print 'Rollback Transaction' ROLLBACK TRANSACTION  IF ERROR_NUMBER() = 1205  BEGIN  WAITFOR DELAY '00:00:00.05'  GoTo RETRY  End  End  CATCH End";
            ExecuteProcedure("uspInsUpSubjectChooser", procedureQ, 0);

            procedureName = "PROC_STUD_ALL_SUBMARK";
            procedureType = 0;//0 - Create ; 1 - Alter
            procedureQ = string.Empty;
            if (IsStoredProcedureAvailable(procedureName))
            {
                procedureType = 1;
            }
            else
            {
                procedureType = 0;
            }
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + " procedure PROC_STUD_ALL_SUBMARK ( @batchyear varchar(50), @degreecode varchar(50),  @criteria_no varchar(20),  @sections varchar(200),@filterwithsection varchar(max), @filterwithoutsection varchar(max))  as BEGIN DECLARE @sqlCommand varchar(max) if (@sections!='')  BEGIN SET @sqlCommand = 'select distinct len(r.Roll_No),r.Roll_No as roll,r.Reg_No as regno,r.stud_name as studname,r.stud_type as studtype, r.App_No as ApplicationNumber,rt.marks_obtained as mark,s.subject_no,s.subject_code,s.subject_name,et.start_period, et.exam_date,et.duration,et.max_mark,et.min_mark,rt.exam_code from registration r, applyn a , result rt,exam_type et, subject s where '+ @filterwithsection EXEC (@sqlCommand) select distinct s.subject_no,s.subject_name,s.acronym,s.subject_code, staff_code,duration,convert(varchar(10),exam_date,103)as exam_date,convert(varchar(10),entry_date,103)as entry_date, max_mark,min_mark,r.exam_code from exam_type e,subject s,result r where e.subject_no=s.subject_no and e.exam_code= r.exam_code and criteria_no=@criteria_no and sections=@sections order by s.subject_no End Else BEGIN SET @sqlCommand = 'select distinct len(r.Roll_No),r.Roll_No as roll,r.Reg_No as regno,r.stud_name as studname,r.stud_type as studtype, r.App_No as ApplicationNumber,rt.marks_obtained as mark,s.subject_no,s.subject_code,s.subject_name,et.start_period, et.exam_date,et.duration,et.max_mark,et.min_mark,rt.exam_code from registration r, applyn a , result rt,exam_type et, subject s where '+ @filterwithoutsection EXEC (@sqlCommand) select distinct s.subject_no,s.subject_name,s.acronym,s.subject_code,staff_code,duration, convert(varchar(10),exam_date,103)as exam_date,convert(varchar(10),entry_date,103)as entry_date,max_mark,min_mark, r.exam_code from exam_type e,subject s,result r where e.subject_no=s.subject_no and e.exam_code= r.exam_code and criteria_no=@criteria_no  order by s.subject_no End End";
            ExecuteProcedure(procedureName, procedureQ, procedureType);

            string tableName = "StudentRegisterHistory";
            string executeQuery = "create table StudentRegisterHistory (idNo bigint constraint PK_StudentRegisterHistory_idNo primary key identity(1,1),App_no numeric(18,0) constraint FK_StudentRegisterHistory_App_no foreign key  references applyn(app_no),admissionDate DateTime not null constraint DF_StudentRegisterHistory_admissionDate  Default GetDate(),updatedDate DateTime not null constraint DF_StudentRegisterHistory_updatedDate Default GetDate(),Roll_no nvarchar(100),RegNo nvarchar(100),collegeCode numeric,BatchYear  smallint,degreeCode numeric,semester smallint,sections nvarchar(100) not null constraint DF_StudentRegisterHistory_sections default '',isLatest bit not null constraint DF_StudentRegisterHistory_isLatest default 1,RedoType tinyint constraint DF_StudentRegisterHistory_RedoType default 1)";
            ExecuteQuery(executeQuery, tableName);

            tableName = "RegistrationNew";
            executeQuery = "CREATE TABLE RegistrationNew(Roll_No nvarchar(25) NULL,App_No numeric(18, 0) NOT NULL,Current_Year smallint NULL,Current_Semester smallint NULL,Stud_Type nvarchar(50) NULL,Roll_Admit nvarchar(25) NOT NULL,RollNo_Flag bit NOT NULL,CC bit NOT NULL,DelFlag numeric(8, 0) NULL,	Access_Date datetime NULL,	Access_Time nvarchar(16) NULL,	Adm_Date datetime NULL,	Stud_Name nvarchar(100) NULL,	Reg_No nvarchar(25) NULL,	Batch_Year smallint NULL,	Exam_Flag nvarchar(50) NULL,	degree_code numeric(18, 0) NULL,	category_code numeric(18, 0) NULL,	tcno nvarchar(50) NULL,	tcdate datetime NULL,	pass nvarchar(25) NULL,	referby nvarchar(50) NULL,	LockInfo bit NULL,	mode numeric(18, 0) NULL,	Advisor varchar(50) NULL DEFAULT (''),	debar_reason varchar(20) NULL,	cardno varchar(20) NULL,	Sections nvarchar(50) NULL,	serialno numeric(18, 0) NULL,	lib_id nvarchar(50) NULL,	JMonth smallint NULL,	JYear smallint NULL,	Attempts numeric(18, 0) NULL,	Rejoin_Status numeric(18, 0) NULL,	Regulation numeric(18, 0) NULL,	Exam_Elg nvarchar(50) NULL,	Add_Batch nvarchar(50) NULL,	Fingerprint1 ntext NULL,	Fingerprint2 ntext NULL,	Fingerprint3 ntext NULL,	Branch_code numeric(18, 0) NULL,group_code numeric(18, 0) NULL,	pinnumber varchar(50) NULL,	Mark_serialno numeric(18, 0) NULL,	apply_degree_code numeric(18, 0) NULL,	cons_date datetime NULL,	acr varchar(50) NULL,	batch_acr varchar(20) NULL,	roll_acr varchar(20) NULL,	Status bit NULL,	subdiv nvarchar(50) NULL,	Bus_RouteID nvarchar(30) NULL,Boarding nvarchar(50) NULL,	Consortium varchar(100) NULL,	PIN_No nvarchar(30) NULL,	PIN_Status numeric(18, 0) NULL,	college_code numeric(18, 0) NULL,	VehID nvarchar(30) NULL,	access_pinno nvarchar(100) NULL,	stud_log_pw varchar(128) NULL,	stud_father_pw varchar(128) NULL,	stud_mother_pw varchar(128) NULL,	Seat_No nvarchar(3) NULL,DeviceID nvarchar(50) NULL,	Univcode nvarchar(30) NULL,	OldCollegeCode varchar(30) NULL,	OldDegree_Code varchar(20) NULL,	Trans_PayType nvarchar(10) NULL,	finger_id int NULL,	Traveller_Date datetime NULL,	smart_serial_no varchar(100) NULL,	TransferDate datetime NULL,	TMRCode nvarchar(30) NULL,	AdmitedDegree nvarchar(30) NULL,	AdmitedYear nvarchar(30) NULL,	DateOfLeaving datetime NULL,	AcademicYear nvarchar(30) NULL,	TCSerialNo nvarchar(50) NULL,	isalumni bit NULL,	is_other_due int NULL,	is_fee_due int NULL,    IsCanceledStage bit NULL,	Post_Matric_Scholarship bit NULL,	IsSchemeAdmission bit NULL,	IsSchemeCode bigint NULL,	IsSchemeAmount decimal(12, 2) NULL,	isRedo bit NOT NULL,	SchemeDate datetime NULL,	hostel_admission_status tinyint NULL,	Is_Stud_Staff bit NULL,	staff_appl_id numeric(18, 0) NULL)";
            ExecuteQuery(executeQuery, tableName);

            tableName = "StudentRedoDetails";
            executeQuery = "Create Table StudentRedoDetails(StudentRedoPk bigint identity (1,1) constraint PK_StudentRedoDetails_StudentRedoPk primary key,Stud_AppNo bigint,DegreeCode int,BatchYear int,Semester tinyint,Sections varchar(5) not null constraint DF_StudentRedoDetails_sections default '',RedoType tinyint constraint DF_StudentRedoDetails_RedoType default 1,updatedDate DateTime not null constraint DF_StudentRedoDetails_updatedDate Default GetDate())";
            ExecuteQuery(executeQuery, tableName);

            procedureName = "uspStudentPromote";
            procedureType = 0;//0 - Create ; 1 - Alter
            procedureQ = string.Empty;
            if (IsStoredProcedureAvailable(procedureName))
            {
                procedureType = 1;
            }
            else
            {
                procedureType = 0;
            }
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + " PROCEDURE uspStudentPromote (@rollNo nvarchar(max), @regNo nvarchar(max), @OldCollegeCode varchar(100), @OldBatchYear varchar(100), @OldDegreeCode varchar(100), @OldSemester varchar(100), @NewCollegeCode varchar(100), @NewBatchYear varchar(100), @NewDegreeCode varchar(100), @NewSemester varchar(100), @studentAppNo int, @admitDate datetime=null, @OldSection varchar(300)='', @NewSection varchar(300)='', @schoolOrCollege tinyint, @redoType tinyint) /*  @schoolOrCollege : 0 - College; 1 - School; @redoType : 1 - Redo ; 2 - Previous Student History Details; */ AS BEGIN DECLARE @setValue int,@NewDeptCode int; RETRY:  BEGIN TRANSACTION BEGIN TRY  SET NOCOUNT ON if(@OldSection='') select @OldSection=LTRIM(RTRIM(ISNULL(sections,''))) from Registration where App_No=@studentAppNo  if(@NewSection='') select @NewSection=LTRIM(RTRIM(ISNULL(sections,''))) from Registration where App_No=@studentAppNo if(@admitDate=null) select @admitDate=ISNULL(Adm_Date,GETDATE()) from Registration where App_No=@studentAppNo SELECT  @NewDeptCode = dt.Dept_Code FROM Degree dg,Department dt,Course c WHERE c.Course_Id = dg.Course_Id AND dt.Dept_Code = dg.Dept_Code AND dg.Degree_Code = @NewDegreeCode IF (@redoType = 1) BEGIN IF NOT EXISTS (SELECT StudentRedoPk FROM StudentRedoDetails WHERE Stud_AppNo = @studentAppNo AND DegreeCode = @OldDegreeCode AND BatchYear = @OldBatchYear AND Semester = @OldSemester AND LTRIM(RTRIM(ISNULL(Sections, ''))) = @OldSection AND RedoType = @redoType)INSERT INTO StudentRedoDetails (Stud_AppNo, DegreeCode, BatchYear, Semester, Sections, RedoType, updatedDate) VALUES (@studentAppNo, @OldDegreeCode, @OldBatchYear, @OldSemester, @OldSection, @redoType, GETDATE()) UPDATE Registration SET college_code = @NewCollegeCode,degree_code = @NewDegreeCode,Batch_Year = @NewBatchYear,Current_Semester = @NewSemester,Branch_code = @NewDeptCode,isRedo = '1' WHERE App_No = @studentAppNo END ELSE IF (@redoType = 2) BEGIN SET @setValue = 2; if(@schoolOrCollege!=0) begin IF NOT EXISTS (SELECT  r.App_No FROM RegistrationNew r  WHERE r.Batch_Year = @OldBatchYear  AND r.degree_code = @OldDegreeCode  AND r.Current_Semester = @OldSemester  AND r.App_No = @studentAppNo AND r.college_code = @OldCollegeCode) BEGIN INSERT INTO RegistrationNew (Roll_No, App_No, Current_Year, Current_Semester, Stud_Type, Roll_Admit, RollNo_Flag, CC, DelFlag, Access_Date, Access_Time, Adm_Date, Stud_Name, Reg_No, Batch_Year, Exam_Flag, degree_code, category_code, tcno, tcdate, pass, referby, LockInfo, mode, Advisor, debar_reason, cardno, Sections, serialno, lib_id, JMonth, JYear, Attempts, Rejoin_Status, Regulation, Exam_Elg, Add_Batch, Fingerprint1, Fingerprint2, Fingerprint3, Branch_code, group_code, pinnumber, Mark_serialno, apply_degree_code, cons_date, acr, batch_acr, roll_acr, Status, subdiv, Bus_RouteID, Boarding, Consortium, PIN_No, PIN_Status, college_code, VehID, access_pinno, stud_log_pw, stud_father_pw, stud_mother_pw, Seat_No, DeviceID, Univcode, OldCollegeCode, OldDegree_Code, Trans_PayType, finger_id, Traveller_Date, smart_serial_no, TransferDate, TMRCode, AdmitedDegree, AdmitedYear, DateOfLeaving, AcademicYear, TCSerialNo, isalumni, is_other_due, is_fee_due, IsCanceledStage, Post_Matric_Scholarship, IsSchemeAdmission, IsSchemeCode, IsSchemeAmount, isRedo, SchemeDate, hostel_admission_status, Is_Stud_Staff, staff_appl_id) SELECT TOP 1 Roll_No,App_No, Current_Year,Current_Semester,Stud_Type,Roll_Admit,RollNo_Flag,CC,DelFlag,Access_Date,Access_Time,Adm_Date,Stud_Name,Reg_No,Batch_Year,Exam_Flag,degree_code,category_code,tcno,tcdate,pass,referby,LockInfo,mode,Advisor, debar_reason,cardno,Sections,serialno,lib_id,JMonth,JYear,Attempts,Rejoin_Status,Regulation,Exam_Elg,Add_Batch,Fingerprint1,Fingerprint2,Fingerprint3,Branch_code,group_code,pinnumber,Mark_serialno,apply_degree_code,cons_date,acr,batch_acr,roll_acr,Status,subdiv,Bus_RouteID,Boarding,Consortium,PIN_No,PIN_Status,college_code,VehID,access_pinno,stud_log_pw,stud_father_pw,stud_mother_pw,Seat_No,DeviceID,Univcode,OldCollegeCode,OldDegree_Code,Trans_PayType,finger_id,Traveller_Date,smart_serial_no,TransferDate,TMRCode,AdmitedDegree,AdmitedYear,DateOfLeaving,AcademicYear,TCSerialNo,isalumni,is_other_due,is_fee_due,IsCanceledStage,Post_Matric_Scholarship,IsSchemeAdmission,IsSchemeCode,IsSchemeAmount,isRedo,SchemeDate,hostel_admission_status,Is_Stud_Staff,staff_appl_id FROM Registration r  WHERE r.App_No = @studentAppNo UPDATE Registration  SET Batch_Year = @NewBatchYear,college_code = @NewCollegeCode,     degree_code = @NewDegreeCode, Branch_code = @NewDeptCode,  Current_Semester = @NewSemester,mode = '1' WHERE App_No = @studentAppNo END ELSE UPDATE Registration SET Batch_Year = @NewBatchYear,college_code = @NewCollegeCode,degree_code = @NewDegreeCode,Branch_code = @NewDeptCode,Current_Semester = @NewSemester, mode = '1' WHERE App_No =@studentAppNo end else begin IF NOT EXISTS (SELECT r.App_No FROM RegistrationNew r  WHERE r.Batch_Year = @OldBatchYear  AND r.degree_code = @OldDegreeCode  AND r.Current_Semester = @OldSemester  AND r.App_No = @studentAppNo  AND r.college_code = @OldCollegeCode) BEGIN  INSERT INTO RegistrationNew (Roll_No, App_No, Current_Year, Current_Semester, Stud_Type, Roll_Admit, RollNo_Flag, CC, DelFlag, Access_Date, Access_Time, Adm_Date, Stud_Name, Reg_No, Batch_Year, Exam_Flag, degree_code, category_code, tcno, tcdate, pass, referby, LockInfo, mode, Advisor, debar_reason, cardno, Sections, serialno, lib_id, JMonth, JYear, Attempts, Rejoin_Status, Regulation, Exam_Elg, Add_Batch, Fingerprint1, Fingerprint2, Fingerprint3, Branch_code, group_code, pinnumber, Mark_serialno, apply_degree_code, cons_date, acr, batch_acr, roll_acr, Status, subdiv, Bus_RouteID, Boarding, Consortium, PIN_No, PIN_Status, college_code, VehID, access_pinno, stud_log_pw, stud_father_pw, stud_mother_pw, Seat_No, DeviceID, Univcode, OldCollegeCode, OldDegree_Code, Trans_PayType, finger_id, Traveller_Date, smart_serial_no, TransferDate, TMRCode, AdmitedDegree, AdmitedYear, DateOfLeaving, AcademicYear, TCSerialNo, isalumni, is_other_due, is_fee_due, IsCanceledStage, Post_Matric_Scholarship, IsSchemeAdmission, IsSchemeCode, IsSchemeAmount, isRedo, SchemeDate, hostel_admission_status, Is_Stud_Staff, staff_appl_id)  SELECT TOP 1  Roll_No,App_No,Current_Year,Current_Semester,Stud_Type,Roll_Admit,RollNo_Flag,CC,DelFlag,Access_Date,Access_Time,Adm_Date,Stud_Name,Reg_No,Batch_Year,Exam_Flag,degree_code,category_code,tcno,tcdate,pass,referby,LockInfo,mode,Advisor, debar_reason,cardno, Sections,serialno,lib_id,JMonth,JYear,Attempts,Rejoin_Status,Regulation,Exam_Elg,Add_Batch,Fingerprint1,Fingerprint2,Fingerprint3,Branch_code,group_code,pinnumber,Mark_serialno,apply_degree_code,cons_date,acr,batch_acr,roll_acr,Status,subdiv,Bus_RouteID,Boarding,Consortium,PIN_No,PIN_Status,college_code,VehID,access_pinno,stud_log_pw,stud_father_pw,stud_mother_pw,Seat_No,DeviceID,Univcode,OldCollegeCode,OldDegree_Code,Trans_PayType,finger_id,Traveller_Date,smart_serial_no,TransferDate,TMRCode,AdmitedDegree,AdmitedYear,DateOfLeaving,AcademicYear,TCSerialNo,isalumni,is_other_due,is_fee_due,IsCanceledStage,Post_Matric_Scholarship,IsSchemeAdmission,IsSchemeCode,IsSchemeAmount,isRedo,SchemeDate,hostel_admission_status,Is_Stud_Staff,staff_appl_id FROM Registration r WHERE r.App_No = @studentAppNo UPDATE Registration SET Batch_Year = @NewBatchYear,college_code = @NewCollegeCode,degree_code = @NewDegreeCode,Branch_code = @NewDeptCode,Current_Semester = @NewSemester WHERE App_No = @studentAppNo END ELSE  UPDATE Registration  SET Batch_Year = @NewBatchYear, college_code = @NewCollegeCode, degree_code = @NewDegreeCode, Branch_code = @NewDeptCode,Current_Semester = @NewSemester WHERE App_No = @studentAppNo end END IF EXISTS (SELECT idNo FROM StudentRegisterHistory WHERE App_no = @studentAppNo AND RedoType = @redoType) BEGIN UPDATE StudentRegisterHistory SET isLatest = '0' WHERE App_no = @studentAppNo AND RedoType = @redoType IF NOT EXISTS (SELECT idNo FROM StudentRegisterHistory WHERE App_no = @studentAppNo AND BatchYear = @OldBatchYear AND degreeCode = @OldDegreeCode AND collegeCode = @OldCollegeCode AND semester = @OldSemester AND sections = @OldSection AND RedoType = @redoType AND Roll_no = @rollNo AND RegNo = @regNo)  BEGIN INSERT INTO StudentRegisterHistory (App_no, admissionDate, updatedDate, Roll_no, RegNo, collegeCode, BatchYear, degreeCode, semester, sections, isLatest, RedoType)   VALUES (@studentAppNo, @admitDate, GETDATE(), @rollNo, @regNo, @OldCollegeCode, @OldBatchYear, @OldDegreeCode, @OldSemester, @OldSection, '0', @redoType) END  ELSE  BEGIN UPDATE StudentRegisterHistory SET isLatest = '0',     admissionDate = @admitDate, updatedDate = GETDATE(), RedoType = @redoType WHERE App_no = @studentAppNo AND BatchYear = @OldBatchYear AND degreeCode = @OldDegreeCode AND collegeCode = @OldCollegeCode AND semester = @OldSemester AND sections = @OldSection AND RedoType = @redoType AND Roll_no = @rollNo AND RegNo = @regNo END IF NOT EXISTS (SELECT idNo FROM StudentRegisterHistory WHERE App_no = @studentAppNo AND BatchYear = @NewBatchYear AND degreeCode = @NewDegreeCode AND collegeCode = @NewCollegeCode AND semester = @NewSemester AND sections = @NewSection AND RedoType = @redoType AND Roll_no = @rollNo AND RegNo = @regNo) BEGIN INSERT INTO StudentRegisterHistory (App_no, admissionDate, updatedDate, Roll_no, RegNo, collegeCode, BatchYear, degreeCode, semester, sections, isLatest, RedoType)   VALUES (@studentAppNo, @admitDate, GETDATE(), @rollNo, @regNo, @NewCollegeCode, @NewBatchYear, @NewDegreeCode, @NewSemester, @NewSection, '1', @redoType)  END  ELSE   BEGIN UPDATE StudentRegisterHistory SET isLatest = '1',     admissionDate = @admitDate,     updatedDate = GETDATE(), RedoType = @redoType WHERE App_no = @studentAppNo AND BatchYear = @NewBatchYear AND degreeCode = @NewDegreeCode AND collegeCode = @NewCollegeCode AND semester = @Newsemester AND sections = @NewSection AND RedoType = @redoType AND Roll_no = @rollNo AND RegNo = @regNo   END  END  ELSE BEGIN IF NOT EXISTS (SELECT idNo FROM StudentRegisterHistory WHERE App_no = @studentAppNo AND BatchYear = @OldBatchYear  AND degreeCode = @OldDegreeCode AND collegeCode = @OldCollegeCode AND semester = @OldSemester  AND sections = @OldSection AND RedoType = @redoType AND Roll_no = @rollNo AND RegNo = @regNo) BEGIN INSERT INTO StudentRegisterHistory (App_no, admissionDate, updatedDate, Roll_no, RegNo, collegeCode, BatchYear, degreeCode, semester, sections, isLatest, RedoType) VALUES (@studentAppNo, @admitDate, GETDATE(), @rollNo, @regNo, @OldCollegeCode, @OldBatchYear, @OldDegreeCode, @OldSemester, @OldSection, '0', @redoType) END ELSE BEGIN UPDATE StudentRegisterHistory SET isLatest = '0',admissionDate = @admitDate,updatedDate = GETDATE(),RedoType = @redoType WHERE App_no = @studentAppNo AND BatchYear = @OldBatchYear AND degreeCode = @OldDegreeCode  AND collegeCode = @OldCollegeCode AND semester = @OldSemester AND sections = @OldSection AND RedoType = @redoType AND Roll_no = @rollNo AND RegNo = @regNo END IF NOT EXISTS (SELECT idNo FROM StudentRegisterHistory  WHERE App_no = @studentAppNo AND BatchYear = @NewBatchYear AND degreeCode = @NewDegreeCode AND collegeCode = @NewCollegeCode AND semester = @NewSemester AND sections = @NewSection AND RedoType = @redoType AND Roll_no = @rollNo AND RegNo = @regNo) BEGIN INSERT INTO StudentRegisterHistory (App_no, admissionDate, updatedDate, Roll_no, RegNo, collegeCode, BatchYear, degreeCode, semester, sections, isLatest, RedoType) VALUES (@studentAppNo, @admitDate, GETDATE(), @rollNo, @regNo, @NewCollegeCode, @NewBatchYear, @NewDegreeCode, @NewSemester, @NewSection, '1', @redoType) END ELSE  BEGIN  UPDATE StudentRegisterHistory SET isLatest = '1',admissionDate = @admitDate,updatedDate = GETDATE(),RedoType = @redoType WHERE App_no = @studentAppNo AND BatchYear = @NewBatchYear AND degreeCode = @NewDegreeCode AND collegeCode = @NewCollegeCode AND semester = @Newsemester AND sections = @NewSection AND RedoType = @redoType AND Roll_no = @rollNo  AND RegNo = @regNo END  END  COMMIT TRANSACTION  END TRY BEGIN CATCH PRINT 'Rollback Transaction' ROLLBACK TRANSACTION  IF ERROR_NUMBER() = 1205  BEGIN  WAITFOR DELAY '00:00:00.05'  GOTO RETRY  END  END CATCH END";
            ExecuteProcedure(procedureName, procedureQ, procedureType);

            procedureName = "uspGetStudentPreviousColleges";
            procedureType = 0;//0 - Create ; 1 - Alter
            procedureQ = string.Empty;
            if (IsStoredProcedureAvailable(procedureName))
            {
                procedureType = 1;
            }
            else
            {
                procedureType = 0;
            }
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + " procedure  uspGetStudentPreviousColleges(@appNo bigint,@userCode varchar(50),@groupCode varchar(50),@singleUser varchar(50),@withRights tinyint=1,@redoType tinyint=2) AS begin if(@withRights=1) if((Lower(LTRIM(RTRIM(@singleUser)))='1' or Lower(LTRIM(RTRIM(@singleUser)))='true') and (@userCode!='' and @userCode!='0' and @userCode!='-1')) select distinct c.collname,c.college_code,c.coll_acronymn from collinfo c,collegeprivilages cp,StudentRegisterHistory srh WHERE c.college_code=cp.college_code and srh.collegeCode=c.college_code and srh.collegeCode=cp.college_code  and cp.user_code=@userCode and srh.App_no=@appNo and srh.RedoType=@redoType order by c.college_code else if((Lower(LTRIM(RTRIM(@singleUser)))='0' or Lower(LTRIM(RTRIM(@singleUser)))='false') and (@groupCode!='' and @groupCode!='0' and @groupCode!='-1')) select distinct c.collname,c.college_code,c.coll_acronymn from collinfo c,collegeprivilages cp,StudentRegisterHistory srh WHERE c.college_code=cp.college_code and srh.collegeCode=c.college_code and srh.collegeCode=cp.college_code and srh.App_no=@appNo and srh.RedoType=@redoType and cp.group_code=@groupCode order by c.college_code else select distinct c.collname,c.college_code,c.coll_acronymn from collinfo c,StudentRegisterHistory srh WHERE  srh.collegeCode=c.college_code and srh.App_no=@appNo and srh.RedoType=@redoType order by c.college_code end";
            ExecuteProcedure(procedureName, procedureQ, procedureType);

            procedureName = "uspGetStudentPreviousDegrees";
            procedureType = 0;//0 - Create ; 1 - Alter
            procedureQ = string.Empty;
            if (IsStoredProcedureAvailable(procedureName))
            {
                procedureType = 1;
            }
            else
            {
                procedureType = 0;
            }
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + " procedure  uspGetStudentPreviousDegrees(@collegeCode varchar(50),@batchYear varchar(50),@userCode varchar(50),@groupCode varchar(50),@singleUser varchar(50),@appNo bigint,@withRights tinyint=1, @redoType tinyint=2) AS begin if(@withRights=1)if((Lower(LTRIM(RTRIM(@singleUser)))='1' or Lower(LTRIM(RTRIM(@singleUser)))='true') and (@userCode!='' and @userCode!='0' and @userCode!='-1')) select distinct c.course_id,c.course_name,c.Priority,case when c.Priority is null then c.Course_Id else c.Priority end OrderBy from Degree dg,Course c,Department dt,DeptPrivilages dp,StudentRegisterHistory srh where srh.degreeCode=dg.Degree_Code and dp.degree_code=dg.Degree_Code and dg.Course_Id=c.Course_Id and dg.Dept_Code=dt.Dept_Code and srh.collegeCode=c.college_code and srh.collegeCode=dg.college_code and dt.college_code=srh.collegeCode and c.college_code=dg.college_code and srh.collegeCode=@collegeCode and srh.RedoType=@redoType and srh.BatchYear=@batchYear and srh.App_no=@appNo and dp.user_code=@userCode order by case when c.Priority is null then c.Course_Id else c.Priority end else if((Lower(LTRIM(RTRIM(@singleUser)))='0' or Lower(LTRIM(RTRIM(@singleUser)))='false') and (@groupCode!='' and @groupCode!='0' and @groupCode!='-1')) select distinct c.course_id,c.course_name,c.Priority,case when c.Priority is null then c.Course_Id else c.Priority end OrderBy from Degree dg,Course c,Department dt,DeptPrivilages dp,StudentRegisterHistory srh where srh.degreeCode=dg.Degree_Code and dp.degree_code=dg.Degree_Code and dg.Course_Id=c.Course_Id and dg.Dept_Code=dt.Dept_Code and srh.collegeCode=c.college_code and srh.collegeCode=dg.college_code and dt.college_code=srh.collegeCode and c.college_code=dg.college_code and srh.collegeCode=@collegeCode and srh.RedoType=@redoType and srh.BatchYear=@batchYear and srh.App_no=@appNo and dp.group_code=@groupCode  order by case when c.Priority is null then c.Course_Id else c.Priority end else select distinct c.course_id,c.course_name,c.Priority,case when c.Priority is null then c.Course_Id else c.Priority end OrderBy from Degree dg,Course c,Department dt,StudentRegisterHistory srh where srh.degreeCode=dg.Degree_Code and dg.Course_Id=c.Course_Id and dg.Dept_Code=dt.Dept_Code and srh.collegeCode=c.college_code and srh.collegeCode=dg.college_code and srh.BatchYear=@batchYear and dt.college_code=srh.collegeCode and c.college_code=dg.college_code and srh.collegeCode=@collegeCode and srh.BatchYear=@batchYear and srh.RedoType=@redoType and srh.App_no=@appNo order by case when c.Priority is null then c.Course_Id else c.Priority end end";
            ExecuteProcedure(procedureName, procedureQ, procedureType);

            procedureName = "uspGetStudentPreviousDepartment";
            procedureType = 0;//0 - Create ; 1 - Alter
            procedureQ = string.Empty;
            if (IsStoredProcedureAvailable(procedureName))
            {
                procedureType = 1;
            }
            else
            {
                procedureType = 0;
            }
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + " procedure uspGetStudentPreviousDepartment(@collegeCode varchar(50),@batchYear varchar(50),@courseID varchar(50),@userCode varchar(50),@groupCode varchar(50),@singleUser varchar(50),@appNo bigint,@RedoType tinyint=2,@withRights tinyint=1) AS begin if(@withRights=1) if((Lower(LTRIM(RTRIM(@singleUser)))='1' or Lower(LTRIM(RTRIM(@singleUser)))='true') and (@userCode!='' and @userCode!='0' and @userCode!='-1')) select distinct dg.Degree_Code,dt.Dept_Name,case when c.Priority is null then c.Course_Id else c.Priority end OrderBy from Degree dg,Course c,Department dt,DeptPrivilages dp,StudentRegisterHistory srh where srh.degreeCode=dg.Degree_Code and dp.degree_code=dg.Degree_Code and dg.Course_Id=c.Course_Id and dg.Dept_Code=dt.Dept_Code and srh.collegeCode=c.college_code and srh.collegeCode=dg.college_code and dt.college_code=srh.collegeCode and c.college_code=dg.college_code and srh.collegeCode=@collegeCode and srh.BatchYear=@batchYear and srh.App_no=@appNo and c.Course_Id=@courseID and dp.user_code=@userCode  and srh.RedoType=@redoType  order by  dg.Degree_Code,case when c.Priority is null then c.Course_Id else c.Priority end else if((Lower(LTRIM(RTRIM(@singleUser)))='0' or Lower(LTRIM(RTRIM(@singleUser)))='false') and (@groupCode!='' and @groupCode!='0' and @groupCode!='-1'))	select distinct dg.Degree_Code,dt.Dept_Name,case when c.Priority is null then c.Course_Id else c.Priority end OrderBy from Degree dg,Course c,Department dt,DeptPrivilages dp,StudentRegisterHistory srh where srh.degreeCode=dg.Degree_Code and dp.degree_code=dg.Degree_Code and dg.Course_Id=c.Course_Id and dg.Dept_Code=dt.Dept_Code and srh.collegeCode=c.college_code and srh.collegeCode=dg.college_code and dt.college_code=srh.collegeCode and c.college_code=dg.college_code and srh.collegeCode=@collegeCode and srh.BatchYear=@batchYear and srh.App_no=@appNo and c.Course_Id=@courseID and dp.group_code=@groupCode and srh.RedoType=@redoType order by case when c.Priority is null then c.Course_Id else c.Priority end else select distinct dg.Degree_Code,dt.Dept_Name,case when c.Priority is null then c.Course_Id else c.Priority end OrderBy from Degree dg,Course c,Department dt,StudentRegisterHistory srh where srh.degreeCode=dg.Degree_Code and dg.Course_Id=c.Course_Id and dg.Dept_Code=dt.Dept_Code and srh.collegeCode=c.college_code and srh.collegeCode=dg.college_code and dt.college_code=srh.collegeCode and c.college_code=dg.college_code and srh.collegeCode=@collegeCode and srh.BatchYear=@batchYear and srh.App_no=@appNo and c.Course_Id=@courseID and srh.RedoType=@redoType order by case when c.Priority is null then c.Course_Id else c.Priority end end";
            ExecuteProcedure(procedureName, procedureQ, procedureType);

            procedureName = "uspGetStudentPreviousSemester";
            procedureType = 0;//0 - Create ; 1 - Alter
            procedureQ = string.Empty;
            if (IsStoredProcedureAvailable(procedureName))
            {
                procedureType = 1;
            }
            else
            {
                procedureType = 0;
            }
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + " procedure uspGetStudentPreviousSemester(@collegeCode varchar(20),@batchYear varchar(20),@degreeCode varchar(20),@appNo varchar(20),@redoType tinyint=2) AS BEGIN select distinct srh.semester from StudentRegisterHistory srh,Course c,Degree dg,Department dt where srh.collegeCode=c.college_code and c.college_code=dg.college_code and dg.college_code=dt.college_code and dt.college_code=srh.collegeCode and c.Course_Id=dg.Course_Id and dg.Dept_Code=dt.Dept_Code and srh.degreeCode=dg.Degree_Code and srh.collegeCode=@collegeCode and srh.degreeCode=@degreeCode and srh.BatchYear=@batchYear and srh.App_no=@appNo and srh.RedoType=@redoType order by srh.semester asc END";
            ExecuteProcedure(procedureName, procedureQ, procedureType);

            procedureName = "uspGetPreviousTestDetails";
            procedureType = 0;//0 - Create ; 1 - Alter
            procedureQ = string.Empty;
            if (IsStoredProcedureAvailable(procedureName))
            {
                procedureType = 1;
            }
            else
            {
                procedureType = 0;
            }
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + " procedure uspGetPreviousTestDetails(@batchYear varchar(50),@degreeCode varchar(50),@semester varchar(50),@section varchar(500)) AS BEGIN if(LTRIM(RTRIM(ISNULL(@section,'')))<>'') select distinct c.Criteria_no,c.criteria from CriteriaForInternal c,Exam_type e,syllabus_master sm where sm.syll_code=c.syll_code and c.Criteria_no=e.criteria_no and e.sections=@section and sm.Batch_Year=@batchYear and sm.degree_code=@degreeCode and sm.semester=@semester order by c.Criteria_no ELSE select distinct c.Criteria_no,c.criteria from CriteriaForInternal c,Exam_type e,syllabus_master sm where sm.syll_code=c.syll_code and c.Criteria_no=e.criteria_no and sm.Batch_Year=@batchYear and sm.degree_code=@degreeCode and sm.semester=@semester order by c.Criteria_no END";
            ExecuteProcedure(procedureName, procedureQ, procedureType);

            procedureName = "uspGetPreviousTestSubjectDetails";
            procedureType = 0;//0 - Create ; 1 - Alter
            procedureQ = string.Empty;
            if (IsStoredProcedureAvailable(procedureName))
            {
                procedureType = 1;
            }
            else
            {
                procedureType = 0;
            }
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + " procedure uspGetPreviousTestSubjectDetails(@batchYear varchar(50),@degreeCode varchar(50),@semester varchar(50),@section varchar(500),@testNo varchar(100)) AS	BEGIN	if(LTRIM(RTRIM(ISNULL(@section,'')))<>'')	select distinct s.subject_code,s.subject_name from CriteriaForInternal c,Exam_type e,syllabus_master sm,subject s where sm.syll_code=s.syll_code and s.syll_code=c.syll_code and s.subject_no=e.subject_no and sm.syll_code=c.syll_code and c.Criteria_no=e.criteria_no and e.sections=@section and sm.Batch_Year=@batchYear and sm.degree_code=@degreeCode and sm.semester=@semester and c.Criteria_no=@testNo order by s.subject_code	ELSE select distinct s.subject_code,s.subject_name from CriteriaForInternal c,Exam_type e,syllabus_master sm,subject s where sm.syll_code=s.syll_code and s.syll_code=c.syll_code and s.subject_no=e.subject_no and sm.syll_code=c.syll_code and c.Criteria_no=e.criteria_no and sm.Batch_Year=@batchYear and sm.degree_code=@degreeCode and sm.semester=@semester and c.Criteria_no=@testNo order by s.subject_code END";
            ExecuteProcedure(procedureName, procedureQ, procedureType);

            procedureName = "uspGetStudentPreviousMarks";
            procedureType = 0;//0 - Create ; 1 - Alter
            procedureQ = string.Empty;
            if (IsStoredProcedureAvailable(procedureName))
            {
                procedureType = 1;
            }
            else
            {
                procedureType = 0;
            }
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + " procedure uspGetStudentPreviousMarks(@appNo varchar(50),@batchYear varchar(50),@degreeCode varchar(50),@semester varchar(50),@section varchar(100),@testNo varchar(50),@redoType tinyint=2) AS BEGIN /* ,@subjectCode varchar(100) and s.subject_code=@subjectCode */ if(LTRIM(RTRIM(ISNULL(@section,'')))<>'' and LOWER(LTRIM(RTRIM(ISNULL(@section,''))))<>'all') SELECT srh.App_no,srh.Roll_no,srh.RegNo,c.Criteria_no as TestNo,c.criteria as TestName,c.min_mark as TestMinMark,c.max_mark as TestMaxMark,s.subject_code,s.subject_name,s.subject_no,s.min_int_marks as SubjectMinINT,s.max_int_marks as SubjectMaxINT,s.min_ext_marks as SubjectMinEXT,s.max_ext_marks as SubjectMaxEXT,s.mintotal as SubjectMinTotal,s.maxtotal as SubjectMaxTotal,e.exam_code,e.min_mark as ConductedMinMark,e.max_mark as ConductedMaxMark,ISNULL(CONVERT(VARCHAR(100),re.marks_obtained),'') as TestMark,ISNULL(CONVERT(VARCHAR(100),re.Retest_Marks_obtained),'') as RetestMark  FROM CriteriaForInternal c,Exam_type e,Result re,StudentRegisterHistory srh,syllabus_master sm,subject s where s.subject_no=e.subject_no and s.syll_code=sm.syll_code and s.syll_code=c.syll_code and sm.syll_code=c.syll_code and c.Criteria_no=e.criteria_no and e.exam_code=re.exam_code and srh.BatchYear=sm.Batch_Year and srh.degreeCode=sm.degree_code and srh.semester=sm.semester and srh.Roll_no=re.roll_no and LTRIM(RTRIM(ISNULL(e.sections,'')))=LTRIM(RTRIM(ISNULL(srh.sections,''))) and LTRIM(RTRIM(ISNULL(e.sections,''))) =LTRIM(RTRIM(ISNULL(@section,'')))  and srh.App_no=@appNo and srh.BatchYear=@batchYear and srh.degreeCode=@degreeCode and srh.semester=@semester and c.Criteria_no=@testNo and srh.RedoType=@redoType order by srh.App_no,s.subject_code else SELECT srh.App_no,srh.Roll_no,srh.RegNo,c.Criteria_no as TestNo,c.criteria as TestName,c.min_mark as TestMinMark,c.max_mark as TestMaxMark,s.subject_code,s.subject_name,s.subject_no,s.min_int_marks as SubjectMinINT,s.max_int_marks as SubjectMaxINT,s.min_ext_marks as SubjectMinEXT,s.max_ext_marks as SubjectMaxEXT,s.mintotal as SubjectMinTotal,s.maxtotal as SubjectMaxTotal,e.exam_code,e.min_mark as ConductedMinMark,e.max_mark as ConductedMaxMark,ISNULL(CONVERT(VARCHAR(100),re.marks_obtained),'') as TestMark,ISNULL(CONVERT(VARCHAR(100),re.Retest_Marks_obtained),'') as RetestMark FROM CriteriaForInternal c,Exam_type e,Result re,StudentRegisterHistory srh,syllabus_master sm,subject s where s.subject_no=e.subject_no and s.syll_code=sm.syll_code and s.syll_code=c.syll_code and sm.syll_code=c.syll_code and c.Criteria_no=e.criteria_no and e.exam_code=re.exam_code and srh.BatchYear=sm.Batch_Year and srh.degreeCode=sm.degree_code and srh.semester=sm.semester and srh.Roll_no=re.roll_no and LTRIM(RTRIM(ISNULL(e.sections,'')))=LTRIM(RTRIM(ISNULL(srh.sections,''))) and srh.App_no=@appNo and srh.BatchYear=@batchYear and srh.degreeCode=@degreeCode and srh.semester=@semester and c.Criteria_no=@testNo and srh.RedoType=@redoType order by srh.App_no,s.subject_code END";
            ExecuteProcedure(procedureName, procedureQ, procedureType);

            procedureName = "uspGetAllCollege";
            procedureType = 0;//0 - Create ; 1 - Alter
            procedureQ = string.Empty;
            if (IsStoredProcedureAvailable(procedureName))
            {
                procedureType = 1;
            }
            else
            {
                procedureType = 0;
            }
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + "   PROCEDURE uspGetAllCollege (@userCode varchar(50), @groupCode varchar(50), @singleUser varchar(50), @withRights tinyint = 1, @redoType tinyint = 2) AS BEGIN IF (@withRights = 1) IF ((LOWER(LTRIM(RTRIM(@singleUser))) = '1' OR LOWER(LTRIM(RTRIM(@singleUser))) = 'true') AND (LTRIM(RTRIM(@userCode)) != '' AND LTRIM(RTRIM(@userCode)) != '0' AND LTRIM(RTRIM(@userCode)) != '-1')) SELECT DISTINCT c.collname,c.college_code,c.coll_acronymn FROM collinfo c,collegeprivilages cp,Registration r LEFT JOIN StudentRegisterHistory srh ON srh.App_no = r.App_No AND srh.RedoType = @redoType WHERE c.college_code=cp.college_code and c.college_code=r.college_code and cp.college_code=r.college_code AND r.CC='0' and r.DelFlag='0' and r.Exam_Flag<>'debar' AND cp.user_code = @userCode ORDER BY c.college_code ELSE IF ((LOWER(LTRIM(RTRIM(@singleUser))) = '0' OR LOWER(LTRIM(RTRIM(@singleUser))) = 'false') AND (LTRIM(RTRIM(@groupCode)) != '' AND LTRIM(RTRIM(@groupCode)) != '0' AND LTRIM(RTRIM(@groupCode)) != '-1')) SELECT DISTINCT c.collname,c.college_code,c.coll_acronymn  FROM collinfo c, collegeprivilages cp, Registration r LEFT JOIN StudentRegisterHistory srh ON srh.App_no = r.App_No AND srh.RedoType = @redoType  WHERE c.college_code=cp.college_code and c.college_code=r.college_code and cp.college_code=r.college_code AND r.CC='0' and r.DelFlag='0' and r.Exam_Flag<>'debar' AND cp.group_code = @groupCode ORDER BY c.college_code ELSE SELECT DISTINCT c.collname,c.college_code,c.coll_acronymn FROM collinfo c,Registration r LEFT JOIN StudentRegisterHistory srh ON srh.App_no = r.App_No AND srh.RedoType = @redoType WHERE c.college_code=r.college_code AND r.CC='0' and r.DelFlag='0' and r.Exam_Flag<>'debar' ORDER BY c.college_code END";
            ExecuteProcedure(procedureName, procedureQ, procedureType);

            procedureName = "uspGetAllDegrees";
            procedureType = 0;//0 - Create ; 1 - Alter
            procedureQ = string.Empty;
            if (IsStoredProcedureAvailable(procedureName))
            {
                procedureType = 1;
            }
            else
            {
                procedureType = 0;
            }
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + " PROCEDURE uspGetAllDegrees (@collegeCode varchar(50), @batchYear varchar(50), @userCode varchar(50), @groupCode varchar(50), @singleUser varchar(50), @withRights tinyint = 1, @redoType tinyint = 2) AS BEGIN IF (@withRights = 1) IF((LOWER(LTRIM(RTRIM(@singleUser))) = '1' OR LOWER(LTRIM(RTRIM(@singleUser))) = 'true') AND (@userCode != '' AND @userCode != '0' AND @userCode != '-1')) SELECT DISTINCT c.course_id,c.course_name,c.Priority,CASE WHEN c.Priority IS NULL THEN c.Course_Id ELSE c.Priority END OrderBy FROM Degree dg,Course c,Department dt,DeptPrivilages dp,Registration r left join StudentRegisterHistory srh on r.App_No=srh.App_no AND srh.collegeCode = @collegeCode AND srh.RedoType = @redoType AND srh.BatchYear = @batchYear WHERE r.degree_code = dg.Degree_Code AND dp.degree_code = dg.Degree_Code AND dg.Course_Id = c.Course_Id AND dg.Dept_Code = dt.Dept_Code AND r.college_code = c.college_code AND r.college_code = dg.college_code AND dt.college_code = r.college_code AND c.college_code = dg.college_code AND r.CC='0' and r.DelFlag='0' and r.Exam_Flag<>'debar' AND r.college_code = @collegeCode AND r.Batch_Year = @batchYear AND dp.user_code = @userCode ORDER BY CASE WHEN c.Priority IS NULL THEN c.Course_Id ELSE c.Priority END ELSE IF ((LOWER(LTRIM(RTRIM(@singleUser))) = '0' OR LOWER(LTRIM(RTRIM(@singleUser))) = 'false') AND (@groupCode != '' AND @groupCode != '0' AND @groupCode != '-1')) SELECT DISTINCT c.course_id,c.course_name,c.Priority,CASE WHEN c.Priority IS NULL THEN c.Course_Id ELSE c.Priority END OrderBy FROM Degree dg,Course c,Department dt,DeptPrivilages dp,Registration r left join StudentRegisterHistory srh on r.App_No=srh.App_no AND srh.collegeCode = @collegeCode AND srh.RedoType = @redoType AND srh.BatchYear = @batchYear WHERE r.degree_code = dg.Degree_Code AND dp.degree_code = dg.Degree_Code AND dg.Course_Id = c.Course_Id AND dg.Dept_Code = dt.Dept_Code AND r.college_code = c.college_code AND r.college_code = dg.college_code AND dt.college_code = r.college_code AND c.college_code = dg.college_code AND r.CC='0' and r.DelFlag='0' and r.Exam_Flag<>'debar' AND r.college_code = @collegeCode AND r.Batch_Year = @batchYear AND dp.group_code = @groupCode ORDER BY CASE WHEN c.Priority IS NULL THEN c.Course_Id ELSE c.Priority END ELSE SELECT DISTINCT c.course_id,c.course_name,c.Priority,CASE WHEN c.Priority IS NULL THEN c.Course_Id ELSE c.Priority END OrderBy FROM Degree dg,Course c,Department dt,Registration r left join StudentRegisterHistory srh on r.App_No=srh.App_no AND srh.collegeCode = @collegeCode AND srh.RedoType = @redoType AND srh.BatchYear = @batchYear WHERE r.degree_code = dg.Degree_Code AND dg.Course_Id = c.Course_Id AND dg.Dept_Code = dt.Dept_Code AND r.college_code = c.college_code AND r.college_code = dg.college_code AND dt.college_code = r.college_code      AND c.college_code = dg.college_code  AND r.CC='0' and r.DelFlag='0' and r.Exam_Flag<>'debar' AND r.college_code = @collegeCode AND r.Batch_Year = @batchYear  ORDER BY CASE WHEN c.Priority IS NULL THEN c.Course_Id ELSE c.Priority END END";
            ExecuteProcedure(procedureName, procedureQ, procedureType);

            procedureName = "uspGetAllDepartment";
            procedureType = 0;//0 - Create ; 1 - Alter
            procedureQ = string.Empty;
            if (IsStoredProcedureAvailable(procedureName))
            {
                procedureType = 1;
            }
            else
            {
                procedureType = 0;
            }
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + " PROCEDURE uspGetAllDepartment (@collegeCode varchar(50), @batchYear varchar(50), @courseID varchar(50), @userCode varchar(50), @groupCode varchar(50), @singleUser varchar(50), @RedoType tinyint = 2, @withRights tinyint = 1) AS BEGIN IF (@withRights = 1) IF ((LOWER(LTRIM(RTRIM(@singleUser))) = '1' OR LOWER(LTRIM(RTRIM(@singleUser))) = 'true') AND (@userCode != '' AND @userCode != '0' AND @userCode != '-1')) SELECT DISTINCT dg.Degree_Code,dt.Dept_Name,CASE   WHEN c.Priority IS NULL THEN c.Course_Id ELSE c.Priority END OrderBy FROM Degree dg,Course c,Department dt,DeptPrivilages dp,Registration r left join StudentRegisterHistory srh on r.App_No=srh.App_no AND srh.collegeCode = @collegeCode AND srh.RedoType = @redoType AND srh.BatchYear = @batchYear   WHERE r.degree_code = dg.Degree_Code AND dp.degree_code = dg.Degree_Code AND dg.Course_Id = c.Course_Id AND dg.Dept_Code = dt.Dept_Code AND r.college_code = c.college_code AND r.college_code = dg.college_code AND dt.college_code = r.college_code AND c.college_code = dg.college_code AND r.CC='0' and r.DelFlag='0' and r.Exam_Flag<>'debar' AND r.college_code= @collegeCode AND r.Batch_Year = @batchYear AND c.Course_Id = @courseID  AND dp.user_code = @userCode ORDER BY dg.Degree_Code, CASE WHEN c.Priority IS NULL THEN c.Course_Id ELSE c.Priority END ELSE IF ((LOWER(LTRIM(RTRIM(@singleUser))) = '0' OR LOWER(LTRIM(RTRIM(@singleUser))) = 'false') AND (@groupCode != '' AND @groupCode != '0' AND @groupCode != '-1'))SELECT DISTINCT dg.Degree_Code,dt.Dept_Name,CASE WHEN c.Priority IS NULL THEN c.Course_Id ELSE c.Priority END OrderBy FROM Degree dg,Course c,Department dt,DeptPrivilages dp,Registration r left join StudentRegisterHistory srh on r.App_No=srh.App_no AND srh.collegeCode = @collegeCode AND srh.RedoType = @redoType AND srh.BatchYear = @batchYear WHERE r.degree_code = dg.Degree_Code      AND dp.degree_code = dg.Degree_Code AND dg.Course_Id = c.Course_Id AND dg.Dept_Code = dt.Dept_Code  AND r.college_code = c.college_code      AND r.college_code = dg.college_code AND dt.college_code = r.college_code AND c.college_code = dg.college_code AND r.CC='0' and r.DelFlag='0' and r.Exam_Flag<>'debar' AND r.college_code= @collegeCode AND r.Batch_Year = @batchYear AND c.Course_Id = @courseID AND dp.group_code = @groupCode ORDER BY CASE WHEN c.Priority IS NULL THEN c.Course_Id ELSE c.Priority END ELSE SELECT DISTINCT dg.Degree_Code,dt.Dept_Name,CASE WHEN c.Priority IS NULL THEN c.Course_Id ELSE c.Priority END OrderBy FROM Degree dg,Course c, Department dt,Registration r left join StudentRegisterHistory srh on r.App_No=srh.App_no AND srh.collegeCode = @collegeCode AND srh.RedoType = @redoType AND srh.BatchYear = @batchYear WHERE r.degree_code = dg.Degree_Code AND dg.Course_Id = c.Course_Id AND dg.Dept_Code = dt.Dept_Code AND r.college_code = c.college_code AND r.college_code = dg.college_code AND dt.college_code = r.college_code AND c.college_code = dg.college_code AND r.CC='0' and r.DelFlag='0' and r.Exam_Flag<>'debar' AND r.college_code= @collegeCode AND r.Batch_Year = @batchYear AND c.Course_Id = @courseID ORDER BY dg.Degree_Code, CASE WHEN c.Priority IS NULL THEN c.Course_Id ELSE c.Priority END END";
            ExecuteProcedure(procedureName, procedureQ, procedureType);


            procedureName = "uspGetAllSemester";
            procedureType = 0;//0 - Create ; 1 - Alter
            procedureQ = string.Empty;
            if (IsStoredProcedureAvailable(procedureName))
            {
                procedureType = 1;
            }
            else
            {
                procedureType = 0;
            }
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + " PROCEDURE uspGetAllSemester (@collegeCode varchar(20), @batchYear varchar(20), @degreeCode varchar(20), @redoType tinyint = 2) AS BEGIN SELECT DISTINCT case when (LTRIM(RTRIM(ISNULL(CONVERT(varchar(20),srh.semester),'')))<>'') then srh.semester when (LTRIM(RTRIM(ISNULL(CONVERT(varchar(20),r.Current_Semester),'')))<>'') then r.Current_Semester end semester FROM Course c,Degree dg,Department dt,Registration r left join StudentRegisterHistory srh on r.App_No=srh.App_no AND srh.collegeCode = @collegeCode AND srh.degreeCode = @degreeCode AND srh.BatchYear = @batchYear AND srh.RedoType = @redoType WHERE r.college_code = c.college_code AND c.college_code = dg.college_code AND dg.college_code = dt.college_code AND dt.college_code = r.college_code and dg.college_code=r.college_code  AND c.Course_Id = dg.Course_Id  AND dg.Dept_Code = dt.Dept_Code AND r.degree_code = dg.Degree_Code AND r.CC='0' and r.DelFlag='0' and r.Exam_Flag<>'debar' AND r.college_code = @collegeCode AND r.degree_code= @degreeCode AND r.Batch_Year = @batchYear ORDER BY semester ASC END";
            ExecuteProcedure(procedureName, procedureQ, procedureType);

            procedureName = "uspGetSemesterCTE";
            procedureType = 0;//0 - Create ; 1 - Alter
            procedureQ = string.Empty;
            if (IsStoredProcedureAvailable(procedureName))
            {
                procedureType = 1;
            }
            else
            {
                procedureType = 0;
            }
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + " procedure uspGetSemesterCTE(@collegeCode varchar(500),@degreeCode varchar(20),@batchYear varchar(30)) AS BEGIN Declare @duration int=0,@firstYearNoSem bit,@start int=1; select distinct @duration=ndurations,@firstYearNoSem=first_year_nonsemester from ndegree where degree_code=@degreeCode and batch_year=@batchYear and college_code=@collegeCode if(@duration=0) select distinct @duration=duration,@firstYearNoSem=first_year_nonsemester  from degree where degree_code=@degreeCode and college_code=@collegeCode if(@firstYearNoSem=0) with SemesterTable(semester)  AS ( select 1 union all  (select 1+semester  from SemesterTable where semester<@duration)) select semester from SemesterTable order by semester OPtion (MAXRECURSION 20) else if(@firstYearNoSem=1) with SemesterTable(semester)  AS ( select 1 union all  (select 1+semester  from SemesterTable where semester<@duration)) select semester from SemesterTable where semester<>2 order by semester OPtion (MAXRECURSION 20) END";
            ExecuteProcedure(procedureName, procedureQ, procedureType);

            tableName = "sub_sem";
            columnName = "isSingleSubject";
            executeQuery = "alter table sub_sem add isSingleSubject bit not null constraint DF_sub_sem_isSingleSubject default(0)";
            ExecuteQuery(executeQuery, tableName, columnName: columnName, type: 1);// 

            procedureName = "usp_CAM_StudentsPerformance";
            procedureType = 0;//0 - Create ; 1 - Alter
            procedureQ = string.Empty;
            if (IsStoredProcedureAvailable(procedureName))
            {
                procedureType = 1;
            }
            else
            {
                procedureType = 0;
            }
            procedureQ = ((procedureType == 0) ? "create " : "alter ") + " procedure usp_CAM_StudentsPerformance(@examCode varchar(50),@minMarks varchar(50),@staffCode varchar(200)=null,@isStudentStaffSelector bit =0) AS BEGIN  if(@isStudentStaffSelector=1) begin select sum(marks_obtained) as 'SUM' from result re,Exam_type e,subjectChooser sc,staff_selector ss where ss.subject_no=sc.subject_no and sc.subject_no=e.subject_no and e.subject_no=ss.subject_no and re.exam_code=e.exam_code and sc.roll_no=re.roll_no and marks_obtained>=0 and re.exam_code=@examCode and ss.staff_code=@staffCode and sc.StaffCode like '%'+@staffCode+'%' ; select count(distinct r.roll_no) as 'PASS_COUNT' from result r,exam_type ex,subjectchooser sc,registration rt where r.roll_no=rt.roll_no and r.exam_code=@examCode and r.roll_no=sc.roll_no and sc.subject_no=ex.subject_no and  r.exam_code=ex.exam_code and (r.marks_obtained>=@minMarks or r.marks_obtained='-3' or r.marks_obtained='-2')  and r.marks_obtained<>'-1' and r.marks_obtained<>'-16'  and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 and sc.StaffCode like '%'+@staffCode+'%' ; select count(distinct rt.roll_no) as 'PRESENT_COUNT' from result r,registration rt,subjectchooser sc,exam_type ex where r.exam_code=@examCode and (marks_obtained>=0 or marks_obtained='-2' or marks_obtained='-3') and  marks_obtained<>'-1'  and r.roll_no=rt.roll_no and sc.subject_no=ex.subject_no and ex.exam_code=r.exam_code and sc.roll_no=r.roll_no and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 and rt.RollNo_Flag<>0 and sc.StaffCode like '%'+@staffCode+'%' ; select count(distinct r.roll_no) as 'ABSENT_COUNT' from result r,registration rt,exam_type ex,subjectchooser sc where r.exam_code=@examCode and r.marks_obtained<0 and (r.marks_obtained<>'-2' and r.marks_obtained<>'-3'and r.marks_obtained<>'-7' and r.marks_obtained<>'-16' )and r.roll_no=sc.roll_no and sc.subject_no=ex.subject_no and r.exam_code=ex.exam_code and r.roll_no=rt.roll_no and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 and rt.RollNo_Flag<>0  and sc.StaffCode like '%'+@staffCode+'%'  ;select count(distinct r.roll_no) as 'FAIL_COUNT_WITHOUT_AB' from result r,subjectchooser sc,exam_type ex where r.exam_code=@examCode and r.roll_no=sc.roll_no and sc.subject_no=ex.subject_no and r.exam_code=ex.exam_code and (marks_obtained<@minMarks and marks_obtained<>'-3' and marks_obtained<>'-2' and marks_obtained<>'-1' and marks_obtained<>'-4' and marks_obtained<>'-5' and marks_obtained<>'-6' and marks_obtained<>'-7' and marks_obtained<>'-8' and marks_obtained<>'-9' and marks_obtained<>'-10' and marks_obtained<>'-11' and  marks_obtained<>'-12' and marks_obtained<>'-13' and marks_obtained<>'-14' and marks_obtained<>'-15' and marks_obtained<>'-16' and marks_obtained<>'-17') and sc.StaffCode like '%'+@staffCode+'%' ; end else  begin select sum(marks_obtained) as 'SUM' from result where exam_code=@examCode and marks_obtained>=0 ; select count(distinct r.roll_no) as 'PASS_COUNT' from result r,exam_type ex,subjectchooser sc,registration rt where r.roll_no=rt.roll_no and r.exam_code=@examCode and r.roll_no=sc.roll_no and sc.subject_no=ex.subject_no and  r.exam_code=ex.exam_code and (r.marks_obtained>=@minMarks or r.marks_obtained='-3' or r.marks_obtained='-2')  and r.marks_obtained<>'-1' and r.marks_obtained<>'-16'  and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 select count(distinct rt.roll_no) as 'PRESENT_COUNT' from result r,registration rt,subjectchooser sc,exam_type ex where r.exam_code=@examCode and (marks_obtained>=0 or marks_obtained='-2' or marks_obtained='-3') and  marks_obtained<>'-1'  and r.roll_no=rt.roll_no and sc.subject_no=ex.subject_no and ex.exam_code=r.exam_code and sc.roll_no=r.roll_no and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 and rt.RollNo_Flag<>0; select count(distinct r.roll_no) as 'ABSENT_COUNT' from result r,registration rt,exam_type ex,subjectchooser sc where r.exam_code=@examCode and r.marks_obtained<0 and (r.marks_obtained<>'-2' and r.marks_obtained<>'-3'and r.marks_obtained<>'-7' and r.marks_obtained<>'-16' )and r.roll_no=sc.roll_no and sc.subject_no=ex.subject_no and r.exam_code=ex.exam_code and r.roll_no=rt.roll_no and rt.cc=0 and rt.exam_flag <>'DEBAR' and rt.delflag=0 and rt.RollNo_Flag<>0 ; select count(distinct r.roll_no) as 'FAIL_COUNT_WITHOUT_AB' from result r,subjectchooser sc,exam_type ex where r.exam_code=@examCode and r.roll_no=sc.roll_no and sc.subject_no=ex.subject_no and r.exam_code=ex.exam_code and (marks_obtained<@minMarks and marks_obtained<>'-3' and marks_obtained<>'-2' and marks_obtained<>'-1' and marks_obtained<>'-4' and marks_obtained<>'-5' and marks_obtained<>'-6' and marks_obtained<>'-7' and marks_obtained<>'-8' and marks_obtained<>'-9' and marks_obtained<>'-10' and marks_obtained<>'-11' and  marks_obtained<>'-12' and marks_obtained<>'-13' and marks_obtained<>'-14' and marks_obtained<>'-15' and marks_obtained<>'-16' and marks_obtained<>'-17') end END";
            ExecuteProcedure(procedureName, procedureQ, procedureType);

        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
            errmsg.Text = ex.ToString();
            errmsg.Visible = true;
        }
    }

    public void questionquery()
    {
        try
        {
            string quest = string.Empty;
            string questselect = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'tbl_question_bank_master' "); int insert = 0;
            if (questselect.Trim() == "0")
            {
                quest = "  CREATE TABLE tbl_question_bank_master(Questionid int IDENTITY(1,1) Constraint Pk_tbl_question_bank_master_Questionid primary key,Batch_year int,Degree_Code int,Semester int,Sections nvarchar(20),Subject_no nvarchar(50),exam_type int,Exam nvarchar(250),No_Sections int,Section_Type nvarchar(50),Duration nvarchar(300),exam_month nvarchar(25),exam_year int,exam_date datetime Constraint DF_tbl_question_bank_master_exam_date default GetDate(),max_mark float,min_mark float) ";
                insert = d2.update_method_wo_parameter(quest, "text");
            }
            questselect = string.Empty;
            questselect = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'tbl_question_bank_master' ");
            if (questselect.Trim() != "0")
            {
                questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_bank_master' and COLUMN_NAME='Questionid'");
                if (questselect.Trim() == "0")
                {
                    quest = "  alter table tbl_question_bank_master add Questionid int IDENTITY(1,1)";
                    insert = d2.update_method_wo_parameter(quest, "text");
                }
                questselect = d2.GetFunction(" SELECT Col.Column_Name from INFORMATION_SCHEMA.TABLE_CONSTRAINTS Tab, INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE Col WHERE Col.Constraint_Name = Tab.Constraint_Name AND Col.Table_Name = Tab.Table_Name AND Constraint_Type = 'PRIMARY KEY' AND Col.Table_Name = 'tbl_question_bank_master' and col.COLUMN_NAME='Questionid'");
                if (questselect.Trim() == "0")
                {
                    quest = " alter table tbl_question_bank_master add Constraint Pk_tbl_question_bank_master_Questionid primary key (Questionid)";
                    insert = d2.update_method_wo_parameter(quest, "text");
                }
                quest = string.Empty;
                questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_bank_master' and COLUMN_NAME='Batch_year'");
                if (questselect.Trim() == "0")
                {
                    quest += " alter table tbl_question_bank_master add Batch_year int";
                }
                questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_bank_master' and COLUMN_NAME='Degree_Code'");
                if (questselect.Trim() == "0")
                {
                    quest += " alter table tbl_question_bank_master add Degree_Code int ";
                }
                questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_bank_master' and COLUMN_NAME='Semester'");
                if (questselect.Trim() == "0")
                {
                    quest += "  alter table tbl_question_bank_master add Semester int";
                }
                questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_bank_master' and COLUMN_NAME='Sections'");
                if (questselect.Trim() == "0")
                {
                    quest += "  alter table tbl_question_bank_master add Sections nvarchar(20)";
                }
                questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_bank_master' and COLUMN_NAME='Subject_no'");
                if (questselect.Trim() == "0")
                {
                    quest += "   alter table tbl_question_bank_master add Subject_no nvarchar(50)";
                }
                questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_bank_master' and COLUMN_NAME='Subject_no'");
                if (questselect.Trim() == "0")
                {
                    quest += "  alter table tbl_question_bank_master add exam_type int";
                }
                questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_bank_master' and COLUMN_NAME='Exam'");
                if (questselect.Trim() == "0")
                {
                    quest += " alter table tbl_question_bank_master add Exam nvarchar(250)";
                }
                questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_bank_master' and COLUMN_NAME='No_Sections'");
                if (questselect.Trim() == "0")
                {
                    quest += " alter table tbl_question_bank_master add No_Sections int";
                }
                questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_bank_master' and COLUMN_NAME='Section_Type'");
                if (questselect.Trim() == "0")
                {
                    quest += " alter table tbl_question_bank_master add Section_Type nvarchar(50)";
                }
                questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_bank_master' and COLUMN_NAME='Duration'");
                if (questselect.Trim() == "0")
                {
                    quest += " alter table tbl_question_bank_master add Duration nvarchar(300)";
                }
                questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_bank_master' and COLUMN_NAME='exam_month'");
                if (questselect.Trim() == "0")
                {
                    quest += " alter table tbl_question_bank_master add exam_month nvarchar(25)";
                }
                questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_bank_master' and COLUMN_NAME='exam_year'");
                if (questselect.Trim() == "0")
                {
                    quest += " alter table tbl_question_bank_master add exam_year int";
                }
                if (quest.Trim() != "")
                {
                    insert = d2.update_method_wo_parameter(quest, "text");
                }
                questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_bank_master' and COLUMN_NAME='exam_date'");
                if (questselect.Trim() == "0")
                {
                    quest = "  ALTER TABLE tbl_question_bank_master ADD exam_date datetime not null Constraint DF_tbl_question_bank_master_exam_date default GetDate()";
                    insert = d2.update_method_wo_parameter(quest, "text");
                }
                try
                {
                    questselect = d2.GetFunction(" SELECT COLUMN_DEFAULT FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_bank_master' AND COLUMN_NAME = 'exam_date' AND COLUMN_DEFAULT IS NOT NULL");
                    if (questselect.Trim() == "0")
                    {
                        string nquest = " alter table tbl_question_bank_master add Constraint DF_tbl_question_bank_master_exam_date default GetDate() for exam_date";
                        insert = d2.update_method_wo_parameter(nquest, "text");
                    }
                }
                catch { }
                quest = string.Empty;
                questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_bank_master' and COLUMN_NAME='max_mark'");
                if (questselect.Trim() == "0")
                {
                    quest += " alter table tbl_question_bank_master add max_mark float";
                }
                questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_bank_master' and COLUMN_NAME='min_mark'");
                if (questselect.Trim() == "0")
                {
                    quest += " alter table tbl_question_bank_master add min_mark float";
                }
                if (quest.Trim() != "")
                {
                    insert = d2.update_method_wo_parameter(quest, "text");
                }
                quest = string.Empty;
                questselect = string.Empty;
                questselect = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'tbl_question_master' ");
                if (questselect.Trim() == "0")
                {
                    quest = " create table tbl_question_master (QuestionMasterPK bigint identity(1,1) Constraint Pk_tbl_question_master_QuestionMasterPK primary key,subject_no int,syllabus nvarchar(150), mark double precision(8), is_descriptive int,question nvarchar(max), answer nvarchar(max),options nvarchar(max),type int,Already_exist  tinyint,is_matching bit constraint DF_tbl_question_master_is_Matching default 0,qmatching nvarchar(max),file_name nvarchar(150),file_type nvarchar(150),quetion_image image,QuestionType tinyint,QuestionSubType tinyint,totalChoice int)";
                    insert = d2.update_method_wo_parameter(quest, "text");
                }
                quest = string.Empty;
                questselect = string.Empty;
                questselect = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'tbl_question_master' ");
                if (questselect.Trim() != "0")
                {
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='QuestionMasterPK'");
                    if (questselect.Trim() == "0")
                    {
                        quest = "  alter table tbl_question_master add QuestionMasterPK bigint identity(1,1)";
                        insert = d2.update_method_wo_parameter(quest, "text");
                    }
                    questselect = d2.GetFunction(" SELECT Col.Column_Name from INFORMATION_SCHEMA.TABLE_CONSTRAINTS Tab, INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE Col WHERE Col.Constraint_Name = Tab.Constraint_Name AND Col.Table_Name = Tab.Table_Name AND Constraint_Type = 'PRIMARY KEY' AND Col.Table_Name = 'tbl_question_master' and col.COLUMN_NAME='QuestionMasterPK'");
                    if (questselect.Trim() == "0")
                    {
                        quest = " alter table tbl_question_master add Constraint Pk_tbl_question_master_QuestionMasterPK primary key (QuestionMasterPK)";
                        insert = d2.update_method_wo_parameter(quest, "text");
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='is_matching'");
                    if (questselect.Trim() == "0")
                    {
                        quest = " alter table tbl_question_master add is_matching bit ";
                        insert = d2.update_method_wo_parameter(quest, "text");
                    }
                    try
                    {
                        questselect = d2.GetFunction(" SELECT COLUMN_DEFAULT FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' AND COLUMN_NAME = 'is_Matching' AND COLUMN_DEFAULT IS NOT NULL");
                        if (questselect.Trim() == "0")
                        {
                            quest = " alter table tbl_question_master add constraint DF_tbl_question_master_is_Matching default 0  for is_Matching";
                            insert = d2.update_method_wo_parameter(quest, "text");
                        }
                    }
                    catch { }
                    quest = string.Empty;
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='subject_no'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table tbl_question_master add subject_no int";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='syllabus'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table tbl_question_master add syllabus nvarchar(150)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='mark'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table tbl_question_master add mark double precision(8)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='is_descriptive'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table tbl_question_master add is_descriptive int";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='question'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table tbl_question_master add question nvarchar(max)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='answer'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table tbl_question_master add answer nvarchar(max)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='options'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table tbl_question_master add options nvarchar(max)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='type'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table tbl_question_master add type int";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='Already_exist'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table tbl_question_master add Already_exist  tinyint";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='qmatching'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table tbl_question_master add qmatching nvarchar(max)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='file_name'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table tbl_question_master add file_name nvarchar(150)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='file_type'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table tbl_question_master add file_type nvarchar(150)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='quetion_image'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table tbl_question_master add quetion_image image";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='QuestionType'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table tbl_question_master add QuestionType tinyint";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='QuestionSubType'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table tbl_question_master add QuestionSubType tinyint";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='totalChoice'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table tbl_question_master add totalChoice int";
                    }
                    if (quest.Trim() != "")
                    {
                        d2.update_method_wo_parameter(quest, "text");
                    }
                    quest = string.Empty;
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' and COLUMN_NAME='needChoice'");
                    if (questselect.Trim() == "0")
                    {
                        quest = " ALTER TABLE tbl_question_master  ADD needChoice bit";
                        d2.update_method_wo_parameter(quest, "text");
                    }
                    questselect = d2.GetFunction("SELECT COLUMN_DEFAULT FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_question_master' AND COLUMN_NAME = 'needChoice' AND COLUMN_DEFAULT IS NOT NULL");
                    if (questselect.Trim() == "0")
                    {
                        quest = " alter table tbl_question_master add constraint DF_tbl_question_master_needChoice default 0  for needChoice";
                        d2.update_method_wo_parameter(quest, "text");
                    }
                }
                quest = string.Empty;
                questselect = string.Empty;
                questselect = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.tables WHERE TABLE_NAME = 'Exist_questions'");
                if (questselect == "0")
                {
                    quest = " create table Exist_questions (Exist_questionPK  bigint identity(1,1)constraint PK_Exist_questions_Exist_questionPK primary key, syllabus nvarchar(150), Test_code nvarchar(150),subject_no  int,Must_attend nvarchar(150), Section nvarchar(150), QuestionMasterFK bigint constraint FK_Exist_questions_QuestionMasterFK foreign key references tbl_question_master(QuestionMasterPK),is_internal  tinyint,Exam_month nvarchar(150),Exam_year nvarchar(150),QNo int,section_name nvarchar(max))";
                    d2.update_method_wo_parameter(quest, "text");
                }
                questselect = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.tables WHERE TABLE_NAME = 'Exist_questions'");
                if (questselect.Trim() != "0")
                {
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Exist_questions' and COLUMN_NAME='Exist_questionPK'");
                    if (questselect.Trim() == "0")
                    {
                        quest = " ALTER TABLE Exist_questions  ADD Exist_questionPK  bigint identity(1,1) primary key";
                        d2.update_method_wo_parameter(quest, "text");
                    }
                    questselect = d2.GetFunction("SELECT Col.Column_Name from INFORMATION_SCHEMA.TABLE_CONSTRAINTS Tab, INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE Col WHERE Col.Constraint_Name = Tab.Constraint_Name AND Col.Table_Name = Tab.Table_Name AND Constraint_Type = 'PRIMARY KEY' AND Col.Table_Name = 'Exist_questions' and col.COLUMN_NAME='Exist_questionPK'");
                    if (questselect.Trim() == "0")
                    {
                        quest = " alter table Exist_questions add constraint PK_Exist_questions_Exist_questionPK primary key (Exist_questionPK)";
                        d2.update_method_wo_parameter(quest, "text");
                    }
                    quest = string.Empty;
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Exist_questions' and COLUMN_NAME='syllabus'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " ALTER TABLE Exist_questions  ADD syllabus nvarchar(150)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Exist_questions' and COLUMN_NAME='Test_code'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " ALTER TABLE Exist_questions  ADD Test_code nvarchar(150)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Exist_questions' and COLUMN_NAME='subject_no'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " ALTER TABLE Exist_questions  ADD subject_no  int";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Exist_questions' and COLUMN_NAME='Must_attend'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " ALTER TABLE Exist_questions  ADD Must_attend nvarchar(150)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Exist_questions' and COLUMN_NAME='Section'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " ALTER TABLE Exist_questions  ADD Section nvarchar(150)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Exist_questions' and COLUMN_NAME='is_internal'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " ALTER TABLE Exist_questions  ADD is_internal  tinyint";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Exist_questions' and COLUMN_NAME='Exam_month'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " ALTER TABLE Exist_questions  ADD Exam_month nvarchar(150)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Exist_questions' and COLUMN_NAME='Exam_year'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " ALTER TABLE Exist_questions  ADD Exam_year nvarchar(150)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Exist_questions' and COLUMN_NAME='section_name'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " ALTER TABLE Exist_questions  ADD section_name nvarchar(max)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Exist_questions' and COLUMN_NAME='QNo'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " ALTER TABLE Exist_questions  ADD QNo int";
                    }
                    if (quest.Trim() != "")
                    {
                        d2.update_method_wo_parameter(quest, "text");
                    }
                    questselect = d2.GetFunction("  SELECT COLUMN_DEFAULT FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Exist_questions' AND COLUMN_NAME = 'QuestionMasterFK'");
                    if (questselect.Trim() != "0")
                    {
                        quest = " alter table Exist_questions alter column  QuestionMasterFK bigint";
                        d2.update_method_wo_parameter(quest, "text");
                    }
                    quest = string.Empty;
                    questselect = string.Empty;
                    try
                    {
                        questselect = d2.GetFunction("select CONSTRAINT_NAME from INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE where table_name ='Exist_questions' and COLUMN_NAME='QuestionMasterFK'");
                        if (questselect.Trim() == "0")
                        {
                            quest = " alter table Exist_questions add constraint FK_Exist_questions_QuestionMasterFK foreign key (QuestionMasterFK) references tbl_question_master(QuestionMasterPK)";
                            d2.update_method_wo_parameter(quest, "text");
                        }
                    }
                    catch { }
                }
                quest = string.Empty;
                questselect = string.Empty;
                questselect = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.tables WHERE TABLE_NAME = 'questionwise_marksentry'");
                if (questselect.Trim() == "0")
                {
                    questselect = " CREATE TABLE questionwise_marksentry(qid bigint identity constraint PK_questionwise_marksentry_qid primary key,Questionentryid bigint constraint FK_questionwise_marksentry_Questionentryid foreign key references tbl_question_master(QuestionMasterPK),roll_no varchar(100),mark_obtained float,subject_no int,isinternal int,criteria_no int,exam_month  nvarchar(200),exam_year nvarchar(max),Mark_Entry_date datetime constraint  DF_questionwise_marksentry_Mark_Entry_date default getdate())";
                    d2.update_method_wo_parameter(questselect, "text");
                }
                questselect = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.tables WHERE TABLE_NAME = 'questionwise_marksentry'");
                if (questselect.Trim() != "0")
                {
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'questionwise_marksentry' and COLUMN_NAME='roll_no'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table questionwise_marksentry add roll_no varchar(100)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'questionwise_marksentry' and COLUMN_NAME='mark_obtained'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table questionwise_marksentry add mark_obtained float";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'questionwise_marksentry' and COLUMN_NAME='subject_no'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table questionwise_marksentry add subject_no int";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'questionwise_marksentry' and COLUMN_NAME='isinternal'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table questionwise_marksentry add isinternal int";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'questionwise_marksentry' and COLUMN_NAME='criteria_no'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table questionwise_marksentry add criteria_no int";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'questionwise_marksentry' and COLUMN_NAME='exam_month'");
                    if (questselect.Trim() == "0")
                    {
                        quest += "  alter table questionwise_marksentry add exam_month nvarchar(200)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'questionwise_marksentry' and COLUMN_NAME='exam_year'");
                    if (questselect.Trim() == "0")
                    {
                        quest += "  alter table questionwise_marksentry add exam_year nvarchar(max)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'questionwise_marksentry' and COLUMN_NAME='exam_year'");
                    if (questselect.Trim() == "0")
                    {
                        quest += "  alter table questionwise_marksentry add exam_year nvarchar(max)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'questionwise_marksentry' and COLUMN_NAME='qid'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table questionwise_marksentry add qid bigint identity ";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'questionwise_marksentry' and COLUMN_NAME='Questionentryid'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table questionwise_marksentry add Questionentryid bigint";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'questionwise_marksentry' and COLUMN_NAME='Mark_Entry_date'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " ALTER TABLE questionwise_marksentry ADD Mark_Entry_date datetime";
                    }
                    if (quest.Trim() != "")
                    {
                        d2.update_method_wo_parameter(quest, "Text");
                    }
                    questselect = d2.GetFunction(" select tab.CONSTRAINT_NAME  from iNFORMATION_SCHEMA.TABLE_CONSTRAINTS Tab, INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE Col WHERE Col.Constraint_Name = Tab.Constraint_Name AND Col.Table_Name = Tab.Table_Name  AND Col.Table_Name = 'questionwise_marksentry' and CONSTRAINT_TYPE='PRIMARY KEY' and COLUMN_NAME='qid'");
                    if (questselect.Trim() == "0")
                    {
                        quest = " alter table questionwise_marksentry add constraint PK_questionwise_marksentry_qid primary key (qid)";
                        d2.update_method_wo_parameter(quest, "text");
                    }
                    questselect = d2.GetFunction("  SELECT COLUMN_DEFAULT FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'questionwise_marksentry' AND COLUMN_NAME = 'Questionentryid'");
                    if (questselect.Trim() != "0")
                    {
                        quest = " alter table questionwise_marksentry alter column  Questionentryid bigint";
                        d2.update_method_wo_parameter(quest, "text");
                    }
                    questselect = d2.GetFunction("  SELECT COLUMN_DEFAULT FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'questionwise_marksentry' AND COLUMN_NAME = 'Mark_Entry_date' AND COLUMN_DEFAULT IS NOT NULL");
                    if (questselect.Trim() == "0")
                    {
                        quest = " alter table questionwise_marksentry add constraint  DF_questionwise_marksentry_Mark_Entry_date default getdate() for Mark_Entry_date";
                        d2.update_method_wo_parameter(quest, "text");
                    }
                    try
                    {
                        questselect = d2.GetFunction("  select CONSTRAINT_NAME from INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE where table_name ='questionwise_marksentry' and COLUMN_NAME='Questionentryid'");
                        if (questselect.Trim() == "0")
                        {
                            quest = " alter table questionwise_marksentry add constraint FK_questionwise_marksentry_Questionentryid foreign key (Questionentryid) references tbl_question_master(QuestionMasterPK)";
                            d2.update_method_wo_parameter(quest, "text");
                        }
                    }
                    catch { }
                }
                quest = string.Empty;
                questselect = string.Empty;
                questselect = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.tables WHERE TABLE_NAME = 'QuestionsChoice'");
                if (questselect.Trim() == "0")
                {
                    quest = " create table QuestionsChoice(choiceID bigint identity primary key,QuestionID bigint constraint FK_QuestionsChoice_QuestionID foreign key references tbl_question_master(QuestionMasterPK),choiceNo int,QChoice nvarchar(max),QChoiceImage Image,isAnswer bit Constraint DF_QuestionsChoice_isAnswer Default 0,QMatchR nvarchar(max),QChoiceImageR Image, isMatching bit Constraint DF_QuestionsChoice_isMatching Default 0)";
                    d2.update_method_wo_parameter(quest, "Text");
                }
                quest = string.Empty;
                questselect = d2.GetFunction(" SELECT TABLE_NAME FROM INFORMATION_SCHEMA.tables WHERE TABLE_NAME = 'QuestionsChoice'");
                if (questselect.Trim() != "0")
                {
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'QuestionsChoice' and COLUMN_NAME='choiceID'");
                    if (questselect.Trim() == "0")
                    {
                        quest = " alter table QuestionsChoice add choiceID bigint identity primary key";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'QuestionsChoice' and COLUMN_NAME='QChoice'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table QuestionsChoice add QChoice nvarchar(max)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'QuestionsChoice' and COLUMN_NAME='QChoiceImage'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table QuestionsChoice add QChoiceImage Image";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'QuestionsChoice' and COLUMN_NAME='QMatchR'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table QuestionsChoice add QMatchR nvarchar(max)";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'QuestionsChoice' and COLUMN_NAME='QChoiceImageR'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table QuestionsChoice add QChoiceImageR Image";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'QuestionsChoice' and COLUMN_NAME='isAnswer'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table QuestionsChoice add isAnswer bit";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'QuestionsChoice' and COLUMN_NAME='isMatching'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table QuestionsChoice add isMatching bit";
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'QuestionsChoice' and COLUMN_NAME='QuestionID'");
                    if (questselect.Trim() == "0")
                    {
                        quest += " alter table QuestionsChoice add QuestionID bigint";
                    }
                    if (quest.Trim() != "")
                    {
                        d2.update_method_wo_parameter(quest, "text");
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_DEFAULT FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'QuestionsChoice' AND COLUMN_NAME = 'isAnswer' AND COLUMN_DEFAULT IS NOT NULL");
                    if (questselect.Trim() == "0")
                    {
                        quest = " alter table QuestionsChoice add Constraint DF_QuestionsChoice_isAnswer Default 0 for isAnswer";
                        d2.update_method_wo_parameter(quest, "Text");
                    }
                    questselect = d2.GetFunction(" SELECT COLUMN_DEFAULT FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'QuestionsChoice' AND COLUMN_NAME = 'isMatching' AND COLUMN_DEFAULT IS NOT NULL");
                    if (questselect.Trim() == "0")
                    {
                        quest = " alter table QuestionsChoice add Constraint DF_QuestionsChoice_isMatching Default 0 for isMatching";
                        d2.update_method_wo_parameter(quest, "Text");
                    }
                    questselect = d2.GetFunction(" select CONSTRAINT_NAME from INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE where table_name ='QuestionsChoice' and COLUMN_NAME='QuestionID'");
                    if (questselect.Trim() == "0")
                    {
                        quest = " alter table QuestionsChoice add constraint FK_QuestionsChoice_QuestionID foreign key (QuestionID) references tbl_question_master(QuestionMasterPK) ";
                        d2.update_method_wo_parameter(quest, "text");
                    }
                }
            }
            string qry = "if exists (select * from IPatchStatus where ModuleName='Question') update IPatchStatus set ClientUpdatedDate='" + DateTime.Now.ToString("yyyy/MM/dd") + "' where ModuleName='Question' ";
            int res = d2.update_method_wo_parameter(qry, "Text");
            if (res != 0)
            {
                alertmessage.Visible = true;
                lbl_alerterror.Text = " Updated Successfully";
            }
            bindgrid();
        }
        catch (Exception ex)
        {
            d2.sendErrorMail(ex, "13", "i_patch_master");
            errmsg.Text = ex.ToString();
            errmsg.Visible = true;
        }
    }

    public void LatestAlterQueryForAcademic()
    {
        try
        {
            string AltQ = string.Empty;
            int Upd = 0;
            string Rty = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration ' AND COLUMN_NAME = 'IsSchemeAdmission'");
            if (Rty == "0")
                AltQ = " alter table registration add IsSchemeAdmission bit";
            string dprt = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'IsSchemeCode'");
            if (dprt == "0")
                AltQ += "  alter table registration add IsSchemeCode bigint";
            string Adddtex = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'registration' AND COLUMN_NAME = 'IsSchemeAmount'");
            if (Adddtex == "0")
                AltQ += "  alter table registration add IsSchemeAmount decimal(12,2)";
            Adddtex = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'tbl_consider_day_order' AND COLUMN_NAME = 'DayOrder'");
            if (Adddtex == "0")
                AltQ += "  alter table tbl_consider_day_order add DayOrder tinyint NOT NULL CONSTRAINT DF_tbl_consider_day_order_DayOrder  DEFAULT 0";
            Adddtex = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stucon' AND COLUMN_NAME = 'feeOnRollDate'");
            if (Adddtex == "0")
                AltQ += "  ALTER TABLE stucon ADD feeOnRollDate DateTime";
            Adddtex = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stucon' AND COLUMN_NAME = 'suspendFromDate'");
            if (Adddtex == "0")
                AltQ += "  ALTER TABLE stucon ADD suspendFromDate DateTime";
            Adddtex = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'stucon' AND COLUMN_NAME = 'suspendToDate'");
            if (Adddtex == "0")
                AltQ += "  ALTER TABLE stucon ADD suspendToDate DateTime";
            Adddtex = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'degree' AND COLUMN_NAME = 'Dept_Priority'");
            if (Adddtex == "0")
                AltQ += "  alter table degree add Dept_Priority int";
            Adddtex = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'degree' AND COLUMN_NAME = 'deg_Vission'");
            if (Adddtex == "0")
                AltQ += "  alter table degree add deg_Vission varchar(max)";
            Adddtex = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'degree' AND COLUMN_NAME = 'deg_Mission'");
            if (Adddtex == "0")
                AltQ += "  alter table degree add deg_Mission varchar(max)";
            Adddtex = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'holidayStudents' AND COLUMN_NAME = 'Not_include_dayorder'");
            if (Adddtex == "0")
                AltQ += "  alter table holidayStudents add Not_include_dayorder bit";
            Adddtex = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'holidayStudents' AND COLUMN_NAME = 'Not_include_dayorder'");
            if (Adddtex == "0")
                AltQ += "  alter table holidayStudents add Not_include_dayorder bit";
            Adddtex = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'IsFinPartPay'");
            if (Adddtex == "0")
                AltQ += "  alter table applyn add IsFinPartPay bit not null default 0";
            Adddtex = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Stud_prev_details' AND COLUMN_NAME = 'PCM_Percentage'");
            if (Adddtex == "0")
                AltQ += "   alter table Stud_prev_details add PCM_Percentage decimal(12,2)";
            Adddtex = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'IsCollege'");
            if (Adddtex == "0")
                AltQ += "   alter table code_generation alter column IsCollege tinyint";
            Adddtex = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'Edulevel'");
            if (Adddtex == "0")
                AltQ += " alter table code_generation add Edulevel nvarchar(100)";

            // jairam add Query for Applyn

            Adddtex = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'TMR_NO'");
            if (Adddtex == "0")
                AltQ += " Alter table applyn add TMR_NO nvarchar(20)  constraint [applyntmr_no] default (0)";

            Adddtex = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Certificate_No'");
            if (Adddtex == "0")
                AltQ += " Alter table applyn add Certificate_No nvarchar(20)  constraint [applynCertificate_No] default (0)";


            Adddtex = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Certificate_Date'");
            if (Adddtex == "0")
                AltQ += " Alter table applyn add Certificate_Date datetime ";

            Adddtex = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Romancatholic'");
            if (Adddtex == "0")
                AltQ += " alter table applyn add Romancatholic bit";

            Adddtex = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Dalits'");
            if (Adddtex == "0")
                AltQ += " alter table applyn add Dalits bit";

            Adddtex = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'Parish_name'");
            if (Adddtex == "0")
                AltQ += " alter table applyn add Parish_name nvarchar(200)";

            if (AltQ != "")
                Upd = d2.update_method_wo_parameter(AltQ, "Text");

            // jairam add for Appliction Procedure
            string comalter = string.Empty;
            int commnalter = 0;
            string Onlinefeedbacksave = string.Empty;
            Onlinefeedbacksave = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'applyn_student_det_update'");
            if (Onlinefeedbacksave.Trim() == "0")
            {
                comalter = " create proc applyn_student_det_update (@IsConfirm bit,@stud_name nvarchar(200),@sex tinyint,@parent_name nvarchar(100),@dob datetime,@parent_occu numeric,@mother_tongue numeric,@religion numeric,@citizen numeric,@community numeric,@caste numeric,@parent_addressC nvarchar(1000),@Streetc nvarchar(500),@Cityc nvarchar(500),@parent_statec numeric,@Countryc varchar(50),@parent_pincodec nvarchar(200) ,@Student_Mobile nvarchar(100),@StuPer_Id nvarchar(100),@parent_phnoc nvarchar(100),@alter_mobileno varchar(20),@parent_addressP nvarchar(1000),@Streetp nvarchar(500),@cityp nvarchar(500),@parent_statep numeric,@Countryp varchar(50),@parent_pincodep nvarchar(200),@parent_phnop nvarchar(100),@SubCaste numeric,@parent_income numeric,@parentF_Mobile nvarchar(100),@emailp nvarchar(200),@mother nvarchar(100),@motherocc numeric,@mIncome numeric,@parentM_Mobile nvarchar(100),@emailM nvarchar(100),@guardian_name nvarchar(100),@guardian_mobile nvarchar(100),@emailg nvarchar(500),@bldgrp numeric,@place_birth nvarchar(100),@Aadharcard_no varchar(30),@fatherdob datetime,@motherdob datetime,@mar_status smallint,@mQualification numeric,@fqualification numeric,@idmark nvarchar(500),@EMISNumber nvarchar(100),@StudHeight nvarchar(100),@StudWeight nvarchar(100),@app_no bigint)as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY update  applyn set IsConfirm=@IsConfirm,stud_name=@stud_name,sex=@sex,parent_name=@parent_name,dob=@dob,parent_occu=@parent_occu,mother_tongue=@mother_tongue,religion=@religion,citizen=@citizen,community=@community,caste=@caste,parent_addressC=@parent_addressC,Streetc=@Streetc,Cityc=@Cityc,parent_statec=@parent_statec,Countryc=@Countryc,parent_pincodec=@parent_pincodec,Student_Mobile=@Student_Mobile,StuPer_Id=@StuPer_Id,parent_phnoc=@parent_phnop,alter_mobileno=@alter_mobileno,parent_addressP=@parent_addressP,Streetp=@Streetp,cityp=@cityp,parent_statep=@parent_statep,Countryp=@Countryp,parent_pincodep=@parent_pincodep,parent_phnop=@parent_phnop,SubCaste=@SubCaste,parent_income=@parent_income,parentF_Mobile=@parentF_Mobile,emailp=@emailp,mother=@mother,motherocc=@motherocc,mIncome=@mIncome,parentM_Mobile=@parentM_Mobile,emailM=@emailM,guardian_name=@guardian_name,guardian_mobile=@guardian_mobile,emailg=@emailg,bldgrp=@bldgrp,place_birth=@place_birth,Aadharcard_no=@Aadharcard_no, fatherdob=@fatherdob, motherdob=@motherdob, mar_status=@mar_status, mQualification=@mQualification, fqualification=@fqualification, idmark=@idmark, StudHeight=@StudHeight,StudWeight=@StudWeight,EMIS_Number=@EMISNumber where app_no=@app_no COMMIT TRANSACTION END TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY End END CATCH End ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            else
            {
                comalter = " Alter proc applyn_student_det_update (@IsConfirm bit,@stud_name nvarchar(200),@sex tinyint,@parent_name nvarchar(100),@dob datetime,@parent_occu numeric,@mother_tongue numeric,@religion numeric,@citizen numeric,@community numeric,@caste numeric,@parent_addressC nvarchar(1000),@Streetc nvarchar(500),@Cityc nvarchar(500),@parent_statec numeric,@Countryc varchar(50),@parent_pincodec nvarchar(200) ,@Student_Mobile nvarchar(100),@StuPer_Id nvarchar(100),@parent_phnoc nvarchar(100),@alter_mobileno varchar(20),@parent_addressP nvarchar(1000),@Streetp nvarchar(500),@cityp nvarchar(500),@parent_statep numeric,@Countryp varchar(50),@parent_pincodep nvarchar(200),@parent_phnop nvarchar(100),@SubCaste numeric,@parent_income numeric,@parentF_Mobile nvarchar(100),@emailp nvarchar(200),@mother nvarchar(100),@motherocc numeric,@mIncome numeric,@parentM_Mobile nvarchar(100),@emailM nvarchar(100),@guardian_name nvarchar(100),@guardian_mobile nvarchar(100),@emailg nvarchar(500),@bldgrp numeric,@place_birth nvarchar(100),@Aadharcard_no varchar(30),@fatherdob datetime,@motherdob datetime,@mar_status smallint,@mQualification numeric,@fqualification numeric,@idmark nvarchar(500),@EMISNumber nvarchar(100),@StudHeight nvarchar(100),@StudWeight nvarchar(100),@app_no bigint)as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY update  applyn set IsConfirm=@IsConfirm,stud_name=@stud_name,sex=@sex,parent_name=@parent_name,dob=@dob,parent_occu=@parent_occu,mother_tongue=@mother_tongue,religion=@religion,citizen=@citizen,community=@community,caste=@caste,parent_addressC=@parent_addressC,Streetc=@Streetc,Cityc=@Cityc,parent_statec=@parent_statec,Countryc=@Countryc,parent_pincodec=@parent_pincodec,Student_Mobile=@Student_Mobile,StuPer_Id=@StuPer_Id,parent_phnoc=@parent_phnop,alter_mobileno=@alter_mobileno,parent_addressP=@parent_addressP,Streetp=@Streetp,cityp=@cityp,parent_statep=@parent_statep,Countryp=@Countryp,parent_pincodep=@parent_pincodep,parent_phnop=@parent_phnop,SubCaste=@SubCaste,parent_income=@parent_income,parentF_Mobile=@parentF_Mobile,emailp=@emailp,mother=@mother,motherocc=@motherocc,mIncome=@mIncome,parentM_Mobile=@parentM_Mobile,emailM=@emailM,guardian_name=@guardian_name,guardian_mobile=@guardian_mobile,emailg=@emailg,bldgrp=@bldgrp,place_birth=@place_birth,Aadharcard_no=@Aadharcard_no, fatherdob=@fatherdob, motherdob=@motherdob, mar_status=@mar_status, mQualification=@mQualification, fqualification=@fqualification, idmark=@idmark, StudHeight=@StudHeight,StudWeight=@StudWeight,EMIS_Number=@EMISNumber where app_no=@app_no COMMIT TRANSACTION END TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY End END CATCH End";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }



            Onlinefeedbacksave = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'getstudentapplydetails'");
            if (Onlinefeedbacksave.Trim() == "0")
            {
                comalter = " Create proc getstudentapplydetails (@app_no bigint) as begin select r.Roll_Admit,clg.collname,r.batch_year,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate, CampusReq, DistinctSport,co_curricular,parent_phnoc,parent_nametamil,emailM,parentM_Mobile,alter_mobileno,(Select TextVal FROM TextValTable T WHERE isnull(motherocc,0) = T.TextCode) motherocc,emailg,guardian_mobile,guardian_name,emailp,(Select TextVal FROM TextValTable T WHERE isnull(mIncome,0) = T.TextCode) mIncome,(Select TextVal FROM TextValTable T WHERE isnull(parent_income,0) = T.TextCode) parent_income,mother,parentF_Mobile,place_birth,(Select TextVal FROM TextValTable T WHERE isnull(partI_Language,0) = T.TextCode) partI_Language, bldgrp,Aadharcard_no,a.Alternativedegree_code,app_formno,CONVERT(varchar(10), date_applied,103) as date_applied,r.stud_name,sex,Relationship,parent_name,CONVERT(varchar(10), dob,103) as dob ,(Select TextVal FROM TextValTable T WHERE parent_occu = isnull(T.TextCode,0)) parent_occu,(Select TextVal FROM TextValTable T WHERE isnull(mother_tongue,0) = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE isnull(religion,0) = T.TextCode) religion,(Select TextVal FROM TextValTable T WHERE isnull(citizen,0) = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE isnull(community,0) = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE isnull(caste,0) = T.TextCode) caste,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate,CampusReq,DistinctSport,co_curricular,parent_addressC,Streetc,Cityc,(Select TextVal FROM TextValTable T WHERE isnull(parent_statec,0) = T.TextCode) parent_statec,(Select TextVal FROM TextValTable T WHERE isnull(Countryc,0) = CONVERT(varchar(50), T.TextCode))Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc,alter_mobileno, parent_addressP,Streetp,cityp,parent_statep, (Select TextVal FROM TextValTable T WHERE isnull(Countryp,0) = CONVERT(varchar(50),T.TextCode)) Countryp,parent_pincodep,parent_phnop,a.degree_code,r.batch_year,a.college_code,SubCaste,isdisable ,isdisabledisc,islearningdis,missionarydisc,MissionaryChild,(Select TextVal FROM TextValTable T WHERE seattype=t.TextCode)seatname,seattype,r.current_semester,ncccadet ,C.Course_Name,c.Course_Id ,Dt.Dept_Name,CONVERT(varchar(10), fatherdob,103) as  fatherdob, CONVERT(varchar(10), motherdob,103) as  motherdob, ExsRank,ExsNumber,ReserveCategory,EconBackword,(Select TextVal FROM TextValTable T WHERE isnull(SecondLang,0) = T.TextCode) SecondLang, (Select TextVal FROM TextValTable T WHERE isnull(ThirdLang,0) = T.TextCode)   ThirdLang,ExSPlace,tutionfee_waiver,isdonar,mar_status,mQualification,fqualification, idmark,Insurance_Amount,Insurance_Nominee,parentoldstud,Driving_details,IsDrivingLic ,IsInsurance ,Insurance_InsBy,Insurance_NominRelation,case when r.mode='1' then 'Regular' when r.mode='2' then 'Transfer' when r.mode='3' then 'Lateral' end mode,r.mode as modeval,a.StudHeight,a.StudWeight,a.EMIS_Number from applyn a,Registration r,degree d,Department dt,Course C ,collinfo clg where r.college_code=clg.college_code and d.college_code=clg.college_code and  r.App_No=a.app_no and d.Degree_Code=r.degree_code and d.college_code=r.college_code and d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and  a.app_no=@app_no end ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            else
            {
                comalter = " Alter proc getstudentapplydetails (@app_no bigint) as begin select r.Roll_Admit,clg.collname,r.batch_year,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate, CampusReq, DistinctSport,co_curricular,parent_phnoc,parent_nametamil,emailM,parentM_Mobile,alter_mobileno,(Select TextVal FROM TextValTable T WHERE isnull(motherocc,0) = T.TextCode) motherocc,emailg,guardian_mobile,guardian_name,emailp,(Select TextVal FROM TextValTable T WHERE isnull(mIncome,0) = T.TextCode) mIncome,(Select TextVal FROM TextValTable T WHERE isnull(parent_income,0) = T.TextCode) parent_income,mother,parentF_Mobile,place_birth,(Select TextVal FROM TextValTable T WHERE isnull(partI_Language,0) = T.TextCode) partI_Language, bldgrp,Aadharcard_no,a.Alternativedegree_code,app_formno,CONVERT(varchar(10), date_applied,103) as date_applied,r.stud_name,sex,Relationship,parent_name,CONVERT(varchar(10), dob,103) as dob ,(Select TextVal FROM TextValTable T WHERE parent_occu = isnull(T.TextCode,0)) parent_occu,(Select TextVal FROM TextValTable T WHERE isnull(mother_tongue,0) = T.TextCode) mother_tongue,(Select TextVal FROM TextValTable T WHERE isnull(religion,0) = T.TextCode) religion,(Select TextVal FROM TextValTable T WHERE isnull(citizen,0) = T.TextCode) citizen,(Select TextVal FROM TextValTable T WHERE isnull(community,0) = T.TextCode) community,(Select TextVal FROM TextValTable T WHERE isnull(caste,0) = T.TextCode) caste,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate,CampusReq,DistinctSport,co_curricular,parent_addressC,Streetc,Cityc,(Select TextVal FROM TextValTable T WHERE isnull(parent_statec,0) = T.TextCode) parent_statec,(Select TextVal FROM TextValTable T WHERE isnull(Countryc,0) = CONVERT(varchar(50), T.TextCode))Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc,alter_mobileno, parent_addressP,Streetp,cityp,parent_statep, (Select TextVal FROM TextValTable T WHERE isnull(Countryp,0) = CONVERT(varchar(50),T.TextCode)) Countryp,parent_pincodep,parent_phnop,a.degree_code,r.batch_year,a.college_code,SubCaste,isdisable ,isdisabledisc,islearningdis,missionarydisc,MissionaryChild,(Select TextVal FROM TextValTable T WHERE seattype=t.TextCode)seatname,seattype,r.current_semester,ncccadet ,C.Course_Name,c.Course_Id ,Dt.Dept_Name,CONVERT(varchar(10), fatherdob,103) as  fatherdob, CONVERT(varchar(10), motherdob,103) as  motherdob, ExsRank,ExsNumber,ReserveCategory,EconBackword,(Select TextVal FROM TextValTable T WHERE isnull(SecondLang,0) = T.TextCode) SecondLang, (Select TextVal FROM TextValTable T WHERE isnull(ThirdLang,0) = T.TextCode)   ThirdLang,ExSPlace,tutionfee_waiver,isdonar,mar_status,mQualification,fqualification, idmark,Insurance_Amount,Insurance_Nominee,parentoldstud,Driving_details,IsDrivingLic ,IsInsurance ,Insurance_InsBy,Insurance_NominRelation,case when r.mode='1' then 'Regular' when r.mode='2' then 'Transfer' when r.mode='3' then 'Lateral' end mode,r.mode as modeval,a.StudHeight,a.StudWeight,a.EMIS_Number from applyn a,Registration r,degree d,Department dt,Course C ,collinfo clg where r.college_code=clg.college_code and d.college_code=clg.college_code and  r.App_No=a.app_no and d.Degree_Code=r.degree_code and d.college_code=r.college_code  and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id and  a.app_no=@app_no end";
                //and d.Degree_Code =a.degree_code alter by sudhagar 22.04.2017
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }

            Onlinefeedbacksave = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ol_studentphoto_ins'");
            if (Onlinefeedbacksave.Trim() == "0")
            {
                comalter = " Create  procedure ol_studentphoto_ins(@appno bigint,@photoid Image)  as begin   if exists (select photo from StdPhoto where app_no=@appno) update StdPhoto set Photo=@photoid where app_no=@appno else insert into StdPhoto (app_no,photo) values(@appno,@photoid)  end   ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            else
            {
                comalter = " alter  procedure ol_studentphoto_ins(@appno bigint,@photoid Image)  as begin   if exists (select photo from StdPhoto where app_no=@appno) update StdPhoto set Photo=@photoid where app_no=@appno else insert into StdPhoto (app_no,photo) values(@appno,@photoid)  end    ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }

            //LIECT Application Procedure

            AltQ = "";
            string tc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Temp_studentRegister' ");
            if (tc == "0")
                AltQ = "  create table Temp_studentRegister (Register_ID bigint identity(1,1) primary key ,Studentname nvarchar(250),Dateofbirth datetime,Mobile_No nvarchar(15),Email_ID nvarchar(40),Password nvarchar(100),Register_Date datetime)";
            if (AltQ.Trim() != "")
            {
                commnalter = d2.update_method_wo_parameter(AltQ, "Text");
            }
            //SubjectWise Eligibilty Checking Query
            AltQ = "";
            tc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'coeSubjectWiseExamEligibility' ");
            if (tc == "0")
                AltQ = " create table coeSubjectWiseExamEligibility(idNo bigint identity constraint PK_coeSubjectWiseExamEligibility_idNo primary key,appNo numeric,subjectNo numeric,examCode numeric,isEligible bit not null constraint DF_coeSubjectWiseExamEligibility_isEligible Default 0,workingHours decimal(10,5) not null constraint PK_coeSubjectWiseExamEligibility_workingHours default 0,presentHours decimal(10,5) not null constraint PK_coeSubjectWiseExamEligibility_presentHours default 0,absentHours decimal(10,5) not null constraint PK_coeSubjectWiseExamEligibility_absentHours default 0,percentageHour decimal(10,5) not null constraint PK_coeSubjectWiseExamEligibility_percentageHour default 0)";
            if (AltQ.Trim() != "")
            {
                commnalter = d2.update_method_wo_parameter(AltQ, "Text");
            }

            Onlinefeedbacksave = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'licet_student_det_ins'");
            if (Onlinefeedbacksave.Trim() == "0")
            {
                comalter = " Create proc licet_student_det_ins(@IsConfirm bit,@app_formno nvarchar(50),@date_applied datetime,@stud_name nvarchar(200),@sex tinyint,@parent_name nvarchar(100),@dob datetime,@parent_occu numeric,@mother_tongue numeric,@religion numeric,@citizen numeric,@community numeric,@caste numeric,@TamilOrginFromAndaman bit,@IsExService tinyint,@handy smallint,@visualhandy smallint,@first_graduate numeric,@CampusReq bit,@DistinctSport nvarchar(100),@co_curricular numeric,@parent_addressC nvarchar(1000),@Streetc nvarchar(500),@Cityc nvarchar(500),@parent_statec numeric,@Countryc varchar(50),@parent_pincodec nvarchar(200) ,@Student_Mobile nvarchar(100),@StuPer_Id nvarchar(100),@parent_phnoc nvarchar(100),@alter_mobileno varchar(20),@parent_addressP nvarchar(1000),@Streetp nvarchar(500),@cityp nvarchar(500),@parent_statep numeric,@Countryp varchar(50),@parent_pincodep nvarchar(200),@parent_phnop nvarchar(100),@degree_code numeric,@batch_year int,@college_code numeric,@SubCaste numeric,@isdisable bit ,@isdisabledisc nvarchar(200),@islearningdis bit,@missionarydisc nvarchar(200),@MissionaryChild bit,@seattype numeric,@current_semester numeric,@parent_income numeric,@parentF_Mobile nvarchar(100),@emailp nvarchar(200),@mother nvarchar(100),@motherocc numeric,@mIncome numeric,@parentM_Mobile nvarchar(100),@emailM nvarchar(100),@guardian_name nvarchar(100),@guardian_mobile nvarchar(100),@emailg nvarchar(500),@bldgrp numeric,@place_birth nvarchar(100),@Aadharcard_no varchar(30),@dis_sports nvarchar(200),@dis_extra_Activity nvarchar(200),@LastTCNo nvarchar(100),@Alternativedegree_code nvarchar(10),@mode nvarchar(10),@Romancatholic bit,@Dalits bit,@Parish_name nvarchar(200))as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY insert into applyn(IsConfirm,app_formno,date_applied,stud_name,sex,parent_name,dob,parent_occu,mother_tongue,religion,citizen,community,caste,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate,CampusReq,DistinctSport,co_curricular,parent_addressC,Streetc,Cityc,parent_statec,Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc,alter_mobileno,parent_addressP,Streetp,cityp,parent_statep,Countryp,parent_pincodep,parent_phnop,degree_code,batch_year,college_code,SubCaste,isdisable ,isdisabledisc,islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,parent_income,parentF_Mobile,emailp,mother,motherocc,mIncome,parentM_Mobile,emailM,guardian_name,guardian_mobile,emailg,bldgrp,place_birth,Aadharcard_no,dis_sports,dis_extra_Activity,LastTCNo,Alternativedegree_code,mode,Romancatholic,Dalits,Parish_name)values(@IsConfirm,@app_formno,@date_applied,@stud_name,@sex,@parent_name,@dob,@parent_occu,@mother_tongue,@religion,@citizen,@community,@caste,@TamilOrginFromAndaman,@IsExService,@handy,@visualhandy,@first_graduate,@CampusReq,@DistinctSport,@co_curricular,@parent_addressC,@Streetc,@Cityc,@parent_statec,@Countryc,@parent_pincodec,@Student_Mobile,@StuPer_Id,@parent_phnoc,@alter_mobileno,@parent_addressP,@Streetp,@cityp,@parent_statep,@Countryp,@parent_pincodep,@parent_phnop,@degree_code,@batch_year,@college_code,@SubCaste,@isdisable,@isdisabledisc,@islearningdis,@missionarydisc,@MissionaryChild,@seattype,@current_semester,@parent_income,@parentF_Mobile,@emailp,@mother,@motherocc,@mIncome,@parentM_Mobile,@emailM,@guardian_name,@guardian_mobile,@emailg,@bldgrp,@place_birth,@Aadharcard_no,@dis_sports,@dis_extra_Activity,@LastTCNo,@Alternativedegree_code,@mode,@Romancatholic ,@Dalits ,@Parish_name) COMMIT TRANSACTION END TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY End END CATCH End  ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            else
            {
                comalter = " alter proc licet_student_det_ins(@IsConfirm bit,@app_formno nvarchar(50),@date_applied datetime,@stud_name nvarchar(200),@sex tinyint,@parent_name nvarchar(100),@dob datetime,@parent_occu numeric,@mother_tongue numeric,@religion numeric,@citizen numeric,@community numeric,@caste numeric,@TamilOrginFromAndaman bit,@IsExService tinyint,@handy smallint,@visualhandy smallint,@first_graduate numeric,@CampusReq bit,@DistinctSport nvarchar(100),@co_curricular numeric,@parent_addressC nvarchar(1000),@Streetc nvarchar(500),@Cityc nvarchar(500),@parent_statec numeric,@Countryc varchar(50),@parent_pincodec nvarchar(200) ,@Student_Mobile nvarchar(100),@StuPer_Id nvarchar(100),@parent_phnoc nvarchar(100),@alter_mobileno varchar(20),@parent_addressP nvarchar(1000),@Streetp nvarchar(500),@cityp nvarchar(500),@parent_statep numeric,@Countryp varchar(50),@parent_pincodep nvarchar(200),@parent_phnop nvarchar(100),@degree_code numeric,@batch_year int,@college_code numeric,@SubCaste numeric,@isdisable bit ,@isdisabledisc nvarchar(200),@islearningdis bit,@missionarydisc nvarchar(200),@MissionaryChild bit,@seattype numeric,@current_semester numeric,@parent_income numeric,@parentF_Mobile nvarchar(100),@emailp nvarchar(200),@mother nvarchar(100),@motherocc numeric,@mIncome numeric,@parentM_Mobile nvarchar(100),@emailM nvarchar(100),@guardian_name nvarchar(100),@guardian_mobile nvarchar(100),@emailg nvarchar(500),@bldgrp numeric,@place_birth nvarchar(100),@Aadharcard_no varchar(30),@dis_sports nvarchar(200),@dis_extra_Activity nvarchar(200),@LastTCNo nvarchar(100),@Alternativedegree_code nvarchar(10),@mode nvarchar(10),@Romancatholic bit,@Dalits bit,@Parish_name nvarchar(200))as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY insert into applyn(IsConfirm,app_formno,date_applied,stud_name,sex,parent_name,dob,parent_occu,mother_tongue,religion,citizen,community,caste,TamilOrginFromAndaman,IsExService,handy,visualhandy,first_graduate,CampusReq,DistinctSport,co_curricular,parent_addressC,Streetc,Cityc,parent_statec,Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc,alter_mobileno,parent_addressP,Streetp,cityp,parent_statep,Countryp,parent_pincodep,parent_phnop,degree_code,batch_year,college_code,SubCaste,isdisable ,isdisabledisc,islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,parent_income,parentF_Mobile,emailp,mother,motherocc,mIncome,parentM_Mobile,emailM,guardian_name,guardian_mobile,emailg,bldgrp,place_birth,Aadharcard_no,dis_sports,dis_extra_Activity,LastTCNo,Alternativedegree_code,mode,Romancatholic,Dalits,Parish_name)values(@IsConfirm,@app_formno,@date_applied,@stud_name,@sex,@parent_name,@dob,@parent_occu,@mother_tongue,@religion,@citizen,@community,@caste,@TamilOrginFromAndaman,@IsExService,@handy,@visualhandy,@first_graduate,@CampusReq,@DistinctSport,@co_curricular,@parent_addressC,@Streetc,@Cityc,@parent_statec,@Countryc,@parent_pincodec,@Student_Mobile,@StuPer_Id,@parent_phnoc,@alter_mobileno,@parent_addressP,@Streetp,@cityp,@parent_statep,@Countryp,@parent_pincodep,@parent_phnop,@degree_code,@batch_year,@college_code,@SubCaste,@isdisable,@isdisabledisc,@islearningdis,@missionarydisc,@MissionaryChild,@seattype,@current_semester,@parent_income,@parentF_Mobile,@emailp,@mother,@motherocc,@mIncome,@parentM_Mobile,@emailM,@guardian_name,@guardian_mobile,@emailg,@bldgrp,@place_birth,@Aadharcard_no,@dis_sports,@dis_extra_Activity,@LastTCNo,@Alternativedegree_code,@mode,@Romancatholic ,@Dalits ,@Parish_name) COMMIT TRANSACTION END TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY End END CATCH End   ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }


            Onlinefeedbacksave = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'licet_student_det_update'");
            if (Onlinefeedbacksave.Trim() == "0")
            {
                comalter = " Create proc licet_student_det_update(@IsConfirm bit,@app_formno nvarchar(50),@date_applied datetime,@stud_name nvarchar(200),@sex tinyint,@parent_name nvarchar(100),@dob datetime,@parent_occu numeric,@mother_tongue numeric,@religion numeric,@citizen numeric,@community numeric,@caste numeric,@TamilOrginFromAndaman bit,@IsExService tinyint,@handy smallint,@visualhandy smallint,@first_graduate numeric,@CampusReq bit,@DistinctSport nvarchar(100),@co_curricular numeric,@parent_addressC nvarchar(1000),@Streetc nvarchar(500),@Cityc nvarchar(500),@parent_statec numeric,@Countryc varchar(50),@parent_pincodec nvarchar(200) ,@Student_Mobile nvarchar(100),@StuPer_Id nvarchar(100),@parent_phnoc nvarchar(100),@alter_mobileno varchar(20),@parent_addressP nvarchar(1000),@Streetp nvarchar(500),@cityp nvarchar(500),@parent_statep numeric,@Countryp varchar(50),@parent_pincodep nvarchar(200),@parent_phnop nvarchar(100),@degree_code numeric,@batch_year int,@college_code numeric,@SubCaste numeric,@isdisable bit ,@isdisabledisc nvarchar(200),@islearningdis bit,@missionarydisc nvarchar(200),@MissionaryChild bit,@seattype numeric,@current_semester numeric,@parent_income numeric,@parentF_Mobile nvarchar(100),@emailp nvarchar(200),@mother nvarchar(100),@motherocc numeric,@mIncome numeric,@parentM_Mobile nvarchar(100),@emailM nvarchar(100),@guardian_name nvarchar(100),@guardian_mobile nvarchar(100),@emailg nvarchar(500),@bldgrp numeric,@place_birth nvarchar(100),@Aadharcard_no varchar(30),@dis_sports nvarchar(200),@dis_extra_Activity nvarchar(200),@LastTCNo nvarchar(100),@Alternativedegree_code nvarchar(10),@mode nvarchar(10),@Romancatholic nvarchar(5),@Dalits nvarchar(5),@Parish_name nvarchar(200))as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY update applyn set  sex=@sex,parent_name=@parent_name,parent_occu=@parent_occu,mother_tongue=@mother_tongue,religion=@religion,citizen=@citizen,community=@community,caste=@caste,TamilOrginFromAndaman=@TamilOrginFromAndaman,IsExService=@IsExService,handy=@handy,visualhandy=@visualhandy,first_graduate=@first_graduate,CampusReq=@CampusReq,DistinctSport=@DistinctSport,co_curricular=@co_curricular,parent_addressC=@parent_addressC,Streetc=@Streetc,Cityc=@Cityc,parent_statec=@parent_statec,Countryc=@Countryc,parent_pincodec=@parent_pincodec,Student_Mobile=@Student_Mobile,StuPer_Id=@StuPer_Id,parent_phnoc=@parent_phnoc,alter_mobileno=@alter_mobileno,parent_addressP=@parent_addressP,Streetp=@Streetp,cityp=@cityp,parent_statep=@parent_statep,Countryp=@Countryp,parent_pincodep=@parent_pincodep,parent_phnop=@parent_phnop,SubCaste=@SubCaste,isdisable=@isdisable ,isdisabledisc=@isdisabledisc,islearningdis=@islearningdis,missionarydisc=@missionarydisc,MissionaryChild=@MissionaryChild,parent_income=@parent_income,parentF_Mobile=@parentF_Mobile,emailp=@emailp,mother=@mother,motherocc=@motherocc,mIncome=@mIncome,parentM_Mobile=@parentM_Mobile,emailM=@emailM,guardian_name=@guardian_name,guardian_mobile=@guardian_mobile,emailg=@emailg,bldgrp=@bldgrp,place_birth=@place_birth,Aadharcard_no=@Aadharcard_no,dis_sports=@dis_sports,dis_extra_Activity=@dis_extra_Activity,LastTCNo=@LastTCNo,Alternativedegree_code=@Alternativedegree_code ,Romancatholic=@Romancatholic,Dalits=@Dalits,Parish_name=@Parish_name where app_no=@app_formno COMMIT TRANSACTION END TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY End END CATCH End  ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            else
            {
                comalter = " alter proc licet_student_det_update(@IsConfirm bit,@app_formno nvarchar(50),@date_applied datetime,@stud_name nvarchar(200),@sex tinyint,@parent_name nvarchar(100),@dob datetime,@parent_occu numeric,@mother_tongue numeric,@religion numeric,@citizen numeric,@community numeric,@caste numeric,@TamilOrginFromAndaman bit,@IsExService tinyint,@handy smallint,@visualhandy smallint,@first_graduate numeric,@CampusReq bit,@DistinctSport nvarchar(100),@co_curricular numeric,@parent_addressC nvarchar(1000),@Streetc nvarchar(500),@Cityc nvarchar(500),@parent_statec numeric,@Countryc varchar(50),@parent_pincodec nvarchar(200) ,@Student_Mobile nvarchar(100),@StuPer_Id nvarchar(100),@parent_phnoc nvarchar(100),@alter_mobileno varchar(20),@parent_addressP nvarchar(1000),@Streetp nvarchar(500),@cityp nvarchar(500),@parent_statep numeric,@Countryp varchar(50),@parent_pincodep nvarchar(200),@parent_phnop nvarchar(100),@degree_code numeric,@batch_year int,@college_code numeric,@SubCaste numeric,@isdisable bit ,@isdisabledisc nvarchar(200),@islearningdis bit,@missionarydisc nvarchar(200),@MissionaryChild bit,@seattype numeric,@current_semester numeric,@parent_income numeric,@parentF_Mobile nvarchar(100),@emailp nvarchar(200),@mother nvarchar(100),@motherocc numeric,@mIncome numeric,@parentM_Mobile nvarchar(100),@emailM nvarchar(100),@guardian_name nvarchar(100),@guardian_mobile nvarchar(100),@emailg nvarchar(500),@bldgrp numeric,@place_birth nvarchar(100),@Aadharcard_no varchar(30),@dis_sports nvarchar(200),@dis_extra_Activity nvarchar(200),@LastTCNo nvarchar(100),@Alternativedegree_code nvarchar(10),@mode nvarchar(10),@Romancatholic nvarchar(5),@Dalits nvarchar(5),@Parish_name nvarchar(200))as BEGIN RETRY: BEGIN TRANSACTION BEGIN TRY update applyn set  sex=@sex,parent_name=@parent_name,parent_occu=@parent_occu,mother_tongue=@mother_tongue,religion=@religion,citizen=@citizen,community=@community,caste=@caste,TamilOrginFromAndaman=@TamilOrginFromAndaman,IsExService=@IsExService,handy=@handy,visualhandy=@visualhandy,first_graduate=@first_graduate,CampusReq=@CampusReq,DistinctSport=@DistinctSport,co_curricular=@co_curricular,parent_addressC=@parent_addressC,Streetc=@Streetc,Cityc=@Cityc,parent_statec=@parent_statec,Countryc=@Countryc,parent_pincodec=@parent_pincodec,Student_Mobile=@Student_Mobile,StuPer_Id=@StuPer_Id,parent_phnoc=@parent_phnoc,alter_mobileno=@alter_mobileno,parent_addressP=@parent_addressP,Streetp=@Streetp,cityp=@cityp,parent_statep=@parent_statep,Countryp=@Countryp,parent_pincodep=@parent_pincodep,parent_phnop=@parent_phnop,SubCaste=@SubCaste,isdisable=@isdisable ,isdisabledisc=@isdisabledisc,islearningdis=@islearningdis,missionarydisc=@missionarydisc,MissionaryChild=@MissionaryChild,parent_income=@parent_income,parentF_Mobile=@parentF_Mobile,emailp=@emailp,mother=@mother,motherocc=@motherocc,mIncome=@mIncome,parentM_Mobile=@parentM_Mobile,emailM=@emailM,guardian_name=@guardian_name,guardian_mobile=@guardian_mobile,emailg=@emailg,bldgrp=@bldgrp,place_birth=@place_birth,Aadharcard_no=@Aadharcard_no,dis_sports=@dis_sports,dis_extra_Activity=@dis_extra_Activity,LastTCNo=@LastTCNo,Alternativedegree_code=@Alternativedegree_code ,Romancatholic=@Romancatholic,Dalits=@Dalits,Parish_name=@Parish_name where app_no=@app_formno COMMIT TRANSACTION END TRY BEGIN CATCH Print 'Rollback Transaction' ROLLBACK TRANSACTION IF ERROR_NUMBER() = 1205 BEGIN WAITFOR DELAY '00:00:00.05' GOTO RETRY End END CATCH End  ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }

            //NewCollege Procedure
            Onlinefeedbacksave = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ol_studentsign_ins'");
            if (Onlinefeedbacksave.Trim() == "0")
            {
                comalter = " Create  procedure ol_studentsign_ins(@appno bigint,@photoid Image)  as begin   if exists (select app_no from StdPhoto where app_no=@appno) update StdPhoto set s_sign=@photoid where app_no=@appno else insert into StdPhoto (app_no,s_sign) values(@appno,@photoid)  end  ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            else
            {
                comalter = " Alter  procedure ol_studentsign_ins(@appno bigint,@photoid Image)  as begin   if exists (select app_no from StdPhoto where app_no=@appno) update StdPhoto set s_sign=@photoid where app_no=@appno else insert into StdPhoto (app_no,s_sign) values(@appno,@photoid)  end   ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }


            //19.04.17 barath
            AltQ = "";
            tc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Tc_details' ");
            if (tc == "0")
                AltQ = "  Create table Tc_details (Tc_details_PK bigint identity(1,1) , App_no bigint,Annualexamination_result Nvarchar(max),noofattempts tinyint,subjectstudied nvarchar(max),NCC_BoyScout_GirlGuide Nvarchar(200),Qualified_promotion Nvarchar(200),Paid_dues nvarchar(200),General_conduct nvarchar(200),Dateofapplcertificate datetime,dateofissuecertificate datetime,reasonforrelive bigint, Fee_concession nvarchar(200),Part1Language bigint,Vocationorgeneral bit,Medium_study bigint)";
            if (AltQ.Trim() != "")
            {
                commnalter = d2.update_method_wo_parameter(AltQ, "Text");
            }

            AltQ = "";
            tc = d2.GetFunction("  SELECT TABLE_NAME FROM INFORMATION_SCHEMA.Tables WHERE TABLE_NAME = 'Stud_Certificate_Det' ");
            if (tc == "0")
                AltQ = "  Create table Stud_Certificate_Det(App_No bigint,Certificate_Name nvarchar(300),Filetype nvarchar(200),FileName nvarchar(200),Attach_Doc varbinary(Max))";
            if (AltQ.Trim() != "")
            {
                commnalter = d2.update_method_wo_parameter(AltQ, "Text");
            }


            AltQ = "";
            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'Affiliation_No'");
            if (tc == "0")
                AltQ += " alter table collinfo add Affiliation_No nvarchar(100)";
            tc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'educationdistrict'");
            if (tc == "0")
                AltQ += "  alter table collinfo add educationdistrict nvarchar(200)";
            tc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'disposal_no'");
            if (tc == "0")
                AltQ += "   alter table collinfo add disposal_no nvarchar(max)";
            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Tc_details' AND COLUMN_NAME = 'Totalnoofworkingdays'");
            if (tc == "0")
                AltQ += " alter table Tc_details add Totalnoofworkingdays nvarchar(20) ";
            else
                AltQ += "   alter table Tc_details alter column Totalnoofworkingdays nvarchar(20) ";
            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Tc_details' AND COLUMN_NAME = 'Totalnoofpresentdays '");
            if (tc == "0")
                AltQ += " alter table Tc_details add Totalnoofpresentdays nvarchar(20) ";
            else
                AltQ += "   alter table Tc_details alter column Totalnoofpresentdays nvarchar(20) ";
            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Tc_details' AND COLUMN_NAME = 'Class_teacher_name '");
            if (tc == "0")
                AltQ += " alter table Tc_details add Class_teacher_name bigint,checkedby_name bigint,checkby_design bigint";

            if (AltQ.Trim() != "")
            {
                commnalter = d2.update_method_wo_parameter(AltQ, "Text");
            }
            //28.06.2017
            ExecuteQuery("alter table Tc_details add categorytype tinyint", "Tc_details", "categorytype", 1);
            ExecuteQuery("alter table Tc_details add MedicalInspection bit", "Tc_details", "MedicalInspection", 1);
            ExecuteQuery("alter table Tc_details add laststudieddate datetime", "Tc_details", "laststudieddate", 1);
            ExecuteQuery("alter table Tc_details alter column laststudieddate datetime", "Tc_details", "laststudieddate", 2);
            ExecuteQuery("alter table tc_details add Serial_no nvarchar(40)", "Tc_details", "Serial_no", 1);
            ExecuteQuery("alter table Tc_details add Last_exam_mon_year nvarchar(100)", "Tc_details", "Last_exam_mon_year", 1);
            ExecuteQuery("alter table tc_details add Migration_Sl_No nvarchar(100)", "Tc_details", "Migration_Sl_No", 1);
            ExecuteQuery("alter table tc_details add program_completed nvarchar(max)", "Tc_details", "program_completed", 1);
            ExecuteQuery("alter table tc_details add commencementofclass nvarchar(100)", "Tc_details", "commencementofclass", 1);
            ExecuteQuery("alter table tc_details add migration_date bigint", "Tc_details", "migration_date", 1);
            ExecuteQuery("alter table tc_details add commencement_date bigint", "Tc_details", "commencement_date", 1);
            ExecuteQuery("alter table tc_details add periodofstudied nvarchar(100) ", "Tc_details", "periodofstudied", 1);
            ExecuteQuery("alter table tc_details add Transfer_cert_made bigint", "Tc_details", "Transfer_cert_made", 1);
            ExecuteQuery("alter table Tc_details add Attendance_type bigint", "Tc_details", "Attendance_type", 1);
            ExecuteQuery("alter table Tc_details add Last_Studied_Class nvarchar(max)", "Tc_details", "Last_Studied_Class", 1);

            //Added by jairam 05-05-2017
            AltQ = "";
            tc = "";
            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'cg_seattype'");
            if (tc == "0")
                AltQ += " alter table code_generation add cg_seattype varchar(32)";
            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'cb_mode'");
            if (tc == "0")
                AltQ += " alter table code_generation add cb_mode tinyint";
            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'cg_lastno'");
            if (tc == "0")
                AltQ += " alter table code_generation add cg_lastno bigint";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'code_generation' AND COLUMN_NAME = 'cg_generationType'");
            if (tc == "0")
                AltQ += " alter table code_generation add cg_generationType tinyint";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Eligibility_list' AND COLUMN_NAME = 'isCompleteRedo'");
            if (tc == "0")
                AltQ += " alter table Eligibility_list add isCompleteRedo bit not null constraint DF_Eligibility_list_isCompleteRedo Default '0'";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StdPhoto' AND COLUMN_NAME = 'communitycertificate'");
            if (tc == "0")
                AltQ += " alter table StdPhoto add communitycertificate image";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'coe_ovrl_credits_Dts' AND COLUMN_NAME = 'IsCommon'");
            if (tc == "0")
                AltQ += "  alter table  coe_ovrl_credits_Dts add IsCommon tinyint";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'coe_ovrl_credits_Dts' AND COLUMN_NAME = 'batchYear'");
            if (tc == "0")
                AltQ += "   alter table  coe_ovrl_credits_Dts add batchYear int";


            if (AltQ.Trim() != "")
            {
                commnalter = d2.update_method_wo_parameter(AltQ, "Text");
            }


            //       alter table Tc_details alter column Totalnoofworkingdays nvarchar(20)
            // alter table Tc_details alter column Totalnoofpresentdays nvarchar(20)
            //alter table Tc_details add Class_teacher_name bigint,checkedby_name bigint,checkby_design bigint

            //Licet Procedure for CommunityCertificate
            Onlinefeedbacksave = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'ol_studentcommunity_ins'");
            if (Onlinefeedbacksave.Trim() == "0")
            {
                comalter = "  CREATE  procedure ol_studentcommunity_ins(@appno bigint,@photoid Image)  as begin   if exists (select app_no from StdPhoto where app_no=@appno) update StdPhoto set communitycertificate=@photoid where app_no=@appno else insert into StdPhoto (app_no,communitycertificate) values(@appno,@photoid)  end  ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            else
            {
                comalter = "  alter  procedure ol_studentcommunity_ins(@appno bigint,@photoid Image)  as begin   if exists (select app_no from StdPhoto where app_no=@appno) update StdPhoto set communitycertificate=@photoid where app_no=@appno else insert into StdPhoto (app_no,communitycertificate) values(@appno,@photoid)  end   ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }

            Onlinefeedbacksave = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'student_Certificat_detailsinsert'");
            if (Onlinefeedbacksave.Trim() == "0")
            {
                comalter = " create proc student_Certificat_detailsinsert @DocName varchar(200),@Type varchar(200),@DocData varbinary(Max),@appno bigint,@CertificateName varchar(300) as begin  if exists(select * from Stud_Certificate_Det where App_No=@appno and Certificate_Name=@CertificateName)update Stud_Certificate_Det  set FileName=@DocName, Attach_Doc=@DocData, Filetype=@Type where app_no=@appno and Certificate_Name=@CertificateName else insert into Stud_Certificate_Det(Certificate_Name,FileName,Filetype,Attach_Doc,App_No) VALUES (@CertificateName,@DocName,@Type,@DocData,@appno)end  ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            else
            {
                comalter = "  alter proc student_Certificat_detailsinsert @DocName varchar(200),@Type varchar(200),@DocData varbinary(Max),@appno bigint,@CertificateName varchar(300) as begin  if exists(select * from Stud_Certificate_Det where App_No=@appno and Certificate_Name=@CertificateName)update Stud_Certificate_Det  set FileName=@DocName, Attach_Doc=@DocData, Filetype=@Type where app_no=@appno and Certificate_Name=@CertificateName else insert into Stud_Certificate_Det(Certificate_Name,FileName,Filetype,Attach_Doc,App_No) VALUES (@CertificateName,@DocName,@Type,@DocData,@appno)end  ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            //Added LICET View Process Procedure

            Onlinefeedbacksave = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'studentalldetails'");
            if (Onlinefeedbacksave.Trim() == "0")
            {
                comalter = " create proc studentalldetails @app_no bigint as begin select dt.Dept_Name,ci.address1,ci.address2,ci.address3,ci.pincode,ci.affliatedby,ci.district,ci.state,ci.pincode,a.mode,a.LastTCNo,a.college_code,ci.collname,ci.phoneno,ci.faxno,ci.email,ci.website,c.course_name,c.edu_level,type, a.app_no, case when isnull(TamilOrginFromAndaman,0)='0' then 'No' when isnull(TamilOrginFromAndaman,0)='1' then 'Yes' end TamilOrginFromAndaman, case when isnull(IsExService,0)='0' then 'No' when isnull(IsExService,0)='1' then 'Yes' end  IsExService,handy,visualhandy,case when isnull(first_graduate,0)='0' then 'No' when isnull(first_graduate,0)='1' then 'Yes' end  first_graduate, case when isnull(CampusReq,0)='0' then 'No' when isnull(CampusReq,0)='1' then 'Yes' end CampusReq,DistinctSport,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(co_curricular,0))) = convert(varchar,(T.TextCode))) co_curricular,parent_phnoc,parent_nametamil,emailM,parentM_Mobile,alter_mobileno,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(motherocc,0))) = convert(varchar,T.TextCode)) motherocc,emailg,guardian_mobile,guardian_name,emailp,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(mIncome,0))) = convert(varchar,( T.TextCode))) mIncome,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(parent_income,0))) = convert(varchar,(T.TextCode))) parent_income,mother,parentF_Mobile,place_birth,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(partI_Language,0))) = convert(varchar,(T.TextCode))) partI_Language, (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(bldgrp,0))) = convert(varchar,(T.TextCode)) and TextCriteria='bgrou') bldgrp,Aadharcard_no, Aadhaar_Enroll_No,ElectionID_No, PanCard_No,Fax_No_Per,(select dt.Dept_Name from  degree d,Department dt,Course C where  d.Degree_Code =a.Alternativedegree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id)Alternativedegree_code,app_formno,CONVERT(varchar(10), date_applied,103) as date_applied,stud_name, case when sex='0' then 'Male' when sex='1' then 'Female' when sex='2' then 'Transgender' end sex,Relationship,parent_name,CONVERT(varchar(10), dob,103) as dob ,(Select TextVal FROM TextValTable T WHERE convert(varchar,(parent_occu)) = convert(varchar,(isnull(T.TextCode,0)))) parent_occu, (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(mother_tongue,0))) = convert(varchar,(T.TextCode)))mother_tongue,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(religion,0))) = convert(varchar,(T.TextCode))) religion,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(citizen,0))) = convert(varchar,(T.TextCode))) citizen, (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(community,0))) = convert(varchar,(T.TextCode))) community,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(caste,0))) = convert(varchar,(T.TextCode)) and TextCriteria='caste' ) caste,parent_addressC,Streetc,Cityc,TalukC,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(parent_statec,0))) = convert(varchar,(T.TextCode))) parent_statec,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(Countryc,0))) = convert(varchar,(T.TextCode)))Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc, alter_mobileno,parent_addressP,Streetp,cityp,TalukP, (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(parent_statep,0))) = convert(varchar,(T.TextCode)))parent_statep,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(Countryp,0))) = convert(varchar,(T.TextCode)))   Countryp,parent_pincodep,parent_phnop,a.degree_code,batch_year,a.college_code, SubCaste, case when isnull(isdisable,0)='0' then 'No' when isnull(isdisable,0)='1' then 'Yes' end isdisable ,isdisabledisc, islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,ncccadet ,C.Course_Name,c.Course_Id ,Dt.Dept_Name,CONVERT(varchar(10), fatherdob,103) as  fatherdob, CONVERT(varchar(10), motherdob,103) as  motherdob, ExsRank,ExsNumber,ReserveCategory,EconBackword,(Select TextVal FROM TextValTable T WHERE isnull(SecondLang,0) = T.TextCode) SecondLang , (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(ThirdLang,0))) = convert(varchar,(T.TextCode)))   ThirdLang,ExSPlace,tutionfee_waiver,isdonar,mar_status,mQualification,fqualification,idmark,Insurance_Amount,Insurance_Nominee,Ins_Nomin_Age,parentoldstud,Driving_details,IsDrivingLic,Convert(varchar(10),DrivLic_Issue_Date,103) as DrivLic_Issue_Date, IsInsurance,Insurance_InsBy,Insurance_NominRelation,a.mode, a.spouse_name,InternalPercentage, ExternalPercentage, Cut_Of_Mark,PCM_Percentage,Xmedium,totalmark,securedmark,PassYear,PassMonth,course_entno,(Select TextVal FROM TextValTable T WHERE s.course_code = T.TextCode) course_code,(Select TextVal FROM TextValTable T WHERE university_code = T.TextCode)university_code,Vocational_stream,Institute_name, percentage,instaddress,Sch_Clg_Type,(Select TextVal FROM TextValTable T WHERE medium = T.TextCode) medium,(Select TextVal FROM TextValTable T WHERE isnull(s.branch_code,0) = T.TextCode )branch_code ,(Select TextVal FROM TextValTable T WHERE isnull(s.Part1Language,0) = T.TextCode )Part1Language,(Select TextVal FROM TextValTable T WHERE isnull(s.Part2Language,0) = T.TextCode )Part2Language,isgrade,uni_state,registration_no,s.PCM_Percentage, type_semester,majorallied_percent,major_percent,type_major,tancet_mark,tancetmark_year,isnull(markPriority,1) as markPriority,s.insstate_code,s.branch_code ,s.course_entno,(select textval from textvaltable where CONVERT(varchar,TextCode)=CONVERT(varchar, a.subcaste) and TextCriteria='scast') SubCaste,case when Dalits='1' then 'Yes' when Dalits='0' then 'No' end Dalits,Parish_name,(select textval from textvaltable where CONVERT(varchar,TextCode)=CONVERT(varchar, a.seattype) and TextCriteria='seat')seattypeval from applyn a right join  Stud_prev_details s on a.app_no=s.app_no ,degree d,Department dt,Course C,collinfo ci  where d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id  and ci.college_code=c.college_code and isnull(IsConfirm,0)='1'  and a.app_no=@app_no end  ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            else
            {
                comalter = "  alter proc studentalldetails @app_no bigint as begin select dt.Dept_Name,ci.address1,ci.address2,ci.address3,ci.pincode,ci.affliatedby,ci.district,ci.state,ci.pincode,a.mode,a.LastTCNo,a.college_code,ci.collname,ci.phoneno,ci.faxno,ci.email,ci.website,c.course_name,c.edu_level,type, a.app_no, case when isnull(TamilOrginFromAndaman,0)='0' then 'No' when isnull(TamilOrginFromAndaman,0)='1' then 'Yes' end TamilOrginFromAndaman, case when isnull(IsExService,0)='0' then 'No' when isnull(IsExService,0)='1' then 'Yes' end  IsExService,handy,visualhandy,case when isnull(first_graduate,0)='0' then 'No' when isnull(first_graduate,0)='1' then 'Yes' end  first_graduate, case when isnull(CampusReq,0)='0' then 'No' when isnull(CampusReq,0)='1' then 'Yes' end CampusReq,DistinctSport,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(co_curricular,0))) = convert(varchar,(T.TextCode))) co_curricular,parent_phnoc,parent_nametamil,emailM,parentM_Mobile,alter_mobileno,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(motherocc,0))) = convert(varchar,T.TextCode)) motherocc,emailg,guardian_mobile,guardian_name,emailp,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(mIncome,0))) = convert(varchar,( T.TextCode))) mIncome,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(parent_income,0))) = convert(varchar,(T.TextCode))) parent_income,mother,parentF_Mobile,place_birth,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(partI_Language,0))) = convert(varchar,(T.TextCode))) partI_Language, (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(bldgrp,0))) = convert(varchar,(T.TextCode)) and TextCriteria='bgrou') bldgrp,Aadharcard_no, Aadhaar_Enroll_No,ElectionID_No, PanCard_No,Fax_No_Per,(select dt.Dept_Name from  degree d,Department dt,Course C where  d.Degree_Code =a.Alternativedegree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id)Alternativedegree_code,app_formno,CONVERT(varchar(10), date_applied,103) as date_applied,stud_name, case when sex='0' then 'Male' when sex='1' then 'Female' when sex='2' then 'Transgender' end sex,Relationship,parent_name,CONVERT(varchar(10), dob,103) as dob ,(Select TextVal FROM TextValTable T WHERE convert(varchar,(parent_occu)) = convert(varchar,(isnull(T.TextCode,0)))) parent_occu, (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(mother_tongue,0))) = convert(varchar,(T.TextCode)))mother_tongue,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(religion,0))) = convert(varchar,(T.TextCode))) religion,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(citizen,0))) = convert(varchar,(T.TextCode))) citizen, (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(community,0))) = convert(varchar,(T.TextCode))) community,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(caste,0))) = convert(varchar,(T.TextCode)) and TextCriteria='caste' ) caste,parent_addressC,Streetc,Cityc,TalukC,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(parent_statec,0))) = convert(varchar,(T.TextCode))) parent_statec,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(Countryc,0))) = convert(varchar,(T.TextCode)))Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc, alter_mobileno,parent_addressP,Streetp,cityp,TalukP, (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(parent_statep,0))) = convert(varchar,(T.TextCode)))parent_statep,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(Countryp,0))) = convert(varchar,(T.TextCode)))   Countryp,parent_pincodep,parent_phnop,a.degree_code,batch_year,a.college_code, SubCaste, case when isnull(isdisable,0)='0' then 'No' when isnull(isdisable,0)='1' then 'Yes' end isdisable ,isdisabledisc, islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,ncccadet ,C.Course_Name,c.Course_Id ,Dt.Dept_Name,CONVERT(varchar(10), fatherdob,103) as  fatherdob, CONVERT(varchar(10), motherdob,103) as  motherdob, ExsRank,ExsNumber,ReserveCategory,EconBackword,(Select TextVal FROM TextValTable T WHERE isnull(SecondLang,0) = T.TextCode) SecondLang , (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(ThirdLang,0))) = convert(varchar,(T.TextCode)))   ThirdLang,ExSPlace,tutionfee_waiver,isdonar,mar_status,mQualification,fqualification,idmark,Insurance_Amount,Insurance_Nominee,Ins_Nomin_Age,parentoldstud,Driving_details,IsDrivingLic,Convert(varchar(10),DrivLic_Issue_Date,103) as DrivLic_Issue_Date, IsInsurance,Insurance_InsBy,Insurance_NominRelation,a.mode, a.spouse_name,InternalPercentage, ExternalPercentage, Cut_Of_Mark,PCM_Percentage,Xmedium,totalmark,securedmark,PassYear,PassMonth,course_entno,(Select TextVal FROM TextValTable T WHERE s.course_code = T.TextCode) course_code,(Select TextVal FROM TextValTable T WHERE university_code = T.TextCode)university_code,Vocational_stream,Institute_name, percentage,instaddress,Sch_Clg_Type,(Select TextVal FROM TextValTable T WHERE medium = T.TextCode) medium,(Select TextVal FROM TextValTable T WHERE isnull(s.branch_code,0) = T.TextCode )branch_code ,(Select TextVal FROM TextValTable T WHERE isnull(s.Part1Language,0) = T.TextCode )Part1Language,(Select TextVal FROM TextValTable T WHERE isnull(s.Part2Language,0) = T.TextCode )Part2Language,isgrade,uni_state,registration_no,s.PCM_Percentage, type_semester,majorallied_percent,major_percent,type_major,tancet_mark,tancetmark_year,isnull(markPriority,1) as markPriority,s.insstate_code,s.branch_code ,s.course_entno,(select textval from textvaltable where CONVERT(varchar,TextCode)=CONVERT(varchar, a.subcaste) and TextCriteria='scast') SubCaste,case when Dalits='1' then 'Yes' when Dalits='0' then 'No' end Dalits,Parish_name,(select textval from textvaltable where CONVERT(varchar,TextCode)=CONVERT(varchar, a.seattype) and TextCriteria='seat')seattypeval from applyn a right join  Stud_prev_details s on a.app_no=s.app_no ,degree d,Department dt,Course C,collinfo ci  where d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id  and ci.college_code=c.college_code and isnull(IsConfirm,0)='1'  and a.app_no=@app_no end   ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }


            Onlinefeedbacksave = d2.GetFunction(" SELECT Routine_name FROM [INFORMATION_SCHEMA].[ROUTINES] WHERE [Routine_name] = 'student_print_details'");
            if (Onlinefeedbacksave.Trim() == "0")
            {
                comalter = " Create proc student_print_details @app_no varchar(20) as begin select dt.Dept_Name,ci.logo1,ci.address1,ci.address2,ci.address3,ci.pincode,ci.affliatedby,ci.district,ci.state,ci.pincode,a.mode,a.LastTCNo,a.college_code,ci.collname,ci.phoneno,ci.faxno,ci.email,ci.website,c.course_name,c.edu_level,type, a.app_no, case when isnull(TamilOrginFromAndaman,0)='0' then 'No' when isnull(TamilOrginFromAndaman,0)='1' then 'Yes' end TamilOrginFromAndaman, case when isnull(IsExService,0)='0' then 'No' when isnull(IsExService,0)='1' then 'Yes' end  IsExService,handy,visualhandy,case when isnull(first_graduate,0)='0' then 'No' when isnull(first_graduate,0)='1' then 'Yes' end  first_graduate, case when isnull(CampusReq,0)='0' then 'No' when isnull(CampusReq,0)='1' then 'Yes' end CampusReq,DistinctSport,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(co_curricular,0))) = convert(varchar,(T.TextCode))) co_curricular,parent_phnoc,parent_nametamil,emailM,parentM_Mobile,alter_mobileno,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(motherocc,0))) = convert(varchar,T.TextCode)) motherocc,emailg,guardian_mobile,guardian_name,emailp,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(mIncome,0))) = convert(varchar,( T.TextCode))) mIncome,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(parent_income,0))) = convert(varchar,(T.TextCode))) parent_income,mother,parentF_Mobile,place_birth,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(partI_Language,0))) = convert(varchar,(T.TextCode))) partI_Language, (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(bldgrp,0))) = convert(varchar,(T.TextCode)) and TextCriteria='bgrou') bldgrp,Aadharcard_no, Aadhaar_Enroll_No,ElectionID_No, PanCard_No,Fax_No_Per,a.Alternativedegree_code,app_formno,CONVERT(varchar(10), date_applied,103) as date_applied,stud_name, case when sex='0' then 'Male' when sex='1' then 'Female' when sex='2' then 'Transgender' end sex,Relationship,parent_name,CONVERT(varchar(10), dob,103) as dob ,(Select TextVal FROM TextValTable T WHERE convert(varchar,(parent_occu)) = convert(varchar,(isnull(T.TextCode,0)))) parent_occu, (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(mother_tongue,0))) = convert(varchar,(T.TextCode)))mother_tongue,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(religion,0))) = convert(varchar,(T.TextCode))) religion,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(citizen,0))) = convert(varchar,(T.TextCode))) citizen, (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(community,0))) = convert(varchar,(T.TextCode))) community,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(caste,0))) = convert(varchar,(T.TextCode)) and TextCriteria='caste' ) caste,parent_addressC,Streetc,Cityc,TalukC,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(parent_statec,0))) = convert(varchar,(T.TextCode))) parent_statec,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(Countryc,0))) = convert(varchar,(T.TextCode)))Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc, alter_mobileno,parent_addressP,Streetp,cityp,TalukP, (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(parent_statep,0))) = convert(varchar,(T.TextCode)))parent_statep,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(Countryp,0))) = convert(varchar,(T.TextCode)))   Countryp,parent_pincodep,parent_phnop,a.degree_code,batch_year,a.college_code, SubCaste, case when isnull(isdisable,0)='0' then 'No' when isnull(isdisable,0)='1' then 'Yes' end isdisable ,isdisabledisc, islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,ncccadet ,C.Course_Name,c.Course_Id ,Dt.Dept_Name,CONVERT(varchar(10), fatherdob,103) as  fatherdob, CONVERT(varchar(10), motherdob,103) as  motherdob, ExsRank,ExsNumber,ReserveCategory,EconBackword,(Select TextVal FROM TextValTable T WHERE isnull(SecondLang,0) = T.TextCode) SecondLang , (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(ThirdLang,0))) = convert(varchar,(T.TextCode)))   ThirdLang,ExSPlace,tutionfee_waiver,isdonar,mar_status,mQualification,fqualification,idmark,Insurance_Amount,Insurance_Nominee,Ins_Nomin_Age,parentoldstud,Driving_details,IsDrivingLic,Convert(varchar(10),DrivLic_Issue_Date,103) as DrivLic_Issue_Date, IsInsurance,Insurance_InsBy,Insurance_NominRelation,a.mode, a.spouse_name,InternalPercentage, ExternalPercentage, Cut_Of_Mark,PCM_Percentage,Xmedium,totalmark,securedmark,PassYear,PassMonth,course_entno,(Select TextVal FROM TextValTable T WHERE s.course_code = T.TextCode) course_code,(Select TextVal FROM TextValTable T WHERE university_code = T.TextCode)university_code,Vocational_stream,Institute_name, percentage,instaddress,Sch_Clg_Type,(Select TextVal FROM TextValTable T WHERE medium = T.TextCode) medium,(Select TextVal FROM TextValTable T WHERE isnull(s.branch_code,0) = T.TextCode )branch_code ,(Select TextVal FROM TextValTable T WHERE isnull(s.Part1Language,0) = T.TextCode )Part1Language,(Select TextVal FROM TextValTable T WHERE isnull(s.Part2Language,0) = T.TextCode )Part2Language,isgrade,uni_state,registration_no,s.PCM_Percentage, type_semester,majorallied_percent,major_percent,type_major,tancet_mark,tancetmark_year,isnull(markPriority,1) as markPriority,s.insstate_code,s.branch_code ,s.course_entno, case when isnull(a.direct_refer,0)=0 then 'Direct' when a.direct_refer=1 then 'Staff' when a.direct_refer=3 then 'Student' when a.direct_refer=2 then 'Others' else '' end Direct_refer, case when a.direct_refer=1 then (select appl_name from staff_appl_master sa,staffmaster s where sa.appl_no=s.appl_no and convert(varchar(20),s.staff_code)=a.refer_stcode) when direct_refer=3 then (select Stud_Name from applyn where convert(varchar(20),App_No)=a.refer_stcode) when direct_refer=2 then ((select textval from textvaltable where convert(varchar,TextCode)= refer_name)) else '' end refer_stcode,case when direct_refer=2 then ((select textval from textvaltable where convert(varchar,TextCode)= refer_agent)) else '' end as refer_agent from applyn a left join  Stud_prev_details s on a.app_no=s.app_no ,degree d,Department dt,Course C,collinfo ci  where d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id  and ci.college_code=c.college_code and isnull(IsConfirm,0)='1'  and a.app_no=@app_no  select photo from stdphoto where app_no=@app_no end ";
                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
            else
            {
                comalter = "  alter proc student_print_details @app_no varchar(20) as begin select dt.Dept_Name,ci.logo1,ci.address1,ci.address2,ci.address3,ci.pincode,ci.affliatedby,ci.district,ci.state,ci.pincode,a.mode,a.LastTCNo,a.college_code,ci.collname,ci.phoneno,ci.faxno,ci.email,ci.website,c.course_name,c.edu_level,type, a.app_no, case when isnull(TamilOrginFromAndaman,0)='0' then 'No' when isnull(TamilOrginFromAndaman,0)='1' then 'Yes' end TamilOrginFromAndaman, case when isnull(IsExService,0)='0' then 'No' when isnull(IsExService,0)='1' then 'Yes' end  IsExService,handy,visualhandy,case when isnull(first_graduate,0)='0' then 'No' when isnull(first_graduate,0)='1' then 'Yes' end  first_graduate, case when isnull(CampusReq,0)='0' then 'No' when isnull(CampusReq,0)='1' then 'Yes' end CampusReq,DistinctSport,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(co_curricular,0))) = convert(varchar,(T.TextCode))) co_curricular,parent_phnoc,parent_nametamil,emailM,parentM_Mobile,alter_mobileno,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(motherocc,0))) = convert(varchar,T.TextCode)) motherocc,emailg,guardian_mobile,guardian_name,emailp,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(mIncome,0))) = convert(varchar,( T.TextCode))) mIncome,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(parent_income,0))) = convert(varchar,(T.TextCode))) parent_income,mother,parentF_Mobile,place_birth,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(partI_Language,0))) = convert(varchar,(T.TextCode))) partI_Language, (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(bldgrp,0))) = convert(varchar,(T.TextCode)) and TextCriteria='bgrou') bldgrp,Aadharcard_no, Aadhaar_Enroll_No,ElectionID_No, PanCard_No,Fax_No_Per,a.Alternativedegree_code,app_formno,CONVERT(varchar(10), date_applied,103) as date_applied,stud_name, case when sex='0' then 'Male' when sex='1' then 'Female' when sex='2' then 'Transgender' end sex,Relationship,parent_name,CONVERT(varchar(10), dob,103) as dob ,(Select TextVal FROM TextValTable T WHERE convert(varchar,(parent_occu)) = convert(varchar,(isnull(T.TextCode,0)))) parent_occu, (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(mother_tongue,0))) = convert(varchar,(T.TextCode)))mother_tongue,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(religion,0))) = convert(varchar,(T.TextCode))) religion,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(citizen,0))) = convert(varchar,(T.TextCode))) citizen, (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(community,0))) = convert(varchar,(T.TextCode))) community,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(caste,0))) = convert(varchar,(T.TextCode)) and TextCriteria='caste' ) caste,parent_addressC,Streetc,Cityc,TalukC,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(parent_statec,0))) = convert(varchar,(T.TextCode))) parent_statec,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(Countryc,0))) = convert(varchar,(T.TextCode)))Countryc,parent_pincodec,Student_Mobile,StuPer_Id,parent_phnoc, alter_mobileno,parent_addressP,Streetp,cityp,TalukP, (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(parent_statep,0))) = convert(varchar,(T.TextCode)))parent_statep,(Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(Countryp,0))) = convert(varchar,(T.TextCode)))   Countryp,parent_pincodep,parent_phnop,a.degree_code,batch_year,a.college_code, SubCaste, case when isnull(isdisable,0)='0' then 'No' when isnull(isdisable,0)='1' then 'Yes' end isdisable ,isdisabledisc, islearningdis,missionarydisc,MissionaryChild,seattype,current_semester,ncccadet ,C.Course_Name,c.Course_Id ,Dt.Dept_Name,CONVERT(varchar(10), fatherdob,103) as  fatherdob, CONVERT(varchar(10), motherdob,103) as  motherdob, ExsRank,ExsNumber,ReserveCategory,EconBackword,(Select TextVal FROM TextValTable T WHERE isnull(SecondLang,0) = T.TextCode) SecondLang , (Select TextVal FROM TextValTable T WHERE convert(varchar,(isnull(ThirdLang,0))) = convert(varchar,(T.TextCode)))   ThirdLang,ExSPlace,tutionfee_waiver,isdonar,mar_status,mQualification,fqualification,idmark,Insurance_Amount,Insurance_Nominee,Ins_Nomin_Age,parentoldstud,Driving_details,IsDrivingLic,Convert(varchar(10),DrivLic_Issue_Date,103) as DrivLic_Issue_Date, IsInsurance,Insurance_InsBy,Insurance_NominRelation,a.mode, a.spouse_name,InternalPercentage, ExternalPercentage, Cut_Of_Mark,PCM_Percentage,Xmedium,totalmark,securedmark,PassYear,PassMonth,course_entno,(Select TextVal FROM TextValTable T WHERE s.course_code = T.TextCode) course_code,(Select TextVal FROM TextValTable T WHERE university_code = T.TextCode)university_code,Vocational_stream,Institute_name, percentage,instaddress,Sch_Clg_Type,(Select TextVal FROM TextValTable T WHERE medium = T.TextCode) medium,(Select TextVal FROM TextValTable T WHERE isnull(s.branch_code,0) = T.TextCode )branch_code ,(Select TextVal FROM TextValTable T WHERE isnull(s.Part1Language,0) = T.TextCode )Part1Language,(Select TextVal FROM TextValTable T WHERE isnull(s.Part2Language,0) = T.TextCode )Part2Language,isgrade,uni_state,registration_no,s.PCM_Percentage, type_semester,majorallied_percent,major_percent,type_major,tancet_mark,tancetmark_year,isnull(markPriority,1) as markPriority,s.insstate_code,s.branch_code ,s.course_entno, case when isnull(a.direct_refer,0)=0 then 'Direct' when a.direct_refer=1 then 'Staff' when a.direct_refer=3 then 'Student' when a.direct_refer=2 then 'Others' else '' end Direct_refer, case when a.direct_refer=1 then (select appl_name from staff_appl_master sa,staffmaster s where sa.appl_no=s.appl_no and convert(varchar(20),s.staff_code)=a.refer_stcode) when direct_refer=3 then (select Stud_Name from applyn where convert(varchar(20),App_No)=a.refer_stcode) when direct_refer=2 then ((select textval from textvaltable where convert(varchar,TextCode)= refer_name)) else '' end refer_stcode,case when direct_refer=2 then ((select textval from textvaltable where convert(varchar,TextCode)= refer_agent)) else '' end as refer_agent from applyn a left join  Stud_prev_details s on a.app_no=s.app_no ,degree d,Department dt,Course C,collinfo ci  where d.Degree_Code =a.degree_code and d.Dept_Code =dt.Dept_Code and c.Course_Id =d.Course_Id  and ci.college_code=c.college_code and isnull(IsConfirm,0)='1'  and a.app_no=@app_no  select photo from stdphoto where app_no=@app_no end ";

                commnalter = d2.update_method_wo_parameter(comalter, "Text");
            }
        }
        catch { }
    }

    public void SastrAlterQuery()
    {
        try
        {
            string AltQ = string.Empty;
            int commnalter = 0;
            AltQ = "";
            string tc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ST_RankCriteria' ");
            if (tc == "0")
                AltQ = "  Create Table ST_RankCriteria (ST_RankPK bigint identity(1,1),CriteriaCode bigint,CriteriaValue varchar(max),CriteriaCodevalue varchar(max),SSLCCriteriaValue varchar(max),SSLCCriteriaCodeValue varchar(max),CollegeCode int,BatchYear int,CourseID int,EduLevel varchar(20))";
            if (AltQ.Trim() != "")
            {
                commnalter = d2.update_method_wo_parameter(AltQ, "Text");
            }

            AltQ = "";
            tc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ST_DaySlot' ");
            if (tc == "0")
                AltQ = "  Create Table ST_DaySlot (ST_DaySlotPK bigint identity(1,1),SlotDate DateTime,SlotTime varchar(500),SlotFromTime varchar(4),SlotToTime varchar(4),CollegeCode tinyint,BatchYear int,CourseID int,EduLevel varchar(20))";
            if (AltQ.Trim() != "")
            {
                commnalter = d2.update_method_wo_parameter(AltQ, "Text");
            }

            AltQ = "";
            tc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ST_RankListSlot' ");
            if (tc == "0")
                AltQ = "  Create table ST_RankListSlot (ST_RankListPk Bigint identity(1,1) primary key,ST_DaySlotFk Bigint,RankFrom int,RankTo int)";
            if (AltQ.Trim() != "")
            {
                commnalter = d2.update_method_wo_parameter(AltQ, "Text");
            }

            AltQ = "";
            tc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ST_Student_Mark_Detail' ");
            if (tc == "0")
                AltQ = "  Create Table ST_Student_Mark_Detail (ST_StudentPK bigint identity(1,1) constraint PK_ST_Student_Mark_Detail_ST_StudentPK primary key,ST_AppNo numeric foreign key references applyn(app_no),jeeRollNo nvarchar(max),jeeMarkSec decimal (10,0),jeeMaxMark decimal (10,0),jeeStateRank int,jeeAllIndiaRank int,yearPassing int,monthPassing tinyint,board bigint,schoolName nvarchar(max),schoolAddress nvarchar(max),schoolDist bigint,schoolState bigint,schoolMediumIns bigint,schoolRegNo nvarchar(max),HSCMarkSec decimal (10,0),HSCMaxMark decimal (10,0),ChyMark decimal(10,0),ChyMaxMark decimal(10,0),PhyMark decimal (10,0),PhyMaxMark decimal (10,0),MathsMark decimal(10,0),MathsMaxMark decimal(10,0),HSCDistrict bigint,SSLCDistrict bigint,SSLCSecMark decimal (10,0),SSLCMaxMark decimal (10,0),CombinedScore decimal (10,5)) ";
            if (AltQ.Trim() != "")
            {
                commnalter = d2.update_method_wo_parameter(AltQ, "Text");
            }

            AltQ = "";
            tc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ST_Stud_BoardWiseTopper' ");
            if (tc == "0")
                AltQ = "  Create Table ST_Stud_BoardWiseTopper(ST_StudBoardPK bigint identity (1,1),BoardFK bigint,TopperMark decimal(10,0),MaximumMark decimal(10,0),MathsMark decimal(10,0),PhysicsMark decimal(10,0),ChemistyMark decimal(10,0),CollegeCode int,batchYear int) ";
            if (AltQ.Trim() != "")
            {
                commnalter = d2.update_method_wo_parameter(AltQ, "Text");
            }

            AltQ = "";
            tc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ST_RankTable' ");
            if (tc == "0")
                AltQ = "  Create table ST_RankTable (ST_RankPK bigint identity(1,1),ST_AppNo bigint,ST_RankCriteria bigint,ST_Rank int) ";
            if (AltQ.Trim() != "")
            {
                commnalter = d2.update_method_wo_parameter(AltQ, "Text");
            }

            AltQ = "";
            tc = d2.GetFunction("  SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ST_SecurityMark' ");
            if (tc == "0")
                AltQ = "  Create Table ST_SecurityMark (ST_SecurityPK bigint identity(1,1),ST_AppNo bigint,CombinedScore decimal(10,5),MathsMark decimal(10,5),PhysicsMark decimal(10,5),ChemistryMark decimal(10,5),Dob datetime,ApplicationNo varchar(100)) ";
            if (AltQ.Trim() != "")
            {
                commnalter = d2.update_method_wo_parameter(AltQ, "Text");
            }
            //Alter Query 
            AltQ = "";
            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'seattype_cat' AND COLUMN_NAME = 'collegeCode'");
            if (tc == "0")
                AltQ += " alter table seattype_cat add collegeCode tinyint";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'seattype_cat' AND COLUMN_NAME = 'NoOfSeats'");
            if (tc == "0")
                AltQ += " alter table seattype_cat add NoOfSeats int";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'seattype_cat' AND COLUMN_NAME = 'allotedSeats'");
            if (tc == "0")
                AltQ += " alter table seattype_cat add allotedSeats int default 0 not null";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'vehicle_master' AND COLUMN_NAME = 'firstYearStudent'");
            if (tc == "0")
                AltQ += " alter table vehicle_master add firstYearStudent int";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'courseID'");
            if (tc == "0")
                AltQ += " alter table applyn add courseID numeric constraint FK_applyn_courseID foreign key references Course(Course_Id)";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'residenceFPhone'");
            if (tc == "0")
                AltQ += " alter table applyn add residenceFPhone varchar(500)";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'residenceMPhone'");
            if (tc == "0")
                AltQ += " alter table applyn add residenceMPhone varchar(500) ";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'residenceGPhone'");
            if (tc == "0")
                AltQ += " alter table applyn add residenceGPhone varchar(500)  ";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'parentG_offPhn'");
            if (tc == "0")
                AltQ += " alter table applyn add parentG_offPhn varchar(500)  ";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn' AND COLUMN_NAME = 'gQualification'");
            if (tc == "0")
                AltQ += " alter table applyn add gQualification nvarchar(max) ";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'applyn'");
            if (tc != "0")
                AltQ += " alter table applyn alter column courseID numeric ; alter table applyn alter column residenceFPhone varchar(500) ;alter table applyn alter column residenceMPhone varchar(500); alter table applyn alter column residenceGPhone varchar(500) ; alter table applyn alter column parentG_offPhn varchar(500) ; alter table applyn alter column parent_name nvarchar(max);alter table applyn alter column mother nvarchar(max); alter table applyn alter column guardian_name nvarchar(max); alter table applyn alter column parentG_offPhn nvarchar(max) ";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'ST_Student_Mark_Detail'");
            if (tc != "0")
                AltQ += " alter table ST_Student_Mark_Detail alter column schoolRegNo nvarchar(max) ; alter table ST_Student_Mark_Detail alter column jeeRollNo nvarchar(max) ; alter table ST_Student_Mark_Detail alter column schoolName nvarchar(max) ; alter table ST_Student_Mark_Detail alter column schoolAddress nvarchar(max) ";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'Certificate_Received'");
            if (tc == "0")
                AltQ += " alter table StudCertDetails_New add Certificate_Received bit ";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'StudCertDetails_New' AND COLUMN_NAME = 'Certificate_submitdate'");
            if (tc == "0")
                AltQ += " alter table StudCertDetails_New add Certificate_submitdate datetime ";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'Co_masterValues' AND COLUMN_NAME = 'MasterPriority'");
            if (tc == "0")
                AltQ += " alter table Co_masterValues add MasterPriority int default 0 not null";

            tc = d2.GetFunction(" SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = 'collinfo' AND COLUMN_NAME = 'registrarSign'");
            if (tc == "0")
                AltQ += " alter table collinfo add registrarSign image ";


            if (AltQ.Trim() != "")
            {
                commnalter = d2.update_method_wo_parameter(AltQ, "Text");
            }
        }
        catch
        {

        }
    }

    public void Timetablequery()
    {
        string tablename = "";//16.06.17 barath
        if (!IsTableAvailable("TT_ClassTimetable"))
        {
            tablename = " CREATE TABLE TT_ClassTimetable(	TT_ClassPK bigint IDENTITY(1,1) NOT NULL primary key,TT_colCode tinyint NOT NULL,TT_batchyear int NOT NULL,TT_degCode bigint NOT NULL,TT_sem tinyint NOT NULL,TT_sec varchar(20) NULL,TT_lastRec bit NOT NULL,TT_name varchar(200) NOT NULL,TT_date datetime NOT NULL,TT_classAdvisor varchar(30) NULL)";
            dirAcc.updateData(tablename);
        }
        tablename = "";
        if (!IsTableAvailable("TT_ClassTimetableDet"))
        {
            tablename = "CREATE TABLE TT_ClassTimetableDet(TT_ClassDetPK bigint IDENTITY(1,1) NOT NULL primary key,TT_subno numeric(18, 0) NOT NULL,TT_staffcode varchar(100) NOT NULL,TT_Room bigint NOT NULL,TT_Day tinyint NOT NULL,TT_Hour tinyint NOT NULL,	TT_ClassFk bigint NOT NULL FOREIGN KEY(TT_ClassFk)REFERENCES TT_ClassTimetable (TT_ClassPK))";
            dirAcc.updateData(tablename);
        }
        tablename = "";
        if (!IsTableAvailable("TT_AlterTimetableDet"))
        {
            tablename = "CREATE TABLE TT_AlterTimetableDet(TT_AlterDetPK bigint IDENTITY(1,1) NOT NULL PRIMARY KEY,TT_subno numeric(18, 0) NOT NULL,TT_staffcode varchar(100) NOT NULL,TT_Room bigint NOT NULL,TT_Day tinyint NOT NULL,TT_Hour tinyint NOT NULL,TT_ClassFk bigint NOT NULL FOREIGN KEY(TT_ClassFk)REFERENCES TT_ClassTimetable (TT_ClassPK),TT_AlterDate datetime NOT NULL)";
            dirAcc.updateData(tablename);
        }
        tablename = "";
        if (!IsTableAvailable("TT_Day_Dayorder"))
        {
            tablename = "CREATE TABLE [dbo].[TT_Day_Dayorder](	[TT_Day_DayorderPK] [bigint] IDENTITY(1,1) NOT NULL,[Daydiscription][varchar](50) NOT NULL,[Daytype] [bit] NOT NULL,PRIMARY KEY CLUSTERED (	[TT_Day_DayorderPK] ASC)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]) ON [PRIMARY]";
            dirAcc.updateData(tablename);
        }
        tablename = "";
        if (IsTableAvailable("subject"))
        {
            if (!IsTableColumnAvailable("subject", "practicalPair"))
            {
                dirAcc.updateData(" alter table subject add practicalPair tinyint not null default 0");
            }
        }
        ExecuteQuery("Alter table Eligibility_list Add Remarks nvarchar(max) default '' not null", "Eligibility_list", "Remarks", 1);

        if (!IsTableAvailable("PrevGradeMaster"))
        {
            tablename = " create table PrevGradeMaster(Grade nvarchar(10),Frange float,Trange	float,QExamCode bigint,Average as Round((Frange+Trange)/2,2))";
            dirAcc.updateData(tablename);
        }
    }

    /// <summary>
    /// To Check Table Name Exists or Not
    /// </summary>
    /// <param name="tableName">pass table Name</param>
    /// <returns>return True if Exists. Otherwise false</returns>
    private bool IsTableAvailable(string tableName)
    {
        bool isAvail = false;
        try
        {
            string qryTable = string.Empty;
            if (!string.IsNullOrEmpty(tableName))
            {
                qryTable = dirAcc.selectScalarString("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES where TABLE_NAME='" + tableName + "'");
            }
            if (string.IsNullOrEmpty(qryTable) || qryTable.Trim() == "0")
            {
                isAvail = false;
            }
            else
            {
                isAvail = true;
            }
        }
        catch { }
        return isAvail;
    }

    /// <summary>
    ///  To Check Column Name Exists in The Table 
    /// </summary>
    /// <param name="tableName">pass table Name</param>
    /// <param name="columnName">pass column Name</param>
    /// <returns>return True if Exists. Otherwise false</returns>
    private bool IsTableColumnAvailable(string tableName, string columnName)
    {
        bool isAvail = false;
        try
        {
            string qryTableColumn = string.Empty;
            if (!string.IsNullOrEmpty(tableName) && !string.IsNullOrEmpty(columnName))
            {
                if (IsTableAvailable(tableName))
                    qryTableColumn = dirAcc.selectScalarString("SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '" + tableName + "' AND COLUMN_NAME = '" + columnName + "'");
            }
            if (string.IsNullOrEmpty(qryTableColumn) || qryTableColumn.Trim() == "0")
            {
                isAvail = false;
            }
            else
            {
                isAvail = true;
            }
        }
        catch { }
        return isAvail;
    }

    /// <summary>
    /// column datatype change
    /// </summary>
    /// <param name="tableName"></param>
    /// <param name="columnName"></param>
    /// <param name="Datatype"></param>
    /// <returns></returns>
    private bool TableColumndataTypeAlter(string tableName, string columnName, string dataType)
    {
        bool ischange = false; string qryTableColumn = string.Empty;
        if (!string.IsNullOrEmpty(tableName) && !string.IsNullOrEmpty(columnName))
            if (IsTableAvailable(tableName))
                if (IsTableColumnAvailable(tableName, columnName))
                    qryTableColumn = dirAcc.selectScalarString("select TABLE_NAME from INFORMATION_SCHEMA.COLUMNS where TABLE_NAME='" + tableName + "' and COLUMN_NAME='" + columnName + "' and DATA_TYPE<>'" + dataType + "'");
        if (string.IsNullOrEmpty(qryTableColumn) || qryTableColumn.Trim() == "0")
            ischange = false;
        else
            ischange = true;
        return ischange;
    }

    /// <summary>
    ///  To Check Constraint Exists in The Table or Not
    /// </summary>
    /// <param name="tableName">pass table Name</param>
    /// <param name="columnName">pass column Name</param>
    /// /// <param name="columnName">pass column Name</param>
    /// <returns>return True if Exists. Otherwise false</returns>
    private bool IsTableConstraintAvailable(string tableName, string constraintType, string constraintName = null)
    {
        bool isAvail = false;
        try
        {
            string qryTableColumn = string.Empty;
            if (!string.IsNullOrEmpty(tableName) && !string.IsNullOrEmpty(constraintType) && IsTableAvailable(tableName))//&& !string.IsNullOrEmpty(columnName) && IsTableColumnAvailable(tableName, columnName)
                qryTableColumn = dirAcc.selectScalarString("select distinct CONSTRAINT_TYPE from INFORMATION_SCHEMA.TABLE_CONSTRAINTS where TABLE_NAME='" + tableName + "' and CONSTRAINT_TYPE='" + constraintType + "' " + ((!string.IsNullOrEmpty(constraintName)) ? " and CONSTRAINT_NAME='" + constraintName + "'" : ""));
            if (string.IsNullOrEmpty(qryTableColumn) || qryTableColumn.Trim() == "0")
                isAvail = false;
            else
                isAvail = true;
        }
        catch { }
        return isAvail;
    }

    private bool IsDefaultContraintAvailable(string tableName, string columnName, string constraintName = null)
    {
        bool isAvail = false;
        try
        {
            string qryTableColumn = string.Empty;
            if (!string.IsNullOrEmpty(tableName) && !string.IsNullOrEmpty(columnName) && IsTableColumnAvailable(tableName, columnName) && IsTableAvailable(tableName))
                qryTableColumn = dirAcc.selectScalarString("SELECT COLUMN_DEFAULT FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME ='" + tableName + "' and COLUMN_NAME='" + columnName + "' AND COLUMN_DEFAULT IS NOT NULL");
            if (string.IsNullOrEmpty(qryTableColumn) || qryTableColumn.Trim() == "0")
                isAvail = false;
            else
                isAvail = true;
        }
        catch { }
        return isAvail;
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="query"></param>
    /// <param name="tableName">pass table name</param>
    /// <param name="columnName">pass column name if you want to alter or modify</param>
    /// <param name="type">0 - Create table Table ; 1 - alter add column ;  2 - modify column name/datatype; 3 - modify column datatype if type is other than specified</param>
    private void ExecuteQuery(string query, string tableName, string columnName = null, byte type = 0, string dataType = null)
    {
        try
        {
            if (!string.IsNullOrEmpty(query) && !string.IsNullOrEmpty(tableName))
            {
                switch (type)
                {
                    case 0:
                        if (!IsTableAvailable(tableName))
                        {
                            dirAcc.updateData(query);
                        }
                        break;
                    case 1:
                        if (!string.IsNullOrEmpty(columnName))
                        {
                            if (IsTableAvailable(tableName))
                            {
                                if (!IsTableColumnAvailable(tableName, columnName))
                                {
                                    dirAcc.updateData(query);
                                }
                            }
                        }
                        break;
                    case 2:
                        if (!string.IsNullOrEmpty(columnName))
                        {
                            if (IsTableAvailable(tableName))
                            {
                                if (IsTableColumnAvailable(tableName, columnName))
                                {
                                    dirAcc.updateData(query);
                                }
                            }
                        }
                        break;
                    case 3:
                        if (!string.IsNullOrEmpty(columnName))
                        {
                            if (TableColumndataTypeAlter(tableName, columnName, dataType))
                            {
                                dirAcc.updateData(query);
                            }
                        }
                        break;
                }
            }
        }
        catch
        {
        }
    }

    /// <summary>
    /// 
    /// </summary>
    /// <param name="query"></param>
    /// <param name="tableName">pass table name</param>
    /// <param name="columnName">pass column name</param>
    /// <param name="constraintType">Constraint Type eg. Primary key,Foreign Key,Check,UNIQUE</param>
    /// <param name="contraintName"></param>
    /// <param name="type"></param>
    private void AddOrDeleteContraints(string query, string tableName, string columnName, string constraintType, string contraintName = null, byte type = 0)
    {
        try
        {
            if (!string.IsNullOrEmpty(query) && !string.IsNullOrEmpty(tableName) && !string.IsNullOrEmpty(columnName))
            {
                switch (type)
                {
                    case 0:
                        if (IsTableAvailable(tableName) && IsTableColumnAvailable(tableName, columnName) && !IsTableConstraintAvailable(tableName, constraintType, contraintName))
                        {
                            dirAcc.updateData(query);
                        }
                        break;
                    case 1:
                        if (IsTableAvailable(tableName) && IsTableColumnAvailable(tableName, columnName) && IsTableConstraintAvailable(tableName, constraintType, contraintName))
                        {
                            dirAcc.updateData(query);
                        }
                        break;
                }
            }
        }
        catch
        {
        }
    }

    private void AddOrChangeDefaultContraints(string query, string tableName, string columnName, string defaultValue = null, string constraintName = null, byte type = 0)
    {
        try
        {
            if (!string.IsNullOrEmpty(query) && !string.IsNullOrEmpty(tableName) && !string.IsNullOrEmpty(columnName))
            {
                switch (type)
                {
                    case 0:
                        if (IsTableAvailable(tableName) && IsTableColumnAvailable(tableName, columnName) && !IsDefaultContraintAvailable(tableName, columnName))
                        {
                            dirAcc.updateData(query);
                        }
                        break;
                    case 1:
                        if (IsTableAvailable(tableName) && IsTableColumnAvailable(tableName, columnName) && IsDefaultContraintAvailable(tableName, columnName))
                        {
                            dirAcc.updateData(query);
                        }
                        break;
                }
            }
        }
        catch
        {
        }
    }


    /// <summary>
    /// To Check Procedure is Exists or Not
    /// </summary>
    /// <param name="procedureName">Pass Procedure Name</param>
    /// <returns>if Procedure Name Exist, return True Else return false</returns>
    private bool IsStoredProcedureAvailable(string procedureName)
    {
        bool isAvail = false;
        try
        {
            string qryProcedure = string.Empty;
            if (!string.IsNullOrEmpty(procedureName))
            {
                qryProcedure = dirAcc.selectScalarString("SELECT Routine_name FROM INFORMATION_SCHEMA.ROUTINES WHERE Routine_name = '" + procedureName + "'");
            }
            if (string.IsNullOrEmpty(qryProcedure) || qryProcedure.Trim() == "0")
            {
                isAvail = false;
            }
            else
            {
                isAvail = true;
            }
        }
        catch
        {

        }
        return isAvail;
    }

    /// <summary>
    /// To Execute Procudures
    /// </summary>
    /// <param name="procedureName">give name of procedure</param>
    /// <param name="procedureQuery"></param>
    /// <param name="type">0 - Create Procedure; 1 - Alter/Modify Procedure</param>
    private void ExecuteProcedure(string procedureName, string procedureQuery, byte type = 0)
    {
        try
        {
            if (!string.IsNullOrEmpty(procedureName) && !string.IsNullOrEmpty(procedureQuery))
            {
                procedureQuery = procedureQuery.Trim();
                switch (type)
                {
                    case 0:
                        if (!IsStoredProcedureAvailable(procedureName))
                        {
                            dirAcc.updateData(procedureQuery);
                        }
                        break;
                    case 1:
                        if (IsStoredProcedureAvailable(procedureName))
                        {
                            dirAcc.updateData(procedureQuery);
                        }
                        break;
                }
            }
        }
        catch { }
    }

    /// <summary>
    /// Update all added by barath 01.06.17
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    protected void patchgrid_RowDataBound(object sender, System.Web.UI.WebControls.GridViewRowEventArgs e)
    {
        try
        {
            if (e.Row.RowType == DataControlRowType.Header)
            {
                e.Row.Cells[6].Attributes["onclick"] = Page.ClientScript.GetPostBackEventReference(this.patchgrid, "UpdateAll$" + e.Row.RowIndex);
            }
        }
        catch { }
    }

    protected void patchgrid_RowCommand(object sender, GridViewCommandEventArgs e)
    {
        try
        {
            // int row = Convert.ToInt32(e.CommandArgument);
            if (e.CommandName == "UpdateAll")
            {
                for (int i = 0; i < patchgrid.Rows.Count; i++)
                {
                    string modulename = string.Empty;
                    string patchname = string.Empty;
                    string btn_download = string.Empty;

                    modulename = ((patchgrid.Rows[i].FindControl("lblModul_name") as Label).Text);
                    patchname = ((patchgrid.Rows[i].FindControl("lbl_patchname") as Label).Text);
                    btn_download = ((patchgrid.Rows[i].FindControl("lbl_modifiy_date") as Label).ID);
                    forginkey();
                    if (!string.IsNullOrEmpty(modulename))
                    {
                        switch (modulename)
                        {
                            case "Finance":
                                try
                                {
                                    finMasterTables();
                                    financeStoreProcedure();
                                }
                                catch { }
                                break;
                            case "Academic":
                                try
                                {
                                    acdamic();
                                    acdamic2();
                                    acdamic3();
                                    acdamic4();
                                    AcdQuery();
                                    AcdAltQuery();
                                    AcademicProceess();
                                    alumini();
                                    LatestAlterQueryForAcademic();
                                    SastrAlterQuery();
                                    Timetablequery();
                                }
                                catch { }
                                break;
                            case "FeedBack":
                                try
                                {
                                    FB_query_creation();
                                    comman();
                                }
                                catch { }
                                break;
                            case "Inventory":
                                try
                                {
                                    Inventory();
                                }
                                catch { }
                                break;
                            case "Hostel":
                                try
                                {
                                    hostelquery();
                                }
                                catch { }
                                break;
                            case "Request":
                                try
                                {
                                    request();
                                }
                                catch { }
                                break;
                            case "SMS":
                                try
                                {
                                    sms();
                                    sms1_3();
                                    sms4();
                                }
                                catch { }
                                break;
                            case "COE":
                                try
                                {
                                    COE();
                                    COE1();
                                    COE3rd();
                                    COE4TH();
                                    COEPROCEES();
                                }
                                catch { }
                                break;
                            case "Question":
                                try
                                {
                                    questionquery();
                                }
                                catch { }

                                break;
                            case "HR":
                                try
                                {
                                    HR();
                                    hr1();
                                    hr3();
                                    hr4();
                                }
                                catch { }
                                break;
                            case "Security":
                                try
                                {
                                    security_3();
                                    security4();
                                }
                                catch { }
                                break;
                            case "Transport":
                                try
                                {

                                    transport();
                                }
                                catch { }
                                break;
                            case "Library":
                                try
                                {
                                    library();
                                    library1_3();
                                    library4();
                                }
                                catch { }
                                break;
                            default:
                                break;
                        }
                    }
                }
            }
        }
        catch { }
    }

}


